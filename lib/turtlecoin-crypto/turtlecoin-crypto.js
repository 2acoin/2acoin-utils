
var TurtleCoinCrypto = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  return (
function(TurtleCoinCrypto) {
  TurtleCoinCrypto = TurtleCoinCrypto || {};

// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof TurtleCoinCrypto !== 'undefined' ? TurtleCoinCrypto : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;



// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort();
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}


var Runtime = {
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html





/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}




// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 577248,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5820128,
    DYNAMIC_BASE = 5820128,
    DYNAMICTOP_PTR = 577216;




var TOTAL_STACK = 5242880;

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;






// Endianness check (note: assumes compiler arch was little-endian)

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math.imul || Math.imul(0xffffffff, 5) !== -5) Math.imul = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};


if (!Math.clz32) Math.clz32 = function(x) {
  var n = 32;
  var y = x >> 16; if (y) { n -= 16; x = y; }
  y = x >> 8; if (y) { n -= 8; x = y; }
  y = x >> 4; if (y) { n -= 4; x = y; }
  y = x >> 2; if (y) { n -= 2; x = y; }
  y = x >> 1; if (y) return n - 2;
  return n - x;
};

if (!Math.trunc) Math.trunc = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 577240;
/* global initializers */  __ATINIT__.push({ func: function() { globalCtors() } });


memoryInitializer = "turtlecoin-crypto.js.mem";





/* no memory initializer */
var tempDoublePtr = 577232

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
      }
    }var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var adj = EXCEPTIONS.infos[ptr].adjusted;
          var len = adj.length;
          for (var i = 0; i < len; i++) {
            if (adj[i] === adjusted) {
              return ptr;
            }
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_thread_atexit() {
  return _atexit.apply(null, arguments)
  }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted.push(thrown);
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___gxx_personality_v0() {
    }

  
    

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH_FS={resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(19);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(6);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(5);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(11);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(6);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(5);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(1);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[2];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(39);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(39);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(22);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(12);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(22);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(-e.errno); // syscall errnos are negated, node's are not
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(22);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(-e.errno);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(2);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(1);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(1);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(1);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(1);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(1);
        },readlink:function (node) {
          throw new FS.ErrnoError(1);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(5);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        }}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("random_device"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
          };
          this.setErrno(errno);
          this.message = 'FS error';
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(9);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -20;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -22;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -22;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -22;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -13;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(9);
        return stream;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        return low;
      },getZero:function () {
        SYSCALLS.get();
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // Can't handle 64-bit integers
      if (!(offset_high == -1 && offset_low < 0) &&
          !(offset_high == 0 && offset_low >= 0)) {
        return -75;
      }
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((result)>>2)]=tempI64[0],HEAP32[(((result)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -22;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -22; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(22);
          return -1;
        default: {
          return -22;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -25;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -25;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -25;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -25;
          return -22; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -25;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -25;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

   

  
  var structRegistrations={};
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function __embind_finalize_value_object(structType) {
      var reg = structRegistrations[structType];
      delete structRegistrations[structType];
  
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
      var fieldRecords = reg.fields;
      var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
                concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
      whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
          var fields = {};
          fieldRecords.forEach(function(field, i) {
              var fieldName = field.fieldName;
              var getterReturnType = fieldTypes[i];
              var getter = field.getter;
              var getterContext = field.getterContext;
              var setterArgumentType = fieldTypes[i + fieldRecords.length];
              var setter = field.setter;
              var setterContext = field.setterContext;
              fields[fieldName] = {
                  read: function(ptr) {
                      return getterReturnType['fromWireType'](
                          getter(getterContext, ptr));
                  },
                  write: function(ptr, o) {
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                      runDestructors(destructors);
                  }
              };
          });
  
          return [{
              name: reg.name,
              'fromWireType': function(ptr) {
                  var rv = {};
                  for (var i in fields) {
                      rv[i] = fields[i].read(ptr);
                  }
                  rawDestructor(ptr);
                  return rv;
              },
              'toWireType': function(destructors, o) {
                  // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                  // assume all fields are present without checking.
                  for (var fieldName in fields) {
                      if (!(fieldName in o)) {
                          throw new TypeError('Missing field');
                      }
                  }
                  var ptr = rawConstructor();
                  for (fieldName in fields) {
                      fields[fieldName].write(ptr, o[fieldName]);
                  }
                  if (destructors !== null) {
                      destructors.push(rawDestructor, ptr);
                  }
                  return ptr;
              },
              'argPackAdvance': 8,
              'readValueFromPointer': simpleReadValueFromPointer,
              destructorFunction: rawDestructor,
          }];
      });
    }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  
  var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
              
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
              
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
              
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_value_object(
      rawType,
      name,
      constructorSignature,
      rawConstructor,
      destructorSignature,
      rawDestructor
    ) {
      structRegistrations[rawType] = {
          name: readLatin1String(name),
          rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
          rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
          fields: [],
      };
    }

  function __embind_register_value_object_field(
      structType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      structRegistrations[structType].fields.push({
          fieldName: readLatin1String(fieldName),
          getterReturnType: getterReturnType,
          getter: embind__requireFunction(getterSignature, getter),
          getterContext: getterContext,
          setterArgumentType: setterArgumentType,
          setter: embind__requireFunction(setterSignature, setter),
          setterContext: setterContext,
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }


  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function _abort() {
      Module['abort']();
    }

   

   

   

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _ftime(p) {
      var millis = Date.now();
      HEAP32[((p)>>2)]=(millis/1000)|0;
      HEAP16[(((p)+(4))>>1)]=millis % 1000;
      HEAP16[(((p)+(6))>>1)]=0; // Obsolete field
      HEAP16[(((p)+(8))>>1)]=0; // Obsolete field
      return 0;
    }

  
  var ___tm_current=577072;
  
  
  var ___tm_timezone=(stringToUTF8("GMT", 577120, 4), 577120);function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }



  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

  function _pthread_create() {
      return 11;
    }

  
  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }function _pthread_exit(status) {
      _exit(status);
    }

  function _pthread_join() {}

  
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('OOM');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    } 

  var ___dso_handle=577056;
FS.staticInit();;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var ASSERTIONS = false;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array


var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array }

var asmLibraryArg = {
  "a": abort,
  "b": setTempRet0,
  "c": getTempRet0,
  "d": ClassHandle,
  "e": ClassHandle_clone,
  "f": ClassHandle_delete,
  "g": ClassHandle_deleteLater,
  "h": ClassHandle_isAliasOf,
  "i": ClassHandle_isDeleted,
  "j": RegisteredClass,
  "k": RegisteredPointer,
  "l": RegisteredPointer_deleteObject,
  "m": RegisteredPointer_destructor,
  "n": RegisteredPointer_fromWireType,
  "o": RegisteredPointer_getPointee,
  "p": __ZSt18uncaught_exceptionv,
  "q": ___cxa_allocate_exception,
  "r": ___cxa_begin_catch,
  "s": ___cxa_find_matching_catch,
  "t": ___cxa_free_exception,
  "u": ___cxa_thread_atexit,
  "v": ___cxa_throw,
  "w": ___gxx_personality_v0,
  "x": ___resumeException,
  "y": ___setErrNo,
  "z": ___syscall140,
  "A": ___syscall146,
  "B": ___syscall20,
  "C": ___syscall221,
  "D": ___syscall3,
  "E": ___syscall5,
  "F": ___syscall54,
  "G": ___syscall6,
  "H": __embind_finalize_value_object,
  "I": __embind_register_bool,
  "J": __embind_register_class,
  "K": __embind_register_class_constructor,
  "L": __embind_register_class_function,
  "M": __embind_register_emval,
  "N": __embind_register_float,
  "O": __embind_register_function,
  "P": __embind_register_integer,
  "Q": __embind_register_memory_view,
  "R": __embind_register_std_string,
  "S": __embind_register_std_wstring,
  "T": __embind_register_value_object,
  "U": __embind_register_value_object_field,
  "V": __embind_register_void,
  "W": __emval_decref,
  "X": __emval_incref,
  "Y": __emval_register,
  "Z": __emval_take_value,
  "_": _abort,
  "$": _atexit,
  "aa": _clock,
  "ab": _embind_repr,
  "ac": _emscripten_get_heap_size,
  "ad": _emscripten_memcpy_big,
  "ae": _emscripten_resize_heap,
  "af": _exit,
  "ag": _ftime,
  "ah": _gmtime,
  "ai": _gmtime_r,
  "aj": _pthread_create,
  "ak": _pthread_exit,
  "al": _pthread_join,
  "am": abortOnCannotGrowMemory,
  "an": constNoSmartPtrRawPointerToWireType,
  "ao": count_emval_handles,
  "ap": craftInvokerFunction,
  "aq": createNamedFunction,
  "ar": downcastPointer,
  "as": embind__requireFunction,
  "at": embind_init_charCodes,
  "au": ensureOverloadTable,
  "av": exposePublicSymbol,
  "aw": extendError,
  "ax": floatReadValueFromPointer,
  "ay": flushPendingDeletes,
  "az": genericPointerToWireType,
  "aA": getBasestPointer,
  "aB": getInheritedInstance,
  "aC": getInheritedInstanceCount,
  "aD": getLiveInheritedInstances,
  "aE": getShiftFromSize,
  "aF": getTypeName,
  "aG": get_first_emval,
  "aH": heap32VectorToArray,
  "aI": init_ClassHandle,
  "aJ": init_RegisteredPointer,
  "aK": init_embind,
  "aL": init_emval,
  "aM": integerReadValueFromPointer,
  "aN": makeClassHandle,
  "aO": makeLegalFunctionName,
  "aP": new_,
  "aQ": nonConstNoSmartPtrRawPointerToWireType,
  "aR": readLatin1String,
  "aS": registerType,
  "aT": replacePublicSymbol,
  "aU": requireRegisteredType,
  "aV": runDestructor,
  "aW": runDestructors,
  "aX": setDelayFunction,
  "aY": shallowCopyInternalPointer,
  "aZ": simpleReadValueFromPointer,
  "a_": throwBindingError,
  "a$": throwInstanceAlreadyDeleted,
  "ba": throwInternalError,
  "bb": throwUnboundTypeError,
  "bc": upcastPointer,
  "bd": whenDependentTypesAreResolved,
  "be": tempDoublePtr,
  "bf": DYNAMICTOP_PTR,
  "bg": ___dso_handle
}
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.be|0,
  DYNAMICTOP_PTR=env.bf|0,
  ___dso_handle=env.bg|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  Math_floor=global.Math.floor,
  Math_abs=global.Math.abs,
  Math_sqrt=global.Math.sqrt,
  Math_ceil=global.Math.ceil,
  Math_imul=global.Math.imul,
  Math_min=global.Math.min,
  Math_clz32=global.Math.clz32,
  abort=env.a,
  setTempRet0=env.b,
  getTempRet0=env.c,
  ClassHandle=env.d,
  ClassHandle_clone=env.e,
  ClassHandle_delete=env.f,
  ClassHandle_deleteLater=env.g,
  ClassHandle_isAliasOf=env.h,
  ClassHandle_isDeleted=env.i,
  RegisteredClass=env.j,
  RegisteredPointer=env.k,
  RegisteredPointer_deleteObject=env.l,
  RegisteredPointer_destructor=env.m,
  RegisteredPointer_fromWireType=env.n,
  RegisteredPointer_getPointee=env.o,
  __ZSt18uncaught_exceptionv=env.p,
  ___cxa_allocate_exception=env.q,
  ___cxa_begin_catch=env.r,
  ___cxa_find_matching_catch=env.s,
  ___cxa_free_exception=env.t,
  ___cxa_thread_atexit=env.u,
  ___cxa_throw=env.v,
  ___gxx_personality_v0=env.w,
  ___resumeException=env.x,
  ___setErrNo=env.y,
  ___syscall140=env.z,
  ___syscall146=env.A,
  ___syscall20=env.B,
  ___syscall221=env.C,
  ___syscall3=env.D,
  ___syscall5=env.E,
  ___syscall54=env.F,
  ___syscall6=env.G,
  __embind_finalize_value_object=env.H,
  __embind_register_bool=env.I,
  __embind_register_class=env.J,
  __embind_register_class_constructor=env.K,
  __embind_register_class_function=env.L,
  __embind_register_emval=env.M,
  __embind_register_float=env.N,
  __embind_register_function=env.O,
  __embind_register_integer=env.P,
  __embind_register_memory_view=env.Q,
  __embind_register_std_string=env.R,
  __embind_register_std_wstring=env.S,
  __embind_register_value_object=env.T,
  __embind_register_value_object_field=env.U,
  __embind_register_void=env.V,
  __emval_decref=env.W,
  __emval_incref=env.X,
  __emval_register=env.Y,
  __emval_take_value=env.Z,
  _abort=env._,
  _atexit=env.$,
  _clock=env.aa,
  _embind_repr=env.ab,
  _emscripten_get_heap_size=env.ac,
  _emscripten_memcpy_big=env.ad,
  _emscripten_resize_heap=env.ae,
  _exit=env.af,
  _ftime=env.ag,
  _gmtime=env.ah,
  _gmtime_r=env.ai,
  _pthread_create=env.aj,
  _pthread_exit=env.ak,
  _pthread_join=env.al,
  abortOnCannotGrowMemory=env.am,
  constNoSmartPtrRawPointerToWireType=env.an,
  count_emval_handles=env.ao,
  craftInvokerFunction=env.ap,
  createNamedFunction=env.aq,
  downcastPointer=env.ar,
  embind__requireFunction=env.as,
  embind_init_charCodes=env.at,
  ensureOverloadTable=env.au,
  exposePublicSymbol=env.av,
  extendError=env.aw,
  floatReadValueFromPointer=env.ax,
  flushPendingDeletes=env.ay,
  genericPointerToWireType=env.az,
  getBasestPointer=env.aA,
  getInheritedInstance=env.aB,
  getInheritedInstanceCount=env.aC,
  getLiveInheritedInstances=env.aD,
  getShiftFromSize=env.aE,
  getTypeName=env.aF,
  get_first_emval=env.aG,
  heap32VectorToArray=env.aH,
  init_ClassHandle=env.aI,
  init_RegisteredPointer=env.aJ,
  init_embind=env.aK,
  init_emval=env.aL,
  integerReadValueFromPointer=env.aM,
  makeClassHandle=env.aN,
  makeLegalFunctionName=env.aO,
  new_=env.aP,
  nonConstNoSmartPtrRawPointerToWireType=env.aQ,
  readLatin1String=env.aR,
  registerType=env.aS,
  replacePublicSymbol=env.aT,
  requireRegisteredType=env.aU,
  runDestructor=env.aV,
  runDestructors=env.aW,
  setDelayFunction=env.aX,
  shallowCopyInternalPointer=env.aY,
  simpleReadValueFromPointer=env.aZ,
  throwBindingError=env.a_,
  throwInstanceAlreadyDeleted=env.a$,
  throwInternalError=env.ba,
  throwUnboundTypeError=env.bb,
  upcastPointer=env.bc,
  whenDependentTypesAreResolved=env.bd,
  STACKTOP = 577248,
  STACK_MAX = 5820128,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
  function globalCtors() {
    __GLOBAL__sub_I_turtlecoin_crypto_js_cpp();
    __GLOBAL__sub_I_bind_cpp();
  }
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function __Z26cn_soft_shell_slow_hash_v0NSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi($agg$result,$data,$height) {
 $agg$result = $agg$result|0;
 $data = $data|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__size_$i$i = 0, $agg$tmp = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $agg$tmp = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$data);
 $0 = ($height|0)<(0);
 $1 = $0 << 31 >> 31;
 __ZN4Core12Cryptography26cn_soft_shell_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result,$agg$tmp,$height,$1);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 if (!($tobool$i$i)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __Z26cn_soft_shell_slow_hash_v1NSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi($agg$result,$data,$height) {
 $agg$result = $agg$result|0;
 $data = $data|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__size_$i$i = 0, $agg$tmp = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $agg$tmp = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$data);
 $0 = ($height|0)<(0);
 $1 = $0 << 31 >> 31;
 __ZN4Core12Cryptography26cn_soft_shell_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result,$agg$tmp,$height,$1);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 if (!($tobool$i$i)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __Z26cn_soft_shell_slow_hash_v2NSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi($agg$result,$data,$height) {
 $agg$result = $agg$result|0;
 $data = $data|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__size_$i$i = 0, $agg$tmp = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $agg$tmp = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$data);
 $0 = ($height|0)<(0);
 $1 = $0 << 31 >> 31;
 __ZN4Core12Cryptography26cn_soft_shell_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result,$agg$tmp,$height,$1);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 if (!($tobool$i$i)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __Z22generateRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_NS_6vectorIS5_NS3_IS5_EEEES5_i($agg$result,$prefixHash,$keyImage,$publicKeys,$transactionSecretKey,$realOutputIndex) {
 $agg$result = $agg$result|0;
 $prefixHash = $prefixHash|0;
 $keyImage = $keyImage|0;
 $publicKeys = $publicKeys|0;
 $transactionSecretKey = $transactionSecretKey|0;
 $realOutputIndex = $realOutputIndex|0;
 var $$pre$i = 0, $$pre$i$i$i$i36 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__end_$i$i$i = 0, $__end_$i$i$i$i$i$i21 = 0, $__size_$i$i = 0, $__size_$i$i$i$i$i$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i$i$i$i28 = 0, $__size_$i$i13 = 0, $__size_$i$i7 = 0, $__soon_to_be_end$06$i$i$i = 0, $__soon_to_be_end$06$i$i$i$i$i$i25 = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp1 = 0, $agg$tmp2 = 0, $agg$tmp5 = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i$i$i33 = 0, $cmp$i$i$i$i20 = 0, $cmp5$i$i$i = 0;
 var $cmp5$i$i$i$i$i$i22 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i$i$i$i26 = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i$i$i$i29 = 0, $tobool$i$i14 = 0, $tobool$i$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $agg$tmp = sp + 36|0;
 $agg$tmp1 = sp + 24|0;
 $agg$tmp2 = sp + 12|0;
 $agg$tmp5 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$prefixHash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1,$keyImage);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp2,$publicKeys);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp5,$transactionSecretKey);
 $1 = ($realOutputIndex|0)<(0);
 $2 = $1 << 31 >> 31;
 __ZN4Core12Cryptography22generateRingSignaturesENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEES7_y($0,$agg$tmp,$agg$tmp1,$agg$tmp2,$agg$tmp5,$realOutputIndex,$2);
 $__size_$i$i = ((($agg$tmp5)) + 11|0);
 $3 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i) {
  $4 = HEAP32[$agg$tmp5>>2]|0;
  __ZdlPv($4);
 }
 $5 = HEAP32[$agg$tmp2>>2]|0;
 $cmp$i = ($5|0)==(0|0);
 if (!($cmp$i)) {
  $__end_$i$i$i = ((($agg$tmp2)) + 4|0);
  $6 = HEAP32[$__end_$i$i$i>>2]|0;
  $cmp5$i$i$i = ($6|0)==($5|0);
  if ($cmp5$i$i$i) {
   $9 = $5;
  } else {
   $__soon_to_be_end$06$i$i$i = $6;
   while(1) {
    $incdec$ptr$i$i$i = ((($__soon_to_be_end$06$i$i$i)) + -12|0);
    $__size_$i$i$i$i$i$i$i$i = ((($incdec$ptr$i$i$i)) + 11|0);
    $7 = HEAP8[$__size_$i$i$i$i$i$i$i$i>>0]|0;
    $tobool$i$i$i$i$i$i$i$i = ($7<<24>>24)<(0);
    if ($tobool$i$i$i$i$i$i$i$i) {
     $8 = HEAP32[$incdec$ptr$i$i$i>>2]|0;
     __ZdlPv($8);
    }
    $cmp$i$i$i = ($incdec$ptr$i$i$i|0)==($5|0);
    if ($cmp$i$i$i) {
     break;
    } else {
     $__soon_to_be_end$06$i$i$i = $incdec$ptr$i$i$i;
    }
   }
   $$pre$i = HEAP32[$agg$tmp2>>2]|0;
   $9 = $$pre$i;
  }
  HEAP32[$__end_$i$i$i>>2] = $5;
  __ZdlPv($9);
 }
 $__size_$i$i7 = ((($agg$tmp1)) + 11|0);
 $10 = HEAP8[$__size_$i$i7>>0]|0;
 $tobool$i$i8 = ($10<<24>>24)<(0);
 if ($tobool$i$i8) {
  $11 = HEAP32[$agg$tmp1>>2]|0;
  __ZdlPv($11);
 }
 $__size_$i$i13 = ((($agg$tmp)) + 11|0);
 $12 = HEAP8[$__size_$i$i13>>0]|0;
 $tobool$i$i14 = ($12<<24>>24)<(0);
 if ($tobool$i$i14) {
  $13 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($13);
 }
 $add$ptr$i = ((($0)) + 4|0);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$result,$add$ptr$i);
 $14 = HEAP32[$add$ptr$i>>2]|0;
 $cmp$i$i$i$i20 = ($14|0)==(0|0);
 if ($cmp$i$i$i$i20) {
  STACKTOP = sp;return;
 }
 $__end_$i$i$i$i$i$i21 = ((($0)) + 8|0);
 $15 = HEAP32[$__end_$i$i$i$i$i$i21>>2]|0;
 $cmp5$i$i$i$i$i$i22 = ($15|0)==($14|0);
 if ($cmp5$i$i$i$i$i$i22) {
  $18 = $14;
 } else {
  $__soon_to_be_end$06$i$i$i$i$i$i25 = $15;
  while(1) {
   $incdec$ptr$i$i$i$i$i$i26 = ((($__soon_to_be_end$06$i$i$i$i$i$i25)) + -12|0);
   $__size_$i$i$i$i$i$i$i$i$i$i$i28 = ((($incdec$ptr$i$i$i$i$i$i26)) + 11|0);
   $16 = HEAP8[$__size_$i$i$i$i$i$i$i$i$i$i$i28>>0]|0;
   $tobool$i$i$i$i$i$i$i$i$i$i$i29 = ($16<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i$i$i$i$i29) {
    $17 = HEAP32[$incdec$ptr$i$i$i$i$i$i26>>2]|0;
    __ZdlPv($17);
   }
   $cmp$i$i$i$i$i$i33 = ($incdec$ptr$i$i$i$i$i$i26|0)==($14|0);
   if ($cmp$i$i$i$i$i$i33) {
    break;
   } else {
    $__soon_to_be_end$06$i$i$i$i$i$i25 = $incdec$ptr$i$i$i$i$i$i26;
   }
  }
  $$pre$i$i$i$i36 = HEAP32[$add$ptr$i>>2]|0;
  $18 = $$pre$i$i$i$i36;
 }
 HEAP32[$__end_$i$i$i$i$i$i21>>2] = $14;
 __ZdlPv($18);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__begin1$addr$05$i$i = 0, $__end_$i = 0, $__end_$i10 = 0, $__value_$i$i$i = 0, $add$ptr$i = 0, $call$i$i$i$i15 = 0, $cmp$i$i = 0, $cmp$i11 = 0, $cmp4$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr1$i$i = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $__end_$i = ((($this)) + 4|0);
 HEAP32[$__end_$i>>2] = 0;
 $__value_$i$i$i = ((($this)) + 8|0);
 HEAP32[$__value_$i$i$i>>2] = 0;
 $__end_$i10 = ((($__x)) + 4|0);
 $0 = HEAP32[$__end_$i10>>2]|0;
 $1 = HEAP32[$__x>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $2 = ($sub$ptr$sub$i|0)==(0);
 if ($2) {
  return;
 }
 $cmp$i11 = ($sub$ptr$div$i>>>0)>(357913941);
 if ($cmp$i11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $call$i$i$i$i15 = (__Znwm($sub$ptr$sub$i)|0);
 HEAP32[$__end_$i>>2] = $call$i$i$i$i15;
 HEAP32[$this>>2] = $call$i$i$i$i15;
 $add$ptr$i = (($call$i$i$i$i15) + (($sub$ptr$div$i*12)|0)|0);
 HEAP32[$__value_$i$i$i>>2] = $add$ptr$i;
 $3 = HEAP32[$__x>>2]|0;
 $4 = HEAP32[$__end_$i10>>2]|0;
 $cmp4$i$i = ($3|0)==($4|0);
 if ($cmp4$i$i) {
  return;
 }
 $5 = $call$i$i$i$i15;$__begin1$addr$05$i$i = $3;
 while(1) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($5,$__begin1$addr$05$i$i);
  $incdec$ptr$i$i = ((($__begin1$addr$05$i$i)) + 12|0);
  $6 = HEAP32[$__end_$i>>2]|0;
  $incdec$ptr1$i$i = ((($6)) + 12|0);
  HEAP32[$__end_$i>>2] = $incdec$ptr1$i$i;
  $cmp$i$i = ($incdec$ptr$i$i|0)==($4|0);
  if ($cmp$i$i) {
   break;
  } else {
   $5 = $incdec$ptr1$i$i;$__begin1$addr$05$i$i = $incdec$ptr$i$i;
  }
 }
 return;
}
function __Z35generateViewKeysFromPrivateSpendKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$secretKey) {
 $agg$result = $agg$result|0;
 $secretKey = $secretKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $SecretKey = 0, $__size_$i$i = 0, $__size_$i$i$i$i$i = 0, $__size_$i$i$i2$i$i = 0, $__value_$i$i5 = 0, $agg$tmp = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 16|0;
 $agg$tmp = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$secretKey);
 __ZN4Core12Cryptography35generateViewKeysFromPrivateSpendKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($2);
 }
 $__value_$i$i5 = ((($0)) + 12|0);
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;HEAP32[$agg$result+12>>2]=0|0;HEAP32[$agg$result+16>>2]=0|0;HEAP32[$agg$result+20>>2]=0|0;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($agg$result,$__value_$i$i5)|0);
 $SecretKey = ((($agg$result)) + 12|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($SecretKey,$0)|0);
 $3 = ((($0)) + 12|0);
 $__size_$i$i$i$i$i = ((($3)) + 11|0);
 $4 = HEAP8[$__size_$i$i$i$i$i>>0]|0;
 $tobool$i$i$i$i$i = ($4<<24>>24)<(0);
 if ($tobool$i$i$i$i$i) {
  $5 = HEAP32[$3>>2]|0;
  __ZdlPv($5);
 }
 $__size_$i$i$i2$i$i = ((($0)) + 11|0);
 $6 = HEAP8[$__size_$i$i$i2$i$i>>0]|0;
 $tobool$i$i$i3$i$i = ($6<<24>>24)<(0);
 if (!($tobool$i$i$i3$i$i)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$0>>2]|0;
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __Z12generateKeysv($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $SecretKey = 0, $__size_$i$i$i$i$i = 0, $__size_$i$i$i2$i$i = 0, $__value_$i$i5 = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp;
 __ZN4Core12Cryptography12generateKeysEv($0);
 $__value_$i$i5 = ((($0)) + 12|0);
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;HEAP32[$agg$result+12>>2]=0|0;HEAP32[$agg$result+16>>2]=0|0;HEAP32[$agg$result+20>>2]=0|0;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($agg$result,$__value_$i$i5)|0);
 $SecretKey = ((($agg$result)) + 12|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($SecretKey,$0)|0);
 $1 = ((($0)) + 12|0);
 $__size_$i$i$i$i$i = ((($1)) + 11|0);
 $2 = HEAP8[$__size_$i$i$i$i$i>>0]|0;
 $tobool$i$i$i$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i$i$i$i) {
  $3 = HEAP32[$1>>2]|0;
  __ZdlPv($3);
 }
 $__size_$i$i$i2$i$i = ((($0)) + 11|0);
 $4 = HEAP8[$__size_$i$i$i2$i$i>>0]|0;
 $tobool$i$i$i3$i$i = ($4<<24>>24)<(0);
 if (!($tobool$i$i$i3$i$i)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 __ZdlPv($5);
 STACKTOP = sp;return;
}
function __Z20secretKeyToPublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$secretKey) {
 $agg$result = $agg$result|0;
 $secretKey = $secretKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__size_$i$i = 0, $add$ptr$i = 0, $agg$tmp = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $agg$tmp = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$secretKey);
 __ZN4Core12Cryptography20secretKeyToPublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($2);
 }
 $add$ptr$i = ((($0)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$add$ptr$i);
 $3 = ((($0)) + 15|0);
 $4 = HEAP8[$3>>0]|0;
 $tobool$i$i$i$i$i12 = ($4<<24>>24)<(0);
 if (!($tobool$i$i$i$i$i12)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$add$ptr$i>>2]|0;
 __ZdlPv($5);
 STACKTOP = sp;return;
}
function __Z21generateKeyDerivationNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_($agg$result,$publicKey,$secretKey) {
 $agg$result = $agg$result|0;
 $publicKey = $publicKey|0;
 $secretKey = $secretKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__size_$i$i = 0, $__size_$i$i6 = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp1 = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i18 = 0, $tobool$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 24|0;
 $agg$tmp = sp + 12|0;
 $agg$tmp1 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$publicKey);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1,$secretKey);
 __ZN4Core12Cryptography21generateKeyDerivationENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_($0,$agg$tmp,$agg$tmp1);
 $__size_$i$i = ((($agg$tmp1)) + 11|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$agg$tmp1>>2]|0;
  __ZdlPv($2);
 }
 $__size_$i$i6 = ((($agg$tmp)) + 11|0);
 $3 = HEAP8[$__size_$i$i6>>0]|0;
 $tobool$i$i7 = ($3<<24>>24)<(0);
 if ($tobool$i$i7) {
  $4 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($4);
 }
 $add$ptr$i = ((($0)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$add$ptr$i);
 $5 = ((($0)) + 15|0);
 $6 = HEAP8[$5>>0]|0;
 $tobool$i$i$i$i$i18 = ($6<<24>>24)<(0);
 if (!($tobool$i$i$i$i$i18)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$add$ptr$i>>2]|0;
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __Z15derivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_($agg$result,$derivation,$outputIndex,$publicKey) {
 $agg$result = $agg$result|0;
 $derivation = $derivation|0;
 $outputIndex = $outputIndex|0;
 $publicKey = $publicKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i = 0, $__size_$i$i6 = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp1 = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i18 = 0, $tobool$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 24|0;
 $agg$tmp = sp + 12|0;
 $agg$tmp1 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$derivation);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1,$publicKey);
 $1 = ($outputIndex|0)<(0);
 $2 = $1 << 31 >> 31;
 __ZN4Core12Cryptography15derivePublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_($0,$agg$tmp,$outputIndex,$2,$agg$tmp1);
 $__size_$i$i = ((($agg$tmp1)) + 11|0);
 $3 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i) {
  $4 = HEAP32[$agg$tmp1>>2]|0;
  __ZdlPv($4);
 }
 $__size_$i$i6 = ((($agg$tmp)) + 11|0);
 $5 = HEAP8[$__size_$i$i6>>0]|0;
 $tobool$i$i7 = ($5<<24>>24)<(0);
 if ($tobool$i$i7) {
  $6 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($6);
 }
 $add$ptr$i = ((($0)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$add$ptr$i);
 $7 = ((($0)) + 15|0);
 $8 = HEAP8[$7>>0]|0;
 $tobool$i$i$i$i$i18 = ($8<<24>>24)<(0);
 if (!($tobool$i$i$i$i$i18)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$add$ptr$i>>2]|0;
 __ZdlPv($9);
 STACKTOP = sp;return;
}
function __Z15deriveSecretKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_($agg$result,$derivation,$outputIndex,$secretKey) {
 $agg$result = $agg$result|0;
 $derivation = $derivation|0;
 $outputIndex = $outputIndex|0;
 $secretKey = $secretKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__size_$i$i = 0, $__size_$i$i2 = 0, $agg$tmp = 0, $agg$tmp1 = 0, $tobool$i$i = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $agg$tmp = sp + 12|0;
 $agg$tmp1 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$derivation);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1,$secretKey);
 $0 = ($outputIndex|0)<(0);
 $1 = $0 << 31 >> 31;
 __ZN4Core12Cryptography15deriveSecretKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_($agg$result,$agg$tmp,$outputIndex,$1,$agg$tmp1);
 $__size_$i$i = ((($agg$tmp1)) + 11|0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i) {
  $3 = HEAP32[$agg$tmp1>>2]|0;
  __ZdlPv($3);
 }
 $__size_$i$i2 = ((($agg$tmp)) + 11|0);
 $4 = HEAP8[$__size_$i$i2>>0]|0;
 $tobool$i$i3 = ($4<<24>>24)<(0);
 if (!($tobool$i$i3)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($5);
 STACKTOP = sp;return;
}
function __Z17underivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_($agg$result,$derivation,$outputIndex,$derivedKey) {
 $agg$result = $agg$result|0;
 $derivation = $derivation|0;
 $outputIndex = $outputIndex|0;
 $derivedKey = $derivedKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i = 0, $__size_$i$i6 = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp1 = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i18 = 0, $tobool$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 24|0;
 $agg$tmp = sp + 12|0;
 $agg$tmp1 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$derivation);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1,$derivedKey);
 $1 = ($outputIndex|0)<(0);
 $2 = $1 << 31 >> 31;
 __ZN4Core12Cryptography17underivePublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_($0,$agg$tmp,$outputIndex,$2,$agg$tmp1);
 $__size_$i$i = ((($agg$tmp1)) + 11|0);
 $3 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i) {
  $4 = HEAP32[$agg$tmp1>>2]|0;
  __ZdlPv($4);
 }
 $__size_$i$i6 = ((($agg$tmp)) + 11|0);
 $5 = HEAP8[$__size_$i$i6>>0]|0;
 $tobool$i$i7 = ($5<<24>>24)<(0);
 if ($tobool$i$i7) {
  $6 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($6);
 }
 $add$ptr$i = ((($0)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$add$ptr$i);
 $7 = ((($0)) + 15|0);
 $8 = HEAP8[$7>>0]|0;
 $tobool$i$i$i$i$i18 = ($8<<24>>24)<(0);
 if (!($tobool$i$i$i$i$i18)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$add$ptr$i>>2]|0;
 __ZdlPv($9);
 STACKTOP = sp;return;
}
function __ZN39EmscriptenBindingInitializer_signaturesC2Ev($this) {
 $this = $this|0;
 var $call$i$i2 = 0, $call$i$i6 = 0, $call$i5$i1 = 0, $call$i5$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function((44092|0),2,(43480|0),(45134|0),(1|0),(2|0));
 __embind_register_function((44105|0),2,(43480|0),(45134|0),(1|0),(3|0));
 __embind_register_function((44121|0),2,(43480|0),(45134|0),(1|0),(4|0));
 __embind_register_function((44137|0),2,(43480|0),(45134|0),(1|0),(5|0));
 __embind_register_function((44153|0),2,(43480|0),(45134|0),(1|0),(6|0));
 __embind_register_function((44174|0),2,(43480|0),(45134|0),(1|0),(7|0));
 __embind_register_function((44195|0),2,(43480|0),(45134|0),(1|0),(8|0));
 __embind_register_function((44216|0),2,(43480|0),(45134|0),(1|0),(9|0));
 __embind_register_function((44237|0),2,(43480|0),(45134|0),(1|0),(10|0));
 __embind_register_function((44258|0),2,(43480|0),(45134|0),(1|0),(11|0));
 __embind_register_function((44279|0),2,(43480|0),(45134|0),(1|0),(12|0));
 __embind_register_function((44305|0),2,(43480|0),(45134|0),(1|0),(13|0));
 __embind_register_function((44331|0),2,(43480|0),(45134|0),(1|0),(14|0));
 __embind_register_function((44357|0),2,(43480|0),(45134|0),(1|0),(15|0));
 __embind_register_function((44380|0),2,(43480|0),(45134|0),(1|0),(16|0));
 __embind_register_function((44403|0),2,(43480|0),(45134|0),(1|0),(17|0));
 __embind_register_function((44426|0),2,(43480|0),(45134|0),(1|0),(18|0));
 __embind_register_function((44454|0),2,(43480|0),(45134|0),(1|0),(19|0));
 __embind_register_function((44482|0),2,(43480|0),(45134|0),(1|0),(20|0));
 __embind_register_function((44510|0),3,(43488|0),(45138|0),(8|0),(5|0));
 __embind_register_function((44537|0),3,(43488|0),(45138|0),(8|0),(6|0));
 __embind_register_function((44564|0),3,(43488|0),(45138|0),(8|0),(7|0));
 __embind_register_function((44591|0),2,(43480|0),(45134|0),(1|0),(21|0));
 __embind_register_function((44608|0),2,(43500|0),(45134|0),(2|0),(22|0));
 __embind_register_function((44618|0),2,(43500|0),(45134|0),(2|0),(23|0));
 __embind_register_function((44630|0),4,(16|0),(45360|0),(2|0),(4|0));
 __embind_register_function((44652|0),6,(32|0),(45366|0),(1|0),(4|0));
 __embind_register_function((44675|0),5,(64|0),(45374|0),(1|0),(3|0));
 __embind_register_function((44694|0),2,(43480|0),(45134|0),(1|0),(24|0));
 __embind_register_function((44736|0),2,(43508|0),(45134|0),(3|0),(25|0));
 __embind_register_function((44772|0),1,(43516|0),(45387|0),(4|0),(14|0));
 __embind_register_function((44785|0),2,(43520|0),(45134|0),(4|0),(5|0));
 __embind_register_function((44794|0),2,(43480|0),(45134|0),(1|0),(26|0));
 __embind_register_function((44815|0),3,(43528|0),(45138|0),(9|0),(8|0));
 __embind_register_function((44837|0),4,(96|0),(45360|0),(4|0),(5|0));
 __embind_register_function((44853|0),4,(96|0),(45360|0),(4|0),(6|0));
 __embind_register_function((44869|0),4,(96|0),(45360|0),(4|0),(7|0));
 __embind_register_function((44887|0),4,(112|0),(45360|0),(5|0),(8|0));
 __embind_register_function((44905|0),4,(128|0),(45360|0),(6|0),(10|0));
 __embind_register_function((44920|0),3,(43528|0),(45138|0),(9|0),(9|0));
 __embind_register_function((44937|0),3,(43528|0),(45138|0),(9|0),(10|0));
 __embind_register_function((44951|0),2,(43480|0),(45134|0),(1|0),(27|0));
 __embind_register_function((44971|0),2,(43480|0),(45134|0),(1|0),(28|0));
 __embind_register_function((44982|0),2,(43480|0),(45134|0),(1|0),(29|0));
 __ZN10emscripten15register_vectorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEENS_6class_INS1_6vectorIT_NS5_ISA_EEEENS_8internal11NoBaseClassEEEPKc(44995);
 __embind_register_value_object((42568|0),(45008|0),(45630|0),(1|0),(45597|0),(15|0));
 $call$i5$i1 = (__Znwm(4)|0);
 HEAP32[$call$i5$i1>>2] = 12;
 $call$i$i2 = (__Znwm(4)|0);
 HEAP32[$call$i$i2>>2] = 12;
 __embind_register_value_object_field((42568|0),(45013|0),(42488|0),(45134|0),(5|0),($call$i5$i1|0),(42488|0),(45600|0),(11|0),($call$i$i2|0));
 $call$i5$i4 = (__Znwm(4)|0);
 HEAP32[$call$i5$i4>>2] = 0;
 $call$i$i6 = (__Znwm(4)|0);
 HEAP32[$call$i$i6>>2] = 0;
 __embind_register_value_object_field((42568|0),(45023|0),(42488|0),(45134|0),(5|0),($call$i5$i4|0),(42488|0),(45600|0),(11|0),($call$i$i6|0));
 __embind_finalize_value_object((42568|0));
 return;
}
function __ZN10emscripten15register_vectorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEENS_6class_INS1_6vectorIT_NS5_ISA_EEEENS_8internal11NoBaseClassEEEPKc($name) {
 $name = $name|0;
 var $$repack4$i$i = 0, $$repack4$i$i29 = 0, $$repack4$i$i37 = 0, $call$i$i = 0, $call$i$i27 = 0, $call$i$i35 = 0, $call$i$i38 = 0, $call$i$i39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_class((42544|0),(42576|0),(42592|0),(0|0),(45387|0),(6|0),(45595|0),(0|0),(45595|0),(0|0),($name|0),(45597|0),(16|0));
 __embind_register_class_constructor((42544|0),1,(43540|0),(45387|0),(7|0),(2|0));
 $call$i$i = (__Znwm(8)|0);
 HEAP32[$call$i$i>>2] = (30);
 $$repack4$i$i = ((($call$i$i)) + 4|0);
 HEAP32[$$repack4$i$i>>2] = 0;
 __embind_register_class_function((42544|0),(45390|0),3,(43544|0),(45600|0),(12|0),($call$i$i|0),0);
 $call$i$i27 = (__Znwm(8)|0);
 HEAP32[$call$i$i27>>2] = (13);
 $$repack4$i$i29 = ((($call$i$i27)) + 4|0);
 HEAP32[$$repack4$i$i29>>2] = 0;
 __embind_register_class_function((42544|0),(45400|0),4,(144|0),(45605|0),(9|0),($call$i$i27|0),0);
 $call$i$i35 = (__Znwm(8)|0);
 HEAP32[$call$i$i35>>2] = (8);
 $$repack4$i$i37 = ((($call$i$i35)) + 4|0);
 HEAP32[$$repack4$i$i37>>2] = 0;
 __embind_register_class_function((42544|0),(45407|0),2,(43556|0),(45134|0),(6|0),($call$i$i35|0),0);
 $call$i$i38 = (__Znwm(4)|0);
 HEAP32[$call$i$i38>>2] = (14);
 __embind_register_class_function((42544|0),(45412|0),3,(43564|0),(45138|0),(11|0),($call$i$i38|0),0);
 $call$i$i39 = (__Znwm(4)|0);
 HEAP32[$call$i$i39>>2] = (12);
 __embind_register_class_function((42544|0),(45416|0),4,(160|0),(45360|0),(7|0),($call$i$i39|0),0);
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__end_ = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = ((($this)) + 4|0);
 $0 = HEAP32[$__end_>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
 return ($sub$ptr$div|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_EE6invokeEPFS8_S8_EPNS0_11BindingTypeIS8_EUt_E($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i1 = 0, $__size_$i$i6 = 0, $__size_$i12$i$i$i = 0, $__size_$i3$i$i$i = 0, $add$i = 0, $add$i$i$i$i$i = 0, $add31$i = 0, $agg$tmp = 0, $and$i$i$i$i$i = 0;
 var $arraydecay$i = 0, $arrayidx$i$i$i = 0, $call$i$i$i$i$i$i = 0, $call1$i = 0, $call132$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i3 = 0, $data3739$i = 0, $data3739$i23 = 0, $or$i$i$i$i = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ref$tmp = sp + 12|0;
 $agg$tmp = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 FUNCTION_TABLE_vii[$fn & 31]($ref$tmp,$agg$tmp);
 $__size_$i$i$i$i1 = ((($ref$tmp)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i$i1>>0]|0;
 $tobool$i$i$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $2 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($2) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $2;
  $3 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i23 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i23|0),($3|0),($2|0))|0;
  __ZdlPv($3);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i3 = $1&255;
  $add$i = (($conv$i$i$i$i3) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i3;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i3|0))|0;
  $$in = $call1$i;
 }
 $__size_$i$i6 = ((($agg$tmp)) + 11|0);
 $4 = HEAP8[$__size_$i$i6>>0]|0;
 $tobool$i$i7 = ($4<<24>>24)<(0);
 if (!($tobool$i$i7)) {
  STACKTOP = sp;return ($$in|0);
 }
 $5 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($5);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_iEE6invokeEPFS8_S8_iEPNS0_11BindingTypeIS8_EUt_Ei($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i1 = 0, $__size_$i$i6 = 0, $__size_$i12$i$i$i = 0, $__size_$i3$i$i$i = 0, $add$i = 0, $add$i$i$i$i$i = 0, $add31$i = 0, $agg$tmp = 0, $and$i$i$i$i$i = 0;
 var $arraydecay$i = 0, $arrayidx$i$i$i = 0, $call$i$i$i$i$i$i = 0, $call1$i = 0, $call132$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i3 = 0, $data3739$i = 0, $data3739$i23 = 0, $or$i$i$i$i = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ref$tmp = sp + 12|0;
 $agg$tmp = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 FUNCTION_TABLE_viii[$fn & 15]($ref$tmp,$agg$tmp,$args1);
 $__size_$i$i$i$i1 = ((($ref$tmp)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i$i1>>0]|0;
 $tobool$i$i$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $2 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($2) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $2;
  $3 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i23 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i23|0),($3|0),($2|0))|0;
  __ZdlPv($3);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i3 = $1&255;
  $add$i = (($conv$i$i$i$i3) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i3;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i3|0))|0;
  $$in = $call1$i;
 }
 $__size_$i$i6 = ((($agg$tmp)) + 11|0);
 $4 = HEAP8[$__size_$i$i6>>0]|0;
 $tobool$i$i7 = ($4<<24>>24)<(0);
 if (!($tobool$i$i7)) {
  STACKTOP = sp;return ($$in|0);
 }
 $5 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($5);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJNS2_6vectorIS8_NS6_IS8_EEEEEE6invokeEPFS8_SB_EPSB_($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $$in = 0, $$pre$i19 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__end_$i$i$i4 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i11 = 0, $__size_$i3$i$i$i = 0, $__soon_to_be_end$06$i$i$i8 = 0, $add$i = 0, $add31$i = 0, $agg$tmp = 0, $call1$i = 0, $call132$i = 0;
 var $cmp$i$i$i16 = 0, $cmp$i3 = 0, $cmp5$i$i$i5 = 0, $conv$i$i$i$i = 0, $data3739$i = 0, $data3739$i29 = 0, $incdec$ptr$i$i$i9 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ref$tmp = sp + 12|0;
 $agg$tmp = sp;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp,$args);
 FUNCTION_TABLE_vii[$fn & 31]($ref$tmp,$agg$tmp);
 $__size_$i$i$i$i = ((($ref$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i$i$i>>0]|0;
 $tobool$i$i$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $1 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($1) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $1;
  $2 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i29 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i29|0),($2|0),($1|0))|0;
  __ZdlPv($2);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i = $0&255;
  $add$i = (($conv$i$i$i$i) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i|0))|0;
  $$in = $call1$i;
 }
 $3 = HEAP32[$agg$tmp>>2]|0;
 $cmp$i3 = ($3|0)==(0|0);
 if ($cmp$i3) {
  STACKTOP = sp;return ($$in|0);
 }
 $__end_$i$i$i4 = ((($agg$tmp)) + 4|0);
 $4 = HEAP32[$__end_$i$i$i4>>2]|0;
 $cmp5$i$i$i5 = ($4|0)==($3|0);
 if ($cmp5$i$i$i5) {
  $7 = $3;
 } else {
  $__soon_to_be_end$06$i$i$i8 = $4;
  while(1) {
   $incdec$ptr$i$i$i9 = ((($__soon_to_be_end$06$i$i$i8)) + -12|0);
   $__size_$i$i$i$i$i$i$i$i11 = ((($incdec$ptr$i$i$i9)) + 11|0);
   $5 = HEAP8[$__size_$i$i$i$i$i$i$i$i11>>0]|0;
   $tobool$i$i$i$i$i$i$i$i12 = ($5<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i$i12) {
    $6 = HEAP32[$incdec$ptr$i$i$i9>>2]|0;
    __ZdlPv($6);
   }
   $cmp$i$i$i16 = ($incdec$ptr$i$i$i9|0)==($3|0);
   if ($cmp$i$i$i16) {
    break;
   } else {
    $__soon_to_be_end$06$i$i$i8 = $incdec$ptr$i$i$i9;
   }
  }
  $$pre$i19 = HEAP32[$agg$tmp>>2]|0;
  $7 = $$pre$i19;
 }
 HEAP32[$__end_$i$i$i4>>2] = $3;
 __ZdlPv($7);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJNS2_6vectorIS8_NS6_IS8_EEEES8_S8_EE6invokeEPFS8_SB_S8_S8_EPSB_PNS0_11BindingTypeIS8_EUt_ESJ_($fn,$args,$args1,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $$in = 0, $$pre$i63 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i13 = 0, $__end_$i$i$i48 = 0, $__p$015$i$i$i = 0;
 var $__p$015$i$i$i21 = 0, $__p$016$i$i$i = 0, $__p$016$i$i$i23 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i55 = 0, $__size_$i$i$i$i14 = 0, $__size_$i$i$i$i29 = 0, $__size_$i$i35 = 0, $__size_$i$i41 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i18 = 0, $__size_$i3$i$i$i = 0, $__soon_to_be_end$06$i$i$i52 = 0, $add$i = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i9 = 0, $add31$i = 0, $agg$tmp = 0, $agg$tmp5 = 0, $agg$tmp6 = 0;
 var $and$i$i$i$i$i = 0, $and$i$i$i$i$i10 = 0, $arraydecay$i = 0, $arraydecay$i3 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i24 = 0, $call$i$i$i$i$i$i2 = 0, $call$i$i$i$i$i$i27 = 0, $call1$i = 0, $call132$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i19 = 0, $cmp$i$i$i1 = 0, $cmp$i$i$i5 = 0, $cmp$i$i$i60 = 0, $cmp$i47 = 0, $cmp2$i$i$i = 0, $cmp2$i$i$i7 = 0, $cmp5$i$i$i49 = 0, $conv$i$i$i$i = 0;
 var $conv$i$i$i$i16 = 0, $conv$i$i$i$i31 = 0, $data3739$i = 0, $data3739$i85 = 0, $incdec$ptr$i$i$i53 = 0, $or$i$i$i$i = 0, $or$i$i$i$i12 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i56 = 0, $tobool$i$i36 = 0, $tobool$i$i42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $ref$tmp = sp + 36|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp5 = sp + 12|0;
 $agg$tmp6 = sp;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp,$args);
 $arraydecay$i = ((($args1)) + 4|0);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp5>>2]=0|0;HEAP32[$agg$tmp5+4>>2]=0|0;HEAP32[$agg$tmp5+8>>2]=0|0;
 $cmp$i$i$i1 = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i1) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp5);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp5)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp5;
  } else {
   $__p$015$i$i$i = $agg$tmp5;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i2 = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp5>>2] = $call$i$i$i$i$i$i2;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp5)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp5)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i2;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i3 = ((($args3)) + 4|0);
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp6>>2]=0|0;HEAP32[$agg$tmp6+4>>2]=0|0;HEAP32[$agg$tmp6+8>>2]=0|0;
 $cmp$i$i$i5 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i5) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp6);
  // unreachable;
 }
 $cmp2$i$i$i7 = ($1>>>0)<(11);
 if ($cmp2$i$i$i7) {
  $conv$i$i$i$i16 = $1&255;
  $__size_$i12$i$i$i18 = ((($agg$tmp6)) + 11|0);
  HEAP8[$__size_$i12$i$i$i18>>0] = $conv$i$i$i$i16;
  $cmp$i$i$i$i19 = ($1|0)==(0);
  if ($cmp$i$i$i$i19) {
   $__p$016$i$i$i23 = $agg$tmp6;
  } else {
   $__p$015$i$i$i21 = $agg$tmp6;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i9 = (($1) + 16)|0;
  $and$i$i$i$i$i10 = $add$i$i$i$i$i9 & -16;
  $call$i$i$i$i$i$i27 = (__Znwm($and$i$i$i$i$i10)|0);
  HEAP32[$agg$tmp6>>2] = $call$i$i$i$i$i$i27;
  $or$i$i$i$i12 = $and$i$i$i$i$i10 | -2147483648;
  $__cap_$i$i$i$i13 = ((($agg$tmp6)) + 8|0);
  HEAP32[$__cap_$i$i$i$i13>>2] = $or$i$i$i$i12;
  $__size_$i$i$i$i14 = ((($agg$tmp6)) + 4|0);
  HEAP32[$__size_$i$i$i$i14>>2] = $1;
  $__p$015$i$i$i21 = $call$i$i$i$i$i$i27;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i21|0),($arraydecay$i3|0),($1|0))|0;
  $__p$016$i$i$i23 = $__p$015$i$i$i21;
 }
 $arrayidx$i$i$i24 = (($__p$016$i$i$i23) + ($1)|0);
 HEAP8[$arrayidx$i$i$i24>>0] = 0;
 FUNCTION_TABLE_viiii[$fn & 15]($ref$tmp,$agg$tmp,$agg$tmp5,$agg$tmp6);
 $__size_$i$i$i$i29 = ((($ref$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i$i$i29>>0]|0;
 $tobool$i$i$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $3 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($3) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $3;
  $4 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i85 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i85|0),($4|0),($3|0))|0;
  __ZdlPv($4);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i31 = $2&255;
  $add$i = (($conv$i$i$i$i31) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i31;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i31|0))|0;
  $$in = $call1$i;
 }
 $__size_$i$i35 = ((($agg$tmp6)) + 11|0);
 $5 = HEAP8[$__size_$i$i35>>0]|0;
 $tobool$i$i36 = ($5<<24>>24)<(0);
 if ($tobool$i$i36) {
  $6 = HEAP32[$agg$tmp6>>2]|0;
  __ZdlPv($6);
 }
 $__size_$i$i41 = ((($agg$tmp5)) + 11|0);
 $7 = HEAP8[$__size_$i$i41>>0]|0;
 $tobool$i$i42 = ($7<<24>>24)<(0);
 if ($tobool$i$i42) {
  $8 = HEAP32[$agg$tmp5>>2]|0;
  __ZdlPv($8);
 }
 $9 = HEAP32[$agg$tmp>>2]|0;
 $cmp$i47 = ($9|0)==(0|0);
 if ($cmp$i47) {
  STACKTOP = sp;return ($$in|0);
 }
 $__end_$i$i$i48 = ((($agg$tmp)) + 4|0);
 $10 = HEAP32[$__end_$i$i$i48>>2]|0;
 $cmp5$i$i$i49 = ($10|0)==($9|0);
 if ($cmp5$i$i$i49) {
  $13 = $9;
 } else {
  $__soon_to_be_end$06$i$i$i52 = $10;
  while(1) {
   $incdec$ptr$i$i$i53 = ((($__soon_to_be_end$06$i$i$i52)) + -12|0);
   $__size_$i$i$i$i$i$i$i$i55 = ((($incdec$ptr$i$i$i53)) + 11|0);
   $11 = HEAP8[$__size_$i$i$i$i$i$i$i$i55>>0]|0;
   $tobool$i$i$i$i$i$i$i$i56 = ($11<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i$i56) {
    $12 = HEAP32[$incdec$ptr$i$i$i53>>2]|0;
    __ZdlPv($12);
   }
   $cmp$i$i$i60 = ($incdec$ptr$i$i$i53|0)==($9|0);
   if ($cmp$i$i$i60) {
    break;
   } else {
    $__soon_to_be_end$06$i$i$i52 = $incdec$ptr$i$i$i53;
   }
  }
  $$pre$i63 = HEAP32[$agg$tmp>>2]|0;
  $13 = $$pre$i63;
 }
 HEAP32[$__end_$i$i$i48>>2] = $9;
 __ZdlPv($13);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJS9_S9_SB_S9_iEE6invokeEPFSB_S9_S9_SB_S9_iEPNS0_11BindingTypeIS9_EUt_ESI_PSB_SI_i($fn,$args,$args1,$args3,$args5,$args7) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $$pre$i73 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i12 = 0;
 var $__cap_$i$i$i$i37 = 0, $__end_$i$i = 0, $__end_$i$i$i = 0, $__end_$i$i$i58 = 0, $__p$015$i$i$i = 0, $__p$015$i$i$i20 = 0, $__p$015$i$i$i45 = 0, $__p$016$i$i$i = 0, $__p$016$i$i$i22 = 0, $__p$016$i$i$i47 = 0, $__size_$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i65 = 0, $__size_$i$i$i$i13 = 0, $__size_$i$i$i$i38 = 0, $__size_$i$i78 = 0, $__size_$i$i84 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i17 = 0, $__size_$i12$i$i$i42 = 0;
 var $__soon_to_be_end$06$i$i$i62 = 0, $__value_$i$i$i8$i$i = 0, $__value_$i$i$i9$i$i = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i32 = 0, $add$i$i$i$i$i7 = 0, $agg$tmp = 0, $agg$tmp10 = 0, $agg$tmp14 = 0, $agg$tmp9 = 0, $and$i$i$i$i$i = 0, $and$i$i$i$i$i33 = 0, $and$i$i$i$i$i8 = 0, $arraydecay$i = 0, $arraydecay$i1 = 0, $arraydecay$i26 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i23 = 0, $arrayidx$i$i$i48 = 0, $call$i$i$i$i$i$i = 0;
 var $call$i$i$i$i$i$i3450 = 0, $call$i$i$i$i$i$i924 = 0, $call$i52 = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i$i43 = 0, $cmp$i$i$i28 = 0, $cmp$i$i$i3 = 0, $cmp$i$i$i70 = 0, $cmp$i57 = 0, $cmp2$i$i$i = 0, $cmp2$i$i$i30 = 0, $cmp2$i$i$i5 = 0, $cmp5$i$i$i59 = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i15 = 0, $conv$i$i$i$i40 = 0, $incdec$ptr$i$i$i63 = 0, $or$i$i$i$i = 0;
 var $or$i$i$i$i11 = 0, $or$i$i$i$i36 = 0, $ref$tmp = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i$i$i$i66 = 0, $tobool$i$i79 = 0, $tobool$i$i85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $ref$tmp = sp + 48|0;
 $agg$tmp = sp + 36|0;
 $agg$tmp9 = sp + 24|0;
 $agg$tmp10 = sp + 12|0;
 $agg$tmp14 = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i1 = ((($args1)) + 4|0);
 $1 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp9>>2]=0|0;HEAP32[$agg$tmp9+4>>2]=0|0;HEAP32[$agg$tmp9+8>>2]=0|0;
 $cmp$i$i$i3 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp9);
  // unreachable;
 }
 $cmp2$i$i$i5 = ($1>>>0)<(11);
 if ($cmp2$i$i$i5) {
  $conv$i$i$i$i15 = $1&255;
  $__size_$i12$i$i$i17 = ((($agg$tmp9)) + 11|0);
  HEAP8[$__size_$i12$i$i$i17>>0] = $conv$i$i$i$i15;
  $cmp$i$i$i$i18 = ($1|0)==(0);
  if ($cmp$i$i$i$i18) {
   $__p$016$i$i$i22 = $agg$tmp9;
  } else {
   $__p$015$i$i$i20 = $agg$tmp9;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i7 = (($1) + 16)|0;
  $and$i$i$i$i$i8 = $add$i$i$i$i$i7 & -16;
  $call$i$i$i$i$i$i924 = (__Znwm($and$i$i$i$i$i8)|0);
  HEAP32[$agg$tmp9>>2] = $call$i$i$i$i$i$i924;
  $or$i$i$i$i11 = $and$i$i$i$i$i8 | -2147483648;
  $__cap_$i$i$i$i12 = ((($agg$tmp9)) + 8|0);
  HEAP32[$__cap_$i$i$i$i12>>2] = $or$i$i$i$i11;
  $__size_$i$i$i$i13 = ((($agg$tmp9)) + 4|0);
  HEAP32[$__size_$i$i$i$i13>>2] = $1;
  $__p$015$i$i$i20 = $call$i$i$i$i$i$i924;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i20|0),($arraydecay$i1|0),($1|0))|0;
  $__p$016$i$i$i22 = $__p$015$i$i$i20;
 }
 $arrayidx$i$i$i23 = (($__p$016$i$i$i22) + ($1)|0);
 HEAP8[$arrayidx$i$i$i23>>0] = 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp10,$args3);
 $arraydecay$i26 = ((($args5)) + 4|0);
 $2 = HEAP32[$args5>>2]|0;
 ;HEAP32[$agg$tmp14>>2]=0|0;HEAP32[$agg$tmp14+4>>2]=0|0;HEAP32[$agg$tmp14+8>>2]=0|0;
 $cmp$i$i$i28 = ($2>>>0)>(4294967279);
 if ($cmp$i$i$i28) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp14);
  // unreachable;
 }
 $cmp2$i$i$i30 = ($2>>>0)<(11);
 if ($cmp2$i$i$i30) {
  $conv$i$i$i$i40 = $2&255;
  $__size_$i12$i$i$i42 = ((($agg$tmp14)) + 11|0);
  HEAP8[$__size_$i12$i$i$i42>>0] = $conv$i$i$i$i40;
  $cmp$i$i$i$i43 = ($2|0)==(0);
  if ($cmp$i$i$i$i43) {
   $__p$016$i$i$i47 = $agg$tmp14;
  } else {
   $__p$015$i$i$i45 = $agg$tmp14;
   label = 18;
  }
 } else {
  $add$i$i$i$i$i32 = (($2) + 16)|0;
  $and$i$i$i$i$i33 = $add$i$i$i$i$i32 & -16;
  $call$i$i$i$i$i$i3450 = (__Znwm($and$i$i$i$i$i33)|0);
  HEAP32[$agg$tmp14>>2] = $call$i$i$i$i$i$i3450;
  $or$i$i$i$i36 = $and$i$i$i$i$i33 | -2147483648;
  $__cap_$i$i$i$i37 = ((($agg$tmp14)) + 8|0);
  HEAP32[$__cap_$i$i$i$i37>>2] = $or$i$i$i$i36;
  $__size_$i$i$i$i38 = ((($agg$tmp14)) + 4|0);
  HEAP32[$__size_$i$i$i$i38>>2] = $2;
  $__p$015$i$i$i45 = $call$i$i$i$i$i$i3450;
  label = 18;
 }
 if ((label|0) == 18) {
  _memcpy(($__p$015$i$i$i45|0),($arraydecay$i26|0),($2|0))|0;
  $__p$016$i$i$i47 = $__p$015$i$i$i45;
 }
 $arrayidx$i$i$i48 = (($__p$016$i$i$i47) + ($2)|0);
 HEAP8[$arrayidx$i$i$i48>>0] = 0;
 FUNCTION_TABLE_viiiiii[$fn & 7]($ref$tmp,$agg$tmp,$agg$tmp9,$agg$tmp10,$agg$tmp14,$args7);
 $call$i52 = (__Znwm(12)|0);
 $__end_$i$i$i = ((($call$i52)) + 4|0);
 $__value_$i$i$i9$i$i = ((($call$i52)) + 8|0);
 $3 = HEAP32[$ref$tmp>>2]|0;
 HEAP32[$call$i52>>2] = $3;
 $__end_$i$i = ((($ref$tmp)) + 4|0);
 $4 = HEAP32[$__end_$i$i>>2]|0;
 HEAP32[$__end_$i$i$i>>2] = $4;
 $__value_$i$i$i8$i$i = ((($ref$tmp)) + 8|0);
 $5 = HEAP32[$__value_$i$i$i8$i$i>>2]|0;
 HEAP32[$__value_$i$i$i9$i$i>>2] = $5;
 HEAP32[$__value_$i$i$i8$i$i>>2] = 0;
 HEAP32[$__end_$i$i>>2] = 0;
 HEAP32[$ref$tmp>>2] = 0;
 $__size_$i$i = ((($agg$tmp14)) + 11|0);
 $6 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($6<<24>>24)<(0);
 if ($tobool$i$i) {
  $7 = HEAP32[$agg$tmp14>>2]|0;
  __ZdlPv($7);
 }
 $8 = HEAP32[$agg$tmp10>>2]|0;
 $cmp$i57 = ($8|0)==(0|0);
 if (!($cmp$i57)) {
  $__end_$i$i$i58 = ((($agg$tmp10)) + 4|0);
  $9 = HEAP32[$__end_$i$i$i58>>2]|0;
  $cmp5$i$i$i59 = ($9|0)==($8|0);
  if ($cmp5$i$i$i59) {
   $12 = $8;
  } else {
   $__soon_to_be_end$06$i$i$i62 = $9;
   while(1) {
    $incdec$ptr$i$i$i63 = ((($__soon_to_be_end$06$i$i$i62)) + -12|0);
    $__size_$i$i$i$i$i$i$i$i65 = ((($incdec$ptr$i$i$i63)) + 11|0);
    $10 = HEAP8[$__size_$i$i$i$i$i$i$i$i65>>0]|0;
    $tobool$i$i$i$i$i$i$i$i66 = ($10<<24>>24)<(0);
    if ($tobool$i$i$i$i$i$i$i$i66) {
     $11 = HEAP32[$incdec$ptr$i$i$i63>>2]|0;
     __ZdlPv($11);
    }
    $cmp$i$i$i70 = ($incdec$ptr$i$i$i63|0)==($8|0);
    if ($cmp$i$i$i70) {
     break;
    } else {
     $__soon_to_be_end$06$i$i$i62 = $incdec$ptr$i$i$i63;
    }
   }
   $$pre$i73 = HEAP32[$agg$tmp10>>2]|0;
   $12 = $$pre$i73;
  }
  HEAP32[$__end_$i$i$i58>>2] = $8;
  __ZdlPv($12);
 }
 $__size_$i$i78 = ((($agg$tmp9)) + 11|0);
 $13 = HEAP8[$__size_$i$i78>>0]|0;
 $tobool$i$i79 = ($13<<24>>24)<(0);
 if ($tobool$i$i79) {
  $14 = HEAP32[$agg$tmp9>>2]|0;
  __ZdlPv($14);
 }
 $__size_$i$i84 = ((($agg$tmp)) + 11|0);
 $15 = HEAP8[$__size_$i$i84>>0]|0;
 $tobool$i$i85 = ($15<<24>>24)<(0);
 if (!($tobool$i$i85)) {
  STACKTOP = sp;return ($call$i52|0);
 }
 $16 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($16);
 STACKTOP = sp;return ($call$i52|0);
}
function __ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_NS2_6vectorIS8_NS6_IS8_EEEESB_EE6invokeEPFbS8_S8_SB_SB_EPNS0_11BindingTypeIS8_EUt_ESI_PSB_SJ_($fn,$args,$args1,$args3,$args5) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 var $$pre$i = 0, $$pre$i45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i12 = 0;
 var $__end_$i$i$i = 0, $__end_$i$i$i30 = 0, $__p$015$i$i$i = 0, $__p$015$i$i$i20 = 0, $__p$016$i$i$i = 0, $__p$016$i$i$i22 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i37 = 0, $__size_$i$i$i$i13 = 0, $__size_$i$i50 = 0, $__size_$i$i56 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i17 = 0, $__soon_to_be_end$06$i$i$i = 0, $__soon_to_be_end$06$i$i$i34 = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i7 = 0, $agg$tmp = 0, $agg$tmp12 = 0;
 var $agg$tmp7 = 0, $agg$tmp8 = 0, $and$i$i$i$i$i = 0, $and$i$i$i$i$i8 = 0, $arraydecay$i = 0, $arraydecay$i1 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i23 = 0, $call$i$i$i$i$i$i = 0, $call$i$i$i$i$i$i924 = 0, $call19 = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i27 = 0, $cmp$i$i$i3 = 0, $cmp$i$i$i42 = 0, $cmp$i29 = 0, $cmp2$i$i$i = 0;
 var $cmp2$i$i$i5 = 0, $cmp5$i$i$i = 0, $cmp5$i$i$i31 = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i15 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i35 = 0, $or$i$i$i$i = 0, $or$i$i$i$i11 = 0, $tobool$i$i$i$i$i$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i38 = 0, $tobool$i$i51 = 0, $tobool$i$i57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $agg$tmp = sp + 36|0;
 $agg$tmp7 = sp + 24|0;
 $agg$tmp8 = sp + 12|0;
 $agg$tmp12 = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i1 = ((($args1)) + 4|0);
 $1 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp7>>2]=0|0;HEAP32[$agg$tmp7+4>>2]=0|0;HEAP32[$agg$tmp7+8>>2]=0|0;
 $cmp$i$i$i3 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp7);
  // unreachable;
 }
 $cmp2$i$i$i5 = ($1>>>0)<(11);
 if ($cmp2$i$i$i5) {
  $conv$i$i$i$i15 = $1&255;
  $__size_$i12$i$i$i17 = ((($agg$tmp7)) + 11|0);
  HEAP8[$__size_$i12$i$i$i17>>0] = $conv$i$i$i$i15;
  $cmp$i$i$i$i18 = ($1|0)==(0);
  if ($cmp$i$i$i$i18) {
   $__p$016$i$i$i22 = $agg$tmp7;
  } else {
   $__p$015$i$i$i20 = $agg$tmp7;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i7 = (($1) + 16)|0;
  $and$i$i$i$i$i8 = $add$i$i$i$i$i7 & -16;
  $call$i$i$i$i$i$i924 = (__Znwm($and$i$i$i$i$i8)|0);
  HEAP32[$agg$tmp7>>2] = $call$i$i$i$i$i$i924;
  $or$i$i$i$i11 = $and$i$i$i$i$i8 | -2147483648;
  $__cap_$i$i$i$i12 = ((($agg$tmp7)) + 8|0);
  HEAP32[$__cap_$i$i$i$i12>>2] = $or$i$i$i$i11;
  $__size_$i$i$i$i13 = ((($agg$tmp7)) + 4|0);
  HEAP32[$__size_$i$i$i$i13>>2] = $1;
  $__p$015$i$i$i20 = $call$i$i$i$i$i$i924;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i20|0),($arraydecay$i1|0),($1|0))|0;
  $__p$016$i$i$i22 = $__p$015$i$i$i20;
 }
 $arrayidx$i$i$i23 = (($__p$016$i$i$i22) + ($1)|0);
 HEAP8[$arrayidx$i$i$i23>>0] = 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp8,$args3);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp12,$args5);
 $call19 = (FUNCTION_TABLE_iiiii[$fn & 7]($agg$tmp,$agg$tmp7,$agg$tmp8,$agg$tmp12)|0);
 $2 = HEAP32[$agg$tmp12>>2]|0;
 $cmp$i = ($2|0)==(0|0);
 if (!($cmp$i)) {
  $__end_$i$i$i = ((($agg$tmp12)) + 4|0);
  $3 = HEAP32[$__end_$i$i$i>>2]|0;
  $cmp5$i$i$i = ($3|0)==($2|0);
  if ($cmp5$i$i$i) {
   $6 = $2;
  } else {
   $__soon_to_be_end$06$i$i$i = $3;
   while(1) {
    $incdec$ptr$i$i$i = ((($__soon_to_be_end$06$i$i$i)) + -12|0);
    $__size_$i$i$i$i$i$i$i$i = ((($incdec$ptr$i$i$i)) + 11|0);
    $4 = HEAP8[$__size_$i$i$i$i$i$i$i$i>>0]|0;
    $tobool$i$i$i$i$i$i$i$i = ($4<<24>>24)<(0);
    if ($tobool$i$i$i$i$i$i$i$i) {
     $5 = HEAP32[$incdec$ptr$i$i$i>>2]|0;
     __ZdlPv($5);
    }
    $cmp$i$i$i27 = ($incdec$ptr$i$i$i|0)==($2|0);
    if ($cmp$i$i$i27) {
     break;
    } else {
     $__soon_to_be_end$06$i$i$i = $incdec$ptr$i$i$i;
    }
   }
   $$pre$i = HEAP32[$agg$tmp12>>2]|0;
   $6 = $$pre$i;
  }
  HEAP32[$__end_$i$i$i>>2] = $2;
  __ZdlPv($6);
 }
 $7 = HEAP32[$agg$tmp8>>2]|0;
 $cmp$i29 = ($7|0)==(0|0);
 if (!($cmp$i29)) {
  $__end_$i$i$i30 = ((($agg$tmp8)) + 4|0);
  $8 = HEAP32[$__end_$i$i$i30>>2]|0;
  $cmp5$i$i$i31 = ($8|0)==($7|0);
  if ($cmp5$i$i$i31) {
   $11 = $7;
  } else {
   $__soon_to_be_end$06$i$i$i34 = $8;
   while(1) {
    $incdec$ptr$i$i$i35 = ((($__soon_to_be_end$06$i$i$i34)) + -12|0);
    $__size_$i$i$i$i$i$i$i$i37 = ((($incdec$ptr$i$i$i35)) + 11|0);
    $9 = HEAP8[$__size_$i$i$i$i$i$i$i$i37>>0]|0;
    $tobool$i$i$i$i$i$i$i$i38 = ($9<<24>>24)<(0);
    if ($tobool$i$i$i$i$i$i$i$i38) {
     $10 = HEAP32[$incdec$ptr$i$i$i35>>2]|0;
     __ZdlPv($10);
    }
    $cmp$i$i$i42 = ($incdec$ptr$i$i$i35|0)==($7|0);
    if ($cmp$i$i$i42) {
     break;
    } else {
     $__soon_to_be_end$06$i$i$i34 = $incdec$ptr$i$i$i35;
    }
   }
   $$pre$i45 = HEAP32[$agg$tmp8>>2]|0;
   $11 = $$pre$i45;
  }
  HEAP32[$__end_$i$i$i30>>2] = $7;
  __ZdlPv($11);
 }
 $__size_$i$i50 = ((($agg$tmp7)) + 11|0);
 $12 = HEAP8[$__size_$i$i50>>0]|0;
 $tobool$i$i51 = ($12<<24>>24)<(0);
 if ($tobool$i$i51) {
  $13 = HEAP32[$agg$tmp7>>2]|0;
  __ZdlPv($13);
 }
 $__size_$i$i56 = ((($agg$tmp)) + 11|0);
 $14 = HEAP8[$__size_$i$i56>>0]|0;
 $tobool$i$i57 = ($14<<24>>24)<(0);
 if (!($tobool$i$i57)) {
  STACKTOP = sp;return ($call19|0);
 }
 $15 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($15);
 STACKTOP = sp;return ($call19|0);
}
function __ZN10emscripten8internal7InvokerI4KeysJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeEPFS2_S9_EPNS0_11BindingTypeIS9_EUt_E($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $$pre = 0, $0 = 0, $1 = 0, $SecretKey$i$i = 0, $SecretKey3$i$i = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i$phi$trans$insert = 0, $__size_$i12$i$i$i = 0, $add$i$i$i$i$i = 0, $agg$tmp = 0, $and$i$i$i$i$i = 0, $arraydecay$i = 0, $arrayidx$i$i$i = 0, $call$i$i$i$i$i$i = 0, $call$i1 = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0;
 var $cmp2$i$i$i = 0, $conv$i$i$i$i = 0, $or$i$i$i$i = 0, $phitmp = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $ref$tmp = sp + 16|0;
 $agg$tmp = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 FUNCTION_TABLE_vii[$fn & 31]($ref$tmp,$agg$tmp);
 $call$i1 = (__Znwm(24)|0);
 ;HEAP32[$call$i1>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$call$i1+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$call$i1+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
 ;HEAP32[$ref$tmp>>2]=0|0;HEAP32[$ref$tmp+4>>2]=0|0;HEAP32[$ref$tmp+8>>2]=0|0;
 $SecretKey$i$i = ((($call$i1)) + 12|0);
 $SecretKey3$i$i = ((($ref$tmp)) + 12|0);
 ;HEAP32[$SecretKey$i$i>>2]=HEAP32[$SecretKey3$i$i>>2]|0;HEAP32[$SecretKey$i$i+4>>2]=HEAP32[$SecretKey3$i$i+4>>2]|0;HEAP32[$SecretKey$i$i+8>>2]=HEAP32[$SecretKey3$i$i+8>>2]|0;
 ;HEAP32[$SecretKey3$i$i>>2]=0|0;HEAP32[$SecretKey3$i$i+4>>2]=0|0;HEAP32[$SecretKey3$i$i+8>>2]=0|0;
 $__size_$i$i$phi$trans$insert = ((($agg$tmp)) + 11|0);
 $$pre = HEAP8[$__size_$i$i$phi$trans$insert>>0]|0;
 $phitmp = ($$pre<<24>>24)<(0);
 if (!($phitmp)) {
  STACKTOP = sp;return ($call$i1|0);
 }
 $1 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($1);
 STACKTOP = sp;return ($call$i1|0);
}
function __ZN10emscripten8internal7InvokerI4KeysJEE6invokeEPFS2_vE($fn) {
 $fn = $fn|0;
 var $SecretKey$i$i = 0, $SecretKey3$i$i = 0, $call$i1 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ref$tmp = sp;
 FUNCTION_TABLE_vi[$fn & 31]($ref$tmp);
 $call$i1 = (__Znwm(24)|0);
 ;HEAP32[$call$i1>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$call$i1+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$call$i1+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
 ;HEAP32[$ref$tmp>>2]=0|0;HEAP32[$ref$tmp+4>>2]=0|0;HEAP32[$ref$tmp+8>>2]=0|0;
 $SecretKey$i$i = ((($call$i1)) + 12|0);
 $SecretKey3$i$i = ((($ref$tmp)) + 12|0);
 ;HEAP32[$SecretKey$i$i>>2]=HEAP32[$SecretKey3$i$i>>2]|0;HEAP32[$SecretKey$i$i+4>>2]=HEAP32[$SecretKey3$i$i+4>>2]|0;HEAP32[$SecretKey$i$i+8>>2]=HEAP32[$SecretKey3$i$i+8>>2]|0;
 STACKTOP = sp;return ($call$i1|0);
}
function __ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbS8_EPNS0_11BindingTypeIS8_EUt_E($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i12$i$i$i = 0, $add$i$i$i$i$i = 0, $agg$tmp = 0, $and$i$i$i$i$i = 0, $arraydecay$i = 0, $arrayidx$i$i$i = 0, $call = 0, $call$i$i$i$i$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0;
 var $or$i$i$i$i = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $agg$tmp = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $call = (FUNCTION_TABLE_ii[$fn & 15]($agg$tmp)|0);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if (!($tobool$i$i)) {
  STACKTOP = sp;return ($call|0);
 }
 $2 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($2);
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_EE6invokeEPFS8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i12 = 0, $__p$015$i$i$i = 0, $__p$015$i$i$i20 = 0, $__p$016$i$i$i = 0, $__p$016$i$i$i22 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i13 = 0, $__size_$i$i$i$i26 = 0, $__size_$i$i31 = 0;
 var $__size_$i$i37 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i17 = 0, $__size_$i3$i$i$i = 0, $add$i = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i7 = 0, $add31$i = 0, $agg$tmp = 0, $agg$tmp3 = 0, $and$i$i$i$i$i = 0, $and$i$i$i$i$i8 = 0, $arraydecay$i = 0, $arraydecay$i1 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i23 = 0, $call$i$i$i$i$i$i = 0, $call$i$i$i$i$i$i924 = 0, $call1$i = 0, $call132$i = 0;
 var $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i3 = 0, $cmp2$i$i$i = 0, $cmp2$i$i$i5 = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i15 = 0, $conv$i$i$i$i28 = 0, $data3739$i = 0, $data3739$i60 = 0, $or$i$i$i$i = 0, $or$i$i$i$i11 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i32 = 0, $tobool$i$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $ref$tmp = sp + 24|0;
 $agg$tmp = sp + 12|0;
 $agg$tmp3 = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i1 = ((($args1)) + 4|0);
 $1 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp3>>2]=0|0;HEAP32[$agg$tmp3+4>>2]=0|0;HEAP32[$agg$tmp3+8>>2]=0|0;
 $cmp$i$i$i3 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp3);
  // unreachable;
 }
 $cmp2$i$i$i5 = ($1>>>0)<(11);
 if ($cmp2$i$i$i5) {
  $conv$i$i$i$i15 = $1&255;
  $__size_$i12$i$i$i17 = ((($agg$tmp3)) + 11|0);
  HEAP8[$__size_$i12$i$i$i17>>0] = $conv$i$i$i$i15;
  $cmp$i$i$i$i18 = ($1|0)==(0);
  if ($cmp$i$i$i$i18) {
   $__p$016$i$i$i22 = $agg$tmp3;
  } else {
   $__p$015$i$i$i20 = $agg$tmp3;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i7 = (($1) + 16)|0;
  $and$i$i$i$i$i8 = $add$i$i$i$i$i7 & -16;
  $call$i$i$i$i$i$i924 = (__Znwm($and$i$i$i$i$i8)|0);
  HEAP32[$agg$tmp3>>2] = $call$i$i$i$i$i$i924;
  $or$i$i$i$i11 = $and$i$i$i$i$i8 | -2147483648;
  $__cap_$i$i$i$i12 = ((($agg$tmp3)) + 8|0);
  HEAP32[$__cap_$i$i$i$i12>>2] = $or$i$i$i$i11;
  $__size_$i$i$i$i13 = ((($agg$tmp3)) + 4|0);
  HEAP32[$__size_$i$i$i$i13>>2] = $1;
  $__p$015$i$i$i20 = $call$i$i$i$i$i$i924;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i20|0),($arraydecay$i1|0),($1|0))|0;
  $__p$016$i$i$i22 = $__p$015$i$i$i20;
 }
 $arrayidx$i$i$i23 = (($__p$016$i$i$i22) + ($1)|0);
 HEAP8[$arrayidx$i$i$i23>>0] = 0;
 FUNCTION_TABLE_viii[$fn & 15]($ref$tmp,$agg$tmp,$agg$tmp3);
 $__size_$i$i$i$i26 = ((($ref$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i$i$i26>>0]|0;
 $tobool$i$i$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $3 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($3) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $3;
  $4 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i60 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i60|0),($4|0),($3|0))|0;
  __ZdlPv($4);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i28 = $2&255;
  $add$i = (($conv$i$i$i$i28) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i28;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i28|0))|0;
  $$in = $call1$i;
 }
 $__size_$i$i31 = ((($agg$tmp3)) + 11|0);
 $5 = HEAP8[$__size_$i$i31>>0]|0;
 $tobool$i$i32 = ($5<<24>>24)<(0);
 if ($tobool$i$i32) {
  $6 = HEAP32[$agg$tmp3>>2]|0;
  __ZdlPv($6);
 }
 $__size_$i$i37 = ((($agg$tmp)) + 11|0);
 $7 = HEAP8[$__size_$i$i37>>0]|0;
 $tobool$i$i38 = ($7<<24>>24)<(0);
 if (!($tobool$i$i38)) {
  STACKTOP = sp;return ($$in|0);
 }
 $8 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_iS8_EE6invokeEPFS8_S8_iS8_EPNS0_11BindingTypeIS8_EUt_EiSF_($fn,$args,$args1,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i12 = 0, $__p$015$i$i$i = 0, $__p$015$i$i$i20 = 0, $__p$016$i$i$i = 0, $__p$016$i$i$i22 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i13 = 0, $__size_$i$i$i$i26 = 0, $__size_$i$i31 = 0;
 var $__size_$i$i37 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i17 = 0, $__size_$i3$i$i$i = 0, $add$i = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i7 = 0, $add31$i = 0, $agg$tmp = 0, $agg$tmp5 = 0, $and$i$i$i$i$i = 0, $and$i$i$i$i$i8 = 0, $arraydecay$i = 0, $arraydecay$i1 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i23 = 0, $call$i$i$i$i$i$i = 0, $call$i$i$i$i$i$i924 = 0, $call1$i = 0, $call132$i = 0;
 var $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i3 = 0, $cmp2$i$i$i = 0, $cmp2$i$i$i5 = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i15 = 0, $conv$i$i$i$i28 = 0, $data3739$i = 0, $data3739$i60 = 0, $or$i$i$i$i = 0, $or$i$i$i$i11 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i32 = 0, $tobool$i$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $ref$tmp = sp + 24|0;
 $agg$tmp = sp + 12|0;
 $agg$tmp5 = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i1 = ((($args3)) + 4|0);
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp5>>2]=0|0;HEAP32[$agg$tmp5+4>>2]=0|0;HEAP32[$agg$tmp5+8>>2]=0|0;
 $cmp$i$i$i3 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp5);
  // unreachable;
 }
 $cmp2$i$i$i5 = ($1>>>0)<(11);
 if ($cmp2$i$i$i5) {
  $conv$i$i$i$i15 = $1&255;
  $__size_$i12$i$i$i17 = ((($agg$tmp5)) + 11|0);
  HEAP8[$__size_$i12$i$i$i17>>0] = $conv$i$i$i$i15;
  $cmp$i$i$i$i18 = ($1|0)==(0);
  if ($cmp$i$i$i$i18) {
   $__p$016$i$i$i22 = $agg$tmp5;
  } else {
   $__p$015$i$i$i20 = $agg$tmp5;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i7 = (($1) + 16)|0;
  $and$i$i$i$i$i8 = $add$i$i$i$i$i7 & -16;
  $call$i$i$i$i$i$i924 = (__Znwm($and$i$i$i$i$i8)|0);
  HEAP32[$agg$tmp5>>2] = $call$i$i$i$i$i$i924;
  $or$i$i$i$i11 = $and$i$i$i$i$i8 | -2147483648;
  $__cap_$i$i$i$i12 = ((($agg$tmp5)) + 8|0);
  HEAP32[$__cap_$i$i$i$i12>>2] = $or$i$i$i$i11;
  $__size_$i$i$i$i13 = ((($agg$tmp5)) + 4|0);
  HEAP32[$__size_$i$i$i$i13>>2] = $1;
  $__p$015$i$i$i20 = $call$i$i$i$i$i$i924;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i20|0),($arraydecay$i1|0),($1|0))|0;
  $__p$016$i$i$i22 = $__p$015$i$i$i20;
 }
 $arrayidx$i$i$i23 = (($__p$016$i$i$i22) + ($1)|0);
 HEAP8[$arrayidx$i$i$i23>>0] = 0;
 FUNCTION_TABLE_viiii[$fn & 15]($ref$tmp,$agg$tmp,$args1,$agg$tmp5);
 $__size_$i$i$i$i26 = ((($ref$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i$i$i26>>0]|0;
 $tobool$i$i$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $3 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($3) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $3;
  $4 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i60 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i60|0),($4|0),($3|0))|0;
  __ZdlPv($4);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i28 = $2&255;
  $add$i = (($conv$i$i$i$i28) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i28;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i28|0))|0;
  $$in = $call1$i;
 }
 $__size_$i$i31 = ((($agg$tmp5)) + 11|0);
 $5 = HEAP8[$__size_$i$i31>>0]|0;
 $tobool$i$i32 = ($5<<24>>24)<(0);
 if ($tobool$i$i32) {
  $6 = HEAP32[$agg$tmp5>>2]|0;
  __ZdlPv($6);
 }
 $__size_$i$i37 = ((($agg$tmp)) + 11|0);
 $7 = HEAP8[$__size_$i$i37>>0]|0;
 $tobool$i$i38 = ($7<<24>>24)<(0);
 if (!($tobool$i$i38)) {
  STACKTOP = sp;return ($$in|0);
 }
 $8 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_S8_EE6invokeEPFS8_S8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_SF_($fn,$args,$args1,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i12 = 0, $__cap_$i$i$i$i37 = 0, $__p$015$i$i$i = 0, $__p$015$i$i$i20 = 0, $__p$015$i$i$i45 = 0, $__p$016$i$i$i = 0;
 var $__p$016$i$i$i22 = 0, $__p$016$i$i$i47 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i13 = 0, $__size_$i$i$i$i38 = 0, $__size_$i$i$i$i52 = 0, $__size_$i$i57 = 0, $__size_$i$i63 = 0, $__size_$i$i69 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i17 = 0, $__size_$i12$i$i$i42 = 0, $__size_$i3$i$i$i = 0, $add$i = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i32 = 0, $add$i$i$i$i$i7 = 0, $add31$i = 0, $agg$tmp = 0, $agg$tmp5 = 0;
 var $agg$tmp6 = 0, $and$i$i$i$i$i = 0, $and$i$i$i$i$i33 = 0, $and$i$i$i$i$i8 = 0, $arraydecay$i = 0, $arraydecay$i1 = 0, $arraydecay$i26 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i23 = 0, $arrayidx$i$i$i48 = 0, $call$i$i$i$i$i$i = 0, $call$i$i$i$i$i$i3450 = 0, $call$i$i$i$i$i$i924 = 0, $call1$i = 0, $call132$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i$i43 = 0, $cmp$i$i$i28 = 0;
 var $cmp$i$i$i3 = 0, $cmp2$i$i$i = 0, $cmp2$i$i$i30 = 0, $cmp2$i$i$i5 = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i15 = 0, $conv$i$i$i$i40 = 0, $conv$i$i$i$i54 = 0, $data3739$i = 0, $data3739$i98 = 0, $or$i$i$i$i = 0, $or$i$i$i$i11 = 0, $or$i$i$i$i36 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i58 = 0, $tobool$i$i64 = 0, $tobool$i$i70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $ref$tmp = sp + 36|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp5 = sp + 12|0;
 $agg$tmp6 = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i1 = ((($args1)) + 4|0);
 $1 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp5>>2]=0|0;HEAP32[$agg$tmp5+4>>2]=0|0;HEAP32[$agg$tmp5+8>>2]=0|0;
 $cmp$i$i$i3 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp5);
  // unreachable;
 }
 $cmp2$i$i$i5 = ($1>>>0)<(11);
 if ($cmp2$i$i$i5) {
  $conv$i$i$i$i15 = $1&255;
  $__size_$i12$i$i$i17 = ((($agg$tmp5)) + 11|0);
  HEAP8[$__size_$i12$i$i$i17>>0] = $conv$i$i$i$i15;
  $cmp$i$i$i$i18 = ($1|0)==(0);
  if ($cmp$i$i$i$i18) {
   $__p$016$i$i$i22 = $agg$tmp5;
  } else {
   $__p$015$i$i$i20 = $agg$tmp5;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i7 = (($1) + 16)|0;
  $and$i$i$i$i$i8 = $add$i$i$i$i$i7 & -16;
  $call$i$i$i$i$i$i924 = (__Znwm($and$i$i$i$i$i8)|0);
  HEAP32[$agg$tmp5>>2] = $call$i$i$i$i$i$i924;
  $or$i$i$i$i11 = $and$i$i$i$i$i8 | -2147483648;
  $__cap_$i$i$i$i12 = ((($agg$tmp5)) + 8|0);
  HEAP32[$__cap_$i$i$i$i12>>2] = $or$i$i$i$i11;
  $__size_$i$i$i$i13 = ((($agg$tmp5)) + 4|0);
  HEAP32[$__size_$i$i$i$i13>>2] = $1;
  $__p$015$i$i$i20 = $call$i$i$i$i$i$i924;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i20|0),($arraydecay$i1|0),($1|0))|0;
  $__p$016$i$i$i22 = $__p$015$i$i$i20;
 }
 $arrayidx$i$i$i23 = (($__p$016$i$i$i22) + ($1)|0);
 HEAP8[$arrayidx$i$i$i23>>0] = 0;
 $arraydecay$i26 = ((($args3)) + 4|0);
 $2 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp6>>2]=0|0;HEAP32[$agg$tmp6+4>>2]=0|0;HEAP32[$agg$tmp6+8>>2]=0|0;
 $cmp$i$i$i28 = ($2>>>0)>(4294967279);
 if ($cmp$i$i$i28) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp6);
  // unreachable;
 }
 $cmp2$i$i$i30 = ($2>>>0)<(11);
 if ($cmp2$i$i$i30) {
  $conv$i$i$i$i40 = $2&255;
  $__size_$i12$i$i$i42 = ((($agg$tmp6)) + 11|0);
  HEAP8[$__size_$i12$i$i$i42>>0] = $conv$i$i$i$i40;
  $cmp$i$i$i$i43 = ($2|0)==(0);
  if ($cmp$i$i$i$i43) {
   $__p$016$i$i$i47 = $agg$tmp6;
  } else {
   $__p$015$i$i$i45 = $agg$tmp6;
   label = 18;
  }
 } else {
  $add$i$i$i$i$i32 = (($2) + 16)|0;
  $and$i$i$i$i$i33 = $add$i$i$i$i$i32 & -16;
  $call$i$i$i$i$i$i3450 = (__Znwm($and$i$i$i$i$i33)|0);
  HEAP32[$agg$tmp6>>2] = $call$i$i$i$i$i$i3450;
  $or$i$i$i$i36 = $and$i$i$i$i$i33 | -2147483648;
  $__cap_$i$i$i$i37 = ((($agg$tmp6)) + 8|0);
  HEAP32[$__cap_$i$i$i$i37>>2] = $or$i$i$i$i36;
  $__size_$i$i$i$i38 = ((($agg$tmp6)) + 4|0);
  HEAP32[$__size_$i$i$i$i38>>2] = $2;
  $__p$015$i$i$i45 = $call$i$i$i$i$i$i3450;
  label = 18;
 }
 if ((label|0) == 18) {
  _memcpy(($__p$015$i$i$i45|0),($arraydecay$i26|0),($2|0))|0;
  $__p$016$i$i$i47 = $__p$015$i$i$i45;
 }
 $arrayidx$i$i$i48 = (($__p$016$i$i$i47) + ($2)|0);
 HEAP8[$arrayidx$i$i$i48>>0] = 0;
 FUNCTION_TABLE_viiii[$fn & 15]($ref$tmp,$agg$tmp,$agg$tmp5,$agg$tmp6);
 $__size_$i$i$i$i52 = ((($ref$tmp)) + 11|0);
 $3 = HEAP8[$__size_$i$i$i$i52>>0]|0;
 $tobool$i$i$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $4 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($4) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $4;
  $5 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i98 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i98|0),($5|0),($4|0))|0;
  __ZdlPv($5);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i54 = $3&255;
  $add$i = (($conv$i$i$i$i54) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i54;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i54|0))|0;
  $$in = $call1$i;
 }
 $__size_$i$i57 = ((($agg$tmp6)) + 11|0);
 $6 = HEAP8[$__size_$i$i57>>0]|0;
 $tobool$i$i58 = ($6<<24>>24)<(0);
 if ($tobool$i$i58) {
  $7 = HEAP32[$agg$tmp6>>2]|0;
  __ZdlPv($7);
 }
 $__size_$i$i63 = ((($agg$tmp5)) + 11|0);
 $8 = HEAP8[$__size_$i$i63>>0]|0;
 $tobool$i$i64 = ($8<<24>>24)<(0);
 if ($tobool$i$i64) {
  $9 = HEAP32[$agg$tmp5>>2]|0;
  __ZdlPv($9);
 }
 $__size_$i$i69 = ((($agg$tmp)) + 11|0);
 $10 = HEAP8[$__size_$i$i69>>0]|0;
 $tobool$i$i70 = ($10<<24>>24)<(0);
 if (!($tobool$i$i70)) {
  STACKTOP = sp;return ($$in|0);
 }
 $11 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($11);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_EE6invokeEPFbS8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_SF_($fn,$args,$args1,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i12 = 0, $__cap_$i$i$i$i37 = 0, $__p$015$i$i$i = 0, $__p$015$i$i$i20 = 0, $__p$015$i$i$i45 = 0, $__p$016$i$i$i = 0, $__p$016$i$i$i22 = 0, $__p$016$i$i$i47 = 0, $__size_$i$i = 0, $__size_$i$i$i$i = 0;
 var $__size_$i$i$i$i13 = 0, $__size_$i$i$i$i38 = 0, $__size_$i$i53 = 0, $__size_$i$i59 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i17 = 0, $__size_$i12$i$i$i42 = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i32 = 0, $add$i$i$i$i$i7 = 0, $agg$tmp = 0, $agg$tmp5 = 0, $agg$tmp6 = 0, $and$i$i$i$i$i = 0, $and$i$i$i$i$i33 = 0, $and$i$i$i$i$i8 = 0, $arraydecay$i = 0, $arraydecay$i1 = 0, $arraydecay$i26 = 0, $arrayidx$i$i$i = 0;
 var $arrayidx$i$i$i23 = 0, $arrayidx$i$i$i48 = 0, $call = 0, $call$i$i$i$i$i$i = 0, $call$i$i$i$i$i$i3450 = 0, $call$i$i$i$i$i$i924 = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i$i43 = 0, $cmp$i$i$i28 = 0, $cmp$i$i$i3 = 0, $cmp2$i$i$i = 0, $cmp2$i$i$i30 = 0, $cmp2$i$i$i5 = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i15 = 0, $conv$i$i$i$i40 = 0, $or$i$i$i$i = 0, $or$i$i$i$i11 = 0;
 var $or$i$i$i$i36 = 0, $tobool$i$i = 0, $tobool$i$i54 = 0, $tobool$i$i60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp5 = sp + 12|0;
 $agg$tmp6 = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i1 = ((($args1)) + 4|0);
 $1 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp5>>2]=0|0;HEAP32[$agg$tmp5+4>>2]=0|0;HEAP32[$agg$tmp5+8>>2]=0|0;
 $cmp$i$i$i3 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp5);
  // unreachable;
 }
 $cmp2$i$i$i5 = ($1>>>0)<(11);
 if ($cmp2$i$i$i5) {
  $conv$i$i$i$i15 = $1&255;
  $__size_$i12$i$i$i17 = ((($agg$tmp5)) + 11|0);
  HEAP8[$__size_$i12$i$i$i17>>0] = $conv$i$i$i$i15;
  $cmp$i$i$i$i18 = ($1|0)==(0);
  if ($cmp$i$i$i$i18) {
   $__p$016$i$i$i22 = $agg$tmp5;
  } else {
   $__p$015$i$i$i20 = $agg$tmp5;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i7 = (($1) + 16)|0;
  $and$i$i$i$i$i8 = $add$i$i$i$i$i7 & -16;
  $call$i$i$i$i$i$i924 = (__Znwm($and$i$i$i$i$i8)|0);
  HEAP32[$agg$tmp5>>2] = $call$i$i$i$i$i$i924;
  $or$i$i$i$i11 = $and$i$i$i$i$i8 | -2147483648;
  $__cap_$i$i$i$i12 = ((($agg$tmp5)) + 8|0);
  HEAP32[$__cap_$i$i$i$i12>>2] = $or$i$i$i$i11;
  $__size_$i$i$i$i13 = ((($agg$tmp5)) + 4|0);
  HEAP32[$__size_$i$i$i$i13>>2] = $1;
  $__p$015$i$i$i20 = $call$i$i$i$i$i$i924;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i20|0),($arraydecay$i1|0),($1|0))|0;
  $__p$016$i$i$i22 = $__p$015$i$i$i20;
 }
 $arrayidx$i$i$i23 = (($__p$016$i$i$i22) + ($1)|0);
 HEAP8[$arrayidx$i$i$i23>>0] = 0;
 $arraydecay$i26 = ((($args3)) + 4|0);
 $2 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp6>>2]=0|0;HEAP32[$agg$tmp6+4>>2]=0|0;HEAP32[$agg$tmp6+8>>2]=0|0;
 $cmp$i$i$i28 = ($2>>>0)>(4294967279);
 if ($cmp$i$i$i28) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp6);
  // unreachable;
 }
 $cmp2$i$i$i30 = ($2>>>0)<(11);
 if ($cmp2$i$i$i30) {
  $conv$i$i$i$i40 = $2&255;
  $__size_$i12$i$i$i42 = ((($agg$tmp6)) + 11|0);
  HEAP8[$__size_$i12$i$i$i42>>0] = $conv$i$i$i$i40;
  $cmp$i$i$i$i43 = ($2|0)==(0);
  if ($cmp$i$i$i$i43) {
   $__p$016$i$i$i47 = $agg$tmp6;
  } else {
   $__p$015$i$i$i45 = $agg$tmp6;
   label = 18;
  }
 } else {
  $add$i$i$i$i$i32 = (($2) + 16)|0;
  $and$i$i$i$i$i33 = $add$i$i$i$i$i32 & -16;
  $call$i$i$i$i$i$i3450 = (__Znwm($and$i$i$i$i$i33)|0);
  HEAP32[$agg$tmp6>>2] = $call$i$i$i$i$i$i3450;
  $or$i$i$i$i36 = $and$i$i$i$i$i33 | -2147483648;
  $__cap_$i$i$i$i37 = ((($agg$tmp6)) + 8|0);
  HEAP32[$__cap_$i$i$i$i37>>2] = $or$i$i$i$i36;
  $__size_$i$i$i$i38 = ((($agg$tmp6)) + 4|0);
  HEAP32[$__size_$i$i$i$i38>>2] = $2;
  $__p$015$i$i$i45 = $call$i$i$i$i$i$i3450;
  label = 18;
 }
 if ((label|0) == 18) {
  _memcpy(($__p$015$i$i$i45|0),($arraydecay$i26|0),($2|0))|0;
  $__p$016$i$i$i47 = $__p$015$i$i$i45;
 }
 $arrayidx$i$i$i48 = (($__p$016$i$i$i47) + ($2)|0);
 HEAP8[$arrayidx$i$i$i48>>0] = 0;
 $call = (FUNCTION_TABLE_iiii[$fn & 15]($agg$tmp,$agg$tmp5,$agg$tmp6)|0);
 $__size_$i$i = ((($agg$tmp6)) + 11|0);
 $3 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i) {
  $4 = HEAP32[$agg$tmp6>>2]|0;
  __ZdlPv($4);
 }
 $__size_$i$i53 = ((($agg$tmp5)) + 11|0);
 $5 = HEAP8[$__size_$i$i53>>0]|0;
 $tobool$i$i54 = ($5<<24>>24)<(0);
 if ($tobool$i$i54) {
  $6 = HEAP32[$agg$tmp5>>2]|0;
  __ZdlPv($6);
 }
 $__size_$i$i59 = ((($agg$tmp)) + 11|0);
 $7 = HEAP8[$__size_$i$i59>>0]|0;
 $tobool$i$i60 = ($7<<24>>24)<(0);
 if (!($tobool$i$i60)) {
  STACKTOP = sp;return ($call|0);
 }
 $8 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9push_backERKS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_ = 0, $__value_$i$i$i = 0, $cmp = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = ((($this)) + 4|0);
 $0 = HEAP32[$__end_>>2]|0;
 $__value_$i$i$i = ((($this)) + 8|0);
 $1 = HEAP32[$__value_$i$i$i>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($this,$__x);
  return;
 } else {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$__x);
  $2 = HEAP32[$__end_>>2]|0;
  $incdec$ptr = ((($2)) + 12|0);
  HEAP32[$__end_>>2] = $incdec$ptr;
  return;
 }
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6resizeEmRKS6_($this,$__sz,$__x) {
 $this = $this|0;
 $__sz = $__sz|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i$i$i$i$i$i = 0, $__soon_to_be_end$06$i$i = 0, $add$ptr = 0, $cmp = 0, $cmp$i$i = 0, $cmp2 = 0, $cmp5$i$i = 0, $incdec$ptr$i$i = 0, $sub = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tobool$i$i$i$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $cmp = ($sub$ptr$div$i>>>0)<($__sz>>>0);
 $2 = $1;
 $3 = $0;
 if ($cmp) {
  $sub = (($__sz) - ($sub$ptr$div$i))|0;
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8__appendEmRKS6_($this,$sub,$__x);
  return;
 }
 $cmp2 = ($sub$ptr$div$i>>>0)>($__sz>>>0);
 if (!($cmp2)) {
  return;
 }
 $add$ptr = (($2) + (($__sz*12)|0)|0);
 $cmp5$i$i = ($add$ptr|0)==($3|0);
 if (!($cmp5$i$i)) {
  $__soon_to_be_end$06$i$i = $3;
  while(1) {
   $incdec$ptr$i$i = ((($__soon_to_be_end$06$i$i)) + -12|0);
   $__size_$i$i$i$i$i$i$i = ((($incdec$ptr$i$i)) + 11|0);
   $4 = HEAP8[$__size_$i$i$i$i$i$i$i>>0]|0;
   $tobool$i$i$i$i$i$i$i = ($4<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i) {
    $5 = HEAP32[$incdec$ptr$i$i>>2]|0;
    __ZdlPv($5);
   }
   $cmp$i$i = ($incdec$ptr$i$i|0)==($add$ptr|0);
   if ($cmp$i$i) {
    break;
   } else {
    $__soon_to_be_end$06$i$i = $incdec$ptr$i$i;
   }
  }
 }
 HEAP32[$__end_$i>>2] = $add$ptr;
 return;
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getERKSB_m($agg$result,$v,$index) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $index = $index|0;
 var $$in$i$i$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i$i$i$i$i$i = 0, $__size_$i3$i$i$i$i$i$i = 0, $add$i$i$i$i = 0, $add31$i$i$i$i = 0, $argv$i = 0, $arrayidx$i = 0, $call1$i$i$i$i = 0, $call132$i$i$i$i = 0, $call4$i = 0, $cmp = 0, $cond$i$i14$i$i$i$i = 0, $cond$i$i2141$i$i$i$i = 0;
 var $conv$i$i$i$i$i$i$i = 0, $data3739$i$i$i$i = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tobool$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $argv$i = sp;
 $__end_$i = ((($v)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$v>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $cmp = ($sub$ptr$div$i>>>0)>($index>>>0);
 $2 = $1;
 if (!($cmp)) {
  HEAP32[$agg$result>>2] = (1);
  STACKTOP = sp;return;
 }
 $arrayidx$i = (($2) + (($index*12)|0)|0);
 $__size_$i$i$i$i$i$i$i = ((($arrayidx$i)) + 11|0);
 $3 = HEAP8[$__size_$i$i$i$i$i$i$i>>0]|0;
 $tobool$i$i$i$i$i$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i$i$i$i$i$i) {
  $__size_$i3$i$i$i$i$i$i = (((($2) + (($index*12)|0)|0)) + 4|0);
  $4 = HEAP32[$__size_$i3$i$i$i$i$i$i>>2]|0;
  $add31$i$i$i$i = (($4) + 4)|0;
  $call132$i$i$i$i = (_malloc($add31$i$i$i$i)|0);
  HEAP32[$call132$i$i$i$i>>2] = $4;
  $5 = HEAP32[$arrayidx$i>>2]|0;
  $$in$i$i$i$i = $call132$i$i$i$i;$cond$i$i14$i$i$i$i = $4;$cond$i$i2141$i$i$i$i = $5;
 } else {
  $conv$i$i$i$i$i$i$i = $3&255;
  $add$i$i$i$i = (($conv$i$i$i$i$i$i$i) + 4)|0;
  $call1$i$i$i$i = (_malloc($add$i$i$i$i)|0);
  HEAP32[$call1$i$i$i$i>>2] = $conv$i$i$i$i$i$i$i;
  $$in$i$i$i$i = $call1$i$i$i$i;$cond$i$i14$i$i$i$i = $conv$i$i$i$i$i$i$i;$cond$i$i2141$i$i$i$i = $arrayidx$i;
 }
 $data3739$i$i$i$i = ((($$in$i$i$i$i)) + 4|0);
 _memcpy(($data3739$i$i$i$i|0),($cond$i$i2141$i$i$i$i|0),($cond$i$i14$i$i$i$i|0))|0;
 HEAP32[$argv$i>>2] = $$in$i$i$i$i;
 $call4$i = (__emval_take_value((42488|0),($argv$i|0))|0);
 HEAP32[$agg$result>>2] = $call4$i;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3setERSB_mRKS9_($v,$index,$value) {
 $v = $v|0;
 $index = $index|0;
 $value = $value|0;
 var $0 = 0, $arrayidx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $arrayidx$i = (($0) + (($index*12)|0)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($arrayidx$i,$value)|0);
 return 1;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$in = 0, $$pre = 0, $$pre$i = 0, $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__end1$addr$04$i$i = 0, $__end_$i = 0, $__size_$i$i$i$i$i$i$i$i$i15 = 0, $__value_$i$i$i$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr5$i = 0, $call$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i21 = 0, $cmp$i$i$i$i5 = 0, $cmp$i28 = 0, $cmp1$i$i$i$i11 = 0, $cmp3$i = 0, $cmp3$i$i = 0, $cond$i = 0;
 var $exception$i$i$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i$i13 = 0, $mul$i = 0, $mul$i$i$i = 0, $spec$select$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i$i16 = 0, $tobool$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $add = (($sub$ptr$div$i) + 1)|0;
 $cmp$i = ($add>>>0)>(357913941);
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__value_$i$i$i$i$i$i = ((($this)) + 8|0);
 $2 = HEAP32[$__value_$i$i$i$i$i$i>>2]|0;
 $sub$ptr$sub$i$i$i = (($2) - ($1))|0;
 $sub$ptr$div$i$i$i = (($sub$ptr$sub$i$i$i|0) / 12)&-1;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(178956970);
 $mul$i = $sub$ptr$div$i$i$i << 1;
 $cmp$i$i$i$i5 = ($mul$i>>>0)<($add>>>0);
 $$sroa$speculated$i = $cmp$i$i$i$i5 ? $add : $mul$i;
 $spec$select$i = $cmp3$i ? $$sroa$speculated$i : 357913941;
 $cmp$i28 = ($spec$select$i|0)==(0);
 do {
  if ($cmp$i28) {
   $cond$i = 0;
  } else {
   $cmp$i$i$i = ($spec$select$i>>>0)>(357913941);
   if ($cmp$i$i$i) {
    $exception$i$i$i$i = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($exception$i$i$i$i,45632);
    HEAP32[$exception$i$i$i$i>>2] = (43984);
    ___cxa_throw(($exception$i$i$i$i|0),(43288|0),(6|0));
    // unreachable;
   } else {
    $mul$i$i$i = ($spec$select$i*12)|0;
    $call$i$i$i$i = (__Znwm($mul$i$i$i)|0);
    $cond$i = $call$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$ptr$i = (($cond$i) + (($sub$ptr$div$i*12)|0)|0);
 $add$ptr5$i = (($cond$i) + (($spec$select$i*12)|0)|0);
 $3 = $add$ptr5$i;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($add$ptr$i,$__x);
 $incdec$ptr = ((($add$ptr$i)) + 12|0);
 $4 = $incdec$ptr;
 $5 = HEAP32[$this>>2]|0;
 $6 = HEAP32[$__end_$i>>2]|0;
 $cmp3$i$i = ($6|0)==($5|0);
 if ($cmp3$i$i) {
  $7 = $5;
  $$in = $add$ptr$i;$10 = $7;$12 = $5;
 } else {
  $8 = $add$ptr$i;$__end1$addr$04$i$i = $6;
  while(1) {
   $add$ptr$i$i = ((($8)) + -12|0);
   $incdec$ptr$i$i = ((($__end1$addr$04$i$i)) + -12|0);
   ;HEAP32[$add$ptr$i$i>>2]=HEAP32[$incdec$ptr$i$i>>2]|0;HEAP32[$add$ptr$i$i+4>>2]=HEAP32[$incdec$ptr$i$i+4>>2]|0;HEAP32[$add$ptr$i$i+8>>2]=HEAP32[$incdec$ptr$i$i+8>>2]|0;
   ;HEAP32[$incdec$ptr$i$i>>2]=0|0;HEAP32[$incdec$ptr$i$i+4>>2]=0|0;HEAP32[$incdec$ptr$i$i+8>>2]=0|0;
   $cmp$i$i = ($incdec$ptr$i$i|0)==($5|0);
   if ($cmp$i$i) {
    break;
   } else {
    $8 = $add$ptr$i$i;$__end1$addr$04$i$i = $incdec$ptr$i$i;
   }
  }
  $$pre$i = HEAP32[$this>>2]|0;
  $$pre = HEAP32[$__end_$i>>2]|0;
  $$in = $add$ptr$i$i;$10 = $$pre$i;$12 = $$pre;
 }
 $9 = $$in;
 HEAP32[$this>>2] = $9;
 HEAP32[$__end_$i>>2] = $4;
 HEAP32[$__value_$i$i$i$i$i$i>>2] = $3;
 $11 = $10;
 $cmp1$i$i$i$i11 = ($12|0)==($11|0);
 if (!($cmp1$i$i$i$i11)) {
  $13 = $12;
  while(1) {
   $incdec$ptr$i$i$i$i13 = ((($13)) + -12|0);
   $__size_$i$i$i$i$i$i$i$i$i15 = ((($incdec$ptr$i$i$i$i13)) + 11|0);
   $14 = HEAP8[$__size_$i$i$i$i$i$i$i$i$i15>>0]|0;
   $tobool$i$i$i$i$i$i$i$i$i16 = ($14<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i$i$i16) {
    $15 = HEAP32[$incdec$ptr$i$i$i$i13>>2]|0;
    __ZdlPv($15);
   }
   $cmp$i$i$i$i21 = ($incdec$ptr$i$i$i$i13|0)==($11|0);
   if ($cmp$i$i$i$i21) {
    break;
   } else {
    $13 = $incdec$ptr$i$i$i$i13;
   }
  }
 }
 $tobool$i24 = ($10|0)==(0);
 if ($tobool$i24) {
  return;
 }
 $16 = $10;
 __ZdlPv($16);
 return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8__appendEmRKS6_($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $$pre = 0, $$pre$i47 = 0, $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end1$addr$04$i$i = 0, $__end_ = 0, $__n$addr$0$i = 0, $__n$addr$0$i40 = 0, $__size_$i$i$i$i$i$i$i$i$i14 = 0, $__v$sroa$16$0 = 0, $__value_$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr5$i = 0, $call$i$i$i$i = 0;
 var $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i$i$i29 = 0, $cmp$i27 = 0, $cmp$i34 = 0, $cmp$i43 = 0, $cmp1$i$i$i$i10 = 0, $cmp3$i = 0, $cmp3$i$i = 0, $cond$i = 0, $dec$i = 0, $dec$i42 = 0, $exception$i$i$i$i = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i$i12 = 0, $incdec$ptr$i41 = 0;
 var $mul$i = 0, $mul$i$i$i = 0, $spec$select$i = 0, $sub$ptr$div = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i$i15 = 0, $tobool$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i$i$i = ((($this)) + 8|0);
 $0 = HEAP32[$__value_$i$i$i>>2]|0;
 $__end_ = ((($this)) + 4|0);
 $1 = HEAP32[$__end_>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
 $cmp = ($sub$ptr$div>>>0)<($__n>>>0);
 if (!($cmp)) {
  $2 = $1;
  $3 = $2;$__n$addr$0$i = $__n;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$__x);
   $4 = HEAP32[$__end_>>2]|0;
   $incdec$ptr$i = ((($4)) + 12|0);
   HEAP32[$__end_>>2] = $incdec$ptr$i;
   $dec$i = (($__n$addr$0$i) + -1)|0;
   $cmp$i = ($dec$i|0)==(0);
   if ($cmp$i) {
    break;
   } else {
    $3 = $incdec$ptr$i;$__n$addr$0$i = $dec$i;
   }
  }
  return;
 }
 $5 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($1) - ($5))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $add = (($sub$ptr$div$i) + ($__n))|0;
 $cmp$i27 = ($add>>>0)>(357913941);
 if ($cmp$i27) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $sub$ptr$sub$i$i$i = (($0) - ($5))|0;
 $sub$ptr$div$i$i$i = (($sub$ptr$sub$i$i$i|0) / 12)&-1;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(178956970);
 $mul$i = $sub$ptr$div$i$i$i << 1;
 $cmp$i$i$i$i29 = ($mul$i>>>0)<($add>>>0);
 $$sroa$speculated$i = $cmp$i$i$i$i29 ? $add : $mul$i;
 $spec$select$i = $cmp3$i ? $$sroa$speculated$i : 357913941;
 $cmp$i34 = ($spec$select$i|0)==(0);
 do {
  if ($cmp$i34) {
   $cond$i = 0;
  } else {
   $cmp$i$i$i = ($spec$select$i>>>0)>(357913941);
   if ($cmp$i$i$i) {
    $exception$i$i$i$i = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($exception$i$i$i$i,45632);
    HEAP32[$exception$i$i$i$i>>2] = (43984);
    ___cxa_throw(($exception$i$i$i$i|0),(43288|0),(6|0));
    // unreachable;
   } else {
    $mul$i$i$i = ($spec$select$i*12)|0;
    $call$i$i$i$i = (__Znwm($mul$i$i$i)|0);
    $cond$i = $call$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$ptr$i = (($cond$i) + (($sub$ptr$div$i*12)|0)|0);
 $6 = $add$ptr$i;
 $add$ptr5$i = (($cond$i) + (($spec$select$i*12)|0)|0);
 $7 = $add$ptr5$i;
 $8 = $add$ptr$i;$__n$addr$0$i40 = $__n;$__v$sroa$16$0 = $6;
 while(1) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($8,$__x);
  $9 = $__v$sroa$16$0;
  $incdec$ptr$i41 = ((($9)) + 12|0);
  $10 = $incdec$ptr$i41;
  $dec$i42 = (($__n$addr$0$i40) + -1)|0;
  $cmp$i43 = ($dec$i42|0)==(0);
  if ($cmp$i43) {
   break;
  } else {
   $8 = $incdec$ptr$i41;$__n$addr$0$i40 = $dec$i42;$__v$sroa$16$0 = $10;
  }
 }
 $11 = $incdec$ptr$i41;
 $12 = HEAP32[$this>>2]|0;
 $13 = HEAP32[$__end_>>2]|0;
 $cmp3$i$i = ($13|0)==($12|0);
 if ($cmp3$i$i) {
  $14 = $12;
  $17 = $6;$18 = $14;$20 = $12;
 } else {
  $15 = $add$ptr$i;$__end1$addr$04$i$i = $13;
  while(1) {
   $add$ptr$i$i = ((($15)) + -12|0);
   $incdec$ptr$i$i = ((($__end1$addr$04$i$i)) + -12|0);
   ;HEAP32[$add$ptr$i$i>>2]=HEAP32[$incdec$ptr$i$i>>2]|0;HEAP32[$add$ptr$i$i+4>>2]=HEAP32[$incdec$ptr$i$i+4>>2]|0;HEAP32[$add$ptr$i$i+8>>2]=HEAP32[$incdec$ptr$i$i+8>>2]|0;
   ;HEAP32[$incdec$ptr$i$i>>2]=0|0;HEAP32[$incdec$ptr$i$i+4>>2]=0|0;HEAP32[$incdec$ptr$i$i+8>>2]=0|0;
   $cmp$i$i = ($incdec$ptr$i$i|0)==($12|0);
   if ($cmp$i$i) {
    break;
   } else {
    $15 = $add$ptr$i$i;$__end1$addr$04$i$i = $incdec$ptr$i$i;
   }
  }
  $16 = $add$ptr$i$i;
  $$pre$i47 = HEAP32[$this>>2]|0;
  $$pre = HEAP32[$__end_>>2]|0;
  $17 = $16;$18 = $$pre$i47;$20 = $$pre;
 }
 HEAP32[$this>>2] = $17;
 HEAP32[$__end_>>2] = $11;
 HEAP32[$__value_$i$i$i>>2] = $7;
 $19 = $18;
 $cmp1$i$i$i$i10 = ($20|0)==($19|0);
 if (!($cmp1$i$i$i$i10)) {
  $21 = $20;
  while(1) {
   $incdec$ptr$i$i$i$i12 = ((($21)) + -12|0);
   $__size_$i$i$i$i$i$i$i$i$i14 = ((($incdec$ptr$i$i$i$i12)) + 11|0);
   $22 = HEAP8[$__size_$i$i$i$i$i$i$i$i$i14>>0]|0;
   $tobool$i$i$i$i$i$i$i$i$i15 = ($22<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i$i$i15) {
    $23 = HEAP32[$incdec$ptr$i$i$i$i12>>2]|0;
    __ZdlPv($23);
   }
   $cmp$i$i$i$i20 = ($incdec$ptr$i$i$i$i12|0)==($19|0);
   if ($cmp$i$i$i$i20) {
    break;
   } else {
    $21 = $incdec$ptr$i$i$i$i12;
   }
  }
 }
 $tobool$i23 = ($18|0)==(0);
 if ($tobool$i23) {
  return;
 }
 $24 = $18;
 __ZdlPv($24);
 return;
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (42544|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i = 0, $__soon_to_be_end$06$i$i$i = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp5$i$i$i = 0, $incdec$ptr$i$i$i = 0, $isnull = 0, $tobool$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isnull = ($ptr|0)==(0|0);
 if ($isnull) {
  return;
 }
 $0 = HEAP32[$ptr>>2]|0;
 $cmp$i = ($0|0)==(0|0);
 if (!($cmp$i)) {
  $__end_$i$i$i = ((($ptr)) + 4|0);
  $1 = HEAP32[$__end_$i$i$i>>2]|0;
  $cmp5$i$i$i = ($1|0)==($0|0);
  if ($cmp5$i$i$i) {
   $4 = $0;
  } else {
   $__soon_to_be_end$06$i$i$i = $1;
   while(1) {
    $incdec$ptr$i$i$i = ((($__soon_to_be_end$06$i$i$i)) + -12|0);
    $__size_$i$i$i$i$i$i$i$i = ((($incdec$ptr$i$i$i)) + 11|0);
    $2 = HEAP8[$__size_$i$i$i$i$i$i$i$i>>0]|0;
    $tobool$i$i$i$i$i$i$i$i = ($2<<24>>24)<(0);
    if ($tobool$i$i$i$i$i$i$i$i) {
     $3 = HEAP32[$incdec$ptr$i$i$i>>2]|0;
     __ZdlPv($3);
    }
    $cmp$i$i$i = ($incdec$ptr$i$i$i|0)==($0|0);
    if ($cmp$i$i$i) {
     break;
    } else {
     $__soon_to_be_end$06$i$i$i = $incdec$ptr$i$i$i;
    }
   }
   $$pre$i = HEAP32[$ptr>>2]|0;
   $4 = $$pre$i;
  }
  HEAP32[$__end_$i$i$i>>2] = $0;
  __ZdlPv($4);
 }
 __ZdlPv($ptr);
 return;
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEEEPT_DpOT0_() {
 var $__end_$i$i = 0, $__value_$i$i$i$i = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__Znwm(12)|0);
 HEAP32[$call>>2] = 0;
 $__end_$i$i = ((($call)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($call)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 return ($call|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEE6invokeEPFSC_vE($fn) {
 $fn = $fn|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (FUNCTION_TABLE_i[$fn & 3]()|0);
 return ($call|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EvPSB_JSD_EE6invokeERKSF_SG_PNS0_11BindingTypeIS9_EUt_E($method,$wireThis,$args) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i4 = 0, $__size_$i12$i$i$i = 0, $add$i$i$i$i$i = 0, $and$i$i$i$i$i = 0, $arraydecay$i = 0, $arrayidx$i$i$i = 0;
 var $call$i$i$i$i$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $or$i$i$i$i = 0, $ref$tmp = 0, $tobool$i$i5 = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $$unpack = HEAP32[$method>>2]|0;
 $$elt1 = ((($method)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $memptr$adj$shifted = $$unpack2 >> 1;
 $0 = (($wireThis) + ($memptr$adj$shifted)|0);
 $1 = $$unpack2 & 1;
 $memptr$isvirtual = ($1|0)==(0);
 if ($memptr$isvirtual) {
  $memptr$nonvirtualfn = $$unpack;
  $4 = $memptr$nonvirtualfn;
 } else {
  $vtable = HEAP32[$0>>2]|0;
  $2 = (($vtable) + ($$unpack)|0);
  $memptr$virtualfn = HEAP32[$2>>2]|0;
  $4 = $memptr$virtualfn;
 }
 $arraydecay$i = ((($args)) + 4|0);
 $3 = HEAP32[$args>>2]|0;
 ;HEAP32[$ref$tmp>>2]=0|0;HEAP32[$ref$tmp+4>>2]=0|0;HEAP32[$ref$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($3>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($3>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $3&255;
  $__size_$i12$i$i$i = ((($ref$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($3|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $ref$tmp;
  } else {
   $__p$015$i$i$i = $ref$tmp;
   label = 9;
  }
 } else {
  $add$i$i$i$i$i = (($3) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$ref$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($ref$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($ref$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $3;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 9;
 }
 if ((label|0) == 9) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($3|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($3)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 FUNCTION_TABLE_vii[$4 & 31]($0,$ref$tmp);
 $__size_$i$i4 = ((($ref$tmp)) + 11|0);
 $5 = HEAP8[$__size_$i$i4>>0]|0;
 $tobool$i$i5 = ($5<<24>>24)<(0);
 if (!($tobool$i$i5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$ref$tmp>>2]|0;
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EvPSB_JmSD_EE6invokeERKSF_SG_mPNS0_11BindingTypeIS9_EUt_E($method,$wireThis,$args,$args1) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i4 = 0, $__size_$i12$i$i$i = 0, $add$i$i$i$i$i = 0, $and$i$i$i$i$i = 0, $arraydecay$i = 0, $arrayidx$i$i$i = 0;
 var $call$i$i$i$i$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $or$i$i$i$i = 0, $ref$tmp = 0, $tobool$i$i5 = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $$unpack = HEAP32[$method>>2]|0;
 $$elt1 = ((($method)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $memptr$adj$shifted = $$unpack2 >> 1;
 $0 = (($wireThis) + ($memptr$adj$shifted)|0);
 $1 = $$unpack2 & 1;
 $memptr$isvirtual = ($1|0)==(0);
 if ($memptr$isvirtual) {
  $memptr$nonvirtualfn = $$unpack;
  $4 = $memptr$nonvirtualfn;
 } else {
  $vtable = HEAP32[$0>>2]|0;
  $2 = (($vtable) + ($$unpack)|0);
  $memptr$virtualfn = HEAP32[$2>>2]|0;
  $4 = $memptr$virtualfn;
 }
 $arraydecay$i = ((($args1)) + 4|0);
 $3 = HEAP32[$args1>>2]|0;
 ;HEAP32[$ref$tmp>>2]=0|0;HEAP32[$ref$tmp+4>>2]=0|0;HEAP32[$ref$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($3>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($3>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $3&255;
  $__size_$i12$i$i$i = ((($ref$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($3|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $ref$tmp;
  } else {
   $__p$015$i$i$i = $ref$tmp;
   label = 9;
  }
 } else {
  $add$i$i$i$i$i = (($3) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$ref$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($ref$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($ref$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $3;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 9;
 }
 if ((label|0) == 9) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($3|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($3)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 FUNCTION_TABLE_viii[$4 & 15]($0,$args,$ref$tmp);
 $__size_$i$i4 = ((($ref$tmp)) + 11|0);
 $5 = HEAP8[$__size_$i$i4>>0]|0;
 $tobool$i$i5 = ($5<<24>>24)<(0);
 if (!($tobool$i$i5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$ref$tmp>>2]|0;
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEmPKSB_JEE6invokeERKSD_SF_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call1 = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$method>>2]|0;
 $$elt1 = ((($method)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $memptr$adj$shifted = $$unpack2 >> 1;
 $0 = (($wireThis) + ($memptr$adj$shifted)|0);
 $1 = $$unpack2 & 1;
 $memptr$isvirtual = ($1|0)==(0);
 if ($memptr$isvirtual) {
  $memptr$nonvirtualfn = $$unpack;
  $3 = $memptr$nonvirtualfn;
  $call1 = (FUNCTION_TABLE_ii[$3 & 15]($0)|0);
  return ($call1|0);
 } else {
  $vtable = HEAP32[$0>>2]|0;
  $2 = (($vtable) + ($$unpack)|0);
  $memptr$virtualfn = HEAP32[$2>>2]|0;
  $3 = $memptr$virtualfn;
  $call1 = (FUNCTION_TABLE_ii[$3 & 15]($0)|0);
  return ($call1|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmES2_SE_JmEE6invokeEPSG_PSC_m($function,$wireThis,$args) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $0 = HEAP32[$function>>2]|0;
 FUNCTION_TABLE_viii[$0 & 15]($ref$tmp,$wireThis,$args);
 $1 = HEAP32[$ref$tmp>>2]|0;
 __emval_incref(($1|0));
 $2 = HEAP32[$ref$tmp>>2]|0;
 __emval_decref(($2|0));
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EbSC_JmSE_EE6invokeEPSG_PSB_mPNS0_11BindingTypeIS9_EUt_E($function,$wireThis,$args,$args1) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i2 = 0, $__size_$i12$i$i$i = 0, $add$i$i$i$i$i = 0, $and$i$i$i$i$i = 0, $arraydecay$i = 0, $arrayidx$i$i$i = 0, $call$i$i$i$i$i$i = 0, $call4 = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0;
 var $or$i$i$i$i = 0, $ref$tmp = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $0 = HEAP32[$function>>2]|0;
 $arraydecay$i = ((($args1)) + 4|0);
 $1 = HEAP32[$args1>>2]|0;
 ;HEAP32[$ref$tmp>>2]=0|0;HEAP32[$ref$tmp+4>>2]=0|0;HEAP32[$ref$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($1>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $1&255;
  $__size_$i12$i$i$i = ((($ref$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($1|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $ref$tmp;
  } else {
   $__p$015$i$i$i = $ref$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($1) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$ref$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($ref$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($ref$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $1;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($1|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($1)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $call4 = (FUNCTION_TABLE_iiii[$0 & 15]($wireThis,$args,$ref$tmp)|0);
 $__size_$i$i2 = ((($ref$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i2>>0]|0;
 $tobool$i$i3 = ($2<<24>>24)<(0);
 if (!($tobool$i$i3)) {
  STACKTOP = sp;return ($call4|0);
 }
 $3 = HEAP32[$ref$tmp>>2]|0;
 __ZdlPv($3);
 STACKTOP = sp;return ($call4|0);
}
function __ZN10emscripten8internal15raw_constructorI4KeysJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__Znwm(24)|0);
 ;HEAP32[$call>>2]=0|0;HEAP32[$call+4>>2]=0|0;HEAP32[$call+8>>2]=0|0;HEAP32[$call+12>>2]=0|0;HEAP32[$call+16>>2]=0|0;HEAP32[$call+20>>2]=0|0;
 return ($call|0);
}
function __ZN10emscripten8internal14raw_destructorI4KeysEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $SecretKey$i = 0, $__size_$i$i$i = 0, $__size_$i$i2$i = 0, $isnull = 0, $tobool$i$i$i = 0, $tobool$i$i3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isnull = ($ptr|0)==(0|0);
 if ($isnull) {
  return;
 }
 $SecretKey$i = ((($ptr)) + 12|0);
 $__size_$i$i$i = ((($SecretKey$i)) + 11|0);
 $0 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i$i) {
  $1 = HEAP32[$SecretKey$i>>2]|0;
  __ZdlPv($1);
 }
 $__size_$i$i2$i = ((($ptr)) + 11|0);
 $2 = HEAP8[$__size_$i$i2$i>>0]|0;
 $tobool$i$i3$i = ($2<<24>>24)<(0);
 if ($tobool$i$i3$i) {
  $3 = HEAP32[$ptr>>2]|0;
  __ZdlPv($3);
 }
 __ZdlPv($ptr);
 return;
}
function __ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7getWireIS2_EEPNS0_11BindingTypeIS9_EUt_ERKMS2_S9_RKT_($field,$ptr) {
 $field = $field|0;
 $ptr = $ptr|0;
 var $$in$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__size_$i3$i$i$i = 0, $add$i = 0, $add31$i = 0, $call1$i = 0, $call132$i = 0, $cond$i$i14$i = 0, $cond$i$i2141$i = 0, $conv$i$i$i$i = 0, $data3739$i = 0, $memptr$offset = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$field>>2]|0;
 $memptr$offset = (($ptr) + ($0)|0);
 $1 = ((($memptr$offset)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $tobool$i$i$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($memptr$offset)) + 4|0);
  $3 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($3) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $3;
  $4 = HEAP32[$memptr$offset>>2]|0;
  $$in$i = $call132$i;$cond$i$i14$i = $3;$cond$i$i2141$i = $4;
  $data3739$i = ((($$in$i)) + 4|0);
  _memcpy(($data3739$i|0),($cond$i$i2141$i|0),($cond$i$i14$i|0))|0;
  return ($$in$i|0);
 } else {
  $conv$i$i$i$i = $2&255;
  $add$i = (($conv$i$i$i$i) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i;
  $$in$i = $call1$i;$cond$i$i14$i = $conv$i$i$i$i;$cond$i$i2141$i = $memptr$offset;
  $data3739$i = ((($$in$i)) + 4|0);
  _memcpy(($data3739$i|0),($cond$i$i2141$i|0),($cond$i$i14$i|0))|0;
  return ($$in$i|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7setWireIS2_EEvRKMS2_S9_RT_PNS0_11BindingTypeIS9_EUt_E($field,$ptr,$value) {
 $field = $field|0;
 $ptr = $ptr|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i1$i$i$i = 0, $__size_$i12$i$i$i = 0, $add$i$i$i$i$i = 0, $and$i$i$i$i$i = 0, $arraydecay$i = 0, $arrayidx$i$i$i = 0, $call$i$i$i$i$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0;
 var $memptr$offset = 0, $or$i$i$i$i = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $arraydecay$i = ((($value)) + 4|0);
 $0 = HEAP32[$value>>2]|0;
 ;HEAP32[$ref$tmp>>2]=0|0;HEAP32[$ref$tmp+4>>2]=0|0;HEAP32[$ref$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($ref$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $ref$tmp;
  } else {
   $__p$015$i$i$i = $ref$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$ref$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($ref$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($ref$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $1 = HEAP32[$field>>2]|0;
 $memptr$offset = (($ptr) + ($1)|0);
 $2 = ((($memptr$offset)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $tobool$i$i$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $4 = HEAP32[$memptr$offset>>2]|0;
  HEAP8[$4>>0] = 0;
  $__size_$i1$i$i$i = ((($memptr$offset)) + 4|0);
  HEAP32[$__size_$i1$i$i$i>>2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($memptr$offset,0);
  ;HEAP32[$memptr$offset>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$memptr$offset+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$memptr$offset+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  HEAP8[$memptr$offset>>0] = 0;
  HEAP8[$2>>0] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($memptr$offset,0);
  ;HEAP32[$memptr$offset>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$memptr$offset+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$memptr$offset+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
  STACKTOP = sp;return;
 }
}
function __GLOBAL__sub_I_turtlecoin_crypto_js_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN39EmscriptenBindingInitializer_signaturesC2Ev(0);
 return;
}
function __ZN4Core12Cryptography12cn_fast_hashENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_fast_hash($2,$sub$ptr$sub$i,$hash);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography15cn_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,0,0,0,2097152,0,2097152,0,1048576,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography15cn_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,0,1,0,2097152,0,2097152,0,1048576,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography15cn_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,0,2,0,2097152,0,2097152,0,1048576,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography20cn_lite_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,1,0,0,2097152,0,1048576,0,524288,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography20cn_lite_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,1,1,0,2097152,0,1048576,0,524288,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography20cn_lite_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,1,2,0,2097152,0,1048576,0,524288,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography20cn_dark_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,0,0,0,524288,0,524288,0,262144,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography20cn_dark_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,0,1,0,524288,0,524288,0,262144,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography20cn_dark_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,0,2,0,524288,0,524288,0,262144,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography25cn_dark_lite_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,1,0,0,524288,0,524288,0,262144,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography25cn_dark_lite_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,1,1,0,524288,0,524288,0,262144,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography25cn_dark_lite_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,1,2,0,524288,0,524288,0,262144,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography22cn_turtle_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,0,0,0,262144,0,262144,0,131072,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography22cn_turtle_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,0,1,0,262144,0,262144,0,131072,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography22cn_turtle_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,0,2,0,262144,0,262144,0,131072,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography27cn_turtle_lite_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,1,0,0,262144,0,262144,0,131072,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography27cn_turtle_lite_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,1,1,0,262144,0,262144,0,131072,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography27cn_turtle_lite_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_slow_hash($2,$sub$ptr$sub$i,$hash,1,2,0,262144,0,262144,0,131072,0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography26cn_soft_shell_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result,$input,$0,$1) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i11 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i) {
  $3 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($3);
 }
 $4 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $5 = HEAP32[$__end_$i>>2]|0;
 $$cast = $4;
 $sub$ptr$sub$i = (($5) - ($$cast))|0;
 $6 = $0 & 2047;
 $7 = $0 & 4095;
 $8 = (_bitshift64Shl(($6|0),0,1)|0);
 $9 = (getTempRet0() | 0);
 $10 = (_i64Subtract(($7|0),0,($8|0),($9|0))|0);
 $11 = (getTempRet0() | 0);
 $12 = ($11|0)<(0);
 $13 = $12 ? $6 : $10;
 $14 = $12 ? 0 : $11;
 $15 = (___muldi3(($13|0),($14|0),682,0)|0);
 $16 = (getTempRet0() | 0);
 $17 = (_i64Add(($15|0),($16|0),262144,0)|0);
 $18 = (getTempRet0() | 0);
 $19 = $17 & -128;
 $20 = (___muldi3(($13|0),($14|0),341,0)|0);
 $21 = (getTempRet0() | 0);
 $22 = (_i64Add(($20|0),($21|0),131072,0)|0);
 $23 = (getTempRet0() | 0);
 _cn_slow_hash($4,$sub$ptr$sub$i,$hash,1,0,0,$19,$18,$19,$18,$22,$23);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $24 = HEAP32[$data>>2]|0;
 $cmp$i11 = ($24|0)==(0|0);
 if ($cmp$i11) {
  STACKTOP = sp;return;
 }
 $25 = $24;
 HEAP32[$__end_$i>>2] = $25;
 __ZdlPv($24);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography26cn_soft_shell_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result,$input,$0,$1) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i11 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i) {
  $3 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($3);
 }
 $4 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $5 = HEAP32[$__end_$i>>2]|0;
 $$cast = $4;
 $sub$ptr$sub$i = (($5) - ($$cast))|0;
 $6 = $0 & 2047;
 $7 = $0 & 4095;
 $8 = (_bitshift64Shl(($6|0),0,1)|0);
 $9 = (getTempRet0() | 0);
 $10 = (_i64Subtract(($7|0),0,($8|0),($9|0))|0);
 $11 = (getTempRet0() | 0);
 $12 = ($11|0)<(0);
 $13 = $12 ? $6 : $10;
 $14 = $12 ? 0 : $11;
 $15 = (___muldi3(($13|0),($14|0),682,0)|0);
 $16 = (getTempRet0() | 0);
 $17 = (_i64Add(($15|0),($16|0),262144,0)|0);
 $18 = (getTempRet0() | 0);
 $19 = $17 & -128;
 $20 = (___muldi3(($13|0),($14|0),341,0)|0);
 $21 = (getTempRet0() | 0);
 $22 = (_i64Add(($20|0),($21|0),131072,0)|0);
 $23 = (getTempRet0() | 0);
 _cn_slow_hash($4,$sub$ptr$sub$i,$hash,1,1,0,$19,$18,$19,$18,$22,$23);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $24 = HEAP32[$data>>2]|0;
 $cmp$i11 = ($24|0)==(0|0);
 if ($cmp$i11) {
  STACKTOP = sp;return;
 }
 $25 = $24;
 HEAP32[$__end_$i>>2] = $25;
 __ZdlPv($24);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography26cn_soft_shell_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy($agg$result,$input,$0,$1) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i11 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i) {
  $3 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($3);
 }
 $4 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $5 = HEAP32[$__end_$i>>2]|0;
 $$cast = $4;
 $sub$ptr$sub$i = (($5) - ($$cast))|0;
 $6 = $0 & 2047;
 $7 = $0 & 4095;
 $8 = (_bitshift64Shl(($6|0),0,1)|0);
 $9 = (getTempRet0() | 0);
 $10 = (_i64Subtract(($7|0),0,($8|0),($9|0))|0);
 $11 = (getTempRet0() | 0);
 $12 = ($11|0)<(0);
 $13 = $12 ? $6 : $10;
 $14 = $12 ? 0 : $11;
 $15 = (___muldi3(($13|0),($14|0),682,0)|0);
 $16 = (getTempRet0() | 0);
 $17 = (_i64Add(($15|0),($16|0),262144,0)|0);
 $18 = (getTempRet0() | 0);
 $19 = $17 & -128;
 $20 = (___muldi3(($13|0),($14|0),341,0)|0);
 $21 = (getTempRet0() | 0);
 $22 = (_i64Add(($20|0),($21|0),131072,0)|0);
 $23 = (getTempRet0() | 0);
 _cn_slow_hash($4,$sub$ptr$sub$i,$hash,1,2,0,$19,$18,$19,$18,$22,$23);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $24 = HEAP32[$data>>2]|0;
 $cmp$i11 = ($24|0)==(0|0);
 if ($cmp$i11) {
  STACKTOP = sp;return;
 }
 $25 = $24;
 HEAP32[$__end_$i>>2] = $25;
 __ZdlPv($24);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography16chukwa_slow_hashENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i13 = 0, $data = 0, $hash = 0, $salt$i = 0, $sub$ptr$sub$i = 0, $tobool$i = 0, $tobool$i$i = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $salt$i = sp;
 $hash = sp + 40|0;
 $data = sp + 28|0;
 $agg$tmp = sp + 16|0;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 dest=$salt$i; src=$2; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $4 = HEAP8[577008]|0;
 $tobool$i = ($4<<24>>24)==(0);
 if ($tobool$i) {
  _argon2_select_impl(0,0);
  HEAP8[577008] = 1;
 }
 (_argon2id_hash_raw(3,512,1,$2,$sub$ptr$sub$i,$salt$i,16,$hash,32)|0);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $5 = HEAP32[$data>>2]|0;
 $cmp$i13 = ($5|0)==(0|0);
 if ($cmp$i13) {
  STACKTOP = sp;return;
 }
 $6 = $5;
 HEAP32[$__end_$i>>2] = $6;
 __ZdlPv($5);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography9tree_hashENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE($agg$result,$hashes) {
 $agg$result = $agg$result|0;
 $hashes = $hashes|0;
 var $$cast = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre38 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$sroa$0$037 = 0, $__end_$i = 0, $__end_$i$i = 0, $__size_$i$i13 = 0, $__value_$i$i$i$i = 0, $cmp$i$i = 0;
 var $cmp$i$i36 = 0, $cmp$i21 = 0, $cmp$i6 = 0, $hash = 0, $incdec$ptr$i = 0, $incdec$ptr$i22 = 0, $outSize$i = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tempHash = 0, $tobool$i$i14 = 0, $treeHashes = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $outSize$i = sp;
 $treeHashes = sp + 44|0;
 $hash = sp + 32|0;
 $tempHash = sp + 56|0;
 HEAP32[$treeHashes>>2] = 0;
 $__end_$i$i = ((($treeHashes)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($treeHashes)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $0 = HEAP32[$hashes>>2]|0;
 $__end_$i = ((($hashes)) + 4|0);
 $1 = HEAP32[$__end_$i>>2]|0;
 $cmp$i$i36 = ($0|0)==($1|0);
 if ($cmp$i$i36) {
  $$pre$phiZ2D = $__end_$i$i;$2 = 0;$3 = 0;
 } else {
  $__size_$i$i13 = ((($hash)) + 11|0);
  $__begin$sroa$0$037 = $0;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($hash,$__begin$sroa$0$037);
   dest=$tempHash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($hash,$tempHash,32,0,$outSize$i)|0);
   $5 = HEAP32[$__end_$i$i>>2]|0;
   $6 = HEAP32[$__value_$i$i$i$i>>2]|0;
   $cmp$i21 = ($5|0)==($6|0);
   if ($cmp$i21) {
    __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($treeHashes,$tempHash);
   } else {
    dest=$5; src=$tempHash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $incdec$ptr$i22 = ((($5)) + 32|0);
    HEAP32[$__end_$i$i>>2] = $incdec$ptr$i22;
   }
   $7 = HEAP8[$__size_$i$i13>>0]|0;
   $tobool$i$i14 = ($7<<24>>24)<(0);
   if ($tobool$i$i14) {
    $8 = HEAP32[$hash>>2]|0;
    __ZdlPv($8);
   }
   $incdec$ptr$i = ((($__begin$sroa$0$037)) + 12|0);
   $cmp$i$i = ($incdec$ptr$i|0)==($1|0);
   if ($cmp$i$i) {
    break;
   } else {
    $__begin$sroa$0$037 = $incdec$ptr$i;
   }
  }
  $$pre = HEAP32[$treeHashes>>2]|0;
  $$pre38 = HEAP32[$__end_$i$i>>2]|0;
  $$pre$phiZ2D = $__end_$i$i;$2 = $$pre;$3 = $$pre38;
 }
 dest=$outSize$i; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 _tree_hash($2,$sub$ptr$div$i,$outSize$i);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i,32,0);
 $4 = HEAP32[$treeHashes>>2]|0;
 $cmp$i6 = ($4|0)==(0|0);
 if ($cmp$i6) {
  STACKTOP = sp;return;
 }
 $9 = $4;
 HEAP32[$$pre$phiZ2D>>2] = $9;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__end_$i = 0, $__value_$i$i$i$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $call$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i22 = 0, $cmp3$i = 0;
 var $cond$i = 0, $exception$i$i$i$i = 0, $incdec$ptr = 0, $mul$i = 0, $mul$i$i$i = 0, $spec$select$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $tobool$i13 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $add = (($sub$ptr$div$i) + 1)|0;
 $cmp$i = ($add>>>0)>(134217727);
 $2 = $1;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__value_$i$i$i$i$i$i = ((($this)) + 8|0);
 $3 = HEAP32[$__value_$i$i$i$i$i$i>>2]|0;
 $sub$ptr$sub$i$i$i = (($3) - ($1))|0;
 $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 5;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(67108863);
 $mul$i = $sub$ptr$sub$i$i$i >> 4;
 $cmp$i$i$i$i = ($mul$i>>>0)<($add>>>0);
 $$sroa$speculated$i = $cmp$i$i$i$i ? $add : $mul$i;
 $spec$select$i = $cmp3$i ? $$sroa$speculated$i : 134217727;
 $cmp$i22 = ($spec$select$i|0)==(0);
 do {
  if ($cmp$i22) {
   $cond$i = 0;
  } else {
   $cmp$i$i$i = ($spec$select$i>>>0)>(134217727);
   if ($cmp$i$i$i) {
    $exception$i$i$i$i = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($exception$i$i$i$i,45632);
    HEAP32[$exception$i$i$i$i>>2] = (43984);
    ___cxa_throw(($exception$i$i$i$i|0),(43288|0),(6|0));
    // unreachable;
   } else {
    $mul$i$i$i = $spec$select$i << 5;
    $call$i$i$i$i = (__Znwm($mul$i$i$i)|0);
    $cond$i = $call$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$ptr$i = (($cond$i) + ($sub$ptr$div$i<<5)|0);
 $add$ptr5$i = (($cond$i) + ($spec$select$i<<5)|0);
 $4 = $add$ptr5$i;
 dest=$add$ptr$i; src=$__x; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $incdec$ptr = ((($add$ptr$i)) + 32|0);
 $5 = $incdec$ptr;
 $6 = $cond$i;
 $cmp$i$i = ($sub$ptr$sub$i|0)>(0);
 if ($cmp$i$i) {
  _memcpy(($cond$i|0),($2|0),($sub$ptr$sub$i|0))|0;
 }
 HEAP32[$this>>2] = $6;
 HEAP32[$__end_$i>>2] = $5;
 HEAP32[$__value_$i$i$i$i$i$i>>2] = $4;
 $tobool$i13 = ($1|0)==(0);
 if ($tobool$i13) {
  return;
 }
 __ZdlPv($2);
 return;
}
function __ZN4Core12Cryptography11tree_branchENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE($agg$result,$hashes) {
 $agg$result = $agg$result|0;
 $hashes = $hashes|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$sroa$0$065 = 0, $__end_$i = 0, $__end_$i$i = 0, $__size_$i$i = 0, $__value_$i$i$i$i = 0, $_hashes = 0, $call$i$i$i$i7$i = 0, $cmp$i$i = 0, $cmp$i$i64 = 0;
 var $cmp$i11 = 0, $cmp$i29 = 0, $hash = 0, $incdec$ptr$i = 0, $incdec$ptr$i33 = 0, $outSize$i = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tempHash = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $outSize$i = sp;
 $_hashes = sp + 20|0;
 $hash = sp + 8|0;
 $tempHash = sp + 32|0;
 HEAP32[$_hashes>>2] = 0;
 $__end_$i$i = ((($_hashes)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($_hashes)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $0 = HEAP32[$hashes>>2]|0;
 $__end_$i = ((($hashes)) + 4|0);
 $1 = HEAP32[$__end_$i>>2]|0;
 $cmp$i$i64 = ($0|0)==($1|0);
 if (!($cmp$i$i64)) {
  $__size_$i$i = ((($hash)) + 11|0);
  $__begin$sroa$0$065 = $0;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($hash,$__begin$sroa$0$065);
   dest=$tempHash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($hash,$tempHash,32,0,$outSize$i)|0);
   $5 = HEAP32[$__end_$i$i>>2]|0;
   $6 = HEAP32[$__value_$i$i$i$i>>2]|0;
   $cmp$i29 = ($5|0)==($6|0);
   if ($cmp$i29) {
    __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($_hashes,$tempHash);
   } else {
    dest=$5; src=$tempHash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $incdec$ptr$i = ((($5)) + 32|0);
    HEAP32[$__end_$i$i>>2] = $incdec$ptr$i;
   }
   $7 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($7<<24>>24)<(0);
   if ($tobool$i$i) {
    $8 = HEAP32[$hash>>2]|0;
    __ZdlPv($8);
   }
   $incdec$ptr$i33 = ((($__begin$sroa$0$065)) + 12|0);
   $cmp$i$i = ($incdec$ptr$i33|0)==($1|0);
   if ($cmp$i$i) {
    break;
   } else {
    $__begin$sroa$0$065 = $incdec$ptr$i33;
   }
  }
 }
 $call$i$i$i$i7$i = (__Znwm(32)|0);
 dest=$call$i$i$i$i7$i; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = HEAP32[$_hashes>>2]|0;
 $3 = HEAP32[$__end_$i$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 _tree_branch($2,$sub$ptr$div$i,$call$i$i$i$i7$i);
 __ZN6Common5toHexEPKvy($agg$result,$call$i$i$i$i7$i,32,0);
 __ZdlPv($call$i$i$i$i7$i);
 $4 = HEAP32[$_hashes>>2]|0;
 $cmp$i11 = ($4|0)==(0|0);
 if ($cmp$i11) {
  STACKTOP = sp;return;
 }
 $9 = $4;
 HEAP32[$__end_$i$i>>2] = $9;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography21tree_hash_from_branchENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEES8_S8_($agg$result,$branches,$leaf,$path) {
 $agg$result = $agg$result|0;
 $branches = $branches|0;
 $leaf = $leaf|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$sroa$0$044 = 0, $__end_$i = 0, $__end_$i$i = 0, $__size_$i$i = 0, $__value_$i$i$i$i = 0, $_branch = 0, $_branches = 0, $branch = 0, $cmp$i$i = 0;
 var $cmp$i$i43 = 0, $cmp$i24 = 0, $cmp$i6 = 0, $incdec$ptr$i = 0, $incdec$ptr$i28 = 0, $outSize$i18 = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $outSize$i18 = sp;
 $_branches = sp + 64|0;
 $branch = sp + 32|0;
 $_branch = sp + 80|0;
 HEAP32[$_branches>>2] = 0;
 $__end_$i$i = ((($_branches)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($_branches)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $0 = HEAP32[$branches>>2]|0;
 $__end_$i = ((($branches)) + 4|0);
 $1 = HEAP32[$__end_$i>>2]|0;
 $cmp$i$i43 = ($0|0)==($1|0);
 if (!($cmp$i$i43)) {
  $__size_$i$i = ((($branch)) + 11|0);
  $__begin$sroa$0$044 = $0;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($branch,$__begin$sroa$0$044);
   dest=$_branch; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($branch,$_branch,32,0,$outSize$i18)|0);
   $6 = HEAP32[$__end_$i$i>>2]|0;
   $7 = HEAP32[$__value_$i$i$i$i>>2]|0;
   $cmp$i24 = ($6|0)==($7|0);
   if ($cmp$i24) {
    __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($_branches,$_branch);
   } else {
    dest=$6; src=$_branch; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $incdec$ptr$i = ((($6)) + 32|0);
    HEAP32[$__end_$i$i>>2] = $incdec$ptr$i;
   }
   $8 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($8<<24>>24)<(0);
   if ($tobool$i$i) {
    $9 = HEAP32[$branch>>2]|0;
    __ZdlPv($9);
   }
   $incdec$ptr$i28 = ((($__begin$sroa$0$044)) + 12|0);
   $cmp$i$i = ($incdec$ptr$i28|0)==($1|0);
   if ($cmp$i$i) {
    break;
   } else {
    $__begin$sroa$0$044 = $incdec$ptr$i28;
   }
  }
 }
 dest=$branch; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($leaf,$branch,32,0,$outSize$i18)|0);
 dest=$_branch; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($path,$_branch,32,0,$outSize$i18)|0);
 dest=$outSize$i18; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = HEAP32[$_branches>>2]|0;
 $3 = HEAP32[$__end_$i>>2]|0;
 $4 = HEAP32[$branches>>2]|0;
 $sub$ptr$sub$i = (($3) - ($4))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 _tree_hash_from_branch($2,$sub$ptr$div$i,$branch,$_branch,$outSize$i18);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i18,32,0);
 $5 = HEAP32[$_branches>>2]|0;
 $cmp$i6 = ($5|0)==(0|0);
 if ($cmp$i6) {
  STACKTOP = sp;return;
 }
 $10 = $5;
 HEAP32[$__end_$i$i>>2] = $10;
 __ZdlPv($5);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography22generateRingSignaturesENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEES7_y($agg$result,$prefixHash,$keyImage,$publicKeys,$transactionSecretKey,$0,$1) {
 $agg$result = $agg$result|0;
 $prefixHash = $prefixHash|0;
 $keyImage = $keyImage|0;
 $publicKeys = $publicKeys|0;
 $transactionSecretKey = $transactionSecretKey|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$i53 = 0, $$pre142 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$sroa$0$0141 = 0, $__begin31$sroa$0$0139 = 0, $__end_$i = 0, $__end_$i$i = 0, $__end_$i$i$i$i$i$i29 = 0, $__end_$i$i88 = 0, $__end_$i105 = 0;
 var $__end_$i13$i = 0, $__size_$i$i = 0, $__size_$i$i$i$i$i$i$i$i45 = 0, $__size_$i$i100 = 0, $__soon_to_be_end$06$i$i$i42 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i75 = 0, $__value_$i$i$i$i89 = 0, $_keyImage = 0, $_prefixHash = 0, $_publicKeys = 0, $_transactionSecretKey = 0, $_transactionSecretKey$byval_copy = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp20 = 0, $agg$tmp20$byval_copy = 0;
 var $agg$tmp21 = 0, $call$i$i$i$i11$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i28 = 0, $cmp$i$i$i50 = 0, $cmp$i$i$i79 = 0, $cmp$i$i115 = 0, $cmp$i$i115138 = 0, $cmp$i$i140 = 0, $cmp$i108 = 0, $cmp$i23 = 0, $cmp$i37 = 0, $cmp$i63 = 0, $cmp$i76 = 0, $cmp$i8$i = 0, $cmp$i82 = 0, $cmp5$i$i$i39 = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i$i43 = 0, $incdec$ptr$i109 = 0;
 var $incdec$ptr$i67 = 0, $incdec$ptr$i98 = 0, $sub$ptr$div$i$i = 0, $sub$ptr$div6$i$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i$i$i$i46 = 0, $tobool$i$i101 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $_transactionSecretKey$byval_copy = sp;
 $agg$tmp20$byval_copy = sp + 104|0;
 $agg$tmp$byval_copy = sp + 72|0;
 $_prefixHash = sp + 296|0;
 $_keyImage = sp + 264|0;
 $_publicKeys = sp + 60|0;
 $_transactionSecretKey = sp + 168|0;
 $2 = sp + 32|0;
 $agg$tmp = sp + 232|0;
 $agg$tmp20 = sp + 200|0;
 $agg$tmp21 = sp + 48|0;
 dest=$_prefixHash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($prefixHash,$_prefixHash,32,0,$_transactionSecretKey$byval_copy)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($keyImage,$_keyImage,32,0,$_transactionSecretKey$byval_copy)|0);
 HEAP32[$_publicKeys>>2] = 0;
 $__end_$i$i = ((($_publicKeys)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($_publicKeys)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $3 = HEAP32[$publicKeys>>2]|0;
 $__end_$i = ((($publicKeys)) + 4|0);
 $4 = HEAP32[$__end_$i>>2]|0;
 $cmp$i$i140 = ($3|0)==($4|0);
 if (!($cmp$i$i140)) {
  $__size_$i$i = ((($agg$tmp20$byval_copy)) + 11|0);
  $__begin$sroa$0$0141 = $3;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp20$byval_copy,$__begin$sroa$0$0141);
   (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($agg$tmp20$byval_copy,$agg$tmp$byval_copy,32,0,$_transactionSecretKey$byval_copy)|0);
   $8 = HEAP32[$__end_$i$i>>2]|0;
   $9 = HEAP32[$__value_$i$i$i$i>>2]|0;
   $cmp$i63 = ($8|0)==($9|0);
   if ($cmp$i63) {
    __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($_publicKeys,$agg$tmp$byval_copy);
   } else {
    dest=$8; src=$agg$tmp$byval_copy; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $incdec$ptr$i = ((($8)) + 32|0);
    HEAP32[$__end_$i$i>>2] = $incdec$ptr$i;
   }
   $10 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($10<<24>>24)<(0);
   if ($tobool$i$i) {
    $11 = HEAP32[$agg$tmp20$byval_copy>>2]|0;
    __ZdlPv($11);
   }
   $incdec$ptr$i67 = ((($__begin$sroa$0$0141)) + 12|0);
   $cmp$i$i = ($incdec$ptr$i67|0)==($4|0);
   if ($cmp$i$i) {
    break;
   } else {
    $__begin$sroa$0$0141 = $incdec$ptr$i67;
   }
  }
 }
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($transactionSecretKey,$_transactionSecretKey,32,0,$_transactionSecretKey$byval_copy)|0);
 dest=$agg$tmp; src=$_prefixHash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 dest=$agg$tmp20; src=$_keyImage; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$agg$tmp21>>2] = 0;
 $__end_$i13$i = ((($agg$tmp21)) + 4|0);
 HEAP32[$__end_$i13$i>>2] = 0;
 $__value_$i$i$i$i75 = ((($agg$tmp21)) + 8|0);
 HEAP32[$__value_$i$i$i$i75>>2] = 0;
 $5 = HEAP32[$__end_$i$i>>2]|0;
 $6 = HEAP32[$_publicKeys>>2]|0;
 $sub$ptr$sub$i$i = (($5) - ($6))|0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 5;
 $cmp$i76 = ($sub$ptr$sub$i$i|0)==(0);
 $7 = $6;
 if (!($cmp$i76)) {
  $cmp$i8$i = ($sub$ptr$div$i$i>>>0)>(134217727);
  if ($cmp$i8$i) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($agg$tmp21);
   // unreachable;
  }
  $call$i$i$i$i11$i = (__Znwm($sub$ptr$sub$i$i)|0);
  HEAP32[$__end_$i13$i>>2] = $call$i$i$i$i11$i;
  HEAP32[$agg$tmp21>>2] = $call$i$i$i$i11$i;
  $add$ptr$i$i = (($call$i$i$i$i11$i) + ($sub$ptr$div$i$i<<5)|0);
  HEAP32[$__value_$i$i$i$i75>>2] = $add$ptr$i$i;
  $cmp$i$i$i79 = ($sub$ptr$sub$i$i|0)>(0);
  if ($cmp$i$i$i79) {
   $sub$ptr$div6$i$i$i = $sub$ptr$sub$i$i >>> 5;
   $add$ptr$i$i$i = (($call$i$i$i$i11$i) + ($sub$ptr$div6$i$i$i<<5)|0);
   _memcpy(($call$i$i$i$i11$i|0),($7|0),($sub$ptr$sub$i$i|0))|0;
   HEAP32[$__end_$i13$i>>2] = $add$ptr$i$i$i;
  }
 }
 dest=$agg$tmp$byval_copy; src=$agg$tmp; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 dest=$agg$tmp20$byval_copy; src=$agg$tmp20; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 dest=$_transactionSecretKey$byval_copy; src=$_transactionSecretKey; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 __ZN6Crypto10crypto_ops22generateRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEENS_9SecretKeyEy($2,$agg$tmp$byval_copy,$agg$tmp20$byval_copy,$agg$tmp21,$_transactionSecretKey$byval_copy,$0,$1);
 $12 = HEAP32[$agg$tmp21>>2]|0;
 $cmp$i82 = ($12|0)==(0|0);
 if (!($cmp$i82)) {
  $13 = $12;
  HEAP32[$__end_$i13$i>>2] = $13;
  __ZdlPv($12);
 }
 $add$ptr$i = ((($2)) + 4|0);
 HEAP32[$_transactionSecretKey$byval_copy>>2] = 0;
 $__end_$i$i88 = ((($_transactionSecretKey$byval_copy)) + 4|0);
 HEAP32[$__end_$i$i88>>2] = 0;
 $__value_$i$i$i$i89 = ((($_transactionSecretKey$byval_copy)) + 8|0);
 HEAP32[$__value_$i$i$i$i89>>2] = 0;
 $14 = HEAP8[$2>>0]|0;
 $tobool = ($14<<24>>24)==(0);
 if ($tobool) {
  $21 = 0;
 } else {
  $15 = HEAP32[$add$ptr$i>>2]|0;
  $__end_$i105 = ((($2)) + 8|0);
  $16 = HEAP32[$__end_$i105>>2]|0;
  $cmp$i$i115138 = ($15|0)==($16|0);
  if ($cmp$i$i115138) {
   $21 = 1;
  } else {
   $__size_$i$i100 = ((($agg$tmp$byval_copy)) + 11|0);
   $__begin31$sroa$0$0139 = $15;
   while(1) {
    dest=$agg$tmp20$byval_copy; src=$__begin31$sroa$0$0139; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    __ZN6Common5toHexEPKvy($agg$tmp$byval_copy,$agg$tmp20$byval_copy,64,0);
    $17 = HEAP32[$__end_$i$i88>>2]|0;
    $18 = HEAP32[$__value_$i$i$i$i89>>2]|0;
    $cmp$i108 = ($17>>>0)<($18>>>0);
    if ($cmp$i108) {
     ;HEAP32[$17>>2]=HEAP32[$agg$tmp$byval_copy>>2]|0;HEAP32[$17+4>>2]=HEAP32[$agg$tmp$byval_copy+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$agg$tmp$byval_copy+8>>2]|0;
     ;HEAP32[$agg$tmp$byval_copy>>2]=0|0;HEAP32[$agg$tmp$byval_copy+4>>2]=0|0;HEAP32[$agg$tmp$byval_copy+8>>2]=0|0;
     $19 = HEAP32[$__end_$i$i88>>2]|0;
     $incdec$ptr$i109 = ((($19)) + 12|0);
     HEAP32[$__end_$i$i88>>2] = $incdec$ptr$i109;
    } else {
     __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($_transactionSecretKey$byval_copy,$agg$tmp$byval_copy);
     $$pre = HEAP8[$__size_$i$i100>>0]|0;
     $tobool$i$i101 = ($$pre<<24>>24)<(0);
     if ($tobool$i$i101) {
      $20 = HEAP32[$agg$tmp$byval_copy>>2]|0;
      __ZdlPv($20);
     }
    }
    $incdec$ptr$i98 = ((($__begin31$sroa$0$0139)) + 64|0);
    $cmp$i$i115 = ($incdec$ptr$i98|0)==($16|0);
    if ($cmp$i$i115) {
     break;
    } else {
     $__begin31$sroa$0$0139 = $incdec$ptr$i98;
    }
   }
   $$pre142 = HEAP8[$2>>0]|0;
   $21 = $$pre142;
  }
 }
 HEAP8[$agg$result>>0] = $21;
 $22 = ((($agg$result)) + 4|0);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($22,$_transactionSecretKey$byval_copy);
 $23 = HEAP32[$_transactionSecretKey$byval_copy>>2]|0;
 $cmp$i37 = ($23|0)==(0|0);
 if (!($cmp$i37)) {
  $24 = HEAP32[$__end_$i$i88>>2]|0;
  $cmp5$i$i$i39 = ($24|0)==($23|0);
  if ($cmp5$i$i$i39) {
   $27 = $23;
  } else {
   $__soon_to_be_end$06$i$i$i42 = $24;
   while(1) {
    $incdec$ptr$i$i$i43 = ((($__soon_to_be_end$06$i$i$i42)) + -12|0);
    $__size_$i$i$i$i$i$i$i$i45 = ((($incdec$ptr$i$i$i43)) + 11|0);
    $25 = HEAP8[$__size_$i$i$i$i$i$i$i$i45>>0]|0;
    $tobool$i$i$i$i$i$i$i$i46 = ($25<<24>>24)<(0);
    if ($tobool$i$i$i$i$i$i$i$i46) {
     $26 = HEAP32[$incdec$ptr$i$i$i43>>2]|0;
     __ZdlPv($26);
    }
    $cmp$i$i$i50 = ($incdec$ptr$i$i$i43|0)==($23|0);
    if ($cmp$i$i$i50) {
     break;
    } else {
     $__soon_to_be_end$06$i$i$i42 = $incdec$ptr$i$i$i43;
    }
   }
   $$pre$i53 = HEAP32[$_transactionSecretKey$byval_copy>>2]|0;
   $27 = $$pre$i53;
  }
  HEAP32[$__end_$i$i88>>2] = $23;
  __ZdlPv($27);
 }
 $28 = HEAP32[$add$ptr$i>>2]|0;
 $cmp$i$i$i$i28 = ($28|0)==(0|0);
 if (!($cmp$i$i$i$i28)) {
  $29 = $28;
  $__end_$i$i$i$i$i$i29 = ((($2)) + 8|0);
  HEAP32[$__end_$i$i$i$i$i$i29>>2] = $29;
  __ZdlPv($28);
 }
 $30 = HEAP32[$_publicKeys>>2]|0;
 $cmp$i23 = ($30|0)==(0|0);
 if ($cmp$i23) {
  STACKTOP = sp;return;
 }
 $31 = $30;
 HEAP32[$__end_$i$i>>2] = $31;
 __ZdlPv($30);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__end_$i = 0, $__value_$i$i$i$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $call$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i22 = 0, $cmp3$i = 0;
 var $cond$i = 0, $exception$i$i$i$i = 0, $incdec$ptr = 0, $mul$i = 0, $mul$i$i$i = 0, $spec$select$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $tobool$i13 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $add = (($sub$ptr$div$i) + 1)|0;
 $cmp$i = ($add>>>0)>(134217727);
 $2 = $1;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__value_$i$i$i$i$i$i = ((($this)) + 8|0);
 $3 = HEAP32[$__value_$i$i$i$i$i$i>>2]|0;
 $sub$ptr$sub$i$i$i = (($3) - ($1))|0;
 $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 5;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(67108863);
 $mul$i = $sub$ptr$sub$i$i$i >> 4;
 $cmp$i$i$i$i = ($mul$i>>>0)<($add>>>0);
 $$sroa$speculated$i = $cmp$i$i$i$i ? $add : $mul$i;
 $spec$select$i = $cmp3$i ? $$sroa$speculated$i : 134217727;
 $cmp$i22 = ($spec$select$i|0)==(0);
 do {
  if ($cmp$i22) {
   $cond$i = 0;
  } else {
   $cmp$i$i$i = ($spec$select$i>>>0)>(134217727);
   if ($cmp$i$i$i) {
    $exception$i$i$i$i = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($exception$i$i$i$i,45632);
    HEAP32[$exception$i$i$i$i>>2] = (43984);
    ___cxa_throw(($exception$i$i$i$i|0),(43288|0),(6|0));
    // unreachable;
   } else {
    $mul$i$i$i = $spec$select$i << 5;
    $call$i$i$i$i = (__Znwm($mul$i$i$i)|0);
    $cond$i = $call$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$ptr$i = (($cond$i) + ($sub$ptr$div$i<<5)|0);
 $add$ptr5$i = (($cond$i) + ($spec$select$i<<5)|0);
 $4 = $add$ptr5$i;
 dest=$add$ptr$i; src=$__x; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $incdec$ptr = ((($add$ptr$i)) + 32|0);
 $5 = $incdec$ptr;
 $6 = $cond$i;
 $cmp$i$i = ($sub$ptr$sub$i|0)>(0);
 if ($cmp$i$i) {
  _memcpy(($cond$i|0),($2|0),($sub$ptr$sub$i|0))|0;
 }
 HEAP32[$this>>2] = $6;
 HEAP32[$__end_$i>>2] = $5;
 HEAP32[$__value_$i$i$i$i$i$i>>2] = $4;
 $tobool$i13 = ($1|0)==(0);
 if ($tobool$i13) {
  return;
 }
 __ZdlPv($2);
 return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$in = 0, $$pre = 0, $$pre$i = 0, $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__end1$addr$04$i$i = 0, $__end_$i = 0, $__size_$i$i$i$i$i$i$i$i$i15 = 0, $__value_$i$i$i$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr5$i = 0, $call$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i21 = 0, $cmp$i$i$i$i5 = 0, $cmp$i28 = 0, $cmp1$i$i$i$i11 = 0, $cmp3$i = 0, $cmp3$i$i = 0, $cond$i = 0;
 var $exception$i$i$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i$i13 = 0, $mul$i = 0, $mul$i$i$i = 0, $spec$select$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i$i16 = 0, $tobool$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $add = (($sub$ptr$div$i) + 1)|0;
 $cmp$i = ($add>>>0)>(357913941);
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__value_$i$i$i$i$i$i = ((($this)) + 8|0);
 $2 = HEAP32[$__value_$i$i$i$i$i$i>>2]|0;
 $sub$ptr$sub$i$i$i = (($2) - ($1))|0;
 $sub$ptr$div$i$i$i = (($sub$ptr$sub$i$i$i|0) / 12)&-1;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(178956970);
 $mul$i = $sub$ptr$div$i$i$i << 1;
 $cmp$i$i$i$i5 = ($mul$i>>>0)<($add>>>0);
 $$sroa$speculated$i = $cmp$i$i$i$i5 ? $add : $mul$i;
 $spec$select$i = $cmp3$i ? $$sroa$speculated$i : 357913941;
 $cmp$i28 = ($spec$select$i|0)==(0);
 do {
  if ($cmp$i28) {
   $cond$i = 0;
  } else {
   $cmp$i$i$i = ($spec$select$i>>>0)>(357913941);
   if ($cmp$i$i$i) {
    $exception$i$i$i$i = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($exception$i$i$i$i,45632);
    HEAP32[$exception$i$i$i$i>>2] = (43984);
    ___cxa_throw(($exception$i$i$i$i|0),(43288|0),(6|0));
    // unreachable;
   } else {
    $mul$i$i$i = ($spec$select$i*12)|0;
    $call$i$i$i$i = (__Znwm($mul$i$i$i)|0);
    $cond$i = $call$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$ptr$i = (($cond$i) + (($sub$ptr$div$i*12)|0)|0);
 $add$ptr5$i = (($cond$i) + (($spec$select$i*12)|0)|0);
 $3 = $add$ptr5$i;
 ;HEAP32[$add$ptr$i>>2]=HEAP32[$__x>>2]|0;HEAP32[$add$ptr$i+4>>2]=HEAP32[$__x+4>>2]|0;HEAP32[$add$ptr$i+8>>2]=HEAP32[$__x+8>>2]|0;
 ;HEAP32[$__x>>2]=0|0;HEAP32[$__x+4>>2]=0|0;HEAP32[$__x+8>>2]=0|0;
 $incdec$ptr = ((($add$ptr$i)) + 12|0);
 $4 = $incdec$ptr;
 $5 = HEAP32[$this>>2]|0;
 $6 = HEAP32[$__end_$i>>2]|0;
 $cmp3$i$i = ($6|0)==($5|0);
 if ($cmp3$i$i) {
  $7 = $5;
  $$in = $add$ptr$i;$10 = $7;$12 = $5;
 } else {
  $8 = $add$ptr$i;$__end1$addr$04$i$i = $6;
  while(1) {
   $add$ptr$i$i = ((($8)) + -12|0);
   $incdec$ptr$i$i = ((($__end1$addr$04$i$i)) + -12|0);
   ;HEAP32[$add$ptr$i$i>>2]=HEAP32[$incdec$ptr$i$i>>2]|0;HEAP32[$add$ptr$i$i+4>>2]=HEAP32[$incdec$ptr$i$i+4>>2]|0;HEAP32[$add$ptr$i$i+8>>2]=HEAP32[$incdec$ptr$i$i+8>>2]|0;
   ;HEAP32[$incdec$ptr$i$i>>2]=0|0;HEAP32[$incdec$ptr$i$i+4>>2]=0|0;HEAP32[$incdec$ptr$i$i+8>>2]=0|0;
   $cmp$i$i = ($incdec$ptr$i$i|0)==($5|0);
   if ($cmp$i$i) {
    break;
   } else {
    $8 = $add$ptr$i$i;$__end1$addr$04$i$i = $incdec$ptr$i$i;
   }
  }
  $$pre$i = HEAP32[$this>>2]|0;
  $$pre = HEAP32[$__end_$i>>2]|0;
  $$in = $add$ptr$i$i;$10 = $$pre$i;$12 = $$pre;
 }
 $9 = $$in;
 HEAP32[$this>>2] = $9;
 HEAP32[$__end_$i>>2] = $4;
 HEAP32[$__value_$i$i$i$i$i$i>>2] = $3;
 $11 = $10;
 $cmp1$i$i$i$i11 = ($12|0)==($11|0);
 if (!($cmp1$i$i$i$i11)) {
  $13 = $12;
  while(1) {
   $incdec$ptr$i$i$i$i13 = ((($13)) + -12|0);
   $__size_$i$i$i$i$i$i$i$i$i15 = ((($incdec$ptr$i$i$i$i13)) + 11|0);
   $14 = HEAP8[$__size_$i$i$i$i$i$i$i$i$i15>>0]|0;
   $tobool$i$i$i$i$i$i$i$i$i16 = ($14<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i$i$i16) {
    $15 = HEAP32[$incdec$ptr$i$i$i$i13>>2]|0;
    __ZdlPv($15);
   }
   $cmp$i$i$i$i21 = ($incdec$ptr$i$i$i$i13|0)==($11|0);
   if ($cmp$i$i$i$i21) {
    break;
   } else {
    $13 = $incdec$ptr$i$i$i$i13;
   }
  }
 }
 $tobool$i24 = ($10|0)==(0);
 if ($tobool$i24) {
  return;
 }
 $16 = $10;
 __ZdlPv($16);
 return;
}
function __ZN4Core12Cryptography18checkRingSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEESA_($prefixHash,$keyImage,$publicKeys,$signatures) {
 $prefixHash = $prefixHash|0;
 $keyImage = $keyImage|0;
 $publicKeys = $publicKeys|0;
 $signatures = $signatures|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$sroa$0$0147 = 0, $__begin17$sroa$0$0145 = 0, $__end_$i = 0, $__end_$i$i = 0, $__end_$i$i32 = 0, $__end_$i13$i = 0, $__end_$i13$i83 = 0, $__end_$i45 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i33 = 0, $__value_$i$i$i$i51 = 0, $__value_$i$i$i$i84 = 0;
 var $_keyImage = 0, $_prefixHash = 0, $_publicKey = 0, $_publicKeys = 0, $_signature = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i$i$i101 = 0, $add$ptr$i$i94 = 0, $agg$tmp = 0, $agg$tmp46 = 0, $call$i$i$i$i11$i = 0, $call$i$i$i$i11$i93 = 0, $call51 = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i98 = 0, $cmp$i$i146 = 0, $cmp$i$i75 = 0, $cmp$i$i75144 = 0;
 var $cmp$i114 = 0, $cmp$i27 = 0, $cmp$i35 = 0, $cmp$i41 = 0, $cmp$i47 = 0, $cmp$i52 = 0, $cmp$i62 = 0, $cmp$i8$i = 0, $cmp$i8$i89 = 0, $cmp$i88 = 0, $incdec$ptr$i = 0, $incdec$ptr$i115 = 0, $incdec$ptr$i126 = 0, $incdec$ptr$i66 = 0, $outSize$i108 = 0, $publicKey = 0, $sub$ptr$div$i$i = 0, $sub$ptr$div$i$i87 = 0, $sub$ptr$div6$i$i$i = 0, $sub$ptr$div6$i$i$i100 = 0;
 var $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i$i86 = 0, $tobool$i$i = 0, $tobool$i$i121 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $outSize$i108 = sp;
 $_prefixHash = sp + 184|0;
 $_keyImage = sp + 152|0;
 $_publicKeys = sp + 76|0;
 $publicKey = sp + 64|0;
 $_publicKey = sp + 8|0;
 $_signature = sp + 88|0;
 $agg$tmp = sp + 52|0;
 $agg$tmp46 = sp + 40|0;
 dest=$_prefixHash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($prefixHash,$_prefixHash,32,0,$outSize$i108)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($keyImage,$_keyImage,32,0,$outSize$i108)|0);
 HEAP32[$_publicKeys>>2] = 0;
 $__end_$i$i = ((($_publicKeys)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($_publicKeys)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $0 = HEAP32[$publicKeys>>2]|0;
 $__end_$i = ((($publicKeys)) + 4|0);
 $1 = HEAP32[$__end_$i>>2]|0;
 $cmp$i$i146 = ($0|0)==($1|0);
 if (!($cmp$i$i146)) {
  $__size_$i$i = ((($publicKey)) + 11|0);
  $__begin$sroa$0$0147 = $0;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($publicKey,$__begin$sroa$0$0147);
   (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i108)|0);
   $4 = HEAP32[$__end_$i$i>>2]|0;
   $5 = HEAP32[$__value_$i$i$i$i>>2]|0;
   $cmp$i62 = ($4|0)==($5|0);
   if ($cmp$i62) {
    __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($_publicKeys,$_publicKey);
   } else {
    dest=$4; src=$_publicKey; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $incdec$ptr$i = ((($4)) + 32|0);
    HEAP32[$__end_$i$i>>2] = $incdec$ptr$i;
   }
   $6 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($6<<24>>24)<(0);
   if ($tobool$i$i) {
    $7 = HEAP32[$publicKey>>2]|0;
    __ZdlPv($7);
   }
   $incdec$ptr$i66 = ((($__begin$sroa$0$0147)) + 12|0);
   $cmp$i$i = ($incdec$ptr$i66|0)==($1|0);
   if ($cmp$i$i) {
    break;
   } else {
    $__begin$sroa$0$0147 = $incdec$ptr$i66;
   }
  }
 }
 HEAP32[$publicKey>>2] = 0;
 $__end_$i$i32 = ((($publicKey)) + 4|0);
 HEAP32[$__end_$i$i32>>2] = 0;
 $__value_$i$i$i$i33 = ((($publicKey)) + 8|0);
 HEAP32[$__value_$i$i$i$i33>>2] = 0;
 $2 = HEAP32[$signatures>>2]|0;
 $__end_$i45 = ((($signatures)) + 4|0);
 $3 = HEAP32[$__end_$i45>>2]|0;
 $cmp$i$i75144 = ($2|0)==($3|0);
 if (!($cmp$i$i75144)) {
  $__size_$i$i120 = ((($_publicKey)) + 11|0);
  $__begin17$sroa$0$0145 = $2;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($_publicKey,$__begin17$sroa$0$0145);
   (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($_publicKey,$_signature,64,0,$outSize$i108)|0);
   $11 = HEAP32[$__end_$i$i32>>2]|0;
   $12 = HEAP32[$__value_$i$i$i$i33>>2]|0;
   $cmp$i114 = ($11|0)==($12|0);
   if ($cmp$i114) {
    __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($publicKey,$_signature);
   } else {
    dest=$11; src=$_signature; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $incdec$ptr$i115 = ((($11)) + 64|0);
    HEAP32[$__end_$i$i32>>2] = $incdec$ptr$i115;
   }
   $13 = HEAP8[$__size_$i$i120>>0]|0;
   $tobool$i$i121 = ($13<<24>>24)<(0);
   if ($tobool$i$i121) {
    $14 = HEAP32[$_publicKey>>2]|0;
    __ZdlPv($14);
   }
   $incdec$ptr$i126 = ((($__begin17$sroa$0$0145)) + 12|0);
   $cmp$i$i75 = ($incdec$ptr$i126|0)==($3|0);
   if ($cmp$i$i75) {
    break;
   } else {
    $__begin17$sroa$0$0145 = $incdec$ptr$i126;
   }
  }
 }
 HEAP32[$agg$tmp>>2] = 0;
 $__end_$i13$i83 = ((($agg$tmp)) + 4|0);
 HEAP32[$__end_$i13$i83>>2] = 0;
 $__value_$i$i$i$i84 = ((($agg$tmp)) + 8|0);
 HEAP32[$__value_$i$i$i$i84>>2] = 0;
 $8 = HEAP32[$__end_$i$i>>2]|0;
 $9 = HEAP32[$_publicKeys>>2]|0;
 $sub$ptr$sub$i$i86 = (($8) - ($9))|0;
 $sub$ptr$div$i$i87 = $sub$ptr$sub$i$i86 >> 5;
 $cmp$i88 = ($sub$ptr$sub$i$i86|0)==(0);
 $10 = $9;
 if (!($cmp$i88)) {
  $cmp$i8$i89 = ($sub$ptr$div$i$i87>>>0)>(134217727);
  if ($cmp$i8$i89) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($agg$tmp);
   // unreachable;
  }
  $call$i$i$i$i11$i93 = (__Znwm($sub$ptr$sub$i$i86)|0);
  HEAP32[$__end_$i13$i83>>2] = $call$i$i$i$i11$i93;
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i11$i93;
  $add$ptr$i$i94 = (($call$i$i$i$i11$i93) + ($sub$ptr$div$i$i87<<5)|0);
  HEAP32[$__value_$i$i$i$i84>>2] = $add$ptr$i$i94;
  $cmp$i$i$i98 = ($sub$ptr$sub$i$i86|0)>(0);
  if ($cmp$i$i$i98) {
   $sub$ptr$div6$i$i$i100 = $sub$ptr$sub$i$i86 >>> 5;
   $add$ptr$i$i$i101 = (($call$i$i$i$i11$i93) + ($sub$ptr$div6$i$i$i100<<5)|0);
   _memcpy(($call$i$i$i$i11$i93|0),($10|0),($sub$ptr$sub$i$i86|0))|0;
   HEAP32[$__end_$i13$i83>>2] = $add$ptr$i$i$i101;
  }
 }
 HEAP32[$agg$tmp46>>2] = 0;
 $__end_$i13$i = ((($agg$tmp46)) + 4|0);
 HEAP32[$__end_$i13$i>>2] = 0;
 $__value_$i$i$i$i51 = ((($agg$tmp46)) + 8|0);
 HEAP32[$__value_$i$i$i$i51>>2] = 0;
 $15 = HEAP32[$__end_$i$i32>>2]|0;
 $16 = HEAP32[$publicKey>>2]|0;
 $sub$ptr$sub$i$i = (($15) - ($16))|0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 6;
 $cmp$i52 = ($sub$ptr$sub$i$i|0)==(0);
 $17 = $16;
 if (!($cmp$i52)) {
  $cmp$i8$i = ($sub$ptr$div$i$i>>>0)>(67108863);
  if ($cmp$i8$i) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($agg$tmp46);
   // unreachable;
  }
  $call$i$i$i$i11$i = (__Znwm($sub$ptr$sub$i$i)|0);
  HEAP32[$__end_$i13$i>>2] = $call$i$i$i$i11$i;
  HEAP32[$agg$tmp46>>2] = $call$i$i$i$i11$i;
  $add$ptr$i$i = (($call$i$i$i$i11$i) + ($sub$ptr$div$i$i<<6)|0);
  HEAP32[$__value_$i$i$i$i51>>2] = $add$ptr$i$i;
  $cmp$i$i$i = ($sub$ptr$sub$i$i|0)>(0);
  if ($cmp$i$i$i) {
   $sub$ptr$div6$i$i$i = $sub$ptr$sub$i$i >>> 6;
   $add$ptr$i$i$i = (($call$i$i$i$i11$i) + ($sub$ptr$div6$i$i$i<<6)|0);
   _memcpy(($call$i$i$i$i11$i|0),($17|0),($sub$ptr$sub$i$i|0))|0;
   HEAP32[$__end_$i13$i>>2] = $add$ptr$i$i$i;
  }
 }
 $call51 = (__ZN6Crypto10crypto_ops18checkRingSignatureERKNS_4HashERKNS_8KeyImageENSt3__26vectorINS_9PublicKeyENS7_9allocatorIS9_EEEENS8_INS_9SignatureENSA_ISD_EEEE($_prefixHash,$_keyImage,$agg$tmp,$agg$tmp46)|0);
 $18 = HEAP32[$agg$tmp46>>2]|0;
 $cmp$i47 = ($18|0)==(0|0);
 if (!($cmp$i47)) {
  $19 = $18;
  HEAP32[$__end_$i13$i>>2] = $19;
  __ZdlPv($18);
 }
 $20 = HEAP32[$agg$tmp>>2]|0;
 $cmp$i41 = ($20|0)==(0|0);
 if (!($cmp$i41)) {
  $21 = $20;
  HEAP32[$__end_$i13$i83>>2] = $21;
  __ZdlPv($20);
 }
 $22 = HEAP32[$publicKey>>2]|0;
 $cmp$i35 = ($22|0)==(0|0);
 if (!($cmp$i35)) {
  $23 = $22;
  HEAP32[$__end_$i$i32>>2] = $23;
  __ZdlPv($22);
 }
 $24 = HEAP32[$_publicKeys>>2]|0;
 $cmp$i27 = ($24|0)==(0|0);
 if ($cmp$i27) {
  STACKTOP = sp;return ($call51|0);
 }
 $25 = $24;
 HEAP32[$__end_$i$i>>2] = $25;
 __ZdlPv($24);
 STACKTOP = sp;return ($call51|0);
}
function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__end_$i = 0, $__value_$i$i$i$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $call$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i22 = 0, $cmp3$i = 0;
 var $cond$i = 0, $exception$i$i$i$i = 0, $incdec$ptr = 0, $mul$i = 0, $mul$i$i$i = 0, $spec$select$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $tobool$i13 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 6;
 $add = (($sub$ptr$div$i) + 1)|0;
 $cmp$i = ($add>>>0)>(67108863);
 $2 = $1;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__value_$i$i$i$i$i$i = ((($this)) + 8|0);
 $3 = HEAP32[$__value_$i$i$i$i$i$i>>2]|0;
 $sub$ptr$sub$i$i$i = (($3) - ($1))|0;
 $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 6;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(33554431);
 $mul$i = $sub$ptr$sub$i$i$i >> 5;
 $cmp$i$i$i$i = ($mul$i>>>0)<($add>>>0);
 $$sroa$speculated$i = $cmp$i$i$i$i ? $add : $mul$i;
 $spec$select$i = $cmp3$i ? $$sroa$speculated$i : 67108863;
 $cmp$i22 = ($spec$select$i|0)==(0);
 do {
  if ($cmp$i22) {
   $cond$i = 0;
  } else {
   $cmp$i$i$i = ($spec$select$i>>>0)>(67108863);
   if ($cmp$i$i$i) {
    $exception$i$i$i$i = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($exception$i$i$i$i,45632);
    HEAP32[$exception$i$i$i$i>>2] = (43984);
    ___cxa_throw(($exception$i$i$i$i|0),(43288|0),(6|0));
    // unreachable;
   } else {
    $mul$i$i$i = $spec$select$i << 6;
    $call$i$i$i$i = (__Znwm($mul$i$i$i)|0);
    $cond$i = $call$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$ptr$i = (($cond$i) + ($sub$ptr$div$i<<6)|0);
 $add$ptr5$i = (($cond$i) + ($spec$select$i<<6)|0);
 $4 = $add$ptr5$i;
 dest=$add$ptr$i; src=$__x; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $incdec$ptr = ((($add$ptr$i)) + 64|0);
 $5 = $incdec$ptr;
 $6 = $cond$i;
 $cmp$i$i = ($sub$ptr$sub$i|0)>(0);
 if ($cmp$i$i) {
  _memcpy(($cond$i|0),($2|0),($sub$ptr$sub$i|0))|0;
 }
 HEAP32[$this>>2] = $6;
 HEAP32[$__end_$i>>2] = $5;
 HEAP32[$__value_$i$i$i$i$i$i>>2] = $4;
 $tobool$i13 = ($1|0)==(0);
 if ($tobool$i13) {
  return;
 }
 __ZdlPv($2);
 return;
}
function __ZN4Core12Cryptography41generatePrivateViewKeyFromPrivateSpendKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$privateSpendKey) {
 $agg$result = $agg$result|0;
 $privateSpendKey = $privateSpendKey|0;
 var $_privateSpendKey = 0, $outSize$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $outSize$i = sp;
 $_privateSpendKey = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateSpendKey,$_privateSpendKey,32,0,$outSize$i)|0);
 __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_($_privateSpendKey,$outSize$i);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i,32,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography35generateViewKeysFromPrivateSpendKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$privateSpendKey) {
 $agg$result = $agg$result|0;
 $privateSpendKey = $privateSpendKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__size_$i$i14 = 0, $__size_$i$i8 = 0, $__value_$i1$i$i = 0, $_privateSpendKey = 0, $_publicViewKey = 0, $outSize$i = 0, $privateViewKey = 0, $publicViewKey = 0, $tobool$i$i15 = 0, $tobool$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $outSize$i = sp;
 $_privateSpendKey = sp + 88|0;
 $_publicViewKey = sp + 56|0;
 $privateViewKey = sp + 44|0;
 $publicViewKey = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateSpendKey,$_privateSpendKey,32,0,$outSize$i)|0);
 __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_RNS_9PublicKeyE($_privateSpendKey,$outSize$i,$_publicViewKey);
 __ZN6Common5toHexEPKvy($privateViewKey,$outSize$i,32,0);
 __ZN6Common5toHexEPKvy($publicViewKey,$_publicViewKey,32,0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$privateViewKey);
 $__value_$i1$i$i = ((($agg$result)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($__value_$i1$i$i,$publicViewKey);
 $__size_$i$i14 = ((($publicViewKey)) + 11|0);
 $0 = HEAP8[$__size_$i$i14>>0]|0;
 $tobool$i$i15 = ($0<<24>>24)<(0);
 if ($tobool$i$i15) {
  $1 = HEAP32[$publicViewKey>>2]|0;
  __ZdlPv($1);
 }
 $__size_$i$i8 = ((($privateViewKey)) + 11|0);
 $2 = HEAP8[$__size_$i$i8>>0]|0;
 $tobool$i$i9 = ($2<<24>>24)<(0);
 if (!($tobool$i$i9)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$privateViewKey>>2]|0;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography12generateKeysEv($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__size_$i$i14 = 0, $__size_$i$i8 = 0, $__value_$i1$i$i = 0, $_privateKey = 0, $_publicKey = 0, $privateKey = 0, $publicKey = 0, $tobool$i$i15 = 0, $tobool$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $_privateKey = sp + 56|0;
 $_publicKey = sp + 24|0;
 $privateKey = sp + 12|0;
 $publicKey = sp;
 __ZN6Crypto10crypto_ops13generate_keysERNS_9PublicKeyERNS_9SecretKeyE($_publicKey,$_privateKey);
 __ZN6Common5toHexEPKvy($privateKey,$_privateKey,32,0);
 __ZN6Common5toHexEPKvy($publicKey,$_publicKey,32,0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$privateKey);
 $__value_$i1$i$i = ((($agg$result)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($__value_$i1$i$i,$publicKey);
 $__size_$i$i8 = ((($publicKey)) + 11|0);
 $0 = HEAP8[$__size_$i$i8>>0]|0;
 $tobool$i$i9 = ($0<<24>>24)<(0);
 if ($tobool$i$i9) {
  $1 = HEAP32[$publicKey>>2]|0;
  __ZdlPv($1);
 }
 $__size_$i$i14 = ((($privateKey)) + 11|0);
 $2 = HEAP8[$__size_$i$i14>>0]|0;
 $tobool$i$i15 = ($2<<24>>24)<(0);
 if (!($tobool$i$i15)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$privateKey>>2]|0;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography8checkKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($publicKey) {
 $publicKey = $publicKey|0;
 var $_publicKey = 0, $call$i = 0, $outSize$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $outSize$i = sp;
 $_publicKey = sp + 8|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i)|0);
 $call$i = (__ZN6Crypto10crypto_ops9check_keyERKNS_9PublicKeyE($_publicKey)|0);
 STACKTOP = sp;return ($call$i|0);
}
function __ZN4Core12Cryptography20secretKeyToPublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$privateKey) {
 $agg$result = $agg$result|0;
 $privateKey = $privateKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__size_$i$i2 = 0, $__size_$i1$i$i$i = 0, $__size_$i2$i$i$i = 0, $_privateKey = 0, $call$i7 = 0, $frombool = 0, $outSize$i = 0, $publicKey = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $outSize$i = sp;
 $_privateKey = sp + 56|0;
 $publicKey = sp + 44|0;
 $ref$tmp = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateKey,$_privateKey,32,0,$outSize$i)|0);
 $call$i7 = (__ZN6Crypto10crypto_ops24secret_key_to_public_keyERKNS_9SecretKeyERNS_9PublicKeyE($_privateKey,$outSize$i)|0);
 $frombool = $call$i7&1;
 ;HEAP32[$publicKey>>2]=0|0;HEAP32[$publicKey+4>>2]=0|0;HEAP32[$publicKey+8>>2]=0|0;
 if ($call$i7) {
  __ZN6Common5toHexEPKvy($ref$tmp,$outSize$i,32,0);
  $__size_$i2$i$i$i = ((($publicKey)) + 11|0);
  $0 = HEAP8[$__size_$i2$i$i$i>>0]|0;
  $tobool$i$i$i$i = ($0<<24>>24)<(0);
  if ($tobool$i$i$i$i) {
   $1 = HEAP32[$publicKey>>2]|0;
   HEAP8[$1>>0] = 0;
   $__size_$i1$i$i$i = ((($publicKey)) + 4|0);
   HEAP32[$__size_$i1$i$i$i>>2] = 0;
  } else {
   HEAP8[$publicKey>>0] = 0;
   HEAP8[$__size_$i2$i$i$i>>0] = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($publicKey,0);
  ;HEAP32[$publicKey>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$publicKey+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$publicKey+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
 }
 HEAP8[$agg$result>>0] = $frombool;
 $2 = ((($agg$result)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2,$publicKey);
 $__size_$i$i2 = ((($publicKey)) + 11|0);
 $3 = HEAP8[$__size_$i$i2>>0]|0;
 $tobool$i$i3 = ($3<<24>>24)<(0);
 if (!($tobool$i$i3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$publicKey>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography21generateKeyDerivationENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_($agg$result,$publicKey,$privateKey) {
 $agg$result = $agg$result|0;
 $publicKey = $publicKey|0;
 $privateKey = $privateKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__size_$i$i2 = 0, $__size_$i1$i$i$i = 0, $__size_$i2$i$i$i = 0, $_privateKey = 0, $_publicKey = 0, $call$i10 = 0, $derivation = 0, $frombool = 0, $outSize$i7 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $outSize$i7 = sp;
 $_publicKey = sp + 88|0;
 $_privateKey = sp + 56|0;
 $derivation = sp + 44|0;
 $ref$tmp = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i7)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateKey,$_privateKey,32,0,$outSize$i7)|0);
 $call$i10 = (__ZN6Crypto10crypto_ops23generate_key_derivationERKNS_9PublicKeyERKNS_9SecretKeyERNS_13KeyDerivationE($_publicKey,$_privateKey,$outSize$i7)|0);
 $frombool = $call$i10&1;
 ;HEAP32[$derivation>>2]=0|0;HEAP32[$derivation+4>>2]=0|0;HEAP32[$derivation+8>>2]=0|0;
 if ($call$i10) {
  __ZN6Common5toHexEPKvy($ref$tmp,$outSize$i7,32,0);
  $__size_$i2$i$i$i = ((($derivation)) + 11|0);
  $0 = HEAP8[$__size_$i2$i$i$i>>0]|0;
  $tobool$i$i$i$i = ($0<<24>>24)<(0);
  if ($tobool$i$i$i$i) {
   $1 = HEAP32[$derivation>>2]|0;
   HEAP8[$1>>0] = 0;
   $__size_$i1$i$i$i = ((($derivation)) + 4|0);
   HEAP32[$__size_$i1$i$i$i>>2] = 0;
  } else {
   HEAP8[$derivation>>0] = 0;
   HEAP8[$__size_$i2$i$i$i>>0] = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($derivation,0);
  ;HEAP32[$derivation>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$derivation+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$derivation+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
 }
 HEAP8[$agg$result>>0] = $frombool;
 $2 = ((($agg$result)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2,$derivation);
 $__size_$i$i2 = ((($derivation)) + 11|0);
 $3 = HEAP8[$__size_$i$i2>>0]|0;
 $tobool$i$i3 = ($3<<24>>24)<(0);
 if (!($tobool$i$i3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$derivation>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography15derivePublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_($agg$result,$derivation,$0,$1,$publicKey) {
 $agg$result = $agg$result|0;
 $derivation = $derivation|0;
 $0 = $0|0;
 $1 = $1|0;
 $publicKey = $publicKey|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__size_$i$i2 = 0, $__size_$i1$i$i$i = 0, $__size_$i2$i$i$i = 0, $_derivation = 0, $_publicKey = 0, $call$i10 = 0, $derivedKey = 0, $frombool = 0, $outSize$i7 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $outSize$i7 = sp;
 $_derivation = sp + 88|0;
 $_publicKey = sp + 56|0;
 $derivedKey = sp + 44|0;
 $ref$tmp = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($derivation,$_derivation,32,0,$outSize$i7)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i7)|0);
 $call$i10 = (__ZN6Crypto10crypto_ops17derive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($_derivation,$0,$_publicKey,$outSize$i7)|0);
 $frombool = $call$i10&1;
 ;HEAP32[$derivedKey>>2]=0|0;HEAP32[$derivedKey+4>>2]=0|0;HEAP32[$derivedKey+8>>2]=0|0;
 if ($call$i10) {
  __ZN6Common5toHexEPKvy($ref$tmp,$outSize$i7,32,0);
  $__size_$i2$i$i$i = ((($derivedKey)) + 11|0);
  $2 = HEAP8[$__size_$i2$i$i$i>>0]|0;
  $tobool$i$i$i$i = ($2<<24>>24)<(0);
  if ($tobool$i$i$i$i) {
   $3 = HEAP32[$derivedKey>>2]|0;
   HEAP8[$3>>0] = 0;
   $__size_$i1$i$i$i = ((($derivedKey)) + 4|0);
   HEAP32[$__size_$i1$i$i$i>>2] = 0;
  } else {
   HEAP8[$derivedKey>>0] = 0;
   HEAP8[$__size_$i2$i$i$i>>0] = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($derivedKey,0);
  ;HEAP32[$derivedKey>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$derivedKey+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$derivedKey+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
 }
 HEAP8[$agg$result>>0] = $frombool;
 $4 = ((($agg$result)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4,$derivedKey);
 $__size_$i$i2 = ((($derivedKey)) + 11|0);
 $5 = HEAP8[$__size_$i$i2>>0]|0;
 $tobool$i$i3 = ($5<<24>>24)<(0);
 if (!($tobool$i$i3)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$derivedKey>>2]|0;
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography15deriveSecretKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_($agg$result,$derivation,$0,$1,$privateKey) {
 $agg$result = $agg$result|0;
 $derivation = $derivation|0;
 $0 = $0|0;
 $1 = $1|0;
 $privateKey = $privateKey|0;
 var $_derivation = 0, $_privateKey = 0, $outSize$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $outSize$i1 = sp;
 $_derivation = sp + 64|0;
 $_privateKey = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($derivation,$_derivation,32,0,$outSize$i1)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateKey,$_privateKey,32,0,$outSize$i1)|0);
 __ZN6Crypto10crypto_ops17derive_secret_keyERKNS_13KeyDerivationEmRKNS_9SecretKeyERS4_($_derivation,$0,$_privateKey,$outSize$i1);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i1,32,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography17underivePublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_($agg$result,$derivation,$0,$1,$derivedKey) {
 $agg$result = $agg$result|0;
 $derivation = $derivation|0;
 $0 = $0|0;
 $1 = $1|0;
 $derivedKey = $derivedKey|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__size_$i$i2 = 0, $__size_$i1$i$i$i = 0, $__size_$i2$i$i$i = 0, $_derivation = 0, $_derivedKey = 0, $call$i10 = 0, $frombool = 0, $outSize$i7 = 0, $publicKey = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $outSize$i7 = sp;
 $_derivation = sp + 88|0;
 $_derivedKey = sp + 56|0;
 $publicKey = sp + 44|0;
 $ref$tmp = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($derivation,$_derivation,32,0,$outSize$i7)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($derivedKey,$_derivedKey,32,0,$outSize$i7)|0);
 $call$i10 = (__ZN6Crypto10crypto_ops19underive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($_derivation,$0,$_derivedKey,$outSize$i7)|0);
 $frombool = $call$i10&1;
 ;HEAP32[$publicKey>>2]=0|0;HEAP32[$publicKey+4>>2]=0|0;HEAP32[$publicKey+8>>2]=0|0;
 if ($call$i10) {
  __ZN6Common5toHexEPKvy($ref$tmp,$outSize$i7,32,0);
  $__size_$i2$i$i$i = ((($publicKey)) + 11|0);
  $2 = HEAP8[$__size_$i2$i$i$i>>0]|0;
  $tobool$i$i$i$i = ($2<<24>>24)<(0);
  if ($tobool$i$i$i$i) {
   $3 = HEAP32[$publicKey>>2]|0;
   HEAP8[$3>>0] = 0;
   $__size_$i1$i$i$i = ((($publicKey)) + 4|0);
   HEAP32[$__size_$i1$i$i$i>>2] = 0;
  } else {
   HEAP8[$publicKey>>0] = 0;
   HEAP8[$__size_$i2$i$i$i>>0] = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($publicKey,0);
  ;HEAP32[$publicKey>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$publicKey+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$publicKey+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
 }
 HEAP8[$agg$result>>0] = $frombool;
 $4 = ((($agg$result)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4,$publicKey);
 $__size_$i$i2 = ((($publicKey)) + 11|0);
 $5 = HEAP8[$__size_$i$i2>>0]|0;
 $tobool$i$i3 = ($5<<24>>24)<(0);
 if (!($tobool$i$i3)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$publicKey>>2]|0;
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography17generateSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_($agg$result,$prefixHash,$publicKey,$privateKey) {
 $agg$result = $agg$result|0;
 $prefixHash = $prefixHash|0;
 $publicKey = $publicKey|0;
 $privateKey = $privateKey|0;
 var $_prefixHash = 0, $_privateKey = 0, $_publicKey = 0, $outSize$i4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $outSize$i4 = sp;
 $_prefixHash = sp + 128|0;
 $_publicKey = sp + 96|0;
 $_privateKey = sp + 64|0;
 dest=$_prefixHash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($prefixHash,$_prefixHash,32,0,$outSize$i4)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i4)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateKey,$_privateKey,32,0,$outSize$i4)|0);
 __ZN6Crypto10crypto_ops18generate_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SecretKeyERNS_9SignatureE($_prefixHash,$_publicKey,$_privateKey,$outSize$i4);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i4,64,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography14checkSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_($prefixHash,$publicKey,$signature) {
 $prefixHash = $prefixHash|0;
 $publicKey = $publicKey|0;
 $signature = $signature|0;
 var $_prefixHash = 0, $_publicKey = 0, $_signature = 0, $call$i1 = 0, $outSize$i5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $outSize$i5 = sp;
 $_prefixHash = sp + 104|0;
 $_publicKey = sp + 72|0;
 $_signature = sp + 8|0;
 dest=$_prefixHash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($prefixHash,$_prefixHash,32,0,$outSize$i5)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i5)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($signature,$_signature,64,0,$outSize$i5)|0);
 $call$i1 = (__ZN6Crypto10crypto_ops15check_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SignatureE($_prefixHash,$_publicKey,$_signature)|0);
 STACKTOP = sp;return ($call$i1|0);
}
function __ZN4Core12Cryptography16generateKeyImageENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_($agg$result,$publicKey,$privateKey) {
 $agg$result = $agg$result|0;
 $publicKey = $publicKey|0;
 $privateKey = $privateKey|0;
 var $_privateKey = 0, $_publicKey = 0, $outSize$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $outSize$i1 = sp;
 $_publicKey = sp + 64|0;
 $_privateKey = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i1)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateKey,$_privateKey,32,0,$outSize$i1)|0);
 __ZN6Crypto10crypto_ops18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($_publicKey,$_privateKey,$outSize$i1);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i1,32,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography13scalarmultKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_($agg$result,$keyImageA,$keyImageB) {
 $agg$result = $agg$result|0;
 $keyImageA = $keyImageA|0;
 $keyImageB = $keyImageB|0;
 var $_keyImageA = 0, $_keyImageB = 0, $outSize$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $outSize$i1 = sp;
 $_keyImageA = sp + 64|0;
 $_keyImageB = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($keyImageA,$_keyImageA,32,0,$outSize$i1)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($keyImageB,$_keyImageB,32,0,$outSize$i1)|0);
 __ZN6Crypto10crypto_ops13scalarmultKeyERKNS_8KeyImageES3_($outSize$i1,$_keyImageA,$_keyImageB);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i1,32,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography19hashToEllipticCurveENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$hash) {
 $agg$result = $agg$result|0;
 $hash = $hash|0;
 var $_hash = 0, $outSize$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $outSize$i = sp;
 $_hash = sp + 32|0;
 dest=$_hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($hash,$_hash,32,0,$outSize$i)|0);
 __ZN6Crypto10crypto_ops15hash_data_to_ecEPKhmRNS_9PublicKeyE($_hash,32,$outSize$i);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i,32,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography10scReduce32ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$data) {
 $agg$result = $agg$result|0;
 $data = $data|0;
 var $_scalar = 0, $outSize$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $outSize$i = sp;
 $_scalar = sp + 8|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($data,$_scalar,32,0,$outSize$i)|0);
 __ZN6Crypto10crypto_ops10scReduce32ERNS_19EllipticCurveScalarE($_scalar);
 __ZN6Common5toHexEPKvy($agg$result,$_scalar,32,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography12hashToScalarENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$hash) {
 $agg$result = $agg$result|0;
 $hash = $hash|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $_hash = 0, $_scalar = 0, $agg$tmp = 0, $cmp$i10 = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $_hash = sp + 12|0;
 $agg$tmp = sp;
 $_scalar = sp + 24|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$hash);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($_hash,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$_hash>>2]|0;
 $__end_$i = ((($_hash)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 __ZN6Crypto10crypto_ops12hashToScalarEPKvmRNS_19EllipticCurveScalarE($2,$sub$ptr$sub$i,$_scalar);
 __ZN6Common5toHexEPKvy($agg$result,$_scalar,32,0);
 $4 = HEAP32[$_hash>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops10scReduce32ERNS_19EllipticCurveScalarE($scalar) {
 $scalar = $scalar|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sc_reduce32($scalar);
 return;
}
function __ZN6Crypto10crypto_ops12hashToScalarEPKvmRNS_19EllipticCurveScalarE($data,$length,$res) {
 $data = $data|0;
 $length = $length|0;
 $res = $res|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_fast_hash($data,$length,$res);
 _sc_reduce32($res);
 return;
}
function __ZN6Crypto10crypto_ops13generate_keysERNS_9PublicKeyERNS_9SecretKeyE($pub,$sec) {
 $pub = $pub|0;
 $sec = $sec|0;
 var $arrayidx$i$i = 0, $call$i$i$i = 0, $conv$i$i = 0, $exitcond$i$i = 0, $i$05$i$i = 0, $inc$i$i = 0, $point = 0, $tmp$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $tmp$i = sp;
 $point = sp + 64|0;
 $i$05$i$i = 0;
 while(1) {
  ___tls_init();
  $call$i$i$i = (__ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE(43576,573928,43576)|0);
  $conv$i$i = $call$i$i$i&255;
  $arrayidx$i$i = (($tmp$i) + ($i$05$i$i)|0);
  HEAP8[$arrayidx$i$i>>0] = $conv$i$i;
  $inc$i$i = (($i$05$i$i) + 1)|0;
  $exitcond$i$i = ($inc$i$i|0)==(64);
  if ($exitcond$i$i) {
   break;
  } else {
   $i$05$i$i = $inc$i$i;
  }
 }
 _sc_reduce($tmp$i);
 dest=$sec; src=$tmp$i; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _ge_scalarmult_base($point,$sec);
 _ge_p3_tobytes($pub,$point);
 STACKTOP = sp;return;
}
function ___tls_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__cap_$i$i$i$i = 0, $__i$07$i$i$i = 0, $__size_$i$i$i = 0, $__size_$i$i$i$i = 0, $add$i$i$i = 0, $arrayidx$i$i$i = 0, $arrayidx8$i$i$i = 0, $call$i = 0, $call$i$i$i$i$i$i = 0, $exitcond$i$i$i = 0, $guard$uninitialized = 0, $inc$i$i$i = 0, $mul$i$i$i = 0, $ref$tmp$i = 0, $shr$i$i$i$i = 0, $tobool$i$i$i = 0;
 var $xor$i$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp$i = sp;
 $0 = HEAP8[577009]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  STACKTOP = sp;return;
 }
 HEAP8[577009] = 1;
 $call$i$i$i$i$i$i = (__Znwm(16)|0);
 HEAP32[$ref$tmp$i>>2] = $call$i$i$i$i$i$i;
 $__cap_$i$i$i$i = ((($ref$tmp$i)) + 8|0);
 HEAP32[$__cap_$i$i$i$i>>2] = -2147483632;
 $__size_$i$i$i$i = ((($ref$tmp$i)) + 4|0);
 HEAP32[$__size_$i$i$i$i>>2] = 12;
 dest=$call$i$i$i$i$i$i; src=45700; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $arrayidx$i$i$i = ((($call$i$i$i$i$i$i)) + 12|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 __ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(576428,$ref$tmp$i);
 $__size_$i$i$i = ((($ref$tmp$i)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i$i) {
  $2 = HEAP32[$ref$tmp$i>>2]|0;
  __ZdlPv($2);
 }
 (___cxa_thread_atexit((17|0),(576428|0),(___dso_handle|0))|0);
 ___tls_init();
 $call$i = (__ZNSt3__213random_deviceclEv(576428)|0);
 HEAP32[143482] = $call$i;
 $3 = $call$i;$__i$07$i$i$i = 1;
 while(1) {
  $shr$i$i$i$i = $3 >>> 30;
  $xor$i$i$i = $shr$i$i$i$i ^ $3;
  $mul$i$i$i = Math_imul($xor$i$i$i, 1812433253)|0;
  $add$i$i$i = (($mul$i$i$i) + ($__i$07$i$i$i))|0;
  $arrayidx8$i$i$i = (573928 + ($__i$07$i$i$i<<2)|0);
  HEAP32[$arrayidx8$i$i$i>>2] = $add$i$i$i;
  $inc$i$i$i = (($__i$07$i$i$i) + 1)|0;
  $exitcond$i$i$i = ($inc$i$i$i|0)==(624);
  if ($exitcond$i$i$i) {
   break;
  } else {
   $3 = $add$i$i$i;$__i$07$i$i$i = $inc$i$i$i;
  }
 }
 HEAP32[(576424)>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE($this,$__g,$__p) {
 $this = $this|0;
 $__g = $__g|0;
 $__p = $__p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__b_$i = 0, $__i_$i$i$i = 0, $__i_$i$i$i$promoted = 0, $__i_$i$i$i17 = 0, $add = 0, $add$i = 0, $add$i$i$i = 0;
 var $add$i$i$i18 = 0, $add19 = 0, $add7$i$i$i = 0, $add7$i$i$i25 = 0, $and = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i21 = 0, $and11$i$i$i = 0, $and11$i$i$i29 = 0, $and26$i$i$i = 0, $and26$i$i$i36 = 0, $and29$i$i$i = 0, $and29$i$i$i39 = 0, $and5$i$i$i = 0, $and5$i$i$i23 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i20 = 0, $arrayidx10$i$i$i = 0, $arrayidx10$i$i$i27 = 0;
 var $arrayidx4$i$i$i = 0, $arrayidx4$i$i$i22 = 0, $cmp = 0, $cmp$i = 0, $cmp13 = 0, $cmp17 = 0, $cmp4 = 0, $cmp43$i = 0, $cond$i = 0, $conv$i = 0, $div$i = 0, $div6$i = 0, $mul$i$i$i = 0, $mul$i$i$i30 = 0, $or$i$i$i = 0, $or$i$i$i24 = 0, $rem$i = 0, $rem$i$i$i = 0, $rem$i$i$i19 = 0, $rem$i$i$i65 = 0;
 var $rem8$i$i$i = 0, $rem8$i$i$i26 = 0, $retval$1 = 0, $shl$i$i$i$i = 0, $shl$i$i$i$i38 = 0, $shl$i14$i$i$i = 0, $shl$i14$i$i$i35 = 0, $shr = 0, $shr$i$i$i$i = 0, $shr$i$i$i$i28 = 0, $shr$i13$i$i$i = 0, $shr$i13$i$i$i41 = 0, $shr$i15$i$i$i = 0, $shr$i15$i$i$i33 = 0, $shr46$i = 0, $spec$select = 0, $sub = 0, $sub10 = 0, $sub12 = 0, $sub45$i = 0;
 var $sub9 = 0, $xor$i$i$i = 0, $xor$i$i$i31 = 0, $xor12$i$i$i = 0, $xor12$i$i$i32 = 0, $xor23$i$i$i = 0, $xor23$i$i$i34 = 0, $xor27$i$i$i = 0, $xor27$i$i$i37 = 0, $xor30$i$i$i = 0, $xor30$i$i$i40 = 0, $xor32$i$i$i = 0, $xor32$i$i$i42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__b_$i = ((($__p)) + 4|0);
 $0 = HEAP32[$__b_$i>>2]|0;
 $1 = HEAP32[$__p>>2]|0;
 $sub = (($0) - ($1))|0;
 $add = (($sub) + 1)|0;
 $cmp = ($sub|0)==(0);
 if ($cmp) {
  $retval$1 = $1;
  return ($retval$1|0);
 }
 $cmp4 = ($add|0)==(0);
 if ($cmp4) {
  $__i_$i$i$i17 = ((($__g)) + 2496|0);
  $2 = HEAP32[$__i_$i$i$i17>>2]|0;
  $add$i$i$i18 = (($2) + 1)|0;
  $rem$i$i$i19 = (($add$i$i$i18>>>0) % 624)&-1;
  $arrayidx$i$i$i20 = (($__g) + ($2<<2)|0);
  $3 = HEAP32[$arrayidx$i$i$i20>>2]|0;
  $and$i$i$i21 = $3 & -2147483648;
  $arrayidx4$i$i$i22 = (($__g) + ($rem$i$i$i19<<2)|0);
  $4 = HEAP32[$arrayidx4$i$i$i22>>2]|0;
  $and5$i$i$i23 = $4 & 2147483646;
  $or$i$i$i24 = $and5$i$i$i23 | $and$i$i$i21;
  $add7$i$i$i25 = (($2) + 397)|0;
  $rem8$i$i$i26 = (($add7$i$i$i25>>>0) % 624)&-1;
  $arrayidx10$i$i$i27 = (($__g) + ($rem8$i$i$i26<<2)|0);
  $5 = HEAP32[$arrayidx10$i$i$i27>>2]|0;
  $shr$i$i$i$i28 = $or$i$i$i24 >>> 1;
  $and11$i$i$i29 = $4 & 1;
  $6 = (0 - ($and11$i$i$i29))|0;
  $mul$i$i$i30 = $6 & -1727483681;
  $xor$i$i$i31 = $mul$i$i$i30 ^ $5;
  $xor12$i$i$i32 = $xor$i$i$i31 ^ $shr$i$i$i$i28;
  HEAP32[$arrayidx$i$i$i20>>2] = $xor12$i$i$i32;
  $shr$i15$i$i$i33 = $xor12$i$i$i32 >>> 11;
  $xor23$i$i$i34 = $shr$i15$i$i$i33 ^ $xor12$i$i$i32;
  HEAP32[$__i_$i$i$i17>>2] = $rem$i$i$i19;
  $shl$i14$i$i$i35 = $xor23$i$i$i34 << 7;
  $and26$i$i$i36 = $shl$i14$i$i$i35 & -1658038656;
  $xor27$i$i$i37 = $and26$i$i$i36 ^ $xor23$i$i$i34;
  $shl$i$i$i$i38 = $xor27$i$i$i37 << 15;
  $and29$i$i$i39 = $shl$i$i$i$i38 & -272236544;
  $xor30$i$i$i40 = $and29$i$i$i39 ^ $xor27$i$i$i37;
  $shr$i13$i$i$i41 = $xor30$i$i$i40 >>> 18;
  $xor32$i$i$i42 = $shr$i13$i$i$i41 ^ $xor30$i$i$i40;
  $retval$1 = $xor32$i$i$i42;
  return ($retval$1|0);
 }
 $7 = (Math_clz32(($add|0))|0);
 $sub9 = (32 - ($7))|0;
 $sub12 = (33 - ($sub9))|0;
 $shr = -1 >>> $sub12;
 $and = $shr & $add;
 $cmp13 = ($and|0)==(0);
 $sub10 = $cmp13 << 31 >> 31;
 $spec$select = (($sub9) + ($sub10))|0;
 $div$i = $spec$select >>> 5;
 $rem$i = $spec$select & 31;
 $cmp$i = ($rem$i|0)!=(0);
 $conv$i = $cmp$i&1;
 $add$i = (($div$i) + ($conv$i))|0;
 $div6$i = (($spec$select>>>0) / ($add$i>>>0))&-1;
 $cmp43$i = ($add$i>>>0)>($spec$select>>>0);
 $sub45$i = (32 - ($div6$i))|0;
 $shr46$i = -1 >>> $sub45$i;
 $cond$i = $cmp43$i ? 0 : $shr46$i;
 $__i_$i$i$i = ((($__g)) + 2496|0);
 $__i_$i$i$i$promoted = HEAP32[$__i_$i$i$i>>2]|0;
 $rem$i$i$i65 = $__i_$i$i$i$promoted;
 while(1) {
  $add$i$i$i = (($rem$i$i$i65) + 1)|0;
  $rem$i$i$i = (($add$i$i$i>>>0) % 624)&-1;
  $arrayidx$i$i$i = (($__g) + ($rem$i$i$i65<<2)|0);
  $8 = HEAP32[$arrayidx$i$i$i>>2]|0;
  $and$i$i$i = $8 & -2147483648;
  $arrayidx4$i$i$i = (($__g) + ($rem$i$i$i<<2)|0);
  $9 = HEAP32[$arrayidx4$i$i$i>>2]|0;
  $and5$i$i$i = $9 & 2147483646;
  $or$i$i$i = $and5$i$i$i | $and$i$i$i;
  $add7$i$i$i = (($rem$i$i$i65) + 397)|0;
  $rem8$i$i$i = (($add7$i$i$i>>>0) % 624)&-1;
  $arrayidx10$i$i$i = (($__g) + ($rem8$i$i$i<<2)|0);
  $10 = HEAP32[$arrayidx10$i$i$i>>2]|0;
  $shr$i$i$i$i = $or$i$i$i >>> 1;
  $and11$i$i$i = $9 & 1;
  $11 = (0 - ($and11$i$i$i))|0;
  $mul$i$i$i = $11 & -1727483681;
  $xor$i$i$i = $mul$i$i$i ^ $10;
  $xor12$i$i$i = $xor$i$i$i ^ $shr$i$i$i$i;
  HEAP32[$arrayidx$i$i$i>>2] = $xor12$i$i$i;
  $shr$i15$i$i$i = $xor12$i$i$i >>> 11;
  $xor23$i$i$i = $shr$i15$i$i$i ^ $xor12$i$i$i;
  $shl$i14$i$i$i = $xor23$i$i$i << 7;
  $and26$i$i$i = $shl$i14$i$i$i & -1658038656;
  $xor27$i$i$i = $and26$i$i$i ^ $xor23$i$i$i;
  $shl$i$i$i$i = $xor27$i$i$i << 15;
  $and29$i$i$i = $shl$i$i$i$i & -272236544;
  $xor30$i$i$i = $and29$i$i$i ^ $xor27$i$i$i;
  $shr$i13$i$i$i = $xor30$i$i$i >>> 18;
  $xor32$i$i$i = $shr$i13$i$i$i ^ $xor30$i$i$i;
  $and$i$i = $xor32$i$i$i & $cond$i;
  $cmp17 = ($and$i$i>>>0)<($add>>>0);
  if ($cmp17) {
   break;
  } else {
   $rem$i$i$i65 = $rem$i$i$i;
  }
 }
 HEAP32[$__i_$i$i$i>>2] = $rem$i$i$i;
 $12 = HEAP32[$__p>>2]|0;
 $add19 = (($12) + ($and$i$i))|0;
 $retval$1 = $add19;
 return ($retval$1|0);
}
function __ZN6Crypto10crypto_ops9check_keyERKNS_9PublicKeyE($key) {
 $key = $key|0;
 var $call = 0, $cmp = 0, $point = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $point = sp;
 $call = (_ge_frombytes_vartime($point,$key)|0);
 $cmp = ($call|0)==(0);
 STACKTOP = sp;return ($cmp|0);
}
function __ZN6Crypto10crypto_ops24secret_key_to_public_keyERKNS_9SecretKeyERNS_9PublicKeyE($sec,$pub) {
 $sec = $sec|0;
 $pub = $pub|0;
 var $call = 0, $cmp = 0, $point = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $point = sp;
 $call = (_sc_check($sec)|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  _ge_scalarmult_base($point,$sec);
  _ge_p3_tobytes($pub,$point);
  $retval$0 = 1;
 } else {
  $retval$0 = 0;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN6Crypto10crypto_ops23generate_key_derivationERKNS_9PublicKeyERKNS_9SecretKeyERNS_13KeyDerivationE($key1,$key2,$derivation) {
 $key1 = $key1|0;
 $key2 = $key2|0;
 $derivation = $derivation|0;
 var $call = 0, $cmp = 0, $point = 0, $point2 = 0, $point3 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $point = sp + 280|0;
 $point2 = sp + 160|0;
 $point3 = sp;
 $call = (_ge_frombytes_vartime($point,$key1)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 _ge_scalarmult($point2,$key2,$point);
 _ge_mul8($point3,$point2);
 _ge_p1p1_to_p2($point2,$point3);
 _ge_tobytes($derivation,$point2);
 $retval$0 = 1;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN6Crypto10crypto_ops17derive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($derivation,$output_index,$base,$derived_key) {
 $derivation = $derivation|0;
 $output_index = $output_index|0;
 $base = $base|0;
 $derived_key = $derived_key|0;
 var $0 = 0, $arraydecay$i = 0, $buf$i = 0, $call = 0, $cmp = 0, $cmp$i$i = 0, $cmp4$i$i = 0, $conv$i$i = 0, $conv2$i$i = 0, $end$sroa$0$0$in$i = 0, $end$sroa$0$1$ptr$i = 0, $i$addr$0$lcssa$i$i = 0, $i$addr$05$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr4$i$i = 0, $or$i$i = 0, $point1 = 0, $point2 = 0, $point3 = 0, $point4 = 0;
 var $point5 = 0, $retval$0 = 0, $scalar = 0, $shr$i$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0;
 $buf$i = sp + 792|0;
 $scalar = sp + 760|0;
 $point1 = sp + 600|0;
 $point2 = sp + 440|0;
 $point3 = sp + 280|0;
 $point4 = sp + 120|0;
 $point5 = sp;
 $call = (_ge_frombytes_vartime($point1,$base)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arraydecay$i = ((($buf$i)) + 32|0);
 dest=$buf$i; src=$derivation; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $cmp4$i$i = ($output_index>>>0)>(127);
 if ($cmp4$i$i) {
  $end$sroa$0$0$in$i = $arraydecay$i;$i$addr$05$i$i = $output_index;
  while(1) {
   $or$i$i = $i$addr$05$i$i | 128;
   $conv2$i$i = $or$i$i&255;
   $incdec$ptr$i$i = ((($end$sroa$0$0$in$i)) + 1|0);
   HEAP8[$end$sroa$0$0$in$i>>0] = $conv2$i$i;
   $shr$i$i = $i$addr$05$i$i >>> 7;
   $cmp$i$i = ($i$addr$05$i$i>>>0)>(16383);
   if ($cmp$i$i) {
    $end$sroa$0$0$in$i = $incdec$ptr$i$i;$i$addr$05$i$i = $shr$i$i;
   } else {
    $end$sroa$0$1$ptr$i = $incdec$ptr$i$i;$i$addr$0$lcssa$i$i = $shr$i$i;
    break;
   }
  }
 } else {
  $end$sroa$0$1$ptr$i = $arraydecay$i;$i$addr$0$lcssa$i$i = $output_index;
 }
 $conv$i$i = $i$addr$0$lcssa$i$i&255;
 $incdec$ptr4$i$i = ((($end$sroa$0$1$ptr$i)) + 1|0);
 $0 = $incdec$ptr4$i$i;
 HEAP8[$end$sroa$0$1$ptr$i>>0] = $conv$i$i;
 $sub$ptr$rhs$cast$i = $buf$i;
 $sub$ptr$sub$i = (($0) - ($sub$ptr$rhs$cast$i))|0;
 _cn_fast_hash($buf$i,$sub$ptr$sub$i,$scalar);
 _sc_reduce32($scalar);
 _ge_scalarmult_base($point2,$scalar);
 _ge_p3_to_cached($point3,$point2);
 _ge_add($point4,$point1,$point3);
 _ge_p1p1_to_p2($point5,$point4);
 _ge_tobytes($derived_key,$point5);
 $retval$0 = 1;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN6Crypto10crypto_ops17derive_secret_keyERKNS_13KeyDerivationEmRKNS_9SecretKeyERS4_($derivation,$output_index,$base,$derived_key) {
 $derivation = $derivation|0;
 $output_index = $output_index|0;
 $base = $base|0;
 $derived_key = $derived_key|0;
 var $0 = 0, $arraydecay$i = 0, $buf$i = 0, $cmp$i$i = 0, $cmp4$i$i = 0, $conv$i$i = 0, $conv2$i$i = 0, $end$sroa$0$0$in$i = 0, $end$sroa$0$1$ptr$i = 0, $i$addr$0$lcssa$i$i = 0, $i$addr$05$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr4$i$i = 0, $or$i$i = 0, $scalar = 0, $shr$i$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $buf$i = sp + 32|0;
 $scalar = sp;
 $arraydecay$i = ((($buf$i)) + 32|0);
 dest=$buf$i; src=$derivation; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $cmp4$i$i = ($output_index>>>0)>(127);
 if ($cmp4$i$i) {
  $end$sroa$0$0$in$i = $arraydecay$i;$i$addr$05$i$i = $output_index;
  while(1) {
   $or$i$i = $i$addr$05$i$i | 128;
   $conv2$i$i = $or$i$i&255;
   $incdec$ptr$i$i = ((($end$sroa$0$0$in$i)) + 1|0);
   HEAP8[$end$sroa$0$0$in$i>>0] = $conv2$i$i;
   $shr$i$i = $i$addr$05$i$i >>> 7;
   $cmp$i$i = ($i$addr$05$i$i>>>0)>(16383);
   if ($cmp$i$i) {
    $end$sroa$0$0$in$i = $incdec$ptr$i$i;$i$addr$05$i$i = $shr$i$i;
   } else {
    $end$sroa$0$1$ptr$i = $incdec$ptr$i$i;$i$addr$0$lcssa$i$i = $shr$i$i;
    break;
   }
  }
 } else {
  $end$sroa$0$1$ptr$i = $arraydecay$i;$i$addr$0$lcssa$i$i = $output_index;
 }
 $conv$i$i = $i$addr$0$lcssa$i$i&255;
 $incdec$ptr4$i$i = ((($end$sroa$0$1$ptr$i)) + 1|0);
 $0 = $incdec$ptr4$i$i;
 HEAP8[$end$sroa$0$1$ptr$i>>0] = $conv$i$i;
 $sub$ptr$rhs$cast$i = $buf$i;
 $sub$ptr$sub$i = (($0) - ($sub$ptr$rhs$cast$i))|0;
 _cn_fast_hash($buf$i,$sub$ptr$sub$i,$scalar);
 _sc_reduce32($scalar);
 _sc_add($derived_key,$base,$scalar);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops19underive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($derivation,$output_index,$derived_key,$base) {
 $derivation = $derivation|0;
 $output_index = $output_index|0;
 $derived_key = $derived_key|0;
 $base = $base|0;
 var $0 = 0, $arraydecay$i = 0, $buf$i = 0, $call = 0, $cmp = 0, $cmp$i$i = 0, $cmp4$i$i = 0, $conv$i$i = 0, $conv2$i$i = 0, $end$sroa$0$0$in$i = 0, $end$sroa$0$1$ptr$i = 0, $i$addr$0$lcssa$i$i = 0, $i$addr$05$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr4$i$i = 0, $or$i$i = 0, $point1 = 0, $point2 = 0, $point3 = 0, $point4 = 0;
 var $point5 = 0, $retval$0 = 0, $scalar = 0, $shr$i$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0;
 $buf$i = sp + 792|0;
 $scalar = sp + 760|0;
 $point1 = sp + 600|0;
 $point2 = sp + 440|0;
 $point3 = sp + 280|0;
 $point4 = sp + 120|0;
 $point5 = sp;
 $call = (_ge_frombytes_vartime($point1,$derived_key)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arraydecay$i = ((($buf$i)) + 32|0);
 dest=$buf$i; src=$derivation; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $cmp4$i$i = ($output_index>>>0)>(127);
 if ($cmp4$i$i) {
  $end$sroa$0$0$in$i = $arraydecay$i;$i$addr$05$i$i = $output_index;
  while(1) {
   $or$i$i = $i$addr$05$i$i | 128;
   $conv2$i$i = $or$i$i&255;
   $incdec$ptr$i$i = ((($end$sroa$0$0$in$i)) + 1|0);
   HEAP8[$end$sroa$0$0$in$i>>0] = $conv2$i$i;
   $shr$i$i = $i$addr$05$i$i >>> 7;
   $cmp$i$i = ($i$addr$05$i$i>>>0)>(16383);
   if ($cmp$i$i) {
    $end$sroa$0$0$in$i = $incdec$ptr$i$i;$i$addr$05$i$i = $shr$i$i;
   } else {
    $end$sroa$0$1$ptr$i = $incdec$ptr$i$i;$i$addr$0$lcssa$i$i = $shr$i$i;
    break;
   }
  }
 } else {
  $end$sroa$0$1$ptr$i = $arraydecay$i;$i$addr$0$lcssa$i$i = $output_index;
 }
 $conv$i$i = $i$addr$0$lcssa$i$i&255;
 $incdec$ptr4$i$i = ((($end$sroa$0$1$ptr$i)) + 1|0);
 $0 = $incdec$ptr4$i$i;
 HEAP8[$end$sroa$0$1$ptr$i>>0] = $conv$i$i;
 $sub$ptr$rhs$cast$i = $buf$i;
 $sub$ptr$sub$i = (($0) - ($sub$ptr$rhs$cast$i))|0;
 _cn_fast_hash($buf$i,$sub$ptr$sub$i,$scalar);
 _sc_reduce32($scalar);
 _ge_scalarmult_base($point2,$scalar);
 _ge_p3_to_cached($point3,$point2);
 _ge_sub($point4,$point1,$point3);
 _ge_p1p1_to_p2($point5,$point4);
 _ge_tobytes($base,$point5);
 $retval$0 = 1;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN6Crypto10crypto_ops18generate_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SecretKeyERNS_9SignatureE($prefix_hash,$pub,$sec,$sig) {
 $prefix_hash = $prefix_hash|0;
 $pub = $pub|0;
 $sec = $sec|0;
 $sig = $sig|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx$i$i = 0, $buf = 0, $call$i$i$i = 0, $conv$i$i = 0, $exitcond$i$i = 0, $i$05$i$i = 0, $inc$i$i = 0, $k = 0, $tmp$i = 0, $tmp3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $tmp$i = sp;
 $tmp3 = sp + 64|0;
 $k = sp + 320|0;
 $buf = sp + 224|0;
 dest=$buf; src=$prefix_hash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $0 = ((($buf)) + 32|0);
 dest=$0; src=$pub; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i$05$i$i = 0;
 while(1) {
  ___tls_init();
  $call$i$i$i = (__ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE(43576,573928,43576)|0);
  $conv$i$i = $call$i$i$i&255;
  $arrayidx$i$i = (($tmp$i) + ($i$05$i$i)|0);
  HEAP8[$arrayidx$i$i>>0] = $conv$i$i;
  $inc$i$i = (($i$05$i$i) + 1)|0;
  $exitcond$i$i = ($inc$i$i|0)==(64);
  if ($exitcond$i$i) {
   break;
  } else {
   $i$05$i$i = $inc$i$i;
  }
 }
 _sc_reduce($tmp$i);
 dest=$k; src=$tmp$i; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _ge_scalarmult_base($tmp3,$k);
 $1 = ((($buf)) + 64|0);
 _ge_p3_tobytes($1,$tmp3);
 _cn_fast_hash($buf,96,$sig);
 _sc_reduce32($sig);
 $add$ptr = ((($sig)) + 32|0);
 _sc_mulsub($add$ptr,$sig,$sec,$k);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops15check_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SignatureE($prefix_hash,$pub,$sig) {
 $prefix_hash = $prefix_hash|0;
 $pub = $pub|0;
 $sig = $sig|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $buf = 0, $c = 0, $call = 0, $call1 = 0, $call3 = 0, $call8 = 0, $cmp = 0, $cmp2 = 0, $cmp4 = 0, $cmp9 = 0, $retval$0 = 0, $tmp2 = 0, $tmp3 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $tmp2 = sp + 160|0;
 $tmp3 = sp;
 $c = sp + 376|0;
 $buf = sp + 280|0;
 dest=$buf; src=$prefix_hash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $0 = ((($buf)) + 32|0);
 dest=$0; src=$pub; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $call = (_ge_frombytes_vartime($tmp3,$pub)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $call1 = (_sc_check($sig)|0);
 $cmp2 = ($call1|0)==(0);
 if (!($cmp2)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $add$ptr = ((($sig)) + 32|0);
 $call3 = (_sc_check($add$ptr)|0);
 $cmp4 = ($call3|0)==(0);
 if (!($cmp4)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 _ge_double_scalarmult_base_vartime($tmp2,$sig,$tmp3,$add$ptr);
 $1 = ((($buf)) + 64|0);
 _ge_tobytes($1,$tmp2);
 _cn_fast_hash($buf,96,$c);
 _sc_reduce32($c);
 _sc_sub($c,$c,$sig);
 $call8 = (_sc_isnonzero($c)|0);
 $cmp9 = ($call8|0)==(0);
 $retval$0 = $cmp9;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN6Crypto10crypto_ops13scalarmultKeyERKNS_8KeyImageES3_($agg$result,$P,$a) {
 $agg$result = $agg$result|0;
 $P = $P|0;
 $a = $a|0;
 var $A = 0, $R = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $A = sp + 120|0;
 $R = sp;
 (_ge_frombytes_vartime($A,$P)|0);
 _ge_scalarmult($R,$a,$A);
 _ge_tobytes($agg$result,$R);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops15hash_data_to_ecEPKhmRNS_9PublicKeyE($data,$len,$key) {
 $data = $data|0;
 $len = $len|0;
 $key = $key|0;
 var $h = 0, $point = 0, $point2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $h = sp + 280|0;
 $point = sp + 160|0;
 $point2 = sp;
 _cn_fast_hash($data,$len,$h);
 _ge_fromfe_frombytes_vartime($point,$h);
 _ge_mul8($point2,$point);
 _ge_p1p1_to_p2($point,$point2);
 _ge_tobytes($key,$point);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($pub,$sec,$image) {
 $pub = $pub|0;
 $sec = $sec|0;
 $image = $image|0;
 var $h$i = 0, $point = 0, $point$i = 0, $point2 = 0, $point2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $h$i = sp + 560|0;
 $point$i = sp + 440|0;
 $point2$i = sp + 280|0;
 $point = sp + 120|0;
 $point2 = sp;
 _cn_fast_hash($pub,32,$h$i);
 _ge_fromfe_frombytes_vartime($point$i,$h$i);
 _ge_mul8($point2$i,$point$i);
 _ge_p1p1_to_p3($point,$point2$i);
 _ge_scalarmult($point2,$sec,$point);
 _ge_tobytes($image,$point2);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops22generateRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEENS_9SecretKeyEy($agg$result,$prefixHash,$keyImage,$publicKeys,$transactionSecretKey,$0,$1) {
 $agg$result = $agg$result|0;
 $prefixHash = $prefixHash|0;
 $keyImage = $keyImage|0;
 $publicKeys = $publicKeys|0;
 $transactionSecretKey = $transactionSecretKey|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__end_$i$i = 0, $__end_$i13$i$i$i$i = 0, $__end_$i13$i$i$i$i143 = 0, $__end_$i13$i$i$i$i81 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i$i$i$i = 0, $__value_$i$i$i$i$i$i$i144 = 0, $__value_$i$i$i$i$i$i$i82 = 0, $ab = 0, $add$i = 0, $add$ptr = 0;
 var $add$ptr$i$i = 0, $add$ptr$i$i$i$i$i = 0, $add$ptr$i$i$i$i$i$i = 0, $add$ptr$i$i$i$i$i$i100 = 0, $add$ptr$i$i$i$i$i$i162 = 0, $add$ptr$i$i$i$i$i155 = 0, $add$ptr$i$i$i$i$i93 = 0, $add$ptr45 = 0, $add$ptr56 = 0, $add$ptr85 = 0, $arrayidx$i$i = 0, $arrayidx$i$i52 = 0, $arrayidx$i$i67 = 0, $call$i$i$i$i11$i$i$i$i = 0, $call$i$i$i$i11$i$i$i$i153 = 0, $call$i$i$i$i11$i$i$i$i91 = 0, $call$i$i$i$i7$i = 0, $call$i$i$i40 = 0, $call$i$i$i59 = 0, $call$i$i$i74 = 0;
 var $call34 = 0, $call4 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i$i$i = 0, $cmp$i$i$i$i$i$i159 = 0, $cmp$i$i$i$i$i$i97 = 0, $cmp$i$i$i$i148 = 0, $cmp$i$i$i$i86 = 0, $cmp$i171 = 0, $cmp$i32 = 0, $cmp$i4$i = 0, $cmp$i8$i$i$i$i = 0, $cmp$i8$i$i$i$i149 = 0, $cmp$i8$i$i$i$i87 = 0, $cmp11 = 0, $cmp11193 = 0, $cmp35 = 0, $conv$i$i = 0, $conv$i$i51 = 0;
 var $conv$i$i66 = 0, $exitcond$i$i = 0, $exitcond$i$i54 = 0, $exitcond$i$i69 = 0, $h = 0, $h$i114 = 0, $i$0194 = 0, $i$05$i$i = 0, $i$05$i$i50 = 0, $i$05$i$i65 = 0, $image_pre = 0, $image_unp = 0, $inc = 0, $inc$i$i = 0, $inc$i$i53 = 0, $inc$i$i68 = 0, $k = 0, $mul$i$i$i$i = 0, $mul$i$pre$phiZZ2D = 0, $phitmp = 0;
 var $phitmp197 = 0, $point$i115 = 0, $point2$i116 = 0, $signatures = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i$i$i = 0, $sub$ptr$div$i$i$i$i$i147 = 0, $sub$ptr$div$i$i$i$i$i85 = 0, $sub$ptr$div$i39 = 0, $sub$ptr$div6$i$i$i$i$i$i = 0, $sub$ptr$div6$i$i$i$i$i$i161 = 0, $sub$ptr$div6$i$i$i$i$i$i99 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i$i$i = 0, $sub$ptr$sub$i$i$i$i$i146 = 0, $sub$ptr$sub$i$i$i$i$i84 = 0, $sub$ptr$sub$i129$pre$phiZZZZ2D = 0, $sub$ptr$sub$i38 = 0, $sum31 = 0, $tmp2 = 0;
 var $tmp3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2176|0;
 $h$i114 = sp + 1280|0;
 $point$i115 = sp + 1960|0;
 $point2$i116 = sp + 1800|0;
 $signatures = sp + 1784|0;
 $image_unp = sp + 1624|0;
 $image_pre = sp;
 $sum31 = sp + 2144|0;
 $k = sp + 2112|0;
 $h = sp + 2080|0;
 $tmp2 = sp + 1504|0;
 $tmp3 = sp + 1344|0;
 $__end_$i = ((($publicKeys)) + 4|0);
 $2 = HEAP32[$__end_$i>>2]|0;
 $3 = HEAP32[$publicKeys>>2]|0;
 $sub$ptr$sub$i = (($2) - ($3))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 HEAP32[$signatures>>2] = 0;
 $__end_$i$i = ((($signatures)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($signatures)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $cmp$i32 = ($sub$ptr$sub$i|0)==(0);
 do {
  if ($cmp$i32) {
   $mul$i$pre$phiZZ2D = 0;
  } else {
   $cmp$i4$i = ($sub$ptr$div$i>>>0)>(67108863);
   if ($cmp$i4$i) {
    __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($signatures);
    // unreachable;
   } else {
    $mul$i$i$i$i = $sub$ptr$sub$i << 1;
    $call$i$i$i$i7$i = (__Znwm($mul$i$i$i$i)|0);
    HEAP32[$signatures>>2] = $call$i$i$i$i7$i;
    $add$ptr$i$i = (($call$i$i$i$i7$i) + ($sub$ptr$div$i<<6)|0);
    HEAP32[$__value_$i$i$i$i>>2] = $add$ptr$i$i;
    HEAP32[$__end_$i$i>>2] = $add$ptr$i$i;
    $mul$i$pre$phiZZ2D = $mul$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$i = $mul$i$pre$phiZZ2D | 32;
 $$alloca_mul = $add$i;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $call4 = (_ge_frombytes_vartime($image_unp,$keyImage)|0);
 $cmp = ($call4|0)==(0);
 L7: do {
  if ($cmp) {
   _ge_dsm_precomp($image_pre,$image_unp);
   _sc_0($sum31);
   dest=$4; src=$prefixHash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $9 = HEAP32[$__end_$i>>2]|0;
   $10 = HEAP32[$publicKeys>>2]|0;
   $cmp11193 = ($9|0)==($10|0);
   do {
    if ($cmp11193) {
     $sub$ptr$sub$i129$pre$phiZZZZ2D = 32;
    } else {
     $ab = ((($4)) + 32|0);
     $i$0194 = 0;
     while(1) {
      $11 = ($i$0194|0)==($0|0);
      $12 = (0)==($1|0);
      $13 = $11 & $12;
      if ($13) {
       $i$05$i$i = 0;
       while(1) {
        ___tls_init();
        $call$i$i$i40 = (__ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE(43576,573928,43576)|0);
        $conv$i$i = $call$i$i$i40&255;
        $arrayidx$i$i = (($h$i114) + ($i$05$i$i)|0);
        HEAP8[$arrayidx$i$i>>0] = $conv$i$i;
        $inc$i$i = (($i$05$i$i) + 1)|0;
        $exitcond$i$i = ($inc$i$i|0)==(64);
        if ($exitcond$i$i) {
         break;
        } else {
         $i$05$i$i = $inc$i$i;
        }
       }
       _sc_reduce($h$i114);
       dest=$k; src=$h$i114; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       _ge_scalarmult_base($tmp3,$k);
       $14 = (($ab) + ($i$0194<<6)|0);
       _ge_p3_tobytes($14,$tmp3);
       $15 = HEAP32[$publicKeys>>2]|0;
       $16 = (($15) + ($i$0194<<5)|0);
       _cn_fast_hash($16,32,$h$i114);
       _ge_fromfe_frombytes_vartime($point$i115,$h$i114);
       _ge_mul8($point2$i116,$point$i115);
       _ge_p1p1_to_p3($tmp3,$point2$i116);
       _ge_scalarmult($tmp2,$k,$tmp3);
       $17 = (((($ab) + ($i$0194<<6)|0)) + 32|0);
       _ge_tobytes($17,$tmp2);
      } else {
       $18 = HEAP32[$signatures>>2]|0;
       $i$05$i$i50 = 0;
       while(1) {
        ___tls_init();
        $call$i$i$i59 = (__ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE(43576,573928,43576)|0);
        $conv$i$i51 = $call$i$i$i59&255;
        $arrayidx$i$i52 = (($h$i114) + ($i$05$i$i50)|0);
        HEAP8[$arrayidx$i$i52>>0] = $conv$i$i51;
        $inc$i$i53 = (($i$05$i$i50) + 1)|0;
        $exitcond$i$i54 = ($inc$i$i53|0)==(64);
        if ($exitcond$i$i54) {
         break;
        } else {
         $i$05$i$i50 = $inc$i$i53;
        }
       }
       _sc_reduce($h$i114);
       $19 = (($18) + ($i$0194<<6)|0);
       dest=$19; src=$h$i114; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       $20 = HEAP32[$signatures>>2]|0;
       $add$ptr = (((($20) + ($i$0194<<6)|0)) + 32|0);
       $i$05$i$i65 = 0;
       while(1) {
        ___tls_init();
        $call$i$i$i74 = (__ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE(43576,573928,43576)|0);
        $conv$i$i66 = $call$i$i$i74&255;
        $arrayidx$i$i67 = (($h$i114) + ($i$05$i$i65)|0);
        HEAP8[$arrayidx$i$i67>>0] = $conv$i$i66;
        $inc$i$i68 = (($i$05$i$i65) + 1)|0;
        $exitcond$i$i69 = ($inc$i$i68|0)==(64);
        if ($exitcond$i$i69) {
         break;
        } else {
         $i$05$i$i65 = $inc$i$i68;
        }
       }
       _sc_reduce($h$i114);
       dest=$add$ptr; src=$h$i114; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       $21 = HEAP32[$publicKeys>>2]|0;
       $22 = (($21) + ($i$0194<<5)|0);
       $call34 = (_ge_frombytes_vartime($tmp3,$22)|0);
       $cmp35 = ($call34|0)==(0);
       if (!($cmp35)) {
        break;
       }
       $27 = HEAP32[$signatures>>2]|0;
       $28 = (($27) + ($i$0194<<6)|0);
       $add$ptr45 = (((($27) + ($i$0194<<6)|0)) + 32|0);
       _ge_double_scalarmult_base_vartime($tmp2,$28,$tmp3,$add$ptr45);
       $29 = (($ab) + ($i$0194<<6)|0);
       _ge_tobytes($29,$tmp2);
       $30 = HEAP32[$publicKeys>>2]|0;
       $31 = (($30) + ($i$0194<<5)|0);
       _cn_fast_hash($31,32,$h$i114);
       _ge_fromfe_frombytes_vartime($point$i115,$h$i114);
       _ge_mul8($point2$i116,$point$i115);
       _ge_p1p1_to_p3($tmp3,$point2$i116);
       $32 = HEAP32[$signatures>>2]|0;
       $add$ptr56 = (((($32) + ($i$0194<<6)|0)) + 32|0);
       $33 = (($32) + ($i$0194<<6)|0);
       _ge_double_scalarmult_precomp_vartime($tmp2,$add$ptr56,$tmp3,$33,$image_pre);
       $34 = (((($ab) + ($i$0194<<6)|0)) + 32|0);
       _ge_tobytes($34,$tmp2);
       $35 = HEAP32[$signatures>>2]|0;
       $36 = (($35) + ($i$0194<<6)|0);
       _sc_add($sum31,$sum31,$36);
      }
      $inc = (($i$0194) + 1)|0;
      $37 = HEAP32[$__end_$i>>2]|0;
      $38 = HEAP32[$publicKeys>>2]|0;
      $sub$ptr$sub$i38 = (($37) - ($38))|0;
      $sub$ptr$div$i39 = $sub$ptr$sub$i38 >> 5;
      $cmp11 = ($inc>>>0)<($sub$ptr$div$i39>>>0);
      if ($cmp11) {
       $i$0194 = $inc;
      } else {
       label = 30;
       break;
      }
     }
     if ((label|0) == 30) {
      $phitmp = $sub$ptr$sub$i38 << 1;
      $phitmp197 = $phitmp | 32;
      $sub$ptr$sub$i129$pre$phiZZZZ2D = $phitmp197;
      break;
     }
     HEAP8[$agg$result>>0] = 0;
     $23 = ((($agg$result)) + 4|0);
     HEAP32[$23>>2] = 0;
     $__end_$i13$i$i$i$i81 = ((($agg$result)) + 8|0);
     HEAP32[$__end_$i13$i$i$i$i81>>2] = 0;
     $__value_$i$i$i$i$i$i$i82 = ((($agg$result)) + 12|0);
     HEAP32[$__value_$i$i$i$i$i$i$i82>>2] = 0;
     $24 = HEAP32[$__end_$i$i>>2]|0;
     $25 = HEAP32[$signatures>>2]|0;
     $sub$ptr$sub$i$i$i$i$i84 = (($24) - ($25))|0;
     $sub$ptr$div$i$i$i$i$i85 = $sub$ptr$sub$i$i$i$i$i84 >> 6;
     $cmp$i$i$i$i86 = ($sub$ptr$sub$i$i$i$i$i84|0)==(0);
     $26 = $25;
     if (!($cmp$i$i$i$i86)) {
      $cmp$i8$i$i$i$i87 = ($sub$ptr$div$i$i$i$i$i85>>>0)>(67108863);
      if ($cmp$i8$i$i$i$i87) {
       __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($23);
       // unreachable;
      }
      $call$i$i$i$i11$i$i$i$i91 = (__Znwm($sub$ptr$sub$i$i$i$i$i84)|0);
      HEAP32[$__end_$i13$i$i$i$i81>>2] = $call$i$i$i$i11$i$i$i$i91;
      HEAP32[$23>>2] = $call$i$i$i$i11$i$i$i$i91;
      $add$ptr$i$i$i$i$i93 = (($call$i$i$i$i11$i$i$i$i91) + ($sub$ptr$div$i$i$i$i$i85<<6)|0);
      HEAP32[$__value_$i$i$i$i$i$i$i82>>2] = $add$ptr$i$i$i$i$i93;
      $cmp$i$i$i$i$i$i97 = ($sub$ptr$sub$i$i$i$i$i84|0)>(0);
      if ($cmp$i$i$i$i$i$i97) {
       $sub$ptr$div6$i$i$i$i$i$i99 = $sub$ptr$sub$i$i$i$i$i84 >>> 6;
       $add$ptr$i$i$i$i$i$i100 = (($call$i$i$i$i11$i$i$i$i91) + ($sub$ptr$div6$i$i$i$i$i$i99<<6)|0);
       _memcpy(($call$i$i$i$i11$i$i$i$i91|0),($26|0),($sub$ptr$sub$i$i$i$i$i84|0))|0;
       HEAP32[$__end_$i13$i$i$i$i81>>2] = $add$ptr$i$i$i$i$i$i100;
      }
     }
     $47 = $26;
     break L7;
    }
   } while(0);
   _cn_fast_hash($4,$sub$ptr$sub$i129$pre$phiZZZZ2D,$h);
   _sc_reduce32($h);
   $39 = HEAP32[$signatures>>2]|0;
   $40 = (($39) + ($0<<6)|0);
   _sc_sub($40,$h,$sum31);
   $41 = HEAP32[$signatures>>2]|0;
   $add$ptr85 = (((($41) + ($0<<6)|0)) + 32|0);
   $42 = (($41) + ($0<<6)|0);
   _sc_mulsub($add$ptr85,$42,$transactionSecretKey,$k);
   HEAP8[$agg$result>>0] = 1;
   $43 = ((($agg$result)) + 4|0);
   HEAP32[$43>>2] = 0;
   $__end_$i13$i$i$i$i143 = ((($agg$result)) + 8|0);
   HEAP32[$__end_$i13$i$i$i$i143>>2] = 0;
   $__value_$i$i$i$i$i$i$i144 = ((($agg$result)) + 12|0);
   HEAP32[$__value_$i$i$i$i$i$i$i144>>2] = 0;
   $44 = HEAP32[$__end_$i$i>>2]|0;
   $45 = HEAP32[$signatures>>2]|0;
   $sub$ptr$sub$i$i$i$i$i146 = (($44) - ($45))|0;
   $sub$ptr$div$i$i$i$i$i147 = $sub$ptr$sub$i$i$i$i$i146 >> 6;
   $cmp$i$i$i$i148 = ($sub$ptr$sub$i$i$i$i$i146|0)==(0);
   $46 = $45;
   if ($cmp$i$i$i$i148) {
    $47 = $46;
   } else {
    $cmp$i8$i$i$i$i149 = ($sub$ptr$div$i$i$i$i$i147>>>0)>(67108863);
    if ($cmp$i8$i$i$i$i149) {
     __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($43);
     // unreachable;
    }
    $call$i$i$i$i11$i$i$i$i153 = (__Znwm($sub$ptr$sub$i$i$i$i$i146)|0);
    HEAP32[$__end_$i13$i$i$i$i143>>2] = $call$i$i$i$i11$i$i$i$i153;
    HEAP32[$43>>2] = $call$i$i$i$i11$i$i$i$i153;
    $add$ptr$i$i$i$i$i155 = (($call$i$i$i$i11$i$i$i$i153) + ($sub$ptr$div$i$i$i$i$i147<<6)|0);
    HEAP32[$__value_$i$i$i$i$i$i$i144>>2] = $add$ptr$i$i$i$i$i155;
    $cmp$i$i$i$i$i$i159 = ($sub$ptr$sub$i$i$i$i$i146|0)>(0);
    if ($cmp$i$i$i$i$i$i159) {
     $sub$ptr$div6$i$i$i$i$i$i161 = $sub$ptr$sub$i$i$i$i$i146 >>> 6;
     $add$ptr$i$i$i$i$i$i162 = (($call$i$i$i$i11$i$i$i$i153) + ($sub$ptr$div6$i$i$i$i$i$i161<<6)|0);
     _memcpy(($call$i$i$i$i11$i$i$i$i153|0),($46|0),($sub$ptr$sub$i$i$i$i$i146|0))|0;
     HEAP32[$__end_$i13$i$i$i$i143>>2] = $add$ptr$i$i$i$i$i$i162;
     $47 = $46;
    } else {
     $47 = $46;
    }
   }
  } else {
   HEAP8[$agg$result>>0] = 0;
   $5 = ((($agg$result)) + 4|0);
   HEAP32[$5>>2] = 0;
   $__end_$i13$i$i$i$i = ((($agg$result)) + 8|0);
   HEAP32[$__end_$i13$i$i$i$i>>2] = 0;
   $__value_$i$i$i$i$i$i$i = ((($agg$result)) + 12|0);
   HEAP32[$__value_$i$i$i$i$i$i$i>>2] = 0;
   $6 = HEAP32[$__end_$i$i>>2]|0;
   $7 = HEAP32[$signatures>>2]|0;
   $sub$ptr$sub$i$i$i$i$i = (($6) - ($7))|0;
   $sub$ptr$div$i$i$i$i$i = $sub$ptr$sub$i$i$i$i$i >> 6;
   $cmp$i$i$i$i = ($sub$ptr$sub$i$i$i$i$i|0)==(0);
   $8 = $7;
   if ($cmp$i$i$i$i) {
    $47 = $8;
   } else {
    $cmp$i8$i$i$i$i = ($sub$ptr$div$i$i$i$i$i>>>0)>(67108863);
    if ($cmp$i8$i$i$i$i) {
     __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($5);
     // unreachable;
    }
    $call$i$i$i$i11$i$i$i$i = (__Znwm($sub$ptr$sub$i$i$i$i$i)|0);
    HEAP32[$__end_$i13$i$i$i$i>>2] = $call$i$i$i$i11$i$i$i$i;
    HEAP32[$5>>2] = $call$i$i$i$i11$i$i$i$i;
    $add$ptr$i$i$i$i$i = (($call$i$i$i$i11$i$i$i$i) + ($sub$ptr$div$i$i$i$i$i<<6)|0);
    HEAP32[$__value_$i$i$i$i$i$i$i>>2] = $add$ptr$i$i$i$i$i;
    $cmp$i$i$i$i$i$i = ($sub$ptr$sub$i$i$i$i$i|0)>(0);
    if ($cmp$i$i$i$i$i$i) {
     $sub$ptr$div6$i$i$i$i$i$i = $sub$ptr$sub$i$i$i$i$i >>> 6;
     $add$ptr$i$i$i$i$i$i = (($call$i$i$i$i11$i$i$i$i) + ($sub$ptr$div6$i$i$i$i$i$i<<6)|0);
     _memcpy(($call$i$i$i$i11$i$i$i$i|0),($8|0),($sub$ptr$sub$i$i$i$i$i|0))|0;
     HEAP32[$__end_$i13$i$i$i$i>>2] = $add$ptr$i$i$i$i$i$i;
     $47 = $8;
    } else {
     $47 = $8;
    }
   }
  }
 } while(0);
 $cmp$i171 = ($47|0)==(0|0);
 if ($cmp$i171) {
  STACKTOP = sp;return;
 }
 $48 = $47;
 HEAP32[$__end_$i$i>>2] = $48;
 __ZdlPv($47);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops18checkRingSignatureERKNS_4HashERKNS_8KeyImageENSt3__26vectorINS_9PublicKeyENS7_9allocatorIS9_EEEENS8_INS_9SignatureENSA_ISD_EEEE($prefix_hash,$image,$pubs,$signatures) {
 $prefix_hash = $prefix_hash|0;
 $image = $image|0;
 $pubs = $pubs|0;
 $signatures = $signatures|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $ab = 0, $add$i = 0, $add$ptr = 0, $add$ptr26 = 0, $add$ptr29 = 0, $call12 = 0, $call15 = 0, $call2 = 0, $call20 = 0, $call4 = 0, $call40 = 0, $cmp = 0, $cmp10 = 0, $cmp1050 = 0, $cmp13 = 0, $cmp16 = 0;
 var $cmp21 = 0, $cmp41 = 0, $cmp5 = 0, $h = 0, $h$i = 0, $i$051 = 0, $image_pre = 0, $image_unp = 0, $inc = 0, $mul$i = 0, $phitmp = 0, $phitmp52 = 0, $point$i = 0, $point2$i = 0, $retval$3 = 0, $sub$ptr$div$i23 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i22 = 0, $sub$ptr$sub$i27$pre$phiZZZZ2D = 0, $sum20 = 0;
 var $tmp2 = 0, $tmp3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0;
 $h$i = sp + 2064|0;
 $point$i = sp + 1880|0;
 $point2$i = sp + 1720|0;
 $image_unp = sp + 1560|0;
 $image_pre = sp;
 $sum20 = sp + 2032|0;
 $h = sp + 2000|0;
 $tmp2 = sp + 1440|0;
 $tmp3 = sp + 1280|0;
 $__end_$i = ((($pubs)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$pubs>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $mul$i = $sub$ptr$sub$i << 1;
 $add$i = $mul$i | 32;
 $$alloca_mul = $add$i;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $call2 = (_ge_frombytes_vartime($image_unp,$image)|0);
 $cmp = ($call2|0)==(0);
 if (!($cmp)) {
  $retval$3 = 0;
  STACKTOP = sp;return ($retval$3|0);
 }
 _ge_dsm_precomp($image_pre,$image_unp);
 $call4 = (_ge_check_subgroup_precomp_vartime($image_pre)|0);
 $cmp5 = ($call4|0)==(0);
 if (!($cmp5)) {
  $retval$3 = 0;
  STACKTOP = sp;return ($retval$3|0);
 }
 _sc_0($sum20);
 dest=$2; src=$prefix_hash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = HEAP32[$__end_$i>>2]|0;
 $4 = HEAP32[$pubs>>2]|0;
 $cmp1050 = ($3|0)==($4|0);
 do {
  if ($cmp1050) {
   $sub$ptr$sub$i27$pre$phiZZZZ2D = 32;
  } else {
   $ab = ((($2)) + 32|0);
   $i$051 = 0;
   while(1) {
    $5 = HEAP32[$signatures>>2]|0;
    $6 = (($5) + ($i$051<<6)|0);
    $call12 = (_sc_check($6)|0);
    $cmp13 = ($call12|0)==(0);
    if (!($cmp13)) {
     break;
    }
    $7 = HEAP32[$signatures>>2]|0;
    $add$ptr = (((($7) + ($i$051<<6)|0)) + 32|0);
    $call15 = (_sc_check($add$ptr)|0);
    $cmp16 = ($call15|0)==(0);
    if (!($cmp16)) {
     break;
    }
    $8 = HEAP32[$pubs>>2]|0;
    $9 = (($8) + ($i$051<<5)|0);
    $call20 = (_ge_frombytes_vartime($tmp3,$9)|0);
    $cmp21 = ($call20|0)==(0);
    if (!($cmp21)) {
     break;
    }
    $10 = HEAP32[$signatures>>2]|0;
    $11 = (($10) + ($i$051<<6)|0);
    $add$ptr26 = (((($10) + ($i$051<<6)|0)) + 32|0);
    _ge_double_scalarmult_base_vartime($tmp2,$11,$tmp3,$add$ptr26);
    $12 = (($ab) + ($i$051<<6)|0);
    _ge_tobytes($12,$tmp2);
    $13 = HEAP32[$pubs>>2]|0;
    $14 = (($13) + ($i$051<<5)|0);
    _cn_fast_hash($14,32,$h$i);
    _ge_fromfe_frombytes_vartime($point$i,$h$i);
    _ge_mul8($point2$i,$point$i);
    _ge_p1p1_to_p3($tmp3,$point2$i);
    $15 = HEAP32[$signatures>>2]|0;
    $add$ptr29 = (((($15) + ($i$051<<6)|0)) + 32|0);
    $16 = (($15) + ($i$051<<6)|0);
    _ge_double_scalarmult_precomp_vartime($tmp2,$add$ptr29,$tmp3,$16,$image_pre);
    $17 = (((($ab) + ($i$051<<6)|0)) + 32|0);
    _ge_tobytes($17,$tmp2);
    $18 = HEAP32[$signatures>>2]|0;
    $19 = (($18) + ($i$051<<6)|0);
    _sc_add($sum20,$sum20,$19);
    $inc = (($i$051) + 1)|0;
    $20 = HEAP32[$__end_$i>>2]|0;
    $21 = HEAP32[$pubs>>2]|0;
    $sub$ptr$sub$i22 = (($20) - ($21))|0;
    $sub$ptr$div$i23 = $sub$ptr$sub$i22 >> 5;
    $cmp10 = ($inc>>>0)<($sub$ptr$div$i23>>>0);
    if ($cmp10) {
     $i$051 = $inc;
    } else {
     label = 10;
     break;
    }
   }
   if ((label|0) == 10) {
    $phitmp = $sub$ptr$sub$i22 << 1;
    $phitmp52 = $phitmp | 32;
    $sub$ptr$sub$i27$pre$phiZZZZ2D = $phitmp52;
    break;
   }
   $retval$3 = 0;
   STACKTOP = sp;return ($retval$3|0);
  }
 } while(0);
 _cn_fast_hash($2,$sub$ptr$sub$i27$pre$phiZZZZ2D,$h);
 _sc_reduce32($h);
 _sc_sub($h,$h,$sum20);
 $call40 = (_sc_isnonzero($h)|0);
 $cmp41 = ($call40|0)==(0);
 $retval$3 = $cmp41;
 STACKTOP = sp;return ($retval$3|0);
}
function __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_($spend,$viewSecret) {
 $spend = $spend|0;
 $viewSecret = $viewSecret|0;
 var $point$i$i$i = 0, $unused_dummy_variable = 0, $viewKeySeed$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $point$i$i$i = sp;
 $viewKeySeed$i = sp + 192|0;
 $unused_dummy_variable = sp + 160|0;
 (_keccak($spend,32,$viewKeySeed$i,32)|0);
 dest=$viewSecret; src=$viewKeySeed$i; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _sc_reduce32($viewSecret);
 _ge_scalarmult_base($point$i$i$i,$viewSecret);
 _ge_p3_tobytes($unused_dummy_variable,$point$i$i$i);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_RNS_9PublicKeyE($spend,$viewSecret,$viewPublic) {
 $spend = $spend|0;
 $viewSecret = $viewSecret|0;
 $viewPublic = $viewPublic|0;
 var $point$i$i = 0, $viewKeySeed = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $point$i$i = sp;
 $viewKeySeed = sp + 160|0;
 (_keccak($spend,32,$viewKeySeed,32)|0);
 dest=$viewSecret; src=$viewKeySeed; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _sc_reduce32($viewSecret);
 _ge_scalarmult_base($point$i$i,$viewSecret);
 _ge_p3_tobytes($viewPublic,$point$i$i);
 STACKTOP = sp;return;
}
function _ge_add($r,$p,$q) {
 $r = $r|0;
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $add$i = 0, $add$i110 = 0, $add$i184 = 0, $add$i73 = 0, $add20$i = 0, $add20$i111 = 0, $add20$i185 = 0, $add20$i74 = 0, $add21$i = 0, $add21$i112 = 0, $add21$i186 = 0, $add21$i75 = 0, $add22$i = 0, $add22$i113 = 0, $add22$i187 = 0, $add22$i76 = 0, $add23$i = 0, $add23$i114 = 0, $add23$i188 = 0, $add23$i77 = 0;
 var $add24$i = 0, $add24$i115 = 0, $add24$i189 = 0, $add24$i78 = 0, $add25$i = 0, $add25$i116 = 0, $add25$i190 = 0, $add25$i79 = 0, $add26$i = 0, $add26$i117 = 0, $add26$i191 = 0, $add26$i80 = 0, $add27$i = 0, $add27$i118 = 0, $add27$i192 = 0, $add27$i81 = 0, $add28$i = 0, $add28$i119 = 0, $add28$i193 = 0, $add28$i82 = 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay18 = 0, $arraydecay19 = 0, $arraydecay20 = 0, $arraydecay22 = 0, $arraydecay26 = 0, $arraydecay28 = 0, $arraydecay5 = 0, $arrayidx1$i = 0, $arrayidx1$i129 = 0, $arrayidx11$i = 0, $arrayidx11$i64 = 0, $arrayidx12$i = 0, $arrayidx12$i65 = 0, $arrayidx13$i = 0, $arrayidx13$i66 = 0, $arrayidx14$i = 0, $arrayidx14$i67 = 0, $arrayidx15$i = 0;
 var $arrayidx15$i68 = 0, $arrayidx16$i = 0, $arrayidx16$i69 = 0, $arrayidx17$i = 0, $arrayidx17$i70 = 0, $arrayidx18$i = 0, $arrayidx18$i71 = 0, $arrayidx19$i = 0, $arrayidx19$i72 = 0, $arrayidx2$i = 0, $arrayidx2$i130 = 0, $arrayidx3$i = 0, $arrayidx3$i131 = 0, $arrayidx30$i = 0, $arrayidx30$i231 = 0, $arrayidx31$i = 0, $arrayidx31$i232 = 0, $arrayidx32$i = 0, $arrayidx32$i233 = 0, $arrayidx33$i = 0;
 var $arrayidx33$i234 = 0, $arrayidx34$i = 0, $arrayidx34$i235 = 0, $arrayidx35$i = 0, $arrayidx35$i236 = 0, $arrayidx36$i = 0, $arrayidx36$i237 = 0, $arrayidx37$i = 0, $arrayidx37$i238 = 0, $arrayidx38$i = 0, $arrayidx38$i239 = 0, $arrayidx4$i = 0, $arrayidx4$i132 = 0, $arrayidx5$i = 0, $arrayidx5$i133 = 0, $arrayidx6$i = 0, $arrayidx6$i134 = 0, $arrayidx7$i = 0, $arrayidx7$i135 = 0, $arrayidx8$i = 0;
 var $arrayidx8$i136 = 0, $arrayidx9$i = 0, $arrayidx9$i137 = 0, $sub$i = 0, $sub$i147 = 0, $sub$i221 = 0, $sub20$i = 0, $sub20$i148 = 0, $sub20$i222 = 0, $sub21$i = 0, $sub21$i149 = 0, $sub21$i223 = 0, $sub22$i = 0, $sub22$i150 = 0, $sub22$i224 = 0, $sub23$i = 0, $sub23$i151 = 0, $sub23$i225 = 0, $sub24$i = 0, $sub24$i152 = 0;
 var $sub24$i226 = 0, $sub25$i = 0, $sub25$i153 = 0, $sub25$i227 = 0, $sub26$i = 0, $sub26$i154 = 0, $sub26$i228 = 0, $sub27$i = 0, $sub27$i155 = 0, $sub27$i229 = 0, $sub28$i = 0, $sub28$i156 = 0, $sub28$i230 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay1 = ((($p)) + 40|0);
 $0 = HEAP32[$arraydecay1>>2]|0;
 $arrayidx1$i = ((($p)) + 44|0);
 $1 = HEAP32[$arrayidx1$i>>2]|0;
 $arrayidx2$i = ((($p)) + 48|0);
 $2 = HEAP32[$arrayidx2$i>>2]|0;
 $arrayidx3$i = ((($p)) + 52|0);
 $3 = HEAP32[$arrayidx3$i>>2]|0;
 $arrayidx4$i = ((($p)) + 56|0);
 $4 = HEAP32[$arrayidx4$i>>2]|0;
 $arrayidx5$i = ((($p)) + 60|0);
 $5 = HEAP32[$arrayidx5$i>>2]|0;
 $arrayidx6$i = ((($p)) + 64|0);
 $6 = HEAP32[$arrayidx6$i>>2]|0;
 $arrayidx7$i = ((($p)) + 68|0);
 $7 = HEAP32[$arrayidx7$i>>2]|0;
 $arrayidx8$i = ((($p)) + 72|0);
 $8 = HEAP32[$arrayidx8$i>>2]|0;
 $arrayidx9$i = ((($p)) + 76|0);
 $9 = HEAP32[$arrayidx9$i>>2]|0;
 $10 = HEAP32[$p>>2]|0;
 $arrayidx11$i = ((($p)) + 4|0);
 $11 = HEAP32[$arrayidx11$i>>2]|0;
 $arrayidx12$i = ((($p)) + 8|0);
 $12 = HEAP32[$arrayidx12$i>>2]|0;
 $arrayidx13$i = ((($p)) + 12|0);
 $13 = HEAP32[$arrayidx13$i>>2]|0;
 $arrayidx14$i = ((($p)) + 16|0);
 $14 = HEAP32[$arrayidx14$i>>2]|0;
 $arrayidx15$i = ((($p)) + 20|0);
 $15 = HEAP32[$arrayidx15$i>>2]|0;
 $arrayidx16$i = ((($p)) + 24|0);
 $16 = HEAP32[$arrayidx16$i>>2]|0;
 $arrayidx17$i = ((($p)) + 28|0);
 $17 = HEAP32[$arrayidx17$i>>2]|0;
 $arrayidx18$i = ((($p)) + 32|0);
 $18 = HEAP32[$arrayidx18$i>>2]|0;
 $arrayidx19$i = ((($p)) + 36|0);
 $19 = HEAP32[$arrayidx19$i>>2]|0;
 $add$i = (($10) + ($0))|0;
 $add20$i = (($11) + ($1))|0;
 $add21$i = (($12) + ($2))|0;
 $add22$i = (($13) + ($3))|0;
 $add23$i = (($14) + ($4))|0;
 $add24$i = (($15) + ($5))|0;
 $add25$i = (($16) + ($6))|0;
 $add26$i = (($17) + ($7))|0;
 $add27$i = (($18) + ($8))|0;
 $add28$i = (($19) + ($9))|0;
 HEAP32[$r>>2] = $add$i;
 $arrayidx30$i = ((($r)) + 4|0);
 HEAP32[$arrayidx30$i>>2] = $add20$i;
 $arrayidx31$i = ((($r)) + 8|0);
 HEAP32[$arrayidx31$i>>2] = $add21$i;
 $arrayidx32$i = ((($r)) + 12|0);
 HEAP32[$arrayidx32$i>>2] = $add22$i;
 $arrayidx33$i = ((($r)) + 16|0);
 HEAP32[$arrayidx33$i>>2] = $add23$i;
 $arrayidx34$i = ((($r)) + 20|0);
 HEAP32[$arrayidx34$i>>2] = $add24$i;
 $arrayidx35$i = ((($r)) + 24|0);
 HEAP32[$arrayidx35$i>>2] = $add25$i;
 $arrayidx36$i = ((($r)) + 28|0);
 HEAP32[$arrayidx36$i>>2] = $add26$i;
 $arrayidx37$i = ((($r)) + 32|0);
 HEAP32[$arrayidx37$i>>2] = $add27$i;
 $arrayidx38$i = ((($r)) + 36|0);
 HEAP32[$arrayidx38$i>>2] = $add28$i;
 $arraydecay5 = ((($r)) + 40|0);
 $20 = HEAP32[$arraydecay1>>2]|0;
 $21 = HEAP32[$arrayidx1$i>>2]|0;
 $22 = HEAP32[$arrayidx2$i>>2]|0;
 $23 = HEAP32[$arrayidx3$i>>2]|0;
 $24 = HEAP32[$arrayidx4$i>>2]|0;
 $25 = HEAP32[$arrayidx5$i>>2]|0;
 $26 = HEAP32[$arrayidx6$i>>2]|0;
 $27 = HEAP32[$arrayidx7$i>>2]|0;
 $28 = HEAP32[$arrayidx8$i>>2]|0;
 $29 = HEAP32[$arrayidx9$i>>2]|0;
 $30 = HEAP32[$p>>2]|0;
 $31 = HEAP32[$arrayidx11$i>>2]|0;
 $32 = HEAP32[$arrayidx12$i>>2]|0;
 $33 = HEAP32[$arrayidx13$i>>2]|0;
 $34 = HEAP32[$arrayidx14$i>>2]|0;
 $35 = HEAP32[$arrayidx15$i>>2]|0;
 $36 = HEAP32[$arrayidx16$i>>2]|0;
 $37 = HEAP32[$arrayidx17$i>>2]|0;
 $38 = HEAP32[$arrayidx18$i>>2]|0;
 $39 = HEAP32[$arrayidx19$i>>2]|0;
 $sub$i221 = (($20) - ($30))|0;
 $sub20$i222 = (($21) - ($31))|0;
 $sub21$i223 = (($22) - ($32))|0;
 $sub22$i224 = (($23) - ($33))|0;
 $sub23$i225 = (($24) - ($34))|0;
 $sub24$i226 = (($25) - ($35))|0;
 $sub25$i227 = (($26) - ($36))|0;
 $sub26$i228 = (($27) - ($37))|0;
 $sub27$i229 = (($28) - ($38))|0;
 $sub28$i230 = (($29) - ($39))|0;
 HEAP32[$arraydecay5>>2] = $sub$i221;
 $arrayidx30$i231 = ((($r)) + 44|0);
 HEAP32[$arrayidx30$i231>>2] = $sub20$i222;
 $arrayidx31$i232 = ((($r)) + 48|0);
 HEAP32[$arrayidx31$i232>>2] = $sub21$i223;
 $arrayidx32$i233 = ((($r)) + 52|0);
 HEAP32[$arrayidx32$i233>>2] = $sub22$i224;
 $arrayidx33$i234 = ((($r)) + 56|0);
 HEAP32[$arrayidx33$i234>>2] = $sub23$i225;
 $arrayidx34$i235 = ((($r)) + 60|0);
 HEAP32[$arrayidx34$i235>>2] = $sub24$i226;
 $arrayidx35$i236 = ((($r)) + 64|0);
 HEAP32[$arrayidx35$i236>>2] = $sub25$i227;
 $arrayidx36$i237 = ((($r)) + 68|0);
 HEAP32[$arrayidx36$i237>>2] = $sub26$i228;
 $arrayidx37$i238 = ((($r)) + 72|0);
 HEAP32[$arrayidx37$i238>>2] = $sub27$i229;
 $arrayidx38$i239 = ((($r)) + 76|0);
 HEAP32[$arrayidx38$i239>>2] = $sub28$i230;
 $arraydecay10 = ((($r)) + 80|0);
 _fe_mul($arraydecay10,$r,$q);
 $arraydecay18 = ((($q)) + 40|0);
 _fe_mul($arraydecay5,$arraydecay5,$arraydecay18);
 $arraydecay19 = ((($r)) + 120|0);
 $arraydecay20 = ((($q)) + 120|0);
 $arraydecay22 = ((($p)) + 120|0);
 _fe_mul($arraydecay19,$arraydecay20,$arraydecay22);
 $arraydecay26 = ((($p)) + 80|0);
 $arraydecay28 = ((($q)) + 80|0);
 _fe_mul($r,$arraydecay26,$arraydecay28);
 $40 = HEAP32[$r>>2]|0;
 $41 = HEAP32[$arrayidx30$i>>2]|0;
 $42 = HEAP32[$arrayidx31$i>>2]|0;
 $43 = HEAP32[$arrayidx32$i>>2]|0;
 $44 = HEAP32[$arrayidx33$i>>2]|0;
 $45 = HEAP32[$arrayidx34$i>>2]|0;
 $46 = HEAP32[$arrayidx35$i>>2]|0;
 $47 = HEAP32[$arrayidx36$i>>2]|0;
 $48 = HEAP32[$arrayidx37$i>>2]|0;
 $49 = HEAP32[$arrayidx38$i>>2]|0;
 $add$i184 = $40 << 1;
 $add20$i185 = $41 << 1;
 $add21$i186 = $42 << 1;
 $add22$i187 = $43 << 1;
 $add23$i188 = $44 << 1;
 $add24$i189 = $45 << 1;
 $add25$i190 = $46 << 1;
 $add26$i191 = $47 << 1;
 $add27$i192 = $48 << 1;
 $add28$i193 = $49 << 1;
 $50 = HEAP32[$arraydecay10>>2]|0;
 $arrayidx1$i129 = ((($r)) + 84|0);
 $51 = HEAP32[$arrayidx1$i129>>2]|0;
 $arrayidx2$i130 = ((($r)) + 88|0);
 $52 = HEAP32[$arrayidx2$i130>>2]|0;
 $arrayidx3$i131 = ((($r)) + 92|0);
 $53 = HEAP32[$arrayidx3$i131>>2]|0;
 $arrayidx4$i132 = ((($r)) + 96|0);
 $54 = HEAP32[$arrayidx4$i132>>2]|0;
 $arrayidx5$i133 = ((($r)) + 100|0);
 $55 = HEAP32[$arrayidx5$i133>>2]|0;
 $arrayidx6$i134 = ((($r)) + 104|0);
 $56 = HEAP32[$arrayidx6$i134>>2]|0;
 $arrayidx7$i135 = ((($r)) + 108|0);
 $57 = HEAP32[$arrayidx7$i135>>2]|0;
 $arrayidx8$i136 = ((($r)) + 112|0);
 $58 = HEAP32[$arrayidx8$i136>>2]|0;
 $arrayidx9$i137 = ((($r)) + 116|0);
 $59 = HEAP32[$arrayidx9$i137>>2]|0;
 $60 = HEAP32[$arraydecay5>>2]|0;
 $61 = HEAP32[$arrayidx30$i231>>2]|0;
 $62 = HEAP32[$arrayidx31$i232>>2]|0;
 $63 = HEAP32[$arrayidx32$i233>>2]|0;
 $64 = HEAP32[$arrayidx33$i234>>2]|0;
 $65 = HEAP32[$arrayidx34$i235>>2]|0;
 $66 = HEAP32[$arrayidx35$i236>>2]|0;
 $67 = HEAP32[$arrayidx36$i237>>2]|0;
 $68 = HEAP32[$arrayidx37$i238>>2]|0;
 $69 = HEAP32[$arrayidx38$i239>>2]|0;
 $sub$i147 = (($50) - ($60))|0;
 $sub20$i148 = (($51) - ($61))|0;
 $sub21$i149 = (($52) - ($62))|0;
 $sub22$i150 = (($53) - ($63))|0;
 $sub23$i151 = (($54) - ($64))|0;
 $sub24$i152 = (($55) - ($65))|0;
 $sub25$i153 = (($56) - ($66))|0;
 $sub26$i154 = (($57) - ($67))|0;
 $sub27$i155 = (($58) - ($68))|0;
 $sub28$i156 = (($59) - ($69))|0;
 HEAP32[$r>>2] = $sub$i147;
 HEAP32[$arrayidx30$i>>2] = $sub20$i148;
 HEAP32[$arrayidx31$i>>2] = $sub21$i149;
 HEAP32[$arrayidx32$i>>2] = $sub22$i150;
 HEAP32[$arrayidx33$i>>2] = $sub23$i151;
 HEAP32[$arrayidx34$i>>2] = $sub24$i152;
 HEAP32[$arrayidx35$i>>2] = $sub25$i153;
 HEAP32[$arrayidx36$i>>2] = $sub26$i154;
 HEAP32[$arrayidx37$i>>2] = $sub27$i155;
 HEAP32[$arrayidx38$i>>2] = $sub28$i156;
 $add$i110 = (($60) + ($50))|0;
 $add20$i111 = (($61) + ($51))|0;
 $add21$i112 = (($62) + ($52))|0;
 $add22$i113 = (($63) + ($53))|0;
 $add23$i114 = (($64) + ($54))|0;
 $add24$i115 = (($65) + ($55))|0;
 $add25$i116 = (($66) + ($56))|0;
 $add26$i117 = (($67) + ($57))|0;
 $add27$i118 = (($68) + ($58))|0;
 $add28$i119 = (($69) + ($59))|0;
 HEAP32[$arraydecay5>>2] = $add$i110;
 HEAP32[$arrayidx30$i231>>2] = $add20$i111;
 HEAP32[$arrayidx31$i232>>2] = $add21$i112;
 HEAP32[$arrayidx32$i233>>2] = $add22$i113;
 HEAP32[$arrayidx33$i234>>2] = $add23$i114;
 HEAP32[$arrayidx34$i235>>2] = $add24$i115;
 HEAP32[$arrayidx35$i236>>2] = $add25$i116;
 HEAP32[$arrayidx36$i237>>2] = $add26$i117;
 HEAP32[$arrayidx37$i238>>2] = $add27$i118;
 HEAP32[$arrayidx38$i239>>2] = $add28$i119;
 $70 = HEAP32[$arraydecay19>>2]|0;
 $arrayidx11$i64 = ((($r)) + 124|0);
 $71 = HEAP32[$arrayidx11$i64>>2]|0;
 $arrayidx12$i65 = ((($r)) + 128|0);
 $72 = HEAP32[$arrayidx12$i65>>2]|0;
 $arrayidx13$i66 = ((($r)) + 132|0);
 $73 = HEAP32[$arrayidx13$i66>>2]|0;
 $arrayidx14$i67 = ((($r)) + 136|0);
 $74 = HEAP32[$arrayidx14$i67>>2]|0;
 $arrayidx15$i68 = ((($r)) + 140|0);
 $75 = HEAP32[$arrayidx15$i68>>2]|0;
 $arrayidx16$i69 = ((($r)) + 144|0);
 $76 = HEAP32[$arrayidx16$i69>>2]|0;
 $arrayidx17$i70 = ((($r)) + 148|0);
 $77 = HEAP32[$arrayidx17$i70>>2]|0;
 $arrayidx18$i71 = ((($r)) + 152|0);
 $78 = HEAP32[$arrayidx18$i71>>2]|0;
 $arrayidx19$i72 = ((($r)) + 156|0);
 $79 = HEAP32[$arrayidx19$i72>>2]|0;
 $add$i73 = (($70) + ($add$i184))|0;
 $add20$i74 = (($71) + ($add20$i185))|0;
 $add21$i75 = (($72) + ($add21$i186))|0;
 $add22$i76 = (($73) + ($add22$i187))|0;
 $add23$i77 = (($74) + ($add23$i188))|0;
 $add24$i78 = (($75) + ($add24$i189))|0;
 $add25$i79 = (($76) + ($add25$i190))|0;
 $add26$i80 = (($77) + ($add26$i191))|0;
 $add27$i81 = (($78) + ($add27$i192))|0;
 $add28$i82 = (($79) + ($add28$i193))|0;
 HEAP32[$arraydecay10>>2] = $add$i73;
 HEAP32[$arrayidx1$i129>>2] = $add20$i74;
 HEAP32[$arrayidx2$i130>>2] = $add21$i75;
 HEAP32[$arrayidx3$i131>>2] = $add22$i76;
 HEAP32[$arrayidx4$i132>>2] = $add23$i77;
 HEAP32[$arrayidx5$i133>>2] = $add24$i78;
 HEAP32[$arrayidx6$i134>>2] = $add25$i79;
 HEAP32[$arrayidx7$i135>>2] = $add26$i80;
 HEAP32[$arrayidx8$i136>>2] = $add27$i81;
 HEAP32[$arrayidx9$i137>>2] = $add28$i82;
 $sub$i = (($add$i184) - ($70))|0;
 $sub20$i = (($add20$i185) - ($71))|0;
 $sub21$i = (($add21$i186) - ($72))|0;
 $sub22$i = (($add22$i187) - ($73))|0;
 $sub23$i = (($add23$i188) - ($74))|0;
 $sub24$i = (($add24$i189) - ($75))|0;
 $sub25$i = (($add25$i190) - ($76))|0;
 $sub26$i = (($add26$i191) - ($77))|0;
 $sub27$i = (($add27$i192) - ($78))|0;
 $sub28$i = (($add28$i193) - ($79))|0;
 HEAP32[$arraydecay19>>2] = $sub$i;
 HEAP32[$arrayidx11$i64>>2] = $sub20$i;
 HEAP32[$arrayidx12$i65>>2] = $sub21$i;
 HEAP32[$arrayidx13$i66>>2] = $sub22$i;
 HEAP32[$arrayidx14$i67>>2] = $sub23$i;
 HEAP32[$arrayidx15$i68>>2] = $sub24$i;
 HEAP32[$arrayidx16$i69>>2] = $sub25$i;
 HEAP32[$arrayidx17$i70>>2] = $sub26$i;
 HEAP32[$arrayidx18$i71>>2] = $sub27$i;
 HEAP32[$arrayidx19$i72>>2] = $sub28$i;
 return;
}
function _fe_mul($h,$f,$g) {
 $h = $h|0;
 $f = $f|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx1 = 0, $arrayidx11 = 0;
 var $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx15 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx18 = 0, $arrayidx19 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx482 = 0, $arrayidx484 = 0, $arrayidx486 = 0, $arrayidx488 = 0, $arrayidx490 = 0, $arrayidx492 = 0, $arrayidx494 = 0, $arrayidx496 = 0, $arrayidx498 = 0;
 var $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $mul = 0, $mul20 = 0, $mul21 = 0, $mul22 = 0, $mul23 = 0, $mul24 = 0, $mul25 = 0, $mul26 = 0, $mul27 = 0, $mul28 = 0, $mul29 = 0, $mul30 = 0, $mul31 = 0, $mul32 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $arrayidx1 = ((($f)) + 4|0);
 $1 = HEAP32[$arrayidx1>>2]|0;
 $arrayidx2 = ((($f)) + 8|0);
 $2 = HEAP32[$arrayidx2>>2]|0;
 $arrayidx3 = ((($f)) + 12|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $arrayidx4 = ((($f)) + 16|0);
 $4 = HEAP32[$arrayidx4>>2]|0;
 $arrayidx5 = ((($f)) + 20|0);
 $5 = HEAP32[$arrayidx5>>2]|0;
 $arrayidx6 = ((($f)) + 24|0);
 $6 = HEAP32[$arrayidx6>>2]|0;
 $arrayidx7 = ((($f)) + 28|0);
 $7 = HEAP32[$arrayidx7>>2]|0;
 $arrayidx8 = ((($f)) + 32|0);
 $8 = HEAP32[$arrayidx8>>2]|0;
 $arrayidx9 = ((($f)) + 36|0);
 $9 = HEAP32[$arrayidx9>>2]|0;
 $10 = HEAP32[$g>>2]|0;
 $arrayidx11 = ((($g)) + 4|0);
 $11 = HEAP32[$arrayidx11>>2]|0;
 $arrayidx12 = ((($g)) + 8|0);
 $12 = HEAP32[$arrayidx12>>2]|0;
 $arrayidx13 = ((($g)) + 12|0);
 $13 = HEAP32[$arrayidx13>>2]|0;
 $arrayidx14 = ((($g)) + 16|0);
 $14 = HEAP32[$arrayidx14>>2]|0;
 $arrayidx15 = ((($g)) + 20|0);
 $15 = HEAP32[$arrayidx15>>2]|0;
 $arrayidx16 = ((($g)) + 24|0);
 $16 = HEAP32[$arrayidx16>>2]|0;
 $arrayidx17 = ((($g)) + 28|0);
 $17 = HEAP32[$arrayidx17>>2]|0;
 $arrayidx18 = ((($g)) + 32|0);
 $18 = HEAP32[$arrayidx18>>2]|0;
 $arrayidx19 = ((($g)) + 36|0);
 $19 = HEAP32[$arrayidx19>>2]|0;
 $mul = ($11*19)|0;
 $mul20 = ($12*19)|0;
 $mul21 = ($13*19)|0;
 $mul22 = ($14*19)|0;
 $mul23 = ($15*19)|0;
 $mul24 = ($16*19)|0;
 $mul25 = ($17*19)|0;
 $mul26 = ($18*19)|0;
 $mul27 = ($19*19)|0;
 $mul28 = $1 << 1;
 $mul29 = $3 << 1;
 $mul30 = $5 << 1;
 $mul31 = $7 << 1;
 $mul32 = $9 << 1;
 $20 = ($0|0)<(0);
 $21 = $20 << 31 >> 31;
 $22 = ($10|0)<(0);
 $23 = $22 << 31 >> 31;
 $24 = (___muldi3(($10|0),($23|0),($0|0),($21|0))|0);
 $25 = (getTempRet0() | 0);
 $26 = ($11|0)<(0);
 $27 = $26 << 31 >> 31;
 $28 = (___muldi3(($11|0),($27|0),($0|0),($21|0))|0);
 $29 = (getTempRet0() | 0);
 $30 = ($12|0)<(0);
 $31 = $30 << 31 >> 31;
 $32 = (___muldi3(($12|0),($31|0),($0|0),($21|0))|0);
 $33 = (getTempRet0() | 0);
 $34 = ($13|0)<(0);
 $35 = $34 << 31 >> 31;
 $36 = (___muldi3(($13|0),($35|0),($0|0),($21|0))|0);
 $37 = (getTempRet0() | 0);
 $38 = ($14|0)<(0);
 $39 = $38 << 31 >> 31;
 $40 = (___muldi3(($14|0),($39|0),($0|0),($21|0))|0);
 $41 = (getTempRet0() | 0);
 $42 = ($15|0)<(0);
 $43 = $42 << 31 >> 31;
 $44 = (___muldi3(($15|0),($43|0),($0|0),($21|0))|0);
 $45 = (getTempRet0() | 0);
 $46 = ($16|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (___muldi3(($16|0),($47|0),($0|0),($21|0))|0);
 $49 = (getTempRet0() | 0);
 $50 = ($17|0)<(0);
 $51 = $50 << 31 >> 31;
 $52 = (___muldi3(($17|0),($51|0),($0|0),($21|0))|0);
 $53 = (getTempRet0() | 0);
 $54 = ($18|0)<(0);
 $55 = $54 << 31 >> 31;
 $56 = (___muldi3(($18|0),($55|0),($0|0),($21|0))|0);
 $57 = (getTempRet0() | 0);
 $58 = ($19|0)<(0);
 $59 = $58 << 31 >> 31;
 $60 = (___muldi3(($19|0),($59|0),($0|0),($21|0))|0);
 $61 = (getTempRet0() | 0);
 $62 = ($1|0)<(0);
 $63 = $62 << 31 >> 31;
 $64 = (___muldi3(($10|0),($23|0),($1|0),($63|0))|0);
 $65 = (getTempRet0() | 0);
 $66 = ($mul28|0)<(0);
 $67 = $66 << 31 >> 31;
 $68 = (___muldi3(($11|0),($27|0),($mul28|0),($67|0))|0);
 $69 = (getTempRet0() | 0);
 $70 = (___muldi3(($12|0),($31|0),($1|0),($63|0))|0);
 $71 = (getTempRet0() | 0);
 $72 = (___muldi3(($13|0),($35|0),($mul28|0),($67|0))|0);
 $73 = (getTempRet0() | 0);
 $74 = (___muldi3(($14|0),($39|0),($1|0),($63|0))|0);
 $75 = (getTempRet0() | 0);
 $76 = (___muldi3(($15|0),($43|0),($mul28|0),($67|0))|0);
 $77 = (getTempRet0() | 0);
 $78 = (___muldi3(($16|0),($47|0),($1|0),($63|0))|0);
 $79 = (getTempRet0() | 0);
 $80 = (___muldi3(($17|0),($51|0),($mul28|0),($67|0))|0);
 $81 = (getTempRet0() | 0);
 $82 = (___muldi3(($18|0),($55|0),($1|0),($63|0))|0);
 $83 = (getTempRet0() | 0);
 $84 = ($mul27|0)<(0);
 $85 = $84 << 31 >> 31;
 $86 = (___muldi3(($mul27|0),($85|0),($mul28|0),($67|0))|0);
 $87 = (getTempRet0() | 0);
 $88 = ($2|0)<(0);
 $89 = $88 << 31 >> 31;
 $90 = (___muldi3(($10|0),($23|0),($2|0),($89|0))|0);
 $91 = (getTempRet0() | 0);
 $92 = (___muldi3(($11|0),($27|0),($2|0),($89|0))|0);
 $93 = (getTempRet0() | 0);
 $94 = (___muldi3(($12|0),($31|0),($2|0),($89|0))|0);
 $95 = (getTempRet0() | 0);
 $96 = (___muldi3(($13|0),($35|0),($2|0),($89|0))|0);
 $97 = (getTempRet0() | 0);
 $98 = (___muldi3(($14|0),($39|0),($2|0),($89|0))|0);
 $99 = (getTempRet0() | 0);
 $100 = (___muldi3(($15|0),($43|0),($2|0),($89|0))|0);
 $101 = (getTempRet0() | 0);
 $102 = (___muldi3(($16|0),($47|0),($2|0),($89|0))|0);
 $103 = (getTempRet0() | 0);
 $104 = (___muldi3(($17|0),($51|0),($2|0),($89|0))|0);
 $105 = (getTempRet0() | 0);
 $106 = ($mul26|0)<(0);
 $107 = $106 << 31 >> 31;
 $108 = (___muldi3(($mul26|0),($107|0),($2|0),($89|0))|0);
 $109 = (getTempRet0() | 0);
 $110 = (___muldi3(($mul27|0),($85|0),($2|0),($89|0))|0);
 $111 = (getTempRet0() | 0);
 $112 = ($3|0)<(0);
 $113 = $112 << 31 >> 31;
 $114 = (___muldi3(($10|0),($23|0),($3|0),($113|0))|0);
 $115 = (getTempRet0() | 0);
 $116 = ($mul29|0)<(0);
 $117 = $116 << 31 >> 31;
 $118 = (___muldi3(($11|0),($27|0),($mul29|0),($117|0))|0);
 $119 = (getTempRet0() | 0);
 $120 = (___muldi3(($12|0),($31|0),($3|0),($113|0))|0);
 $121 = (getTempRet0() | 0);
 $122 = (___muldi3(($13|0),($35|0),($mul29|0),($117|0))|0);
 $123 = (getTempRet0() | 0);
 $124 = (___muldi3(($14|0),($39|0),($3|0),($113|0))|0);
 $125 = (getTempRet0() | 0);
 $126 = (___muldi3(($15|0),($43|0),($mul29|0),($117|0))|0);
 $127 = (getTempRet0() | 0);
 $128 = (___muldi3(($16|0),($47|0),($3|0),($113|0))|0);
 $129 = (getTempRet0() | 0);
 $130 = ($mul25|0)<(0);
 $131 = $130 << 31 >> 31;
 $132 = (___muldi3(($mul25|0),($131|0),($mul29|0),($117|0))|0);
 $133 = (getTempRet0() | 0);
 $134 = (___muldi3(($mul26|0),($107|0),($3|0),($113|0))|0);
 $135 = (getTempRet0() | 0);
 $136 = (___muldi3(($mul27|0),($85|0),($mul29|0),($117|0))|0);
 $137 = (getTempRet0() | 0);
 $138 = ($4|0)<(0);
 $139 = $138 << 31 >> 31;
 $140 = (___muldi3(($10|0),($23|0),($4|0),($139|0))|0);
 $141 = (getTempRet0() | 0);
 $142 = (___muldi3(($11|0),($27|0),($4|0),($139|0))|0);
 $143 = (getTempRet0() | 0);
 $144 = (___muldi3(($12|0),($31|0),($4|0),($139|0))|0);
 $145 = (getTempRet0() | 0);
 $146 = (___muldi3(($13|0),($35|0),($4|0),($139|0))|0);
 $147 = (getTempRet0() | 0);
 $148 = (___muldi3(($14|0),($39|0),($4|0),($139|0))|0);
 $149 = (getTempRet0() | 0);
 $150 = (___muldi3(($15|0),($43|0),($4|0),($139|0))|0);
 $151 = (getTempRet0() | 0);
 $152 = ($mul24|0)<(0);
 $153 = $152 << 31 >> 31;
 $154 = (___muldi3(($mul24|0),($153|0),($4|0),($139|0))|0);
 $155 = (getTempRet0() | 0);
 $156 = (___muldi3(($mul25|0),($131|0),($4|0),($139|0))|0);
 $157 = (getTempRet0() | 0);
 $158 = (___muldi3(($mul26|0),($107|0),($4|0),($139|0))|0);
 $159 = (getTempRet0() | 0);
 $160 = (___muldi3(($mul27|0),($85|0),($4|0),($139|0))|0);
 $161 = (getTempRet0() | 0);
 $162 = ($5|0)<(0);
 $163 = $162 << 31 >> 31;
 $164 = (___muldi3(($10|0),($23|0),($5|0),($163|0))|0);
 $165 = (getTempRet0() | 0);
 $166 = ($mul30|0)<(0);
 $167 = $166 << 31 >> 31;
 $168 = (___muldi3(($11|0),($27|0),($mul30|0),($167|0))|0);
 $169 = (getTempRet0() | 0);
 $170 = (___muldi3(($12|0),($31|0),($5|0),($163|0))|0);
 $171 = (getTempRet0() | 0);
 $172 = (___muldi3(($13|0),($35|0),($mul30|0),($167|0))|0);
 $173 = (getTempRet0() | 0);
 $174 = (___muldi3(($14|0),($39|0),($5|0),($163|0))|0);
 $175 = (getTempRet0() | 0);
 $176 = ($mul23|0)<(0);
 $177 = $176 << 31 >> 31;
 $178 = (___muldi3(($mul23|0),($177|0),($mul30|0),($167|0))|0);
 $179 = (getTempRet0() | 0);
 $180 = (___muldi3(($mul24|0),($153|0),($5|0),($163|0))|0);
 $181 = (getTempRet0() | 0);
 $182 = (___muldi3(($mul25|0),($131|0),($mul30|0),($167|0))|0);
 $183 = (getTempRet0() | 0);
 $184 = (___muldi3(($mul26|0),($107|0),($5|0),($163|0))|0);
 $185 = (getTempRet0() | 0);
 $186 = (___muldi3(($mul27|0),($85|0),($mul30|0),($167|0))|0);
 $187 = (getTempRet0() | 0);
 $188 = ($6|0)<(0);
 $189 = $188 << 31 >> 31;
 $190 = (___muldi3(($10|0),($23|0),($6|0),($189|0))|0);
 $191 = (getTempRet0() | 0);
 $192 = (___muldi3(($11|0),($27|0),($6|0),($189|0))|0);
 $193 = (getTempRet0() | 0);
 $194 = (___muldi3(($12|0),($31|0),($6|0),($189|0))|0);
 $195 = (getTempRet0() | 0);
 $196 = (___muldi3(($13|0),($35|0),($6|0),($189|0))|0);
 $197 = (getTempRet0() | 0);
 $198 = ($mul22|0)<(0);
 $199 = $198 << 31 >> 31;
 $200 = (___muldi3(($mul22|0),($199|0),($6|0),($189|0))|0);
 $201 = (getTempRet0() | 0);
 $202 = (___muldi3(($mul23|0),($177|0),($6|0),($189|0))|0);
 $203 = (getTempRet0() | 0);
 $204 = (___muldi3(($mul24|0),($153|0),($6|0),($189|0))|0);
 $205 = (getTempRet0() | 0);
 $206 = (___muldi3(($mul25|0),($131|0),($6|0),($189|0))|0);
 $207 = (getTempRet0() | 0);
 $208 = (___muldi3(($mul26|0),($107|0),($6|0),($189|0))|0);
 $209 = (getTempRet0() | 0);
 $210 = (___muldi3(($mul27|0),($85|0),($6|0),($189|0))|0);
 $211 = (getTempRet0() | 0);
 $212 = ($7|0)<(0);
 $213 = $212 << 31 >> 31;
 $214 = (___muldi3(($10|0),($23|0),($7|0),($213|0))|0);
 $215 = (getTempRet0() | 0);
 $216 = ($mul31|0)<(0);
 $217 = $216 << 31 >> 31;
 $218 = (___muldi3(($11|0),($27|0),($mul31|0),($217|0))|0);
 $219 = (getTempRet0() | 0);
 $220 = (___muldi3(($12|0),($31|0),($7|0),($213|0))|0);
 $221 = (getTempRet0() | 0);
 $222 = ($mul21|0)<(0);
 $223 = $222 << 31 >> 31;
 $224 = (___muldi3(($mul21|0),($223|0),($mul31|0),($217|0))|0);
 $225 = (getTempRet0() | 0);
 $226 = (___muldi3(($mul22|0),($199|0),($7|0),($213|0))|0);
 $227 = (getTempRet0() | 0);
 $228 = (___muldi3(($mul23|0),($177|0),($mul31|0),($217|0))|0);
 $229 = (getTempRet0() | 0);
 $230 = (___muldi3(($mul24|0),($153|0),($7|0),($213|0))|0);
 $231 = (getTempRet0() | 0);
 $232 = (___muldi3(($mul25|0),($131|0),($mul31|0),($217|0))|0);
 $233 = (getTempRet0() | 0);
 $234 = (___muldi3(($mul26|0),($107|0),($7|0),($213|0))|0);
 $235 = (getTempRet0() | 0);
 $236 = (___muldi3(($mul27|0),($85|0),($mul31|0),($217|0))|0);
 $237 = (getTempRet0() | 0);
 $238 = ($8|0)<(0);
 $239 = $238 << 31 >> 31;
 $240 = (___muldi3(($10|0),($23|0),($8|0),($239|0))|0);
 $241 = (getTempRet0() | 0);
 $242 = (___muldi3(($11|0),($27|0),($8|0),($239|0))|0);
 $243 = (getTempRet0() | 0);
 $244 = ($mul20|0)<(0);
 $245 = $244 << 31 >> 31;
 $246 = (___muldi3(($mul20|0),($245|0),($8|0),($239|0))|0);
 $247 = (getTempRet0() | 0);
 $248 = (___muldi3(($mul21|0),($223|0),($8|0),($239|0))|0);
 $249 = (getTempRet0() | 0);
 $250 = (___muldi3(($mul22|0),($199|0),($8|0),($239|0))|0);
 $251 = (getTempRet0() | 0);
 $252 = (___muldi3(($mul23|0),($177|0),($8|0),($239|0))|0);
 $253 = (getTempRet0() | 0);
 $254 = (___muldi3(($mul24|0),($153|0),($8|0),($239|0))|0);
 $255 = (getTempRet0() | 0);
 $256 = (___muldi3(($mul25|0),($131|0),($8|0),($239|0))|0);
 $257 = (getTempRet0() | 0);
 $258 = (___muldi3(($mul26|0),($107|0),($8|0),($239|0))|0);
 $259 = (getTempRet0() | 0);
 $260 = (___muldi3(($mul27|0),($85|0),($8|0),($239|0))|0);
 $261 = (getTempRet0() | 0);
 $262 = ($9|0)<(0);
 $263 = $262 << 31 >> 31;
 $264 = (___muldi3(($10|0),($23|0),($9|0),($263|0))|0);
 $265 = (getTempRet0() | 0);
 $266 = ($mul32|0)<(0);
 $267 = $266 << 31 >> 31;
 $268 = ($mul|0)<(0);
 $269 = $268 << 31 >> 31;
 $270 = (___muldi3(($mul|0),($269|0),($mul32|0),($267|0))|0);
 $271 = (getTempRet0() | 0);
 $272 = (___muldi3(($mul20|0),($245|0),($9|0),($263|0))|0);
 $273 = (getTempRet0() | 0);
 $274 = (___muldi3(($mul21|0),($223|0),($mul32|0),($267|0))|0);
 $275 = (getTempRet0() | 0);
 $276 = (___muldi3(($mul22|0),($199|0),($9|0),($263|0))|0);
 $277 = (getTempRet0() | 0);
 $278 = (___muldi3(($mul23|0),($177|0),($mul32|0),($267|0))|0);
 $279 = (getTempRet0() | 0);
 $280 = (___muldi3(($mul24|0),($153|0),($9|0),($263|0))|0);
 $281 = (getTempRet0() | 0);
 $282 = (___muldi3(($mul25|0),($131|0),($mul32|0),($267|0))|0);
 $283 = (getTempRet0() | 0);
 $284 = (___muldi3(($mul26|0),($107|0),($9|0),($263|0))|0);
 $285 = (getTempRet0() | 0);
 $286 = (___muldi3(($mul27|0),($85|0),($mul32|0),($267|0))|0);
 $287 = (getTempRet0() | 0);
 $288 = (_i64Add(($270|0),($271|0),($24|0),($25|0))|0);
 $289 = (getTempRet0() | 0);
 $290 = (_i64Add(($288|0),($289|0),($246|0),($247|0))|0);
 $291 = (getTempRet0() | 0);
 $292 = (_i64Add(($290|0),($291|0),($224|0),($225|0))|0);
 $293 = (getTempRet0() | 0);
 $294 = (_i64Add(($292|0),($293|0),($200|0),($201|0))|0);
 $295 = (getTempRet0() | 0);
 $296 = (_i64Add(($294|0),($295|0),($178|0),($179|0))|0);
 $297 = (getTempRet0() | 0);
 $298 = (_i64Add(($296|0),($297|0),($154|0),($155|0))|0);
 $299 = (getTempRet0() | 0);
 $300 = (_i64Add(($298|0),($299|0),($132|0),($133|0))|0);
 $301 = (getTempRet0() | 0);
 $302 = (_i64Add(($300|0),($301|0),($108|0),($109|0))|0);
 $303 = (getTempRet0() | 0);
 $304 = (_i64Add(($302|0),($303|0),($86|0),($87|0))|0);
 $305 = (getTempRet0() | 0);
 $306 = (_i64Add(($28|0),($29|0),($64|0),($65|0))|0);
 $307 = (getTempRet0() | 0);
 $308 = (_i64Add(($118|0),($119|0),($140|0),($141|0))|0);
 $309 = (getTempRet0() | 0);
 $310 = (_i64Add(($308|0),($309|0),($94|0),($95|0))|0);
 $311 = (getTempRet0() | 0);
 $312 = (_i64Add(($310|0),($311|0),($72|0),($73|0))|0);
 $313 = (getTempRet0() | 0);
 $314 = (_i64Add(($312|0),($313|0),($40|0),($41|0))|0);
 $315 = (getTempRet0() | 0);
 $316 = (_i64Add(($314|0),($315|0),($278|0),($279|0))|0);
 $317 = (getTempRet0() | 0);
 $318 = (_i64Add(($316|0),($317|0),($254|0),($255|0))|0);
 $319 = (getTempRet0() | 0);
 $320 = (_i64Add(($318|0),($319|0),($232|0),($233|0))|0);
 $321 = (getTempRet0() | 0);
 $322 = (_i64Add(($320|0),($321|0),($208|0),($209|0))|0);
 $323 = (getTempRet0() | 0);
 $324 = (_i64Add(($322|0),($323|0),($186|0),($187|0))|0);
 $325 = (getTempRet0() | 0);
 $326 = (_i64Add(($304|0),($305|0),33554432,0)|0);
 $327 = (getTempRet0() | 0);
 $328 = (_bitshift64Ashr(($326|0),($327|0),26)|0);
 $329 = (getTempRet0() | 0);
 $330 = (_i64Add(($306|0),($307|0),($272|0),($273|0))|0);
 $331 = (getTempRet0() | 0);
 $332 = (_i64Add(($330|0),($331|0),($248|0),($249|0))|0);
 $333 = (getTempRet0() | 0);
 $334 = (_i64Add(($332|0),($333|0),($226|0),($227|0))|0);
 $335 = (getTempRet0() | 0);
 $336 = (_i64Add(($334|0),($335|0),($202|0),($203|0))|0);
 $337 = (getTempRet0() | 0);
 $338 = (_i64Add(($336|0),($337|0),($180|0),($181|0))|0);
 $339 = (getTempRet0() | 0);
 $340 = (_i64Add(($338|0),($339|0),($156|0),($157|0))|0);
 $341 = (getTempRet0() | 0);
 $342 = (_i64Add(($340|0),($341|0),($134|0),($135|0))|0);
 $343 = (getTempRet0() | 0);
 $344 = (_i64Add(($342|0),($343|0),($110|0),($111|0))|0);
 $345 = (getTempRet0() | 0);
 $346 = (_i64Add(($344|0),($345|0),($328|0),($329|0))|0);
 $347 = (getTempRet0() | 0);
 $348 = $326 & -67108864;
 $349 = (_i64Subtract(($304|0),($305|0),($348|0),($327|0))|0);
 $350 = (getTempRet0() | 0);
 $351 = (_i64Add(($324|0),($325|0),33554432,0)|0);
 $352 = (getTempRet0() | 0);
 $353 = (_bitshift64Ashr(($351|0),($352|0),26)|0);
 $354 = (getTempRet0() | 0);
 $355 = (_i64Add(($142|0),($143|0),($164|0),($165|0))|0);
 $356 = (getTempRet0() | 0);
 $357 = (_i64Add(($355|0),($356|0),($120|0),($121|0))|0);
 $358 = (getTempRet0() | 0);
 $359 = (_i64Add(($357|0),($358|0),($96|0),($97|0))|0);
 $360 = (getTempRet0() | 0);
 $361 = (_i64Add(($359|0),($360|0),($74|0),($75|0))|0);
 $362 = (getTempRet0() | 0);
 $363 = (_i64Add(($361|0),($362|0),($44|0),($45|0))|0);
 $364 = (getTempRet0() | 0);
 $365 = (_i64Add(($363|0),($364|0),($280|0),($281|0))|0);
 $366 = (getTempRet0() | 0);
 $367 = (_i64Add(($365|0),($366|0),($256|0),($257|0))|0);
 $368 = (getTempRet0() | 0);
 $369 = (_i64Add(($367|0),($368|0),($234|0),($235|0))|0);
 $370 = (getTempRet0() | 0);
 $371 = (_i64Add(($369|0),($370|0),($210|0),($211|0))|0);
 $372 = (getTempRet0() | 0);
 $373 = (_i64Add(($371|0),($372|0),($353|0),($354|0))|0);
 $374 = (getTempRet0() | 0);
 $375 = $351 & -67108864;
 $376 = (_i64Subtract(($324|0),($325|0),($375|0),($352|0))|0);
 $377 = (getTempRet0() | 0);
 $378 = (_i64Add(($346|0),($347|0),16777216,0)|0);
 $379 = (getTempRet0() | 0);
 $380 = (_bitshift64Ashr(($378|0),($379|0),25)|0);
 $381 = (getTempRet0() | 0);
 $382 = (_i64Add(($68|0),($69|0),($90|0),($91|0))|0);
 $383 = (getTempRet0() | 0);
 $384 = (_i64Add(($382|0),($383|0),($32|0),($33|0))|0);
 $385 = (getTempRet0() | 0);
 $386 = (_i64Add(($384|0),($385|0),($274|0),($275|0))|0);
 $387 = (getTempRet0() | 0);
 $388 = (_i64Add(($386|0),($387|0),($250|0),($251|0))|0);
 $389 = (getTempRet0() | 0);
 $390 = (_i64Add(($388|0),($389|0),($228|0),($229|0))|0);
 $391 = (getTempRet0() | 0);
 $392 = (_i64Add(($390|0),($391|0),($204|0),($205|0))|0);
 $393 = (getTempRet0() | 0);
 $394 = (_i64Add(($392|0),($393|0),($182|0),($183|0))|0);
 $395 = (getTempRet0() | 0);
 $396 = (_i64Add(($394|0),($395|0),($158|0),($159|0))|0);
 $397 = (getTempRet0() | 0);
 $398 = (_i64Add(($396|0),($397|0),($136|0),($137|0))|0);
 $399 = (getTempRet0() | 0);
 $400 = (_i64Add(($398|0),($399|0),($380|0),($381|0))|0);
 $401 = (getTempRet0() | 0);
 $402 = $378 & -33554432;
 $403 = (_i64Subtract(($346|0),($347|0),($402|0),0)|0);
 $404 = (getTempRet0() | 0);
 $405 = (_i64Add(($373|0),($374|0),16777216,0)|0);
 $406 = (getTempRet0() | 0);
 $407 = (_bitshift64Ashr(($405|0),($406|0),25)|0);
 $408 = (getTempRet0() | 0);
 $409 = (_i64Add(($168|0),($169|0),($190|0),($191|0))|0);
 $410 = (getTempRet0() | 0);
 $411 = (_i64Add(($409|0),($410|0),($144|0),($145|0))|0);
 $412 = (getTempRet0() | 0);
 $413 = (_i64Add(($411|0),($412|0),($122|0),($123|0))|0);
 $414 = (getTempRet0() | 0);
 $415 = (_i64Add(($413|0),($414|0),($98|0),($99|0))|0);
 $416 = (getTempRet0() | 0);
 $417 = (_i64Add(($415|0),($416|0),($76|0),($77|0))|0);
 $418 = (getTempRet0() | 0);
 $419 = (_i64Add(($417|0),($418|0),($48|0),($49|0))|0);
 $420 = (getTempRet0() | 0);
 $421 = (_i64Add(($419|0),($420|0),($282|0),($283|0))|0);
 $422 = (getTempRet0() | 0);
 $423 = (_i64Add(($421|0),($422|0),($258|0),($259|0))|0);
 $424 = (getTempRet0() | 0);
 $425 = (_i64Add(($423|0),($424|0),($236|0),($237|0))|0);
 $426 = (getTempRet0() | 0);
 $427 = (_i64Add(($425|0),($426|0),($407|0),($408|0))|0);
 $428 = (getTempRet0() | 0);
 $429 = $405 & -33554432;
 $430 = (_i64Subtract(($373|0),($374|0),($429|0),0)|0);
 $431 = (getTempRet0() | 0);
 $432 = (_i64Add(($400|0),($401|0),33554432,0)|0);
 $433 = (getTempRet0() | 0);
 $434 = (_bitshift64Ashr(($432|0),($433|0),26)|0);
 $435 = (getTempRet0() | 0);
 $436 = (_i64Add(($92|0),($93|0),($114|0),($115|0))|0);
 $437 = (getTempRet0() | 0);
 $438 = (_i64Add(($436|0),($437|0),($70|0),($71|0))|0);
 $439 = (getTempRet0() | 0);
 $440 = (_i64Add(($438|0),($439|0),($36|0),($37|0))|0);
 $441 = (getTempRet0() | 0);
 $442 = (_i64Add(($440|0),($441|0),($276|0),($277|0))|0);
 $443 = (getTempRet0() | 0);
 $444 = (_i64Add(($442|0),($443|0),($252|0),($253|0))|0);
 $445 = (getTempRet0() | 0);
 $446 = (_i64Add(($444|0),($445|0),($230|0),($231|0))|0);
 $447 = (getTempRet0() | 0);
 $448 = (_i64Add(($446|0),($447|0),($206|0),($207|0))|0);
 $449 = (getTempRet0() | 0);
 $450 = (_i64Add(($448|0),($449|0),($184|0),($185|0))|0);
 $451 = (getTempRet0() | 0);
 $452 = (_i64Add(($450|0),($451|0),($160|0),($161|0))|0);
 $453 = (getTempRet0() | 0);
 $454 = (_i64Add(($452|0),($453|0),($434|0),($435|0))|0);
 $455 = (getTempRet0() | 0);
 $456 = $432 & -67108864;
 $457 = (_i64Subtract(($400|0),($401|0),($456|0),0)|0);
 $458 = (getTempRet0() | 0);
 $459 = (_i64Add(($427|0),($428|0),33554432,0)|0);
 $460 = (getTempRet0() | 0);
 $461 = (_bitshift64Ashr(($459|0),($460|0),26)|0);
 $462 = (getTempRet0() | 0);
 $463 = (_i64Add(($192|0),($193|0),($214|0),($215|0))|0);
 $464 = (getTempRet0() | 0);
 $465 = (_i64Add(($463|0),($464|0),($170|0),($171|0))|0);
 $466 = (getTempRet0() | 0);
 $467 = (_i64Add(($465|0),($466|0),($146|0),($147|0))|0);
 $468 = (getTempRet0() | 0);
 $469 = (_i64Add(($467|0),($468|0),($124|0),($125|0))|0);
 $470 = (getTempRet0() | 0);
 $471 = (_i64Add(($469|0),($470|0),($100|0),($101|0))|0);
 $472 = (getTempRet0() | 0);
 $473 = (_i64Add(($471|0),($472|0),($78|0),($79|0))|0);
 $474 = (getTempRet0() | 0);
 $475 = (_i64Add(($473|0),($474|0),($52|0),($53|0))|0);
 $476 = (getTempRet0() | 0);
 $477 = (_i64Add(($475|0),($476|0),($284|0),($285|0))|0);
 $478 = (getTempRet0() | 0);
 $479 = (_i64Add(($477|0),($478|0),($260|0),($261|0))|0);
 $480 = (getTempRet0() | 0);
 $481 = (_i64Add(($479|0),($480|0),($461|0),($462|0))|0);
 $482 = (getTempRet0() | 0);
 $483 = $459 & -67108864;
 $484 = (_i64Subtract(($427|0),($428|0),($483|0),0)|0);
 $485 = (getTempRet0() | 0);
 $486 = (_i64Add(($454|0),($455|0),16777216,0)|0);
 $487 = (getTempRet0() | 0);
 $488 = (_bitshift64Ashr(($486|0),($487|0),25)|0);
 $489 = (getTempRet0() | 0);
 $490 = (_i64Add(($488|0),($489|0),($376|0),($377|0))|0);
 $491 = (getTempRet0() | 0);
 $492 = $486 & -33554432;
 $493 = (_i64Subtract(($454|0),($455|0),($492|0),0)|0);
 $494 = (getTempRet0() | 0);
 $495 = (_i64Add(($481|0),($482|0),16777216,0)|0);
 $496 = (getTempRet0() | 0);
 $497 = (_bitshift64Ashr(($495|0),($496|0),25)|0);
 $498 = (getTempRet0() | 0);
 $499 = (_i64Add(($218|0),($219|0),($240|0),($241|0))|0);
 $500 = (getTempRet0() | 0);
 $501 = (_i64Add(($499|0),($500|0),($194|0),($195|0))|0);
 $502 = (getTempRet0() | 0);
 $503 = (_i64Add(($501|0),($502|0),($172|0),($173|0))|0);
 $504 = (getTempRet0() | 0);
 $505 = (_i64Add(($503|0),($504|0),($148|0),($149|0))|0);
 $506 = (getTempRet0() | 0);
 $507 = (_i64Add(($505|0),($506|0),($126|0),($127|0))|0);
 $508 = (getTempRet0() | 0);
 $509 = (_i64Add(($507|0),($508|0),($102|0),($103|0))|0);
 $510 = (getTempRet0() | 0);
 $511 = (_i64Add(($509|0),($510|0),($80|0),($81|0))|0);
 $512 = (getTempRet0() | 0);
 $513 = (_i64Add(($511|0),($512|0),($56|0),($57|0))|0);
 $514 = (getTempRet0() | 0);
 $515 = (_i64Add(($513|0),($514|0),($286|0),($287|0))|0);
 $516 = (getTempRet0() | 0);
 $517 = (_i64Add(($515|0),($516|0),($497|0),($498|0))|0);
 $518 = (getTempRet0() | 0);
 $519 = $495 & -33554432;
 $520 = (_i64Subtract(($481|0),($482|0),($519|0),0)|0);
 $521 = (getTempRet0() | 0);
 $522 = (_i64Add(($490|0),($491|0),33554432,0)|0);
 $523 = (getTempRet0() | 0);
 $524 = (_bitshift64Lshr(($522|0),($523|0),26)|0);
 $525 = (getTempRet0() | 0);
 $526 = (_i64Add(($430|0),($431|0),($524|0),($525|0))|0);
 $527 = (getTempRet0() | 0);
 $528 = $522 & -67108864;
 $529 = (_i64Subtract(($490|0),($491|0),($528|0),0)|0);
 $530 = (getTempRet0() | 0);
 $531 = (_i64Add(($517|0),($518|0),33554432,0)|0);
 $532 = (getTempRet0() | 0);
 $533 = (_bitshift64Ashr(($531|0),($532|0),26)|0);
 $534 = (getTempRet0() | 0);
 $535 = (_i64Add(($242|0),($243|0),($264|0),($265|0))|0);
 $536 = (getTempRet0() | 0);
 $537 = (_i64Add(($535|0),($536|0),($220|0),($221|0))|0);
 $538 = (getTempRet0() | 0);
 $539 = (_i64Add(($537|0),($538|0),($196|0),($197|0))|0);
 $540 = (getTempRet0() | 0);
 $541 = (_i64Add(($539|0),($540|0),($174|0),($175|0))|0);
 $542 = (getTempRet0() | 0);
 $543 = (_i64Add(($541|0),($542|0),($150|0),($151|0))|0);
 $544 = (getTempRet0() | 0);
 $545 = (_i64Add(($543|0),($544|0),($128|0),($129|0))|0);
 $546 = (getTempRet0() | 0);
 $547 = (_i64Add(($545|0),($546|0),($104|0),($105|0))|0);
 $548 = (getTempRet0() | 0);
 $549 = (_i64Add(($547|0),($548|0),($82|0),($83|0))|0);
 $550 = (getTempRet0() | 0);
 $551 = (_i64Add(($549|0),($550|0),($60|0),($61|0))|0);
 $552 = (getTempRet0() | 0);
 $553 = (_i64Add(($551|0),($552|0),($533|0),($534|0))|0);
 $554 = (getTempRet0() | 0);
 $555 = $531 & -67108864;
 $556 = (_i64Subtract(($517|0),($518|0),($555|0),0)|0);
 $557 = (getTempRet0() | 0);
 $558 = (_i64Add(($553|0),($554|0),16777216,0)|0);
 $559 = (getTempRet0() | 0);
 $560 = (_bitshift64Ashr(($558|0),($559|0),25)|0);
 $561 = (getTempRet0() | 0);
 $562 = (___muldi3(($560|0),($561|0),19,0)|0);
 $563 = (getTempRet0() | 0);
 $564 = (_i64Add(($562|0),($563|0),($349|0),($350|0))|0);
 $565 = (getTempRet0() | 0);
 $566 = $558 & -33554432;
 $567 = (_i64Subtract(($553|0),($554|0),($566|0),0)|0);
 $568 = (getTempRet0() | 0);
 $569 = (_i64Add(($564|0),($565|0),33554432,0)|0);
 $570 = (getTempRet0() | 0);
 $571 = (_bitshift64Lshr(($569|0),($570|0),26)|0);
 $572 = (getTempRet0() | 0);
 $573 = (_i64Add(($403|0),($404|0),($571|0),($572|0))|0);
 $574 = (getTempRet0() | 0);
 $575 = $569 & -67108864;
 $576 = (_i64Subtract(($564|0),($565|0),($575|0),0)|0);
 $577 = (getTempRet0() | 0);
 HEAP32[$h>>2] = $576;
 $arrayidx482 = ((($h)) + 4|0);
 HEAP32[$arrayidx482>>2] = $573;
 $arrayidx484 = ((($h)) + 8|0);
 HEAP32[$arrayidx484>>2] = $457;
 $arrayidx486 = ((($h)) + 12|0);
 HEAP32[$arrayidx486>>2] = $493;
 $arrayidx488 = ((($h)) + 16|0);
 HEAP32[$arrayidx488>>2] = $529;
 $arrayidx490 = ((($h)) + 20|0);
 HEAP32[$arrayidx490>>2] = $526;
 $arrayidx492 = ((($h)) + 24|0);
 HEAP32[$arrayidx492>>2] = $484;
 $arrayidx494 = ((($h)) + 28|0);
 HEAP32[$arrayidx494>>2] = $520;
 $arrayidx496 = ((($h)) + 32|0);
 HEAP32[$arrayidx496>>2] = $556;
 $arrayidx498 = ((($h)) + 36|0);
 HEAP32[$arrayidx498>>2] = $567;
 return;
}
function _ge_dsm_precomp($r,$s) {
 $r = $r|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arraydecay15$i = 0, $arraydecay15$i23 = 0, $arraydecay3$i = 0, $arraydecay3$i$i = 0, $arraydecay4$i = 0, $arraydecay4$i19 = 0, $arraydecay5$i$i = 0, $arraydecay6$i = 0, $arraydecay6$i$i = 0, $arraydecay7$i = 0;
 var $arraydecay8$i$i = 0, $arraydecay9$i = 0, $arraydecay9$i22 = 0, $arrayidx1$i$i$i = 0, $arrayidx1$i23$i$i = 0, $arrayidx1$i5$i$i = 0, $arrayidx10 = 0, $arrayidx11$i$i$i = 0, $arrayidx11$i14$i$i = 0, $arrayidx11$i32$i$i = 0, $arrayidx12 = 0, $arrayidx12$i$i$i = 0, $arrayidx12$i15$i$i = 0, $arrayidx12$i33$i$i = 0, $arrayidx13$i$i$i = 0, $arrayidx13$i16$i$i = 0, $arrayidx13$i34$i$i = 0, $arrayidx14 = 0, $arrayidx14$i$i$i = 0, $arrayidx14$i17$i$i = 0;
 var $arrayidx14$i35$i$i = 0, $arrayidx15$i$i$i = 0, $arrayidx15$i18$i$i = 0, $arrayidx15$i36$i$i = 0, $arrayidx16$i$i$i = 0, $arrayidx16$i19$i$i = 0, $arrayidx16$i37$i$i = 0, $arrayidx17$i$i$i = 0, $arrayidx17$i20$i$i = 0, $arrayidx17$i38$i$i = 0, $arrayidx18$i$i$i = 0, $arrayidx18$i21$i$i = 0, $arrayidx18$i39$i$i = 0, $arrayidx19$i$i$i = 0, $arrayidx19$i22$i$i = 0, $arrayidx19$i40$i$i = 0, $arrayidx2 = 0, $arrayidx2$i$i$i = 0, $arrayidx2$i24$i$i = 0, $arrayidx2$i6$i$i = 0;
 var $arrayidx3$i$i$i = 0, $arrayidx3$i25$i$i = 0, $arrayidx3$i7$i$i = 0, $arrayidx4 = 0, $arrayidx4$i$i$i = 0, $arrayidx4$i26$i$i = 0, $arrayidx4$i8$i$i = 0, $arrayidx5$i$i$i = 0, $arrayidx5$i27$i$i = 0, $arrayidx5$i9$i$i = 0, $arrayidx6 = 0, $arrayidx6$i$i$i = 0, $arrayidx6$i10$i$i = 0, $arrayidx6$i28$i$i = 0, $arrayidx7$i$i$i = 0, $arrayidx7$i11$i$i = 0, $arrayidx7$i29$i$i = 0, $arrayidx8 = 0, $arrayidx8$i$i$i = 0, $arrayidx8$i12$i$i = 0;
 var $arrayidx8$i30$i$i = 0, $arrayidx9$i$i$i = 0, $arrayidx9$i13$i$i = 0, $arrayidx9$i31$i$i = 0, $q$i = 0, $s2 = 0, $t = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0;
 $q$i = sp + 480|0;
 $t = sp + 320|0;
 $s2 = sp + 160|0;
 $u = sp;
 _ge_p3_to_cached($r,$s);
 $0 = HEAP32[$s>>2]|0;
 $arrayidx1$i$i$i = ((($s)) + 4|0);
 $1 = HEAP32[$arrayidx1$i$i$i>>2]|0;
 $arrayidx2$i$i$i = ((($s)) + 8|0);
 $2 = HEAP32[$arrayidx2$i$i$i>>2]|0;
 $arrayidx3$i$i$i = ((($s)) + 12|0);
 $3 = HEAP32[$arrayidx3$i$i$i>>2]|0;
 $arrayidx4$i$i$i = ((($s)) + 16|0);
 $4 = HEAP32[$arrayidx4$i$i$i>>2]|0;
 $arrayidx5$i$i$i = ((($s)) + 20|0);
 $5 = HEAP32[$arrayidx5$i$i$i>>2]|0;
 $arrayidx6$i$i$i = ((($s)) + 24|0);
 $6 = HEAP32[$arrayidx6$i$i$i>>2]|0;
 $arrayidx7$i$i$i = ((($s)) + 28|0);
 $7 = HEAP32[$arrayidx7$i$i$i>>2]|0;
 $arrayidx8$i$i$i = ((($s)) + 32|0);
 $8 = HEAP32[$arrayidx8$i$i$i>>2]|0;
 $arrayidx9$i$i$i = ((($s)) + 36|0);
 $9 = HEAP32[$arrayidx9$i$i$i>>2]|0;
 HEAP32[$q$i>>2] = $0;
 $arrayidx11$i$i$i = ((($q$i)) + 4|0);
 HEAP32[$arrayidx11$i$i$i>>2] = $1;
 $arrayidx12$i$i$i = ((($q$i)) + 8|0);
 HEAP32[$arrayidx12$i$i$i>>2] = $2;
 $arrayidx13$i$i$i = ((($q$i)) + 12|0);
 HEAP32[$arrayidx13$i$i$i>>2] = $3;
 $arrayidx14$i$i$i = ((($q$i)) + 16|0);
 HEAP32[$arrayidx14$i$i$i>>2] = $4;
 $arrayidx15$i$i$i = ((($q$i)) + 20|0);
 HEAP32[$arrayidx15$i$i$i>>2] = $5;
 $arrayidx16$i$i$i = ((($q$i)) + 24|0);
 HEAP32[$arrayidx16$i$i$i>>2] = $6;
 $arrayidx17$i$i$i = ((($q$i)) + 28|0);
 HEAP32[$arrayidx17$i$i$i>>2] = $7;
 $arrayidx18$i$i$i = ((($q$i)) + 32|0);
 HEAP32[$arrayidx18$i$i$i>>2] = $8;
 $arrayidx19$i$i$i = ((($q$i)) + 36|0);
 HEAP32[$arrayidx19$i$i$i>>2] = $9;
 $arraydecay3$i$i = ((($q$i)) + 40|0);
 $arraydecay5$i$i = ((($s)) + 40|0);
 $10 = HEAP32[$arraydecay5$i$i>>2]|0;
 $arrayidx1$i23$i$i = ((($s)) + 44|0);
 $11 = HEAP32[$arrayidx1$i23$i$i>>2]|0;
 $arrayidx2$i24$i$i = ((($s)) + 48|0);
 $12 = HEAP32[$arrayidx2$i24$i$i>>2]|0;
 $arrayidx3$i25$i$i = ((($s)) + 52|0);
 $13 = HEAP32[$arrayidx3$i25$i$i>>2]|0;
 $arrayidx4$i26$i$i = ((($s)) + 56|0);
 $14 = HEAP32[$arrayidx4$i26$i$i>>2]|0;
 $arrayidx5$i27$i$i = ((($s)) + 60|0);
 $15 = HEAP32[$arrayidx5$i27$i$i>>2]|0;
 $arrayidx6$i28$i$i = ((($s)) + 64|0);
 $16 = HEAP32[$arrayidx6$i28$i$i>>2]|0;
 $arrayidx7$i29$i$i = ((($s)) + 68|0);
 $17 = HEAP32[$arrayidx7$i29$i$i>>2]|0;
 $arrayidx8$i30$i$i = ((($s)) + 72|0);
 $18 = HEAP32[$arrayidx8$i30$i$i>>2]|0;
 $arrayidx9$i31$i$i = ((($s)) + 76|0);
 $19 = HEAP32[$arrayidx9$i31$i$i>>2]|0;
 HEAP32[$arraydecay3$i$i>>2] = $10;
 $arrayidx11$i32$i$i = ((($q$i)) + 44|0);
 HEAP32[$arrayidx11$i32$i$i>>2] = $11;
 $arrayidx12$i33$i$i = ((($q$i)) + 48|0);
 HEAP32[$arrayidx12$i33$i$i>>2] = $12;
 $arrayidx13$i34$i$i = ((($q$i)) + 52|0);
 HEAP32[$arrayidx13$i34$i$i>>2] = $13;
 $arrayidx14$i35$i$i = ((($q$i)) + 56|0);
 HEAP32[$arrayidx14$i35$i$i>>2] = $14;
 $arrayidx15$i36$i$i = ((($q$i)) + 60|0);
 HEAP32[$arrayidx15$i36$i$i>>2] = $15;
 $arrayidx16$i37$i$i = ((($q$i)) + 64|0);
 HEAP32[$arrayidx16$i37$i$i>>2] = $16;
 $arrayidx17$i38$i$i = ((($q$i)) + 68|0);
 HEAP32[$arrayidx17$i38$i$i>>2] = $17;
 $arrayidx18$i39$i$i = ((($q$i)) + 72|0);
 HEAP32[$arrayidx18$i39$i$i>>2] = $18;
 $arrayidx19$i40$i$i = ((($q$i)) + 76|0);
 HEAP32[$arrayidx19$i40$i$i>>2] = $19;
 $arraydecay6$i$i = ((($q$i)) + 80|0);
 $arraydecay8$i$i = ((($s)) + 80|0);
 $20 = HEAP32[$arraydecay8$i$i>>2]|0;
 $arrayidx1$i5$i$i = ((($s)) + 84|0);
 $21 = HEAP32[$arrayidx1$i5$i$i>>2]|0;
 $arrayidx2$i6$i$i = ((($s)) + 88|0);
 $22 = HEAP32[$arrayidx2$i6$i$i>>2]|0;
 $arrayidx3$i7$i$i = ((($s)) + 92|0);
 $23 = HEAP32[$arrayidx3$i7$i$i>>2]|0;
 $arrayidx4$i8$i$i = ((($s)) + 96|0);
 $24 = HEAP32[$arrayidx4$i8$i$i>>2]|0;
 $arrayidx5$i9$i$i = ((($s)) + 100|0);
 $25 = HEAP32[$arrayidx5$i9$i$i>>2]|0;
 $arrayidx6$i10$i$i = ((($s)) + 104|0);
 $26 = HEAP32[$arrayidx6$i10$i$i>>2]|0;
 $arrayidx7$i11$i$i = ((($s)) + 108|0);
 $27 = HEAP32[$arrayidx7$i11$i$i>>2]|0;
 $arrayidx8$i12$i$i = ((($s)) + 112|0);
 $28 = HEAP32[$arrayidx8$i12$i$i>>2]|0;
 $arrayidx9$i13$i$i = ((($s)) + 116|0);
 $29 = HEAP32[$arrayidx9$i13$i$i>>2]|0;
 HEAP32[$arraydecay6$i$i>>2] = $20;
 $arrayidx11$i14$i$i = ((($q$i)) + 84|0);
 HEAP32[$arrayidx11$i14$i$i>>2] = $21;
 $arrayidx12$i15$i$i = ((($q$i)) + 88|0);
 HEAP32[$arrayidx12$i15$i$i>>2] = $22;
 $arrayidx13$i16$i$i = ((($q$i)) + 92|0);
 HEAP32[$arrayidx13$i16$i$i>>2] = $23;
 $arrayidx14$i17$i$i = ((($q$i)) + 96|0);
 HEAP32[$arrayidx14$i17$i$i>>2] = $24;
 $arrayidx15$i18$i$i = ((($q$i)) + 100|0);
 HEAP32[$arrayidx15$i18$i$i>>2] = $25;
 $arrayidx16$i19$i$i = ((($q$i)) + 104|0);
 HEAP32[$arrayidx16$i19$i$i>>2] = $26;
 $arrayidx17$i20$i$i = ((($q$i)) + 108|0);
 HEAP32[$arrayidx17$i20$i$i>>2] = $27;
 $arrayidx18$i21$i$i = ((($q$i)) + 112|0);
 HEAP32[$arrayidx18$i21$i$i>>2] = $28;
 $arrayidx19$i22$i$i = ((($q$i)) + 116|0);
 HEAP32[$arrayidx19$i22$i$i>>2] = $29;
 _ge_p2_dbl($t,$q$i);
 $arraydecay3$i = ((($t)) + 120|0);
 _fe_mul($s2,$t,$arraydecay3$i);
 $arraydecay4$i = ((($s2)) + 40|0);
 $arraydecay6$i = ((($t)) + 40|0);
 $arraydecay7$i = ((($t)) + 80|0);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 $arraydecay9$i = ((($s2)) + 80|0);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 $arraydecay15$i = ((($s2)) + 120|0);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s2,$r);
 _fe_mul($u,$t,$arraydecay3$i);
 $arraydecay4$i19 = ((($u)) + 40|0);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 $arraydecay9$i22 = ((($u)) + 80|0);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 $arraydecay15$i23 = ((($u)) + 120|0);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx2 = ((($r)) + 160|0);
 _ge_p3_to_cached($arrayidx2,$u);
 _ge_add($t,$s2,$arrayidx2);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx4 = ((($r)) + 320|0);
 _ge_p3_to_cached($arrayidx4,$u);
 _ge_add($t,$s2,$arrayidx4);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx6 = ((($r)) + 480|0);
 _ge_p3_to_cached($arrayidx6,$u);
 _ge_add($t,$s2,$arrayidx6);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx8 = ((($r)) + 640|0);
 _ge_p3_to_cached($arrayidx8,$u);
 _ge_add($t,$s2,$arrayidx8);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx10 = ((($r)) + 800|0);
 _ge_p3_to_cached($arrayidx10,$u);
 _ge_add($t,$s2,$arrayidx10);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx12 = ((($r)) + 960|0);
 _ge_p3_to_cached($arrayidx12,$u);
 _ge_add($t,$s2,$arrayidx12);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx14 = ((($r)) + 1120|0);
 _ge_p3_to_cached($arrayidx14,$u);
 STACKTOP = sp;return;
}
function _ge_p3_to_cached($r,$p) {
 $r = $r|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add20$i = 0, $add21$i = 0, $add22$i = 0, $add23$i = 0, $add24$i = 0, $add25$i = 0, $add26$i = 0, $add27$i = 0, $add28$i = 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay11 = 0, $arraydecay12 = 0, $arraydecay3 = 0, $arraydecay8 = 0, $arrayidx1$i = 0, $arrayidx1$i36 = 0, $arrayidx11$i = 0, $arrayidx11$i45 = 0, $arrayidx12$i = 0, $arrayidx12$i46 = 0, $arrayidx13$i = 0, $arrayidx13$i47 = 0, $arrayidx14$i = 0, $arrayidx14$i48 = 0, $arrayidx15$i = 0, $arrayidx15$i49 = 0, $arrayidx16$i = 0, $arrayidx16$i50 = 0;
 var $arrayidx17$i = 0, $arrayidx17$i51 = 0, $arrayidx18$i = 0, $arrayidx18$i52 = 0, $arrayidx19$i = 0, $arrayidx19$i53 = 0, $arrayidx2$i = 0, $arrayidx2$i37 = 0, $arrayidx3$i = 0, $arrayidx3$i38 = 0, $arrayidx30$i = 0, $arrayidx30$i27 = 0, $arrayidx31$i = 0, $arrayidx31$i28 = 0, $arrayidx32$i = 0, $arrayidx32$i29 = 0, $arrayidx33$i = 0, $arrayidx33$i30 = 0, $arrayidx34$i = 0, $arrayidx34$i31 = 0;
 var $arrayidx35$i = 0, $arrayidx35$i32 = 0, $arrayidx36$i = 0, $arrayidx36$i33 = 0, $arrayidx37$i = 0, $arrayidx37$i34 = 0, $arrayidx38$i = 0, $arrayidx38$i35 = 0, $arrayidx4$i = 0, $arrayidx4$i39 = 0, $arrayidx5$i = 0, $arrayidx5$i40 = 0, $arrayidx6$i = 0, $arrayidx6$i41 = 0, $arrayidx7$i = 0, $arrayidx7$i42 = 0, $arrayidx8$i = 0, $arrayidx8$i43 = 0, $arrayidx9$i = 0, $arrayidx9$i44 = 0;
 var $sub$i = 0, $sub20$i = 0, $sub21$i = 0, $sub22$i = 0, $sub23$i = 0, $sub24$i = 0, $sub25$i = 0, $sub26$i = 0, $sub27$i = 0, $sub28$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay1 = ((($p)) + 40|0);
 $0 = HEAP32[$arraydecay1>>2]|0;
 $arrayidx1$i = ((($p)) + 44|0);
 $1 = HEAP32[$arrayidx1$i>>2]|0;
 $arrayidx2$i = ((($p)) + 48|0);
 $2 = HEAP32[$arrayidx2$i>>2]|0;
 $arrayidx3$i = ((($p)) + 52|0);
 $3 = HEAP32[$arrayidx3$i>>2]|0;
 $arrayidx4$i = ((($p)) + 56|0);
 $4 = HEAP32[$arrayidx4$i>>2]|0;
 $arrayidx5$i = ((($p)) + 60|0);
 $5 = HEAP32[$arrayidx5$i>>2]|0;
 $arrayidx6$i = ((($p)) + 64|0);
 $6 = HEAP32[$arrayidx6$i>>2]|0;
 $arrayidx7$i = ((($p)) + 68|0);
 $7 = HEAP32[$arrayidx7$i>>2]|0;
 $arrayidx8$i = ((($p)) + 72|0);
 $8 = HEAP32[$arrayidx8$i>>2]|0;
 $arrayidx9$i = ((($p)) + 76|0);
 $9 = HEAP32[$arrayidx9$i>>2]|0;
 $10 = HEAP32[$p>>2]|0;
 $arrayidx11$i = ((($p)) + 4|0);
 $11 = HEAP32[$arrayidx11$i>>2]|0;
 $arrayidx12$i = ((($p)) + 8|0);
 $12 = HEAP32[$arrayidx12$i>>2]|0;
 $arrayidx13$i = ((($p)) + 12|0);
 $13 = HEAP32[$arrayidx13$i>>2]|0;
 $arrayidx14$i = ((($p)) + 16|0);
 $14 = HEAP32[$arrayidx14$i>>2]|0;
 $arrayidx15$i = ((($p)) + 20|0);
 $15 = HEAP32[$arrayidx15$i>>2]|0;
 $arrayidx16$i = ((($p)) + 24|0);
 $16 = HEAP32[$arrayidx16$i>>2]|0;
 $arrayidx17$i = ((($p)) + 28|0);
 $17 = HEAP32[$arrayidx17$i>>2]|0;
 $arrayidx18$i = ((($p)) + 32|0);
 $18 = HEAP32[$arrayidx18$i>>2]|0;
 $arrayidx19$i = ((($p)) + 36|0);
 $19 = HEAP32[$arrayidx19$i>>2]|0;
 $add$i = (($10) + ($0))|0;
 $add20$i = (($11) + ($1))|0;
 $add21$i = (($12) + ($2))|0;
 $add22$i = (($13) + ($3))|0;
 $add23$i = (($14) + ($4))|0;
 $add24$i = (($15) + ($5))|0;
 $add25$i = (($16) + ($6))|0;
 $add26$i = (($17) + ($7))|0;
 $add27$i = (($18) + ($8))|0;
 $add28$i = (($19) + ($9))|0;
 HEAP32[$r>>2] = $add$i;
 $arrayidx30$i = ((($r)) + 4|0);
 HEAP32[$arrayidx30$i>>2] = $add20$i;
 $arrayidx31$i = ((($r)) + 8|0);
 HEAP32[$arrayidx31$i>>2] = $add21$i;
 $arrayidx32$i = ((($r)) + 12|0);
 HEAP32[$arrayidx32$i>>2] = $add22$i;
 $arrayidx33$i = ((($r)) + 16|0);
 HEAP32[$arrayidx33$i>>2] = $add23$i;
 $arrayidx34$i = ((($r)) + 20|0);
 HEAP32[$arrayidx34$i>>2] = $add24$i;
 $arrayidx35$i = ((($r)) + 24|0);
 HEAP32[$arrayidx35$i>>2] = $add25$i;
 $arrayidx36$i = ((($r)) + 28|0);
 HEAP32[$arrayidx36$i>>2] = $add26$i;
 $arrayidx37$i = ((($r)) + 32|0);
 HEAP32[$arrayidx37$i>>2] = $add27$i;
 $arrayidx38$i = ((($r)) + 36|0);
 HEAP32[$arrayidx38$i>>2] = $add28$i;
 $arraydecay3 = ((($r)) + 40|0);
 $20 = HEAP32[$arraydecay1>>2]|0;
 $21 = HEAP32[$arrayidx1$i>>2]|0;
 $22 = HEAP32[$arrayidx2$i>>2]|0;
 $23 = HEAP32[$arrayidx3$i>>2]|0;
 $24 = HEAP32[$arrayidx4$i>>2]|0;
 $25 = HEAP32[$arrayidx5$i>>2]|0;
 $26 = HEAP32[$arrayidx6$i>>2]|0;
 $27 = HEAP32[$arrayidx7$i>>2]|0;
 $28 = HEAP32[$arrayidx8$i>>2]|0;
 $29 = HEAP32[$arrayidx9$i>>2]|0;
 $30 = HEAP32[$p>>2]|0;
 $31 = HEAP32[$arrayidx11$i>>2]|0;
 $32 = HEAP32[$arrayidx12$i>>2]|0;
 $33 = HEAP32[$arrayidx13$i>>2]|0;
 $34 = HEAP32[$arrayidx14$i>>2]|0;
 $35 = HEAP32[$arrayidx15$i>>2]|0;
 $36 = HEAP32[$arrayidx16$i>>2]|0;
 $37 = HEAP32[$arrayidx17$i>>2]|0;
 $38 = HEAP32[$arrayidx18$i>>2]|0;
 $39 = HEAP32[$arrayidx19$i>>2]|0;
 $sub$i = (($20) - ($30))|0;
 $sub20$i = (($21) - ($31))|0;
 $sub21$i = (($22) - ($32))|0;
 $sub22$i = (($23) - ($33))|0;
 $sub23$i = (($24) - ($34))|0;
 $sub24$i = (($25) - ($35))|0;
 $sub25$i = (($26) - ($36))|0;
 $sub26$i = (($27) - ($37))|0;
 $sub27$i = (($28) - ($38))|0;
 $sub28$i = (($29) - ($39))|0;
 HEAP32[$arraydecay3>>2] = $sub$i;
 $arrayidx30$i27 = ((($r)) + 44|0);
 HEAP32[$arrayidx30$i27>>2] = $sub20$i;
 $arrayidx31$i28 = ((($r)) + 48|0);
 HEAP32[$arrayidx31$i28>>2] = $sub21$i;
 $arrayidx32$i29 = ((($r)) + 52|0);
 HEAP32[$arrayidx32$i29>>2] = $sub22$i;
 $arrayidx33$i30 = ((($r)) + 56|0);
 HEAP32[$arrayidx33$i30>>2] = $sub23$i;
 $arrayidx34$i31 = ((($r)) + 60|0);
 HEAP32[$arrayidx34$i31>>2] = $sub24$i;
 $arrayidx35$i32 = ((($r)) + 64|0);
 HEAP32[$arrayidx35$i32>>2] = $sub25$i;
 $arrayidx36$i33 = ((($r)) + 68|0);
 HEAP32[$arrayidx36$i33>>2] = $sub26$i;
 $arrayidx37$i34 = ((($r)) + 72|0);
 HEAP32[$arrayidx37$i34>>2] = $sub27$i;
 $arrayidx38$i35 = ((($r)) + 76|0);
 HEAP32[$arrayidx38$i35>>2] = $sub28$i;
 $arraydecay8 = ((($r)) + 80|0);
 $arraydecay10 = ((($p)) + 80|0);
 $40 = HEAP32[$arraydecay10>>2]|0;
 $arrayidx1$i36 = ((($p)) + 84|0);
 $41 = HEAP32[$arrayidx1$i36>>2]|0;
 $arrayidx2$i37 = ((($p)) + 88|0);
 $42 = HEAP32[$arrayidx2$i37>>2]|0;
 $arrayidx3$i38 = ((($p)) + 92|0);
 $43 = HEAP32[$arrayidx3$i38>>2]|0;
 $arrayidx4$i39 = ((($p)) + 96|0);
 $44 = HEAP32[$arrayidx4$i39>>2]|0;
 $arrayidx5$i40 = ((($p)) + 100|0);
 $45 = HEAP32[$arrayidx5$i40>>2]|0;
 $arrayidx6$i41 = ((($p)) + 104|0);
 $46 = HEAP32[$arrayidx6$i41>>2]|0;
 $arrayidx7$i42 = ((($p)) + 108|0);
 $47 = HEAP32[$arrayidx7$i42>>2]|0;
 $arrayidx8$i43 = ((($p)) + 112|0);
 $48 = HEAP32[$arrayidx8$i43>>2]|0;
 $arrayidx9$i44 = ((($p)) + 116|0);
 $49 = HEAP32[$arrayidx9$i44>>2]|0;
 HEAP32[$arraydecay8>>2] = $40;
 $arrayidx11$i45 = ((($r)) + 84|0);
 HEAP32[$arrayidx11$i45>>2] = $41;
 $arrayidx12$i46 = ((($r)) + 88|0);
 HEAP32[$arrayidx12$i46>>2] = $42;
 $arrayidx13$i47 = ((($r)) + 92|0);
 HEAP32[$arrayidx13$i47>>2] = $43;
 $arrayidx14$i48 = ((($r)) + 96|0);
 HEAP32[$arrayidx14$i48>>2] = $44;
 $arrayidx15$i49 = ((($r)) + 100|0);
 HEAP32[$arrayidx15$i49>>2] = $45;
 $arrayidx16$i50 = ((($r)) + 104|0);
 HEAP32[$arrayidx16$i50>>2] = $46;
 $arrayidx17$i51 = ((($r)) + 108|0);
 HEAP32[$arrayidx17$i51>>2] = $47;
 $arrayidx18$i52 = ((($r)) + 112|0);
 HEAP32[$arrayidx18$i52>>2] = $48;
 $arrayidx19$i53 = ((($r)) + 116|0);
 HEAP32[$arrayidx19$i53>>2] = $49;
 $arraydecay11 = ((($r)) + 120|0);
 $arraydecay12 = ((($p)) + 120|0);
 _fe_mul($arraydecay11,$arraydecay12,272);
 return;
}
function _ge_p2_dbl($r,$p) {
 $r = $r|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add$i = 0, $add$i139 = 0, $add20$i = 0, $add20$i140 = 0, $add21$i = 0, $add21$i141 = 0, $add22$i = 0, $add22$i142 = 0, $add23$i = 0, $add23$i143 = 0, $add24$i = 0, $add24$i144 = 0, $add25$i = 0, $add25$i145 = 0, $add26$i = 0, $add26$i146 = 0, $add27$i = 0, $add27$i147 = 0, $add28$i = 0, $add28$i148 = 0;
 var $arraydecay3 = 0, $arraydecay4 = 0, $arraydecay5 = 0, $arraydecay7 = 0, $arraydecay9 = 0, $arrayidx1$i = 0, $arrayidx1$i121 = 0, $arrayidx1$i20 = 0, $arrayidx1$i47 = 0, $arrayidx11$i = 0, $arrayidx11$i130 = 0, $arrayidx12$i = 0, $arrayidx12$i131 = 0, $arrayidx13$i = 0, $arrayidx13$i132 = 0, $arrayidx14$i = 0, $arrayidx14$i133 = 0, $arrayidx15$i = 0, $arrayidx15$i134 = 0, $arrayidx16$i = 0;
 var $arrayidx16$i135 = 0, $arrayidx17$i = 0, $arrayidx17$i136 = 0, $arrayidx18$i = 0, $arrayidx18$i137 = 0, $arrayidx19$i = 0, $arrayidx19$i138 = 0, $arrayidx2$i = 0, $arrayidx2$i122 = 0, $arrayidx2$i21 = 0, $arrayidx2$i48 = 0, $arrayidx3$i = 0, $arrayidx3$i123 = 0, $arrayidx3$i22 = 0, $arrayidx3$i49 = 0, $arrayidx30$i = 0, $arrayidx31$i = 0, $arrayidx32$i = 0, $arrayidx33$i = 0, $arrayidx34$i = 0;
 var $arrayidx35$i = 0, $arrayidx36$i = 0, $arrayidx37$i = 0, $arrayidx38$i = 0, $arrayidx4$i = 0, $arrayidx4$i124 = 0, $arrayidx4$i23 = 0, $arrayidx4$i50 = 0, $arrayidx5$i = 0, $arrayidx5$i125 = 0, $arrayidx5$i24 = 0, $arrayidx5$i51 = 0, $arrayidx6$i = 0, $arrayidx6$i126 = 0, $arrayidx6$i25 = 0, $arrayidx6$i52 = 0, $arrayidx7$i = 0, $arrayidx7$i127 = 0, $arrayidx7$i26 = 0, $arrayidx7$i53 = 0;
 var $arrayidx8$i = 0, $arrayidx8$i128 = 0, $arrayidx8$i27 = 0, $arrayidx8$i54 = 0, $arrayidx9$i = 0, $arrayidx9$i129 = 0, $arrayidx9$i28 = 0, $arrayidx9$i55 = 0, $sub$i = 0, $sub$i102 = 0, $sub$i65 = 0, $sub20$i = 0, $sub20$i103 = 0, $sub20$i66 = 0, $sub21$i = 0, $sub21$i104 = 0, $sub21$i67 = 0, $sub22$i = 0, $sub22$i105 = 0, $sub22$i68 = 0;
 var $sub23$i = 0, $sub23$i106 = 0, $sub23$i69 = 0, $sub24$i = 0, $sub24$i107 = 0, $sub24$i70 = 0, $sub25$i = 0, $sub25$i108 = 0, $sub25$i71 = 0, $sub26$i = 0, $sub26$i109 = 0, $sub26$i72 = 0, $sub27$i = 0, $sub27$i110 = 0, $sub27$i73 = 0, $sub28$i = 0, $sub28$i111 = 0, $sub28$i74 = 0, $t0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $t0 = sp;
 _fe_sq($r,$p);
 $arraydecay3 = ((($r)) + 80|0);
 $arraydecay4 = ((($p)) + 40|0);
 _fe_sq($arraydecay3,$arraydecay4);
 $arraydecay5 = ((($r)) + 120|0);
 $arraydecay7 = ((($p)) + 80|0);
 _fe_sq2($arraydecay5,$arraydecay7);
 $arraydecay9 = ((($r)) + 40|0);
 $0 = HEAP32[$p>>2]|0;
 $arrayidx1$i = ((($p)) + 4|0);
 $1 = HEAP32[$arrayidx1$i>>2]|0;
 $arrayidx2$i = ((($p)) + 8|0);
 $2 = HEAP32[$arrayidx2$i>>2]|0;
 $arrayidx3$i = ((($p)) + 12|0);
 $3 = HEAP32[$arrayidx3$i>>2]|0;
 $arrayidx4$i = ((($p)) + 16|0);
 $4 = HEAP32[$arrayidx4$i>>2]|0;
 $arrayidx5$i = ((($p)) + 20|0);
 $5 = HEAP32[$arrayidx5$i>>2]|0;
 $arrayidx6$i = ((($p)) + 24|0);
 $6 = HEAP32[$arrayidx6$i>>2]|0;
 $arrayidx7$i = ((($p)) + 28|0);
 $7 = HEAP32[$arrayidx7$i>>2]|0;
 $arrayidx8$i = ((($p)) + 32|0);
 $8 = HEAP32[$arrayidx8$i>>2]|0;
 $arrayidx9$i = ((($p)) + 36|0);
 $9 = HEAP32[$arrayidx9$i>>2]|0;
 $10 = HEAP32[$arraydecay4>>2]|0;
 $arrayidx11$i = ((($p)) + 44|0);
 $11 = HEAP32[$arrayidx11$i>>2]|0;
 $arrayidx12$i = ((($p)) + 48|0);
 $12 = HEAP32[$arrayidx12$i>>2]|0;
 $arrayidx13$i = ((($p)) + 52|0);
 $13 = HEAP32[$arrayidx13$i>>2]|0;
 $arrayidx14$i = ((($p)) + 56|0);
 $14 = HEAP32[$arrayidx14$i>>2]|0;
 $arrayidx15$i = ((($p)) + 60|0);
 $15 = HEAP32[$arrayidx15$i>>2]|0;
 $arrayidx16$i = ((($p)) + 64|0);
 $16 = HEAP32[$arrayidx16$i>>2]|0;
 $arrayidx17$i = ((($p)) + 68|0);
 $17 = HEAP32[$arrayidx17$i>>2]|0;
 $arrayidx18$i = ((($p)) + 72|0);
 $18 = HEAP32[$arrayidx18$i>>2]|0;
 $arrayidx19$i = ((($p)) + 76|0);
 $19 = HEAP32[$arrayidx19$i>>2]|0;
 $add$i = (($10) + ($0))|0;
 $add20$i = (($11) + ($1))|0;
 $add21$i = (($12) + ($2))|0;
 $add22$i = (($13) + ($3))|0;
 $add23$i = (($14) + ($4))|0;
 $add24$i = (($15) + ($5))|0;
 $add25$i = (($16) + ($6))|0;
 $add26$i = (($17) + ($7))|0;
 $add27$i = (($18) + ($8))|0;
 $add28$i = (($19) + ($9))|0;
 HEAP32[$arraydecay9>>2] = $add$i;
 $arrayidx30$i = ((($r)) + 44|0);
 HEAP32[$arrayidx30$i>>2] = $add20$i;
 $arrayidx31$i = ((($r)) + 48|0);
 HEAP32[$arrayidx31$i>>2] = $add21$i;
 $arrayidx32$i = ((($r)) + 52|0);
 HEAP32[$arrayidx32$i>>2] = $add22$i;
 $arrayidx33$i = ((($r)) + 56|0);
 HEAP32[$arrayidx33$i>>2] = $add23$i;
 $arrayidx34$i = ((($r)) + 60|0);
 HEAP32[$arrayidx34$i>>2] = $add24$i;
 $arrayidx35$i = ((($r)) + 64|0);
 HEAP32[$arrayidx35$i>>2] = $add25$i;
 $arrayidx36$i = ((($r)) + 68|0);
 HEAP32[$arrayidx36$i>>2] = $add26$i;
 $arrayidx37$i = ((($r)) + 72|0);
 HEAP32[$arrayidx37$i>>2] = $add27$i;
 $arrayidx38$i = ((($r)) + 76|0);
 HEAP32[$arrayidx38$i>>2] = $add28$i;
 _fe_sq($t0,$arraydecay9);
 $20 = HEAP32[$arraydecay3>>2]|0;
 $arrayidx1$i121 = ((($r)) + 84|0);
 $21 = HEAP32[$arrayidx1$i121>>2]|0;
 $arrayidx2$i122 = ((($r)) + 88|0);
 $22 = HEAP32[$arrayidx2$i122>>2]|0;
 $arrayidx3$i123 = ((($r)) + 92|0);
 $23 = HEAP32[$arrayidx3$i123>>2]|0;
 $arrayidx4$i124 = ((($r)) + 96|0);
 $24 = HEAP32[$arrayidx4$i124>>2]|0;
 $arrayidx5$i125 = ((($r)) + 100|0);
 $25 = HEAP32[$arrayidx5$i125>>2]|0;
 $arrayidx6$i126 = ((($r)) + 104|0);
 $26 = HEAP32[$arrayidx6$i126>>2]|0;
 $arrayidx7$i127 = ((($r)) + 108|0);
 $27 = HEAP32[$arrayidx7$i127>>2]|0;
 $arrayidx8$i128 = ((($r)) + 112|0);
 $28 = HEAP32[$arrayidx8$i128>>2]|0;
 $arrayidx9$i129 = ((($r)) + 116|0);
 $29 = HEAP32[$arrayidx9$i129>>2]|0;
 $30 = HEAP32[$r>>2]|0;
 $arrayidx11$i130 = ((($r)) + 4|0);
 $31 = HEAP32[$arrayidx11$i130>>2]|0;
 $arrayidx12$i131 = ((($r)) + 8|0);
 $32 = HEAP32[$arrayidx12$i131>>2]|0;
 $arrayidx13$i132 = ((($r)) + 12|0);
 $33 = HEAP32[$arrayidx13$i132>>2]|0;
 $arrayidx14$i133 = ((($r)) + 16|0);
 $34 = HEAP32[$arrayidx14$i133>>2]|0;
 $arrayidx15$i134 = ((($r)) + 20|0);
 $35 = HEAP32[$arrayidx15$i134>>2]|0;
 $arrayidx16$i135 = ((($r)) + 24|0);
 $36 = HEAP32[$arrayidx16$i135>>2]|0;
 $arrayidx17$i136 = ((($r)) + 28|0);
 $37 = HEAP32[$arrayidx17$i136>>2]|0;
 $arrayidx18$i137 = ((($r)) + 32|0);
 $38 = HEAP32[$arrayidx18$i137>>2]|0;
 $arrayidx19$i138 = ((($r)) + 36|0);
 $39 = HEAP32[$arrayidx19$i138>>2]|0;
 $add$i139 = (($30) + ($20))|0;
 $add20$i140 = (($31) + ($21))|0;
 $add21$i141 = (($32) + ($22))|0;
 $add22$i142 = (($33) + ($23))|0;
 $add23$i143 = (($34) + ($24))|0;
 $add24$i144 = (($35) + ($25))|0;
 $add25$i145 = (($36) + ($26))|0;
 $add26$i146 = (($37) + ($27))|0;
 $add27$i147 = (($38) + ($28))|0;
 $add28$i148 = (($39) + ($29))|0;
 HEAP32[$arraydecay9>>2] = $add$i139;
 HEAP32[$arrayidx30$i>>2] = $add20$i140;
 HEAP32[$arrayidx31$i>>2] = $add21$i141;
 HEAP32[$arrayidx32$i>>2] = $add22$i142;
 HEAP32[$arrayidx33$i>>2] = $add23$i143;
 HEAP32[$arrayidx34$i>>2] = $add24$i144;
 HEAP32[$arrayidx35$i>>2] = $add25$i145;
 HEAP32[$arrayidx36$i>>2] = $add26$i146;
 HEAP32[$arrayidx37$i>>2] = $add27$i147;
 HEAP32[$arrayidx38$i>>2] = $add28$i148;
 $sub$i102 = (($20) - ($30))|0;
 $sub20$i103 = (($21) - ($31))|0;
 $sub21$i104 = (($22) - ($32))|0;
 $sub22$i105 = (($23) - ($33))|0;
 $sub23$i106 = (($24) - ($34))|0;
 $sub24$i107 = (($25) - ($35))|0;
 $sub25$i108 = (($26) - ($36))|0;
 $sub26$i109 = (($27) - ($37))|0;
 $sub27$i110 = (($28) - ($38))|0;
 $sub28$i111 = (($29) - ($39))|0;
 HEAP32[$arraydecay3>>2] = $sub$i102;
 HEAP32[$arrayidx1$i121>>2] = $sub20$i103;
 HEAP32[$arrayidx2$i122>>2] = $sub21$i104;
 HEAP32[$arrayidx3$i123>>2] = $sub22$i105;
 HEAP32[$arrayidx4$i124>>2] = $sub23$i106;
 HEAP32[$arrayidx5$i125>>2] = $sub24$i107;
 HEAP32[$arrayidx6$i126>>2] = $sub25$i108;
 HEAP32[$arrayidx7$i127>>2] = $sub26$i109;
 HEAP32[$arrayidx8$i128>>2] = $sub27$i110;
 HEAP32[$arrayidx9$i129>>2] = $sub28$i111;
 $40 = HEAP32[$t0>>2]|0;
 $arrayidx1$i47 = ((($t0)) + 4|0);
 $41 = HEAP32[$arrayidx1$i47>>2]|0;
 $arrayidx2$i48 = ((($t0)) + 8|0);
 $42 = HEAP32[$arrayidx2$i48>>2]|0;
 $arrayidx3$i49 = ((($t0)) + 12|0);
 $43 = HEAP32[$arrayidx3$i49>>2]|0;
 $arrayidx4$i50 = ((($t0)) + 16|0);
 $44 = HEAP32[$arrayidx4$i50>>2]|0;
 $arrayidx5$i51 = ((($t0)) + 20|0);
 $45 = HEAP32[$arrayidx5$i51>>2]|0;
 $arrayidx6$i52 = ((($t0)) + 24|0);
 $46 = HEAP32[$arrayidx6$i52>>2]|0;
 $arrayidx7$i53 = ((($t0)) + 28|0);
 $47 = HEAP32[$arrayidx7$i53>>2]|0;
 $arrayidx8$i54 = ((($t0)) + 32|0);
 $48 = HEAP32[$arrayidx8$i54>>2]|0;
 $arrayidx9$i55 = ((($t0)) + 36|0);
 $49 = HEAP32[$arrayidx9$i55>>2]|0;
 $sub$i65 = (($40) - ($add$i139))|0;
 $sub20$i66 = (($41) - ($add20$i140))|0;
 $sub21$i67 = (($42) - ($add21$i141))|0;
 $sub22$i68 = (($43) - ($add22$i142))|0;
 $sub23$i69 = (($44) - ($add23$i143))|0;
 $sub24$i70 = (($45) - ($add24$i144))|0;
 $sub25$i71 = (($46) - ($add25$i145))|0;
 $sub26$i72 = (($47) - ($add26$i146))|0;
 $sub27$i73 = (($48) - ($add27$i147))|0;
 $sub28$i74 = (($49) - ($add28$i148))|0;
 HEAP32[$r>>2] = $sub$i65;
 HEAP32[$arrayidx11$i130>>2] = $sub20$i66;
 HEAP32[$arrayidx12$i131>>2] = $sub21$i67;
 HEAP32[$arrayidx13$i132>>2] = $sub22$i68;
 HEAP32[$arrayidx14$i133>>2] = $sub23$i69;
 HEAP32[$arrayidx15$i134>>2] = $sub24$i70;
 HEAP32[$arrayidx16$i135>>2] = $sub25$i71;
 HEAP32[$arrayidx17$i136>>2] = $sub26$i72;
 HEAP32[$arrayidx18$i137>>2] = $sub27$i73;
 HEAP32[$arrayidx19$i138>>2] = $sub28$i74;
 $50 = HEAP32[$arraydecay5>>2]|0;
 $arrayidx1$i20 = ((($r)) + 124|0);
 $51 = HEAP32[$arrayidx1$i20>>2]|0;
 $arrayidx2$i21 = ((($r)) + 128|0);
 $52 = HEAP32[$arrayidx2$i21>>2]|0;
 $arrayidx3$i22 = ((($r)) + 132|0);
 $53 = HEAP32[$arrayidx3$i22>>2]|0;
 $arrayidx4$i23 = ((($r)) + 136|0);
 $54 = HEAP32[$arrayidx4$i23>>2]|0;
 $arrayidx5$i24 = ((($r)) + 140|0);
 $55 = HEAP32[$arrayidx5$i24>>2]|0;
 $arrayidx6$i25 = ((($r)) + 144|0);
 $56 = HEAP32[$arrayidx6$i25>>2]|0;
 $arrayidx7$i26 = ((($r)) + 148|0);
 $57 = HEAP32[$arrayidx7$i26>>2]|0;
 $arrayidx8$i27 = ((($r)) + 152|0);
 $58 = HEAP32[$arrayidx8$i27>>2]|0;
 $arrayidx9$i28 = ((($r)) + 156|0);
 $59 = HEAP32[$arrayidx9$i28>>2]|0;
 $sub$i = (($50) - ($sub$i102))|0;
 $sub20$i = (($51) - ($sub20$i103))|0;
 $sub21$i = (($52) - ($sub21$i104))|0;
 $sub22$i = (($53) - ($sub22$i105))|0;
 $sub23$i = (($54) - ($sub23$i106))|0;
 $sub24$i = (($55) - ($sub24$i107))|0;
 $sub25$i = (($56) - ($sub25$i108))|0;
 $sub26$i = (($57) - ($sub26$i109))|0;
 $sub27$i = (($58) - ($sub27$i110))|0;
 $sub28$i = (($59) - ($sub28$i111))|0;
 HEAP32[$arraydecay5>>2] = $sub$i;
 HEAP32[$arrayidx1$i20>>2] = $sub20$i;
 HEAP32[$arrayidx2$i21>>2] = $sub21$i;
 HEAP32[$arrayidx3$i22>>2] = $sub22$i;
 HEAP32[$arrayidx4$i23>>2] = $sub23$i;
 HEAP32[$arrayidx5$i24>>2] = $sub24$i;
 HEAP32[$arrayidx6$i25>>2] = $sub25$i;
 HEAP32[$arrayidx7$i26>>2] = $sub26$i;
 HEAP32[$arrayidx8$i27>>2] = $sub27$i;
 HEAP32[$arrayidx9$i28>>2] = $sub28$i;
 STACKTOP = sp;return;
}
function _fe_sq($h,$f) {
 $h = $h|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx291 = 0, $arrayidx293 = 0, $arrayidx295 = 0, $arrayidx297 = 0, $arrayidx299 = 0, $arrayidx3 = 0, $arrayidx301 = 0, $arrayidx303 = 0, $arrayidx305 = 0, $arrayidx307 = 0, $arrayidx4 = 0, $arrayidx5 = 0;
 var $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $mul = 0, $mul10 = 0, $mul11 = 0, $mul12 = 0, $mul13 = 0, $mul14 = 0, $mul15 = 0, $mul16 = 0, $mul17 = 0, $mul18 = 0, $mul19 = 0, $mul20 = 0, $mul21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $arrayidx1 = ((($f)) + 4|0);
 $1 = HEAP32[$arrayidx1>>2]|0;
 $arrayidx2 = ((($f)) + 8|0);
 $2 = HEAP32[$arrayidx2>>2]|0;
 $arrayidx3 = ((($f)) + 12|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $arrayidx4 = ((($f)) + 16|0);
 $4 = HEAP32[$arrayidx4>>2]|0;
 $arrayidx5 = ((($f)) + 20|0);
 $5 = HEAP32[$arrayidx5>>2]|0;
 $arrayidx6 = ((($f)) + 24|0);
 $6 = HEAP32[$arrayidx6>>2]|0;
 $arrayidx7 = ((($f)) + 28|0);
 $7 = HEAP32[$arrayidx7>>2]|0;
 $arrayidx8 = ((($f)) + 32|0);
 $8 = HEAP32[$arrayidx8>>2]|0;
 $arrayidx9 = ((($f)) + 36|0);
 $9 = HEAP32[$arrayidx9>>2]|0;
 $mul = $0 << 1;
 $mul10 = $1 << 1;
 $mul11 = $2 << 1;
 $mul12 = $3 << 1;
 $mul13 = $4 << 1;
 $mul14 = $5 << 1;
 $mul15 = $6 << 1;
 $mul16 = $7 << 1;
 $mul17 = ($5*38)|0;
 $mul18 = ($6*19)|0;
 $mul19 = ($7*38)|0;
 $mul20 = ($8*19)|0;
 $mul21 = ($9*38)|0;
 $10 = ($0|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = (___muldi3(($0|0),($11|0),($0|0),($11|0))|0);
 $13 = (getTempRet0() | 0);
 $14 = ($mul|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = ($1|0)<(0);
 $17 = $16 << 31 >> 31;
 $18 = (___muldi3(($mul|0),($15|0),($1|0),($17|0))|0);
 $19 = (getTempRet0() | 0);
 $20 = ($2|0)<(0);
 $21 = $20 << 31 >> 31;
 $22 = (___muldi3(($2|0),($21|0),($mul|0),($15|0))|0);
 $23 = (getTempRet0() | 0);
 $24 = ($3|0)<(0);
 $25 = $24 << 31 >> 31;
 $26 = (___muldi3(($3|0),($25|0),($mul|0),($15|0))|0);
 $27 = (getTempRet0() | 0);
 $28 = ($4|0)<(0);
 $29 = $28 << 31 >> 31;
 $30 = (___muldi3(($4|0),($29|0),($mul|0),($15|0))|0);
 $31 = (getTempRet0() | 0);
 $32 = ($5|0)<(0);
 $33 = $32 << 31 >> 31;
 $34 = (___muldi3(($5|0),($33|0),($mul|0),($15|0))|0);
 $35 = (getTempRet0() | 0);
 $36 = ($6|0)<(0);
 $37 = $36 << 31 >> 31;
 $38 = (___muldi3(($6|0),($37|0),($mul|0),($15|0))|0);
 $39 = (getTempRet0() | 0);
 $40 = ($7|0)<(0);
 $41 = $40 << 31 >> 31;
 $42 = (___muldi3(($7|0),($41|0),($mul|0),($15|0))|0);
 $43 = (getTempRet0() | 0);
 $44 = ($8|0)<(0);
 $45 = $44 << 31 >> 31;
 $46 = (___muldi3(($8|0),($45|0),($mul|0),($15|0))|0);
 $47 = (getTempRet0() | 0);
 $48 = ($9|0)<(0);
 $49 = $48 << 31 >> 31;
 $50 = (___muldi3(($9|0),($49|0),($mul|0),($15|0))|0);
 $51 = (getTempRet0() | 0);
 $52 = ($mul10|0)<(0);
 $53 = $52 << 31 >> 31;
 $54 = (___muldi3(($mul10|0),($53|0),($1|0),($17|0))|0);
 $55 = (getTempRet0() | 0);
 $56 = (___muldi3(($mul10|0),($53|0),($2|0),($21|0))|0);
 $57 = (getTempRet0() | 0);
 $58 = ($mul12|0)<(0);
 $59 = $58 << 31 >> 31;
 $60 = (___muldi3(($mul12|0),($59|0),($mul10|0),($53|0))|0);
 $61 = (getTempRet0() | 0);
 $62 = (___muldi3(($4|0),($29|0),($mul10|0),($53|0))|0);
 $63 = (getTempRet0() | 0);
 $64 = ($mul14|0)<(0);
 $65 = $64 << 31 >> 31;
 $66 = (___muldi3(($mul14|0),($65|0),($mul10|0),($53|0))|0);
 $67 = (getTempRet0() | 0);
 $68 = (___muldi3(($6|0),($37|0),($mul10|0),($53|0))|0);
 $69 = (getTempRet0() | 0);
 $70 = ($mul16|0)<(0);
 $71 = $70 << 31 >> 31;
 $72 = (___muldi3(($mul16|0),($71|0),($mul10|0),($53|0))|0);
 $73 = (getTempRet0() | 0);
 $74 = (___muldi3(($8|0),($45|0),($mul10|0),($53|0))|0);
 $75 = (getTempRet0() | 0);
 $76 = ($mul21|0)<(0);
 $77 = $76 << 31 >> 31;
 $78 = (___muldi3(($mul21|0),($77|0),($mul10|0),($53|0))|0);
 $79 = (getTempRet0() | 0);
 $80 = (___muldi3(($2|0),($21|0),($2|0),($21|0))|0);
 $81 = (getTempRet0() | 0);
 $82 = ($mul11|0)<(0);
 $83 = $82 << 31 >> 31;
 $84 = (___muldi3(($mul11|0),($83|0),($3|0),($25|0))|0);
 $85 = (getTempRet0() | 0);
 $86 = (___muldi3(($4|0),($29|0),($mul11|0),($83|0))|0);
 $87 = (getTempRet0() | 0);
 $88 = (___muldi3(($5|0),($33|0),($mul11|0),($83|0))|0);
 $89 = (getTempRet0() | 0);
 $90 = (___muldi3(($6|0),($37|0),($mul11|0),($83|0))|0);
 $91 = (getTempRet0() | 0);
 $92 = (___muldi3(($7|0),($41|0),($mul11|0),($83|0))|0);
 $93 = (getTempRet0() | 0);
 $94 = ($mul20|0)<(0);
 $95 = $94 << 31 >> 31;
 $96 = (___muldi3(($mul20|0),($95|0),($mul11|0),($83|0))|0);
 $97 = (getTempRet0() | 0);
 $98 = (___muldi3(($mul21|0),($77|0),($2|0),($21|0))|0);
 $99 = (getTempRet0() | 0);
 $100 = (___muldi3(($mul12|0),($59|0),($3|0),($25|0))|0);
 $101 = (getTempRet0() | 0);
 $102 = (___muldi3(($mul12|0),($59|0),($4|0),($29|0))|0);
 $103 = (getTempRet0() | 0);
 $104 = (___muldi3(($mul14|0),($65|0),($mul12|0),($59|0))|0);
 $105 = (getTempRet0() | 0);
 $106 = (___muldi3(($6|0),($37|0),($mul12|0),($59|0))|0);
 $107 = (getTempRet0() | 0);
 $108 = ($mul19|0)<(0);
 $109 = $108 << 31 >> 31;
 $110 = (___muldi3(($mul19|0),($109|0),($mul12|0),($59|0))|0);
 $111 = (getTempRet0() | 0);
 $112 = (___muldi3(($mul20|0),($95|0),($mul12|0),($59|0))|0);
 $113 = (getTempRet0() | 0);
 $114 = (___muldi3(($mul21|0),($77|0),($mul12|0),($59|0))|0);
 $115 = (getTempRet0() | 0);
 $116 = (___muldi3(($4|0),($29|0),($4|0),($29|0))|0);
 $117 = (getTempRet0() | 0);
 $118 = ($mul13|0)<(0);
 $119 = $118 << 31 >> 31;
 $120 = (___muldi3(($mul13|0),($119|0),($5|0),($33|0))|0);
 $121 = (getTempRet0() | 0);
 $122 = ($mul18|0)<(0);
 $123 = $122 << 31 >> 31;
 $124 = (___muldi3(($mul18|0),($123|0),($mul13|0),($119|0))|0);
 $125 = (getTempRet0() | 0);
 $126 = (___muldi3(($mul19|0),($109|0),($4|0),($29|0))|0);
 $127 = (getTempRet0() | 0);
 $128 = (___muldi3(($mul20|0),($95|0),($mul13|0),($119|0))|0);
 $129 = (getTempRet0() | 0);
 $130 = (___muldi3(($mul21|0),($77|0),($4|0),($29|0))|0);
 $131 = (getTempRet0() | 0);
 $132 = ($mul17|0)<(0);
 $133 = $132 << 31 >> 31;
 $134 = (___muldi3(($mul17|0),($133|0),($5|0),($33|0))|0);
 $135 = (getTempRet0() | 0);
 $136 = (___muldi3(($mul18|0),($123|0),($mul14|0),($65|0))|0);
 $137 = (getTempRet0() | 0);
 $138 = (___muldi3(($mul19|0),($109|0),($mul14|0),($65|0))|0);
 $139 = (getTempRet0() | 0);
 $140 = (___muldi3(($mul20|0),($95|0),($mul14|0),($65|0))|0);
 $141 = (getTempRet0() | 0);
 $142 = (___muldi3(($mul21|0),($77|0),($mul14|0),($65|0))|0);
 $143 = (getTempRet0() | 0);
 $144 = (___muldi3(($mul18|0),($123|0),($6|0),($37|0))|0);
 $145 = (getTempRet0() | 0);
 $146 = (___muldi3(($mul19|0),($109|0),($6|0),($37|0))|0);
 $147 = (getTempRet0() | 0);
 $148 = ($mul15|0)<(0);
 $149 = $148 << 31 >> 31;
 $150 = (___muldi3(($mul20|0),($95|0),($mul15|0),($149|0))|0);
 $151 = (getTempRet0() | 0);
 $152 = (___muldi3(($mul21|0),($77|0),($6|0),($37|0))|0);
 $153 = (getTempRet0() | 0);
 $154 = (___muldi3(($mul19|0),($109|0),($7|0),($41|0))|0);
 $155 = (getTempRet0() | 0);
 $156 = (___muldi3(($mul20|0),($95|0),($mul16|0),($71|0))|0);
 $157 = (getTempRet0() | 0);
 $158 = (___muldi3(($mul21|0),($77|0),($mul16|0),($71|0))|0);
 $159 = (getTempRet0() | 0);
 $160 = (___muldi3(($mul20|0),($95|0),($8|0),($45|0))|0);
 $161 = (getTempRet0() | 0);
 $162 = (___muldi3(($mul21|0),($77|0),($8|0),($45|0))|0);
 $163 = (getTempRet0() | 0);
 $164 = (___muldi3(($mul21|0),($77|0),($9|0),($49|0))|0);
 $165 = (getTempRet0() | 0);
 $166 = (_i64Add(($134|0),($135|0),($12|0),($13|0))|0);
 $167 = (getTempRet0() | 0);
 $168 = (_i64Add(($166|0),($167|0),($124|0),($125|0))|0);
 $169 = (getTempRet0() | 0);
 $170 = (_i64Add(($168|0),($169|0),($110|0),($111|0))|0);
 $171 = (getTempRet0() | 0);
 $172 = (_i64Add(($170|0),($171|0),($96|0),($97|0))|0);
 $173 = (getTempRet0() | 0);
 $174 = (_i64Add(($172|0),($173|0),($78|0),($79|0))|0);
 $175 = (getTempRet0() | 0);
 $176 = (_i64Add(($22|0),($23|0),($54|0),($55|0))|0);
 $177 = (getTempRet0() | 0);
 $178 = (_i64Add(($26|0),($27|0),($56|0),($57|0))|0);
 $179 = (getTempRet0() | 0);
 $180 = (_i64Add(($60|0),($61|0),($80|0),($81|0))|0);
 $181 = (getTempRet0() | 0);
 $182 = (_i64Add(($180|0),($181|0),($30|0),($31|0))|0);
 $183 = (getTempRet0() | 0);
 $184 = (_i64Add(($182|0),($183|0),($154|0),($155|0))|0);
 $185 = (getTempRet0() | 0);
 $186 = (_i64Add(($184|0),($185|0),($150|0),($151|0))|0);
 $187 = (getTempRet0() | 0);
 $188 = (_i64Add(($186|0),($187|0),($142|0),($143|0))|0);
 $189 = (getTempRet0() | 0);
 $190 = (_i64Add(($174|0),($175|0),33554432,0)|0);
 $191 = (getTempRet0() | 0);
 $192 = (_bitshift64Ashr(($190|0),($191|0),26)|0);
 $193 = (getTempRet0() | 0);
 $194 = (_i64Add(($136|0),($137|0),($18|0),($19|0))|0);
 $195 = (getTempRet0() | 0);
 $196 = (_i64Add(($194|0),($195|0),($126|0),($127|0))|0);
 $197 = (getTempRet0() | 0);
 $198 = (_i64Add(($196|0),($197|0),($112|0),($113|0))|0);
 $199 = (getTempRet0() | 0);
 $200 = (_i64Add(($198|0),($199|0),($98|0),($99|0))|0);
 $201 = (getTempRet0() | 0);
 $202 = (_i64Add(($200|0),($201|0),($192|0),($193|0))|0);
 $203 = (getTempRet0() | 0);
 $204 = $190 & -67108864;
 $205 = (_i64Subtract(($174|0),($175|0),($204|0),($191|0))|0);
 $206 = (getTempRet0() | 0);
 $207 = (_i64Add(($188|0),($189|0),33554432,0)|0);
 $208 = (getTempRet0() | 0);
 $209 = (_bitshift64Ashr(($207|0),($208|0),26)|0);
 $210 = (getTempRet0() | 0);
 $211 = (_i64Add(($62|0),($63|0),($84|0),($85|0))|0);
 $212 = (getTempRet0() | 0);
 $213 = (_i64Add(($211|0),($212|0),($34|0),($35|0))|0);
 $214 = (getTempRet0() | 0);
 $215 = (_i64Add(($213|0),($214|0),($156|0),($157|0))|0);
 $216 = (getTempRet0() | 0);
 $217 = (_i64Add(($215|0),($216|0),($152|0),($153|0))|0);
 $218 = (getTempRet0() | 0);
 $219 = (_i64Add(($217|0),($218|0),($209|0),($210|0))|0);
 $220 = (getTempRet0() | 0);
 $221 = $207 & -67108864;
 $222 = (_i64Subtract(($188|0),($189|0),($221|0),($208|0))|0);
 $223 = (getTempRet0() | 0);
 $224 = (_i64Add(($202|0),($203|0),16777216,0)|0);
 $225 = (getTempRet0() | 0);
 $226 = (_bitshift64Ashr(($224|0),($225|0),25)|0);
 $227 = (getTempRet0() | 0);
 $228 = (_i64Add(($176|0),($177|0),($144|0),($145|0))|0);
 $229 = (getTempRet0() | 0);
 $230 = (_i64Add(($228|0),($229|0),($138|0),($139|0))|0);
 $231 = (getTempRet0() | 0);
 $232 = (_i64Add(($230|0),($231|0),($128|0),($129|0))|0);
 $233 = (getTempRet0() | 0);
 $234 = (_i64Add(($232|0),($233|0),($114|0),($115|0))|0);
 $235 = (getTempRet0() | 0);
 $236 = (_i64Add(($234|0),($235|0),($226|0),($227|0))|0);
 $237 = (getTempRet0() | 0);
 $238 = $224 & -33554432;
 $239 = (_i64Subtract(($202|0),($203|0),($238|0),0)|0);
 $240 = (getTempRet0() | 0);
 $241 = (_i64Add(($219|0),($220|0),16777216,0)|0);
 $242 = (getTempRet0() | 0);
 $243 = (_bitshift64Ashr(($241|0),($242|0),25)|0);
 $244 = (getTempRet0() | 0);
 $245 = (_i64Add(($100|0),($101|0),($86|0),($87|0))|0);
 $246 = (getTempRet0() | 0);
 $247 = (_i64Add(($245|0),($246|0),($66|0),($67|0))|0);
 $248 = (getTempRet0() | 0);
 $249 = (_i64Add(($247|0),($248|0),($38|0),($39|0))|0);
 $250 = (getTempRet0() | 0);
 $251 = (_i64Add(($249|0),($250|0),($160|0),($161|0))|0);
 $252 = (getTempRet0() | 0);
 $253 = (_i64Add(($251|0),($252|0),($158|0),($159|0))|0);
 $254 = (getTempRet0() | 0);
 $255 = (_i64Add(($253|0),($254|0),($243|0),($244|0))|0);
 $256 = (getTempRet0() | 0);
 $257 = $241 & -33554432;
 $258 = (_i64Subtract(($219|0),($220|0),($257|0),0)|0);
 $259 = (getTempRet0() | 0);
 $260 = (_i64Add(($236|0),($237|0),33554432,0)|0);
 $261 = (getTempRet0() | 0);
 $262 = (_bitshift64Ashr(($260|0),($261|0),26)|0);
 $263 = (getTempRet0() | 0);
 $264 = (_i64Add(($178|0),($179|0),($146|0),($147|0))|0);
 $265 = (getTempRet0() | 0);
 $266 = (_i64Add(($264|0),($265|0),($140|0),($141|0))|0);
 $267 = (getTempRet0() | 0);
 $268 = (_i64Add(($266|0),($267|0),($130|0),($131|0))|0);
 $269 = (getTempRet0() | 0);
 $270 = (_i64Add(($268|0),($269|0),($262|0),($263|0))|0);
 $271 = (getTempRet0() | 0);
 $272 = $260 & -67108864;
 $273 = (_i64Subtract(($236|0),($237|0),($272|0),0)|0);
 $274 = (getTempRet0() | 0);
 $275 = (_i64Add(($255|0),($256|0),33554432,0)|0);
 $276 = (getTempRet0() | 0);
 $277 = (_bitshift64Ashr(($275|0),($276|0),26)|0);
 $278 = (getTempRet0() | 0);
 $279 = (_i64Add(($88|0),($89|0),($102|0),($103|0))|0);
 $280 = (getTempRet0() | 0);
 $281 = (_i64Add(($279|0),($280|0),($68|0),($69|0))|0);
 $282 = (getTempRet0() | 0);
 $283 = (_i64Add(($281|0),($282|0),($42|0),($43|0))|0);
 $284 = (getTempRet0() | 0);
 $285 = (_i64Add(($283|0),($284|0),($162|0),($163|0))|0);
 $286 = (getTempRet0() | 0);
 $287 = (_i64Add(($285|0),($286|0),($277|0),($278|0))|0);
 $288 = (getTempRet0() | 0);
 $289 = $275 & -67108864;
 $290 = (_i64Subtract(($255|0),($256|0),($289|0),0)|0);
 $291 = (getTempRet0() | 0);
 $292 = (_i64Add(($270|0),($271|0),16777216,0)|0);
 $293 = (getTempRet0() | 0);
 $294 = (_bitshift64Ashr(($292|0),($293|0),25)|0);
 $295 = (getTempRet0() | 0);
 $296 = (_i64Add(($294|0),($295|0),($222|0),($223|0))|0);
 $297 = (getTempRet0() | 0);
 $298 = $292 & -33554432;
 $299 = (_i64Subtract(($270|0),($271|0),($298|0),0)|0);
 $300 = (getTempRet0() | 0);
 $301 = (_i64Add(($287|0),($288|0),16777216,0)|0);
 $302 = (getTempRet0() | 0);
 $303 = (_bitshift64Ashr(($301|0),($302|0),25)|0);
 $304 = (getTempRet0() | 0);
 $305 = (_i64Add(($90|0),($91|0),($116|0),($117|0))|0);
 $306 = (getTempRet0() | 0);
 $307 = (_i64Add(($305|0),($306|0),($104|0),($105|0))|0);
 $308 = (getTempRet0() | 0);
 $309 = (_i64Add(($307|0),($308|0),($72|0),($73|0))|0);
 $310 = (getTempRet0() | 0);
 $311 = (_i64Add(($309|0),($310|0),($46|0),($47|0))|0);
 $312 = (getTempRet0() | 0);
 $313 = (_i64Add(($311|0),($312|0),($164|0),($165|0))|0);
 $314 = (getTempRet0() | 0);
 $315 = (_i64Add(($313|0),($314|0),($303|0),($304|0))|0);
 $316 = (getTempRet0() | 0);
 $317 = $301 & -33554432;
 $318 = (_i64Subtract(($287|0),($288|0),($317|0),0)|0);
 $319 = (getTempRet0() | 0);
 $320 = (_i64Add(($296|0),($297|0),33554432,0)|0);
 $321 = (getTempRet0() | 0);
 $322 = (_bitshift64Lshr(($320|0),($321|0),26)|0);
 $323 = (getTempRet0() | 0);
 $324 = (_i64Add(($258|0),($259|0),($322|0),($323|0))|0);
 $325 = (getTempRet0() | 0);
 $326 = $320 & -67108864;
 $327 = (_i64Subtract(($296|0),($297|0),($326|0),0)|0);
 $328 = (getTempRet0() | 0);
 $329 = (_i64Add(($315|0),($316|0),33554432,0)|0);
 $330 = (getTempRet0() | 0);
 $331 = (_bitshift64Ashr(($329|0),($330|0),26)|0);
 $332 = (getTempRet0() | 0);
 $333 = (_i64Add(($106|0),($107|0),($120|0),($121|0))|0);
 $334 = (getTempRet0() | 0);
 $335 = (_i64Add(($333|0),($334|0),($92|0),($93|0))|0);
 $336 = (getTempRet0() | 0);
 $337 = (_i64Add(($335|0),($336|0),($74|0),($75|0))|0);
 $338 = (getTempRet0() | 0);
 $339 = (_i64Add(($337|0),($338|0),($50|0),($51|0))|0);
 $340 = (getTempRet0() | 0);
 $341 = (_i64Add(($339|0),($340|0),($331|0),($332|0))|0);
 $342 = (getTempRet0() | 0);
 $343 = $329 & -67108864;
 $344 = (_i64Subtract(($315|0),($316|0),($343|0),0)|0);
 $345 = (getTempRet0() | 0);
 $346 = (_i64Add(($341|0),($342|0),16777216,0)|0);
 $347 = (getTempRet0() | 0);
 $348 = (_bitshift64Ashr(($346|0),($347|0),25)|0);
 $349 = (getTempRet0() | 0);
 $350 = (___muldi3(($348|0),($349|0),19,0)|0);
 $351 = (getTempRet0() | 0);
 $352 = (_i64Add(($350|0),($351|0),($205|0),($206|0))|0);
 $353 = (getTempRet0() | 0);
 $354 = $346 & -33554432;
 $355 = (_i64Subtract(($341|0),($342|0),($354|0),0)|0);
 $356 = (getTempRet0() | 0);
 $357 = (_i64Add(($352|0),($353|0),33554432,0)|0);
 $358 = (getTempRet0() | 0);
 $359 = (_bitshift64Lshr(($357|0),($358|0),26)|0);
 $360 = (getTempRet0() | 0);
 $361 = (_i64Add(($239|0),($240|0),($359|0),($360|0))|0);
 $362 = (getTempRet0() | 0);
 $363 = $357 & -67108864;
 $364 = (_i64Subtract(($352|0),($353|0),($363|0),0)|0);
 $365 = (getTempRet0() | 0);
 HEAP32[$h>>2] = $364;
 $arrayidx291 = ((($h)) + 4|0);
 HEAP32[$arrayidx291>>2] = $361;
 $arrayidx293 = ((($h)) + 8|0);
 HEAP32[$arrayidx293>>2] = $273;
 $arrayidx295 = ((($h)) + 12|0);
 HEAP32[$arrayidx295>>2] = $299;
 $arrayidx297 = ((($h)) + 16|0);
 HEAP32[$arrayidx297>>2] = $327;
 $arrayidx299 = ((($h)) + 20|0);
 HEAP32[$arrayidx299>>2] = $324;
 $arrayidx301 = ((($h)) + 24|0);
 HEAP32[$arrayidx301>>2] = $290;
 $arrayidx303 = ((($h)) + 28|0);
 HEAP32[$arrayidx303>>2] = $318;
 $arrayidx305 = ((($h)) + 32|0);
 HEAP32[$arrayidx305>>2] = $344;
 $arrayidx307 = ((($h)) + 36|0);
 HEAP32[$arrayidx307>>2] = $355;
 return;
}
function _fe_sq2($h,$f) {
 $h = $h|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx301 = 0, $arrayidx303 = 0, $arrayidx305 = 0, $arrayidx307 = 0, $arrayidx309 = 0, $arrayidx311 = 0, $arrayidx313 = 0, $arrayidx315 = 0, $arrayidx317 = 0, $arrayidx4 = 0, $arrayidx5 = 0;
 var $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $mul = 0, $mul10 = 0, $mul11 = 0, $mul12 = 0, $mul13 = 0, $mul14 = 0, $mul15 = 0, $mul16 = 0, $mul17 = 0, $mul18 = 0, $mul19 = 0, $mul20 = 0, $mul21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $arrayidx1 = ((($f)) + 4|0);
 $1 = HEAP32[$arrayidx1>>2]|0;
 $arrayidx2 = ((($f)) + 8|0);
 $2 = HEAP32[$arrayidx2>>2]|0;
 $arrayidx3 = ((($f)) + 12|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $arrayidx4 = ((($f)) + 16|0);
 $4 = HEAP32[$arrayidx4>>2]|0;
 $arrayidx5 = ((($f)) + 20|0);
 $5 = HEAP32[$arrayidx5>>2]|0;
 $arrayidx6 = ((($f)) + 24|0);
 $6 = HEAP32[$arrayidx6>>2]|0;
 $arrayidx7 = ((($f)) + 28|0);
 $7 = HEAP32[$arrayidx7>>2]|0;
 $arrayidx8 = ((($f)) + 32|0);
 $8 = HEAP32[$arrayidx8>>2]|0;
 $arrayidx9 = ((($f)) + 36|0);
 $9 = HEAP32[$arrayidx9>>2]|0;
 $mul = $0 << 1;
 $mul10 = $1 << 1;
 $mul11 = $2 << 1;
 $mul12 = $3 << 1;
 $mul13 = $4 << 1;
 $mul14 = $5 << 1;
 $mul15 = $6 << 1;
 $mul16 = $7 << 1;
 $mul17 = ($5*38)|0;
 $mul18 = ($6*19)|0;
 $mul19 = ($7*38)|0;
 $mul20 = ($8*19)|0;
 $mul21 = ($9*38)|0;
 $10 = ($0|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = (___muldi3(($0|0),($11|0),($0|0),($11|0))|0);
 $13 = (getTempRet0() | 0);
 $14 = ($mul|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = ($1|0)<(0);
 $17 = $16 << 31 >> 31;
 $18 = (___muldi3(($mul|0),($15|0),($1|0),($17|0))|0);
 $19 = (getTempRet0() | 0);
 $20 = ($2|0)<(0);
 $21 = $20 << 31 >> 31;
 $22 = (___muldi3(($2|0),($21|0),($mul|0),($15|0))|0);
 $23 = (getTempRet0() | 0);
 $24 = ($3|0)<(0);
 $25 = $24 << 31 >> 31;
 $26 = (___muldi3(($3|0),($25|0),($mul|0),($15|0))|0);
 $27 = (getTempRet0() | 0);
 $28 = ($4|0)<(0);
 $29 = $28 << 31 >> 31;
 $30 = (___muldi3(($4|0),($29|0),($mul|0),($15|0))|0);
 $31 = (getTempRet0() | 0);
 $32 = ($5|0)<(0);
 $33 = $32 << 31 >> 31;
 $34 = (___muldi3(($5|0),($33|0),($mul|0),($15|0))|0);
 $35 = (getTempRet0() | 0);
 $36 = ($6|0)<(0);
 $37 = $36 << 31 >> 31;
 $38 = (___muldi3(($6|0),($37|0),($mul|0),($15|0))|0);
 $39 = (getTempRet0() | 0);
 $40 = ($7|0)<(0);
 $41 = $40 << 31 >> 31;
 $42 = (___muldi3(($7|0),($41|0),($mul|0),($15|0))|0);
 $43 = (getTempRet0() | 0);
 $44 = ($8|0)<(0);
 $45 = $44 << 31 >> 31;
 $46 = (___muldi3(($8|0),($45|0),($mul|0),($15|0))|0);
 $47 = (getTempRet0() | 0);
 $48 = ($9|0)<(0);
 $49 = $48 << 31 >> 31;
 $50 = (___muldi3(($9|0),($49|0),($mul|0),($15|0))|0);
 $51 = (getTempRet0() | 0);
 $52 = ($mul10|0)<(0);
 $53 = $52 << 31 >> 31;
 $54 = (___muldi3(($mul10|0),($53|0),($1|0),($17|0))|0);
 $55 = (getTempRet0() | 0);
 $56 = (___muldi3(($mul10|0),($53|0),($2|0),($21|0))|0);
 $57 = (getTempRet0() | 0);
 $58 = ($mul12|0)<(0);
 $59 = $58 << 31 >> 31;
 $60 = (___muldi3(($mul12|0),($59|0),($mul10|0),($53|0))|0);
 $61 = (getTempRet0() | 0);
 $62 = (___muldi3(($4|0),($29|0),($mul10|0),($53|0))|0);
 $63 = (getTempRet0() | 0);
 $64 = ($mul14|0)<(0);
 $65 = $64 << 31 >> 31;
 $66 = (___muldi3(($mul14|0),($65|0),($mul10|0),($53|0))|0);
 $67 = (getTempRet0() | 0);
 $68 = (___muldi3(($6|0),($37|0),($mul10|0),($53|0))|0);
 $69 = (getTempRet0() | 0);
 $70 = ($mul16|0)<(0);
 $71 = $70 << 31 >> 31;
 $72 = (___muldi3(($mul16|0),($71|0),($mul10|0),($53|0))|0);
 $73 = (getTempRet0() | 0);
 $74 = (___muldi3(($8|0),($45|0),($mul10|0),($53|0))|0);
 $75 = (getTempRet0() | 0);
 $76 = ($mul21|0)<(0);
 $77 = $76 << 31 >> 31;
 $78 = (___muldi3(($mul21|0),($77|0),($mul10|0),($53|0))|0);
 $79 = (getTempRet0() | 0);
 $80 = (___muldi3(($2|0),($21|0),($2|0),($21|0))|0);
 $81 = (getTempRet0() | 0);
 $82 = ($mul11|0)<(0);
 $83 = $82 << 31 >> 31;
 $84 = (___muldi3(($mul11|0),($83|0),($3|0),($25|0))|0);
 $85 = (getTempRet0() | 0);
 $86 = (___muldi3(($4|0),($29|0),($mul11|0),($83|0))|0);
 $87 = (getTempRet0() | 0);
 $88 = (___muldi3(($5|0),($33|0),($mul11|0),($83|0))|0);
 $89 = (getTempRet0() | 0);
 $90 = (___muldi3(($6|0),($37|0),($mul11|0),($83|0))|0);
 $91 = (getTempRet0() | 0);
 $92 = (___muldi3(($7|0),($41|0),($mul11|0),($83|0))|0);
 $93 = (getTempRet0() | 0);
 $94 = ($mul20|0)<(0);
 $95 = $94 << 31 >> 31;
 $96 = (___muldi3(($mul20|0),($95|0),($mul11|0),($83|0))|0);
 $97 = (getTempRet0() | 0);
 $98 = (___muldi3(($mul21|0),($77|0),($2|0),($21|0))|0);
 $99 = (getTempRet0() | 0);
 $100 = (___muldi3(($mul12|0),($59|0),($3|0),($25|0))|0);
 $101 = (getTempRet0() | 0);
 $102 = (___muldi3(($mul12|0),($59|0),($4|0),($29|0))|0);
 $103 = (getTempRet0() | 0);
 $104 = (___muldi3(($mul14|0),($65|0),($mul12|0),($59|0))|0);
 $105 = (getTempRet0() | 0);
 $106 = (___muldi3(($6|0),($37|0),($mul12|0),($59|0))|0);
 $107 = (getTempRet0() | 0);
 $108 = ($mul19|0)<(0);
 $109 = $108 << 31 >> 31;
 $110 = (___muldi3(($mul19|0),($109|0),($mul12|0),($59|0))|0);
 $111 = (getTempRet0() | 0);
 $112 = (___muldi3(($mul20|0),($95|0),($mul12|0),($59|0))|0);
 $113 = (getTempRet0() | 0);
 $114 = (___muldi3(($mul21|0),($77|0),($mul12|0),($59|0))|0);
 $115 = (getTempRet0() | 0);
 $116 = (___muldi3(($4|0),($29|0),($4|0),($29|0))|0);
 $117 = (getTempRet0() | 0);
 $118 = ($mul13|0)<(0);
 $119 = $118 << 31 >> 31;
 $120 = (___muldi3(($mul13|0),($119|0),($5|0),($33|0))|0);
 $121 = (getTempRet0() | 0);
 $122 = ($mul18|0)<(0);
 $123 = $122 << 31 >> 31;
 $124 = (___muldi3(($mul18|0),($123|0),($mul13|0),($119|0))|0);
 $125 = (getTempRet0() | 0);
 $126 = (___muldi3(($mul19|0),($109|0),($4|0),($29|0))|0);
 $127 = (getTempRet0() | 0);
 $128 = (___muldi3(($mul20|0),($95|0),($mul13|0),($119|0))|0);
 $129 = (getTempRet0() | 0);
 $130 = (___muldi3(($mul21|0),($77|0),($4|0),($29|0))|0);
 $131 = (getTempRet0() | 0);
 $132 = ($mul17|0)<(0);
 $133 = $132 << 31 >> 31;
 $134 = (___muldi3(($mul17|0),($133|0),($5|0),($33|0))|0);
 $135 = (getTempRet0() | 0);
 $136 = (___muldi3(($mul18|0),($123|0),($mul14|0),($65|0))|0);
 $137 = (getTempRet0() | 0);
 $138 = (___muldi3(($mul19|0),($109|0),($mul14|0),($65|0))|0);
 $139 = (getTempRet0() | 0);
 $140 = (___muldi3(($mul20|0),($95|0),($mul14|0),($65|0))|0);
 $141 = (getTempRet0() | 0);
 $142 = (___muldi3(($mul21|0),($77|0),($mul14|0),($65|0))|0);
 $143 = (getTempRet0() | 0);
 $144 = (___muldi3(($mul18|0),($123|0),($6|0),($37|0))|0);
 $145 = (getTempRet0() | 0);
 $146 = (___muldi3(($mul19|0),($109|0),($6|0),($37|0))|0);
 $147 = (getTempRet0() | 0);
 $148 = ($mul15|0)<(0);
 $149 = $148 << 31 >> 31;
 $150 = (___muldi3(($mul20|0),($95|0),($mul15|0),($149|0))|0);
 $151 = (getTempRet0() | 0);
 $152 = (___muldi3(($mul21|0),($77|0),($6|0),($37|0))|0);
 $153 = (getTempRet0() | 0);
 $154 = (___muldi3(($mul19|0),($109|0),($7|0),($41|0))|0);
 $155 = (getTempRet0() | 0);
 $156 = (___muldi3(($mul20|0),($95|0),($mul16|0),($71|0))|0);
 $157 = (getTempRet0() | 0);
 $158 = (___muldi3(($mul21|0),($77|0),($mul16|0),($71|0))|0);
 $159 = (getTempRet0() | 0);
 $160 = (___muldi3(($mul20|0),($95|0),($8|0),($45|0))|0);
 $161 = (getTempRet0() | 0);
 $162 = (___muldi3(($mul21|0),($77|0),($8|0),($45|0))|0);
 $163 = (getTempRet0() | 0);
 $164 = (___muldi3(($mul21|0),($77|0),($9|0),($49|0))|0);
 $165 = (getTempRet0() | 0);
 $166 = (_i64Add(($134|0),($135|0),($12|0),($13|0))|0);
 $167 = (getTempRet0() | 0);
 $168 = (_i64Add(($166|0),($167|0),($124|0),($125|0))|0);
 $169 = (getTempRet0() | 0);
 $170 = (_i64Add(($168|0),($169|0),($110|0),($111|0))|0);
 $171 = (getTempRet0() | 0);
 $172 = (_i64Add(($170|0),($171|0),($96|0),($97|0))|0);
 $173 = (getTempRet0() | 0);
 $174 = (_i64Add(($172|0),($173|0),($78|0),($79|0))|0);
 $175 = (getTempRet0() | 0);
 $176 = (_i64Add(($136|0),($137|0),($18|0),($19|0))|0);
 $177 = (getTempRet0() | 0);
 $178 = (_i64Add(($176|0),($177|0),($126|0),($127|0))|0);
 $179 = (getTempRet0() | 0);
 $180 = (_i64Add(($178|0),($179|0),($112|0),($113|0))|0);
 $181 = (getTempRet0() | 0);
 $182 = (_i64Add(($180|0),($181|0),($98|0),($99|0))|0);
 $183 = (getTempRet0() | 0);
 $184 = (_i64Add(($22|0),($23|0),($54|0),($55|0))|0);
 $185 = (getTempRet0() | 0);
 $186 = (_i64Add(($184|0),($185|0),($144|0),($145|0))|0);
 $187 = (getTempRet0() | 0);
 $188 = (_i64Add(($186|0),($187|0),($138|0),($139|0))|0);
 $189 = (getTempRet0() | 0);
 $190 = (_i64Add(($188|0),($189|0),($128|0),($129|0))|0);
 $191 = (getTempRet0() | 0);
 $192 = (_i64Add(($190|0),($191|0),($114|0),($115|0))|0);
 $193 = (getTempRet0() | 0);
 $194 = (_i64Add(($26|0),($27|0),($56|0),($57|0))|0);
 $195 = (getTempRet0() | 0);
 $196 = (_i64Add(($194|0),($195|0),($146|0),($147|0))|0);
 $197 = (getTempRet0() | 0);
 $198 = (_i64Add(($196|0),($197|0),($140|0),($141|0))|0);
 $199 = (getTempRet0() | 0);
 $200 = (_i64Add(($198|0),($199|0),($130|0),($131|0))|0);
 $201 = (getTempRet0() | 0);
 $202 = (_i64Add(($60|0),($61|0),($80|0),($81|0))|0);
 $203 = (getTempRet0() | 0);
 $204 = (_i64Add(($202|0),($203|0),($30|0),($31|0))|0);
 $205 = (getTempRet0() | 0);
 $206 = (_i64Add(($204|0),($205|0),($154|0),($155|0))|0);
 $207 = (getTempRet0() | 0);
 $208 = (_i64Add(($206|0),($207|0),($150|0),($151|0))|0);
 $209 = (getTempRet0() | 0);
 $210 = (_i64Add(($208|0),($209|0),($142|0),($143|0))|0);
 $211 = (getTempRet0() | 0);
 $212 = (_i64Add(($62|0),($63|0),($84|0),($85|0))|0);
 $213 = (getTempRet0() | 0);
 $214 = (_i64Add(($212|0),($213|0),($34|0),($35|0))|0);
 $215 = (getTempRet0() | 0);
 $216 = (_i64Add(($214|0),($215|0),($156|0),($157|0))|0);
 $217 = (getTempRet0() | 0);
 $218 = (_i64Add(($216|0),($217|0),($152|0),($153|0))|0);
 $219 = (getTempRet0() | 0);
 $220 = (_i64Add(($100|0),($101|0),($86|0),($87|0))|0);
 $221 = (getTempRet0() | 0);
 $222 = (_i64Add(($220|0),($221|0),($66|0),($67|0))|0);
 $223 = (getTempRet0() | 0);
 $224 = (_i64Add(($222|0),($223|0),($38|0),($39|0))|0);
 $225 = (getTempRet0() | 0);
 $226 = (_i64Add(($224|0),($225|0),($160|0),($161|0))|0);
 $227 = (getTempRet0() | 0);
 $228 = (_i64Add(($226|0),($227|0),($158|0),($159|0))|0);
 $229 = (getTempRet0() | 0);
 $230 = (_i64Add(($88|0),($89|0),($102|0),($103|0))|0);
 $231 = (getTempRet0() | 0);
 $232 = (_i64Add(($230|0),($231|0),($68|0),($69|0))|0);
 $233 = (getTempRet0() | 0);
 $234 = (_i64Add(($232|0),($233|0),($42|0),($43|0))|0);
 $235 = (getTempRet0() | 0);
 $236 = (_i64Add(($234|0),($235|0),($162|0),($163|0))|0);
 $237 = (getTempRet0() | 0);
 $238 = (_i64Add(($90|0),($91|0),($116|0),($117|0))|0);
 $239 = (getTempRet0() | 0);
 $240 = (_i64Add(($238|0),($239|0),($104|0),($105|0))|0);
 $241 = (getTempRet0() | 0);
 $242 = (_i64Add(($240|0),($241|0),($72|0),($73|0))|0);
 $243 = (getTempRet0() | 0);
 $244 = (_i64Add(($242|0),($243|0),($46|0),($47|0))|0);
 $245 = (getTempRet0() | 0);
 $246 = (_i64Add(($244|0),($245|0),($164|0),($165|0))|0);
 $247 = (getTempRet0() | 0);
 $248 = (_i64Add(($106|0),($107|0),($120|0),($121|0))|0);
 $249 = (getTempRet0() | 0);
 $250 = (_i64Add(($248|0),($249|0),($92|0),($93|0))|0);
 $251 = (getTempRet0() | 0);
 $252 = (_i64Add(($250|0),($251|0),($74|0),($75|0))|0);
 $253 = (getTempRet0() | 0);
 $254 = (_i64Add(($252|0),($253|0),($50|0),($51|0))|0);
 $255 = (getTempRet0() | 0);
 $256 = (_bitshift64Shl(($174|0),($175|0),1)|0);
 $257 = (getTempRet0() | 0);
 $258 = (_bitshift64Shl(($182|0),($183|0),1)|0);
 $259 = (getTempRet0() | 0);
 $260 = (_bitshift64Shl(($192|0),($193|0),1)|0);
 $261 = (getTempRet0() | 0);
 $262 = (_bitshift64Shl(($200|0),($201|0),1)|0);
 $263 = (getTempRet0() | 0);
 $264 = (_bitshift64Shl(($210|0),($211|0),1)|0);
 $265 = (getTempRet0() | 0);
 $266 = (_bitshift64Shl(($218|0),($219|0),1)|0);
 $267 = (getTempRet0() | 0);
 $268 = (_bitshift64Shl(($228|0),($229|0),1)|0);
 $269 = (getTempRet0() | 0);
 $270 = (_bitshift64Shl(($236|0),($237|0),1)|0);
 $271 = (getTempRet0() | 0);
 $272 = (_bitshift64Shl(($246|0),($247|0),1)|0);
 $273 = (getTempRet0() | 0);
 $274 = (_bitshift64Shl(($254|0),($255|0),1)|0);
 $275 = (getTempRet0() | 0);
 $276 = (_i64Add(($256|0),($257|0),33554432,0)|0);
 $277 = (getTempRet0() | 0);
 $278 = (_bitshift64Ashr(($276|0),($277|0),26)|0);
 $279 = (getTempRet0() | 0);
 $280 = (_i64Add(($278|0),($279|0),($258|0),($259|0))|0);
 $281 = (getTempRet0() | 0);
 $282 = $276 & -67108864;
 $283 = (_i64Subtract(($256|0),($257|0),($282|0),($277|0))|0);
 $284 = (getTempRet0() | 0);
 $285 = (_i64Add(($264|0),($265|0),33554432,0)|0);
 $286 = (getTempRet0() | 0);
 $287 = (_bitshift64Ashr(($285|0),($286|0),26)|0);
 $288 = (getTempRet0() | 0);
 $289 = (_i64Add(($287|0),($288|0),($266|0),($267|0))|0);
 $290 = (getTempRet0() | 0);
 $291 = $285 & -67108864;
 $292 = (_i64Subtract(($264|0),($265|0),($291|0),($286|0))|0);
 $293 = (getTempRet0() | 0);
 $294 = (_i64Add(($280|0),($281|0),16777216,0)|0);
 $295 = (getTempRet0() | 0);
 $296 = (_bitshift64Ashr(($294|0),($295|0),25)|0);
 $297 = (getTempRet0() | 0);
 $298 = (_i64Add(($296|0),($297|0),($260|0),($261|0))|0);
 $299 = (getTempRet0() | 0);
 $300 = $294 & -33554432;
 $301 = (_i64Subtract(($280|0),($281|0),($300|0),0)|0);
 $302 = (getTempRet0() | 0);
 $303 = (_i64Add(($289|0),($290|0),16777216,0)|0);
 $304 = (getTempRet0() | 0);
 $305 = (_bitshift64Ashr(($303|0),($304|0),25)|0);
 $306 = (getTempRet0() | 0);
 $307 = (_i64Add(($305|0),($306|0),($268|0),($269|0))|0);
 $308 = (getTempRet0() | 0);
 $309 = $303 & -33554432;
 $310 = (_i64Subtract(($289|0),($290|0),($309|0),0)|0);
 $311 = (getTempRet0() | 0);
 $312 = (_i64Add(($298|0),($299|0),33554432,0)|0);
 $313 = (getTempRet0() | 0);
 $314 = (_bitshift64Ashr(($312|0),($313|0),26)|0);
 $315 = (getTempRet0() | 0);
 $316 = (_i64Add(($314|0),($315|0),($262|0),($263|0))|0);
 $317 = (getTempRet0() | 0);
 $318 = $312 & -67108864;
 $319 = (_i64Subtract(($298|0),($299|0),($318|0),0)|0);
 $320 = (getTempRet0() | 0);
 $321 = (_i64Add(($307|0),($308|0),33554432,0)|0);
 $322 = (getTempRet0() | 0);
 $323 = (_bitshift64Ashr(($321|0),($322|0),26)|0);
 $324 = (getTempRet0() | 0);
 $325 = (_i64Add(($323|0),($324|0),($270|0),($271|0))|0);
 $326 = (getTempRet0() | 0);
 $327 = $321 & -67108864;
 $328 = (_i64Subtract(($307|0),($308|0),($327|0),0)|0);
 $329 = (getTempRet0() | 0);
 $330 = (_i64Add(($316|0),($317|0),16777216,0)|0);
 $331 = (getTempRet0() | 0);
 $332 = (_bitshift64Ashr(($330|0),($331|0),25)|0);
 $333 = (getTempRet0() | 0);
 $334 = (_i64Add(($332|0),($333|0),($292|0),($293|0))|0);
 $335 = (getTempRet0() | 0);
 $336 = $330 & -33554432;
 $337 = (_i64Subtract(($316|0),($317|0),($336|0),0)|0);
 $338 = (getTempRet0() | 0);
 $339 = (_i64Add(($325|0),($326|0),16777216,0)|0);
 $340 = (getTempRet0() | 0);
 $341 = (_bitshift64Ashr(($339|0),($340|0),25)|0);
 $342 = (getTempRet0() | 0);
 $343 = (_i64Add(($341|0),($342|0),($272|0),($273|0))|0);
 $344 = (getTempRet0() | 0);
 $345 = $339 & -33554432;
 $346 = (_i64Subtract(($325|0),($326|0),($345|0),0)|0);
 $347 = (getTempRet0() | 0);
 $348 = (_i64Add(($334|0),($335|0),33554432,0)|0);
 $349 = (getTempRet0() | 0);
 $350 = (_bitshift64Lshr(($348|0),($349|0),26)|0);
 $351 = (getTempRet0() | 0);
 $352 = (_i64Add(($310|0),($311|0),($350|0),($351|0))|0);
 $353 = (getTempRet0() | 0);
 $354 = $348 & -67108864;
 $355 = (_i64Subtract(($334|0),($335|0),($354|0),0)|0);
 $356 = (getTempRet0() | 0);
 $357 = (_i64Add(($343|0),($344|0),33554432,0)|0);
 $358 = (getTempRet0() | 0);
 $359 = (_bitshift64Ashr(($357|0),($358|0),26)|0);
 $360 = (getTempRet0() | 0);
 $361 = (_i64Add(($359|0),($360|0),($274|0),($275|0))|0);
 $362 = (getTempRet0() | 0);
 $363 = $357 & -67108864;
 $364 = (_i64Subtract(($343|0),($344|0),($363|0),0)|0);
 $365 = (getTempRet0() | 0);
 $366 = (_i64Add(($361|0),($362|0),16777216,0)|0);
 $367 = (getTempRet0() | 0);
 $368 = (_bitshift64Ashr(($366|0),($367|0),25)|0);
 $369 = (getTempRet0() | 0);
 $370 = (___muldi3(($368|0),($369|0),19,0)|0);
 $371 = (getTempRet0() | 0);
 $372 = (_i64Add(($370|0),($371|0),($283|0),($284|0))|0);
 $373 = (getTempRet0() | 0);
 $374 = $366 & -33554432;
 $375 = (_i64Subtract(($361|0),($362|0),($374|0),0)|0);
 $376 = (getTempRet0() | 0);
 $377 = (_i64Add(($372|0),($373|0),33554432,0)|0);
 $378 = (getTempRet0() | 0);
 $379 = (_bitshift64Lshr(($377|0),($378|0),26)|0);
 $380 = (getTempRet0() | 0);
 $381 = (_i64Add(($301|0),($302|0),($379|0),($380|0))|0);
 $382 = (getTempRet0() | 0);
 $383 = $377 & -67108864;
 $384 = (_i64Subtract(($372|0),($373|0),($383|0),0)|0);
 $385 = (getTempRet0() | 0);
 HEAP32[$h>>2] = $384;
 $arrayidx301 = ((($h)) + 4|0);
 HEAP32[$arrayidx301>>2] = $381;
 $arrayidx303 = ((($h)) + 8|0);
 HEAP32[$arrayidx303>>2] = $319;
 $arrayidx305 = ((($h)) + 12|0);
 HEAP32[$arrayidx305>>2] = $337;
 $arrayidx307 = ((($h)) + 16|0);
 HEAP32[$arrayidx307>>2] = $355;
 $arrayidx309 = ((($h)) + 20|0);
 HEAP32[$arrayidx309>>2] = $352;
 $arrayidx311 = ((($h)) + 24|0);
 HEAP32[$arrayidx311>>2] = $328;
 $arrayidx313 = ((($h)) + 28|0);
 HEAP32[$arrayidx313>>2] = $346;
 $arrayidx315 = ((($h)) + 32|0);
 HEAP32[$arrayidx315>>2] = $364;
 $arrayidx317 = ((($h)) + 36|0);
 HEAP32[$arrayidx317>>2] = $375;
 return;
}
function _ge_p1p1_to_p3($r,$p) {
 $r = $r|0;
 $p = $p|0;
 var $arraydecay15 = 0, $arraydecay3 = 0, $arraydecay4 = 0, $arraydecay6 = 0, $arraydecay7 = 0, $arraydecay9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay3 = ((($p)) + 120|0);
 _fe_mul($r,$p,$arraydecay3);
 $arraydecay4 = ((($r)) + 40|0);
 $arraydecay6 = ((($p)) + 40|0);
 $arraydecay7 = ((($p)) + 80|0);
 _fe_mul($arraydecay4,$arraydecay6,$arraydecay7);
 $arraydecay9 = ((($r)) + 80|0);
 _fe_mul($arraydecay9,$arraydecay7,$arraydecay3);
 $arraydecay15 = ((($r)) + 120|0);
 _fe_mul($arraydecay15,$p,$arraydecay6);
 return;
}
function _ge_double_scalarmult_base_vartime($r,$a,$A,$b) {
 $r = $r|0;
 $a = $a|0;
 $A = $A|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $Ai = 0, $add$i$i = 0, $add$i107$i = 0, $add$i181$i = 0, $add$i43$i = 0, $add20$i$i = 0, $add20$i108$i = 0, $add20$i182$i = 0, $add20$i44$i = 0, $add21$i$i = 0;
 var $add21$i109$i = 0, $add21$i183$i = 0, $add21$i45$i = 0, $add22$i$i = 0, $add22$i110$i = 0, $add22$i184$i = 0, $add22$i46$i = 0, $add23$i$i = 0, $add23$i111$i = 0, $add23$i185$i = 0, $add23$i47$i = 0, $add24$i$i = 0, $add24$i112$i = 0, $add24$i186$i = 0, $add24$i48$i = 0, $add25$i$i = 0, $add25$i113$i = 0, $add25$i187$i = 0, $add25$i49$i = 0, $add26$i$i = 0;
 var $add26$i114$i = 0, $add26$i188$i = 0, $add26$i50$i = 0, $add27$i$i = 0, $add27$i115$i = 0, $add27$i189$i = 0, $add27$i51$i = 0, $add28$i$i = 0, $add28$i116$i = 0, $add28$i190$i = 0, $add28$i52$i = 0, $arraydecay1$i = 0, $arraydecay13$i = 0, $arraydecay15$i = 0, $arraydecay18$i = 0, $arraydecay2$i = 0, $arraydecay20$i = 0, $arraydecay3$i20 = 0, $arraydecay4$i21 = 0, $arraydecay6$i22 = 0;
 var $arraydecay7$i23 = 0, $arraydecay9$i24 = 0, $arrayidx = 0, $arrayidx1$i$i = 0, $arrayidx1$i$i52 = 0, $arrayidx1$i126$i = 0, $arrayidx1$i163$i = 0, $arrayidx1$i3$i = 0, $arrayidx10 = 0, $arrayidx11$i$i = 0, $arrayidx11$i71$i = 0, $arrayidx12$i$i = 0, $arrayidx12$i72$i = 0, $arrayidx13$i$i = 0, $arrayidx13$i73$i = 0, $arrayidx14$i$i = 0, $arrayidx14$i74$i = 0, $arrayidx15$i$i = 0, $arrayidx15$i75$i = 0, $arrayidx16$i$i = 0;
 var $arrayidx16$i76$i = 0, $arrayidx17 = 0, $arrayidx17$i$i = 0, $arrayidx17$i77$i = 0, $arrayidx18$i$i = 0, $arrayidx18$i78$i = 0, $arrayidx19$i$i = 0, $arrayidx19$i79$i = 0, $arrayidx2$i$i = 0, $arrayidx2$i127$i = 0, $arrayidx2$i164$i = 0, $arrayidx26 = 0, $arrayidx29 = 0, $arrayidx3 = 0, $arrayidx3$i$i = 0, $arrayidx3$i128$i = 0, $arrayidx3$i165$i = 0, $arrayidx30$i$i = 0, $arrayidx30$i228$i = 0, $arrayidx31$i$i = 0;
 var $arrayidx31$i229$i = 0, $arrayidx32$i$i = 0, $arrayidx32$i230$i = 0, $arrayidx33$i$i = 0, $arrayidx33$i231$i = 0, $arrayidx34$i$i = 0, $arrayidx34$i232$i = 0, $arrayidx35$i$i = 0, $arrayidx35$i233$i = 0, $arrayidx36$i$i = 0, $arrayidx36$i234$i = 0, $arrayidx37 = 0, $arrayidx37$i$i = 0, $arrayidx37$i235$i = 0, $arrayidx38$i$i = 0, $arrayidx38$i236$i = 0, $arrayidx4$i$i = 0, $arrayidx4$i129$i = 0, $arrayidx4$i166$i = 0, $arrayidx5$i$i = 0;
 var $arrayidx5$i130$i = 0, $arrayidx5$i167$i = 0, $arrayidx6$i$i = 0, $arrayidx6$i131$i = 0, $arrayidx6$i168$i = 0, $arrayidx7$i$i = 0, $arrayidx7$i132$i = 0, $arrayidx7$i169$i = 0, $arrayidx8$i$i = 0, $arrayidx8$i133$i = 0, $arrayidx8$i170$i = 0, $arrayidx9$i$i = 0, $arrayidx9$i134$i = 0, $arrayidx9$i171$i = 0, $aslide = 0, $bslide = 0, $cmp = 0, $cmp12 = 0, $cmp20 = 0, $cmp31 = 0;
 var $cmp41 = 0, $cmp7 = 0, $cmp753 = 0, $dec = 0, $dec52 = 0, $div25 = 0, $div47 = 0, $i$055 = 0, $i$154 = 0, $sub$i$i = 0, $sub$i144$i = 0, $sub$i218$i = 0, $sub20$i$i = 0, $sub20$i145$i = 0, $sub20$i219$i = 0, $sub21$i$i = 0, $sub21$i146$i = 0, $sub21$i220$i = 0, $sub22$i$i = 0, $sub22$i147$i = 0;
 var $sub22$i221$i = 0, $sub23$i$i = 0, $sub23$i148$i = 0, $sub23$i222$i = 0, $sub24$i$i = 0, $sub24$i149$i = 0, $sub24$i223$i = 0, $sub25$i$i = 0, $sub25$i150$i = 0, $sub25$i224$i = 0, $sub26$i$i = 0, $sub26$i151$i = 0, $sub26$i225$i = 0, $sub27$i$i = 0, $sub27$i152$i = 0, $sub27$i226$i = 0, $sub28$i$i = 0, $sub28$i153$i = 0, $sub28$i227$i = 0, $t = 0;
 var $tobool = 0, $tobool5 = 0, $u = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0;
 $aslide = sp + 1536|0;
 $bslide = sp + 1280|0;
 $Ai = sp;
 $t = sp + 1952|0;
 $u = sp + 1792|0;
 _slide($aslide,$a);
 _slide($bslide,$b);
 _ge_dsm_precomp($Ai,$A);
 dest=$r; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay1$i = ((($r)) + 40|0);
 HEAP32[$arraydecay1$i>>2] = 1;
 $arrayidx1$i3$i = ((($r)) + 44|0);
 dest=$arrayidx1$i3$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay2$i = ((($r)) + 80|0);
 HEAP32[$arraydecay2$i>>2] = 1;
 $arrayidx1$i$i = ((($r)) + 84|0);
 dest=$arrayidx1$i$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i$055 = 255;
 while(1) {
  $arrayidx = (($aslide) + ($i$055)|0);
  $0 = HEAP8[$arrayidx>>0]|0;
  $tobool = ($0<<24>>24)==(0);
  if (!($tobool)) {
   break;
  }
  $arrayidx3 = (($bslide) + ($i$055)|0);
  $1 = HEAP8[$arrayidx3>>0]|0;
  $tobool5 = ($1<<24>>24)==(0);
  if (!($tobool5)) {
   break;
  }
  $dec = (($i$055) + -1)|0;
  $cmp = ($i$055|0)==(0);
  if ($cmp) {
   label = 16;
   break;
  } else {
   $i$055 = $dec;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
 $cmp753 = ($i$055|0)>(-1);
 if (!($cmp753)) {
  STACKTOP = sp;return;
 }
 $arraydecay3$i20 = ((($t)) + 120|0);
 $arraydecay4$i21 = ((($u)) + 40|0);
 $arraydecay6$i22 = ((($t)) + 40|0);
 $arraydecay7$i23 = ((($t)) + 80|0);
 $arraydecay9$i24 = ((($u)) + 80|0);
 $arraydecay15$i = ((($u)) + 120|0);
 $arrayidx1$i$i52 = ((($u)) + 44|0);
 $arrayidx2$i$i = ((($u)) + 48|0);
 $arrayidx3$i$i = ((($u)) + 52|0);
 $arrayidx4$i$i = ((($u)) + 56|0);
 $arrayidx5$i$i = ((($u)) + 60|0);
 $arrayidx6$i$i = ((($u)) + 64|0);
 $arrayidx7$i$i = ((($u)) + 68|0);
 $arrayidx8$i$i = ((($u)) + 72|0);
 $arrayidx9$i$i = ((($u)) + 76|0);
 $arrayidx11$i$i = ((($u)) + 4|0);
 $arrayidx12$i$i = ((($u)) + 8|0);
 $arrayidx13$i$i = ((($u)) + 12|0);
 $arrayidx14$i$i = ((($u)) + 16|0);
 $arrayidx15$i$i = ((($u)) + 20|0);
 $arrayidx16$i$i = ((($u)) + 24|0);
 $arrayidx17$i$i = ((($u)) + 28|0);
 $arrayidx18$i$i = ((($u)) + 32|0);
 $arrayidx19$i$i = ((($u)) + 36|0);
 $arrayidx30$i$i = ((($t)) + 4|0);
 $arrayidx31$i$i = ((($t)) + 8|0);
 $arrayidx32$i$i = ((($t)) + 12|0);
 $arrayidx33$i$i = ((($t)) + 16|0);
 $arrayidx34$i$i = ((($t)) + 20|0);
 $arrayidx35$i$i = ((($t)) + 24|0);
 $arrayidx36$i$i = ((($t)) + 28|0);
 $arrayidx37$i$i = ((($t)) + 32|0);
 $arrayidx38$i$i = ((($t)) + 36|0);
 $arrayidx30$i228$i = ((($t)) + 44|0);
 $arrayidx31$i229$i = ((($t)) + 48|0);
 $arrayidx32$i230$i = ((($t)) + 52|0);
 $arrayidx33$i231$i = ((($t)) + 56|0);
 $arrayidx34$i232$i = ((($t)) + 60|0);
 $arrayidx35$i233$i = ((($t)) + 64|0);
 $arrayidx36$i234$i = ((($t)) + 68|0);
 $arrayidx37$i235$i = ((($t)) + 72|0);
 $arrayidx38$i236$i = ((($t)) + 76|0);
 $arrayidx1$i163$i = ((($u)) + 84|0);
 $arrayidx2$i164$i = ((($u)) + 88|0);
 $arrayidx3$i165$i = ((($u)) + 92|0);
 $arrayidx4$i166$i = ((($u)) + 96|0);
 $arrayidx5$i167$i = ((($u)) + 100|0);
 $arrayidx6$i168$i = ((($u)) + 104|0);
 $arrayidx7$i169$i = ((($u)) + 108|0);
 $arrayidx8$i170$i = ((($u)) + 112|0);
 $arrayidx9$i171$i = ((($u)) + 116|0);
 $arrayidx1$i126$i = ((($t)) + 84|0);
 $arrayidx2$i127$i = ((($t)) + 88|0);
 $arrayidx3$i128$i = ((($t)) + 92|0);
 $arrayidx4$i129$i = ((($t)) + 96|0);
 $arrayidx5$i130$i = ((($t)) + 100|0);
 $arrayidx6$i131$i = ((($t)) + 104|0);
 $arrayidx7$i132$i = ((($t)) + 108|0);
 $arrayidx8$i133$i = ((($t)) + 112|0);
 $arrayidx9$i134$i = ((($t)) + 116|0);
 $arrayidx11$i71$i = ((($t)) + 124|0);
 $arrayidx12$i72$i = ((($t)) + 128|0);
 $arrayidx13$i73$i = ((($t)) + 132|0);
 $arrayidx14$i74$i = ((($t)) + 136|0);
 $arrayidx15$i75$i = ((($t)) + 140|0);
 $arrayidx16$i76$i = ((($t)) + 144|0);
 $arrayidx17$i77$i = ((($t)) + 148|0);
 $arrayidx18$i78$i = ((($t)) + 152|0);
 $arrayidx19$i79$i = ((($t)) + 156|0);
 $i$154 = $i$055;
 while(1) {
  _ge_p2_dbl($t,$r);
  $arrayidx10 = (($aslide) + ($i$154)|0);
  $2 = HEAP8[$arrayidx10>>0]|0;
  $cmp12 = ($2<<24>>24)>(0);
  if ($cmp12) {
   _fe_mul($u,$t,$arraydecay3$i20);
   _fe_mul($arraydecay4$i21,$arraydecay6$i22,$arraydecay7$i23);
   _fe_mul($arraydecay9$i24,$arraydecay7$i23,$arraydecay3$i20);
   _fe_mul($arraydecay15$i,$t,$arraydecay6$i22);
   $3 = ($2&255) >>> 1;
   $4 = $3&255;
   $arrayidx17 = (($Ai) + (($4*160)|0)|0);
   _ge_add($t,$u,$arrayidx17);
  } else {
   $cmp20 = ($2<<24>>24)<(0);
   if ($cmp20) {
    _fe_mul($u,$t,$arraydecay3$i20);
    _fe_mul($arraydecay4$i21,$arraydecay6$i22,$arraydecay7$i23);
    _fe_mul($arraydecay9$i24,$arraydecay7$i23,$arraydecay3$i20);
    _fe_mul($arraydecay15$i,$t,$arraydecay6$i22);
    $5 = (($2<<24>>24) / -2)&-1;
    $div25 = $5 << 24 >> 24;
    $arrayidx26 = (($Ai) + (($div25*160)|0)|0);
    _ge_sub($t,$u,$arrayidx26);
   }
  }
  $arrayidx29 = (($bslide) + ($i$154)|0);
  $6 = HEAP8[$arrayidx29>>0]|0;
  $cmp31 = ($6<<24>>24)>(0);
  if ($cmp31) {
   _fe_mul($u,$t,$arraydecay3$i20);
   _fe_mul($arraydecay4$i21,$arraydecay6$i22,$arraydecay7$i23);
   _fe_mul($arraydecay9$i24,$arraydecay7$i23,$arraydecay3$i20);
   _fe_mul($arraydecay15$i,$t,$arraydecay6$i22);
   $7 = ($6&255) >>> 1;
   $8 = $7&255;
   $arrayidx37 = (31040 + (($8*120)|0)|0);
   _ge_madd($t,$u,$arrayidx37);
  } else {
   $cmp41 = ($6<<24>>24)<(0);
   if ($cmp41) {
    _fe_mul($u,$t,$arraydecay3$i20);
    _fe_mul($arraydecay4$i21,$arraydecay6$i22,$arraydecay7$i23);
    _fe_mul($arraydecay9$i24,$arraydecay7$i23,$arraydecay3$i20);
    _fe_mul($arraydecay15$i,$t,$arraydecay6$i22);
    $9 = (($6<<24>>24) / -2)&-1;
    $div47 = $9 << 24 >> 24;
    $10 = HEAP32[$arraydecay4$i21>>2]|0;
    $11 = HEAP32[$arrayidx1$i$i52>>2]|0;
    $12 = HEAP32[$arrayidx2$i$i>>2]|0;
    $13 = HEAP32[$arrayidx3$i$i>>2]|0;
    $14 = HEAP32[$arrayidx4$i$i>>2]|0;
    $15 = HEAP32[$arrayidx5$i$i>>2]|0;
    $16 = HEAP32[$arrayidx6$i$i>>2]|0;
    $17 = HEAP32[$arrayidx7$i$i>>2]|0;
    $18 = HEAP32[$arrayidx8$i$i>>2]|0;
    $19 = HEAP32[$arrayidx9$i$i>>2]|0;
    $20 = HEAP32[$u>>2]|0;
    $21 = HEAP32[$arrayidx11$i$i>>2]|0;
    $22 = HEAP32[$arrayidx12$i$i>>2]|0;
    $23 = HEAP32[$arrayidx13$i$i>>2]|0;
    $24 = HEAP32[$arrayidx14$i$i>>2]|0;
    $25 = HEAP32[$arrayidx15$i$i>>2]|0;
    $26 = HEAP32[$arrayidx16$i$i>>2]|0;
    $27 = HEAP32[$arrayidx17$i$i>>2]|0;
    $28 = HEAP32[$arrayidx18$i$i>>2]|0;
    $29 = HEAP32[$arrayidx19$i$i>>2]|0;
    $add$i$i = (($20) + ($10))|0;
    $add20$i$i = (($21) + ($11))|0;
    $add21$i$i = (($22) + ($12))|0;
    $add22$i$i = (($23) + ($13))|0;
    $add23$i$i = (($24) + ($14))|0;
    $add24$i$i = (($25) + ($15))|0;
    $add25$i$i = (($26) + ($16))|0;
    $add26$i$i = (($27) + ($17))|0;
    $add27$i$i = (($28) + ($18))|0;
    $add28$i$i = (($29) + ($19))|0;
    HEAP32[$t>>2] = $add$i$i;
    HEAP32[$arrayidx30$i$i>>2] = $add20$i$i;
    HEAP32[$arrayidx31$i$i>>2] = $add21$i$i;
    HEAP32[$arrayidx32$i$i>>2] = $add22$i$i;
    HEAP32[$arrayidx33$i$i>>2] = $add23$i$i;
    HEAP32[$arrayidx34$i$i>>2] = $add24$i$i;
    HEAP32[$arrayidx35$i$i>>2] = $add25$i$i;
    HEAP32[$arrayidx36$i$i>>2] = $add26$i$i;
    HEAP32[$arrayidx37$i$i>>2] = $add27$i$i;
    HEAP32[$arrayidx38$i$i>>2] = $add28$i$i;
    $sub$i218$i = (($10) - ($20))|0;
    $sub20$i219$i = (($11) - ($21))|0;
    $sub21$i220$i = (($12) - ($22))|0;
    $sub22$i221$i = (($13) - ($23))|0;
    $sub23$i222$i = (($14) - ($24))|0;
    $sub24$i223$i = (($15) - ($25))|0;
    $sub25$i224$i = (($16) - ($26))|0;
    $sub26$i225$i = (($17) - ($27))|0;
    $sub27$i226$i = (($18) - ($28))|0;
    $sub28$i227$i = (($19) - ($29))|0;
    HEAP32[$arraydecay6$i22>>2] = $sub$i218$i;
    HEAP32[$arrayidx30$i228$i>>2] = $sub20$i219$i;
    HEAP32[$arrayidx31$i229$i>>2] = $sub21$i220$i;
    HEAP32[$arrayidx32$i230$i>>2] = $sub22$i221$i;
    HEAP32[$arrayidx33$i231$i>>2] = $sub23$i222$i;
    HEAP32[$arrayidx34$i232$i>>2] = $sub24$i223$i;
    HEAP32[$arrayidx35$i233$i>>2] = $sub25$i224$i;
    HEAP32[$arrayidx36$i234$i>>2] = $sub26$i225$i;
    HEAP32[$arrayidx37$i235$i>>2] = $sub27$i226$i;
    HEAP32[$arrayidx38$i236$i>>2] = $sub28$i227$i;
    $arraydecay13$i = (((31040 + (($div47*120)|0)|0)) + 40|0);
    _fe_mul($arraydecay7$i23,$t,$arraydecay13$i);
    $arraydecay18$i = (31040 + (($div47*120)|0)|0);
    _fe_mul($arraydecay6$i22,$arraydecay6$i22,$arraydecay18$i);
    $arraydecay20$i = (((31040 + (($div47*120)|0)|0)) + 80|0);
    _fe_mul($arraydecay3$i20,$arraydecay20$i,$arraydecay15$i);
    $30 = HEAP32[$arraydecay9$i24>>2]|0;
    $31 = HEAP32[$arrayidx1$i163$i>>2]|0;
    $32 = HEAP32[$arrayidx2$i164$i>>2]|0;
    $33 = HEAP32[$arrayidx3$i165$i>>2]|0;
    $34 = HEAP32[$arrayidx4$i166$i>>2]|0;
    $35 = HEAP32[$arrayidx5$i167$i>>2]|0;
    $36 = HEAP32[$arrayidx6$i168$i>>2]|0;
    $37 = HEAP32[$arrayidx7$i169$i>>2]|0;
    $38 = HEAP32[$arrayidx8$i170$i>>2]|0;
    $39 = HEAP32[$arrayidx9$i171$i>>2]|0;
    $add$i181$i = $30 << 1;
    $add20$i182$i = $31 << 1;
    $add21$i183$i = $32 << 1;
    $add22$i184$i = $33 << 1;
    $add23$i185$i = $34 << 1;
    $add24$i186$i = $35 << 1;
    $add25$i187$i = $36 << 1;
    $add26$i188$i = $37 << 1;
    $add27$i189$i = $38 << 1;
    $add28$i190$i = $39 << 1;
    $40 = HEAP32[$arraydecay7$i23>>2]|0;
    $41 = HEAP32[$arrayidx1$i126$i>>2]|0;
    $42 = HEAP32[$arrayidx2$i127$i>>2]|0;
    $43 = HEAP32[$arrayidx3$i128$i>>2]|0;
    $44 = HEAP32[$arrayidx4$i129$i>>2]|0;
    $45 = HEAP32[$arrayidx5$i130$i>>2]|0;
    $46 = HEAP32[$arrayidx6$i131$i>>2]|0;
    $47 = HEAP32[$arrayidx7$i132$i>>2]|0;
    $48 = HEAP32[$arrayidx8$i133$i>>2]|0;
    $49 = HEAP32[$arrayidx9$i134$i>>2]|0;
    $50 = HEAP32[$arraydecay6$i22>>2]|0;
    $51 = HEAP32[$arrayidx30$i228$i>>2]|0;
    $52 = HEAP32[$arrayidx31$i229$i>>2]|0;
    $53 = HEAP32[$arrayidx32$i230$i>>2]|0;
    $54 = HEAP32[$arrayidx33$i231$i>>2]|0;
    $55 = HEAP32[$arrayidx34$i232$i>>2]|0;
    $56 = HEAP32[$arrayidx35$i233$i>>2]|0;
    $57 = HEAP32[$arrayidx36$i234$i>>2]|0;
    $58 = HEAP32[$arrayidx37$i235$i>>2]|0;
    $59 = HEAP32[$arrayidx38$i236$i>>2]|0;
    $sub$i144$i = (($40) - ($50))|0;
    $sub20$i145$i = (($41) - ($51))|0;
    $sub21$i146$i = (($42) - ($52))|0;
    $sub22$i147$i = (($43) - ($53))|0;
    $sub23$i148$i = (($44) - ($54))|0;
    $sub24$i149$i = (($45) - ($55))|0;
    $sub25$i150$i = (($46) - ($56))|0;
    $sub26$i151$i = (($47) - ($57))|0;
    $sub27$i152$i = (($48) - ($58))|0;
    $sub28$i153$i = (($49) - ($59))|0;
    HEAP32[$t>>2] = $sub$i144$i;
    HEAP32[$arrayidx30$i$i>>2] = $sub20$i145$i;
    HEAP32[$arrayidx31$i$i>>2] = $sub21$i146$i;
    HEAP32[$arrayidx32$i$i>>2] = $sub22$i147$i;
    HEAP32[$arrayidx33$i$i>>2] = $sub23$i148$i;
    HEAP32[$arrayidx34$i$i>>2] = $sub24$i149$i;
    HEAP32[$arrayidx35$i$i>>2] = $sub25$i150$i;
    HEAP32[$arrayidx36$i$i>>2] = $sub26$i151$i;
    HEAP32[$arrayidx37$i$i>>2] = $sub27$i152$i;
    HEAP32[$arrayidx38$i$i>>2] = $sub28$i153$i;
    $add$i107$i = (($50) + ($40))|0;
    $add20$i108$i = (($51) + ($41))|0;
    $add21$i109$i = (($52) + ($42))|0;
    $add22$i110$i = (($53) + ($43))|0;
    $add23$i111$i = (($54) + ($44))|0;
    $add24$i112$i = (($55) + ($45))|0;
    $add25$i113$i = (($56) + ($46))|0;
    $add26$i114$i = (($57) + ($47))|0;
    $add27$i115$i = (($58) + ($48))|0;
    $add28$i116$i = (($59) + ($49))|0;
    HEAP32[$arraydecay6$i22>>2] = $add$i107$i;
    HEAP32[$arrayidx30$i228$i>>2] = $add20$i108$i;
    HEAP32[$arrayidx31$i229$i>>2] = $add21$i109$i;
    HEAP32[$arrayidx32$i230$i>>2] = $add22$i110$i;
    HEAP32[$arrayidx33$i231$i>>2] = $add23$i111$i;
    HEAP32[$arrayidx34$i232$i>>2] = $add24$i112$i;
    HEAP32[$arrayidx35$i233$i>>2] = $add25$i113$i;
    HEAP32[$arrayidx36$i234$i>>2] = $add26$i114$i;
    HEAP32[$arrayidx37$i235$i>>2] = $add27$i115$i;
    HEAP32[$arrayidx38$i236$i>>2] = $add28$i116$i;
    $60 = HEAP32[$arraydecay3$i20>>2]|0;
    $61 = HEAP32[$arrayidx11$i71$i>>2]|0;
    $62 = HEAP32[$arrayidx12$i72$i>>2]|0;
    $63 = HEAP32[$arrayidx13$i73$i>>2]|0;
    $64 = HEAP32[$arrayidx14$i74$i>>2]|0;
    $65 = HEAP32[$arrayidx15$i75$i>>2]|0;
    $66 = HEAP32[$arrayidx16$i76$i>>2]|0;
    $67 = HEAP32[$arrayidx17$i77$i>>2]|0;
    $68 = HEAP32[$arrayidx18$i78$i>>2]|0;
    $69 = HEAP32[$arrayidx19$i79$i>>2]|0;
    $sub$i$i = (($add$i181$i) - ($60))|0;
    $sub20$i$i = (($add20$i182$i) - ($61))|0;
    $sub21$i$i = (($add21$i183$i) - ($62))|0;
    $sub22$i$i = (($add22$i184$i) - ($63))|0;
    $sub23$i$i = (($add23$i185$i) - ($64))|0;
    $sub24$i$i = (($add24$i186$i) - ($65))|0;
    $sub25$i$i = (($add25$i187$i) - ($66))|0;
    $sub26$i$i = (($add26$i188$i) - ($67))|0;
    $sub27$i$i = (($add27$i189$i) - ($68))|0;
    $sub28$i$i = (($add28$i190$i) - ($69))|0;
    HEAP32[$arraydecay7$i23>>2] = $sub$i$i;
    HEAP32[$arrayidx1$i126$i>>2] = $sub20$i$i;
    HEAP32[$arrayidx2$i127$i>>2] = $sub21$i$i;
    HEAP32[$arrayidx3$i128$i>>2] = $sub22$i$i;
    HEAP32[$arrayidx4$i129$i>>2] = $sub23$i$i;
    HEAP32[$arrayidx5$i130$i>>2] = $sub24$i$i;
    HEAP32[$arrayidx6$i131$i>>2] = $sub25$i$i;
    HEAP32[$arrayidx7$i132$i>>2] = $sub26$i$i;
    HEAP32[$arrayidx8$i133$i>>2] = $sub27$i$i;
    HEAP32[$arrayidx9$i134$i>>2] = $sub28$i$i;
    $add$i43$i = (($60) + ($add$i181$i))|0;
    $add20$i44$i = (($61) + ($add20$i182$i))|0;
    $add21$i45$i = (($62) + ($add21$i183$i))|0;
    $add22$i46$i = (($63) + ($add22$i184$i))|0;
    $add23$i47$i = (($64) + ($add23$i185$i))|0;
    $add24$i48$i = (($65) + ($add24$i186$i))|0;
    $add25$i49$i = (($66) + ($add25$i187$i))|0;
    $add26$i50$i = (($67) + ($add26$i188$i))|0;
    $add27$i51$i = (($68) + ($add27$i189$i))|0;
    $add28$i52$i = (($69) + ($add28$i190$i))|0;
    HEAP32[$arraydecay3$i20>>2] = $add$i43$i;
    HEAP32[$arrayidx11$i71$i>>2] = $add20$i44$i;
    HEAP32[$arrayidx12$i72$i>>2] = $add21$i45$i;
    HEAP32[$arrayidx13$i73$i>>2] = $add22$i46$i;
    HEAP32[$arrayidx14$i74$i>>2] = $add23$i47$i;
    HEAP32[$arrayidx15$i75$i>>2] = $add24$i48$i;
    HEAP32[$arrayidx16$i76$i>>2] = $add25$i49$i;
    HEAP32[$arrayidx17$i77$i>>2] = $add26$i50$i;
    HEAP32[$arrayidx18$i78$i>>2] = $add27$i51$i;
    HEAP32[$arrayidx19$i79$i>>2] = $add28$i52$i;
   }
  }
  _fe_mul($r,$t,$arraydecay3$i20);
  _fe_mul($arraydecay1$i,$arraydecay6$i22,$arraydecay7$i23);
  _fe_mul($arraydecay2$i,$arraydecay7$i23,$arraydecay3$i20);
  $dec52 = (($i$154) + -1)|0;
  $cmp7 = ($i$154|0)>(0);
  if ($cmp7) {
   $i$154 = $dec52;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _slide($r,$a) {
 $r = $r|0;
 $a = $a|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add$5 = 0, $add25 = 0, $add25$1 = 0, $add25$2 = 0, $add25$3 = 0, $add25$4 = 0, $add25$5 = 0, $and = 0, $and2 = 0, $arrayidx = 0, $arrayidx17 = 0, $arrayidx17$1 = 0, $arrayidx17$2 = 0, $arrayidx17$3 = 0, $arrayidx17$4 = 0;
 var $arrayidx17$5 = 0, $arrayidx4 = 0, $arrayidx61 = 0, $arrayidx61$1 = 0, $arrayidx61$2 = 0, $arrayidx61$3 = 0, $arrayidx61$4 = 0, $arrayidx61$5 = 0, $arrayidx9 = 0, $cmp13 = 0, $cmp13$1 = 0, $cmp13$2 = 0, $cmp13$3 = 0, $cmp13$4 = 0, $cmp13$5 = 0, $cmp26 = 0, $cmp26$1 = 0, $cmp26$2 = 0, $cmp26$3 = 0, $cmp26$4 = 0;
 var $cmp26$5 = 0, $cmp45 = 0, $cmp45$1 = 0, $cmp45$2 = 0, $cmp45$3 = 0, $cmp45$4 = 0, $cmp45$5 = 0, $cmp58 = 0, $cmp58$1 = 0, $cmp58$2 = 0, $cmp58$3 = 0, $cmp58$4 = 0, $cmp58$5 = 0, $conv = 0, $conv21 = 0, $conv21$1 = 0, $conv21$2 = 0, $conv21$3 = 0, $conv21$4 = 0, $conv21$5 = 0;
 var $conv24 = 0, $conv24$1 = 0, $conv24$2 = 0, $conv24$3 = 0, $conv24$4 = 0, $conv24$5 = 0, $conv3 = 0, $conv36 = 0, $conv36$1 = 0, $conv36$2 = 0, $conv36$3 = 0, $conv36$4 = 0, $conv36$5 = 0, $conv55 = 0, $conv55$1 = 0, $conv55$2 = 0, $conv55$3 = 0, $conv55$4 = 0, $conv55$5 = 0, $exitcond = 0;
 var $exitcond58 = 0, $i$056 = 0, $i$153 = 0, $inc = 0, $inc67 = 0, $inc67$1 = 0, $inc67$2 = 0, $inc67$3 = 0, $inc67$4 = 0, $inc67$5 = 0, $k$051 = 0, $k$051$1 = 0, $k$051$2 = 0, $k$051$3 = 0, $k$051$4 = 0, $k$051$5 = 0, $or$cond = 0, $shl = 0, $shl$1 = 0, $shl$2 = 0;
 var $shl$3 = 0, $shl$4 = 0, $shl$5 = 0, $shr1 = 0, $sub = 0, $sub$1 = 0, $sub$2 = 0, $sub$3 = 0, $sub$4 = 0, $sub$5 = 0, $tobool = 0, $tobool18 = 0, $tobool18$1 = 0, $tobool18$2 = 0, $tobool18$3 = 0, $tobool18$4 = 0, $tobool18$5 = 0, $tobool62 = 0, $tobool62$1 = 0, $tobool62$2 = 0;
 var $tobool62$3 = 0, $tobool62$4 = 0, $tobool62$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$056 = 0;
 while(1) {
  $0 = $i$056 >>> 3;
  $arrayidx = (($a) + ($0)|0);
  $1 = HEAP8[$arrayidx>>0]|0;
  $conv = $1&255;
  $and = $i$056 & 7;
  $shr1 = $conv >>> $and;
  $and2 = $shr1 & 1;
  $conv3 = $and2&255;
  $arrayidx4 = (($r) + ($i$056)|0);
  HEAP8[$arrayidx4>>0] = $conv3;
  $inc = (($i$056) + 1)|0;
  $exitcond58 = ($inc|0)==(256);
  if ($exitcond58) {
   break;
  } else {
   $i$056 = $inc;
  }
 }
 $i$153 = 0;
 while(1) {
  $arrayidx9 = (($r) + ($i$153)|0);
  $2 = HEAP8[$arrayidx9>>0]|0;
  $tobool = ($2<<24>>24)!=(0);
  $$pre = (($i$153) + 1)|0;
  $cmp13 = ($$pre>>>0)<(256);
  $or$cond = $tobool & $cmp13;
  L6: do {
   if ($or$cond) {
    $arrayidx17 = (($r) + ($$pre)|0);
    $3 = HEAP8[$arrayidx17>>0]|0;
    $tobool18 = ($3<<24>>24)==(0);
    L8: do {
     if (!($tobool18)) {
      $conv21 = $2 << 24 >> 24;
      $conv24 = $3 << 24 >> 24;
      $shl = $conv24 << 1;
      $add25 = (($shl) + ($conv21))|0;
      $cmp26 = ($add25|0)<(16);
      if ($cmp26) {
       $conv36 = $add25&255;
       HEAP8[$arrayidx9>>0] = $conv36;
       HEAP8[$arrayidx17>>0] = 0;
       break;
      }
      $sub = (($conv21) - ($shl))|0;
      $cmp45 = ($sub|0)>(-16);
      if (!($cmp45)) {
       break L6;
      }
      $conv55 = $sub&255;
      HEAP8[$arrayidx9>>0] = $conv55;
      $k$051 = $$pre;
      while(1) {
       $arrayidx61 = (($r) + ($k$051)|0);
       $4 = HEAP8[$arrayidx61>>0]|0;
       $tobool62 = ($4<<24>>24)==(0);
       if ($tobool62) {
        break;
       }
       HEAP8[$arrayidx61>>0] = 0;
       $inc67 = (($k$051) + 1)|0;
       $cmp58 = ($k$051>>>0)<(255);
       if ($cmp58) {
        $k$051 = $inc67;
       } else {
        break L8;
       }
      }
      HEAP8[$arrayidx61>>0] = 1;
     }
    } while(0);
    $add$1 = (($i$153) + 2)|0;
    $cmp13$1 = ($add$1>>>0)<(256);
    if ($cmp13$1) {
     $arrayidx17$1 = (($r) + ($add$1)|0);
     $5 = HEAP8[$arrayidx17$1>>0]|0;
     $tobool18$1 = ($5<<24>>24)==(0);
     L20: do {
      if (!($tobool18$1)) {
       $6 = HEAP8[$arrayidx9>>0]|0;
       $conv21$1 = $6 << 24 >> 24;
       $conv24$1 = $5 << 24 >> 24;
       $shl$1 = $conv24$1 << 2;
       $add25$1 = (($shl$1) + ($conv21$1))|0;
       $cmp26$1 = ($add25$1|0)<(16);
       if ($cmp26$1) {
        $conv36$1 = $add25$1&255;
        HEAP8[$arrayidx9>>0] = $conv36$1;
        HEAP8[$arrayidx17$1>>0] = 0;
        break;
       }
       $sub$1 = (($conv21$1) - ($shl$1))|0;
       $cmp45$1 = ($sub$1|0)>(-16);
       if (!($cmp45$1)) {
        break L6;
       }
       $conv55$1 = $sub$1&255;
       HEAP8[$arrayidx9>>0] = $conv55$1;
       $k$051$1 = $add$1;
       while(1) {
        $arrayidx61$1 = (($r) + ($k$051$1)|0);
        $7 = HEAP8[$arrayidx61$1>>0]|0;
        $tobool62$1 = ($7<<24>>24)==(0);
        if ($tobool62$1) {
         break;
        }
        HEAP8[$arrayidx61$1>>0] = 0;
        $inc67$1 = (($k$051$1) + 1)|0;
        $cmp58$1 = ($k$051$1>>>0)<(255);
        if ($cmp58$1) {
         $k$051$1 = $inc67$1;
        } else {
         break L20;
        }
       }
       HEAP8[$arrayidx61$1>>0] = 1;
      }
     } while(0);
     $add$2 = (($i$153) + 3)|0;
     $cmp13$2 = ($add$2>>>0)<(256);
     if ($cmp13$2) {
      $arrayidx17$2 = (($r) + ($add$2)|0);
      $8 = HEAP8[$arrayidx17$2>>0]|0;
      $tobool18$2 = ($8<<24>>24)==(0);
      L32: do {
       if (!($tobool18$2)) {
        $9 = HEAP8[$arrayidx9>>0]|0;
        $conv21$2 = $9 << 24 >> 24;
        $conv24$2 = $8 << 24 >> 24;
        $shl$2 = $conv24$2 << 3;
        $add25$2 = (($shl$2) + ($conv21$2))|0;
        $cmp26$2 = ($add25$2|0)<(16);
        if ($cmp26$2) {
         $conv36$2 = $add25$2&255;
         HEAP8[$arrayidx9>>0] = $conv36$2;
         HEAP8[$arrayidx17$2>>0] = 0;
         break;
        }
        $sub$2 = (($conv21$2) - ($shl$2))|0;
        $cmp45$2 = ($sub$2|0)>(-16);
        if (!($cmp45$2)) {
         break L6;
        }
        $conv55$2 = $sub$2&255;
        HEAP8[$arrayidx9>>0] = $conv55$2;
        $k$051$2 = $add$2;
        while(1) {
         $arrayidx61$2 = (($r) + ($k$051$2)|0);
         $10 = HEAP8[$arrayidx61$2>>0]|0;
         $tobool62$2 = ($10<<24>>24)==(0);
         if ($tobool62$2) {
          break;
         }
         HEAP8[$arrayidx61$2>>0] = 0;
         $inc67$2 = (($k$051$2) + 1)|0;
         $cmp58$2 = ($k$051$2>>>0)<(255);
         if ($cmp58$2) {
          $k$051$2 = $inc67$2;
         } else {
          break L32;
         }
        }
        HEAP8[$arrayidx61$2>>0] = 1;
       }
      } while(0);
      $add$3 = (($i$153) + 4)|0;
      $cmp13$3 = ($add$3>>>0)<(256);
      if ($cmp13$3) {
       $arrayidx17$3 = (($r) + ($add$3)|0);
       $11 = HEAP8[$arrayidx17$3>>0]|0;
       $tobool18$3 = ($11<<24>>24)==(0);
       L44: do {
        if (!($tobool18$3)) {
         $12 = HEAP8[$arrayidx9>>0]|0;
         $conv21$3 = $12 << 24 >> 24;
         $conv24$3 = $11 << 24 >> 24;
         $shl$3 = $conv24$3 << 4;
         $add25$3 = (($shl$3) + ($conv21$3))|0;
         $cmp26$3 = ($add25$3|0)<(16);
         if ($cmp26$3) {
          $conv36$3 = $add25$3&255;
          HEAP8[$arrayidx9>>0] = $conv36$3;
          HEAP8[$arrayidx17$3>>0] = 0;
          break;
         }
         $sub$3 = (($conv21$3) - ($shl$3))|0;
         $cmp45$3 = ($sub$3|0)>(-16);
         if (!($cmp45$3)) {
          break L6;
         }
         $conv55$3 = $sub$3&255;
         HEAP8[$arrayidx9>>0] = $conv55$3;
         $k$051$3 = $add$3;
         while(1) {
          $arrayidx61$3 = (($r) + ($k$051$3)|0);
          $13 = HEAP8[$arrayidx61$3>>0]|0;
          $tobool62$3 = ($13<<24>>24)==(0);
          if ($tobool62$3) {
           break;
          }
          HEAP8[$arrayidx61$3>>0] = 0;
          $inc67$3 = (($k$051$3) + 1)|0;
          $cmp58$3 = ($k$051$3>>>0)<(255);
          if ($cmp58$3) {
           $k$051$3 = $inc67$3;
          } else {
           break L44;
          }
         }
         HEAP8[$arrayidx61$3>>0] = 1;
        }
       } while(0);
       $add$4 = (($i$153) + 5)|0;
       $cmp13$4 = ($add$4>>>0)<(256);
       if ($cmp13$4) {
        $arrayidx17$4 = (($r) + ($add$4)|0);
        $14 = HEAP8[$arrayidx17$4>>0]|0;
        $tobool18$4 = ($14<<24>>24)==(0);
        L56: do {
         if (!($tobool18$4)) {
          $15 = HEAP8[$arrayidx9>>0]|0;
          $conv21$4 = $15 << 24 >> 24;
          $conv24$4 = $14 << 24 >> 24;
          $shl$4 = $conv24$4 << 5;
          $add25$4 = (($shl$4) + ($conv21$4))|0;
          $cmp26$4 = ($add25$4|0)<(16);
          if ($cmp26$4) {
           $conv36$4 = $add25$4&255;
           HEAP8[$arrayidx9>>0] = $conv36$4;
           HEAP8[$arrayidx17$4>>0] = 0;
           break;
          }
          $sub$4 = (($conv21$4) - ($shl$4))|0;
          $cmp45$4 = ($sub$4|0)>(-16);
          if (!($cmp45$4)) {
           break L6;
          }
          $conv55$4 = $sub$4&255;
          HEAP8[$arrayidx9>>0] = $conv55$4;
          $k$051$4 = $add$4;
          while(1) {
           $arrayidx61$4 = (($r) + ($k$051$4)|0);
           $16 = HEAP8[$arrayidx61$4>>0]|0;
           $tobool62$4 = ($16<<24>>24)==(0);
           if ($tobool62$4) {
            break;
           }
           HEAP8[$arrayidx61$4>>0] = 0;
           $inc67$4 = (($k$051$4) + 1)|0;
           $cmp58$4 = ($k$051$4>>>0)<(255);
           if ($cmp58$4) {
            $k$051$4 = $inc67$4;
           } else {
            break L56;
           }
          }
          HEAP8[$arrayidx61$4>>0] = 1;
         }
        } while(0);
        $add$5 = (($i$153) + 6)|0;
        $cmp13$5 = ($add$5>>>0)<(256);
        if ($cmp13$5) {
         $arrayidx17$5 = (($r) + ($add$5)|0);
         $17 = HEAP8[$arrayidx17$5>>0]|0;
         $tobool18$5 = ($17<<24>>24)==(0);
         if (!($tobool18$5)) {
          $18 = HEAP8[$arrayidx9>>0]|0;
          $conv21$5 = $18 << 24 >> 24;
          $conv24$5 = $17 << 24 >> 24;
          $shl$5 = $conv24$5 << 6;
          $add25$5 = (($shl$5) + ($conv21$5))|0;
          $cmp26$5 = ($add25$5|0)<(16);
          if ($cmp26$5) {
           $conv36$5 = $add25$5&255;
           HEAP8[$arrayidx9>>0] = $conv36$5;
           HEAP8[$arrayidx17$5>>0] = 0;
           break;
          }
          $sub$5 = (($conv21$5) - ($shl$5))|0;
          $cmp45$5 = ($sub$5|0)>(-16);
          if ($cmp45$5) {
           $conv55$5 = $sub$5&255;
           HEAP8[$arrayidx9>>0] = $conv55$5;
           $k$051$5 = $add$5;
           while(1) {
            $arrayidx61$5 = (($r) + ($k$051$5)|0);
            $19 = HEAP8[$arrayidx61$5>>0]|0;
            $tobool62$5 = ($19<<24>>24)==(0);
            if ($tobool62$5) {
             break;
            }
            HEAP8[$arrayidx61$5>>0] = 0;
            $inc67$5 = (($k$051$5) + 1)|0;
            $cmp58$5 = ($k$051$5>>>0)<(255);
            if ($cmp58$5) {
             $k$051$5 = $inc67$5;
            } else {
             break L6;
            }
           }
           HEAP8[$arrayidx61$5>>0] = 1;
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  $exitcond = ($$pre|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i$153 = $$pre;
  }
 }
 return;
}
function _ge_sub($r,$p,$q) {
 $r = $r|0;
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $add$i = 0, $add$i110 = 0, $add$i184 = 0, $add$i46 = 0, $add20$i = 0, $add20$i111 = 0, $add20$i185 = 0, $add20$i47 = 0, $add21$i = 0, $add21$i112 = 0, $add21$i186 = 0, $add21$i48 = 0, $add22$i = 0, $add22$i113 = 0, $add22$i187 = 0, $add22$i49 = 0, $add23$i = 0, $add23$i114 = 0, $add23$i188 = 0, $add23$i50 = 0;
 var $add24$i = 0, $add24$i115 = 0, $add24$i189 = 0, $add24$i51 = 0, $add25$i = 0, $add25$i116 = 0, $add25$i190 = 0, $add25$i52 = 0, $add26$i = 0, $add26$i117 = 0, $add26$i191 = 0, $add26$i53 = 0, $add27$i = 0, $add27$i118 = 0, $add27$i192 = 0, $add27$i54 = 0, $add28$i = 0, $add28$i119 = 0, $add28$i193 = 0, $add28$i55 = 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay13 = 0, $arraydecay19 = 0, $arraydecay20 = 0, $arraydecay22 = 0, $arraydecay26 = 0, $arraydecay28 = 0, $arraydecay5 = 0, $arrayidx1$i = 0, $arrayidx1$i129 = 0, $arrayidx11$i = 0, $arrayidx11$i74 = 0, $arrayidx12$i = 0, $arrayidx12$i75 = 0, $arrayidx13$i = 0, $arrayidx13$i76 = 0, $arrayidx14$i = 0, $arrayidx14$i77 = 0, $arrayidx15$i = 0;
 var $arrayidx15$i78 = 0, $arrayidx16$i = 0, $arrayidx16$i79 = 0, $arrayidx17$i = 0, $arrayidx17$i80 = 0, $arrayidx18$i = 0, $arrayidx18$i81 = 0, $arrayidx19$i = 0, $arrayidx19$i82 = 0, $arrayidx2$i = 0, $arrayidx2$i130 = 0, $arrayidx3$i = 0, $arrayidx3$i131 = 0, $arrayidx30$i = 0, $arrayidx30$i231 = 0, $arrayidx31$i = 0, $arrayidx31$i232 = 0, $arrayidx32$i = 0, $arrayidx32$i233 = 0, $arrayidx33$i = 0;
 var $arrayidx33$i234 = 0, $arrayidx34$i = 0, $arrayidx34$i235 = 0, $arrayidx35$i = 0, $arrayidx35$i236 = 0, $arrayidx36$i = 0, $arrayidx36$i237 = 0, $arrayidx37$i = 0, $arrayidx37$i238 = 0, $arrayidx38$i = 0, $arrayidx38$i239 = 0, $arrayidx4$i = 0, $arrayidx4$i132 = 0, $arrayidx5$i = 0, $arrayidx5$i133 = 0, $arrayidx6$i = 0, $arrayidx6$i134 = 0, $arrayidx7$i = 0, $arrayidx7$i135 = 0, $arrayidx8$i = 0;
 var $arrayidx8$i136 = 0, $arrayidx9$i = 0, $arrayidx9$i137 = 0, $sub$i = 0, $sub$i147 = 0, $sub$i221 = 0, $sub20$i = 0, $sub20$i148 = 0, $sub20$i222 = 0, $sub21$i = 0, $sub21$i149 = 0, $sub21$i223 = 0, $sub22$i = 0, $sub22$i150 = 0, $sub22$i224 = 0, $sub23$i = 0, $sub23$i151 = 0, $sub23$i225 = 0, $sub24$i = 0, $sub24$i152 = 0;
 var $sub24$i226 = 0, $sub25$i = 0, $sub25$i153 = 0, $sub25$i227 = 0, $sub26$i = 0, $sub26$i154 = 0, $sub26$i228 = 0, $sub27$i = 0, $sub27$i155 = 0, $sub27$i229 = 0, $sub28$i = 0, $sub28$i156 = 0, $sub28$i230 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay1 = ((($p)) + 40|0);
 $0 = HEAP32[$arraydecay1>>2]|0;
 $arrayidx1$i = ((($p)) + 44|0);
 $1 = HEAP32[$arrayidx1$i>>2]|0;
 $arrayidx2$i = ((($p)) + 48|0);
 $2 = HEAP32[$arrayidx2$i>>2]|0;
 $arrayidx3$i = ((($p)) + 52|0);
 $3 = HEAP32[$arrayidx3$i>>2]|0;
 $arrayidx4$i = ((($p)) + 56|0);
 $4 = HEAP32[$arrayidx4$i>>2]|0;
 $arrayidx5$i = ((($p)) + 60|0);
 $5 = HEAP32[$arrayidx5$i>>2]|0;
 $arrayidx6$i = ((($p)) + 64|0);
 $6 = HEAP32[$arrayidx6$i>>2]|0;
 $arrayidx7$i = ((($p)) + 68|0);
 $7 = HEAP32[$arrayidx7$i>>2]|0;
 $arrayidx8$i = ((($p)) + 72|0);
 $8 = HEAP32[$arrayidx8$i>>2]|0;
 $arrayidx9$i = ((($p)) + 76|0);
 $9 = HEAP32[$arrayidx9$i>>2]|0;
 $10 = HEAP32[$p>>2]|0;
 $arrayidx11$i = ((($p)) + 4|0);
 $11 = HEAP32[$arrayidx11$i>>2]|0;
 $arrayidx12$i = ((($p)) + 8|0);
 $12 = HEAP32[$arrayidx12$i>>2]|0;
 $arrayidx13$i = ((($p)) + 12|0);
 $13 = HEAP32[$arrayidx13$i>>2]|0;
 $arrayidx14$i = ((($p)) + 16|0);
 $14 = HEAP32[$arrayidx14$i>>2]|0;
 $arrayidx15$i = ((($p)) + 20|0);
 $15 = HEAP32[$arrayidx15$i>>2]|0;
 $arrayidx16$i = ((($p)) + 24|0);
 $16 = HEAP32[$arrayidx16$i>>2]|0;
 $arrayidx17$i = ((($p)) + 28|0);
 $17 = HEAP32[$arrayidx17$i>>2]|0;
 $arrayidx18$i = ((($p)) + 32|0);
 $18 = HEAP32[$arrayidx18$i>>2]|0;
 $arrayidx19$i = ((($p)) + 36|0);
 $19 = HEAP32[$arrayidx19$i>>2]|0;
 $add$i = (($10) + ($0))|0;
 $add20$i = (($11) + ($1))|0;
 $add21$i = (($12) + ($2))|0;
 $add22$i = (($13) + ($3))|0;
 $add23$i = (($14) + ($4))|0;
 $add24$i = (($15) + ($5))|0;
 $add25$i = (($16) + ($6))|0;
 $add26$i = (($17) + ($7))|0;
 $add27$i = (($18) + ($8))|0;
 $add28$i = (($19) + ($9))|0;
 HEAP32[$r>>2] = $add$i;
 $arrayidx30$i = ((($r)) + 4|0);
 HEAP32[$arrayidx30$i>>2] = $add20$i;
 $arrayidx31$i = ((($r)) + 8|0);
 HEAP32[$arrayidx31$i>>2] = $add21$i;
 $arrayidx32$i = ((($r)) + 12|0);
 HEAP32[$arrayidx32$i>>2] = $add22$i;
 $arrayidx33$i = ((($r)) + 16|0);
 HEAP32[$arrayidx33$i>>2] = $add23$i;
 $arrayidx34$i = ((($r)) + 20|0);
 HEAP32[$arrayidx34$i>>2] = $add24$i;
 $arrayidx35$i = ((($r)) + 24|0);
 HEAP32[$arrayidx35$i>>2] = $add25$i;
 $arrayidx36$i = ((($r)) + 28|0);
 HEAP32[$arrayidx36$i>>2] = $add26$i;
 $arrayidx37$i = ((($r)) + 32|0);
 HEAP32[$arrayidx37$i>>2] = $add27$i;
 $arrayidx38$i = ((($r)) + 36|0);
 HEAP32[$arrayidx38$i>>2] = $add28$i;
 $arraydecay5 = ((($r)) + 40|0);
 $20 = HEAP32[$arraydecay1>>2]|0;
 $21 = HEAP32[$arrayidx1$i>>2]|0;
 $22 = HEAP32[$arrayidx2$i>>2]|0;
 $23 = HEAP32[$arrayidx3$i>>2]|0;
 $24 = HEAP32[$arrayidx4$i>>2]|0;
 $25 = HEAP32[$arrayidx5$i>>2]|0;
 $26 = HEAP32[$arrayidx6$i>>2]|0;
 $27 = HEAP32[$arrayidx7$i>>2]|0;
 $28 = HEAP32[$arrayidx8$i>>2]|0;
 $29 = HEAP32[$arrayidx9$i>>2]|0;
 $30 = HEAP32[$p>>2]|0;
 $31 = HEAP32[$arrayidx11$i>>2]|0;
 $32 = HEAP32[$arrayidx12$i>>2]|0;
 $33 = HEAP32[$arrayidx13$i>>2]|0;
 $34 = HEAP32[$arrayidx14$i>>2]|0;
 $35 = HEAP32[$arrayidx15$i>>2]|0;
 $36 = HEAP32[$arrayidx16$i>>2]|0;
 $37 = HEAP32[$arrayidx17$i>>2]|0;
 $38 = HEAP32[$arrayidx18$i>>2]|0;
 $39 = HEAP32[$arrayidx19$i>>2]|0;
 $sub$i221 = (($20) - ($30))|0;
 $sub20$i222 = (($21) - ($31))|0;
 $sub21$i223 = (($22) - ($32))|0;
 $sub22$i224 = (($23) - ($33))|0;
 $sub23$i225 = (($24) - ($34))|0;
 $sub24$i226 = (($25) - ($35))|0;
 $sub25$i227 = (($26) - ($36))|0;
 $sub26$i228 = (($27) - ($37))|0;
 $sub27$i229 = (($28) - ($38))|0;
 $sub28$i230 = (($29) - ($39))|0;
 HEAP32[$arraydecay5>>2] = $sub$i221;
 $arrayidx30$i231 = ((($r)) + 44|0);
 HEAP32[$arrayidx30$i231>>2] = $sub20$i222;
 $arrayidx31$i232 = ((($r)) + 48|0);
 HEAP32[$arrayidx31$i232>>2] = $sub21$i223;
 $arrayidx32$i233 = ((($r)) + 52|0);
 HEAP32[$arrayidx32$i233>>2] = $sub22$i224;
 $arrayidx33$i234 = ((($r)) + 56|0);
 HEAP32[$arrayidx33$i234>>2] = $sub23$i225;
 $arrayidx34$i235 = ((($r)) + 60|0);
 HEAP32[$arrayidx34$i235>>2] = $sub24$i226;
 $arrayidx35$i236 = ((($r)) + 64|0);
 HEAP32[$arrayidx35$i236>>2] = $sub25$i227;
 $arrayidx36$i237 = ((($r)) + 68|0);
 HEAP32[$arrayidx36$i237>>2] = $sub26$i228;
 $arrayidx37$i238 = ((($r)) + 72|0);
 HEAP32[$arrayidx37$i238>>2] = $sub27$i229;
 $arrayidx38$i239 = ((($r)) + 76|0);
 HEAP32[$arrayidx38$i239>>2] = $sub28$i230;
 $arraydecay10 = ((($r)) + 80|0);
 $arraydecay13 = ((($q)) + 40|0);
 _fe_mul($arraydecay10,$r,$arraydecay13);
 _fe_mul($arraydecay5,$arraydecay5,$q);
 $arraydecay19 = ((($r)) + 120|0);
 $arraydecay20 = ((($q)) + 120|0);
 $arraydecay22 = ((($p)) + 120|0);
 _fe_mul($arraydecay19,$arraydecay20,$arraydecay22);
 $arraydecay26 = ((($p)) + 80|0);
 $arraydecay28 = ((($q)) + 80|0);
 _fe_mul($r,$arraydecay26,$arraydecay28);
 $40 = HEAP32[$r>>2]|0;
 $41 = HEAP32[$arrayidx30$i>>2]|0;
 $42 = HEAP32[$arrayidx31$i>>2]|0;
 $43 = HEAP32[$arrayidx32$i>>2]|0;
 $44 = HEAP32[$arrayidx33$i>>2]|0;
 $45 = HEAP32[$arrayidx34$i>>2]|0;
 $46 = HEAP32[$arrayidx35$i>>2]|0;
 $47 = HEAP32[$arrayidx36$i>>2]|0;
 $48 = HEAP32[$arrayidx37$i>>2]|0;
 $49 = HEAP32[$arrayidx38$i>>2]|0;
 $add$i184 = $40 << 1;
 $add20$i185 = $41 << 1;
 $add21$i186 = $42 << 1;
 $add22$i187 = $43 << 1;
 $add23$i188 = $44 << 1;
 $add24$i189 = $45 << 1;
 $add25$i190 = $46 << 1;
 $add26$i191 = $47 << 1;
 $add27$i192 = $48 << 1;
 $add28$i193 = $49 << 1;
 $50 = HEAP32[$arraydecay10>>2]|0;
 $arrayidx1$i129 = ((($r)) + 84|0);
 $51 = HEAP32[$arrayidx1$i129>>2]|0;
 $arrayidx2$i130 = ((($r)) + 88|0);
 $52 = HEAP32[$arrayidx2$i130>>2]|0;
 $arrayidx3$i131 = ((($r)) + 92|0);
 $53 = HEAP32[$arrayidx3$i131>>2]|0;
 $arrayidx4$i132 = ((($r)) + 96|0);
 $54 = HEAP32[$arrayidx4$i132>>2]|0;
 $arrayidx5$i133 = ((($r)) + 100|0);
 $55 = HEAP32[$arrayidx5$i133>>2]|0;
 $arrayidx6$i134 = ((($r)) + 104|0);
 $56 = HEAP32[$arrayidx6$i134>>2]|0;
 $arrayidx7$i135 = ((($r)) + 108|0);
 $57 = HEAP32[$arrayidx7$i135>>2]|0;
 $arrayidx8$i136 = ((($r)) + 112|0);
 $58 = HEAP32[$arrayidx8$i136>>2]|0;
 $arrayidx9$i137 = ((($r)) + 116|0);
 $59 = HEAP32[$arrayidx9$i137>>2]|0;
 $60 = HEAP32[$arraydecay5>>2]|0;
 $61 = HEAP32[$arrayidx30$i231>>2]|0;
 $62 = HEAP32[$arrayidx31$i232>>2]|0;
 $63 = HEAP32[$arrayidx32$i233>>2]|0;
 $64 = HEAP32[$arrayidx33$i234>>2]|0;
 $65 = HEAP32[$arrayidx34$i235>>2]|0;
 $66 = HEAP32[$arrayidx35$i236>>2]|0;
 $67 = HEAP32[$arrayidx36$i237>>2]|0;
 $68 = HEAP32[$arrayidx37$i238>>2]|0;
 $69 = HEAP32[$arrayidx38$i239>>2]|0;
 $sub$i147 = (($50) - ($60))|0;
 $sub20$i148 = (($51) - ($61))|0;
 $sub21$i149 = (($52) - ($62))|0;
 $sub22$i150 = (($53) - ($63))|0;
 $sub23$i151 = (($54) - ($64))|0;
 $sub24$i152 = (($55) - ($65))|0;
 $sub25$i153 = (($56) - ($66))|0;
 $sub26$i154 = (($57) - ($67))|0;
 $sub27$i155 = (($58) - ($68))|0;
 $sub28$i156 = (($59) - ($69))|0;
 HEAP32[$r>>2] = $sub$i147;
 HEAP32[$arrayidx30$i>>2] = $sub20$i148;
 HEAP32[$arrayidx31$i>>2] = $sub21$i149;
 HEAP32[$arrayidx32$i>>2] = $sub22$i150;
 HEAP32[$arrayidx33$i>>2] = $sub23$i151;
 HEAP32[$arrayidx34$i>>2] = $sub24$i152;
 HEAP32[$arrayidx35$i>>2] = $sub25$i153;
 HEAP32[$arrayidx36$i>>2] = $sub26$i154;
 HEAP32[$arrayidx37$i>>2] = $sub27$i155;
 HEAP32[$arrayidx38$i>>2] = $sub28$i156;
 $add$i110 = (($60) + ($50))|0;
 $add20$i111 = (($61) + ($51))|0;
 $add21$i112 = (($62) + ($52))|0;
 $add22$i113 = (($63) + ($53))|0;
 $add23$i114 = (($64) + ($54))|0;
 $add24$i115 = (($65) + ($55))|0;
 $add25$i116 = (($66) + ($56))|0;
 $add26$i117 = (($67) + ($57))|0;
 $add27$i118 = (($68) + ($58))|0;
 $add28$i119 = (($69) + ($59))|0;
 HEAP32[$arraydecay5>>2] = $add$i110;
 HEAP32[$arrayidx30$i231>>2] = $add20$i111;
 HEAP32[$arrayidx31$i232>>2] = $add21$i112;
 HEAP32[$arrayidx32$i233>>2] = $add22$i113;
 HEAP32[$arrayidx33$i234>>2] = $add23$i114;
 HEAP32[$arrayidx34$i235>>2] = $add24$i115;
 HEAP32[$arrayidx35$i236>>2] = $add25$i116;
 HEAP32[$arrayidx36$i237>>2] = $add26$i117;
 HEAP32[$arrayidx37$i238>>2] = $add27$i118;
 HEAP32[$arrayidx38$i239>>2] = $add28$i119;
 $70 = HEAP32[$arraydecay19>>2]|0;
 $arrayidx11$i74 = ((($r)) + 124|0);
 $71 = HEAP32[$arrayidx11$i74>>2]|0;
 $arrayidx12$i75 = ((($r)) + 128|0);
 $72 = HEAP32[$arrayidx12$i75>>2]|0;
 $arrayidx13$i76 = ((($r)) + 132|0);
 $73 = HEAP32[$arrayidx13$i76>>2]|0;
 $arrayidx14$i77 = ((($r)) + 136|0);
 $74 = HEAP32[$arrayidx14$i77>>2]|0;
 $arrayidx15$i78 = ((($r)) + 140|0);
 $75 = HEAP32[$arrayidx15$i78>>2]|0;
 $arrayidx16$i79 = ((($r)) + 144|0);
 $76 = HEAP32[$arrayidx16$i79>>2]|0;
 $arrayidx17$i80 = ((($r)) + 148|0);
 $77 = HEAP32[$arrayidx17$i80>>2]|0;
 $arrayidx18$i81 = ((($r)) + 152|0);
 $78 = HEAP32[$arrayidx18$i81>>2]|0;
 $arrayidx19$i82 = ((($r)) + 156|0);
 $79 = HEAP32[$arrayidx19$i82>>2]|0;
 $sub$i = (($add$i184) - ($70))|0;
 $sub20$i = (($add20$i185) - ($71))|0;
 $sub21$i = (($add21$i186) - ($72))|0;
 $sub22$i = (($add22$i187) - ($73))|0;
 $sub23$i = (($add23$i188) - ($74))|0;
 $sub24$i = (($add24$i189) - ($75))|0;
 $sub25$i = (($add25$i190) - ($76))|0;
 $sub26$i = (($add26$i191) - ($77))|0;
 $sub27$i = (($add27$i192) - ($78))|0;
 $sub28$i = (($add28$i193) - ($79))|0;
 HEAP32[$arraydecay10>>2] = $sub$i;
 HEAP32[$arrayidx1$i129>>2] = $sub20$i;
 HEAP32[$arrayidx2$i130>>2] = $sub21$i;
 HEAP32[$arrayidx3$i131>>2] = $sub22$i;
 HEAP32[$arrayidx4$i132>>2] = $sub23$i;
 HEAP32[$arrayidx5$i133>>2] = $sub24$i;
 HEAP32[$arrayidx6$i134>>2] = $sub25$i;
 HEAP32[$arrayidx7$i135>>2] = $sub26$i;
 HEAP32[$arrayidx8$i136>>2] = $sub27$i;
 HEAP32[$arrayidx9$i137>>2] = $sub28$i;
 $add$i46 = (($70) + ($add$i184))|0;
 $add20$i47 = (($71) + ($add20$i185))|0;
 $add21$i48 = (($72) + ($add21$i186))|0;
 $add22$i49 = (($73) + ($add22$i187))|0;
 $add23$i50 = (($74) + ($add23$i188))|0;
 $add24$i51 = (($75) + ($add24$i189))|0;
 $add25$i52 = (($76) + ($add25$i190))|0;
 $add26$i53 = (($77) + ($add26$i191))|0;
 $add27$i54 = (($78) + ($add27$i192))|0;
 $add28$i55 = (($79) + ($add28$i193))|0;
 HEAP32[$arraydecay19>>2] = $add$i46;
 HEAP32[$arrayidx11$i74>>2] = $add20$i47;
 HEAP32[$arrayidx12$i75>>2] = $add21$i48;
 HEAP32[$arrayidx13$i76>>2] = $add22$i49;
 HEAP32[$arrayidx14$i77>>2] = $add23$i50;
 HEAP32[$arrayidx15$i78>>2] = $add24$i51;
 HEAP32[$arrayidx16$i79>>2] = $add25$i52;
 HEAP32[$arrayidx17$i80>>2] = $add26$i53;
 HEAP32[$arrayidx18$i81>>2] = $add27$i54;
 HEAP32[$arrayidx19$i82>>2] = $add28$i55;
 return;
}
function _ge_madd($r,$p,$q) {
 $r = $r|0;
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $add$i = 0, $add$i107 = 0, $add$i181 = 0, $add$i70 = 0, $add20$i = 0, $add20$i108 = 0, $add20$i182 = 0, $add20$i71 = 0, $add21$i = 0, $add21$i109 = 0, $add21$i183 = 0, $add21$i72 = 0, $add22$i = 0, $add22$i110 = 0, $add22$i184 = 0, $add22$i73 = 0, $add23$i = 0, $add23$i111 = 0, $add23$i185 = 0, $add23$i74 = 0;
 var $add24$i = 0, $add24$i112 = 0, $add24$i186 = 0, $add24$i75 = 0, $add25$i = 0, $add25$i113 = 0, $add25$i187 = 0, $add25$i76 = 0, $add26$i = 0, $add26$i114 = 0, $add26$i188 = 0, $add26$i77 = 0, $add27$i = 0, $add27$i115 = 0, $add27$i189 = 0, $add27$i78 = 0, $add28$i = 0, $add28$i116 = 0, $add28$i190 = 0, $add28$i79 = 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay18 = 0, $arraydecay19 = 0, $arraydecay20 = 0, $arraydecay22 = 0, $arraydecay25 = 0, $arraydecay5 = 0, $arrayidx1$i = 0, $arrayidx1$i126 = 0, $arrayidx1$i163 = 0, $arrayidx11$i = 0, $arrayidx11$i61 = 0, $arrayidx12$i = 0, $arrayidx12$i62 = 0, $arrayidx13$i = 0, $arrayidx13$i63 = 0, $arrayidx14$i = 0, $arrayidx14$i64 = 0, $arrayidx15$i = 0;
 var $arrayidx15$i65 = 0, $arrayidx16$i = 0, $arrayidx16$i66 = 0, $arrayidx17$i = 0, $arrayidx17$i67 = 0, $arrayidx18$i = 0, $arrayidx18$i68 = 0, $arrayidx19$i = 0, $arrayidx19$i69 = 0, $arrayidx2$i = 0, $arrayidx2$i127 = 0, $arrayidx2$i164 = 0, $arrayidx3$i = 0, $arrayidx3$i128 = 0, $arrayidx3$i165 = 0, $arrayidx30$i = 0, $arrayidx30$i228 = 0, $arrayidx31$i = 0, $arrayidx31$i229 = 0, $arrayidx32$i = 0;
 var $arrayidx32$i230 = 0, $arrayidx33$i = 0, $arrayidx33$i231 = 0, $arrayidx34$i = 0, $arrayidx34$i232 = 0, $arrayidx35$i = 0, $arrayidx35$i233 = 0, $arrayidx36$i = 0, $arrayidx36$i234 = 0, $arrayidx37$i = 0, $arrayidx37$i235 = 0, $arrayidx38$i = 0, $arrayidx38$i236 = 0, $arrayidx4$i = 0, $arrayidx4$i129 = 0, $arrayidx4$i166 = 0, $arrayidx5$i = 0, $arrayidx5$i130 = 0, $arrayidx5$i167 = 0, $arrayidx6$i = 0;
 var $arrayidx6$i131 = 0, $arrayidx6$i168 = 0, $arrayidx7$i = 0, $arrayidx7$i132 = 0, $arrayidx7$i169 = 0, $arrayidx8$i = 0, $arrayidx8$i133 = 0, $arrayidx8$i170 = 0, $arrayidx9$i = 0, $arrayidx9$i134 = 0, $arrayidx9$i171 = 0, $sub$i = 0, $sub$i144 = 0, $sub$i218 = 0, $sub20$i = 0, $sub20$i145 = 0, $sub20$i219 = 0, $sub21$i = 0, $sub21$i146 = 0, $sub21$i220 = 0;
 var $sub22$i = 0, $sub22$i147 = 0, $sub22$i221 = 0, $sub23$i = 0, $sub23$i148 = 0, $sub23$i222 = 0, $sub24$i = 0, $sub24$i149 = 0, $sub24$i223 = 0, $sub25$i = 0, $sub25$i150 = 0, $sub25$i224 = 0, $sub26$i = 0, $sub26$i151 = 0, $sub26$i225 = 0, $sub27$i = 0, $sub27$i152 = 0, $sub27$i226 = 0, $sub28$i = 0, $sub28$i153 = 0;
 var $sub28$i227 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay1 = ((($p)) + 40|0);
 $0 = HEAP32[$arraydecay1>>2]|0;
 $arrayidx1$i = ((($p)) + 44|0);
 $1 = HEAP32[$arrayidx1$i>>2]|0;
 $arrayidx2$i = ((($p)) + 48|0);
 $2 = HEAP32[$arrayidx2$i>>2]|0;
 $arrayidx3$i = ((($p)) + 52|0);
 $3 = HEAP32[$arrayidx3$i>>2]|0;
 $arrayidx4$i = ((($p)) + 56|0);
 $4 = HEAP32[$arrayidx4$i>>2]|0;
 $arrayidx5$i = ((($p)) + 60|0);
 $5 = HEAP32[$arrayidx5$i>>2]|0;
 $arrayidx6$i = ((($p)) + 64|0);
 $6 = HEAP32[$arrayidx6$i>>2]|0;
 $arrayidx7$i = ((($p)) + 68|0);
 $7 = HEAP32[$arrayidx7$i>>2]|0;
 $arrayidx8$i = ((($p)) + 72|0);
 $8 = HEAP32[$arrayidx8$i>>2]|0;
 $arrayidx9$i = ((($p)) + 76|0);
 $9 = HEAP32[$arrayidx9$i>>2]|0;
 $10 = HEAP32[$p>>2]|0;
 $arrayidx11$i = ((($p)) + 4|0);
 $11 = HEAP32[$arrayidx11$i>>2]|0;
 $arrayidx12$i = ((($p)) + 8|0);
 $12 = HEAP32[$arrayidx12$i>>2]|0;
 $arrayidx13$i = ((($p)) + 12|0);
 $13 = HEAP32[$arrayidx13$i>>2]|0;
 $arrayidx14$i = ((($p)) + 16|0);
 $14 = HEAP32[$arrayidx14$i>>2]|0;
 $arrayidx15$i = ((($p)) + 20|0);
 $15 = HEAP32[$arrayidx15$i>>2]|0;
 $arrayidx16$i = ((($p)) + 24|0);
 $16 = HEAP32[$arrayidx16$i>>2]|0;
 $arrayidx17$i = ((($p)) + 28|0);
 $17 = HEAP32[$arrayidx17$i>>2]|0;
 $arrayidx18$i = ((($p)) + 32|0);
 $18 = HEAP32[$arrayidx18$i>>2]|0;
 $arrayidx19$i = ((($p)) + 36|0);
 $19 = HEAP32[$arrayidx19$i>>2]|0;
 $add$i = (($10) + ($0))|0;
 $add20$i = (($11) + ($1))|0;
 $add21$i = (($12) + ($2))|0;
 $add22$i = (($13) + ($3))|0;
 $add23$i = (($14) + ($4))|0;
 $add24$i = (($15) + ($5))|0;
 $add25$i = (($16) + ($6))|0;
 $add26$i = (($17) + ($7))|0;
 $add27$i = (($18) + ($8))|0;
 $add28$i = (($19) + ($9))|0;
 HEAP32[$r>>2] = $add$i;
 $arrayidx30$i = ((($r)) + 4|0);
 HEAP32[$arrayidx30$i>>2] = $add20$i;
 $arrayidx31$i = ((($r)) + 8|0);
 HEAP32[$arrayidx31$i>>2] = $add21$i;
 $arrayidx32$i = ((($r)) + 12|0);
 HEAP32[$arrayidx32$i>>2] = $add22$i;
 $arrayidx33$i = ((($r)) + 16|0);
 HEAP32[$arrayidx33$i>>2] = $add23$i;
 $arrayidx34$i = ((($r)) + 20|0);
 HEAP32[$arrayidx34$i>>2] = $add24$i;
 $arrayidx35$i = ((($r)) + 24|0);
 HEAP32[$arrayidx35$i>>2] = $add25$i;
 $arrayidx36$i = ((($r)) + 28|0);
 HEAP32[$arrayidx36$i>>2] = $add26$i;
 $arrayidx37$i = ((($r)) + 32|0);
 HEAP32[$arrayidx37$i>>2] = $add27$i;
 $arrayidx38$i = ((($r)) + 36|0);
 HEAP32[$arrayidx38$i>>2] = $add28$i;
 $arraydecay5 = ((($r)) + 40|0);
 $20 = HEAP32[$arraydecay1>>2]|0;
 $21 = HEAP32[$arrayidx1$i>>2]|0;
 $22 = HEAP32[$arrayidx2$i>>2]|0;
 $23 = HEAP32[$arrayidx3$i>>2]|0;
 $24 = HEAP32[$arrayidx4$i>>2]|0;
 $25 = HEAP32[$arrayidx5$i>>2]|0;
 $26 = HEAP32[$arrayidx6$i>>2]|0;
 $27 = HEAP32[$arrayidx7$i>>2]|0;
 $28 = HEAP32[$arrayidx8$i>>2]|0;
 $29 = HEAP32[$arrayidx9$i>>2]|0;
 $30 = HEAP32[$p>>2]|0;
 $31 = HEAP32[$arrayidx11$i>>2]|0;
 $32 = HEAP32[$arrayidx12$i>>2]|0;
 $33 = HEAP32[$arrayidx13$i>>2]|0;
 $34 = HEAP32[$arrayidx14$i>>2]|0;
 $35 = HEAP32[$arrayidx15$i>>2]|0;
 $36 = HEAP32[$arrayidx16$i>>2]|0;
 $37 = HEAP32[$arrayidx17$i>>2]|0;
 $38 = HEAP32[$arrayidx18$i>>2]|0;
 $39 = HEAP32[$arrayidx19$i>>2]|0;
 $sub$i218 = (($20) - ($30))|0;
 $sub20$i219 = (($21) - ($31))|0;
 $sub21$i220 = (($22) - ($32))|0;
 $sub22$i221 = (($23) - ($33))|0;
 $sub23$i222 = (($24) - ($34))|0;
 $sub24$i223 = (($25) - ($35))|0;
 $sub25$i224 = (($26) - ($36))|0;
 $sub26$i225 = (($27) - ($37))|0;
 $sub27$i226 = (($28) - ($38))|0;
 $sub28$i227 = (($29) - ($39))|0;
 HEAP32[$arraydecay5>>2] = $sub$i218;
 $arrayidx30$i228 = ((($r)) + 44|0);
 HEAP32[$arrayidx30$i228>>2] = $sub20$i219;
 $arrayidx31$i229 = ((($r)) + 48|0);
 HEAP32[$arrayidx31$i229>>2] = $sub21$i220;
 $arrayidx32$i230 = ((($r)) + 52|0);
 HEAP32[$arrayidx32$i230>>2] = $sub22$i221;
 $arrayidx33$i231 = ((($r)) + 56|0);
 HEAP32[$arrayidx33$i231>>2] = $sub23$i222;
 $arrayidx34$i232 = ((($r)) + 60|0);
 HEAP32[$arrayidx34$i232>>2] = $sub24$i223;
 $arrayidx35$i233 = ((($r)) + 64|0);
 HEAP32[$arrayidx35$i233>>2] = $sub25$i224;
 $arrayidx36$i234 = ((($r)) + 68|0);
 HEAP32[$arrayidx36$i234>>2] = $sub26$i225;
 $arrayidx37$i235 = ((($r)) + 72|0);
 HEAP32[$arrayidx37$i235>>2] = $sub27$i226;
 $arrayidx38$i236 = ((($r)) + 76|0);
 HEAP32[$arrayidx38$i236>>2] = $sub28$i227;
 $arraydecay10 = ((($r)) + 80|0);
 _fe_mul($arraydecay10,$r,$q);
 $arraydecay18 = ((($q)) + 40|0);
 _fe_mul($arraydecay5,$arraydecay5,$arraydecay18);
 $arraydecay19 = ((($r)) + 120|0);
 $arraydecay20 = ((($q)) + 80|0);
 $arraydecay22 = ((($p)) + 120|0);
 _fe_mul($arraydecay19,$arraydecay20,$arraydecay22);
 $arraydecay25 = ((($p)) + 80|0);
 $40 = HEAP32[$arraydecay25>>2]|0;
 $arrayidx1$i163 = ((($p)) + 84|0);
 $41 = HEAP32[$arrayidx1$i163>>2]|0;
 $arrayidx2$i164 = ((($p)) + 88|0);
 $42 = HEAP32[$arrayidx2$i164>>2]|0;
 $arrayidx3$i165 = ((($p)) + 92|0);
 $43 = HEAP32[$arrayidx3$i165>>2]|0;
 $arrayidx4$i166 = ((($p)) + 96|0);
 $44 = HEAP32[$arrayidx4$i166>>2]|0;
 $arrayidx5$i167 = ((($p)) + 100|0);
 $45 = HEAP32[$arrayidx5$i167>>2]|0;
 $arrayidx6$i168 = ((($p)) + 104|0);
 $46 = HEAP32[$arrayidx6$i168>>2]|0;
 $arrayidx7$i169 = ((($p)) + 108|0);
 $47 = HEAP32[$arrayidx7$i169>>2]|0;
 $arrayidx8$i170 = ((($p)) + 112|0);
 $48 = HEAP32[$arrayidx8$i170>>2]|0;
 $arrayidx9$i171 = ((($p)) + 116|0);
 $49 = HEAP32[$arrayidx9$i171>>2]|0;
 $add$i181 = $40 << 1;
 $add20$i182 = $41 << 1;
 $add21$i183 = $42 << 1;
 $add22$i184 = $43 << 1;
 $add23$i185 = $44 << 1;
 $add24$i186 = $45 << 1;
 $add25$i187 = $46 << 1;
 $add26$i188 = $47 << 1;
 $add27$i189 = $48 << 1;
 $add28$i190 = $49 << 1;
 $50 = HEAP32[$arraydecay10>>2]|0;
 $arrayidx1$i126 = ((($r)) + 84|0);
 $51 = HEAP32[$arrayidx1$i126>>2]|0;
 $arrayidx2$i127 = ((($r)) + 88|0);
 $52 = HEAP32[$arrayidx2$i127>>2]|0;
 $arrayidx3$i128 = ((($r)) + 92|0);
 $53 = HEAP32[$arrayidx3$i128>>2]|0;
 $arrayidx4$i129 = ((($r)) + 96|0);
 $54 = HEAP32[$arrayidx4$i129>>2]|0;
 $arrayidx5$i130 = ((($r)) + 100|0);
 $55 = HEAP32[$arrayidx5$i130>>2]|0;
 $arrayidx6$i131 = ((($r)) + 104|0);
 $56 = HEAP32[$arrayidx6$i131>>2]|0;
 $arrayidx7$i132 = ((($r)) + 108|0);
 $57 = HEAP32[$arrayidx7$i132>>2]|0;
 $arrayidx8$i133 = ((($r)) + 112|0);
 $58 = HEAP32[$arrayidx8$i133>>2]|0;
 $arrayidx9$i134 = ((($r)) + 116|0);
 $59 = HEAP32[$arrayidx9$i134>>2]|0;
 $60 = HEAP32[$arraydecay5>>2]|0;
 $61 = HEAP32[$arrayidx30$i228>>2]|0;
 $62 = HEAP32[$arrayidx31$i229>>2]|0;
 $63 = HEAP32[$arrayidx32$i230>>2]|0;
 $64 = HEAP32[$arrayidx33$i231>>2]|0;
 $65 = HEAP32[$arrayidx34$i232>>2]|0;
 $66 = HEAP32[$arrayidx35$i233>>2]|0;
 $67 = HEAP32[$arrayidx36$i234>>2]|0;
 $68 = HEAP32[$arrayidx37$i235>>2]|0;
 $69 = HEAP32[$arrayidx38$i236>>2]|0;
 $sub$i144 = (($50) - ($60))|0;
 $sub20$i145 = (($51) - ($61))|0;
 $sub21$i146 = (($52) - ($62))|0;
 $sub22$i147 = (($53) - ($63))|0;
 $sub23$i148 = (($54) - ($64))|0;
 $sub24$i149 = (($55) - ($65))|0;
 $sub25$i150 = (($56) - ($66))|0;
 $sub26$i151 = (($57) - ($67))|0;
 $sub27$i152 = (($58) - ($68))|0;
 $sub28$i153 = (($59) - ($69))|0;
 HEAP32[$r>>2] = $sub$i144;
 HEAP32[$arrayidx30$i>>2] = $sub20$i145;
 HEAP32[$arrayidx31$i>>2] = $sub21$i146;
 HEAP32[$arrayidx32$i>>2] = $sub22$i147;
 HEAP32[$arrayidx33$i>>2] = $sub23$i148;
 HEAP32[$arrayidx34$i>>2] = $sub24$i149;
 HEAP32[$arrayidx35$i>>2] = $sub25$i150;
 HEAP32[$arrayidx36$i>>2] = $sub26$i151;
 HEAP32[$arrayidx37$i>>2] = $sub27$i152;
 HEAP32[$arrayidx38$i>>2] = $sub28$i153;
 $add$i107 = (($60) + ($50))|0;
 $add20$i108 = (($61) + ($51))|0;
 $add21$i109 = (($62) + ($52))|0;
 $add22$i110 = (($63) + ($53))|0;
 $add23$i111 = (($64) + ($54))|0;
 $add24$i112 = (($65) + ($55))|0;
 $add25$i113 = (($66) + ($56))|0;
 $add26$i114 = (($67) + ($57))|0;
 $add27$i115 = (($68) + ($58))|0;
 $add28$i116 = (($69) + ($59))|0;
 HEAP32[$arraydecay5>>2] = $add$i107;
 HEAP32[$arrayidx30$i228>>2] = $add20$i108;
 HEAP32[$arrayidx31$i229>>2] = $add21$i109;
 HEAP32[$arrayidx32$i230>>2] = $add22$i110;
 HEAP32[$arrayidx33$i231>>2] = $add23$i111;
 HEAP32[$arrayidx34$i232>>2] = $add24$i112;
 HEAP32[$arrayidx35$i233>>2] = $add25$i113;
 HEAP32[$arrayidx36$i234>>2] = $add26$i114;
 HEAP32[$arrayidx37$i235>>2] = $add27$i115;
 HEAP32[$arrayidx38$i236>>2] = $add28$i116;
 $70 = HEAP32[$arraydecay19>>2]|0;
 $arrayidx11$i61 = ((($r)) + 124|0);
 $71 = HEAP32[$arrayidx11$i61>>2]|0;
 $arrayidx12$i62 = ((($r)) + 128|0);
 $72 = HEAP32[$arrayidx12$i62>>2]|0;
 $arrayidx13$i63 = ((($r)) + 132|0);
 $73 = HEAP32[$arrayidx13$i63>>2]|0;
 $arrayidx14$i64 = ((($r)) + 136|0);
 $74 = HEAP32[$arrayidx14$i64>>2]|0;
 $arrayidx15$i65 = ((($r)) + 140|0);
 $75 = HEAP32[$arrayidx15$i65>>2]|0;
 $arrayidx16$i66 = ((($r)) + 144|0);
 $76 = HEAP32[$arrayidx16$i66>>2]|0;
 $arrayidx17$i67 = ((($r)) + 148|0);
 $77 = HEAP32[$arrayidx17$i67>>2]|0;
 $arrayidx18$i68 = ((($r)) + 152|0);
 $78 = HEAP32[$arrayidx18$i68>>2]|0;
 $arrayidx19$i69 = ((($r)) + 156|0);
 $79 = HEAP32[$arrayidx19$i69>>2]|0;
 $add$i70 = (($70) + ($add$i181))|0;
 $add20$i71 = (($71) + ($add20$i182))|0;
 $add21$i72 = (($72) + ($add21$i183))|0;
 $add22$i73 = (($73) + ($add22$i184))|0;
 $add23$i74 = (($74) + ($add23$i185))|0;
 $add24$i75 = (($75) + ($add24$i186))|0;
 $add25$i76 = (($76) + ($add25$i187))|0;
 $add26$i77 = (($77) + ($add26$i188))|0;
 $add27$i78 = (($78) + ($add27$i189))|0;
 $add28$i79 = (($79) + ($add28$i190))|0;
 HEAP32[$arraydecay10>>2] = $add$i70;
 HEAP32[$arrayidx1$i126>>2] = $add20$i71;
 HEAP32[$arrayidx2$i127>>2] = $add21$i72;
 HEAP32[$arrayidx3$i128>>2] = $add22$i73;
 HEAP32[$arrayidx4$i129>>2] = $add23$i74;
 HEAP32[$arrayidx5$i130>>2] = $add24$i75;
 HEAP32[$arrayidx6$i131>>2] = $add25$i76;
 HEAP32[$arrayidx7$i132>>2] = $add26$i77;
 HEAP32[$arrayidx8$i133>>2] = $add27$i78;
 HEAP32[$arrayidx9$i134>>2] = $add28$i79;
 $sub$i = (($add$i181) - ($70))|0;
 $sub20$i = (($add20$i182) - ($71))|0;
 $sub21$i = (($add21$i183) - ($72))|0;
 $sub22$i = (($add22$i184) - ($73))|0;
 $sub23$i = (($add23$i185) - ($74))|0;
 $sub24$i = (($add24$i186) - ($75))|0;
 $sub25$i = (($add25$i187) - ($76))|0;
 $sub26$i = (($add26$i188) - ($77))|0;
 $sub27$i = (($add27$i189) - ($78))|0;
 $sub28$i = (($add28$i190) - ($79))|0;
 HEAP32[$arraydecay19>>2] = $sub$i;
 HEAP32[$arrayidx11$i61>>2] = $sub20$i;
 HEAP32[$arrayidx12$i62>>2] = $sub21$i;
 HEAP32[$arrayidx13$i63>>2] = $sub22$i;
 HEAP32[$arrayidx14$i64>>2] = $sub23$i;
 HEAP32[$arrayidx15$i65>>2] = $sub24$i;
 HEAP32[$arrayidx16$i66>>2] = $sub25$i;
 HEAP32[$arrayidx17$i67>>2] = $sub26$i;
 HEAP32[$arrayidx18$i68>>2] = $sub27$i;
 HEAP32[$arrayidx19$i69>>2] = $sub28$i;
 return;
}
function _ge_p1p1_to_p2($r,$p) {
 $r = $r|0;
 $p = $p|0;
 var $arraydecay3 = 0, $arraydecay4 = 0, $arraydecay6 = 0, $arraydecay7 = 0, $arraydecay9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay3 = ((($p)) + 120|0);
 _fe_mul($r,$p,$arraydecay3);
 $arraydecay4 = ((($r)) + 40|0);
 $arraydecay6 = ((($p)) + 40|0);
 $arraydecay7 = ((($p)) + 80|0);
 _fe_mul($arraydecay4,$arraydecay6,$arraydecay7);
 $arraydecay9 = ((($r)) + 80|0);
 _fe_mul($arraydecay9,$arraydecay7,$arraydecay3);
 return;
}
function _ge_frombytes_vartime($h,$s) {
 $h = $h|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$i253 = 0, $add$i398 = 0, $add$ptr = 0, $add$ptr$idx = 0, $add$ptr$idx$val = 0, $add$ptr$idx120 = 0, $add$ptr$idx120$val = 0, $add$ptr$val = 0, $add$ptr11 = 0, $add$ptr13 = 0;
 var $add$ptr13$idx = 0, $add$ptr13$idx$val = 0, $add$ptr13$idx116 = 0, $add$ptr13$idx116$val = 0, $add$ptr13$val = 0, $add$ptr16 = 0, $add$ptr16$idx = 0, $add$ptr16$idx$val = 0, $add$ptr16$idx115 = 0, $add$ptr16$idx115$val = 0, $add$ptr16$val = 0, $add$ptr19 = 0, $add$ptr19$idx = 0, $add$ptr19$idx$val = 0, $add$ptr19$idx114 = 0, $add$ptr19$idx114$val = 0, $add$ptr19$val = 0, $add$ptr2 = 0, $add$ptr2$idx = 0, $add$ptr2$idx$val = 0;
 var $add$ptr2$idx119 = 0, $add$ptr2$idx119$val = 0, $add$ptr2$val = 0, $add$ptr22 = 0, $add$ptr22$idx = 0, $add$ptr22$idx$val = 0, $add$ptr22$idx113 = 0, $add$ptr22$idx113$val = 0, $add$ptr22$val = 0, $add$ptr5 = 0, $add$ptr5$idx = 0, $add$ptr5$idx$val = 0, $add$ptr5$idx118 = 0, $add$ptr5$idx118$val = 0, $add$ptr5$val = 0, $add$ptr8 = 0, $add$ptr8$idx = 0, $add$ptr8$idx$val = 0, $add$ptr8$idx117 = 0, $add$ptr8$idx117$val = 0;
 var $add$ptr8$val = 0, $add20$i = 0, $add20$i399 = 0, $add21$i = 0, $add21$i400 = 0, $add22$i = 0, $add22$i401 = 0, $add23$i = 0, $add23$i402 = 0, $add24$i = 0, $add24$i403 = 0, $add25$i = 0, $add25$i404 = 0, $add26$i = 0, $add26$i405 = 0, $add27$i = 0, $add27$i406 = 0, $add28$i = 0, $add28$i407 = 0, $and$i = 0;
 var $arraydecay = 0, $arraydecay177 = 0, $arrayidx = 0, $arrayidx1$i = 0, $arrayidx1$i128 = 0, $arrayidx1$i229 = 0, $arrayidx1$i258 = 0, $arrayidx1$i331 = 0, $arrayidx1$i380 = 0, $arrayidx1$i417 = 0, $arrayidx1$i454 = 0, $arrayidx100 = 0, $arrayidx103 = 0, $arrayidx106 = 0, $arrayidx109 = 0, $arrayidx112 = 0, $arrayidx115 = 0, $arrayidx12$i266 = 0, $arrayidx12$i427 = 0, $arrayidx13$i428 = 0;
 var $arrayidx14$i429 = 0, $arrayidx15$i268 = 0, $arrayidx15$i430 = 0, $arrayidx16$i431 = 0, $arrayidx17$i432 = 0, $arrayidx18$i270 = 0, $arrayidx18$i433 = 0, $arrayidx19$i434 = 0, $arrayidx2$i = 0, $arrayidx2$i332 = 0, $arrayidx2$i381 = 0, $arrayidx2$i418 = 0, $arrayidx21$i272 = 0, $arrayidx24$i274 = 0, $arrayidx27$i276 = 0, $arrayidx3$i = 0, $arrayidx3$i129 = 0, $arrayidx3$i233 = 0, $arrayidx3$i260 = 0, $arrayidx3$i333 = 0;
 var $arrayidx3$i382 = 0, $arrayidx3$i419 = 0, $arrayidx30$i278 = 0, $arrayidx30$i350 = 0, $arrayidx31$i351 = 0, $arrayidx32$i352 = 0, $arrayidx33$i280 = 0, $arrayidx33$i353 = 0, $arrayidx34$i354 = 0, $arrayidx35$i355 = 0, $arrayidx36$i282 = 0, $arrayidx36$i356 = 0, $arrayidx37$i357 = 0, $arrayidx38$i358 = 0, $arrayidx39$i284 = 0, $arrayidx4$i = 0, $arrayidx4$i334 = 0, $arrayidx4$i383 = 0, $arrayidx4$i420 = 0, $arrayidx42$i286 = 0;
 var $arrayidx45$i288 = 0, $arrayidx48$i290 = 0, $arrayidx5$i = 0, $arrayidx5$i335 = 0, $arrayidx5$i384 = 0, $arrayidx5$i421 = 0, $arrayidx51$i292 = 0, $arrayidx54$i294 = 0, $arrayidx57$i296 = 0, $arrayidx6$i = 0, $arrayidx6$i262 = 0, $arrayidx6$i336 = 0, $arrayidx6$i385 = 0, $arrayidx6$i422 = 0, $arrayidx60$i298 = 0, $arrayidx63$i300 = 0, $arrayidx66$i302 = 0, $arrayidx69$i304 = 0, $arrayidx7$i = 0, $arrayidx7$i130 = 0;
 var $arrayidx7$i237 = 0, $arrayidx7$i337 = 0, $arrayidx7$i386 = 0, $arrayidx7$i423 = 0, $arrayidx72$i306 = 0, $arrayidx75$i308 = 0, $arrayidx78$i310 = 0, $arrayidx8$i = 0, $arrayidx8$i338 = 0, $arrayidx8$i387 = 0, $arrayidx8$i424 = 0, $arrayidx81$i312 = 0, $arrayidx84$i314 = 0, $arrayidx87$i316 = 0, $arrayidx9$i = 0, $arrayidx9$i264 = 0, $arrayidx9$i339 = 0, $arrayidx9$i388 = 0, $arrayidx9$i425 = 0, $arrayidx90$i318 = 0;
 var $arrayidx91 = 0, $arrayidx94 = 0, $arrayidx97 = 0, $check = 0, $cmp163 = 0, $conv161 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $or1$i = 0, $or1$i163 = 0, $or1$i259 = 0, $or115$i = 0, $or115$i169 = 0;
 var $or115$i265 = 0, $or146$i = 0, $or146$i171 = 0, $or146$i267 = 0, $or177$i = 0, $or177$i173 = 0, $or177$i269 = 0, $or208$i = 0, $or208$i175 = 0, $or208$i271 = 0, $or239$i = 0, $or239$i177 = 0, $or239$i273 = 0, $or2610$i = 0, $or2610$i179 = 0, $or2610$i275 = 0, $or2911$i = 0, $or2911$i181 = 0, $or2911$i277 = 0, $or3212$i = 0;
 var $or3212$i183 = 0, $or3212$i279 = 0, $or3513$i = 0, $or3513$i185 = 0, $or3513$i281 = 0, $or3814$i = 0, $or3814$i187 = 0, $or3814$i283 = 0, $or4115$i = 0, $or4115$i189 = 0, $or4115$i285 = 0, $or4416$i = 0, $or4416$i191 = 0, $or4416$i287 = 0, $or4717$i = 0, $or4717$i193 = 0, $or4717$i289 = 0, $or5018$i = 0, $or5018$i195 = 0, $or5018$i291 = 0;
 var $or52$i = 0, $or52$i165 = 0, $or52$i261 = 0, $or5319$i = 0, $or5319$i197 = 0, $or5319$i293 = 0, $or5620$i = 0, $or5620$i199 = 0, $or5620$i295 = 0, $or5921$i = 0, $or5921$i201 = 0, $or5921$i297 = 0, $or6222$i = 0, $or6222$i203 = 0, $or6222$i299 = 0, $or6523$i = 0, $or6523$i205 = 0, $or6523$i301 = 0, $or6824$i = 0, $or6824$i207 = 0;
 var $or6824$i303 = 0, $or7125$i = 0, $or7125$i209 = 0, $or7125$i305 = 0, $or7426$i = 0, $or7426$i211 = 0, $or7426$i307 = 0, $or7727$i = 0, $or7727$i213 = 0, $or7727$i309 = 0, $or8028$i = 0, $or8028$i215 = 0, $or8028$i311 = 0, $or8329$i = 0, $or8329$i217 = 0, $or8329$i313 = 0, $or84$i = 0, $or84$i167 = 0, $or84$i263 = 0, $or8630$i = 0;
 var $or8630$i219 = 0, $or8630$i315 = 0, $or8931$i = 0, $or8931$i221 = 0, $or8931$i317 = 0, $or92$i = 0, $or92$i224 = 0, $or92$i320 = 0, $or9232$i = 0, $or9232$i223 = 0, $or9232$i319 = 0, $retval$0 = 0, $s$i = 0, $sub$i = 0, $sub$i138 = 0, $sub$i225 = 0, $sub$i321 = 0, $sub$i349 = 0, $sub$i435 = 0, $sub10$i = 0;
 var $sub11$i = 0, $sub12$i = 0, $sub13$i = 0, $sub14$i = 0, $sub15$i = 0, $sub16$i = 0, $sub17$i = 0, $sub18$i = 0, $sub20$i = 0, $sub20$i436 = 0, $sub21$i = 0, $sub21$i437 = 0, $sub22$i = 0, $sub22$i438 = 0, $sub23$i = 0, $sub23$i439 = 0, $sub24$i = 0, $sub24$i440 = 0, $sub25$i = 0, $sub25$i441 = 0;
 var $sub26$i = 0, $sub26$i442 = 0, $sub27$i = 0, $sub27$i443 = 0, $sub28$i = 0, $sub28$i444 = 0, $tobool = 0, $tobool149 = 0, $tobool169 = 0, $u = 0, $v = 0, $vxx = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $s$i = sp + 192|0;
 $u = sp + 144|0;
 $v = sp + 96|0;
 $vxx = sp + 48|0;
 $check = sp;
 $0 = HEAP8[$s>>0]|0;
 $1 = $0&255;
 $arrayidx1$i = ((($s)) + 1|0);
 $2 = HEAP8[$arrayidx1$i>>0]|0;
 $3 = $2&255;
 $4 = (_bitshift64Shl(($3|0),0,8)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4 | $1;
 $arrayidx3$i = ((($s)) + 2|0);
 $7 = HEAP8[$arrayidx3$i>>0]|0;
 $8 = $7&255;
 $9 = (_bitshift64Shl(($8|0),0,16)|0);
 $10 = (getTempRet0() | 0);
 $11 = $6 | $9;
 $12 = $5 | $10;
 $arrayidx7$i = ((($s)) + 3|0);
 $13 = HEAP8[$arrayidx7$i>>0]|0;
 $14 = $13&255;
 $15 = (_bitshift64Shl(($14|0),0,24)|0);
 $16 = (getTempRet0() | 0);
 $17 = $11 | $15;
 $18 = $12 | $16;
 $add$ptr = ((($s)) + 4|0);
 $add$ptr$val = HEAP8[$add$ptr>>0]|0;
 $add$ptr$idx = ((($s)) + 5|0);
 $add$ptr$idx$val = HEAP8[$add$ptr$idx>>0]|0;
 $add$ptr$idx120 = ((($s)) + 6|0);
 $add$ptr$idx120$val = HEAP8[$add$ptr$idx120>>0]|0;
 $19 = $add$ptr$val&255;
 $20 = $add$ptr$idx$val&255;
 $21 = (_bitshift64Shl(($20|0),0,8)|0);
 $22 = (getTempRet0() | 0);
 $23 = $21 | $19;
 $24 = $add$ptr$idx120$val&255;
 $25 = (_bitshift64Shl(($24|0),0,16)|0);
 $26 = (getTempRet0() | 0);
 $27 = $23 | $25;
 $28 = $22 | $26;
 $29 = (_bitshift64Shl(($27|0),($28|0),6)|0);
 $30 = (getTempRet0() | 0);
 $add$ptr2 = ((($s)) + 7|0);
 $add$ptr2$val = HEAP8[$add$ptr2>>0]|0;
 $add$ptr2$idx = ((($s)) + 8|0);
 $add$ptr2$idx$val = HEAP8[$add$ptr2$idx>>0]|0;
 $add$ptr2$idx119 = ((($s)) + 9|0);
 $add$ptr2$idx119$val = HEAP8[$add$ptr2$idx119>>0]|0;
 $31 = $add$ptr2$val&255;
 $32 = $add$ptr2$idx$val&255;
 $33 = (_bitshift64Shl(($32|0),0,8)|0);
 $34 = (getTempRet0() | 0);
 $35 = $33 | $31;
 $36 = $add$ptr2$idx119$val&255;
 $37 = (_bitshift64Shl(($36|0),0,16)|0);
 $38 = (getTempRet0() | 0);
 $39 = $35 | $37;
 $40 = $34 | $38;
 $add$ptr5 = ((($s)) + 10|0);
 $add$ptr5$val = HEAP8[$add$ptr5>>0]|0;
 $add$ptr5$idx = ((($s)) + 11|0);
 $add$ptr5$idx$val = HEAP8[$add$ptr5$idx>>0]|0;
 $add$ptr5$idx118 = ((($s)) + 12|0);
 $add$ptr5$idx118$val = HEAP8[$add$ptr5$idx118>>0]|0;
 $41 = $add$ptr5$val&255;
 $42 = $add$ptr5$idx$val&255;
 $43 = (_bitshift64Shl(($42|0),0,8)|0);
 $44 = (getTempRet0() | 0);
 $45 = $43 | $41;
 $46 = $add$ptr5$idx118$val&255;
 $47 = (_bitshift64Shl(($46|0),0,16)|0);
 $48 = (getTempRet0() | 0);
 $49 = $45 | $47;
 $50 = $44 | $48;
 $51 = (_bitshift64Shl(($49|0),($50|0),3)|0);
 $52 = (getTempRet0() | 0);
 $add$ptr8 = ((($s)) + 13|0);
 $add$ptr8$val = HEAP8[$add$ptr8>>0]|0;
 $add$ptr8$idx = ((($s)) + 14|0);
 $add$ptr8$idx$val = HEAP8[$add$ptr8$idx>>0]|0;
 $add$ptr8$idx117 = ((($s)) + 15|0);
 $add$ptr8$idx117$val = HEAP8[$add$ptr8$idx117>>0]|0;
 $53 = $add$ptr8$val&255;
 $54 = $add$ptr8$idx$val&255;
 $55 = (_bitshift64Shl(($54|0),0,8)|0);
 $56 = (getTempRet0() | 0);
 $57 = $55 | $53;
 $58 = $add$ptr8$idx117$val&255;
 $59 = (_bitshift64Shl(($58|0),0,16)|0);
 $60 = (getTempRet0() | 0);
 $61 = $57 | $59;
 $62 = $56 | $60;
 $add$ptr11 = ((($s)) + 16|0);
 $63 = HEAP8[$add$ptr11>>0]|0;
 $64 = $63&255;
 $arrayidx1$i229 = ((($s)) + 17|0);
 $65 = HEAP8[$arrayidx1$i229>>0]|0;
 $66 = $65&255;
 $67 = (_bitshift64Shl(($66|0),0,8)|0);
 $68 = (getTempRet0() | 0);
 $69 = $67 | $64;
 $arrayidx3$i233 = ((($s)) + 18|0);
 $70 = HEAP8[$arrayidx3$i233>>0]|0;
 $71 = $70&255;
 $72 = (_bitshift64Shl(($71|0),0,16)|0);
 $73 = (getTempRet0() | 0);
 $74 = $69 | $72;
 $75 = $68 | $73;
 $arrayidx7$i237 = ((($s)) + 19|0);
 $76 = HEAP8[$arrayidx7$i237>>0]|0;
 $77 = $76&255;
 $78 = (_bitshift64Shl(($77|0),0,24)|0);
 $79 = (getTempRet0() | 0);
 $80 = $74 | $78;
 $81 = $75 | $79;
 $add$ptr13 = ((($s)) + 20|0);
 $add$ptr13$val = HEAP8[$add$ptr13>>0]|0;
 $add$ptr13$idx = ((($s)) + 21|0);
 $add$ptr13$idx$val = HEAP8[$add$ptr13$idx>>0]|0;
 $add$ptr13$idx116 = ((($s)) + 22|0);
 $add$ptr13$idx116$val = HEAP8[$add$ptr13$idx116>>0]|0;
 $82 = $add$ptr13$val&255;
 $83 = $add$ptr13$idx$val&255;
 $84 = (_bitshift64Shl(($83|0),0,8)|0);
 $85 = (getTempRet0() | 0);
 $86 = $84 | $82;
 $87 = $add$ptr13$idx116$val&255;
 $88 = (_bitshift64Shl(($87|0),0,16)|0);
 $89 = (getTempRet0() | 0);
 $90 = $86 | $88;
 $91 = $85 | $89;
 $add$ptr16 = ((($s)) + 23|0);
 $add$ptr16$val = HEAP8[$add$ptr16>>0]|0;
 $add$ptr16$idx = ((($s)) + 24|0);
 $add$ptr16$idx$val = HEAP8[$add$ptr16$idx>>0]|0;
 $add$ptr16$idx115 = ((($s)) + 25|0);
 $add$ptr16$idx115$val = HEAP8[$add$ptr16$idx115>>0]|0;
 $92 = $add$ptr16$val&255;
 $93 = $add$ptr16$idx$val&255;
 $94 = (_bitshift64Shl(($93|0),0,8)|0);
 $95 = (getTempRet0() | 0);
 $96 = $94 | $92;
 $97 = $add$ptr16$idx115$val&255;
 $98 = (_bitshift64Shl(($97|0),0,16)|0);
 $99 = (getTempRet0() | 0);
 $100 = $96 | $98;
 $101 = $95 | $99;
 $102 = (_bitshift64Shl(($100|0),($101|0),5)|0);
 $103 = (getTempRet0() | 0);
 $add$ptr19 = ((($s)) + 26|0);
 $add$ptr19$val = HEAP8[$add$ptr19>>0]|0;
 $add$ptr19$idx = ((($s)) + 27|0);
 $add$ptr19$idx$val = HEAP8[$add$ptr19$idx>>0]|0;
 $add$ptr19$idx114 = ((($s)) + 28|0);
 $add$ptr19$idx114$val = HEAP8[$add$ptr19$idx114>>0]|0;
 $104 = $add$ptr19$val&255;
 $105 = $add$ptr19$idx$val&255;
 $106 = (_bitshift64Shl(($105|0),0,8)|0);
 $107 = (getTempRet0() | 0);
 $108 = $106 | $104;
 $109 = $add$ptr19$idx114$val&255;
 $110 = (_bitshift64Shl(($109|0),0,16)|0);
 $111 = (getTempRet0() | 0);
 $112 = $108 | $110;
 $113 = $107 | $111;
 $add$ptr22 = ((($s)) + 29|0);
 $add$ptr22$val = HEAP8[$add$ptr22>>0]|0;
 $add$ptr22$idx = ((($s)) + 30|0);
 $add$ptr22$idx$val = HEAP8[$add$ptr22$idx>>0]|0;
 $add$ptr22$idx113 = ((($s)) + 31|0);
 $add$ptr22$idx113$val = HEAP8[$add$ptr22$idx113>>0]|0;
 $114 = $add$ptr22$val&255;
 $115 = $add$ptr22$idx$val&255;
 $116 = (_bitshift64Shl(($115|0),0,8)|0);
 $117 = (getTempRet0() | 0);
 $118 = $116 | $114;
 $119 = $add$ptr22$idx113$val&255;
 $120 = (_bitshift64Shl(($119|0),0,16)|0);
 $121 = (getTempRet0() | 0);
 $122 = $118 | $120;
 $123 = $117 | $121;
 $124 = (_bitshift64Shl(($122|0),($123|0),2)|0);
 $125 = (getTempRet0() | 0);
 $126 = $124 & 33554428;
 $127 = ($126|0)==(33554428);
 $128 = (0)==(0);
 $129 = $127 & $128;
 $130 = ($112|0)==(16777215);
 $131 = ($113|0)==(0);
 $132 = $130 & $131;
 $or$cond = $132 & $129;
 $133 = ($100|0)==(16777215);
 $134 = ($101|0)==(0);
 $135 = $133 & $134;
 $or$cond1 = $135 & $or$cond;
 $136 = ($90|0)==(16777215);
 $137 = ($91|0)==(0);
 $138 = $136 & $137;
 $or$cond2 = $138 & $or$cond1;
 $139 = ($80|0)==(-1);
 $140 = ($81|0)==(0);
 $141 = $139 & $140;
 $or$cond3 = $141 & $or$cond2;
 $142 = ($61|0)==(16777215);
 $143 = ($62|0)==(0);
 $144 = $142 & $143;
 $or$cond4 = $144 & $or$cond3;
 $145 = ($49|0)==(16777215);
 $146 = ($50|0)==(0);
 $147 = $145 & $146;
 $or$cond5 = $147 & $or$cond4;
 $148 = ($39|0)==(16777215);
 $149 = ($40|0)==(0);
 $150 = $148 & $149;
 $or$cond6 = $150 & $or$cond5;
 $151 = ($27|0)==(16777215);
 $152 = ($28|0)==(0);
 $153 = $151 & $152;
 $or$cond7 = $153 & $or$cond6;
 $154 = ($18>>>0)>(0);
 $155 = ($17>>>0)>(4294967276);
 $156 = ($18|0)==(0);
 $157 = $156 & $155;
 $158 = $154 | $157;
 $or$cond8 = $158 & $or$cond7;
 if ($or$cond8) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $159 = (_bitshift64Shl(($39|0),($40|0),5)|0);
 $160 = (getTempRet0() | 0);
 $161 = (_bitshift64Shl(($61|0),($62|0),2)|0);
 $162 = (getTempRet0() | 0);
 $163 = (_bitshift64Shl(($90|0),($91|0),7)|0);
 $164 = (getTempRet0() | 0);
 $165 = (_bitshift64Shl(($112|0),($113|0),4)|0);
 $166 = (getTempRet0() | 0);
 $167 = (_i64Add(($126|0),0,16777216,0)|0);
 $168 = (getTempRet0() | 0);
 $169 = (_bitshift64Lshr(($167|0),($168|0),25)|0);
 $170 = (getTempRet0() | 0);
 $171 = (_i64Subtract(0,0,($169|0),($170|0))|0);
 $172 = (getTempRet0() | 0);
 $173 = $171 & 19;
 $174 = (_i64Add(($173|0),0,($17|0),($18|0))|0);
 $175 = (getTempRet0() | 0);
 $176 = $167 & 33554432;
 $177 = (_i64Add(($29|0),($30|0),16777216,0)|0);
 $178 = (getTempRet0() | 0);
 $179 = (_bitshift64Lshr(($177|0),($178|0),25)|0);
 $180 = (getTempRet0() | 0);
 $181 = (_i64Add(($159|0),($160|0),($179|0),($180|0))|0);
 $182 = (getTempRet0() | 0);
 $183 = $177 & -33554432;
 $184 = (_i64Subtract(($29|0),($30|0),($183|0),0)|0);
 $185 = (getTempRet0() | 0);
 $186 = (_i64Add(($51|0),($52|0),16777216,0)|0);
 $187 = (getTempRet0() | 0);
 $188 = (_bitshift64Lshr(($186|0),($187|0),25)|0);
 $189 = (getTempRet0() | 0);
 $190 = (_i64Add(($161|0),($162|0),($188|0),($189|0))|0);
 $191 = (getTempRet0() | 0);
 $192 = $186 & -33554432;
 $193 = (_i64Add(($80|0),($81|0),16777216,0)|0);
 $194 = (getTempRet0() | 0);
 $195 = (_bitshift64Lshr(($193|0),($194|0),25)|0);
 $196 = (getTempRet0() | 0);
 $197 = (_i64Add(($163|0),($164|0),($195|0),($196|0))|0);
 $198 = (getTempRet0() | 0);
 $199 = $193 & -33554432;
 $200 = (_i64Add(($102|0),($103|0),16777216,0)|0);
 $201 = (getTempRet0() | 0);
 $202 = (_bitshift64Lshr(($200|0),($201|0),25)|0);
 $203 = (getTempRet0() | 0);
 $204 = (_i64Add(($165|0),($166|0),($202|0),($203|0))|0);
 $205 = (getTempRet0() | 0);
 $206 = $200 & -33554432;
 $207 = (_i64Add(($174|0),($175|0),33554432,0)|0);
 $208 = (getTempRet0() | 0);
 $209 = (_bitshift64Lshr(($207|0),($208|0),26)|0);
 $210 = (getTempRet0() | 0);
 $211 = (_i64Add(($184|0),($185|0),($209|0),($210|0))|0);
 $212 = (getTempRet0() | 0);
 $213 = $207 & -67108864;
 $214 = (_i64Subtract(($174|0),($175|0),($213|0),0)|0);
 $215 = (getTempRet0() | 0);
 $216 = (_i64Add(($181|0),($182|0),33554432,0)|0);
 $217 = (getTempRet0() | 0);
 $218 = (_bitshift64Lshr(($216|0),($217|0),26)|0);
 $219 = (getTempRet0() | 0);
 $220 = (_i64Add(($218|0),($219|0),($51|0),($52|0))|0);
 $221 = (getTempRet0() | 0);
 $222 = (_i64Subtract(($220|0),($221|0),($192|0),0)|0);
 $223 = (getTempRet0() | 0);
 $224 = $216 & -67108864;
 $225 = (_i64Subtract(($181|0),($182|0),($224|0),0)|0);
 $226 = (getTempRet0() | 0);
 $227 = (_i64Add(($190|0),($191|0),33554432,0)|0);
 $228 = (getTempRet0() | 0);
 $229 = (_bitshift64Lshr(($227|0),($228|0),26)|0);
 $230 = (getTempRet0() | 0);
 $231 = (_i64Add(($229|0),($230|0),($80|0),($81|0))|0);
 $232 = (getTempRet0() | 0);
 $233 = (_i64Subtract(($231|0),($232|0),($199|0),0)|0);
 $234 = (getTempRet0() | 0);
 $235 = $227 & -67108864;
 $236 = (_i64Subtract(($190|0),($191|0),($235|0),0)|0);
 $237 = (getTempRet0() | 0);
 $238 = (_i64Add(($197|0),($198|0),33554432,0)|0);
 $239 = (getTempRet0() | 0);
 $240 = (_bitshift64Lshr(($238|0),($239|0),26)|0);
 $241 = (getTempRet0() | 0);
 $242 = (_i64Add(($240|0),($241|0),($102|0),($103|0))|0);
 $243 = (getTempRet0() | 0);
 $244 = (_i64Subtract(($242|0),($243|0),($206|0),0)|0);
 $245 = (getTempRet0() | 0);
 $246 = $238 & -67108864;
 $247 = (_i64Subtract(($197|0),($198|0),($246|0),0)|0);
 $248 = (getTempRet0() | 0);
 $249 = (_i64Add(($204|0),($205|0),33554432,0)|0);
 $250 = (getTempRet0() | 0);
 $251 = (_bitshift64Lshr(($249|0),($250|0),26)|0);
 $252 = (getTempRet0() | 0);
 $253 = (_i64Add(($126|0),0,($251|0),($252|0))|0);
 $254 = (getTempRet0() | 0);
 $255 = (_i64Subtract(($253|0),($254|0),($176|0),0)|0);
 $256 = (getTempRet0() | 0);
 $257 = $249 & -67108864;
 $258 = (_i64Subtract(($204|0),($205|0),($257|0),0)|0);
 $259 = (getTempRet0() | 0);
 $arrayidx = ((($h)) + 40|0);
 HEAP32[$arrayidx>>2] = $214;
 $arrayidx91 = ((($h)) + 44|0);
 HEAP32[$arrayidx91>>2] = $211;
 $arrayidx94 = ((($h)) + 48|0);
 HEAP32[$arrayidx94>>2] = $225;
 $arrayidx97 = ((($h)) + 52|0);
 HEAP32[$arrayidx97>>2] = $222;
 $arrayidx100 = ((($h)) + 56|0);
 HEAP32[$arrayidx100>>2] = $236;
 $arrayidx103 = ((($h)) + 60|0);
 HEAP32[$arrayidx103>>2] = $233;
 $arrayidx106 = ((($h)) + 64|0);
 HEAP32[$arrayidx106>>2] = $247;
 $arrayidx109 = ((($h)) + 68|0);
 HEAP32[$arrayidx109>>2] = $244;
 $arrayidx112 = ((($h)) + 72|0);
 HEAP32[$arrayidx112>>2] = $258;
 $arrayidx115 = ((($h)) + 76|0);
 HEAP32[$arrayidx115>>2] = $255;
 $arraydecay = ((($h)) + 80|0);
 HEAP32[$arraydecay>>2] = 1;
 $arrayidx1$i454 = ((($h)) + 84|0);
 dest=$arrayidx1$i454; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _fe_sq($u,$arrayidx);
 _fe_mul($v,$u,176);
 $260 = HEAP32[$u>>2]|0;
 $arrayidx1$i417 = ((($u)) + 4|0);
 $261 = HEAP32[$arrayidx1$i417>>2]|0;
 $arrayidx2$i418 = ((($u)) + 8|0);
 $262 = HEAP32[$arrayidx2$i418>>2]|0;
 $arrayidx3$i419 = ((($u)) + 12|0);
 $263 = HEAP32[$arrayidx3$i419>>2]|0;
 $arrayidx4$i420 = ((($u)) + 16|0);
 $264 = HEAP32[$arrayidx4$i420>>2]|0;
 $arrayidx5$i421 = ((($u)) + 20|0);
 $265 = HEAP32[$arrayidx5$i421>>2]|0;
 $arrayidx6$i422 = ((($u)) + 24|0);
 $266 = HEAP32[$arrayidx6$i422>>2]|0;
 $arrayidx7$i423 = ((($u)) + 28|0);
 $267 = HEAP32[$arrayidx7$i423>>2]|0;
 $arrayidx8$i424 = ((($u)) + 32|0);
 $268 = HEAP32[$arrayidx8$i424>>2]|0;
 $arrayidx9$i425 = ((($u)) + 36|0);
 $269 = HEAP32[$arrayidx9$i425>>2]|0;
 $270 = HEAP32[$arraydecay>>2]|0;
 $271 = HEAP32[$arrayidx1$i454>>2]|0;
 $arrayidx12$i427 = ((($h)) + 88|0);
 $272 = HEAP32[$arrayidx12$i427>>2]|0;
 $arrayidx13$i428 = ((($h)) + 92|0);
 $273 = HEAP32[$arrayidx13$i428>>2]|0;
 $arrayidx14$i429 = ((($h)) + 96|0);
 $274 = HEAP32[$arrayidx14$i429>>2]|0;
 $arrayidx15$i430 = ((($h)) + 100|0);
 $275 = HEAP32[$arrayidx15$i430>>2]|0;
 $arrayidx16$i431 = ((($h)) + 104|0);
 $276 = HEAP32[$arrayidx16$i431>>2]|0;
 $arrayidx17$i432 = ((($h)) + 108|0);
 $277 = HEAP32[$arrayidx17$i432>>2]|0;
 $arrayidx18$i433 = ((($h)) + 112|0);
 $278 = HEAP32[$arrayidx18$i433>>2]|0;
 $arrayidx19$i434 = ((($h)) + 116|0);
 $279 = HEAP32[$arrayidx19$i434>>2]|0;
 $sub$i435 = (($260) - ($270))|0;
 $sub20$i436 = (($261) - ($271))|0;
 $sub21$i437 = (($262) - ($272))|0;
 $sub22$i438 = (($263) - ($273))|0;
 $sub23$i439 = (($264) - ($274))|0;
 $sub24$i440 = (($265) - ($275))|0;
 $sub25$i441 = (($266) - ($276))|0;
 $sub26$i442 = (($267) - ($277))|0;
 $sub27$i443 = (($268) - ($278))|0;
 $sub28$i444 = (($269) - ($279))|0;
 HEAP32[$u>>2] = $sub$i435;
 HEAP32[$arrayidx1$i417>>2] = $sub20$i436;
 HEAP32[$arrayidx2$i418>>2] = $sub21$i437;
 HEAP32[$arrayidx3$i419>>2] = $sub22$i438;
 HEAP32[$arrayidx4$i420>>2] = $sub23$i439;
 HEAP32[$arrayidx5$i421>>2] = $sub24$i440;
 HEAP32[$arrayidx6$i422>>2] = $sub25$i441;
 HEAP32[$arrayidx7$i423>>2] = $sub26$i442;
 HEAP32[$arrayidx8$i424>>2] = $sub27$i443;
 HEAP32[$arrayidx9$i425>>2] = $sub28$i444;
 $280 = HEAP32[$v>>2]|0;
 $arrayidx1$i380 = ((($v)) + 4|0);
 $281 = HEAP32[$arrayidx1$i380>>2]|0;
 $arrayidx2$i381 = ((($v)) + 8|0);
 $282 = HEAP32[$arrayidx2$i381>>2]|0;
 $arrayidx3$i382 = ((($v)) + 12|0);
 $283 = HEAP32[$arrayidx3$i382>>2]|0;
 $arrayidx4$i383 = ((($v)) + 16|0);
 $284 = HEAP32[$arrayidx4$i383>>2]|0;
 $arrayidx5$i384 = ((($v)) + 20|0);
 $285 = HEAP32[$arrayidx5$i384>>2]|0;
 $arrayidx6$i385 = ((($v)) + 24|0);
 $286 = HEAP32[$arrayidx6$i385>>2]|0;
 $arrayidx7$i386 = ((($v)) + 28|0);
 $287 = HEAP32[$arrayidx7$i386>>2]|0;
 $arrayidx8$i387 = ((($v)) + 32|0);
 $288 = HEAP32[$arrayidx8$i387>>2]|0;
 $arrayidx9$i388 = ((($v)) + 36|0);
 $289 = HEAP32[$arrayidx9$i388>>2]|0;
 $add$i398 = (($280) + ($270))|0;
 $add20$i399 = (($281) + ($271))|0;
 $add21$i400 = (($282) + ($272))|0;
 $add22$i401 = (($283) + ($273))|0;
 $add23$i402 = (($284) + ($274))|0;
 $add24$i403 = (($285) + ($275))|0;
 $add25$i404 = (($286) + ($276))|0;
 $add26$i405 = (($287) + ($277))|0;
 $add27$i406 = (($288) + ($278))|0;
 $add28$i407 = (($289) + ($279))|0;
 HEAP32[$v>>2] = $add$i398;
 HEAP32[$arrayidx1$i380>>2] = $add20$i399;
 HEAP32[$arrayidx2$i381>>2] = $add21$i400;
 HEAP32[$arrayidx3$i382>>2] = $add22$i401;
 HEAP32[$arrayidx4$i383>>2] = $add23$i402;
 HEAP32[$arrayidx5$i384>>2] = $add24$i403;
 HEAP32[$arrayidx6$i385>>2] = $add25$i404;
 HEAP32[$arrayidx7$i386>>2] = $add26$i405;
 HEAP32[$arrayidx8$i387>>2] = $add27$i406;
 HEAP32[$arrayidx9$i388>>2] = $add28$i407;
 _fe_divpowm1($h,$u,$v);
 _fe_sq($vxx,$h);
 _fe_mul($vxx,$vxx,$v);
 $290 = HEAP32[$vxx>>2]|0;
 $arrayidx1$i331 = ((($vxx)) + 4|0);
 $291 = HEAP32[$arrayidx1$i331>>2]|0;
 $arrayidx2$i332 = ((($vxx)) + 8|0);
 $292 = HEAP32[$arrayidx2$i332>>2]|0;
 $arrayidx3$i333 = ((($vxx)) + 12|0);
 $293 = HEAP32[$arrayidx3$i333>>2]|0;
 $arrayidx4$i334 = ((($vxx)) + 16|0);
 $294 = HEAP32[$arrayidx4$i334>>2]|0;
 $arrayidx5$i335 = ((($vxx)) + 20|0);
 $295 = HEAP32[$arrayidx5$i335>>2]|0;
 $arrayidx6$i336 = ((($vxx)) + 24|0);
 $296 = HEAP32[$arrayidx6$i336>>2]|0;
 $arrayidx7$i337 = ((($vxx)) + 28|0);
 $297 = HEAP32[$arrayidx7$i337>>2]|0;
 $arrayidx8$i338 = ((($vxx)) + 32|0);
 $298 = HEAP32[$arrayidx8$i338>>2]|0;
 $arrayidx9$i339 = ((($vxx)) + 36|0);
 $299 = HEAP32[$arrayidx9$i339>>2]|0;
 $sub$i349 = (($290) - ($sub$i435))|0;
 $sub20$i = (($291) - ($sub20$i436))|0;
 $sub21$i = (($292) - ($sub21$i437))|0;
 $sub22$i = (($293) - ($sub22$i438))|0;
 $sub23$i = (($294) - ($sub23$i439))|0;
 $sub24$i = (($295) - ($sub24$i440))|0;
 $sub25$i = (($296) - ($sub25$i441))|0;
 $sub26$i = (($297) - ($sub26$i442))|0;
 $sub27$i = (($298) - ($sub27$i443))|0;
 $sub28$i = (($299) - ($sub28$i444))|0;
 HEAP32[$check>>2] = $sub$i349;
 $arrayidx30$i350 = ((($check)) + 4|0);
 HEAP32[$arrayidx30$i350>>2] = $sub20$i;
 $arrayidx31$i351 = ((($check)) + 8|0);
 HEAP32[$arrayidx31$i351>>2] = $sub21$i;
 $arrayidx32$i352 = ((($check)) + 12|0);
 HEAP32[$arrayidx32$i352>>2] = $sub22$i;
 $arrayidx33$i353 = ((($check)) + 16|0);
 HEAP32[$arrayidx33$i353>>2] = $sub23$i;
 $arrayidx34$i354 = ((($check)) + 20|0);
 HEAP32[$arrayidx34$i354>>2] = $sub24$i;
 $arrayidx35$i355 = ((($check)) + 24|0);
 HEAP32[$arrayidx35$i355>>2] = $sub25$i;
 $arrayidx36$i356 = ((($check)) + 28|0);
 HEAP32[$arrayidx36$i356>>2] = $sub26$i;
 $arrayidx37$i357 = ((($check)) + 32|0);
 HEAP32[$arrayidx37$i357>>2] = $sub27$i;
 $arrayidx38$i358 = ((($check)) + 36|0);
 HEAP32[$arrayidx38$i358>>2] = $sub28$i;
 _fe_tobytes($s$i,$check);
 $300 = HEAP8[$s$i>>0]|0;
 $arrayidx1$i258 = ((($s$i)) + 1|0);
 $301 = HEAP8[$arrayidx1$i258>>0]|0;
 $or1$i259 = $301 | $300;
 $arrayidx3$i260 = ((($s$i)) + 2|0);
 $302 = HEAP8[$arrayidx3$i260>>0]|0;
 $or52$i261 = $or1$i259 | $302;
 $arrayidx6$i262 = ((($s$i)) + 3|0);
 $303 = HEAP8[$arrayidx6$i262>>0]|0;
 $or84$i263 = $or52$i261 | $303;
 $arrayidx9$i264 = ((($s$i)) + 4|0);
 $304 = HEAP8[$arrayidx9$i264>>0]|0;
 $or115$i265 = $or84$i263 | $304;
 $arrayidx12$i266 = ((($s$i)) + 5|0);
 $305 = HEAP8[$arrayidx12$i266>>0]|0;
 $or146$i267 = $or115$i265 | $305;
 $arrayidx15$i268 = ((($s$i)) + 6|0);
 $306 = HEAP8[$arrayidx15$i268>>0]|0;
 $or177$i269 = $or146$i267 | $306;
 $arrayidx18$i270 = ((($s$i)) + 7|0);
 $307 = HEAP8[$arrayidx18$i270>>0]|0;
 $or208$i271 = $or177$i269 | $307;
 $arrayidx21$i272 = ((($s$i)) + 8|0);
 $308 = HEAP8[$arrayidx21$i272>>0]|0;
 $or239$i273 = $or208$i271 | $308;
 $arrayidx24$i274 = ((($s$i)) + 9|0);
 $309 = HEAP8[$arrayidx24$i274>>0]|0;
 $or2610$i275 = $or239$i273 | $309;
 $arrayidx27$i276 = ((($s$i)) + 10|0);
 $310 = HEAP8[$arrayidx27$i276>>0]|0;
 $or2911$i277 = $or2610$i275 | $310;
 $arrayidx30$i278 = ((($s$i)) + 11|0);
 $311 = HEAP8[$arrayidx30$i278>>0]|0;
 $or3212$i279 = $or2911$i277 | $311;
 $arrayidx33$i280 = ((($s$i)) + 12|0);
 $312 = HEAP8[$arrayidx33$i280>>0]|0;
 $or3513$i281 = $or3212$i279 | $312;
 $arrayidx36$i282 = ((($s$i)) + 13|0);
 $313 = HEAP8[$arrayidx36$i282>>0]|0;
 $or3814$i283 = $or3513$i281 | $313;
 $arrayidx39$i284 = ((($s$i)) + 14|0);
 $314 = HEAP8[$arrayidx39$i284>>0]|0;
 $or4115$i285 = $or3814$i283 | $314;
 $arrayidx42$i286 = ((($s$i)) + 15|0);
 $315 = HEAP8[$arrayidx42$i286>>0]|0;
 $or4416$i287 = $or4115$i285 | $315;
 $arrayidx45$i288 = ((($s$i)) + 16|0);
 $316 = HEAP8[$arrayidx45$i288>>0]|0;
 $or4717$i289 = $or4416$i287 | $316;
 $arrayidx48$i290 = ((($s$i)) + 17|0);
 $317 = HEAP8[$arrayidx48$i290>>0]|0;
 $or5018$i291 = $or4717$i289 | $317;
 $arrayidx51$i292 = ((($s$i)) + 18|0);
 $318 = HEAP8[$arrayidx51$i292>>0]|0;
 $or5319$i293 = $or5018$i291 | $318;
 $arrayidx54$i294 = ((($s$i)) + 19|0);
 $319 = HEAP8[$arrayidx54$i294>>0]|0;
 $or5620$i295 = $or5319$i293 | $319;
 $arrayidx57$i296 = ((($s$i)) + 20|0);
 $320 = HEAP8[$arrayidx57$i296>>0]|0;
 $or5921$i297 = $or5620$i295 | $320;
 $arrayidx60$i298 = ((($s$i)) + 21|0);
 $321 = HEAP8[$arrayidx60$i298>>0]|0;
 $or6222$i299 = $or5921$i297 | $321;
 $arrayidx63$i300 = ((($s$i)) + 22|0);
 $322 = HEAP8[$arrayidx63$i300>>0]|0;
 $or6523$i301 = $or6222$i299 | $322;
 $arrayidx66$i302 = ((($s$i)) + 23|0);
 $323 = HEAP8[$arrayidx66$i302>>0]|0;
 $or6824$i303 = $or6523$i301 | $323;
 $arrayidx69$i304 = ((($s$i)) + 24|0);
 $324 = HEAP8[$arrayidx69$i304>>0]|0;
 $or7125$i305 = $or6824$i303 | $324;
 $arrayidx72$i306 = ((($s$i)) + 25|0);
 $325 = HEAP8[$arrayidx72$i306>>0]|0;
 $or7426$i307 = $or7125$i305 | $325;
 $arrayidx75$i308 = ((($s$i)) + 26|0);
 $326 = HEAP8[$arrayidx75$i308>>0]|0;
 $or7727$i309 = $or7426$i307 | $326;
 $arrayidx78$i310 = ((($s$i)) + 27|0);
 $327 = HEAP8[$arrayidx78$i310>>0]|0;
 $or8028$i311 = $or7727$i309 | $327;
 $arrayidx81$i312 = ((($s$i)) + 28|0);
 $328 = HEAP8[$arrayidx81$i312>>0]|0;
 $or8329$i313 = $or8028$i311 | $328;
 $arrayidx84$i314 = ((($s$i)) + 29|0);
 $329 = HEAP8[$arrayidx84$i314>>0]|0;
 $or8630$i315 = $or8329$i313 | $329;
 $arrayidx87$i316 = ((($s$i)) + 30|0);
 $330 = HEAP8[$arrayidx87$i316>>0]|0;
 $or8931$i317 = $or8630$i315 | $330;
 $arrayidx90$i318 = ((($s$i)) + 31|0);
 $331 = HEAP8[$arrayidx90$i318>>0]|0;
 $or9232$i319 = $or8931$i317 | $331;
 $or92$i320 = $or9232$i319&255;
 $sub$i321 = (($or92$i320) + -1)|0;
 $tobool = ($sub$i321>>>0)>(4294967039);
 do {
  if (!($tobool)) {
   $332 = HEAP32[$vxx>>2]|0;
   $333 = HEAP32[$arrayidx1$i331>>2]|0;
   $334 = HEAP32[$arrayidx2$i332>>2]|0;
   $335 = HEAP32[$arrayidx3$i333>>2]|0;
   $336 = HEAP32[$arrayidx4$i334>>2]|0;
   $337 = HEAP32[$arrayidx5$i335>>2]|0;
   $338 = HEAP32[$arrayidx6$i336>>2]|0;
   $339 = HEAP32[$arrayidx7$i337>>2]|0;
   $340 = HEAP32[$arrayidx8$i338>>2]|0;
   $341 = HEAP32[$arrayidx9$i339>>2]|0;
   $342 = HEAP32[$u>>2]|0;
   $343 = HEAP32[$arrayidx1$i417>>2]|0;
   $344 = HEAP32[$arrayidx2$i418>>2]|0;
   $345 = HEAP32[$arrayidx3$i419>>2]|0;
   $346 = HEAP32[$arrayidx4$i420>>2]|0;
   $347 = HEAP32[$arrayidx5$i421>>2]|0;
   $348 = HEAP32[$arrayidx6$i422>>2]|0;
   $349 = HEAP32[$arrayidx7$i423>>2]|0;
   $350 = HEAP32[$arrayidx8$i424>>2]|0;
   $351 = HEAP32[$arrayidx9$i425>>2]|0;
   $add$i253 = (($342) + ($332))|0;
   $add20$i = (($343) + ($333))|0;
   $add21$i = (($344) + ($334))|0;
   $add22$i = (($345) + ($335))|0;
   $add23$i = (($346) + ($336))|0;
   $add24$i = (($347) + ($337))|0;
   $add25$i = (($348) + ($338))|0;
   $add26$i = (($349) + ($339))|0;
   $add27$i = (($350) + ($340))|0;
   $add28$i = (($351) + ($341))|0;
   HEAP32[$check>>2] = $add$i253;
   HEAP32[$arrayidx30$i350>>2] = $add20$i;
   HEAP32[$arrayidx31$i351>>2] = $add21$i;
   HEAP32[$arrayidx32$i352>>2] = $add22$i;
   HEAP32[$arrayidx33$i353>>2] = $add23$i;
   HEAP32[$arrayidx34$i354>>2] = $add24$i;
   HEAP32[$arrayidx35$i355>>2] = $add25$i;
   HEAP32[$arrayidx36$i356>>2] = $add26$i;
   HEAP32[$arrayidx37$i357>>2] = $add27$i;
   HEAP32[$arrayidx38$i358>>2] = $add28$i;
   _fe_tobytes($s$i,$check);
   $352 = HEAP8[$s$i>>0]|0;
   $353 = HEAP8[$arrayidx1$i258>>0]|0;
   $or1$i163 = $353 | $352;
   $354 = HEAP8[$arrayidx3$i260>>0]|0;
   $or52$i165 = $or1$i163 | $354;
   $355 = HEAP8[$arrayidx6$i262>>0]|0;
   $or84$i167 = $or52$i165 | $355;
   $356 = HEAP8[$arrayidx9$i264>>0]|0;
   $or115$i169 = $or84$i167 | $356;
   $357 = HEAP8[$arrayidx12$i266>>0]|0;
   $or146$i171 = $or115$i169 | $357;
   $358 = HEAP8[$arrayidx15$i268>>0]|0;
   $or177$i173 = $or146$i171 | $358;
   $359 = HEAP8[$arrayidx18$i270>>0]|0;
   $or208$i175 = $or177$i173 | $359;
   $360 = HEAP8[$arrayidx21$i272>>0]|0;
   $or239$i177 = $or208$i175 | $360;
   $361 = HEAP8[$arrayidx24$i274>>0]|0;
   $or2610$i179 = $or239$i177 | $361;
   $362 = HEAP8[$arrayidx27$i276>>0]|0;
   $or2911$i181 = $or2610$i179 | $362;
   $363 = HEAP8[$arrayidx30$i278>>0]|0;
   $or3212$i183 = $or2911$i181 | $363;
   $364 = HEAP8[$arrayidx33$i280>>0]|0;
   $or3513$i185 = $or3212$i183 | $364;
   $365 = HEAP8[$arrayidx36$i282>>0]|0;
   $or3814$i187 = $or3513$i185 | $365;
   $366 = HEAP8[$arrayidx39$i284>>0]|0;
   $or4115$i189 = $or3814$i187 | $366;
   $367 = HEAP8[$arrayidx42$i286>>0]|0;
   $or4416$i191 = $or4115$i189 | $367;
   $368 = HEAP8[$arrayidx45$i288>>0]|0;
   $or4717$i193 = $or4416$i191 | $368;
   $369 = HEAP8[$arrayidx48$i290>>0]|0;
   $or5018$i195 = $or4717$i193 | $369;
   $370 = HEAP8[$arrayidx51$i292>>0]|0;
   $or5319$i197 = $or5018$i195 | $370;
   $371 = HEAP8[$arrayidx54$i294>>0]|0;
   $or5620$i199 = $or5319$i197 | $371;
   $372 = HEAP8[$arrayidx57$i296>>0]|0;
   $or5921$i201 = $or5620$i199 | $372;
   $373 = HEAP8[$arrayidx60$i298>>0]|0;
   $or6222$i203 = $or5921$i201 | $373;
   $374 = HEAP8[$arrayidx63$i300>>0]|0;
   $or6523$i205 = $or6222$i203 | $374;
   $375 = HEAP8[$arrayidx66$i302>>0]|0;
   $or6824$i207 = $or6523$i205 | $375;
   $376 = HEAP8[$arrayidx69$i304>>0]|0;
   $or7125$i209 = $or6824$i207 | $376;
   $377 = HEAP8[$arrayidx72$i306>>0]|0;
   $or7426$i211 = $or7125$i209 | $377;
   $378 = HEAP8[$arrayidx75$i308>>0]|0;
   $or7727$i213 = $or7426$i211 | $378;
   $379 = HEAP8[$arrayidx78$i310>>0]|0;
   $or8028$i215 = $or7727$i213 | $379;
   $380 = HEAP8[$arrayidx81$i312>>0]|0;
   $or8329$i217 = $or8028$i215 | $380;
   $381 = HEAP8[$arrayidx84$i314>>0]|0;
   $or8630$i219 = $or8329$i217 | $381;
   $382 = HEAP8[$arrayidx87$i316>>0]|0;
   $or8931$i221 = $or8630$i219 | $382;
   $383 = HEAP8[$arrayidx90$i318>>0]|0;
   $or9232$i223 = $or8931$i221 | $383;
   $or92$i224 = $or9232$i223&255;
   $sub$i225 = (($or92$i224) + -1)|0;
   $tobool149 = ($sub$i225>>>0)>(4294967039);
   if ($tobool149) {
    _fe_mul($h,$h,224);
    break;
   } else {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 } while(0);
 _fe_tobytes($s$i,$h);
 $384 = HEAP8[$s$i>>0]|0;
 $385 = $384 & 1;
 $and$i = $385&255;
 $386 = HEAP8[$add$ptr22$idx113>>0]|0;
 $conv161 = $386&255;
 $387 = $conv161 >>> 7;
 $cmp163 = ($387|0)==($and$i|0);
 do {
  if (!($cmp163)) {
   _fe_tobytes($s$i,$h);
   $388 = HEAP8[$s$i>>0]|0;
   $389 = HEAP8[$arrayidx1$i258>>0]|0;
   $or1$i = $389 | $388;
   $390 = HEAP8[$arrayidx3$i260>>0]|0;
   $or52$i = $or1$i | $390;
   $391 = HEAP8[$arrayidx6$i262>>0]|0;
   $or84$i = $or52$i | $391;
   $392 = HEAP8[$arrayidx9$i264>>0]|0;
   $or115$i = $or84$i | $392;
   $393 = HEAP8[$arrayidx12$i266>>0]|0;
   $or146$i = $or115$i | $393;
   $394 = HEAP8[$arrayidx15$i268>>0]|0;
   $or177$i = $or146$i | $394;
   $395 = HEAP8[$arrayidx18$i270>>0]|0;
   $or208$i = $or177$i | $395;
   $396 = HEAP8[$arrayidx21$i272>>0]|0;
   $or239$i = $or208$i | $396;
   $397 = HEAP8[$arrayidx24$i274>>0]|0;
   $or2610$i = $or239$i | $397;
   $398 = HEAP8[$arrayidx27$i276>>0]|0;
   $or2911$i = $or2610$i | $398;
   $399 = HEAP8[$arrayidx30$i278>>0]|0;
   $or3212$i = $or2911$i | $399;
   $400 = HEAP8[$arrayidx33$i280>>0]|0;
   $or3513$i = $or3212$i | $400;
   $401 = HEAP8[$arrayidx36$i282>>0]|0;
   $or3814$i = $or3513$i | $401;
   $402 = HEAP8[$arrayidx39$i284>>0]|0;
   $or4115$i = $or3814$i | $402;
   $403 = HEAP8[$arrayidx42$i286>>0]|0;
   $or4416$i = $or4115$i | $403;
   $404 = HEAP8[$arrayidx45$i288>>0]|0;
   $or4717$i = $or4416$i | $404;
   $405 = HEAP8[$arrayidx48$i290>>0]|0;
   $or5018$i = $or4717$i | $405;
   $406 = HEAP8[$arrayidx51$i292>>0]|0;
   $or5319$i = $or5018$i | $406;
   $407 = HEAP8[$arrayidx54$i294>>0]|0;
   $or5620$i = $or5319$i | $407;
   $408 = HEAP8[$arrayidx57$i296>>0]|0;
   $or5921$i = $or5620$i | $408;
   $409 = HEAP8[$arrayidx60$i298>>0]|0;
   $or6222$i = $or5921$i | $409;
   $410 = HEAP8[$arrayidx63$i300>>0]|0;
   $or6523$i = $or6222$i | $410;
   $411 = HEAP8[$arrayidx66$i302>>0]|0;
   $or6824$i = $or6523$i | $411;
   $412 = HEAP8[$arrayidx69$i304>>0]|0;
   $or7125$i = $or6824$i | $412;
   $413 = HEAP8[$arrayidx72$i306>>0]|0;
   $or7426$i = $or7125$i | $413;
   $414 = HEAP8[$arrayidx75$i308>>0]|0;
   $or7727$i = $or7426$i | $414;
   $415 = HEAP8[$arrayidx78$i310>>0]|0;
   $or8028$i = $or7727$i | $415;
   $416 = HEAP8[$arrayidx81$i312>>0]|0;
   $or8329$i = $or8028$i | $416;
   $417 = HEAP8[$arrayidx84$i314>>0]|0;
   $or8630$i = $or8329$i | $417;
   $418 = HEAP8[$arrayidx87$i316>>0]|0;
   $or8931$i = $or8630$i | $418;
   $419 = HEAP8[$arrayidx90$i318>>0]|0;
   $or9232$i = $or8931$i | $419;
   $or92$i = $or9232$i&255;
   $sub$i138 = (($or92$i) + -1)|0;
   $tobool169 = ($sub$i138>>>0)>(4294967039);
   if ($tobool169) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   } else {
    $420 = HEAP32[$h>>2]|0;
    $arrayidx1$i128 = ((($h)) + 4|0);
    $421 = HEAP32[$arrayidx1$i128>>2]|0;
    $arrayidx2$i = ((($h)) + 8|0);
    $422 = HEAP32[$arrayidx2$i>>2]|0;
    $arrayidx3$i129 = ((($h)) + 12|0);
    $423 = HEAP32[$arrayidx3$i129>>2]|0;
    $arrayidx4$i = ((($h)) + 16|0);
    $424 = HEAP32[$arrayidx4$i>>2]|0;
    $arrayidx5$i = ((($h)) + 20|0);
    $425 = HEAP32[$arrayidx5$i>>2]|0;
    $arrayidx6$i = ((($h)) + 24|0);
    $426 = HEAP32[$arrayidx6$i>>2]|0;
    $arrayidx7$i130 = ((($h)) + 28|0);
    $427 = HEAP32[$arrayidx7$i130>>2]|0;
    $arrayidx8$i = ((($h)) + 32|0);
    $428 = HEAP32[$arrayidx8$i>>2]|0;
    $arrayidx9$i = ((($h)) + 36|0);
    $429 = HEAP32[$arrayidx9$i>>2]|0;
    $sub$i = (0 - ($420))|0;
    $sub10$i = (0 - ($421))|0;
    $sub11$i = (0 - ($422))|0;
    $sub12$i = (0 - ($423))|0;
    $sub13$i = (0 - ($424))|0;
    $sub14$i = (0 - ($425))|0;
    $sub15$i = (0 - ($426))|0;
    $sub16$i = (0 - ($427))|0;
    $sub17$i = (0 - ($428))|0;
    $sub18$i = (0 - ($429))|0;
    HEAP32[$h>>2] = $sub$i;
    HEAP32[$arrayidx1$i128>>2] = $sub10$i;
    HEAP32[$arrayidx2$i>>2] = $sub11$i;
    HEAP32[$arrayidx3$i129>>2] = $sub12$i;
    HEAP32[$arrayidx4$i>>2] = $sub13$i;
    HEAP32[$arrayidx5$i>>2] = $sub14$i;
    HEAP32[$arrayidx6$i>>2] = $sub15$i;
    HEAP32[$arrayidx7$i130>>2] = $sub16$i;
    HEAP32[$arrayidx8$i>>2] = $sub17$i;
    HEAP32[$arrayidx9$i>>2] = $sub18$i;
    break;
   }
  }
 } while(0);
 $arraydecay177 = ((($h)) + 120|0);
 _fe_mul($arraydecay177,$h,$arrayidx);
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _fe_divpowm1($r,$u,$v) {
 $r = $r|0;
 $u = $u|0;
 $v = $v|0;
 var $exitcond = 0, $i$519 = 0, $inc91 = 0, $t0 = 0, $t1 = 0, $t2 = 0, $uv7 = 0, $v3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $v3 = sp + 192|0;
 $uv7 = sp + 144|0;
 $t0 = sp + 96|0;
 $t1 = sp + 48|0;
 $t2 = sp;
 _fe_sq($v3,$v);
 _fe_mul($v3,$v3,$v);
 _fe_sq($uv7,$v3);
 _fe_mul($uv7,$uv7,$v);
 _fe_mul($uv7,$uv7,$u);
 _fe_sq($t0,$uv7);
 _fe_sq($t1,$t0);
 _fe_sq($t1,$t1);
 _fe_mul($t1,$uv7,$t1);
 _fe_mul($t0,$t0,$t1);
 _fe_sq($t0,$t0);
 _fe_mul($t0,$t1,$t0);
 _fe_sq($t1,$t0);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_mul($t0,$t1,$t0);
 _fe_sq($t1,$t0);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_mul($t1,$t1,$t0);
 _fe_sq($t2,$t1);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_mul($t1,$t2,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_mul($t0,$t1,$t0);
 _fe_sq($t1,$t0);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_mul($t1,$t1,$t0);
 _fe_sq($t2,$t1);
 $i$519 = 0;
 while(1) {
  _fe_sq($t2,$t2);
  $inc91 = (($i$519) + 1)|0;
  $exitcond = ($inc91|0)==(99);
  if ($exitcond) {
   break;
  } else {
   $i$519 = $inc91;
  }
 }
 _fe_mul($t1,$t2,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_mul($t0,$t1,$t0);
 _fe_sq($t0,$t0);
 _fe_sq($t0,$t0);
 _fe_mul($t0,$t0,$uv7);
 _fe_mul($t0,$t0,$v3);
 _fe_mul($r,$t0,$u);
 STACKTOP = sp;return;
}
function _fe_tobytes($s,$h) {
 $s = $s|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add10 = 0, $add12 = 0, $add14 = 0, $add16 = 0, $add18 = 0, $add20 = 0, $add22 = 0, $add24 = 0, $add26 = 0, $add28 = 0, $add31 = 0, $add33 = 0, $add35 = 0, $add39 = 0, $add43 = 0, $add47 = 0, $add51 = 0, $add55 = 0, $add59 = 0, $add63 = 0;
 var $arrayidx1 = 0, $arrayidx102 = 0, $arrayidx105 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx131 = 0, $arrayidx136 = 0, $arrayidx139 = 0, $arrayidx142 = 0, $arrayidx147 = 0, $arrayidx150 = 0, $arrayidx153 = 0, $arrayidx158 = 0, $arrayidx161 = 0, $arrayidx164 = 0;
 var $arrayidx169 = 0, $arrayidx172 = 0, $arrayidx175 = 0, $arrayidx178 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx73 = 0, $arrayidx76 = 0, $arrayidx8 = 0, $arrayidx80 = 0, $arrayidx83 = 0, $arrayidx86 = 0, $arrayidx9 = 0, $arrayidx91 = 0, $arrayidx94 = 0, $arrayidx97 = 0;
 var $conv = 0, $conv101 = 0, $conv104 = 0, $conv107 = 0, $conv112 = 0, $conv115 = 0, $conv118 = 0, $conv121 = 0, $conv124 = 0, $conv127 = 0, $conv130 = 0, $conv135 = 0, $conv138 = 0, $conv141 = 0, $conv146 = 0, $conv149 = 0, $conv152 = 0, $conv157 = 0, $conv160 = 0, $conv163 = 0;
 var $conv168 = 0, $conv171 = 0, $conv174 = 0, $conv177 = 0, $conv72 = 0, $conv75 = 0, $conv79 = 0, $conv82 = 0, $conv85 = 0, $conv90 = 0, $conv93 = 0, $conv96 = 0, $mul = 0, $mul30 = 0, $or = 0, $or100 = 0, $or111 = 0, $or134 = 0, $or145 = 0, $or156 = 0;
 var $or167 = 0, $or89 = 0, $shl110 = 0, $shl133 = 0, $shl144 = 0, $shl155 = 0, $shl166 = 0, $shl78 = 0, $shl88 = 0, $shl99 = 0, $shr = 0, $shr11 = 0, $shr13 = 0, $shr15 = 0, $shr17 = 0, $shr19 = 0, $shr21 = 0, $shr23 = 0, $shr25 = 0, $shr27 = 0;
 var $shr29 = 0, $shr32 = 0, $shr34 = 0, $shr38 = 0, $shr42 = 0, $shr46 = 0, $shr50 = 0, $shr54 = 0, $shr58 = 0, $shr62 = 0, $sub = 0, $sub37 = 0, $sub41 = 0, $sub45 = 0, $sub49 = 0, $sub53 = 0, $sub57 = 0, $sub61 = 0, $sub65 = 0, $sub68 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$h>>2]|0;
 $arrayidx1 = ((($h)) + 4|0);
 $1 = HEAP32[$arrayidx1>>2]|0;
 $arrayidx2 = ((($h)) + 8|0);
 $2 = HEAP32[$arrayidx2>>2]|0;
 $arrayidx3 = ((($h)) + 12|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $arrayidx4 = ((($h)) + 16|0);
 $4 = HEAP32[$arrayidx4>>2]|0;
 $arrayidx5 = ((($h)) + 20|0);
 $5 = HEAP32[$arrayidx5>>2]|0;
 $arrayidx6 = ((($h)) + 24|0);
 $6 = HEAP32[$arrayidx6>>2]|0;
 $arrayidx7 = ((($h)) + 28|0);
 $7 = HEAP32[$arrayidx7>>2]|0;
 $arrayidx8 = ((($h)) + 32|0);
 $8 = HEAP32[$arrayidx8>>2]|0;
 $arrayidx9 = ((($h)) + 36|0);
 $9 = HEAP32[$arrayidx9>>2]|0;
 $mul = ($9*19)|0;
 $add = (($mul) + 16777216)|0;
 $shr = $add >> 25;
 $add10 = (($shr) + ($0))|0;
 $shr11 = $add10 >> 26;
 $add12 = (($shr11) + ($1))|0;
 $shr13 = $add12 >> 25;
 $add14 = (($shr13) + ($2))|0;
 $shr15 = $add14 >> 26;
 $add16 = (($shr15) + ($3))|0;
 $shr17 = $add16 >> 25;
 $add18 = (($shr17) + ($4))|0;
 $shr19 = $add18 >> 26;
 $add20 = (($shr19) + ($5))|0;
 $shr21 = $add20 >> 25;
 $add22 = (($shr21) + ($6))|0;
 $shr23 = $add22 >> 26;
 $add24 = (($shr23) + ($7))|0;
 $shr25 = $add24 >> 25;
 $add26 = (($shr25) + ($8))|0;
 $shr27 = $add26 >> 26;
 $add28 = (($shr27) + ($9))|0;
 $shr29 = $add28 >> 25;
 $mul30 = ($shr29*19)|0;
 $add31 = (($mul30) + ($0))|0;
 $shr32 = $add31 >> 26;
 $add33 = (($shr32) + ($1))|0;
 $shr34 = $add33 >> 25;
 $add35 = (($shr34) + ($2))|0;
 $sub37 = $add33 & 33554431;
 $shr38 = $add35 >> 26;
 $add39 = (($shr38) + ($3))|0;
 $sub41 = $add35 & 67108863;
 $shr42 = $add39 >> 25;
 $add43 = (($shr42) + ($4))|0;
 $sub45 = $add39 & 33554431;
 $shr46 = $add43 >> 26;
 $add47 = (($shr46) + ($5))|0;
 $shr50 = $add47 >> 25;
 $add51 = (($shr50) + ($6))|0;
 $shr54 = $add51 >> 26;
 $add55 = (($shr54) + ($7))|0;
 $sub57 = $add51 & 67108863;
 $shr58 = $add55 >> 25;
 $add59 = (($shr58) + ($8))|0;
 $sub61 = $add55 & 33554431;
 $shr62 = $add59 >> 26;
 $add63 = (($shr62) + ($9))|0;
 $sub65 = $add59 & 67108863;
 $sub68 = $add63 & 33554431;
 $conv = $add31&255;
 HEAP8[$s>>0] = $conv;
 $10 = $add31 >>> 8;
 $conv72 = $10&255;
 $arrayidx73 = ((($s)) + 1|0);
 HEAP8[$arrayidx73>>0] = $conv72;
 $11 = $add31 >>> 16;
 $conv75 = $11&255;
 $arrayidx76 = ((($s)) + 2|0);
 HEAP8[$arrayidx76>>0] = $conv75;
 $sub = $add31 >>> 24;
 $12 = $sub & 3;
 $shl78 = $sub37 << 2;
 $or = $shl78 | $12;
 $conv79 = $or&255;
 $arrayidx80 = ((($s)) + 3|0);
 HEAP8[$arrayidx80>>0] = $conv79;
 $13 = $add33 >>> 6;
 $conv82 = $13&255;
 $arrayidx83 = ((($s)) + 4|0);
 HEAP8[$arrayidx83>>0] = $conv82;
 $14 = $add33 >>> 14;
 $conv85 = $14&255;
 $arrayidx86 = ((($s)) + 5|0);
 HEAP8[$arrayidx86>>0] = $conv85;
 $15 = $sub37 >>> 22;
 $shl88 = $sub41 << 3;
 $or89 = $shl88 | $15;
 $conv90 = $or89&255;
 $arrayidx91 = ((($s)) + 6|0);
 HEAP8[$arrayidx91>>0] = $conv90;
 $16 = $add35 >>> 5;
 $conv93 = $16&255;
 $arrayidx94 = ((($s)) + 7|0);
 HEAP8[$arrayidx94>>0] = $conv93;
 $17 = $add35 >>> 13;
 $conv96 = $17&255;
 $arrayidx97 = ((($s)) + 8|0);
 HEAP8[$arrayidx97>>0] = $conv96;
 $18 = $sub41 >>> 21;
 $shl99 = $sub45 << 5;
 $or100 = $shl99 | $18;
 $conv101 = $or100&255;
 $arrayidx102 = ((($s)) + 9|0);
 HEAP8[$arrayidx102>>0] = $conv101;
 $19 = $add39 >>> 3;
 $conv104 = $19&255;
 $arrayidx105 = ((($s)) + 10|0);
 HEAP8[$arrayidx105>>0] = $conv104;
 $20 = $add39 >>> 11;
 $conv107 = $20&255;
 $arrayidx108 = ((($s)) + 11|0);
 HEAP8[$arrayidx108>>0] = $conv107;
 $21 = $sub45 >>> 19;
 $shl110 = $add43 << 6;
 $or111 = $shl110 | $21;
 $conv112 = $or111&255;
 $arrayidx113 = ((($s)) + 12|0);
 HEAP8[$arrayidx113>>0] = $conv112;
 $22 = $add43 >>> 2;
 $conv115 = $22&255;
 $arrayidx116 = ((($s)) + 13|0);
 HEAP8[$arrayidx116>>0] = $conv115;
 $23 = $add43 >>> 10;
 $conv118 = $23&255;
 $arrayidx119 = ((($s)) + 14|0);
 HEAP8[$arrayidx119>>0] = $conv118;
 $sub49 = $add43 >>> 18;
 $conv121 = $sub49&255;
 $arrayidx122 = ((($s)) + 15|0);
 HEAP8[$arrayidx122>>0] = $conv121;
 $conv124 = $add47&255;
 $arrayidx125 = ((($s)) + 16|0);
 HEAP8[$arrayidx125>>0] = $conv124;
 $24 = $add47 >>> 8;
 $conv127 = $24&255;
 $arrayidx128 = ((($s)) + 17|0);
 HEAP8[$arrayidx128>>0] = $conv127;
 $25 = $add47 >>> 16;
 $conv130 = $25&255;
 $arrayidx131 = ((($s)) + 18|0);
 HEAP8[$arrayidx131>>0] = $conv130;
 $sub53 = $add47 >>> 24;
 $26 = $sub53 & 1;
 $shl133 = $sub57 << 1;
 $or134 = $shl133 | $26;
 $conv135 = $or134&255;
 $arrayidx136 = ((($s)) + 19|0);
 HEAP8[$arrayidx136>>0] = $conv135;
 $27 = $add51 >>> 7;
 $conv138 = $27&255;
 $arrayidx139 = ((($s)) + 20|0);
 HEAP8[$arrayidx139>>0] = $conv138;
 $28 = $add51 >>> 15;
 $conv141 = $28&255;
 $arrayidx142 = ((($s)) + 21|0);
 HEAP8[$arrayidx142>>0] = $conv141;
 $29 = $sub57 >>> 23;
 $shl144 = $sub61 << 3;
 $or145 = $shl144 | $29;
 $conv146 = $or145&255;
 $arrayidx147 = ((($s)) + 22|0);
 HEAP8[$arrayidx147>>0] = $conv146;
 $30 = $add55 >>> 5;
 $conv149 = $30&255;
 $arrayidx150 = ((($s)) + 23|0);
 HEAP8[$arrayidx150>>0] = $conv149;
 $31 = $add55 >>> 13;
 $conv152 = $31&255;
 $arrayidx153 = ((($s)) + 24|0);
 HEAP8[$arrayidx153>>0] = $conv152;
 $32 = $sub61 >>> 21;
 $shl155 = $sub65 << 4;
 $or156 = $shl155 | $32;
 $conv157 = $or156&255;
 $arrayidx158 = ((($s)) + 25|0);
 HEAP8[$arrayidx158>>0] = $conv157;
 $33 = $add59 >>> 4;
 $conv160 = $33&255;
 $arrayidx161 = ((($s)) + 26|0);
 HEAP8[$arrayidx161>>0] = $conv160;
 $34 = $add59 >>> 12;
 $conv163 = $34&255;
 $arrayidx164 = ((($s)) + 27|0);
 HEAP8[$arrayidx164>>0] = $conv163;
 $35 = $sub65 >>> 20;
 $shl166 = $sub68 << 6;
 $or167 = $shl166 | $35;
 $conv168 = $or167&255;
 $arrayidx169 = ((($s)) + 28|0);
 HEAP8[$arrayidx169>>0] = $conv168;
 $36 = $add63 >>> 2;
 $conv171 = $36&255;
 $arrayidx172 = ((($s)) + 29|0);
 HEAP8[$arrayidx172>>0] = $conv171;
 $37 = $add63 >>> 10;
 $conv174 = $37&255;
 $arrayidx175 = ((($s)) + 30|0);
 HEAP8[$arrayidx175>>0] = $conv174;
 $38 = $sub68 >>> 18;
 $conv177 = $38&255;
 $arrayidx178 = ((($s)) + 31|0);
 HEAP8[$arrayidx178>>0] = $conv177;
 return;
}
function _ge_p3_tobytes($s,$h) {
 $s = $s|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $arraydecay1 = 0, $arraydecay6 = 0, $arrayidx = 0, $recip = 0, $s$i = 0, $x = 0, $xor4 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $s$i = sp + 144|0;
 $recip = sp + 96|0;
 $x = sp + 48|0;
 $y = sp;
 $arraydecay1 = ((($h)) + 80|0);
 _fe_invert($recip,$arraydecay1);
 _fe_mul($x,$h,$recip);
 $arraydecay6 = ((($h)) + 40|0);
 _fe_mul($y,$arraydecay6,$recip);
 _fe_tobytes($s,$y);
 _fe_tobytes($s$i,$x);
 $0 = HEAP8[$s$i>>0]|0;
 $1 = ($0 << 7)&255;
 $arrayidx = ((($s)) + 31|0);
 $2 = HEAP8[$arrayidx>>0]|0;
 $xor4 = $2 ^ $1;
 HEAP8[$arrayidx>>0] = $xor4;
 STACKTOP = sp;return;
}
function _fe_invert($out,$z) {
 $out = $out|0;
 $z = $z|0;
 var $exitcond = 0, $i$520 = 0, $inc82 = 0, $t0 = 0, $t1 = 0, $t2 = 0, $t3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $t0 = sp + 144|0;
 $t1 = sp + 96|0;
 $t2 = sp + 48|0;
 $t3 = sp;
 _fe_sq($t0,$z);
 _fe_sq($t1,$t0);
 _fe_sq($t1,$t1);
 _fe_mul($t1,$z,$t1);
 _fe_mul($t0,$t0,$t1);
 _fe_sq($t2,$t0);
 _fe_mul($t1,$t1,$t2);
 _fe_sq($t2,$t1);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_mul($t1,$t2,$t1);
 _fe_sq($t2,$t1);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_mul($t2,$t2,$t1);
 _fe_sq($t3,$t2);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_mul($t2,$t3,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_mul($t1,$t2,$t1);
 _fe_sq($t2,$t1);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_mul($t2,$t2,$t1);
 _fe_sq($t3,$t2);
 $i$520 = 0;
 while(1) {
  _fe_sq($t3,$t3);
  $inc82 = (($i$520) + 1)|0;
  $exitcond = ($inc82|0)==(99);
  if ($exitcond) {
   break;
  } else {
   $i$520 = $inc82;
  }
 }
 _fe_mul($t2,$t3,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_mul($t1,$t2,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_mul($out,$t1,$t0);
 STACKTOP = sp;return;
}
function _ge_scalarmult_base($h,$a) {
 $h = $h|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add18 = 0, $add37 = 0, $add45 = 0, $add54 = 0, $arraydecay1$i = 0, $arraydecay15$i40 = 0, $arraydecay2$i = 0, $arraydecay3$i$i = 0, $arraydecay3$i35 = 0, $arraydecay4$i44 = 0;
 var $arraydecay6$i$i = 0, $arraydecay6$i37 = 0, $arraydecay7$i38 = 0, $arraydecay9$i47 = 0, $arrayidx$1 = 0, $arrayidx$10 = 0, $arrayidx$11 = 0, $arrayidx$12 = 0, $arrayidx$13 = 0, $arrayidx$14 = 0, $arrayidx$15 = 0, $arrayidx$16 = 0, $arrayidx$17 = 0, $arrayidx$18 = 0, $arrayidx$19 = 0, $arrayidx$2 = 0, $arrayidx$20 = 0, $arrayidx$21 = 0, $arrayidx$22 = 0, $arrayidx$23 = 0;
 var $arrayidx$24 = 0, $arrayidx$25 = 0, $arrayidx$26 = 0, $arrayidx$27 = 0, $arrayidx$28 = 0, $arrayidx$29 = 0, $arrayidx$3 = 0, $arrayidx$30 = 0, $arrayidx$31 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $arrayidx$8 = 0, $arrayidx$9 = 0, $arrayidx1$i$i = 0, $arrayidx1$i$i$i = 0, $arrayidx1$i4$i = 0, $arrayidx10 = 0, $arrayidx10$1 = 0;
 var $arrayidx10$10 = 0, $arrayidx10$11 = 0, $arrayidx10$12 = 0, $arrayidx10$13 = 0, $arrayidx10$14 = 0, $arrayidx10$15 = 0, $arrayidx10$16 = 0, $arrayidx10$17 = 0, $arrayidx10$18 = 0, $arrayidx10$19 = 0, $arrayidx10$2 = 0, $arrayidx10$20 = 0, $arrayidx10$21 = 0, $arrayidx10$22 = 0, $arrayidx10$23 = 0, $arrayidx10$24 = 0, $arrayidx10$25 = 0, $arrayidx10$26 = 0, $arrayidx10$27 = 0, $arrayidx10$28 = 0;
 var $arrayidx10$29 = 0, $arrayidx10$3 = 0, $arrayidx10$30 = 0, $arrayidx10$31 = 0, $arrayidx10$4 = 0, $arrayidx10$5 = 0, $arrayidx10$6 = 0, $arrayidx10$7 = 0, $arrayidx10$8 = 0, $arrayidx10$9 = 0, $arrayidx11$i$i$i = 0, $arrayidx11$i14$i$i = 0, $arrayidx11$i32$i$i = 0, $arrayidx12$i$i$i = 0, $arrayidx12$i15$i$i = 0, $arrayidx12$i33$i$i = 0, $arrayidx13$i$i$i = 0, $arrayidx13$i16$i$i = 0, $arrayidx13$i34$i$i = 0, $arrayidx14$i$i$i = 0;
 var $arrayidx14$i17$i$i = 0, $arrayidx14$i35$i$i = 0, $arrayidx15$i$i$i = 0, $arrayidx15$i18$i$i = 0, $arrayidx15$i36$i$i = 0, $arrayidx16 = 0, $arrayidx16$i$i$i = 0, $arrayidx16$i19$i$i = 0, $arrayidx16$i37$i$i = 0, $arrayidx17$i$i$i = 0, $arrayidx17$i20$i$i = 0, $arrayidx17$i38$i$i = 0, $arrayidx18$i$i$i = 0, $arrayidx18$i21$i$i = 0, $arrayidx18$i39$i$i = 0, $arrayidx19$i$i$i = 0, $arrayidx19$i22$i$i = 0, $arrayidx19$i40$i$i = 0, $arrayidx2$1 = 0, $arrayidx2$10 = 0;
 var $arrayidx2$11 = 0, $arrayidx2$12 = 0, $arrayidx2$13 = 0, $arrayidx2$14 = 0, $arrayidx2$15 = 0, $arrayidx2$16 = 0, $arrayidx2$17 = 0, $arrayidx2$18 = 0, $arrayidx2$19 = 0, $arrayidx2$2 = 0, $arrayidx2$20 = 0, $arrayidx2$21 = 0, $arrayidx2$22 = 0, $arrayidx2$23 = 0, $arrayidx2$24 = 0, $arrayidx2$25 = 0, $arrayidx2$26 = 0, $arrayidx2$27 = 0, $arrayidx2$28 = 0, $arrayidx2$29 = 0;
 var $arrayidx2$3 = 0, $arrayidx2$30 = 0, $arrayidx2$31 = 0, $arrayidx2$4 = 0, $arrayidx2$5 = 0, $arrayidx2$6 = 0, $arrayidx2$7 = 0, $arrayidx2$8 = 0, $arrayidx2$9 = 0, $arrayidx2$i$i$i = 0, $arrayidx2$i24$i$i = 0, $arrayidx2$i6$i$i = 0, $arrayidx3$i$i$i = 0, $arrayidx3$i25$i$i = 0, $arrayidx3$i7$i$i = 0, $arrayidx4$i$i$i = 0, $arrayidx4$i26$i$i = 0, $arrayidx4$i8$i$i = 0, $arrayidx43 = 0, $arrayidx5$i$i$i = 0;
 var $arrayidx5$i27$i$i = 0, $arrayidx5$i9$i$i = 0, $arrayidx52 = 0, $arrayidx6$i$i$i = 0, $arrayidx6$i10$i$i = 0, $arrayidx6$i28$i$i = 0, $arrayidx7$i$i$i = 0, $arrayidx7$i11$i$i = 0, $arrayidx7$i29$i$i = 0, $arrayidx8$i$i$i = 0, $arrayidx8$i12$i$i = 0, $arrayidx8$i30$i$i = 0, $arrayidx9$i$i$i = 0, $arrayidx9$i13$i$i = 0, $arrayidx9$i31$i$i = 0, $carry$072 = 0, $cmp40 = 0, $cmp48 = 0, $conv1730 = 0, $conv30 = 0;
 var $conv3629 = 0, $conv38 = 0, $div = 0, $div51 = 0, $e = 0, $exitcond = 0, $i$173 = 0, $i$271 = 0, $i$370 = 0, $inc32 = 0, $q$i = 0, $r = 0, $s = 0, $sext = 0, $sext31 = 0, $shl = 0, $shr25 = 0, $sub = 0, $t = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $q$i = sp + 464|0;
 $e = sp;
 $r = sp + 304|0;
 $s = sp + 184|0;
 $t = sp + 64|0;
 $0 = HEAP8[$a>>0]|0;
 $1 = $0 & 15;
 HEAP8[$e>>0] = $1;
 $2 = ($0&255) >>> 4;
 $arrayidx10 = ((($e)) + 1|0);
 HEAP8[$arrayidx10>>0] = $2;
 $arrayidx$1 = ((($a)) + 1|0);
 $3 = HEAP8[$arrayidx$1>>0]|0;
 $4 = $3 & 15;
 $arrayidx2$1 = ((($e)) + 2|0);
 HEAP8[$arrayidx2$1>>0] = $4;
 $5 = ($3&255) >>> 4;
 $arrayidx10$1 = ((($e)) + 3|0);
 HEAP8[$arrayidx10$1>>0] = $5;
 $arrayidx$2 = ((($a)) + 2|0);
 $6 = HEAP8[$arrayidx$2>>0]|0;
 $7 = $6 & 15;
 $arrayidx2$2 = ((($e)) + 4|0);
 HEAP8[$arrayidx2$2>>0] = $7;
 $8 = ($6&255) >>> 4;
 $arrayidx10$2 = ((($e)) + 5|0);
 HEAP8[$arrayidx10$2>>0] = $8;
 $arrayidx$3 = ((($a)) + 3|0);
 $9 = HEAP8[$arrayidx$3>>0]|0;
 $10 = $9 & 15;
 $arrayidx2$3 = ((($e)) + 6|0);
 HEAP8[$arrayidx2$3>>0] = $10;
 $11 = ($9&255) >>> 4;
 $arrayidx10$3 = ((($e)) + 7|0);
 HEAP8[$arrayidx10$3>>0] = $11;
 $arrayidx$4 = ((($a)) + 4|0);
 $12 = HEAP8[$arrayidx$4>>0]|0;
 $13 = $12 & 15;
 $arrayidx2$4 = ((($e)) + 8|0);
 HEAP8[$arrayidx2$4>>0] = $13;
 $14 = ($12&255) >>> 4;
 $arrayidx10$4 = ((($e)) + 9|0);
 HEAP8[$arrayidx10$4>>0] = $14;
 $arrayidx$5 = ((($a)) + 5|0);
 $15 = HEAP8[$arrayidx$5>>0]|0;
 $16 = $15 & 15;
 $arrayidx2$5 = ((($e)) + 10|0);
 HEAP8[$arrayidx2$5>>0] = $16;
 $17 = ($15&255) >>> 4;
 $arrayidx10$5 = ((($e)) + 11|0);
 HEAP8[$arrayidx10$5>>0] = $17;
 $arrayidx$6 = ((($a)) + 6|0);
 $18 = HEAP8[$arrayidx$6>>0]|0;
 $19 = $18 & 15;
 $arrayidx2$6 = ((($e)) + 12|0);
 HEAP8[$arrayidx2$6>>0] = $19;
 $20 = ($18&255) >>> 4;
 $arrayidx10$6 = ((($e)) + 13|0);
 HEAP8[$arrayidx10$6>>0] = $20;
 $arrayidx$7 = ((($a)) + 7|0);
 $21 = HEAP8[$arrayidx$7>>0]|0;
 $22 = $21 & 15;
 $arrayidx2$7 = ((($e)) + 14|0);
 HEAP8[$arrayidx2$7>>0] = $22;
 $23 = ($21&255) >>> 4;
 $arrayidx10$7 = ((($e)) + 15|0);
 HEAP8[$arrayidx10$7>>0] = $23;
 $arrayidx$8 = ((($a)) + 8|0);
 $24 = HEAP8[$arrayidx$8>>0]|0;
 $25 = $24 & 15;
 $arrayidx2$8 = ((($e)) + 16|0);
 HEAP8[$arrayidx2$8>>0] = $25;
 $26 = ($24&255) >>> 4;
 $arrayidx10$8 = ((($e)) + 17|0);
 HEAP8[$arrayidx10$8>>0] = $26;
 $arrayidx$9 = ((($a)) + 9|0);
 $27 = HEAP8[$arrayidx$9>>0]|0;
 $28 = $27 & 15;
 $arrayidx2$9 = ((($e)) + 18|0);
 HEAP8[$arrayidx2$9>>0] = $28;
 $29 = ($27&255) >>> 4;
 $arrayidx10$9 = ((($e)) + 19|0);
 HEAP8[$arrayidx10$9>>0] = $29;
 $arrayidx$10 = ((($a)) + 10|0);
 $30 = HEAP8[$arrayidx$10>>0]|0;
 $31 = $30 & 15;
 $arrayidx2$10 = ((($e)) + 20|0);
 HEAP8[$arrayidx2$10>>0] = $31;
 $32 = ($30&255) >>> 4;
 $arrayidx10$10 = ((($e)) + 21|0);
 HEAP8[$arrayidx10$10>>0] = $32;
 $arrayidx$11 = ((($a)) + 11|0);
 $33 = HEAP8[$arrayidx$11>>0]|0;
 $34 = $33 & 15;
 $arrayidx2$11 = ((($e)) + 22|0);
 HEAP8[$arrayidx2$11>>0] = $34;
 $35 = ($33&255) >>> 4;
 $arrayidx10$11 = ((($e)) + 23|0);
 HEAP8[$arrayidx10$11>>0] = $35;
 $arrayidx$12 = ((($a)) + 12|0);
 $36 = HEAP8[$arrayidx$12>>0]|0;
 $37 = $36 & 15;
 $arrayidx2$12 = ((($e)) + 24|0);
 HEAP8[$arrayidx2$12>>0] = $37;
 $38 = ($36&255) >>> 4;
 $arrayidx10$12 = ((($e)) + 25|0);
 HEAP8[$arrayidx10$12>>0] = $38;
 $arrayidx$13 = ((($a)) + 13|0);
 $39 = HEAP8[$arrayidx$13>>0]|0;
 $40 = $39 & 15;
 $arrayidx2$13 = ((($e)) + 26|0);
 HEAP8[$arrayidx2$13>>0] = $40;
 $41 = ($39&255) >>> 4;
 $arrayidx10$13 = ((($e)) + 27|0);
 HEAP8[$arrayidx10$13>>0] = $41;
 $arrayidx$14 = ((($a)) + 14|0);
 $42 = HEAP8[$arrayidx$14>>0]|0;
 $43 = $42 & 15;
 $arrayidx2$14 = ((($e)) + 28|0);
 HEAP8[$arrayidx2$14>>0] = $43;
 $44 = ($42&255) >>> 4;
 $arrayidx10$14 = ((($e)) + 29|0);
 HEAP8[$arrayidx10$14>>0] = $44;
 $arrayidx$15 = ((($a)) + 15|0);
 $45 = HEAP8[$arrayidx$15>>0]|0;
 $46 = $45 & 15;
 $arrayidx2$15 = ((($e)) + 30|0);
 HEAP8[$arrayidx2$15>>0] = $46;
 $47 = ($45&255) >>> 4;
 $arrayidx10$15 = ((($e)) + 31|0);
 HEAP8[$arrayidx10$15>>0] = $47;
 $arrayidx$16 = ((($a)) + 16|0);
 $48 = HEAP8[$arrayidx$16>>0]|0;
 $49 = $48 & 15;
 $arrayidx2$16 = ((($e)) + 32|0);
 HEAP8[$arrayidx2$16>>0] = $49;
 $50 = ($48&255) >>> 4;
 $arrayidx10$16 = ((($e)) + 33|0);
 HEAP8[$arrayidx10$16>>0] = $50;
 $arrayidx$17 = ((($a)) + 17|0);
 $51 = HEAP8[$arrayidx$17>>0]|0;
 $52 = $51 & 15;
 $arrayidx2$17 = ((($e)) + 34|0);
 HEAP8[$arrayidx2$17>>0] = $52;
 $53 = ($51&255) >>> 4;
 $arrayidx10$17 = ((($e)) + 35|0);
 HEAP8[$arrayidx10$17>>0] = $53;
 $arrayidx$18 = ((($a)) + 18|0);
 $54 = HEAP8[$arrayidx$18>>0]|0;
 $55 = $54 & 15;
 $arrayidx2$18 = ((($e)) + 36|0);
 HEAP8[$arrayidx2$18>>0] = $55;
 $56 = ($54&255) >>> 4;
 $arrayidx10$18 = ((($e)) + 37|0);
 HEAP8[$arrayidx10$18>>0] = $56;
 $arrayidx$19 = ((($a)) + 19|0);
 $57 = HEAP8[$arrayidx$19>>0]|0;
 $58 = $57 & 15;
 $arrayidx2$19 = ((($e)) + 38|0);
 HEAP8[$arrayidx2$19>>0] = $58;
 $59 = ($57&255) >>> 4;
 $arrayidx10$19 = ((($e)) + 39|0);
 HEAP8[$arrayidx10$19>>0] = $59;
 $arrayidx$20 = ((($a)) + 20|0);
 $60 = HEAP8[$arrayidx$20>>0]|0;
 $61 = $60 & 15;
 $arrayidx2$20 = ((($e)) + 40|0);
 HEAP8[$arrayidx2$20>>0] = $61;
 $62 = ($60&255) >>> 4;
 $arrayidx10$20 = ((($e)) + 41|0);
 HEAP8[$arrayidx10$20>>0] = $62;
 $arrayidx$21 = ((($a)) + 21|0);
 $63 = HEAP8[$arrayidx$21>>0]|0;
 $64 = $63 & 15;
 $arrayidx2$21 = ((($e)) + 42|0);
 HEAP8[$arrayidx2$21>>0] = $64;
 $65 = ($63&255) >>> 4;
 $arrayidx10$21 = ((($e)) + 43|0);
 HEAP8[$arrayidx10$21>>0] = $65;
 $arrayidx$22 = ((($a)) + 22|0);
 $66 = HEAP8[$arrayidx$22>>0]|0;
 $67 = $66 & 15;
 $arrayidx2$22 = ((($e)) + 44|0);
 HEAP8[$arrayidx2$22>>0] = $67;
 $68 = ($66&255) >>> 4;
 $arrayidx10$22 = ((($e)) + 45|0);
 HEAP8[$arrayidx10$22>>0] = $68;
 $arrayidx$23 = ((($a)) + 23|0);
 $69 = HEAP8[$arrayidx$23>>0]|0;
 $70 = $69 & 15;
 $arrayidx2$23 = ((($e)) + 46|0);
 HEAP8[$arrayidx2$23>>0] = $70;
 $71 = ($69&255) >>> 4;
 $arrayidx10$23 = ((($e)) + 47|0);
 HEAP8[$arrayidx10$23>>0] = $71;
 $arrayidx$24 = ((($a)) + 24|0);
 $72 = HEAP8[$arrayidx$24>>0]|0;
 $73 = $72 & 15;
 $arrayidx2$24 = ((($e)) + 48|0);
 HEAP8[$arrayidx2$24>>0] = $73;
 $74 = ($72&255) >>> 4;
 $arrayidx10$24 = ((($e)) + 49|0);
 HEAP8[$arrayidx10$24>>0] = $74;
 $arrayidx$25 = ((($a)) + 25|0);
 $75 = HEAP8[$arrayidx$25>>0]|0;
 $76 = $75 & 15;
 $arrayidx2$25 = ((($e)) + 50|0);
 HEAP8[$arrayidx2$25>>0] = $76;
 $77 = ($75&255) >>> 4;
 $arrayidx10$25 = ((($e)) + 51|0);
 HEAP8[$arrayidx10$25>>0] = $77;
 $arrayidx$26 = ((($a)) + 26|0);
 $78 = HEAP8[$arrayidx$26>>0]|0;
 $79 = $78 & 15;
 $arrayidx2$26 = ((($e)) + 52|0);
 HEAP8[$arrayidx2$26>>0] = $79;
 $80 = ($78&255) >>> 4;
 $arrayidx10$26 = ((($e)) + 53|0);
 HEAP8[$arrayidx10$26>>0] = $80;
 $arrayidx$27 = ((($a)) + 27|0);
 $81 = HEAP8[$arrayidx$27>>0]|0;
 $82 = $81 & 15;
 $arrayidx2$27 = ((($e)) + 54|0);
 HEAP8[$arrayidx2$27>>0] = $82;
 $83 = ($81&255) >>> 4;
 $arrayidx10$27 = ((($e)) + 55|0);
 HEAP8[$arrayidx10$27>>0] = $83;
 $arrayidx$28 = ((($a)) + 28|0);
 $84 = HEAP8[$arrayidx$28>>0]|0;
 $85 = $84 & 15;
 $arrayidx2$28 = ((($e)) + 56|0);
 HEAP8[$arrayidx2$28>>0] = $85;
 $86 = ($84&255) >>> 4;
 $arrayidx10$28 = ((($e)) + 57|0);
 HEAP8[$arrayidx10$28>>0] = $86;
 $arrayidx$29 = ((($a)) + 29|0);
 $87 = HEAP8[$arrayidx$29>>0]|0;
 $88 = $87 & 15;
 $arrayidx2$29 = ((($e)) + 58|0);
 HEAP8[$arrayidx2$29>>0] = $88;
 $89 = ($87&255) >>> 4;
 $arrayidx10$29 = ((($e)) + 59|0);
 HEAP8[$arrayidx10$29>>0] = $89;
 $arrayidx$30 = ((($a)) + 30|0);
 $90 = HEAP8[$arrayidx$30>>0]|0;
 $91 = $90 & 15;
 $arrayidx2$30 = ((($e)) + 60|0);
 HEAP8[$arrayidx2$30>>0] = $91;
 $92 = ($90&255) >>> 4;
 $arrayidx10$30 = ((($e)) + 61|0);
 HEAP8[$arrayidx10$30>>0] = $92;
 $arrayidx$31 = ((($a)) + 31|0);
 $93 = HEAP8[$arrayidx$31>>0]|0;
 $94 = $93 & 15;
 $arrayidx2$31 = ((($e)) + 62|0);
 HEAP8[$arrayidx2$31>>0] = $94;
 $95 = ($93&255) >>> 4;
 $arrayidx10$31 = ((($e)) + 63|0);
 HEAP8[$arrayidx10$31>>0] = $95;
 $carry$072 = 0;$i$173 = 0;
 while(1) {
  $arrayidx16 = (($e) + ($i$173)|0);
  $96 = HEAP8[$arrayidx16>>0]|0;
  $conv1730 = $96&255;
  $add18 = (($carry$072) + ($conv1730))|0;
  $sext = $add18 << 24;
  $sext31 = (($sext) + 134217728)|0;
  $shr25 = $sext31 >> 28;
  $shl = $shr25 << 4;
  $sub = (($add18) - ($shl))|0;
  $conv30 = $sub&255;
  HEAP8[$arrayidx16>>0] = $conv30;
  $inc32 = (($i$173) + 1)|0;
  $exitcond = ($inc32|0)==(63);
  if ($exitcond) {
   break;
  } else {
   $carry$072 = $shr25;$i$173 = $inc32;
  }
 }
 $97 = HEAP8[$arrayidx10$31>>0]|0;
 $conv3629 = $97&255;
 $add37 = (($shr25) + ($conv3629))|0;
 $conv38 = $add37&255;
 HEAP8[$arrayidx10$31>>0] = $conv38;
 dest=$h; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay1$i = ((($h)) + 40|0);
 HEAP32[$arraydecay1$i>>2] = 1;
 $arrayidx1$i4$i = ((($h)) + 44|0);
 dest=$arrayidx1$i4$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay2$i = ((($h)) + 80|0);
 HEAP32[$arraydecay2$i>>2] = 1;
 $arrayidx1$i$i = ((($h)) + 84|0);
 dest=$arrayidx1$i$i; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay3$i35 = ((($r)) + 120|0);
 $arraydecay6$i37 = ((($r)) + 40|0);
 $arraydecay7$i38 = ((($r)) + 80|0);
 $arraydecay15$i40 = ((($h)) + 120|0);
 $i$271 = 1;
 while(1) {
  $div = $i$271 >>> 1;
  $arrayidx43 = (($e) + ($i$271)|0);
  $98 = HEAP8[$arrayidx43>>0]|0;
  _select_466($t,$div,$98);
  _ge_madd($r,$h,$t);
  _fe_mul($h,$r,$arraydecay3$i35);
  _fe_mul($arraydecay1$i,$arraydecay6$i37,$arraydecay7$i38);
  _fe_mul($arraydecay2$i,$arraydecay7$i38,$arraydecay3$i35);
  _fe_mul($arraydecay15$i40,$r,$arraydecay6$i37);
  $add45 = (($i$271) + 2)|0;
  $cmp40 = ($add45>>>0)<(64);
  if ($cmp40) {
   $i$271 = $add45;
  } else {
   break;
  }
 }
 $99 = HEAP32[$h>>2]|0;
 $arrayidx1$i$i$i = ((($h)) + 4|0);
 $100 = HEAP32[$arrayidx1$i$i$i>>2]|0;
 $arrayidx2$i$i$i = ((($h)) + 8|0);
 $101 = HEAP32[$arrayidx2$i$i$i>>2]|0;
 $arrayidx3$i$i$i = ((($h)) + 12|0);
 $102 = HEAP32[$arrayidx3$i$i$i>>2]|0;
 $arrayidx4$i$i$i = ((($h)) + 16|0);
 $103 = HEAP32[$arrayidx4$i$i$i>>2]|0;
 $arrayidx5$i$i$i = ((($h)) + 20|0);
 $104 = HEAP32[$arrayidx5$i$i$i>>2]|0;
 $arrayidx6$i$i$i = ((($h)) + 24|0);
 $105 = HEAP32[$arrayidx6$i$i$i>>2]|0;
 $arrayidx7$i$i$i = ((($h)) + 28|0);
 $106 = HEAP32[$arrayidx7$i$i$i>>2]|0;
 $arrayidx8$i$i$i = ((($h)) + 32|0);
 $107 = HEAP32[$arrayidx8$i$i$i>>2]|0;
 $arrayidx9$i$i$i = ((($h)) + 36|0);
 $108 = HEAP32[$arrayidx9$i$i$i>>2]|0;
 HEAP32[$q$i>>2] = $99;
 $arrayidx11$i$i$i = ((($q$i)) + 4|0);
 HEAP32[$arrayidx11$i$i$i>>2] = $100;
 $arrayidx12$i$i$i = ((($q$i)) + 8|0);
 HEAP32[$arrayidx12$i$i$i>>2] = $101;
 $arrayidx13$i$i$i = ((($q$i)) + 12|0);
 HEAP32[$arrayidx13$i$i$i>>2] = $102;
 $arrayidx14$i$i$i = ((($q$i)) + 16|0);
 HEAP32[$arrayidx14$i$i$i>>2] = $103;
 $arrayidx15$i$i$i = ((($q$i)) + 20|0);
 HEAP32[$arrayidx15$i$i$i>>2] = $104;
 $arrayidx16$i$i$i = ((($q$i)) + 24|0);
 HEAP32[$arrayidx16$i$i$i>>2] = $105;
 $arrayidx17$i$i$i = ((($q$i)) + 28|0);
 HEAP32[$arrayidx17$i$i$i>>2] = $106;
 $arrayidx18$i$i$i = ((($q$i)) + 32|0);
 HEAP32[$arrayidx18$i$i$i>>2] = $107;
 $arrayidx19$i$i$i = ((($q$i)) + 36|0);
 HEAP32[$arrayidx19$i$i$i>>2] = $108;
 $arraydecay3$i$i = ((($q$i)) + 40|0);
 $109 = HEAP32[$arraydecay1$i>>2]|0;
 $110 = HEAP32[$arrayidx1$i4$i>>2]|0;
 $arrayidx2$i24$i$i = ((($h)) + 48|0);
 $111 = HEAP32[$arrayidx2$i24$i$i>>2]|0;
 $arrayidx3$i25$i$i = ((($h)) + 52|0);
 $112 = HEAP32[$arrayidx3$i25$i$i>>2]|0;
 $arrayidx4$i26$i$i = ((($h)) + 56|0);
 $113 = HEAP32[$arrayidx4$i26$i$i>>2]|0;
 $arrayidx5$i27$i$i = ((($h)) + 60|0);
 $114 = HEAP32[$arrayidx5$i27$i$i>>2]|0;
 $arrayidx6$i28$i$i = ((($h)) + 64|0);
 $115 = HEAP32[$arrayidx6$i28$i$i>>2]|0;
 $arrayidx7$i29$i$i = ((($h)) + 68|0);
 $116 = HEAP32[$arrayidx7$i29$i$i>>2]|0;
 $arrayidx8$i30$i$i = ((($h)) + 72|0);
 $117 = HEAP32[$arrayidx8$i30$i$i>>2]|0;
 $arrayidx9$i31$i$i = ((($h)) + 76|0);
 $118 = HEAP32[$arrayidx9$i31$i$i>>2]|0;
 HEAP32[$arraydecay3$i$i>>2] = $109;
 $arrayidx11$i32$i$i = ((($q$i)) + 44|0);
 HEAP32[$arrayidx11$i32$i$i>>2] = $110;
 $arrayidx12$i33$i$i = ((($q$i)) + 48|0);
 HEAP32[$arrayidx12$i33$i$i>>2] = $111;
 $arrayidx13$i34$i$i = ((($q$i)) + 52|0);
 HEAP32[$arrayidx13$i34$i$i>>2] = $112;
 $arrayidx14$i35$i$i = ((($q$i)) + 56|0);
 HEAP32[$arrayidx14$i35$i$i>>2] = $113;
 $arrayidx15$i36$i$i = ((($q$i)) + 60|0);
 HEAP32[$arrayidx15$i36$i$i>>2] = $114;
 $arrayidx16$i37$i$i = ((($q$i)) + 64|0);
 HEAP32[$arrayidx16$i37$i$i>>2] = $115;
 $arrayidx17$i38$i$i = ((($q$i)) + 68|0);
 HEAP32[$arrayidx17$i38$i$i>>2] = $116;
 $arrayidx18$i39$i$i = ((($q$i)) + 72|0);
 HEAP32[$arrayidx18$i39$i$i>>2] = $117;
 $arrayidx19$i40$i$i = ((($q$i)) + 76|0);
 HEAP32[$arrayidx19$i40$i$i>>2] = $118;
 $arraydecay6$i$i = ((($q$i)) + 80|0);
 $119 = HEAP32[$arraydecay2$i>>2]|0;
 $120 = HEAP32[$arrayidx1$i$i>>2]|0;
 $arrayidx2$i6$i$i = ((($h)) + 88|0);
 $121 = HEAP32[$arrayidx2$i6$i$i>>2]|0;
 $arrayidx3$i7$i$i = ((($h)) + 92|0);
 $122 = HEAP32[$arrayidx3$i7$i$i>>2]|0;
 $arrayidx4$i8$i$i = ((($h)) + 96|0);
 $123 = HEAP32[$arrayidx4$i8$i$i>>2]|0;
 $arrayidx5$i9$i$i = ((($h)) + 100|0);
 $124 = HEAP32[$arrayidx5$i9$i$i>>2]|0;
 $arrayidx6$i10$i$i = ((($h)) + 104|0);
 $125 = HEAP32[$arrayidx6$i10$i$i>>2]|0;
 $arrayidx7$i11$i$i = ((($h)) + 108|0);
 $126 = HEAP32[$arrayidx7$i11$i$i>>2]|0;
 $arrayidx8$i12$i$i = ((($h)) + 112|0);
 $127 = HEAP32[$arrayidx8$i12$i$i>>2]|0;
 $arrayidx9$i13$i$i = ((($h)) + 116|0);
 $128 = HEAP32[$arrayidx9$i13$i$i>>2]|0;
 HEAP32[$arraydecay6$i$i>>2] = $119;
 $arrayidx11$i14$i$i = ((($q$i)) + 84|0);
 HEAP32[$arrayidx11$i14$i$i>>2] = $120;
 $arrayidx12$i15$i$i = ((($q$i)) + 88|0);
 HEAP32[$arrayidx12$i15$i$i>>2] = $121;
 $arrayidx13$i16$i$i = ((($q$i)) + 92|0);
 HEAP32[$arrayidx13$i16$i$i>>2] = $122;
 $arrayidx14$i17$i$i = ((($q$i)) + 96|0);
 HEAP32[$arrayidx14$i17$i$i>>2] = $123;
 $arrayidx15$i18$i$i = ((($q$i)) + 100|0);
 HEAP32[$arrayidx15$i18$i$i>>2] = $124;
 $arrayidx16$i19$i$i = ((($q$i)) + 104|0);
 HEAP32[$arrayidx16$i19$i$i>>2] = $125;
 $arrayidx17$i20$i$i = ((($q$i)) + 108|0);
 HEAP32[$arrayidx17$i20$i$i>>2] = $126;
 $arrayidx18$i21$i$i = ((($q$i)) + 112|0);
 HEAP32[$arrayidx18$i21$i$i>>2] = $127;
 $arrayidx19$i22$i$i = ((($q$i)) + 116|0);
 HEAP32[$arrayidx19$i22$i$i>>2] = $128;
 _ge_p2_dbl($r,$q$i);
 _fe_mul($s,$r,$arraydecay3$i35);
 $arraydecay4$i44 = ((($s)) + 40|0);
 _fe_mul($arraydecay4$i44,$arraydecay6$i37,$arraydecay7$i38);
 $arraydecay9$i47 = ((($s)) + 80|0);
 _fe_mul($arraydecay9$i47,$arraydecay7$i38,$arraydecay3$i35);
 _ge_p2_dbl($r,$s);
 _fe_mul($s,$r,$arraydecay3$i35);
 _fe_mul($arraydecay4$i44,$arraydecay6$i37,$arraydecay7$i38);
 _fe_mul($arraydecay9$i47,$arraydecay7$i38,$arraydecay3$i35);
 _ge_p2_dbl($r,$s);
 _fe_mul($s,$r,$arraydecay3$i35);
 _fe_mul($arraydecay4$i44,$arraydecay6$i37,$arraydecay7$i38);
 _fe_mul($arraydecay9$i47,$arraydecay7$i38,$arraydecay3$i35);
 _ge_p2_dbl($r,$s);
 _fe_mul($h,$r,$arraydecay3$i35);
 _fe_mul($arraydecay1$i,$arraydecay6$i37,$arraydecay7$i38);
 _fe_mul($arraydecay2$i,$arraydecay7$i38,$arraydecay3$i35);
 _fe_mul($arraydecay15$i40,$r,$arraydecay6$i37);
 $i$370 = 0;
 while(1) {
  $div51 = $i$370 >>> 1;
  $arrayidx52 = (($e) + ($i$370)|0);
  $129 = HEAP8[$arrayidx52>>0]|0;
  _select_466($t,$div51,$129);
  _ge_madd($r,$h,$t);
  _fe_mul($h,$r,$arraydecay3$i35);
  _fe_mul($arraydecay1$i,$arraydecay6$i37,$arraydecay7$i38);
  _fe_mul($arraydecay2$i,$arraydecay7$i38,$arraydecay3$i35);
  _fe_mul($arraydecay15$i40,$r,$arraydecay6$i37);
  $add54 = (($i$370) + 2)|0;
  $cmp48 = ($add54>>>0)<(64);
  if ($cmp48) {
   $i$370 = $add54;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _select_466($t,$pos,$b) {
 $t = $t|0;
 $pos = $pos|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $and = 0, $and$i$i = 0, $and$i$i1107 = 0, $and$i$i1266 = 0, $and$i$i157 = 0, $and$i$i312 = 0, $and$i$i471 = 0, $and$i$i630 = 0, $and$i$i789 = 0, $and$i$i948 = 0, $and$i1001 = 0, $and$i1050 = 0, $and$i1160 = 0, $and$i1209 = 0, $and$i1319 = 0, $and$i1368 = 0, $and$i210 = 0, $and$i259 = 0, $and$i365 = 0;
 var $and$i414 = 0, $and$i524 = 0, $and$i573 = 0, $and$i59 = 0, $and$i683 = 0, $and$i732 = 0, $and$i842 = 0, $and$i891 = 0, $and29$i = 0, $and29$i$i = 0, $and29$i$i1108 = 0, $and29$i$i1267 = 0, $and29$i$i158 = 0, $and29$i$i313 = 0, $and29$i$i472 = 0, $and29$i$i631 = 0, $and29$i$i790 = 0, $and29$i$i949 = 0, $and29$i1002 = 0, $and29$i1051 = 0;
 var $and29$i1161 = 0, $and29$i1210 = 0, $and29$i1320 = 0, $and29$i1369 = 0, $and29$i211 = 0, $and29$i260 = 0, $and29$i366 = 0, $and29$i415 = 0, $and29$i525 = 0, $and29$i574 = 0, $and29$i60 = 0, $and29$i684 = 0, $and29$i733 = 0, $and29$i843 = 0, $and29$i892 = 0, $and30$i = 0, $and30$i$i = 0, $and30$i$i1109 = 0, $and30$i$i1268 = 0, $and30$i$i159 = 0;
 var $and30$i$i314 = 0, $and30$i$i473 = 0, $and30$i$i632 = 0, $and30$i$i791 = 0, $and30$i$i950 = 0, $and30$i1003 = 0, $and30$i1052 = 0, $and30$i1162 = 0, $and30$i1211 = 0, $and30$i1321 = 0, $and30$i1370 = 0, $and30$i212 = 0, $and30$i261 = 0, $and30$i367 = 0, $and30$i416 = 0, $and30$i526 = 0, $and30$i575 = 0, $and30$i61 = 0, $and30$i685 = 0, $and30$i734 = 0;
 var $and30$i844 = 0, $and30$i893 = 0, $and31$i = 0, $and31$i$i = 0, $and31$i$i1110 = 0, $and31$i$i1269 = 0, $and31$i$i160 = 0, $and31$i$i315 = 0, $and31$i$i474 = 0, $and31$i$i633 = 0, $and31$i$i792 = 0, $and31$i$i951 = 0, $and31$i1004 = 0, $and31$i1053 = 0, $and31$i1163 = 0, $and31$i1212 = 0, $and31$i1322 = 0, $and31$i1371 = 0, $and31$i213 = 0, $and31$i262 = 0;
 var $and31$i368 = 0, $and31$i417 = 0, $and31$i527 = 0, $and31$i576 = 0, $and31$i62 = 0, $and31$i686 = 0, $and31$i735 = 0, $and31$i845 = 0, $and31$i894 = 0, $and32$i = 0, $and32$i$i = 0, $and32$i$i1111 = 0, $and32$i$i1270 = 0, $and32$i$i161 = 0, $and32$i$i316 = 0, $and32$i$i475 = 0, $and32$i$i634 = 0, $and32$i$i793 = 0, $and32$i$i952 = 0, $and32$i1005 = 0;
 var $and32$i1054 = 0, $and32$i1164 = 0, $and32$i1213 = 0, $and32$i1323 = 0, $and32$i1372 = 0, $and32$i214 = 0, $and32$i263 = 0, $and32$i369 = 0, $and32$i418 = 0, $and32$i528 = 0, $and32$i577 = 0, $and32$i63 = 0, $and32$i687 = 0, $and32$i736 = 0, $and32$i846 = 0, $and32$i895 = 0, $and33$i = 0, $and33$i$i = 0, $and33$i$i1112 = 0, $and33$i$i1271 = 0;
 var $and33$i$i162 = 0, $and33$i$i317 = 0, $and33$i$i476 = 0, $and33$i$i635 = 0, $and33$i$i794 = 0, $and33$i$i953 = 0, $and33$i1006 = 0, $and33$i1055 = 0, $and33$i1165 = 0, $and33$i1214 = 0, $and33$i1324 = 0, $and33$i1373 = 0, $and33$i215 = 0, $and33$i264 = 0, $and33$i370 = 0, $and33$i419 = 0, $and33$i529 = 0, $and33$i578 = 0, $and33$i64 = 0, $and33$i688 = 0;
 var $and33$i737 = 0, $and33$i847 = 0, $and33$i896 = 0, $and34$i = 0, $and34$i$i = 0, $and34$i$i1113 = 0, $and34$i$i1272 = 0, $and34$i$i163 = 0, $and34$i$i318 = 0, $and34$i$i477 = 0, $and34$i$i636 = 0, $and34$i$i795 = 0, $and34$i$i954 = 0, $and34$i1007 = 0, $and34$i1056 = 0, $and34$i1166 = 0, $and34$i1215 = 0, $and34$i1325 = 0, $and34$i1374 = 0, $and34$i216 = 0;
 var $and34$i265 = 0, $and34$i371 = 0, $and34$i420 = 0, $and34$i530 = 0, $and34$i579 = 0, $and34$i65 = 0, $and34$i689 = 0, $and34$i738 = 0, $and34$i848 = 0, $and34$i897 = 0, $and35$i = 0, $and35$i$i = 0, $and35$i$i1114 = 0, $and35$i$i1273 = 0, $and35$i$i164 = 0, $and35$i$i319 = 0, $and35$i$i478 = 0, $and35$i$i637 = 0, $and35$i$i796 = 0, $and35$i$i955 = 0;
 var $and35$i1008 = 0, $and35$i1057 = 0, $and35$i1167 = 0, $and35$i1216 = 0, $and35$i1326 = 0, $and35$i1375 = 0, $and35$i217 = 0, $and35$i266 = 0, $and35$i372 = 0, $and35$i421 = 0, $and35$i531 = 0, $and35$i580 = 0, $and35$i66 = 0, $and35$i690 = 0, $and35$i739 = 0, $and35$i849 = 0, $and35$i898 = 0, $and36$i = 0, $and36$i$i = 0, $and36$i$i1115 = 0;
 var $and36$i$i1274 = 0, $and36$i$i165 = 0, $and36$i$i320 = 0, $and36$i$i479 = 0, $and36$i$i638 = 0, $and36$i$i797 = 0, $and36$i$i956 = 0, $and36$i1009 = 0, $and36$i1058 = 0, $and36$i1168 = 0, $and36$i1217 = 0, $and36$i1327 = 0, $and36$i1376 = 0, $and36$i218 = 0, $and36$i267 = 0, $and36$i373 = 0, $and36$i422 = 0, $and36$i532 = 0, $and36$i581 = 0, $and36$i67 = 0;
 var $and36$i691 = 0, $and36$i740 = 0, $and36$i850 = 0, $and36$i899 = 0, $and37$i = 0, $and37$i$i = 0, $and37$i$i1116 = 0, $and37$i$i1275 = 0, $and37$i$i166 = 0, $and37$i$i321 = 0, $and37$i$i480 = 0, $and37$i$i639 = 0, $and37$i$i798 = 0, $and37$i$i957 = 0, $and37$i1010 = 0, $and37$i1059 = 0, $and37$i1169 = 0, $and37$i1218 = 0, $and37$i1328 = 0, $and37$i1377 = 0;
 var $and37$i219 = 0, $and37$i268 = 0, $and37$i374 = 0, $and37$i423 = 0, $and37$i533 = 0, $and37$i582 = 0, $and37$i68 = 0, $and37$i692 = 0, $and37$i741 = 0, $and37$i851 = 0, $and37$i900 = 0, $arraydecay1$i = 0, $arraydecay2$i1076 = 0, $arraydecay2$i1235 = 0, $arraydecay2$i126 = 0, $arraydecay2$i281 = 0, $arraydecay2$i440 = 0, $arraydecay2$i599 = 0, $arraydecay2$i758 = 0, $arraydecay2$i917 = 0;
 var $arraydecay5$i1128 = 0, $arraydecay5$i1287 = 0, $arraydecay5$i178 = 0, $arraydecay5$i333 = 0, $arraydecay5$i492 = 0, $arraydecay5$i651 = 0, $arraydecay5$i810 = 0, $arraydecay5$i969 = 0, $arraydecay7$i1288 = 0, $arraydecay9$i1130 = 0, $arraydecay9$i1289 = 0, $arraydecay9$i180 = 0, $arraydecay9$i335 = 0, $arraydecay9$i494 = 0, $arraydecay9$i653 = 0, $arraydecay9$i812 = 0, $arraydecay9$i971 = 0, $arrayidx1$i$i1394 = 0, $arrayidx1$i1339 = 0, $arrayidx1$i3$i = 0;
 var $arrayidx11$i$i1087 = 0, $arrayidx11$i$i1246 = 0, $arrayidx11$i$i137 = 0, $arrayidx11$i$i292 = 0, $arrayidx11$i$i451 = 0, $arrayidx11$i$i610 = 0, $arrayidx11$i$i769 = 0, $arrayidx11$i$i928 = 0, $arrayidx11$i1030 = 0, $arrayidx11$i1140 = 0, $arrayidx11$i1189 = 0, $arrayidx11$i1299 = 0, $arrayidx11$i1348 = 0, $arrayidx11$i190 = 0, $arrayidx11$i239 = 0, $arrayidx11$i345 = 0, $arrayidx11$i394 = 0, $arrayidx11$i504 = 0, $arrayidx11$i553 = 0, $arrayidx11$i663 = 0;
 var $arrayidx11$i712 = 0, $arrayidx11$i822 = 0, $arrayidx11$i871 = 0, $arrayidx11$i981 = 0, $arrayidx12$i$i1088 = 0, $arrayidx12$i$i1247 = 0, $arrayidx12$i$i138 = 0, $arrayidx12$i$i293 = 0, $arrayidx12$i$i452 = 0, $arrayidx12$i$i611 = 0, $arrayidx12$i$i770 = 0, $arrayidx12$i$i929 = 0, $arrayidx12$i1031 = 0, $arrayidx12$i1141 = 0, $arrayidx12$i1190 = 0, $arrayidx12$i1300 = 0, $arrayidx12$i1349 = 0, $arrayidx12$i191 = 0, $arrayidx12$i240 = 0, $arrayidx12$i346 = 0;
 var $arrayidx12$i395 = 0, $arrayidx12$i505 = 0, $arrayidx12$i554 = 0, $arrayidx12$i664 = 0, $arrayidx12$i713 = 0, $arrayidx12$i823 = 0, $arrayidx12$i872 = 0, $arrayidx12$i982 = 0, $arrayidx13$i$i1089 = 0, $arrayidx13$i$i1248 = 0, $arrayidx13$i$i139 = 0, $arrayidx13$i$i294 = 0, $arrayidx13$i$i453 = 0, $arrayidx13$i$i612 = 0, $arrayidx13$i$i771 = 0, $arrayidx13$i$i930 = 0, $arrayidx13$i1032 = 0, $arrayidx13$i1142 = 0, $arrayidx13$i1191 = 0, $arrayidx13$i1301 = 0;
 var $arrayidx13$i1350 = 0, $arrayidx13$i192 = 0, $arrayidx13$i241 = 0, $arrayidx13$i347 = 0, $arrayidx13$i396 = 0, $arrayidx13$i506 = 0, $arrayidx13$i555 = 0, $arrayidx13$i665 = 0, $arrayidx13$i714 = 0, $arrayidx13$i824 = 0, $arrayidx13$i873 = 0, $arrayidx13$i983 = 0, $arrayidx14$i$i1090 = 0, $arrayidx14$i$i1249 = 0, $arrayidx14$i$i140 = 0, $arrayidx14$i$i295 = 0, $arrayidx14$i$i454 = 0, $arrayidx14$i$i613 = 0, $arrayidx14$i$i772 = 0, $arrayidx14$i$i931 = 0;
 var $arrayidx14$i1033 = 0, $arrayidx14$i1143 = 0, $arrayidx14$i1192 = 0, $arrayidx14$i1302 = 0, $arrayidx14$i1351 = 0, $arrayidx14$i193 = 0, $arrayidx14$i242 = 0, $arrayidx14$i348 = 0, $arrayidx14$i397 = 0, $arrayidx14$i507 = 0, $arrayidx14$i556 = 0, $arrayidx14$i666 = 0, $arrayidx14$i715 = 0, $arrayidx14$i825 = 0, $arrayidx14$i874 = 0, $arrayidx14$i984 = 0, $arrayidx15$i$i1091 = 0, $arrayidx15$i$i1250 = 0, $arrayidx15$i$i141 = 0, $arrayidx15$i$i296 = 0;
 var $arrayidx15$i$i455 = 0, $arrayidx15$i$i614 = 0, $arrayidx15$i$i773 = 0, $arrayidx15$i$i932 = 0, $arrayidx15$i1034 = 0, $arrayidx15$i1144 = 0, $arrayidx15$i1193 = 0, $arrayidx15$i1303 = 0, $arrayidx15$i1352 = 0, $arrayidx15$i194 = 0, $arrayidx15$i243 = 0, $arrayidx15$i349 = 0, $arrayidx15$i398 = 0, $arrayidx15$i508 = 0, $arrayidx15$i557 = 0, $arrayidx15$i667 = 0, $arrayidx15$i716 = 0, $arrayidx15$i826 = 0, $arrayidx15$i875 = 0, $arrayidx15$i985 = 0;
 var $arrayidx16$i$i1092 = 0, $arrayidx16$i$i1251 = 0, $arrayidx16$i$i142 = 0, $arrayidx16$i$i297 = 0, $arrayidx16$i$i456 = 0, $arrayidx16$i$i615 = 0, $arrayidx16$i$i774 = 0, $arrayidx16$i$i933 = 0, $arrayidx16$i1035 = 0, $arrayidx16$i1145 = 0, $arrayidx16$i1194 = 0, $arrayidx16$i1304 = 0, $arrayidx16$i1353 = 0, $arrayidx16$i195 = 0, $arrayidx16$i244 = 0, $arrayidx16$i350 = 0, $arrayidx16$i399 = 0, $arrayidx16$i509 = 0, $arrayidx16$i558 = 0, $arrayidx16$i668 = 0;
 var $arrayidx16$i717 = 0, $arrayidx16$i827 = 0, $arrayidx16$i876 = 0, $arrayidx16$i986 = 0, $arrayidx17$i$i1093 = 0, $arrayidx17$i$i1252 = 0, $arrayidx17$i$i143 = 0, $arrayidx17$i$i298 = 0, $arrayidx17$i$i457 = 0, $arrayidx17$i$i616 = 0, $arrayidx17$i$i775 = 0, $arrayidx17$i$i934 = 0, $arrayidx17$i1036 = 0, $arrayidx17$i1146 = 0, $arrayidx17$i1195 = 0, $arrayidx17$i1305 = 0, $arrayidx17$i1354 = 0, $arrayidx17$i196 = 0, $arrayidx17$i245 = 0, $arrayidx17$i351 = 0;
 var $arrayidx17$i400 = 0, $arrayidx17$i510 = 0, $arrayidx17$i559 = 0, $arrayidx17$i669 = 0, $arrayidx17$i718 = 0, $arrayidx17$i828 = 0, $arrayidx17$i877 = 0, $arrayidx17$i987 = 0, $arrayidx18$i$i1094 = 0, $arrayidx18$i$i1253 = 0, $arrayidx18$i$i144 = 0, $arrayidx18$i$i299 = 0, $arrayidx18$i$i458 = 0, $arrayidx18$i$i617 = 0, $arrayidx18$i$i776 = 0, $arrayidx18$i$i935 = 0, $arrayidx18$i1037 = 0, $arrayidx18$i1147 = 0, $arrayidx18$i1196 = 0, $arrayidx18$i1306 = 0;
 var $arrayidx18$i1355 = 0, $arrayidx18$i197 = 0, $arrayidx18$i246 = 0, $arrayidx18$i352 = 0, $arrayidx18$i401 = 0, $arrayidx18$i511 = 0, $arrayidx18$i560 = 0, $arrayidx18$i670 = 0, $arrayidx18$i719 = 0, $arrayidx18$i829 = 0, $arrayidx18$i878 = 0, $arrayidx18$i988 = 0, $arrayidx19$i$i1095 = 0, $arrayidx19$i$i1254 = 0, $arrayidx19$i$i145 = 0, $arrayidx19$i$i300 = 0, $arrayidx19$i$i459 = 0, $arrayidx19$i$i618 = 0, $arrayidx19$i$i777 = 0, $arrayidx19$i$i936 = 0;
 var $arrayidx19$i1038 = 0, $arrayidx19$i1148 = 0, $arrayidx19$i1197 = 0, $arrayidx19$i1307 = 0, $arrayidx19$i1356 = 0, $arrayidx19$i198 = 0, $arrayidx19$i247 = 0, $arrayidx19$i353 = 0, $arrayidx19$i402 = 0, $arrayidx19$i512 = 0, $arrayidx19$i561 = 0, $arrayidx19$i671 = 0, $arrayidx19$i720 = 0, $arrayidx19$i830 = 0, $arrayidx19$i879 = 0, $arrayidx19$i989 = 0, $arrayidx2$i$i1238 = 0, $arrayidx2$i1291 = 0, $arrayidx2$i1340 = 0, $arrayidx3$i$i1239 = 0;
 var $arrayidx3$i1292 = 0, $arrayidx3$i1341 = 0, $arrayidx4$i$i1240 = 0, $arrayidx4$i1293 = 0, $arrayidx4$i1342 = 0, $arrayidx5$i$i1241 = 0, $arrayidx5$i1294 = 0, $arrayidx5$i1343 = 0, $arrayidx6$i$i1242 = 0, $arrayidx6$i1295 = 0, $arrayidx6$i1344 = 0, $arrayidx7$i$i1243 = 0, $arrayidx7$i1296 = 0, $arrayidx7$i1345 = 0, $arrayidx8$i$i1244 = 0, $arrayidx8$i1297 = 0, $arrayidx8$i1346 = 0, $arrayidx9$i$i1245 = 0, $arrayidx9$i1298 = 0, $arrayidx9$i1347 = 0;
 var $conv = 0, $conv1 = 0, $conv3$i = 0, $conv3$i1071 = 0, $conv3$i1230 = 0, $conv3$i1389 = 0, $conv3$i435 = 0, $conv3$i594 = 0, $conv3$i753 = 0, $conv3$i912 = 0, $shl = 0, $sub = 0, $sub$i$i1106 = 0, $sub$i$i1265 = 0, $sub$i$i156 = 0, $sub$i$i311 = 0, $sub$i$i470 = 0, $sub$i$i629 = 0, $sub$i$i788 = 0, $sub$i$i947 = 0;
 var $sub$i1072 = 0, $sub$i1231 = 0, $sub$i1390 = 0, $sub$i279 = 0, $sub$i436 = 0, $sub$i595 = 0, $sub$i754 = 0, $sub$i88 = 0, $sub$i913 = 0, $sub10$i = 0, $sub11$i = 0, $sub12$i = 0, $sub13$i = 0, $sub14$i = 0, $sub15$i = 0, $sub16$i = 0, $sub17$i = 0, $sub18$i = 0, $sub3 = 0, $xor$i$i = 0;
 var $xor$i$i1096 = 0, $xor$i$i1255 = 0, $xor$i$i146 = 0, $xor$i$i301 = 0, $xor$i$i460 = 0, $xor$i$i619 = 0, $xor$i$i778 = 0, $xor$i$i937 = 0, $xor$i1039 = 0, $xor$i1149 = 0, $xor$i1198 = 0, $xor$i1308 = 0, $xor$i1357 = 0, $xor$i199 = 0, $xor$i248 = 0, $xor$i354 = 0, $xor$i403 = 0, $xor$i48 = 0, $xor$i513 = 0, $xor$i562 = 0;
 var $xor$i672 = 0, $xor$i721 = 0, $xor$i831 = 0, $xor$i880 = 0, $xor$i990 = 0, $xor20$i = 0, $xor20$i$i = 0, $xor20$i$i1097 = 0, $xor20$i$i147 = 0, $xor20$i$i302 = 0, $xor20$i$i461 = 0, $xor20$i$i620 = 0, $xor20$i$i779 = 0, $xor20$i$i938 = 0, $xor20$i1040 = 0, $xor20$i1150 = 0, $xor20$i1199 = 0, $xor20$i1358 = 0, $xor20$i200 = 0, $xor20$i249 = 0;
 var $xor20$i355 = 0, $xor20$i404 = 0, $xor20$i49 = 0, $xor20$i514 = 0, $xor20$i563 = 0, $xor20$i673 = 0, $xor20$i722 = 0, $xor20$i832 = 0, $xor20$i881 = 0, $xor20$i991 = 0, $xor21$i = 0, $xor21$i$i = 0, $xor21$i$i1098 = 0, $xor21$i$i148 = 0, $xor21$i$i303 = 0, $xor21$i$i462 = 0, $xor21$i$i621 = 0, $xor21$i$i780 = 0, $xor21$i$i939 = 0, $xor21$i1041 = 0;
 var $xor21$i1151 = 0, $xor21$i1200 = 0, $xor21$i1359 = 0, $xor21$i201 = 0, $xor21$i250 = 0, $xor21$i356 = 0, $xor21$i405 = 0, $xor21$i50 = 0, $xor21$i515 = 0, $xor21$i564 = 0, $xor21$i674 = 0, $xor21$i723 = 0, $xor21$i833 = 0, $xor21$i882 = 0, $xor21$i992 = 0, $xor22$i = 0, $xor22$i$i = 0, $xor22$i$i1099 = 0, $xor22$i$i149 = 0, $xor22$i$i304 = 0;
 var $xor22$i$i463 = 0, $xor22$i$i622 = 0, $xor22$i$i781 = 0, $xor22$i$i940 = 0, $xor22$i1042 = 0, $xor22$i1152 = 0, $xor22$i1201 = 0, $xor22$i1360 = 0, $xor22$i202 = 0, $xor22$i251 = 0, $xor22$i357 = 0, $xor22$i406 = 0, $xor22$i51 = 0, $xor22$i516 = 0, $xor22$i565 = 0, $xor22$i675 = 0, $xor22$i724 = 0, $xor22$i834 = 0, $xor22$i883 = 0, $xor22$i993 = 0;
 var $xor23$i = 0, $xor23$i$i = 0, $xor23$i$i1100 = 0, $xor23$i$i150 = 0, $xor23$i$i305 = 0, $xor23$i$i464 = 0, $xor23$i$i623 = 0, $xor23$i$i782 = 0, $xor23$i$i941 = 0, $xor23$i1043 = 0, $xor23$i1153 = 0, $xor23$i1202 = 0, $xor23$i1361 = 0, $xor23$i203 = 0, $xor23$i252 = 0, $xor23$i358 = 0, $xor23$i407 = 0, $xor23$i517 = 0, $xor23$i52 = 0, $xor23$i566 = 0;
 var $xor23$i676 = 0, $xor23$i725 = 0, $xor23$i835 = 0, $xor23$i884 = 0, $xor23$i994 = 0, $xor24$i = 0, $xor24$i$i = 0, $xor24$i$i1101 = 0, $xor24$i$i151 = 0, $xor24$i$i306 = 0, $xor24$i$i465 = 0, $xor24$i$i624 = 0, $xor24$i$i783 = 0, $xor24$i$i942 = 0, $xor24$i1044 = 0, $xor24$i1154 = 0, $xor24$i1203 = 0, $xor24$i1362 = 0, $xor24$i204 = 0, $xor24$i253 = 0;
 var $xor24$i359 = 0, $xor24$i408 = 0, $xor24$i518 = 0, $xor24$i53 = 0, $xor24$i567 = 0, $xor24$i677 = 0, $xor24$i726 = 0, $xor24$i836 = 0, $xor24$i885 = 0, $xor24$i995 = 0, $xor25$i = 0, $xor25$i$i = 0, $xor25$i$i1102 = 0, $xor25$i$i152 = 0, $xor25$i$i307 = 0, $xor25$i$i466 = 0, $xor25$i$i625 = 0, $xor25$i$i784 = 0, $xor25$i$i943 = 0, $xor25$i1045 = 0;
 var $xor25$i1155 = 0, $xor25$i1204 = 0, $xor25$i1363 = 0, $xor25$i205 = 0, $xor25$i254 = 0, $xor25$i360 = 0, $xor25$i409 = 0, $xor25$i519 = 0, $xor25$i54 = 0, $xor25$i568 = 0, $xor25$i678 = 0, $xor25$i727 = 0, $xor25$i837 = 0, $xor25$i886 = 0, $xor25$i996 = 0, $xor26$i = 0, $xor26$i$i = 0, $xor26$i$i1103 = 0, $xor26$i$i153 = 0, $xor26$i$i308 = 0;
 var $xor26$i$i467 = 0, $xor26$i$i626 = 0, $xor26$i$i785 = 0, $xor26$i$i944 = 0, $xor26$i1046 = 0, $xor26$i1156 = 0, $xor26$i1205 = 0, $xor26$i1364 = 0, $xor26$i206 = 0, $xor26$i255 = 0, $xor26$i361 = 0, $xor26$i410 = 0, $xor26$i520 = 0, $xor26$i55 = 0, $xor26$i569 = 0, $xor26$i679 = 0, $xor26$i728 = 0, $xor26$i838 = 0, $xor26$i887 = 0, $xor26$i997 = 0;
 var $xor27$i = 0, $xor27$i$i = 0, $xor27$i$i1104 = 0, $xor27$i$i154 = 0, $xor27$i$i309 = 0, $xor27$i$i468 = 0, $xor27$i$i627 = 0, $xor27$i$i786 = 0, $xor27$i$i945 = 0, $xor27$i1047 = 0, $xor27$i1157 = 0, $xor27$i1206 = 0, $xor27$i1365 = 0, $xor27$i207 = 0, $xor27$i256 = 0, $xor27$i362 = 0, $xor27$i411 = 0, $xor27$i521 = 0, $xor27$i56 = 0, $xor27$i570 = 0;
 var $xor27$i680 = 0, $xor27$i729 = 0, $xor27$i839 = 0, $xor27$i888 = 0, $xor27$i998 = 0, $xor28$i = 0, $xor28$i$i = 0, $xor28$i$i1105 = 0, $xor28$i$i155 = 0, $xor28$i$i310 = 0, $xor28$i$i469 = 0, $xor28$i$i628 = 0, $xor28$i$i787 = 0, $xor28$i$i946 = 0, $xor28$i1048 = 0, $xor28$i1158 = 0, $xor28$i1207 = 0, $xor28$i1366 = 0, $xor28$i208 = 0, $xor28$i257 = 0;
 var $xor28$i363 = 0, $xor28$i412 = 0, $xor28$i522 = 0, $xor28$i57 = 0, $xor28$i571 = 0, $xor28$i681 = 0, $xor28$i730 = 0, $xor28$i840 = 0, $xor28$i889 = 0, $xor28$i999 = 0, $xor38$i = 0, $xor38$i$i = 0, $xor38$i$i1117 = 0, $xor38$i$i1276 = 0, $xor38$i$i167 = 0, $xor38$i$i322 = 0, $xor38$i$i481 = 0, $xor38$i$i640 = 0, $xor38$i$i799 = 0, $xor38$i$i958 = 0;
 var $xor38$i1011 = 0, $xor38$i1060 = 0, $xor38$i1170 = 0, $xor38$i1219 = 0, $xor38$i1329 = 0, $xor38$i1378 = 0, $xor38$i220 = 0, $xor38$i269 = 0, $xor38$i375 = 0, $xor38$i424 = 0, $xor38$i534 = 0, $xor38$i583 = 0, $xor38$i69 = 0, $xor38$i693 = 0, $xor38$i742 = 0, $xor38$i852 = 0, $xor38$i901 = 0, $xor4$i1388 = 0, $xor40$i = 0, $xor40$i$i = 0;
 var $xor40$i$i1118 = 0, $xor40$i$i168 = 0, $xor40$i$i323 = 0, $xor40$i$i482 = 0, $xor40$i$i641 = 0, $xor40$i$i800 = 0, $xor40$i$i959 = 0, $xor40$i1012 = 0, $xor40$i1061 = 0, $xor40$i1171 = 0, $xor40$i1220 = 0, $xor40$i1379 = 0, $xor40$i221 = 0, $xor40$i270 = 0, $xor40$i376 = 0, $xor40$i425 = 0, $xor40$i535 = 0, $xor40$i584 = 0, $xor40$i694 = 0, $xor40$i70 = 0;
 var $xor40$i743 = 0, $xor40$i853 = 0, $xor40$i902 = 0, $xor42$i = 0, $xor42$i$i = 0, $xor42$i$i1119 = 0, $xor42$i$i169 = 0, $xor42$i$i324 = 0, $xor42$i$i483 = 0, $xor42$i$i642 = 0, $xor42$i$i801 = 0, $xor42$i$i960 = 0, $xor42$i1013 = 0, $xor42$i1062 = 0, $xor42$i1172 = 0, $xor42$i1221 = 0, $xor42$i1380 = 0, $xor42$i222 = 0, $xor42$i271 = 0, $xor42$i377 = 0;
 var $xor42$i426 = 0, $xor42$i536 = 0, $xor42$i585 = 0, $xor42$i695 = 0, $xor42$i71 = 0, $xor42$i744 = 0, $xor42$i854 = 0, $xor42$i903 = 0, $xor44$i = 0, $xor44$i$i = 0, $xor44$i$i1120 = 0, $xor44$i$i170 = 0, $xor44$i$i325 = 0, $xor44$i$i484 = 0, $xor44$i$i643 = 0, $xor44$i$i802 = 0, $xor44$i$i961 = 0, $xor44$i1014 = 0, $xor44$i1063 = 0, $xor44$i1173 = 0;
 var $xor44$i1222 = 0, $xor44$i1381 = 0, $xor44$i223 = 0, $xor44$i272 = 0, $xor44$i378 = 0, $xor44$i427 = 0, $xor44$i537 = 0, $xor44$i586 = 0, $xor44$i696 = 0, $xor44$i72 = 0, $xor44$i745 = 0, $xor44$i855 = 0, $xor44$i904 = 0, $xor46$i = 0, $xor46$i$i = 0, $xor46$i$i1121 = 0, $xor46$i$i171 = 0, $xor46$i$i326 = 0, $xor46$i$i485 = 0, $xor46$i$i644 = 0;
 var $xor46$i$i803 = 0, $xor46$i$i962 = 0, $xor46$i1015 = 0, $xor46$i1064 = 0, $xor46$i1174 = 0, $xor46$i1223 = 0, $xor46$i1382 = 0, $xor46$i224 = 0, $xor46$i273 = 0, $xor46$i379 = 0, $xor46$i428 = 0, $xor46$i538 = 0, $xor46$i587 = 0, $xor46$i697 = 0, $xor46$i73 = 0, $xor46$i746 = 0, $xor46$i856 = 0, $xor46$i905 = 0, $xor48$i = 0, $xor48$i$i = 0;
 var $xor48$i$i1122 = 0, $xor48$i$i172 = 0, $xor48$i$i327 = 0, $xor48$i$i486 = 0, $xor48$i$i645 = 0, $xor48$i$i804 = 0, $xor48$i$i963 = 0, $xor48$i1016 = 0, $xor48$i1065 = 0, $xor48$i1175 = 0, $xor48$i1224 = 0, $xor48$i1383 = 0, $xor48$i225 = 0, $xor48$i274 = 0, $xor48$i380 = 0, $xor48$i429 = 0, $xor48$i539 = 0, $xor48$i588 = 0, $xor48$i698 = 0, $xor48$i74 = 0;
 var $xor48$i747 = 0, $xor48$i857 = 0, $xor48$i906 = 0, $xor50$i = 0, $xor50$i$i = 0, $xor50$i$i1123 = 0, $xor50$i$i173 = 0, $xor50$i$i328 = 0, $xor50$i$i487 = 0, $xor50$i$i646 = 0, $xor50$i$i805 = 0, $xor50$i$i964 = 0, $xor50$i1017 = 0, $xor50$i1066 = 0, $xor50$i1176 = 0, $xor50$i1225 = 0, $xor50$i1384 = 0, $xor50$i226 = 0, $xor50$i275 = 0, $xor50$i381 = 0;
 var $xor50$i430 = 0, $xor50$i540 = 0, $xor50$i589 = 0, $xor50$i699 = 0, $xor50$i748 = 0, $xor50$i75 = 0, $xor50$i858 = 0, $xor50$i907 = 0, $xor52$i = 0, $xor52$i$i = 0, $xor52$i$i1124 = 0, $xor52$i$i174 = 0, $xor52$i$i329 = 0, $xor52$i$i488 = 0, $xor52$i$i647 = 0, $xor52$i$i806 = 0, $xor52$i$i965 = 0, $xor52$i1018 = 0, $xor52$i1067 = 0, $xor52$i1177 = 0;
 var $xor52$i1226 = 0, $xor52$i1385 = 0, $xor52$i227 = 0, $xor52$i276 = 0, $xor52$i382 = 0, $xor52$i431 = 0, $xor52$i541 = 0, $xor52$i590 = 0, $xor52$i700 = 0, $xor52$i749 = 0, $xor52$i76 = 0, $xor52$i859 = 0, $xor52$i908 = 0, $xor54$i = 0, $xor54$i$i = 0, $xor54$i$i1125 = 0, $xor54$i$i175 = 0, $xor54$i$i330 = 0, $xor54$i$i489 = 0, $xor54$i$i648 = 0;
 var $xor54$i$i807 = 0, $xor54$i$i966 = 0, $xor54$i1019 = 0, $xor54$i1068 = 0, $xor54$i1178 = 0, $xor54$i1227 = 0, $xor54$i1386 = 0, $xor54$i228 = 0, $xor54$i277 = 0, $xor54$i383 = 0, $xor54$i432 = 0, $xor54$i542 = 0, $xor54$i591 = 0, $xor54$i701 = 0, $xor54$i750 = 0, $xor54$i77 = 0, $xor54$i860 = 0, $xor54$i909 = 0, $xor56$i = 0, $xor56$i$i = 0;
 var $xor56$i$i1126 = 0, $xor56$i$i176 = 0, $xor56$i$i331 = 0, $xor56$i$i490 = 0, $xor56$i$i649 = 0, $xor56$i$i808 = 0, $xor56$i$i967 = 0, $xor56$i1020 = 0, $xor56$i1069 = 0, $xor56$i1179 = 0, $xor56$i1228 = 0, $xor56$i1387 = 0, $xor56$i229 = 0, $xor56$i278 = 0, $xor56$i384 = 0, $xor56$i433 = 0, $xor56$i543 = 0, $xor56$i592 = 0, $xor56$i702 = 0, $xor56$i751 = 0;
 var $xor56$i78 = 0, $xor56$i861 = 0, $xor56$i910 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($b&255) >>> 7;
 $conv = $b << 24 >> 24;
 $conv1 = $0&255;
 $sub = (0 - ($conv1))|0;
 $and = $sub & $conv;
 $shl = $and << 1;
 $sub3 = (($conv) - ($shl))|0;
 $arrayidx1$i$i1394 = ((($t)) + 4|0);
 $arraydecay1$i = ((($t)) + 40|0);
 $arrayidx1$i3$i = ((($t)) + 44|0);
 $1 = ((($t)) + 60|0);
 dest=$1; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $xor4$i1388 = $sub3 & 255;
 $conv3$i1389 = $xor4$i1388 ^ 1;
 $sub$i1390 = (($conv3$i1389) + -1)|0;
 $arraydecay2$i1235 = (320 + (($pos*960)|0)|0);
 $arrayidx2$i$i1238 = ((($t)) + 8|0);
 $arrayidx3$i$i1239 = ((($t)) + 12|0);
 $arrayidx4$i$i1240 = ((($t)) + 16|0);
 $arrayidx5$i$i1241 = ((($t)) + 20|0);
 $arrayidx6$i$i1242 = ((($t)) + 24|0);
 $arrayidx7$i$i1243 = ((($t)) + 28|0);
 $arrayidx8$i$i1244 = ((($t)) + 32|0);
 $arrayidx9$i$i1245 = ((($t)) + 36|0);
 $2 = HEAP32[$arraydecay2$i1235>>2]|0;
 $arrayidx11$i$i1246 = (((320 + (($pos*960)|0)|0)) + 4|0);
 $3 = HEAP32[$arrayidx11$i$i1246>>2]|0;
 $arrayidx12$i$i1247 = (((320 + (($pos*960)|0)|0)) + 8|0);
 $4 = HEAP32[$arrayidx12$i$i1247>>2]|0;
 $arrayidx13$i$i1248 = (((320 + (($pos*960)|0)|0)) + 12|0);
 $5 = HEAP32[$arrayidx13$i$i1248>>2]|0;
 $arrayidx14$i$i1249 = (((320 + (($pos*960)|0)|0)) + 16|0);
 $6 = HEAP32[$arrayidx14$i$i1249>>2]|0;
 $arrayidx15$i$i1250 = (((320 + (($pos*960)|0)|0)) + 20|0);
 $7 = HEAP32[$arrayidx15$i$i1250>>2]|0;
 $arrayidx16$i$i1251 = (((320 + (($pos*960)|0)|0)) + 24|0);
 $8 = HEAP32[$arrayidx16$i$i1251>>2]|0;
 $arrayidx17$i$i1252 = (((320 + (($pos*960)|0)|0)) + 28|0);
 $9 = HEAP32[$arrayidx17$i$i1252>>2]|0;
 $arrayidx18$i$i1253 = (((320 + (($pos*960)|0)|0)) + 32|0);
 $10 = HEAP32[$arrayidx18$i$i1253>>2]|0;
 $arrayidx19$i$i1254 = (((320 + (($pos*960)|0)|0)) + 36|0);
 $11 = HEAP32[$arrayidx19$i$i1254>>2]|0;
 $xor$i$i1255 = $2 ^ 1;
 $sub$i$i1265 = $sub$i1390 >> 31;
 $and$i$i1266 = $xor$i$i1255 & $sub$i$i1265;
 $and29$i$i1267 = $3 & $sub$i$i1265;
 $and30$i$i1268 = $4 & $sub$i$i1265;
 $and31$i$i1269 = $5 & $sub$i$i1265;
 $and32$i$i1270 = $6 & $sub$i$i1265;
 $and33$i$i1271 = $7 & $sub$i$i1265;
 $and34$i$i1272 = $8 & $sub$i$i1265;
 $and35$i$i1273 = $9 & $sub$i$i1265;
 $and36$i$i1274 = $10 & $sub$i$i1265;
 $and37$i$i1275 = $11 & $sub$i$i1265;
 $xor38$i$i1276 = $and$i$i1266 ^ 1;
 HEAP32[$t>>2] = $xor38$i$i1276;
 HEAP32[$arrayidx1$i$i1394>>2] = $and29$i$i1267;
 HEAP32[$arrayidx2$i$i1238>>2] = $and30$i$i1268;
 HEAP32[$arrayidx3$i$i1239>>2] = $and31$i$i1269;
 HEAP32[$arrayidx4$i$i1240>>2] = $and32$i$i1270;
 HEAP32[$arrayidx5$i$i1241>>2] = $and33$i$i1271;
 HEAP32[$arrayidx6$i$i1242>>2] = $and34$i$i1272;
 HEAP32[$arrayidx7$i$i1243>>2] = $and35$i$i1273;
 HEAP32[$arrayidx8$i$i1244>>2] = $and36$i$i1274;
 HEAP32[$arrayidx9$i$i1245>>2] = $and37$i$i1275;
 $arraydecay5$i1287 = (((320 + (($pos*960)|0)|0)) + 40|0);
 $arrayidx2$i1291 = ((($t)) + 48|0);
 $arrayidx3$i1292 = ((($t)) + 52|0);
 $arrayidx4$i1293 = ((($t)) + 56|0);
 $arrayidx5$i1294 = ((($t)) + 60|0);
 $arrayidx6$i1295 = ((($t)) + 64|0);
 $arrayidx7$i1296 = ((($t)) + 68|0);
 $arrayidx8$i1297 = ((($t)) + 72|0);
 $arrayidx9$i1298 = ((($t)) + 76|0);
 $12 = HEAP32[$arraydecay5$i1287>>2]|0;
 $arrayidx11$i1299 = (((320 + (($pos*960)|0)|0)) + 44|0);
 $13 = HEAP32[$arrayidx11$i1299>>2]|0;
 $arrayidx12$i1300 = (((320 + (($pos*960)|0)|0)) + 48|0);
 $14 = HEAP32[$arrayidx12$i1300>>2]|0;
 $arrayidx13$i1301 = (((320 + (($pos*960)|0)|0)) + 52|0);
 $15 = HEAP32[$arrayidx13$i1301>>2]|0;
 $arrayidx14$i1302 = (((320 + (($pos*960)|0)|0)) + 56|0);
 $16 = HEAP32[$arrayidx14$i1302>>2]|0;
 $arrayidx15$i1303 = (((320 + (($pos*960)|0)|0)) + 60|0);
 $17 = HEAP32[$arrayidx15$i1303>>2]|0;
 $arrayidx16$i1304 = (((320 + (($pos*960)|0)|0)) + 64|0);
 $18 = HEAP32[$arrayidx16$i1304>>2]|0;
 $arrayidx17$i1305 = (((320 + (($pos*960)|0)|0)) + 68|0);
 $19 = HEAP32[$arrayidx17$i1305>>2]|0;
 $arrayidx18$i1306 = (((320 + (($pos*960)|0)|0)) + 72|0);
 $20 = HEAP32[$arrayidx18$i1306>>2]|0;
 $arrayidx19$i1307 = (((320 + (($pos*960)|0)|0)) + 76|0);
 $21 = HEAP32[$arrayidx19$i1307>>2]|0;
 $xor$i1308 = $12 ^ 1;
 $and$i1319 = $xor$i1308 & $sub$i$i1265;
 $and29$i1320 = $13 & $sub$i$i1265;
 $and30$i1321 = $14 & $sub$i$i1265;
 $and31$i1322 = $15 & $sub$i$i1265;
 $and32$i1323 = $16 & $sub$i$i1265;
 $and33$i1324 = $17 & $sub$i$i1265;
 $and34$i1325 = $18 & $sub$i$i1265;
 $and35$i1326 = $19 & $sub$i$i1265;
 $and36$i1327 = $20 & $sub$i$i1265;
 $and37$i1328 = $21 & $sub$i$i1265;
 $xor38$i1329 = $and$i1319 ^ 1;
 HEAP32[$arraydecay1$i>>2] = $xor38$i1329;
 HEAP32[$arrayidx1$i3$i>>2] = $and29$i1320;
 HEAP32[$arrayidx2$i1291>>2] = $and30$i1321;
 HEAP32[$arrayidx3$i1292>>2] = $and31$i1322;
 HEAP32[$arrayidx4$i1293>>2] = $and32$i1323;
 HEAP32[$arrayidx5$i1294>>2] = $and33$i1324;
 HEAP32[$arrayidx6$i1295>>2] = $and34$i1325;
 HEAP32[$arrayidx7$i1296>>2] = $and35$i1326;
 HEAP32[$arrayidx8$i1297>>2] = $and36$i1327;
 HEAP32[$arrayidx9$i1298>>2] = $and37$i1328;
 $arraydecay7$i1288 = ((($t)) + 80|0);
 $arraydecay9$i1289 = (((320 + (($pos*960)|0)|0)) + 80|0);
 $22 = HEAP32[$arraydecay7$i1288>>2]|0;
 $arrayidx1$i1339 = ((($t)) + 84|0);
 $23 = HEAP32[$arrayidx1$i1339>>2]|0;
 $arrayidx2$i1340 = ((($t)) + 88|0);
 $24 = HEAP32[$arrayidx2$i1340>>2]|0;
 $arrayidx3$i1341 = ((($t)) + 92|0);
 $25 = HEAP32[$arrayidx3$i1341>>2]|0;
 $arrayidx4$i1342 = ((($t)) + 96|0);
 $26 = HEAP32[$arrayidx4$i1342>>2]|0;
 $arrayidx5$i1343 = ((($t)) + 100|0);
 $27 = HEAP32[$arrayidx5$i1343>>2]|0;
 $arrayidx6$i1344 = ((($t)) + 104|0);
 $28 = HEAP32[$arrayidx6$i1344>>2]|0;
 $arrayidx7$i1345 = ((($t)) + 108|0);
 $29 = HEAP32[$arrayidx7$i1345>>2]|0;
 $arrayidx8$i1346 = ((($t)) + 112|0);
 $30 = HEAP32[$arrayidx8$i1346>>2]|0;
 $arrayidx9$i1347 = ((($t)) + 116|0);
 $31 = HEAP32[$arrayidx9$i1347>>2]|0;
 $32 = HEAP32[$arraydecay9$i1289>>2]|0;
 $arrayidx11$i1348 = (((320 + (($pos*960)|0)|0)) + 84|0);
 $33 = HEAP32[$arrayidx11$i1348>>2]|0;
 $arrayidx12$i1349 = (((320 + (($pos*960)|0)|0)) + 88|0);
 $34 = HEAP32[$arrayidx12$i1349>>2]|0;
 $arrayidx13$i1350 = (((320 + (($pos*960)|0)|0)) + 92|0);
 $35 = HEAP32[$arrayidx13$i1350>>2]|0;
 $arrayidx14$i1351 = (((320 + (($pos*960)|0)|0)) + 96|0);
 $36 = HEAP32[$arrayidx14$i1351>>2]|0;
 $arrayidx15$i1352 = (((320 + (($pos*960)|0)|0)) + 100|0);
 $37 = HEAP32[$arrayidx15$i1352>>2]|0;
 $arrayidx16$i1353 = (((320 + (($pos*960)|0)|0)) + 104|0);
 $38 = HEAP32[$arrayidx16$i1353>>2]|0;
 $arrayidx17$i1354 = (((320 + (($pos*960)|0)|0)) + 108|0);
 $39 = HEAP32[$arrayidx17$i1354>>2]|0;
 $arrayidx18$i1355 = (((320 + (($pos*960)|0)|0)) + 112|0);
 $40 = HEAP32[$arrayidx18$i1355>>2]|0;
 $arrayidx19$i1356 = (((320 + (($pos*960)|0)|0)) + 116|0);
 $41 = HEAP32[$arrayidx19$i1356>>2]|0;
 $xor$i1357 = $32 ^ $22;
 $xor20$i1358 = $33 ^ $23;
 $xor21$i1359 = $34 ^ $24;
 $xor22$i1360 = $35 ^ $25;
 $xor23$i1361 = $36 ^ $26;
 $xor24$i1362 = $37 ^ $27;
 $xor25$i1363 = $38 ^ $28;
 $xor26$i1364 = $39 ^ $29;
 $xor27$i1365 = $40 ^ $30;
 $xor28$i1366 = $41 ^ $31;
 $and$i1368 = $xor$i1357 & $sub$i$i1265;
 $and29$i1369 = $xor20$i1358 & $sub$i$i1265;
 $and30$i1370 = $xor21$i1359 & $sub$i$i1265;
 $and31$i1371 = $xor22$i1360 & $sub$i$i1265;
 $and32$i1372 = $xor23$i1361 & $sub$i$i1265;
 $and33$i1373 = $xor24$i1362 & $sub$i$i1265;
 $and34$i1374 = $xor25$i1363 & $sub$i$i1265;
 $and35$i1375 = $xor26$i1364 & $sub$i$i1265;
 $and36$i1376 = $xor27$i1365 & $sub$i$i1265;
 $and37$i1377 = $xor28$i1366 & $sub$i$i1265;
 $xor38$i1378 = $and$i1368 ^ $22;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i1378;
 $xor40$i1379 = $and29$i1369 ^ $23;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i1379;
 $xor42$i1380 = $and30$i1370 ^ $24;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i1380;
 $xor44$i1381 = $and31$i1371 ^ $25;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i1381;
 $xor46$i1382 = $and32$i1372 ^ $26;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i1382;
 $xor48$i1383 = $and33$i1373 ^ $27;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i1383;
 $xor50$i1384 = $and34$i1374 ^ $28;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i1384;
 $xor52$i1385 = $and35$i1375 ^ $29;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i1385;
 $xor54$i1386 = $and36$i1376 ^ $30;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i1386;
 $xor56$i1387 = $and37$i1377 ^ $31;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i1387;
 $conv3$i1230 = $xor4$i1388 ^ 2;
 $sub$i1231 = (($conv3$i1230) + -1)|0;
 $arraydecay2$i1076 = (((320 + (($pos*960)|0)|0)) + 120|0);
 $42 = HEAP32[$arraydecay2$i1076>>2]|0;
 $arrayidx11$i$i1087 = (((320 + (($pos*960)|0)|0)) + 124|0);
 $43 = HEAP32[$arrayidx11$i$i1087>>2]|0;
 $arrayidx12$i$i1088 = (((320 + (($pos*960)|0)|0)) + 128|0);
 $44 = HEAP32[$arrayidx12$i$i1088>>2]|0;
 $arrayidx13$i$i1089 = (((320 + (($pos*960)|0)|0)) + 132|0);
 $45 = HEAP32[$arrayidx13$i$i1089>>2]|0;
 $arrayidx14$i$i1090 = (((320 + (($pos*960)|0)|0)) + 136|0);
 $46 = HEAP32[$arrayidx14$i$i1090>>2]|0;
 $arrayidx15$i$i1091 = (((320 + (($pos*960)|0)|0)) + 140|0);
 $47 = HEAP32[$arrayidx15$i$i1091>>2]|0;
 $arrayidx16$i$i1092 = (((320 + (($pos*960)|0)|0)) + 144|0);
 $48 = HEAP32[$arrayidx16$i$i1092>>2]|0;
 $arrayidx17$i$i1093 = (((320 + (($pos*960)|0)|0)) + 148|0);
 $49 = HEAP32[$arrayidx17$i$i1093>>2]|0;
 $arrayidx18$i$i1094 = (((320 + (($pos*960)|0)|0)) + 152|0);
 $50 = HEAP32[$arrayidx18$i$i1094>>2]|0;
 $arrayidx19$i$i1095 = (((320 + (($pos*960)|0)|0)) + 156|0);
 $51 = HEAP32[$arrayidx19$i$i1095>>2]|0;
 $xor$i$i1096 = $42 ^ $xor38$i$i1276;
 $xor20$i$i1097 = $43 ^ $and29$i$i1267;
 $xor21$i$i1098 = $44 ^ $and30$i$i1268;
 $xor22$i$i1099 = $45 ^ $and31$i$i1269;
 $xor23$i$i1100 = $46 ^ $and32$i$i1270;
 $xor24$i$i1101 = $47 ^ $and33$i$i1271;
 $xor25$i$i1102 = $48 ^ $and34$i$i1272;
 $xor26$i$i1103 = $49 ^ $and35$i$i1273;
 $xor27$i$i1104 = $50 ^ $and36$i$i1274;
 $xor28$i$i1105 = $51 ^ $and37$i$i1275;
 $sub$i$i1106 = $sub$i1231 >> 31;
 $and$i$i1107 = $xor$i$i1096 & $sub$i$i1106;
 $and29$i$i1108 = $xor20$i$i1097 & $sub$i$i1106;
 $and30$i$i1109 = $xor21$i$i1098 & $sub$i$i1106;
 $and31$i$i1110 = $xor22$i$i1099 & $sub$i$i1106;
 $and32$i$i1111 = $xor23$i$i1100 & $sub$i$i1106;
 $and33$i$i1112 = $xor24$i$i1101 & $sub$i$i1106;
 $and34$i$i1113 = $xor25$i$i1102 & $sub$i$i1106;
 $and35$i$i1114 = $xor26$i$i1103 & $sub$i$i1106;
 $and36$i$i1115 = $xor27$i$i1104 & $sub$i$i1106;
 $and37$i$i1116 = $xor28$i$i1105 & $sub$i$i1106;
 $xor38$i$i1117 = $and$i$i1107 ^ $xor38$i$i1276;
 HEAP32[$t>>2] = $xor38$i$i1117;
 $xor40$i$i1118 = $and29$i$i1108 ^ $and29$i$i1267;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i1118;
 $xor42$i$i1119 = $and30$i$i1109 ^ $and30$i$i1268;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i1119;
 $xor44$i$i1120 = $and31$i$i1110 ^ $and31$i$i1269;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i1120;
 $xor46$i$i1121 = $and32$i$i1111 ^ $and32$i$i1270;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i1121;
 $xor48$i$i1122 = $and33$i$i1112 ^ $and33$i$i1271;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i1122;
 $xor50$i$i1123 = $and34$i$i1113 ^ $and34$i$i1272;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i1123;
 $xor52$i$i1124 = $and35$i$i1114 ^ $and35$i$i1273;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i1124;
 $xor54$i$i1125 = $and36$i$i1115 ^ $and36$i$i1274;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i1125;
 $xor56$i$i1126 = $and37$i$i1116 ^ $and37$i$i1275;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i1126;
 $arraydecay5$i1128 = (((320 + (($pos*960)|0)|0)) + 160|0);
 $52 = HEAP32[$arraydecay5$i1128>>2]|0;
 $arrayidx11$i1140 = (((320 + (($pos*960)|0)|0)) + 164|0);
 $53 = HEAP32[$arrayidx11$i1140>>2]|0;
 $arrayidx12$i1141 = (((320 + (($pos*960)|0)|0)) + 168|0);
 $54 = HEAP32[$arrayidx12$i1141>>2]|0;
 $arrayidx13$i1142 = (((320 + (($pos*960)|0)|0)) + 172|0);
 $55 = HEAP32[$arrayidx13$i1142>>2]|0;
 $arrayidx14$i1143 = (((320 + (($pos*960)|0)|0)) + 176|0);
 $56 = HEAP32[$arrayidx14$i1143>>2]|0;
 $arrayidx15$i1144 = (((320 + (($pos*960)|0)|0)) + 180|0);
 $57 = HEAP32[$arrayidx15$i1144>>2]|0;
 $arrayidx16$i1145 = (((320 + (($pos*960)|0)|0)) + 184|0);
 $58 = HEAP32[$arrayidx16$i1145>>2]|0;
 $arrayidx17$i1146 = (((320 + (($pos*960)|0)|0)) + 188|0);
 $59 = HEAP32[$arrayidx17$i1146>>2]|0;
 $arrayidx18$i1147 = (((320 + (($pos*960)|0)|0)) + 192|0);
 $60 = HEAP32[$arrayidx18$i1147>>2]|0;
 $arrayidx19$i1148 = (((320 + (($pos*960)|0)|0)) + 196|0);
 $61 = HEAP32[$arrayidx19$i1148>>2]|0;
 $xor$i1149 = $52 ^ $xor38$i1329;
 $xor20$i1150 = $53 ^ $and29$i1320;
 $xor21$i1151 = $54 ^ $and30$i1321;
 $xor22$i1152 = $55 ^ $and31$i1322;
 $xor23$i1153 = $56 ^ $and32$i1323;
 $xor24$i1154 = $57 ^ $and33$i1324;
 $xor25$i1155 = $58 ^ $and34$i1325;
 $xor26$i1156 = $59 ^ $and35$i1326;
 $xor27$i1157 = $60 ^ $and36$i1327;
 $xor28$i1158 = $61 ^ $and37$i1328;
 $and$i1160 = $xor$i1149 & $sub$i$i1106;
 $and29$i1161 = $xor20$i1150 & $sub$i$i1106;
 $and30$i1162 = $xor21$i1151 & $sub$i$i1106;
 $and31$i1163 = $xor22$i1152 & $sub$i$i1106;
 $and32$i1164 = $xor23$i1153 & $sub$i$i1106;
 $and33$i1165 = $xor24$i1154 & $sub$i$i1106;
 $and34$i1166 = $xor25$i1155 & $sub$i$i1106;
 $and35$i1167 = $xor26$i1156 & $sub$i$i1106;
 $and36$i1168 = $xor27$i1157 & $sub$i$i1106;
 $and37$i1169 = $xor28$i1158 & $sub$i$i1106;
 $xor38$i1170 = $and$i1160 ^ $xor38$i1329;
 HEAP32[$arraydecay1$i>>2] = $xor38$i1170;
 $xor40$i1171 = $and29$i1161 ^ $and29$i1320;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i1171;
 $xor42$i1172 = $and30$i1162 ^ $and30$i1321;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i1172;
 $xor44$i1173 = $and31$i1163 ^ $and31$i1322;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i1173;
 $xor46$i1174 = $and32$i1164 ^ $and32$i1323;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i1174;
 $xor48$i1175 = $and33$i1165 ^ $and33$i1324;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i1175;
 $xor50$i1176 = $and34$i1166 ^ $and34$i1325;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i1176;
 $xor52$i1177 = $and35$i1167 ^ $and35$i1326;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i1177;
 $xor54$i1178 = $and36$i1168 ^ $and36$i1327;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i1178;
 $xor56$i1179 = $and37$i1169 ^ $and37$i1328;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i1179;
 $arraydecay9$i1130 = (((320 + (($pos*960)|0)|0)) + 200|0);
 $62 = HEAP32[$arraydecay9$i1130>>2]|0;
 $arrayidx11$i1189 = (((320 + (($pos*960)|0)|0)) + 204|0);
 $63 = HEAP32[$arrayidx11$i1189>>2]|0;
 $arrayidx12$i1190 = (((320 + (($pos*960)|0)|0)) + 208|0);
 $64 = HEAP32[$arrayidx12$i1190>>2]|0;
 $arrayidx13$i1191 = (((320 + (($pos*960)|0)|0)) + 212|0);
 $65 = HEAP32[$arrayidx13$i1191>>2]|0;
 $arrayidx14$i1192 = (((320 + (($pos*960)|0)|0)) + 216|0);
 $66 = HEAP32[$arrayidx14$i1192>>2]|0;
 $arrayidx15$i1193 = (((320 + (($pos*960)|0)|0)) + 220|0);
 $67 = HEAP32[$arrayidx15$i1193>>2]|0;
 $arrayidx16$i1194 = (((320 + (($pos*960)|0)|0)) + 224|0);
 $68 = HEAP32[$arrayidx16$i1194>>2]|0;
 $arrayidx17$i1195 = (((320 + (($pos*960)|0)|0)) + 228|0);
 $69 = HEAP32[$arrayidx17$i1195>>2]|0;
 $arrayidx18$i1196 = (((320 + (($pos*960)|0)|0)) + 232|0);
 $70 = HEAP32[$arrayidx18$i1196>>2]|0;
 $arrayidx19$i1197 = (((320 + (($pos*960)|0)|0)) + 236|0);
 $71 = HEAP32[$arrayidx19$i1197>>2]|0;
 $xor$i1198 = $62 ^ $xor38$i1378;
 $xor20$i1199 = $63 ^ $xor40$i1379;
 $xor21$i1200 = $64 ^ $xor42$i1380;
 $xor22$i1201 = $65 ^ $xor44$i1381;
 $xor23$i1202 = $66 ^ $xor46$i1382;
 $xor24$i1203 = $67 ^ $xor48$i1383;
 $xor25$i1204 = $68 ^ $xor50$i1384;
 $xor26$i1205 = $69 ^ $xor52$i1385;
 $xor27$i1206 = $70 ^ $xor54$i1386;
 $xor28$i1207 = $71 ^ $xor56$i1387;
 $and$i1209 = $xor$i1198 & $sub$i$i1106;
 $and29$i1210 = $xor20$i1199 & $sub$i$i1106;
 $and30$i1211 = $xor21$i1200 & $sub$i$i1106;
 $and31$i1212 = $xor22$i1201 & $sub$i$i1106;
 $and32$i1213 = $xor23$i1202 & $sub$i$i1106;
 $and33$i1214 = $xor24$i1203 & $sub$i$i1106;
 $and34$i1215 = $xor25$i1204 & $sub$i$i1106;
 $and35$i1216 = $xor26$i1205 & $sub$i$i1106;
 $and36$i1217 = $xor27$i1206 & $sub$i$i1106;
 $and37$i1218 = $xor28$i1207 & $sub$i$i1106;
 $xor38$i1219 = $and$i1209 ^ $xor38$i1378;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i1219;
 $xor40$i1220 = $and29$i1210 ^ $xor40$i1379;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i1220;
 $xor42$i1221 = $and30$i1211 ^ $xor42$i1380;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i1221;
 $xor44$i1222 = $and31$i1212 ^ $xor44$i1381;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i1222;
 $xor46$i1223 = $and32$i1213 ^ $xor46$i1382;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i1223;
 $xor48$i1224 = $and33$i1214 ^ $xor48$i1383;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i1224;
 $xor50$i1225 = $and34$i1215 ^ $xor50$i1384;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i1225;
 $xor52$i1226 = $and35$i1216 ^ $xor52$i1385;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i1226;
 $xor54$i1227 = $and36$i1217 ^ $xor54$i1386;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i1227;
 $xor56$i1228 = $and37$i1218 ^ $xor56$i1387;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i1228;
 $conv3$i1071 = $xor4$i1388 ^ 3;
 $sub$i1072 = (($conv3$i1071) + -1)|0;
 $arraydecay2$i917 = (((320 + (($pos*960)|0)|0)) + 240|0);
 $72 = HEAP32[$arraydecay2$i917>>2]|0;
 $arrayidx11$i$i928 = (((320 + (($pos*960)|0)|0)) + 244|0);
 $73 = HEAP32[$arrayidx11$i$i928>>2]|0;
 $arrayidx12$i$i929 = (((320 + (($pos*960)|0)|0)) + 248|0);
 $74 = HEAP32[$arrayidx12$i$i929>>2]|0;
 $arrayidx13$i$i930 = (((320 + (($pos*960)|0)|0)) + 252|0);
 $75 = HEAP32[$arrayidx13$i$i930>>2]|0;
 $arrayidx14$i$i931 = (((320 + (($pos*960)|0)|0)) + 256|0);
 $76 = HEAP32[$arrayidx14$i$i931>>2]|0;
 $arrayidx15$i$i932 = (((320 + (($pos*960)|0)|0)) + 260|0);
 $77 = HEAP32[$arrayidx15$i$i932>>2]|0;
 $arrayidx16$i$i933 = (((320 + (($pos*960)|0)|0)) + 264|0);
 $78 = HEAP32[$arrayidx16$i$i933>>2]|0;
 $arrayidx17$i$i934 = (((320 + (($pos*960)|0)|0)) + 268|0);
 $79 = HEAP32[$arrayidx17$i$i934>>2]|0;
 $arrayidx18$i$i935 = (((320 + (($pos*960)|0)|0)) + 272|0);
 $80 = HEAP32[$arrayidx18$i$i935>>2]|0;
 $arrayidx19$i$i936 = (((320 + (($pos*960)|0)|0)) + 276|0);
 $81 = HEAP32[$arrayidx19$i$i936>>2]|0;
 $xor$i$i937 = $72 ^ $xor38$i$i1117;
 $xor20$i$i938 = $73 ^ $xor40$i$i1118;
 $xor21$i$i939 = $74 ^ $xor42$i$i1119;
 $xor22$i$i940 = $75 ^ $xor44$i$i1120;
 $xor23$i$i941 = $76 ^ $xor46$i$i1121;
 $xor24$i$i942 = $77 ^ $xor48$i$i1122;
 $xor25$i$i943 = $78 ^ $xor50$i$i1123;
 $xor26$i$i944 = $79 ^ $xor52$i$i1124;
 $xor27$i$i945 = $80 ^ $xor54$i$i1125;
 $xor28$i$i946 = $81 ^ $xor56$i$i1126;
 $sub$i$i947 = $sub$i1072 >> 31;
 $and$i$i948 = $xor$i$i937 & $sub$i$i947;
 $and29$i$i949 = $xor20$i$i938 & $sub$i$i947;
 $and30$i$i950 = $xor21$i$i939 & $sub$i$i947;
 $and31$i$i951 = $xor22$i$i940 & $sub$i$i947;
 $and32$i$i952 = $xor23$i$i941 & $sub$i$i947;
 $and33$i$i953 = $xor24$i$i942 & $sub$i$i947;
 $and34$i$i954 = $xor25$i$i943 & $sub$i$i947;
 $and35$i$i955 = $xor26$i$i944 & $sub$i$i947;
 $and36$i$i956 = $xor27$i$i945 & $sub$i$i947;
 $and37$i$i957 = $xor28$i$i946 & $sub$i$i947;
 $xor38$i$i958 = $and$i$i948 ^ $xor38$i$i1117;
 HEAP32[$t>>2] = $xor38$i$i958;
 $xor40$i$i959 = $and29$i$i949 ^ $xor40$i$i1118;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i959;
 $xor42$i$i960 = $and30$i$i950 ^ $xor42$i$i1119;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i960;
 $xor44$i$i961 = $and31$i$i951 ^ $xor44$i$i1120;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i961;
 $xor46$i$i962 = $and32$i$i952 ^ $xor46$i$i1121;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i962;
 $xor48$i$i963 = $and33$i$i953 ^ $xor48$i$i1122;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i963;
 $xor50$i$i964 = $and34$i$i954 ^ $xor50$i$i1123;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i964;
 $xor52$i$i965 = $and35$i$i955 ^ $xor52$i$i1124;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i965;
 $xor54$i$i966 = $and36$i$i956 ^ $xor54$i$i1125;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i966;
 $xor56$i$i967 = $and37$i$i957 ^ $xor56$i$i1126;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i967;
 $arraydecay5$i969 = (((320 + (($pos*960)|0)|0)) + 280|0);
 $82 = HEAP32[$arraydecay5$i969>>2]|0;
 $arrayidx11$i981 = (((320 + (($pos*960)|0)|0)) + 284|0);
 $83 = HEAP32[$arrayidx11$i981>>2]|0;
 $arrayidx12$i982 = (((320 + (($pos*960)|0)|0)) + 288|0);
 $84 = HEAP32[$arrayidx12$i982>>2]|0;
 $arrayidx13$i983 = (((320 + (($pos*960)|0)|0)) + 292|0);
 $85 = HEAP32[$arrayidx13$i983>>2]|0;
 $arrayidx14$i984 = (((320 + (($pos*960)|0)|0)) + 296|0);
 $86 = HEAP32[$arrayidx14$i984>>2]|0;
 $arrayidx15$i985 = (((320 + (($pos*960)|0)|0)) + 300|0);
 $87 = HEAP32[$arrayidx15$i985>>2]|0;
 $arrayidx16$i986 = (((320 + (($pos*960)|0)|0)) + 304|0);
 $88 = HEAP32[$arrayidx16$i986>>2]|0;
 $arrayidx17$i987 = (((320 + (($pos*960)|0)|0)) + 308|0);
 $89 = HEAP32[$arrayidx17$i987>>2]|0;
 $arrayidx18$i988 = (((320 + (($pos*960)|0)|0)) + 312|0);
 $90 = HEAP32[$arrayidx18$i988>>2]|0;
 $arrayidx19$i989 = (((320 + (($pos*960)|0)|0)) + 316|0);
 $91 = HEAP32[$arrayidx19$i989>>2]|0;
 $xor$i990 = $82 ^ $xor38$i1170;
 $xor20$i991 = $83 ^ $xor40$i1171;
 $xor21$i992 = $84 ^ $xor42$i1172;
 $xor22$i993 = $85 ^ $xor44$i1173;
 $xor23$i994 = $86 ^ $xor46$i1174;
 $xor24$i995 = $87 ^ $xor48$i1175;
 $xor25$i996 = $88 ^ $xor50$i1176;
 $xor26$i997 = $89 ^ $xor52$i1177;
 $xor27$i998 = $90 ^ $xor54$i1178;
 $xor28$i999 = $91 ^ $xor56$i1179;
 $and$i1001 = $xor$i990 & $sub$i$i947;
 $and29$i1002 = $xor20$i991 & $sub$i$i947;
 $and30$i1003 = $xor21$i992 & $sub$i$i947;
 $and31$i1004 = $xor22$i993 & $sub$i$i947;
 $and32$i1005 = $xor23$i994 & $sub$i$i947;
 $and33$i1006 = $xor24$i995 & $sub$i$i947;
 $and34$i1007 = $xor25$i996 & $sub$i$i947;
 $and35$i1008 = $xor26$i997 & $sub$i$i947;
 $and36$i1009 = $xor27$i998 & $sub$i$i947;
 $and37$i1010 = $xor28$i999 & $sub$i$i947;
 $xor38$i1011 = $and$i1001 ^ $xor38$i1170;
 HEAP32[$arraydecay1$i>>2] = $xor38$i1011;
 $xor40$i1012 = $and29$i1002 ^ $xor40$i1171;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i1012;
 $xor42$i1013 = $and30$i1003 ^ $xor42$i1172;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i1013;
 $xor44$i1014 = $and31$i1004 ^ $xor44$i1173;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i1014;
 $xor46$i1015 = $and32$i1005 ^ $xor46$i1174;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i1015;
 $xor48$i1016 = $and33$i1006 ^ $xor48$i1175;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i1016;
 $xor50$i1017 = $and34$i1007 ^ $xor50$i1176;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i1017;
 $xor52$i1018 = $and35$i1008 ^ $xor52$i1177;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i1018;
 $xor54$i1019 = $and36$i1009 ^ $xor54$i1178;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i1019;
 $xor56$i1020 = $and37$i1010 ^ $xor56$i1179;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i1020;
 $arraydecay9$i971 = (((320 + (($pos*960)|0)|0)) + 320|0);
 $92 = HEAP32[$arraydecay9$i971>>2]|0;
 $arrayidx11$i1030 = (((320 + (($pos*960)|0)|0)) + 324|0);
 $93 = HEAP32[$arrayidx11$i1030>>2]|0;
 $arrayidx12$i1031 = (((320 + (($pos*960)|0)|0)) + 328|0);
 $94 = HEAP32[$arrayidx12$i1031>>2]|0;
 $arrayidx13$i1032 = (((320 + (($pos*960)|0)|0)) + 332|0);
 $95 = HEAP32[$arrayidx13$i1032>>2]|0;
 $arrayidx14$i1033 = (((320 + (($pos*960)|0)|0)) + 336|0);
 $96 = HEAP32[$arrayidx14$i1033>>2]|0;
 $arrayidx15$i1034 = (((320 + (($pos*960)|0)|0)) + 340|0);
 $97 = HEAP32[$arrayidx15$i1034>>2]|0;
 $arrayidx16$i1035 = (((320 + (($pos*960)|0)|0)) + 344|0);
 $98 = HEAP32[$arrayidx16$i1035>>2]|0;
 $arrayidx17$i1036 = (((320 + (($pos*960)|0)|0)) + 348|0);
 $99 = HEAP32[$arrayidx17$i1036>>2]|0;
 $arrayidx18$i1037 = (((320 + (($pos*960)|0)|0)) + 352|0);
 $100 = HEAP32[$arrayidx18$i1037>>2]|0;
 $arrayidx19$i1038 = (((320 + (($pos*960)|0)|0)) + 356|0);
 $101 = HEAP32[$arrayidx19$i1038>>2]|0;
 $xor$i1039 = $92 ^ $xor38$i1219;
 $xor20$i1040 = $93 ^ $xor40$i1220;
 $xor21$i1041 = $94 ^ $xor42$i1221;
 $xor22$i1042 = $95 ^ $xor44$i1222;
 $xor23$i1043 = $96 ^ $xor46$i1223;
 $xor24$i1044 = $97 ^ $xor48$i1224;
 $xor25$i1045 = $98 ^ $xor50$i1225;
 $xor26$i1046 = $99 ^ $xor52$i1226;
 $xor27$i1047 = $100 ^ $xor54$i1227;
 $xor28$i1048 = $101 ^ $xor56$i1228;
 $and$i1050 = $xor$i1039 & $sub$i$i947;
 $and29$i1051 = $xor20$i1040 & $sub$i$i947;
 $and30$i1052 = $xor21$i1041 & $sub$i$i947;
 $and31$i1053 = $xor22$i1042 & $sub$i$i947;
 $and32$i1054 = $xor23$i1043 & $sub$i$i947;
 $and33$i1055 = $xor24$i1044 & $sub$i$i947;
 $and34$i1056 = $xor25$i1045 & $sub$i$i947;
 $and35$i1057 = $xor26$i1046 & $sub$i$i947;
 $and36$i1058 = $xor27$i1047 & $sub$i$i947;
 $and37$i1059 = $xor28$i1048 & $sub$i$i947;
 $xor38$i1060 = $and$i1050 ^ $xor38$i1219;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i1060;
 $xor40$i1061 = $and29$i1051 ^ $xor40$i1220;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i1061;
 $xor42$i1062 = $and30$i1052 ^ $xor42$i1221;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i1062;
 $xor44$i1063 = $and31$i1053 ^ $xor44$i1222;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i1063;
 $xor46$i1064 = $and32$i1054 ^ $xor46$i1223;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i1064;
 $xor48$i1065 = $and33$i1055 ^ $xor48$i1224;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i1065;
 $xor50$i1066 = $and34$i1056 ^ $xor50$i1225;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i1066;
 $xor52$i1067 = $and35$i1057 ^ $xor52$i1226;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i1067;
 $xor54$i1068 = $and36$i1058 ^ $xor54$i1227;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i1068;
 $xor56$i1069 = $and37$i1059 ^ $xor56$i1228;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i1069;
 $conv3$i912 = $xor4$i1388 ^ 4;
 $sub$i913 = (($conv3$i912) + -1)|0;
 $arraydecay2$i758 = (((320 + (($pos*960)|0)|0)) + 360|0);
 $102 = HEAP32[$arraydecay2$i758>>2]|0;
 $arrayidx11$i$i769 = (((320 + (($pos*960)|0)|0)) + 364|0);
 $103 = HEAP32[$arrayidx11$i$i769>>2]|0;
 $arrayidx12$i$i770 = (((320 + (($pos*960)|0)|0)) + 368|0);
 $104 = HEAP32[$arrayidx12$i$i770>>2]|0;
 $arrayidx13$i$i771 = (((320 + (($pos*960)|0)|0)) + 372|0);
 $105 = HEAP32[$arrayidx13$i$i771>>2]|0;
 $arrayidx14$i$i772 = (((320 + (($pos*960)|0)|0)) + 376|0);
 $106 = HEAP32[$arrayidx14$i$i772>>2]|0;
 $arrayidx15$i$i773 = (((320 + (($pos*960)|0)|0)) + 380|0);
 $107 = HEAP32[$arrayidx15$i$i773>>2]|0;
 $arrayidx16$i$i774 = (((320 + (($pos*960)|0)|0)) + 384|0);
 $108 = HEAP32[$arrayidx16$i$i774>>2]|0;
 $arrayidx17$i$i775 = (((320 + (($pos*960)|0)|0)) + 388|0);
 $109 = HEAP32[$arrayidx17$i$i775>>2]|0;
 $arrayidx18$i$i776 = (((320 + (($pos*960)|0)|0)) + 392|0);
 $110 = HEAP32[$arrayidx18$i$i776>>2]|0;
 $arrayidx19$i$i777 = (((320 + (($pos*960)|0)|0)) + 396|0);
 $111 = HEAP32[$arrayidx19$i$i777>>2]|0;
 $xor$i$i778 = $102 ^ $xor38$i$i958;
 $xor20$i$i779 = $103 ^ $xor40$i$i959;
 $xor21$i$i780 = $104 ^ $xor42$i$i960;
 $xor22$i$i781 = $105 ^ $xor44$i$i961;
 $xor23$i$i782 = $106 ^ $xor46$i$i962;
 $xor24$i$i783 = $107 ^ $xor48$i$i963;
 $xor25$i$i784 = $108 ^ $xor50$i$i964;
 $xor26$i$i785 = $109 ^ $xor52$i$i965;
 $xor27$i$i786 = $110 ^ $xor54$i$i966;
 $xor28$i$i787 = $111 ^ $xor56$i$i967;
 $sub$i$i788 = $sub$i913 >> 31;
 $and$i$i789 = $xor$i$i778 & $sub$i$i788;
 $and29$i$i790 = $xor20$i$i779 & $sub$i$i788;
 $and30$i$i791 = $xor21$i$i780 & $sub$i$i788;
 $and31$i$i792 = $xor22$i$i781 & $sub$i$i788;
 $and32$i$i793 = $xor23$i$i782 & $sub$i$i788;
 $and33$i$i794 = $xor24$i$i783 & $sub$i$i788;
 $and34$i$i795 = $xor25$i$i784 & $sub$i$i788;
 $and35$i$i796 = $xor26$i$i785 & $sub$i$i788;
 $and36$i$i797 = $xor27$i$i786 & $sub$i$i788;
 $and37$i$i798 = $xor28$i$i787 & $sub$i$i788;
 $xor38$i$i799 = $and$i$i789 ^ $xor38$i$i958;
 HEAP32[$t>>2] = $xor38$i$i799;
 $xor40$i$i800 = $and29$i$i790 ^ $xor40$i$i959;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i800;
 $xor42$i$i801 = $and30$i$i791 ^ $xor42$i$i960;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i801;
 $xor44$i$i802 = $and31$i$i792 ^ $xor44$i$i961;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i802;
 $xor46$i$i803 = $and32$i$i793 ^ $xor46$i$i962;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i803;
 $xor48$i$i804 = $and33$i$i794 ^ $xor48$i$i963;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i804;
 $xor50$i$i805 = $and34$i$i795 ^ $xor50$i$i964;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i805;
 $xor52$i$i806 = $and35$i$i796 ^ $xor52$i$i965;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i806;
 $xor54$i$i807 = $and36$i$i797 ^ $xor54$i$i966;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i807;
 $xor56$i$i808 = $and37$i$i798 ^ $xor56$i$i967;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i808;
 $arraydecay5$i810 = (((320 + (($pos*960)|0)|0)) + 400|0);
 $112 = HEAP32[$arraydecay5$i810>>2]|0;
 $arrayidx11$i822 = (((320 + (($pos*960)|0)|0)) + 404|0);
 $113 = HEAP32[$arrayidx11$i822>>2]|0;
 $arrayidx12$i823 = (((320 + (($pos*960)|0)|0)) + 408|0);
 $114 = HEAP32[$arrayidx12$i823>>2]|0;
 $arrayidx13$i824 = (((320 + (($pos*960)|0)|0)) + 412|0);
 $115 = HEAP32[$arrayidx13$i824>>2]|0;
 $arrayidx14$i825 = (((320 + (($pos*960)|0)|0)) + 416|0);
 $116 = HEAP32[$arrayidx14$i825>>2]|0;
 $arrayidx15$i826 = (((320 + (($pos*960)|0)|0)) + 420|0);
 $117 = HEAP32[$arrayidx15$i826>>2]|0;
 $arrayidx16$i827 = (((320 + (($pos*960)|0)|0)) + 424|0);
 $118 = HEAP32[$arrayidx16$i827>>2]|0;
 $arrayidx17$i828 = (((320 + (($pos*960)|0)|0)) + 428|0);
 $119 = HEAP32[$arrayidx17$i828>>2]|0;
 $arrayidx18$i829 = (((320 + (($pos*960)|0)|0)) + 432|0);
 $120 = HEAP32[$arrayidx18$i829>>2]|0;
 $arrayidx19$i830 = (((320 + (($pos*960)|0)|0)) + 436|0);
 $121 = HEAP32[$arrayidx19$i830>>2]|0;
 $xor$i831 = $112 ^ $xor38$i1011;
 $xor20$i832 = $113 ^ $xor40$i1012;
 $xor21$i833 = $114 ^ $xor42$i1013;
 $xor22$i834 = $115 ^ $xor44$i1014;
 $xor23$i835 = $116 ^ $xor46$i1015;
 $xor24$i836 = $117 ^ $xor48$i1016;
 $xor25$i837 = $118 ^ $xor50$i1017;
 $xor26$i838 = $119 ^ $xor52$i1018;
 $xor27$i839 = $120 ^ $xor54$i1019;
 $xor28$i840 = $121 ^ $xor56$i1020;
 $and$i842 = $xor$i831 & $sub$i$i788;
 $and29$i843 = $xor20$i832 & $sub$i$i788;
 $and30$i844 = $xor21$i833 & $sub$i$i788;
 $and31$i845 = $xor22$i834 & $sub$i$i788;
 $and32$i846 = $xor23$i835 & $sub$i$i788;
 $and33$i847 = $xor24$i836 & $sub$i$i788;
 $and34$i848 = $xor25$i837 & $sub$i$i788;
 $and35$i849 = $xor26$i838 & $sub$i$i788;
 $and36$i850 = $xor27$i839 & $sub$i$i788;
 $and37$i851 = $xor28$i840 & $sub$i$i788;
 $xor38$i852 = $and$i842 ^ $xor38$i1011;
 HEAP32[$arraydecay1$i>>2] = $xor38$i852;
 $xor40$i853 = $and29$i843 ^ $xor40$i1012;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i853;
 $xor42$i854 = $and30$i844 ^ $xor42$i1013;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i854;
 $xor44$i855 = $and31$i845 ^ $xor44$i1014;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i855;
 $xor46$i856 = $and32$i846 ^ $xor46$i1015;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i856;
 $xor48$i857 = $and33$i847 ^ $xor48$i1016;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i857;
 $xor50$i858 = $and34$i848 ^ $xor50$i1017;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i858;
 $xor52$i859 = $and35$i849 ^ $xor52$i1018;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i859;
 $xor54$i860 = $and36$i850 ^ $xor54$i1019;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i860;
 $xor56$i861 = $and37$i851 ^ $xor56$i1020;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i861;
 $arraydecay9$i812 = (((320 + (($pos*960)|0)|0)) + 440|0);
 $122 = HEAP32[$arraydecay9$i812>>2]|0;
 $arrayidx11$i871 = (((320 + (($pos*960)|0)|0)) + 444|0);
 $123 = HEAP32[$arrayidx11$i871>>2]|0;
 $arrayidx12$i872 = (((320 + (($pos*960)|0)|0)) + 448|0);
 $124 = HEAP32[$arrayidx12$i872>>2]|0;
 $arrayidx13$i873 = (((320 + (($pos*960)|0)|0)) + 452|0);
 $125 = HEAP32[$arrayidx13$i873>>2]|0;
 $arrayidx14$i874 = (((320 + (($pos*960)|0)|0)) + 456|0);
 $126 = HEAP32[$arrayidx14$i874>>2]|0;
 $arrayidx15$i875 = (((320 + (($pos*960)|0)|0)) + 460|0);
 $127 = HEAP32[$arrayidx15$i875>>2]|0;
 $arrayidx16$i876 = (((320 + (($pos*960)|0)|0)) + 464|0);
 $128 = HEAP32[$arrayidx16$i876>>2]|0;
 $arrayidx17$i877 = (((320 + (($pos*960)|0)|0)) + 468|0);
 $129 = HEAP32[$arrayidx17$i877>>2]|0;
 $arrayidx18$i878 = (((320 + (($pos*960)|0)|0)) + 472|0);
 $130 = HEAP32[$arrayidx18$i878>>2]|0;
 $arrayidx19$i879 = (((320 + (($pos*960)|0)|0)) + 476|0);
 $131 = HEAP32[$arrayidx19$i879>>2]|0;
 $xor$i880 = $122 ^ $xor38$i1060;
 $xor20$i881 = $123 ^ $xor40$i1061;
 $xor21$i882 = $124 ^ $xor42$i1062;
 $xor22$i883 = $125 ^ $xor44$i1063;
 $xor23$i884 = $126 ^ $xor46$i1064;
 $xor24$i885 = $127 ^ $xor48$i1065;
 $xor25$i886 = $128 ^ $xor50$i1066;
 $xor26$i887 = $129 ^ $xor52$i1067;
 $xor27$i888 = $130 ^ $xor54$i1068;
 $xor28$i889 = $131 ^ $xor56$i1069;
 $and$i891 = $xor$i880 & $sub$i$i788;
 $and29$i892 = $xor20$i881 & $sub$i$i788;
 $and30$i893 = $xor21$i882 & $sub$i$i788;
 $and31$i894 = $xor22$i883 & $sub$i$i788;
 $and32$i895 = $xor23$i884 & $sub$i$i788;
 $and33$i896 = $xor24$i885 & $sub$i$i788;
 $and34$i897 = $xor25$i886 & $sub$i$i788;
 $and35$i898 = $xor26$i887 & $sub$i$i788;
 $and36$i899 = $xor27$i888 & $sub$i$i788;
 $and37$i900 = $xor28$i889 & $sub$i$i788;
 $xor38$i901 = $and$i891 ^ $xor38$i1060;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i901;
 $xor40$i902 = $and29$i892 ^ $xor40$i1061;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i902;
 $xor42$i903 = $and30$i893 ^ $xor42$i1062;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i903;
 $xor44$i904 = $and31$i894 ^ $xor44$i1063;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i904;
 $xor46$i905 = $and32$i895 ^ $xor46$i1064;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i905;
 $xor48$i906 = $and33$i896 ^ $xor48$i1065;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i906;
 $xor50$i907 = $and34$i897 ^ $xor50$i1066;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i907;
 $xor52$i908 = $and35$i898 ^ $xor52$i1067;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i908;
 $xor54$i909 = $and36$i899 ^ $xor54$i1068;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i909;
 $xor56$i910 = $and37$i900 ^ $xor56$i1069;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i910;
 $conv3$i753 = $xor4$i1388 ^ 5;
 $sub$i754 = (($conv3$i753) + -1)|0;
 $arraydecay2$i599 = (((320 + (($pos*960)|0)|0)) + 480|0);
 $132 = HEAP32[$arraydecay2$i599>>2]|0;
 $arrayidx11$i$i610 = (((320 + (($pos*960)|0)|0)) + 484|0);
 $133 = HEAP32[$arrayidx11$i$i610>>2]|0;
 $arrayidx12$i$i611 = (((320 + (($pos*960)|0)|0)) + 488|0);
 $134 = HEAP32[$arrayidx12$i$i611>>2]|0;
 $arrayidx13$i$i612 = (((320 + (($pos*960)|0)|0)) + 492|0);
 $135 = HEAP32[$arrayidx13$i$i612>>2]|0;
 $arrayidx14$i$i613 = (((320 + (($pos*960)|0)|0)) + 496|0);
 $136 = HEAP32[$arrayidx14$i$i613>>2]|0;
 $arrayidx15$i$i614 = (((320 + (($pos*960)|0)|0)) + 500|0);
 $137 = HEAP32[$arrayidx15$i$i614>>2]|0;
 $arrayidx16$i$i615 = (((320 + (($pos*960)|0)|0)) + 504|0);
 $138 = HEAP32[$arrayidx16$i$i615>>2]|0;
 $arrayidx17$i$i616 = (((320 + (($pos*960)|0)|0)) + 508|0);
 $139 = HEAP32[$arrayidx17$i$i616>>2]|0;
 $arrayidx18$i$i617 = (((320 + (($pos*960)|0)|0)) + 512|0);
 $140 = HEAP32[$arrayidx18$i$i617>>2]|0;
 $arrayidx19$i$i618 = (((320 + (($pos*960)|0)|0)) + 516|0);
 $141 = HEAP32[$arrayidx19$i$i618>>2]|0;
 $xor$i$i619 = $132 ^ $xor38$i$i799;
 $xor20$i$i620 = $133 ^ $xor40$i$i800;
 $xor21$i$i621 = $134 ^ $xor42$i$i801;
 $xor22$i$i622 = $135 ^ $xor44$i$i802;
 $xor23$i$i623 = $136 ^ $xor46$i$i803;
 $xor24$i$i624 = $137 ^ $xor48$i$i804;
 $xor25$i$i625 = $138 ^ $xor50$i$i805;
 $xor26$i$i626 = $139 ^ $xor52$i$i806;
 $xor27$i$i627 = $140 ^ $xor54$i$i807;
 $xor28$i$i628 = $141 ^ $xor56$i$i808;
 $sub$i$i629 = $sub$i754 >> 31;
 $and$i$i630 = $xor$i$i619 & $sub$i$i629;
 $and29$i$i631 = $xor20$i$i620 & $sub$i$i629;
 $and30$i$i632 = $xor21$i$i621 & $sub$i$i629;
 $and31$i$i633 = $xor22$i$i622 & $sub$i$i629;
 $and32$i$i634 = $xor23$i$i623 & $sub$i$i629;
 $and33$i$i635 = $xor24$i$i624 & $sub$i$i629;
 $and34$i$i636 = $xor25$i$i625 & $sub$i$i629;
 $and35$i$i637 = $xor26$i$i626 & $sub$i$i629;
 $and36$i$i638 = $xor27$i$i627 & $sub$i$i629;
 $and37$i$i639 = $xor28$i$i628 & $sub$i$i629;
 $xor38$i$i640 = $and$i$i630 ^ $xor38$i$i799;
 HEAP32[$t>>2] = $xor38$i$i640;
 $xor40$i$i641 = $and29$i$i631 ^ $xor40$i$i800;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i641;
 $xor42$i$i642 = $and30$i$i632 ^ $xor42$i$i801;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i642;
 $xor44$i$i643 = $and31$i$i633 ^ $xor44$i$i802;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i643;
 $xor46$i$i644 = $and32$i$i634 ^ $xor46$i$i803;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i644;
 $xor48$i$i645 = $and33$i$i635 ^ $xor48$i$i804;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i645;
 $xor50$i$i646 = $and34$i$i636 ^ $xor50$i$i805;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i646;
 $xor52$i$i647 = $and35$i$i637 ^ $xor52$i$i806;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i647;
 $xor54$i$i648 = $and36$i$i638 ^ $xor54$i$i807;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i648;
 $xor56$i$i649 = $and37$i$i639 ^ $xor56$i$i808;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i649;
 $arraydecay5$i651 = (((320 + (($pos*960)|0)|0)) + 520|0);
 $142 = HEAP32[$arraydecay5$i651>>2]|0;
 $arrayidx11$i663 = (((320 + (($pos*960)|0)|0)) + 524|0);
 $143 = HEAP32[$arrayidx11$i663>>2]|0;
 $arrayidx12$i664 = (((320 + (($pos*960)|0)|0)) + 528|0);
 $144 = HEAP32[$arrayidx12$i664>>2]|0;
 $arrayidx13$i665 = (((320 + (($pos*960)|0)|0)) + 532|0);
 $145 = HEAP32[$arrayidx13$i665>>2]|0;
 $arrayidx14$i666 = (((320 + (($pos*960)|0)|0)) + 536|0);
 $146 = HEAP32[$arrayidx14$i666>>2]|0;
 $arrayidx15$i667 = (((320 + (($pos*960)|0)|0)) + 540|0);
 $147 = HEAP32[$arrayidx15$i667>>2]|0;
 $arrayidx16$i668 = (((320 + (($pos*960)|0)|0)) + 544|0);
 $148 = HEAP32[$arrayidx16$i668>>2]|0;
 $arrayidx17$i669 = (((320 + (($pos*960)|0)|0)) + 548|0);
 $149 = HEAP32[$arrayidx17$i669>>2]|0;
 $arrayidx18$i670 = (((320 + (($pos*960)|0)|0)) + 552|0);
 $150 = HEAP32[$arrayidx18$i670>>2]|0;
 $arrayidx19$i671 = (((320 + (($pos*960)|0)|0)) + 556|0);
 $151 = HEAP32[$arrayidx19$i671>>2]|0;
 $xor$i672 = $142 ^ $xor38$i852;
 $xor20$i673 = $143 ^ $xor40$i853;
 $xor21$i674 = $144 ^ $xor42$i854;
 $xor22$i675 = $145 ^ $xor44$i855;
 $xor23$i676 = $146 ^ $xor46$i856;
 $xor24$i677 = $147 ^ $xor48$i857;
 $xor25$i678 = $148 ^ $xor50$i858;
 $xor26$i679 = $149 ^ $xor52$i859;
 $xor27$i680 = $150 ^ $xor54$i860;
 $xor28$i681 = $151 ^ $xor56$i861;
 $and$i683 = $xor$i672 & $sub$i$i629;
 $and29$i684 = $xor20$i673 & $sub$i$i629;
 $and30$i685 = $xor21$i674 & $sub$i$i629;
 $and31$i686 = $xor22$i675 & $sub$i$i629;
 $and32$i687 = $xor23$i676 & $sub$i$i629;
 $and33$i688 = $xor24$i677 & $sub$i$i629;
 $and34$i689 = $xor25$i678 & $sub$i$i629;
 $and35$i690 = $xor26$i679 & $sub$i$i629;
 $and36$i691 = $xor27$i680 & $sub$i$i629;
 $and37$i692 = $xor28$i681 & $sub$i$i629;
 $xor38$i693 = $and$i683 ^ $xor38$i852;
 HEAP32[$arraydecay1$i>>2] = $xor38$i693;
 $xor40$i694 = $and29$i684 ^ $xor40$i853;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i694;
 $xor42$i695 = $and30$i685 ^ $xor42$i854;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i695;
 $xor44$i696 = $and31$i686 ^ $xor44$i855;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i696;
 $xor46$i697 = $and32$i687 ^ $xor46$i856;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i697;
 $xor48$i698 = $and33$i688 ^ $xor48$i857;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i698;
 $xor50$i699 = $and34$i689 ^ $xor50$i858;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i699;
 $xor52$i700 = $and35$i690 ^ $xor52$i859;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i700;
 $xor54$i701 = $and36$i691 ^ $xor54$i860;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i701;
 $xor56$i702 = $and37$i692 ^ $xor56$i861;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i702;
 $arraydecay9$i653 = (((320 + (($pos*960)|0)|0)) + 560|0);
 $152 = HEAP32[$arraydecay9$i653>>2]|0;
 $arrayidx11$i712 = (((320 + (($pos*960)|0)|0)) + 564|0);
 $153 = HEAP32[$arrayidx11$i712>>2]|0;
 $arrayidx12$i713 = (((320 + (($pos*960)|0)|0)) + 568|0);
 $154 = HEAP32[$arrayidx12$i713>>2]|0;
 $arrayidx13$i714 = (((320 + (($pos*960)|0)|0)) + 572|0);
 $155 = HEAP32[$arrayidx13$i714>>2]|0;
 $arrayidx14$i715 = (((320 + (($pos*960)|0)|0)) + 576|0);
 $156 = HEAP32[$arrayidx14$i715>>2]|0;
 $arrayidx15$i716 = (((320 + (($pos*960)|0)|0)) + 580|0);
 $157 = HEAP32[$arrayidx15$i716>>2]|0;
 $arrayidx16$i717 = (((320 + (($pos*960)|0)|0)) + 584|0);
 $158 = HEAP32[$arrayidx16$i717>>2]|0;
 $arrayidx17$i718 = (((320 + (($pos*960)|0)|0)) + 588|0);
 $159 = HEAP32[$arrayidx17$i718>>2]|0;
 $arrayidx18$i719 = (((320 + (($pos*960)|0)|0)) + 592|0);
 $160 = HEAP32[$arrayidx18$i719>>2]|0;
 $arrayidx19$i720 = (((320 + (($pos*960)|0)|0)) + 596|0);
 $161 = HEAP32[$arrayidx19$i720>>2]|0;
 $xor$i721 = $152 ^ $xor38$i901;
 $xor20$i722 = $153 ^ $xor40$i902;
 $xor21$i723 = $154 ^ $xor42$i903;
 $xor22$i724 = $155 ^ $xor44$i904;
 $xor23$i725 = $156 ^ $xor46$i905;
 $xor24$i726 = $157 ^ $xor48$i906;
 $xor25$i727 = $158 ^ $xor50$i907;
 $xor26$i728 = $159 ^ $xor52$i908;
 $xor27$i729 = $160 ^ $xor54$i909;
 $xor28$i730 = $161 ^ $xor56$i910;
 $and$i732 = $xor$i721 & $sub$i$i629;
 $and29$i733 = $xor20$i722 & $sub$i$i629;
 $and30$i734 = $xor21$i723 & $sub$i$i629;
 $and31$i735 = $xor22$i724 & $sub$i$i629;
 $and32$i736 = $xor23$i725 & $sub$i$i629;
 $and33$i737 = $xor24$i726 & $sub$i$i629;
 $and34$i738 = $xor25$i727 & $sub$i$i629;
 $and35$i739 = $xor26$i728 & $sub$i$i629;
 $and36$i740 = $xor27$i729 & $sub$i$i629;
 $and37$i741 = $xor28$i730 & $sub$i$i629;
 $xor38$i742 = $and$i732 ^ $xor38$i901;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i742;
 $xor40$i743 = $and29$i733 ^ $xor40$i902;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i743;
 $xor42$i744 = $and30$i734 ^ $xor42$i903;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i744;
 $xor44$i745 = $and31$i735 ^ $xor44$i904;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i745;
 $xor46$i746 = $and32$i736 ^ $xor46$i905;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i746;
 $xor48$i747 = $and33$i737 ^ $xor48$i906;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i747;
 $xor50$i748 = $and34$i738 ^ $xor50$i907;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i748;
 $xor52$i749 = $and35$i739 ^ $xor52$i908;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i749;
 $xor54$i750 = $and36$i740 ^ $xor54$i909;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i750;
 $xor56$i751 = $and37$i741 ^ $xor56$i910;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i751;
 $conv3$i594 = $xor4$i1388 ^ 6;
 $sub$i595 = (($conv3$i594) + -1)|0;
 $arraydecay2$i440 = (((320 + (($pos*960)|0)|0)) + 600|0);
 $162 = HEAP32[$arraydecay2$i440>>2]|0;
 $arrayidx11$i$i451 = (((320 + (($pos*960)|0)|0)) + 604|0);
 $163 = HEAP32[$arrayidx11$i$i451>>2]|0;
 $arrayidx12$i$i452 = (((320 + (($pos*960)|0)|0)) + 608|0);
 $164 = HEAP32[$arrayidx12$i$i452>>2]|0;
 $arrayidx13$i$i453 = (((320 + (($pos*960)|0)|0)) + 612|0);
 $165 = HEAP32[$arrayidx13$i$i453>>2]|0;
 $arrayidx14$i$i454 = (((320 + (($pos*960)|0)|0)) + 616|0);
 $166 = HEAP32[$arrayidx14$i$i454>>2]|0;
 $arrayidx15$i$i455 = (((320 + (($pos*960)|0)|0)) + 620|0);
 $167 = HEAP32[$arrayidx15$i$i455>>2]|0;
 $arrayidx16$i$i456 = (((320 + (($pos*960)|0)|0)) + 624|0);
 $168 = HEAP32[$arrayidx16$i$i456>>2]|0;
 $arrayidx17$i$i457 = (((320 + (($pos*960)|0)|0)) + 628|0);
 $169 = HEAP32[$arrayidx17$i$i457>>2]|0;
 $arrayidx18$i$i458 = (((320 + (($pos*960)|0)|0)) + 632|0);
 $170 = HEAP32[$arrayidx18$i$i458>>2]|0;
 $arrayidx19$i$i459 = (((320 + (($pos*960)|0)|0)) + 636|0);
 $171 = HEAP32[$arrayidx19$i$i459>>2]|0;
 $xor$i$i460 = $162 ^ $xor38$i$i640;
 $xor20$i$i461 = $163 ^ $xor40$i$i641;
 $xor21$i$i462 = $164 ^ $xor42$i$i642;
 $xor22$i$i463 = $165 ^ $xor44$i$i643;
 $xor23$i$i464 = $166 ^ $xor46$i$i644;
 $xor24$i$i465 = $167 ^ $xor48$i$i645;
 $xor25$i$i466 = $168 ^ $xor50$i$i646;
 $xor26$i$i467 = $169 ^ $xor52$i$i647;
 $xor27$i$i468 = $170 ^ $xor54$i$i648;
 $xor28$i$i469 = $171 ^ $xor56$i$i649;
 $sub$i$i470 = $sub$i595 >> 31;
 $and$i$i471 = $xor$i$i460 & $sub$i$i470;
 $and29$i$i472 = $xor20$i$i461 & $sub$i$i470;
 $and30$i$i473 = $xor21$i$i462 & $sub$i$i470;
 $and31$i$i474 = $xor22$i$i463 & $sub$i$i470;
 $and32$i$i475 = $xor23$i$i464 & $sub$i$i470;
 $and33$i$i476 = $xor24$i$i465 & $sub$i$i470;
 $and34$i$i477 = $xor25$i$i466 & $sub$i$i470;
 $and35$i$i478 = $xor26$i$i467 & $sub$i$i470;
 $and36$i$i479 = $xor27$i$i468 & $sub$i$i470;
 $and37$i$i480 = $xor28$i$i469 & $sub$i$i470;
 $xor38$i$i481 = $and$i$i471 ^ $xor38$i$i640;
 HEAP32[$t>>2] = $xor38$i$i481;
 $xor40$i$i482 = $and29$i$i472 ^ $xor40$i$i641;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i482;
 $xor42$i$i483 = $and30$i$i473 ^ $xor42$i$i642;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i483;
 $xor44$i$i484 = $and31$i$i474 ^ $xor44$i$i643;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i484;
 $xor46$i$i485 = $and32$i$i475 ^ $xor46$i$i644;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i485;
 $xor48$i$i486 = $and33$i$i476 ^ $xor48$i$i645;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i486;
 $xor50$i$i487 = $and34$i$i477 ^ $xor50$i$i646;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i487;
 $xor52$i$i488 = $and35$i$i478 ^ $xor52$i$i647;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i488;
 $xor54$i$i489 = $and36$i$i479 ^ $xor54$i$i648;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i489;
 $xor56$i$i490 = $and37$i$i480 ^ $xor56$i$i649;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i490;
 $arraydecay5$i492 = (((320 + (($pos*960)|0)|0)) + 640|0);
 $172 = HEAP32[$arraydecay5$i492>>2]|0;
 $arrayidx11$i504 = (((320 + (($pos*960)|0)|0)) + 644|0);
 $173 = HEAP32[$arrayidx11$i504>>2]|0;
 $arrayidx12$i505 = (((320 + (($pos*960)|0)|0)) + 648|0);
 $174 = HEAP32[$arrayidx12$i505>>2]|0;
 $arrayidx13$i506 = (((320 + (($pos*960)|0)|0)) + 652|0);
 $175 = HEAP32[$arrayidx13$i506>>2]|0;
 $arrayidx14$i507 = (((320 + (($pos*960)|0)|0)) + 656|0);
 $176 = HEAP32[$arrayidx14$i507>>2]|0;
 $arrayidx15$i508 = (((320 + (($pos*960)|0)|0)) + 660|0);
 $177 = HEAP32[$arrayidx15$i508>>2]|0;
 $arrayidx16$i509 = (((320 + (($pos*960)|0)|0)) + 664|0);
 $178 = HEAP32[$arrayidx16$i509>>2]|0;
 $arrayidx17$i510 = (((320 + (($pos*960)|0)|0)) + 668|0);
 $179 = HEAP32[$arrayidx17$i510>>2]|0;
 $arrayidx18$i511 = (((320 + (($pos*960)|0)|0)) + 672|0);
 $180 = HEAP32[$arrayidx18$i511>>2]|0;
 $arrayidx19$i512 = (((320 + (($pos*960)|0)|0)) + 676|0);
 $181 = HEAP32[$arrayidx19$i512>>2]|0;
 $xor$i513 = $172 ^ $xor38$i693;
 $xor20$i514 = $173 ^ $xor40$i694;
 $xor21$i515 = $174 ^ $xor42$i695;
 $xor22$i516 = $175 ^ $xor44$i696;
 $xor23$i517 = $176 ^ $xor46$i697;
 $xor24$i518 = $177 ^ $xor48$i698;
 $xor25$i519 = $178 ^ $xor50$i699;
 $xor26$i520 = $179 ^ $xor52$i700;
 $xor27$i521 = $180 ^ $xor54$i701;
 $xor28$i522 = $181 ^ $xor56$i702;
 $and$i524 = $xor$i513 & $sub$i$i470;
 $and29$i525 = $xor20$i514 & $sub$i$i470;
 $and30$i526 = $xor21$i515 & $sub$i$i470;
 $and31$i527 = $xor22$i516 & $sub$i$i470;
 $and32$i528 = $xor23$i517 & $sub$i$i470;
 $and33$i529 = $xor24$i518 & $sub$i$i470;
 $and34$i530 = $xor25$i519 & $sub$i$i470;
 $and35$i531 = $xor26$i520 & $sub$i$i470;
 $and36$i532 = $xor27$i521 & $sub$i$i470;
 $and37$i533 = $xor28$i522 & $sub$i$i470;
 $xor38$i534 = $and$i524 ^ $xor38$i693;
 HEAP32[$arraydecay1$i>>2] = $xor38$i534;
 $xor40$i535 = $and29$i525 ^ $xor40$i694;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i535;
 $xor42$i536 = $and30$i526 ^ $xor42$i695;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i536;
 $xor44$i537 = $and31$i527 ^ $xor44$i696;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i537;
 $xor46$i538 = $and32$i528 ^ $xor46$i697;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i538;
 $xor48$i539 = $and33$i529 ^ $xor48$i698;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i539;
 $xor50$i540 = $and34$i530 ^ $xor50$i699;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i540;
 $xor52$i541 = $and35$i531 ^ $xor52$i700;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i541;
 $xor54$i542 = $and36$i532 ^ $xor54$i701;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i542;
 $xor56$i543 = $and37$i533 ^ $xor56$i702;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i543;
 $arraydecay9$i494 = (((320 + (($pos*960)|0)|0)) + 680|0);
 $182 = HEAP32[$arraydecay9$i494>>2]|0;
 $arrayidx11$i553 = (((320 + (($pos*960)|0)|0)) + 684|0);
 $183 = HEAP32[$arrayidx11$i553>>2]|0;
 $arrayidx12$i554 = (((320 + (($pos*960)|0)|0)) + 688|0);
 $184 = HEAP32[$arrayidx12$i554>>2]|0;
 $arrayidx13$i555 = (((320 + (($pos*960)|0)|0)) + 692|0);
 $185 = HEAP32[$arrayidx13$i555>>2]|0;
 $arrayidx14$i556 = (((320 + (($pos*960)|0)|0)) + 696|0);
 $186 = HEAP32[$arrayidx14$i556>>2]|0;
 $arrayidx15$i557 = (((320 + (($pos*960)|0)|0)) + 700|0);
 $187 = HEAP32[$arrayidx15$i557>>2]|0;
 $arrayidx16$i558 = (((320 + (($pos*960)|0)|0)) + 704|0);
 $188 = HEAP32[$arrayidx16$i558>>2]|0;
 $arrayidx17$i559 = (((320 + (($pos*960)|0)|0)) + 708|0);
 $189 = HEAP32[$arrayidx17$i559>>2]|0;
 $arrayidx18$i560 = (((320 + (($pos*960)|0)|0)) + 712|0);
 $190 = HEAP32[$arrayidx18$i560>>2]|0;
 $arrayidx19$i561 = (((320 + (($pos*960)|0)|0)) + 716|0);
 $191 = HEAP32[$arrayidx19$i561>>2]|0;
 $xor$i562 = $182 ^ $xor38$i742;
 $xor20$i563 = $183 ^ $xor40$i743;
 $xor21$i564 = $184 ^ $xor42$i744;
 $xor22$i565 = $185 ^ $xor44$i745;
 $xor23$i566 = $186 ^ $xor46$i746;
 $xor24$i567 = $187 ^ $xor48$i747;
 $xor25$i568 = $188 ^ $xor50$i748;
 $xor26$i569 = $189 ^ $xor52$i749;
 $xor27$i570 = $190 ^ $xor54$i750;
 $xor28$i571 = $191 ^ $xor56$i751;
 $and$i573 = $xor$i562 & $sub$i$i470;
 $and29$i574 = $xor20$i563 & $sub$i$i470;
 $and30$i575 = $xor21$i564 & $sub$i$i470;
 $and31$i576 = $xor22$i565 & $sub$i$i470;
 $and32$i577 = $xor23$i566 & $sub$i$i470;
 $and33$i578 = $xor24$i567 & $sub$i$i470;
 $and34$i579 = $xor25$i568 & $sub$i$i470;
 $and35$i580 = $xor26$i569 & $sub$i$i470;
 $and36$i581 = $xor27$i570 & $sub$i$i470;
 $and37$i582 = $xor28$i571 & $sub$i$i470;
 $xor38$i583 = $and$i573 ^ $xor38$i742;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i583;
 $xor40$i584 = $and29$i574 ^ $xor40$i743;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i584;
 $xor42$i585 = $and30$i575 ^ $xor42$i744;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i585;
 $xor44$i586 = $and31$i576 ^ $xor44$i745;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i586;
 $xor46$i587 = $and32$i577 ^ $xor46$i746;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i587;
 $xor48$i588 = $and33$i578 ^ $xor48$i747;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i588;
 $xor50$i589 = $and34$i579 ^ $xor50$i748;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i589;
 $xor52$i590 = $and35$i580 ^ $xor52$i749;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i590;
 $xor54$i591 = $and36$i581 ^ $xor54$i750;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i591;
 $xor56$i592 = $and37$i582 ^ $xor56$i751;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i592;
 $conv3$i435 = $xor4$i1388 ^ 7;
 $sub$i436 = (($conv3$i435) + -1)|0;
 $arraydecay2$i281 = (((320 + (($pos*960)|0)|0)) + 720|0);
 $192 = HEAP32[$arraydecay2$i281>>2]|0;
 $arrayidx11$i$i292 = (((320 + (($pos*960)|0)|0)) + 724|0);
 $193 = HEAP32[$arrayidx11$i$i292>>2]|0;
 $arrayidx12$i$i293 = (((320 + (($pos*960)|0)|0)) + 728|0);
 $194 = HEAP32[$arrayidx12$i$i293>>2]|0;
 $arrayidx13$i$i294 = (((320 + (($pos*960)|0)|0)) + 732|0);
 $195 = HEAP32[$arrayidx13$i$i294>>2]|0;
 $arrayidx14$i$i295 = (((320 + (($pos*960)|0)|0)) + 736|0);
 $196 = HEAP32[$arrayidx14$i$i295>>2]|0;
 $arrayidx15$i$i296 = (((320 + (($pos*960)|0)|0)) + 740|0);
 $197 = HEAP32[$arrayidx15$i$i296>>2]|0;
 $arrayidx16$i$i297 = (((320 + (($pos*960)|0)|0)) + 744|0);
 $198 = HEAP32[$arrayidx16$i$i297>>2]|0;
 $arrayidx17$i$i298 = (((320 + (($pos*960)|0)|0)) + 748|0);
 $199 = HEAP32[$arrayidx17$i$i298>>2]|0;
 $arrayidx18$i$i299 = (((320 + (($pos*960)|0)|0)) + 752|0);
 $200 = HEAP32[$arrayidx18$i$i299>>2]|0;
 $arrayidx19$i$i300 = (((320 + (($pos*960)|0)|0)) + 756|0);
 $201 = HEAP32[$arrayidx19$i$i300>>2]|0;
 $xor$i$i301 = $192 ^ $xor38$i$i481;
 $xor20$i$i302 = $193 ^ $xor40$i$i482;
 $xor21$i$i303 = $194 ^ $xor42$i$i483;
 $xor22$i$i304 = $195 ^ $xor44$i$i484;
 $xor23$i$i305 = $196 ^ $xor46$i$i485;
 $xor24$i$i306 = $197 ^ $xor48$i$i486;
 $xor25$i$i307 = $198 ^ $xor50$i$i487;
 $xor26$i$i308 = $199 ^ $xor52$i$i488;
 $xor27$i$i309 = $200 ^ $xor54$i$i489;
 $xor28$i$i310 = $201 ^ $xor56$i$i490;
 $sub$i$i311 = $sub$i436 >> 31;
 $and$i$i312 = $xor$i$i301 & $sub$i$i311;
 $and29$i$i313 = $xor20$i$i302 & $sub$i$i311;
 $and30$i$i314 = $xor21$i$i303 & $sub$i$i311;
 $and31$i$i315 = $xor22$i$i304 & $sub$i$i311;
 $and32$i$i316 = $xor23$i$i305 & $sub$i$i311;
 $and33$i$i317 = $xor24$i$i306 & $sub$i$i311;
 $and34$i$i318 = $xor25$i$i307 & $sub$i$i311;
 $and35$i$i319 = $xor26$i$i308 & $sub$i$i311;
 $and36$i$i320 = $xor27$i$i309 & $sub$i$i311;
 $and37$i$i321 = $xor28$i$i310 & $sub$i$i311;
 $xor38$i$i322 = $and$i$i312 ^ $xor38$i$i481;
 HEAP32[$t>>2] = $xor38$i$i322;
 $xor40$i$i323 = $and29$i$i313 ^ $xor40$i$i482;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i323;
 $xor42$i$i324 = $and30$i$i314 ^ $xor42$i$i483;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i324;
 $xor44$i$i325 = $and31$i$i315 ^ $xor44$i$i484;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i325;
 $xor46$i$i326 = $and32$i$i316 ^ $xor46$i$i485;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i326;
 $xor48$i$i327 = $and33$i$i317 ^ $xor48$i$i486;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i327;
 $xor50$i$i328 = $and34$i$i318 ^ $xor50$i$i487;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i328;
 $xor52$i$i329 = $and35$i$i319 ^ $xor52$i$i488;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i329;
 $xor54$i$i330 = $and36$i$i320 ^ $xor54$i$i489;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i330;
 $xor56$i$i331 = $and37$i$i321 ^ $xor56$i$i490;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i331;
 $arraydecay5$i333 = (((320 + (($pos*960)|0)|0)) + 760|0);
 $202 = HEAP32[$arraydecay5$i333>>2]|0;
 $arrayidx11$i345 = (((320 + (($pos*960)|0)|0)) + 764|0);
 $203 = HEAP32[$arrayidx11$i345>>2]|0;
 $arrayidx12$i346 = (((320 + (($pos*960)|0)|0)) + 768|0);
 $204 = HEAP32[$arrayidx12$i346>>2]|0;
 $arrayidx13$i347 = (((320 + (($pos*960)|0)|0)) + 772|0);
 $205 = HEAP32[$arrayidx13$i347>>2]|0;
 $arrayidx14$i348 = (((320 + (($pos*960)|0)|0)) + 776|0);
 $206 = HEAP32[$arrayidx14$i348>>2]|0;
 $arrayidx15$i349 = (((320 + (($pos*960)|0)|0)) + 780|0);
 $207 = HEAP32[$arrayidx15$i349>>2]|0;
 $arrayidx16$i350 = (((320 + (($pos*960)|0)|0)) + 784|0);
 $208 = HEAP32[$arrayidx16$i350>>2]|0;
 $arrayidx17$i351 = (((320 + (($pos*960)|0)|0)) + 788|0);
 $209 = HEAP32[$arrayidx17$i351>>2]|0;
 $arrayidx18$i352 = (((320 + (($pos*960)|0)|0)) + 792|0);
 $210 = HEAP32[$arrayidx18$i352>>2]|0;
 $arrayidx19$i353 = (((320 + (($pos*960)|0)|0)) + 796|0);
 $211 = HEAP32[$arrayidx19$i353>>2]|0;
 $xor$i354 = $202 ^ $xor38$i534;
 $xor20$i355 = $203 ^ $xor40$i535;
 $xor21$i356 = $204 ^ $xor42$i536;
 $xor22$i357 = $205 ^ $xor44$i537;
 $xor23$i358 = $206 ^ $xor46$i538;
 $xor24$i359 = $207 ^ $xor48$i539;
 $xor25$i360 = $208 ^ $xor50$i540;
 $xor26$i361 = $209 ^ $xor52$i541;
 $xor27$i362 = $210 ^ $xor54$i542;
 $xor28$i363 = $211 ^ $xor56$i543;
 $and$i365 = $xor$i354 & $sub$i$i311;
 $and29$i366 = $xor20$i355 & $sub$i$i311;
 $and30$i367 = $xor21$i356 & $sub$i$i311;
 $and31$i368 = $xor22$i357 & $sub$i$i311;
 $and32$i369 = $xor23$i358 & $sub$i$i311;
 $and33$i370 = $xor24$i359 & $sub$i$i311;
 $and34$i371 = $xor25$i360 & $sub$i$i311;
 $and35$i372 = $xor26$i361 & $sub$i$i311;
 $and36$i373 = $xor27$i362 & $sub$i$i311;
 $and37$i374 = $xor28$i363 & $sub$i$i311;
 $xor38$i375 = $and$i365 ^ $xor38$i534;
 HEAP32[$arraydecay1$i>>2] = $xor38$i375;
 $xor40$i376 = $and29$i366 ^ $xor40$i535;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i376;
 $xor42$i377 = $and30$i367 ^ $xor42$i536;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i377;
 $xor44$i378 = $and31$i368 ^ $xor44$i537;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i378;
 $xor46$i379 = $and32$i369 ^ $xor46$i538;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i379;
 $xor48$i380 = $and33$i370 ^ $xor48$i539;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i380;
 $xor50$i381 = $and34$i371 ^ $xor50$i540;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i381;
 $xor52$i382 = $and35$i372 ^ $xor52$i541;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i382;
 $xor54$i383 = $and36$i373 ^ $xor54$i542;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i383;
 $xor56$i384 = $and37$i374 ^ $xor56$i543;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i384;
 $arraydecay9$i335 = (((320 + (($pos*960)|0)|0)) + 800|0);
 $212 = HEAP32[$arraydecay9$i335>>2]|0;
 $arrayidx11$i394 = (((320 + (($pos*960)|0)|0)) + 804|0);
 $213 = HEAP32[$arrayidx11$i394>>2]|0;
 $arrayidx12$i395 = (((320 + (($pos*960)|0)|0)) + 808|0);
 $214 = HEAP32[$arrayidx12$i395>>2]|0;
 $arrayidx13$i396 = (((320 + (($pos*960)|0)|0)) + 812|0);
 $215 = HEAP32[$arrayidx13$i396>>2]|0;
 $arrayidx14$i397 = (((320 + (($pos*960)|0)|0)) + 816|0);
 $216 = HEAP32[$arrayidx14$i397>>2]|0;
 $arrayidx15$i398 = (((320 + (($pos*960)|0)|0)) + 820|0);
 $217 = HEAP32[$arrayidx15$i398>>2]|0;
 $arrayidx16$i399 = (((320 + (($pos*960)|0)|0)) + 824|0);
 $218 = HEAP32[$arrayidx16$i399>>2]|0;
 $arrayidx17$i400 = (((320 + (($pos*960)|0)|0)) + 828|0);
 $219 = HEAP32[$arrayidx17$i400>>2]|0;
 $arrayidx18$i401 = (((320 + (($pos*960)|0)|0)) + 832|0);
 $220 = HEAP32[$arrayidx18$i401>>2]|0;
 $arrayidx19$i402 = (((320 + (($pos*960)|0)|0)) + 836|0);
 $221 = HEAP32[$arrayidx19$i402>>2]|0;
 $xor$i403 = $212 ^ $xor38$i583;
 $xor20$i404 = $213 ^ $xor40$i584;
 $xor21$i405 = $214 ^ $xor42$i585;
 $xor22$i406 = $215 ^ $xor44$i586;
 $xor23$i407 = $216 ^ $xor46$i587;
 $xor24$i408 = $217 ^ $xor48$i588;
 $xor25$i409 = $218 ^ $xor50$i589;
 $xor26$i410 = $219 ^ $xor52$i590;
 $xor27$i411 = $220 ^ $xor54$i591;
 $xor28$i412 = $221 ^ $xor56$i592;
 $and$i414 = $xor$i403 & $sub$i$i311;
 $and29$i415 = $xor20$i404 & $sub$i$i311;
 $and30$i416 = $xor21$i405 & $sub$i$i311;
 $and31$i417 = $xor22$i406 & $sub$i$i311;
 $and32$i418 = $xor23$i407 & $sub$i$i311;
 $and33$i419 = $xor24$i408 & $sub$i$i311;
 $and34$i420 = $xor25$i409 & $sub$i$i311;
 $and35$i421 = $xor26$i410 & $sub$i$i311;
 $and36$i422 = $xor27$i411 & $sub$i$i311;
 $and37$i423 = $xor28$i412 & $sub$i$i311;
 $xor38$i424 = $and$i414 ^ $xor38$i583;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i424;
 $xor40$i425 = $and29$i415 ^ $xor40$i584;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i425;
 $xor42$i426 = $and30$i416 ^ $xor42$i585;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i426;
 $xor44$i427 = $and31$i417 ^ $xor44$i586;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i427;
 $xor46$i428 = $and32$i418 ^ $xor46$i587;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i428;
 $xor48$i429 = $and33$i419 ^ $xor48$i588;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i429;
 $xor50$i430 = $and34$i420 ^ $xor50$i589;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i430;
 $xor52$i431 = $and35$i421 ^ $xor52$i590;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i431;
 $xor54$i432 = $and36$i422 ^ $xor54$i591;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i432;
 $xor56$i433 = $and37$i423 ^ $xor56$i592;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i433;
 $conv3$i = $xor4$i1388 ^ 8;
 $sub$i279 = (($conv3$i) + -1)|0;
 $arraydecay2$i126 = (((320 + (($pos*960)|0)|0)) + 840|0);
 $222 = HEAP32[$arraydecay2$i126>>2]|0;
 $arrayidx11$i$i137 = (((320 + (($pos*960)|0)|0)) + 844|0);
 $223 = HEAP32[$arrayidx11$i$i137>>2]|0;
 $arrayidx12$i$i138 = (((320 + (($pos*960)|0)|0)) + 848|0);
 $224 = HEAP32[$arrayidx12$i$i138>>2]|0;
 $arrayidx13$i$i139 = (((320 + (($pos*960)|0)|0)) + 852|0);
 $225 = HEAP32[$arrayidx13$i$i139>>2]|0;
 $arrayidx14$i$i140 = (((320 + (($pos*960)|0)|0)) + 856|0);
 $226 = HEAP32[$arrayidx14$i$i140>>2]|0;
 $arrayidx15$i$i141 = (((320 + (($pos*960)|0)|0)) + 860|0);
 $227 = HEAP32[$arrayidx15$i$i141>>2]|0;
 $arrayidx16$i$i142 = (((320 + (($pos*960)|0)|0)) + 864|0);
 $228 = HEAP32[$arrayidx16$i$i142>>2]|0;
 $arrayidx17$i$i143 = (((320 + (($pos*960)|0)|0)) + 868|0);
 $229 = HEAP32[$arrayidx17$i$i143>>2]|0;
 $arrayidx18$i$i144 = (((320 + (($pos*960)|0)|0)) + 872|0);
 $230 = HEAP32[$arrayidx18$i$i144>>2]|0;
 $arrayidx19$i$i145 = (((320 + (($pos*960)|0)|0)) + 876|0);
 $231 = HEAP32[$arrayidx19$i$i145>>2]|0;
 $xor$i$i146 = $222 ^ $xor38$i$i322;
 $xor20$i$i147 = $223 ^ $xor40$i$i323;
 $xor21$i$i148 = $224 ^ $xor42$i$i324;
 $xor22$i$i149 = $225 ^ $xor44$i$i325;
 $xor23$i$i150 = $226 ^ $xor46$i$i326;
 $xor24$i$i151 = $227 ^ $xor48$i$i327;
 $xor25$i$i152 = $228 ^ $xor50$i$i328;
 $xor26$i$i153 = $229 ^ $xor52$i$i329;
 $xor27$i$i154 = $230 ^ $xor54$i$i330;
 $xor28$i$i155 = $231 ^ $xor56$i$i331;
 $sub$i$i156 = $sub$i279 >> 31;
 $and$i$i157 = $xor$i$i146 & $sub$i$i156;
 $and29$i$i158 = $xor20$i$i147 & $sub$i$i156;
 $and30$i$i159 = $xor21$i$i148 & $sub$i$i156;
 $and31$i$i160 = $xor22$i$i149 & $sub$i$i156;
 $and32$i$i161 = $xor23$i$i150 & $sub$i$i156;
 $and33$i$i162 = $xor24$i$i151 & $sub$i$i156;
 $and34$i$i163 = $xor25$i$i152 & $sub$i$i156;
 $and35$i$i164 = $xor26$i$i153 & $sub$i$i156;
 $and36$i$i165 = $xor27$i$i154 & $sub$i$i156;
 $and37$i$i166 = $xor28$i$i155 & $sub$i$i156;
 $xor38$i$i167 = $and$i$i157 ^ $xor38$i$i322;
 HEAP32[$t>>2] = $xor38$i$i167;
 $xor40$i$i168 = $and29$i$i158 ^ $xor40$i$i323;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i168;
 $xor42$i$i169 = $and30$i$i159 ^ $xor42$i$i324;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i169;
 $xor44$i$i170 = $and31$i$i160 ^ $xor44$i$i325;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i170;
 $xor46$i$i171 = $and32$i$i161 ^ $xor46$i$i326;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i171;
 $xor48$i$i172 = $and33$i$i162 ^ $xor48$i$i327;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i172;
 $xor50$i$i173 = $and34$i$i163 ^ $xor50$i$i328;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i173;
 $xor52$i$i174 = $and35$i$i164 ^ $xor52$i$i329;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i174;
 $xor54$i$i175 = $and36$i$i165 ^ $xor54$i$i330;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i175;
 $xor56$i$i176 = $and37$i$i166 ^ $xor56$i$i331;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i176;
 $arraydecay5$i178 = (((320 + (($pos*960)|0)|0)) + 880|0);
 $232 = HEAP32[$arraydecay5$i178>>2]|0;
 $arrayidx11$i190 = (((320 + (($pos*960)|0)|0)) + 884|0);
 $233 = HEAP32[$arrayidx11$i190>>2]|0;
 $arrayidx12$i191 = (((320 + (($pos*960)|0)|0)) + 888|0);
 $234 = HEAP32[$arrayidx12$i191>>2]|0;
 $arrayidx13$i192 = (((320 + (($pos*960)|0)|0)) + 892|0);
 $235 = HEAP32[$arrayidx13$i192>>2]|0;
 $arrayidx14$i193 = (((320 + (($pos*960)|0)|0)) + 896|0);
 $236 = HEAP32[$arrayidx14$i193>>2]|0;
 $arrayidx15$i194 = (((320 + (($pos*960)|0)|0)) + 900|0);
 $237 = HEAP32[$arrayidx15$i194>>2]|0;
 $arrayidx16$i195 = (((320 + (($pos*960)|0)|0)) + 904|0);
 $238 = HEAP32[$arrayidx16$i195>>2]|0;
 $arrayidx17$i196 = (((320 + (($pos*960)|0)|0)) + 908|0);
 $239 = HEAP32[$arrayidx17$i196>>2]|0;
 $arrayidx18$i197 = (((320 + (($pos*960)|0)|0)) + 912|0);
 $240 = HEAP32[$arrayidx18$i197>>2]|0;
 $arrayidx19$i198 = (((320 + (($pos*960)|0)|0)) + 916|0);
 $241 = HEAP32[$arrayidx19$i198>>2]|0;
 $xor$i199 = $232 ^ $xor38$i375;
 $xor20$i200 = $233 ^ $xor40$i376;
 $xor21$i201 = $234 ^ $xor42$i377;
 $xor22$i202 = $235 ^ $xor44$i378;
 $xor23$i203 = $236 ^ $xor46$i379;
 $xor24$i204 = $237 ^ $xor48$i380;
 $xor25$i205 = $238 ^ $xor50$i381;
 $xor26$i206 = $239 ^ $xor52$i382;
 $xor27$i207 = $240 ^ $xor54$i383;
 $xor28$i208 = $241 ^ $xor56$i384;
 $and$i210 = $xor$i199 & $sub$i$i156;
 $and29$i211 = $xor20$i200 & $sub$i$i156;
 $and30$i212 = $xor21$i201 & $sub$i$i156;
 $and31$i213 = $xor22$i202 & $sub$i$i156;
 $and32$i214 = $xor23$i203 & $sub$i$i156;
 $and33$i215 = $xor24$i204 & $sub$i$i156;
 $and34$i216 = $xor25$i205 & $sub$i$i156;
 $and35$i217 = $xor26$i206 & $sub$i$i156;
 $and36$i218 = $xor27$i207 & $sub$i$i156;
 $and37$i219 = $xor28$i208 & $sub$i$i156;
 $xor38$i220 = $and$i210 ^ $xor38$i375;
 HEAP32[$arraydecay1$i>>2] = $xor38$i220;
 $xor40$i221 = $and29$i211 ^ $xor40$i376;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i221;
 $xor42$i222 = $and30$i212 ^ $xor42$i377;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i222;
 $xor44$i223 = $and31$i213 ^ $xor44$i378;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i223;
 $xor46$i224 = $and32$i214 ^ $xor46$i379;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i224;
 $xor48$i225 = $and33$i215 ^ $xor48$i380;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i225;
 $xor50$i226 = $and34$i216 ^ $xor50$i381;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i226;
 $xor52$i227 = $and35$i217 ^ $xor52$i382;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i227;
 $xor54$i228 = $and36$i218 ^ $xor54$i383;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i228;
 $xor56$i229 = $and37$i219 ^ $xor56$i384;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i229;
 $arraydecay9$i180 = (((320 + (($pos*960)|0)|0)) + 920|0);
 $242 = HEAP32[$arraydecay9$i180>>2]|0;
 $arrayidx11$i239 = (((320 + (($pos*960)|0)|0)) + 924|0);
 $243 = HEAP32[$arrayidx11$i239>>2]|0;
 $arrayidx12$i240 = (((320 + (($pos*960)|0)|0)) + 928|0);
 $244 = HEAP32[$arrayidx12$i240>>2]|0;
 $arrayidx13$i241 = (((320 + (($pos*960)|0)|0)) + 932|0);
 $245 = HEAP32[$arrayidx13$i241>>2]|0;
 $arrayidx14$i242 = (((320 + (($pos*960)|0)|0)) + 936|0);
 $246 = HEAP32[$arrayidx14$i242>>2]|0;
 $arrayidx15$i243 = (((320 + (($pos*960)|0)|0)) + 940|0);
 $247 = HEAP32[$arrayidx15$i243>>2]|0;
 $arrayidx16$i244 = (((320 + (($pos*960)|0)|0)) + 944|0);
 $248 = HEAP32[$arrayidx16$i244>>2]|0;
 $arrayidx17$i245 = (((320 + (($pos*960)|0)|0)) + 948|0);
 $249 = HEAP32[$arrayidx17$i245>>2]|0;
 $arrayidx18$i246 = (((320 + (($pos*960)|0)|0)) + 952|0);
 $250 = HEAP32[$arrayidx18$i246>>2]|0;
 $arrayidx19$i247 = (((320 + (($pos*960)|0)|0)) + 956|0);
 $251 = HEAP32[$arrayidx19$i247>>2]|0;
 $xor$i248 = $242 ^ $xor38$i424;
 $xor20$i249 = $243 ^ $xor40$i425;
 $xor21$i250 = $244 ^ $xor42$i426;
 $xor22$i251 = $245 ^ $xor44$i427;
 $xor23$i252 = $246 ^ $xor46$i428;
 $xor24$i253 = $247 ^ $xor48$i429;
 $xor25$i254 = $248 ^ $xor50$i430;
 $xor26$i255 = $249 ^ $xor52$i431;
 $xor27$i256 = $250 ^ $xor54$i432;
 $xor28$i257 = $251 ^ $xor56$i433;
 $and$i259 = $xor$i248 & $sub$i$i156;
 $and29$i260 = $xor20$i249 & $sub$i$i156;
 $and30$i261 = $xor21$i250 & $sub$i$i156;
 $and31$i262 = $xor22$i251 & $sub$i$i156;
 $and32$i263 = $xor23$i252 & $sub$i$i156;
 $and33$i264 = $xor24$i253 & $sub$i$i156;
 $and34$i265 = $xor25$i254 & $sub$i$i156;
 $and35$i266 = $xor26$i255 & $sub$i$i156;
 $and36$i267 = $xor27$i256 & $sub$i$i156;
 $and37$i268 = $xor28$i257 & $sub$i$i156;
 $xor38$i269 = $and$i259 ^ $xor38$i424;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i269;
 $xor40$i270 = $and29$i260 ^ $xor40$i425;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i270;
 $xor42$i271 = $and30$i261 ^ $xor42$i426;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i271;
 $xor44$i272 = $and31$i262 ^ $xor44$i427;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i272;
 $xor46$i273 = $and32$i263 ^ $xor46$i428;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i273;
 $xor48$i274 = $and33$i264 ^ $xor48$i429;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i274;
 $xor50$i275 = $and34$i265 ^ $xor50$i430;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i275;
 $xor52$i276 = $and35$i266 ^ $xor52$i431;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i276;
 $xor54$i277 = $and36$i267 ^ $xor54$i432;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i277;
 $xor56$i278 = $and37$i268 ^ $xor56$i433;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i278;
 $252 = HEAP32[$arrayidx1$i$i1394>>2]|0;
 $253 = HEAP32[$arrayidx2$i$i1238>>2]|0;
 $254 = HEAP32[$arrayidx3$i$i1239>>2]|0;
 $255 = HEAP32[$arrayidx4$i$i1240>>2]|0;
 $256 = HEAP32[$arrayidx5$i$i1241>>2]|0;
 $257 = HEAP32[$arrayidx6$i$i1242>>2]|0;
 $258 = HEAP32[$arrayidx7$i$i1243>>2]|0;
 $259 = HEAP32[$arrayidx8$i$i1244>>2]|0;
 $260 = HEAP32[$arrayidx9$i$i1245>>2]|0;
 $sub$i88 = (0 - ($xor38$i269))|0;
 $sub10$i = (0 - ($xor40$i270))|0;
 $sub11$i = (0 - ($xor42$i271))|0;
 $sub12$i = (0 - ($xor44$i272))|0;
 $sub13$i = (0 - ($xor46$i273))|0;
 $sub14$i = (0 - ($xor48$i274))|0;
 $sub15$i = (0 - ($xor50$i275))|0;
 $sub16$i = (0 - ($xor52$i276))|0;
 $sub17$i = (0 - ($xor54$i277))|0;
 $sub18$i = (0 - ($xor56$i278))|0;
 $xor$i$i = $xor38$i220 ^ $xor38$i$i167;
 $xor20$i$i = $xor40$i221 ^ $xor40$i$i168;
 $xor21$i$i = $xor42$i222 ^ $xor42$i$i169;
 $xor22$i$i = $xor44$i223 ^ $xor44$i$i170;
 $xor23$i$i = $xor46$i224 ^ $xor46$i$i171;
 $xor24$i$i = $xor48$i225 ^ $xor48$i$i172;
 $xor25$i$i = $xor50$i226 ^ $xor50$i$i173;
 $xor26$i$i = $xor52$i227 ^ $xor52$i$i174;
 $xor27$i$i = $xor54$i228 ^ $xor54$i$i175;
 $xor28$i$i = $xor56$i229 ^ $xor56$i$i176;
 $and$i$i = $xor$i$i & $sub;
 $and29$i$i = $xor20$i$i & $sub;
 $and30$i$i = $xor21$i$i & $sub;
 $and31$i$i = $xor22$i$i & $sub;
 $and32$i$i = $xor23$i$i & $sub;
 $and33$i$i = $xor24$i$i & $sub;
 $and34$i$i = $xor25$i$i & $sub;
 $and35$i$i = $xor26$i$i & $sub;
 $and36$i$i = $xor27$i$i & $sub;
 $and37$i$i = $xor28$i$i & $sub;
 $xor38$i$i = $and$i$i ^ $xor38$i$i167;
 HEAP32[$t>>2] = $xor38$i$i;
 $xor40$i$i = $and29$i$i ^ $xor40$i$i168;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i;
 $xor42$i$i = $and30$i$i ^ $xor42$i$i169;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i;
 $xor44$i$i = $and31$i$i ^ $xor44$i$i170;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i;
 $xor46$i$i = $and32$i$i ^ $xor46$i$i171;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i;
 $xor48$i$i = $and33$i$i ^ $xor48$i$i172;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i;
 $xor50$i$i = $and34$i$i ^ $xor50$i$i173;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i;
 $xor52$i$i = $and35$i$i ^ $xor52$i$i174;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i;
 $xor54$i$i = $and36$i$i ^ $xor54$i$i175;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i;
 $xor56$i$i = $and37$i$i ^ $xor56$i$i176;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i;
 $xor20$i = $252 ^ $xor40$i221;
 $xor21$i = $253 ^ $xor42$i222;
 $xor22$i = $254 ^ $xor44$i223;
 $xor23$i = $255 ^ $xor46$i224;
 $xor24$i = $256 ^ $xor48$i225;
 $xor25$i = $257 ^ $xor50$i226;
 $xor26$i = $258 ^ $xor52$i227;
 $xor27$i = $259 ^ $xor54$i228;
 $xor28$i = $260 ^ $xor56$i229;
 $and29$i = $xor20$i & $sub;
 $and30$i = $xor21$i & $sub;
 $and31$i = $xor22$i & $sub;
 $and32$i = $xor23$i & $sub;
 $and33$i = $xor24$i & $sub;
 $and34$i = $xor25$i & $sub;
 $and35$i = $xor26$i & $sub;
 $and36$i = $xor27$i & $sub;
 $and37$i = $xor28$i & $sub;
 $xor38$i = $and$i$i ^ $xor38$i220;
 HEAP32[$arraydecay1$i>>2] = $xor38$i;
 $xor40$i = $and29$i ^ $xor40$i221;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i;
 $xor42$i = $and30$i ^ $xor42$i222;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i;
 $xor44$i = $and31$i ^ $xor44$i223;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i;
 $xor46$i = $and32$i ^ $xor46$i224;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i;
 $xor48$i = $and33$i ^ $xor48$i225;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i;
 $xor50$i = $and34$i ^ $xor50$i226;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i;
 $xor52$i = $and35$i ^ $xor52$i227;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i;
 $xor54$i = $and36$i ^ $xor54$i228;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i;
 $xor56$i = $and37$i ^ $xor56$i229;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i;
 $xor$i48 = $xor38$i269 ^ $sub$i88;
 $xor20$i49 = $xor40$i270 ^ $sub10$i;
 $xor21$i50 = $xor42$i271 ^ $sub11$i;
 $xor22$i51 = $xor44$i272 ^ $sub12$i;
 $xor23$i52 = $xor46$i273 ^ $sub13$i;
 $xor24$i53 = $xor48$i274 ^ $sub14$i;
 $xor25$i54 = $xor50$i275 ^ $sub15$i;
 $xor26$i55 = $xor52$i276 ^ $sub16$i;
 $xor27$i56 = $xor54$i277 ^ $sub17$i;
 $xor28$i57 = $xor56$i278 ^ $sub18$i;
 $and$i59 = $xor$i48 & $sub;
 $and29$i60 = $xor20$i49 & $sub;
 $and30$i61 = $xor21$i50 & $sub;
 $and31$i62 = $xor22$i51 & $sub;
 $and32$i63 = $xor23$i52 & $sub;
 $and33$i64 = $xor24$i53 & $sub;
 $and34$i65 = $xor25$i54 & $sub;
 $and35$i66 = $xor26$i55 & $sub;
 $and36$i67 = $xor27$i56 & $sub;
 $and37$i68 = $xor28$i57 & $sub;
 $xor38$i69 = $and$i59 ^ $xor38$i269;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i69;
 $xor40$i70 = $and29$i60 ^ $xor40$i270;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i70;
 $xor42$i71 = $and30$i61 ^ $xor42$i271;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i71;
 $xor44$i72 = $and31$i62 ^ $xor44$i272;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i72;
 $xor46$i73 = $and32$i63 ^ $xor46$i273;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i73;
 $xor48$i74 = $and33$i64 ^ $xor48$i274;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i74;
 $xor50$i75 = $and34$i65 ^ $xor50$i275;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i75;
 $xor52$i76 = $and35$i66 ^ $xor52$i276;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i76;
 $xor54$i77 = $and36$i67 ^ $xor54$i277;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i77;
 $xor56$i78 = $and37$i68 ^ $xor56$i278;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i78;
 return;
}
function _ge_tobytes($s,$h) {
 $s = $s|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $arraydecay1 = 0, $arraydecay6 = 0, $arrayidx = 0, $recip = 0, $s$i = 0, $x = 0, $xor4 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $s$i = sp + 144|0;
 $recip = sp + 96|0;
 $x = sp + 48|0;
 $y = sp;
 $arraydecay1 = ((($h)) + 80|0);
 _fe_invert($recip,$arraydecay1);
 _fe_mul($x,$h,$recip);
 $arraydecay6 = ((($h)) + 40|0);
 _fe_mul($y,$arraydecay6,$recip);
 _fe_tobytes($s,$y);
 _fe_tobytes($s$i,$x);
 $0 = HEAP8[$s$i>>0]|0;
 $1 = ($0 << 7)&255;
 $arrayidx = ((($s)) + 31|0);
 $2 = HEAP8[$arrayidx>>0]|0;
 $xor4 = $2 ^ $1;
 HEAP8[$arrayidx>>0] = $xor4;
 STACKTOP = sp;return;
}
function _sc_reduce($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $add$ptr15$idx = 0;
 var $add$ptr15$idx$val = 0, $add$ptr15$idx504 = 0, $add$ptr15$idx504$val = 0, $add$ptr23$idx = 0, $add$ptr23$idx$val = 0, $add$ptr23$idx503 = 0, $add$ptr23$idx503$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx502 = 0, $add$ptr27$idx502$val = 0, $add$ptr27$val = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx505 = 0, $add$ptr3$idx505$val = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx501 = 0;
 var $add$ptr34$idx501$val = 0, $add$ptr46$idx = 0, $add$ptr46$idx$val = 0, $add$ptr46$idx500 = 0, $add$ptr46$idx500$val = 0, $add$ptr54$idx = 0, $add$ptr54$idx$val = 0, $add$ptr54$idx499 = 0, $add$ptr54$idx499$val = 0, $add$ptr58 = 0, $add$ptr58$idx = 0, $add$ptr58$idx$val = 0, $add$ptr58$idx498 = 0, $add$ptr58$idx498$val = 0, $add$ptr58$val = 0, $add$ptr65$idx = 0, $add$ptr65$idx$val = 0, $add$ptr65$idx497 = 0, $add$ptr65$idx497$val = 0, $add$ptr77$idx = 0;
 var $add$ptr77$idx$val = 0, $add$ptr77$idx496 = 0, $add$ptr77$idx496$val = 0, $arrayidx1$i = 0, $arrayidx1$i515 = 0, $arrayidx1$i535 = 0, $arrayidx1$i548 = 0, $arrayidx1$i568 = 0, $arrayidx1$i595 = 0, $arrayidx1$i615 = 0, $arrayidx1$i628 = 0, $arrayidx1$i648 = 0, $arrayidx1$i675 = 0, $arrayidx1$i695 = 0, $arrayidx1$i708 = 0, $arrayidx1$i728 = 0, $arrayidx3$i = 0, $arrayidx3$i519 = 0, $arrayidx3$i539 = 0, $arrayidx3$i552 = 0;
 var $arrayidx3$i572 = 0, $arrayidx3$i599 = 0, $arrayidx3$i619 = 0, $arrayidx3$i632 = 0, $arrayidx3$i652 = 0, $arrayidx3$i679 = 0, $arrayidx3$i699 = 0, $arrayidx3$i712 = 0, $arrayidx3$i732 = 0, $arrayidx7$i = 0, $arrayidx7$i523 = 0, $arrayidx7$i543 = 0, $arrayidx7$i556 = 0, $arrayidx7$i576 = 0, $arrayidx7$i603 = 0, $arrayidx7$i623 = 0, $arrayidx7$i636 = 0, $arrayidx7$i656 = 0, $arrayidx7$i683 = 0, $arrayidx7$i703 = 0;
 var $arrayidx7$i716 = 0, $arrayidx7$i736 = 0, $s$idx = 0, $s$idx$val = 0, $s$idx506 = 0, $s$idx506$val = 0, $s$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$val = HEAP8[$s>>0]|0;
 $s$idx = ((($s)) + 1|0);
 $s$idx$val = HEAP8[$s$idx>>0]|0;
 $s$idx506 = ((($s)) + 2|0);
 $s$idx506$val = HEAP8[$s$idx506>>0]|0;
 $0 = $s$val&255;
 $1 = $s$idx$val&255;
 $2 = (_bitshift64Shl(($1|0),0,8)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2 | $0;
 $5 = $s$idx506$val&255;
 $6 = (_bitshift64Shl(($5|0),0,16)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2031616;
 $9 = $4 | $8;
 $arrayidx1$i728 = ((($s)) + 3|0);
 $10 = HEAP8[$arrayidx1$i728>>0]|0;
 $11 = $10&255;
 $12 = (_bitshift64Shl(($11|0),0,8)|0);
 $13 = (getTempRet0() | 0);
 $14 = $12 | $5;
 $arrayidx3$i732 = ((($s)) + 4|0);
 $15 = HEAP8[$arrayidx3$i732>>0]|0;
 $16 = $15&255;
 $17 = (_bitshift64Shl(($16|0),0,16)|0);
 $18 = (getTempRet0() | 0);
 $19 = $14 | $17;
 $20 = $13 | $18;
 $arrayidx7$i736 = ((($s)) + 5|0);
 $21 = HEAP8[$arrayidx7$i736>>0]|0;
 $22 = $21&255;
 $23 = (_bitshift64Shl(($22|0),0,24)|0);
 $24 = (getTempRet0() | 0);
 $25 = $19 | $23;
 $26 = $20 | $24;
 $27 = (_bitshift64Lshr(($25|0),($26|0),5)|0);
 $28 = (getTempRet0() | 0);
 $29 = $27 & 2097151;
 $add$ptr3$idx = ((($s)) + 6|0);
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx>>0]|0;
 $add$ptr3$idx505 = ((($s)) + 7|0);
 $add$ptr3$idx505$val = HEAP8[$add$ptr3$idx505>>0]|0;
 $30 = $add$ptr3$idx$val&255;
 $31 = (_bitshift64Shl(($30|0),0,8)|0);
 $32 = (getTempRet0() | 0);
 $33 = $31 | $22;
 $34 = $add$ptr3$idx505$val&255;
 $35 = (_bitshift64Shl(($34|0),0,16)|0);
 $36 = (getTempRet0() | 0);
 $37 = $33 | $35;
 $38 = $32 | $36;
 $39 = (_bitshift64Lshr(($37|0),($38|0),2)|0);
 $40 = (getTempRet0() | 0);
 $41 = $39 & 2097151;
 $arrayidx1$i708 = ((($s)) + 8|0);
 $42 = HEAP8[$arrayidx1$i708>>0]|0;
 $43 = $42&255;
 $44 = (_bitshift64Shl(($43|0),0,8)|0);
 $45 = (getTempRet0() | 0);
 $46 = $44 | $34;
 $arrayidx3$i712 = ((($s)) + 9|0);
 $47 = HEAP8[$arrayidx3$i712>>0]|0;
 $48 = $47&255;
 $49 = (_bitshift64Shl(($48|0),0,16)|0);
 $50 = (getTempRet0() | 0);
 $51 = $46 | $49;
 $52 = $45 | $50;
 $arrayidx7$i716 = ((($s)) + 10|0);
 $53 = HEAP8[$arrayidx7$i716>>0]|0;
 $54 = $53&255;
 $55 = (_bitshift64Shl(($54|0),0,24)|0);
 $56 = (getTempRet0() | 0);
 $57 = $51 | $55;
 $58 = $52 | $56;
 $59 = (_bitshift64Lshr(($57|0),($58|0),7)|0);
 $60 = (getTempRet0() | 0);
 $61 = $59 & 2097151;
 $arrayidx1$i695 = ((($s)) + 11|0);
 $62 = HEAP8[$arrayidx1$i695>>0]|0;
 $63 = $62&255;
 $64 = (_bitshift64Shl(($63|0),0,8)|0);
 $65 = (getTempRet0() | 0);
 $66 = $64 | $54;
 $arrayidx3$i699 = ((($s)) + 12|0);
 $67 = HEAP8[$arrayidx3$i699>>0]|0;
 $68 = $67&255;
 $69 = (_bitshift64Shl(($68|0),0,16)|0);
 $70 = (getTempRet0() | 0);
 $71 = $66 | $69;
 $72 = $65 | $70;
 $arrayidx7$i703 = ((($s)) + 13|0);
 $73 = HEAP8[$arrayidx7$i703>>0]|0;
 $74 = $73&255;
 $75 = (_bitshift64Shl(($74|0),0,24)|0);
 $76 = (getTempRet0() | 0);
 $77 = $71 | $75;
 $78 = $72 | $76;
 $79 = (_bitshift64Lshr(($77|0),($78|0),4)|0);
 $80 = (getTempRet0() | 0);
 $81 = $79 & 2097151;
 $add$ptr15$idx = ((($s)) + 14|0);
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx>>0]|0;
 $add$ptr15$idx504 = ((($s)) + 15|0);
 $add$ptr15$idx504$val = HEAP8[$add$ptr15$idx504>>0]|0;
 $82 = $add$ptr15$idx$val&255;
 $83 = (_bitshift64Shl(($82|0),0,8)|0);
 $84 = (getTempRet0() | 0);
 $85 = $83 | $74;
 $86 = $add$ptr15$idx504$val&255;
 $87 = (_bitshift64Shl(($86|0),0,16)|0);
 $88 = (getTempRet0() | 0);
 $89 = $85 | $87;
 $90 = $84 | $88;
 $91 = (_bitshift64Lshr(($89|0),($90|0),1)|0);
 $92 = (getTempRet0() | 0);
 $93 = $91 & 2097151;
 $arrayidx1$i675 = ((($s)) + 16|0);
 $94 = HEAP8[$arrayidx1$i675>>0]|0;
 $95 = $94&255;
 $96 = (_bitshift64Shl(($95|0),0,8)|0);
 $97 = (getTempRet0() | 0);
 $98 = $96 | $86;
 $arrayidx3$i679 = ((($s)) + 17|0);
 $99 = HEAP8[$arrayidx3$i679>>0]|0;
 $100 = $99&255;
 $101 = (_bitshift64Shl(($100|0),0,16)|0);
 $102 = (getTempRet0() | 0);
 $103 = $98 | $101;
 $104 = $97 | $102;
 $arrayidx7$i683 = ((($s)) + 18|0);
 $105 = HEAP8[$arrayidx7$i683>>0]|0;
 $106 = $105&255;
 $107 = (_bitshift64Shl(($106|0),0,24)|0);
 $108 = (getTempRet0() | 0);
 $109 = $103 | $107;
 $110 = $104 | $108;
 $111 = (_bitshift64Lshr(($109|0),($110|0),6)|0);
 $112 = (getTempRet0() | 0);
 $113 = $111 & 2097151;
 $add$ptr23$idx = ((($s)) + 19|0);
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx>>0]|0;
 $add$ptr23$idx503 = ((($s)) + 20|0);
 $add$ptr23$idx503$val = HEAP8[$add$ptr23$idx503>>0]|0;
 $114 = $add$ptr23$idx$val&255;
 $115 = (_bitshift64Shl(($114|0),0,8)|0);
 $116 = (getTempRet0() | 0);
 $117 = $115 | $106;
 $118 = $add$ptr23$idx503$val&255;
 $119 = (_bitshift64Shl(($118|0),0,16)|0);
 $120 = (getTempRet0() | 0);
 $121 = $117 | $119;
 $122 = $116 | $120;
 $123 = (_bitshift64Lshr(($121|0),($122|0),3)|0);
 $124 = (getTempRet0() | 0);
 $add$ptr27 = ((($s)) + 21|0);
 $add$ptr27$val = HEAP8[$add$ptr27>>0]|0;
 $add$ptr27$idx = ((($s)) + 22|0);
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx>>0]|0;
 $add$ptr27$idx502 = ((($s)) + 23|0);
 $add$ptr27$idx502$val = HEAP8[$add$ptr27$idx502>>0]|0;
 $125 = $add$ptr27$val&255;
 $126 = $add$ptr27$idx$val&255;
 $127 = (_bitshift64Shl(($126|0),0,8)|0);
 $128 = (getTempRet0() | 0);
 $129 = $127 | $125;
 $130 = $add$ptr27$idx502$val&255;
 $131 = (_bitshift64Shl(($130|0),0,16)|0);
 $132 = (getTempRet0() | 0);
 $133 = $131 & 2031616;
 $134 = $129 | $133;
 $arrayidx1$i648 = ((($s)) + 24|0);
 $135 = HEAP8[$arrayidx1$i648>>0]|0;
 $136 = $135&255;
 $137 = (_bitshift64Shl(($136|0),0,8)|0);
 $138 = (getTempRet0() | 0);
 $139 = $137 | $130;
 $arrayidx3$i652 = ((($s)) + 25|0);
 $140 = HEAP8[$arrayidx3$i652>>0]|0;
 $141 = $140&255;
 $142 = (_bitshift64Shl(($141|0),0,16)|0);
 $143 = (getTempRet0() | 0);
 $144 = $139 | $142;
 $145 = $138 | $143;
 $arrayidx7$i656 = ((($s)) + 26|0);
 $146 = HEAP8[$arrayidx7$i656>>0]|0;
 $147 = $146&255;
 $148 = (_bitshift64Shl(($147|0),0,24)|0);
 $149 = (getTempRet0() | 0);
 $150 = $144 | $148;
 $151 = $145 | $149;
 $152 = (_bitshift64Lshr(($150|0),($151|0),5)|0);
 $153 = (getTempRet0() | 0);
 $154 = $152 & 2097151;
 $add$ptr34$idx = ((($s)) + 27|0);
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx>>0]|0;
 $add$ptr34$idx501 = ((($s)) + 28|0);
 $add$ptr34$idx501$val = HEAP8[$add$ptr34$idx501>>0]|0;
 $155 = $add$ptr34$idx$val&255;
 $156 = (_bitshift64Shl(($155|0),0,8)|0);
 $157 = (getTempRet0() | 0);
 $158 = $156 | $147;
 $159 = $add$ptr34$idx501$val&255;
 $160 = (_bitshift64Shl(($159|0),0,16)|0);
 $161 = (getTempRet0() | 0);
 $162 = $158 | $160;
 $163 = $157 | $161;
 $164 = (_bitshift64Lshr(($162|0),($163|0),2)|0);
 $165 = (getTempRet0() | 0);
 $166 = $164 & 2097151;
 $arrayidx1$i628 = ((($s)) + 29|0);
 $167 = HEAP8[$arrayidx1$i628>>0]|0;
 $168 = $167&255;
 $169 = (_bitshift64Shl(($168|0),0,8)|0);
 $170 = (getTempRet0() | 0);
 $171 = $169 | $159;
 $arrayidx3$i632 = ((($s)) + 30|0);
 $172 = HEAP8[$arrayidx3$i632>>0]|0;
 $173 = $172&255;
 $174 = (_bitshift64Shl(($173|0),0,16)|0);
 $175 = (getTempRet0() | 0);
 $176 = $171 | $174;
 $177 = $170 | $175;
 $arrayidx7$i636 = ((($s)) + 31|0);
 $178 = HEAP8[$arrayidx7$i636>>0]|0;
 $179 = $178&255;
 $180 = (_bitshift64Shl(($179|0),0,24)|0);
 $181 = (getTempRet0() | 0);
 $182 = $176 | $180;
 $183 = $177 | $181;
 $184 = (_bitshift64Lshr(($182|0),($183|0),7)|0);
 $185 = (getTempRet0() | 0);
 $186 = $184 & 2097151;
 $arrayidx1$i615 = ((($s)) + 32|0);
 $187 = HEAP8[$arrayidx1$i615>>0]|0;
 $188 = $187&255;
 $189 = (_bitshift64Shl(($188|0),0,8)|0);
 $190 = (getTempRet0() | 0);
 $191 = $189 | $179;
 $arrayidx3$i619 = ((($s)) + 33|0);
 $192 = HEAP8[$arrayidx3$i619>>0]|0;
 $193 = $192&255;
 $194 = (_bitshift64Shl(($193|0),0,16)|0);
 $195 = (getTempRet0() | 0);
 $196 = $191 | $194;
 $197 = $190 | $195;
 $arrayidx7$i623 = ((($s)) + 34|0);
 $198 = HEAP8[$arrayidx7$i623>>0]|0;
 $199 = $198&255;
 $200 = (_bitshift64Shl(($199|0),0,24)|0);
 $201 = (getTempRet0() | 0);
 $202 = $196 | $200;
 $203 = $197 | $201;
 $204 = (_bitshift64Lshr(($202|0),($203|0),4)|0);
 $205 = (getTempRet0() | 0);
 $206 = $204 & 2097151;
 $add$ptr46$idx = ((($s)) + 35|0);
 $add$ptr46$idx$val = HEAP8[$add$ptr46$idx>>0]|0;
 $add$ptr46$idx500 = ((($s)) + 36|0);
 $add$ptr46$idx500$val = HEAP8[$add$ptr46$idx500>>0]|0;
 $207 = $add$ptr46$idx$val&255;
 $208 = (_bitshift64Shl(($207|0),0,8)|0);
 $209 = (getTempRet0() | 0);
 $210 = $208 | $199;
 $211 = $add$ptr46$idx500$val&255;
 $212 = (_bitshift64Shl(($211|0),0,16)|0);
 $213 = (getTempRet0() | 0);
 $214 = $210 | $212;
 $215 = $209 | $213;
 $216 = (_bitshift64Lshr(($214|0),($215|0),1)|0);
 $217 = (getTempRet0() | 0);
 $218 = $216 & 2097151;
 $arrayidx1$i595 = ((($s)) + 37|0);
 $219 = HEAP8[$arrayidx1$i595>>0]|0;
 $220 = $219&255;
 $221 = (_bitshift64Shl(($220|0),0,8)|0);
 $222 = (getTempRet0() | 0);
 $223 = $221 | $211;
 $arrayidx3$i599 = ((($s)) + 38|0);
 $224 = HEAP8[$arrayidx3$i599>>0]|0;
 $225 = $224&255;
 $226 = (_bitshift64Shl(($225|0),0,16)|0);
 $227 = (getTempRet0() | 0);
 $228 = $223 | $226;
 $229 = $222 | $227;
 $arrayidx7$i603 = ((($s)) + 39|0);
 $230 = HEAP8[$arrayidx7$i603>>0]|0;
 $231 = $230&255;
 $232 = (_bitshift64Shl(($231|0),0,24)|0);
 $233 = (getTempRet0() | 0);
 $234 = $228 | $232;
 $235 = $229 | $233;
 $236 = (_bitshift64Lshr(($234|0),($235|0),6)|0);
 $237 = (getTempRet0() | 0);
 $238 = $236 & 2097151;
 $add$ptr54$idx = ((($s)) + 40|0);
 $add$ptr54$idx$val = HEAP8[$add$ptr54$idx>>0]|0;
 $add$ptr54$idx499 = ((($s)) + 41|0);
 $add$ptr54$idx499$val = HEAP8[$add$ptr54$idx499>>0]|0;
 $239 = $add$ptr54$idx$val&255;
 $240 = (_bitshift64Shl(($239|0),0,8)|0);
 $241 = (getTempRet0() | 0);
 $242 = $240 | $231;
 $243 = $add$ptr54$idx499$val&255;
 $244 = (_bitshift64Shl(($243|0),0,16)|0);
 $245 = (getTempRet0() | 0);
 $246 = $242 | $244;
 $247 = $241 | $245;
 $248 = (_bitshift64Lshr(($246|0),($247|0),3)|0);
 $249 = (getTempRet0() | 0);
 $add$ptr58 = ((($s)) + 42|0);
 $add$ptr58$val = HEAP8[$add$ptr58>>0]|0;
 $add$ptr58$idx = ((($s)) + 43|0);
 $add$ptr58$idx$val = HEAP8[$add$ptr58$idx>>0]|0;
 $add$ptr58$idx498 = ((($s)) + 44|0);
 $add$ptr58$idx498$val = HEAP8[$add$ptr58$idx498>>0]|0;
 $250 = $add$ptr58$val&255;
 $251 = $add$ptr58$idx$val&255;
 $252 = (_bitshift64Shl(($251|0),0,8)|0);
 $253 = (getTempRet0() | 0);
 $254 = $252 | $250;
 $255 = $add$ptr58$idx498$val&255;
 $256 = (_bitshift64Shl(($255|0),0,16)|0);
 $257 = (getTempRet0() | 0);
 $258 = $256 & 2031616;
 $259 = $254 | $258;
 $arrayidx1$i568 = ((($s)) + 45|0);
 $260 = HEAP8[$arrayidx1$i568>>0]|0;
 $261 = $260&255;
 $262 = (_bitshift64Shl(($261|0),0,8)|0);
 $263 = (getTempRet0() | 0);
 $264 = $262 | $255;
 $arrayidx3$i572 = ((($s)) + 46|0);
 $265 = HEAP8[$arrayidx3$i572>>0]|0;
 $266 = $265&255;
 $267 = (_bitshift64Shl(($266|0),0,16)|0);
 $268 = (getTempRet0() | 0);
 $269 = $264 | $267;
 $270 = $263 | $268;
 $arrayidx7$i576 = ((($s)) + 47|0);
 $271 = HEAP8[$arrayidx7$i576>>0]|0;
 $272 = $271&255;
 $273 = (_bitshift64Shl(($272|0),0,24)|0);
 $274 = (getTempRet0() | 0);
 $275 = $269 | $273;
 $276 = $270 | $274;
 $277 = (_bitshift64Lshr(($275|0),($276|0),5)|0);
 $278 = (getTempRet0() | 0);
 $279 = $277 & 2097151;
 $add$ptr65$idx = ((($s)) + 48|0);
 $add$ptr65$idx$val = HEAP8[$add$ptr65$idx>>0]|0;
 $add$ptr65$idx497 = ((($s)) + 49|0);
 $add$ptr65$idx497$val = HEAP8[$add$ptr65$idx497>>0]|0;
 $280 = $add$ptr65$idx$val&255;
 $281 = (_bitshift64Shl(($280|0),0,8)|0);
 $282 = (getTempRet0() | 0);
 $283 = $281 | $272;
 $284 = $add$ptr65$idx497$val&255;
 $285 = (_bitshift64Shl(($284|0),0,16)|0);
 $286 = (getTempRet0() | 0);
 $287 = $283 | $285;
 $288 = $282 | $286;
 $289 = (_bitshift64Lshr(($287|0),($288|0),2)|0);
 $290 = (getTempRet0() | 0);
 $291 = $289 & 2097151;
 $arrayidx1$i548 = ((($s)) + 50|0);
 $292 = HEAP8[$arrayidx1$i548>>0]|0;
 $293 = $292&255;
 $294 = (_bitshift64Shl(($293|0),0,8)|0);
 $295 = (getTempRet0() | 0);
 $296 = $294 | $284;
 $arrayidx3$i552 = ((($s)) + 51|0);
 $297 = HEAP8[$arrayidx3$i552>>0]|0;
 $298 = $297&255;
 $299 = (_bitshift64Shl(($298|0),0,16)|0);
 $300 = (getTempRet0() | 0);
 $301 = $296 | $299;
 $302 = $295 | $300;
 $arrayidx7$i556 = ((($s)) + 52|0);
 $303 = HEAP8[$arrayidx7$i556>>0]|0;
 $304 = $303&255;
 $305 = (_bitshift64Shl(($304|0),0,24)|0);
 $306 = (getTempRet0() | 0);
 $307 = $301 | $305;
 $308 = $302 | $306;
 $309 = (_bitshift64Lshr(($307|0),($308|0),7)|0);
 $310 = (getTempRet0() | 0);
 $311 = $309 & 2097151;
 $arrayidx1$i535 = ((($s)) + 53|0);
 $312 = HEAP8[$arrayidx1$i535>>0]|0;
 $313 = $312&255;
 $314 = (_bitshift64Shl(($313|0),0,8)|0);
 $315 = (getTempRet0() | 0);
 $316 = $314 | $304;
 $arrayidx3$i539 = ((($s)) + 54|0);
 $317 = HEAP8[$arrayidx3$i539>>0]|0;
 $318 = $317&255;
 $319 = (_bitshift64Shl(($318|0),0,16)|0);
 $320 = (getTempRet0() | 0);
 $321 = $316 | $319;
 $322 = $315 | $320;
 $arrayidx7$i543 = ((($s)) + 55|0);
 $323 = HEAP8[$arrayidx7$i543>>0]|0;
 $324 = $323&255;
 $325 = (_bitshift64Shl(($324|0),0,24)|0);
 $326 = (getTempRet0() | 0);
 $327 = $321 | $325;
 $328 = $322 | $326;
 $329 = (_bitshift64Lshr(($327|0),($328|0),4)|0);
 $330 = (getTempRet0() | 0);
 $331 = $329 & 2097151;
 $add$ptr77$idx = ((($s)) + 56|0);
 $add$ptr77$idx$val = HEAP8[$add$ptr77$idx>>0]|0;
 $add$ptr77$idx496 = ((($s)) + 57|0);
 $add$ptr77$idx496$val = HEAP8[$add$ptr77$idx496>>0]|0;
 $332 = $add$ptr77$idx$val&255;
 $333 = (_bitshift64Shl(($332|0),0,8)|0);
 $334 = (getTempRet0() | 0);
 $335 = $333 | $324;
 $336 = $add$ptr77$idx496$val&255;
 $337 = (_bitshift64Shl(($336|0),0,16)|0);
 $338 = (getTempRet0() | 0);
 $339 = $335 | $337;
 $340 = $334 | $338;
 $341 = (_bitshift64Lshr(($339|0),($340|0),1)|0);
 $342 = (getTempRet0() | 0);
 $343 = $341 & 2097151;
 $arrayidx1$i515 = ((($s)) + 58|0);
 $344 = HEAP8[$arrayidx1$i515>>0]|0;
 $345 = $344&255;
 $346 = (_bitshift64Shl(($345|0),0,8)|0);
 $347 = (getTempRet0() | 0);
 $348 = $346 | $336;
 $arrayidx3$i519 = ((($s)) + 59|0);
 $349 = HEAP8[$arrayidx3$i519>>0]|0;
 $350 = $349&255;
 $351 = (_bitshift64Shl(($350|0),0,16)|0);
 $352 = (getTempRet0() | 0);
 $353 = $348 | $351;
 $354 = $347 | $352;
 $arrayidx7$i523 = ((($s)) + 60|0);
 $355 = HEAP8[$arrayidx7$i523>>0]|0;
 $356 = $355&255;
 $357 = (_bitshift64Shl(($356|0),0,24)|0);
 $358 = (getTempRet0() | 0);
 $359 = $353 | $357;
 $360 = $354 | $358;
 $361 = (_bitshift64Lshr(($359|0),($360|0),6)|0);
 $362 = (getTempRet0() | 0);
 $363 = $361 & 2097151;
 $arrayidx1$i = ((($s)) + 61|0);
 $364 = HEAP8[$arrayidx1$i>>0]|0;
 $365 = $364&255;
 $366 = (_bitshift64Shl(($365|0),0,8)|0);
 $367 = (getTempRet0() | 0);
 $368 = $366 | $356;
 $arrayidx3$i = ((($s)) + 62|0);
 $369 = HEAP8[$arrayidx3$i>>0]|0;
 $370 = $369&255;
 $371 = (_bitshift64Shl(($370|0),0,16)|0);
 $372 = (getTempRet0() | 0);
 $373 = $368 | $371;
 $374 = $367 | $372;
 $arrayidx7$i = ((($s)) + 63|0);
 $375 = HEAP8[$arrayidx7$i>>0]|0;
 $376 = $375&255;
 $377 = (_bitshift64Shl(($376|0),0,24)|0);
 $378 = (getTempRet0() | 0);
 $379 = $373 | $377;
 $380 = $374 | $378;
 $381 = (_bitshift64Lshr(($379|0),($380|0),3)|0);
 $382 = (getTempRet0() | 0);
 $383 = (___muldi3(($381|0),($382|0),666643,0)|0);
 $384 = (getTempRet0() | 0);
 $385 = (___muldi3(($381|0),($382|0),470296,0)|0);
 $386 = (getTempRet0() | 0);
 $387 = (___muldi3(($381|0),($382|0),654183,0)|0);
 $388 = (getTempRet0() | 0);
 $389 = (___muldi3(($381|0),($382|0),-997805,-1)|0);
 $390 = (getTempRet0() | 0);
 $391 = (___muldi3(($381|0),($382|0),136657,0)|0);
 $392 = (getTempRet0() | 0);
 $393 = (___muldi3(($381|0),($382|0),-683901,-1)|0);
 $394 = (getTempRet0() | 0);
 $395 = (_i64Add(($393|0),($394|0),($259|0),($253|0))|0);
 $396 = (getTempRet0() | 0);
 $397 = (___muldi3(($363|0),0,666643,0)|0);
 $398 = (getTempRet0() | 0);
 $399 = (___muldi3(($363|0),0,470296,0)|0);
 $400 = (getTempRet0() | 0);
 $401 = (___muldi3(($363|0),0,654183,0)|0);
 $402 = (getTempRet0() | 0);
 $403 = (___muldi3(($363|0),0,-997805,-1)|0);
 $404 = (getTempRet0() | 0);
 $405 = (___muldi3(($363|0),0,136657,0)|0);
 $406 = (getTempRet0() | 0);
 $407 = (___muldi3(($363|0),0,-683901,-1)|0);
 $408 = (getTempRet0() | 0);
 $409 = (___muldi3(($343|0),0,666643,0)|0);
 $410 = (getTempRet0() | 0);
 $411 = (___muldi3(($343|0),0,470296,0)|0);
 $412 = (getTempRet0() | 0);
 $413 = (___muldi3(($343|0),0,654183,0)|0);
 $414 = (getTempRet0() | 0);
 $415 = (___muldi3(($343|0),0,-997805,-1)|0);
 $416 = (getTempRet0() | 0);
 $417 = (___muldi3(($343|0),0,136657,0)|0);
 $418 = (getTempRet0() | 0);
 $419 = (___muldi3(($343|0),0,-683901,-1)|0);
 $420 = (getTempRet0() | 0);
 $421 = (_i64Add(($419|0),($420|0),($238|0),0)|0);
 $422 = (getTempRet0() | 0);
 $423 = (_i64Add(($421|0),($422|0),($405|0),($406|0))|0);
 $424 = (getTempRet0() | 0);
 $425 = (_i64Add(($423|0),($424|0),($389|0),($390|0))|0);
 $426 = (getTempRet0() | 0);
 $427 = (___muldi3(($331|0),0,666643,0)|0);
 $428 = (getTempRet0() | 0);
 $429 = (___muldi3(($331|0),0,470296,0)|0);
 $430 = (getTempRet0() | 0);
 $431 = (___muldi3(($331|0),0,654183,0)|0);
 $432 = (getTempRet0() | 0);
 $433 = (___muldi3(($331|0),0,-997805,-1)|0);
 $434 = (getTempRet0() | 0);
 $435 = (___muldi3(($331|0),0,136657,0)|0);
 $436 = (getTempRet0() | 0);
 $437 = (___muldi3(($331|0),0,-683901,-1)|0);
 $438 = (getTempRet0() | 0);
 $439 = (___muldi3(($311|0),0,666643,0)|0);
 $440 = (getTempRet0() | 0);
 $441 = (___muldi3(($311|0),0,470296,0)|0);
 $442 = (getTempRet0() | 0);
 $443 = (___muldi3(($311|0),0,654183,0)|0);
 $444 = (getTempRet0() | 0);
 $445 = (___muldi3(($311|0),0,-997805,-1)|0);
 $446 = (getTempRet0() | 0);
 $447 = (___muldi3(($311|0),0,136657,0)|0);
 $448 = (getTempRet0() | 0);
 $449 = (___muldi3(($311|0),0,-683901,-1)|0);
 $450 = (getTempRet0() | 0);
 $451 = (_i64Add(($449|0),($450|0),($206|0),0)|0);
 $452 = (getTempRet0() | 0);
 $453 = (_i64Add(($451|0),($452|0),($435|0),($436|0))|0);
 $454 = (getTempRet0() | 0);
 $455 = (_i64Add(($453|0),($454|0),($415|0),($416|0))|0);
 $456 = (getTempRet0() | 0);
 $457 = (_i64Add(($455|0),($456|0),($401|0),($402|0))|0);
 $458 = (getTempRet0() | 0);
 $459 = (_i64Add(($457|0),($458|0),($385|0),($386|0))|0);
 $460 = (getTempRet0() | 0);
 $461 = (___muldi3(($291|0),0,666643,0)|0);
 $462 = (getTempRet0() | 0);
 $463 = (_i64Add(($461|0),($462|0),($113|0),0)|0);
 $464 = (getTempRet0() | 0);
 $465 = (___muldi3(($291|0),0,470296,0)|0);
 $466 = (getTempRet0() | 0);
 $467 = (___muldi3(($291|0),0,654183,0)|0);
 $468 = (getTempRet0() | 0);
 $469 = (_i64Add(($467|0),($468|0),($134|0),($128|0))|0);
 $470 = (getTempRet0() | 0);
 $471 = (_i64Add(($469|0),($470|0),($441|0),($442|0))|0);
 $472 = (getTempRet0() | 0);
 $473 = (_i64Add(($471|0),($472|0),($427|0),($428|0))|0);
 $474 = (getTempRet0() | 0);
 $475 = (___muldi3(($291|0),0,-997805,-1)|0);
 $476 = (getTempRet0() | 0);
 $477 = (___muldi3(($291|0),0,136657,0)|0);
 $478 = (getTempRet0() | 0);
 $479 = (_i64Add(($477|0),($478|0),($166|0),0)|0);
 $480 = (getTempRet0() | 0);
 $481 = (_i64Add(($479|0),($480|0),($445|0),($446|0))|0);
 $482 = (getTempRet0() | 0);
 $483 = (_i64Add(($481|0),($482|0),($431|0),($432|0))|0);
 $484 = (getTempRet0() | 0);
 $485 = (_i64Add(($483|0),($484|0),($411|0),($412|0))|0);
 $486 = (getTempRet0() | 0);
 $487 = (_i64Add(($485|0),($486|0),($397|0),($398|0))|0);
 $488 = (getTempRet0() | 0);
 $489 = (___muldi3(($291|0),0,-683901,-1)|0);
 $490 = (getTempRet0() | 0);
 $491 = (_i64Add(($463|0),($464|0),1048576,0)|0);
 $492 = (getTempRet0() | 0);
 $493 = (_bitshift64Lshr(($491|0),($492|0),21)|0);
 $494 = (getTempRet0() | 0);
 $495 = (_i64Add(($465|0),($466|0),($123|0),($124|0))|0);
 $496 = (getTempRet0() | 0);
 $497 = (_i64Add(($495|0),($496|0),($493|0),($494|0))|0);
 $498 = (getTempRet0() | 0);
 $499 = (_i64Add(($497|0),($498|0),($439|0),($440|0))|0);
 $500 = (getTempRet0() | 0);
 $501 = $491 & -2097152;
 $502 = $492 & 2047;
 $503 = (_i64Subtract(($463|0),($464|0),($501|0),($502|0))|0);
 $504 = (getTempRet0() | 0);
 $505 = (_i64Add(($473|0),($474|0),1048576,0)|0);
 $506 = (getTempRet0() | 0);
 $507 = (_bitshift64Lshr(($505|0),($506|0),21)|0);
 $508 = (getTempRet0() | 0);
 $509 = (_i64Add(($475|0),($476|0),($154|0),0)|0);
 $510 = (getTempRet0() | 0);
 $511 = (_i64Add(($509|0),($510|0),($443|0),($444|0))|0);
 $512 = (getTempRet0() | 0);
 $513 = (_i64Add(($511|0),($512|0),($429|0),($430|0))|0);
 $514 = (getTempRet0() | 0);
 $515 = (_i64Add(($513|0),($514|0),($409|0),($410|0))|0);
 $516 = (getTempRet0() | 0);
 $517 = (_i64Add(($515|0),($516|0),($507|0),($508|0))|0);
 $518 = (getTempRet0() | 0);
 $519 = $505 & -2097152;
 $520 = (_i64Add(($487|0),($488|0),1048576,0)|0);
 $521 = (getTempRet0() | 0);
 $522 = (_bitshift64Ashr(($520|0),($521|0),21)|0);
 $523 = (getTempRet0() | 0);
 $524 = (_i64Add(($489|0),($490|0),($186|0),0)|0);
 $525 = (getTempRet0() | 0);
 $526 = (_i64Add(($524|0),($525|0),($447|0),($448|0))|0);
 $527 = (getTempRet0() | 0);
 $528 = (_i64Add(($526|0),($527|0),($433|0),($434|0))|0);
 $529 = (getTempRet0() | 0);
 $530 = (_i64Add(($528|0),($529|0),($413|0),($414|0))|0);
 $531 = (getTempRet0() | 0);
 $532 = (_i64Add(($530|0),($531|0),($399|0),($400|0))|0);
 $533 = (getTempRet0() | 0);
 $534 = (_i64Add(($532|0),($533|0),($383|0),($384|0))|0);
 $535 = (getTempRet0() | 0);
 $536 = (_i64Add(($534|0),($535|0),($522|0),($523|0))|0);
 $537 = (getTempRet0() | 0);
 $538 = $520 & -2097152;
 $539 = (_i64Add(($459|0),($460|0),1048576,0)|0);
 $540 = (getTempRet0() | 0);
 $541 = (_bitshift64Ashr(($539|0),($540|0),21)|0);
 $542 = (getTempRet0() | 0);
 $543 = (_i64Add(($437|0),($438|0),($218|0),0)|0);
 $544 = (getTempRet0() | 0);
 $545 = (_i64Add(($543|0),($544|0),($417|0),($418|0))|0);
 $546 = (getTempRet0() | 0);
 $547 = (_i64Add(($545|0),($546|0),($403|0),($404|0))|0);
 $548 = (getTempRet0() | 0);
 $549 = (_i64Add(($547|0),($548|0),($387|0),($388|0))|0);
 $550 = (getTempRet0() | 0);
 $551 = (_i64Add(($549|0),($550|0),($541|0),($542|0))|0);
 $552 = (getTempRet0() | 0);
 $553 = $539 & -2097152;
 $554 = (_i64Subtract(($459|0),($460|0),($553|0),($540|0))|0);
 $555 = (getTempRet0() | 0);
 $556 = (_i64Add(($425|0),($426|0),1048576,0)|0);
 $557 = (getTempRet0() | 0);
 $558 = (_bitshift64Ashr(($556|0),($557|0),21)|0);
 $559 = (getTempRet0() | 0);
 $560 = (_i64Add(($407|0),($408|0),($248|0),($249|0))|0);
 $561 = (getTempRet0() | 0);
 $562 = (_i64Add(($560|0),($561|0),($391|0),($392|0))|0);
 $563 = (getTempRet0() | 0);
 $564 = (_i64Add(($562|0),($563|0),($558|0),($559|0))|0);
 $565 = (getTempRet0() | 0);
 $566 = $556 & -2097152;
 $567 = (_i64Subtract(($425|0),($426|0),($566|0),($557|0))|0);
 $568 = (getTempRet0() | 0);
 $569 = (_i64Add(($395|0),($396|0),1048576,0)|0);
 $570 = (getTempRet0() | 0);
 $571 = (_bitshift64Ashr(($569|0),($570|0),21)|0);
 $572 = (getTempRet0() | 0);
 $573 = (_i64Add(($571|0),($572|0),($279|0),0)|0);
 $574 = (getTempRet0() | 0);
 $575 = $569 & -2097152;
 $576 = (_i64Subtract(($395|0),($396|0),($575|0),($570|0))|0);
 $577 = (getTempRet0() | 0);
 $578 = (_i64Add(($499|0),($500|0),1048576,0)|0);
 $579 = (getTempRet0() | 0);
 $580 = (_bitshift64Lshr(($578|0),($579|0),21)|0);
 $581 = (getTempRet0() | 0);
 $582 = $578 & -2097152;
 $583 = (_i64Subtract(($499|0),($500|0),($582|0),($579|0))|0);
 $584 = (getTempRet0() | 0);
 $585 = (_i64Add(($517|0),($518|0),1048576,0)|0);
 $586 = (getTempRet0() | 0);
 $587 = (_bitshift64Ashr(($585|0),($586|0),21)|0);
 $588 = (getTempRet0() | 0);
 $589 = $585 & -2097152;
 $590 = (_i64Subtract(($517|0),($518|0),($589|0),($586|0))|0);
 $591 = (getTempRet0() | 0);
 $592 = (_i64Add(($536|0),($537|0),1048576,0)|0);
 $593 = (getTempRet0() | 0);
 $594 = (_bitshift64Ashr(($592|0),($593|0),21)|0);
 $595 = (getTempRet0() | 0);
 $596 = (_i64Add(($594|0),($595|0),($554|0),($555|0))|0);
 $597 = (getTempRet0() | 0);
 $598 = $592 & -2097152;
 $599 = (_i64Subtract(($536|0),($537|0),($598|0),($593|0))|0);
 $600 = (getTempRet0() | 0);
 $601 = (_i64Add(($551|0),($552|0),1048576,0)|0);
 $602 = (getTempRet0() | 0);
 $603 = (_bitshift64Ashr(($601|0),($602|0),21)|0);
 $604 = (getTempRet0() | 0);
 $605 = (_i64Add(($603|0),($604|0),($567|0),($568|0))|0);
 $606 = (getTempRet0() | 0);
 $607 = $601 & -2097152;
 $608 = (_i64Subtract(($551|0),($552|0),($607|0),($602|0))|0);
 $609 = (getTempRet0() | 0);
 $610 = (_i64Add(($564|0),($565|0),1048576,0)|0);
 $611 = (getTempRet0() | 0);
 $612 = (_bitshift64Ashr(($610|0),($611|0),21)|0);
 $613 = (getTempRet0() | 0);
 $614 = (_i64Add(($612|0),($613|0),($576|0),($577|0))|0);
 $615 = (getTempRet0() | 0);
 $616 = $610 & -2097152;
 $617 = (_i64Subtract(($564|0),($565|0),($616|0),($611|0))|0);
 $618 = (getTempRet0() | 0);
 $619 = (___muldi3(($573|0),($574|0),666643,0)|0);
 $620 = (getTempRet0() | 0);
 $621 = (_i64Add(($619|0),($620|0),($93|0),0)|0);
 $622 = (getTempRet0() | 0);
 $623 = (___muldi3(($573|0),($574|0),470296,0)|0);
 $624 = (getTempRet0() | 0);
 $625 = (_i64Add(($503|0),($504|0),($623|0),($624|0))|0);
 $626 = (getTempRet0() | 0);
 $627 = (___muldi3(($573|0),($574|0),654183,0)|0);
 $628 = (getTempRet0() | 0);
 $629 = (_i64Add(($583|0),($584|0),($627|0),($628|0))|0);
 $630 = (getTempRet0() | 0);
 $631 = (___muldi3(($573|0),($574|0),-997805,-1)|0);
 $632 = (getTempRet0() | 0);
 $633 = (___muldi3(($573|0),($574|0),136657,0)|0);
 $634 = (getTempRet0() | 0);
 $635 = (_i64Add(($590|0),($591|0),($633|0),($634|0))|0);
 $636 = (getTempRet0() | 0);
 $637 = (___muldi3(($573|0),($574|0),-683901,-1)|0);
 $638 = (getTempRet0() | 0);
 $639 = (_i64Add(($487|0),($488|0),($587|0),($588|0))|0);
 $640 = (getTempRet0() | 0);
 $641 = (_i64Subtract(($639|0),($640|0),($538|0),($521|0))|0);
 $642 = (getTempRet0() | 0);
 $643 = (_i64Add(($641|0),($642|0),($637|0),($638|0))|0);
 $644 = (getTempRet0() | 0);
 $645 = (___muldi3(($614|0),($615|0),666643,0)|0);
 $646 = (getTempRet0() | 0);
 $647 = (_i64Add(($645|0),($646|0),($81|0),0)|0);
 $648 = (getTempRet0() | 0);
 $649 = (___muldi3(($614|0),($615|0),470296,0)|0);
 $650 = (getTempRet0() | 0);
 $651 = (_i64Add(($621|0),($622|0),($649|0),($650|0))|0);
 $652 = (getTempRet0() | 0);
 $653 = (___muldi3(($614|0),($615|0),654183,0)|0);
 $654 = (getTempRet0() | 0);
 $655 = (_i64Add(($625|0),($626|0),($653|0),($654|0))|0);
 $656 = (getTempRet0() | 0);
 $657 = (___muldi3(($614|0),($615|0),-997805,-1)|0);
 $658 = (getTempRet0() | 0);
 $659 = (_i64Add(($629|0),($630|0),($657|0),($658|0))|0);
 $660 = (getTempRet0() | 0);
 $661 = (___muldi3(($614|0),($615|0),136657,0)|0);
 $662 = (getTempRet0() | 0);
 $663 = (___muldi3(($614|0),($615|0),-683901,-1)|0);
 $664 = (getTempRet0() | 0);
 $665 = (_i64Add(($635|0),($636|0),($663|0),($664|0))|0);
 $666 = (getTempRet0() | 0);
 $667 = (___muldi3(($617|0),($618|0),666643,0)|0);
 $668 = (getTempRet0() | 0);
 $669 = (_i64Add(($667|0),($668|0),($61|0),0)|0);
 $670 = (getTempRet0() | 0);
 $671 = (___muldi3(($617|0),($618|0),470296,0)|0);
 $672 = (getTempRet0() | 0);
 $673 = (_i64Add(($647|0),($648|0),($671|0),($672|0))|0);
 $674 = (getTempRet0() | 0);
 $675 = (___muldi3(($617|0),($618|0),654183,0)|0);
 $676 = (getTempRet0() | 0);
 $677 = (_i64Add(($651|0),($652|0),($675|0),($676|0))|0);
 $678 = (getTempRet0() | 0);
 $679 = (___muldi3(($617|0),($618|0),-997805,-1)|0);
 $680 = (getTempRet0() | 0);
 $681 = (_i64Add(($655|0),($656|0),($679|0),($680|0))|0);
 $682 = (getTempRet0() | 0);
 $683 = (___muldi3(($617|0),($618|0),136657,0)|0);
 $684 = (getTempRet0() | 0);
 $685 = (_i64Add(($659|0),($660|0),($683|0),($684|0))|0);
 $686 = (getTempRet0() | 0);
 $687 = (___muldi3(($617|0),($618|0),-683901,-1)|0);
 $688 = (getTempRet0() | 0);
 $689 = (_i64Add(($473|0),($474|0),($580|0),($581|0))|0);
 $690 = (getTempRet0() | 0);
 $691 = (_i64Subtract(($689|0),($690|0),($519|0),($506|0))|0);
 $692 = (getTempRet0() | 0);
 $693 = (_i64Add(($691|0),($692|0),($631|0),($632|0))|0);
 $694 = (getTempRet0() | 0);
 $695 = (_i64Add(($693|0),($694|0),($661|0),($662|0))|0);
 $696 = (getTempRet0() | 0);
 $697 = (_i64Add(($695|0),($696|0),($687|0),($688|0))|0);
 $698 = (getTempRet0() | 0);
 $699 = (___muldi3(($605|0),($606|0),666643,0)|0);
 $700 = (getTempRet0() | 0);
 $701 = (___muldi3(($605|0),($606|0),470296,0)|0);
 $702 = (getTempRet0() | 0);
 $703 = (___muldi3(($605|0),($606|0),654183,0)|0);
 $704 = (getTempRet0() | 0);
 $705 = (___muldi3(($605|0),($606|0),-997805,-1)|0);
 $706 = (getTempRet0() | 0);
 $707 = (___muldi3(($605|0),($606|0),136657,0)|0);
 $708 = (getTempRet0() | 0);
 $709 = (_i64Add(($681|0),($682|0),($707|0),($708|0))|0);
 $710 = (getTempRet0() | 0);
 $711 = (___muldi3(($605|0),($606|0),-683901,-1)|0);
 $712 = (getTempRet0() | 0);
 $713 = (_i64Add(($685|0),($686|0),($711|0),($712|0))|0);
 $714 = (getTempRet0() | 0);
 $715 = (___muldi3(($608|0),($609|0),666643,0)|0);
 $716 = (getTempRet0() | 0);
 $717 = (___muldi3(($608|0),($609|0),470296,0)|0);
 $718 = (getTempRet0() | 0);
 $719 = (___muldi3(($608|0),($609|0),654183,0)|0);
 $720 = (getTempRet0() | 0);
 $721 = (___muldi3(($608|0),($609|0),-997805,-1)|0);
 $722 = (getTempRet0() | 0);
 $723 = (___muldi3(($608|0),($609|0),136657,0)|0);
 $724 = (getTempRet0() | 0);
 $725 = (___muldi3(($608|0),($609|0),-683901,-1)|0);
 $726 = (getTempRet0() | 0);
 $727 = (_i64Add(($709|0),($710|0),($725|0),($726|0))|0);
 $728 = (getTempRet0() | 0);
 $729 = (___muldi3(($596|0),($597|0),666643,0)|0);
 $730 = (getTempRet0() | 0);
 $731 = (_i64Add(($729|0),($730|0),($9|0),($3|0))|0);
 $732 = (getTempRet0() | 0);
 $733 = (___muldi3(($596|0),($597|0),470296,0)|0);
 $734 = (getTempRet0() | 0);
 $735 = (___muldi3(($596|0),($597|0),654183,0)|0);
 $736 = (getTempRet0() | 0);
 $737 = (_i64Add(($735|0),($736|0),($41|0),0)|0);
 $738 = (getTempRet0() | 0);
 $739 = (_i64Add(($737|0),($738|0),($699|0),($700|0))|0);
 $740 = (getTempRet0() | 0);
 $741 = (_i64Add(($739|0),($740|0),($717|0),($718|0))|0);
 $742 = (getTempRet0() | 0);
 $743 = (___muldi3(($596|0),($597|0),-997805,-1)|0);
 $744 = (getTempRet0() | 0);
 $745 = (___muldi3(($596|0),($597|0),136657,0)|0);
 $746 = (getTempRet0() | 0);
 $747 = (_i64Add(($673|0),($674|0),($745|0),($746|0))|0);
 $748 = (getTempRet0() | 0);
 $749 = (_i64Add(($747|0),($748|0),($703|0),($704|0))|0);
 $750 = (getTempRet0() | 0);
 $751 = (_i64Add(($749|0),($750|0),($721|0),($722|0))|0);
 $752 = (getTempRet0() | 0);
 $753 = (___muldi3(($596|0),($597|0),-683901,-1)|0);
 $754 = (getTempRet0() | 0);
 $755 = (_i64Add(($731|0),($732|0),1048576,0)|0);
 $756 = (getTempRet0() | 0);
 $757 = (_bitshift64Ashr(($755|0),($756|0),21)|0);
 $758 = (getTempRet0() | 0);
 $759 = (_i64Add(($733|0),($734|0),($29|0),0)|0);
 $760 = (getTempRet0() | 0);
 $761 = (_i64Add(($759|0),($760|0),($715|0),($716|0))|0);
 $762 = (getTempRet0() | 0);
 $763 = (_i64Add(($761|0),($762|0),($757|0),($758|0))|0);
 $764 = (getTempRet0() | 0);
 $765 = $755 & -2097152;
 $766 = (_i64Subtract(($731|0),($732|0),($765|0),($756|0))|0);
 $767 = (getTempRet0() | 0);
 $768 = (_i64Add(($741|0),($742|0),1048576,0)|0);
 $769 = (getTempRet0() | 0);
 $770 = (_bitshift64Ashr(($768|0),($769|0),21)|0);
 $771 = (getTempRet0() | 0);
 $772 = (_i64Add(($669|0),($670|0),($743|0),($744|0))|0);
 $773 = (getTempRet0() | 0);
 $774 = (_i64Add(($772|0),($773|0),($701|0),($702|0))|0);
 $775 = (getTempRet0() | 0);
 $776 = (_i64Add(($774|0),($775|0),($719|0),($720|0))|0);
 $777 = (getTempRet0() | 0);
 $778 = (_i64Add(($776|0),($777|0),($770|0),($771|0))|0);
 $779 = (getTempRet0() | 0);
 $780 = $768 & -2097152;
 $781 = (_i64Add(($751|0),($752|0),1048576,0)|0);
 $782 = (getTempRet0() | 0);
 $783 = (_bitshift64Ashr(($781|0),($782|0),21)|0);
 $784 = (getTempRet0() | 0);
 $785 = (_i64Add(($677|0),($678|0),($753|0),($754|0))|0);
 $786 = (getTempRet0() | 0);
 $787 = (_i64Add(($785|0),($786|0),($705|0),($706|0))|0);
 $788 = (getTempRet0() | 0);
 $789 = (_i64Add(($787|0),($788|0),($723|0),($724|0))|0);
 $790 = (getTempRet0() | 0);
 $791 = (_i64Add(($789|0),($790|0),($783|0),($784|0))|0);
 $792 = (getTempRet0() | 0);
 $793 = $781 & -2097152;
 $794 = (_i64Add(($727|0),($728|0),1048576,0)|0);
 $795 = (getTempRet0() | 0);
 $796 = (_bitshift64Ashr(($794|0),($795|0),21)|0);
 $797 = (getTempRet0() | 0);
 $798 = (_i64Add(($713|0),($714|0),($796|0),($797|0))|0);
 $799 = (getTempRet0() | 0);
 $800 = $794 & -2097152;
 $801 = (_i64Subtract(($727|0),($728|0),($800|0),($795|0))|0);
 $802 = (getTempRet0() | 0);
 $803 = (_i64Add(($697|0),($698|0),1048576,0)|0);
 $804 = (getTempRet0() | 0);
 $805 = (_bitshift64Ashr(($803|0),($804|0),21)|0);
 $806 = (getTempRet0() | 0);
 $807 = (_i64Add(($665|0),($666|0),($805|0),($806|0))|0);
 $808 = (getTempRet0() | 0);
 $809 = $803 & -2097152;
 $810 = (_i64Subtract(($697|0),($698|0),($809|0),($804|0))|0);
 $811 = (getTempRet0() | 0);
 $812 = (_i64Add(($643|0),($644|0),1048576,0)|0);
 $813 = (getTempRet0() | 0);
 $814 = (_bitshift64Ashr(($812|0),($813|0),21)|0);
 $815 = (getTempRet0() | 0);
 $816 = (_i64Add(($599|0),($600|0),($814|0),($815|0))|0);
 $817 = (getTempRet0() | 0);
 $818 = $812 & -2097152;
 $819 = (_i64Subtract(($643|0),($644|0),($818|0),($813|0))|0);
 $820 = (getTempRet0() | 0);
 $821 = (_i64Add(($763|0),($764|0),1048576,0)|0);
 $822 = (getTempRet0() | 0);
 $823 = (_bitshift64Ashr(($821|0),($822|0),21)|0);
 $824 = (getTempRet0() | 0);
 $825 = $821 & -2097152;
 $826 = (_i64Add(($778|0),($779|0),1048576,0)|0);
 $827 = (getTempRet0() | 0);
 $828 = (_bitshift64Ashr(($826|0),($827|0),21)|0);
 $829 = (getTempRet0() | 0);
 $830 = $826 & -2097152;
 $831 = (_i64Add(($791|0),($792|0),1048576,0)|0);
 $832 = (getTempRet0() | 0);
 $833 = (_bitshift64Ashr(($831|0),($832|0),21)|0);
 $834 = (getTempRet0() | 0);
 $835 = (_i64Add(($801|0),($802|0),($833|0),($834|0))|0);
 $836 = (getTempRet0() | 0);
 $837 = $831 & -2097152;
 $838 = (_i64Add(($798|0),($799|0),1048576,0)|0);
 $839 = (getTempRet0() | 0);
 $840 = (_bitshift64Ashr(($838|0),($839|0),21)|0);
 $841 = (getTempRet0() | 0);
 $842 = (_i64Add(($810|0),($811|0),($840|0),($841|0))|0);
 $843 = (getTempRet0() | 0);
 $844 = $838 & -2097152;
 $845 = (_i64Subtract(($798|0),($799|0),($844|0),($839|0))|0);
 $846 = (getTempRet0() | 0);
 $847 = (_i64Add(($807|0),($808|0),1048576,0)|0);
 $848 = (getTempRet0() | 0);
 $849 = (_bitshift64Ashr(($847|0),($848|0),21)|0);
 $850 = (getTempRet0() | 0);
 $851 = (_i64Add(($819|0),($820|0),($849|0),($850|0))|0);
 $852 = (getTempRet0() | 0);
 $853 = $847 & -2097152;
 $854 = (_i64Subtract(($807|0),($808|0),($853|0),($848|0))|0);
 $855 = (getTempRet0() | 0);
 $856 = (_i64Add(($816|0),($817|0),1048576,0)|0);
 $857 = (getTempRet0() | 0);
 $858 = (_bitshift64Ashr(($856|0),($857|0),21)|0);
 $859 = (getTempRet0() | 0);
 $860 = $856 & -2097152;
 $861 = (_i64Subtract(($816|0),($817|0),($860|0),($857|0))|0);
 $862 = (getTempRet0() | 0);
 $863 = (___muldi3(($858|0),($859|0),666643,0)|0);
 $864 = (getTempRet0() | 0);
 $865 = (_i64Add(($766|0),($767|0),($863|0),($864|0))|0);
 $866 = (getTempRet0() | 0);
 $867 = (___muldi3(($858|0),($859|0),470296,0)|0);
 $868 = (getTempRet0() | 0);
 $869 = (___muldi3(($858|0),($859|0),654183,0)|0);
 $870 = (getTempRet0() | 0);
 $871 = (___muldi3(($858|0),($859|0),-997805,-1)|0);
 $872 = (getTempRet0() | 0);
 $873 = (___muldi3(($858|0),($859|0),136657,0)|0);
 $874 = (getTempRet0() | 0);
 $875 = (___muldi3(($858|0),($859|0),-683901,-1)|0);
 $876 = (getTempRet0() | 0);
 $877 = (_bitshift64Ashr(($865|0),($866|0),21)|0);
 $878 = (getTempRet0() | 0);
 $879 = (_i64Add(($763|0),($764|0),($867|0),($868|0))|0);
 $880 = (getTempRet0() | 0);
 $881 = (_i64Subtract(($879|0),($880|0),($825|0),($822|0))|0);
 $882 = (getTempRet0() | 0);
 $883 = (_i64Add(($881|0),($882|0),($877|0),($878|0))|0);
 $884 = (getTempRet0() | 0);
 $885 = $865 & 2097151;
 $886 = (_bitshift64Ashr(($883|0),($884|0),21)|0);
 $887 = (getTempRet0() | 0);
 $888 = (_i64Add(($741|0),($742|0),($869|0),($870|0))|0);
 $889 = (getTempRet0() | 0);
 $890 = (_i64Subtract(($888|0),($889|0),($780|0),($769|0))|0);
 $891 = (getTempRet0() | 0);
 $892 = (_i64Add(($890|0),($891|0),($823|0),($824|0))|0);
 $893 = (getTempRet0() | 0);
 $894 = (_i64Add(($892|0),($893|0),($886|0),($887|0))|0);
 $895 = (getTempRet0() | 0);
 $896 = $883 & 2097151;
 $897 = (_bitshift64Ashr(($894|0),($895|0),21)|0);
 $898 = (getTempRet0() | 0);
 $899 = (_i64Add(($778|0),($779|0),($871|0),($872|0))|0);
 $900 = (getTempRet0() | 0);
 $901 = (_i64Subtract(($899|0),($900|0),($830|0),($827|0))|0);
 $902 = (getTempRet0() | 0);
 $903 = (_i64Add(($901|0),($902|0),($897|0),($898|0))|0);
 $904 = (getTempRet0() | 0);
 $905 = $894 & 2097151;
 $906 = (_bitshift64Ashr(($903|0),($904|0),21)|0);
 $907 = (getTempRet0() | 0);
 $908 = (_i64Add(($751|0),($752|0),($873|0),($874|0))|0);
 $909 = (getTempRet0() | 0);
 $910 = (_i64Subtract(($908|0),($909|0),($793|0),($782|0))|0);
 $911 = (getTempRet0() | 0);
 $912 = (_i64Add(($910|0),($911|0),($828|0),($829|0))|0);
 $913 = (getTempRet0() | 0);
 $914 = (_i64Add(($912|0),($913|0),($906|0),($907|0))|0);
 $915 = (getTempRet0() | 0);
 $916 = $903 & 2097151;
 $917 = (_bitshift64Ashr(($914|0),($915|0),21)|0);
 $918 = (getTempRet0() | 0);
 $919 = (_i64Add(($791|0),($792|0),($875|0),($876|0))|0);
 $920 = (getTempRet0() | 0);
 $921 = (_i64Subtract(($919|0),($920|0),($837|0),($832|0))|0);
 $922 = (getTempRet0() | 0);
 $923 = (_i64Add(($921|0),($922|0),($917|0),($918|0))|0);
 $924 = (getTempRet0() | 0);
 $925 = $914 & 2097151;
 $926 = (_bitshift64Ashr(($923|0),($924|0),21)|0);
 $927 = (getTempRet0() | 0);
 $928 = (_i64Add(($835|0),($836|0),($926|0),($927|0))|0);
 $929 = (getTempRet0() | 0);
 $930 = $923 & 2097151;
 $931 = (_bitshift64Ashr(($928|0),($929|0),21)|0);
 $932 = (getTempRet0() | 0);
 $933 = (_i64Add(($931|0),($932|0),($845|0),($846|0))|0);
 $934 = (getTempRet0() | 0);
 $935 = $928 & 2097151;
 $936 = (_bitshift64Ashr(($933|0),($934|0),21)|0);
 $937 = (getTempRet0() | 0);
 $938 = (_i64Add(($842|0),($843|0),($936|0),($937|0))|0);
 $939 = (getTempRet0() | 0);
 $940 = $933 & 2097151;
 $941 = (_bitshift64Ashr(($938|0),($939|0),21)|0);
 $942 = (getTempRet0() | 0);
 $943 = (_i64Add(($941|0),($942|0),($854|0),($855|0))|0);
 $944 = (getTempRet0() | 0);
 $945 = $938 & 2097151;
 $946 = (_bitshift64Ashr(($943|0),($944|0),21)|0);
 $947 = (getTempRet0() | 0);
 $948 = (_i64Add(($851|0),($852|0),($946|0),($947|0))|0);
 $949 = (getTempRet0() | 0);
 $950 = $943 & 2097151;
 $951 = (_bitshift64Ashr(($948|0),($949|0),21)|0);
 $952 = (getTempRet0() | 0);
 $953 = (_i64Add(($951|0),($952|0),($861|0),($862|0))|0);
 $954 = (getTempRet0() | 0);
 $955 = $948 & 2097151;
 $956 = (_bitshift64Ashr(($953|0),($954|0),21)|0);
 $957 = (getTempRet0() | 0);
 $958 = $953 & 2097151;
 $959 = (___muldi3(($956|0),($957|0),666643,0)|0);
 $960 = (getTempRet0() | 0);
 $961 = (_i64Add(($959|0),($960|0),($885|0),0)|0);
 $962 = (getTempRet0() | 0);
 $963 = (___muldi3(($956|0),($957|0),470296,0)|0);
 $964 = (getTempRet0() | 0);
 $965 = (_i64Add(($963|0),($964|0),($896|0),0)|0);
 $966 = (getTempRet0() | 0);
 $967 = (___muldi3(($956|0),($957|0),654183,0)|0);
 $968 = (getTempRet0() | 0);
 $969 = (_i64Add(($967|0),($968|0),($905|0),0)|0);
 $970 = (getTempRet0() | 0);
 $971 = (___muldi3(($956|0),($957|0),-997805,-1)|0);
 $972 = (getTempRet0() | 0);
 $973 = (_i64Add(($971|0),($972|0),($916|0),0)|0);
 $974 = (getTempRet0() | 0);
 $975 = (___muldi3(($956|0),($957|0),136657,0)|0);
 $976 = (getTempRet0() | 0);
 $977 = (_i64Add(($975|0),($976|0),($925|0),0)|0);
 $978 = (getTempRet0() | 0);
 $979 = (___muldi3(($956|0),($957|0),-683901,-1)|0);
 $980 = (getTempRet0() | 0);
 $981 = (_i64Add(($979|0),($980|0),($930|0),0)|0);
 $982 = (getTempRet0() | 0);
 $983 = (_bitshift64Ashr(($961|0),($962|0),21)|0);
 $984 = (getTempRet0() | 0);
 $985 = (_i64Add(($965|0),($966|0),($983|0),($984|0))|0);
 $986 = (getTempRet0() | 0);
 $987 = (_bitshift64Ashr(($985|0),($986|0),21)|0);
 $988 = (getTempRet0() | 0);
 $989 = (_i64Add(($969|0),($970|0),($987|0),($988|0))|0);
 $990 = (getTempRet0() | 0);
 $991 = $985 & 2097151;
 $992 = (_bitshift64Ashr(($989|0),($990|0),21)|0);
 $993 = (getTempRet0() | 0);
 $994 = (_i64Add(($973|0),($974|0),($992|0),($993|0))|0);
 $995 = (getTempRet0() | 0);
 $996 = $989 & 2097151;
 $997 = (_bitshift64Ashr(($994|0),($995|0),21)|0);
 $998 = (getTempRet0() | 0);
 $999 = (_i64Add(($977|0),($978|0),($997|0),($998|0))|0);
 $1000 = (getTempRet0() | 0);
 $1001 = $994 & 2097151;
 $1002 = (_bitshift64Ashr(($999|0),($1000|0),21)|0);
 $1003 = (getTempRet0() | 0);
 $1004 = (_i64Add(($981|0),($982|0),($1002|0),($1003|0))|0);
 $1005 = (getTempRet0() | 0);
 $1006 = $999 & 2097151;
 $1007 = (_bitshift64Ashr(($1004|0),($1005|0),21)|0);
 $1008 = (getTempRet0() | 0);
 $1009 = (_i64Add(($1007|0),($1008|0),($935|0),0)|0);
 $1010 = (getTempRet0() | 0);
 $1011 = $1004 & 2097151;
 $1012 = (_bitshift64Ashr(($1009|0),($1010|0),21)|0);
 $1013 = (getTempRet0() | 0);
 $1014 = (_i64Add(($1012|0),($1013|0),($940|0),0)|0);
 $1015 = (getTempRet0() | 0);
 $1016 = $1009 & 2097151;
 $1017 = (_bitshift64Ashr(($1014|0),($1015|0),21)|0);
 $1018 = (getTempRet0() | 0);
 $1019 = (_i64Add(($1017|0),($1018|0),($945|0),0)|0);
 $1020 = (getTempRet0() | 0);
 $1021 = (_bitshift64Ashr(($1019|0),($1020|0),21)|0);
 $1022 = (getTempRet0() | 0);
 $1023 = (_i64Add(($1021|0),($1022|0),($950|0),0)|0);
 $1024 = (getTempRet0() | 0);
 $1025 = (_bitshift64Ashr(($1023|0),($1024|0),21)|0);
 $1026 = (getTempRet0() | 0);
 $1027 = (_i64Add(($1025|0),($1026|0),($955|0),0)|0);
 $1028 = (getTempRet0() | 0);
 $1029 = $1023 & 2097151;
 $1030 = (_bitshift64Ashr(($1027|0),($1028|0),21)|0);
 $1031 = (getTempRet0() | 0);
 $1032 = (_i64Add(($1030|0),($1031|0),($958|0),0)|0);
 $1033 = (getTempRet0() | 0);
 $1034 = $1027 & 2097151;
 $1035 = $961&255;
 HEAP8[$s>>0] = $1035;
 $1036 = (_bitshift64Lshr(($961|0),($962|0),8)|0);
 $1037 = (getTempRet0() | 0);
 $1038 = $1036&255;
 HEAP8[$s$idx>>0] = $1038;
 $1039 = (_bitshift64Lshr(($961|0),($962|0),16)|0);
 $1040 = (getTempRet0() | 0);
 $1041 = $1039 & 31;
 $1042 = (_bitshift64Shl(($991|0),0,5)|0);
 $1043 = (getTempRet0() | 0);
 $1044 = $1042 | $1041;
 $1045 = $1044&255;
 HEAP8[$s$idx506>>0] = $1045;
 $1046 = (_bitshift64Lshr(($985|0),($986|0),3)|0);
 $1047 = (getTempRet0() | 0);
 $1048 = $1046&255;
 HEAP8[$arrayidx1$i728>>0] = $1048;
 $1049 = (_bitshift64Lshr(($985|0),($986|0),11)|0);
 $1050 = (getTempRet0() | 0);
 $1051 = $1049&255;
 HEAP8[$arrayidx3$i732>>0] = $1051;
 $1052 = (_bitshift64Lshr(($991|0),0,19)|0);
 $1053 = (getTempRet0() | 0);
 $1054 = (_bitshift64Shl(($996|0),0,2)|0);
 $1055 = (getTempRet0() | 0);
 $1056 = $1054 | $1052;
 $1055 | $1053;
 $1057 = $1056&255;
 HEAP8[$arrayidx7$i736>>0] = $1057;
 $1058 = (_bitshift64Lshr(($989|0),($990|0),6)|0);
 $1059 = (getTempRet0() | 0);
 $1060 = $1058&255;
 HEAP8[$add$ptr3$idx>>0] = $1060;
 $1061 = (_bitshift64Lshr(($996|0),0,14)|0);
 $1062 = (getTempRet0() | 0);
 $1063 = (_bitshift64Shl(($1001|0),0,7)|0);
 $1064 = (getTempRet0() | 0);
 $1065 = $1063 | $1061;
 $1064 | $1062;
 $1066 = $1065&255;
 HEAP8[$add$ptr3$idx505>>0] = $1066;
 $1067 = (_bitshift64Lshr(($994|0),($995|0),1)|0);
 $1068 = (getTempRet0() | 0);
 $1069 = $1067&255;
 HEAP8[$arrayidx1$i708>>0] = $1069;
 $1070 = (_bitshift64Lshr(($994|0),($995|0),9)|0);
 $1071 = (getTempRet0() | 0);
 $1072 = $1070&255;
 HEAP8[$arrayidx3$i712>>0] = $1072;
 $1073 = (_bitshift64Lshr(($1001|0),0,17)|0);
 $1074 = (getTempRet0() | 0);
 $1075 = (_bitshift64Shl(($1006|0),0,4)|0);
 $1076 = (getTempRet0() | 0);
 $1077 = $1075 | $1073;
 $1076 | $1074;
 $1078 = $1077&255;
 HEAP8[$arrayidx7$i716>>0] = $1078;
 $1079 = (_bitshift64Lshr(($999|0),($1000|0),4)|0);
 $1080 = (getTempRet0() | 0);
 $1081 = $1079&255;
 HEAP8[$arrayidx1$i695>>0] = $1081;
 $1082 = (_bitshift64Lshr(($999|0),($1000|0),12)|0);
 $1083 = (getTempRet0() | 0);
 $1084 = $1082&255;
 HEAP8[$arrayidx3$i699>>0] = $1084;
 $1085 = (_bitshift64Lshr(($1006|0),0,20)|0);
 $1086 = (getTempRet0() | 0);
 $1087 = (_bitshift64Shl(($1011|0),0,1)|0);
 $1088 = (getTempRet0() | 0);
 $1089 = $1087 | $1085;
 $1088 | $1086;
 $1090 = $1089&255;
 HEAP8[$arrayidx7$i703>>0] = $1090;
 $1091 = (_bitshift64Lshr(($1004|0),($1005|0),7)|0);
 $1092 = (getTempRet0() | 0);
 $1093 = $1091&255;
 HEAP8[$add$ptr15$idx>>0] = $1093;
 $1094 = (_bitshift64Lshr(($1011|0),0,15)|0);
 $1095 = (getTempRet0() | 0);
 $1096 = (_bitshift64Shl(($1016|0),0,6)|0);
 $1097 = (getTempRet0() | 0);
 $1098 = $1096 | $1094;
 $1097 | $1095;
 $1099 = $1098&255;
 HEAP8[$add$ptr15$idx504>>0] = $1099;
 $1100 = (_bitshift64Lshr(($1009|0),($1010|0),2)|0);
 $1101 = (getTempRet0() | 0);
 $1102 = $1100&255;
 HEAP8[$arrayidx1$i675>>0] = $1102;
 $1103 = (_bitshift64Lshr(($1009|0),($1010|0),10)|0);
 $1104 = (getTempRet0() | 0);
 $1105 = $1103&255;
 HEAP8[$arrayidx3$i679>>0] = $1105;
 $1106 = (_bitshift64Lshr(($1016|0),0,18)|0);
 $1107 = (getTempRet0() | 0);
 $1108 = (_bitshift64Shl(($1014|0),($1015|0),3)|0);
 $1109 = (getTempRet0() | 0);
 $1110 = $1108 | $1106;
 $1109 | $1107;
 $1111 = $1110&255;
 HEAP8[$arrayidx7$i683>>0] = $1111;
 $1112 = (_bitshift64Lshr(($1014|0),($1015|0),5)|0);
 $1113 = (getTempRet0() | 0);
 $1114 = $1112&255;
 HEAP8[$add$ptr23$idx>>0] = $1114;
 $1115 = (_bitshift64Lshr(($1014|0),($1015|0),13)|0);
 $1116 = (getTempRet0() | 0);
 $1117 = $1115&255;
 HEAP8[$add$ptr23$idx503>>0] = $1117;
 $1118 = $1019&255;
 HEAP8[$add$ptr27>>0] = $1118;
 $1119 = (_bitshift64Lshr(($1019|0),($1020|0),8)|0);
 $1120 = (getTempRet0() | 0);
 $1121 = $1119&255;
 HEAP8[$add$ptr27$idx>>0] = $1121;
 $1122 = (_bitshift64Lshr(($1019|0),($1020|0),16)|0);
 $1123 = (getTempRet0() | 0);
 $1124 = $1122 & 31;
 $1125 = (_bitshift64Shl(($1029|0),0,5)|0);
 $1126 = (getTempRet0() | 0);
 $1127 = $1125 | $1124;
 $1128 = $1127&255;
 HEAP8[$add$ptr27$idx502>>0] = $1128;
 $1129 = (_bitshift64Lshr(($1023|0),($1024|0),3)|0);
 $1130 = (getTempRet0() | 0);
 $1131 = $1129&255;
 HEAP8[$arrayidx1$i648>>0] = $1131;
 $1132 = (_bitshift64Lshr(($1023|0),($1024|0),11)|0);
 $1133 = (getTempRet0() | 0);
 $1134 = $1132&255;
 HEAP8[$arrayidx3$i652>>0] = $1134;
 $1135 = (_bitshift64Lshr(($1029|0),0,19)|0);
 $1136 = (getTempRet0() | 0);
 $1137 = (_bitshift64Shl(($1034|0),0,2)|0);
 $1138 = (getTempRet0() | 0);
 $1139 = $1137 | $1135;
 $1138 | $1136;
 $1140 = $1139&255;
 HEAP8[$arrayidx7$i656>>0] = $1140;
 $1141 = (_bitshift64Lshr(($1027|0),($1028|0),6)|0);
 $1142 = (getTempRet0() | 0);
 $1143 = $1141&255;
 HEAP8[$add$ptr34$idx>>0] = $1143;
 $1144 = (_bitshift64Lshr(($1034|0),0,14)|0);
 $1145 = (getTempRet0() | 0);
 $1146 = (_bitshift64Shl(($1032|0),($1033|0),7)|0);
 $1147 = (getTempRet0() | 0);
 $1148 = $1146 | $1144;
 $1147 | $1145;
 $1149 = $1148&255;
 HEAP8[$add$ptr34$idx501>>0] = $1149;
 $1150 = (_bitshift64Lshr(($1032|0),($1033|0),1)|0);
 $1151 = (getTempRet0() | 0);
 $1152 = $1150&255;
 HEAP8[$arrayidx1$i628>>0] = $1152;
 $1153 = (_bitshift64Lshr(($1032|0),($1033|0),9)|0);
 $1154 = (getTempRet0() | 0);
 $1155 = $1153&255;
 HEAP8[$arrayidx3$i632>>0] = $1155;
 $1156 = (_bitshift64Ashr(($1032|0),($1033|0),17)|0);
 $1157 = (getTempRet0() | 0);
 $1158 = $1156&255;
 HEAP8[$arrayidx7$i636>>0] = $1158;
 return;
}
function _ge_scalarmult($r,$a,$A) {
 $r = $r|0;
 $a = $a|0;
 $A = $A|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Ai = 0, $add = 0, $add1 = 0, $add10 = 0;
 var $add14 = 0, $add15 = 0, $add4 = 0, $and = 0, $and$i = 0, $and$i1002 = 0, $and$i1051 = 0, $and$i1121 = 0, $and$i113 = 0, $and$i1170 = 0, $and$i1219 = 0, $and$i1268 = 0, $and$i1331 = 0, $and$i1380 = 0, $and$i1429 = 0, $and$i1478 = 0, $and$i1536 = 0, $and$i162 = 0, $and$i1683 = 0, $and$i1805 = 0;
 var $and$i1854 = 0, $and$i1903 = 0, $and$i1952 = 0, $and$i211 = 0, $and$i274 = 0, $and$i323 = 0, $and$i372 = 0, $and$i421 = 0, $and$i484 = 0, $and$i533 = 0, $and$i582 = 0, $and$i631 = 0, $and$i694 = 0, $and$i743 = 0, $and$i792 = 0, $and$i841 = 0, $and$i904 = 0, $and$i953 = 0, $and29$i = 0, $and29$i1003 = 0;
 var $and29$i1052 = 0, $and29$i1122 = 0, $and29$i114 = 0, $and29$i1171 = 0, $and29$i1220 = 0, $and29$i1269 = 0, $and29$i1332 = 0, $and29$i1381 = 0, $and29$i1430 = 0, $and29$i1479 = 0, $and29$i1537 = 0, $and29$i163 = 0, $and29$i1684 = 0, $and29$i1806 = 0, $and29$i1855 = 0, $and29$i1904 = 0, $and29$i1953 = 0, $and29$i212 = 0, $and29$i275 = 0, $and29$i324 = 0;
 var $and29$i373 = 0, $and29$i422 = 0, $and29$i485 = 0, $and29$i534 = 0, $and29$i583 = 0, $and29$i632 = 0, $and29$i695 = 0, $and29$i744 = 0, $and29$i793 = 0, $and29$i842 = 0, $and29$i905 = 0, $and29$i954 = 0, $and30$i = 0, $and30$i1004 = 0, $and30$i1053 = 0, $and30$i1123 = 0, $and30$i115 = 0, $and30$i1172 = 0, $and30$i1221 = 0, $and30$i1270 = 0;
 var $and30$i1333 = 0, $and30$i1382 = 0, $and30$i1431 = 0, $and30$i1480 = 0, $and30$i1538 = 0, $and30$i164 = 0, $and30$i1685 = 0, $and30$i1807 = 0, $and30$i1856 = 0, $and30$i1905 = 0, $and30$i1954 = 0, $and30$i213 = 0, $and30$i276 = 0, $and30$i325 = 0, $and30$i374 = 0, $and30$i423 = 0, $and30$i486 = 0, $and30$i535 = 0, $and30$i584 = 0, $and30$i633 = 0;
 var $and30$i696 = 0, $and30$i745 = 0, $and30$i794 = 0, $and30$i843 = 0, $and30$i906 = 0, $and30$i955 = 0, $and31$i = 0, $and31$i1005 = 0, $and31$i1054 = 0, $and31$i1124 = 0, $and31$i116 = 0, $and31$i1173 = 0, $and31$i1222 = 0, $and31$i1271 = 0, $and31$i1334 = 0, $and31$i1383 = 0, $and31$i1432 = 0, $and31$i1481 = 0, $and31$i1539 = 0, $and31$i165 = 0;
 var $and31$i1686 = 0, $and31$i1808 = 0, $and31$i1857 = 0, $and31$i1906 = 0, $and31$i1955 = 0, $and31$i214 = 0, $and31$i277 = 0, $and31$i326 = 0, $and31$i375 = 0, $and31$i424 = 0, $and31$i487 = 0, $and31$i536 = 0, $and31$i585 = 0, $and31$i634 = 0, $and31$i697 = 0, $and31$i746 = 0, $and31$i795 = 0, $and31$i844 = 0, $and31$i907 = 0, $and31$i956 = 0;
 var $and32$i = 0, $and32$i1006 = 0, $and32$i1055 = 0, $and32$i1125 = 0, $and32$i117 = 0, $and32$i1174 = 0, $and32$i1223 = 0, $and32$i1272 = 0, $and32$i1335 = 0, $and32$i1384 = 0, $and32$i1433 = 0, $and32$i1482 = 0, $and32$i1540 = 0, $and32$i166 = 0, $and32$i1687 = 0, $and32$i1809 = 0, $and32$i1858 = 0, $and32$i1907 = 0, $and32$i1956 = 0, $and32$i215 = 0;
 var $and32$i278 = 0, $and32$i327 = 0, $and32$i376 = 0, $and32$i425 = 0, $and32$i488 = 0, $and32$i537 = 0, $and32$i586 = 0, $and32$i635 = 0, $and32$i698 = 0, $and32$i747 = 0, $and32$i796 = 0, $and32$i845 = 0, $and32$i908 = 0, $and32$i957 = 0, $and33$i = 0, $and33$i1007 = 0, $and33$i1056 = 0, $and33$i1126 = 0, $and33$i1175 = 0, $and33$i118 = 0;
 var $and33$i1224 = 0, $and33$i1273 = 0, $and33$i1336 = 0, $and33$i1385 = 0, $and33$i1434 = 0, $and33$i1483 = 0, $and33$i1541 = 0, $and33$i167 = 0, $and33$i1688 = 0, $and33$i1810 = 0, $and33$i1859 = 0, $and33$i1908 = 0, $and33$i1957 = 0, $and33$i216 = 0, $and33$i279 = 0, $and33$i328 = 0, $and33$i377 = 0, $and33$i426 = 0, $and33$i489 = 0, $and33$i538 = 0;
 var $and33$i587 = 0, $and33$i636 = 0, $and33$i699 = 0, $and33$i748 = 0, $and33$i797 = 0, $and33$i846 = 0, $and33$i909 = 0, $and33$i958 = 0, $and34$i = 0, $and34$i1008 = 0, $and34$i1057 = 0, $and34$i1127 = 0, $and34$i1176 = 0, $and34$i119 = 0, $and34$i1225 = 0, $and34$i1274 = 0, $and34$i1337 = 0, $and34$i1386 = 0, $and34$i1435 = 0, $and34$i1484 = 0;
 var $and34$i1542 = 0, $and34$i168 = 0, $and34$i1689 = 0, $and34$i1811 = 0, $and34$i1860 = 0, $and34$i1909 = 0, $and34$i1958 = 0, $and34$i217 = 0, $and34$i280 = 0, $and34$i329 = 0, $and34$i378 = 0, $and34$i427 = 0, $and34$i490 = 0, $and34$i539 = 0, $and34$i588 = 0, $and34$i637 = 0, $and34$i700 = 0, $and34$i749 = 0, $and34$i798 = 0, $and34$i847 = 0;
 var $and34$i910 = 0, $and34$i959 = 0, $and35$i = 0, $and35$i1009 = 0, $and35$i1058 = 0, $and35$i1128 = 0, $and35$i1177 = 0, $and35$i120 = 0, $and35$i1226 = 0, $and35$i1275 = 0, $and35$i1338 = 0, $and35$i1387 = 0, $and35$i1436 = 0, $and35$i1485 = 0, $and35$i1543 = 0, $and35$i169 = 0, $and35$i1690 = 0, $and35$i1812 = 0, $and35$i1861 = 0, $and35$i1910 = 0;
 var $and35$i1959 = 0, $and35$i218 = 0, $and35$i281 = 0, $and35$i330 = 0, $and35$i379 = 0, $and35$i428 = 0, $and35$i491 = 0, $and35$i540 = 0, $and35$i589 = 0, $and35$i638 = 0, $and35$i701 = 0, $and35$i750 = 0, $and35$i799 = 0, $and35$i848 = 0, $and35$i911 = 0, $and35$i960 = 0, $and36$i = 0, $and36$i1010 = 0, $and36$i1059 = 0, $and36$i1129 = 0;
 var $and36$i1178 = 0, $and36$i121 = 0, $and36$i1227 = 0, $and36$i1276 = 0, $and36$i1339 = 0, $and36$i1388 = 0, $and36$i1437 = 0, $and36$i1486 = 0, $and36$i1544 = 0, $and36$i1691 = 0, $and36$i170 = 0, $and36$i1813 = 0, $and36$i1862 = 0, $and36$i1911 = 0, $and36$i1960 = 0, $and36$i219 = 0, $and36$i282 = 0, $and36$i331 = 0, $and36$i380 = 0, $and36$i429 = 0;
 var $and36$i492 = 0, $and36$i541 = 0, $and36$i590 = 0, $and36$i639 = 0, $and36$i702 = 0, $and36$i751 = 0, $and36$i800 = 0, $and36$i849 = 0, $and36$i912 = 0, $and36$i961 = 0, $and37$i = 0, $and37$i1011 = 0, $and37$i1060 = 0, $and37$i1130 = 0, $and37$i1179 = 0, $and37$i122 = 0, $and37$i1228 = 0, $and37$i1277 = 0, $and37$i1340 = 0, $and37$i1389 = 0;
 var $and37$i1438 = 0, $and37$i1487 = 0, $and37$i1545 = 0, $and37$i1692 = 0, $and37$i171 = 0, $and37$i1814 = 0, $and37$i1863 = 0, $and37$i1912 = 0, $and37$i1961 = 0, $and37$i220 = 0, $and37$i283 = 0, $and37$i332 = 0, $and37$i381 = 0, $and37$i430 = 0, $and37$i493 = 0, $and37$i542 = 0, $and37$i591 = 0, $and37$i640 = 0, $and37$i703 = 0, $and37$i752 = 0;
 var $and37$i801 = 0, $and37$i850 = 0, $and37$i913 = 0, $and37$i962 = 0, $arraydecay1$i = 0, $arraydecay1$i76 = 0, $arraydecay11$i = 0, $arraydecay13$i = 0, $arraydecay13$i1091 = 0, $arraydecay13$i1301 = 0, $arraydecay13$i1775 = 0, $arraydecay13$i244 = 0, $arraydecay13$i454 = 0, $arraydecay13$i664 = 0, $arraydecay13$i874 = 0, $arraydecay15$i = 0, $arraydecay2$i1084 = 0, $arraydecay2$i1294 = 0, $arraydecay2$i1768 = 0, $arraydecay2$i237 = 0;
 var $arraydecay2$i44 = 0, $arraydecay2$i447 = 0, $arraydecay2$i657 = 0, $arraydecay2$i77 = 0, $arraydecay2$i867 = 0, $arraydecay3$i = 0, $arraydecay4$i = 0, $arraydecay5$i = 0, $arraydecay5$i1087 = 0, $arraydecay5$i1297 = 0, $arraydecay5$i1771 = 0, $arraydecay5$i240 = 0, $arraydecay5$i450 = 0, $arraydecay5$i660 = 0, $arraydecay5$i870 = 0, $arraydecay6$i = 0, $arraydecay7$i = 0, $arraydecay9$i = 0, $arraydecay9$i1089 = 0, $arraydecay9$i1299 = 0;
 var $arraydecay9$i1773 = 0, $arraydecay9$i242 = 0, $arraydecay9$i452 = 0, $arraydecay9$i662 = 0, $arraydecay9$i82 = 0, $arraydecay9$i872 = 0, $arrayidx = 0, $arrayidx1$i = 0, $arrayidx1$i$i = 0, $arrayidx1$i$i75 = 0, $arrayidx1$i3$i = 0, $arrayidx1$i4$i = 0, $arrayidx1$i5$i = 0, $arrayidx11 = 0, $arrayidx11$i = 0, $arrayidx11$i1031 = 0, $arrayidx11$i1101 = 0, $arrayidx11$i1150 = 0, $arrayidx11$i1199 = 0, $arrayidx11$i1248 = 0;
 var $arrayidx11$i1311 = 0, $arrayidx11$i1360 = 0, $arrayidx11$i1409 = 0, $arrayidx11$i142 = 0, $arrayidx11$i1458 = 0, $arrayidx11$i1785 = 0, $arrayidx11$i1834 = 0, $arrayidx11$i1883 = 0, $arrayidx11$i191 = 0, $arrayidx11$i1932 = 0, $arrayidx11$i254 = 0, $arrayidx11$i303 = 0, $arrayidx11$i352 = 0, $arrayidx11$i401 = 0, $arrayidx11$i464 = 0, $arrayidx11$i513 = 0, $arrayidx11$i562 = 0, $arrayidx11$i611 = 0, $arrayidx11$i674 = 0, $arrayidx11$i723 = 0;
 var $arrayidx11$i772 = 0, $arrayidx11$i821 = 0, $arrayidx11$i884 = 0, $arrayidx11$i93 = 0, $arrayidx11$i933 = 0, $arrayidx11$i982 = 0, $arrayidx12 = 0, $arrayidx12$i = 0, $arrayidx12$i1032 = 0, $arrayidx12$i1102 = 0, $arrayidx12$i1151 = 0, $arrayidx12$i1200 = 0, $arrayidx12$i1249 = 0, $arrayidx12$i1312 = 0, $arrayidx12$i1361 = 0, $arrayidx12$i1410 = 0, $arrayidx12$i143 = 0, $arrayidx12$i1459 = 0, $arrayidx12$i1786 = 0, $arrayidx12$i1835 = 0;
 var $arrayidx12$i1884 = 0, $arrayidx12$i192 = 0, $arrayidx12$i1933 = 0, $arrayidx12$i255 = 0, $arrayidx12$i304 = 0, $arrayidx12$i353 = 0, $arrayidx12$i402 = 0, $arrayidx12$i465 = 0, $arrayidx12$i514 = 0, $arrayidx12$i563 = 0, $arrayidx12$i612 = 0, $arrayidx12$i675 = 0, $arrayidx12$i724 = 0, $arrayidx12$i773 = 0, $arrayidx12$i822 = 0, $arrayidx12$i885 = 0, $arrayidx12$i934 = 0, $arrayidx12$i94 = 0, $arrayidx12$i983 = 0, $arrayidx13$i = 0;
 var $arrayidx13$i1033 = 0, $arrayidx13$i1103 = 0, $arrayidx13$i1152 = 0, $arrayidx13$i1201 = 0, $arrayidx13$i1250 = 0, $arrayidx13$i1313 = 0, $arrayidx13$i1362 = 0, $arrayidx13$i1411 = 0, $arrayidx13$i144 = 0, $arrayidx13$i1460 = 0, $arrayidx13$i1787 = 0, $arrayidx13$i1836 = 0, $arrayidx13$i1885 = 0, $arrayidx13$i193 = 0, $arrayidx13$i1934 = 0, $arrayidx13$i256 = 0, $arrayidx13$i305 = 0, $arrayidx13$i354 = 0, $arrayidx13$i403 = 0, $arrayidx13$i466 = 0;
 var $arrayidx13$i515 = 0, $arrayidx13$i564 = 0, $arrayidx13$i613 = 0, $arrayidx13$i676 = 0, $arrayidx13$i725 = 0, $arrayidx13$i774 = 0, $arrayidx13$i823 = 0, $arrayidx13$i886 = 0, $arrayidx13$i935 = 0, $arrayidx13$i95 = 0, $arrayidx13$i984 = 0, $arrayidx14$i = 0, $arrayidx14$i1034 = 0, $arrayidx14$i1104 = 0, $arrayidx14$i1153 = 0, $arrayidx14$i1202 = 0, $arrayidx14$i1251 = 0, $arrayidx14$i1314 = 0, $arrayidx14$i1363 = 0, $arrayidx14$i1412 = 0;
 var $arrayidx14$i145 = 0, $arrayidx14$i1461 = 0, $arrayidx14$i1788 = 0, $arrayidx14$i1837 = 0, $arrayidx14$i1886 = 0, $arrayidx14$i1935 = 0, $arrayidx14$i194 = 0, $arrayidx14$i257 = 0, $arrayidx14$i306 = 0, $arrayidx14$i355 = 0, $arrayidx14$i404 = 0, $arrayidx14$i467 = 0, $arrayidx14$i516 = 0, $arrayidx14$i565 = 0, $arrayidx14$i614 = 0, $arrayidx14$i677 = 0, $arrayidx14$i726 = 0, $arrayidx14$i775 = 0, $arrayidx14$i824 = 0, $arrayidx14$i887 = 0;
 var $arrayidx14$i936 = 0, $arrayidx14$i96 = 0, $arrayidx14$i985 = 0, $arrayidx15$i = 0, $arrayidx15$i1035 = 0, $arrayidx15$i1105 = 0, $arrayidx15$i1154 = 0, $arrayidx15$i1203 = 0, $arrayidx15$i1252 = 0, $arrayidx15$i1315 = 0, $arrayidx15$i1364 = 0, $arrayidx15$i1413 = 0, $arrayidx15$i146 = 0, $arrayidx15$i1462 = 0, $arrayidx15$i1789 = 0, $arrayidx15$i1838 = 0, $arrayidx15$i1887 = 0, $arrayidx15$i1936 = 0, $arrayidx15$i195 = 0, $arrayidx15$i258 = 0;
 var $arrayidx15$i307 = 0, $arrayidx15$i356 = 0, $arrayidx15$i405 = 0, $arrayidx15$i468 = 0, $arrayidx15$i517 = 0, $arrayidx15$i566 = 0, $arrayidx15$i615 = 0, $arrayidx15$i678 = 0, $arrayidx15$i727 = 0, $arrayidx15$i776 = 0, $arrayidx15$i825 = 0, $arrayidx15$i888 = 0, $arrayidx15$i937 = 0, $arrayidx15$i97 = 0, $arrayidx15$i986 = 0, $arrayidx16$i = 0, $arrayidx16$i1036 = 0, $arrayidx16$i1106 = 0, $arrayidx16$i1155 = 0, $arrayidx16$i1204 = 0;
 var $arrayidx16$i1253 = 0, $arrayidx16$i1316 = 0, $arrayidx16$i1365 = 0, $arrayidx16$i1414 = 0, $arrayidx16$i1463 = 0, $arrayidx16$i147 = 0, $arrayidx16$i1790 = 0, $arrayidx16$i1839 = 0, $arrayidx16$i1888 = 0, $arrayidx16$i1937 = 0, $arrayidx16$i196 = 0, $arrayidx16$i259 = 0, $arrayidx16$i308 = 0, $arrayidx16$i357 = 0, $arrayidx16$i406 = 0, $arrayidx16$i469 = 0, $arrayidx16$i518 = 0, $arrayidx16$i567 = 0, $arrayidx16$i616 = 0, $arrayidx16$i679 = 0;
 var $arrayidx16$i728 = 0, $arrayidx16$i777 = 0, $arrayidx16$i826 = 0, $arrayidx16$i889 = 0, $arrayidx16$i938 = 0, $arrayidx16$i98 = 0, $arrayidx16$i987 = 0, $arrayidx17$i = 0, $arrayidx17$i1037 = 0, $arrayidx17$i1107 = 0, $arrayidx17$i1156 = 0, $arrayidx17$i1205 = 0, $arrayidx17$i1254 = 0, $arrayidx17$i1317 = 0, $arrayidx17$i1366 = 0, $arrayidx17$i1415 = 0, $arrayidx17$i1464 = 0, $arrayidx17$i148 = 0, $arrayidx17$i1791 = 0, $arrayidx17$i1840 = 0;
 var $arrayidx17$i1889 = 0, $arrayidx17$i1938 = 0, $arrayidx17$i197 = 0, $arrayidx17$i260 = 0, $arrayidx17$i309 = 0, $arrayidx17$i358 = 0, $arrayidx17$i407 = 0, $arrayidx17$i470 = 0, $arrayidx17$i519 = 0, $arrayidx17$i568 = 0, $arrayidx17$i617 = 0, $arrayidx17$i680 = 0, $arrayidx17$i729 = 0, $arrayidx17$i778 = 0, $arrayidx17$i827 = 0, $arrayidx17$i890 = 0, $arrayidx17$i939 = 0, $arrayidx17$i988 = 0, $arrayidx17$i99 = 0, $arrayidx18$i = 0;
 var $arrayidx18$i100 = 0, $arrayidx18$i1038 = 0, $arrayidx18$i1108 = 0, $arrayidx18$i1157 = 0, $arrayidx18$i1206 = 0, $arrayidx18$i1255 = 0, $arrayidx18$i1318 = 0, $arrayidx18$i1367 = 0, $arrayidx18$i1416 = 0, $arrayidx18$i1465 = 0, $arrayidx18$i149 = 0, $arrayidx18$i1792 = 0, $arrayidx18$i1841 = 0, $arrayidx18$i1890 = 0, $arrayidx18$i1939 = 0, $arrayidx18$i198 = 0, $arrayidx18$i261 = 0, $arrayidx18$i310 = 0, $arrayidx18$i359 = 0, $arrayidx18$i408 = 0;
 var $arrayidx18$i471 = 0, $arrayidx18$i520 = 0, $arrayidx18$i569 = 0, $arrayidx18$i618 = 0, $arrayidx18$i681 = 0, $arrayidx18$i730 = 0, $arrayidx18$i779 = 0, $arrayidx18$i828 = 0, $arrayidx18$i891 = 0, $arrayidx18$i940 = 0, $arrayidx18$i989 = 0, $arrayidx19$i = 0, $arrayidx19$i101 = 0, $arrayidx19$i1039 = 0, $arrayidx19$i1109 = 0, $arrayidx19$i1158 = 0, $arrayidx19$i1207 = 0, $arrayidx19$i1256 = 0, $arrayidx19$i1319 = 0, $arrayidx19$i1368 = 0;
 var $arrayidx19$i1417 = 0, $arrayidx19$i1466 = 0, $arrayidx19$i150 = 0, $arrayidx19$i1793 = 0, $arrayidx19$i1842 = 0, $arrayidx19$i1891 = 0, $arrayidx19$i1940 = 0, $arrayidx19$i199 = 0, $arrayidx19$i262 = 0, $arrayidx19$i311 = 0, $arrayidx19$i360 = 0, $arrayidx19$i409 = 0, $arrayidx19$i472 = 0, $arrayidx19$i521 = 0, $arrayidx19$i570 = 0, $arrayidx19$i619 = 0, $arrayidx19$i682 = 0, $arrayidx19$i731 = 0, $arrayidx19$i780 = 0, $arrayidx19$i829 = 0;
 var $arrayidx19$i892 = 0, $arrayidx19$i941 = 0, $arrayidx19$i990 = 0, $arrayidx2$i = 0, $arrayidx2$i134 = 0, $arrayidx2$i183 = 0, $arrayidx2$i85 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx3 = 0, $arrayidx3$i = 0, $arrayidx3$i135 = 0, $arrayidx3$i184 = 0, $arrayidx3$i86 = 0, $arrayidx30 = 0, $arrayidx30$1 = 0, $arrayidx30$2 = 0, $arrayidx30$3 = 0, $arrayidx30$4 = 0, $arrayidx30$5 = 0;
 var $arrayidx30$6 = 0, $arrayidx38 = 0, $arrayidx4$i = 0, $arrayidx4$i136 = 0, $arrayidx4$i185 = 0, $arrayidx4$i87 = 0, $arrayidx5$i = 0, $arrayidx5$i137 = 0, $arrayidx5$i186 = 0, $arrayidx5$i88 = 0, $arrayidx6$i = 0, $arrayidx6$i138 = 0, $arrayidx6$i187 = 0, $arrayidx6$i89 = 0, $arrayidx7$i = 0, $arrayidx7$i139 = 0, $arrayidx7$i188 = 0, $arrayidx7$i90 = 0, $arrayidx8$i = 0, $arrayidx8$i140 = 0;
 var $arrayidx8$i189 = 0, $arrayidx8$i91 = 0, $arrayidx9$i = 0, $arrayidx9$i141 = 0, $arrayidx9$i190 = 0, $arrayidx9$i92 = 0, $carry$02020 = 0, $cmp35 = 0, $conv = 0, $conv13 = 0, $conv19 = 0, $conv2 = 0, $conv21 = 0, $conv3$i = 0, $conv3$i1079 = 0, $conv3$i1289 = 0, $conv3$i1973 = 0, $conv3$i232 = 0, $conv3$i442 = 0, $conv3$i652 = 0;
 var $conv3$i862 = 0, $conv39 = 0, $conv40 = 0, $conv8 = 0, $cur = 0, $dec = 0, $e = 0, $exitcond = 0, $i$02019 = 0, $i$22017 = 0, $inc = 0, $mul = 0, $shl = 0, $shl17 = 0, $shl43 = 0, $shl6 = 0, $shr = 0, $shr5 = 0, $sub = 0, $sub$i = 0;
 var $sub$i1050 = 0, $sub$i1080 = 0, $sub$i1267 = 0, $sub$i1290 = 0, $sub$i1477 = 0, $sub$i1712 = 0, $sub$i1951 = 0, $sub$i1974 = 0, $sub$i210 = 0, $sub$i233 = 0, $sub$i420 = 0, $sub$i443 = 0, $sub$i630 = 0, $sub$i653 = 0, $sub$i840 = 0, $sub$i863 = 0, $sub10$i = 0, $sub11$i = 0, $sub12$i = 0, $sub13$i = 0;
 var $sub14$i = 0, $sub15$i = 0, $sub16$i = 0, $sub17$i = 0, $sub18 = 0, $sub18$i = 0, $sub41 = 0, $sub44 = 0, $sub7 = 0, $t = 0, $u = 0, $xor$i = 0, $xor$i102 = 0, $xor$i1040 = 0, $xor$i1110 = 0, $xor$i1159 = 0, $xor$i1208 = 0, $xor$i1257 = 0, $xor$i1320 = 0, $xor$i1369 = 0;
 var $xor$i1418 = 0, $xor$i1467 = 0, $xor$i151 = 0, $xor$i1525 = 0, $xor$i1672 = 0, $xor$i1794 = 0, $xor$i1843 = 0, $xor$i1892 = 0, $xor$i1941 = 0, $xor$i200 = 0, $xor$i263 = 0, $xor$i312 = 0, $xor$i361 = 0, $xor$i410 = 0, $xor$i473 = 0, $xor$i522 = 0, $xor$i571 = 0, $xor$i620 = 0, $xor$i683 = 0, $xor$i732 = 0;
 var $xor$i781 = 0, $xor$i830 = 0, $xor$i893 = 0, $xor$i942 = 0, $xor$i991 = 0, $xor20$i = 0, $xor20$i1041 = 0, $xor20$i1111 = 0, $xor20$i1160 = 0, $xor20$i1209 = 0, $xor20$i1258 = 0, $xor20$i1321 = 0, $xor20$i1370 = 0, $xor20$i1419 = 0, $xor20$i1468 = 0, $xor20$i1526 = 0, $xor20$i1673 = 0, $xor20$i1795 = 0, $xor20$i1844 = 0, $xor20$i1893 = 0;
 var $xor20$i1942 = 0, $xor20$i264 = 0, $xor20$i313 = 0, $xor20$i362 = 0, $xor20$i411 = 0, $xor20$i474 = 0, $xor20$i523 = 0, $xor20$i572 = 0, $xor20$i621 = 0, $xor20$i684 = 0, $xor20$i733 = 0, $xor20$i782 = 0, $xor20$i831 = 0, $xor20$i894 = 0, $xor20$i943 = 0, $xor20$i992 = 0, $xor21$i = 0, $xor21$i1042 = 0, $xor21$i1112 = 0, $xor21$i1161 = 0;
 var $xor21$i1210 = 0, $xor21$i1259 = 0, $xor21$i1322 = 0, $xor21$i1371 = 0, $xor21$i1420 = 0, $xor21$i1469 = 0, $xor21$i1527 = 0, $xor21$i1674 = 0, $xor21$i1796 = 0, $xor21$i1845 = 0, $xor21$i1894 = 0, $xor21$i1943 = 0, $xor21$i265 = 0, $xor21$i314 = 0, $xor21$i363 = 0, $xor21$i412 = 0, $xor21$i475 = 0, $xor21$i524 = 0, $xor21$i573 = 0, $xor21$i622 = 0;
 var $xor21$i685 = 0, $xor21$i734 = 0, $xor21$i783 = 0, $xor21$i832 = 0, $xor21$i895 = 0, $xor21$i944 = 0, $xor21$i993 = 0, $xor22$i = 0, $xor22$i1043 = 0, $xor22$i1113 = 0, $xor22$i1162 = 0, $xor22$i1211 = 0, $xor22$i1260 = 0, $xor22$i1323 = 0, $xor22$i1372 = 0, $xor22$i1421 = 0, $xor22$i1470 = 0, $xor22$i1528 = 0, $xor22$i1675 = 0, $xor22$i1797 = 0;
 var $xor22$i1846 = 0, $xor22$i1895 = 0, $xor22$i1944 = 0, $xor22$i266 = 0, $xor22$i315 = 0, $xor22$i364 = 0, $xor22$i413 = 0, $xor22$i476 = 0, $xor22$i525 = 0, $xor22$i574 = 0, $xor22$i623 = 0, $xor22$i686 = 0, $xor22$i735 = 0, $xor22$i784 = 0, $xor22$i833 = 0, $xor22$i896 = 0, $xor22$i945 = 0, $xor22$i994 = 0, $xor23$i = 0, $xor23$i1044 = 0;
 var $xor23$i1114 = 0, $xor23$i1163 = 0, $xor23$i1212 = 0, $xor23$i1261 = 0, $xor23$i1324 = 0, $xor23$i1373 = 0, $xor23$i1422 = 0, $xor23$i1471 = 0, $xor23$i1529 = 0, $xor23$i1676 = 0, $xor23$i1798 = 0, $xor23$i1847 = 0, $xor23$i1896 = 0, $xor23$i1945 = 0, $xor23$i267 = 0, $xor23$i316 = 0, $xor23$i365 = 0, $xor23$i414 = 0, $xor23$i477 = 0, $xor23$i526 = 0;
 var $xor23$i575 = 0, $xor23$i624 = 0, $xor23$i687 = 0, $xor23$i736 = 0, $xor23$i785 = 0, $xor23$i834 = 0, $xor23$i897 = 0, $xor23$i946 = 0, $xor23$i995 = 0, $xor24$i = 0, $xor24$i1045 = 0, $xor24$i1115 = 0, $xor24$i1164 = 0, $xor24$i1213 = 0, $xor24$i1262 = 0, $xor24$i1325 = 0, $xor24$i1374 = 0, $xor24$i1423 = 0, $xor24$i1472 = 0, $xor24$i1530 = 0;
 var $xor24$i1677 = 0, $xor24$i1799 = 0, $xor24$i1848 = 0, $xor24$i1897 = 0, $xor24$i1946 = 0, $xor24$i268 = 0, $xor24$i317 = 0, $xor24$i366 = 0, $xor24$i415 = 0, $xor24$i478 = 0, $xor24$i527 = 0, $xor24$i576 = 0, $xor24$i625 = 0, $xor24$i688 = 0, $xor24$i737 = 0, $xor24$i786 = 0, $xor24$i835 = 0, $xor24$i898 = 0, $xor24$i947 = 0, $xor24$i996 = 0;
 var $xor25$i = 0, $xor25$i1046 = 0, $xor25$i1116 = 0, $xor25$i1165 = 0, $xor25$i1214 = 0, $xor25$i1263 = 0, $xor25$i1326 = 0, $xor25$i1375 = 0, $xor25$i1424 = 0, $xor25$i1473 = 0, $xor25$i1531 = 0, $xor25$i1678 = 0, $xor25$i1800 = 0, $xor25$i1849 = 0, $xor25$i1898 = 0, $xor25$i1947 = 0, $xor25$i269 = 0, $xor25$i318 = 0, $xor25$i367 = 0, $xor25$i416 = 0;
 var $xor25$i479 = 0, $xor25$i528 = 0, $xor25$i577 = 0, $xor25$i626 = 0, $xor25$i689 = 0, $xor25$i738 = 0, $xor25$i787 = 0, $xor25$i836 = 0, $xor25$i899 = 0, $xor25$i948 = 0, $xor25$i997 = 0, $xor26$i = 0, $xor26$i1047 = 0, $xor26$i1117 = 0, $xor26$i1166 = 0, $xor26$i1215 = 0, $xor26$i1264 = 0, $xor26$i1327 = 0, $xor26$i1376 = 0, $xor26$i1425 = 0;
 var $xor26$i1474 = 0, $xor26$i1532 = 0, $xor26$i1679 = 0, $xor26$i1801 = 0, $xor26$i1850 = 0, $xor26$i1899 = 0, $xor26$i1948 = 0, $xor26$i270 = 0, $xor26$i319 = 0, $xor26$i368 = 0, $xor26$i417 = 0, $xor26$i480 = 0, $xor26$i529 = 0, $xor26$i578 = 0, $xor26$i627 = 0, $xor26$i690 = 0, $xor26$i739 = 0, $xor26$i788 = 0, $xor26$i837 = 0, $xor26$i900 = 0;
 var $xor26$i949 = 0, $xor26$i998 = 0, $xor27$i = 0, $xor27$i1048 = 0, $xor27$i1118 = 0, $xor27$i1167 = 0, $xor27$i1216 = 0, $xor27$i1265 = 0, $xor27$i1328 = 0, $xor27$i1377 = 0, $xor27$i1426 = 0, $xor27$i1475 = 0, $xor27$i1533 = 0, $xor27$i1680 = 0, $xor27$i1802 = 0, $xor27$i1851 = 0, $xor27$i1900 = 0, $xor27$i1949 = 0, $xor27$i271 = 0, $xor27$i320 = 0;
 var $xor27$i369 = 0, $xor27$i418 = 0, $xor27$i481 = 0, $xor27$i530 = 0, $xor27$i579 = 0, $xor27$i628 = 0, $xor27$i691 = 0, $xor27$i740 = 0, $xor27$i789 = 0, $xor27$i838 = 0, $xor27$i901 = 0, $xor27$i950 = 0, $xor27$i999 = 0, $xor28$i = 0, $xor28$i1000 = 0, $xor28$i1049 = 0, $xor28$i1119 = 0, $xor28$i1168 = 0, $xor28$i1217 = 0, $xor28$i1266 = 0;
 var $xor28$i1329 = 0, $xor28$i1378 = 0, $xor28$i1427 = 0, $xor28$i1476 = 0, $xor28$i1534 = 0, $xor28$i1681 = 0, $xor28$i1803 = 0, $xor28$i1852 = 0, $xor28$i1901 = 0, $xor28$i1950 = 0, $xor28$i272 = 0, $xor28$i321 = 0, $xor28$i370 = 0, $xor28$i419 = 0, $xor28$i482 = 0, $xor28$i531 = 0, $xor28$i580 = 0, $xor28$i629 = 0, $xor28$i692 = 0, $xor28$i741 = 0;
 var $xor28$i790 = 0, $xor28$i839 = 0, $xor28$i902 = 0, $xor28$i951 = 0, $xor38$i = 0, $xor38$i1012 = 0, $xor38$i1061 = 0, $xor38$i1131 = 0, $xor38$i1180 = 0, $xor38$i1229 = 0, $xor38$i123 = 0, $xor38$i1278 = 0, $xor38$i1341 = 0, $xor38$i1390 = 0, $xor38$i1439 = 0, $xor38$i1488 = 0, $xor38$i1546 = 0, $xor38$i1644 = 0, $xor38$i1693 = 0, $xor38$i172 = 0;
 var $xor38$i1815 = 0, $xor38$i1864 = 0, $xor38$i1913 = 0, $xor38$i1962 = 0, $xor38$i221 = 0, $xor38$i284 = 0, $xor38$i333 = 0, $xor38$i382 = 0, $xor38$i431 = 0, $xor38$i494 = 0, $xor38$i543 = 0, $xor38$i592 = 0, $xor38$i641 = 0, $xor38$i704 = 0, $xor38$i753 = 0, $xor38$i802 = 0, $xor38$i851 = 0, $xor38$i914 = 0, $xor38$i963 = 0, $xor4$i = 0;
 var $xor40$i = 0, $xor40$i1013 = 0, $xor40$i1062 = 0, $xor40$i1132 = 0, $xor40$i1181 = 0, $xor40$i1230 = 0, $xor40$i1279 = 0, $xor40$i1342 = 0, $xor40$i1391 = 0, $xor40$i1440 = 0, $xor40$i1489 = 0, $xor40$i1547 = 0, $xor40$i1645 = 0, $xor40$i1694 = 0, $xor40$i1816 = 0, $xor40$i1865 = 0, $xor40$i1914 = 0, $xor40$i1963 = 0, $xor40$i285 = 0, $xor40$i334 = 0;
 var $xor40$i383 = 0, $xor40$i432 = 0, $xor40$i495 = 0, $xor40$i544 = 0, $xor40$i593 = 0, $xor40$i642 = 0, $xor40$i705 = 0, $xor40$i754 = 0, $xor40$i803 = 0, $xor40$i852 = 0, $xor40$i915 = 0, $xor40$i964 = 0, $xor42$i = 0, $xor42$i1014 = 0, $xor42$i1063 = 0, $xor42$i1133 = 0, $xor42$i1182 = 0, $xor42$i1231 = 0, $xor42$i1280 = 0, $xor42$i1343 = 0;
 var $xor42$i1392 = 0, $xor42$i1441 = 0, $xor42$i1490 = 0, $xor42$i1548 = 0, $xor42$i1646 = 0, $xor42$i1695 = 0, $xor42$i1817 = 0, $xor42$i1866 = 0, $xor42$i1915 = 0, $xor42$i1964 = 0, $xor42$i286 = 0, $xor42$i335 = 0, $xor42$i384 = 0, $xor42$i433 = 0, $xor42$i496 = 0, $xor42$i545 = 0, $xor42$i594 = 0, $xor42$i643 = 0, $xor42$i706 = 0, $xor42$i755 = 0;
 var $xor42$i804 = 0, $xor42$i853 = 0, $xor42$i916 = 0, $xor42$i965 = 0, $xor44$i = 0, $xor44$i1015 = 0, $xor44$i1064 = 0, $xor44$i1134 = 0, $xor44$i1183 = 0, $xor44$i1232 = 0, $xor44$i1281 = 0, $xor44$i1344 = 0, $xor44$i1393 = 0, $xor44$i1442 = 0, $xor44$i1491 = 0, $xor44$i1549 = 0, $xor44$i1647 = 0, $xor44$i1696 = 0, $xor44$i1818 = 0, $xor44$i1867 = 0;
 var $xor44$i1916 = 0, $xor44$i1965 = 0, $xor44$i287 = 0, $xor44$i336 = 0, $xor44$i385 = 0, $xor44$i434 = 0, $xor44$i497 = 0, $xor44$i546 = 0, $xor44$i595 = 0, $xor44$i644 = 0, $xor44$i707 = 0, $xor44$i756 = 0, $xor44$i805 = 0, $xor44$i854 = 0, $xor44$i917 = 0, $xor44$i966 = 0, $xor46$i = 0, $xor46$i1016 = 0, $xor46$i1065 = 0, $xor46$i1135 = 0;
 var $xor46$i1184 = 0, $xor46$i1233 = 0, $xor46$i1282 = 0, $xor46$i1345 = 0, $xor46$i1394 = 0, $xor46$i1443 = 0, $xor46$i1492 = 0, $xor46$i1550 = 0, $xor46$i1648 = 0, $xor46$i1697 = 0, $xor46$i1819 = 0, $xor46$i1868 = 0, $xor46$i1917 = 0, $xor46$i1966 = 0, $xor46$i288 = 0, $xor46$i337 = 0, $xor46$i386 = 0, $xor46$i435 = 0, $xor46$i498 = 0, $xor46$i547 = 0;
 var $xor46$i596 = 0, $xor46$i645 = 0, $xor46$i708 = 0, $xor46$i757 = 0, $xor46$i806 = 0, $xor46$i855 = 0, $xor46$i918 = 0, $xor46$i967 = 0, $xor48$i = 0, $xor48$i1017 = 0, $xor48$i1066 = 0, $xor48$i1136 = 0, $xor48$i1185 = 0, $xor48$i1234 = 0, $xor48$i1283 = 0, $xor48$i1346 = 0, $xor48$i1395 = 0, $xor48$i1444 = 0, $xor48$i1493 = 0, $xor48$i1551 = 0;
 var $xor48$i1649 = 0, $xor48$i1698 = 0, $xor48$i1820 = 0, $xor48$i1869 = 0, $xor48$i1918 = 0, $xor48$i1967 = 0, $xor48$i289 = 0, $xor48$i338 = 0, $xor48$i387 = 0, $xor48$i436 = 0, $xor48$i499 = 0, $xor48$i548 = 0, $xor48$i597 = 0, $xor48$i646 = 0, $xor48$i709 = 0, $xor48$i758 = 0, $xor48$i807 = 0, $xor48$i856 = 0, $xor48$i919 = 0, $xor48$i968 = 0;
 var $xor50$i = 0, $xor50$i1018 = 0, $xor50$i1067 = 0, $xor50$i1137 = 0, $xor50$i1186 = 0, $xor50$i1235 = 0, $xor50$i1284 = 0, $xor50$i1347 = 0, $xor50$i1396 = 0, $xor50$i1445 = 0, $xor50$i1494 = 0, $xor50$i1552 = 0, $xor50$i1650 = 0, $xor50$i1699 = 0, $xor50$i1821 = 0, $xor50$i1870 = 0, $xor50$i1919 = 0, $xor50$i1968 = 0, $xor50$i290 = 0, $xor50$i339 = 0;
 var $xor50$i388 = 0, $xor50$i437 = 0, $xor50$i500 = 0, $xor50$i549 = 0, $xor50$i598 = 0, $xor50$i647 = 0, $xor50$i710 = 0, $xor50$i759 = 0, $xor50$i808 = 0, $xor50$i857 = 0, $xor50$i920 = 0, $xor50$i969 = 0, $xor52$i = 0, $xor52$i1019 = 0, $xor52$i1068 = 0, $xor52$i1138 = 0, $xor52$i1187 = 0, $xor52$i1236 = 0, $xor52$i1285 = 0, $xor52$i1348 = 0;
 var $xor52$i1397 = 0, $xor52$i1446 = 0, $xor52$i1495 = 0, $xor52$i1553 = 0, $xor52$i1651 = 0, $xor52$i1700 = 0, $xor52$i1822 = 0, $xor52$i1871 = 0, $xor52$i1920 = 0, $xor52$i1969 = 0, $xor52$i291 = 0, $xor52$i340 = 0, $xor52$i389 = 0, $xor52$i438 = 0, $xor52$i501 = 0, $xor52$i550 = 0, $xor52$i599 = 0, $xor52$i648 = 0, $xor52$i711 = 0, $xor52$i760 = 0;
 var $xor52$i809 = 0, $xor52$i858 = 0, $xor52$i921 = 0, $xor52$i970 = 0, $xor54$i = 0, $xor54$i1020 = 0, $xor54$i1069 = 0, $xor54$i1139 = 0, $xor54$i1188 = 0, $xor54$i1237 = 0, $xor54$i1286 = 0, $xor54$i1349 = 0, $xor54$i1398 = 0, $xor54$i1447 = 0, $xor54$i1496 = 0, $xor54$i1554 = 0, $xor54$i1652 = 0, $xor54$i1701 = 0, $xor54$i1823 = 0, $xor54$i1872 = 0;
 var $xor54$i1921 = 0, $xor54$i1970 = 0, $xor54$i292 = 0, $xor54$i341 = 0, $xor54$i390 = 0, $xor54$i439 = 0, $xor54$i502 = 0, $xor54$i551 = 0, $xor54$i600 = 0, $xor54$i649 = 0, $xor54$i712 = 0, $xor54$i761 = 0, $xor54$i810 = 0, $xor54$i859 = 0, $xor54$i922 = 0, $xor54$i971 = 0, $xor56$i = 0, $xor56$i1021 = 0, $xor56$i1070 = 0, $xor56$i1140 = 0;
 var $xor56$i1189 = 0, $xor56$i1238 = 0, $xor56$i1287 = 0, $xor56$i1350 = 0, $xor56$i1399 = 0, $xor56$i1448 = 0, $xor56$i1497 = 0, $xor56$i1555 = 0, $xor56$i1653 = 0, $xor56$i1702 = 0, $xor56$i1824 = 0, $xor56$i1873 = 0, $xor56$i1922 = 0, $xor56$i1971 = 0, $xor56$i293 = 0, $xor56$i342 = 0, $xor56$i391 = 0, $xor56$i440 = 0, $xor56$i503 = 0, $xor56$i552 = 0;
 var $xor56$i601 = 0, $xor56$i650 = 0, $xor56$i713 = 0, $xor56$i762 = 0, $xor56$i811 = 0, $xor56$i860 = 0, $xor56$i923 = 0, $xor56$i972 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1824|0;
 $e = sp + 1280|0;
 $Ai = sp;
 $t = sp + 1664|0;
 $u = sp + 1504|0;
 $cur = sp + 1344|0;
 $carry$02020 = 0;$i$02019 = 0;
 while(1) {
  $arrayidx = (($a) + ($i$02019)|0);
  $0 = HEAP8[$arrayidx>>0]|0;
  $conv = $0&255;
  $add = (($carry$02020) + ($conv))|0;
  $add1 = (($add) + 8)|0;
  $shr = $add1 >> 4;
  $shl = $add1 & 240;
  $sub = (($add) - ($shl))|0;
  $conv2 = $sub&255;
  $mul = $i$02019 << 1;
  $arrayidx3 = (($e) + ($mul)|0);
  HEAP8[$arrayidx3>>0] = $conv2;
  $add4 = (($shr) + 8)|0;
  $shr5 = $add4 >> 4;
  $shl6 = $add4 & 240;
  $sub7 = (($shr) - ($shl6))|0;
  $conv8 = $sub7&255;
  $add10 = $mul | 1;
  $arrayidx11 = (($e) + ($add10)|0);
  HEAP8[$arrayidx11>>0] = $conv8;
  $inc = (($i$02019) + 1)|0;
  $exitcond = ($inc|0)==(31);
  if ($exitcond) {
   break;
  } else {
   $carry$02020 = $shr5;$i$02019 = $inc;
  }
 }
 $arrayidx12 = ((($a)) + 31|0);
 $1 = HEAP8[$arrayidx12>>0]|0;
 $conv13 = $1&255;
 $add14 = (($shr5) + ($conv13))|0;
 $add15 = (($add14) + 8)|0;
 $2 = $add15 >>> 4;
 $shl17 = $add15 & 240;
 $sub18 = (($add14) - ($shl17))|0;
 $conv19 = $sub18&255;
 $arrayidx20 = ((($e)) + 62|0);
 HEAP8[$arrayidx20>>0] = $conv19;
 $conv21 = $2&255;
 $arrayidx22 = ((($e)) + 63|0);
 HEAP8[$arrayidx22>>0] = $conv21;
 _ge_p3_to_cached($Ai,$A);
 $arraydecay3$i = ((($t)) + 120|0);
 $arraydecay4$i = ((($u)) + 40|0);
 $arraydecay6$i = ((($t)) + 40|0);
 $arraydecay7$i = ((($t)) + 80|0);
 $arraydecay9$i = ((($u)) + 80|0);
 $arraydecay15$i = ((($u)) + 120|0);
 _ge_add($t,$A,$Ai);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30 = ((($Ai)) + 160|0);
 _ge_p3_to_cached($arrayidx30,$u);
 _ge_add($t,$A,$arrayidx30);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30$1 = ((($Ai)) + 320|0);
 _ge_p3_to_cached($arrayidx30$1,$u);
 _ge_add($t,$A,$arrayidx30$1);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30$2 = ((($Ai)) + 480|0);
 _ge_p3_to_cached($arrayidx30$2,$u);
 _ge_add($t,$A,$arrayidx30$2);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30$3 = ((($Ai)) + 640|0);
 _ge_p3_to_cached($arrayidx30$3,$u);
 _ge_add($t,$A,$arrayidx30$3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30$4 = ((($Ai)) + 800|0);
 _ge_p3_to_cached($arrayidx30$4,$u);
 _ge_add($t,$A,$arrayidx30$4);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30$5 = ((($Ai)) + 960|0);
 _ge_p3_to_cached($arrayidx30$5,$u);
 _ge_add($t,$A,$arrayidx30$5);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30$6 = ((($Ai)) + 1120|0);
 _ge_p3_to_cached($arrayidx30$6,$u);
 dest=$r; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay1$i = ((($r)) + 40|0);
 HEAP32[$arraydecay1$i>>2] = 1;
 $arrayidx1$i3$i = ((($r)) + 44|0);
 dest=$arrayidx1$i3$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay2$i44 = ((($r)) + 80|0);
 HEAP32[$arraydecay2$i44>>2] = 1;
 $arrayidx1$i$i = ((($r)) + 84|0);
 dest=$arrayidx1$i$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arrayidx1$i$i75 = ((($cur)) + 4|0);
 $arraydecay1$i76 = ((($cur)) + 40|0);
 $arrayidx1$i5$i = ((($cur)) + 44|0);
 $arraydecay2$i77 = ((($cur)) + 80|0);
 $arrayidx1$i4$i = ((($cur)) + 84|0);
 $arrayidx2$i183 = ((($cur)) + 8|0);
 $arrayidx3$i184 = ((($cur)) + 12|0);
 $arrayidx4$i185 = ((($cur)) + 16|0);
 $arrayidx5$i186 = ((($cur)) + 20|0);
 $arrayidx6$i187 = ((($cur)) + 24|0);
 $arrayidx7$i188 = ((($cur)) + 28|0);
 $arrayidx8$i189 = ((($cur)) + 32|0);
 $arrayidx9$i190 = ((($cur)) + 36|0);
 $arrayidx11$i191 = ((($Ai)) + 4|0);
 $arrayidx12$i192 = ((($Ai)) + 8|0);
 $arrayidx13$i193 = ((($Ai)) + 12|0);
 $arrayidx14$i194 = ((($Ai)) + 16|0);
 $arrayidx15$i195 = ((($Ai)) + 20|0);
 $arrayidx16$i196 = ((($Ai)) + 24|0);
 $arrayidx17$i197 = ((($Ai)) + 28|0);
 $arrayidx18$i198 = ((($Ai)) + 32|0);
 $arrayidx19$i199 = ((($Ai)) + 36|0);
 $arraydecay5$i = ((($Ai)) + 40|0);
 $arrayidx2$i134 = ((($cur)) + 48|0);
 $arrayidx3$i135 = ((($cur)) + 52|0);
 $arrayidx4$i136 = ((($cur)) + 56|0);
 $arrayidx5$i137 = ((($cur)) + 60|0);
 $arrayidx6$i138 = ((($cur)) + 64|0);
 $arrayidx7$i139 = ((($cur)) + 68|0);
 $arrayidx8$i140 = ((($cur)) + 72|0);
 $arrayidx9$i141 = ((($cur)) + 76|0);
 $arrayidx11$i142 = ((($Ai)) + 44|0);
 $arrayidx12$i143 = ((($Ai)) + 48|0);
 $arrayidx13$i144 = ((($Ai)) + 52|0);
 $arrayidx14$i145 = ((($Ai)) + 56|0);
 $arrayidx15$i146 = ((($Ai)) + 60|0);
 $arrayidx16$i147 = ((($Ai)) + 64|0);
 $arrayidx17$i148 = ((($Ai)) + 68|0);
 $arrayidx18$i149 = ((($Ai)) + 72|0);
 $arrayidx19$i150 = ((($Ai)) + 76|0);
 $arraydecay9$i82 = ((($Ai)) + 80|0);
 $arrayidx2$i85 = ((($cur)) + 88|0);
 $arrayidx3$i86 = ((($cur)) + 92|0);
 $arrayidx4$i87 = ((($cur)) + 96|0);
 $arrayidx5$i88 = ((($cur)) + 100|0);
 $arrayidx6$i89 = ((($cur)) + 104|0);
 $arrayidx7$i90 = ((($cur)) + 108|0);
 $arrayidx8$i91 = ((($cur)) + 112|0);
 $arrayidx9$i92 = ((($cur)) + 116|0);
 $arrayidx11$i93 = ((($Ai)) + 84|0);
 $arrayidx12$i94 = ((($Ai)) + 88|0);
 $arrayidx13$i95 = ((($Ai)) + 92|0);
 $arrayidx14$i96 = ((($Ai)) + 96|0);
 $arrayidx15$i97 = ((($Ai)) + 100|0);
 $arrayidx16$i98 = ((($Ai)) + 104|0);
 $arrayidx17$i99 = ((($Ai)) + 108|0);
 $arrayidx18$i100 = ((($Ai)) + 112|0);
 $arrayidx19$i101 = ((($Ai)) + 116|0);
 $arraydecay11$i = ((($cur)) + 120|0);
 $arraydecay13$i = ((($Ai)) + 120|0);
 $arrayidx1$i = ((($cur)) + 124|0);
 $arrayidx2$i = ((($cur)) + 128|0);
 $arrayidx3$i = ((($cur)) + 132|0);
 $arrayidx4$i = ((($cur)) + 136|0);
 $arrayidx5$i = ((($cur)) + 140|0);
 $arrayidx6$i = ((($cur)) + 144|0);
 $arrayidx7$i = ((($cur)) + 148|0);
 $arrayidx8$i = ((($cur)) + 152|0);
 $arrayidx9$i = ((($cur)) + 156|0);
 $arrayidx11$i = ((($Ai)) + 124|0);
 $arrayidx12$i = ((($Ai)) + 128|0);
 $arrayidx13$i = ((($Ai)) + 132|0);
 $arrayidx14$i = ((($Ai)) + 136|0);
 $arrayidx15$i = ((($Ai)) + 140|0);
 $arrayidx16$i = ((($Ai)) + 144|0);
 $arrayidx17$i = ((($Ai)) + 148|0);
 $arrayidx18$i = ((($Ai)) + 152|0);
 $arrayidx19$i = ((($Ai)) + 156|0);
 $arraydecay2$i237 = ((($Ai)) + 160|0);
 $arrayidx11$i401 = ((($Ai)) + 164|0);
 $arrayidx12$i402 = ((($Ai)) + 168|0);
 $arrayidx13$i403 = ((($Ai)) + 172|0);
 $arrayidx14$i404 = ((($Ai)) + 176|0);
 $arrayidx15$i405 = ((($Ai)) + 180|0);
 $arrayidx16$i406 = ((($Ai)) + 184|0);
 $arrayidx17$i407 = ((($Ai)) + 188|0);
 $arrayidx18$i408 = ((($Ai)) + 192|0);
 $arrayidx19$i409 = ((($Ai)) + 196|0);
 $arraydecay5$i240 = ((($Ai)) + 200|0);
 $arrayidx11$i352 = ((($Ai)) + 204|0);
 $arrayidx12$i353 = ((($Ai)) + 208|0);
 $arrayidx13$i354 = ((($Ai)) + 212|0);
 $arrayidx14$i355 = ((($Ai)) + 216|0);
 $arrayidx15$i356 = ((($Ai)) + 220|0);
 $arrayidx16$i357 = ((($Ai)) + 224|0);
 $arrayidx17$i358 = ((($Ai)) + 228|0);
 $arrayidx18$i359 = ((($Ai)) + 232|0);
 $arrayidx19$i360 = ((($Ai)) + 236|0);
 $arraydecay9$i242 = ((($Ai)) + 240|0);
 $arrayidx11$i303 = ((($Ai)) + 244|0);
 $arrayidx12$i304 = ((($Ai)) + 248|0);
 $arrayidx13$i305 = ((($Ai)) + 252|0);
 $arrayidx14$i306 = ((($Ai)) + 256|0);
 $arrayidx15$i307 = ((($Ai)) + 260|0);
 $arrayidx16$i308 = ((($Ai)) + 264|0);
 $arrayidx17$i309 = ((($Ai)) + 268|0);
 $arrayidx18$i310 = ((($Ai)) + 272|0);
 $arrayidx19$i311 = ((($Ai)) + 276|0);
 $arraydecay13$i244 = ((($Ai)) + 280|0);
 $arrayidx11$i254 = ((($Ai)) + 284|0);
 $arrayidx12$i255 = ((($Ai)) + 288|0);
 $arrayidx13$i256 = ((($Ai)) + 292|0);
 $arrayidx14$i257 = ((($Ai)) + 296|0);
 $arrayidx15$i258 = ((($Ai)) + 300|0);
 $arrayidx16$i259 = ((($Ai)) + 304|0);
 $arrayidx17$i260 = ((($Ai)) + 308|0);
 $arrayidx18$i261 = ((($Ai)) + 312|0);
 $arrayidx19$i262 = ((($Ai)) + 316|0);
 $arraydecay2$i447 = ((($Ai)) + 320|0);
 $arrayidx11$i611 = ((($Ai)) + 324|0);
 $arrayidx12$i612 = ((($Ai)) + 328|0);
 $arrayidx13$i613 = ((($Ai)) + 332|0);
 $arrayidx14$i614 = ((($Ai)) + 336|0);
 $arrayidx15$i615 = ((($Ai)) + 340|0);
 $arrayidx16$i616 = ((($Ai)) + 344|0);
 $arrayidx17$i617 = ((($Ai)) + 348|0);
 $arrayidx18$i618 = ((($Ai)) + 352|0);
 $arrayidx19$i619 = ((($Ai)) + 356|0);
 $arraydecay5$i450 = ((($Ai)) + 360|0);
 $arrayidx11$i562 = ((($Ai)) + 364|0);
 $arrayidx12$i563 = ((($Ai)) + 368|0);
 $arrayidx13$i564 = ((($Ai)) + 372|0);
 $arrayidx14$i565 = ((($Ai)) + 376|0);
 $arrayidx15$i566 = ((($Ai)) + 380|0);
 $arrayidx16$i567 = ((($Ai)) + 384|0);
 $arrayidx17$i568 = ((($Ai)) + 388|0);
 $arrayidx18$i569 = ((($Ai)) + 392|0);
 $arrayidx19$i570 = ((($Ai)) + 396|0);
 $arraydecay9$i452 = ((($Ai)) + 400|0);
 $arrayidx11$i513 = ((($Ai)) + 404|0);
 $arrayidx12$i514 = ((($Ai)) + 408|0);
 $arrayidx13$i515 = ((($Ai)) + 412|0);
 $arrayidx14$i516 = ((($Ai)) + 416|0);
 $arrayidx15$i517 = ((($Ai)) + 420|0);
 $arrayidx16$i518 = ((($Ai)) + 424|0);
 $arrayidx17$i519 = ((($Ai)) + 428|0);
 $arrayidx18$i520 = ((($Ai)) + 432|0);
 $arrayidx19$i521 = ((($Ai)) + 436|0);
 $arraydecay13$i454 = ((($Ai)) + 440|0);
 $arrayidx11$i464 = ((($Ai)) + 444|0);
 $arrayidx12$i465 = ((($Ai)) + 448|0);
 $arrayidx13$i466 = ((($Ai)) + 452|0);
 $arrayidx14$i467 = ((($Ai)) + 456|0);
 $arrayidx15$i468 = ((($Ai)) + 460|0);
 $arrayidx16$i469 = ((($Ai)) + 464|0);
 $arrayidx17$i470 = ((($Ai)) + 468|0);
 $arrayidx18$i471 = ((($Ai)) + 472|0);
 $arrayidx19$i472 = ((($Ai)) + 476|0);
 $arraydecay2$i657 = ((($Ai)) + 480|0);
 $arrayidx11$i821 = ((($Ai)) + 484|0);
 $arrayidx12$i822 = ((($Ai)) + 488|0);
 $arrayidx13$i823 = ((($Ai)) + 492|0);
 $arrayidx14$i824 = ((($Ai)) + 496|0);
 $arrayidx15$i825 = ((($Ai)) + 500|0);
 $arrayidx16$i826 = ((($Ai)) + 504|0);
 $arrayidx17$i827 = ((($Ai)) + 508|0);
 $arrayidx18$i828 = ((($Ai)) + 512|0);
 $arrayidx19$i829 = ((($Ai)) + 516|0);
 $arraydecay5$i660 = ((($Ai)) + 520|0);
 $arrayidx11$i772 = ((($Ai)) + 524|0);
 $arrayidx12$i773 = ((($Ai)) + 528|0);
 $arrayidx13$i774 = ((($Ai)) + 532|0);
 $arrayidx14$i775 = ((($Ai)) + 536|0);
 $arrayidx15$i776 = ((($Ai)) + 540|0);
 $arrayidx16$i777 = ((($Ai)) + 544|0);
 $arrayidx17$i778 = ((($Ai)) + 548|0);
 $arrayidx18$i779 = ((($Ai)) + 552|0);
 $arrayidx19$i780 = ((($Ai)) + 556|0);
 $arraydecay9$i662 = ((($Ai)) + 560|0);
 $arrayidx11$i723 = ((($Ai)) + 564|0);
 $arrayidx12$i724 = ((($Ai)) + 568|0);
 $arrayidx13$i725 = ((($Ai)) + 572|0);
 $arrayidx14$i726 = ((($Ai)) + 576|0);
 $arrayidx15$i727 = ((($Ai)) + 580|0);
 $arrayidx16$i728 = ((($Ai)) + 584|0);
 $arrayidx17$i729 = ((($Ai)) + 588|0);
 $arrayidx18$i730 = ((($Ai)) + 592|0);
 $arrayidx19$i731 = ((($Ai)) + 596|0);
 $arraydecay13$i664 = ((($Ai)) + 600|0);
 $arrayidx11$i674 = ((($Ai)) + 604|0);
 $arrayidx12$i675 = ((($Ai)) + 608|0);
 $arrayidx13$i676 = ((($Ai)) + 612|0);
 $arrayidx14$i677 = ((($Ai)) + 616|0);
 $arrayidx15$i678 = ((($Ai)) + 620|0);
 $arrayidx16$i679 = ((($Ai)) + 624|0);
 $arrayidx17$i680 = ((($Ai)) + 628|0);
 $arrayidx18$i681 = ((($Ai)) + 632|0);
 $arrayidx19$i682 = ((($Ai)) + 636|0);
 $arraydecay2$i867 = ((($Ai)) + 640|0);
 $arrayidx11$i1031 = ((($Ai)) + 644|0);
 $arrayidx12$i1032 = ((($Ai)) + 648|0);
 $arrayidx13$i1033 = ((($Ai)) + 652|0);
 $arrayidx14$i1034 = ((($Ai)) + 656|0);
 $arrayidx15$i1035 = ((($Ai)) + 660|0);
 $arrayidx16$i1036 = ((($Ai)) + 664|0);
 $arrayidx17$i1037 = ((($Ai)) + 668|0);
 $arrayidx18$i1038 = ((($Ai)) + 672|0);
 $arrayidx19$i1039 = ((($Ai)) + 676|0);
 $arraydecay5$i870 = ((($Ai)) + 680|0);
 $arrayidx11$i982 = ((($Ai)) + 684|0);
 $arrayidx12$i983 = ((($Ai)) + 688|0);
 $arrayidx13$i984 = ((($Ai)) + 692|0);
 $arrayidx14$i985 = ((($Ai)) + 696|0);
 $arrayidx15$i986 = ((($Ai)) + 700|0);
 $arrayidx16$i987 = ((($Ai)) + 704|0);
 $arrayidx17$i988 = ((($Ai)) + 708|0);
 $arrayidx18$i989 = ((($Ai)) + 712|0);
 $arrayidx19$i990 = ((($Ai)) + 716|0);
 $arraydecay9$i872 = ((($Ai)) + 720|0);
 $arrayidx11$i933 = ((($Ai)) + 724|0);
 $arrayidx12$i934 = ((($Ai)) + 728|0);
 $arrayidx13$i935 = ((($Ai)) + 732|0);
 $arrayidx14$i936 = ((($Ai)) + 736|0);
 $arrayidx15$i937 = ((($Ai)) + 740|0);
 $arrayidx16$i938 = ((($Ai)) + 744|0);
 $arrayidx17$i939 = ((($Ai)) + 748|0);
 $arrayidx18$i940 = ((($Ai)) + 752|0);
 $arrayidx19$i941 = ((($Ai)) + 756|0);
 $arraydecay13$i874 = ((($Ai)) + 760|0);
 $arrayidx11$i884 = ((($Ai)) + 764|0);
 $arrayidx12$i885 = ((($Ai)) + 768|0);
 $arrayidx13$i886 = ((($Ai)) + 772|0);
 $arrayidx14$i887 = ((($Ai)) + 776|0);
 $arrayidx15$i888 = ((($Ai)) + 780|0);
 $arrayidx16$i889 = ((($Ai)) + 784|0);
 $arrayidx17$i890 = ((($Ai)) + 788|0);
 $arrayidx18$i891 = ((($Ai)) + 792|0);
 $arrayidx19$i892 = ((($Ai)) + 796|0);
 $arraydecay2$i1084 = ((($Ai)) + 800|0);
 $arrayidx11$i1248 = ((($Ai)) + 804|0);
 $arrayidx12$i1249 = ((($Ai)) + 808|0);
 $arrayidx13$i1250 = ((($Ai)) + 812|0);
 $arrayidx14$i1251 = ((($Ai)) + 816|0);
 $arrayidx15$i1252 = ((($Ai)) + 820|0);
 $arrayidx16$i1253 = ((($Ai)) + 824|0);
 $arrayidx17$i1254 = ((($Ai)) + 828|0);
 $arrayidx18$i1255 = ((($Ai)) + 832|0);
 $arrayidx19$i1256 = ((($Ai)) + 836|0);
 $arraydecay5$i1087 = ((($Ai)) + 840|0);
 $arrayidx11$i1199 = ((($Ai)) + 844|0);
 $arrayidx12$i1200 = ((($Ai)) + 848|0);
 $arrayidx13$i1201 = ((($Ai)) + 852|0);
 $arrayidx14$i1202 = ((($Ai)) + 856|0);
 $arrayidx15$i1203 = ((($Ai)) + 860|0);
 $arrayidx16$i1204 = ((($Ai)) + 864|0);
 $arrayidx17$i1205 = ((($Ai)) + 868|0);
 $arrayidx18$i1206 = ((($Ai)) + 872|0);
 $arrayidx19$i1207 = ((($Ai)) + 876|0);
 $arraydecay9$i1089 = ((($Ai)) + 880|0);
 $arrayidx11$i1150 = ((($Ai)) + 884|0);
 $arrayidx12$i1151 = ((($Ai)) + 888|0);
 $arrayidx13$i1152 = ((($Ai)) + 892|0);
 $arrayidx14$i1153 = ((($Ai)) + 896|0);
 $arrayidx15$i1154 = ((($Ai)) + 900|0);
 $arrayidx16$i1155 = ((($Ai)) + 904|0);
 $arrayidx17$i1156 = ((($Ai)) + 908|0);
 $arrayidx18$i1157 = ((($Ai)) + 912|0);
 $arrayidx19$i1158 = ((($Ai)) + 916|0);
 $arraydecay13$i1091 = ((($Ai)) + 920|0);
 $arrayidx11$i1101 = ((($Ai)) + 924|0);
 $arrayidx12$i1102 = ((($Ai)) + 928|0);
 $arrayidx13$i1103 = ((($Ai)) + 932|0);
 $arrayidx14$i1104 = ((($Ai)) + 936|0);
 $arrayidx15$i1105 = ((($Ai)) + 940|0);
 $arrayidx16$i1106 = ((($Ai)) + 944|0);
 $arrayidx17$i1107 = ((($Ai)) + 948|0);
 $arrayidx18$i1108 = ((($Ai)) + 952|0);
 $arrayidx19$i1109 = ((($Ai)) + 956|0);
 $arraydecay2$i1294 = ((($Ai)) + 960|0);
 $arrayidx11$i1458 = ((($Ai)) + 964|0);
 $arrayidx12$i1459 = ((($Ai)) + 968|0);
 $arrayidx13$i1460 = ((($Ai)) + 972|0);
 $arrayidx14$i1461 = ((($Ai)) + 976|0);
 $arrayidx15$i1462 = ((($Ai)) + 980|0);
 $arrayidx16$i1463 = ((($Ai)) + 984|0);
 $arrayidx17$i1464 = ((($Ai)) + 988|0);
 $arrayidx18$i1465 = ((($Ai)) + 992|0);
 $arrayidx19$i1466 = ((($Ai)) + 996|0);
 $arraydecay5$i1297 = ((($Ai)) + 1000|0);
 $arrayidx11$i1409 = ((($Ai)) + 1004|0);
 $arrayidx12$i1410 = ((($Ai)) + 1008|0);
 $arrayidx13$i1411 = ((($Ai)) + 1012|0);
 $arrayidx14$i1412 = ((($Ai)) + 1016|0);
 $arrayidx15$i1413 = ((($Ai)) + 1020|0);
 $arrayidx16$i1414 = ((($Ai)) + 1024|0);
 $arrayidx17$i1415 = ((($Ai)) + 1028|0);
 $arrayidx18$i1416 = ((($Ai)) + 1032|0);
 $arrayidx19$i1417 = ((($Ai)) + 1036|0);
 $arraydecay9$i1299 = ((($Ai)) + 1040|0);
 $arrayidx11$i1360 = ((($Ai)) + 1044|0);
 $arrayidx12$i1361 = ((($Ai)) + 1048|0);
 $arrayidx13$i1362 = ((($Ai)) + 1052|0);
 $arrayidx14$i1363 = ((($Ai)) + 1056|0);
 $arrayidx15$i1364 = ((($Ai)) + 1060|0);
 $arrayidx16$i1365 = ((($Ai)) + 1064|0);
 $arrayidx17$i1366 = ((($Ai)) + 1068|0);
 $arrayidx18$i1367 = ((($Ai)) + 1072|0);
 $arrayidx19$i1368 = ((($Ai)) + 1076|0);
 $arraydecay13$i1301 = ((($Ai)) + 1080|0);
 $arrayidx11$i1311 = ((($Ai)) + 1084|0);
 $arrayidx12$i1312 = ((($Ai)) + 1088|0);
 $arrayidx13$i1313 = ((($Ai)) + 1092|0);
 $arrayidx14$i1314 = ((($Ai)) + 1096|0);
 $arrayidx15$i1315 = ((($Ai)) + 1100|0);
 $arrayidx16$i1316 = ((($Ai)) + 1104|0);
 $arrayidx17$i1317 = ((($Ai)) + 1108|0);
 $arrayidx18$i1318 = ((($Ai)) + 1112|0);
 $arrayidx19$i1319 = ((($Ai)) + 1116|0);
 $arraydecay2$i1768 = ((($Ai)) + 1120|0);
 $arrayidx11$i1932 = ((($Ai)) + 1124|0);
 $arrayidx12$i1933 = ((($Ai)) + 1128|0);
 $arrayidx13$i1934 = ((($Ai)) + 1132|0);
 $arrayidx14$i1935 = ((($Ai)) + 1136|0);
 $arrayidx15$i1936 = ((($Ai)) + 1140|0);
 $arrayidx16$i1937 = ((($Ai)) + 1144|0);
 $arrayidx17$i1938 = ((($Ai)) + 1148|0);
 $arrayidx18$i1939 = ((($Ai)) + 1152|0);
 $arrayidx19$i1940 = ((($Ai)) + 1156|0);
 $arraydecay5$i1771 = ((($Ai)) + 1160|0);
 $arrayidx11$i1883 = ((($Ai)) + 1164|0);
 $arrayidx12$i1884 = ((($Ai)) + 1168|0);
 $arrayidx13$i1885 = ((($Ai)) + 1172|0);
 $arrayidx14$i1886 = ((($Ai)) + 1176|0);
 $arrayidx15$i1887 = ((($Ai)) + 1180|0);
 $arrayidx16$i1888 = ((($Ai)) + 1184|0);
 $arrayidx17$i1889 = ((($Ai)) + 1188|0);
 $arrayidx18$i1890 = ((($Ai)) + 1192|0);
 $arrayidx19$i1891 = ((($Ai)) + 1196|0);
 $arraydecay9$i1773 = ((($Ai)) + 1200|0);
 $arrayidx11$i1834 = ((($Ai)) + 1204|0);
 $arrayidx12$i1835 = ((($Ai)) + 1208|0);
 $arrayidx13$i1836 = ((($Ai)) + 1212|0);
 $arrayidx14$i1837 = ((($Ai)) + 1216|0);
 $arrayidx15$i1838 = ((($Ai)) + 1220|0);
 $arrayidx16$i1839 = ((($Ai)) + 1224|0);
 $arrayidx17$i1840 = ((($Ai)) + 1228|0);
 $arrayidx18$i1841 = ((($Ai)) + 1232|0);
 $arrayidx19$i1842 = ((($Ai)) + 1236|0);
 $arraydecay13$i1775 = ((($Ai)) + 1240|0);
 $arrayidx11$i1785 = ((($Ai)) + 1244|0);
 $arrayidx12$i1786 = ((($Ai)) + 1248|0);
 $arrayidx13$i1787 = ((($Ai)) + 1252|0);
 $arrayidx14$i1788 = ((($Ai)) + 1256|0);
 $arrayidx15$i1789 = ((($Ai)) + 1260|0);
 $arrayidx16$i1790 = ((($Ai)) + 1264|0);
 $arrayidx17$i1791 = ((($Ai)) + 1268|0);
 $arrayidx18$i1792 = ((($Ai)) + 1272|0);
 $arrayidx19$i1793 = ((($Ai)) + 1276|0);
 $3 = ((($cur)) + 116|0);
 $i$22017 = 63;
 while(1) {
  $arrayidx38 = (($e) + ($i$22017)|0);
  $4 = HEAP8[$arrayidx38>>0]|0;
  $5 = ($4&255) >>> 7;
  $conv39 = $4 << 24 >> 24;
  $conv40 = $5&255;
  $sub41 = (0 - ($conv40))|0;
  $and = $sub41 & $conv39;
  $shl43 = $and << 1;
  $sub44 = (($conv39) - ($shl43))|0;
  _ge_p2_dbl($t,$r);
  _fe_mul($r,$t,$arraydecay3$i);
  _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
  _fe_mul($arraydecay2$i44,$arraydecay7$i,$arraydecay3$i);
  _ge_p2_dbl($t,$r);
  _fe_mul($r,$t,$arraydecay3$i);
  _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
  _fe_mul($arraydecay2$i44,$arraydecay7$i,$arraydecay3$i);
  _ge_p2_dbl($t,$r);
  _fe_mul($r,$t,$arraydecay3$i);
  _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
  _fe_mul($arraydecay2$i44,$arraydecay7$i,$arraydecay3$i);
  _ge_p2_dbl($t,$r);
  _fe_mul($u,$t,$arraydecay3$i);
  _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
  _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
  _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
  dest=$3; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $xor4$i = $sub44 & 255;
  $conv3$i = $xor4$i ^ 1;
  $sub$i = (($conv3$i) + -1)|0;
  $6 = HEAP32[$Ai>>2]|0;
  $7 = HEAP32[$arrayidx11$i191>>2]|0;
  $8 = HEAP32[$arrayidx12$i192>>2]|0;
  $9 = HEAP32[$arrayidx13$i193>>2]|0;
  $10 = HEAP32[$arrayidx14$i194>>2]|0;
  $11 = HEAP32[$arrayidx15$i195>>2]|0;
  $12 = HEAP32[$arrayidx16$i196>>2]|0;
  $13 = HEAP32[$arrayidx17$i197>>2]|0;
  $14 = HEAP32[$arrayidx18$i198>>2]|0;
  $15 = HEAP32[$arrayidx19$i199>>2]|0;
  $xor$i200 = $6 ^ 1;
  $sub$i210 = $sub$i >> 31;
  $and$i211 = $xor$i200 & $sub$i210;
  $and29$i212 = $7 & $sub$i210;
  $and30$i213 = $8 & $sub$i210;
  $and31$i214 = $9 & $sub$i210;
  $and32$i215 = $10 & $sub$i210;
  $and33$i216 = $11 & $sub$i210;
  $and34$i217 = $12 & $sub$i210;
  $and35$i218 = $13 & $sub$i210;
  $and36$i219 = $14 & $sub$i210;
  $and37$i220 = $15 & $sub$i210;
  $xor38$i221 = $and$i211 ^ 1;
  HEAP32[$cur>>2] = $xor38$i221;
  HEAP32[$arrayidx1$i$i75>>2] = $and29$i212;
  HEAP32[$arrayidx2$i183>>2] = $and30$i213;
  HEAP32[$arrayidx3$i184>>2] = $and31$i214;
  HEAP32[$arrayidx4$i185>>2] = $and32$i215;
  HEAP32[$arrayidx5$i186>>2] = $and33$i216;
  HEAP32[$arrayidx6$i187>>2] = $and34$i217;
  HEAP32[$arrayidx7$i188>>2] = $and35$i218;
  HEAP32[$arrayidx8$i189>>2] = $and36$i219;
  HEAP32[$arrayidx9$i190>>2] = $and37$i220;
  $16 = HEAP32[$arraydecay5$i>>2]|0;
  $17 = HEAP32[$arrayidx11$i142>>2]|0;
  $18 = HEAP32[$arrayidx12$i143>>2]|0;
  $19 = HEAP32[$arrayidx13$i144>>2]|0;
  $20 = HEAP32[$arrayidx14$i145>>2]|0;
  $21 = HEAP32[$arrayidx15$i146>>2]|0;
  $22 = HEAP32[$arrayidx16$i147>>2]|0;
  $23 = HEAP32[$arrayidx17$i148>>2]|0;
  $24 = HEAP32[$arrayidx18$i149>>2]|0;
  $25 = HEAP32[$arrayidx19$i150>>2]|0;
  $xor$i151 = $16 ^ 1;
  $and$i162 = $xor$i151 & $sub$i210;
  $and29$i163 = $17 & $sub$i210;
  $and30$i164 = $18 & $sub$i210;
  $and31$i165 = $19 & $sub$i210;
  $and32$i166 = $20 & $sub$i210;
  $and33$i167 = $21 & $sub$i210;
  $and34$i168 = $22 & $sub$i210;
  $and35$i169 = $23 & $sub$i210;
  $and36$i170 = $24 & $sub$i210;
  $and37$i171 = $25 & $sub$i210;
  $xor38$i172 = $and$i162 ^ 1;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i172;
  HEAP32[$arrayidx1$i5$i>>2] = $and29$i163;
  HEAP32[$arrayidx2$i134>>2] = $and30$i164;
  HEAP32[$arrayidx3$i135>>2] = $and31$i165;
  HEAP32[$arrayidx4$i136>>2] = $and32$i166;
  HEAP32[$arrayidx5$i137>>2] = $and33$i167;
  HEAP32[$arrayidx6$i138>>2] = $and34$i168;
  HEAP32[$arrayidx7$i139>>2] = $and35$i169;
  HEAP32[$arrayidx8$i140>>2] = $and36$i170;
  HEAP32[$arrayidx9$i141>>2] = $and37$i171;
  $26 = HEAP32[$arraydecay9$i82>>2]|0;
  $27 = HEAP32[$arrayidx11$i93>>2]|0;
  $28 = HEAP32[$arrayidx12$i94>>2]|0;
  $29 = HEAP32[$arrayidx13$i95>>2]|0;
  $30 = HEAP32[$arrayidx14$i96>>2]|0;
  $31 = HEAP32[$arrayidx15$i97>>2]|0;
  $32 = HEAP32[$arrayidx16$i98>>2]|0;
  $33 = HEAP32[$arrayidx17$i99>>2]|0;
  $34 = HEAP32[$arrayidx18$i100>>2]|0;
  $35 = HEAP32[$arrayidx19$i101>>2]|0;
  $xor$i102 = $26 ^ 1;
  $and$i113 = $xor$i102 & $sub$i210;
  $and29$i114 = $27 & $sub$i210;
  $and30$i115 = $28 & $sub$i210;
  $and31$i116 = $29 & $sub$i210;
  $and32$i117 = $30 & $sub$i210;
  $and33$i118 = $31 & $sub$i210;
  $and34$i119 = $32 & $sub$i210;
  $and35$i120 = $33 & $sub$i210;
  $and36$i121 = $34 & $sub$i210;
  $and37$i122 = $35 & $sub$i210;
  $xor38$i123 = $and$i113 ^ 1;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i123;
  HEAP32[$arrayidx1$i4$i>>2] = $and29$i114;
  HEAP32[$arrayidx2$i85>>2] = $and30$i115;
  HEAP32[$arrayidx3$i86>>2] = $and31$i116;
  HEAP32[$arrayidx4$i87>>2] = $and32$i117;
  HEAP32[$arrayidx5$i88>>2] = $and33$i118;
  HEAP32[$arrayidx6$i89>>2] = $and34$i119;
  HEAP32[$arrayidx7$i90>>2] = $and35$i120;
  HEAP32[$arrayidx8$i91>>2] = $and36$i121;
  HEAP32[$arrayidx9$i92>>2] = $and37$i122;
  $36 = HEAP32[$arraydecay11$i>>2]|0;
  $37 = HEAP32[$arrayidx1$i>>2]|0;
  $38 = HEAP32[$arrayidx2$i>>2]|0;
  $39 = HEAP32[$arrayidx3$i>>2]|0;
  $40 = HEAP32[$arrayidx4$i>>2]|0;
  $41 = HEAP32[$arrayidx5$i>>2]|0;
  $42 = HEAP32[$arrayidx6$i>>2]|0;
  $43 = HEAP32[$arrayidx7$i>>2]|0;
  $44 = HEAP32[$arrayidx8$i>>2]|0;
  $45 = HEAP32[$arrayidx9$i>>2]|0;
  $46 = HEAP32[$arraydecay13$i>>2]|0;
  $47 = HEAP32[$arrayidx11$i>>2]|0;
  $48 = HEAP32[$arrayidx12$i>>2]|0;
  $49 = HEAP32[$arrayidx13$i>>2]|0;
  $50 = HEAP32[$arrayidx14$i>>2]|0;
  $51 = HEAP32[$arrayidx15$i>>2]|0;
  $52 = HEAP32[$arrayidx16$i>>2]|0;
  $53 = HEAP32[$arrayidx17$i>>2]|0;
  $54 = HEAP32[$arrayidx18$i>>2]|0;
  $55 = HEAP32[$arrayidx19$i>>2]|0;
  $xor$i = $46 ^ $36;
  $xor20$i = $47 ^ $37;
  $xor21$i = $48 ^ $38;
  $xor22$i = $49 ^ $39;
  $xor23$i = $50 ^ $40;
  $xor24$i = $51 ^ $41;
  $xor25$i = $52 ^ $42;
  $xor26$i = $53 ^ $43;
  $xor27$i = $54 ^ $44;
  $xor28$i = $55 ^ $45;
  $and$i = $xor$i & $sub$i210;
  $and29$i = $xor20$i & $sub$i210;
  $and30$i = $xor21$i & $sub$i210;
  $and31$i = $xor22$i & $sub$i210;
  $and32$i = $xor23$i & $sub$i210;
  $and33$i = $xor24$i & $sub$i210;
  $and34$i = $xor25$i & $sub$i210;
  $and35$i = $xor26$i & $sub$i210;
  $and36$i = $xor27$i & $sub$i210;
  $and37$i = $xor28$i & $sub$i210;
  $xor38$i = $and$i ^ $36;
  HEAP32[$arraydecay11$i>>2] = $xor38$i;
  $xor40$i = $and29$i ^ $37;
  HEAP32[$arrayidx1$i>>2] = $xor40$i;
  $xor42$i = $and30$i ^ $38;
  HEAP32[$arrayidx2$i>>2] = $xor42$i;
  $xor44$i = $and31$i ^ $39;
  HEAP32[$arrayidx3$i>>2] = $xor44$i;
  $xor46$i = $and32$i ^ $40;
  HEAP32[$arrayidx4$i>>2] = $xor46$i;
  $xor48$i = $and33$i ^ $41;
  HEAP32[$arrayidx5$i>>2] = $xor48$i;
  $xor50$i = $and34$i ^ $42;
  HEAP32[$arrayidx6$i>>2] = $xor50$i;
  $xor52$i = $and35$i ^ $43;
  HEAP32[$arrayidx7$i>>2] = $xor52$i;
  $xor54$i = $and36$i ^ $44;
  HEAP32[$arrayidx8$i>>2] = $xor54$i;
  $xor56$i = $and37$i ^ $45;
  HEAP32[$arrayidx9$i>>2] = $xor56$i;
  $conv3$i232 = $xor4$i ^ 2;
  $sub$i233 = (($conv3$i232) + -1)|0;
  $56 = HEAP32[$arraydecay2$i237>>2]|0;
  $57 = HEAP32[$arrayidx11$i401>>2]|0;
  $58 = HEAP32[$arrayidx12$i402>>2]|0;
  $59 = HEAP32[$arrayidx13$i403>>2]|0;
  $60 = HEAP32[$arrayidx14$i404>>2]|0;
  $61 = HEAP32[$arrayidx15$i405>>2]|0;
  $62 = HEAP32[$arrayidx16$i406>>2]|0;
  $63 = HEAP32[$arrayidx17$i407>>2]|0;
  $64 = HEAP32[$arrayidx18$i408>>2]|0;
  $65 = HEAP32[$arrayidx19$i409>>2]|0;
  $xor$i410 = $56 ^ $xor38$i221;
  $xor20$i411 = $57 ^ $and29$i212;
  $xor21$i412 = $58 ^ $and30$i213;
  $xor22$i413 = $59 ^ $and31$i214;
  $xor23$i414 = $60 ^ $and32$i215;
  $xor24$i415 = $61 ^ $and33$i216;
  $xor25$i416 = $62 ^ $and34$i217;
  $xor26$i417 = $63 ^ $and35$i218;
  $xor27$i418 = $64 ^ $and36$i219;
  $xor28$i419 = $65 ^ $and37$i220;
  $sub$i420 = $sub$i233 >> 31;
  $and$i421 = $xor$i410 & $sub$i420;
  $and29$i422 = $xor20$i411 & $sub$i420;
  $and30$i423 = $xor21$i412 & $sub$i420;
  $and31$i424 = $xor22$i413 & $sub$i420;
  $and32$i425 = $xor23$i414 & $sub$i420;
  $and33$i426 = $xor24$i415 & $sub$i420;
  $and34$i427 = $xor25$i416 & $sub$i420;
  $and35$i428 = $xor26$i417 & $sub$i420;
  $and36$i429 = $xor27$i418 & $sub$i420;
  $and37$i430 = $xor28$i419 & $sub$i420;
  $xor38$i431 = $and$i421 ^ $xor38$i221;
  HEAP32[$cur>>2] = $xor38$i431;
  $xor40$i432 = $and29$i422 ^ $and29$i212;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i432;
  $xor42$i433 = $and30$i423 ^ $and30$i213;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i433;
  $xor44$i434 = $and31$i424 ^ $and31$i214;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i434;
  $xor46$i435 = $and32$i425 ^ $and32$i215;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i435;
  $xor48$i436 = $and33$i426 ^ $and33$i216;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i436;
  $xor50$i437 = $and34$i427 ^ $and34$i217;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i437;
  $xor52$i438 = $and35$i428 ^ $and35$i218;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i438;
  $xor54$i439 = $and36$i429 ^ $and36$i219;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i439;
  $xor56$i440 = $and37$i430 ^ $and37$i220;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i440;
  $66 = HEAP32[$arraydecay5$i240>>2]|0;
  $67 = HEAP32[$arrayidx11$i352>>2]|0;
  $68 = HEAP32[$arrayidx12$i353>>2]|0;
  $69 = HEAP32[$arrayidx13$i354>>2]|0;
  $70 = HEAP32[$arrayidx14$i355>>2]|0;
  $71 = HEAP32[$arrayidx15$i356>>2]|0;
  $72 = HEAP32[$arrayidx16$i357>>2]|0;
  $73 = HEAP32[$arrayidx17$i358>>2]|0;
  $74 = HEAP32[$arrayidx18$i359>>2]|0;
  $75 = HEAP32[$arrayidx19$i360>>2]|0;
  $xor$i361 = $66 ^ $xor38$i172;
  $xor20$i362 = $67 ^ $and29$i163;
  $xor21$i363 = $68 ^ $and30$i164;
  $xor22$i364 = $69 ^ $and31$i165;
  $xor23$i365 = $70 ^ $and32$i166;
  $xor24$i366 = $71 ^ $and33$i167;
  $xor25$i367 = $72 ^ $and34$i168;
  $xor26$i368 = $73 ^ $and35$i169;
  $xor27$i369 = $74 ^ $and36$i170;
  $xor28$i370 = $75 ^ $and37$i171;
  $and$i372 = $xor$i361 & $sub$i420;
  $and29$i373 = $xor20$i362 & $sub$i420;
  $and30$i374 = $xor21$i363 & $sub$i420;
  $and31$i375 = $xor22$i364 & $sub$i420;
  $and32$i376 = $xor23$i365 & $sub$i420;
  $and33$i377 = $xor24$i366 & $sub$i420;
  $and34$i378 = $xor25$i367 & $sub$i420;
  $and35$i379 = $xor26$i368 & $sub$i420;
  $and36$i380 = $xor27$i369 & $sub$i420;
  $and37$i381 = $xor28$i370 & $sub$i420;
  $xor38$i382 = $and$i372 ^ $xor38$i172;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i382;
  $xor40$i383 = $and29$i373 ^ $and29$i163;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i383;
  $xor42$i384 = $and30$i374 ^ $and30$i164;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i384;
  $xor44$i385 = $and31$i375 ^ $and31$i165;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i385;
  $xor46$i386 = $and32$i376 ^ $and32$i166;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i386;
  $xor48$i387 = $and33$i377 ^ $and33$i167;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i387;
  $xor50$i388 = $and34$i378 ^ $and34$i168;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i388;
  $xor52$i389 = $and35$i379 ^ $and35$i169;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i389;
  $xor54$i390 = $and36$i380 ^ $and36$i170;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i390;
  $xor56$i391 = $and37$i381 ^ $and37$i171;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i391;
  $76 = HEAP32[$arraydecay9$i242>>2]|0;
  $77 = HEAP32[$arrayidx11$i303>>2]|0;
  $78 = HEAP32[$arrayidx12$i304>>2]|0;
  $79 = HEAP32[$arrayidx13$i305>>2]|0;
  $80 = HEAP32[$arrayidx14$i306>>2]|0;
  $81 = HEAP32[$arrayidx15$i307>>2]|0;
  $82 = HEAP32[$arrayidx16$i308>>2]|0;
  $83 = HEAP32[$arrayidx17$i309>>2]|0;
  $84 = HEAP32[$arrayidx18$i310>>2]|0;
  $85 = HEAP32[$arrayidx19$i311>>2]|0;
  $xor$i312 = $76 ^ $xor38$i123;
  $xor20$i313 = $77 ^ $and29$i114;
  $xor21$i314 = $78 ^ $and30$i115;
  $xor22$i315 = $79 ^ $and31$i116;
  $xor23$i316 = $80 ^ $and32$i117;
  $xor24$i317 = $81 ^ $and33$i118;
  $xor25$i318 = $82 ^ $and34$i119;
  $xor26$i319 = $83 ^ $and35$i120;
  $xor27$i320 = $84 ^ $and36$i121;
  $xor28$i321 = $85 ^ $and37$i122;
  $and$i323 = $xor$i312 & $sub$i420;
  $and29$i324 = $xor20$i313 & $sub$i420;
  $and30$i325 = $xor21$i314 & $sub$i420;
  $and31$i326 = $xor22$i315 & $sub$i420;
  $and32$i327 = $xor23$i316 & $sub$i420;
  $and33$i328 = $xor24$i317 & $sub$i420;
  $and34$i329 = $xor25$i318 & $sub$i420;
  $and35$i330 = $xor26$i319 & $sub$i420;
  $and36$i331 = $xor27$i320 & $sub$i420;
  $and37$i332 = $xor28$i321 & $sub$i420;
  $xor38$i333 = $and$i323 ^ $xor38$i123;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i333;
  $xor40$i334 = $and29$i324 ^ $and29$i114;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i334;
  $xor42$i335 = $and30$i325 ^ $and30$i115;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i335;
  $xor44$i336 = $and31$i326 ^ $and31$i116;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i336;
  $xor46$i337 = $and32$i327 ^ $and32$i117;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i337;
  $xor48$i338 = $and33$i328 ^ $and33$i118;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i338;
  $xor50$i339 = $and34$i329 ^ $and34$i119;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i339;
  $xor52$i340 = $and35$i330 ^ $and35$i120;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i340;
  $xor54$i341 = $and36$i331 ^ $and36$i121;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i341;
  $xor56$i342 = $and37$i332 ^ $and37$i122;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i342;
  $86 = HEAP32[$arraydecay13$i244>>2]|0;
  $87 = HEAP32[$arrayidx11$i254>>2]|0;
  $88 = HEAP32[$arrayidx12$i255>>2]|0;
  $89 = HEAP32[$arrayidx13$i256>>2]|0;
  $90 = HEAP32[$arrayidx14$i257>>2]|0;
  $91 = HEAP32[$arrayidx15$i258>>2]|0;
  $92 = HEAP32[$arrayidx16$i259>>2]|0;
  $93 = HEAP32[$arrayidx17$i260>>2]|0;
  $94 = HEAP32[$arrayidx18$i261>>2]|0;
  $95 = HEAP32[$arrayidx19$i262>>2]|0;
  $xor$i263 = $86 ^ $xor38$i;
  $xor20$i264 = $87 ^ $xor40$i;
  $xor21$i265 = $88 ^ $xor42$i;
  $xor22$i266 = $89 ^ $xor44$i;
  $xor23$i267 = $90 ^ $xor46$i;
  $xor24$i268 = $91 ^ $xor48$i;
  $xor25$i269 = $92 ^ $xor50$i;
  $xor26$i270 = $93 ^ $xor52$i;
  $xor27$i271 = $94 ^ $xor54$i;
  $xor28$i272 = $95 ^ $xor56$i;
  $and$i274 = $xor$i263 & $sub$i420;
  $and29$i275 = $xor20$i264 & $sub$i420;
  $and30$i276 = $xor21$i265 & $sub$i420;
  $and31$i277 = $xor22$i266 & $sub$i420;
  $and32$i278 = $xor23$i267 & $sub$i420;
  $and33$i279 = $xor24$i268 & $sub$i420;
  $and34$i280 = $xor25$i269 & $sub$i420;
  $and35$i281 = $xor26$i270 & $sub$i420;
  $and36$i282 = $xor27$i271 & $sub$i420;
  $and37$i283 = $xor28$i272 & $sub$i420;
  $xor38$i284 = $and$i274 ^ $xor38$i;
  HEAP32[$arraydecay11$i>>2] = $xor38$i284;
  $xor40$i285 = $and29$i275 ^ $xor40$i;
  HEAP32[$arrayidx1$i>>2] = $xor40$i285;
  $xor42$i286 = $and30$i276 ^ $xor42$i;
  HEAP32[$arrayidx2$i>>2] = $xor42$i286;
  $xor44$i287 = $and31$i277 ^ $xor44$i;
  HEAP32[$arrayidx3$i>>2] = $xor44$i287;
  $xor46$i288 = $and32$i278 ^ $xor46$i;
  HEAP32[$arrayidx4$i>>2] = $xor46$i288;
  $xor48$i289 = $and33$i279 ^ $xor48$i;
  HEAP32[$arrayidx5$i>>2] = $xor48$i289;
  $xor50$i290 = $and34$i280 ^ $xor50$i;
  HEAP32[$arrayidx6$i>>2] = $xor50$i290;
  $xor52$i291 = $and35$i281 ^ $xor52$i;
  HEAP32[$arrayidx7$i>>2] = $xor52$i291;
  $xor54$i292 = $and36$i282 ^ $xor54$i;
  HEAP32[$arrayidx8$i>>2] = $xor54$i292;
  $xor56$i293 = $and37$i283 ^ $xor56$i;
  HEAP32[$arrayidx9$i>>2] = $xor56$i293;
  $conv3$i442 = $xor4$i ^ 3;
  $sub$i443 = (($conv3$i442) + -1)|0;
  $96 = HEAP32[$arraydecay2$i447>>2]|0;
  $97 = HEAP32[$arrayidx11$i611>>2]|0;
  $98 = HEAP32[$arrayidx12$i612>>2]|0;
  $99 = HEAP32[$arrayidx13$i613>>2]|0;
  $100 = HEAP32[$arrayidx14$i614>>2]|0;
  $101 = HEAP32[$arrayidx15$i615>>2]|0;
  $102 = HEAP32[$arrayidx16$i616>>2]|0;
  $103 = HEAP32[$arrayidx17$i617>>2]|0;
  $104 = HEAP32[$arrayidx18$i618>>2]|0;
  $105 = HEAP32[$arrayidx19$i619>>2]|0;
  $xor$i620 = $96 ^ $xor38$i431;
  $xor20$i621 = $97 ^ $xor40$i432;
  $xor21$i622 = $98 ^ $xor42$i433;
  $xor22$i623 = $99 ^ $xor44$i434;
  $xor23$i624 = $100 ^ $xor46$i435;
  $xor24$i625 = $101 ^ $xor48$i436;
  $xor25$i626 = $102 ^ $xor50$i437;
  $xor26$i627 = $103 ^ $xor52$i438;
  $xor27$i628 = $104 ^ $xor54$i439;
  $xor28$i629 = $105 ^ $xor56$i440;
  $sub$i630 = $sub$i443 >> 31;
  $and$i631 = $xor$i620 & $sub$i630;
  $and29$i632 = $xor20$i621 & $sub$i630;
  $and30$i633 = $xor21$i622 & $sub$i630;
  $and31$i634 = $xor22$i623 & $sub$i630;
  $and32$i635 = $xor23$i624 & $sub$i630;
  $and33$i636 = $xor24$i625 & $sub$i630;
  $and34$i637 = $xor25$i626 & $sub$i630;
  $and35$i638 = $xor26$i627 & $sub$i630;
  $and36$i639 = $xor27$i628 & $sub$i630;
  $and37$i640 = $xor28$i629 & $sub$i630;
  $xor38$i641 = $and$i631 ^ $xor38$i431;
  HEAP32[$cur>>2] = $xor38$i641;
  $xor40$i642 = $and29$i632 ^ $xor40$i432;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i642;
  $xor42$i643 = $and30$i633 ^ $xor42$i433;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i643;
  $xor44$i644 = $and31$i634 ^ $xor44$i434;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i644;
  $xor46$i645 = $and32$i635 ^ $xor46$i435;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i645;
  $xor48$i646 = $and33$i636 ^ $xor48$i436;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i646;
  $xor50$i647 = $and34$i637 ^ $xor50$i437;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i647;
  $xor52$i648 = $and35$i638 ^ $xor52$i438;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i648;
  $xor54$i649 = $and36$i639 ^ $xor54$i439;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i649;
  $xor56$i650 = $and37$i640 ^ $xor56$i440;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i650;
  $106 = HEAP32[$arraydecay5$i450>>2]|0;
  $107 = HEAP32[$arrayidx11$i562>>2]|0;
  $108 = HEAP32[$arrayidx12$i563>>2]|0;
  $109 = HEAP32[$arrayidx13$i564>>2]|0;
  $110 = HEAP32[$arrayidx14$i565>>2]|0;
  $111 = HEAP32[$arrayidx15$i566>>2]|0;
  $112 = HEAP32[$arrayidx16$i567>>2]|0;
  $113 = HEAP32[$arrayidx17$i568>>2]|0;
  $114 = HEAP32[$arrayidx18$i569>>2]|0;
  $115 = HEAP32[$arrayidx19$i570>>2]|0;
  $xor$i571 = $106 ^ $xor38$i382;
  $xor20$i572 = $107 ^ $xor40$i383;
  $xor21$i573 = $108 ^ $xor42$i384;
  $xor22$i574 = $109 ^ $xor44$i385;
  $xor23$i575 = $110 ^ $xor46$i386;
  $xor24$i576 = $111 ^ $xor48$i387;
  $xor25$i577 = $112 ^ $xor50$i388;
  $xor26$i578 = $113 ^ $xor52$i389;
  $xor27$i579 = $114 ^ $xor54$i390;
  $xor28$i580 = $115 ^ $xor56$i391;
  $and$i582 = $xor$i571 & $sub$i630;
  $and29$i583 = $xor20$i572 & $sub$i630;
  $and30$i584 = $xor21$i573 & $sub$i630;
  $and31$i585 = $xor22$i574 & $sub$i630;
  $and32$i586 = $xor23$i575 & $sub$i630;
  $and33$i587 = $xor24$i576 & $sub$i630;
  $and34$i588 = $xor25$i577 & $sub$i630;
  $and35$i589 = $xor26$i578 & $sub$i630;
  $and36$i590 = $xor27$i579 & $sub$i630;
  $and37$i591 = $xor28$i580 & $sub$i630;
  $xor38$i592 = $and$i582 ^ $xor38$i382;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i592;
  $xor40$i593 = $and29$i583 ^ $xor40$i383;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i593;
  $xor42$i594 = $and30$i584 ^ $xor42$i384;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i594;
  $xor44$i595 = $and31$i585 ^ $xor44$i385;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i595;
  $xor46$i596 = $and32$i586 ^ $xor46$i386;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i596;
  $xor48$i597 = $and33$i587 ^ $xor48$i387;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i597;
  $xor50$i598 = $and34$i588 ^ $xor50$i388;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i598;
  $xor52$i599 = $and35$i589 ^ $xor52$i389;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i599;
  $xor54$i600 = $and36$i590 ^ $xor54$i390;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i600;
  $xor56$i601 = $and37$i591 ^ $xor56$i391;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i601;
  $116 = HEAP32[$arraydecay9$i452>>2]|0;
  $117 = HEAP32[$arrayidx11$i513>>2]|0;
  $118 = HEAP32[$arrayidx12$i514>>2]|0;
  $119 = HEAP32[$arrayidx13$i515>>2]|0;
  $120 = HEAP32[$arrayidx14$i516>>2]|0;
  $121 = HEAP32[$arrayidx15$i517>>2]|0;
  $122 = HEAP32[$arrayidx16$i518>>2]|0;
  $123 = HEAP32[$arrayidx17$i519>>2]|0;
  $124 = HEAP32[$arrayidx18$i520>>2]|0;
  $125 = HEAP32[$arrayidx19$i521>>2]|0;
  $xor$i522 = $116 ^ $xor38$i333;
  $xor20$i523 = $117 ^ $xor40$i334;
  $xor21$i524 = $118 ^ $xor42$i335;
  $xor22$i525 = $119 ^ $xor44$i336;
  $xor23$i526 = $120 ^ $xor46$i337;
  $xor24$i527 = $121 ^ $xor48$i338;
  $xor25$i528 = $122 ^ $xor50$i339;
  $xor26$i529 = $123 ^ $xor52$i340;
  $xor27$i530 = $124 ^ $xor54$i341;
  $xor28$i531 = $125 ^ $xor56$i342;
  $and$i533 = $xor$i522 & $sub$i630;
  $and29$i534 = $xor20$i523 & $sub$i630;
  $and30$i535 = $xor21$i524 & $sub$i630;
  $and31$i536 = $xor22$i525 & $sub$i630;
  $and32$i537 = $xor23$i526 & $sub$i630;
  $and33$i538 = $xor24$i527 & $sub$i630;
  $and34$i539 = $xor25$i528 & $sub$i630;
  $and35$i540 = $xor26$i529 & $sub$i630;
  $and36$i541 = $xor27$i530 & $sub$i630;
  $and37$i542 = $xor28$i531 & $sub$i630;
  $xor38$i543 = $and$i533 ^ $xor38$i333;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i543;
  $xor40$i544 = $and29$i534 ^ $xor40$i334;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i544;
  $xor42$i545 = $and30$i535 ^ $xor42$i335;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i545;
  $xor44$i546 = $and31$i536 ^ $xor44$i336;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i546;
  $xor46$i547 = $and32$i537 ^ $xor46$i337;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i547;
  $xor48$i548 = $and33$i538 ^ $xor48$i338;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i548;
  $xor50$i549 = $and34$i539 ^ $xor50$i339;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i549;
  $xor52$i550 = $and35$i540 ^ $xor52$i340;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i550;
  $xor54$i551 = $and36$i541 ^ $xor54$i341;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i551;
  $xor56$i552 = $and37$i542 ^ $xor56$i342;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i552;
  $126 = HEAP32[$arraydecay13$i454>>2]|0;
  $127 = HEAP32[$arrayidx11$i464>>2]|0;
  $128 = HEAP32[$arrayidx12$i465>>2]|0;
  $129 = HEAP32[$arrayidx13$i466>>2]|0;
  $130 = HEAP32[$arrayidx14$i467>>2]|0;
  $131 = HEAP32[$arrayidx15$i468>>2]|0;
  $132 = HEAP32[$arrayidx16$i469>>2]|0;
  $133 = HEAP32[$arrayidx17$i470>>2]|0;
  $134 = HEAP32[$arrayidx18$i471>>2]|0;
  $135 = HEAP32[$arrayidx19$i472>>2]|0;
  $xor$i473 = $126 ^ $xor38$i284;
  $xor20$i474 = $127 ^ $xor40$i285;
  $xor21$i475 = $128 ^ $xor42$i286;
  $xor22$i476 = $129 ^ $xor44$i287;
  $xor23$i477 = $130 ^ $xor46$i288;
  $xor24$i478 = $131 ^ $xor48$i289;
  $xor25$i479 = $132 ^ $xor50$i290;
  $xor26$i480 = $133 ^ $xor52$i291;
  $xor27$i481 = $134 ^ $xor54$i292;
  $xor28$i482 = $135 ^ $xor56$i293;
  $and$i484 = $xor$i473 & $sub$i630;
  $and29$i485 = $xor20$i474 & $sub$i630;
  $and30$i486 = $xor21$i475 & $sub$i630;
  $and31$i487 = $xor22$i476 & $sub$i630;
  $and32$i488 = $xor23$i477 & $sub$i630;
  $and33$i489 = $xor24$i478 & $sub$i630;
  $and34$i490 = $xor25$i479 & $sub$i630;
  $and35$i491 = $xor26$i480 & $sub$i630;
  $and36$i492 = $xor27$i481 & $sub$i630;
  $and37$i493 = $xor28$i482 & $sub$i630;
  $xor38$i494 = $and$i484 ^ $xor38$i284;
  HEAP32[$arraydecay11$i>>2] = $xor38$i494;
  $xor40$i495 = $and29$i485 ^ $xor40$i285;
  HEAP32[$arrayidx1$i>>2] = $xor40$i495;
  $xor42$i496 = $and30$i486 ^ $xor42$i286;
  HEAP32[$arrayidx2$i>>2] = $xor42$i496;
  $xor44$i497 = $and31$i487 ^ $xor44$i287;
  HEAP32[$arrayidx3$i>>2] = $xor44$i497;
  $xor46$i498 = $and32$i488 ^ $xor46$i288;
  HEAP32[$arrayidx4$i>>2] = $xor46$i498;
  $xor48$i499 = $and33$i489 ^ $xor48$i289;
  HEAP32[$arrayidx5$i>>2] = $xor48$i499;
  $xor50$i500 = $and34$i490 ^ $xor50$i290;
  HEAP32[$arrayidx6$i>>2] = $xor50$i500;
  $xor52$i501 = $and35$i491 ^ $xor52$i291;
  HEAP32[$arrayidx7$i>>2] = $xor52$i501;
  $xor54$i502 = $and36$i492 ^ $xor54$i292;
  HEAP32[$arrayidx8$i>>2] = $xor54$i502;
  $xor56$i503 = $and37$i493 ^ $xor56$i293;
  HEAP32[$arrayidx9$i>>2] = $xor56$i503;
  $conv3$i652 = $xor4$i ^ 4;
  $sub$i653 = (($conv3$i652) + -1)|0;
  $136 = HEAP32[$arraydecay2$i657>>2]|0;
  $137 = HEAP32[$arrayidx11$i821>>2]|0;
  $138 = HEAP32[$arrayidx12$i822>>2]|0;
  $139 = HEAP32[$arrayidx13$i823>>2]|0;
  $140 = HEAP32[$arrayidx14$i824>>2]|0;
  $141 = HEAP32[$arrayidx15$i825>>2]|0;
  $142 = HEAP32[$arrayidx16$i826>>2]|0;
  $143 = HEAP32[$arrayidx17$i827>>2]|0;
  $144 = HEAP32[$arrayidx18$i828>>2]|0;
  $145 = HEAP32[$arrayidx19$i829>>2]|0;
  $xor$i830 = $136 ^ $xor38$i641;
  $xor20$i831 = $137 ^ $xor40$i642;
  $xor21$i832 = $138 ^ $xor42$i643;
  $xor22$i833 = $139 ^ $xor44$i644;
  $xor23$i834 = $140 ^ $xor46$i645;
  $xor24$i835 = $141 ^ $xor48$i646;
  $xor25$i836 = $142 ^ $xor50$i647;
  $xor26$i837 = $143 ^ $xor52$i648;
  $xor27$i838 = $144 ^ $xor54$i649;
  $xor28$i839 = $145 ^ $xor56$i650;
  $sub$i840 = $sub$i653 >> 31;
  $and$i841 = $xor$i830 & $sub$i840;
  $and29$i842 = $xor20$i831 & $sub$i840;
  $and30$i843 = $xor21$i832 & $sub$i840;
  $and31$i844 = $xor22$i833 & $sub$i840;
  $and32$i845 = $xor23$i834 & $sub$i840;
  $and33$i846 = $xor24$i835 & $sub$i840;
  $and34$i847 = $xor25$i836 & $sub$i840;
  $and35$i848 = $xor26$i837 & $sub$i840;
  $and36$i849 = $xor27$i838 & $sub$i840;
  $and37$i850 = $xor28$i839 & $sub$i840;
  $xor38$i851 = $and$i841 ^ $xor38$i641;
  HEAP32[$cur>>2] = $xor38$i851;
  $xor40$i852 = $and29$i842 ^ $xor40$i642;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i852;
  $xor42$i853 = $and30$i843 ^ $xor42$i643;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i853;
  $xor44$i854 = $and31$i844 ^ $xor44$i644;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i854;
  $xor46$i855 = $and32$i845 ^ $xor46$i645;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i855;
  $xor48$i856 = $and33$i846 ^ $xor48$i646;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i856;
  $xor50$i857 = $and34$i847 ^ $xor50$i647;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i857;
  $xor52$i858 = $and35$i848 ^ $xor52$i648;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i858;
  $xor54$i859 = $and36$i849 ^ $xor54$i649;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i859;
  $xor56$i860 = $and37$i850 ^ $xor56$i650;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i860;
  $146 = HEAP32[$arraydecay5$i660>>2]|0;
  $147 = HEAP32[$arrayidx11$i772>>2]|0;
  $148 = HEAP32[$arrayidx12$i773>>2]|0;
  $149 = HEAP32[$arrayidx13$i774>>2]|0;
  $150 = HEAP32[$arrayidx14$i775>>2]|0;
  $151 = HEAP32[$arrayidx15$i776>>2]|0;
  $152 = HEAP32[$arrayidx16$i777>>2]|0;
  $153 = HEAP32[$arrayidx17$i778>>2]|0;
  $154 = HEAP32[$arrayidx18$i779>>2]|0;
  $155 = HEAP32[$arrayidx19$i780>>2]|0;
  $xor$i781 = $146 ^ $xor38$i592;
  $xor20$i782 = $147 ^ $xor40$i593;
  $xor21$i783 = $148 ^ $xor42$i594;
  $xor22$i784 = $149 ^ $xor44$i595;
  $xor23$i785 = $150 ^ $xor46$i596;
  $xor24$i786 = $151 ^ $xor48$i597;
  $xor25$i787 = $152 ^ $xor50$i598;
  $xor26$i788 = $153 ^ $xor52$i599;
  $xor27$i789 = $154 ^ $xor54$i600;
  $xor28$i790 = $155 ^ $xor56$i601;
  $and$i792 = $xor$i781 & $sub$i840;
  $and29$i793 = $xor20$i782 & $sub$i840;
  $and30$i794 = $xor21$i783 & $sub$i840;
  $and31$i795 = $xor22$i784 & $sub$i840;
  $and32$i796 = $xor23$i785 & $sub$i840;
  $and33$i797 = $xor24$i786 & $sub$i840;
  $and34$i798 = $xor25$i787 & $sub$i840;
  $and35$i799 = $xor26$i788 & $sub$i840;
  $and36$i800 = $xor27$i789 & $sub$i840;
  $and37$i801 = $xor28$i790 & $sub$i840;
  $xor38$i802 = $and$i792 ^ $xor38$i592;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i802;
  $xor40$i803 = $and29$i793 ^ $xor40$i593;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i803;
  $xor42$i804 = $and30$i794 ^ $xor42$i594;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i804;
  $xor44$i805 = $and31$i795 ^ $xor44$i595;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i805;
  $xor46$i806 = $and32$i796 ^ $xor46$i596;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i806;
  $xor48$i807 = $and33$i797 ^ $xor48$i597;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i807;
  $xor50$i808 = $and34$i798 ^ $xor50$i598;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i808;
  $xor52$i809 = $and35$i799 ^ $xor52$i599;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i809;
  $xor54$i810 = $and36$i800 ^ $xor54$i600;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i810;
  $xor56$i811 = $and37$i801 ^ $xor56$i601;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i811;
  $156 = HEAP32[$arraydecay9$i662>>2]|0;
  $157 = HEAP32[$arrayidx11$i723>>2]|0;
  $158 = HEAP32[$arrayidx12$i724>>2]|0;
  $159 = HEAP32[$arrayidx13$i725>>2]|0;
  $160 = HEAP32[$arrayidx14$i726>>2]|0;
  $161 = HEAP32[$arrayidx15$i727>>2]|0;
  $162 = HEAP32[$arrayidx16$i728>>2]|0;
  $163 = HEAP32[$arrayidx17$i729>>2]|0;
  $164 = HEAP32[$arrayidx18$i730>>2]|0;
  $165 = HEAP32[$arrayidx19$i731>>2]|0;
  $xor$i732 = $156 ^ $xor38$i543;
  $xor20$i733 = $157 ^ $xor40$i544;
  $xor21$i734 = $158 ^ $xor42$i545;
  $xor22$i735 = $159 ^ $xor44$i546;
  $xor23$i736 = $160 ^ $xor46$i547;
  $xor24$i737 = $161 ^ $xor48$i548;
  $xor25$i738 = $162 ^ $xor50$i549;
  $xor26$i739 = $163 ^ $xor52$i550;
  $xor27$i740 = $164 ^ $xor54$i551;
  $xor28$i741 = $165 ^ $xor56$i552;
  $and$i743 = $xor$i732 & $sub$i840;
  $and29$i744 = $xor20$i733 & $sub$i840;
  $and30$i745 = $xor21$i734 & $sub$i840;
  $and31$i746 = $xor22$i735 & $sub$i840;
  $and32$i747 = $xor23$i736 & $sub$i840;
  $and33$i748 = $xor24$i737 & $sub$i840;
  $and34$i749 = $xor25$i738 & $sub$i840;
  $and35$i750 = $xor26$i739 & $sub$i840;
  $and36$i751 = $xor27$i740 & $sub$i840;
  $and37$i752 = $xor28$i741 & $sub$i840;
  $xor38$i753 = $and$i743 ^ $xor38$i543;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i753;
  $xor40$i754 = $and29$i744 ^ $xor40$i544;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i754;
  $xor42$i755 = $and30$i745 ^ $xor42$i545;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i755;
  $xor44$i756 = $and31$i746 ^ $xor44$i546;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i756;
  $xor46$i757 = $and32$i747 ^ $xor46$i547;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i757;
  $xor48$i758 = $and33$i748 ^ $xor48$i548;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i758;
  $xor50$i759 = $and34$i749 ^ $xor50$i549;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i759;
  $xor52$i760 = $and35$i750 ^ $xor52$i550;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i760;
  $xor54$i761 = $and36$i751 ^ $xor54$i551;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i761;
  $xor56$i762 = $and37$i752 ^ $xor56$i552;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i762;
  $166 = HEAP32[$arraydecay13$i664>>2]|0;
  $167 = HEAP32[$arrayidx11$i674>>2]|0;
  $168 = HEAP32[$arrayidx12$i675>>2]|0;
  $169 = HEAP32[$arrayidx13$i676>>2]|0;
  $170 = HEAP32[$arrayidx14$i677>>2]|0;
  $171 = HEAP32[$arrayidx15$i678>>2]|0;
  $172 = HEAP32[$arrayidx16$i679>>2]|0;
  $173 = HEAP32[$arrayidx17$i680>>2]|0;
  $174 = HEAP32[$arrayidx18$i681>>2]|0;
  $175 = HEAP32[$arrayidx19$i682>>2]|0;
  $xor$i683 = $166 ^ $xor38$i494;
  $xor20$i684 = $167 ^ $xor40$i495;
  $xor21$i685 = $168 ^ $xor42$i496;
  $xor22$i686 = $169 ^ $xor44$i497;
  $xor23$i687 = $170 ^ $xor46$i498;
  $xor24$i688 = $171 ^ $xor48$i499;
  $xor25$i689 = $172 ^ $xor50$i500;
  $xor26$i690 = $173 ^ $xor52$i501;
  $xor27$i691 = $174 ^ $xor54$i502;
  $xor28$i692 = $175 ^ $xor56$i503;
  $and$i694 = $xor$i683 & $sub$i840;
  $and29$i695 = $xor20$i684 & $sub$i840;
  $and30$i696 = $xor21$i685 & $sub$i840;
  $and31$i697 = $xor22$i686 & $sub$i840;
  $and32$i698 = $xor23$i687 & $sub$i840;
  $and33$i699 = $xor24$i688 & $sub$i840;
  $and34$i700 = $xor25$i689 & $sub$i840;
  $and35$i701 = $xor26$i690 & $sub$i840;
  $and36$i702 = $xor27$i691 & $sub$i840;
  $and37$i703 = $xor28$i692 & $sub$i840;
  $xor38$i704 = $and$i694 ^ $xor38$i494;
  HEAP32[$arraydecay11$i>>2] = $xor38$i704;
  $xor40$i705 = $and29$i695 ^ $xor40$i495;
  HEAP32[$arrayidx1$i>>2] = $xor40$i705;
  $xor42$i706 = $and30$i696 ^ $xor42$i496;
  HEAP32[$arrayidx2$i>>2] = $xor42$i706;
  $xor44$i707 = $and31$i697 ^ $xor44$i497;
  HEAP32[$arrayidx3$i>>2] = $xor44$i707;
  $xor46$i708 = $and32$i698 ^ $xor46$i498;
  HEAP32[$arrayidx4$i>>2] = $xor46$i708;
  $xor48$i709 = $and33$i699 ^ $xor48$i499;
  HEAP32[$arrayidx5$i>>2] = $xor48$i709;
  $xor50$i710 = $and34$i700 ^ $xor50$i500;
  HEAP32[$arrayidx6$i>>2] = $xor50$i710;
  $xor52$i711 = $and35$i701 ^ $xor52$i501;
  HEAP32[$arrayidx7$i>>2] = $xor52$i711;
  $xor54$i712 = $and36$i702 ^ $xor54$i502;
  HEAP32[$arrayidx8$i>>2] = $xor54$i712;
  $xor56$i713 = $and37$i703 ^ $xor56$i503;
  HEAP32[$arrayidx9$i>>2] = $xor56$i713;
  $conv3$i862 = $xor4$i ^ 5;
  $sub$i863 = (($conv3$i862) + -1)|0;
  $176 = HEAP32[$arraydecay2$i867>>2]|0;
  $177 = HEAP32[$arrayidx11$i1031>>2]|0;
  $178 = HEAP32[$arrayidx12$i1032>>2]|0;
  $179 = HEAP32[$arrayidx13$i1033>>2]|0;
  $180 = HEAP32[$arrayidx14$i1034>>2]|0;
  $181 = HEAP32[$arrayidx15$i1035>>2]|0;
  $182 = HEAP32[$arrayidx16$i1036>>2]|0;
  $183 = HEAP32[$arrayidx17$i1037>>2]|0;
  $184 = HEAP32[$arrayidx18$i1038>>2]|0;
  $185 = HEAP32[$arrayidx19$i1039>>2]|0;
  $xor$i1040 = $176 ^ $xor38$i851;
  $xor20$i1041 = $177 ^ $xor40$i852;
  $xor21$i1042 = $178 ^ $xor42$i853;
  $xor22$i1043 = $179 ^ $xor44$i854;
  $xor23$i1044 = $180 ^ $xor46$i855;
  $xor24$i1045 = $181 ^ $xor48$i856;
  $xor25$i1046 = $182 ^ $xor50$i857;
  $xor26$i1047 = $183 ^ $xor52$i858;
  $xor27$i1048 = $184 ^ $xor54$i859;
  $xor28$i1049 = $185 ^ $xor56$i860;
  $sub$i1050 = $sub$i863 >> 31;
  $and$i1051 = $xor$i1040 & $sub$i1050;
  $and29$i1052 = $xor20$i1041 & $sub$i1050;
  $and30$i1053 = $xor21$i1042 & $sub$i1050;
  $and31$i1054 = $xor22$i1043 & $sub$i1050;
  $and32$i1055 = $xor23$i1044 & $sub$i1050;
  $and33$i1056 = $xor24$i1045 & $sub$i1050;
  $and34$i1057 = $xor25$i1046 & $sub$i1050;
  $and35$i1058 = $xor26$i1047 & $sub$i1050;
  $and36$i1059 = $xor27$i1048 & $sub$i1050;
  $and37$i1060 = $xor28$i1049 & $sub$i1050;
  $xor38$i1061 = $and$i1051 ^ $xor38$i851;
  HEAP32[$cur>>2] = $xor38$i1061;
  $xor40$i1062 = $and29$i1052 ^ $xor40$i852;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i1062;
  $xor42$i1063 = $and30$i1053 ^ $xor42$i853;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i1063;
  $xor44$i1064 = $and31$i1054 ^ $xor44$i854;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i1064;
  $xor46$i1065 = $and32$i1055 ^ $xor46$i855;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i1065;
  $xor48$i1066 = $and33$i1056 ^ $xor48$i856;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i1066;
  $xor50$i1067 = $and34$i1057 ^ $xor50$i857;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i1067;
  $xor52$i1068 = $and35$i1058 ^ $xor52$i858;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i1068;
  $xor54$i1069 = $and36$i1059 ^ $xor54$i859;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i1069;
  $xor56$i1070 = $and37$i1060 ^ $xor56$i860;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i1070;
  $186 = HEAP32[$arraydecay5$i870>>2]|0;
  $187 = HEAP32[$arrayidx11$i982>>2]|0;
  $188 = HEAP32[$arrayidx12$i983>>2]|0;
  $189 = HEAP32[$arrayidx13$i984>>2]|0;
  $190 = HEAP32[$arrayidx14$i985>>2]|0;
  $191 = HEAP32[$arrayidx15$i986>>2]|0;
  $192 = HEAP32[$arrayidx16$i987>>2]|0;
  $193 = HEAP32[$arrayidx17$i988>>2]|0;
  $194 = HEAP32[$arrayidx18$i989>>2]|0;
  $195 = HEAP32[$arrayidx19$i990>>2]|0;
  $xor$i991 = $186 ^ $xor38$i802;
  $xor20$i992 = $187 ^ $xor40$i803;
  $xor21$i993 = $188 ^ $xor42$i804;
  $xor22$i994 = $189 ^ $xor44$i805;
  $xor23$i995 = $190 ^ $xor46$i806;
  $xor24$i996 = $191 ^ $xor48$i807;
  $xor25$i997 = $192 ^ $xor50$i808;
  $xor26$i998 = $193 ^ $xor52$i809;
  $xor27$i999 = $194 ^ $xor54$i810;
  $xor28$i1000 = $195 ^ $xor56$i811;
  $and$i1002 = $xor$i991 & $sub$i1050;
  $and29$i1003 = $xor20$i992 & $sub$i1050;
  $and30$i1004 = $xor21$i993 & $sub$i1050;
  $and31$i1005 = $xor22$i994 & $sub$i1050;
  $and32$i1006 = $xor23$i995 & $sub$i1050;
  $and33$i1007 = $xor24$i996 & $sub$i1050;
  $and34$i1008 = $xor25$i997 & $sub$i1050;
  $and35$i1009 = $xor26$i998 & $sub$i1050;
  $and36$i1010 = $xor27$i999 & $sub$i1050;
  $and37$i1011 = $xor28$i1000 & $sub$i1050;
  $xor38$i1012 = $and$i1002 ^ $xor38$i802;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i1012;
  $xor40$i1013 = $and29$i1003 ^ $xor40$i803;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i1013;
  $xor42$i1014 = $and30$i1004 ^ $xor42$i804;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i1014;
  $xor44$i1015 = $and31$i1005 ^ $xor44$i805;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i1015;
  $xor46$i1016 = $and32$i1006 ^ $xor46$i806;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i1016;
  $xor48$i1017 = $and33$i1007 ^ $xor48$i807;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i1017;
  $xor50$i1018 = $and34$i1008 ^ $xor50$i808;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i1018;
  $xor52$i1019 = $and35$i1009 ^ $xor52$i809;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i1019;
  $xor54$i1020 = $and36$i1010 ^ $xor54$i810;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i1020;
  $xor56$i1021 = $and37$i1011 ^ $xor56$i811;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i1021;
  $196 = HEAP32[$arraydecay9$i872>>2]|0;
  $197 = HEAP32[$arrayidx11$i933>>2]|0;
  $198 = HEAP32[$arrayidx12$i934>>2]|0;
  $199 = HEAP32[$arrayidx13$i935>>2]|0;
  $200 = HEAP32[$arrayidx14$i936>>2]|0;
  $201 = HEAP32[$arrayidx15$i937>>2]|0;
  $202 = HEAP32[$arrayidx16$i938>>2]|0;
  $203 = HEAP32[$arrayidx17$i939>>2]|0;
  $204 = HEAP32[$arrayidx18$i940>>2]|0;
  $205 = HEAP32[$arrayidx19$i941>>2]|0;
  $xor$i942 = $196 ^ $xor38$i753;
  $xor20$i943 = $197 ^ $xor40$i754;
  $xor21$i944 = $198 ^ $xor42$i755;
  $xor22$i945 = $199 ^ $xor44$i756;
  $xor23$i946 = $200 ^ $xor46$i757;
  $xor24$i947 = $201 ^ $xor48$i758;
  $xor25$i948 = $202 ^ $xor50$i759;
  $xor26$i949 = $203 ^ $xor52$i760;
  $xor27$i950 = $204 ^ $xor54$i761;
  $xor28$i951 = $205 ^ $xor56$i762;
  $and$i953 = $xor$i942 & $sub$i1050;
  $and29$i954 = $xor20$i943 & $sub$i1050;
  $and30$i955 = $xor21$i944 & $sub$i1050;
  $and31$i956 = $xor22$i945 & $sub$i1050;
  $and32$i957 = $xor23$i946 & $sub$i1050;
  $and33$i958 = $xor24$i947 & $sub$i1050;
  $and34$i959 = $xor25$i948 & $sub$i1050;
  $and35$i960 = $xor26$i949 & $sub$i1050;
  $and36$i961 = $xor27$i950 & $sub$i1050;
  $and37$i962 = $xor28$i951 & $sub$i1050;
  $xor38$i963 = $and$i953 ^ $xor38$i753;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i963;
  $xor40$i964 = $and29$i954 ^ $xor40$i754;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i964;
  $xor42$i965 = $and30$i955 ^ $xor42$i755;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i965;
  $xor44$i966 = $and31$i956 ^ $xor44$i756;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i966;
  $xor46$i967 = $and32$i957 ^ $xor46$i757;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i967;
  $xor48$i968 = $and33$i958 ^ $xor48$i758;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i968;
  $xor50$i969 = $and34$i959 ^ $xor50$i759;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i969;
  $xor52$i970 = $and35$i960 ^ $xor52$i760;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i970;
  $xor54$i971 = $and36$i961 ^ $xor54$i761;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i971;
  $xor56$i972 = $and37$i962 ^ $xor56$i762;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i972;
  $206 = HEAP32[$arraydecay13$i874>>2]|0;
  $207 = HEAP32[$arrayidx11$i884>>2]|0;
  $208 = HEAP32[$arrayidx12$i885>>2]|0;
  $209 = HEAP32[$arrayidx13$i886>>2]|0;
  $210 = HEAP32[$arrayidx14$i887>>2]|0;
  $211 = HEAP32[$arrayidx15$i888>>2]|0;
  $212 = HEAP32[$arrayidx16$i889>>2]|0;
  $213 = HEAP32[$arrayidx17$i890>>2]|0;
  $214 = HEAP32[$arrayidx18$i891>>2]|0;
  $215 = HEAP32[$arrayidx19$i892>>2]|0;
  $xor$i893 = $206 ^ $xor38$i704;
  $xor20$i894 = $207 ^ $xor40$i705;
  $xor21$i895 = $208 ^ $xor42$i706;
  $xor22$i896 = $209 ^ $xor44$i707;
  $xor23$i897 = $210 ^ $xor46$i708;
  $xor24$i898 = $211 ^ $xor48$i709;
  $xor25$i899 = $212 ^ $xor50$i710;
  $xor26$i900 = $213 ^ $xor52$i711;
  $xor27$i901 = $214 ^ $xor54$i712;
  $xor28$i902 = $215 ^ $xor56$i713;
  $and$i904 = $xor$i893 & $sub$i1050;
  $and29$i905 = $xor20$i894 & $sub$i1050;
  $and30$i906 = $xor21$i895 & $sub$i1050;
  $and31$i907 = $xor22$i896 & $sub$i1050;
  $and32$i908 = $xor23$i897 & $sub$i1050;
  $and33$i909 = $xor24$i898 & $sub$i1050;
  $and34$i910 = $xor25$i899 & $sub$i1050;
  $and35$i911 = $xor26$i900 & $sub$i1050;
  $and36$i912 = $xor27$i901 & $sub$i1050;
  $and37$i913 = $xor28$i902 & $sub$i1050;
  $xor38$i914 = $and$i904 ^ $xor38$i704;
  HEAP32[$arraydecay11$i>>2] = $xor38$i914;
  $xor40$i915 = $and29$i905 ^ $xor40$i705;
  HEAP32[$arrayidx1$i>>2] = $xor40$i915;
  $xor42$i916 = $and30$i906 ^ $xor42$i706;
  HEAP32[$arrayidx2$i>>2] = $xor42$i916;
  $xor44$i917 = $and31$i907 ^ $xor44$i707;
  HEAP32[$arrayidx3$i>>2] = $xor44$i917;
  $xor46$i918 = $and32$i908 ^ $xor46$i708;
  HEAP32[$arrayidx4$i>>2] = $xor46$i918;
  $xor48$i919 = $and33$i909 ^ $xor48$i709;
  HEAP32[$arrayidx5$i>>2] = $xor48$i919;
  $xor50$i920 = $and34$i910 ^ $xor50$i710;
  HEAP32[$arrayidx6$i>>2] = $xor50$i920;
  $xor52$i921 = $and35$i911 ^ $xor52$i711;
  HEAP32[$arrayidx7$i>>2] = $xor52$i921;
  $xor54$i922 = $and36$i912 ^ $xor54$i712;
  HEAP32[$arrayidx8$i>>2] = $xor54$i922;
  $xor56$i923 = $and37$i913 ^ $xor56$i713;
  HEAP32[$arrayidx9$i>>2] = $xor56$i923;
  $conv3$i1079 = $xor4$i ^ 6;
  $sub$i1080 = (($conv3$i1079) + -1)|0;
  $216 = HEAP32[$arraydecay2$i1084>>2]|0;
  $217 = HEAP32[$arrayidx11$i1248>>2]|0;
  $218 = HEAP32[$arrayidx12$i1249>>2]|0;
  $219 = HEAP32[$arrayidx13$i1250>>2]|0;
  $220 = HEAP32[$arrayidx14$i1251>>2]|0;
  $221 = HEAP32[$arrayidx15$i1252>>2]|0;
  $222 = HEAP32[$arrayidx16$i1253>>2]|0;
  $223 = HEAP32[$arrayidx17$i1254>>2]|0;
  $224 = HEAP32[$arrayidx18$i1255>>2]|0;
  $225 = HEAP32[$arrayidx19$i1256>>2]|0;
  $xor$i1257 = $216 ^ $xor38$i1061;
  $xor20$i1258 = $217 ^ $xor40$i1062;
  $xor21$i1259 = $218 ^ $xor42$i1063;
  $xor22$i1260 = $219 ^ $xor44$i1064;
  $xor23$i1261 = $220 ^ $xor46$i1065;
  $xor24$i1262 = $221 ^ $xor48$i1066;
  $xor25$i1263 = $222 ^ $xor50$i1067;
  $xor26$i1264 = $223 ^ $xor52$i1068;
  $xor27$i1265 = $224 ^ $xor54$i1069;
  $xor28$i1266 = $225 ^ $xor56$i1070;
  $sub$i1267 = $sub$i1080 >> 31;
  $and$i1268 = $xor$i1257 & $sub$i1267;
  $and29$i1269 = $xor20$i1258 & $sub$i1267;
  $and30$i1270 = $xor21$i1259 & $sub$i1267;
  $and31$i1271 = $xor22$i1260 & $sub$i1267;
  $and32$i1272 = $xor23$i1261 & $sub$i1267;
  $and33$i1273 = $xor24$i1262 & $sub$i1267;
  $and34$i1274 = $xor25$i1263 & $sub$i1267;
  $and35$i1275 = $xor26$i1264 & $sub$i1267;
  $and36$i1276 = $xor27$i1265 & $sub$i1267;
  $and37$i1277 = $xor28$i1266 & $sub$i1267;
  $xor38$i1278 = $and$i1268 ^ $xor38$i1061;
  HEAP32[$cur>>2] = $xor38$i1278;
  $xor40$i1279 = $and29$i1269 ^ $xor40$i1062;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i1279;
  $xor42$i1280 = $and30$i1270 ^ $xor42$i1063;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i1280;
  $xor44$i1281 = $and31$i1271 ^ $xor44$i1064;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i1281;
  $xor46$i1282 = $and32$i1272 ^ $xor46$i1065;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i1282;
  $xor48$i1283 = $and33$i1273 ^ $xor48$i1066;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i1283;
  $xor50$i1284 = $and34$i1274 ^ $xor50$i1067;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i1284;
  $xor52$i1285 = $and35$i1275 ^ $xor52$i1068;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i1285;
  $xor54$i1286 = $and36$i1276 ^ $xor54$i1069;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i1286;
  $xor56$i1287 = $and37$i1277 ^ $xor56$i1070;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i1287;
  $226 = HEAP32[$arraydecay5$i1087>>2]|0;
  $227 = HEAP32[$arrayidx11$i1199>>2]|0;
  $228 = HEAP32[$arrayidx12$i1200>>2]|0;
  $229 = HEAP32[$arrayidx13$i1201>>2]|0;
  $230 = HEAP32[$arrayidx14$i1202>>2]|0;
  $231 = HEAP32[$arrayidx15$i1203>>2]|0;
  $232 = HEAP32[$arrayidx16$i1204>>2]|0;
  $233 = HEAP32[$arrayidx17$i1205>>2]|0;
  $234 = HEAP32[$arrayidx18$i1206>>2]|0;
  $235 = HEAP32[$arrayidx19$i1207>>2]|0;
  $xor$i1208 = $226 ^ $xor38$i1012;
  $xor20$i1209 = $227 ^ $xor40$i1013;
  $xor21$i1210 = $228 ^ $xor42$i1014;
  $xor22$i1211 = $229 ^ $xor44$i1015;
  $xor23$i1212 = $230 ^ $xor46$i1016;
  $xor24$i1213 = $231 ^ $xor48$i1017;
  $xor25$i1214 = $232 ^ $xor50$i1018;
  $xor26$i1215 = $233 ^ $xor52$i1019;
  $xor27$i1216 = $234 ^ $xor54$i1020;
  $xor28$i1217 = $235 ^ $xor56$i1021;
  $and$i1219 = $xor$i1208 & $sub$i1267;
  $and29$i1220 = $xor20$i1209 & $sub$i1267;
  $and30$i1221 = $xor21$i1210 & $sub$i1267;
  $and31$i1222 = $xor22$i1211 & $sub$i1267;
  $and32$i1223 = $xor23$i1212 & $sub$i1267;
  $and33$i1224 = $xor24$i1213 & $sub$i1267;
  $and34$i1225 = $xor25$i1214 & $sub$i1267;
  $and35$i1226 = $xor26$i1215 & $sub$i1267;
  $and36$i1227 = $xor27$i1216 & $sub$i1267;
  $and37$i1228 = $xor28$i1217 & $sub$i1267;
  $xor38$i1229 = $and$i1219 ^ $xor38$i1012;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i1229;
  $xor40$i1230 = $and29$i1220 ^ $xor40$i1013;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i1230;
  $xor42$i1231 = $and30$i1221 ^ $xor42$i1014;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i1231;
  $xor44$i1232 = $and31$i1222 ^ $xor44$i1015;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i1232;
  $xor46$i1233 = $and32$i1223 ^ $xor46$i1016;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i1233;
  $xor48$i1234 = $and33$i1224 ^ $xor48$i1017;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i1234;
  $xor50$i1235 = $and34$i1225 ^ $xor50$i1018;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i1235;
  $xor52$i1236 = $and35$i1226 ^ $xor52$i1019;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i1236;
  $xor54$i1237 = $and36$i1227 ^ $xor54$i1020;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i1237;
  $xor56$i1238 = $and37$i1228 ^ $xor56$i1021;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i1238;
  $236 = HEAP32[$arraydecay9$i1089>>2]|0;
  $237 = HEAP32[$arrayidx11$i1150>>2]|0;
  $238 = HEAP32[$arrayidx12$i1151>>2]|0;
  $239 = HEAP32[$arrayidx13$i1152>>2]|0;
  $240 = HEAP32[$arrayidx14$i1153>>2]|0;
  $241 = HEAP32[$arrayidx15$i1154>>2]|0;
  $242 = HEAP32[$arrayidx16$i1155>>2]|0;
  $243 = HEAP32[$arrayidx17$i1156>>2]|0;
  $244 = HEAP32[$arrayidx18$i1157>>2]|0;
  $245 = HEAP32[$arrayidx19$i1158>>2]|0;
  $xor$i1159 = $236 ^ $xor38$i963;
  $xor20$i1160 = $237 ^ $xor40$i964;
  $xor21$i1161 = $238 ^ $xor42$i965;
  $xor22$i1162 = $239 ^ $xor44$i966;
  $xor23$i1163 = $240 ^ $xor46$i967;
  $xor24$i1164 = $241 ^ $xor48$i968;
  $xor25$i1165 = $242 ^ $xor50$i969;
  $xor26$i1166 = $243 ^ $xor52$i970;
  $xor27$i1167 = $244 ^ $xor54$i971;
  $xor28$i1168 = $245 ^ $xor56$i972;
  $and$i1170 = $xor$i1159 & $sub$i1267;
  $and29$i1171 = $xor20$i1160 & $sub$i1267;
  $and30$i1172 = $xor21$i1161 & $sub$i1267;
  $and31$i1173 = $xor22$i1162 & $sub$i1267;
  $and32$i1174 = $xor23$i1163 & $sub$i1267;
  $and33$i1175 = $xor24$i1164 & $sub$i1267;
  $and34$i1176 = $xor25$i1165 & $sub$i1267;
  $and35$i1177 = $xor26$i1166 & $sub$i1267;
  $and36$i1178 = $xor27$i1167 & $sub$i1267;
  $and37$i1179 = $xor28$i1168 & $sub$i1267;
  $xor38$i1180 = $and$i1170 ^ $xor38$i963;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i1180;
  $xor40$i1181 = $and29$i1171 ^ $xor40$i964;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i1181;
  $xor42$i1182 = $and30$i1172 ^ $xor42$i965;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i1182;
  $xor44$i1183 = $and31$i1173 ^ $xor44$i966;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i1183;
  $xor46$i1184 = $and32$i1174 ^ $xor46$i967;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i1184;
  $xor48$i1185 = $and33$i1175 ^ $xor48$i968;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i1185;
  $xor50$i1186 = $and34$i1176 ^ $xor50$i969;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i1186;
  $xor52$i1187 = $and35$i1177 ^ $xor52$i970;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i1187;
  $xor54$i1188 = $and36$i1178 ^ $xor54$i971;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i1188;
  $xor56$i1189 = $and37$i1179 ^ $xor56$i972;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i1189;
  $246 = HEAP32[$arraydecay13$i1091>>2]|0;
  $247 = HEAP32[$arrayidx11$i1101>>2]|0;
  $248 = HEAP32[$arrayidx12$i1102>>2]|0;
  $249 = HEAP32[$arrayidx13$i1103>>2]|0;
  $250 = HEAP32[$arrayidx14$i1104>>2]|0;
  $251 = HEAP32[$arrayidx15$i1105>>2]|0;
  $252 = HEAP32[$arrayidx16$i1106>>2]|0;
  $253 = HEAP32[$arrayidx17$i1107>>2]|0;
  $254 = HEAP32[$arrayidx18$i1108>>2]|0;
  $255 = HEAP32[$arrayidx19$i1109>>2]|0;
  $xor$i1110 = $246 ^ $xor38$i914;
  $xor20$i1111 = $247 ^ $xor40$i915;
  $xor21$i1112 = $248 ^ $xor42$i916;
  $xor22$i1113 = $249 ^ $xor44$i917;
  $xor23$i1114 = $250 ^ $xor46$i918;
  $xor24$i1115 = $251 ^ $xor48$i919;
  $xor25$i1116 = $252 ^ $xor50$i920;
  $xor26$i1117 = $253 ^ $xor52$i921;
  $xor27$i1118 = $254 ^ $xor54$i922;
  $xor28$i1119 = $255 ^ $xor56$i923;
  $and$i1121 = $xor$i1110 & $sub$i1267;
  $and29$i1122 = $xor20$i1111 & $sub$i1267;
  $and30$i1123 = $xor21$i1112 & $sub$i1267;
  $and31$i1124 = $xor22$i1113 & $sub$i1267;
  $and32$i1125 = $xor23$i1114 & $sub$i1267;
  $and33$i1126 = $xor24$i1115 & $sub$i1267;
  $and34$i1127 = $xor25$i1116 & $sub$i1267;
  $and35$i1128 = $xor26$i1117 & $sub$i1267;
  $and36$i1129 = $xor27$i1118 & $sub$i1267;
  $and37$i1130 = $xor28$i1119 & $sub$i1267;
  $xor38$i1131 = $and$i1121 ^ $xor38$i914;
  HEAP32[$arraydecay11$i>>2] = $xor38$i1131;
  $xor40$i1132 = $and29$i1122 ^ $xor40$i915;
  HEAP32[$arrayidx1$i>>2] = $xor40$i1132;
  $xor42$i1133 = $and30$i1123 ^ $xor42$i916;
  HEAP32[$arrayidx2$i>>2] = $xor42$i1133;
  $xor44$i1134 = $and31$i1124 ^ $xor44$i917;
  HEAP32[$arrayidx3$i>>2] = $xor44$i1134;
  $xor46$i1135 = $and32$i1125 ^ $xor46$i918;
  HEAP32[$arrayidx4$i>>2] = $xor46$i1135;
  $xor48$i1136 = $and33$i1126 ^ $xor48$i919;
  HEAP32[$arrayidx5$i>>2] = $xor48$i1136;
  $xor50$i1137 = $and34$i1127 ^ $xor50$i920;
  HEAP32[$arrayidx6$i>>2] = $xor50$i1137;
  $xor52$i1138 = $and35$i1128 ^ $xor52$i921;
  HEAP32[$arrayidx7$i>>2] = $xor52$i1138;
  $xor54$i1139 = $and36$i1129 ^ $xor54$i922;
  HEAP32[$arrayidx8$i>>2] = $xor54$i1139;
  $xor56$i1140 = $and37$i1130 ^ $xor56$i923;
  HEAP32[$arrayidx9$i>>2] = $xor56$i1140;
  $conv3$i1289 = $xor4$i ^ 7;
  $sub$i1290 = (($conv3$i1289) + -1)|0;
  $256 = HEAP32[$arraydecay2$i1294>>2]|0;
  $257 = HEAP32[$arrayidx11$i1458>>2]|0;
  $258 = HEAP32[$arrayidx12$i1459>>2]|0;
  $259 = HEAP32[$arrayidx13$i1460>>2]|0;
  $260 = HEAP32[$arrayidx14$i1461>>2]|0;
  $261 = HEAP32[$arrayidx15$i1462>>2]|0;
  $262 = HEAP32[$arrayidx16$i1463>>2]|0;
  $263 = HEAP32[$arrayidx17$i1464>>2]|0;
  $264 = HEAP32[$arrayidx18$i1465>>2]|0;
  $265 = HEAP32[$arrayidx19$i1466>>2]|0;
  $xor$i1467 = $256 ^ $xor38$i1278;
  $xor20$i1468 = $257 ^ $xor40$i1279;
  $xor21$i1469 = $258 ^ $xor42$i1280;
  $xor22$i1470 = $259 ^ $xor44$i1281;
  $xor23$i1471 = $260 ^ $xor46$i1282;
  $xor24$i1472 = $261 ^ $xor48$i1283;
  $xor25$i1473 = $262 ^ $xor50$i1284;
  $xor26$i1474 = $263 ^ $xor52$i1285;
  $xor27$i1475 = $264 ^ $xor54$i1286;
  $xor28$i1476 = $265 ^ $xor56$i1287;
  $sub$i1477 = $sub$i1290 >> 31;
  $and$i1478 = $xor$i1467 & $sub$i1477;
  $and29$i1479 = $xor20$i1468 & $sub$i1477;
  $and30$i1480 = $xor21$i1469 & $sub$i1477;
  $and31$i1481 = $xor22$i1470 & $sub$i1477;
  $and32$i1482 = $xor23$i1471 & $sub$i1477;
  $and33$i1483 = $xor24$i1472 & $sub$i1477;
  $and34$i1484 = $xor25$i1473 & $sub$i1477;
  $and35$i1485 = $xor26$i1474 & $sub$i1477;
  $and36$i1486 = $xor27$i1475 & $sub$i1477;
  $and37$i1487 = $xor28$i1476 & $sub$i1477;
  $xor38$i1488 = $and$i1478 ^ $xor38$i1278;
  HEAP32[$cur>>2] = $xor38$i1488;
  $xor40$i1489 = $and29$i1479 ^ $xor40$i1279;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i1489;
  $xor42$i1490 = $and30$i1480 ^ $xor42$i1280;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i1490;
  $xor44$i1491 = $and31$i1481 ^ $xor44$i1281;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i1491;
  $xor46$i1492 = $and32$i1482 ^ $xor46$i1282;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i1492;
  $xor48$i1493 = $and33$i1483 ^ $xor48$i1283;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i1493;
  $xor50$i1494 = $and34$i1484 ^ $xor50$i1284;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i1494;
  $xor52$i1495 = $and35$i1485 ^ $xor52$i1285;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i1495;
  $xor54$i1496 = $and36$i1486 ^ $xor54$i1286;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i1496;
  $xor56$i1497 = $and37$i1487 ^ $xor56$i1287;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i1497;
  $266 = HEAP32[$arraydecay5$i1297>>2]|0;
  $267 = HEAP32[$arrayidx11$i1409>>2]|0;
  $268 = HEAP32[$arrayidx12$i1410>>2]|0;
  $269 = HEAP32[$arrayidx13$i1411>>2]|0;
  $270 = HEAP32[$arrayidx14$i1412>>2]|0;
  $271 = HEAP32[$arrayidx15$i1413>>2]|0;
  $272 = HEAP32[$arrayidx16$i1414>>2]|0;
  $273 = HEAP32[$arrayidx17$i1415>>2]|0;
  $274 = HEAP32[$arrayidx18$i1416>>2]|0;
  $275 = HEAP32[$arrayidx19$i1417>>2]|0;
  $xor$i1418 = $266 ^ $xor38$i1229;
  $xor20$i1419 = $267 ^ $xor40$i1230;
  $xor21$i1420 = $268 ^ $xor42$i1231;
  $xor22$i1421 = $269 ^ $xor44$i1232;
  $xor23$i1422 = $270 ^ $xor46$i1233;
  $xor24$i1423 = $271 ^ $xor48$i1234;
  $xor25$i1424 = $272 ^ $xor50$i1235;
  $xor26$i1425 = $273 ^ $xor52$i1236;
  $xor27$i1426 = $274 ^ $xor54$i1237;
  $xor28$i1427 = $275 ^ $xor56$i1238;
  $and$i1429 = $xor$i1418 & $sub$i1477;
  $and29$i1430 = $xor20$i1419 & $sub$i1477;
  $and30$i1431 = $xor21$i1420 & $sub$i1477;
  $and31$i1432 = $xor22$i1421 & $sub$i1477;
  $and32$i1433 = $xor23$i1422 & $sub$i1477;
  $and33$i1434 = $xor24$i1423 & $sub$i1477;
  $and34$i1435 = $xor25$i1424 & $sub$i1477;
  $and35$i1436 = $xor26$i1425 & $sub$i1477;
  $and36$i1437 = $xor27$i1426 & $sub$i1477;
  $and37$i1438 = $xor28$i1427 & $sub$i1477;
  $xor38$i1439 = $and$i1429 ^ $xor38$i1229;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i1439;
  $xor40$i1440 = $and29$i1430 ^ $xor40$i1230;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i1440;
  $xor42$i1441 = $and30$i1431 ^ $xor42$i1231;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i1441;
  $xor44$i1442 = $and31$i1432 ^ $xor44$i1232;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i1442;
  $xor46$i1443 = $and32$i1433 ^ $xor46$i1233;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i1443;
  $xor48$i1444 = $and33$i1434 ^ $xor48$i1234;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i1444;
  $xor50$i1445 = $and34$i1435 ^ $xor50$i1235;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i1445;
  $xor52$i1446 = $and35$i1436 ^ $xor52$i1236;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i1446;
  $xor54$i1447 = $and36$i1437 ^ $xor54$i1237;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i1447;
  $xor56$i1448 = $and37$i1438 ^ $xor56$i1238;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i1448;
  $276 = HEAP32[$arraydecay9$i1299>>2]|0;
  $277 = HEAP32[$arrayidx11$i1360>>2]|0;
  $278 = HEAP32[$arrayidx12$i1361>>2]|0;
  $279 = HEAP32[$arrayidx13$i1362>>2]|0;
  $280 = HEAP32[$arrayidx14$i1363>>2]|0;
  $281 = HEAP32[$arrayidx15$i1364>>2]|0;
  $282 = HEAP32[$arrayidx16$i1365>>2]|0;
  $283 = HEAP32[$arrayidx17$i1366>>2]|0;
  $284 = HEAP32[$arrayidx18$i1367>>2]|0;
  $285 = HEAP32[$arrayidx19$i1368>>2]|0;
  $xor$i1369 = $276 ^ $xor38$i1180;
  $xor20$i1370 = $277 ^ $xor40$i1181;
  $xor21$i1371 = $278 ^ $xor42$i1182;
  $xor22$i1372 = $279 ^ $xor44$i1183;
  $xor23$i1373 = $280 ^ $xor46$i1184;
  $xor24$i1374 = $281 ^ $xor48$i1185;
  $xor25$i1375 = $282 ^ $xor50$i1186;
  $xor26$i1376 = $283 ^ $xor52$i1187;
  $xor27$i1377 = $284 ^ $xor54$i1188;
  $xor28$i1378 = $285 ^ $xor56$i1189;
  $and$i1380 = $xor$i1369 & $sub$i1477;
  $and29$i1381 = $xor20$i1370 & $sub$i1477;
  $and30$i1382 = $xor21$i1371 & $sub$i1477;
  $and31$i1383 = $xor22$i1372 & $sub$i1477;
  $and32$i1384 = $xor23$i1373 & $sub$i1477;
  $and33$i1385 = $xor24$i1374 & $sub$i1477;
  $and34$i1386 = $xor25$i1375 & $sub$i1477;
  $and35$i1387 = $xor26$i1376 & $sub$i1477;
  $and36$i1388 = $xor27$i1377 & $sub$i1477;
  $and37$i1389 = $xor28$i1378 & $sub$i1477;
  $xor38$i1390 = $and$i1380 ^ $xor38$i1180;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i1390;
  $xor40$i1391 = $and29$i1381 ^ $xor40$i1181;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i1391;
  $xor42$i1392 = $and30$i1382 ^ $xor42$i1182;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i1392;
  $xor44$i1393 = $and31$i1383 ^ $xor44$i1183;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i1393;
  $xor46$i1394 = $and32$i1384 ^ $xor46$i1184;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i1394;
  $xor48$i1395 = $and33$i1385 ^ $xor48$i1185;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i1395;
  $xor50$i1396 = $and34$i1386 ^ $xor50$i1186;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i1396;
  $xor52$i1397 = $and35$i1387 ^ $xor52$i1187;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i1397;
  $xor54$i1398 = $and36$i1388 ^ $xor54$i1188;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i1398;
  $xor56$i1399 = $and37$i1389 ^ $xor56$i1189;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i1399;
  $286 = HEAP32[$arraydecay13$i1301>>2]|0;
  $287 = HEAP32[$arrayidx11$i1311>>2]|0;
  $288 = HEAP32[$arrayidx12$i1312>>2]|0;
  $289 = HEAP32[$arrayidx13$i1313>>2]|0;
  $290 = HEAP32[$arrayidx14$i1314>>2]|0;
  $291 = HEAP32[$arrayidx15$i1315>>2]|0;
  $292 = HEAP32[$arrayidx16$i1316>>2]|0;
  $293 = HEAP32[$arrayidx17$i1317>>2]|0;
  $294 = HEAP32[$arrayidx18$i1318>>2]|0;
  $295 = HEAP32[$arrayidx19$i1319>>2]|0;
  $xor$i1320 = $286 ^ $xor38$i1131;
  $xor20$i1321 = $287 ^ $xor40$i1132;
  $xor21$i1322 = $288 ^ $xor42$i1133;
  $xor22$i1323 = $289 ^ $xor44$i1134;
  $xor23$i1324 = $290 ^ $xor46$i1135;
  $xor24$i1325 = $291 ^ $xor48$i1136;
  $xor25$i1326 = $292 ^ $xor50$i1137;
  $xor26$i1327 = $293 ^ $xor52$i1138;
  $xor27$i1328 = $294 ^ $xor54$i1139;
  $xor28$i1329 = $295 ^ $xor56$i1140;
  $and$i1331 = $xor$i1320 & $sub$i1477;
  $and29$i1332 = $xor20$i1321 & $sub$i1477;
  $and30$i1333 = $xor21$i1322 & $sub$i1477;
  $and31$i1334 = $xor22$i1323 & $sub$i1477;
  $and32$i1335 = $xor23$i1324 & $sub$i1477;
  $and33$i1336 = $xor24$i1325 & $sub$i1477;
  $and34$i1337 = $xor25$i1326 & $sub$i1477;
  $and35$i1338 = $xor26$i1327 & $sub$i1477;
  $and36$i1339 = $xor27$i1328 & $sub$i1477;
  $and37$i1340 = $xor28$i1329 & $sub$i1477;
  $xor38$i1341 = $and$i1331 ^ $xor38$i1131;
  HEAP32[$arraydecay11$i>>2] = $xor38$i1341;
  $xor40$i1342 = $and29$i1332 ^ $xor40$i1132;
  HEAP32[$arrayidx1$i>>2] = $xor40$i1342;
  $xor42$i1343 = $and30$i1333 ^ $xor42$i1133;
  HEAP32[$arrayidx2$i>>2] = $xor42$i1343;
  $xor44$i1344 = $and31$i1334 ^ $xor44$i1134;
  HEAP32[$arrayidx3$i>>2] = $xor44$i1344;
  $xor46$i1345 = $and32$i1335 ^ $xor46$i1135;
  HEAP32[$arrayidx4$i>>2] = $xor46$i1345;
  $xor48$i1346 = $and33$i1336 ^ $xor48$i1136;
  HEAP32[$arrayidx5$i>>2] = $xor48$i1346;
  $xor50$i1347 = $and34$i1337 ^ $xor50$i1137;
  HEAP32[$arrayidx6$i>>2] = $xor50$i1347;
  $xor52$i1348 = $and35$i1338 ^ $xor52$i1138;
  HEAP32[$arrayidx7$i>>2] = $xor52$i1348;
  $xor54$i1349 = $and36$i1339 ^ $xor54$i1139;
  HEAP32[$arrayidx8$i>>2] = $xor54$i1349;
  $xor56$i1350 = $and37$i1340 ^ $xor56$i1140;
  HEAP32[$arrayidx9$i>>2] = $xor56$i1350;
  $conv3$i1973 = $xor4$i ^ 8;
  $sub$i1974 = (($conv3$i1973) + -1)|0;
  $296 = HEAP32[$arraydecay2$i1768>>2]|0;
  $297 = HEAP32[$arrayidx11$i1932>>2]|0;
  $298 = HEAP32[$arrayidx12$i1933>>2]|0;
  $299 = HEAP32[$arrayidx13$i1934>>2]|0;
  $300 = HEAP32[$arrayidx14$i1935>>2]|0;
  $301 = HEAP32[$arrayidx15$i1936>>2]|0;
  $302 = HEAP32[$arrayidx16$i1937>>2]|0;
  $303 = HEAP32[$arrayidx17$i1938>>2]|0;
  $304 = HEAP32[$arrayidx18$i1939>>2]|0;
  $305 = HEAP32[$arrayidx19$i1940>>2]|0;
  $xor$i1941 = $296 ^ $xor38$i1488;
  $xor20$i1942 = $297 ^ $xor40$i1489;
  $xor21$i1943 = $298 ^ $xor42$i1490;
  $xor22$i1944 = $299 ^ $xor44$i1491;
  $xor23$i1945 = $300 ^ $xor46$i1492;
  $xor24$i1946 = $301 ^ $xor48$i1493;
  $xor25$i1947 = $302 ^ $xor50$i1494;
  $xor26$i1948 = $303 ^ $xor52$i1495;
  $xor27$i1949 = $304 ^ $xor54$i1496;
  $xor28$i1950 = $305 ^ $xor56$i1497;
  $sub$i1951 = $sub$i1974 >> 31;
  $and$i1952 = $xor$i1941 & $sub$i1951;
  $and29$i1953 = $xor20$i1942 & $sub$i1951;
  $and30$i1954 = $xor21$i1943 & $sub$i1951;
  $and31$i1955 = $xor22$i1944 & $sub$i1951;
  $and32$i1956 = $xor23$i1945 & $sub$i1951;
  $and33$i1957 = $xor24$i1946 & $sub$i1951;
  $and34$i1958 = $xor25$i1947 & $sub$i1951;
  $and35$i1959 = $xor26$i1948 & $sub$i1951;
  $and36$i1960 = $xor27$i1949 & $sub$i1951;
  $and37$i1961 = $xor28$i1950 & $sub$i1951;
  $xor38$i1962 = $and$i1952 ^ $xor38$i1488;
  HEAP32[$cur>>2] = $xor38$i1962;
  $xor40$i1963 = $and29$i1953 ^ $xor40$i1489;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i1963;
  $xor42$i1964 = $and30$i1954 ^ $xor42$i1490;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i1964;
  $xor44$i1965 = $and31$i1955 ^ $xor44$i1491;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i1965;
  $xor46$i1966 = $and32$i1956 ^ $xor46$i1492;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i1966;
  $xor48$i1967 = $and33$i1957 ^ $xor48$i1493;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i1967;
  $xor50$i1968 = $and34$i1958 ^ $xor50$i1494;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i1968;
  $xor52$i1969 = $and35$i1959 ^ $xor52$i1495;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i1969;
  $xor54$i1970 = $and36$i1960 ^ $xor54$i1496;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i1970;
  $xor56$i1971 = $and37$i1961 ^ $xor56$i1497;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i1971;
  $306 = HEAP32[$arraydecay5$i1771>>2]|0;
  $307 = HEAP32[$arrayidx11$i1883>>2]|0;
  $308 = HEAP32[$arrayidx12$i1884>>2]|0;
  $309 = HEAP32[$arrayidx13$i1885>>2]|0;
  $310 = HEAP32[$arrayidx14$i1886>>2]|0;
  $311 = HEAP32[$arrayidx15$i1887>>2]|0;
  $312 = HEAP32[$arrayidx16$i1888>>2]|0;
  $313 = HEAP32[$arrayidx17$i1889>>2]|0;
  $314 = HEAP32[$arrayidx18$i1890>>2]|0;
  $315 = HEAP32[$arrayidx19$i1891>>2]|0;
  $xor$i1892 = $306 ^ $xor38$i1439;
  $xor20$i1893 = $307 ^ $xor40$i1440;
  $xor21$i1894 = $308 ^ $xor42$i1441;
  $xor22$i1895 = $309 ^ $xor44$i1442;
  $xor23$i1896 = $310 ^ $xor46$i1443;
  $xor24$i1897 = $311 ^ $xor48$i1444;
  $xor25$i1898 = $312 ^ $xor50$i1445;
  $xor26$i1899 = $313 ^ $xor52$i1446;
  $xor27$i1900 = $314 ^ $xor54$i1447;
  $xor28$i1901 = $315 ^ $xor56$i1448;
  $and$i1903 = $xor$i1892 & $sub$i1951;
  $and29$i1904 = $xor20$i1893 & $sub$i1951;
  $and30$i1905 = $xor21$i1894 & $sub$i1951;
  $and31$i1906 = $xor22$i1895 & $sub$i1951;
  $and32$i1907 = $xor23$i1896 & $sub$i1951;
  $and33$i1908 = $xor24$i1897 & $sub$i1951;
  $and34$i1909 = $xor25$i1898 & $sub$i1951;
  $and35$i1910 = $xor26$i1899 & $sub$i1951;
  $and36$i1911 = $xor27$i1900 & $sub$i1951;
  $and37$i1912 = $xor28$i1901 & $sub$i1951;
  $xor38$i1913 = $and$i1903 ^ $xor38$i1439;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i1913;
  $xor40$i1914 = $and29$i1904 ^ $xor40$i1440;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i1914;
  $xor42$i1915 = $and30$i1905 ^ $xor42$i1441;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i1915;
  $xor44$i1916 = $and31$i1906 ^ $xor44$i1442;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i1916;
  $xor46$i1917 = $and32$i1907 ^ $xor46$i1443;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i1917;
  $xor48$i1918 = $and33$i1908 ^ $xor48$i1444;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i1918;
  $xor50$i1919 = $and34$i1909 ^ $xor50$i1445;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i1919;
  $xor52$i1920 = $and35$i1910 ^ $xor52$i1446;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i1920;
  $xor54$i1921 = $and36$i1911 ^ $xor54$i1447;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i1921;
  $xor56$i1922 = $and37$i1912 ^ $xor56$i1448;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i1922;
  $316 = HEAP32[$arraydecay9$i1773>>2]|0;
  $317 = HEAP32[$arrayidx11$i1834>>2]|0;
  $318 = HEAP32[$arrayidx12$i1835>>2]|0;
  $319 = HEAP32[$arrayidx13$i1836>>2]|0;
  $320 = HEAP32[$arrayidx14$i1837>>2]|0;
  $321 = HEAP32[$arrayidx15$i1838>>2]|0;
  $322 = HEAP32[$arrayidx16$i1839>>2]|0;
  $323 = HEAP32[$arrayidx17$i1840>>2]|0;
  $324 = HEAP32[$arrayidx18$i1841>>2]|0;
  $325 = HEAP32[$arrayidx19$i1842>>2]|0;
  $xor$i1843 = $316 ^ $xor38$i1390;
  $xor20$i1844 = $317 ^ $xor40$i1391;
  $xor21$i1845 = $318 ^ $xor42$i1392;
  $xor22$i1846 = $319 ^ $xor44$i1393;
  $xor23$i1847 = $320 ^ $xor46$i1394;
  $xor24$i1848 = $321 ^ $xor48$i1395;
  $xor25$i1849 = $322 ^ $xor50$i1396;
  $xor26$i1850 = $323 ^ $xor52$i1397;
  $xor27$i1851 = $324 ^ $xor54$i1398;
  $xor28$i1852 = $325 ^ $xor56$i1399;
  $and$i1854 = $xor$i1843 & $sub$i1951;
  $and29$i1855 = $xor20$i1844 & $sub$i1951;
  $and30$i1856 = $xor21$i1845 & $sub$i1951;
  $and31$i1857 = $xor22$i1846 & $sub$i1951;
  $and32$i1858 = $xor23$i1847 & $sub$i1951;
  $and33$i1859 = $xor24$i1848 & $sub$i1951;
  $and34$i1860 = $xor25$i1849 & $sub$i1951;
  $and35$i1861 = $xor26$i1850 & $sub$i1951;
  $and36$i1862 = $xor27$i1851 & $sub$i1951;
  $and37$i1863 = $xor28$i1852 & $sub$i1951;
  $xor38$i1864 = $and$i1854 ^ $xor38$i1390;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i1864;
  $xor40$i1865 = $and29$i1855 ^ $xor40$i1391;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i1865;
  $xor42$i1866 = $and30$i1856 ^ $xor42$i1392;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i1866;
  $xor44$i1867 = $and31$i1857 ^ $xor44$i1393;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i1867;
  $xor46$i1868 = $and32$i1858 ^ $xor46$i1394;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i1868;
  $xor48$i1869 = $and33$i1859 ^ $xor48$i1395;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i1869;
  $xor50$i1870 = $and34$i1860 ^ $xor50$i1396;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i1870;
  $xor52$i1871 = $and35$i1861 ^ $xor52$i1397;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i1871;
  $xor54$i1872 = $and36$i1862 ^ $xor54$i1398;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i1872;
  $xor56$i1873 = $and37$i1863 ^ $xor56$i1399;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i1873;
  $326 = HEAP32[$arraydecay13$i1775>>2]|0;
  $327 = HEAP32[$arrayidx11$i1785>>2]|0;
  $328 = HEAP32[$arrayidx12$i1786>>2]|0;
  $329 = HEAP32[$arrayidx13$i1787>>2]|0;
  $330 = HEAP32[$arrayidx14$i1788>>2]|0;
  $331 = HEAP32[$arrayidx15$i1789>>2]|0;
  $332 = HEAP32[$arrayidx16$i1790>>2]|0;
  $333 = HEAP32[$arrayidx17$i1791>>2]|0;
  $334 = HEAP32[$arrayidx18$i1792>>2]|0;
  $335 = HEAP32[$arrayidx19$i1793>>2]|0;
  $xor$i1794 = $326 ^ $xor38$i1341;
  $xor20$i1795 = $327 ^ $xor40$i1342;
  $xor21$i1796 = $328 ^ $xor42$i1343;
  $xor22$i1797 = $329 ^ $xor44$i1344;
  $xor23$i1798 = $330 ^ $xor46$i1345;
  $xor24$i1799 = $331 ^ $xor48$i1346;
  $xor25$i1800 = $332 ^ $xor50$i1347;
  $xor26$i1801 = $333 ^ $xor52$i1348;
  $xor27$i1802 = $334 ^ $xor54$i1349;
  $xor28$i1803 = $335 ^ $xor56$i1350;
  $and$i1805 = $xor$i1794 & $sub$i1951;
  $and29$i1806 = $xor20$i1795 & $sub$i1951;
  $and30$i1807 = $xor21$i1796 & $sub$i1951;
  $and31$i1808 = $xor22$i1797 & $sub$i1951;
  $and32$i1809 = $xor23$i1798 & $sub$i1951;
  $and33$i1810 = $xor24$i1799 & $sub$i1951;
  $and34$i1811 = $xor25$i1800 & $sub$i1951;
  $and35$i1812 = $xor26$i1801 & $sub$i1951;
  $and36$i1813 = $xor27$i1802 & $sub$i1951;
  $and37$i1814 = $xor28$i1803 & $sub$i1951;
  $xor38$i1815 = $and$i1805 ^ $xor38$i1341;
  HEAP32[$arraydecay11$i>>2] = $xor38$i1815;
  $xor40$i1816 = $and29$i1806 ^ $xor40$i1342;
  HEAP32[$arrayidx1$i>>2] = $xor40$i1816;
  $xor42$i1817 = $and30$i1807 ^ $xor42$i1343;
  HEAP32[$arrayidx2$i>>2] = $xor42$i1817;
  $xor44$i1818 = $and31$i1808 ^ $xor44$i1344;
  HEAP32[$arrayidx3$i>>2] = $xor44$i1818;
  $xor46$i1819 = $and32$i1809 ^ $xor46$i1345;
  HEAP32[$arrayidx4$i>>2] = $xor46$i1819;
  $xor48$i1820 = $and33$i1810 ^ $xor48$i1346;
  HEAP32[$arrayidx5$i>>2] = $xor48$i1820;
  $xor50$i1821 = $and34$i1811 ^ $xor50$i1347;
  HEAP32[$arrayidx6$i>>2] = $xor50$i1821;
  $xor52$i1822 = $and35$i1812 ^ $xor52$i1348;
  HEAP32[$arrayidx7$i>>2] = $xor52$i1822;
  $xor54$i1823 = $and36$i1813 ^ $xor54$i1349;
  HEAP32[$arrayidx8$i>>2] = $xor54$i1823;
  $xor56$i1824 = $and37$i1814 ^ $xor56$i1350;
  HEAP32[$arrayidx9$i>>2] = $xor56$i1824;
  $sub$i1712 = (0 - ($xor38$i1815))|0;
  $sub10$i = (0 - ($xor40$i1816))|0;
  $sub11$i = (0 - ($xor42$i1817))|0;
  $sub12$i = (0 - ($xor44$i1818))|0;
  $sub13$i = (0 - ($xor46$i1819))|0;
  $sub14$i = (0 - ($xor48$i1820))|0;
  $sub15$i = (0 - ($xor50$i1821))|0;
  $sub16$i = (0 - ($xor52$i1822))|0;
  $sub17$i = (0 - ($xor54$i1823))|0;
  $sub18$i = (0 - ($xor56$i1824))|0;
  $xor$i1672 = $xor38$i1913 ^ $xor38$i1962;
  $xor20$i1673 = $xor40$i1914 ^ $xor40$i1963;
  $xor21$i1674 = $xor42$i1915 ^ $xor42$i1964;
  $xor22$i1675 = $xor44$i1916 ^ $xor44$i1965;
  $xor23$i1676 = $xor46$i1917 ^ $xor46$i1966;
  $xor24$i1677 = $xor48$i1918 ^ $xor48$i1967;
  $xor25$i1678 = $xor50$i1919 ^ $xor50$i1968;
  $xor26$i1679 = $xor52$i1920 ^ $xor52$i1969;
  $xor27$i1680 = $xor54$i1921 ^ $xor54$i1970;
  $xor28$i1681 = $xor56$i1922 ^ $xor56$i1971;
  $and$i1683 = $xor$i1672 & $sub41;
  $and29$i1684 = $xor20$i1673 & $sub41;
  $and30$i1685 = $xor21$i1674 & $sub41;
  $and31$i1686 = $xor22$i1675 & $sub41;
  $and32$i1687 = $xor23$i1676 & $sub41;
  $and33$i1688 = $xor24$i1677 & $sub41;
  $and34$i1689 = $xor25$i1678 & $sub41;
  $and35$i1690 = $xor26$i1679 & $sub41;
  $and36$i1691 = $xor27$i1680 & $sub41;
  $and37$i1692 = $xor28$i1681 & $sub41;
  $xor38$i1693 = $and$i1683 ^ $xor38$i1962;
  HEAP32[$cur>>2] = $xor38$i1693;
  $xor40$i1694 = $and29$i1684 ^ $xor40$i1963;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i1694;
  $xor42$i1695 = $and30$i1685 ^ $xor42$i1964;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i1695;
  $xor44$i1696 = $and31$i1686 ^ $xor44$i1965;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i1696;
  $xor46$i1697 = $and32$i1687 ^ $xor46$i1966;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i1697;
  $xor48$i1698 = $and33$i1688 ^ $xor48$i1967;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i1698;
  $xor50$i1699 = $and34$i1689 ^ $xor50$i1968;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i1699;
  $xor52$i1700 = $and35$i1690 ^ $xor52$i1969;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i1700;
  $xor54$i1701 = $and36$i1691 ^ $xor54$i1970;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i1701;
  $xor56$i1702 = $and37$i1692 ^ $xor56$i1971;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i1702;
  $xor38$i1644 = $and$i1683 ^ $xor38$i1913;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i1644;
  $xor40$i1645 = $and29$i1684 ^ $xor40$i1914;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i1645;
  $xor42$i1646 = $and30$i1685 ^ $xor42$i1915;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i1646;
  $xor44$i1647 = $and31$i1686 ^ $xor44$i1916;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i1647;
  $xor46$i1648 = $and32$i1687 ^ $xor46$i1917;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i1648;
  $xor48$i1649 = $and33$i1688 ^ $xor48$i1918;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i1649;
  $xor50$i1650 = $and34$i1689 ^ $xor50$i1919;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i1650;
  $xor52$i1651 = $and35$i1690 ^ $xor52$i1920;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i1651;
  $xor54$i1652 = $and36$i1691 ^ $xor54$i1921;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i1652;
  $xor56$i1653 = $and37$i1692 ^ $xor56$i1922;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i1653;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i1864;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i1865;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i1866;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i1867;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i1868;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i1869;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i1870;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i1871;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i1872;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i1873;
  $xor$i1525 = $xor38$i1815 ^ $sub$i1712;
  $xor20$i1526 = $xor40$i1816 ^ $sub10$i;
  $xor21$i1527 = $xor42$i1817 ^ $sub11$i;
  $xor22$i1528 = $xor44$i1818 ^ $sub12$i;
  $xor23$i1529 = $xor46$i1819 ^ $sub13$i;
  $xor24$i1530 = $xor48$i1820 ^ $sub14$i;
  $xor25$i1531 = $xor50$i1821 ^ $sub15$i;
  $xor26$i1532 = $xor52$i1822 ^ $sub16$i;
  $xor27$i1533 = $xor54$i1823 ^ $sub17$i;
  $xor28$i1534 = $xor56$i1824 ^ $sub18$i;
  $and$i1536 = $xor$i1525 & $sub41;
  $and29$i1537 = $xor20$i1526 & $sub41;
  $and30$i1538 = $xor21$i1527 & $sub41;
  $and31$i1539 = $xor22$i1528 & $sub41;
  $and32$i1540 = $xor23$i1529 & $sub41;
  $and33$i1541 = $xor24$i1530 & $sub41;
  $and34$i1542 = $xor25$i1531 & $sub41;
  $and35$i1543 = $xor26$i1532 & $sub41;
  $and36$i1544 = $xor27$i1533 & $sub41;
  $and37$i1545 = $xor28$i1534 & $sub41;
  $xor38$i1546 = $and$i1536 ^ $xor38$i1815;
  HEAP32[$arraydecay11$i>>2] = $xor38$i1546;
  $xor40$i1547 = $and29$i1537 ^ $xor40$i1816;
  HEAP32[$arrayidx1$i>>2] = $xor40$i1547;
  $xor42$i1548 = $and30$i1538 ^ $xor42$i1817;
  HEAP32[$arrayidx2$i>>2] = $xor42$i1548;
  $xor44$i1549 = $and31$i1539 ^ $xor44$i1818;
  HEAP32[$arrayidx3$i>>2] = $xor44$i1549;
  $xor46$i1550 = $and32$i1540 ^ $xor46$i1819;
  HEAP32[$arrayidx4$i>>2] = $xor46$i1550;
  $xor48$i1551 = $and33$i1541 ^ $xor48$i1820;
  HEAP32[$arrayidx5$i>>2] = $xor48$i1551;
  $xor50$i1552 = $and34$i1542 ^ $xor50$i1821;
  HEAP32[$arrayidx6$i>>2] = $xor50$i1552;
  $xor52$i1553 = $and35$i1543 ^ $xor52$i1822;
  HEAP32[$arrayidx7$i>>2] = $xor52$i1553;
  $xor54$i1554 = $and36$i1544 ^ $xor54$i1823;
  HEAP32[$arrayidx8$i>>2] = $xor54$i1554;
  $xor56$i1555 = $and37$i1545 ^ $xor56$i1824;
  HEAP32[$arrayidx9$i>>2] = $xor56$i1555;
  _ge_add($t,$u,$cur);
  _fe_mul($r,$t,$arraydecay3$i);
  _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
  _fe_mul($arraydecay2$i44,$arraydecay7$i,$arraydecay3$i);
  $dec = (($i$22017) + -1)|0;
  $cmp35 = ($i$22017|0)==(0);
  if ($cmp35) {
   break;
  } else {
   $i$22017 = $dec;
  }
 }
 STACKTOP = sp;return;
}
function _ge_double_scalarmult_precomp_vartime($r,$a,$A,$b,$Bi) {
 $r = $r|0;
 $a = $a|0;
 $A = $A|0;
 $b = $b|0;
 $Bi = $Bi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Ai = 0, $arraydecay1$i = 0, $arraydecay15$i = 0, $arraydecay2$i = 0, $arraydecay3$i21 = 0, $arraydecay4$i22 = 0, $arraydecay6$i23 = 0, $arraydecay7$i24 = 0, $arraydecay9$i25 = 0, $arrayidx = 0;
 var $arrayidx1$i$i = 0, $arrayidx1$i3$i = 0, $arrayidx10 = 0, $arrayidx17 = 0, $arrayidx26 = 0, $arrayidx29 = 0, $arrayidx3 = 0, $arrayidx37 = 0, $arrayidx48 = 0, $aslide = 0, $bslide = 0, $cmp = 0, $cmp12 = 0, $cmp20 = 0, $cmp31 = 0, $cmp41 = 0, $cmp7 = 0, $cmp750 = 0, $dec = 0, $dec52 = 0;
 var $div25 = 0, $div47 = 0, $i$052 = 0, $i$151 = 0, $t = 0, $tobool = 0, $tobool5 = 0, $u = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0;
 $aslide = sp + 1536|0;
 $bslide = sp + 1280|0;
 $Ai = sp;
 $t = sp + 1952|0;
 $u = sp + 1792|0;
 _slide($aslide,$a);
 _slide($bslide,$b);
 _ge_dsm_precomp($Ai,$A);
 dest=$r; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay1$i = ((($r)) + 40|0);
 HEAP32[$arraydecay1$i>>2] = 1;
 $arrayidx1$i3$i = ((($r)) + 44|0);
 dest=$arrayidx1$i3$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay2$i = ((($r)) + 80|0);
 HEAP32[$arraydecay2$i>>2] = 1;
 $arrayidx1$i$i = ((($r)) + 84|0);
 dest=$arrayidx1$i$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i$052 = 255;
 while(1) {
  $arrayidx = (($aslide) + ($i$052)|0);
  $0 = HEAP8[$arrayidx>>0]|0;
  $tobool = ($0<<24>>24)==(0);
  if (!($tobool)) {
   break;
  }
  $arrayidx3 = (($bslide) + ($i$052)|0);
  $1 = HEAP8[$arrayidx3>>0]|0;
  $tobool5 = ($1<<24>>24)==(0);
  if (!($tobool5)) {
   break;
  }
  $dec = (($i$052) + -1)|0;
  $cmp = ($i$052|0)==(0);
  if ($cmp) {
   label = 16;
   break;
  } else {
   $i$052 = $dec;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
 $cmp750 = ($i$052|0)>(-1);
 if (!($cmp750)) {
  STACKTOP = sp;return;
 }
 $arraydecay3$i21 = ((($t)) + 120|0);
 $arraydecay4$i22 = ((($u)) + 40|0);
 $arraydecay6$i23 = ((($t)) + 40|0);
 $arraydecay7$i24 = ((($t)) + 80|0);
 $arraydecay9$i25 = ((($u)) + 80|0);
 $arraydecay15$i = ((($u)) + 120|0);
 $i$151 = $i$052;
 while(1) {
  _ge_p2_dbl($t,$r);
  $arrayidx10 = (($aslide) + ($i$151)|0);
  $2 = HEAP8[$arrayidx10>>0]|0;
  $cmp12 = ($2<<24>>24)>(0);
  if ($cmp12) {
   _fe_mul($u,$t,$arraydecay3$i21);
   _fe_mul($arraydecay4$i22,$arraydecay6$i23,$arraydecay7$i24);
   _fe_mul($arraydecay9$i25,$arraydecay7$i24,$arraydecay3$i21);
   _fe_mul($arraydecay15$i,$t,$arraydecay6$i23);
   $3 = ($2&255) >>> 1;
   $4 = $3&255;
   $arrayidx17 = (($Ai) + (($4*160)|0)|0);
   _ge_add($t,$u,$arrayidx17);
  } else {
   $cmp20 = ($2<<24>>24)<(0);
   if ($cmp20) {
    _fe_mul($u,$t,$arraydecay3$i21);
    _fe_mul($arraydecay4$i22,$arraydecay6$i23,$arraydecay7$i24);
    _fe_mul($arraydecay9$i25,$arraydecay7$i24,$arraydecay3$i21);
    _fe_mul($arraydecay15$i,$t,$arraydecay6$i23);
    $5 = (($2<<24>>24) / -2)&-1;
    $div25 = $5 << 24 >> 24;
    $arrayidx26 = (($Ai) + (($div25*160)|0)|0);
    _ge_sub($t,$u,$arrayidx26);
   }
  }
  $arrayidx29 = (($bslide) + ($i$151)|0);
  $6 = HEAP8[$arrayidx29>>0]|0;
  $cmp31 = ($6<<24>>24)>(0);
  if ($cmp31) {
   _fe_mul($u,$t,$arraydecay3$i21);
   _fe_mul($arraydecay4$i22,$arraydecay6$i23,$arraydecay7$i24);
   _fe_mul($arraydecay9$i25,$arraydecay7$i24,$arraydecay3$i21);
   _fe_mul($arraydecay15$i,$t,$arraydecay6$i23);
   $7 = ($6&255) >>> 1;
   $8 = $7&255;
   $arrayidx37 = (($Bi) + (($8*160)|0)|0);
   _ge_add($t,$u,$arrayidx37);
  } else {
   $cmp41 = ($6<<24>>24)<(0);
   if ($cmp41) {
    _fe_mul($u,$t,$arraydecay3$i21);
    _fe_mul($arraydecay4$i22,$arraydecay6$i23,$arraydecay7$i24);
    _fe_mul($arraydecay9$i25,$arraydecay7$i24,$arraydecay3$i21);
    _fe_mul($arraydecay15$i,$t,$arraydecay6$i23);
    $9 = (($6<<24>>24) / -2)&-1;
    $div47 = $9 << 24 >> 24;
    $arrayidx48 = (($Bi) + (($div47*160)|0)|0);
    _ge_sub($t,$u,$arrayidx48);
   }
  }
  _fe_mul($r,$t,$arraydecay3$i21);
  _fe_mul($arraydecay1$i,$arraydecay6$i23,$arraydecay7$i24);
  _fe_mul($arraydecay2$i,$arraydecay7$i24,$arraydecay3$i21);
  $dec52 = (($i$151) + -1)|0;
  $cmp7 = ($i$151|0)>(0);
  if ($cmp7) {
   $i$151 = $dec52;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _ge_check_subgroup_precomp_vartime($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add$ptr = 0, $add$ptr1 = 0, $add$ptr10 = 0, $add$ptr2 = 0, $add$ptr3 = 0, $add$ptr4 = 0, $add$ptr7 = 0;
 var $arraydecay1$i = 0, $arraydecay15$i = 0, $arraydecay2$i = 0, $arraydecay3$i = 0, $arraydecay4$i28 = 0, $arraydecay6$i = 0, $arraydecay7$i = 0, $arraydecay9$i31 = 0, $arrayidx1$i = 0, $arrayidx1$i$i = 0, $arrayidx1$i1937 = 0, $arrayidx1$i4$i = 0, $arrayidx11$i = 0, $arrayidx12$i = 0, $arrayidx12$i1941 = 0, $arrayidx13$i = 0, $arrayidx14$i = 0, $arrayidx15$i = 0, $arrayidx15$i1942 = 0, $arrayidx16$i = 0;
 var $arrayidx17$i = 0, $arrayidx18$i = 0, $arrayidx18$i1943 = 0, $arrayidx19$i = 0, $arrayidx2$i = 0, $arrayidx21$i = 0, $arrayidx24$i = 0, $arrayidx27$i = 0, $arrayidx3$i = 0, $arrayidx3$i1938 = 0, $arrayidx30$i = 0, $arrayidx33$i = 0, $arrayidx36$i = 0, $arrayidx39$i = 0, $arrayidx4$i = 0, $arrayidx42$i = 0, $arrayidx45$i = 0, $arrayidx48$i = 0, $arrayidx5$i = 0, $arrayidx51$i = 0;
 var $arrayidx54$i = 0, $arrayidx57$i = 0, $arrayidx6$i = 0, $arrayidx6$i1939 = 0, $arrayidx60$i = 0, $arrayidx63$i = 0, $arrayidx66$i = 0, $arrayidx69$i = 0, $arrayidx7$i = 0, $arrayidx72$i = 0, $arrayidx75$i = 0, $arrayidx78$i = 0, $arrayidx8$i = 0, $arrayidx81$i = 0, $arrayidx84$i = 0, $arrayidx87$i = 0, $arrayidx9$i = 0, $arrayidx9$i1940 = 0, $arrayidx90$i = 0, $or1$i = 0;
 var $or115$i = 0, $or146$i = 0, $or177$i = 0, $or208$i = 0, $or239$i = 0, $or2610$i = 0, $or2911$i = 0, $or3212$i = 0, $or3513$i = 0, $or3814$i = 0, $or4115$i = 0, $or4416$i = 0, $or4717$i = 0, $or5018$i = 0, $or52$i = 0, $or5319$i = 0, $or5620$i = 0, $or5921$i = 0, $or6222$i = 0, $or6523$i = 0;
 var $or6824$i = 0, $or7125$i = 0, $or7426$i = 0, $or7727$i = 0, $or8028$i = 0, $or8329$i = 0, $or84$i = 0, $or8630$i = 0, $or8931$i = 0, $or92$i = 0, $or9232$i = 0, $s = 0, $s$i = 0, $shr$i = 0, $sub$i = 0, $sub$i1944 = 0, $sub20$i = 0, $sub21$i = 0, $sub22$i = 0, $sub23$i = 0;
 var $sub24$i = 0, $sub25$i = 0, $sub26$i = 0, $sub27$i = 0, $sub28$i = 0, $t = 0, $u = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $s$i = sp;
 $s = sp + 312|0;
 $t = sp + 152|0;
 $u = sp + 32|0;
 dest=$s; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay1$i = ((($s)) + 40|0);
 HEAP32[$arraydecay1$i>>2] = 1;
 $arrayidx1$i4$i = ((($s)) + 44|0);
 dest=$arrayidx1$i4$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay2$i = ((($s)) + 80|0);
 HEAP32[$arraydecay2$i>>2] = 1;
 $arrayidx1$i$i = ((($s)) + 84|0);
 dest=$arrayidx1$i$i; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $add$ptr = ((($p)) + 1120|0);
 _ge_add($t,$s,$add$ptr);
 $arraydecay3$i = ((($t)) + 120|0);
 _fe_mul($s,$t,$arraydecay3$i);
 $arraydecay6$i = ((($t)) + 40|0);
 $arraydecay7$i = ((($t)) + 80|0);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 $arraydecay15$i = ((($s)) + 120|0);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$p);
 _fe_mul($u,$t,$arraydecay3$i);
 $arraydecay4$i28 = ((($u)) + 40|0);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 $arraydecay9$i31 = ((($u)) + 80|0);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $add$ptr1 = ((($p)) + 320|0);
 _ge_add($t,$s,$add$ptr1);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $add$ptr2 = ((($p)) + 480|0);
 _ge_add($t,$s,$add$ptr2);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$p);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $add$ptr3 = ((($p)) + 160|0);
 _ge_sub($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$p);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $add$ptr4 = ((($p)) + 800|0);
 _ge_sub($t,$s,$add$ptr4);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$p);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $add$ptr7 = ((($p)) + 960|0);
 _ge_sub($t,$s,$add$ptr7);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr4);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr4);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $add$ptr10 = ((($p)) + 640|0);
 _ge_add($t,$s,$add$ptr10);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr7);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$add$ptr1);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$add$ptr4);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$add$ptr1);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$p);
 $0 = HEAP32[$arraydecay6$i>>2]|0;
 $arrayidx1$i1937 = ((($t)) + 44|0);
 $1 = HEAP32[$arrayidx1$i1937>>2]|0;
 $arrayidx2$i = ((($t)) + 48|0);
 $2 = HEAP32[$arrayidx2$i>>2]|0;
 $arrayidx3$i1938 = ((($t)) + 52|0);
 $3 = HEAP32[$arrayidx3$i1938>>2]|0;
 $arrayidx4$i = ((($t)) + 56|0);
 $4 = HEAP32[$arrayidx4$i>>2]|0;
 $arrayidx5$i = ((($t)) + 60|0);
 $5 = HEAP32[$arrayidx5$i>>2]|0;
 $arrayidx6$i1939 = ((($t)) + 64|0);
 $6 = HEAP32[$arrayidx6$i1939>>2]|0;
 $arrayidx7$i = ((($t)) + 68|0);
 $7 = HEAP32[$arrayidx7$i>>2]|0;
 $arrayidx8$i = ((($t)) + 72|0);
 $8 = HEAP32[$arrayidx8$i>>2]|0;
 $arrayidx9$i1940 = ((($t)) + 76|0);
 $9 = HEAP32[$arrayidx9$i1940>>2]|0;
 $10 = HEAP32[$arraydecay3$i>>2]|0;
 $arrayidx11$i = ((($t)) + 124|0);
 $11 = HEAP32[$arrayidx11$i>>2]|0;
 $arrayidx12$i1941 = ((($t)) + 128|0);
 $12 = HEAP32[$arrayidx12$i1941>>2]|0;
 $arrayidx13$i = ((($t)) + 132|0);
 $13 = HEAP32[$arrayidx13$i>>2]|0;
 $arrayidx14$i = ((($t)) + 136|0);
 $14 = HEAP32[$arrayidx14$i>>2]|0;
 $arrayidx15$i1942 = ((($t)) + 140|0);
 $15 = HEAP32[$arrayidx15$i1942>>2]|0;
 $arrayidx16$i = ((($t)) + 144|0);
 $16 = HEAP32[$arrayidx16$i>>2]|0;
 $arrayidx17$i = ((($t)) + 148|0);
 $17 = HEAP32[$arrayidx17$i>>2]|0;
 $arrayidx18$i1943 = ((($t)) + 152|0);
 $18 = HEAP32[$arrayidx18$i1943>>2]|0;
 $arrayidx19$i = ((($t)) + 156|0);
 $19 = HEAP32[$arrayidx19$i>>2]|0;
 $sub$i1944 = (($0) - ($10))|0;
 $sub20$i = (($1) - ($11))|0;
 $sub21$i = (($2) - ($12))|0;
 $sub22$i = (($3) - ($13))|0;
 $sub23$i = (($4) - ($14))|0;
 $sub24$i = (($5) - ($15))|0;
 $sub25$i = (($6) - ($16))|0;
 $sub26$i = (($7) - ($17))|0;
 $sub27$i = (($8) - ($18))|0;
 $sub28$i = (($9) - ($19))|0;
 HEAP32[$arraydecay6$i>>2] = $sub$i1944;
 HEAP32[$arrayidx1$i1937>>2] = $sub20$i;
 HEAP32[$arrayidx2$i>>2] = $sub21$i;
 HEAP32[$arrayidx3$i1938>>2] = $sub22$i;
 HEAP32[$arrayidx4$i>>2] = $sub23$i;
 HEAP32[$arrayidx5$i>>2] = $sub24$i;
 HEAP32[$arrayidx6$i1939>>2] = $sub25$i;
 HEAP32[$arrayidx7$i>>2] = $sub26$i;
 HEAP32[$arrayidx8$i>>2] = $sub27$i;
 HEAP32[$arrayidx9$i1940>>2] = $sub28$i;
 _fe_tobytes($s$i,$arraydecay6$i);
 $20 = HEAP8[$s$i>>0]|0;
 $arrayidx1$i = ((($s$i)) + 1|0);
 $21 = HEAP8[$arrayidx1$i>>0]|0;
 $or1$i = $21 | $20;
 $arrayidx3$i = ((($s$i)) + 2|0);
 $22 = HEAP8[$arrayidx3$i>>0]|0;
 $or52$i = $or1$i | $22;
 $arrayidx6$i = ((($s$i)) + 3|0);
 $23 = HEAP8[$arrayidx6$i>>0]|0;
 $or84$i = $or52$i | $23;
 $arrayidx9$i = ((($s$i)) + 4|0);
 $24 = HEAP8[$arrayidx9$i>>0]|0;
 $or115$i = $or84$i | $24;
 $arrayidx12$i = ((($s$i)) + 5|0);
 $25 = HEAP8[$arrayidx12$i>>0]|0;
 $or146$i = $or115$i | $25;
 $arrayidx15$i = ((($s$i)) + 6|0);
 $26 = HEAP8[$arrayidx15$i>>0]|0;
 $or177$i = $or146$i | $26;
 $arrayidx18$i = ((($s$i)) + 7|0);
 $27 = HEAP8[$arrayidx18$i>>0]|0;
 $or208$i = $or177$i | $27;
 $arrayidx21$i = ((($s$i)) + 8|0);
 $28 = HEAP8[$arrayidx21$i>>0]|0;
 $or239$i = $or208$i | $28;
 $arrayidx24$i = ((($s$i)) + 9|0);
 $29 = HEAP8[$arrayidx24$i>>0]|0;
 $or2610$i = $or239$i | $29;
 $arrayidx27$i = ((($s$i)) + 10|0);
 $30 = HEAP8[$arrayidx27$i>>0]|0;
 $or2911$i = $or2610$i | $30;
 $arrayidx30$i = ((($s$i)) + 11|0);
 $31 = HEAP8[$arrayidx30$i>>0]|0;
 $or3212$i = $or2911$i | $31;
 $arrayidx33$i = ((($s$i)) + 12|0);
 $32 = HEAP8[$arrayidx33$i>>0]|0;
 $or3513$i = $or3212$i | $32;
 $arrayidx36$i = ((($s$i)) + 13|0);
 $33 = HEAP8[$arrayidx36$i>>0]|0;
 $or3814$i = $or3513$i | $33;
 $arrayidx39$i = ((($s$i)) + 14|0);
 $34 = HEAP8[$arrayidx39$i>>0]|0;
 $or4115$i = $or3814$i | $34;
 $arrayidx42$i = ((($s$i)) + 15|0);
 $35 = HEAP8[$arrayidx42$i>>0]|0;
 $or4416$i = $or4115$i | $35;
 $arrayidx45$i = ((($s$i)) + 16|0);
 $36 = HEAP8[$arrayidx45$i>>0]|0;
 $or4717$i = $or4416$i | $36;
 $arrayidx48$i = ((($s$i)) + 17|0);
 $37 = HEAP8[$arrayidx48$i>>0]|0;
 $or5018$i = $or4717$i | $37;
 $arrayidx51$i = ((($s$i)) + 18|0);
 $38 = HEAP8[$arrayidx51$i>>0]|0;
 $or5319$i = $or5018$i | $38;
 $arrayidx54$i = ((($s$i)) + 19|0);
 $39 = HEAP8[$arrayidx54$i>>0]|0;
 $or5620$i = $or5319$i | $39;
 $arrayidx57$i = ((($s$i)) + 20|0);
 $40 = HEAP8[$arrayidx57$i>>0]|0;
 $or5921$i = $or5620$i | $40;
 $arrayidx60$i = ((($s$i)) + 21|0);
 $41 = HEAP8[$arrayidx60$i>>0]|0;
 $or6222$i = $or5921$i | $41;
 $arrayidx63$i = ((($s$i)) + 22|0);
 $42 = HEAP8[$arrayidx63$i>>0]|0;
 $or6523$i = $or6222$i | $42;
 $arrayidx66$i = ((($s$i)) + 23|0);
 $43 = HEAP8[$arrayidx66$i>>0]|0;
 $or6824$i = $or6523$i | $43;
 $arrayidx69$i = ((($s$i)) + 24|0);
 $44 = HEAP8[$arrayidx69$i>>0]|0;
 $or7125$i = $or6824$i | $44;
 $arrayidx72$i = ((($s$i)) + 25|0);
 $45 = HEAP8[$arrayidx72$i>>0]|0;
 $or7426$i = $or7125$i | $45;
 $arrayidx75$i = ((($s$i)) + 26|0);
 $46 = HEAP8[$arrayidx75$i>>0]|0;
 $or7727$i = $or7426$i | $46;
 $arrayidx78$i = ((($s$i)) + 27|0);
 $47 = HEAP8[$arrayidx78$i>>0]|0;
 $or8028$i = $or7727$i | $47;
 $arrayidx81$i = ((($s$i)) + 28|0);
 $48 = HEAP8[$arrayidx81$i>>0]|0;
 $or8329$i = $or8028$i | $48;
 $arrayidx84$i = ((($s$i)) + 29|0);
 $49 = HEAP8[$arrayidx84$i>>0]|0;
 $or8630$i = $or8329$i | $49;
 $arrayidx87$i = ((($s$i)) + 30|0);
 $50 = HEAP8[$arrayidx87$i>>0]|0;
 $or8931$i = $or8630$i | $50;
 $arrayidx90$i = ((($s$i)) + 31|0);
 $51 = HEAP8[$arrayidx90$i>>0]|0;
 $or9232$i = $or8931$i | $51;
 $or92$i = $or9232$i&255;
 $sub$i = (($or92$i) + -1)|0;
 $shr$i = $sub$i >> 8;
 $add$i = (($shr$i) + 1)|0;
 STACKTOP = sp;return ($add$i|0);
}
function _ge_mul8($r,$t) {
 $r = $r|0;
 $t = $t|0;
 var $arraydecay3$i = 0, $arraydecay4$i = 0, $arraydecay6$i = 0, $arraydecay7$i = 0, $arraydecay9$i = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $u = sp;
 _ge_p2_dbl($r,$t);
 $arraydecay3$i = ((($r)) + 120|0);
 _fe_mul($u,$r,$arraydecay3$i);
 $arraydecay4$i = ((($u)) + 40|0);
 $arraydecay6$i = ((($r)) + 40|0);
 $arraydecay7$i = ((($r)) + 80|0);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 $arraydecay9$i = ((($u)) + 80|0);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($r,$u);
 _fe_mul($u,$r,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($r,$u);
 STACKTOP = sp;return;
}
function _ge_fromfe_frombytes_vartime($r,$s) {
 $r = $r|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$i = 0, $add$i343 = 0, $add$i380 = 0, $add$i484 = 0, $add$ptr = 0, $add$ptr$idx = 0, $add$ptr$idx$val = 0, $add$ptr$idx94 = 0, $add$ptr$idx94$val = 0, $add$ptr$val = 0, $add$ptr11 = 0, $add$ptr13 = 0, $add$ptr13$idx = 0, $add$ptr13$idx$val = 0, $add$ptr13$idx90 = 0, $add$ptr13$idx90$val = 0;
 var $add$ptr13$val = 0, $add$ptr16 = 0, $add$ptr16$idx = 0, $add$ptr16$idx$val = 0, $add$ptr16$idx89 = 0, $add$ptr16$idx89$val = 0, $add$ptr16$val = 0, $add$ptr19 = 0, $add$ptr19$idx = 0, $add$ptr19$idx$val = 0, $add$ptr19$idx88 = 0, $add$ptr19$idx88$val = 0, $add$ptr19$val = 0, $add$ptr2 = 0, $add$ptr2$idx = 0, $add$ptr2$idx$val = 0, $add$ptr2$idx93 = 0, $add$ptr2$idx93$val = 0, $add$ptr2$val = 0, $add$ptr22 = 0;
 var $add$ptr22$idx = 0, $add$ptr22$idx$val = 0, $add$ptr22$idx87 = 0, $add$ptr22$idx87$val = 0, $add$ptr22$val = 0, $add$ptr5 = 0, $add$ptr5$idx = 0, $add$ptr5$idx$val = 0, $add$ptr5$idx92 = 0, $add$ptr5$idx92$val = 0, $add$ptr5$val = 0, $add$ptr8 = 0, $add$ptr8$idx = 0, $add$ptr8$idx$val = 0, $add$ptr8$idx91 = 0, $add$ptr8$idx91$val = 0, $add$ptr8$val = 0, $add20$i = 0, $add20$i381 = 0, $add20$i485 = 0;
 var $add21$i = 0, $add21$i382 = 0, $add21$i486 = 0, $add22$i = 0, $add22$i383 = 0, $add22$i487 = 0, $add23$i = 0, $add23$i384 = 0, $add23$i488 = 0, $add24$i = 0, $add24$i385 = 0, $add24$i489 = 0, $add25$i = 0, $add25$i386 = 0, $add25$i490 = 0, $add26$i = 0, $add26$i387 = 0, $add26$i491 = 0, $add27$i = 0, $add27$i388 = 0;
 var $add27$i492 = 0, $add28$i = 0, $add28$i389 = 0, $add28$i493 = 0, $and$i = 0, $arraydecay172 = 0, $arraydecay175 = 0, $arrayidx1$i = 0, $arrayidx1$i132 = 0, $arrayidx1$i180 = 0, $arrayidx1$i257 = 0, $arrayidx1$i325 = 0, $arrayidx1$i400 = 0, $arrayidx1$i466 = 0, $arrayidx11$i475 = 0, $arrayidx11$i503 = 0, $arrayidx12$i335 = 0, $arrayidx12$i408 = 0, $arrayidx12$i476 = 0, $arrayidx12$i504 = 0;
 var $arrayidx13$i336 = 0, $arrayidx13$i477 = 0, $arrayidx13$i505 = 0, $arrayidx14$i337 = 0, $arrayidx14$i478 = 0, $arrayidx14$i506 = 0, $arrayidx15$i338 = 0, $arrayidx15$i410 = 0, $arrayidx15$i479 = 0, $arrayidx15$i507 = 0, $arrayidx16$i339 = 0, $arrayidx16$i480 = 0, $arrayidx16$i508 = 0, $arrayidx17$i340 = 0, $arrayidx17$i481 = 0, $arrayidx17$i509 = 0, $arrayidx18$i341 = 0, $arrayidx18$i412 = 0, $arrayidx18$i482 = 0, $arrayidx18$i510 = 0;
 var $arrayidx19$i342 = 0, $arrayidx19$i483 = 0, $arrayidx19$i511 = 0, $arrayidx2$i133 = 0, $arrayidx2$i326 = 0, $arrayidx2$i467 = 0, $arrayidx21$i414 = 0, $arrayidx24$i416 = 0, $arrayidx27$i418 = 0, $arrayidx3$i = 0, $arrayidx3$i134 = 0, $arrayidx3$i184 = 0, $arrayidx3$i327 = 0, $arrayidx3$i402 = 0, $arrayidx3$i468 = 0, $arrayidx30$i = 0, $arrayidx30$i123 = 0, $arrayidx30$i420 = 0, $arrayidx31$i = 0, $arrayidx31$i124 = 0;
 var $arrayidx32$i = 0, $arrayidx32$i125 = 0, $arrayidx33$i = 0, $arrayidx33$i126 = 0, $arrayidx33$i422 = 0, $arrayidx34$i = 0, $arrayidx34$i127 = 0, $arrayidx35$i = 0, $arrayidx35$i128 = 0, $arrayidx36$i = 0, $arrayidx36$i129 = 0, $arrayidx36$i424 = 0, $arrayidx37$i = 0, $arrayidx37$i130 = 0, $arrayidx38$i = 0, $arrayidx38$i131 = 0, $arrayidx39$i426 = 0, $arrayidx4$i135 = 0, $arrayidx4$i328 = 0, $arrayidx4$i469 = 0;
 var $arrayidx42$i428 = 0, $arrayidx45$i430 = 0, $arrayidx48$i432 = 0, $arrayidx5$i136 = 0, $arrayidx5$i329 = 0, $arrayidx5$i470 = 0, $arrayidx51$i434 = 0, $arrayidx54$i436 = 0, $arrayidx57$i438 = 0, $arrayidx6$i137 = 0, $arrayidx6$i330 = 0, $arrayidx6$i404 = 0, $arrayidx6$i471 = 0, $arrayidx60$i440 = 0, $arrayidx63$i442 = 0, $arrayidx66$i444 = 0, $arrayidx69$i446 = 0, $arrayidx7$i = 0, $arrayidx7$i138 = 0, $arrayidx7$i188 = 0;
 var $arrayidx7$i331 = 0, $arrayidx7$i472 = 0, $arrayidx72$i448 = 0, $arrayidx73 = 0, $arrayidx75 = 0, $arrayidx75$i450 = 0, $arrayidx77 = 0, $arrayidx78$i452 = 0, $arrayidx79 = 0, $arrayidx8$i139 = 0, $arrayidx8$i332 = 0, $arrayidx8$i473 = 0, $arrayidx81 = 0, $arrayidx81$i454 = 0, $arrayidx83 = 0, $arrayidx84$i456 = 0, $arrayidx85 = 0, $arrayidx87 = 0, $arrayidx87$i458 = 0, $arrayidx89 = 0;
 var $arrayidx9$i140 = 0, $arrayidx9$i333 = 0, $arrayidx9$i406 = 0, $arrayidx9$i474 = 0, $arrayidx90$i460 = 0, $cmp = 0, $or1$i = 0, $or1$i260 = 0, $or1$i401 = 0, $or115$i = 0, $or115$i266 = 0, $or115$i407 = 0, $or146$i = 0, $or146$i268 = 0, $or146$i409 = 0, $or177$i = 0, $or177$i270 = 0, $or177$i411 = 0, $or208$i = 0, $or208$i272 = 0;
 var $or208$i413 = 0, $or239$i = 0, $or239$i274 = 0, $or239$i415 = 0, $or2610$i = 0, $or2610$i276 = 0, $or2610$i417 = 0, $or2911$i = 0, $or2911$i278 = 0, $or2911$i419 = 0, $or3212$i = 0, $or3212$i280 = 0, $or3212$i421 = 0, $or3513$i = 0, $or3513$i282 = 0, $or3513$i423 = 0, $or3814$i = 0, $or3814$i284 = 0, $or3814$i425 = 0, $or4115$i = 0;
 var $or4115$i286 = 0, $or4115$i427 = 0, $or4416$i = 0, $or4416$i288 = 0, $or4416$i429 = 0, $or4717$i = 0, $or4717$i290 = 0, $or4717$i431 = 0, $or5018$i = 0, $or5018$i292 = 0, $or5018$i433 = 0, $or52$i = 0, $or52$i262 = 0, $or52$i403 = 0, $or5319$i = 0, $or5319$i294 = 0, $or5319$i435 = 0, $or5620$i = 0, $or5620$i296 = 0, $or5620$i437 = 0;
 var $or5921$i = 0, $or5921$i298 = 0, $or5921$i439 = 0, $or6222$i = 0, $or6222$i300 = 0, $or6222$i441 = 0, $or6523$i = 0, $or6523$i302 = 0, $or6523$i443 = 0, $or6824$i = 0, $or6824$i304 = 0, $or6824$i445 = 0, $or7125$i = 0, $or7125$i306 = 0, $or7125$i447 = 0, $or7426$i = 0, $or7426$i308 = 0, $or7426$i449 = 0, $or7727$i = 0, $or7727$i310 = 0;
 var $or7727$i451 = 0, $or8028$i = 0, $or8028$i312 = 0, $or8028$i453 = 0, $or8329$i = 0, $or8329$i314 = 0, $or8329$i455 = 0, $or84$i = 0, $or84$i264 = 0, $or84$i405 = 0, $or8630$i = 0, $or8630$i316 = 0, $or8630$i457 = 0, $or8931$i = 0, $or8931$i318 = 0, $or8931$i459 = 0, $or92$i = 0, $or92$i321 = 0, $or92$i462 = 0, $or9232$i = 0;
 var $or9232$i320 = 0, $or9232$i461 = 0, $s$i = 0, $sign$0 = 0, $sub$i = 0, $sub$i141 = 0, $sub$i177 = 0, $sub$i210 = 0, $sub$i322 = 0, $sub$i463 = 0, $sub$i530 = 0, $sub10$i = 0, $sub11$i = 0, $sub12$i = 0, $sub13$i = 0, $sub14$i = 0, $sub15$i = 0, $sub16$i = 0, $sub17$i = 0, $sub18$i = 0;
 var $sub20$i = 0, $sub20$i211 = 0, $sub20$i531 = 0, $sub21$i = 0, $sub21$i212 = 0, $sub21$i532 = 0, $sub22$i = 0, $sub22$i213 = 0, $sub22$i533 = 0, $sub23$i = 0, $sub23$i214 = 0, $sub23$i534 = 0, $sub24$i = 0, $sub24$i215 = 0, $sub24$i535 = 0, $sub25$i = 0, $sub25$i216 = 0, $sub25$i536 = 0, $sub26$i = 0, $sub26$i217 = 0;
 var $sub26$i537 = 0, $sub27$i = 0, $sub27$i218 = 0, $sub27$i538 = 0, $sub28$i = 0, $sub28$i219 = 0, $sub28$i539 = 0, $tobool = 0, $tobool122 = 0, $tobool149 = 0, $u = 0, $v = 0, $w = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $s$i = sp + 288|0;
 $u = sp + 240|0;
 $v = sp + 192|0;
 $w = sp + 144|0;
 $x = sp + 96|0;
 $y = sp + 48|0;
 $z = sp;
 $0 = HEAP8[$s>>0]|0;
 $1 = $0&255;
 $arrayidx1$i = ((($s)) + 1|0);
 $2 = HEAP8[$arrayidx1$i>>0]|0;
 $3 = $2&255;
 $4 = (_bitshift64Shl(($3|0),0,8)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4 | $1;
 $arrayidx3$i = ((($s)) + 2|0);
 $7 = HEAP8[$arrayidx3$i>>0]|0;
 $8 = $7&255;
 $9 = (_bitshift64Shl(($8|0),0,16)|0);
 $10 = (getTempRet0() | 0);
 $11 = $6 | $9;
 $12 = $5 | $10;
 $arrayidx7$i = ((($s)) + 3|0);
 $13 = HEAP8[$arrayidx7$i>>0]|0;
 $14 = $13&255;
 $15 = (_bitshift64Shl(($14|0),0,24)|0);
 $16 = (getTempRet0() | 0);
 $17 = $11 | $15;
 $18 = $12 | $16;
 $add$ptr = ((($s)) + 4|0);
 $add$ptr$val = HEAP8[$add$ptr>>0]|0;
 $add$ptr$idx = ((($s)) + 5|0);
 $add$ptr$idx$val = HEAP8[$add$ptr$idx>>0]|0;
 $add$ptr$idx94 = ((($s)) + 6|0);
 $add$ptr$idx94$val = HEAP8[$add$ptr$idx94>>0]|0;
 $19 = $add$ptr$val&255;
 $20 = $add$ptr$idx$val&255;
 $21 = (_bitshift64Shl(($20|0),0,8)|0);
 $22 = (getTempRet0() | 0);
 $23 = $21 | $19;
 $24 = $add$ptr$idx94$val&255;
 $25 = (_bitshift64Shl(($24|0),0,16)|0);
 $26 = (getTempRet0() | 0);
 $27 = $23 | $25;
 $28 = $22 | $26;
 $29 = (_bitshift64Shl(($27|0),($28|0),6)|0);
 $30 = (getTempRet0() | 0);
 $add$ptr2 = ((($s)) + 7|0);
 $add$ptr2$val = HEAP8[$add$ptr2>>0]|0;
 $add$ptr2$idx = ((($s)) + 8|0);
 $add$ptr2$idx$val = HEAP8[$add$ptr2$idx>>0]|0;
 $add$ptr2$idx93 = ((($s)) + 9|0);
 $add$ptr2$idx93$val = HEAP8[$add$ptr2$idx93>>0]|0;
 $31 = $add$ptr2$val&255;
 $32 = $add$ptr2$idx$val&255;
 $33 = (_bitshift64Shl(($32|0),0,8)|0);
 $34 = (getTempRet0() | 0);
 $35 = $33 | $31;
 $36 = $add$ptr2$idx93$val&255;
 $37 = (_bitshift64Shl(($36|0),0,16)|0);
 $38 = (getTempRet0() | 0);
 $39 = $35 | $37;
 $40 = $34 | $38;
 $41 = (_bitshift64Shl(($39|0),($40|0),5)|0);
 $42 = (getTempRet0() | 0);
 $add$ptr5 = ((($s)) + 10|0);
 $add$ptr5$val = HEAP8[$add$ptr5>>0]|0;
 $add$ptr5$idx = ((($s)) + 11|0);
 $add$ptr5$idx$val = HEAP8[$add$ptr5$idx>>0]|0;
 $add$ptr5$idx92 = ((($s)) + 12|0);
 $add$ptr5$idx92$val = HEAP8[$add$ptr5$idx92>>0]|0;
 $43 = $add$ptr5$val&255;
 $44 = $add$ptr5$idx$val&255;
 $45 = (_bitshift64Shl(($44|0),0,8)|0);
 $46 = (getTempRet0() | 0);
 $47 = $45 | $43;
 $48 = $add$ptr5$idx92$val&255;
 $49 = (_bitshift64Shl(($48|0),0,16)|0);
 $50 = (getTempRet0() | 0);
 $51 = $47 | $49;
 $52 = $46 | $50;
 $53 = (_bitshift64Shl(($51|0),($52|0),3)|0);
 $54 = (getTempRet0() | 0);
 $add$ptr8 = ((($s)) + 13|0);
 $add$ptr8$val = HEAP8[$add$ptr8>>0]|0;
 $add$ptr8$idx = ((($s)) + 14|0);
 $add$ptr8$idx$val = HEAP8[$add$ptr8$idx>>0]|0;
 $add$ptr8$idx91 = ((($s)) + 15|0);
 $add$ptr8$idx91$val = HEAP8[$add$ptr8$idx91>>0]|0;
 $55 = $add$ptr8$val&255;
 $56 = $add$ptr8$idx$val&255;
 $57 = (_bitshift64Shl(($56|0),0,8)|0);
 $58 = (getTempRet0() | 0);
 $59 = $57 | $55;
 $60 = $add$ptr8$idx91$val&255;
 $61 = (_bitshift64Shl(($60|0),0,16)|0);
 $62 = (getTempRet0() | 0);
 $63 = $59 | $61;
 $64 = $58 | $62;
 $65 = (_bitshift64Shl(($63|0),($64|0),2)|0);
 $66 = (getTempRet0() | 0);
 $add$ptr11 = ((($s)) + 16|0);
 $67 = HEAP8[$add$ptr11>>0]|0;
 $68 = $67&255;
 $arrayidx1$i180 = ((($s)) + 17|0);
 $69 = HEAP8[$arrayidx1$i180>>0]|0;
 $70 = $69&255;
 $71 = (_bitshift64Shl(($70|0),0,8)|0);
 $72 = (getTempRet0() | 0);
 $73 = $71 | $68;
 $arrayidx3$i184 = ((($s)) + 18|0);
 $74 = HEAP8[$arrayidx3$i184>>0]|0;
 $75 = $74&255;
 $76 = (_bitshift64Shl(($75|0),0,16)|0);
 $77 = (getTempRet0() | 0);
 $78 = $73 | $76;
 $79 = $72 | $77;
 $arrayidx7$i188 = ((($s)) + 19|0);
 $80 = HEAP8[$arrayidx7$i188>>0]|0;
 $81 = $80&255;
 $82 = (_bitshift64Shl(($81|0),0,24)|0);
 $83 = (getTempRet0() | 0);
 $84 = $78 | $82;
 $85 = $79 | $83;
 $add$ptr13 = ((($s)) + 20|0);
 $add$ptr13$val = HEAP8[$add$ptr13>>0]|0;
 $add$ptr13$idx = ((($s)) + 21|0);
 $add$ptr13$idx$val = HEAP8[$add$ptr13$idx>>0]|0;
 $add$ptr13$idx90 = ((($s)) + 22|0);
 $add$ptr13$idx90$val = HEAP8[$add$ptr13$idx90>>0]|0;
 $86 = $add$ptr13$val&255;
 $87 = $add$ptr13$idx$val&255;
 $88 = (_bitshift64Shl(($87|0),0,8)|0);
 $89 = (getTempRet0() | 0);
 $90 = $88 | $86;
 $91 = $add$ptr13$idx90$val&255;
 $92 = (_bitshift64Shl(($91|0),0,16)|0);
 $93 = (getTempRet0() | 0);
 $94 = $90 | $92;
 $95 = $89 | $93;
 $96 = (_bitshift64Shl(($94|0),($95|0),7)|0);
 $97 = (getTempRet0() | 0);
 $add$ptr16 = ((($s)) + 23|0);
 $add$ptr16$val = HEAP8[$add$ptr16>>0]|0;
 $add$ptr16$idx = ((($s)) + 24|0);
 $add$ptr16$idx$val = HEAP8[$add$ptr16$idx>>0]|0;
 $add$ptr16$idx89 = ((($s)) + 25|0);
 $add$ptr16$idx89$val = HEAP8[$add$ptr16$idx89>>0]|0;
 $98 = $add$ptr16$val&255;
 $99 = $add$ptr16$idx$val&255;
 $100 = (_bitshift64Shl(($99|0),0,8)|0);
 $101 = (getTempRet0() | 0);
 $102 = $100 | $98;
 $103 = $add$ptr16$idx89$val&255;
 $104 = (_bitshift64Shl(($103|0),0,16)|0);
 $105 = (getTempRet0() | 0);
 $106 = $102 | $104;
 $107 = $101 | $105;
 $108 = (_bitshift64Shl(($106|0),($107|0),5)|0);
 $109 = (getTempRet0() | 0);
 $add$ptr19 = ((($s)) + 26|0);
 $add$ptr19$val = HEAP8[$add$ptr19>>0]|0;
 $add$ptr19$idx = ((($s)) + 27|0);
 $add$ptr19$idx$val = HEAP8[$add$ptr19$idx>>0]|0;
 $add$ptr19$idx88 = ((($s)) + 28|0);
 $add$ptr19$idx88$val = HEAP8[$add$ptr19$idx88>>0]|0;
 $110 = $add$ptr19$val&255;
 $111 = $add$ptr19$idx$val&255;
 $112 = (_bitshift64Shl(($111|0),0,8)|0);
 $113 = (getTempRet0() | 0);
 $114 = $112 | $110;
 $115 = $add$ptr19$idx88$val&255;
 $116 = (_bitshift64Shl(($115|0),0,16)|0);
 $117 = (getTempRet0() | 0);
 $118 = $114 | $116;
 $119 = $113 | $117;
 $120 = (_bitshift64Shl(($118|0),($119|0),4)|0);
 $121 = (getTempRet0() | 0);
 $add$ptr22 = ((($s)) + 29|0);
 $add$ptr22$val = HEAP8[$add$ptr22>>0]|0;
 $add$ptr22$idx = ((($s)) + 30|0);
 $add$ptr22$idx$val = HEAP8[$add$ptr22$idx>>0]|0;
 $add$ptr22$idx87 = ((($s)) + 31|0);
 $add$ptr22$idx87$val = HEAP8[$add$ptr22$idx87>>0]|0;
 $122 = $add$ptr22$val&255;
 $123 = $add$ptr22$idx$val&255;
 $124 = (_bitshift64Shl(($123|0),0,8)|0);
 $125 = (getTempRet0() | 0);
 $126 = $124 | $122;
 $127 = $add$ptr22$idx87$val&255;
 $128 = (_bitshift64Shl(($127|0),0,16)|0);
 $129 = (getTempRet0() | 0);
 $130 = $126 | $128;
 $131 = $125 | $129;
 $132 = (_bitshift64Shl(($130|0),($131|0),2)|0);
 $133 = (getTempRet0() | 0);
 $134 = (_i64Add(($132|0),($133|0),16777216,0)|0);
 $135 = (getTempRet0() | 0);
 $136 = (_bitshift64Lshr(($134|0),($135|0),25)|0);
 $137 = (getTempRet0() | 0);
 $138 = (___muldi3(($136|0),($137|0),19,0)|0);
 $139 = (getTempRet0() | 0);
 $140 = (_i64Add(($138|0),($139|0),($17|0),($18|0))|0);
 $141 = (getTempRet0() | 0);
 $142 = $134 & -33554432;
 $143 = (_i64Add(($29|0),($30|0),16777216,0)|0);
 $144 = (getTempRet0() | 0);
 $145 = (_bitshift64Lshr(($143|0),($144|0),25)|0);
 $146 = (getTempRet0() | 0);
 $147 = (_i64Add(($41|0),($42|0),($145|0),($146|0))|0);
 $148 = (getTempRet0() | 0);
 $149 = $143 & -33554432;
 $150 = (_i64Subtract(($29|0),($30|0),($149|0),0)|0);
 $151 = (getTempRet0() | 0);
 $152 = (_i64Add(($53|0),($54|0),16777216,0)|0);
 $153 = (getTempRet0() | 0);
 $154 = (_bitshift64Lshr(($152|0),($153|0),25)|0);
 $155 = (getTempRet0() | 0);
 $156 = (_i64Add(($65|0),($66|0),($154|0),($155|0))|0);
 $157 = (getTempRet0() | 0);
 $158 = $152 & -33554432;
 $159 = (_i64Add(($84|0),($85|0),16777216,0)|0);
 $160 = (getTempRet0() | 0);
 $161 = (_bitshift64Lshr(($159|0),($160|0),25)|0);
 $162 = (getTempRet0() | 0);
 $163 = (_i64Add(($96|0),($97|0),($161|0),($162|0))|0);
 $164 = (getTempRet0() | 0);
 $165 = $159 & -33554432;
 $166 = (_i64Add(($108|0),($109|0),16777216,0)|0);
 $167 = (getTempRet0() | 0);
 $168 = (_bitshift64Lshr(($166|0),($167|0),25)|0);
 $169 = (getTempRet0() | 0);
 $170 = (_i64Add(($120|0),($121|0),($168|0),($169|0))|0);
 $171 = (getTempRet0() | 0);
 $172 = $166 & -33554432;
 $173 = (_i64Add(($140|0),($141|0),33554432,0)|0);
 $174 = (getTempRet0() | 0);
 $175 = (_bitshift64Lshr(($173|0),($174|0),26)|0);
 $176 = (getTempRet0() | 0);
 $177 = (_i64Add(($150|0),($151|0),($175|0),($176|0))|0);
 $178 = (getTempRet0() | 0);
 $179 = $173 & -67108864;
 $180 = (_i64Subtract(($140|0),($141|0),($179|0),0)|0);
 $181 = (getTempRet0() | 0);
 $182 = (_i64Add(($147|0),($148|0),33554432,0)|0);
 $183 = (getTempRet0() | 0);
 $184 = (_bitshift64Lshr(($182|0),($183|0),26)|0);
 $185 = (getTempRet0() | 0);
 $186 = (_i64Add(($184|0),($185|0),($53|0),($54|0))|0);
 $187 = (getTempRet0() | 0);
 $188 = (_i64Subtract(($186|0),($187|0),($158|0),0)|0);
 $189 = (getTempRet0() | 0);
 $190 = $182 & -67108864;
 $191 = (_i64Subtract(($147|0),($148|0),($190|0),0)|0);
 $192 = (getTempRet0() | 0);
 $193 = (_i64Add(($156|0),($157|0),33554432,0)|0);
 $194 = (getTempRet0() | 0);
 $195 = (_bitshift64Lshr(($193|0),($194|0),26)|0);
 $196 = (getTempRet0() | 0);
 $197 = (_i64Add(($195|0),($196|0),($84|0),($85|0))|0);
 $198 = (getTempRet0() | 0);
 $199 = (_i64Subtract(($197|0),($198|0),($165|0),0)|0);
 $200 = (getTempRet0() | 0);
 $201 = $193 & -67108864;
 $202 = (_i64Subtract(($156|0),($157|0),($201|0),0)|0);
 $203 = (getTempRet0() | 0);
 $204 = (_i64Add(($163|0),($164|0),33554432,0)|0);
 $205 = (getTempRet0() | 0);
 $206 = (_bitshift64Lshr(($204|0),($205|0),26)|0);
 $207 = (getTempRet0() | 0);
 $208 = (_i64Add(($206|0),($207|0),($108|0),($109|0))|0);
 $209 = (getTempRet0() | 0);
 $210 = (_i64Subtract(($208|0),($209|0),($172|0),0)|0);
 $211 = (getTempRet0() | 0);
 $212 = $204 & -67108864;
 $213 = (_i64Subtract(($163|0),($164|0),($212|0),0)|0);
 $214 = (getTempRet0() | 0);
 $215 = (_i64Add(($170|0),($171|0),33554432,0)|0);
 $216 = (getTempRet0() | 0);
 $217 = (_bitshift64Lshr(($215|0),($216|0),26)|0);
 $218 = (getTempRet0() | 0);
 $219 = (_i64Add(($217|0),($218|0),($132|0),($133|0))|0);
 $220 = (getTempRet0() | 0);
 $221 = (_i64Subtract(($219|0),($220|0),($142|0),0)|0);
 $222 = (getTempRet0() | 0);
 $223 = $215 & -67108864;
 $224 = (_i64Subtract(($170|0),($171|0),($223|0),0)|0);
 $225 = (getTempRet0() | 0);
 HEAP32[$u>>2] = $180;
 $arrayidx73 = ((($u)) + 4|0);
 HEAP32[$arrayidx73>>2] = $177;
 $arrayidx75 = ((($u)) + 8|0);
 HEAP32[$arrayidx75>>2] = $191;
 $arrayidx77 = ((($u)) + 12|0);
 HEAP32[$arrayidx77>>2] = $188;
 $arrayidx79 = ((($u)) + 16|0);
 HEAP32[$arrayidx79>>2] = $202;
 $arrayidx81 = ((($u)) + 20|0);
 HEAP32[$arrayidx81>>2] = $199;
 $arrayidx83 = ((($u)) + 24|0);
 HEAP32[$arrayidx83>>2] = $213;
 $arrayidx85 = ((($u)) + 28|0);
 HEAP32[$arrayidx85>>2] = $210;
 $arrayidx87 = ((($u)) + 32|0);
 HEAP32[$arrayidx87>>2] = $224;
 $arrayidx89 = ((($u)) + 36|0);
 HEAP32[$arrayidx89>>2] = $221;
 _fe_sq2($v,$u);
 $arrayidx1$i257 = ((($w)) + 4|0);
 $226 = HEAP32[$v>>2]|0;
 $arrayidx1$i325 = ((($v)) + 4|0);
 $227 = HEAP32[$arrayidx1$i325>>2]|0;
 $arrayidx2$i326 = ((($v)) + 8|0);
 $228 = HEAP32[$arrayidx2$i326>>2]|0;
 $arrayidx3$i327 = ((($v)) + 12|0);
 $229 = HEAP32[$arrayidx3$i327>>2]|0;
 $arrayidx4$i328 = ((($v)) + 16|0);
 $230 = HEAP32[$arrayidx4$i328>>2]|0;
 $arrayidx5$i329 = ((($v)) + 20|0);
 $231 = HEAP32[$arrayidx5$i329>>2]|0;
 $arrayidx6$i330 = ((($v)) + 24|0);
 $232 = HEAP32[$arrayidx6$i330>>2]|0;
 $arrayidx7$i331 = ((($v)) + 28|0);
 $233 = HEAP32[$arrayidx7$i331>>2]|0;
 $arrayidx8$i332 = ((($v)) + 32|0);
 $234 = HEAP32[$arrayidx8$i332>>2]|0;
 $arrayidx9$i333 = ((($v)) + 36|0);
 $235 = HEAP32[$arrayidx9$i333>>2]|0;
 $arrayidx12$i335 = ((($w)) + 8|0);
 $arrayidx13$i336 = ((($w)) + 12|0);
 $arrayidx14$i337 = ((($w)) + 16|0);
 $arrayidx15$i338 = ((($w)) + 20|0);
 $arrayidx16$i339 = ((($w)) + 24|0);
 $arrayidx17$i340 = ((($w)) + 28|0);
 $arrayidx18$i341 = ((($w)) + 32|0);
 $arrayidx19$i342 = ((($w)) + 36|0);
 $add$i343 = (($226) + 1)|0;
 HEAP32[$w>>2] = $add$i343;
 HEAP32[$arrayidx1$i257>>2] = $227;
 HEAP32[$arrayidx12$i335>>2] = $228;
 HEAP32[$arrayidx13$i336>>2] = $229;
 HEAP32[$arrayidx14$i337>>2] = $230;
 HEAP32[$arrayidx15$i338>>2] = $231;
 HEAP32[$arrayidx16$i339>>2] = $232;
 HEAP32[$arrayidx17$i340>>2] = $233;
 HEAP32[$arrayidx18$i341>>2] = $234;
 HEAP32[$arrayidx19$i342>>2] = $235;
 _fe_sq($x,$w);
 _fe_mul($y,32000,$v);
 $236 = HEAP32[$x>>2]|0;
 $arrayidx1$i466 = ((($x)) + 4|0);
 $237 = HEAP32[$arrayidx1$i466>>2]|0;
 $arrayidx2$i467 = ((($x)) + 8|0);
 $238 = HEAP32[$arrayidx2$i467>>2]|0;
 $arrayidx3$i468 = ((($x)) + 12|0);
 $239 = HEAP32[$arrayidx3$i468>>2]|0;
 $arrayidx4$i469 = ((($x)) + 16|0);
 $240 = HEAP32[$arrayidx4$i469>>2]|0;
 $arrayidx5$i470 = ((($x)) + 20|0);
 $241 = HEAP32[$arrayidx5$i470>>2]|0;
 $arrayidx6$i471 = ((($x)) + 24|0);
 $242 = HEAP32[$arrayidx6$i471>>2]|0;
 $arrayidx7$i472 = ((($x)) + 28|0);
 $243 = HEAP32[$arrayidx7$i472>>2]|0;
 $arrayidx8$i473 = ((($x)) + 32|0);
 $244 = HEAP32[$arrayidx8$i473>>2]|0;
 $arrayidx9$i474 = ((($x)) + 36|0);
 $245 = HEAP32[$arrayidx9$i474>>2]|0;
 $246 = HEAP32[$y>>2]|0;
 $arrayidx11$i475 = ((($y)) + 4|0);
 $247 = HEAP32[$arrayidx11$i475>>2]|0;
 $arrayidx12$i476 = ((($y)) + 8|0);
 $248 = HEAP32[$arrayidx12$i476>>2]|0;
 $arrayidx13$i477 = ((($y)) + 12|0);
 $249 = HEAP32[$arrayidx13$i477>>2]|0;
 $arrayidx14$i478 = ((($y)) + 16|0);
 $250 = HEAP32[$arrayidx14$i478>>2]|0;
 $arrayidx15$i479 = ((($y)) + 20|0);
 $251 = HEAP32[$arrayidx15$i479>>2]|0;
 $arrayidx16$i480 = ((($y)) + 24|0);
 $252 = HEAP32[$arrayidx16$i480>>2]|0;
 $arrayidx17$i481 = ((($y)) + 28|0);
 $253 = HEAP32[$arrayidx17$i481>>2]|0;
 $arrayidx18$i482 = ((($y)) + 32|0);
 $254 = HEAP32[$arrayidx18$i482>>2]|0;
 $arrayidx19$i483 = ((($y)) + 36|0);
 $255 = HEAP32[$arrayidx19$i483>>2]|0;
 $add$i484 = (($246) + ($236))|0;
 $add20$i485 = (($247) + ($237))|0;
 $add21$i486 = (($248) + ($238))|0;
 $add22$i487 = (($249) + ($239))|0;
 $add23$i488 = (($250) + ($240))|0;
 $add24$i489 = (($251) + ($241))|0;
 $add25$i490 = (($252) + ($242))|0;
 $add26$i491 = (($253) + ($243))|0;
 $add27$i492 = (($254) + ($244))|0;
 $add28$i493 = (($255) + ($245))|0;
 HEAP32[$x>>2] = $add$i484;
 HEAP32[$arrayidx1$i466>>2] = $add20$i485;
 HEAP32[$arrayidx2$i467>>2] = $add21$i486;
 HEAP32[$arrayidx3$i468>>2] = $add22$i487;
 HEAP32[$arrayidx4$i469>>2] = $add23$i488;
 HEAP32[$arrayidx5$i470>>2] = $add24$i489;
 HEAP32[$arrayidx6$i471>>2] = $add25$i490;
 HEAP32[$arrayidx7$i472>>2] = $add26$i491;
 HEAP32[$arrayidx8$i473>>2] = $add27$i492;
 HEAP32[$arrayidx9$i474>>2] = $add28$i493;
 _fe_divpowm1($r,$w,$x);
 _fe_sq($y,$r);
 _fe_mul($x,$y,$x);
 $256 = HEAP32[$x>>2]|0;
 $257 = HEAP32[$arrayidx1$i466>>2]|0;
 $258 = HEAP32[$arrayidx2$i467>>2]|0;
 $259 = HEAP32[$arrayidx3$i468>>2]|0;
 $260 = HEAP32[$arrayidx4$i469>>2]|0;
 $261 = HEAP32[$arrayidx5$i470>>2]|0;
 $262 = HEAP32[$arrayidx6$i471>>2]|0;
 $263 = HEAP32[$arrayidx7$i472>>2]|0;
 $264 = HEAP32[$arrayidx8$i473>>2]|0;
 $265 = HEAP32[$arrayidx9$i474>>2]|0;
 $sub$i530 = (($add$i343) - ($256))|0;
 $sub20$i531 = (($227) - ($257))|0;
 $sub21$i532 = (($228) - ($258))|0;
 $sub22$i533 = (($229) - ($259))|0;
 $sub23$i534 = (($230) - ($260))|0;
 $sub24$i535 = (($231) - ($261))|0;
 $sub25$i536 = (($232) - ($262))|0;
 $sub26$i537 = (($233) - ($263))|0;
 $sub27$i538 = (($234) - ($264))|0;
 $sub28$i539 = (($235) - ($265))|0;
 HEAP32[$y>>2] = $sub$i530;
 HEAP32[$arrayidx11$i475>>2] = $sub20$i531;
 HEAP32[$arrayidx12$i476>>2] = $sub21$i532;
 HEAP32[$arrayidx13$i477>>2] = $sub22$i533;
 HEAP32[$arrayidx14$i478>>2] = $sub23$i534;
 HEAP32[$arrayidx15$i479>>2] = $sub24$i535;
 HEAP32[$arrayidx16$i480>>2] = $sub25$i536;
 HEAP32[$arrayidx17$i481>>2] = $sub26$i537;
 HEAP32[$arrayidx18$i482>>2] = $sub27$i538;
 HEAP32[$arrayidx19$i483>>2] = $sub28$i539;
 $266 = HEAP32[8012]|0;
 $267 = HEAP32[(32052)>>2]|0;
 $268 = HEAP32[(32056)>>2]|0;
 $269 = HEAP32[(32060)>>2]|0;
 $270 = HEAP32[(32064)>>2]|0;
 $271 = HEAP32[(32068)>>2]|0;
 $272 = HEAP32[(32072)>>2]|0;
 $273 = HEAP32[(32076)>>2]|0;
 $274 = HEAP32[(32080)>>2]|0;
 $275 = HEAP32[(32084)>>2]|0;
 HEAP32[$z>>2] = $266;
 $arrayidx11$i503 = ((($z)) + 4|0);
 HEAP32[$arrayidx11$i503>>2] = $267;
 $arrayidx12$i504 = ((($z)) + 8|0);
 HEAP32[$arrayidx12$i504>>2] = $268;
 $arrayidx13$i505 = ((($z)) + 12|0);
 HEAP32[$arrayidx13$i505>>2] = $269;
 $arrayidx14$i506 = ((($z)) + 16|0);
 HEAP32[$arrayidx14$i506>>2] = $270;
 $arrayidx15$i507 = ((($z)) + 20|0);
 HEAP32[$arrayidx15$i507>>2] = $271;
 $arrayidx16$i508 = ((($z)) + 24|0);
 HEAP32[$arrayidx16$i508>>2] = $272;
 $arrayidx17$i509 = ((($z)) + 28|0);
 HEAP32[$arrayidx17$i509>>2] = $273;
 $arrayidx18$i510 = ((($z)) + 32|0);
 HEAP32[$arrayidx18$i510>>2] = $274;
 $arrayidx19$i511 = ((($z)) + 36|0);
 HEAP32[$arrayidx19$i511>>2] = $275;
 _fe_tobytes($s$i,$y);
 $276 = HEAP8[$s$i>>0]|0;
 $arrayidx1$i400 = ((($s$i)) + 1|0);
 $277 = HEAP8[$arrayidx1$i400>>0]|0;
 $or1$i401 = $277 | $276;
 $arrayidx3$i402 = ((($s$i)) + 2|0);
 $278 = HEAP8[$arrayidx3$i402>>0]|0;
 $or52$i403 = $or1$i401 | $278;
 $arrayidx6$i404 = ((($s$i)) + 3|0);
 $279 = HEAP8[$arrayidx6$i404>>0]|0;
 $or84$i405 = $or52$i403 | $279;
 $arrayidx9$i406 = ((($s$i)) + 4|0);
 $280 = HEAP8[$arrayidx9$i406>>0]|0;
 $or115$i407 = $or84$i405 | $280;
 $arrayidx12$i408 = ((($s$i)) + 5|0);
 $281 = HEAP8[$arrayidx12$i408>>0]|0;
 $or146$i409 = $or115$i407 | $281;
 $arrayidx15$i410 = ((($s$i)) + 6|0);
 $282 = HEAP8[$arrayidx15$i410>>0]|0;
 $or177$i411 = $or146$i409 | $282;
 $arrayidx18$i412 = ((($s$i)) + 7|0);
 $283 = HEAP8[$arrayidx18$i412>>0]|0;
 $or208$i413 = $or177$i411 | $283;
 $arrayidx21$i414 = ((($s$i)) + 8|0);
 $284 = HEAP8[$arrayidx21$i414>>0]|0;
 $or239$i415 = $or208$i413 | $284;
 $arrayidx24$i416 = ((($s$i)) + 9|0);
 $285 = HEAP8[$arrayidx24$i416>>0]|0;
 $or2610$i417 = $or239$i415 | $285;
 $arrayidx27$i418 = ((($s$i)) + 10|0);
 $286 = HEAP8[$arrayidx27$i418>>0]|0;
 $or2911$i419 = $or2610$i417 | $286;
 $arrayidx30$i420 = ((($s$i)) + 11|0);
 $287 = HEAP8[$arrayidx30$i420>>0]|0;
 $or3212$i421 = $or2911$i419 | $287;
 $arrayidx33$i422 = ((($s$i)) + 12|0);
 $288 = HEAP8[$arrayidx33$i422>>0]|0;
 $or3513$i423 = $or3212$i421 | $288;
 $arrayidx36$i424 = ((($s$i)) + 13|0);
 $289 = HEAP8[$arrayidx36$i424>>0]|0;
 $or3814$i425 = $or3513$i423 | $289;
 $arrayidx39$i426 = ((($s$i)) + 14|0);
 $290 = HEAP8[$arrayidx39$i426>>0]|0;
 $or4115$i427 = $or3814$i425 | $290;
 $arrayidx42$i428 = ((($s$i)) + 15|0);
 $291 = HEAP8[$arrayidx42$i428>>0]|0;
 $or4416$i429 = $or4115$i427 | $291;
 $arrayidx45$i430 = ((($s$i)) + 16|0);
 $292 = HEAP8[$arrayidx45$i430>>0]|0;
 $or4717$i431 = $or4416$i429 | $292;
 $arrayidx48$i432 = ((($s$i)) + 17|0);
 $293 = HEAP8[$arrayidx48$i432>>0]|0;
 $or5018$i433 = $or4717$i431 | $293;
 $arrayidx51$i434 = ((($s$i)) + 18|0);
 $294 = HEAP8[$arrayidx51$i434>>0]|0;
 $or5319$i435 = $or5018$i433 | $294;
 $arrayidx54$i436 = ((($s$i)) + 19|0);
 $295 = HEAP8[$arrayidx54$i436>>0]|0;
 $or5620$i437 = $or5319$i435 | $295;
 $arrayidx57$i438 = ((($s$i)) + 20|0);
 $296 = HEAP8[$arrayidx57$i438>>0]|0;
 $or5921$i439 = $or5620$i437 | $296;
 $arrayidx60$i440 = ((($s$i)) + 21|0);
 $297 = HEAP8[$arrayidx60$i440>>0]|0;
 $or6222$i441 = $or5921$i439 | $297;
 $arrayidx63$i442 = ((($s$i)) + 22|0);
 $298 = HEAP8[$arrayidx63$i442>>0]|0;
 $or6523$i443 = $or6222$i441 | $298;
 $arrayidx66$i444 = ((($s$i)) + 23|0);
 $299 = HEAP8[$arrayidx66$i444>>0]|0;
 $or6824$i445 = $or6523$i443 | $299;
 $arrayidx69$i446 = ((($s$i)) + 24|0);
 $300 = HEAP8[$arrayidx69$i446>>0]|0;
 $or7125$i447 = $or6824$i445 | $300;
 $arrayidx72$i448 = ((($s$i)) + 25|0);
 $301 = HEAP8[$arrayidx72$i448>>0]|0;
 $or7426$i449 = $or7125$i447 | $301;
 $arrayidx75$i450 = ((($s$i)) + 26|0);
 $302 = HEAP8[$arrayidx75$i450>>0]|0;
 $or7727$i451 = $or7426$i449 | $302;
 $arrayidx78$i452 = ((($s$i)) + 27|0);
 $303 = HEAP8[$arrayidx78$i452>>0]|0;
 $or8028$i453 = $or7727$i451 | $303;
 $arrayidx81$i454 = ((($s$i)) + 28|0);
 $304 = HEAP8[$arrayidx81$i454>>0]|0;
 $or8329$i455 = $or8028$i453 | $304;
 $arrayidx84$i456 = ((($s$i)) + 29|0);
 $305 = HEAP8[$arrayidx84$i456>>0]|0;
 $or8630$i457 = $or8329$i455 | $305;
 $arrayidx87$i458 = ((($s$i)) + 30|0);
 $306 = HEAP8[$arrayidx87$i458>>0]|0;
 $or8931$i459 = $or8630$i457 | $306;
 $arrayidx90$i460 = ((($s$i)) + 31|0);
 $307 = HEAP8[$arrayidx90$i460>>0]|0;
 $or9232$i461 = $or8931$i459 | $307;
 $or92$i462 = $or9232$i461&255;
 $sub$i463 = (($or92$i462) + -1)|0;
 $tobool = ($sub$i463>>>0)>(4294967039);
 do {
  if ($tobool) {
   _fe_mul($r,$r,32144);
   label = 5;
  } else {
   $308 = HEAP32[$w>>2]|0;
   $309 = HEAP32[$arrayidx1$i257>>2]|0;
   $310 = HEAP32[$arrayidx12$i335>>2]|0;
   $311 = HEAP32[$arrayidx13$i336>>2]|0;
   $312 = HEAP32[$arrayidx14$i337>>2]|0;
   $313 = HEAP32[$arrayidx15$i338>>2]|0;
   $314 = HEAP32[$arrayidx16$i339>>2]|0;
   $315 = HEAP32[$arrayidx17$i340>>2]|0;
   $316 = HEAP32[$arrayidx18$i341>>2]|0;
   $317 = HEAP32[$arrayidx19$i342>>2]|0;
   $318 = HEAP32[$x>>2]|0;
   $319 = HEAP32[$arrayidx1$i466>>2]|0;
   $320 = HEAP32[$arrayidx2$i467>>2]|0;
   $321 = HEAP32[$arrayidx3$i468>>2]|0;
   $322 = HEAP32[$arrayidx4$i469>>2]|0;
   $323 = HEAP32[$arrayidx5$i470>>2]|0;
   $324 = HEAP32[$arrayidx6$i471>>2]|0;
   $325 = HEAP32[$arrayidx7$i472>>2]|0;
   $326 = HEAP32[$arrayidx8$i473>>2]|0;
   $327 = HEAP32[$arrayidx9$i474>>2]|0;
   $add$i380 = (($318) + ($308))|0;
   $add20$i381 = (($319) + ($309))|0;
   $add21$i382 = (($320) + ($310))|0;
   $add22$i383 = (($321) + ($311))|0;
   $add23$i384 = (($322) + ($312))|0;
   $add24$i385 = (($323) + ($313))|0;
   $add25$i386 = (($324) + ($314))|0;
   $add26$i387 = (($325) + ($315))|0;
   $add27$i388 = (($326) + ($316))|0;
   $add28$i389 = (($327) + ($317))|0;
   HEAP32[$y>>2] = $add$i380;
   HEAP32[$arrayidx11$i475>>2] = $add20$i381;
   HEAP32[$arrayidx12$i476>>2] = $add21$i382;
   HEAP32[$arrayidx13$i477>>2] = $add22$i383;
   HEAP32[$arrayidx14$i478>>2] = $add23$i384;
   HEAP32[$arrayidx15$i479>>2] = $add24$i385;
   HEAP32[$arrayidx16$i480>>2] = $add25$i386;
   HEAP32[$arrayidx17$i481>>2] = $add26$i387;
   HEAP32[$arrayidx18$i482>>2] = $add27$i388;
   HEAP32[$arrayidx19$i483>>2] = $add28$i389;
   _fe_tobytes($s$i,$y);
   $328 = HEAP8[$s$i>>0]|0;
   $329 = HEAP8[$arrayidx1$i400>>0]|0;
   $or1$i260 = $329 | $328;
   $330 = HEAP8[$arrayidx3$i402>>0]|0;
   $or52$i262 = $or1$i260 | $330;
   $331 = HEAP8[$arrayidx6$i404>>0]|0;
   $or84$i264 = $or52$i262 | $331;
   $332 = HEAP8[$arrayidx9$i406>>0]|0;
   $or115$i266 = $or84$i264 | $332;
   $333 = HEAP8[$arrayidx12$i408>>0]|0;
   $or146$i268 = $or115$i266 | $333;
   $334 = HEAP8[$arrayidx15$i410>>0]|0;
   $or177$i270 = $or146$i268 | $334;
   $335 = HEAP8[$arrayidx18$i412>>0]|0;
   $or208$i272 = $or177$i270 | $335;
   $336 = HEAP8[$arrayidx21$i414>>0]|0;
   $or239$i274 = $or208$i272 | $336;
   $337 = HEAP8[$arrayidx24$i416>>0]|0;
   $or2610$i276 = $or239$i274 | $337;
   $338 = HEAP8[$arrayidx27$i418>>0]|0;
   $or2911$i278 = $or2610$i276 | $338;
   $339 = HEAP8[$arrayidx30$i420>>0]|0;
   $or3212$i280 = $or2911$i278 | $339;
   $340 = HEAP8[$arrayidx33$i422>>0]|0;
   $or3513$i282 = $or3212$i280 | $340;
   $341 = HEAP8[$arrayidx36$i424>>0]|0;
   $or3814$i284 = $or3513$i282 | $341;
   $342 = HEAP8[$arrayidx39$i426>>0]|0;
   $or4115$i286 = $or3814$i284 | $342;
   $343 = HEAP8[$arrayidx42$i428>>0]|0;
   $or4416$i288 = $or4115$i286 | $343;
   $344 = HEAP8[$arrayidx45$i430>>0]|0;
   $or4717$i290 = $or4416$i288 | $344;
   $345 = HEAP8[$arrayidx48$i432>>0]|0;
   $or5018$i292 = $or4717$i290 | $345;
   $346 = HEAP8[$arrayidx51$i434>>0]|0;
   $or5319$i294 = $or5018$i292 | $346;
   $347 = HEAP8[$arrayidx54$i436>>0]|0;
   $or5620$i296 = $or5319$i294 | $347;
   $348 = HEAP8[$arrayidx57$i438>>0]|0;
   $or5921$i298 = $or5620$i296 | $348;
   $349 = HEAP8[$arrayidx60$i440>>0]|0;
   $or6222$i300 = $or5921$i298 | $349;
   $350 = HEAP8[$arrayidx63$i442>>0]|0;
   $or6523$i302 = $or6222$i300 | $350;
   $351 = HEAP8[$arrayidx66$i444>>0]|0;
   $or6824$i304 = $or6523$i302 | $351;
   $352 = HEAP8[$arrayidx69$i446>>0]|0;
   $or7125$i306 = $or6824$i304 | $352;
   $353 = HEAP8[$arrayidx72$i448>>0]|0;
   $or7426$i308 = $or7125$i306 | $353;
   $354 = HEAP8[$arrayidx75$i450>>0]|0;
   $or7727$i310 = $or7426$i308 | $354;
   $355 = HEAP8[$arrayidx78$i452>>0]|0;
   $or8028$i312 = $or7727$i310 | $355;
   $356 = HEAP8[$arrayidx81$i454>>0]|0;
   $or8329$i314 = $or8028$i312 | $356;
   $357 = HEAP8[$arrayidx84$i456>>0]|0;
   $or8630$i316 = $or8329$i314 | $357;
   $358 = HEAP8[$arrayidx87$i458>>0]|0;
   $or8931$i318 = $or8630$i316 | $358;
   $359 = HEAP8[$arrayidx90$i460>>0]|0;
   $or9232$i320 = $or8931$i318 | $359;
   $or92$i321 = $or9232$i320&255;
   $sub$i322 = (($or92$i321) + -1)|0;
   $tobool122 = ($sub$i322>>>0)>(4294967039);
   if ($tobool122) {
    _fe_mul($r,$r,32096);
    label = 5;
    break;
   }
   _fe_mul($x,$x,224);
   $360 = HEAP32[$w>>2]|0;
   $361 = HEAP32[$arrayidx1$i257>>2]|0;
   $362 = HEAP32[$arrayidx12$i335>>2]|0;
   $363 = HEAP32[$arrayidx13$i336>>2]|0;
   $364 = HEAP32[$arrayidx14$i337>>2]|0;
   $365 = HEAP32[$arrayidx15$i338>>2]|0;
   $366 = HEAP32[$arrayidx16$i339>>2]|0;
   $367 = HEAP32[$arrayidx17$i340>>2]|0;
   $368 = HEAP32[$arrayidx18$i341>>2]|0;
   $369 = HEAP32[$arrayidx19$i342>>2]|0;
   $370 = HEAP32[$x>>2]|0;
   $371 = HEAP32[$arrayidx1$i466>>2]|0;
   $372 = HEAP32[$arrayidx2$i467>>2]|0;
   $373 = HEAP32[$arrayidx3$i468>>2]|0;
   $374 = HEAP32[$arrayidx4$i469>>2]|0;
   $375 = HEAP32[$arrayidx5$i470>>2]|0;
   $376 = HEAP32[$arrayidx6$i471>>2]|0;
   $377 = HEAP32[$arrayidx7$i472>>2]|0;
   $378 = HEAP32[$arrayidx8$i473>>2]|0;
   $379 = HEAP32[$arrayidx9$i474>>2]|0;
   $sub$i210 = (($360) - ($370))|0;
   $sub20$i211 = (($361) - ($371))|0;
   $sub21$i212 = (($362) - ($372))|0;
   $sub22$i213 = (($363) - ($373))|0;
   $sub23$i214 = (($364) - ($374))|0;
   $sub24$i215 = (($365) - ($375))|0;
   $sub25$i216 = (($366) - ($376))|0;
   $sub26$i217 = (($367) - ($377))|0;
   $sub27$i218 = (($368) - ($378))|0;
   $sub28$i219 = (($369) - ($379))|0;
   HEAP32[$y>>2] = $sub$i210;
   HEAP32[$arrayidx11$i475>>2] = $sub20$i211;
   HEAP32[$arrayidx12$i476>>2] = $sub21$i212;
   HEAP32[$arrayidx13$i477>>2] = $sub22$i213;
   HEAP32[$arrayidx14$i478>>2] = $sub23$i214;
   HEAP32[$arrayidx15$i479>>2] = $sub24$i215;
   HEAP32[$arrayidx16$i480>>2] = $sub25$i216;
   HEAP32[$arrayidx17$i481>>2] = $sub26$i217;
   HEAP32[$arrayidx18$i482>>2] = $sub27$i218;
   HEAP32[$arrayidx19$i483>>2] = $sub28$i219;
   _fe_tobytes($s$i,$y);
   $380 = HEAP8[$s$i>>0]|0;
   $381 = HEAP8[$arrayidx1$i400>>0]|0;
   $or1$i = $381 | $380;
   $382 = HEAP8[$arrayidx3$i402>>0]|0;
   $or52$i = $or1$i | $382;
   $383 = HEAP8[$arrayidx6$i404>>0]|0;
   $or84$i = $or52$i | $383;
   $384 = HEAP8[$arrayidx9$i406>>0]|0;
   $or115$i = $or84$i | $384;
   $385 = HEAP8[$arrayidx12$i408>>0]|0;
   $or146$i = $or115$i | $385;
   $386 = HEAP8[$arrayidx15$i410>>0]|0;
   $or177$i = $or146$i | $386;
   $387 = HEAP8[$arrayidx18$i412>>0]|0;
   $or208$i = $or177$i | $387;
   $388 = HEAP8[$arrayidx21$i414>>0]|0;
   $or239$i = $or208$i | $388;
   $389 = HEAP8[$arrayidx24$i416>>0]|0;
   $or2610$i = $or239$i | $389;
   $390 = HEAP8[$arrayidx27$i418>>0]|0;
   $or2911$i = $or2610$i | $390;
   $391 = HEAP8[$arrayidx30$i420>>0]|0;
   $or3212$i = $or2911$i | $391;
   $392 = HEAP8[$arrayidx33$i422>>0]|0;
   $or3513$i = $or3212$i | $392;
   $393 = HEAP8[$arrayidx36$i424>>0]|0;
   $or3814$i = $or3513$i | $393;
   $394 = HEAP8[$arrayidx39$i426>>0]|0;
   $or4115$i = $or3814$i | $394;
   $395 = HEAP8[$arrayidx42$i428>>0]|0;
   $or4416$i = $or4115$i | $395;
   $396 = HEAP8[$arrayidx45$i430>>0]|0;
   $or4717$i = $or4416$i | $396;
   $397 = HEAP8[$arrayidx48$i432>>0]|0;
   $or5018$i = $or4717$i | $397;
   $398 = HEAP8[$arrayidx51$i434>>0]|0;
   $or5319$i = $or5018$i | $398;
   $399 = HEAP8[$arrayidx54$i436>>0]|0;
   $or5620$i = $or5319$i | $399;
   $400 = HEAP8[$arrayidx57$i438>>0]|0;
   $or5921$i = $or5620$i | $400;
   $401 = HEAP8[$arrayidx60$i440>>0]|0;
   $or6222$i = $or5921$i | $401;
   $402 = HEAP8[$arrayidx63$i442>>0]|0;
   $or6523$i = $or6222$i | $402;
   $403 = HEAP8[$arrayidx66$i444>>0]|0;
   $or6824$i = $or6523$i | $403;
   $404 = HEAP8[$arrayidx69$i446>>0]|0;
   $or7125$i = $or6824$i | $404;
   $405 = HEAP8[$arrayidx72$i448>>0]|0;
   $or7426$i = $or7125$i | $405;
   $406 = HEAP8[$arrayidx75$i450>>0]|0;
   $or7727$i = $or7426$i | $406;
   $407 = HEAP8[$arrayidx78$i452>>0]|0;
   $or8028$i = $or7727$i | $407;
   $408 = HEAP8[$arrayidx81$i454>>0]|0;
   $or8329$i = $or8028$i | $408;
   $409 = HEAP8[$arrayidx84$i456>>0]|0;
   $or8630$i = $or8329$i | $409;
   $410 = HEAP8[$arrayidx87$i458>>0]|0;
   $or8931$i = $or8630$i | $410;
   $411 = HEAP8[$arrayidx90$i460>>0]|0;
   $or9232$i = $or8931$i | $411;
   $or92$i = $or9232$i&255;
   $sub$i177 = (($or92$i) + -1)|0;
   $tobool149 = ($sub$i177>>>0)>(4294967039);
   if ($tobool149) {
    _fe_mul($r,$r,32240);
    $sign$0 = 1;
    break;
   } else {
    _fe_mul($r,$r,32192);
    $sign$0 = 1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  _fe_mul($r,$r,$u);
  _fe_mul($z,$z,$v);
  $sign$0 = 0;
 }
 _fe_tobytes($s$i,$r);
 $412 = HEAP8[$s$i>>0]|0;
 $413 = $412 & 1;
 $and$i = $413&255;
 $cmp = ($sign$0|0)==($and$i|0);
 if ($cmp) {
  $arraydecay172 = ((($r)) + 80|0);
  $424 = HEAP32[$z>>2]|0;
  $425 = HEAP32[$arrayidx11$i503>>2]|0;
  $426 = HEAP32[$arrayidx12$i504>>2]|0;
  $427 = HEAP32[$arrayidx13$i505>>2]|0;
  $428 = HEAP32[$arrayidx14$i506>>2]|0;
  $429 = HEAP32[$arrayidx15$i507>>2]|0;
  $430 = HEAP32[$arrayidx16$i508>>2]|0;
  $431 = HEAP32[$arrayidx17$i509>>2]|0;
  $432 = HEAP32[$arrayidx18$i510>>2]|0;
  $433 = HEAP32[$arrayidx19$i511>>2]|0;
  $434 = HEAP32[$w>>2]|0;
  $435 = HEAP32[$arrayidx1$i257>>2]|0;
  $436 = HEAP32[$arrayidx12$i335>>2]|0;
  $437 = HEAP32[$arrayidx13$i336>>2]|0;
  $438 = HEAP32[$arrayidx14$i337>>2]|0;
  $439 = HEAP32[$arrayidx15$i338>>2]|0;
  $440 = HEAP32[$arrayidx16$i339>>2]|0;
  $441 = HEAP32[$arrayidx17$i340>>2]|0;
  $442 = HEAP32[$arrayidx18$i341>>2]|0;
  $443 = HEAP32[$arrayidx19$i342>>2]|0;
  $add$i = (($434) + ($424))|0;
  $add20$i = (($435) + ($425))|0;
  $add21$i = (($436) + ($426))|0;
  $add22$i = (($437) + ($427))|0;
  $add23$i = (($438) + ($428))|0;
  $add24$i = (($439) + ($429))|0;
  $add25$i = (($440) + ($430))|0;
  $add26$i = (($441) + ($431))|0;
  $add27$i = (($442) + ($432))|0;
  $add28$i = (($443) + ($433))|0;
  HEAP32[$arraydecay172>>2] = $add$i;
  $arrayidx30$i123 = ((($r)) + 84|0);
  HEAP32[$arrayidx30$i123>>2] = $add20$i;
  $arrayidx31$i124 = ((($r)) + 88|0);
  HEAP32[$arrayidx31$i124>>2] = $add21$i;
  $arrayidx32$i125 = ((($r)) + 92|0);
  HEAP32[$arrayidx32$i125>>2] = $add22$i;
  $arrayidx33$i126 = ((($r)) + 96|0);
  HEAP32[$arrayidx33$i126>>2] = $add23$i;
  $arrayidx34$i127 = ((($r)) + 100|0);
  HEAP32[$arrayidx34$i127>>2] = $add24$i;
  $arrayidx35$i128 = ((($r)) + 104|0);
  HEAP32[$arrayidx35$i128>>2] = $add25$i;
  $arrayidx36$i129 = ((($r)) + 108|0);
  HEAP32[$arrayidx36$i129>>2] = $add26$i;
  $arrayidx37$i130 = ((($r)) + 112|0);
  HEAP32[$arrayidx37$i130>>2] = $add27$i;
  $arrayidx38$i131 = ((($r)) + 116|0);
  HEAP32[$arrayidx38$i131>>2] = $add28$i;
  $arraydecay175 = ((($r)) + 40|0);
  $sub$i = (($424) - ($434))|0;
  $sub20$i = (($425) - ($435))|0;
  $sub21$i = (($426) - ($436))|0;
  $sub22$i = (($427) - ($437))|0;
  $sub23$i = (($428) - ($438))|0;
  $sub24$i = (($429) - ($439))|0;
  $sub25$i = (($430) - ($440))|0;
  $sub26$i = (($431) - ($441))|0;
  $sub27$i = (($432) - ($442))|0;
  $sub28$i = (($433) - ($443))|0;
  HEAP32[$arraydecay175>>2] = $sub$i;
  $arrayidx30$i = ((($r)) + 44|0);
  HEAP32[$arrayidx30$i>>2] = $sub20$i;
  $arrayidx31$i = ((($r)) + 48|0);
  HEAP32[$arrayidx31$i>>2] = $sub21$i;
  $arrayidx32$i = ((($r)) + 52|0);
  HEAP32[$arrayidx32$i>>2] = $sub22$i;
  $arrayidx33$i = ((($r)) + 56|0);
  HEAP32[$arrayidx33$i>>2] = $sub23$i;
  $arrayidx34$i = ((($r)) + 60|0);
  HEAP32[$arrayidx34$i>>2] = $sub24$i;
  $arrayidx35$i = ((($r)) + 64|0);
  HEAP32[$arrayidx35$i>>2] = $sub25$i;
  $arrayidx36$i = ((($r)) + 68|0);
  HEAP32[$arrayidx36$i>>2] = $sub26$i;
  $arrayidx37$i = ((($r)) + 72|0);
  HEAP32[$arrayidx37$i>>2] = $sub27$i;
  $arrayidx38$i = ((($r)) + 76|0);
  HEAP32[$arrayidx38$i>>2] = $sub28$i;
  _fe_mul($r,$r,$arraydecay172);
  STACKTOP = sp;return;
 }
 $414 = HEAP32[$r>>2]|0;
 $arrayidx1$i132 = ((($r)) + 4|0);
 $415 = HEAP32[$arrayidx1$i132>>2]|0;
 $arrayidx2$i133 = ((($r)) + 8|0);
 $416 = HEAP32[$arrayidx2$i133>>2]|0;
 $arrayidx3$i134 = ((($r)) + 12|0);
 $417 = HEAP32[$arrayidx3$i134>>2]|0;
 $arrayidx4$i135 = ((($r)) + 16|0);
 $418 = HEAP32[$arrayidx4$i135>>2]|0;
 $arrayidx5$i136 = ((($r)) + 20|0);
 $419 = HEAP32[$arrayidx5$i136>>2]|0;
 $arrayidx6$i137 = ((($r)) + 24|0);
 $420 = HEAP32[$arrayidx6$i137>>2]|0;
 $arrayidx7$i138 = ((($r)) + 28|0);
 $421 = HEAP32[$arrayidx7$i138>>2]|0;
 $arrayidx8$i139 = ((($r)) + 32|0);
 $422 = HEAP32[$arrayidx8$i139>>2]|0;
 $arrayidx9$i140 = ((($r)) + 36|0);
 $423 = HEAP32[$arrayidx9$i140>>2]|0;
 $sub$i141 = (0 - ($414))|0;
 $sub10$i = (0 - ($415))|0;
 $sub11$i = (0 - ($416))|0;
 $sub12$i = (0 - ($417))|0;
 $sub13$i = (0 - ($418))|0;
 $sub14$i = (0 - ($419))|0;
 $sub15$i = (0 - ($420))|0;
 $sub16$i = (0 - ($421))|0;
 $sub17$i = (0 - ($422))|0;
 $sub18$i = (0 - ($423))|0;
 HEAP32[$r>>2] = $sub$i141;
 HEAP32[$arrayidx1$i132>>2] = $sub10$i;
 HEAP32[$arrayidx2$i133>>2] = $sub11$i;
 HEAP32[$arrayidx3$i134>>2] = $sub12$i;
 HEAP32[$arrayidx4$i135>>2] = $sub13$i;
 HEAP32[$arrayidx5$i136>>2] = $sub14$i;
 HEAP32[$arrayidx6$i137>>2] = $sub15$i;
 HEAP32[$arrayidx7$i138>>2] = $sub16$i;
 HEAP32[$arrayidx8$i139>>2] = $sub17$i;
 HEAP32[$arrayidx9$i140>>2] = $sub18$i;
 $arraydecay172 = ((($r)) + 80|0);
 $424 = HEAP32[$z>>2]|0;
 $425 = HEAP32[$arrayidx11$i503>>2]|0;
 $426 = HEAP32[$arrayidx12$i504>>2]|0;
 $427 = HEAP32[$arrayidx13$i505>>2]|0;
 $428 = HEAP32[$arrayidx14$i506>>2]|0;
 $429 = HEAP32[$arrayidx15$i507>>2]|0;
 $430 = HEAP32[$arrayidx16$i508>>2]|0;
 $431 = HEAP32[$arrayidx17$i509>>2]|0;
 $432 = HEAP32[$arrayidx18$i510>>2]|0;
 $433 = HEAP32[$arrayidx19$i511>>2]|0;
 $434 = HEAP32[$w>>2]|0;
 $435 = HEAP32[$arrayidx1$i257>>2]|0;
 $436 = HEAP32[$arrayidx12$i335>>2]|0;
 $437 = HEAP32[$arrayidx13$i336>>2]|0;
 $438 = HEAP32[$arrayidx14$i337>>2]|0;
 $439 = HEAP32[$arrayidx15$i338>>2]|0;
 $440 = HEAP32[$arrayidx16$i339>>2]|0;
 $441 = HEAP32[$arrayidx17$i340>>2]|0;
 $442 = HEAP32[$arrayidx18$i341>>2]|0;
 $443 = HEAP32[$arrayidx19$i342>>2]|0;
 $add$i = (($434) + ($424))|0;
 $add20$i = (($435) + ($425))|0;
 $add21$i = (($436) + ($426))|0;
 $add22$i = (($437) + ($427))|0;
 $add23$i = (($438) + ($428))|0;
 $add24$i = (($439) + ($429))|0;
 $add25$i = (($440) + ($430))|0;
 $add26$i = (($441) + ($431))|0;
 $add27$i = (($442) + ($432))|0;
 $add28$i = (($443) + ($433))|0;
 HEAP32[$arraydecay172>>2] = $add$i;
 $arrayidx30$i123 = ((($r)) + 84|0);
 HEAP32[$arrayidx30$i123>>2] = $add20$i;
 $arrayidx31$i124 = ((($r)) + 88|0);
 HEAP32[$arrayidx31$i124>>2] = $add21$i;
 $arrayidx32$i125 = ((($r)) + 92|0);
 HEAP32[$arrayidx32$i125>>2] = $add22$i;
 $arrayidx33$i126 = ((($r)) + 96|0);
 HEAP32[$arrayidx33$i126>>2] = $add23$i;
 $arrayidx34$i127 = ((($r)) + 100|0);
 HEAP32[$arrayidx34$i127>>2] = $add24$i;
 $arrayidx35$i128 = ((($r)) + 104|0);
 HEAP32[$arrayidx35$i128>>2] = $add25$i;
 $arrayidx36$i129 = ((($r)) + 108|0);
 HEAP32[$arrayidx36$i129>>2] = $add26$i;
 $arrayidx37$i130 = ((($r)) + 112|0);
 HEAP32[$arrayidx37$i130>>2] = $add27$i;
 $arrayidx38$i131 = ((($r)) + 116|0);
 HEAP32[$arrayidx38$i131>>2] = $add28$i;
 $arraydecay175 = ((($r)) + 40|0);
 $sub$i = (($424) - ($434))|0;
 $sub20$i = (($425) - ($435))|0;
 $sub21$i = (($426) - ($436))|0;
 $sub22$i = (($427) - ($437))|0;
 $sub23$i = (($428) - ($438))|0;
 $sub24$i = (($429) - ($439))|0;
 $sub25$i = (($430) - ($440))|0;
 $sub26$i = (($431) - ($441))|0;
 $sub27$i = (($432) - ($442))|0;
 $sub28$i = (($433) - ($443))|0;
 HEAP32[$arraydecay175>>2] = $sub$i;
 $arrayidx30$i = ((($r)) + 44|0);
 HEAP32[$arrayidx30$i>>2] = $sub20$i;
 $arrayidx31$i = ((($r)) + 48|0);
 HEAP32[$arrayidx31$i>>2] = $sub21$i;
 $arrayidx32$i = ((($r)) + 52|0);
 HEAP32[$arrayidx32$i>>2] = $sub22$i;
 $arrayidx33$i = ((($r)) + 56|0);
 HEAP32[$arrayidx33$i>>2] = $sub23$i;
 $arrayidx34$i = ((($r)) + 60|0);
 HEAP32[$arrayidx34$i>>2] = $sub24$i;
 $arrayidx35$i = ((($r)) + 64|0);
 HEAP32[$arrayidx35$i>>2] = $sub25$i;
 $arrayidx36$i = ((($r)) + 68|0);
 HEAP32[$arrayidx36$i>>2] = $sub26$i;
 $arrayidx37$i = ((($r)) + 72|0);
 HEAP32[$arrayidx37$i>>2] = $sub27$i;
 $arrayidx38$i = ((($r)) + 76|0);
 HEAP32[$arrayidx38$i>>2] = $sub28$i;
 _fe_mul($r,$r,$arraydecay172);
 STACKTOP = sp;return;
}
function _sc_0($s) {
 $s = $s|0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$s; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 return;
}
function _sc_reduce32($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx288 = 0, $add$ptr15$idx288$val = 0, $add$ptr23$idx = 0;
 var $add$ptr23$idx$val = 0, $add$ptr23$idx287 = 0, $add$ptr23$idx287$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx286 = 0, $add$ptr27$idx286$val = 0, $add$ptr27$val = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx289 = 0, $add$ptr3$idx289$val = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx285 = 0, $add$ptr34$idx285$val = 0, $arrayidx1$i = 0, $arrayidx1$i306 = 0, $arrayidx1$i333 = 0;
 var $arrayidx1$i353 = 0, $arrayidx1$i366 = 0, $arrayidx1$i386 = 0, $arrayidx3$i = 0, $arrayidx3$i310 = 0, $arrayidx3$i337 = 0, $arrayidx3$i357 = 0, $arrayidx3$i370 = 0, $arrayidx3$i390 = 0, $arrayidx7$i = 0, $arrayidx7$i314 = 0, $arrayidx7$i341 = 0, $arrayidx7$i361 = 0, $arrayidx7$i374 = 0, $arrayidx7$i394 = 0, $s$idx = 0, $s$idx$val = 0, $s$idx290 = 0, $s$idx290$val = 0, $s$val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $s$val = HEAP8[$s>>0]|0;
 $s$idx = ((($s)) + 1|0);
 $s$idx$val = HEAP8[$s$idx>>0]|0;
 $s$idx290 = ((($s)) + 2|0);
 $s$idx290$val = HEAP8[$s$idx290>>0]|0;
 $0 = $s$val&255;
 $1 = $s$idx$val&255;
 $2 = (_bitshift64Shl(($1|0),0,8)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2 | $0;
 $5 = $s$idx290$val&255;
 $6 = (_bitshift64Shl(($5|0),0,16)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2031616;
 $9 = $4 | $8;
 $arrayidx1$i386 = ((($s)) + 3|0);
 $10 = HEAP8[$arrayidx1$i386>>0]|0;
 $11 = $10&255;
 $12 = (_bitshift64Shl(($11|0),0,8)|0);
 $13 = (getTempRet0() | 0);
 $14 = $12 | $5;
 $arrayidx3$i390 = ((($s)) + 4|0);
 $15 = HEAP8[$arrayidx3$i390>>0]|0;
 $16 = $15&255;
 $17 = (_bitshift64Shl(($16|0),0,16)|0);
 $18 = (getTempRet0() | 0);
 $19 = $14 | $17;
 $20 = $13 | $18;
 $arrayidx7$i394 = ((($s)) + 5|0);
 $21 = HEAP8[$arrayidx7$i394>>0]|0;
 $22 = $21&255;
 $23 = (_bitshift64Shl(($22|0),0,24)|0);
 $24 = (getTempRet0() | 0);
 $25 = $19 | $23;
 $26 = $20 | $24;
 $27 = (_bitshift64Lshr(($25|0),($26|0),5)|0);
 $28 = (getTempRet0() | 0);
 $29 = $27 & 2097151;
 $add$ptr3$idx = ((($s)) + 6|0);
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx>>0]|0;
 $add$ptr3$idx289 = ((($s)) + 7|0);
 $add$ptr3$idx289$val = HEAP8[$add$ptr3$idx289>>0]|0;
 $30 = $add$ptr3$idx$val&255;
 $31 = (_bitshift64Shl(($30|0),0,8)|0);
 $32 = (getTempRet0() | 0);
 $33 = $31 | $22;
 $34 = $add$ptr3$idx289$val&255;
 $35 = (_bitshift64Shl(($34|0),0,16)|0);
 $36 = (getTempRet0() | 0);
 $37 = $33 | $35;
 $38 = $32 | $36;
 $39 = (_bitshift64Lshr(($37|0),($38|0),2)|0);
 $40 = (getTempRet0() | 0);
 $41 = $39 & 2097151;
 $arrayidx1$i366 = ((($s)) + 8|0);
 $42 = HEAP8[$arrayidx1$i366>>0]|0;
 $43 = $42&255;
 $44 = (_bitshift64Shl(($43|0),0,8)|0);
 $45 = (getTempRet0() | 0);
 $46 = $44 | $34;
 $arrayidx3$i370 = ((($s)) + 9|0);
 $47 = HEAP8[$arrayidx3$i370>>0]|0;
 $48 = $47&255;
 $49 = (_bitshift64Shl(($48|0),0,16)|0);
 $50 = (getTempRet0() | 0);
 $51 = $46 | $49;
 $52 = $45 | $50;
 $arrayidx7$i374 = ((($s)) + 10|0);
 $53 = HEAP8[$arrayidx7$i374>>0]|0;
 $54 = $53&255;
 $55 = (_bitshift64Shl(($54|0),0,24)|0);
 $56 = (getTempRet0() | 0);
 $57 = $51 | $55;
 $58 = $52 | $56;
 $59 = (_bitshift64Lshr(($57|0),($58|0),7)|0);
 $60 = (getTempRet0() | 0);
 $61 = $59 & 2097151;
 $arrayidx1$i353 = ((($s)) + 11|0);
 $62 = HEAP8[$arrayidx1$i353>>0]|0;
 $63 = $62&255;
 $64 = (_bitshift64Shl(($63|0),0,8)|0);
 $65 = (getTempRet0() | 0);
 $66 = $64 | $54;
 $arrayidx3$i357 = ((($s)) + 12|0);
 $67 = HEAP8[$arrayidx3$i357>>0]|0;
 $68 = $67&255;
 $69 = (_bitshift64Shl(($68|0),0,16)|0);
 $70 = (getTempRet0() | 0);
 $71 = $66 | $69;
 $72 = $65 | $70;
 $arrayidx7$i361 = ((($s)) + 13|0);
 $73 = HEAP8[$arrayidx7$i361>>0]|0;
 $74 = $73&255;
 $75 = (_bitshift64Shl(($74|0),0,24)|0);
 $76 = (getTempRet0() | 0);
 $77 = $71 | $75;
 $78 = $72 | $76;
 $79 = (_bitshift64Lshr(($77|0),($78|0),4)|0);
 $80 = (getTempRet0() | 0);
 $81 = $79 & 2097151;
 $add$ptr15$idx = ((($s)) + 14|0);
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx>>0]|0;
 $add$ptr15$idx288 = ((($s)) + 15|0);
 $add$ptr15$idx288$val = HEAP8[$add$ptr15$idx288>>0]|0;
 $82 = $add$ptr15$idx$val&255;
 $83 = (_bitshift64Shl(($82|0),0,8)|0);
 $84 = (getTempRet0() | 0);
 $85 = $83 | $74;
 $86 = $add$ptr15$idx288$val&255;
 $87 = (_bitshift64Shl(($86|0),0,16)|0);
 $88 = (getTempRet0() | 0);
 $89 = $85 | $87;
 $90 = $84 | $88;
 $91 = (_bitshift64Lshr(($89|0),($90|0),1)|0);
 $92 = (getTempRet0() | 0);
 $93 = $91 & 2097151;
 $arrayidx1$i333 = ((($s)) + 16|0);
 $94 = HEAP8[$arrayidx1$i333>>0]|0;
 $95 = $94&255;
 $96 = (_bitshift64Shl(($95|0),0,8)|0);
 $97 = (getTempRet0() | 0);
 $98 = $96 | $86;
 $arrayidx3$i337 = ((($s)) + 17|0);
 $99 = HEAP8[$arrayidx3$i337>>0]|0;
 $100 = $99&255;
 $101 = (_bitshift64Shl(($100|0),0,16)|0);
 $102 = (getTempRet0() | 0);
 $103 = $98 | $101;
 $104 = $97 | $102;
 $arrayidx7$i341 = ((($s)) + 18|0);
 $105 = HEAP8[$arrayidx7$i341>>0]|0;
 $106 = $105&255;
 $107 = (_bitshift64Shl(($106|0),0,24)|0);
 $108 = (getTempRet0() | 0);
 $109 = $103 | $107;
 $110 = $104 | $108;
 $111 = (_bitshift64Lshr(($109|0),($110|0),6)|0);
 $112 = (getTempRet0() | 0);
 $113 = $111 & 2097151;
 $add$ptr23$idx = ((($s)) + 19|0);
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx>>0]|0;
 $add$ptr23$idx287 = ((($s)) + 20|0);
 $add$ptr23$idx287$val = HEAP8[$add$ptr23$idx287>>0]|0;
 $114 = $add$ptr23$idx$val&255;
 $115 = (_bitshift64Shl(($114|0),0,8)|0);
 $116 = (getTempRet0() | 0);
 $117 = $115 | $106;
 $118 = $add$ptr23$idx287$val&255;
 $119 = (_bitshift64Shl(($118|0),0,16)|0);
 $120 = (getTempRet0() | 0);
 $121 = $117 | $119;
 $122 = $116 | $120;
 $123 = (_bitshift64Lshr(($121|0),($122|0),3)|0);
 $124 = (getTempRet0() | 0);
 $add$ptr27 = ((($s)) + 21|0);
 $add$ptr27$val = HEAP8[$add$ptr27>>0]|0;
 $add$ptr27$idx = ((($s)) + 22|0);
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx>>0]|0;
 $add$ptr27$idx286 = ((($s)) + 23|0);
 $add$ptr27$idx286$val = HEAP8[$add$ptr27$idx286>>0]|0;
 $125 = $add$ptr27$val&255;
 $126 = $add$ptr27$idx$val&255;
 $127 = (_bitshift64Shl(($126|0),0,8)|0);
 $128 = (getTempRet0() | 0);
 $129 = $127 | $125;
 $130 = $add$ptr27$idx286$val&255;
 $131 = (_bitshift64Shl(($130|0),0,16)|0);
 $132 = (getTempRet0() | 0);
 $133 = $131 & 2031616;
 $134 = $129 | $133;
 $arrayidx1$i306 = ((($s)) + 24|0);
 $135 = HEAP8[$arrayidx1$i306>>0]|0;
 $136 = $135&255;
 $137 = (_bitshift64Shl(($136|0),0,8)|0);
 $138 = (getTempRet0() | 0);
 $139 = $137 | $130;
 $arrayidx3$i310 = ((($s)) + 25|0);
 $140 = HEAP8[$arrayidx3$i310>>0]|0;
 $141 = $140&255;
 $142 = (_bitshift64Shl(($141|0),0,16)|0);
 $143 = (getTempRet0() | 0);
 $144 = $139 | $142;
 $145 = $138 | $143;
 $arrayidx7$i314 = ((($s)) + 26|0);
 $146 = HEAP8[$arrayidx7$i314>>0]|0;
 $147 = $146&255;
 $148 = (_bitshift64Shl(($147|0),0,24)|0);
 $149 = (getTempRet0() | 0);
 $150 = $144 | $148;
 $151 = $145 | $149;
 $152 = (_bitshift64Lshr(($150|0),($151|0),5)|0);
 $153 = (getTempRet0() | 0);
 $154 = $152 & 2097151;
 $add$ptr34$idx = ((($s)) + 27|0);
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx>>0]|0;
 $add$ptr34$idx285 = ((($s)) + 28|0);
 $add$ptr34$idx285$val = HEAP8[$add$ptr34$idx285>>0]|0;
 $155 = $add$ptr34$idx$val&255;
 $156 = (_bitshift64Shl(($155|0),0,8)|0);
 $157 = (getTempRet0() | 0);
 $158 = $156 | $147;
 $159 = $add$ptr34$idx285$val&255;
 $160 = (_bitshift64Shl(($159|0),0,16)|0);
 $161 = (getTempRet0() | 0);
 $162 = $158 | $160;
 $163 = $157 | $161;
 $164 = (_bitshift64Lshr(($162|0),($163|0),2)|0);
 $165 = (getTempRet0() | 0);
 $166 = $164 & 2097151;
 $arrayidx1$i = ((($s)) + 29|0);
 $167 = HEAP8[$arrayidx1$i>>0]|0;
 $168 = $167&255;
 $169 = (_bitshift64Shl(($168|0),0,8)|0);
 $170 = (getTempRet0() | 0);
 $171 = $169 | $159;
 $arrayidx3$i = ((($s)) + 30|0);
 $172 = HEAP8[$arrayidx3$i>>0]|0;
 $173 = $172&255;
 $174 = (_bitshift64Shl(($173|0),0,16)|0);
 $175 = (getTempRet0() | 0);
 $176 = $171 | $174;
 $177 = $170 | $175;
 $arrayidx7$i = ((($s)) + 31|0);
 $178 = HEAP8[$arrayidx7$i>>0]|0;
 $179 = $178&255;
 $180 = (_bitshift64Shl(($179|0),0,24)|0);
 $181 = (getTempRet0() | 0);
 $182 = $176 | $180;
 $183 = $177 | $181;
 $184 = (_bitshift64Lshr(($182|0),($183|0),7)|0);
 $185 = (getTempRet0() | 0);
 $186 = (_i64Add(($9|0),($3|0),1048576,0)|0);
 $187 = (getTempRet0() | 0);
 $188 = (_bitshift64Lshr(($186|0),($187|0),21)|0);
 $189 = (getTempRet0() | 0);
 $190 = (_i64Add(($29|0),0,($188|0),($189|0))|0);
 $191 = (getTempRet0() | 0);
 $192 = $186 & 2097152;
 $193 = (_i64Subtract(($9|0),($3|0),($192|0),0)|0);
 $194 = (getTempRet0() | 0);
 $195 = (_i64Add(($41|0),0,1048576,0)|0);
 $196 = (getTempRet0() | 0);
 $197 = (_bitshift64Lshr(($195|0),($196|0),21)|0);
 $198 = (getTempRet0() | 0);
 $199 = (_i64Add(($61|0),0,($197|0),($198|0))|0);
 $200 = (getTempRet0() | 0);
 $201 = $195 & 2097152;
 $202 = (_i64Add(($81|0),0,1048576,0)|0);
 $203 = (getTempRet0() | 0);
 $204 = (_bitshift64Lshr(($202|0),($203|0),21)|0);
 $205 = (getTempRet0() | 0);
 $206 = (_i64Add(($93|0),0,($204|0),($205|0))|0);
 $207 = (getTempRet0() | 0);
 $208 = $202 & 2097152;
 $209 = (_i64Add(($113|0),0,1048576,0)|0);
 $210 = (getTempRet0() | 0);
 $211 = (_bitshift64Lshr(($209|0),($210|0),21)|0);
 $212 = (getTempRet0() | 0);
 $213 = (_i64Add(($123|0),($124|0),($211|0),($212|0))|0);
 $214 = (getTempRet0() | 0);
 $215 = $209 & 2097152;
 $216 = (_i64Add(($134|0),($128|0),1048576,0)|0);
 $217 = (getTempRet0() | 0);
 $218 = (_bitshift64Lshr(($216|0),($217|0),21)|0);
 $219 = (getTempRet0() | 0);
 $220 = (_i64Add(($154|0),0,($218|0),($219|0))|0);
 $221 = (getTempRet0() | 0);
 $222 = $216 & 2097152;
 $223 = (_i64Add(($166|0),0,1048576,0)|0);
 $224 = (getTempRet0() | 0);
 $225 = (_bitshift64Lshr(($223|0),($224|0),21)|0);
 $226 = (getTempRet0() | 0);
 $227 = (_i64Add(($184|0),($185|0),($225|0),($226|0))|0);
 $228 = (getTempRet0() | 0);
 $229 = $223 & 2097152;
 $230 = (_i64Add(($190|0),($191|0),1048576,0)|0);
 $231 = (getTempRet0() | 0);
 $232 = (_bitshift64Lshr(($230|0),($231|0),21)|0);
 $233 = (getTempRet0() | 0);
 $234 = $230 & 6291456;
 $235 = (_i64Subtract(($190|0),($191|0),($234|0),0)|0);
 $236 = (getTempRet0() | 0);
 $237 = (_i64Add(($199|0),($200|0),1048576,0)|0);
 $238 = (getTempRet0() | 0);
 $239 = (_bitshift64Lshr(($237|0),($238|0),21)|0);
 $240 = (getTempRet0() | 0);
 $241 = $237 & 6291456;
 $242 = (_i64Subtract(($199|0),($200|0),($241|0),0)|0);
 $243 = (getTempRet0() | 0);
 $244 = (_i64Add(($206|0),($207|0),1048576,0)|0);
 $245 = (getTempRet0() | 0);
 $246 = (_bitshift64Lshr(($244|0),($245|0),21)|0);
 $247 = (getTempRet0() | 0);
 $248 = $244 & 6291456;
 $249 = (_i64Subtract(($206|0),($207|0),($248|0),0)|0);
 $250 = (getTempRet0() | 0);
 $251 = (_i64Add(($213|0),($214|0),1048576,0)|0);
 $252 = (getTempRet0() | 0);
 $253 = (_bitshift64Lshr(($251|0),($252|0),21)|0);
 $254 = (getTempRet0() | 0);
 $255 = $251 & 6291456;
 $256 = (_i64Subtract(($213|0),($214|0),($255|0),0)|0);
 $257 = (getTempRet0() | 0);
 $258 = (_i64Add(($220|0),($221|0),1048576,0)|0);
 $259 = (getTempRet0() | 0);
 $260 = (_bitshift64Lshr(($258|0),($259|0),21)|0);
 $261 = (getTempRet0() | 0);
 $262 = $258 & 6291456;
 $263 = (_i64Subtract(($220|0),($221|0),($262|0),0)|0);
 $264 = (getTempRet0() | 0);
 $265 = (_i64Add(($227|0),($228|0),1048576,0)|0);
 $266 = (getTempRet0() | 0);
 $267 = (_bitshift64Lshr(($265|0),($266|0),21)|0);
 $268 = (getTempRet0() | 0);
 $269 = $265 & -2097152;
 $270 = $266 & 134217727;
 $271 = (_i64Subtract(($227|0),($228|0),($269|0),($270|0))|0);
 $272 = (getTempRet0() | 0);
 $273 = (___muldi3(($267|0),($268|0),666643,0)|0);
 $274 = (getTempRet0() | 0);
 $275 = (_i64Add(($273|0),($274|0),($193|0),($194|0))|0);
 $276 = (getTempRet0() | 0);
 $277 = (___muldi3(($267|0),($268|0),470296,0)|0);
 $278 = (getTempRet0() | 0);
 $279 = (_i64Add(($235|0),($236|0),($277|0),($278|0))|0);
 $280 = (getTempRet0() | 0);
 $281 = (___muldi3(($267|0),($268|0),654183,0)|0);
 $282 = (getTempRet0() | 0);
 $283 = (___muldi3(($267|0),($268|0),-997805,-1)|0);
 $284 = (getTempRet0() | 0);
 $285 = (_i64Add(($242|0),($243|0),($283|0),($284|0))|0);
 $286 = (getTempRet0() | 0);
 $287 = (___muldi3(($267|0),($268|0),136657,0)|0);
 $288 = (getTempRet0() | 0);
 $289 = (___muldi3(($267|0),($268|0),-683901,-1)|0);
 $290 = (getTempRet0() | 0);
 $291 = (_i64Add(($249|0),($250|0),($289|0),($290|0))|0);
 $292 = (getTempRet0() | 0);
 $293 = (_bitshift64Ashr(($275|0),($276|0),21)|0);
 $294 = (getTempRet0() | 0);
 $295 = (_i64Add(($279|0),($280|0),($293|0),($294|0))|0);
 $296 = (getTempRet0() | 0);
 $297 = $275 & 2097151;
 $298 = (_bitshift64Ashr(($295|0),($296|0),21)|0);
 $299 = (getTempRet0() | 0);
 $300 = (_i64Add(($232|0),($233|0),($41|0),0)|0);
 $301 = (getTempRet0() | 0);
 $302 = (_i64Subtract(($300|0),($301|0),($201|0),0)|0);
 $303 = (getTempRet0() | 0);
 $304 = (_i64Add(($302|0),($303|0),($281|0),($282|0))|0);
 $305 = (getTempRet0() | 0);
 $306 = (_i64Add(($304|0),($305|0),($298|0),($299|0))|0);
 $307 = (getTempRet0() | 0);
 $308 = $295 & 2097151;
 $309 = (_bitshift64Ashr(($306|0),($307|0),21)|0);
 $310 = (getTempRet0() | 0);
 $311 = (_i64Add(($285|0),($286|0),($309|0),($310|0))|0);
 $312 = (getTempRet0() | 0);
 $313 = $306 & 2097151;
 $314 = (_bitshift64Ashr(($311|0),($312|0),21)|0);
 $315 = (getTempRet0() | 0);
 $316 = (_i64Add(($81|0),0,($239|0),($240|0))|0);
 $317 = (getTempRet0() | 0);
 $318 = (_i64Subtract(($316|0),($317|0),($208|0),0)|0);
 $319 = (getTempRet0() | 0);
 $320 = (_i64Add(($318|0),($319|0),($287|0),($288|0))|0);
 $321 = (getTempRet0() | 0);
 $322 = (_i64Add(($320|0),($321|0),($314|0),($315|0))|0);
 $323 = (getTempRet0() | 0);
 $324 = $311 & 2097151;
 $325 = (_bitshift64Ashr(($322|0),($323|0),21)|0);
 $326 = (getTempRet0() | 0);
 $327 = (_i64Add(($291|0),($292|0),($325|0),($326|0))|0);
 $328 = (getTempRet0() | 0);
 $329 = $322 & 2097151;
 $330 = (_bitshift64Ashr(($327|0),($328|0),21)|0);
 $331 = (getTempRet0() | 0);
 $332 = (_i64Add(($113|0),0,($246|0),($247|0))|0);
 $333 = (getTempRet0() | 0);
 $334 = (_i64Subtract(($332|0),($333|0),($215|0),0)|0);
 $335 = (getTempRet0() | 0);
 $336 = (_i64Add(($334|0),($335|0),($330|0),($331|0))|0);
 $337 = (getTempRet0() | 0);
 $338 = $327 & 2097151;
 $339 = (_bitshift64Ashr(($336|0),($337|0),21)|0);
 $340 = (getTempRet0() | 0);
 $341 = (_i64Add(($339|0),($340|0),($256|0),($257|0))|0);
 $342 = (getTempRet0() | 0);
 $343 = $336 & 2097151;
 $344 = (_bitshift64Ashr(($341|0),($342|0),21)|0);
 $345 = (getTempRet0() | 0);
 $346 = (_i64Add(($253|0),($254|0),($134|0),($128|0))|0);
 $347 = (getTempRet0() | 0);
 $348 = (_i64Subtract(($346|0),($347|0),($222|0),0)|0);
 $349 = (getTempRet0() | 0);
 $350 = (_i64Add(($348|0),($349|0),($344|0),($345|0))|0);
 $351 = (getTempRet0() | 0);
 $352 = $341 & 2097151;
 $353 = (_bitshift64Ashr(($350|0),($351|0),21)|0);
 $354 = (getTempRet0() | 0);
 $355 = (_i64Add(($353|0),($354|0),($263|0),($264|0))|0);
 $356 = (getTempRet0() | 0);
 $357 = $350 & 2097151;
 $358 = (_bitshift64Ashr(($355|0),($356|0),21)|0);
 $359 = (getTempRet0() | 0);
 $360 = (_i64Add(($260|0),($261|0),($166|0),0)|0);
 $361 = (getTempRet0() | 0);
 $362 = (_i64Subtract(($360|0),($361|0),($229|0),0)|0);
 $363 = (getTempRet0() | 0);
 $364 = (_i64Add(($362|0),($363|0),($358|0),($359|0))|0);
 $365 = (getTempRet0() | 0);
 $366 = $355 & 2097151;
 $367 = (_bitshift64Ashr(($364|0),($365|0),21)|0);
 $368 = (getTempRet0() | 0);
 $369 = (_i64Add(($367|0),($368|0),($271|0),($272|0))|0);
 $370 = (getTempRet0() | 0);
 $371 = $364 & 2097151;
 $372 = (_bitshift64Ashr(($369|0),($370|0),21)|0);
 $373 = (getTempRet0() | 0);
 $374 = $369 & 2097151;
 $375 = (___muldi3(($372|0),($373|0),666643,0)|0);
 $376 = (getTempRet0() | 0);
 $377 = (_i64Add(($375|0),($376|0),($297|0),0)|0);
 $378 = (getTempRet0() | 0);
 $379 = (___muldi3(($372|0),($373|0),470296,0)|0);
 $380 = (getTempRet0() | 0);
 $381 = (_i64Add(($379|0),($380|0),($308|0),0)|0);
 $382 = (getTempRet0() | 0);
 $383 = (___muldi3(($372|0),($373|0),654183,0)|0);
 $384 = (getTempRet0() | 0);
 $385 = (_i64Add(($383|0),($384|0),($313|0),0)|0);
 $386 = (getTempRet0() | 0);
 $387 = (___muldi3(($372|0),($373|0),-997805,-1)|0);
 $388 = (getTempRet0() | 0);
 $389 = (_i64Add(($387|0),($388|0),($324|0),0)|0);
 $390 = (getTempRet0() | 0);
 $391 = (___muldi3(($372|0),($373|0),136657,0)|0);
 $392 = (getTempRet0() | 0);
 $393 = (_i64Add(($391|0),($392|0),($329|0),0)|0);
 $394 = (getTempRet0() | 0);
 $395 = (___muldi3(($372|0),($373|0),-683901,-1)|0);
 $396 = (getTempRet0() | 0);
 $397 = (_i64Add(($395|0),($396|0),($338|0),0)|0);
 $398 = (getTempRet0() | 0);
 $399 = (_bitshift64Ashr(($377|0),($378|0),21)|0);
 $400 = (getTempRet0() | 0);
 $401 = (_i64Add(($381|0),($382|0),($399|0),($400|0))|0);
 $402 = (getTempRet0() | 0);
 $403 = (_bitshift64Ashr(($401|0),($402|0),21)|0);
 $404 = (getTempRet0() | 0);
 $405 = (_i64Add(($385|0),($386|0),($403|0),($404|0))|0);
 $406 = (getTempRet0() | 0);
 $407 = $401 & 2097151;
 $408 = (_bitshift64Ashr(($405|0),($406|0),21)|0);
 $409 = (getTempRet0() | 0);
 $410 = (_i64Add(($389|0),($390|0),($408|0),($409|0))|0);
 $411 = (getTempRet0() | 0);
 $412 = $405 & 2097151;
 $413 = (_bitshift64Ashr(($410|0),($411|0),21)|0);
 $414 = (getTempRet0() | 0);
 $415 = (_i64Add(($393|0),($394|0),($413|0),($414|0))|0);
 $416 = (getTempRet0() | 0);
 $417 = $410 & 2097151;
 $418 = (_bitshift64Ashr(($415|0),($416|0),21)|0);
 $419 = (getTempRet0() | 0);
 $420 = (_i64Add(($397|0),($398|0),($418|0),($419|0))|0);
 $421 = (getTempRet0() | 0);
 $422 = $415 & 2097151;
 $423 = (_bitshift64Ashr(($420|0),($421|0),21)|0);
 $424 = (getTempRet0() | 0);
 $425 = (_i64Add(($423|0),($424|0),($343|0),0)|0);
 $426 = (getTempRet0() | 0);
 $427 = $420 & 2097151;
 $428 = (_bitshift64Ashr(($425|0),($426|0),21)|0);
 $429 = (getTempRet0() | 0);
 $430 = (_i64Add(($428|0),($429|0),($352|0),0)|0);
 $431 = (getTempRet0() | 0);
 $432 = $425 & 2097151;
 $433 = (_bitshift64Ashr(($430|0),($431|0),21)|0);
 $434 = (getTempRet0() | 0);
 $435 = (_i64Add(($433|0),($434|0),($357|0),0)|0);
 $436 = (getTempRet0() | 0);
 $437 = (_bitshift64Ashr(($435|0),($436|0),21)|0);
 $438 = (getTempRet0() | 0);
 $439 = (_i64Add(($437|0),($438|0),($366|0),0)|0);
 $440 = (getTempRet0() | 0);
 $441 = (_bitshift64Ashr(($439|0),($440|0),21)|0);
 $442 = (getTempRet0() | 0);
 $443 = (_i64Add(($441|0),($442|0),($371|0),0)|0);
 $444 = (getTempRet0() | 0);
 $445 = $439 & 2097151;
 $446 = (_bitshift64Ashr(($443|0),($444|0),21)|0);
 $447 = (getTempRet0() | 0);
 $448 = (_i64Add(($446|0),($447|0),($374|0),0)|0);
 $449 = (getTempRet0() | 0);
 $450 = $443 & 2097151;
 $451 = $377&255;
 HEAP8[$s>>0] = $451;
 $452 = (_bitshift64Lshr(($377|0),($378|0),8)|0);
 $453 = (getTempRet0() | 0);
 $454 = $452&255;
 HEAP8[$s$idx>>0] = $454;
 $455 = (_bitshift64Lshr(($377|0),($378|0),16)|0);
 $456 = (getTempRet0() | 0);
 $457 = $455 & 31;
 $458 = (_bitshift64Shl(($407|0),0,5)|0);
 $459 = (getTempRet0() | 0);
 $460 = $458 | $457;
 $461 = $460&255;
 HEAP8[$s$idx290>>0] = $461;
 $462 = (_bitshift64Lshr(($401|0),($402|0),3)|0);
 $463 = (getTempRet0() | 0);
 $464 = $462&255;
 HEAP8[$arrayidx1$i386>>0] = $464;
 $465 = (_bitshift64Lshr(($401|0),($402|0),11)|0);
 $466 = (getTempRet0() | 0);
 $467 = $465&255;
 HEAP8[$arrayidx3$i390>>0] = $467;
 $468 = (_bitshift64Lshr(($407|0),0,19)|0);
 $469 = (getTempRet0() | 0);
 $470 = (_bitshift64Shl(($412|0),0,2)|0);
 $471 = (getTempRet0() | 0);
 $472 = $470 | $468;
 $471 | $469;
 $473 = $472&255;
 HEAP8[$arrayidx7$i394>>0] = $473;
 $474 = (_bitshift64Lshr(($405|0),($406|0),6)|0);
 $475 = (getTempRet0() | 0);
 $476 = $474&255;
 HEAP8[$add$ptr3$idx>>0] = $476;
 $477 = (_bitshift64Lshr(($412|0),0,14)|0);
 $478 = (getTempRet0() | 0);
 $479 = (_bitshift64Shl(($417|0),0,7)|0);
 $480 = (getTempRet0() | 0);
 $481 = $479 | $477;
 $480 | $478;
 $482 = $481&255;
 HEAP8[$add$ptr3$idx289>>0] = $482;
 $483 = (_bitshift64Lshr(($410|0),($411|0),1)|0);
 $484 = (getTempRet0() | 0);
 $485 = $483&255;
 HEAP8[$arrayidx1$i366>>0] = $485;
 $486 = (_bitshift64Lshr(($410|0),($411|0),9)|0);
 $487 = (getTempRet0() | 0);
 $488 = $486&255;
 HEAP8[$arrayidx3$i370>>0] = $488;
 $489 = (_bitshift64Lshr(($417|0),0,17)|0);
 $490 = (getTempRet0() | 0);
 $491 = (_bitshift64Shl(($422|0),0,4)|0);
 $492 = (getTempRet0() | 0);
 $493 = $491 | $489;
 $492 | $490;
 $494 = $493&255;
 HEAP8[$arrayidx7$i374>>0] = $494;
 $495 = (_bitshift64Lshr(($415|0),($416|0),4)|0);
 $496 = (getTempRet0() | 0);
 $497 = $495&255;
 HEAP8[$arrayidx1$i353>>0] = $497;
 $498 = (_bitshift64Lshr(($415|0),($416|0),12)|0);
 $499 = (getTempRet0() | 0);
 $500 = $498&255;
 HEAP8[$arrayidx3$i357>>0] = $500;
 $501 = (_bitshift64Lshr(($422|0),0,20)|0);
 $502 = (getTempRet0() | 0);
 $503 = (_bitshift64Shl(($427|0),0,1)|0);
 $504 = (getTempRet0() | 0);
 $505 = $503 | $501;
 $504 | $502;
 $506 = $505&255;
 HEAP8[$arrayidx7$i361>>0] = $506;
 $507 = (_bitshift64Lshr(($420|0),($421|0),7)|0);
 $508 = (getTempRet0() | 0);
 $509 = $507&255;
 HEAP8[$add$ptr15$idx>>0] = $509;
 $510 = (_bitshift64Lshr(($427|0),0,15)|0);
 $511 = (getTempRet0() | 0);
 $512 = (_bitshift64Shl(($432|0),0,6)|0);
 $513 = (getTempRet0() | 0);
 $514 = $512 | $510;
 $513 | $511;
 $515 = $514&255;
 HEAP8[$add$ptr15$idx288>>0] = $515;
 $516 = (_bitshift64Lshr(($425|0),($426|0),2)|0);
 $517 = (getTempRet0() | 0);
 $518 = $516&255;
 HEAP8[$arrayidx1$i333>>0] = $518;
 $519 = (_bitshift64Lshr(($425|0),($426|0),10)|0);
 $520 = (getTempRet0() | 0);
 $521 = $519&255;
 HEAP8[$arrayidx3$i337>>0] = $521;
 $522 = (_bitshift64Lshr(($432|0),0,18)|0);
 $523 = (getTempRet0() | 0);
 $524 = (_bitshift64Shl(($430|0),($431|0),3)|0);
 $525 = (getTempRet0() | 0);
 $526 = $524 | $522;
 $525 | $523;
 $527 = $526&255;
 HEAP8[$arrayidx7$i341>>0] = $527;
 $528 = (_bitshift64Lshr(($430|0),($431|0),5)|0);
 $529 = (getTempRet0() | 0);
 $530 = $528&255;
 HEAP8[$add$ptr23$idx>>0] = $530;
 $531 = (_bitshift64Lshr(($430|0),($431|0),13)|0);
 $532 = (getTempRet0() | 0);
 $533 = $531&255;
 HEAP8[$add$ptr23$idx287>>0] = $533;
 $534 = $435&255;
 HEAP8[$add$ptr27>>0] = $534;
 $535 = (_bitshift64Lshr(($435|0),($436|0),8)|0);
 $536 = (getTempRet0() | 0);
 $537 = $535&255;
 HEAP8[$add$ptr27$idx>>0] = $537;
 $538 = (_bitshift64Lshr(($435|0),($436|0),16)|0);
 $539 = (getTempRet0() | 0);
 $540 = $538 & 31;
 $541 = (_bitshift64Shl(($445|0),0,5)|0);
 $542 = (getTempRet0() | 0);
 $543 = $541 | $540;
 $544 = $543&255;
 HEAP8[$add$ptr27$idx286>>0] = $544;
 $545 = (_bitshift64Lshr(($439|0),($440|0),3)|0);
 $546 = (getTempRet0() | 0);
 $547 = $545&255;
 HEAP8[$arrayidx1$i306>>0] = $547;
 $548 = (_bitshift64Lshr(($439|0),($440|0),11)|0);
 $549 = (getTempRet0() | 0);
 $550 = $548&255;
 HEAP8[$arrayidx3$i310>>0] = $550;
 $551 = (_bitshift64Lshr(($445|0),0,19)|0);
 $552 = (getTempRet0() | 0);
 $553 = (_bitshift64Shl(($450|0),0,2)|0);
 $554 = (getTempRet0() | 0);
 $555 = $553 | $551;
 $554 | $552;
 $556 = $555&255;
 HEAP8[$arrayidx7$i314>>0] = $556;
 $557 = (_bitshift64Lshr(($443|0),($444|0),6)|0);
 $558 = (getTempRet0() | 0);
 $559 = $557&255;
 HEAP8[$add$ptr34$idx>>0] = $559;
 $560 = (_bitshift64Lshr(($450|0),0,14)|0);
 $561 = (getTempRet0() | 0);
 $562 = (_bitshift64Shl(($448|0),($449|0),7)|0);
 $563 = (getTempRet0() | 0);
 $564 = $562 | $560;
 $563 | $561;
 $565 = $564&255;
 HEAP8[$add$ptr34$idx285>>0] = $565;
 $566 = (_bitshift64Lshr(($448|0),($449|0),1)|0);
 $567 = (getTempRet0() | 0);
 $568 = $566&255;
 HEAP8[$arrayidx1$i>>0] = $568;
 $569 = (_bitshift64Lshr(($448|0),($449|0),9)|0);
 $570 = (getTempRet0() | 0);
 $571 = $569&255;
 HEAP8[$arrayidx3$i>>0] = $571;
 $572 = (_bitshift64Ashr(($448|0),($449|0),17)|0);
 $573 = (getTempRet0() | 0);
 $574 = $572&255;
 HEAP8[$arrayidx7$i>>0] = $574;
 return;
}
function _sc_add($s,$a,$b) {
 $s = $s|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$idx = 0, $a$idx$val = 0, $a$idx330 = 0, $a$idx330$val = 0, $a$val = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx328 = 0, $add$ptr15$idx328$val = 0, $add$ptr23$idx = 0;
 var $add$ptr23$idx$val = 0, $add$ptr23$idx327 = 0, $add$ptr23$idx327$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx326 = 0, $add$ptr27$idx326$val = 0, $add$ptr27$val = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx329 = 0, $add$ptr3$idx329$val = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx325 = 0, $add$ptr34$idx325$val = 0, $add$ptr47$idx = 0, $add$ptr47$idx$val = 0, $add$ptr47$idx323 = 0;
 var $add$ptr47$idx323$val = 0, $add$ptr59$idx = 0, $add$ptr59$idx$val = 0, $add$ptr59$idx322 = 0, $add$ptr59$idx322$val = 0, $add$ptr67$idx = 0, $add$ptr67$idx$val = 0, $add$ptr67$idx321 = 0, $add$ptr67$idx321$val = 0, $add$ptr71 = 0, $add$ptr71$idx = 0, $add$ptr71$idx$val = 0, $add$ptr71$idx320 = 0, $add$ptr71$idx320$val = 0, $add$ptr71$val = 0, $add$ptr78$idx = 0, $add$ptr78$idx$val = 0, $add$ptr78$idx319 = 0, $add$ptr78$idx319$val = 0, $arrayidx1$i = 0;
 var $arrayidx1$i346 = 0, $arrayidx1$i373 = 0, $arrayidx1$i393 = 0, $arrayidx1$i406 = 0, $arrayidx1$i426 = 0, $arrayidx1$i446 = 0, $arrayidx1$i466 = 0, $arrayidx1$i493 = 0, $arrayidx1$i513 = 0, $arrayidx1$i526 = 0, $arrayidx1$i546 = 0, $arrayidx272 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx282 = 0, $arrayidx287 = 0, $arrayidx290 = 0, $arrayidx295 = 0, $arrayidx298 = 0, $arrayidx3$i = 0;
 var $arrayidx3$i350 = 0, $arrayidx3$i377 = 0, $arrayidx3$i397 = 0, $arrayidx3$i410 = 0, $arrayidx3$i430 = 0, $arrayidx3$i450 = 0, $arrayidx3$i470 = 0, $arrayidx3$i497 = 0, $arrayidx3$i517 = 0, $arrayidx3$i530 = 0, $arrayidx3$i550 = 0, $arrayidx301 = 0, $arrayidx306 = 0, $arrayidx309 = 0, $arrayidx312 = 0, $arrayidx317 = 0, $arrayidx320 = 0, $arrayidx325 = 0, $arrayidx328 = 0, $arrayidx331 = 0;
 var $arrayidx336 = 0, $arrayidx339 = 0, $arrayidx342 = 0, $arrayidx345 = 0, $arrayidx348 = 0, $arrayidx353 = 0, $arrayidx356 = 0, $arrayidx359 = 0, $arrayidx364 = 0, $arrayidx367 = 0, $arrayidx372 = 0, $arrayidx375 = 0, $arrayidx378 = 0, $arrayidx381 = 0, $arrayidx7$i = 0, $arrayidx7$i354 = 0, $arrayidx7$i381 = 0, $arrayidx7$i401 = 0, $arrayidx7$i414 = 0, $arrayidx7$i434 = 0;
 var $arrayidx7$i454 = 0, $arrayidx7$i474 = 0, $arrayidx7$i501 = 0, $arrayidx7$i521 = 0, $arrayidx7$i534 = 0, $arrayidx7$i554 = 0, $b$idx = 0, $b$idx$val = 0, $b$idx324 = 0, $b$idx324$val = 0, $b$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $a$val = HEAP8[$a>>0]|0;
 $a$idx = ((($a)) + 1|0);
 $a$idx$val = HEAP8[$a$idx>>0]|0;
 $a$idx330 = ((($a)) + 2|0);
 $a$idx330$val = HEAP8[$a$idx330>>0]|0;
 $0 = $a$val&255;
 $1 = $a$idx$val&255;
 $2 = (_bitshift64Shl(($1|0),0,8)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2 | $0;
 $5 = $a$idx330$val&255;
 $6 = (_bitshift64Shl(($5|0),0,16)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2031616;
 $9 = $4 | $8;
 $arrayidx1$i546 = ((($a)) + 3|0);
 $10 = HEAP8[$arrayidx1$i546>>0]|0;
 $11 = $10&255;
 $12 = (_bitshift64Shl(($11|0),0,8)|0);
 $13 = (getTempRet0() | 0);
 $14 = $12 | $5;
 $arrayidx3$i550 = ((($a)) + 4|0);
 $15 = HEAP8[$arrayidx3$i550>>0]|0;
 $16 = $15&255;
 $17 = (_bitshift64Shl(($16|0),0,16)|0);
 $18 = (getTempRet0() | 0);
 $19 = $14 | $17;
 $20 = $13 | $18;
 $arrayidx7$i554 = ((($a)) + 5|0);
 $21 = HEAP8[$arrayidx7$i554>>0]|0;
 $22 = $21&255;
 $23 = (_bitshift64Shl(($22|0),0,24)|0);
 $24 = (getTempRet0() | 0);
 $25 = $19 | $23;
 $26 = $20 | $24;
 $27 = (_bitshift64Lshr(($25|0),($26|0),5)|0);
 $28 = (getTempRet0() | 0);
 $29 = $27 & 2097151;
 $add$ptr3$idx = ((($a)) + 6|0);
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx>>0]|0;
 $add$ptr3$idx329 = ((($a)) + 7|0);
 $add$ptr3$idx329$val = HEAP8[$add$ptr3$idx329>>0]|0;
 $30 = $add$ptr3$idx$val&255;
 $31 = (_bitshift64Shl(($30|0),0,8)|0);
 $32 = (getTempRet0() | 0);
 $33 = $31 | $22;
 $34 = $add$ptr3$idx329$val&255;
 $35 = (_bitshift64Shl(($34|0),0,16)|0);
 $36 = (getTempRet0() | 0);
 $37 = $33 | $35;
 $38 = $32 | $36;
 $39 = (_bitshift64Lshr(($37|0),($38|0),2)|0);
 $40 = (getTempRet0() | 0);
 $41 = $39 & 2097151;
 $arrayidx1$i526 = ((($a)) + 8|0);
 $42 = HEAP8[$arrayidx1$i526>>0]|0;
 $43 = $42&255;
 $44 = (_bitshift64Shl(($43|0),0,8)|0);
 $45 = (getTempRet0() | 0);
 $46 = $44 | $34;
 $arrayidx3$i530 = ((($a)) + 9|0);
 $47 = HEAP8[$arrayidx3$i530>>0]|0;
 $48 = $47&255;
 $49 = (_bitshift64Shl(($48|0),0,16)|0);
 $50 = (getTempRet0() | 0);
 $51 = $46 | $49;
 $52 = $45 | $50;
 $arrayidx7$i534 = ((($a)) + 10|0);
 $53 = HEAP8[$arrayidx7$i534>>0]|0;
 $54 = $53&255;
 $55 = (_bitshift64Shl(($54|0),0,24)|0);
 $56 = (getTempRet0() | 0);
 $57 = $51 | $55;
 $58 = $52 | $56;
 $59 = (_bitshift64Lshr(($57|0),($58|0),7)|0);
 $60 = (getTempRet0() | 0);
 $61 = $59 & 2097151;
 $arrayidx1$i513 = ((($a)) + 11|0);
 $62 = HEAP8[$arrayidx1$i513>>0]|0;
 $63 = $62&255;
 $64 = (_bitshift64Shl(($63|0),0,8)|0);
 $65 = (getTempRet0() | 0);
 $66 = $64 | $54;
 $arrayidx3$i517 = ((($a)) + 12|0);
 $67 = HEAP8[$arrayidx3$i517>>0]|0;
 $68 = $67&255;
 $69 = (_bitshift64Shl(($68|0),0,16)|0);
 $70 = (getTempRet0() | 0);
 $71 = $66 | $69;
 $72 = $65 | $70;
 $arrayidx7$i521 = ((($a)) + 13|0);
 $73 = HEAP8[$arrayidx7$i521>>0]|0;
 $74 = $73&255;
 $75 = (_bitshift64Shl(($74|0),0,24)|0);
 $76 = (getTempRet0() | 0);
 $77 = $71 | $75;
 $78 = $72 | $76;
 $79 = (_bitshift64Lshr(($77|0),($78|0),4)|0);
 $80 = (getTempRet0() | 0);
 $81 = $79 & 2097151;
 $add$ptr15$idx = ((($a)) + 14|0);
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx>>0]|0;
 $add$ptr15$idx328 = ((($a)) + 15|0);
 $add$ptr15$idx328$val = HEAP8[$add$ptr15$idx328>>0]|0;
 $82 = $add$ptr15$idx$val&255;
 $83 = (_bitshift64Shl(($82|0),0,8)|0);
 $84 = (getTempRet0() | 0);
 $85 = $83 | $74;
 $86 = $add$ptr15$idx328$val&255;
 $87 = (_bitshift64Shl(($86|0),0,16)|0);
 $88 = (getTempRet0() | 0);
 $89 = $85 | $87;
 $90 = $84 | $88;
 $91 = (_bitshift64Lshr(($89|0),($90|0),1)|0);
 $92 = (getTempRet0() | 0);
 $93 = $91 & 2097151;
 $arrayidx1$i493 = ((($a)) + 16|0);
 $94 = HEAP8[$arrayidx1$i493>>0]|0;
 $95 = $94&255;
 $96 = (_bitshift64Shl(($95|0),0,8)|0);
 $97 = (getTempRet0() | 0);
 $98 = $96 | $86;
 $arrayidx3$i497 = ((($a)) + 17|0);
 $99 = HEAP8[$arrayidx3$i497>>0]|0;
 $100 = $99&255;
 $101 = (_bitshift64Shl(($100|0),0,16)|0);
 $102 = (getTempRet0() | 0);
 $103 = $98 | $101;
 $104 = $97 | $102;
 $arrayidx7$i501 = ((($a)) + 18|0);
 $105 = HEAP8[$arrayidx7$i501>>0]|0;
 $106 = $105&255;
 $107 = (_bitshift64Shl(($106|0),0,24)|0);
 $108 = (getTempRet0() | 0);
 $109 = $103 | $107;
 $110 = $104 | $108;
 $111 = (_bitshift64Lshr(($109|0),($110|0),6)|0);
 $112 = (getTempRet0() | 0);
 $113 = $111 & 2097151;
 $add$ptr23$idx = ((($a)) + 19|0);
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx>>0]|0;
 $add$ptr23$idx327 = ((($a)) + 20|0);
 $add$ptr23$idx327$val = HEAP8[$add$ptr23$idx327>>0]|0;
 $114 = $add$ptr23$idx$val&255;
 $115 = (_bitshift64Shl(($114|0),0,8)|0);
 $116 = (getTempRet0() | 0);
 $117 = $115 | $106;
 $118 = $add$ptr23$idx327$val&255;
 $119 = (_bitshift64Shl(($118|0),0,16)|0);
 $120 = (getTempRet0() | 0);
 $121 = $117 | $119;
 $122 = $116 | $120;
 $123 = (_bitshift64Lshr(($121|0),($122|0),3)|0);
 $124 = (getTempRet0() | 0);
 $add$ptr27 = ((($a)) + 21|0);
 $add$ptr27$val = HEAP8[$add$ptr27>>0]|0;
 $add$ptr27$idx = ((($a)) + 22|0);
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx>>0]|0;
 $add$ptr27$idx326 = ((($a)) + 23|0);
 $add$ptr27$idx326$val = HEAP8[$add$ptr27$idx326>>0]|0;
 $125 = $add$ptr27$val&255;
 $126 = $add$ptr27$idx$val&255;
 $127 = (_bitshift64Shl(($126|0),0,8)|0);
 $128 = (getTempRet0() | 0);
 $129 = $127 | $125;
 $130 = $add$ptr27$idx326$val&255;
 $131 = (_bitshift64Shl(($130|0),0,16)|0);
 $132 = (getTempRet0() | 0);
 $133 = $131 & 2031616;
 $134 = $129 | $133;
 $arrayidx1$i466 = ((($a)) + 24|0);
 $135 = HEAP8[$arrayidx1$i466>>0]|0;
 $136 = $135&255;
 $137 = (_bitshift64Shl(($136|0),0,8)|0);
 $138 = (getTempRet0() | 0);
 $139 = $137 | $130;
 $arrayidx3$i470 = ((($a)) + 25|0);
 $140 = HEAP8[$arrayidx3$i470>>0]|0;
 $141 = $140&255;
 $142 = (_bitshift64Shl(($141|0),0,16)|0);
 $143 = (getTempRet0() | 0);
 $144 = $139 | $142;
 $145 = $138 | $143;
 $arrayidx7$i474 = ((($a)) + 26|0);
 $146 = HEAP8[$arrayidx7$i474>>0]|0;
 $147 = $146&255;
 $148 = (_bitshift64Shl(($147|0),0,24)|0);
 $149 = (getTempRet0() | 0);
 $150 = $144 | $148;
 $151 = $145 | $149;
 $152 = (_bitshift64Lshr(($150|0),($151|0),5)|0);
 $153 = (getTempRet0() | 0);
 $154 = $152 & 2097151;
 $add$ptr34$idx = ((($a)) + 27|0);
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx>>0]|0;
 $add$ptr34$idx325 = ((($a)) + 28|0);
 $add$ptr34$idx325$val = HEAP8[$add$ptr34$idx325>>0]|0;
 $155 = $add$ptr34$idx$val&255;
 $156 = (_bitshift64Shl(($155|0),0,8)|0);
 $157 = (getTempRet0() | 0);
 $158 = $156 | $147;
 $159 = $add$ptr34$idx325$val&255;
 $160 = (_bitshift64Shl(($159|0),0,16)|0);
 $161 = (getTempRet0() | 0);
 $162 = $158 | $160;
 $163 = $157 | $161;
 $164 = (_bitshift64Lshr(($162|0),($163|0),2)|0);
 $165 = (getTempRet0() | 0);
 $166 = $164 & 2097151;
 $arrayidx1$i446 = ((($a)) + 29|0);
 $167 = HEAP8[$arrayidx1$i446>>0]|0;
 $168 = $167&255;
 $169 = (_bitshift64Shl(($168|0),0,8)|0);
 $170 = (getTempRet0() | 0);
 $171 = $169 | $159;
 $arrayidx3$i450 = ((($a)) + 30|0);
 $172 = HEAP8[$arrayidx3$i450>>0]|0;
 $173 = $172&255;
 $174 = (_bitshift64Shl(($173|0),0,16)|0);
 $175 = (getTempRet0() | 0);
 $176 = $171 | $174;
 $177 = $170 | $175;
 $arrayidx7$i454 = ((($a)) + 31|0);
 $178 = HEAP8[$arrayidx7$i454>>0]|0;
 $179 = $178&255;
 $180 = (_bitshift64Shl(($179|0),0,24)|0);
 $181 = (getTempRet0() | 0);
 $182 = $176 | $180;
 $183 = $177 | $181;
 $184 = (_bitshift64Lshr(($182|0),($183|0),7)|0);
 $185 = (getTempRet0() | 0);
 $b$val = HEAP8[$b>>0]|0;
 $b$idx = ((($b)) + 1|0);
 $b$idx$val = HEAP8[$b$idx>>0]|0;
 $b$idx324 = ((($b)) + 2|0);
 $b$idx324$val = HEAP8[$b$idx324>>0]|0;
 $186 = $b$val&255;
 $187 = $b$idx$val&255;
 $188 = (_bitshift64Shl(($187|0),0,8)|0);
 $189 = (getTempRet0() | 0);
 $190 = $188 | $186;
 $191 = $b$idx324$val&255;
 $192 = (_bitshift64Shl(($191|0),0,16)|0);
 $193 = (getTempRet0() | 0);
 $194 = $192 & 2031616;
 $195 = $190 | $194;
 $arrayidx1$i426 = ((($b)) + 3|0);
 $196 = HEAP8[$arrayidx1$i426>>0]|0;
 $197 = $196&255;
 $198 = (_bitshift64Shl(($197|0),0,8)|0);
 $199 = (getTempRet0() | 0);
 $200 = $198 | $191;
 $arrayidx3$i430 = ((($b)) + 4|0);
 $201 = HEAP8[$arrayidx3$i430>>0]|0;
 $202 = $201&255;
 $203 = (_bitshift64Shl(($202|0),0,16)|0);
 $204 = (getTempRet0() | 0);
 $205 = $200 | $203;
 $206 = $199 | $204;
 $arrayidx7$i434 = ((($b)) + 5|0);
 $207 = HEAP8[$arrayidx7$i434>>0]|0;
 $208 = $207&255;
 $209 = (_bitshift64Shl(($208|0),0,24)|0);
 $210 = (getTempRet0() | 0);
 $211 = $205 | $209;
 $212 = $206 | $210;
 $213 = (_bitshift64Lshr(($211|0),($212|0),5)|0);
 $214 = (getTempRet0() | 0);
 $215 = $213 & 2097151;
 $add$ptr47$idx = ((($b)) + 6|0);
 $add$ptr47$idx$val = HEAP8[$add$ptr47$idx>>0]|0;
 $add$ptr47$idx323 = ((($b)) + 7|0);
 $add$ptr47$idx323$val = HEAP8[$add$ptr47$idx323>>0]|0;
 $216 = $add$ptr47$idx$val&255;
 $217 = (_bitshift64Shl(($216|0),0,8)|0);
 $218 = (getTempRet0() | 0);
 $219 = $217 | $208;
 $220 = $add$ptr47$idx323$val&255;
 $221 = (_bitshift64Shl(($220|0),0,16)|0);
 $222 = (getTempRet0() | 0);
 $223 = $219 | $221;
 $224 = $218 | $222;
 $225 = (_bitshift64Lshr(($223|0),($224|0),2)|0);
 $226 = (getTempRet0() | 0);
 $227 = $225 & 2097151;
 $arrayidx1$i406 = ((($b)) + 8|0);
 $228 = HEAP8[$arrayidx1$i406>>0]|0;
 $229 = $228&255;
 $230 = (_bitshift64Shl(($229|0),0,8)|0);
 $231 = (getTempRet0() | 0);
 $232 = $230 | $220;
 $arrayidx3$i410 = ((($b)) + 9|0);
 $233 = HEAP8[$arrayidx3$i410>>0]|0;
 $234 = $233&255;
 $235 = (_bitshift64Shl(($234|0),0,16)|0);
 $236 = (getTempRet0() | 0);
 $237 = $232 | $235;
 $238 = $231 | $236;
 $arrayidx7$i414 = ((($b)) + 10|0);
 $239 = HEAP8[$arrayidx7$i414>>0]|0;
 $240 = $239&255;
 $241 = (_bitshift64Shl(($240|0),0,24)|0);
 $242 = (getTempRet0() | 0);
 $243 = $237 | $241;
 $244 = $238 | $242;
 $245 = (_bitshift64Lshr(($243|0),($244|0),7)|0);
 $246 = (getTempRet0() | 0);
 $247 = $245 & 2097151;
 $arrayidx1$i393 = ((($b)) + 11|0);
 $248 = HEAP8[$arrayidx1$i393>>0]|0;
 $249 = $248&255;
 $250 = (_bitshift64Shl(($249|0),0,8)|0);
 $251 = (getTempRet0() | 0);
 $252 = $250 | $240;
 $arrayidx3$i397 = ((($b)) + 12|0);
 $253 = HEAP8[$arrayidx3$i397>>0]|0;
 $254 = $253&255;
 $255 = (_bitshift64Shl(($254|0),0,16)|0);
 $256 = (getTempRet0() | 0);
 $257 = $252 | $255;
 $258 = $251 | $256;
 $arrayidx7$i401 = ((($b)) + 13|0);
 $259 = HEAP8[$arrayidx7$i401>>0]|0;
 $260 = $259&255;
 $261 = (_bitshift64Shl(($260|0),0,24)|0);
 $262 = (getTempRet0() | 0);
 $263 = $257 | $261;
 $264 = $258 | $262;
 $265 = (_bitshift64Lshr(($263|0),($264|0),4)|0);
 $266 = (getTempRet0() | 0);
 $267 = $265 & 2097151;
 $add$ptr59$idx = ((($b)) + 14|0);
 $add$ptr59$idx$val = HEAP8[$add$ptr59$idx>>0]|0;
 $add$ptr59$idx322 = ((($b)) + 15|0);
 $add$ptr59$idx322$val = HEAP8[$add$ptr59$idx322>>0]|0;
 $268 = $add$ptr59$idx$val&255;
 $269 = (_bitshift64Shl(($268|0),0,8)|0);
 $270 = (getTempRet0() | 0);
 $271 = $269 | $260;
 $272 = $add$ptr59$idx322$val&255;
 $273 = (_bitshift64Shl(($272|0),0,16)|0);
 $274 = (getTempRet0() | 0);
 $275 = $271 | $273;
 $276 = $270 | $274;
 $277 = (_bitshift64Lshr(($275|0),($276|0),1)|0);
 $278 = (getTempRet0() | 0);
 $279 = $277 & 2097151;
 $arrayidx1$i373 = ((($b)) + 16|0);
 $280 = HEAP8[$arrayidx1$i373>>0]|0;
 $281 = $280&255;
 $282 = (_bitshift64Shl(($281|0),0,8)|0);
 $283 = (getTempRet0() | 0);
 $284 = $282 | $272;
 $arrayidx3$i377 = ((($b)) + 17|0);
 $285 = HEAP8[$arrayidx3$i377>>0]|0;
 $286 = $285&255;
 $287 = (_bitshift64Shl(($286|0),0,16)|0);
 $288 = (getTempRet0() | 0);
 $289 = $284 | $287;
 $290 = $283 | $288;
 $arrayidx7$i381 = ((($b)) + 18|0);
 $291 = HEAP8[$arrayidx7$i381>>0]|0;
 $292 = $291&255;
 $293 = (_bitshift64Shl(($292|0),0,24)|0);
 $294 = (getTempRet0() | 0);
 $295 = $289 | $293;
 $296 = $290 | $294;
 $297 = (_bitshift64Lshr(($295|0),($296|0),6)|0);
 $298 = (getTempRet0() | 0);
 $299 = $297 & 2097151;
 $add$ptr67$idx = ((($b)) + 19|0);
 $add$ptr67$idx$val = HEAP8[$add$ptr67$idx>>0]|0;
 $add$ptr67$idx321 = ((($b)) + 20|0);
 $add$ptr67$idx321$val = HEAP8[$add$ptr67$idx321>>0]|0;
 $300 = $add$ptr67$idx$val&255;
 $301 = (_bitshift64Shl(($300|0),0,8)|0);
 $302 = (getTempRet0() | 0);
 $303 = $301 | $292;
 $304 = $add$ptr67$idx321$val&255;
 $305 = (_bitshift64Shl(($304|0),0,16)|0);
 $306 = (getTempRet0() | 0);
 $307 = $303 | $305;
 $308 = $302 | $306;
 $309 = (_bitshift64Lshr(($307|0),($308|0),3)|0);
 $310 = (getTempRet0() | 0);
 $add$ptr71 = ((($b)) + 21|0);
 $add$ptr71$val = HEAP8[$add$ptr71>>0]|0;
 $add$ptr71$idx = ((($b)) + 22|0);
 $add$ptr71$idx$val = HEAP8[$add$ptr71$idx>>0]|0;
 $add$ptr71$idx320 = ((($b)) + 23|0);
 $add$ptr71$idx320$val = HEAP8[$add$ptr71$idx320>>0]|0;
 $311 = $add$ptr71$val&255;
 $312 = $add$ptr71$idx$val&255;
 $313 = (_bitshift64Shl(($312|0),0,8)|0);
 $314 = (getTempRet0() | 0);
 $315 = $313 | $311;
 $316 = $add$ptr71$idx320$val&255;
 $317 = (_bitshift64Shl(($316|0),0,16)|0);
 $318 = (getTempRet0() | 0);
 $319 = $317 & 2031616;
 $320 = $315 | $319;
 $arrayidx1$i346 = ((($b)) + 24|0);
 $321 = HEAP8[$arrayidx1$i346>>0]|0;
 $322 = $321&255;
 $323 = (_bitshift64Shl(($322|0),0,8)|0);
 $324 = (getTempRet0() | 0);
 $325 = $323 | $316;
 $arrayidx3$i350 = ((($b)) + 25|0);
 $326 = HEAP8[$arrayidx3$i350>>0]|0;
 $327 = $326&255;
 $328 = (_bitshift64Shl(($327|0),0,16)|0);
 $329 = (getTempRet0() | 0);
 $330 = $325 | $328;
 $331 = $324 | $329;
 $arrayidx7$i354 = ((($b)) + 26|0);
 $332 = HEAP8[$arrayidx7$i354>>0]|0;
 $333 = $332&255;
 $334 = (_bitshift64Shl(($333|0),0,24)|0);
 $335 = (getTempRet0() | 0);
 $336 = $330 | $334;
 $337 = $331 | $335;
 $338 = (_bitshift64Lshr(($336|0),($337|0),5)|0);
 $339 = (getTempRet0() | 0);
 $340 = $338 & 2097151;
 $add$ptr78$idx = ((($b)) + 27|0);
 $add$ptr78$idx$val = HEAP8[$add$ptr78$idx>>0]|0;
 $add$ptr78$idx319 = ((($b)) + 28|0);
 $add$ptr78$idx319$val = HEAP8[$add$ptr78$idx319>>0]|0;
 $341 = $add$ptr78$idx$val&255;
 $342 = (_bitshift64Shl(($341|0),0,8)|0);
 $343 = (getTempRet0() | 0);
 $344 = $342 | $333;
 $345 = $add$ptr78$idx319$val&255;
 $346 = (_bitshift64Shl(($345|0),0,16)|0);
 $347 = (getTempRet0() | 0);
 $348 = $344 | $346;
 $349 = $343 | $347;
 $350 = (_bitshift64Lshr(($348|0),($349|0),2)|0);
 $351 = (getTempRet0() | 0);
 $352 = $350 & 2097151;
 $arrayidx1$i = ((($b)) + 29|0);
 $353 = HEAP8[$arrayidx1$i>>0]|0;
 $354 = $353&255;
 $355 = (_bitshift64Shl(($354|0),0,8)|0);
 $356 = (getTempRet0() | 0);
 $357 = $355 | $345;
 $arrayidx3$i = ((($b)) + 30|0);
 $358 = HEAP8[$arrayidx3$i>>0]|0;
 $359 = $358&255;
 $360 = (_bitshift64Shl(($359|0),0,16)|0);
 $361 = (getTempRet0() | 0);
 $362 = $357 | $360;
 $363 = $356 | $361;
 $arrayidx7$i = ((($b)) + 31|0);
 $364 = HEAP8[$arrayidx7$i>>0]|0;
 $365 = $364&255;
 $366 = (_bitshift64Shl(($365|0),0,24)|0);
 $367 = (getTempRet0() | 0);
 $368 = $362 | $366;
 $369 = $363 | $367;
 $370 = (_bitshift64Lshr(($368|0),($369|0),7)|0);
 $371 = (getTempRet0() | 0);
 $372 = (_i64Add(($195|0),($189|0),($9|0),($3|0))|0);
 $373 = (getTempRet0() | 0);
 $374 = (_i64Add(($227|0),0,($41|0),0)|0);
 $375 = (getTempRet0() | 0);
 $376 = (_i64Add(($267|0),0,($81|0),0)|0);
 $377 = (getTempRet0() | 0);
 $378 = (_i64Add(($279|0),0,($93|0),0)|0);
 $379 = (getTempRet0() | 0);
 $380 = (_i64Add(($299|0),0,($113|0),0)|0);
 $381 = (getTempRet0() | 0);
 $382 = (_i64Add(($309|0),($310|0),($123|0),($124|0))|0);
 $383 = (getTempRet0() | 0);
 $384 = (_i64Add(($320|0),($314|0),($134|0),($128|0))|0);
 $385 = (getTempRet0() | 0);
 $386 = (_i64Add(($352|0),0,($166|0),0)|0);
 $387 = (getTempRet0() | 0);
 $388 = (_i64Add(($370|0),($371|0),($184|0),($185|0))|0);
 $389 = (getTempRet0() | 0);
 $390 = (_i64Add(($372|0),($373|0),1048576,0)|0);
 $391 = (getTempRet0() | 0);
 $392 = (_bitshift64Lshr(($390|0),($391|0),21)|0);
 $393 = (getTempRet0() | 0);
 $394 = (_i64Add(($392|0),($393|0),($29|0),0)|0);
 $395 = (getTempRet0() | 0);
 $396 = (_i64Add(($394|0),($395|0),($215|0),0)|0);
 $397 = (getTempRet0() | 0);
 $398 = $390 & 6291456;
 $399 = (_i64Subtract(($372|0),($373|0),($398|0),0)|0);
 $400 = (getTempRet0() | 0);
 $401 = (_i64Add(($374|0),($375|0),1048576,0)|0);
 $402 = (getTempRet0() | 0);
 $403 = (_bitshift64Lshr(($401|0),($402|0),21)|0);
 $404 = (getTempRet0() | 0);
 $405 = (_i64Add(($403|0),($404|0),($61|0),0)|0);
 $406 = (getTempRet0() | 0);
 $407 = (_i64Add(($405|0),($406|0),($247|0),0)|0);
 $408 = (getTempRet0() | 0);
 $409 = $401 & 6291456;
 $410 = (_i64Add(($376|0),($377|0),1048576,0)|0);
 $411 = (getTempRet0() | 0);
 $412 = (_bitshift64Lshr(($410|0),($411|0),21)|0);
 $413 = (getTempRet0() | 0);
 $414 = (_i64Add(($378|0),($379|0),($412|0),($413|0))|0);
 $415 = (getTempRet0() | 0);
 $416 = $410 & 6291456;
 $417 = (_i64Add(($380|0),($381|0),1048576,0)|0);
 $418 = (getTempRet0() | 0);
 $419 = (_bitshift64Lshr(($417|0),($418|0),21)|0);
 $420 = (getTempRet0() | 0);
 $421 = (_i64Add(($382|0),($383|0),($419|0),($420|0))|0);
 $422 = (getTempRet0() | 0);
 $423 = $417 & 6291456;
 $424 = (_i64Add(($384|0),($385|0),1048576,0)|0);
 $425 = (getTempRet0() | 0);
 $426 = (_bitshift64Lshr(($424|0),($425|0),21)|0);
 $427 = (getTempRet0() | 0);
 $428 = (_i64Add(($426|0),($427|0),($154|0),0)|0);
 $429 = (getTempRet0() | 0);
 $430 = (_i64Add(($428|0),($429|0),($340|0),0)|0);
 $431 = (getTempRet0() | 0);
 $432 = $424 & 6291456;
 $433 = (_i64Add(($386|0),($387|0),1048576,0)|0);
 $434 = (getTempRet0() | 0);
 $435 = (_bitshift64Lshr(($433|0),($434|0),21)|0);
 $436 = (getTempRet0() | 0);
 $437 = (_i64Add(($388|0),($389|0),($435|0),($436|0))|0);
 $438 = (getTempRet0() | 0);
 $439 = $433 & 6291456;
 $440 = (_i64Add(($396|0),($397|0),1048576,0)|0);
 $441 = (getTempRet0() | 0);
 $442 = (_bitshift64Lshr(($440|0),($441|0),21)|0);
 $443 = (getTempRet0() | 0);
 $444 = $440 & -2097152;
 $445 = $441 & 8191;
 $446 = (_i64Subtract(($396|0),($397|0),($444|0),($445|0))|0);
 $447 = (getTempRet0() | 0);
 $448 = (_i64Add(($407|0),($408|0),1048576,0)|0);
 $449 = (getTempRet0() | 0);
 $450 = (_bitshift64Lshr(($448|0),($449|0),21)|0);
 $451 = (getTempRet0() | 0);
 $452 = $448 & -2097152;
 $453 = $449 & 8191;
 $454 = (_i64Subtract(($407|0),($408|0),($452|0),($453|0))|0);
 $455 = (getTempRet0() | 0);
 $456 = (_i64Add(($414|0),($415|0),1048576,0)|0);
 $457 = (getTempRet0() | 0);
 $458 = (_bitshift64Lshr(($456|0),($457|0),21)|0);
 $459 = (getTempRet0() | 0);
 $460 = $456 & -2097152;
 $461 = $457 & 8191;
 $462 = (_i64Subtract(($414|0),($415|0),($460|0),($461|0))|0);
 $463 = (getTempRet0() | 0);
 $464 = (_i64Add(($421|0),($422|0),1048576,0)|0);
 $465 = (getTempRet0() | 0);
 $466 = (_bitshift64Lshr(($464|0),($465|0),21)|0);
 $467 = (getTempRet0() | 0);
 $468 = $464 & -2097152;
 $469 = $465 & 8191;
 $470 = (_i64Subtract(($421|0),($422|0),($468|0),($469|0))|0);
 $471 = (getTempRet0() | 0);
 $472 = (_i64Add(($430|0),($431|0),1048576,0)|0);
 $473 = (getTempRet0() | 0);
 $474 = (_bitshift64Lshr(($472|0),($473|0),21)|0);
 $475 = (getTempRet0() | 0);
 $476 = $472 & -2097152;
 $477 = $473 & 8191;
 $478 = (_i64Subtract(($430|0),($431|0),($476|0),($477|0))|0);
 $479 = (getTempRet0() | 0);
 $480 = (_i64Add(($437|0),($438|0),1048576,0)|0);
 $481 = (getTempRet0() | 0);
 $482 = (_bitshift64Lshr(($480|0),($481|0),21)|0);
 $483 = (getTempRet0() | 0);
 $484 = $480 & -2097152;
 $485 = $481 & 268435455;
 $486 = (_i64Subtract(($437|0),($438|0),($484|0),($485|0))|0);
 $487 = (getTempRet0() | 0);
 $488 = (___muldi3(($482|0),($483|0),666643,0)|0);
 $489 = (getTempRet0() | 0);
 $490 = (_i64Add(($488|0),($489|0),($399|0),($400|0))|0);
 $491 = (getTempRet0() | 0);
 $492 = (___muldi3(($482|0),($483|0),470296,0)|0);
 $493 = (getTempRet0() | 0);
 $494 = (_i64Add(($446|0),($447|0),($492|0),($493|0))|0);
 $495 = (getTempRet0() | 0);
 $496 = (___muldi3(($482|0),($483|0),654183,0)|0);
 $497 = (getTempRet0() | 0);
 $498 = (___muldi3(($482|0),($483|0),-997805,-1)|0);
 $499 = (getTempRet0() | 0);
 $500 = (_i64Add(($454|0),($455|0),($498|0),($499|0))|0);
 $501 = (getTempRet0() | 0);
 $502 = (___muldi3(($482|0),($483|0),136657,0)|0);
 $503 = (getTempRet0() | 0);
 $504 = (___muldi3(($482|0),($483|0),-683901,-1)|0);
 $505 = (getTempRet0() | 0);
 $506 = (_i64Add(($462|0),($463|0),($504|0),($505|0))|0);
 $507 = (getTempRet0() | 0);
 $508 = (_bitshift64Ashr(($490|0),($491|0),21)|0);
 $509 = (getTempRet0() | 0);
 $510 = (_i64Add(($494|0),($495|0),($508|0),($509|0))|0);
 $511 = (getTempRet0() | 0);
 $512 = $490 & 2097151;
 $513 = (_bitshift64Ashr(($510|0),($511|0),21)|0);
 $514 = (getTempRet0() | 0);
 $515 = (_i64Add(($442|0),($443|0),($374|0),($375|0))|0);
 $516 = (getTempRet0() | 0);
 $517 = (_i64Subtract(($515|0),($516|0),($409|0),0)|0);
 $518 = (getTempRet0() | 0);
 $519 = (_i64Add(($517|0),($518|0),($496|0),($497|0))|0);
 $520 = (getTempRet0() | 0);
 $521 = (_i64Add(($519|0),($520|0),($513|0),($514|0))|0);
 $522 = (getTempRet0() | 0);
 $523 = $510 & 2097151;
 $524 = (_bitshift64Ashr(($521|0),($522|0),21)|0);
 $525 = (getTempRet0() | 0);
 $526 = (_i64Add(($500|0),($501|0),($524|0),($525|0))|0);
 $527 = (getTempRet0() | 0);
 $528 = $521 & 2097151;
 $529 = (_bitshift64Ashr(($526|0),($527|0),21)|0);
 $530 = (getTempRet0() | 0);
 $531 = (_i64Add(($376|0),($377|0),($450|0),($451|0))|0);
 $532 = (getTempRet0() | 0);
 $533 = (_i64Subtract(($531|0),($532|0),($416|0),0)|0);
 $534 = (getTempRet0() | 0);
 $535 = (_i64Add(($533|0),($534|0),($502|0),($503|0))|0);
 $536 = (getTempRet0() | 0);
 $537 = (_i64Add(($535|0),($536|0),($529|0),($530|0))|0);
 $538 = (getTempRet0() | 0);
 $539 = $526 & 2097151;
 $540 = (_bitshift64Ashr(($537|0),($538|0),21)|0);
 $541 = (getTempRet0() | 0);
 $542 = (_i64Add(($506|0),($507|0),($540|0),($541|0))|0);
 $543 = (getTempRet0() | 0);
 $544 = $537 & 2097151;
 $545 = (_bitshift64Ashr(($542|0),($543|0),21)|0);
 $546 = (getTempRet0() | 0);
 $547 = (_i64Add(($380|0),($381|0),($458|0),($459|0))|0);
 $548 = (getTempRet0() | 0);
 $549 = (_i64Subtract(($547|0),($548|0),($423|0),0)|0);
 $550 = (getTempRet0() | 0);
 $551 = (_i64Add(($549|0),($550|0),($545|0),($546|0))|0);
 $552 = (getTempRet0() | 0);
 $553 = $542 & 2097151;
 $554 = (_bitshift64Ashr(($551|0),($552|0),21)|0);
 $555 = (getTempRet0() | 0);
 $556 = (_i64Add(($554|0),($555|0),($470|0),($471|0))|0);
 $557 = (getTempRet0() | 0);
 $558 = $551 & 2097151;
 $559 = (_bitshift64Ashr(($556|0),($557|0),21)|0);
 $560 = (getTempRet0() | 0);
 $561 = (_i64Add(($466|0),($467|0),($384|0),($385|0))|0);
 $562 = (getTempRet0() | 0);
 $563 = (_i64Subtract(($561|0),($562|0),($432|0),0)|0);
 $564 = (getTempRet0() | 0);
 $565 = (_i64Add(($563|0),($564|0),($559|0),($560|0))|0);
 $566 = (getTempRet0() | 0);
 $567 = $556 & 2097151;
 $568 = (_bitshift64Ashr(($565|0),($566|0),21)|0);
 $569 = (getTempRet0() | 0);
 $570 = (_i64Add(($568|0),($569|0),($478|0),($479|0))|0);
 $571 = (getTempRet0() | 0);
 $572 = $565 & 2097151;
 $573 = (_bitshift64Ashr(($570|0),($571|0),21)|0);
 $574 = (getTempRet0() | 0);
 $575 = (_i64Add(($474|0),($475|0),($386|0),($387|0))|0);
 $576 = (getTempRet0() | 0);
 $577 = (_i64Subtract(($575|0),($576|0),($439|0),0)|0);
 $578 = (getTempRet0() | 0);
 $579 = (_i64Add(($577|0),($578|0),($573|0),($574|0))|0);
 $580 = (getTempRet0() | 0);
 $581 = $570 & 2097151;
 $582 = (_bitshift64Ashr(($579|0),($580|0),21)|0);
 $583 = (getTempRet0() | 0);
 $584 = (_i64Add(($582|0),($583|0),($486|0),($487|0))|0);
 $585 = (getTempRet0() | 0);
 $586 = $579 & 2097151;
 $587 = (_bitshift64Ashr(($584|0),($585|0),21)|0);
 $588 = (getTempRet0() | 0);
 $589 = $584 & 2097151;
 $590 = (___muldi3(($587|0),($588|0),666643,0)|0);
 $591 = (getTempRet0() | 0);
 $592 = (_i64Add(($590|0),($591|0),($512|0),0)|0);
 $593 = (getTempRet0() | 0);
 $594 = (___muldi3(($587|0),($588|0),470296,0)|0);
 $595 = (getTempRet0() | 0);
 $596 = (_i64Add(($594|0),($595|0),($523|0),0)|0);
 $597 = (getTempRet0() | 0);
 $598 = (___muldi3(($587|0),($588|0),654183,0)|0);
 $599 = (getTempRet0() | 0);
 $600 = (_i64Add(($598|0),($599|0),($528|0),0)|0);
 $601 = (getTempRet0() | 0);
 $602 = (___muldi3(($587|0),($588|0),-997805,-1)|0);
 $603 = (getTempRet0() | 0);
 $604 = (_i64Add(($602|0),($603|0),($539|0),0)|0);
 $605 = (getTempRet0() | 0);
 $606 = (___muldi3(($587|0),($588|0),136657,0)|0);
 $607 = (getTempRet0() | 0);
 $608 = (_i64Add(($606|0),($607|0),($544|0),0)|0);
 $609 = (getTempRet0() | 0);
 $610 = (___muldi3(($587|0),($588|0),-683901,-1)|0);
 $611 = (getTempRet0() | 0);
 $612 = (_i64Add(($610|0),($611|0),($553|0),0)|0);
 $613 = (getTempRet0() | 0);
 $614 = (_bitshift64Ashr(($592|0),($593|0),21)|0);
 $615 = (getTempRet0() | 0);
 $616 = (_i64Add(($596|0),($597|0),($614|0),($615|0))|0);
 $617 = (getTempRet0() | 0);
 $618 = (_bitshift64Ashr(($616|0),($617|0),21)|0);
 $619 = (getTempRet0() | 0);
 $620 = (_i64Add(($600|0),($601|0),($618|0),($619|0))|0);
 $621 = (getTempRet0() | 0);
 $622 = $616 & 2097151;
 $623 = (_bitshift64Ashr(($620|0),($621|0),21)|0);
 $624 = (getTempRet0() | 0);
 $625 = (_i64Add(($604|0),($605|0),($623|0),($624|0))|0);
 $626 = (getTempRet0() | 0);
 $627 = $620 & 2097151;
 $628 = (_bitshift64Ashr(($625|0),($626|0),21)|0);
 $629 = (getTempRet0() | 0);
 $630 = (_i64Add(($608|0),($609|0),($628|0),($629|0))|0);
 $631 = (getTempRet0() | 0);
 $632 = $625 & 2097151;
 $633 = (_bitshift64Ashr(($630|0),($631|0),21)|0);
 $634 = (getTempRet0() | 0);
 $635 = (_i64Add(($612|0),($613|0),($633|0),($634|0))|0);
 $636 = (getTempRet0() | 0);
 $637 = $630 & 2097151;
 $638 = (_bitshift64Ashr(($635|0),($636|0),21)|0);
 $639 = (getTempRet0() | 0);
 $640 = (_i64Add(($638|0),($639|0),($558|0),0)|0);
 $641 = (getTempRet0() | 0);
 $642 = $635 & 2097151;
 $643 = (_bitshift64Ashr(($640|0),($641|0),21)|0);
 $644 = (getTempRet0() | 0);
 $645 = (_i64Add(($643|0),($644|0),($567|0),0)|0);
 $646 = (getTempRet0() | 0);
 $647 = $640 & 2097151;
 $648 = (_bitshift64Ashr(($645|0),($646|0),21)|0);
 $649 = (getTempRet0() | 0);
 $650 = (_i64Add(($648|0),($649|0),($572|0),0)|0);
 $651 = (getTempRet0() | 0);
 $652 = (_bitshift64Ashr(($650|0),($651|0),21)|0);
 $653 = (getTempRet0() | 0);
 $654 = (_i64Add(($652|0),($653|0),($581|0),0)|0);
 $655 = (getTempRet0() | 0);
 $656 = (_bitshift64Ashr(($654|0),($655|0),21)|0);
 $657 = (getTempRet0() | 0);
 $658 = (_i64Add(($656|0),($657|0),($586|0),0)|0);
 $659 = (getTempRet0() | 0);
 $660 = $654 & 2097151;
 $661 = (_bitshift64Ashr(($658|0),($659|0),21)|0);
 $662 = (getTempRet0() | 0);
 $663 = (_i64Add(($661|0),($662|0),($589|0),0)|0);
 $664 = (getTempRet0() | 0);
 $665 = $658 & 2097151;
 $666 = $592&255;
 HEAP8[$s>>0] = $666;
 $667 = (_bitshift64Lshr(($592|0),($593|0),8)|0);
 $668 = (getTempRet0() | 0);
 $669 = $667&255;
 $arrayidx272 = ((($s)) + 1|0);
 HEAP8[$arrayidx272>>0] = $669;
 $670 = (_bitshift64Lshr(($592|0),($593|0),16)|0);
 $671 = (getTempRet0() | 0);
 $672 = $670 & 31;
 $673 = (_bitshift64Shl(($622|0),0,5)|0);
 $674 = (getTempRet0() | 0);
 $675 = $673 | $672;
 $676 = $675&255;
 $arrayidx276 = ((($s)) + 2|0);
 HEAP8[$arrayidx276>>0] = $676;
 $677 = (_bitshift64Lshr(($616|0),($617|0),3)|0);
 $678 = (getTempRet0() | 0);
 $679 = $677&255;
 $arrayidx279 = ((($s)) + 3|0);
 HEAP8[$arrayidx279>>0] = $679;
 $680 = (_bitshift64Lshr(($616|0),($617|0),11)|0);
 $681 = (getTempRet0() | 0);
 $682 = $680&255;
 $arrayidx282 = ((($s)) + 4|0);
 HEAP8[$arrayidx282>>0] = $682;
 $683 = (_bitshift64Lshr(($622|0),0,19)|0);
 $684 = (getTempRet0() | 0);
 $685 = (_bitshift64Shl(($627|0),0,2)|0);
 $686 = (getTempRet0() | 0);
 $687 = $685 | $683;
 $686 | $684;
 $688 = $687&255;
 $arrayidx287 = ((($s)) + 5|0);
 HEAP8[$arrayidx287>>0] = $688;
 $689 = (_bitshift64Lshr(($620|0),($621|0),6)|0);
 $690 = (getTempRet0() | 0);
 $691 = $689&255;
 $arrayidx290 = ((($s)) + 6|0);
 HEAP8[$arrayidx290>>0] = $691;
 $692 = (_bitshift64Lshr(($627|0),0,14)|0);
 $693 = (getTempRet0() | 0);
 $694 = (_bitshift64Shl(($632|0),0,7)|0);
 $695 = (getTempRet0() | 0);
 $696 = $694 | $692;
 $695 | $693;
 $697 = $696&255;
 $arrayidx295 = ((($s)) + 7|0);
 HEAP8[$arrayidx295>>0] = $697;
 $698 = (_bitshift64Lshr(($625|0),($626|0),1)|0);
 $699 = (getTempRet0() | 0);
 $700 = $698&255;
 $arrayidx298 = ((($s)) + 8|0);
 HEAP8[$arrayidx298>>0] = $700;
 $701 = (_bitshift64Lshr(($625|0),($626|0),9)|0);
 $702 = (getTempRet0() | 0);
 $703 = $701&255;
 $arrayidx301 = ((($s)) + 9|0);
 HEAP8[$arrayidx301>>0] = $703;
 $704 = (_bitshift64Lshr(($632|0),0,17)|0);
 $705 = (getTempRet0() | 0);
 $706 = (_bitshift64Shl(($637|0),0,4)|0);
 $707 = (getTempRet0() | 0);
 $708 = $706 | $704;
 $707 | $705;
 $709 = $708&255;
 $arrayidx306 = ((($s)) + 10|0);
 HEAP8[$arrayidx306>>0] = $709;
 $710 = (_bitshift64Lshr(($630|0),($631|0),4)|0);
 $711 = (getTempRet0() | 0);
 $712 = $710&255;
 $arrayidx309 = ((($s)) + 11|0);
 HEAP8[$arrayidx309>>0] = $712;
 $713 = (_bitshift64Lshr(($630|0),($631|0),12)|0);
 $714 = (getTempRet0() | 0);
 $715 = $713&255;
 $arrayidx312 = ((($s)) + 12|0);
 HEAP8[$arrayidx312>>0] = $715;
 $716 = (_bitshift64Lshr(($637|0),0,20)|0);
 $717 = (getTempRet0() | 0);
 $718 = (_bitshift64Shl(($642|0),0,1)|0);
 $719 = (getTempRet0() | 0);
 $720 = $718 | $716;
 $719 | $717;
 $721 = $720&255;
 $arrayidx317 = ((($s)) + 13|0);
 HEAP8[$arrayidx317>>0] = $721;
 $722 = (_bitshift64Lshr(($635|0),($636|0),7)|0);
 $723 = (getTempRet0() | 0);
 $724 = $722&255;
 $arrayidx320 = ((($s)) + 14|0);
 HEAP8[$arrayidx320>>0] = $724;
 $725 = (_bitshift64Lshr(($642|0),0,15)|0);
 $726 = (getTempRet0() | 0);
 $727 = (_bitshift64Shl(($647|0),0,6)|0);
 $728 = (getTempRet0() | 0);
 $729 = $727 | $725;
 $728 | $726;
 $730 = $729&255;
 $arrayidx325 = ((($s)) + 15|0);
 HEAP8[$arrayidx325>>0] = $730;
 $731 = (_bitshift64Lshr(($640|0),($641|0),2)|0);
 $732 = (getTempRet0() | 0);
 $733 = $731&255;
 $arrayidx328 = ((($s)) + 16|0);
 HEAP8[$arrayidx328>>0] = $733;
 $734 = (_bitshift64Lshr(($640|0),($641|0),10)|0);
 $735 = (getTempRet0() | 0);
 $736 = $734&255;
 $arrayidx331 = ((($s)) + 17|0);
 HEAP8[$arrayidx331>>0] = $736;
 $737 = (_bitshift64Lshr(($647|0),0,18)|0);
 $738 = (getTempRet0() | 0);
 $739 = (_bitshift64Shl(($645|0),($646|0),3)|0);
 $740 = (getTempRet0() | 0);
 $741 = $739 | $737;
 $740 | $738;
 $742 = $741&255;
 $arrayidx336 = ((($s)) + 18|0);
 HEAP8[$arrayidx336>>0] = $742;
 $743 = (_bitshift64Lshr(($645|0),($646|0),5)|0);
 $744 = (getTempRet0() | 0);
 $745 = $743&255;
 $arrayidx339 = ((($s)) + 19|0);
 HEAP8[$arrayidx339>>0] = $745;
 $746 = (_bitshift64Lshr(($645|0),($646|0),13)|0);
 $747 = (getTempRet0() | 0);
 $748 = $746&255;
 $arrayidx342 = ((($s)) + 20|0);
 HEAP8[$arrayidx342>>0] = $748;
 $749 = $650&255;
 $arrayidx345 = ((($s)) + 21|0);
 HEAP8[$arrayidx345>>0] = $749;
 $750 = (_bitshift64Lshr(($650|0),($651|0),8)|0);
 $751 = (getTempRet0() | 0);
 $752 = $750&255;
 $arrayidx348 = ((($s)) + 22|0);
 HEAP8[$arrayidx348>>0] = $752;
 $753 = (_bitshift64Lshr(($650|0),($651|0),16)|0);
 $754 = (getTempRet0() | 0);
 $755 = $753 & 31;
 $756 = (_bitshift64Shl(($660|0),0,5)|0);
 $757 = (getTempRet0() | 0);
 $758 = $756 | $755;
 $759 = $758&255;
 $arrayidx353 = ((($s)) + 23|0);
 HEAP8[$arrayidx353>>0] = $759;
 $760 = (_bitshift64Lshr(($654|0),($655|0),3)|0);
 $761 = (getTempRet0() | 0);
 $762 = $760&255;
 $arrayidx356 = ((($s)) + 24|0);
 HEAP8[$arrayidx356>>0] = $762;
 $763 = (_bitshift64Lshr(($654|0),($655|0),11)|0);
 $764 = (getTempRet0() | 0);
 $765 = $763&255;
 $arrayidx359 = ((($s)) + 25|0);
 HEAP8[$arrayidx359>>0] = $765;
 $766 = (_bitshift64Lshr(($660|0),0,19)|0);
 $767 = (getTempRet0() | 0);
 $768 = (_bitshift64Shl(($665|0),0,2)|0);
 $769 = (getTempRet0() | 0);
 $770 = $768 | $766;
 $769 | $767;
 $771 = $770&255;
 $arrayidx364 = ((($s)) + 26|0);
 HEAP8[$arrayidx364>>0] = $771;
 $772 = (_bitshift64Lshr(($658|0),($659|0),6)|0);
 $773 = (getTempRet0() | 0);
 $774 = $772&255;
 $arrayidx367 = ((($s)) + 27|0);
 HEAP8[$arrayidx367>>0] = $774;
 $775 = (_bitshift64Lshr(($665|0),0,14)|0);
 $776 = (getTempRet0() | 0);
 $777 = (_bitshift64Shl(($663|0),($664|0),7)|0);
 $778 = (getTempRet0() | 0);
 $779 = $777 | $775;
 $778 | $776;
 $780 = $779&255;
 $arrayidx372 = ((($s)) + 28|0);
 HEAP8[$arrayidx372>>0] = $780;
 $781 = (_bitshift64Lshr(($663|0),($664|0),1)|0);
 $782 = (getTempRet0() | 0);
 $783 = $781&255;
 $arrayidx375 = ((($s)) + 29|0);
 HEAP8[$arrayidx375>>0] = $783;
 $784 = (_bitshift64Lshr(($663|0),($664|0),9)|0);
 $785 = (getTempRet0() | 0);
 $786 = $784&255;
 $arrayidx378 = ((($s)) + 30|0);
 HEAP8[$arrayidx378>>0] = $786;
 $787 = (_bitshift64Ashr(($663|0),($664|0),17)|0);
 $788 = (getTempRet0() | 0);
 $789 = $787&255;
 $arrayidx381 = ((($s)) + 31|0);
 HEAP8[$arrayidx381>>0] = $789;
 return;
}
function _sc_sub($s,$a,$b) {
 $s = $s|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$idx = 0, $a$idx$val = 0, $a$idx330 = 0, $a$idx330$val = 0, $a$val = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx328 = 0, $add$ptr15$idx328$val = 0, $add$ptr23$idx = 0, $add$ptr23$idx$val = 0, $add$ptr23$idx327 = 0, $add$ptr23$idx327$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0;
 var $add$ptr27$idx326 = 0, $add$ptr27$idx326$val = 0, $add$ptr27$val = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx329 = 0, $add$ptr3$idx329$val = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx325 = 0, $add$ptr34$idx325$val = 0, $add$ptr47$idx = 0, $add$ptr47$idx$val = 0, $add$ptr47$idx323 = 0, $add$ptr47$idx323$val = 0, $add$ptr59$idx = 0, $add$ptr59$idx$val = 0, $add$ptr59$idx322 = 0, $add$ptr59$idx322$val = 0, $add$ptr67$idx = 0;
 var $add$ptr67$idx$val = 0, $add$ptr67$idx321 = 0, $add$ptr67$idx321$val = 0, $add$ptr71 = 0, $add$ptr71$idx = 0, $add$ptr71$idx$val = 0, $add$ptr71$idx320 = 0, $add$ptr71$idx320$val = 0, $add$ptr71$val = 0, $add$ptr78$idx = 0, $add$ptr78$idx$val = 0, $add$ptr78$idx319 = 0, $add$ptr78$idx319$val = 0, $arrayidx1$i = 0, $arrayidx1$i346 = 0, $arrayidx1$i373 = 0, $arrayidx1$i393 = 0, $arrayidx1$i406 = 0, $arrayidx1$i426 = 0, $arrayidx1$i446 = 0;
 var $arrayidx1$i466 = 0, $arrayidx1$i493 = 0, $arrayidx1$i513 = 0, $arrayidx1$i526 = 0, $arrayidx1$i546 = 0, $arrayidx272 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx282 = 0, $arrayidx287 = 0, $arrayidx290 = 0, $arrayidx295 = 0, $arrayidx298 = 0, $arrayidx3$i = 0, $arrayidx3$i350 = 0, $arrayidx3$i377 = 0, $arrayidx3$i397 = 0, $arrayidx3$i410 = 0, $arrayidx3$i430 = 0, $arrayidx3$i450 = 0;
 var $arrayidx3$i470 = 0, $arrayidx3$i497 = 0, $arrayidx3$i517 = 0, $arrayidx3$i530 = 0, $arrayidx3$i550 = 0, $arrayidx301 = 0, $arrayidx306 = 0, $arrayidx309 = 0, $arrayidx312 = 0, $arrayidx317 = 0, $arrayidx320 = 0, $arrayidx325 = 0, $arrayidx328 = 0, $arrayidx331 = 0, $arrayidx336 = 0, $arrayidx339 = 0, $arrayidx342 = 0, $arrayidx345 = 0, $arrayidx348 = 0, $arrayidx353 = 0;
 var $arrayidx356 = 0, $arrayidx359 = 0, $arrayidx364 = 0, $arrayidx367 = 0, $arrayidx372 = 0, $arrayidx375 = 0, $arrayidx378 = 0, $arrayidx381 = 0, $arrayidx7$i = 0, $arrayidx7$i354 = 0, $arrayidx7$i381 = 0, $arrayidx7$i401 = 0, $arrayidx7$i414 = 0, $arrayidx7$i434 = 0, $arrayidx7$i454 = 0, $arrayidx7$i474 = 0, $arrayidx7$i501 = 0, $arrayidx7$i521 = 0, $arrayidx7$i534 = 0, $arrayidx7$i554 = 0;
 var $b$idx = 0, $b$idx$val = 0, $b$idx324 = 0, $b$idx324$val = 0, $b$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $a$val = HEAP8[$a>>0]|0;
 $a$idx = ((($a)) + 1|0);
 $a$idx$val = HEAP8[$a$idx>>0]|0;
 $a$idx330 = ((($a)) + 2|0);
 $a$idx330$val = HEAP8[$a$idx330>>0]|0;
 $0 = $a$val&255;
 $1 = $a$idx$val&255;
 $2 = (_bitshift64Shl(($1|0),0,8)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2 | $0;
 $5 = $a$idx330$val&255;
 $6 = (_bitshift64Shl(($5|0),0,16)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2031616;
 $9 = $4 | $8;
 $arrayidx1$i546 = ((($a)) + 3|0);
 $10 = HEAP8[$arrayidx1$i546>>0]|0;
 $11 = $10&255;
 $12 = (_bitshift64Shl(($11|0),0,8)|0);
 $13 = (getTempRet0() | 0);
 $14 = $12 | $5;
 $arrayidx3$i550 = ((($a)) + 4|0);
 $15 = HEAP8[$arrayidx3$i550>>0]|0;
 $16 = $15&255;
 $17 = (_bitshift64Shl(($16|0),0,16)|0);
 $18 = (getTempRet0() | 0);
 $19 = $14 | $17;
 $20 = $13 | $18;
 $arrayidx7$i554 = ((($a)) + 5|0);
 $21 = HEAP8[$arrayidx7$i554>>0]|0;
 $22 = $21&255;
 $23 = (_bitshift64Shl(($22|0),0,24)|0);
 $24 = (getTempRet0() | 0);
 $25 = $19 | $23;
 $26 = $20 | $24;
 $27 = (_bitshift64Lshr(($25|0),($26|0),5)|0);
 $28 = (getTempRet0() | 0);
 $29 = $27 & 2097151;
 $add$ptr3$idx = ((($a)) + 6|0);
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx>>0]|0;
 $add$ptr3$idx329 = ((($a)) + 7|0);
 $add$ptr3$idx329$val = HEAP8[$add$ptr3$idx329>>0]|0;
 $30 = $add$ptr3$idx$val&255;
 $31 = (_bitshift64Shl(($30|0),0,8)|0);
 $32 = (getTempRet0() | 0);
 $33 = $31 | $22;
 $34 = $add$ptr3$idx329$val&255;
 $35 = (_bitshift64Shl(($34|0),0,16)|0);
 $36 = (getTempRet0() | 0);
 $37 = $33 | $35;
 $38 = $32 | $36;
 $39 = (_bitshift64Lshr(($37|0),($38|0),2)|0);
 $40 = (getTempRet0() | 0);
 $41 = $39 & 2097151;
 $arrayidx1$i526 = ((($a)) + 8|0);
 $42 = HEAP8[$arrayidx1$i526>>0]|0;
 $43 = $42&255;
 $44 = (_bitshift64Shl(($43|0),0,8)|0);
 $45 = (getTempRet0() | 0);
 $46 = $44 | $34;
 $arrayidx3$i530 = ((($a)) + 9|0);
 $47 = HEAP8[$arrayidx3$i530>>0]|0;
 $48 = $47&255;
 $49 = (_bitshift64Shl(($48|0),0,16)|0);
 $50 = (getTempRet0() | 0);
 $51 = $46 | $49;
 $52 = $45 | $50;
 $arrayidx7$i534 = ((($a)) + 10|0);
 $53 = HEAP8[$arrayidx7$i534>>0]|0;
 $54 = $53&255;
 $55 = (_bitshift64Shl(($54|0),0,24)|0);
 $56 = (getTempRet0() | 0);
 $57 = $51 | $55;
 $58 = $52 | $56;
 $59 = (_bitshift64Lshr(($57|0),($58|0),7)|0);
 $60 = (getTempRet0() | 0);
 $61 = $59 & 2097151;
 $arrayidx1$i513 = ((($a)) + 11|0);
 $62 = HEAP8[$arrayidx1$i513>>0]|0;
 $63 = $62&255;
 $64 = (_bitshift64Shl(($63|0),0,8)|0);
 $65 = (getTempRet0() | 0);
 $66 = $64 | $54;
 $arrayidx3$i517 = ((($a)) + 12|0);
 $67 = HEAP8[$arrayidx3$i517>>0]|0;
 $68 = $67&255;
 $69 = (_bitshift64Shl(($68|0),0,16)|0);
 $70 = (getTempRet0() | 0);
 $71 = $66 | $69;
 $72 = $65 | $70;
 $arrayidx7$i521 = ((($a)) + 13|0);
 $73 = HEAP8[$arrayidx7$i521>>0]|0;
 $74 = $73&255;
 $75 = (_bitshift64Shl(($74|0),0,24)|0);
 $76 = (getTempRet0() | 0);
 $77 = $71 | $75;
 $78 = $72 | $76;
 $79 = (_bitshift64Lshr(($77|0),($78|0),4)|0);
 $80 = (getTempRet0() | 0);
 $81 = $79 & 2097151;
 $add$ptr15$idx = ((($a)) + 14|0);
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx>>0]|0;
 $add$ptr15$idx328 = ((($a)) + 15|0);
 $add$ptr15$idx328$val = HEAP8[$add$ptr15$idx328>>0]|0;
 $82 = $add$ptr15$idx$val&255;
 $83 = (_bitshift64Shl(($82|0),0,8)|0);
 $84 = (getTempRet0() | 0);
 $85 = $83 | $74;
 $86 = $add$ptr15$idx328$val&255;
 $87 = (_bitshift64Shl(($86|0),0,16)|0);
 $88 = (getTempRet0() | 0);
 $89 = $85 | $87;
 $90 = $84 | $88;
 $91 = (_bitshift64Lshr(($89|0),($90|0),1)|0);
 $92 = (getTempRet0() | 0);
 $93 = $91 & 2097151;
 $arrayidx1$i493 = ((($a)) + 16|0);
 $94 = HEAP8[$arrayidx1$i493>>0]|0;
 $95 = $94&255;
 $96 = (_bitshift64Shl(($95|0),0,8)|0);
 $97 = (getTempRet0() | 0);
 $98 = $96 | $86;
 $arrayidx3$i497 = ((($a)) + 17|0);
 $99 = HEAP8[$arrayidx3$i497>>0]|0;
 $100 = $99&255;
 $101 = (_bitshift64Shl(($100|0),0,16)|0);
 $102 = (getTempRet0() | 0);
 $103 = $98 | $101;
 $104 = $97 | $102;
 $arrayidx7$i501 = ((($a)) + 18|0);
 $105 = HEAP8[$arrayidx7$i501>>0]|0;
 $106 = $105&255;
 $107 = (_bitshift64Shl(($106|0),0,24)|0);
 $108 = (getTempRet0() | 0);
 $109 = $103 | $107;
 $110 = $104 | $108;
 $111 = (_bitshift64Lshr(($109|0),($110|0),6)|0);
 $112 = (getTempRet0() | 0);
 $113 = $111 & 2097151;
 $add$ptr23$idx = ((($a)) + 19|0);
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx>>0]|0;
 $add$ptr23$idx327 = ((($a)) + 20|0);
 $add$ptr23$idx327$val = HEAP8[$add$ptr23$idx327>>0]|0;
 $114 = $add$ptr23$idx$val&255;
 $115 = (_bitshift64Shl(($114|0),0,8)|0);
 $116 = (getTempRet0() | 0);
 $117 = $115 | $106;
 $118 = $add$ptr23$idx327$val&255;
 $119 = (_bitshift64Shl(($118|0),0,16)|0);
 $120 = (getTempRet0() | 0);
 $121 = $117 | $119;
 $122 = $116 | $120;
 $123 = (_bitshift64Lshr(($121|0),($122|0),3)|0);
 $124 = (getTempRet0() | 0);
 $add$ptr27 = ((($a)) + 21|0);
 $add$ptr27$val = HEAP8[$add$ptr27>>0]|0;
 $add$ptr27$idx = ((($a)) + 22|0);
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx>>0]|0;
 $add$ptr27$idx326 = ((($a)) + 23|0);
 $add$ptr27$idx326$val = HEAP8[$add$ptr27$idx326>>0]|0;
 $125 = $add$ptr27$val&255;
 $126 = $add$ptr27$idx$val&255;
 $127 = (_bitshift64Shl(($126|0),0,8)|0);
 $128 = (getTempRet0() | 0);
 $129 = $127 | $125;
 $130 = $add$ptr27$idx326$val&255;
 $131 = (_bitshift64Shl(($130|0),0,16)|0);
 $132 = (getTempRet0() | 0);
 $133 = $131 & 2031616;
 $134 = $129 | $133;
 $arrayidx1$i466 = ((($a)) + 24|0);
 $135 = HEAP8[$arrayidx1$i466>>0]|0;
 $136 = $135&255;
 $137 = (_bitshift64Shl(($136|0),0,8)|0);
 $138 = (getTempRet0() | 0);
 $139 = $137 | $130;
 $arrayidx3$i470 = ((($a)) + 25|0);
 $140 = HEAP8[$arrayidx3$i470>>0]|0;
 $141 = $140&255;
 $142 = (_bitshift64Shl(($141|0),0,16)|0);
 $143 = (getTempRet0() | 0);
 $144 = $139 | $142;
 $145 = $138 | $143;
 $arrayidx7$i474 = ((($a)) + 26|0);
 $146 = HEAP8[$arrayidx7$i474>>0]|0;
 $147 = $146&255;
 $148 = (_bitshift64Shl(($147|0),0,24)|0);
 $149 = (getTempRet0() | 0);
 $150 = $144 | $148;
 $151 = $145 | $149;
 $152 = (_bitshift64Lshr(($150|0),($151|0),5)|0);
 $153 = (getTempRet0() | 0);
 $154 = $152 & 2097151;
 $add$ptr34$idx = ((($a)) + 27|0);
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx>>0]|0;
 $add$ptr34$idx325 = ((($a)) + 28|0);
 $add$ptr34$idx325$val = HEAP8[$add$ptr34$idx325>>0]|0;
 $155 = $add$ptr34$idx$val&255;
 $156 = (_bitshift64Shl(($155|0),0,8)|0);
 $157 = (getTempRet0() | 0);
 $158 = $156 | $147;
 $159 = $add$ptr34$idx325$val&255;
 $160 = (_bitshift64Shl(($159|0),0,16)|0);
 $161 = (getTempRet0() | 0);
 $162 = $158 | $160;
 $163 = $157 | $161;
 $164 = (_bitshift64Lshr(($162|0),($163|0),2)|0);
 $165 = (getTempRet0() | 0);
 $166 = $164 & 2097151;
 $arrayidx1$i446 = ((($a)) + 29|0);
 $167 = HEAP8[$arrayidx1$i446>>0]|0;
 $168 = $167&255;
 $169 = (_bitshift64Shl(($168|0),0,8)|0);
 $170 = (getTempRet0() | 0);
 $171 = $169 | $159;
 $arrayidx3$i450 = ((($a)) + 30|0);
 $172 = HEAP8[$arrayidx3$i450>>0]|0;
 $173 = $172&255;
 $174 = (_bitshift64Shl(($173|0),0,16)|0);
 $175 = (getTempRet0() | 0);
 $176 = $171 | $174;
 $177 = $170 | $175;
 $arrayidx7$i454 = ((($a)) + 31|0);
 $178 = HEAP8[$arrayidx7$i454>>0]|0;
 $179 = $178&255;
 $180 = (_bitshift64Shl(($179|0),0,24)|0);
 $181 = (getTempRet0() | 0);
 $182 = $176 | $180;
 $183 = $177 | $181;
 $184 = (_bitshift64Lshr(($182|0),($183|0),7)|0);
 $185 = (getTempRet0() | 0);
 $b$val = HEAP8[$b>>0]|0;
 $b$idx = ((($b)) + 1|0);
 $b$idx$val = HEAP8[$b$idx>>0]|0;
 $b$idx324 = ((($b)) + 2|0);
 $b$idx324$val = HEAP8[$b$idx324>>0]|0;
 $186 = $b$val&255;
 $187 = $b$idx$val&255;
 $188 = (_bitshift64Shl(($187|0),0,8)|0);
 $189 = (getTempRet0() | 0);
 $190 = $188 | $186;
 $191 = $b$idx324$val&255;
 $192 = (_bitshift64Shl(($191|0),0,16)|0);
 $193 = (getTempRet0() | 0);
 $194 = $192 & 2031616;
 $195 = $190 | $194;
 $arrayidx1$i426 = ((($b)) + 3|0);
 $196 = HEAP8[$arrayidx1$i426>>0]|0;
 $197 = $196&255;
 $198 = (_bitshift64Shl(($197|0),0,8)|0);
 $199 = (getTempRet0() | 0);
 $200 = $198 | $191;
 $arrayidx3$i430 = ((($b)) + 4|0);
 $201 = HEAP8[$arrayidx3$i430>>0]|0;
 $202 = $201&255;
 $203 = (_bitshift64Shl(($202|0),0,16)|0);
 $204 = (getTempRet0() | 0);
 $205 = $200 | $203;
 $206 = $199 | $204;
 $arrayidx7$i434 = ((($b)) + 5|0);
 $207 = HEAP8[$arrayidx7$i434>>0]|0;
 $208 = $207&255;
 $209 = (_bitshift64Shl(($208|0),0,24)|0);
 $210 = (getTempRet0() | 0);
 $211 = $205 | $209;
 $212 = $206 | $210;
 $213 = (_bitshift64Lshr(($211|0),($212|0),5)|0);
 $214 = (getTempRet0() | 0);
 $215 = $213 & 2097151;
 $add$ptr47$idx = ((($b)) + 6|0);
 $add$ptr47$idx$val = HEAP8[$add$ptr47$idx>>0]|0;
 $add$ptr47$idx323 = ((($b)) + 7|0);
 $add$ptr47$idx323$val = HEAP8[$add$ptr47$idx323>>0]|0;
 $216 = $add$ptr47$idx$val&255;
 $217 = (_bitshift64Shl(($216|0),0,8)|0);
 $218 = (getTempRet0() | 0);
 $219 = $217 | $208;
 $220 = $add$ptr47$idx323$val&255;
 $221 = (_bitshift64Shl(($220|0),0,16)|0);
 $222 = (getTempRet0() | 0);
 $223 = $219 | $221;
 $224 = $218 | $222;
 $225 = (_bitshift64Lshr(($223|0),($224|0),2)|0);
 $226 = (getTempRet0() | 0);
 $227 = $225 & 2097151;
 $arrayidx1$i406 = ((($b)) + 8|0);
 $228 = HEAP8[$arrayidx1$i406>>0]|0;
 $229 = $228&255;
 $230 = (_bitshift64Shl(($229|0),0,8)|0);
 $231 = (getTempRet0() | 0);
 $232 = $230 | $220;
 $arrayidx3$i410 = ((($b)) + 9|0);
 $233 = HEAP8[$arrayidx3$i410>>0]|0;
 $234 = $233&255;
 $235 = (_bitshift64Shl(($234|0),0,16)|0);
 $236 = (getTempRet0() | 0);
 $237 = $232 | $235;
 $238 = $231 | $236;
 $arrayidx7$i414 = ((($b)) + 10|0);
 $239 = HEAP8[$arrayidx7$i414>>0]|0;
 $240 = $239&255;
 $241 = (_bitshift64Shl(($240|0),0,24)|0);
 $242 = (getTempRet0() | 0);
 $243 = $237 | $241;
 $244 = $238 | $242;
 $245 = (_bitshift64Lshr(($243|0),($244|0),7)|0);
 $246 = (getTempRet0() | 0);
 $247 = $245 & 2097151;
 $arrayidx1$i393 = ((($b)) + 11|0);
 $248 = HEAP8[$arrayidx1$i393>>0]|0;
 $249 = $248&255;
 $250 = (_bitshift64Shl(($249|0),0,8)|0);
 $251 = (getTempRet0() | 0);
 $252 = $250 | $240;
 $arrayidx3$i397 = ((($b)) + 12|0);
 $253 = HEAP8[$arrayidx3$i397>>0]|0;
 $254 = $253&255;
 $255 = (_bitshift64Shl(($254|0),0,16)|0);
 $256 = (getTempRet0() | 0);
 $257 = $252 | $255;
 $258 = $251 | $256;
 $arrayidx7$i401 = ((($b)) + 13|0);
 $259 = HEAP8[$arrayidx7$i401>>0]|0;
 $260 = $259&255;
 $261 = (_bitshift64Shl(($260|0),0,24)|0);
 $262 = (getTempRet0() | 0);
 $263 = $257 | $261;
 $264 = $258 | $262;
 $265 = (_bitshift64Lshr(($263|0),($264|0),4)|0);
 $266 = (getTempRet0() | 0);
 $267 = $265 & 2097151;
 $add$ptr59$idx = ((($b)) + 14|0);
 $add$ptr59$idx$val = HEAP8[$add$ptr59$idx>>0]|0;
 $add$ptr59$idx322 = ((($b)) + 15|0);
 $add$ptr59$idx322$val = HEAP8[$add$ptr59$idx322>>0]|0;
 $268 = $add$ptr59$idx$val&255;
 $269 = (_bitshift64Shl(($268|0),0,8)|0);
 $270 = (getTempRet0() | 0);
 $271 = $269 | $260;
 $272 = $add$ptr59$idx322$val&255;
 $273 = (_bitshift64Shl(($272|0),0,16)|0);
 $274 = (getTempRet0() | 0);
 $275 = $271 | $273;
 $276 = $270 | $274;
 $277 = (_bitshift64Lshr(($275|0),($276|0),1)|0);
 $278 = (getTempRet0() | 0);
 $279 = $277 & 2097151;
 $arrayidx1$i373 = ((($b)) + 16|0);
 $280 = HEAP8[$arrayidx1$i373>>0]|0;
 $281 = $280&255;
 $282 = (_bitshift64Shl(($281|0),0,8)|0);
 $283 = (getTempRet0() | 0);
 $284 = $282 | $272;
 $arrayidx3$i377 = ((($b)) + 17|0);
 $285 = HEAP8[$arrayidx3$i377>>0]|0;
 $286 = $285&255;
 $287 = (_bitshift64Shl(($286|0),0,16)|0);
 $288 = (getTempRet0() | 0);
 $289 = $284 | $287;
 $290 = $283 | $288;
 $arrayidx7$i381 = ((($b)) + 18|0);
 $291 = HEAP8[$arrayidx7$i381>>0]|0;
 $292 = $291&255;
 $293 = (_bitshift64Shl(($292|0),0,24)|0);
 $294 = (getTempRet0() | 0);
 $295 = $289 | $293;
 $296 = $290 | $294;
 $297 = (_bitshift64Lshr(($295|0),($296|0),6)|0);
 $298 = (getTempRet0() | 0);
 $299 = $297 & 2097151;
 $add$ptr67$idx = ((($b)) + 19|0);
 $add$ptr67$idx$val = HEAP8[$add$ptr67$idx>>0]|0;
 $add$ptr67$idx321 = ((($b)) + 20|0);
 $add$ptr67$idx321$val = HEAP8[$add$ptr67$idx321>>0]|0;
 $300 = $add$ptr67$idx$val&255;
 $301 = (_bitshift64Shl(($300|0),0,8)|0);
 $302 = (getTempRet0() | 0);
 $303 = $301 | $292;
 $304 = $add$ptr67$idx321$val&255;
 $305 = (_bitshift64Shl(($304|0),0,16)|0);
 $306 = (getTempRet0() | 0);
 $307 = $303 | $305;
 $308 = $302 | $306;
 $309 = (_bitshift64Lshr(($307|0),($308|0),3)|0);
 $310 = (getTempRet0() | 0);
 $add$ptr71 = ((($b)) + 21|0);
 $add$ptr71$val = HEAP8[$add$ptr71>>0]|0;
 $add$ptr71$idx = ((($b)) + 22|0);
 $add$ptr71$idx$val = HEAP8[$add$ptr71$idx>>0]|0;
 $add$ptr71$idx320 = ((($b)) + 23|0);
 $add$ptr71$idx320$val = HEAP8[$add$ptr71$idx320>>0]|0;
 $311 = $add$ptr71$val&255;
 $312 = $add$ptr71$idx$val&255;
 $313 = (_bitshift64Shl(($312|0),0,8)|0);
 $314 = (getTempRet0() | 0);
 $315 = $313 | $311;
 $316 = $add$ptr71$idx320$val&255;
 $317 = (_bitshift64Shl(($316|0),0,16)|0);
 $318 = (getTempRet0() | 0);
 $319 = $317 & 2031616;
 $320 = $315 | $319;
 $arrayidx1$i346 = ((($b)) + 24|0);
 $321 = HEAP8[$arrayidx1$i346>>0]|0;
 $322 = $321&255;
 $323 = (_bitshift64Shl(($322|0),0,8)|0);
 $324 = (getTempRet0() | 0);
 $325 = $323 | $316;
 $arrayidx3$i350 = ((($b)) + 25|0);
 $326 = HEAP8[$arrayidx3$i350>>0]|0;
 $327 = $326&255;
 $328 = (_bitshift64Shl(($327|0),0,16)|0);
 $329 = (getTempRet0() | 0);
 $330 = $325 | $328;
 $331 = $324 | $329;
 $arrayidx7$i354 = ((($b)) + 26|0);
 $332 = HEAP8[$arrayidx7$i354>>0]|0;
 $333 = $332&255;
 $334 = (_bitshift64Shl(($333|0),0,24)|0);
 $335 = (getTempRet0() | 0);
 $336 = $330 | $334;
 $337 = $331 | $335;
 $338 = (_bitshift64Lshr(($336|0),($337|0),5)|0);
 $339 = (getTempRet0() | 0);
 $340 = $338 & 2097151;
 $add$ptr78$idx = ((($b)) + 27|0);
 $add$ptr78$idx$val = HEAP8[$add$ptr78$idx>>0]|0;
 $add$ptr78$idx319 = ((($b)) + 28|0);
 $add$ptr78$idx319$val = HEAP8[$add$ptr78$idx319>>0]|0;
 $341 = $add$ptr78$idx$val&255;
 $342 = (_bitshift64Shl(($341|0),0,8)|0);
 $343 = (getTempRet0() | 0);
 $344 = $342 | $333;
 $345 = $add$ptr78$idx319$val&255;
 $346 = (_bitshift64Shl(($345|0),0,16)|0);
 $347 = (getTempRet0() | 0);
 $348 = $344 | $346;
 $349 = $343 | $347;
 $350 = (_bitshift64Lshr(($348|0),($349|0),2)|0);
 $351 = (getTempRet0() | 0);
 $352 = $350 & 2097151;
 $arrayidx1$i = ((($b)) + 29|0);
 $353 = HEAP8[$arrayidx1$i>>0]|0;
 $354 = $353&255;
 $355 = (_bitshift64Shl(($354|0),0,8)|0);
 $356 = (getTempRet0() | 0);
 $357 = $355 | $345;
 $arrayidx3$i = ((($b)) + 30|0);
 $358 = HEAP8[$arrayidx3$i>>0]|0;
 $359 = $358&255;
 $360 = (_bitshift64Shl(($359|0),0,16)|0);
 $361 = (getTempRet0() | 0);
 $362 = $357 | $360;
 $363 = $356 | $361;
 $arrayidx7$i = ((($b)) + 31|0);
 $364 = HEAP8[$arrayidx7$i>>0]|0;
 $365 = $364&255;
 $366 = (_bitshift64Shl(($365|0),0,24)|0);
 $367 = (getTempRet0() | 0);
 $368 = $362 | $366;
 $369 = $363 | $367;
 $370 = (_bitshift64Lshr(($368|0),($369|0),7)|0);
 $371 = (getTempRet0() | 0);
 $372 = (_i64Subtract(($9|0),($3|0),($195|0),($189|0))|0);
 $373 = (getTempRet0() | 0);
 $374 = (_i64Subtract(($29|0),0,($215|0),0)|0);
 $375 = (getTempRet0() | 0);
 $376 = (_i64Subtract(($41|0),0,($227|0),0)|0);
 $377 = (getTempRet0() | 0);
 $378 = (_i64Subtract(($61|0),0,($247|0),0)|0);
 $379 = (getTempRet0() | 0);
 $380 = (_i64Subtract(($81|0),0,($267|0),0)|0);
 $381 = (getTempRet0() | 0);
 $382 = (_i64Subtract(($93|0),0,($279|0),0)|0);
 $383 = (getTempRet0() | 0);
 $384 = (_i64Subtract(($113|0),0,($299|0),0)|0);
 $385 = (getTempRet0() | 0);
 $386 = (_i64Subtract(($123|0),($124|0),($309|0),($310|0))|0);
 $387 = (getTempRet0() | 0);
 $388 = (_i64Subtract(($134|0),($128|0),($320|0),($314|0))|0);
 $389 = (getTempRet0() | 0);
 $390 = (_i64Subtract(($154|0),0,($340|0),0)|0);
 $391 = (getTempRet0() | 0);
 $392 = (_i64Subtract(($166|0),0,($352|0),0)|0);
 $393 = (getTempRet0() | 0);
 $394 = (_i64Subtract(($184|0),($185|0),($370|0),($371|0))|0);
 $395 = (getTempRet0() | 0);
 $396 = (_i64Add(($372|0),($373|0),1048576,0)|0);
 $397 = (getTempRet0() | 0);
 $398 = (_bitshift64Ashr(($396|0),($397|0),21)|0);
 $399 = (getTempRet0() | 0);
 $400 = (_i64Add(($374|0),($375|0),($398|0),($399|0))|0);
 $401 = (getTempRet0() | 0);
 $402 = $396 & -2097152;
 $403 = (_i64Subtract(($372|0),($373|0),($402|0),($397|0))|0);
 $404 = (getTempRet0() | 0);
 $405 = (_i64Add(($376|0),($377|0),1048576,0)|0);
 $406 = (getTempRet0() | 0);
 $407 = (_bitshift64Ashr(($405|0),($406|0),21)|0);
 $408 = (getTempRet0() | 0);
 $409 = (_i64Add(($378|0),($379|0),($407|0),($408|0))|0);
 $410 = (getTempRet0() | 0);
 $411 = $405 & -2097152;
 $412 = (_i64Add(($380|0),($381|0),1048576,0)|0);
 $413 = (getTempRet0() | 0);
 $414 = (_bitshift64Ashr(($412|0),($413|0),21)|0);
 $415 = (getTempRet0() | 0);
 $416 = (_i64Add(($382|0),($383|0),($414|0),($415|0))|0);
 $417 = (getTempRet0() | 0);
 $418 = $412 & -2097152;
 $419 = (_i64Add(($384|0),($385|0),1048576,0)|0);
 $420 = (getTempRet0() | 0);
 $421 = (_bitshift64Ashr(($419|0),($420|0),21)|0);
 $422 = (getTempRet0() | 0);
 $423 = (_i64Add(($386|0),($387|0),($421|0),($422|0))|0);
 $424 = (getTempRet0() | 0);
 $425 = $419 & -2097152;
 $426 = (_i64Add(($388|0),($389|0),1048576,0)|0);
 $427 = (getTempRet0() | 0);
 $428 = (_bitshift64Ashr(($426|0),($427|0),21)|0);
 $429 = (getTempRet0() | 0);
 $430 = (_i64Add(($390|0),($391|0),($428|0),($429|0))|0);
 $431 = (getTempRet0() | 0);
 $432 = $426 & -2097152;
 $433 = (_i64Add(($392|0),($393|0),1048576,0)|0);
 $434 = (getTempRet0() | 0);
 $435 = (_bitshift64Ashr(($433|0),($434|0),21)|0);
 $436 = (getTempRet0() | 0);
 $437 = (_i64Add(($394|0),($395|0),($435|0),($436|0))|0);
 $438 = (getTempRet0() | 0);
 $439 = $433 & -2097152;
 $440 = (_i64Add(($400|0),($401|0),1048576,0)|0);
 $441 = (getTempRet0() | 0);
 $442 = (_bitshift64Ashr(($440|0),($441|0),21)|0);
 $443 = (getTempRet0() | 0);
 $444 = $440 & -2097152;
 $445 = (_i64Subtract(($400|0),($401|0),($444|0),($441|0))|0);
 $446 = (getTempRet0() | 0);
 $447 = (_i64Add(($409|0),($410|0),1048576,0)|0);
 $448 = (getTempRet0() | 0);
 $449 = (_bitshift64Ashr(($447|0),($448|0),21)|0);
 $450 = (getTempRet0() | 0);
 $451 = $447 & -2097152;
 $452 = (_i64Subtract(($409|0),($410|0),($451|0),($448|0))|0);
 $453 = (getTempRet0() | 0);
 $454 = (_i64Add(($416|0),($417|0),1048576,0)|0);
 $455 = (getTempRet0() | 0);
 $456 = (_bitshift64Ashr(($454|0),($455|0),21)|0);
 $457 = (getTempRet0() | 0);
 $458 = $454 & -2097152;
 $459 = (_i64Subtract(($416|0),($417|0),($458|0),($455|0))|0);
 $460 = (getTempRet0() | 0);
 $461 = (_i64Add(($423|0),($424|0),1048576,0)|0);
 $462 = (getTempRet0() | 0);
 $463 = (_bitshift64Ashr(($461|0),($462|0),21)|0);
 $464 = (getTempRet0() | 0);
 $465 = $461 & -2097152;
 $466 = (_i64Subtract(($423|0),($424|0),($465|0),($462|0))|0);
 $467 = (getTempRet0() | 0);
 $468 = (_i64Add(($430|0),($431|0),1048576,0)|0);
 $469 = (getTempRet0() | 0);
 $470 = (_bitshift64Ashr(($468|0),($469|0),21)|0);
 $471 = (getTempRet0() | 0);
 $472 = $468 & -2097152;
 $473 = (_i64Subtract(($430|0),($431|0),($472|0),($469|0))|0);
 $474 = (getTempRet0() | 0);
 $475 = (_i64Add(($437|0),($438|0),1048576,0)|0);
 $476 = (getTempRet0() | 0);
 $477 = (_bitshift64Ashr(($475|0),($476|0),21)|0);
 $478 = (getTempRet0() | 0);
 $479 = $475 & -2097152;
 $480 = (_i64Subtract(($437|0),($438|0),($479|0),($476|0))|0);
 $481 = (getTempRet0() | 0);
 $482 = (___muldi3(($477|0),($478|0),666643,0)|0);
 $483 = (getTempRet0() | 0);
 $484 = (_i64Add(($482|0),($483|0),($403|0),($404|0))|0);
 $485 = (getTempRet0() | 0);
 $486 = (___muldi3(($477|0),($478|0),470296,0)|0);
 $487 = (getTempRet0() | 0);
 $488 = (_i64Add(($445|0),($446|0),($486|0),($487|0))|0);
 $489 = (getTempRet0() | 0);
 $490 = (___muldi3(($477|0),($478|0),654183,0)|0);
 $491 = (getTempRet0() | 0);
 $492 = (___muldi3(($477|0),($478|0),-997805,-1)|0);
 $493 = (getTempRet0() | 0);
 $494 = (_i64Add(($452|0),($453|0),($492|0),($493|0))|0);
 $495 = (getTempRet0() | 0);
 $496 = (___muldi3(($477|0),($478|0),136657,0)|0);
 $497 = (getTempRet0() | 0);
 $498 = (___muldi3(($477|0),($478|0),-683901,-1)|0);
 $499 = (getTempRet0() | 0);
 $500 = (_i64Add(($459|0),($460|0),($498|0),($499|0))|0);
 $501 = (getTempRet0() | 0);
 $502 = (_bitshift64Ashr(($484|0),($485|0),21)|0);
 $503 = (getTempRet0() | 0);
 $504 = (_i64Add(($488|0),($489|0),($502|0),($503|0))|0);
 $505 = (getTempRet0() | 0);
 $506 = $484 & 2097151;
 $507 = (_bitshift64Ashr(($504|0),($505|0),21)|0);
 $508 = (getTempRet0() | 0);
 $509 = (_i64Add(($442|0),($443|0),($376|0),($377|0))|0);
 $510 = (getTempRet0() | 0);
 $511 = (_i64Subtract(($509|0),($510|0),($411|0),($406|0))|0);
 $512 = (getTempRet0() | 0);
 $513 = (_i64Add(($511|0),($512|0),($490|0),($491|0))|0);
 $514 = (getTempRet0() | 0);
 $515 = (_i64Add(($513|0),($514|0),($507|0),($508|0))|0);
 $516 = (getTempRet0() | 0);
 $517 = $504 & 2097151;
 $518 = (_bitshift64Ashr(($515|0),($516|0),21)|0);
 $519 = (getTempRet0() | 0);
 $520 = (_i64Add(($494|0),($495|0),($518|0),($519|0))|0);
 $521 = (getTempRet0() | 0);
 $522 = $515 & 2097151;
 $523 = (_bitshift64Ashr(($520|0),($521|0),21)|0);
 $524 = (getTempRet0() | 0);
 $525 = (_i64Add(($380|0),($381|0),($449|0),($450|0))|0);
 $526 = (getTempRet0() | 0);
 $527 = (_i64Subtract(($525|0),($526|0),($418|0),($413|0))|0);
 $528 = (getTempRet0() | 0);
 $529 = (_i64Add(($527|0),($528|0),($496|0),($497|0))|0);
 $530 = (getTempRet0() | 0);
 $531 = (_i64Add(($529|0),($530|0),($523|0),($524|0))|0);
 $532 = (getTempRet0() | 0);
 $533 = $520 & 2097151;
 $534 = (_bitshift64Ashr(($531|0),($532|0),21)|0);
 $535 = (getTempRet0() | 0);
 $536 = (_i64Add(($500|0),($501|0),($534|0),($535|0))|0);
 $537 = (getTempRet0() | 0);
 $538 = $531 & 2097151;
 $539 = (_bitshift64Ashr(($536|0),($537|0),21)|0);
 $540 = (getTempRet0() | 0);
 $541 = (_i64Add(($384|0),($385|0),($456|0),($457|0))|0);
 $542 = (getTempRet0() | 0);
 $543 = (_i64Subtract(($541|0),($542|0),($425|0),($420|0))|0);
 $544 = (getTempRet0() | 0);
 $545 = (_i64Add(($543|0),($544|0),($539|0),($540|0))|0);
 $546 = (getTempRet0() | 0);
 $547 = $536 & 2097151;
 $548 = (_bitshift64Ashr(($545|0),($546|0),21)|0);
 $549 = (getTempRet0() | 0);
 $550 = (_i64Add(($548|0),($549|0),($466|0),($467|0))|0);
 $551 = (getTempRet0() | 0);
 $552 = $545 & 2097151;
 $553 = (_bitshift64Ashr(($550|0),($551|0),21)|0);
 $554 = (getTempRet0() | 0);
 $555 = (_i64Add(($463|0),($464|0),($388|0),($389|0))|0);
 $556 = (getTempRet0() | 0);
 $557 = (_i64Subtract(($555|0),($556|0),($432|0),($427|0))|0);
 $558 = (getTempRet0() | 0);
 $559 = (_i64Add(($557|0),($558|0),($553|0),($554|0))|0);
 $560 = (getTempRet0() | 0);
 $561 = $550 & 2097151;
 $562 = (_bitshift64Ashr(($559|0),($560|0),21)|0);
 $563 = (getTempRet0() | 0);
 $564 = (_i64Add(($562|0),($563|0),($473|0),($474|0))|0);
 $565 = (getTempRet0() | 0);
 $566 = $559 & 2097151;
 $567 = (_bitshift64Ashr(($564|0),($565|0),21)|0);
 $568 = (getTempRet0() | 0);
 $569 = (_i64Add(($470|0),($471|0),($392|0),($393|0))|0);
 $570 = (getTempRet0() | 0);
 $571 = (_i64Subtract(($569|0),($570|0),($439|0),($434|0))|0);
 $572 = (getTempRet0() | 0);
 $573 = (_i64Add(($571|0),($572|0),($567|0),($568|0))|0);
 $574 = (getTempRet0() | 0);
 $575 = $564 & 2097151;
 $576 = (_bitshift64Ashr(($573|0),($574|0),21)|0);
 $577 = (getTempRet0() | 0);
 $578 = (_i64Add(($576|0),($577|0),($480|0),($481|0))|0);
 $579 = (getTempRet0() | 0);
 $580 = $573 & 2097151;
 $581 = (_bitshift64Ashr(($578|0),($579|0),21)|0);
 $582 = (getTempRet0() | 0);
 $583 = $578 & 2097151;
 $584 = (___muldi3(($581|0),($582|0),666643,0)|0);
 $585 = (getTempRet0() | 0);
 $586 = (_i64Add(($584|0),($585|0),($506|0),0)|0);
 $587 = (getTempRet0() | 0);
 $588 = (___muldi3(($581|0),($582|0),470296,0)|0);
 $589 = (getTempRet0() | 0);
 $590 = (_i64Add(($588|0),($589|0),($517|0),0)|0);
 $591 = (getTempRet0() | 0);
 $592 = (___muldi3(($581|0),($582|0),654183,0)|0);
 $593 = (getTempRet0() | 0);
 $594 = (_i64Add(($592|0),($593|0),($522|0),0)|0);
 $595 = (getTempRet0() | 0);
 $596 = (___muldi3(($581|0),($582|0),-997805,-1)|0);
 $597 = (getTempRet0() | 0);
 $598 = (_i64Add(($596|0),($597|0),($533|0),0)|0);
 $599 = (getTempRet0() | 0);
 $600 = (___muldi3(($581|0),($582|0),136657,0)|0);
 $601 = (getTempRet0() | 0);
 $602 = (_i64Add(($600|0),($601|0),($538|0),0)|0);
 $603 = (getTempRet0() | 0);
 $604 = (___muldi3(($581|0),($582|0),-683901,-1)|0);
 $605 = (getTempRet0() | 0);
 $606 = (_i64Add(($604|0),($605|0),($547|0),0)|0);
 $607 = (getTempRet0() | 0);
 $608 = (_bitshift64Ashr(($586|0),($587|0),21)|0);
 $609 = (getTempRet0() | 0);
 $610 = (_i64Add(($590|0),($591|0),($608|0),($609|0))|0);
 $611 = (getTempRet0() | 0);
 $612 = (_bitshift64Ashr(($610|0),($611|0),21)|0);
 $613 = (getTempRet0() | 0);
 $614 = (_i64Add(($594|0),($595|0),($612|0),($613|0))|0);
 $615 = (getTempRet0() | 0);
 $616 = $610 & 2097151;
 $617 = (_bitshift64Ashr(($614|0),($615|0),21)|0);
 $618 = (getTempRet0() | 0);
 $619 = (_i64Add(($598|0),($599|0),($617|0),($618|0))|0);
 $620 = (getTempRet0() | 0);
 $621 = $614 & 2097151;
 $622 = (_bitshift64Ashr(($619|0),($620|0),21)|0);
 $623 = (getTempRet0() | 0);
 $624 = (_i64Add(($602|0),($603|0),($622|0),($623|0))|0);
 $625 = (getTempRet0() | 0);
 $626 = $619 & 2097151;
 $627 = (_bitshift64Ashr(($624|0),($625|0),21)|0);
 $628 = (getTempRet0() | 0);
 $629 = (_i64Add(($606|0),($607|0),($627|0),($628|0))|0);
 $630 = (getTempRet0() | 0);
 $631 = $624 & 2097151;
 $632 = (_bitshift64Ashr(($629|0),($630|0),21)|0);
 $633 = (getTempRet0() | 0);
 $634 = (_i64Add(($632|0),($633|0),($552|0),0)|0);
 $635 = (getTempRet0() | 0);
 $636 = $629 & 2097151;
 $637 = (_bitshift64Ashr(($634|0),($635|0),21)|0);
 $638 = (getTempRet0() | 0);
 $639 = (_i64Add(($637|0),($638|0),($561|0),0)|0);
 $640 = (getTempRet0() | 0);
 $641 = $634 & 2097151;
 $642 = (_bitshift64Ashr(($639|0),($640|0),21)|0);
 $643 = (getTempRet0() | 0);
 $644 = (_i64Add(($642|0),($643|0),($566|0),0)|0);
 $645 = (getTempRet0() | 0);
 $646 = (_bitshift64Ashr(($644|0),($645|0),21)|0);
 $647 = (getTempRet0() | 0);
 $648 = (_i64Add(($646|0),($647|0),($575|0),0)|0);
 $649 = (getTempRet0() | 0);
 $650 = (_bitshift64Ashr(($648|0),($649|0),21)|0);
 $651 = (getTempRet0() | 0);
 $652 = (_i64Add(($650|0),($651|0),($580|0),0)|0);
 $653 = (getTempRet0() | 0);
 $654 = $648 & 2097151;
 $655 = (_bitshift64Ashr(($652|0),($653|0),21)|0);
 $656 = (getTempRet0() | 0);
 $657 = (_i64Add(($655|0),($656|0),($583|0),0)|0);
 $658 = (getTempRet0() | 0);
 $659 = $652 & 2097151;
 $660 = $586&255;
 HEAP8[$s>>0] = $660;
 $661 = (_bitshift64Lshr(($586|0),($587|0),8)|0);
 $662 = (getTempRet0() | 0);
 $663 = $661&255;
 $arrayidx272 = ((($s)) + 1|0);
 HEAP8[$arrayidx272>>0] = $663;
 $664 = (_bitshift64Lshr(($586|0),($587|0),16)|0);
 $665 = (getTempRet0() | 0);
 $666 = $664 & 31;
 $667 = (_bitshift64Shl(($616|0),0,5)|0);
 $668 = (getTempRet0() | 0);
 $669 = $667 | $666;
 $670 = $669&255;
 $arrayidx276 = ((($s)) + 2|0);
 HEAP8[$arrayidx276>>0] = $670;
 $671 = (_bitshift64Lshr(($610|0),($611|0),3)|0);
 $672 = (getTempRet0() | 0);
 $673 = $671&255;
 $arrayidx279 = ((($s)) + 3|0);
 HEAP8[$arrayidx279>>0] = $673;
 $674 = (_bitshift64Lshr(($610|0),($611|0),11)|0);
 $675 = (getTempRet0() | 0);
 $676 = $674&255;
 $arrayidx282 = ((($s)) + 4|0);
 HEAP8[$arrayidx282>>0] = $676;
 $677 = (_bitshift64Lshr(($616|0),0,19)|0);
 $678 = (getTempRet0() | 0);
 $679 = (_bitshift64Shl(($621|0),0,2)|0);
 $680 = (getTempRet0() | 0);
 $681 = $679 | $677;
 $680 | $678;
 $682 = $681&255;
 $arrayidx287 = ((($s)) + 5|0);
 HEAP8[$arrayidx287>>0] = $682;
 $683 = (_bitshift64Lshr(($614|0),($615|0),6)|0);
 $684 = (getTempRet0() | 0);
 $685 = $683&255;
 $arrayidx290 = ((($s)) + 6|0);
 HEAP8[$arrayidx290>>0] = $685;
 $686 = (_bitshift64Lshr(($621|0),0,14)|0);
 $687 = (getTempRet0() | 0);
 $688 = (_bitshift64Shl(($626|0),0,7)|0);
 $689 = (getTempRet0() | 0);
 $690 = $688 | $686;
 $689 | $687;
 $691 = $690&255;
 $arrayidx295 = ((($s)) + 7|0);
 HEAP8[$arrayidx295>>0] = $691;
 $692 = (_bitshift64Lshr(($619|0),($620|0),1)|0);
 $693 = (getTempRet0() | 0);
 $694 = $692&255;
 $arrayidx298 = ((($s)) + 8|0);
 HEAP8[$arrayidx298>>0] = $694;
 $695 = (_bitshift64Lshr(($619|0),($620|0),9)|0);
 $696 = (getTempRet0() | 0);
 $697 = $695&255;
 $arrayidx301 = ((($s)) + 9|0);
 HEAP8[$arrayidx301>>0] = $697;
 $698 = (_bitshift64Lshr(($626|0),0,17)|0);
 $699 = (getTempRet0() | 0);
 $700 = (_bitshift64Shl(($631|0),0,4)|0);
 $701 = (getTempRet0() | 0);
 $702 = $700 | $698;
 $701 | $699;
 $703 = $702&255;
 $arrayidx306 = ((($s)) + 10|0);
 HEAP8[$arrayidx306>>0] = $703;
 $704 = (_bitshift64Lshr(($624|0),($625|0),4)|0);
 $705 = (getTempRet0() | 0);
 $706 = $704&255;
 $arrayidx309 = ((($s)) + 11|0);
 HEAP8[$arrayidx309>>0] = $706;
 $707 = (_bitshift64Lshr(($624|0),($625|0),12)|0);
 $708 = (getTempRet0() | 0);
 $709 = $707&255;
 $arrayidx312 = ((($s)) + 12|0);
 HEAP8[$arrayidx312>>0] = $709;
 $710 = (_bitshift64Lshr(($631|0),0,20)|0);
 $711 = (getTempRet0() | 0);
 $712 = (_bitshift64Shl(($636|0),0,1)|0);
 $713 = (getTempRet0() | 0);
 $714 = $712 | $710;
 $713 | $711;
 $715 = $714&255;
 $arrayidx317 = ((($s)) + 13|0);
 HEAP8[$arrayidx317>>0] = $715;
 $716 = (_bitshift64Lshr(($629|0),($630|0),7)|0);
 $717 = (getTempRet0() | 0);
 $718 = $716&255;
 $arrayidx320 = ((($s)) + 14|0);
 HEAP8[$arrayidx320>>0] = $718;
 $719 = (_bitshift64Lshr(($636|0),0,15)|0);
 $720 = (getTempRet0() | 0);
 $721 = (_bitshift64Shl(($641|0),0,6)|0);
 $722 = (getTempRet0() | 0);
 $723 = $721 | $719;
 $722 | $720;
 $724 = $723&255;
 $arrayidx325 = ((($s)) + 15|0);
 HEAP8[$arrayidx325>>0] = $724;
 $725 = (_bitshift64Lshr(($634|0),($635|0),2)|0);
 $726 = (getTempRet0() | 0);
 $727 = $725&255;
 $arrayidx328 = ((($s)) + 16|0);
 HEAP8[$arrayidx328>>0] = $727;
 $728 = (_bitshift64Lshr(($634|0),($635|0),10)|0);
 $729 = (getTempRet0() | 0);
 $730 = $728&255;
 $arrayidx331 = ((($s)) + 17|0);
 HEAP8[$arrayidx331>>0] = $730;
 $731 = (_bitshift64Lshr(($641|0),0,18)|0);
 $732 = (getTempRet0() | 0);
 $733 = (_bitshift64Shl(($639|0),($640|0),3)|0);
 $734 = (getTempRet0() | 0);
 $735 = $733 | $731;
 $734 | $732;
 $736 = $735&255;
 $arrayidx336 = ((($s)) + 18|0);
 HEAP8[$arrayidx336>>0] = $736;
 $737 = (_bitshift64Lshr(($639|0),($640|0),5)|0);
 $738 = (getTempRet0() | 0);
 $739 = $737&255;
 $arrayidx339 = ((($s)) + 19|0);
 HEAP8[$arrayidx339>>0] = $739;
 $740 = (_bitshift64Lshr(($639|0),($640|0),13)|0);
 $741 = (getTempRet0() | 0);
 $742 = $740&255;
 $arrayidx342 = ((($s)) + 20|0);
 HEAP8[$arrayidx342>>0] = $742;
 $743 = $644&255;
 $arrayidx345 = ((($s)) + 21|0);
 HEAP8[$arrayidx345>>0] = $743;
 $744 = (_bitshift64Lshr(($644|0),($645|0),8)|0);
 $745 = (getTempRet0() | 0);
 $746 = $744&255;
 $arrayidx348 = ((($s)) + 22|0);
 HEAP8[$arrayidx348>>0] = $746;
 $747 = (_bitshift64Lshr(($644|0),($645|0),16)|0);
 $748 = (getTempRet0() | 0);
 $749 = $747 & 31;
 $750 = (_bitshift64Shl(($654|0),0,5)|0);
 $751 = (getTempRet0() | 0);
 $752 = $750 | $749;
 $753 = $752&255;
 $arrayidx353 = ((($s)) + 23|0);
 HEAP8[$arrayidx353>>0] = $753;
 $754 = (_bitshift64Lshr(($648|0),($649|0),3)|0);
 $755 = (getTempRet0() | 0);
 $756 = $754&255;
 $arrayidx356 = ((($s)) + 24|0);
 HEAP8[$arrayidx356>>0] = $756;
 $757 = (_bitshift64Lshr(($648|0),($649|0),11)|0);
 $758 = (getTempRet0() | 0);
 $759 = $757&255;
 $arrayidx359 = ((($s)) + 25|0);
 HEAP8[$arrayidx359>>0] = $759;
 $760 = (_bitshift64Lshr(($654|0),0,19)|0);
 $761 = (getTempRet0() | 0);
 $762 = (_bitshift64Shl(($659|0),0,2)|0);
 $763 = (getTempRet0() | 0);
 $764 = $762 | $760;
 $763 | $761;
 $765 = $764&255;
 $arrayidx364 = ((($s)) + 26|0);
 HEAP8[$arrayidx364>>0] = $765;
 $766 = (_bitshift64Lshr(($652|0),($653|0),6)|0);
 $767 = (getTempRet0() | 0);
 $768 = $766&255;
 $arrayidx367 = ((($s)) + 27|0);
 HEAP8[$arrayidx367>>0] = $768;
 $769 = (_bitshift64Lshr(($659|0),0,14)|0);
 $770 = (getTempRet0() | 0);
 $771 = (_bitshift64Shl(($657|0),($658|0),7)|0);
 $772 = (getTempRet0() | 0);
 $773 = $771 | $769;
 $772 | $770;
 $774 = $773&255;
 $arrayidx372 = ((($s)) + 28|0);
 HEAP8[$arrayidx372>>0] = $774;
 $775 = (_bitshift64Lshr(($657|0),($658|0),1)|0);
 $776 = (getTempRet0() | 0);
 $777 = $775&255;
 $arrayidx375 = ((($s)) + 29|0);
 HEAP8[$arrayidx375>>0] = $777;
 $778 = (_bitshift64Lshr(($657|0),($658|0),9)|0);
 $779 = (getTempRet0() | 0);
 $780 = $778&255;
 $arrayidx378 = ((($s)) + 30|0);
 HEAP8[$arrayidx378>>0] = $780;
 $781 = (_bitshift64Ashr(($657|0),($658|0),17)|0);
 $782 = (getTempRet0() | 0);
 $783 = $781&255;
 $arrayidx381 = ((($s)) + 31|0);
 HEAP8[$arrayidx381>>0] = $783;
 return;
}
function _sc_mulsub($s,$a,$b,$c) {
 $s = $s|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$idx = 0, $a$idx$val = 0, $a$idx937 = 0, $a$idx937$val = 0, $a$val = 0, $add$ptr103$idx = 0;
 var $add$ptr103$idx$val = 0, $add$ptr103$idx923 = 0, $add$ptr103$idx923$val = 0, $add$ptr111$idx = 0, $add$ptr111$idx$val = 0, $add$ptr111$idx922 = 0, $add$ptr111$idx922$val = 0, $add$ptr115 = 0, $add$ptr115$idx = 0, $add$ptr115$idx$val = 0, $add$ptr115$idx921 = 0, $add$ptr115$idx921$val = 0, $add$ptr115$val = 0, $add$ptr122$idx = 0, $add$ptr122$idx$val = 0, $add$ptr122$idx920 = 0, $add$ptr122$idx920$val = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx935 = 0;
 var $add$ptr15$idx935$val = 0, $add$ptr23$idx = 0, $add$ptr23$idx$val = 0, $add$ptr23$idx934 = 0, $add$ptr23$idx934$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx933 = 0, $add$ptr27$idx933$val = 0, $add$ptr27$val = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx936 = 0, $add$ptr3$idx936$val = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx932 = 0, $add$ptr34$idx932$val = 0, $add$ptr47$idx = 0;
 var $add$ptr47$idx$val = 0, $add$ptr47$idx930 = 0, $add$ptr47$idx930$val = 0, $add$ptr59$idx = 0, $add$ptr59$idx$val = 0, $add$ptr59$idx929 = 0, $add$ptr59$idx929$val = 0, $add$ptr67$idx = 0, $add$ptr67$idx$val = 0, $add$ptr67$idx928 = 0, $add$ptr67$idx928$val = 0, $add$ptr71 = 0, $add$ptr71$idx = 0, $add$ptr71$idx$val = 0, $add$ptr71$idx927 = 0, $add$ptr71$idx927$val = 0, $add$ptr71$val = 0, $add$ptr78$idx = 0, $add$ptr78$idx$val = 0, $add$ptr78$idx926 = 0;
 var $add$ptr78$idx926$val = 0, $add$ptr91$idx = 0, $add$ptr91$idx$val = 0, $add$ptr91$idx924 = 0, $add$ptr91$idx924$val = 0, $arrayidx1$i = 0, $arrayidx1$i1000 = 0, $arrayidx1$i1013 = 0, $arrayidx1$i1033 = 0, $arrayidx1$i1053 = 0, $arrayidx1$i1073 = 0, $arrayidx1$i1100 = 0, $arrayidx1$i1120 = 0, $arrayidx1$i1133 = 0, $arrayidx1$i1153 = 0, $arrayidx1$i1173 = 0, $arrayidx1$i1193 = 0, $arrayidx1$i1220 = 0, $arrayidx1$i1240 = 0, $arrayidx1$i1253 = 0;
 var $arrayidx1$i1273 = 0, $arrayidx1$i953 = 0, $arrayidx1$i980 = 0, $arrayidx1001 = 0, $arrayidx1006 = 0, $arrayidx1009 = 0, $arrayidx1012 = 0, $arrayidx1015 = 0, $arrayidx3$i = 0, $arrayidx3$i1004 = 0, $arrayidx3$i1017 = 0, $arrayidx3$i1037 = 0, $arrayidx3$i1057 = 0, $arrayidx3$i1077 = 0, $arrayidx3$i1104 = 0, $arrayidx3$i1124 = 0, $arrayidx3$i1137 = 0, $arrayidx3$i1157 = 0, $arrayidx3$i1177 = 0, $arrayidx3$i1197 = 0;
 var $arrayidx3$i1224 = 0, $arrayidx3$i1244 = 0, $arrayidx3$i1257 = 0, $arrayidx3$i1277 = 0, $arrayidx3$i957 = 0, $arrayidx3$i984 = 0, $arrayidx7$i = 0, $arrayidx7$i1008 = 0, $arrayidx7$i1021 = 0, $arrayidx7$i1041 = 0, $arrayidx7$i1061 = 0, $arrayidx7$i1081 = 0, $arrayidx7$i1108 = 0, $arrayidx7$i1128 = 0, $arrayidx7$i1141 = 0, $arrayidx7$i1161 = 0, $arrayidx7$i1181 = 0, $arrayidx7$i1201 = 0, $arrayidx7$i1228 = 0, $arrayidx7$i1248 = 0;
 var $arrayidx7$i1261 = 0, $arrayidx7$i1281 = 0, $arrayidx7$i961 = 0, $arrayidx7$i988 = 0, $arrayidx906 = 0, $arrayidx910 = 0, $arrayidx913 = 0, $arrayidx916 = 0, $arrayidx921 = 0, $arrayidx924 = 0, $arrayidx929 = 0, $arrayidx932 = 0, $arrayidx935 = 0, $arrayidx940 = 0, $arrayidx943 = 0, $arrayidx946 = 0, $arrayidx951 = 0, $arrayidx954 = 0, $arrayidx959 = 0, $arrayidx962 = 0;
 var $arrayidx965 = 0, $arrayidx970 = 0, $arrayidx973 = 0, $arrayidx976 = 0, $arrayidx979 = 0, $arrayidx982 = 0, $arrayidx987 = 0, $arrayidx990 = 0, $arrayidx993 = 0, $arrayidx998 = 0, $b$idx = 0, $b$idx$val = 0, $b$idx931 = 0, $b$idx931$val = 0, $b$val = 0, $c$idx = 0, $c$idx$val = 0, $c$idx925 = 0, $c$idx925$val = 0, $c$val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $a$val = HEAP8[$a>>0]|0;
 $a$idx = ((($a)) + 1|0);
 $a$idx$val = HEAP8[$a$idx>>0]|0;
 $a$idx937 = ((($a)) + 2|0);
 $a$idx937$val = HEAP8[$a$idx937>>0]|0;
 $0 = $a$val&255;
 $1 = $a$idx$val&255;
 $2 = (_bitshift64Shl(($1|0),0,8)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2 | $0;
 $5 = $a$idx937$val&255;
 $6 = (_bitshift64Shl(($5|0),0,16)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2031616;
 $9 = $4 | $8;
 $arrayidx1$i1273 = ((($a)) + 3|0);
 $10 = HEAP8[$arrayidx1$i1273>>0]|0;
 $11 = $10&255;
 $12 = (_bitshift64Shl(($11|0),0,8)|0);
 $13 = (getTempRet0() | 0);
 $14 = $12 | $5;
 $arrayidx3$i1277 = ((($a)) + 4|0);
 $15 = HEAP8[$arrayidx3$i1277>>0]|0;
 $16 = $15&255;
 $17 = (_bitshift64Shl(($16|0),0,16)|0);
 $18 = (getTempRet0() | 0);
 $19 = $14 | $17;
 $20 = $13 | $18;
 $arrayidx7$i1281 = ((($a)) + 5|0);
 $21 = HEAP8[$arrayidx7$i1281>>0]|0;
 $22 = $21&255;
 $23 = (_bitshift64Shl(($22|0),0,24)|0);
 $24 = (getTempRet0() | 0);
 $25 = $19 | $23;
 $26 = $20 | $24;
 $27 = (_bitshift64Lshr(($25|0),($26|0),5)|0);
 $28 = (getTempRet0() | 0);
 $29 = $27 & 2097151;
 $add$ptr3$idx = ((($a)) + 6|0);
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx>>0]|0;
 $add$ptr3$idx936 = ((($a)) + 7|0);
 $add$ptr3$idx936$val = HEAP8[$add$ptr3$idx936>>0]|0;
 $30 = $add$ptr3$idx$val&255;
 $31 = (_bitshift64Shl(($30|0),0,8)|0);
 $32 = (getTempRet0() | 0);
 $33 = $31 | $22;
 $34 = $add$ptr3$idx936$val&255;
 $35 = (_bitshift64Shl(($34|0),0,16)|0);
 $36 = (getTempRet0() | 0);
 $37 = $33 | $35;
 $38 = $32 | $36;
 $39 = (_bitshift64Lshr(($37|0),($38|0),2)|0);
 $40 = (getTempRet0() | 0);
 $41 = $39 & 2097151;
 $arrayidx1$i1253 = ((($a)) + 8|0);
 $42 = HEAP8[$arrayidx1$i1253>>0]|0;
 $43 = $42&255;
 $44 = (_bitshift64Shl(($43|0),0,8)|0);
 $45 = (getTempRet0() | 0);
 $46 = $44 | $34;
 $arrayidx3$i1257 = ((($a)) + 9|0);
 $47 = HEAP8[$arrayidx3$i1257>>0]|0;
 $48 = $47&255;
 $49 = (_bitshift64Shl(($48|0),0,16)|0);
 $50 = (getTempRet0() | 0);
 $51 = $46 | $49;
 $52 = $45 | $50;
 $arrayidx7$i1261 = ((($a)) + 10|0);
 $53 = HEAP8[$arrayidx7$i1261>>0]|0;
 $54 = $53&255;
 $55 = (_bitshift64Shl(($54|0),0,24)|0);
 $56 = (getTempRet0() | 0);
 $57 = $51 | $55;
 $58 = $52 | $56;
 $59 = (_bitshift64Lshr(($57|0),($58|0),7)|0);
 $60 = (getTempRet0() | 0);
 $61 = $59 & 2097151;
 $arrayidx1$i1240 = ((($a)) + 11|0);
 $62 = HEAP8[$arrayidx1$i1240>>0]|0;
 $63 = $62&255;
 $64 = (_bitshift64Shl(($63|0),0,8)|0);
 $65 = (getTempRet0() | 0);
 $66 = $64 | $54;
 $arrayidx3$i1244 = ((($a)) + 12|0);
 $67 = HEAP8[$arrayidx3$i1244>>0]|0;
 $68 = $67&255;
 $69 = (_bitshift64Shl(($68|0),0,16)|0);
 $70 = (getTempRet0() | 0);
 $71 = $66 | $69;
 $72 = $65 | $70;
 $arrayidx7$i1248 = ((($a)) + 13|0);
 $73 = HEAP8[$arrayidx7$i1248>>0]|0;
 $74 = $73&255;
 $75 = (_bitshift64Shl(($74|0),0,24)|0);
 $76 = (getTempRet0() | 0);
 $77 = $71 | $75;
 $78 = $72 | $76;
 $79 = (_bitshift64Lshr(($77|0),($78|0),4)|0);
 $80 = (getTempRet0() | 0);
 $81 = $79 & 2097151;
 $add$ptr15$idx = ((($a)) + 14|0);
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx>>0]|0;
 $add$ptr15$idx935 = ((($a)) + 15|0);
 $add$ptr15$idx935$val = HEAP8[$add$ptr15$idx935>>0]|0;
 $82 = $add$ptr15$idx$val&255;
 $83 = (_bitshift64Shl(($82|0),0,8)|0);
 $84 = (getTempRet0() | 0);
 $85 = $83 | $74;
 $86 = $add$ptr15$idx935$val&255;
 $87 = (_bitshift64Shl(($86|0),0,16)|0);
 $88 = (getTempRet0() | 0);
 $89 = $85 | $87;
 $90 = $84 | $88;
 $91 = (_bitshift64Lshr(($89|0),($90|0),1)|0);
 $92 = (getTempRet0() | 0);
 $93 = $91 & 2097151;
 $arrayidx1$i1220 = ((($a)) + 16|0);
 $94 = HEAP8[$arrayidx1$i1220>>0]|0;
 $95 = $94&255;
 $96 = (_bitshift64Shl(($95|0),0,8)|0);
 $97 = (getTempRet0() | 0);
 $98 = $96 | $86;
 $arrayidx3$i1224 = ((($a)) + 17|0);
 $99 = HEAP8[$arrayidx3$i1224>>0]|0;
 $100 = $99&255;
 $101 = (_bitshift64Shl(($100|0),0,16)|0);
 $102 = (getTempRet0() | 0);
 $103 = $98 | $101;
 $104 = $97 | $102;
 $arrayidx7$i1228 = ((($a)) + 18|0);
 $105 = HEAP8[$arrayidx7$i1228>>0]|0;
 $106 = $105&255;
 $107 = (_bitshift64Shl(($106|0),0,24)|0);
 $108 = (getTempRet0() | 0);
 $109 = $103 | $107;
 $110 = $104 | $108;
 $111 = (_bitshift64Lshr(($109|0),($110|0),6)|0);
 $112 = (getTempRet0() | 0);
 $113 = $111 & 2097151;
 $add$ptr23$idx = ((($a)) + 19|0);
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx>>0]|0;
 $add$ptr23$idx934 = ((($a)) + 20|0);
 $add$ptr23$idx934$val = HEAP8[$add$ptr23$idx934>>0]|0;
 $114 = $add$ptr23$idx$val&255;
 $115 = (_bitshift64Shl(($114|0),0,8)|0);
 $116 = (getTempRet0() | 0);
 $117 = $115 | $106;
 $118 = $add$ptr23$idx934$val&255;
 $119 = (_bitshift64Shl(($118|0),0,16)|0);
 $120 = (getTempRet0() | 0);
 $121 = $117 | $119;
 $122 = $116 | $120;
 $123 = (_bitshift64Lshr(($121|0),($122|0),3)|0);
 $124 = (getTempRet0() | 0);
 $add$ptr27 = ((($a)) + 21|0);
 $add$ptr27$val = HEAP8[$add$ptr27>>0]|0;
 $add$ptr27$idx = ((($a)) + 22|0);
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx>>0]|0;
 $add$ptr27$idx933 = ((($a)) + 23|0);
 $add$ptr27$idx933$val = HEAP8[$add$ptr27$idx933>>0]|0;
 $125 = $add$ptr27$val&255;
 $126 = $add$ptr27$idx$val&255;
 $127 = (_bitshift64Shl(($126|0),0,8)|0);
 $128 = (getTempRet0() | 0);
 $129 = $127 | $125;
 $130 = $add$ptr27$idx933$val&255;
 $131 = (_bitshift64Shl(($130|0),0,16)|0);
 $132 = (getTempRet0() | 0);
 $133 = $131 & 2031616;
 $134 = $129 | $133;
 $arrayidx1$i1193 = ((($a)) + 24|0);
 $135 = HEAP8[$arrayidx1$i1193>>0]|0;
 $136 = $135&255;
 $137 = (_bitshift64Shl(($136|0),0,8)|0);
 $138 = (getTempRet0() | 0);
 $139 = $137 | $130;
 $arrayidx3$i1197 = ((($a)) + 25|0);
 $140 = HEAP8[$arrayidx3$i1197>>0]|0;
 $141 = $140&255;
 $142 = (_bitshift64Shl(($141|0),0,16)|0);
 $143 = (getTempRet0() | 0);
 $144 = $139 | $142;
 $145 = $138 | $143;
 $arrayidx7$i1201 = ((($a)) + 26|0);
 $146 = HEAP8[$arrayidx7$i1201>>0]|0;
 $147 = $146&255;
 $148 = (_bitshift64Shl(($147|0),0,24)|0);
 $149 = (getTempRet0() | 0);
 $150 = $144 | $148;
 $151 = $145 | $149;
 $152 = (_bitshift64Lshr(($150|0),($151|0),5)|0);
 $153 = (getTempRet0() | 0);
 $154 = $152 & 2097151;
 $add$ptr34$idx = ((($a)) + 27|0);
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx>>0]|0;
 $add$ptr34$idx932 = ((($a)) + 28|0);
 $add$ptr34$idx932$val = HEAP8[$add$ptr34$idx932>>0]|0;
 $155 = $add$ptr34$idx$val&255;
 $156 = (_bitshift64Shl(($155|0),0,8)|0);
 $157 = (getTempRet0() | 0);
 $158 = $156 | $147;
 $159 = $add$ptr34$idx932$val&255;
 $160 = (_bitshift64Shl(($159|0),0,16)|0);
 $161 = (getTempRet0() | 0);
 $162 = $158 | $160;
 $163 = $157 | $161;
 $164 = (_bitshift64Lshr(($162|0),($163|0),2)|0);
 $165 = (getTempRet0() | 0);
 $166 = $164 & 2097151;
 $arrayidx1$i1173 = ((($a)) + 29|0);
 $167 = HEAP8[$arrayidx1$i1173>>0]|0;
 $168 = $167&255;
 $169 = (_bitshift64Shl(($168|0),0,8)|0);
 $170 = (getTempRet0() | 0);
 $171 = $169 | $159;
 $arrayidx3$i1177 = ((($a)) + 30|0);
 $172 = HEAP8[$arrayidx3$i1177>>0]|0;
 $173 = $172&255;
 $174 = (_bitshift64Shl(($173|0),0,16)|0);
 $175 = (getTempRet0() | 0);
 $176 = $171 | $174;
 $177 = $170 | $175;
 $arrayidx7$i1181 = ((($a)) + 31|0);
 $178 = HEAP8[$arrayidx7$i1181>>0]|0;
 $179 = $178&255;
 $180 = (_bitshift64Shl(($179|0),0,24)|0);
 $181 = (getTempRet0() | 0);
 $182 = $176 | $180;
 $183 = $177 | $181;
 $184 = (_bitshift64Lshr(($182|0),($183|0),7)|0);
 $185 = (getTempRet0() | 0);
 $b$val = HEAP8[$b>>0]|0;
 $b$idx = ((($b)) + 1|0);
 $b$idx$val = HEAP8[$b$idx>>0]|0;
 $b$idx931 = ((($b)) + 2|0);
 $b$idx931$val = HEAP8[$b$idx931>>0]|0;
 $186 = $b$val&255;
 $187 = $b$idx$val&255;
 $188 = (_bitshift64Shl(($187|0),0,8)|0);
 $189 = (getTempRet0() | 0);
 $190 = $188 | $186;
 $191 = $b$idx931$val&255;
 $192 = (_bitshift64Shl(($191|0),0,16)|0);
 $193 = (getTempRet0() | 0);
 $194 = $192 & 2031616;
 $195 = $190 | $194;
 $arrayidx1$i1153 = ((($b)) + 3|0);
 $196 = HEAP8[$arrayidx1$i1153>>0]|0;
 $197 = $196&255;
 $198 = (_bitshift64Shl(($197|0),0,8)|0);
 $199 = (getTempRet0() | 0);
 $200 = $198 | $191;
 $arrayidx3$i1157 = ((($b)) + 4|0);
 $201 = HEAP8[$arrayidx3$i1157>>0]|0;
 $202 = $201&255;
 $203 = (_bitshift64Shl(($202|0),0,16)|0);
 $204 = (getTempRet0() | 0);
 $205 = $200 | $203;
 $206 = $199 | $204;
 $arrayidx7$i1161 = ((($b)) + 5|0);
 $207 = HEAP8[$arrayidx7$i1161>>0]|0;
 $208 = $207&255;
 $209 = (_bitshift64Shl(($208|0),0,24)|0);
 $210 = (getTempRet0() | 0);
 $211 = $205 | $209;
 $212 = $206 | $210;
 $213 = (_bitshift64Lshr(($211|0),($212|0),5)|0);
 $214 = (getTempRet0() | 0);
 $215 = $213 & 2097151;
 $add$ptr47$idx = ((($b)) + 6|0);
 $add$ptr47$idx$val = HEAP8[$add$ptr47$idx>>0]|0;
 $add$ptr47$idx930 = ((($b)) + 7|0);
 $add$ptr47$idx930$val = HEAP8[$add$ptr47$idx930>>0]|0;
 $216 = $add$ptr47$idx$val&255;
 $217 = (_bitshift64Shl(($216|0),0,8)|0);
 $218 = (getTempRet0() | 0);
 $219 = $217 | $208;
 $220 = $add$ptr47$idx930$val&255;
 $221 = (_bitshift64Shl(($220|0),0,16)|0);
 $222 = (getTempRet0() | 0);
 $223 = $219 | $221;
 $224 = $218 | $222;
 $225 = (_bitshift64Lshr(($223|0),($224|0),2)|0);
 $226 = (getTempRet0() | 0);
 $227 = $225 & 2097151;
 $arrayidx1$i1133 = ((($b)) + 8|0);
 $228 = HEAP8[$arrayidx1$i1133>>0]|0;
 $229 = $228&255;
 $230 = (_bitshift64Shl(($229|0),0,8)|0);
 $231 = (getTempRet0() | 0);
 $232 = $230 | $220;
 $arrayidx3$i1137 = ((($b)) + 9|0);
 $233 = HEAP8[$arrayidx3$i1137>>0]|0;
 $234 = $233&255;
 $235 = (_bitshift64Shl(($234|0),0,16)|0);
 $236 = (getTempRet0() | 0);
 $237 = $232 | $235;
 $238 = $231 | $236;
 $arrayidx7$i1141 = ((($b)) + 10|0);
 $239 = HEAP8[$arrayidx7$i1141>>0]|0;
 $240 = $239&255;
 $241 = (_bitshift64Shl(($240|0),0,24)|0);
 $242 = (getTempRet0() | 0);
 $243 = $237 | $241;
 $244 = $238 | $242;
 $245 = (_bitshift64Lshr(($243|0),($244|0),7)|0);
 $246 = (getTempRet0() | 0);
 $247 = $245 & 2097151;
 $arrayidx1$i1120 = ((($b)) + 11|0);
 $248 = HEAP8[$arrayidx1$i1120>>0]|0;
 $249 = $248&255;
 $250 = (_bitshift64Shl(($249|0),0,8)|0);
 $251 = (getTempRet0() | 0);
 $252 = $250 | $240;
 $arrayidx3$i1124 = ((($b)) + 12|0);
 $253 = HEAP8[$arrayidx3$i1124>>0]|0;
 $254 = $253&255;
 $255 = (_bitshift64Shl(($254|0),0,16)|0);
 $256 = (getTempRet0() | 0);
 $257 = $252 | $255;
 $258 = $251 | $256;
 $arrayidx7$i1128 = ((($b)) + 13|0);
 $259 = HEAP8[$arrayidx7$i1128>>0]|0;
 $260 = $259&255;
 $261 = (_bitshift64Shl(($260|0),0,24)|0);
 $262 = (getTempRet0() | 0);
 $263 = $257 | $261;
 $264 = $258 | $262;
 $265 = (_bitshift64Lshr(($263|0),($264|0),4)|0);
 $266 = (getTempRet0() | 0);
 $267 = $265 & 2097151;
 $add$ptr59$idx = ((($b)) + 14|0);
 $add$ptr59$idx$val = HEAP8[$add$ptr59$idx>>0]|0;
 $add$ptr59$idx929 = ((($b)) + 15|0);
 $add$ptr59$idx929$val = HEAP8[$add$ptr59$idx929>>0]|0;
 $268 = $add$ptr59$idx$val&255;
 $269 = (_bitshift64Shl(($268|0),0,8)|0);
 $270 = (getTempRet0() | 0);
 $271 = $269 | $260;
 $272 = $add$ptr59$idx929$val&255;
 $273 = (_bitshift64Shl(($272|0),0,16)|0);
 $274 = (getTempRet0() | 0);
 $275 = $271 | $273;
 $276 = $270 | $274;
 $277 = (_bitshift64Lshr(($275|0),($276|0),1)|0);
 $278 = (getTempRet0() | 0);
 $279 = $277 & 2097151;
 $arrayidx1$i1100 = ((($b)) + 16|0);
 $280 = HEAP8[$arrayidx1$i1100>>0]|0;
 $281 = $280&255;
 $282 = (_bitshift64Shl(($281|0),0,8)|0);
 $283 = (getTempRet0() | 0);
 $284 = $282 | $272;
 $arrayidx3$i1104 = ((($b)) + 17|0);
 $285 = HEAP8[$arrayidx3$i1104>>0]|0;
 $286 = $285&255;
 $287 = (_bitshift64Shl(($286|0),0,16)|0);
 $288 = (getTempRet0() | 0);
 $289 = $284 | $287;
 $290 = $283 | $288;
 $arrayidx7$i1108 = ((($b)) + 18|0);
 $291 = HEAP8[$arrayidx7$i1108>>0]|0;
 $292 = $291&255;
 $293 = (_bitshift64Shl(($292|0),0,24)|0);
 $294 = (getTempRet0() | 0);
 $295 = $289 | $293;
 $296 = $290 | $294;
 $297 = (_bitshift64Lshr(($295|0),($296|0),6)|0);
 $298 = (getTempRet0() | 0);
 $299 = $297 & 2097151;
 $add$ptr67$idx = ((($b)) + 19|0);
 $add$ptr67$idx$val = HEAP8[$add$ptr67$idx>>0]|0;
 $add$ptr67$idx928 = ((($b)) + 20|0);
 $add$ptr67$idx928$val = HEAP8[$add$ptr67$idx928>>0]|0;
 $300 = $add$ptr67$idx$val&255;
 $301 = (_bitshift64Shl(($300|0),0,8)|0);
 $302 = (getTempRet0() | 0);
 $303 = $301 | $292;
 $304 = $add$ptr67$idx928$val&255;
 $305 = (_bitshift64Shl(($304|0),0,16)|0);
 $306 = (getTempRet0() | 0);
 $307 = $303 | $305;
 $308 = $302 | $306;
 $309 = (_bitshift64Lshr(($307|0),($308|0),3)|0);
 $310 = (getTempRet0() | 0);
 $add$ptr71 = ((($b)) + 21|0);
 $add$ptr71$val = HEAP8[$add$ptr71>>0]|0;
 $add$ptr71$idx = ((($b)) + 22|0);
 $add$ptr71$idx$val = HEAP8[$add$ptr71$idx>>0]|0;
 $add$ptr71$idx927 = ((($b)) + 23|0);
 $add$ptr71$idx927$val = HEAP8[$add$ptr71$idx927>>0]|0;
 $311 = $add$ptr71$val&255;
 $312 = $add$ptr71$idx$val&255;
 $313 = (_bitshift64Shl(($312|0),0,8)|0);
 $314 = (getTempRet0() | 0);
 $315 = $313 | $311;
 $316 = $add$ptr71$idx927$val&255;
 $317 = (_bitshift64Shl(($316|0),0,16)|0);
 $318 = (getTempRet0() | 0);
 $319 = $317 & 2031616;
 $320 = $315 | $319;
 $arrayidx1$i1073 = ((($b)) + 24|0);
 $321 = HEAP8[$arrayidx1$i1073>>0]|0;
 $322 = $321&255;
 $323 = (_bitshift64Shl(($322|0),0,8)|0);
 $324 = (getTempRet0() | 0);
 $325 = $323 | $316;
 $arrayidx3$i1077 = ((($b)) + 25|0);
 $326 = HEAP8[$arrayidx3$i1077>>0]|0;
 $327 = $326&255;
 $328 = (_bitshift64Shl(($327|0),0,16)|0);
 $329 = (getTempRet0() | 0);
 $330 = $325 | $328;
 $331 = $324 | $329;
 $arrayidx7$i1081 = ((($b)) + 26|0);
 $332 = HEAP8[$arrayidx7$i1081>>0]|0;
 $333 = $332&255;
 $334 = (_bitshift64Shl(($333|0),0,24)|0);
 $335 = (getTempRet0() | 0);
 $336 = $330 | $334;
 $337 = $331 | $335;
 $338 = (_bitshift64Lshr(($336|0),($337|0),5)|0);
 $339 = (getTempRet0() | 0);
 $340 = $338 & 2097151;
 $add$ptr78$idx = ((($b)) + 27|0);
 $add$ptr78$idx$val = HEAP8[$add$ptr78$idx>>0]|0;
 $add$ptr78$idx926 = ((($b)) + 28|0);
 $add$ptr78$idx926$val = HEAP8[$add$ptr78$idx926>>0]|0;
 $341 = $add$ptr78$idx$val&255;
 $342 = (_bitshift64Shl(($341|0),0,8)|0);
 $343 = (getTempRet0() | 0);
 $344 = $342 | $333;
 $345 = $add$ptr78$idx926$val&255;
 $346 = (_bitshift64Shl(($345|0),0,16)|0);
 $347 = (getTempRet0() | 0);
 $348 = $344 | $346;
 $349 = $343 | $347;
 $350 = (_bitshift64Lshr(($348|0),($349|0),2)|0);
 $351 = (getTempRet0() | 0);
 $352 = $350 & 2097151;
 $arrayidx1$i1053 = ((($b)) + 29|0);
 $353 = HEAP8[$arrayidx1$i1053>>0]|0;
 $354 = $353&255;
 $355 = (_bitshift64Shl(($354|0),0,8)|0);
 $356 = (getTempRet0() | 0);
 $357 = $355 | $345;
 $arrayidx3$i1057 = ((($b)) + 30|0);
 $358 = HEAP8[$arrayidx3$i1057>>0]|0;
 $359 = $358&255;
 $360 = (_bitshift64Shl(($359|0),0,16)|0);
 $361 = (getTempRet0() | 0);
 $362 = $357 | $360;
 $363 = $356 | $361;
 $arrayidx7$i1061 = ((($b)) + 31|0);
 $364 = HEAP8[$arrayidx7$i1061>>0]|0;
 $365 = $364&255;
 $366 = (_bitshift64Shl(($365|0),0,24)|0);
 $367 = (getTempRet0() | 0);
 $368 = $362 | $366;
 $369 = $363 | $367;
 $370 = (_bitshift64Lshr(($368|0),($369|0),7)|0);
 $371 = (getTempRet0() | 0);
 $c$val = HEAP8[$c>>0]|0;
 $c$idx = ((($c)) + 1|0);
 $c$idx$val = HEAP8[$c$idx>>0]|0;
 $c$idx925 = ((($c)) + 2|0);
 $c$idx925$val = HEAP8[$c$idx925>>0]|0;
 $372 = $c$val&255;
 $373 = $c$idx$val&255;
 $374 = (_bitshift64Shl(($373|0),0,8)|0);
 $375 = (getTempRet0() | 0);
 $376 = $374 | $372;
 $377 = $c$idx925$val&255;
 $378 = (_bitshift64Shl(($377|0),0,16)|0);
 $379 = (getTempRet0() | 0);
 $380 = $378 & 2031616;
 $381 = $376 | $380;
 $arrayidx1$i1033 = ((($c)) + 3|0);
 $382 = HEAP8[$arrayidx1$i1033>>0]|0;
 $383 = $382&255;
 $384 = (_bitshift64Shl(($383|0),0,8)|0);
 $385 = (getTempRet0() | 0);
 $386 = $384 | $377;
 $arrayidx3$i1037 = ((($c)) + 4|0);
 $387 = HEAP8[$arrayidx3$i1037>>0]|0;
 $388 = $387&255;
 $389 = (_bitshift64Shl(($388|0),0,16)|0);
 $390 = (getTempRet0() | 0);
 $391 = $386 | $389;
 $392 = $385 | $390;
 $arrayidx7$i1041 = ((($c)) + 5|0);
 $393 = HEAP8[$arrayidx7$i1041>>0]|0;
 $394 = $393&255;
 $395 = (_bitshift64Shl(($394|0),0,24)|0);
 $396 = (getTempRet0() | 0);
 $397 = $391 | $395;
 $398 = $392 | $396;
 $399 = (_bitshift64Lshr(($397|0),($398|0),5)|0);
 $400 = (getTempRet0() | 0);
 $401 = $399 & 2097151;
 $add$ptr91$idx = ((($c)) + 6|0);
 $add$ptr91$idx$val = HEAP8[$add$ptr91$idx>>0]|0;
 $add$ptr91$idx924 = ((($c)) + 7|0);
 $add$ptr91$idx924$val = HEAP8[$add$ptr91$idx924>>0]|0;
 $402 = $add$ptr91$idx$val&255;
 $403 = (_bitshift64Shl(($402|0),0,8)|0);
 $404 = (getTempRet0() | 0);
 $405 = $403 | $394;
 $406 = $add$ptr91$idx924$val&255;
 $407 = (_bitshift64Shl(($406|0),0,16)|0);
 $408 = (getTempRet0() | 0);
 $409 = $405 | $407;
 $410 = $404 | $408;
 $411 = (_bitshift64Lshr(($409|0),($410|0),2)|0);
 $412 = (getTempRet0() | 0);
 $413 = $411 & 2097151;
 $arrayidx1$i1013 = ((($c)) + 8|0);
 $414 = HEAP8[$arrayidx1$i1013>>0]|0;
 $415 = $414&255;
 $416 = (_bitshift64Shl(($415|0),0,8)|0);
 $417 = (getTempRet0() | 0);
 $418 = $416 | $406;
 $arrayidx3$i1017 = ((($c)) + 9|0);
 $419 = HEAP8[$arrayidx3$i1017>>0]|0;
 $420 = $419&255;
 $421 = (_bitshift64Shl(($420|0),0,16)|0);
 $422 = (getTempRet0() | 0);
 $423 = $418 | $421;
 $424 = $417 | $422;
 $arrayidx7$i1021 = ((($c)) + 10|0);
 $425 = HEAP8[$arrayidx7$i1021>>0]|0;
 $426 = $425&255;
 $427 = (_bitshift64Shl(($426|0),0,24)|0);
 $428 = (getTempRet0() | 0);
 $429 = $423 | $427;
 $430 = $424 | $428;
 $431 = (_bitshift64Lshr(($429|0),($430|0),7)|0);
 $432 = (getTempRet0() | 0);
 $433 = $431 & 2097151;
 $arrayidx1$i1000 = ((($c)) + 11|0);
 $434 = HEAP8[$arrayidx1$i1000>>0]|0;
 $435 = $434&255;
 $436 = (_bitshift64Shl(($435|0),0,8)|0);
 $437 = (getTempRet0() | 0);
 $438 = $436 | $426;
 $arrayidx3$i1004 = ((($c)) + 12|0);
 $439 = HEAP8[$arrayidx3$i1004>>0]|0;
 $440 = $439&255;
 $441 = (_bitshift64Shl(($440|0),0,16)|0);
 $442 = (getTempRet0() | 0);
 $443 = $438 | $441;
 $444 = $437 | $442;
 $arrayidx7$i1008 = ((($c)) + 13|0);
 $445 = HEAP8[$arrayidx7$i1008>>0]|0;
 $446 = $445&255;
 $447 = (_bitshift64Shl(($446|0),0,24)|0);
 $448 = (getTempRet0() | 0);
 $449 = $443 | $447;
 $450 = $444 | $448;
 $451 = (_bitshift64Lshr(($449|0),($450|0),4)|0);
 $452 = (getTempRet0() | 0);
 $453 = $451 & 2097151;
 $add$ptr103$idx = ((($c)) + 14|0);
 $add$ptr103$idx$val = HEAP8[$add$ptr103$idx>>0]|0;
 $add$ptr103$idx923 = ((($c)) + 15|0);
 $add$ptr103$idx923$val = HEAP8[$add$ptr103$idx923>>0]|0;
 $454 = $add$ptr103$idx$val&255;
 $455 = (_bitshift64Shl(($454|0),0,8)|0);
 $456 = (getTempRet0() | 0);
 $457 = $455 | $446;
 $458 = $add$ptr103$idx923$val&255;
 $459 = (_bitshift64Shl(($458|0),0,16)|0);
 $460 = (getTempRet0() | 0);
 $461 = $457 | $459;
 $462 = $456 | $460;
 $463 = (_bitshift64Lshr(($461|0),($462|0),1)|0);
 $464 = (getTempRet0() | 0);
 $465 = $463 & 2097151;
 $arrayidx1$i980 = ((($c)) + 16|0);
 $466 = HEAP8[$arrayidx1$i980>>0]|0;
 $467 = $466&255;
 $468 = (_bitshift64Shl(($467|0),0,8)|0);
 $469 = (getTempRet0() | 0);
 $470 = $468 | $458;
 $arrayidx3$i984 = ((($c)) + 17|0);
 $471 = HEAP8[$arrayidx3$i984>>0]|0;
 $472 = $471&255;
 $473 = (_bitshift64Shl(($472|0),0,16)|0);
 $474 = (getTempRet0() | 0);
 $475 = $470 | $473;
 $476 = $469 | $474;
 $arrayidx7$i988 = ((($c)) + 18|0);
 $477 = HEAP8[$arrayidx7$i988>>0]|0;
 $478 = $477&255;
 $479 = (_bitshift64Shl(($478|0),0,24)|0);
 $480 = (getTempRet0() | 0);
 $481 = $475 | $479;
 $482 = $476 | $480;
 $483 = (_bitshift64Lshr(($481|0),($482|0),6)|0);
 $484 = (getTempRet0() | 0);
 $485 = $483 & 2097151;
 $add$ptr111$idx = ((($c)) + 19|0);
 $add$ptr111$idx$val = HEAP8[$add$ptr111$idx>>0]|0;
 $add$ptr111$idx922 = ((($c)) + 20|0);
 $add$ptr111$idx922$val = HEAP8[$add$ptr111$idx922>>0]|0;
 $486 = $add$ptr111$idx$val&255;
 $487 = (_bitshift64Shl(($486|0),0,8)|0);
 $488 = (getTempRet0() | 0);
 $489 = $487 | $478;
 $490 = $add$ptr111$idx922$val&255;
 $491 = (_bitshift64Shl(($490|0),0,16)|0);
 $492 = (getTempRet0() | 0);
 $493 = $489 | $491;
 $494 = $488 | $492;
 $495 = (_bitshift64Lshr(($493|0),($494|0),3)|0);
 $496 = (getTempRet0() | 0);
 $add$ptr115 = ((($c)) + 21|0);
 $add$ptr115$val = HEAP8[$add$ptr115>>0]|0;
 $add$ptr115$idx = ((($c)) + 22|0);
 $add$ptr115$idx$val = HEAP8[$add$ptr115$idx>>0]|0;
 $add$ptr115$idx921 = ((($c)) + 23|0);
 $add$ptr115$idx921$val = HEAP8[$add$ptr115$idx921>>0]|0;
 $497 = $add$ptr115$val&255;
 $498 = $add$ptr115$idx$val&255;
 $499 = (_bitshift64Shl(($498|0),0,8)|0);
 $500 = (getTempRet0() | 0);
 $501 = $499 | $497;
 $502 = $add$ptr115$idx921$val&255;
 $503 = (_bitshift64Shl(($502|0),0,16)|0);
 $504 = (getTempRet0() | 0);
 $505 = $503 & 2031616;
 $506 = $501 | $505;
 $arrayidx1$i953 = ((($c)) + 24|0);
 $507 = HEAP8[$arrayidx1$i953>>0]|0;
 $508 = $507&255;
 $509 = (_bitshift64Shl(($508|0),0,8)|0);
 $510 = (getTempRet0() | 0);
 $511 = $509 | $502;
 $arrayidx3$i957 = ((($c)) + 25|0);
 $512 = HEAP8[$arrayidx3$i957>>0]|0;
 $513 = $512&255;
 $514 = (_bitshift64Shl(($513|0),0,16)|0);
 $515 = (getTempRet0() | 0);
 $516 = $511 | $514;
 $517 = $510 | $515;
 $arrayidx7$i961 = ((($c)) + 26|0);
 $518 = HEAP8[$arrayidx7$i961>>0]|0;
 $519 = $518&255;
 $520 = (_bitshift64Shl(($519|0),0,24)|0);
 $521 = (getTempRet0() | 0);
 $522 = $516 | $520;
 $523 = $517 | $521;
 $524 = (_bitshift64Lshr(($522|0),($523|0),5)|0);
 $525 = (getTempRet0() | 0);
 $526 = $524 & 2097151;
 $add$ptr122$idx = ((($c)) + 27|0);
 $add$ptr122$idx$val = HEAP8[$add$ptr122$idx>>0]|0;
 $add$ptr122$idx920 = ((($c)) + 28|0);
 $add$ptr122$idx920$val = HEAP8[$add$ptr122$idx920>>0]|0;
 $527 = $add$ptr122$idx$val&255;
 $528 = (_bitshift64Shl(($527|0),0,8)|0);
 $529 = (getTempRet0() | 0);
 $530 = $528 | $519;
 $531 = $add$ptr122$idx920$val&255;
 $532 = (_bitshift64Shl(($531|0),0,16)|0);
 $533 = (getTempRet0() | 0);
 $534 = $530 | $532;
 $535 = $529 | $533;
 $536 = (_bitshift64Lshr(($534|0),($535|0),2)|0);
 $537 = (getTempRet0() | 0);
 $538 = $536 & 2097151;
 $arrayidx1$i = ((($c)) + 29|0);
 $539 = HEAP8[$arrayidx1$i>>0]|0;
 $540 = $539&255;
 $541 = (_bitshift64Shl(($540|0),0,8)|0);
 $542 = (getTempRet0() | 0);
 $543 = $541 | $531;
 $arrayidx3$i = ((($c)) + 30|0);
 $544 = HEAP8[$arrayidx3$i>>0]|0;
 $545 = $544&255;
 $546 = (_bitshift64Shl(($545|0),0,16)|0);
 $547 = (getTempRet0() | 0);
 $548 = $543 | $546;
 $549 = $542 | $547;
 $arrayidx7$i = ((($c)) + 31|0);
 $550 = HEAP8[$arrayidx7$i>>0]|0;
 $551 = $550&255;
 $552 = (_bitshift64Shl(($551|0),0,24)|0);
 $553 = (getTempRet0() | 0);
 $554 = $548 | $552;
 $555 = $549 | $553;
 $556 = (_bitshift64Lshr(($554|0),($555|0),7)|0);
 $557 = (getTempRet0() | 0);
 $558 = (___muldi3(($195|0),($189|0),($9|0),($3|0))|0);
 $559 = (getTempRet0() | 0);
 $560 = (_i64Subtract(($381|0),($375|0),($558|0),($559|0))|0);
 $561 = (getTempRet0() | 0);
 $562 = (___muldi3(($195|0),($189|0),($29|0),0)|0);
 $563 = (getTempRet0() | 0);
 $564 = (___muldi3(($215|0),0,($9|0),($3|0))|0);
 $565 = (getTempRet0() | 0);
 $566 = (___muldi3(($195|0),($189|0),($41|0),0)|0);
 $567 = (getTempRet0() | 0);
 $568 = (___muldi3(($215|0),0,($29|0),0)|0);
 $569 = (getTempRet0() | 0);
 $570 = (___muldi3(($227|0),0,($9|0),($3|0))|0);
 $571 = (getTempRet0() | 0);
 $572 = (_i64Add(($568|0),($569|0),($566|0),($567|0))|0);
 $573 = (getTempRet0() | 0);
 $574 = (_i64Add(($572|0),($573|0),($570|0),($571|0))|0);
 $575 = (getTempRet0() | 0);
 $576 = (_i64Subtract(($413|0),0,($574|0),($575|0))|0);
 $577 = (getTempRet0() | 0);
 $578 = (___muldi3(($195|0),($189|0),($61|0),0)|0);
 $579 = (getTempRet0() | 0);
 $580 = (___muldi3(($215|0),0,($41|0),0)|0);
 $581 = (getTempRet0() | 0);
 $582 = (___muldi3(($227|0),0,($29|0),0)|0);
 $583 = (getTempRet0() | 0);
 $584 = (___muldi3(($247|0),0,($9|0),($3|0))|0);
 $585 = (getTempRet0() | 0);
 $586 = (___muldi3(($195|0),($189|0),($81|0),0)|0);
 $587 = (getTempRet0() | 0);
 $588 = (___muldi3(($215|0),0,($61|0),0)|0);
 $589 = (getTempRet0() | 0);
 $590 = (___muldi3(($227|0),0,($41|0),0)|0);
 $591 = (getTempRet0() | 0);
 $592 = (___muldi3(($247|0),0,($29|0),0)|0);
 $593 = (getTempRet0() | 0);
 $594 = (___muldi3(($267|0),0,($9|0),($3|0))|0);
 $595 = (getTempRet0() | 0);
 $596 = (_i64Add(($588|0),($589|0),($586|0),($587|0))|0);
 $597 = (getTempRet0() | 0);
 $598 = (_i64Add(($596|0),($597|0),($590|0),($591|0))|0);
 $599 = (getTempRet0() | 0);
 $600 = (_i64Add(($598|0),($599|0),($592|0),($593|0))|0);
 $601 = (getTempRet0() | 0);
 $602 = (_i64Add(($600|0),($601|0),($594|0),($595|0))|0);
 $603 = (getTempRet0() | 0);
 $604 = (_i64Subtract(($453|0),0,($602|0),($603|0))|0);
 $605 = (getTempRet0() | 0);
 $606 = (___muldi3(($195|0),($189|0),($93|0),0)|0);
 $607 = (getTempRet0() | 0);
 $608 = (___muldi3(($215|0),0,($81|0),0)|0);
 $609 = (getTempRet0() | 0);
 $610 = (___muldi3(($227|0),0,($61|0),0)|0);
 $611 = (getTempRet0() | 0);
 $612 = (___muldi3(($247|0),0,($41|0),0)|0);
 $613 = (getTempRet0() | 0);
 $614 = (___muldi3(($267|0),0,($29|0),0)|0);
 $615 = (getTempRet0() | 0);
 $616 = (___muldi3(($279|0),0,($9|0),($3|0))|0);
 $617 = (getTempRet0() | 0);
 $618 = (___muldi3(($195|0),($189|0),($113|0),0)|0);
 $619 = (getTempRet0() | 0);
 $620 = (___muldi3(($215|0),0,($93|0),0)|0);
 $621 = (getTempRet0() | 0);
 $622 = (___muldi3(($227|0),0,($81|0),0)|0);
 $623 = (getTempRet0() | 0);
 $624 = (___muldi3(($247|0),0,($61|0),0)|0);
 $625 = (getTempRet0() | 0);
 $626 = (___muldi3(($267|0),0,($41|0),0)|0);
 $627 = (getTempRet0() | 0);
 $628 = (___muldi3(($279|0),0,($29|0),0)|0);
 $629 = (getTempRet0() | 0);
 $630 = (___muldi3(($299|0),0,($9|0),($3|0))|0);
 $631 = (getTempRet0() | 0);
 $632 = (_i64Add(($620|0),($621|0),($618|0),($619|0))|0);
 $633 = (getTempRet0() | 0);
 $634 = (_i64Add(($632|0),($633|0),($622|0),($623|0))|0);
 $635 = (getTempRet0() | 0);
 $636 = (_i64Add(($634|0),($635|0),($624|0),($625|0))|0);
 $637 = (getTempRet0() | 0);
 $638 = (_i64Add(($636|0),($637|0),($626|0),($627|0))|0);
 $639 = (getTempRet0() | 0);
 $640 = (_i64Add(($638|0),($639|0),($628|0),($629|0))|0);
 $641 = (getTempRet0() | 0);
 $642 = (_i64Add(($640|0),($641|0),($630|0),($631|0))|0);
 $643 = (getTempRet0() | 0);
 $644 = (_i64Subtract(($485|0),0,($642|0),($643|0))|0);
 $645 = (getTempRet0() | 0);
 $646 = (___muldi3(($195|0),($189|0),($123|0),($124|0))|0);
 $647 = (getTempRet0() | 0);
 $648 = (___muldi3(($215|0),0,($113|0),0)|0);
 $649 = (getTempRet0() | 0);
 $650 = (___muldi3(($227|0),0,($93|0),0)|0);
 $651 = (getTempRet0() | 0);
 $652 = (___muldi3(($247|0),0,($81|0),0)|0);
 $653 = (getTempRet0() | 0);
 $654 = (___muldi3(($267|0),0,($61|0),0)|0);
 $655 = (getTempRet0() | 0);
 $656 = (___muldi3(($279|0),0,($41|0),0)|0);
 $657 = (getTempRet0() | 0);
 $658 = (___muldi3(($299|0),0,($29|0),0)|0);
 $659 = (getTempRet0() | 0);
 $660 = (___muldi3(($309|0),($310|0),($9|0),($3|0))|0);
 $661 = (getTempRet0() | 0);
 $662 = (___muldi3(($195|0),($189|0),($134|0),($128|0))|0);
 $663 = (getTempRet0() | 0);
 $664 = (___muldi3(($215|0),0,($123|0),($124|0))|0);
 $665 = (getTempRet0() | 0);
 $666 = (___muldi3(($227|0),0,($113|0),0)|0);
 $667 = (getTempRet0() | 0);
 $668 = (___muldi3(($247|0),0,($93|0),0)|0);
 $669 = (getTempRet0() | 0);
 $670 = (___muldi3(($267|0),0,($81|0),0)|0);
 $671 = (getTempRet0() | 0);
 $672 = (___muldi3(($279|0),0,($61|0),0)|0);
 $673 = (getTempRet0() | 0);
 $674 = (___muldi3(($299|0),0,($41|0),0)|0);
 $675 = (getTempRet0() | 0);
 $676 = (___muldi3(($309|0),($310|0),($29|0),0)|0);
 $677 = (getTempRet0() | 0);
 $678 = (___muldi3(($320|0),($314|0),($9|0),($3|0))|0);
 $679 = (getTempRet0() | 0);
 $680 = (_i64Add(($664|0),($665|0),($662|0),($663|0))|0);
 $681 = (getTempRet0() | 0);
 $682 = (_i64Add(($680|0),($681|0),($666|0),($667|0))|0);
 $683 = (getTempRet0() | 0);
 $684 = (_i64Add(($682|0),($683|0),($668|0),($669|0))|0);
 $685 = (getTempRet0() | 0);
 $686 = (_i64Add(($684|0),($685|0),($670|0),($671|0))|0);
 $687 = (getTempRet0() | 0);
 $688 = (_i64Add(($686|0),($687|0),($672|0),($673|0))|0);
 $689 = (getTempRet0() | 0);
 $690 = (_i64Add(($688|0),($689|0),($674|0),($675|0))|0);
 $691 = (getTempRet0() | 0);
 $692 = (_i64Add(($690|0),($691|0),($676|0),($677|0))|0);
 $693 = (getTempRet0() | 0);
 $694 = (_i64Add(($692|0),($693|0),($678|0),($679|0))|0);
 $695 = (getTempRet0() | 0);
 $696 = (_i64Subtract(($506|0),($500|0),($694|0),($695|0))|0);
 $697 = (getTempRet0() | 0);
 $698 = (___muldi3(($195|0),($189|0),($154|0),0)|0);
 $699 = (getTempRet0() | 0);
 $700 = (___muldi3(($215|0),0,($134|0),($128|0))|0);
 $701 = (getTempRet0() | 0);
 $702 = (___muldi3(($227|0),0,($123|0),($124|0))|0);
 $703 = (getTempRet0() | 0);
 $704 = (___muldi3(($247|0),0,($113|0),0)|0);
 $705 = (getTempRet0() | 0);
 $706 = (___muldi3(($267|0),0,($93|0),0)|0);
 $707 = (getTempRet0() | 0);
 $708 = (___muldi3(($279|0),0,($81|0),0)|0);
 $709 = (getTempRet0() | 0);
 $710 = (___muldi3(($299|0),0,($61|0),0)|0);
 $711 = (getTempRet0() | 0);
 $712 = (___muldi3(($309|0),($310|0),($41|0),0)|0);
 $713 = (getTempRet0() | 0);
 $714 = (___muldi3(($320|0),($314|0),($29|0),0)|0);
 $715 = (getTempRet0() | 0);
 $716 = (___muldi3(($340|0),0,($9|0),($3|0))|0);
 $717 = (getTempRet0() | 0);
 $718 = (___muldi3(($195|0),($189|0),($166|0),0)|0);
 $719 = (getTempRet0() | 0);
 $720 = (___muldi3(($215|0),0,($154|0),0)|0);
 $721 = (getTempRet0() | 0);
 $722 = (___muldi3(($227|0),0,($134|0),($128|0))|0);
 $723 = (getTempRet0() | 0);
 $724 = (___muldi3(($247|0),0,($123|0),($124|0))|0);
 $725 = (getTempRet0() | 0);
 $726 = (___muldi3(($267|0),0,($113|0),0)|0);
 $727 = (getTempRet0() | 0);
 $728 = (___muldi3(($279|0),0,($93|0),0)|0);
 $729 = (getTempRet0() | 0);
 $730 = (___muldi3(($299|0),0,($81|0),0)|0);
 $731 = (getTempRet0() | 0);
 $732 = (___muldi3(($309|0),($310|0),($61|0),0)|0);
 $733 = (getTempRet0() | 0);
 $734 = (___muldi3(($320|0),($314|0),($41|0),0)|0);
 $735 = (getTempRet0() | 0);
 $736 = (___muldi3(($340|0),0,($29|0),0)|0);
 $737 = (getTempRet0() | 0);
 $738 = (___muldi3(($352|0),0,($9|0),($3|0))|0);
 $739 = (getTempRet0() | 0);
 $740 = (_i64Add(($720|0),($721|0),($718|0),($719|0))|0);
 $741 = (getTempRet0() | 0);
 $742 = (_i64Add(($740|0),($741|0),($722|0),($723|0))|0);
 $743 = (getTempRet0() | 0);
 $744 = (_i64Add(($742|0),($743|0),($724|0),($725|0))|0);
 $745 = (getTempRet0() | 0);
 $746 = (_i64Add(($744|0),($745|0),($726|0),($727|0))|0);
 $747 = (getTempRet0() | 0);
 $748 = (_i64Add(($746|0),($747|0),($728|0),($729|0))|0);
 $749 = (getTempRet0() | 0);
 $750 = (_i64Add(($748|0),($749|0),($730|0),($731|0))|0);
 $751 = (getTempRet0() | 0);
 $752 = (_i64Add(($750|0),($751|0),($732|0),($733|0))|0);
 $753 = (getTempRet0() | 0);
 $754 = (_i64Add(($752|0),($753|0),($734|0),($735|0))|0);
 $755 = (getTempRet0() | 0);
 $756 = (_i64Add(($754|0),($755|0),($736|0),($737|0))|0);
 $757 = (getTempRet0() | 0);
 $758 = (_i64Add(($756|0),($757|0),($738|0),($739|0))|0);
 $759 = (getTempRet0() | 0);
 $760 = (_i64Subtract(($538|0),0,($758|0),($759|0))|0);
 $761 = (getTempRet0() | 0);
 $762 = (___muldi3(($195|0),($189|0),($184|0),($185|0))|0);
 $763 = (getTempRet0() | 0);
 $764 = (___muldi3(($215|0),0,($166|0),0)|0);
 $765 = (getTempRet0() | 0);
 $766 = (___muldi3(($227|0),0,($154|0),0)|0);
 $767 = (getTempRet0() | 0);
 $768 = (___muldi3(($247|0),0,($134|0),($128|0))|0);
 $769 = (getTempRet0() | 0);
 $770 = (___muldi3(($267|0),0,($123|0),($124|0))|0);
 $771 = (getTempRet0() | 0);
 $772 = (___muldi3(($279|0),0,($113|0),0)|0);
 $773 = (getTempRet0() | 0);
 $774 = (___muldi3(($299|0),0,($93|0),0)|0);
 $775 = (getTempRet0() | 0);
 $776 = (___muldi3(($309|0),($310|0),($81|0),0)|0);
 $777 = (getTempRet0() | 0);
 $778 = (___muldi3(($320|0),($314|0),($61|0),0)|0);
 $779 = (getTempRet0() | 0);
 $780 = (___muldi3(($340|0),0,($41|0),0)|0);
 $781 = (getTempRet0() | 0);
 $782 = (___muldi3(($352|0),0,($29|0),0)|0);
 $783 = (getTempRet0() | 0);
 $784 = (___muldi3(($370|0),($371|0),($9|0),($3|0))|0);
 $785 = (getTempRet0() | 0);
 $786 = (___muldi3(($370|0),($371|0),($29|0),0)|0);
 $787 = (getTempRet0() | 0);
 $788 = (___muldi3(($352|0),0,($41|0),0)|0);
 $789 = (getTempRet0() | 0);
 $790 = (___muldi3(($340|0),0,($61|0),0)|0);
 $791 = (getTempRet0() | 0);
 $792 = (___muldi3(($320|0),($314|0),($81|0),0)|0);
 $793 = (getTempRet0() | 0);
 $794 = (___muldi3(($309|0),($310|0),($93|0),0)|0);
 $795 = (getTempRet0() | 0);
 $796 = (___muldi3(($299|0),0,($113|0),0)|0);
 $797 = (getTempRet0() | 0);
 $798 = (___muldi3(($279|0),0,($123|0),($124|0))|0);
 $799 = (getTempRet0() | 0);
 $800 = (___muldi3(($267|0),0,($134|0),($128|0))|0);
 $801 = (getTempRet0() | 0);
 $802 = (___muldi3(($247|0),0,($154|0),0)|0);
 $803 = (getTempRet0() | 0);
 $804 = (___muldi3(($227|0),0,($166|0),0)|0);
 $805 = (getTempRet0() | 0);
 $806 = (___muldi3(($215|0),0,($184|0),($185|0))|0);
 $807 = (getTempRet0() | 0);
 $808 = (_i64Add(($804|0),($805|0),($806|0),($807|0))|0);
 $809 = (getTempRet0() | 0);
 $810 = (_i64Add(($808|0),($809|0),($802|0),($803|0))|0);
 $811 = (getTempRet0() | 0);
 $812 = (_i64Add(($810|0),($811|0),($800|0),($801|0))|0);
 $813 = (getTempRet0() | 0);
 $814 = (_i64Add(($812|0),($813|0),($798|0),($799|0))|0);
 $815 = (getTempRet0() | 0);
 $816 = (_i64Add(($814|0),($815|0),($796|0),($797|0))|0);
 $817 = (getTempRet0() | 0);
 $818 = (_i64Add(($816|0),($817|0),($794|0),($795|0))|0);
 $819 = (getTempRet0() | 0);
 $820 = (_i64Add(($818|0),($819|0),($792|0),($793|0))|0);
 $821 = (getTempRet0() | 0);
 $822 = (_i64Add(($820|0),($821|0),($790|0),($791|0))|0);
 $823 = (getTempRet0() | 0);
 $824 = (_i64Add(($822|0),($823|0),($788|0),($789|0))|0);
 $825 = (getTempRet0() | 0);
 $826 = (_i64Add(($824|0),($825|0),($786|0),($787|0))|0);
 $827 = (getTempRet0() | 0);
 $828 = (___muldi3(($370|0),($371|0),($61|0),0)|0);
 $829 = (getTempRet0() | 0);
 $830 = (___muldi3(($352|0),0,($81|0),0)|0);
 $831 = (getTempRet0() | 0);
 $832 = (___muldi3(($340|0),0,($93|0),0)|0);
 $833 = (getTempRet0() | 0);
 $834 = (___muldi3(($320|0),($314|0),($113|0),0)|0);
 $835 = (getTempRet0() | 0);
 $836 = (___muldi3(($309|0),($310|0),($123|0),($124|0))|0);
 $837 = (getTempRet0() | 0);
 $838 = (___muldi3(($299|0),0,($134|0),($128|0))|0);
 $839 = (getTempRet0() | 0);
 $840 = (___muldi3(($279|0),0,($154|0),0)|0);
 $841 = (getTempRet0() | 0);
 $842 = (___muldi3(($267|0),0,($166|0),0)|0);
 $843 = (getTempRet0() | 0);
 $844 = (___muldi3(($247|0),0,($184|0),($185|0))|0);
 $845 = (getTempRet0() | 0);
 $846 = (_i64Add(($842|0),($843|0),($844|0),($845|0))|0);
 $847 = (getTempRet0() | 0);
 $848 = (_i64Add(($846|0),($847|0),($840|0),($841|0))|0);
 $849 = (getTempRet0() | 0);
 $850 = (_i64Add(($848|0),($849|0),($838|0),($839|0))|0);
 $851 = (getTempRet0() | 0);
 $852 = (_i64Add(($850|0),($851|0),($836|0),($837|0))|0);
 $853 = (getTempRet0() | 0);
 $854 = (_i64Add(($852|0),($853|0),($834|0),($835|0))|0);
 $855 = (getTempRet0() | 0);
 $856 = (_i64Add(($854|0),($855|0),($832|0),($833|0))|0);
 $857 = (getTempRet0() | 0);
 $858 = (_i64Add(($856|0),($857|0),($830|0),($831|0))|0);
 $859 = (getTempRet0() | 0);
 $860 = (_i64Add(($858|0),($859|0),($828|0),($829|0))|0);
 $861 = (getTempRet0() | 0);
 $862 = (___muldi3(($370|0),($371|0),($93|0),0)|0);
 $863 = (getTempRet0() | 0);
 $864 = (___muldi3(($352|0),0,($113|0),0)|0);
 $865 = (getTempRet0() | 0);
 $866 = (___muldi3(($340|0),0,($123|0),($124|0))|0);
 $867 = (getTempRet0() | 0);
 $868 = (___muldi3(($320|0),($314|0),($134|0),($128|0))|0);
 $869 = (getTempRet0() | 0);
 $870 = (___muldi3(($309|0),($310|0),($154|0),0)|0);
 $871 = (getTempRet0() | 0);
 $872 = (___muldi3(($299|0),0,($166|0),0)|0);
 $873 = (getTempRet0() | 0);
 $874 = (___muldi3(($279|0),0,($184|0),($185|0))|0);
 $875 = (getTempRet0() | 0);
 $876 = (_i64Add(($872|0),($873|0),($874|0),($875|0))|0);
 $877 = (getTempRet0() | 0);
 $878 = (_i64Add(($876|0),($877|0),($870|0),($871|0))|0);
 $879 = (getTempRet0() | 0);
 $880 = (_i64Add(($878|0),($879|0),($868|0),($869|0))|0);
 $881 = (getTempRet0() | 0);
 $882 = (_i64Add(($880|0),($881|0),($866|0),($867|0))|0);
 $883 = (getTempRet0() | 0);
 $884 = (_i64Add(($882|0),($883|0),($864|0),($865|0))|0);
 $885 = (getTempRet0() | 0);
 $886 = (_i64Add(($884|0),($885|0),($862|0),($863|0))|0);
 $887 = (getTempRet0() | 0);
 $888 = (___muldi3(($370|0),($371|0),($123|0),($124|0))|0);
 $889 = (getTempRet0() | 0);
 $890 = (___muldi3(($352|0),0,($134|0),($128|0))|0);
 $891 = (getTempRet0() | 0);
 $892 = (___muldi3(($340|0),0,($154|0),0)|0);
 $893 = (getTempRet0() | 0);
 $894 = (___muldi3(($320|0),($314|0),($166|0),0)|0);
 $895 = (getTempRet0() | 0);
 $896 = (___muldi3(($309|0),($310|0),($184|0),($185|0))|0);
 $897 = (getTempRet0() | 0);
 $898 = (_i64Add(($894|0),($895|0),($896|0),($897|0))|0);
 $899 = (getTempRet0() | 0);
 $900 = (_i64Add(($898|0),($899|0),($892|0),($893|0))|0);
 $901 = (getTempRet0() | 0);
 $902 = (_i64Add(($900|0),($901|0),($890|0),($891|0))|0);
 $903 = (getTempRet0() | 0);
 $904 = (_i64Add(($902|0),($903|0),($888|0),($889|0))|0);
 $905 = (getTempRet0() | 0);
 $906 = (___muldi3(($370|0),($371|0),($154|0),0)|0);
 $907 = (getTempRet0() | 0);
 $908 = (___muldi3(($352|0),0,($166|0),0)|0);
 $909 = (getTempRet0() | 0);
 $910 = (___muldi3(($340|0),0,($184|0),($185|0))|0);
 $911 = (getTempRet0() | 0);
 $912 = (_i64Add(($908|0),($909|0),($910|0),($911|0))|0);
 $913 = (getTempRet0() | 0);
 $914 = (_i64Add(($912|0),($913|0),($906|0),($907|0))|0);
 $915 = (getTempRet0() | 0);
 $916 = (_i64Subtract(0,0,($184|0),($185|0))|0);
 $917 = (getTempRet0() | 0);
 $918 = (___muldi3(($370|0),($371|0),($916|0),($917|0))|0);
 $919 = (getTempRet0() | 0);
 $920 = (_i64Add(($560|0),($561|0),1048576,0)|0);
 $921 = (getTempRet0() | 0);
 $922 = (_bitshift64Ashr(($920|0),($921|0),21)|0);
 $923 = (getTempRet0() | 0);
 $924 = (_i64Add(($564|0),($565|0),($562|0),($563|0))|0);
 $925 = (getTempRet0() | 0);
 $926 = (_i64Add(($401|0),0,($922|0),($923|0))|0);
 $927 = (getTempRet0() | 0);
 $928 = (_i64Subtract(($926|0),($927|0),($924|0),($925|0))|0);
 $929 = (getTempRet0() | 0);
 $930 = $920 & -2097152;
 $931 = (_i64Subtract(($560|0),($561|0),($930|0),($921|0))|0);
 $932 = (getTempRet0() | 0);
 $933 = (_i64Add(($576|0),($577|0),1048576,0)|0);
 $934 = (getTempRet0() | 0);
 $935 = (_bitshift64Ashr(($933|0),($934|0),21)|0);
 $936 = (getTempRet0() | 0);
 $937 = (_i64Add(($580|0),($581|0),($578|0),($579|0))|0);
 $938 = (getTempRet0() | 0);
 $939 = (_i64Add(($937|0),($938|0),($582|0),($583|0))|0);
 $940 = (getTempRet0() | 0);
 $941 = (_i64Add(($939|0),($940|0),($584|0),($585|0))|0);
 $942 = (getTempRet0() | 0);
 $943 = (_i64Add(($433|0),0,($935|0),($936|0))|0);
 $944 = (getTempRet0() | 0);
 $945 = (_i64Subtract(($943|0),($944|0),($941|0),($942|0))|0);
 $946 = (getTempRet0() | 0);
 $947 = $933 & -2097152;
 $948 = (_i64Add(($604|0),($605|0),1048576,0)|0);
 $949 = (getTempRet0() | 0);
 $950 = (_bitshift64Ashr(($948|0),($949|0),21)|0);
 $951 = (getTempRet0() | 0);
 $952 = (_i64Add(($608|0),($609|0),($606|0),($607|0))|0);
 $953 = (getTempRet0() | 0);
 $954 = (_i64Add(($952|0),($953|0),($610|0),($611|0))|0);
 $955 = (getTempRet0() | 0);
 $956 = (_i64Add(($954|0),($955|0),($612|0),($613|0))|0);
 $957 = (getTempRet0() | 0);
 $958 = (_i64Add(($956|0),($957|0),($614|0),($615|0))|0);
 $959 = (getTempRet0() | 0);
 $960 = (_i64Add(($958|0),($959|0),($616|0),($617|0))|0);
 $961 = (getTempRet0() | 0);
 $962 = (_i64Add(($950|0),($951|0),($465|0),0)|0);
 $963 = (getTempRet0() | 0);
 $964 = (_i64Subtract(($962|0),($963|0),($960|0),($961|0))|0);
 $965 = (getTempRet0() | 0);
 $966 = $948 & -2097152;
 $967 = (_i64Add(($644|0),($645|0),1048576,0)|0);
 $968 = (getTempRet0() | 0);
 $969 = (_bitshift64Ashr(($967|0),($968|0),21)|0);
 $970 = (getTempRet0() | 0);
 $971 = (_i64Add(($648|0),($649|0),($646|0),($647|0))|0);
 $972 = (getTempRet0() | 0);
 $973 = (_i64Add(($971|0),($972|0),($650|0),($651|0))|0);
 $974 = (getTempRet0() | 0);
 $975 = (_i64Add(($973|0),($974|0),($652|0),($653|0))|0);
 $976 = (getTempRet0() | 0);
 $977 = (_i64Add(($975|0),($976|0),($654|0),($655|0))|0);
 $978 = (getTempRet0() | 0);
 $979 = (_i64Add(($977|0),($978|0),($656|0),($657|0))|0);
 $980 = (getTempRet0() | 0);
 $981 = (_i64Add(($979|0),($980|0),($658|0),($659|0))|0);
 $982 = (getTempRet0() | 0);
 $983 = (_i64Add(($981|0),($982|0),($660|0),($661|0))|0);
 $984 = (getTempRet0() | 0);
 $985 = (_i64Add(($969|0),($970|0),($495|0),($496|0))|0);
 $986 = (getTempRet0() | 0);
 $987 = (_i64Subtract(($985|0),($986|0),($983|0),($984|0))|0);
 $988 = (getTempRet0() | 0);
 $989 = $967 & -2097152;
 $990 = (_i64Add(($696|0),($697|0),1048576,0)|0);
 $991 = (getTempRet0() | 0);
 $992 = (_bitshift64Ashr(($990|0),($991|0),21)|0);
 $993 = (getTempRet0() | 0);
 $994 = (_i64Add(($700|0),($701|0),($698|0),($699|0))|0);
 $995 = (getTempRet0() | 0);
 $996 = (_i64Add(($994|0),($995|0),($702|0),($703|0))|0);
 $997 = (getTempRet0() | 0);
 $998 = (_i64Add(($996|0),($997|0),($704|0),($705|0))|0);
 $999 = (getTempRet0() | 0);
 $1000 = (_i64Add(($998|0),($999|0),($706|0),($707|0))|0);
 $1001 = (getTempRet0() | 0);
 $1002 = (_i64Add(($1000|0),($1001|0),($708|0),($709|0))|0);
 $1003 = (getTempRet0() | 0);
 $1004 = (_i64Add(($1002|0),($1003|0),($710|0),($711|0))|0);
 $1005 = (getTempRet0() | 0);
 $1006 = (_i64Add(($1004|0),($1005|0),($712|0),($713|0))|0);
 $1007 = (getTempRet0() | 0);
 $1008 = (_i64Add(($1006|0),($1007|0),($714|0),($715|0))|0);
 $1009 = (getTempRet0() | 0);
 $1010 = (_i64Add(($1008|0),($1009|0),($716|0),($717|0))|0);
 $1011 = (getTempRet0() | 0);
 $1012 = (_i64Add(($526|0),0,($992|0),($993|0))|0);
 $1013 = (getTempRet0() | 0);
 $1014 = (_i64Subtract(($1012|0),($1013|0),($1010|0),($1011|0))|0);
 $1015 = (getTempRet0() | 0);
 $1016 = $990 & -2097152;
 $1017 = (_i64Add(($760|0),($761|0),1048576,0)|0);
 $1018 = (getTempRet0() | 0);
 $1019 = (_bitshift64Ashr(($1017|0),($1018|0),21)|0);
 $1020 = (getTempRet0() | 0);
 $1021 = (_i64Add(($764|0),($765|0),($762|0),($763|0))|0);
 $1022 = (getTempRet0() | 0);
 $1023 = (_i64Add(($1021|0),($1022|0),($766|0),($767|0))|0);
 $1024 = (getTempRet0() | 0);
 $1025 = (_i64Add(($1023|0),($1024|0),($768|0),($769|0))|0);
 $1026 = (getTempRet0() | 0);
 $1027 = (_i64Add(($1025|0),($1026|0),($770|0),($771|0))|0);
 $1028 = (getTempRet0() | 0);
 $1029 = (_i64Add(($1027|0),($1028|0),($772|0),($773|0))|0);
 $1030 = (getTempRet0() | 0);
 $1031 = (_i64Add(($1029|0),($1030|0),($774|0),($775|0))|0);
 $1032 = (getTempRet0() | 0);
 $1033 = (_i64Add(($1031|0),($1032|0),($776|0),($777|0))|0);
 $1034 = (getTempRet0() | 0);
 $1035 = (_i64Add(($1033|0),($1034|0),($778|0),($779|0))|0);
 $1036 = (getTempRet0() | 0);
 $1037 = (_i64Add(($1035|0),($1036|0),($780|0),($781|0))|0);
 $1038 = (getTempRet0() | 0);
 $1039 = (_i64Add(($1037|0),($1038|0),($782|0),($783|0))|0);
 $1040 = (getTempRet0() | 0);
 $1041 = (_i64Add(($1039|0),($1040|0),($784|0),($785|0))|0);
 $1042 = (getTempRet0() | 0);
 $1043 = (_i64Add(($1019|0),($1020|0),($556|0),($557|0))|0);
 $1044 = (getTempRet0() | 0);
 $1045 = (_i64Subtract(($1043|0),($1044|0),($1041|0),($1042|0))|0);
 $1046 = (getTempRet0() | 0);
 $1047 = $1017 & -2097152;
 $1048 = (_i64Subtract(1048576,0,($826|0),($827|0))|0);
 $1049 = (getTempRet0() | 0);
 $1050 = (_bitshift64Ashr(($1048|0),($1049|0),21)|0);
 $1051 = (getTempRet0() | 0);
 $1052 = (___muldi3(($227|0),0,($184|0),($185|0))|0);
 $1053 = (getTempRet0() | 0);
 $1054 = (___muldi3(($247|0),0,($166|0),0)|0);
 $1055 = (getTempRet0() | 0);
 $1056 = (___muldi3(($267|0),0,($154|0),0)|0);
 $1057 = (getTempRet0() | 0);
 $1058 = (___muldi3(($279|0),0,($134|0),($128|0))|0);
 $1059 = (getTempRet0() | 0);
 $1060 = (___muldi3(($299|0),0,($123|0),($124|0))|0);
 $1061 = (getTempRet0() | 0);
 $1062 = (___muldi3(($309|0),($310|0),($113|0),0)|0);
 $1063 = (getTempRet0() | 0);
 $1064 = (___muldi3(($320|0),($314|0),($93|0),0)|0);
 $1065 = (getTempRet0() | 0);
 $1066 = (___muldi3(($340|0),0,($81|0),0)|0);
 $1067 = (getTempRet0() | 0);
 $1068 = (___muldi3(($352|0),0,($61|0),0)|0);
 $1069 = (getTempRet0() | 0);
 $1070 = (___muldi3(($370|0),($371|0),($41|0),0)|0);
 $1071 = (getTempRet0() | 0);
 $1072 = (_i64Add(($1054|0),($1055|0),($1052|0),($1053|0))|0);
 $1073 = (getTempRet0() | 0);
 $1074 = (_i64Add(($1072|0),($1073|0),($1056|0),($1057|0))|0);
 $1075 = (getTempRet0() | 0);
 $1076 = (_i64Add(($1074|0),($1075|0),($1058|0),($1059|0))|0);
 $1077 = (getTempRet0() | 0);
 $1078 = (_i64Add(($1076|0),($1077|0),($1060|0),($1061|0))|0);
 $1079 = (getTempRet0() | 0);
 $1080 = (_i64Add(($1078|0),($1079|0),($1062|0),($1063|0))|0);
 $1081 = (getTempRet0() | 0);
 $1082 = (_i64Add(($1080|0),($1081|0),($1064|0),($1065|0))|0);
 $1083 = (getTempRet0() | 0);
 $1084 = (_i64Add(($1082|0),($1083|0),($1066|0),($1067|0))|0);
 $1085 = (getTempRet0() | 0);
 $1086 = (_i64Add(($1084|0),($1085|0),($1068|0),($1069|0))|0);
 $1087 = (getTempRet0() | 0);
 $1088 = (_i64Add(($1086|0),($1087|0),($1070|0),($1071|0))|0);
 $1089 = (getTempRet0() | 0);
 $1090 = (_i64Subtract(($1050|0),($1051|0),($1088|0),($1089|0))|0);
 $1091 = (getTempRet0() | 0);
 $1092 = $1048 & -2097152;
 $1093 = (_i64Subtract(1048576,0,($860|0),($861|0))|0);
 $1094 = (getTempRet0() | 0);
 $1095 = (_bitshift64Ashr(($1093|0),($1094|0),21)|0);
 $1096 = (getTempRet0() | 0);
 $1097 = (___muldi3(($267|0),0,($184|0),($185|0))|0);
 $1098 = (getTempRet0() | 0);
 $1099 = (___muldi3(($279|0),0,($166|0),0)|0);
 $1100 = (getTempRet0() | 0);
 $1101 = (___muldi3(($299|0),0,($154|0),0)|0);
 $1102 = (getTempRet0() | 0);
 $1103 = (___muldi3(($309|0),($310|0),($134|0),($128|0))|0);
 $1104 = (getTempRet0() | 0);
 $1105 = (___muldi3(($320|0),($314|0),($123|0),($124|0))|0);
 $1106 = (getTempRet0() | 0);
 $1107 = (___muldi3(($340|0),0,($113|0),0)|0);
 $1108 = (getTempRet0() | 0);
 $1109 = (___muldi3(($352|0),0,($93|0),0)|0);
 $1110 = (getTempRet0() | 0);
 $1111 = (___muldi3(($370|0),($371|0),($81|0),0)|0);
 $1112 = (getTempRet0() | 0);
 $1113 = (_i64Add(($1099|0),($1100|0),($1097|0),($1098|0))|0);
 $1114 = (getTempRet0() | 0);
 $1115 = (_i64Add(($1113|0),($1114|0),($1101|0),($1102|0))|0);
 $1116 = (getTempRet0() | 0);
 $1117 = (_i64Add(($1115|0),($1116|0),($1103|0),($1104|0))|0);
 $1118 = (getTempRet0() | 0);
 $1119 = (_i64Add(($1117|0),($1118|0),($1105|0),($1106|0))|0);
 $1120 = (getTempRet0() | 0);
 $1121 = (_i64Add(($1119|0),($1120|0),($1107|0),($1108|0))|0);
 $1122 = (getTempRet0() | 0);
 $1123 = (_i64Add(($1121|0),($1122|0),($1109|0),($1110|0))|0);
 $1124 = (getTempRet0() | 0);
 $1125 = (_i64Add(($1123|0),($1124|0),($1111|0),($1112|0))|0);
 $1126 = (getTempRet0() | 0);
 $1127 = (_i64Subtract(($1095|0),($1096|0),($1125|0),($1126|0))|0);
 $1128 = (getTempRet0() | 0);
 $1129 = $1093 & -2097152;
 $1130 = (_i64Subtract(1048576,0,($886|0),($887|0))|0);
 $1131 = (getTempRet0() | 0);
 $1132 = (_bitshift64Ashr(($1130|0),($1131|0),21)|0);
 $1133 = (getTempRet0() | 0);
 $1134 = (___muldi3(($299|0),0,($184|0),($185|0))|0);
 $1135 = (getTempRet0() | 0);
 $1136 = (___muldi3(($309|0),($310|0),($166|0),0)|0);
 $1137 = (getTempRet0() | 0);
 $1138 = (___muldi3(($320|0),($314|0),($154|0),0)|0);
 $1139 = (getTempRet0() | 0);
 $1140 = (___muldi3(($340|0),0,($134|0),($128|0))|0);
 $1141 = (getTempRet0() | 0);
 $1142 = (___muldi3(($352|0),0,($123|0),($124|0))|0);
 $1143 = (getTempRet0() | 0);
 $1144 = (___muldi3(($370|0),($371|0),($113|0),0)|0);
 $1145 = (getTempRet0() | 0);
 $1146 = (_i64Add(($1136|0),($1137|0),($1134|0),($1135|0))|0);
 $1147 = (getTempRet0() | 0);
 $1148 = (_i64Add(($1146|0),($1147|0),($1138|0),($1139|0))|0);
 $1149 = (getTempRet0() | 0);
 $1150 = (_i64Add(($1148|0),($1149|0),($1140|0),($1141|0))|0);
 $1151 = (getTempRet0() | 0);
 $1152 = (_i64Add(($1150|0),($1151|0),($1142|0),($1143|0))|0);
 $1153 = (getTempRet0() | 0);
 $1154 = (_i64Add(($1152|0),($1153|0),($1144|0),($1145|0))|0);
 $1155 = (getTempRet0() | 0);
 $1156 = (_i64Subtract(($1132|0),($1133|0),($1154|0),($1155|0))|0);
 $1157 = (getTempRet0() | 0);
 $1158 = $1130 & -2097152;
 $1159 = (_i64Subtract(1048576,0,($904|0),($905|0))|0);
 $1160 = (getTempRet0() | 0);
 $1161 = (_bitshift64Ashr(($1159|0),($1160|0),21)|0);
 $1162 = (getTempRet0() | 0);
 $1163 = (___muldi3(($320|0),($314|0),($184|0),($185|0))|0);
 $1164 = (getTempRet0() | 0);
 $1165 = (___muldi3(($340|0),0,($166|0),0)|0);
 $1166 = (getTempRet0() | 0);
 $1167 = (___muldi3(($352|0),0,($154|0),0)|0);
 $1168 = (getTempRet0() | 0);
 $1169 = (___muldi3(($370|0),($371|0),($134|0),($128|0))|0);
 $1170 = (getTempRet0() | 0);
 $1171 = (_i64Add(($1165|0),($1166|0),($1163|0),($1164|0))|0);
 $1172 = (getTempRet0() | 0);
 $1173 = (_i64Add(($1171|0),($1172|0),($1167|0),($1168|0))|0);
 $1174 = (getTempRet0() | 0);
 $1175 = (_i64Add(($1173|0),($1174|0),($1169|0),($1170|0))|0);
 $1176 = (getTempRet0() | 0);
 $1177 = (_i64Subtract(($1161|0),($1162|0),($1175|0),($1176|0))|0);
 $1178 = (getTempRet0() | 0);
 $1179 = $1159 & -2097152;
 $1180 = (_i64Add(($1179|0),($1160|0),($904|0),($905|0))|0);
 $1181 = (getTempRet0() | 0);
 $1182 = (_i64Subtract(1048576,0,($914|0),($915|0))|0);
 $1183 = (getTempRet0() | 0);
 $1184 = (_bitshift64Ashr(($1182|0),($1183|0),21)|0);
 $1185 = (getTempRet0() | 0);
 $1186 = (___muldi3(($352|0),0,($184|0),($185|0))|0);
 $1187 = (getTempRet0() | 0);
 $1188 = (___muldi3(($370|0),($371|0),($166|0),0)|0);
 $1189 = (getTempRet0() | 0);
 $1190 = (_i64Add(($1188|0),($1189|0),($1186|0),($1187|0))|0);
 $1191 = (getTempRet0() | 0);
 $1192 = (_i64Subtract(($1184|0),($1185|0),($1190|0),($1191|0))|0);
 $1193 = (getTempRet0() | 0);
 $1194 = $1182 & -2097152;
 $1195 = (_i64Add(($1194|0),($1183|0),($914|0),($915|0))|0);
 $1196 = (getTempRet0() | 0);
 $1197 = (_i64Add(($918|0),($919|0),1048576,0)|0);
 $1198 = (getTempRet0() | 0);
 $1199 = (_bitshift64Ashr(($1197|0),($1198|0),21)|0);
 $1200 = (getTempRet0() | 0);
 $1201 = $1197 & -2097152;
 $1202 = (_i64Subtract(($918|0),($919|0),($1201|0),($1198|0))|0);
 $1203 = (getTempRet0() | 0);
 $1204 = (_i64Add(($928|0),($929|0),1048576,0)|0);
 $1205 = (getTempRet0() | 0);
 $1206 = (_bitshift64Ashr(($1204|0),($1205|0),21)|0);
 $1207 = (getTempRet0() | 0);
 $1208 = $1204 & -2097152;
 $1209 = (_i64Subtract(($928|0),($929|0),($1208|0),($1205|0))|0);
 $1210 = (getTempRet0() | 0);
 $1211 = (_i64Add(($945|0),($946|0),1048576,0)|0);
 $1212 = (getTempRet0() | 0);
 $1213 = (_bitshift64Ashr(($1211|0),($1212|0),21)|0);
 $1214 = (getTempRet0() | 0);
 $1215 = $1211 & -2097152;
 $1216 = (_i64Subtract(($945|0),($946|0),($1215|0),($1212|0))|0);
 $1217 = (getTempRet0() | 0);
 $1218 = (_i64Add(($964|0),($965|0),1048576,0)|0);
 $1219 = (getTempRet0() | 0);
 $1220 = (_bitshift64Ashr(($1218|0),($1219|0),21)|0);
 $1221 = (getTempRet0() | 0);
 $1222 = $1218 & -2097152;
 $1223 = (_i64Add(($987|0),($988|0),1048576,0)|0);
 $1224 = (getTempRet0() | 0);
 $1225 = (_bitshift64Ashr(($1223|0),($1224|0),21)|0);
 $1226 = (getTempRet0() | 0);
 $1227 = $1223 & -2097152;
 $1228 = (_i64Add(($1014|0),($1015|0),1048576,0)|0);
 $1229 = (getTempRet0() | 0);
 $1230 = (_bitshift64Ashr(($1228|0),($1229|0),21)|0);
 $1231 = (getTempRet0() | 0);
 $1232 = $1228 & -2097152;
 $1233 = (_i64Add(($1045|0),($1046|0),1048576,0)|0);
 $1234 = (getTempRet0() | 0);
 $1235 = (_bitshift64Ashr(($1233|0),($1234|0),21)|0);
 $1236 = (getTempRet0() | 0);
 $1237 = $1233 & -2097152;
 $1238 = (_i64Add(($1090|0),($1091|0),1048576,0)|0);
 $1239 = (getTempRet0() | 0);
 $1240 = (_bitshift64Ashr(($1238|0),($1239|0),21)|0);
 $1241 = (getTempRet0() | 0);
 $1242 = $1238 & -2097152;
 $1243 = (_i64Add(($1127|0),($1128|0),1048576,0)|0);
 $1244 = (getTempRet0() | 0);
 $1245 = (_bitshift64Ashr(($1243|0),($1244|0),21)|0);
 $1246 = (getTempRet0() | 0);
 $1247 = $1243 & -2097152;
 $1248 = (_i64Add(($1156|0),($1157|0),1048576,0)|0);
 $1249 = (getTempRet0() | 0);
 $1250 = (_bitshift64Ashr(($1248|0),($1249|0),21)|0);
 $1251 = (getTempRet0() | 0);
 $1252 = (_i64Subtract(($1250|0),($1251|0),($1180|0),($1181|0))|0);
 $1253 = (getTempRet0() | 0);
 $1254 = $1248 & -2097152;
 $1255 = (_i64Subtract(($1156|0),($1157|0),($1254|0),($1249|0))|0);
 $1256 = (getTempRet0() | 0);
 $1257 = (_i64Add(($1177|0),($1178|0),1048576,0)|0);
 $1258 = (getTempRet0() | 0);
 $1259 = (_bitshift64Ashr(($1257|0),($1258|0),21)|0);
 $1260 = (getTempRet0() | 0);
 $1261 = (_i64Subtract(($1259|0),($1260|0),($1195|0),($1196|0))|0);
 $1262 = (getTempRet0() | 0);
 $1263 = $1257 & -2097152;
 $1264 = (_i64Subtract(($1177|0),($1178|0),($1263|0),($1258|0))|0);
 $1265 = (getTempRet0() | 0);
 $1266 = (_i64Add(($1192|0),($1193|0),1048576,0)|0);
 $1267 = (getTempRet0() | 0);
 $1268 = (_bitshift64Ashr(($1266|0),($1267|0),21)|0);
 $1269 = (getTempRet0() | 0);
 $1270 = (_i64Add(($1268|0),($1269|0),($1202|0),($1203|0))|0);
 $1271 = (getTempRet0() | 0);
 $1272 = $1266 & -2097152;
 $1273 = (_i64Subtract(($1192|0),($1193|0),($1272|0),($1267|0))|0);
 $1274 = (getTempRet0() | 0);
 $1275 = (___muldi3(($1199|0),($1200|0),666643,0)|0);
 $1276 = (getTempRet0() | 0);
 $1277 = (___muldi3(($1199|0),($1200|0),470296,0)|0);
 $1278 = (getTempRet0() | 0);
 $1279 = (___muldi3(($1199|0),($1200|0),654183,0)|0);
 $1280 = (getTempRet0() | 0);
 $1281 = (___muldi3(($1199|0),($1200|0),-997805,-1)|0);
 $1282 = (getTempRet0() | 0);
 $1283 = (___muldi3(($1199|0),($1200|0),136657,0)|0);
 $1284 = (getTempRet0() | 0);
 $1285 = (___muldi3(($1199|0),($1200|0),-683901,-1)|0);
 $1286 = (getTempRet0() | 0);
 $1287 = (_i64Subtract(($1285|0),($1286|0),($886|0),($887|0))|0);
 $1288 = (getTempRet0() | 0);
 $1289 = (_i64Subtract(($1287|0),($1288|0),($1158|0),($1131|0))|0);
 $1290 = (getTempRet0() | 0);
 $1291 = (_i64Add(($1289|0),($1290|0),($1245|0),($1246|0))|0);
 $1292 = (getTempRet0() | 0);
 $1293 = (___muldi3(($1270|0),($1271|0),666643,0)|0);
 $1294 = (getTempRet0() | 0);
 $1295 = (___muldi3(($1270|0),($1271|0),470296,0)|0);
 $1296 = (getTempRet0() | 0);
 $1297 = (___muldi3(($1270|0),($1271|0),654183,0)|0);
 $1298 = (getTempRet0() | 0);
 $1299 = (___muldi3(($1270|0),($1271|0),-997805,-1)|0);
 $1300 = (getTempRet0() | 0);
 $1301 = (___muldi3(($1270|0),($1271|0),136657,0)|0);
 $1302 = (getTempRet0() | 0);
 $1303 = (___muldi3(($1270|0),($1271|0),-683901,-1)|0);
 $1304 = (getTempRet0() | 0);
 $1305 = (___muldi3(($1273|0),($1274|0),666643,0)|0);
 $1306 = (getTempRet0() | 0);
 $1307 = (___muldi3(($1273|0),($1274|0),470296,0)|0);
 $1308 = (getTempRet0() | 0);
 $1309 = (___muldi3(($1273|0),($1274|0),654183,0)|0);
 $1310 = (getTempRet0() | 0);
 $1311 = (___muldi3(($1273|0),($1274|0),-997805,-1)|0);
 $1312 = (getTempRet0() | 0);
 $1313 = (___muldi3(($1273|0),($1274|0),136657,0)|0);
 $1314 = (getTempRet0() | 0);
 $1315 = (___muldi3(($1273|0),($1274|0),-683901,-1)|0);
 $1316 = (getTempRet0() | 0);
 $1317 = (_i64Subtract(($1281|0),($1282|0),($860|0),($861|0))|0);
 $1318 = (getTempRet0() | 0);
 $1319 = (_i64Add(($1317|0),($1318|0),($1301|0),($1302|0))|0);
 $1320 = (getTempRet0() | 0);
 $1321 = (_i64Add(($1319|0),($1320|0),($1315|0),($1316|0))|0);
 $1322 = (getTempRet0() | 0);
 $1323 = (_i64Subtract(($1321|0),($1322|0),($1129|0),($1094|0))|0);
 $1324 = (getTempRet0() | 0);
 $1325 = (_i64Add(($1323|0),($1324|0),($1240|0),($1241|0))|0);
 $1326 = (getTempRet0() | 0);
 $1327 = (___muldi3(($1261|0),($1262|0),666643,0)|0);
 $1328 = (getTempRet0() | 0);
 $1329 = (___muldi3(($1261|0),($1262|0),470296,0)|0);
 $1330 = (getTempRet0() | 0);
 $1331 = (___muldi3(($1261|0),($1262|0),654183,0)|0);
 $1332 = (getTempRet0() | 0);
 $1333 = (___muldi3(($1261|0),($1262|0),-997805,-1)|0);
 $1334 = (getTempRet0() | 0);
 $1335 = (___muldi3(($1261|0),($1262|0),136657,0)|0);
 $1336 = (getTempRet0() | 0);
 $1337 = (___muldi3(($1261|0),($1262|0),-683901,-1)|0);
 $1338 = (getTempRet0() | 0);
 $1339 = (___muldi3(($1264|0),($1265|0),666643,0)|0);
 $1340 = (getTempRet0() | 0);
 $1341 = (___muldi3(($1264|0),($1265|0),470296,0)|0);
 $1342 = (getTempRet0() | 0);
 $1343 = (___muldi3(($1264|0),($1265|0),654183,0)|0);
 $1344 = (getTempRet0() | 0);
 $1345 = (___muldi3(($1264|0),($1265|0),-997805,-1)|0);
 $1346 = (getTempRet0() | 0);
 $1347 = (___muldi3(($1264|0),($1265|0),136657,0)|0);
 $1348 = (getTempRet0() | 0);
 $1349 = (___muldi3(($1264|0),($1265|0),-683901,-1)|0);
 $1350 = (getTempRet0() | 0);
 $1351 = (_i64Add(($1297|0),($1298|0),($1277|0),($1278|0))|0);
 $1352 = (getTempRet0() | 0);
 $1353 = (_i64Add(($1351|0),($1352|0),($1311|0),($1312|0))|0);
 $1354 = (getTempRet0() | 0);
 $1355 = (_i64Subtract(($1353|0),($1354|0),($826|0),($827|0))|0);
 $1356 = (getTempRet0() | 0);
 $1357 = (_i64Add(($1355|0),($1356|0),($1335|0),($1336|0))|0);
 $1358 = (getTempRet0() | 0);
 $1359 = (_i64Add(($1357|0),($1358|0),($1349|0),($1350|0))|0);
 $1360 = (getTempRet0() | 0);
 $1361 = (_i64Subtract(($1359|0),($1360|0),($1092|0),($1049|0))|0);
 $1362 = (getTempRet0() | 0);
 $1363 = (_i64Add(($1361|0),($1362|0),($1235|0),($1236|0))|0);
 $1364 = (getTempRet0() | 0);
 $1365 = (___muldi3(($1252|0),($1253|0),666643,0)|0);
 $1366 = (getTempRet0() | 0);
 $1367 = (_i64Add(($1220|0),($1221|0),($1365|0),($1366|0))|0);
 $1368 = (getTempRet0() | 0);
 $1369 = (_i64Add(($1367|0),($1368|0),($644|0),($645|0))|0);
 $1370 = (getTempRet0() | 0);
 $1371 = (_i64Subtract(($1369|0),($1370|0),($989|0),($968|0))|0);
 $1372 = (getTempRet0() | 0);
 $1373 = (___muldi3(($1252|0),($1253|0),470296,0)|0);
 $1374 = (getTempRet0() | 0);
 $1375 = (___muldi3(($1252|0),($1253|0),654183,0)|0);
 $1376 = (getTempRet0() | 0);
 $1377 = (_i64Add(($1341|0),($1342|0),($1327|0),($1328|0))|0);
 $1378 = (getTempRet0() | 0);
 $1379 = (_i64Add(($1377|0),($1378|0),($1375|0),($1376|0))|0);
 $1380 = (getTempRet0() | 0);
 $1381 = (_i64Add(($1379|0),($1380|0),($696|0),($697|0))|0);
 $1382 = (getTempRet0() | 0);
 $1383 = (_i64Add(($1381|0),($1382|0),($1225|0),($1226|0))|0);
 $1384 = (getTempRet0() | 0);
 $1385 = (_i64Subtract(($1383|0),($1384|0),($1016|0),($991|0))|0);
 $1386 = (getTempRet0() | 0);
 $1387 = (___muldi3(($1252|0),($1253|0),-997805,-1)|0);
 $1388 = (getTempRet0() | 0);
 $1389 = (___muldi3(($1252|0),($1253|0),136657,0)|0);
 $1390 = (getTempRet0() | 0);
 $1391 = (_i64Add(($1307|0),($1308|0),($1293|0),($1294|0))|0);
 $1392 = (getTempRet0() | 0);
 $1393 = (_i64Add(($1391|0),($1392|0),($1331|0),($1332|0))|0);
 $1394 = (getTempRet0() | 0);
 $1395 = (_i64Add(($1393|0),($1394|0),($1345|0),($1346|0))|0);
 $1396 = (getTempRet0() | 0);
 $1397 = (_i64Add(($1395|0),($1396|0),($1389|0),($1390|0))|0);
 $1398 = (getTempRet0() | 0);
 $1399 = (_i64Add(($1397|0),($1398|0),($760|0),($761|0))|0);
 $1400 = (getTempRet0() | 0);
 $1401 = (_i64Add(($1399|0),($1400|0),($1230|0),($1231|0))|0);
 $1402 = (getTempRet0() | 0);
 $1403 = (_i64Subtract(($1401|0),($1402|0),($1047|0),($1018|0))|0);
 $1404 = (getTempRet0() | 0);
 $1405 = (___muldi3(($1252|0),($1253|0),-683901,-1)|0);
 $1406 = (getTempRet0() | 0);
 $1407 = (_i64Add(($1371|0),($1372|0),1048576,0)|0);
 $1408 = (getTempRet0() | 0);
 $1409 = (_bitshift64Ashr(($1407|0),($1408|0),21)|0);
 $1410 = (getTempRet0() | 0);
 $1411 = (_i64Add(($1373|0),($1374|0),($1339|0),($1340|0))|0);
 $1412 = (getTempRet0() | 0);
 $1413 = (_i64Add(($1411|0),($1412|0),($987|0),($988|0))|0);
 $1414 = (getTempRet0() | 0);
 $1415 = (_i64Subtract(($1413|0),($1414|0),($1227|0),($1224|0))|0);
 $1416 = (getTempRet0() | 0);
 $1417 = (_i64Add(($1415|0),($1416|0),($1409|0),($1410|0))|0);
 $1418 = (getTempRet0() | 0);
 $1419 = $1407 & -2097152;
 $1420 = (_i64Add(($1385|0),($1386|0),1048576,0)|0);
 $1421 = (getTempRet0() | 0);
 $1422 = (_bitshift64Ashr(($1420|0),($1421|0),21)|0);
 $1423 = (getTempRet0() | 0);
 $1424 = (_i64Add(($1329|0),($1330|0),($1305|0),($1306|0))|0);
 $1425 = (getTempRet0() | 0);
 $1426 = (_i64Add(($1424|0),($1425|0),($1343|0),($1344|0))|0);
 $1427 = (getTempRet0() | 0);
 $1428 = (_i64Add(($1426|0),($1427|0),($1387|0),($1388|0))|0);
 $1429 = (getTempRet0() | 0);
 $1430 = (_i64Add(($1428|0),($1429|0),($1014|0),($1015|0))|0);
 $1431 = (getTempRet0() | 0);
 $1432 = (_i64Subtract(($1430|0),($1431|0),($1232|0),($1229|0))|0);
 $1433 = (getTempRet0() | 0);
 $1434 = (_i64Add(($1432|0),($1433|0),($1422|0),($1423|0))|0);
 $1435 = (getTempRet0() | 0);
 $1436 = $1420 & -2097152;
 $1437 = (_i64Add(($1403|0),($1404|0),1048576,0)|0);
 $1438 = (getTempRet0() | 0);
 $1439 = (_bitshift64Ashr(($1437|0),($1438|0),21)|0);
 $1440 = (getTempRet0() | 0);
 $1441 = (_i64Add(($1295|0),($1296|0),($1275|0),($1276|0))|0);
 $1442 = (getTempRet0() | 0);
 $1443 = (_i64Add(($1441|0),($1442|0),($1309|0),($1310|0))|0);
 $1444 = (getTempRet0() | 0);
 $1445 = (_i64Add(($1443|0),($1444|0),($1333|0),($1334|0))|0);
 $1446 = (getTempRet0() | 0);
 $1447 = (_i64Add(($1445|0),($1446|0),($1347|0),($1348|0))|0);
 $1448 = (getTempRet0() | 0);
 $1449 = (_i64Add(($1447|0),($1448|0),($1405|0),($1406|0))|0);
 $1450 = (getTempRet0() | 0);
 $1451 = (_i64Add(($1449|0),($1450|0),($1045|0),($1046|0))|0);
 $1452 = (getTempRet0() | 0);
 $1453 = (_i64Subtract(($1451|0),($1452|0),($1237|0),($1234|0))|0);
 $1454 = (getTempRet0() | 0);
 $1455 = (_i64Add(($1453|0),($1454|0),($1439|0),($1440|0))|0);
 $1456 = (getTempRet0() | 0);
 $1457 = $1437 & -2097152;
 $1458 = (_i64Add(($1363|0),($1364|0),1048576,0)|0);
 $1459 = (getTempRet0() | 0);
 $1460 = (_bitshift64Ashr(($1458|0),($1459|0),21)|0);
 $1461 = (getTempRet0() | 0);
 $1462 = (_i64Add(($1299|0),($1300|0),($1279|0),($1280|0))|0);
 $1463 = (getTempRet0() | 0);
 $1464 = (_i64Add(($1462|0),($1463|0),($1313|0),($1314|0))|0);
 $1465 = (getTempRet0() | 0);
 $1466 = (_i64Add(($1464|0),($1465|0),($1337|0),($1338|0))|0);
 $1467 = (getTempRet0() | 0);
 $1468 = (_i64Add(($1466|0),($1467|0),($1090|0),($1091|0))|0);
 $1469 = (getTempRet0() | 0);
 $1470 = (_i64Subtract(($1468|0),($1469|0),($1242|0),($1239|0))|0);
 $1471 = (getTempRet0() | 0);
 $1472 = (_i64Add(($1470|0),($1471|0),($1460|0),($1461|0))|0);
 $1473 = (getTempRet0() | 0);
 $1474 = $1458 & -2097152;
 $1475 = (_i64Subtract(($1363|0),($1364|0),($1474|0),($1459|0))|0);
 $1476 = (getTempRet0() | 0);
 $1477 = (_i64Add(($1325|0),($1326|0),1048576,0)|0);
 $1478 = (getTempRet0() | 0);
 $1479 = (_bitshift64Ashr(($1477|0),($1478|0),21)|0);
 $1480 = (getTempRet0() | 0);
 $1481 = (_i64Add(($1303|0),($1304|0),($1283|0),($1284|0))|0);
 $1482 = (getTempRet0() | 0);
 $1483 = (_i64Add(($1481|0),($1482|0),($1127|0),($1128|0))|0);
 $1484 = (getTempRet0() | 0);
 $1485 = (_i64Subtract(($1483|0),($1484|0),($1247|0),($1244|0))|0);
 $1486 = (getTempRet0() | 0);
 $1487 = (_i64Add(($1485|0),($1486|0),($1479|0),($1480|0))|0);
 $1488 = (getTempRet0() | 0);
 $1489 = $1477 & -2097152;
 $1490 = (_i64Subtract(($1325|0),($1326|0),($1489|0),($1478|0))|0);
 $1491 = (getTempRet0() | 0);
 $1492 = (_i64Add(($1291|0),($1292|0),1048576,0)|0);
 $1493 = (getTempRet0() | 0);
 $1494 = (_bitshift64Ashr(($1492|0),($1493|0),21)|0);
 $1495 = (getTempRet0() | 0);
 $1496 = (_i64Add(($1494|0),($1495|0),($1255|0),($1256|0))|0);
 $1497 = (getTempRet0() | 0);
 $1498 = $1492 & -2097152;
 $1499 = (_i64Subtract(($1291|0),($1292|0),($1498|0),($1493|0))|0);
 $1500 = (getTempRet0() | 0);
 $1501 = (_i64Add(($1417|0),($1418|0),1048576,0)|0);
 $1502 = (getTempRet0() | 0);
 $1503 = (_bitshift64Ashr(($1501|0),($1502|0),21)|0);
 $1504 = (getTempRet0() | 0);
 $1505 = $1501 & -2097152;
 $1506 = (_i64Add(($1434|0),($1435|0),1048576,0)|0);
 $1507 = (getTempRet0() | 0);
 $1508 = (_bitshift64Ashr(($1506|0),($1507|0),21)|0);
 $1509 = (getTempRet0() | 0);
 $1510 = $1506 & -2097152;
 $1511 = (_i64Add(($1455|0),($1456|0),1048576,0)|0);
 $1512 = (getTempRet0() | 0);
 $1513 = (_bitshift64Ashr(($1511|0),($1512|0),21)|0);
 $1514 = (getTempRet0() | 0);
 $1515 = (_i64Add(($1513|0),($1514|0),($1475|0),($1476|0))|0);
 $1516 = (getTempRet0() | 0);
 $1517 = $1511 & -2097152;
 $1518 = (_i64Subtract(($1455|0),($1456|0),($1517|0),($1512|0))|0);
 $1519 = (getTempRet0() | 0);
 $1520 = (_i64Add(($1472|0),($1473|0),1048576,0)|0);
 $1521 = (getTempRet0() | 0);
 $1522 = (_bitshift64Ashr(($1520|0),($1521|0),21)|0);
 $1523 = (getTempRet0() | 0);
 $1524 = (_i64Add(($1522|0),($1523|0),($1490|0),($1491|0))|0);
 $1525 = (getTempRet0() | 0);
 $1526 = $1520 & -2097152;
 $1527 = (_i64Subtract(($1472|0),($1473|0),($1526|0),($1521|0))|0);
 $1528 = (getTempRet0() | 0);
 $1529 = (_i64Add(($1487|0),($1488|0),1048576,0)|0);
 $1530 = (getTempRet0() | 0);
 $1531 = (_bitshift64Ashr(($1529|0),($1530|0),21)|0);
 $1532 = (getTempRet0() | 0);
 $1533 = (_i64Add(($1531|0),($1532|0),($1499|0),($1500|0))|0);
 $1534 = (getTempRet0() | 0);
 $1535 = $1529 & -2097152;
 $1536 = (_i64Subtract(($1487|0),($1488|0),($1535|0),($1530|0))|0);
 $1537 = (getTempRet0() | 0);
 $1538 = (___muldi3(($1496|0),($1497|0),666643,0)|0);
 $1539 = (getTempRet0() | 0);
 $1540 = (___muldi3(($1496|0),($1497|0),470296,0)|0);
 $1541 = (getTempRet0() | 0);
 $1542 = (___muldi3(($1496|0),($1497|0),654183,0)|0);
 $1543 = (getTempRet0() | 0);
 $1544 = (___muldi3(($1496|0),($1497|0),-997805,-1)|0);
 $1545 = (getTempRet0() | 0);
 $1546 = (___muldi3(($1496|0),($1497|0),136657,0)|0);
 $1547 = (getTempRet0() | 0);
 $1548 = (___muldi3(($1496|0),($1497|0),-683901,-1)|0);
 $1549 = (getTempRet0() | 0);
 $1550 = (_i64Add(($1508|0),($1509|0),($1548|0),($1549|0))|0);
 $1551 = (getTempRet0() | 0);
 $1552 = (_i64Add(($1550|0),($1551|0),($1403|0),($1404|0))|0);
 $1553 = (getTempRet0() | 0);
 $1554 = (_i64Subtract(($1552|0),($1553|0),($1457|0),($1438|0))|0);
 $1555 = (getTempRet0() | 0);
 $1556 = (___muldi3(($1533|0),($1534|0),666643,0)|0);
 $1557 = (getTempRet0() | 0);
 $1558 = (___muldi3(($1533|0),($1534|0),470296,0)|0);
 $1559 = (getTempRet0() | 0);
 $1560 = (___muldi3(($1533|0),($1534|0),654183,0)|0);
 $1561 = (getTempRet0() | 0);
 $1562 = (___muldi3(($1533|0),($1534|0),-997805,-1)|0);
 $1563 = (getTempRet0() | 0);
 $1564 = (___muldi3(($1533|0),($1534|0),136657,0)|0);
 $1565 = (getTempRet0() | 0);
 $1566 = (___muldi3(($1533|0),($1534|0),-683901,-1)|0);
 $1567 = (getTempRet0() | 0);
 $1568 = (___muldi3(($1536|0),($1537|0),666643,0)|0);
 $1569 = (getTempRet0() | 0);
 $1570 = (_i64Add(($1216|0),($1217|0),($1568|0),($1569|0))|0);
 $1571 = (getTempRet0() | 0);
 $1572 = (___muldi3(($1536|0),($1537|0),470296,0)|0);
 $1573 = (getTempRet0() | 0);
 $1574 = (___muldi3(($1536|0),($1537|0),654183,0)|0);
 $1575 = (getTempRet0() | 0);
 $1576 = (___muldi3(($1536|0),($1537|0),-997805,-1)|0);
 $1577 = (getTempRet0() | 0);
 $1578 = (___muldi3(($1536|0),($1537|0),136657,0)|0);
 $1579 = (getTempRet0() | 0);
 $1580 = (___muldi3(($1536|0),($1537|0),-683901,-1)|0);
 $1581 = (getTempRet0() | 0);
 $1582 = (_i64Add(($1564|0),($1565|0),($1544|0),($1545|0))|0);
 $1583 = (getTempRet0() | 0);
 $1584 = (_i64Add(($1582|0),($1583|0),($1580|0),($1581|0))|0);
 $1585 = (getTempRet0() | 0);
 $1586 = (_i64Add(($1584|0),($1585|0),($1503|0),($1504|0))|0);
 $1587 = (getTempRet0() | 0);
 $1588 = (_i64Add(($1586|0),($1587|0),($1385|0),($1386|0))|0);
 $1589 = (getTempRet0() | 0);
 $1590 = (_i64Subtract(($1588|0),($1589|0),($1436|0),($1421|0))|0);
 $1591 = (getTempRet0() | 0);
 $1592 = (___muldi3(($1524|0),($1525|0),666643,0)|0);
 $1593 = (getTempRet0() | 0);
 $1594 = (___muldi3(($1524|0),($1525|0),470296,0)|0);
 $1595 = (getTempRet0() | 0);
 $1596 = (___muldi3(($1524|0),($1525|0),654183,0)|0);
 $1597 = (getTempRet0() | 0);
 $1598 = (___muldi3(($1524|0),($1525|0),-997805,-1)|0);
 $1599 = (getTempRet0() | 0);
 $1600 = (___muldi3(($1524|0),($1525|0),136657,0)|0);
 $1601 = (getTempRet0() | 0);
 $1602 = (___muldi3(($1524|0),($1525|0),-683901,-1)|0);
 $1603 = (getTempRet0() | 0);
 $1604 = (___muldi3(($1527|0),($1528|0),666643,0)|0);
 $1605 = (getTempRet0() | 0);
 $1606 = (___muldi3(($1527|0),($1528|0),470296,0)|0);
 $1607 = (getTempRet0() | 0);
 $1608 = (___muldi3(($1527|0),($1528|0),654183,0)|0);
 $1609 = (getTempRet0() | 0);
 $1610 = (___muldi3(($1527|0),($1528|0),-997805,-1)|0);
 $1611 = (getTempRet0() | 0);
 $1612 = (___muldi3(($1527|0),($1528|0),136657,0)|0);
 $1613 = (getTempRet0() | 0);
 $1614 = (___muldi3(($1527|0),($1528|0),-683901,-1)|0);
 $1615 = (getTempRet0() | 0);
 $1616 = (_i64Add(($1560|0),($1561|0),($1540|0),($1541|0))|0);
 $1617 = (getTempRet0() | 0);
 $1618 = (_i64Add(($1616|0),($1617|0),($1576|0),($1577|0))|0);
 $1619 = (getTempRet0() | 0);
 $1620 = (_i64Add(($1618|0),($1619|0),($1371|0),($1372|0))|0);
 $1621 = (getTempRet0() | 0);
 $1622 = (_i64Subtract(($1620|0),($1621|0),($1419|0),($1408|0))|0);
 $1623 = (getTempRet0() | 0);
 $1624 = (_i64Add(($1622|0),($1623|0),($1600|0),($1601|0))|0);
 $1625 = (getTempRet0() | 0);
 $1626 = (_i64Add(($1624|0),($1625|0),($1614|0),($1615|0))|0);
 $1627 = (getTempRet0() | 0);
 $1628 = (___muldi3(($1515|0),($1516|0),666643,0)|0);
 $1629 = (getTempRet0() | 0);
 $1630 = (_i64Add(($1628|0),($1629|0),($931|0),($932|0))|0);
 $1631 = (getTempRet0() | 0);
 $1632 = (___muldi3(($1515|0),($1516|0),470296,0)|0);
 $1633 = (getTempRet0() | 0);
 $1634 = (___muldi3(($1515|0),($1516|0),654183,0)|0);
 $1635 = (getTempRet0() | 0);
 $1636 = (_i64Add(($1206|0),($1207|0),($576|0),($577|0))|0);
 $1637 = (getTempRet0() | 0);
 $1638 = (_i64Subtract(($1636|0),($1637|0),($947|0),($934|0))|0);
 $1639 = (getTempRet0() | 0);
 $1640 = (_i64Add(($1638|0),($1639|0),($1634|0),($1635|0))|0);
 $1641 = (getTempRet0() | 0);
 $1642 = (_i64Add(($1640|0),($1641|0),($1592|0),($1593|0))|0);
 $1643 = (getTempRet0() | 0);
 $1644 = (_i64Add(($1642|0),($1643|0),($1606|0),($1607|0))|0);
 $1645 = (getTempRet0() | 0);
 $1646 = (___muldi3(($1515|0),($1516|0),-997805,-1)|0);
 $1647 = (getTempRet0() | 0);
 $1648 = (___muldi3(($1515|0),($1516|0),136657,0)|0);
 $1649 = (getTempRet0() | 0);
 $1650 = (_i64Add(($604|0),($605|0),($1213|0),($1214|0))|0);
 $1651 = (getTempRet0() | 0);
 $1652 = (_i64Subtract(($1650|0),($1651|0),($966|0),($949|0))|0);
 $1653 = (getTempRet0() | 0);
 $1654 = (_i64Add(($1652|0),($1653|0),($1556|0),($1557|0))|0);
 $1655 = (getTempRet0() | 0);
 $1656 = (_i64Add(($1654|0),($1655|0),($1572|0),($1573|0))|0);
 $1657 = (getTempRet0() | 0);
 $1658 = (_i64Add(($1656|0),($1657|0),($1648|0),($1649|0))|0);
 $1659 = (getTempRet0() | 0);
 $1660 = (_i64Add(($1658|0),($1659|0),($1596|0),($1597|0))|0);
 $1661 = (getTempRet0() | 0);
 $1662 = (_i64Add(($1660|0),($1661|0),($1610|0),($1611|0))|0);
 $1663 = (getTempRet0() | 0);
 $1664 = (___muldi3(($1515|0),($1516|0),-683901,-1)|0);
 $1665 = (getTempRet0() | 0);
 $1666 = (_i64Add(($1630|0),($1631|0),1048576,0)|0);
 $1667 = (getTempRet0() | 0);
 $1668 = (_bitshift64Ashr(($1666|0),($1667|0),21)|0);
 $1669 = (getTempRet0() | 0);
 $1670 = (_i64Add(($1209|0),($1210|0),($1632|0),($1633|0))|0);
 $1671 = (getTempRet0() | 0);
 $1672 = (_i64Add(($1670|0),($1671|0),($1604|0),($1605|0))|0);
 $1673 = (getTempRet0() | 0);
 $1674 = (_i64Add(($1672|0),($1673|0),($1668|0),($1669|0))|0);
 $1675 = (getTempRet0() | 0);
 $1676 = $1666 & -2097152;
 $1677 = (_i64Subtract(($1630|0),($1631|0),($1676|0),($1667|0))|0);
 $1678 = (getTempRet0() | 0);
 $1679 = (_i64Add(($1644|0),($1645|0),1048576,0)|0);
 $1680 = (getTempRet0() | 0);
 $1681 = (_bitshift64Ashr(($1679|0),($1680|0),21)|0);
 $1682 = (getTempRet0() | 0);
 $1683 = (_i64Add(($1570|0),($1571|0),($1646|0),($1647|0))|0);
 $1684 = (getTempRet0() | 0);
 $1685 = (_i64Add(($1683|0),($1684|0),($1594|0),($1595|0))|0);
 $1686 = (getTempRet0() | 0);
 $1687 = (_i64Add(($1685|0),($1686|0),($1608|0),($1609|0))|0);
 $1688 = (getTempRet0() | 0);
 $1689 = (_i64Add(($1687|0),($1688|0),($1681|0),($1682|0))|0);
 $1690 = (getTempRet0() | 0);
 $1691 = $1679 & -2097152;
 $1692 = (_i64Add(($1662|0),($1663|0),1048576,0)|0);
 $1693 = (getTempRet0() | 0);
 $1694 = (_bitshift64Ashr(($1692|0),($1693|0),21)|0);
 $1695 = (getTempRet0() | 0);
 $1696 = (_i64Add(($964|0),($965|0),($1538|0),($1539|0))|0);
 $1697 = (getTempRet0() | 0);
 $1698 = (_i64Subtract(($1696|0),($1697|0),($1222|0),($1219|0))|0);
 $1699 = (getTempRet0() | 0);
 $1700 = (_i64Add(($1698|0),($1699|0),($1558|0),($1559|0))|0);
 $1701 = (getTempRet0() | 0);
 $1702 = (_i64Add(($1700|0),($1701|0),($1574|0),($1575|0))|0);
 $1703 = (getTempRet0() | 0);
 $1704 = (_i64Add(($1702|0),($1703|0),($1664|0),($1665|0))|0);
 $1705 = (getTempRet0() | 0);
 $1706 = (_i64Add(($1704|0),($1705|0),($1598|0),($1599|0))|0);
 $1707 = (getTempRet0() | 0);
 $1708 = (_i64Add(($1706|0),($1707|0),($1612|0),($1613|0))|0);
 $1709 = (getTempRet0() | 0);
 $1710 = (_i64Add(($1708|0),($1709|0),($1694|0),($1695|0))|0);
 $1711 = (getTempRet0() | 0);
 $1712 = $1692 & -2097152;
 $1713 = (_i64Add(($1626|0),($1627|0),1048576,0)|0);
 $1714 = (getTempRet0() | 0);
 $1715 = (_bitshift64Ashr(($1713|0),($1714|0),21)|0);
 $1716 = (getTempRet0() | 0);
 $1717 = (_i64Add(($1562|0),($1563|0),($1542|0),($1543|0))|0);
 $1718 = (getTempRet0() | 0);
 $1719 = (_i64Add(($1717|0),($1718|0),($1578|0),($1579|0))|0);
 $1720 = (getTempRet0() | 0);
 $1721 = (_i64Add(($1719|0),($1720|0),($1417|0),($1418|0))|0);
 $1722 = (getTempRet0() | 0);
 $1723 = (_i64Subtract(($1721|0),($1722|0),($1505|0),($1502|0))|0);
 $1724 = (getTempRet0() | 0);
 $1725 = (_i64Add(($1723|0),($1724|0),($1602|0),($1603|0))|0);
 $1726 = (getTempRet0() | 0);
 $1727 = (_i64Add(($1725|0),($1726|0),($1715|0),($1716|0))|0);
 $1728 = (getTempRet0() | 0);
 $1729 = $1713 & -2097152;
 $1730 = (_i64Subtract(($1626|0),($1627|0),($1729|0),($1714|0))|0);
 $1731 = (getTempRet0() | 0);
 $1732 = (_i64Add(($1590|0),($1591|0),1048576,0)|0);
 $1733 = (getTempRet0() | 0);
 $1734 = (_bitshift64Ashr(($1732|0),($1733|0),21)|0);
 $1735 = (getTempRet0() | 0);
 $1736 = (_i64Add(($1566|0),($1567|0),($1546|0),($1547|0))|0);
 $1737 = (getTempRet0() | 0);
 $1738 = (_i64Add(($1736|0),($1737|0),($1434|0),($1435|0))|0);
 $1739 = (getTempRet0() | 0);
 $1740 = (_i64Subtract(($1738|0),($1739|0),($1510|0),($1507|0))|0);
 $1741 = (getTempRet0() | 0);
 $1742 = (_i64Add(($1740|0),($1741|0),($1734|0),($1735|0))|0);
 $1743 = (getTempRet0() | 0);
 $1744 = $1732 & -2097152;
 $1745 = (_i64Subtract(($1590|0),($1591|0),($1744|0),($1733|0))|0);
 $1746 = (getTempRet0() | 0);
 $1747 = (_i64Add(($1554|0),($1555|0),1048576,0)|0);
 $1748 = (getTempRet0() | 0);
 $1749 = (_bitshift64Ashr(($1747|0),($1748|0),21)|0);
 $1750 = (getTempRet0() | 0);
 $1751 = (_i64Add(($1518|0),($1519|0),($1749|0),($1750|0))|0);
 $1752 = (getTempRet0() | 0);
 $1753 = $1747 & -2097152;
 $1754 = (_i64Add(($1674|0),($1675|0),1048576,0)|0);
 $1755 = (getTempRet0() | 0);
 $1756 = (_bitshift64Ashr(($1754|0),($1755|0),21)|0);
 $1757 = (getTempRet0() | 0);
 $1758 = $1754 & -2097152;
 $1759 = (_i64Add(($1689|0),($1690|0),1048576,0)|0);
 $1760 = (getTempRet0() | 0);
 $1761 = (_bitshift64Ashr(($1759|0),($1760|0),21)|0);
 $1762 = (getTempRet0() | 0);
 $1763 = $1759 & -2097152;
 $1764 = (_i64Add(($1710|0),($1711|0),1048576,0)|0);
 $1765 = (getTempRet0() | 0);
 $1766 = (_bitshift64Ashr(($1764|0),($1765|0),21)|0);
 $1767 = (getTempRet0() | 0);
 $1768 = (_i64Add(($1730|0),($1731|0),($1766|0),($1767|0))|0);
 $1769 = (getTempRet0() | 0);
 $1770 = $1764 & -2097152;
 $1771 = (_i64Add(($1727|0),($1728|0),1048576,0)|0);
 $1772 = (getTempRet0() | 0);
 $1773 = (_bitshift64Ashr(($1771|0),($1772|0),21)|0);
 $1774 = (getTempRet0() | 0);
 $1775 = (_i64Add(($1745|0),($1746|0),($1773|0),($1774|0))|0);
 $1776 = (getTempRet0() | 0);
 $1777 = $1771 & -2097152;
 $1778 = (_i64Subtract(($1727|0),($1728|0),($1777|0),($1772|0))|0);
 $1779 = (getTempRet0() | 0);
 $1780 = (_i64Add(($1742|0),($1743|0),1048576,0)|0);
 $1781 = (getTempRet0() | 0);
 $1782 = (_bitshift64Ashr(($1780|0),($1781|0),21)|0);
 $1783 = (getTempRet0() | 0);
 $1784 = $1780 & -2097152;
 $1785 = (_i64Subtract(($1742|0),($1743|0),($1784|0),($1781|0))|0);
 $1786 = (getTempRet0() | 0);
 $1787 = (_i64Add(($1751|0),($1752|0),1048576,0)|0);
 $1788 = (getTempRet0() | 0);
 $1789 = (_bitshift64Ashr(($1787|0),($1788|0),21)|0);
 $1790 = (getTempRet0() | 0);
 $1791 = $1787 & -2097152;
 $1792 = (_i64Subtract(($1751|0),($1752|0),($1791|0),($1788|0))|0);
 $1793 = (getTempRet0() | 0);
 $1794 = (___muldi3(($1789|0),($1790|0),666643,0)|0);
 $1795 = (getTempRet0() | 0);
 $1796 = (_i64Add(($1677|0),($1678|0),($1794|0),($1795|0))|0);
 $1797 = (getTempRet0() | 0);
 $1798 = (___muldi3(($1789|0),($1790|0),470296,0)|0);
 $1799 = (getTempRet0() | 0);
 $1800 = (___muldi3(($1789|0),($1790|0),654183,0)|0);
 $1801 = (getTempRet0() | 0);
 $1802 = (___muldi3(($1789|0),($1790|0),-997805,-1)|0);
 $1803 = (getTempRet0() | 0);
 $1804 = (___muldi3(($1789|0),($1790|0),136657,0)|0);
 $1805 = (getTempRet0() | 0);
 $1806 = (___muldi3(($1789|0),($1790|0),-683901,-1)|0);
 $1807 = (getTempRet0() | 0);
 $1808 = (_bitshift64Ashr(($1796|0),($1797|0),21)|0);
 $1809 = (getTempRet0() | 0);
 $1810 = (_i64Add(($1674|0),($1675|0),($1798|0),($1799|0))|0);
 $1811 = (getTempRet0() | 0);
 $1812 = (_i64Subtract(($1810|0),($1811|0),($1758|0),($1755|0))|0);
 $1813 = (getTempRet0() | 0);
 $1814 = (_i64Add(($1812|0),($1813|0),($1808|0),($1809|0))|0);
 $1815 = (getTempRet0() | 0);
 $1816 = $1796 & 2097151;
 $1817 = (_bitshift64Ashr(($1814|0),($1815|0),21)|0);
 $1818 = (getTempRet0() | 0);
 $1819 = (_i64Add(($1644|0),($1645|0),($1800|0),($1801|0))|0);
 $1820 = (getTempRet0() | 0);
 $1821 = (_i64Subtract(($1819|0),($1820|0),($1691|0),($1680|0))|0);
 $1822 = (getTempRet0() | 0);
 $1823 = (_i64Add(($1821|0),($1822|0),($1756|0),($1757|0))|0);
 $1824 = (getTempRet0() | 0);
 $1825 = (_i64Add(($1823|0),($1824|0),($1817|0),($1818|0))|0);
 $1826 = (getTempRet0() | 0);
 $1827 = $1814 & 2097151;
 $1828 = (_bitshift64Ashr(($1825|0),($1826|0),21)|0);
 $1829 = (getTempRet0() | 0);
 $1830 = (_i64Add(($1689|0),($1690|0),($1802|0),($1803|0))|0);
 $1831 = (getTempRet0() | 0);
 $1832 = (_i64Subtract(($1830|0),($1831|0),($1763|0),($1760|0))|0);
 $1833 = (getTempRet0() | 0);
 $1834 = (_i64Add(($1832|0),($1833|0),($1828|0),($1829|0))|0);
 $1835 = (getTempRet0() | 0);
 $1836 = $1825 & 2097151;
 $1837 = (_bitshift64Ashr(($1834|0),($1835|0),21)|0);
 $1838 = (getTempRet0() | 0);
 $1839 = (_i64Add(($1662|0),($1663|0),($1804|0),($1805|0))|0);
 $1840 = (getTempRet0() | 0);
 $1841 = (_i64Subtract(($1839|0),($1840|0),($1712|0),($1693|0))|0);
 $1842 = (getTempRet0() | 0);
 $1843 = (_i64Add(($1841|0),($1842|0),($1761|0),($1762|0))|0);
 $1844 = (getTempRet0() | 0);
 $1845 = (_i64Add(($1843|0),($1844|0),($1837|0),($1838|0))|0);
 $1846 = (getTempRet0() | 0);
 $1847 = $1834 & 2097151;
 $1848 = (_bitshift64Ashr(($1845|0),($1846|0),21)|0);
 $1849 = (getTempRet0() | 0);
 $1850 = (_i64Add(($1710|0),($1711|0),($1806|0),($1807|0))|0);
 $1851 = (getTempRet0() | 0);
 $1852 = (_i64Subtract(($1850|0),($1851|0),($1770|0),($1765|0))|0);
 $1853 = (getTempRet0() | 0);
 $1854 = (_i64Add(($1852|0),($1853|0),($1848|0),($1849|0))|0);
 $1855 = (getTempRet0() | 0);
 $1856 = $1845 & 2097151;
 $1857 = (_bitshift64Ashr(($1854|0),($1855|0),21)|0);
 $1858 = (getTempRet0() | 0);
 $1859 = (_i64Add(($1768|0),($1769|0),($1857|0),($1858|0))|0);
 $1860 = (getTempRet0() | 0);
 $1861 = $1854 & 2097151;
 $1862 = (_bitshift64Ashr(($1859|0),($1860|0),21)|0);
 $1863 = (getTempRet0() | 0);
 $1864 = (_i64Add(($1862|0),($1863|0),($1778|0),($1779|0))|0);
 $1865 = (getTempRet0() | 0);
 $1866 = $1859 & 2097151;
 $1867 = (_bitshift64Ashr(($1864|0),($1865|0),21)|0);
 $1868 = (getTempRet0() | 0);
 $1869 = (_i64Add(($1775|0),($1776|0),($1867|0),($1868|0))|0);
 $1870 = (getTempRet0() | 0);
 $1871 = $1864 & 2097151;
 $1872 = (_bitshift64Ashr(($1869|0),($1870|0),21)|0);
 $1873 = (getTempRet0() | 0);
 $1874 = (_i64Add(($1872|0),($1873|0),($1785|0),($1786|0))|0);
 $1875 = (getTempRet0() | 0);
 $1876 = $1869 & 2097151;
 $1877 = (_bitshift64Ashr(($1874|0),($1875|0),21)|0);
 $1878 = (getTempRet0() | 0);
 $1879 = (_i64Add(($1782|0),($1783|0),($1554|0),($1555|0))|0);
 $1880 = (getTempRet0() | 0);
 $1881 = (_i64Subtract(($1879|0),($1880|0),($1753|0),($1748|0))|0);
 $1882 = (getTempRet0() | 0);
 $1883 = (_i64Add(($1881|0),($1882|0),($1877|0),($1878|0))|0);
 $1884 = (getTempRet0() | 0);
 $1885 = $1874 & 2097151;
 $1886 = (_bitshift64Ashr(($1883|0),($1884|0),21)|0);
 $1887 = (getTempRet0() | 0);
 $1888 = (_i64Add(($1886|0),($1887|0),($1792|0),($1793|0))|0);
 $1889 = (getTempRet0() | 0);
 $1890 = $1883 & 2097151;
 $1891 = (_bitshift64Ashr(($1888|0),($1889|0),21)|0);
 $1892 = (getTempRet0() | 0);
 $1893 = $1888 & 2097151;
 $1894 = (___muldi3(($1891|0),($1892|0),666643,0)|0);
 $1895 = (getTempRet0() | 0);
 $1896 = (_i64Add(($1894|0),($1895|0),($1816|0),0)|0);
 $1897 = (getTempRet0() | 0);
 $1898 = (___muldi3(($1891|0),($1892|0),470296,0)|0);
 $1899 = (getTempRet0() | 0);
 $1900 = (_i64Add(($1898|0),($1899|0),($1827|0),0)|0);
 $1901 = (getTempRet0() | 0);
 $1902 = (___muldi3(($1891|0),($1892|0),654183,0)|0);
 $1903 = (getTempRet0() | 0);
 $1904 = (_i64Add(($1902|0),($1903|0),($1836|0),0)|0);
 $1905 = (getTempRet0() | 0);
 $1906 = (___muldi3(($1891|0),($1892|0),-997805,-1)|0);
 $1907 = (getTempRet0() | 0);
 $1908 = (_i64Add(($1906|0),($1907|0),($1847|0),0)|0);
 $1909 = (getTempRet0() | 0);
 $1910 = (___muldi3(($1891|0),($1892|0),136657,0)|0);
 $1911 = (getTempRet0() | 0);
 $1912 = (_i64Add(($1910|0),($1911|0),($1856|0),0)|0);
 $1913 = (getTempRet0() | 0);
 $1914 = (___muldi3(($1891|0),($1892|0),-683901,-1)|0);
 $1915 = (getTempRet0() | 0);
 $1916 = (_i64Add(($1914|0),($1915|0),($1861|0),0)|0);
 $1917 = (getTempRet0() | 0);
 $1918 = (_bitshift64Ashr(($1896|0),($1897|0),21)|0);
 $1919 = (getTempRet0() | 0);
 $1920 = (_i64Add(($1900|0),($1901|0),($1918|0),($1919|0))|0);
 $1921 = (getTempRet0() | 0);
 $1922 = (_bitshift64Ashr(($1920|0),($1921|0),21)|0);
 $1923 = (getTempRet0() | 0);
 $1924 = (_i64Add(($1904|0),($1905|0),($1922|0),($1923|0))|0);
 $1925 = (getTempRet0() | 0);
 $1926 = $1920 & 2097151;
 $1927 = (_bitshift64Ashr(($1924|0),($1925|0),21)|0);
 $1928 = (getTempRet0() | 0);
 $1929 = (_i64Add(($1908|0),($1909|0),($1927|0),($1928|0))|0);
 $1930 = (getTempRet0() | 0);
 $1931 = $1924 & 2097151;
 $1932 = (_bitshift64Ashr(($1929|0),($1930|0),21)|0);
 $1933 = (getTempRet0() | 0);
 $1934 = (_i64Add(($1912|0),($1913|0),($1932|0),($1933|0))|0);
 $1935 = (getTempRet0() | 0);
 $1936 = $1929 & 2097151;
 $1937 = (_bitshift64Ashr(($1934|0),($1935|0),21)|0);
 $1938 = (getTempRet0() | 0);
 $1939 = (_i64Add(($1916|0),($1917|0),($1937|0),($1938|0))|0);
 $1940 = (getTempRet0() | 0);
 $1941 = $1934 & 2097151;
 $1942 = (_bitshift64Ashr(($1939|0),($1940|0),21)|0);
 $1943 = (getTempRet0() | 0);
 $1944 = (_i64Add(($1942|0),($1943|0),($1866|0),0)|0);
 $1945 = (getTempRet0() | 0);
 $1946 = $1939 & 2097151;
 $1947 = (_bitshift64Ashr(($1944|0),($1945|0),21)|0);
 $1948 = (getTempRet0() | 0);
 $1949 = (_i64Add(($1947|0),($1948|0),($1871|0),0)|0);
 $1950 = (getTempRet0() | 0);
 $1951 = $1944 & 2097151;
 $1952 = (_bitshift64Ashr(($1949|0),($1950|0),21)|0);
 $1953 = (getTempRet0() | 0);
 $1954 = (_i64Add(($1952|0),($1953|0),($1876|0),0)|0);
 $1955 = (getTempRet0() | 0);
 $1956 = (_bitshift64Ashr(($1954|0),($1955|0),21)|0);
 $1957 = (getTempRet0() | 0);
 $1958 = (_i64Add(($1956|0),($1957|0),($1885|0),0)|0);
 $1959 = (getTempRet0() | 0);
 $1960 = (_bitshift64Ashr(($1958|0),($1959|0),21)|0);
 $1961 = (getTempRet0() | 0);
 $1962 = (_i64Add(($1960|0),($1961|0),($1890|0),0)|0);
 $1963 = (getTempRet0() | 0);
 $1964 = $1958 & 2097151;
 $1965 = (_bitshift64Ashr(($1962|0),($1963|0),21)|0);
 $1966 = (getTempRet0() | 0);
 $1967 = (_i64Add(($1965|0),($1966|0),($1893|0),0)|0);
 $1968 = (getTempRet0() | 0);
 $1969 = $1962 & 2097151;
 $1970 = $1896&255;
 HEAP8[$s>>0] = $1970;
 $1971 = (_bitshift64Lshr(($1896|0),($1897|0),8)|0);
 $1972 = (getTempRet0() | 0);
 $1973 = $1971&255;
 $arrayidx906 = ((($s)) + 1|0);
 HEAP8[$arrayidx906>>0] = $1973;
 $1974 = (_bitshift64Lshr(($1896|0),($1897|0),16)|0);
 $1975 = (getTempRet0() | 0);
 $1976 = $1974 & 31;
 $1977 = (_bitshift64Shl(($1926|0),0,5)|0);
 $1978 = (getTempRet0() | 0);
 $1979 = $1977 | $1976;
 $1980 = $1979&255;
 $arrayidx910 = ((($s)) + 2|0);
 HEAP8[$arrayidx910>>0] = $1980;
 $1981 = (_bitshift64Lshr(($1920|0),($1921|0),3)|0);
 $1982 = (getTempRet0() | 0);
 $1983 = $1981&255;
 $arrayidx913 = ((($s)) + 3|0);
 HEAP8[$arrayidx913>>0] = $1983;
 $1984 = (_bitshift64Lshr(($1920|0),($1921|0),11)|0);
 $1985 = (getTempRet0() | 0);
 $1986 = $1984&255;
 $arrayidx916 = ((($s)) + 4|0);
 HEAP8[$arrayidx916>>0] = $1986;
 $1987 = (_bitshift64Lshr(($1926|0),0,19)|0);
 $1988 = (getTempRet0() | 0);
 $1989 = (_bitshift64Shl(($1931|0),0,2)|0);
 $1990 = (getTempRet0() | 0);
 $1991 = $1989 | $1987;
 $1990 | $1988;
 $1992 = $1991&255;
 $arrayidx921 = ((($s)) + 5|0);
 HEAP8[$arrayidx921>>0] = $1992;
 $1993 = (_bitshift64Lshr(($1924|0),($1925|0),6)|0);
 $1994 = (getTempRet0() | 0);
 $1995 = $1993&255;
 $arrayidx924 = ((($s)) + 6|0);
 HEAP8[$arrayidx924>>0] = $1995;
 $1996 = (_bitshift64Lshr(($1931|0),0,14)|0);
 $1997 = (getTempRet0() | 0);
 $1998 = (_bitshift64Shl(($1936|0),0,7)|0);
 $1999 = (getTempRet0() | 0);
 $2000 = $1998 | $1996;
 $1999 | $1997;
 $2001 = $2000&255;
 $arrayidx929 = ((($s)) + 7|0);
 HEAP8[$arrayidx929>>0] = $2001;
 $2002 = (_bitshift64Lshr(($1929|0),($1930|0),1)|0);
 $2003 = (getTempRet0() | 0);
 $2004 = $2002&255;
 $arrayidx932 = ((($s)) + 8|0);
 HEAP8[$arrayidx932>>0] = $2004;
 $2005 = (_bitshift64Lshr(($1929|0),($1930|0),9)|0);
 $2006 = (getTempRet0() | 0);
 $2007 = $2005&255;
 $arrayidx935 = ((($s)) + 9|0);
 HEAP8[$arrayidx935>>0] = $2007;
 $2008 = (_bitshift64Lshr(($1936|0),0,17)|0);
 $2009 = (getTempRet0() | 0);
 $2010 = (_bitshift64Shl(($1941|0),0,4)|0);
 $2011 = (getTempRet0() | 0);
 $2012 = $2010 | $2008;
 $2011 | $2009;
 $2013 = $2012&255;
 $arrayidx940 = ((($s)) + 10|0);
 HEAP8[$arrayidx940>>0] = $2013;
 $2014 = (_bitshift64Lshr(($1934|0),($1935|0),4)|0);
 $2015 = (getTempRet0() | 0);
 $2016 = $2014&255;
 $arrayidx943 = ((($s)) + 11|0);
 HEAP8[$arrayidx943>>0] = $2016;
 $2017 = (_bitshift64Lshr(($1934|0),($1935|0),12)|0);
 $2018 = (getTempRet0() | 0);
 $2019 = $2017&255;
 $arrayidx946 = ((($s)) + 12|0);
 HEAP8[$arrayidx946>>0] = $2019;
 $2020 = (_bitshift64Lshr(($1941|0),0,20)|0);
 $2021 = (getTempRet0() | 0);
 $2022 = (_bitshift64Shl(($1946|0),0,1)|0);
 $2023 = (getTempRet0() | 0);
 $2024 = $2022 | $2020;
 $2023 | $2021;
 $2025 = $2024&255;
 $arrayidx951 = ((($s)) + 13|0);
 HEAP8[$arrayidx951>>0] = $2025;
 $2026 = (_bitshift64Lshr(($1939|0),($1940|0),7)|0);
 $2027 = (getTempRet0() | 0);
 $2028 = $2026&255;
 $arrayidx954 = ((($s)) + 14|0);
 HEAP8[$arrayidx954>>0] = $2028;
 $2029 = (_bitshift64Lshr(($1946|0),0,15)|0);
 $2030 = (getTempRet0() | 0);
 $2031 = (_bitshift64Shl(($1951|0),0,6)|0);
 $2032 = (getTempRet0() | 0);
 $2033 = $2031 | $2029;
 $2032 | $2030;
 $2034 = $2033&255;
 $arrayidx959 = ((($s)) + 15|0);
 HEAP8[$arrayidx959>>0] = $2034;
 $2035 = (_bitshift64Lshr(($1944|0),($1945|0),2)|0);
 $2036 = (getTempRet0() | 0);
 $2037 = $2035&255;
 $arrayidx962 = ((($s)) + 16|0);
 HEAP8[$arrayidx962>>0] = $2037;
 $2038 = (_bitshift64Lshr(($1944|0),($1945|0),10)|0);
 $2039 = (getTempRet0() | 0);
 $2040 = $2038&255;
 $arrayidx965 = ((($s)) + 17|0);
 HEAP8[$arrayidx965>>0] = $2040;
 $2041 = (_bitshift64Lshr(($1951|0),0,18)|0);
 $2042 = (getTempRet0() | 0);
 $2043 = (_bitshift64Shl(($1949|0),($1950|0),3)|0);
 $2044 = (getTempRet0() | 0);
 $2045 = $2043 | $2041;
 $2044 | $2042;
 $2046 = $2045&255;
 $arrayidx970 = ((($s)) + 18|0);
 HEAP8[$arrayidx970>>0] = $2046;
 $2047 = (_bitshift64Lshr(($1949|0),($1950|0),5)|0);
 $2048 = (getTempRet0() | 0);
 $2049 = $2047&255;
 $arrayidx973 = ((($s)) + 19|0);
 HEAP8[$arrayidx973>>0] = $2049;
 $2050 = (_bitshift64Lshr(($1949|0),($1950|0),13)|0);
 $2051 = (getTempRet0() | 0);
 $2052 = $2050&255;
 $arrayidx976 = ((($s)) + 20|0);
 HEAP8[$arrayidx976>>0] = $2052;
 $2053 = $1954&255;
 $arrayidx979 = ((($s)) + 21|0);
 HEAP8[$arrayidx979>>0] = $2053;
 $2054 = (_bitshift64Lshr(($1954|0),($1955|0),8)|0);
 $2055 = (getTempRet0() | 0);
 $2056 = $2054&255;
 $arrayidx982 = ((($s)) + 22|0);
 HEAP8[$arrayidx982>>0] = $2056;
 $2057 = (_bitshift64Lshr(($1954|0),($1955|0),16)|0);
 $2058 = (getTempRet0() | 0);
 $2059 = $2057 & 31;
 $2060 = (_bitshift64Shl(($1964|0),0,5)|0);
 $2061 = (getTempRet0() | 0);
 $2062 = $2060 | $2059;
 $2063 = $2062&255;
 $arrayidx987 = ((($s)) + 23|0);
 HEAP8[$arrayidx987>>0] = $2063;
 $2064 = (_bitshift64Lshr(($1958|0),($1959|0),3)|0);
 $2065 = (getTempRet0() | 0);
 $2066 = $2064&255;
 $arrayidx990 = ((($s)) + 24|0);
 HEAP8[$arrayidx990>>0] = $2066;
 $2067 = (_bitshift64Lshr(($1958|0),($1959|0),11)|0);
 $2068 = (getTempRet0() | 0);
 $2069 = $2067&255;
 $arrayidx993 = ((($s)) + 25|0);
 HEAP8[$arrayidx993>>0] = $2069;
 $2070 = (_bitshift64Lshr(($1964|0),0,19)|0);
 $2071 = (getTempRet0() | 0);
 $2072 = (_bitshift64Shl(($1969|0),0,2)|0);
 $2073 = (getTempRet0() | 0);
 $2074 = $2072 | $2070;
 $2073 | $2071;
 $2075 = $2074&255;
 $arrayidx998 = ((($s)) + 26|0);
 HEAP8[$arrayidx998>>0] = $2075;
 $2076 = (_bitshift64Lshr(($1962|0),($1963|0),6)|0);
 $2077 = (getTempRet0() | 0);
 $2078 = $2076&255;
 $arrayidx1001 = ((($s)) + 27|0);
 HEAP8[$arrayidx1001>>0] = $2078;
 $2079 = (_bitshift64Lshr(($1969|0),0,14)|0);
 $2080 = (getTempRet0() | 0);
 $2081 = (_bitshift64Shl(($1967|0),($1968|0),7)|0);
 $2082 = (getTempRet0() | 0);
 $2083 = $2081 | $2079;
 $2082 | $2080;
 $2084 = $2083&255;
 $arrayidx1006 = ((($s)) + 28|0);
 HEAP8[$arrayidx1006>>0] = $2084;
 $2085 = (_bitshift64Lshr(($1967|0),($1968|0),1)|0);
 $2086 = (getTempRet0() | 0);
 $2087 = $2085&255;
 $arrayidx1009 = ((($s)) + 29|0);
 HEAP8[$arrayidx1009>>0] = $2087;
 $2088 = (_bitshift64Lshr(($1967|0),($1968|0),9)|0);
 $2089 = (getTempRet0() | 0);
 $2090 = $2088&255;
 $arrayidx1012 = ((($s)) + 30|0);
 HEAP8[$arrayidx1012>>0] = $2090;
 $2091 = (_bitshift64Ashr(($1967|0),($1968|0),17)|0);
 $2092 = (getTempRet0() | 0);
 $2093 = $2091&255;
 $arrayidx1015 = ((($s)) + 31|0);
 HEAP8[$arrayidx1015>>0] = $2093;
 return;
}
function _sc_check($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr = 0, $add$ptr10 = 0, $add$ptr12 = 0, $add$ptr2 = 0, $add$ptr4 = 0, $add$ptr6 = 0, $add$ptr8 = 0, $arrayidx1$i = 0, $arrayidx1$i107 = 0, $arrayidx1$i120 = 0, $arrayidx1$i42 = 0, $arrayidx1$i55 = 0, $arrayidx1$i68 = 0, $arrayidx1$i81 = 0, $arrayidx1$i94 = 0, $arrayidx3$i = 0;
 var $arrayidx3$i111 = 0, $arrayidx3$i124 = 0, $arrayidx3$i46 = 0, $arrayidx3$i59 = 0, $arrayidx3$i72 = 0, $arrayidx3$i85 = 0, $arrayidx3$i98 = 0, $arrayidx7$i = 0, $arrayidx7$i102 = 0, $arrayidx7$i115 = 0, $arrayidx7$i128 = 0, $arrayidx7$i50 = 0, $arrayidx7$i63 = 0, $arrayidx7$i76 = 0, $arrayidx7$i89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $1 = $0&255;
 $arrayidx1$i = ((($s)) + 1|0);
 $2 = HEAP8[$arrayidx1$i>>0]|0;
 $3 = $2&255;
 $4 = (_bitshift64Shl(($3|0),0,8)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4 | $1;
 $arrayidx3$i = ((($s)) + 2|0);
 $7 = HEAP8[$arrayidx3$i>>0]|0;
 $8 = $7&255;
 $9 = (_bitshift64Shl(($8|0),0,16)|0);
 $10 = (getTempRet0() | 0);
 $11 = $6 | $9;
 $12 = $5 | $10;
 $arrayidx7$i = ((($s)) + 3|0);
 $13 = HEAP8[$arrayidx7$i>>0]|0;
 $14 = $13&255;
 $15 = (_bitshift64Shl(($14|0),0,24)|0);
 $16 = (getTempRet0() | 0);
 $17 = $11 | $15;
 $18 = $12 | $16;
 $add$ptr = ((($s)) + 4|0);
 $19 = HEAP8[$add$ptr>>0]|0;
 $20 = $19&255;
 $arrayidx1$i120 = ((($s)) + 5|0);
 $21 = HEAP8[$arrayidx1$i120>>0]|0;
 $22 = $21&255;
 $23 = (_bitshift64Shl(($22|0),0,8)|0);
 $24 = (getTempRet0() | 0);
 $25 = $23 | $20;
 $arrayidx3$i124 = ((($s)) + 6|0);
 $26 = HEAP8[$arrayidx3$i124>>0]|0;
 $27 = $26&255;
 $28 = (_bitshift64Shl(($27|0),0,16)|0);
 $29 = (getTempRet0() | 0);
 $30 = $25 | $28;
 $31 = $24 | $29;
 $arrayidx7$i128 = ((($s)) + 7|0);
 $32 = HEAP8[$arrayidx7$i128>>0]|0;
 $33 = $32&255;
 $34 = (_bitshift64Shl(($33|0),0,24)|0);
 $35 = (getTempRet0() | 0);
 $36 = $30 | $34;
 $37 = $31 | $35;
 $add$ptr2 = ((($s)) + 8|0);
 $38 = HEAP8[$add$ptr2>>0]|0;
 $39 = $38&255;
 $arrayidx1$i107 = ((($s)) + 9|0);
 $40 = HEAP8[$arrayidx1$i107>>0]|0;
 $41 = $40&255;
 $42 = (_bitshift64Shl(($41|0),0,8)|0);
 $43 = (getTempRet0() | 0);
 $44 = $42 | $39;
 $arrayidx3$i111 = ((($s)) + 10|0);
 $45 = HEAP8[$arrayidx3$i111>>0]|0;
 $46 = $45&255;
 $47 = (_bitshift64Shl(($46|0),0,16)|0);
 $48 = (getTempRet0() | 0);
 $49 = $44 | $47;
 $50 = $43 | $48;
 $arrayidx7$i115 = ((($s)) + 11|0);
 $51 = HEAP8[$arrayidx7$i115>>0]|0;
 $52 = $51&255;
 $53 = (_bitshift64Shl(($52|0),0,24)|0);
 $54 = (getTempRet0() | 0);
 $55 = $49 | $53;
 $56 = $50 | $54;
 $add$ptr4 = ((($s)) + 12|0);
 $57 = HEAP8[$add$ptr4>>0]|0;
 $58 = $57&255;
 $arrayidx1$i94 = ((($s)) + 13|0);
 $59 = HEAP8[$arrayidx1$i94>>0]|0;
 $60 = $59&255;
 $61 = (_bitshift64Shl(($60|0),0,8)|0);
 $62 = (getTempRet0() | 0);
 $63 = $61 | $58;
 $arrayidx3$i98 = ((($s)) + 14|0);
 $64 = HEAP8[$arrayidx3$i98>>0]|0;
 $65 = $64&255;
 $66 = (_bitshift64Shl(($65|0),0,16)|0);
 $67 = (getTempRet0() | 0);
 $68 = $63 | $66;
 $69 = $62 | $67;
 $arrayidx7$i102 = ((($s)) + 15|0);
 $70 = HEAP8[$arrayidx7$i102>>0]|0;
 $71 = $70&255;
 $72 = (_bitshift64Shl(($71|0),0,24)|0);
 $73 = (getTempRet0() | 0);
 $74 = $68 | $72;
 $75 = $69 | $73;
 $add$ptr6 = ((($s)) + 16|0);
 $76 = HEAP8[$add$ptr6>>0]|0;
 $77 = $76&255;
 $arrayidx1$i81 = ((($s)) + 17|0);
 $78 = HEAP8[$arrayidx1$i81>>0]|0;
 $79 = $78&255;
 $80 = (_bitshift64Shl(($79|0),0,8)|0);
 $81 = (getTempRet0() | 0);
 $82 = $80 | $77;
 $arrayidx3$i85 = ((($s)) + 18|0);
 $83 = HEAP8[$arrayidx3$i85>>0]|0;
 $84 = $83&255;
 $85 = (_bitshift64Shl(($84|0),0,16)|0);
 $86 = (getTempRet0() | 0);
 $87 = $82 | $85;
 $88 = $81 | $86;
 $arrayidx7$i89 = ((($s)) + 19|0);
 $89 = HEAP8[$arrayidx7$i89>>0]|0;
 $90 = $89&255;
 $91 = (_bitshift64Shl(($90|0),0,24)|0);
 $92 = (getTempRet0() | 0);
 $93 = $87 | $91;
 $94 = $88 | $92;
 $add$ptr8 = ((($s)) + 20|0);
 $95 = HEAP8[$add$ptr8>>0]|0;
 $96 = $95&255;
 $arrayidx1$i68 = ((($s)) + 21|0);
 $97 = HEAP8[$arrayidx1$i68>>0]|0;
 $98 = $97&255;
 $99 = (_bitshift64Shl(($98|0),0,8)|0);
 $100 = (getTempRet0() | 0);
 $101 = $99 | $96;
 $arrayidx3$i72 = ((($s)) + 22|0);
 $102 = HEAP8[$arrayidx3$i72>>0]|0;
 $103 = $102&255;
 $104 = (_bitshift64Shl(($103|0),0,16)|0);
 $105 = (getTempRet0() | 0);
 $106 = $101 | $104;
 $107 = $100 | $105;
 $arrayidx7$i76 = ((($s)) + 23|0);
 $108 = HEAP8[$arrayidx7$i76>>0]|0;
 $109 = $108&255;
 $110 = (_bitshift64Shl(($109|0),0,24)|0);
 $111 = (getTempRet0() | 0);
 $112 = $106 | $110;
 $113 = $107 | $111;
 $add$ptr10 = ((($s)) + 24|0);
 $114 = HEAP8[$add$ptr10>>0]|0;
 $115 = $114&255;
 $arrayidx1$i55 = ((($s)) + 25|0);
 $116 = HEAP8[$arrayidx1$i55>>0]|0;
 $117 = $116&255;
 $118 = (_bitshift64Shl(($117|0),0,8)|0);
 $119 = (getTempRet0() | 0);
 $120 = $118 | $115;
 $arrayidx3$i59 = ((($s)) + 26|0);
 $121 = HEAP8[$arrayidx3$i59>>0]|0;
 $122 = $121&255;
 $123 = (_bitshift64Shl(($122|0),0,16)|0);
 $124 = (getTempRet0() | 0);
 $125 = $120 | $123;
 $126 = $119 | $124;
 $arrayidx7$i63 = ((($s)) + 27|0);
 $127 = HEAP8[$arrayidx7$i63>>0]|0;
 $128 = $127&255;
 $129 = (_bitshift64Shl(($128|0),0,24)|0);
 $130 = (getTempRet0() | 0);
 $131 = $125 | $129;
 $132 = $126 | $130;
 $add$ptr12 = ((($s)) + 28|0);
 $133 = HEAP8[$add$ptr12>>0]|0;
 $134 = $133&255;
 $arrayidx1$i42 = ((($s)) + 29|0);
 $135 = HEAP8[$arrayidx1$i42>>0]|0;
 $136 = $135&255;
 $137 = (_bitshift64Shl(($136|0),0,8)|0);
 $138 = (getTempRet0() | 0);
 $139 = $137 | $134;
 $arrayidx3$i46 = ((($s)) + 30|0);
 $140 = HEAP8[$arrayidx3$i46>>0]|0;
 $141 = $140&255;
 $142 = (_bitshift64Shl(($141|0),0,16)|0);
 $143 = (getTempRet0() | 0);
 $144 = $139 | $142;
 $145 = $138 | $143;
 $arrayidx7$i50 = ((($s)) + 31|0);
 $146 = HEAP8[$arrayidx7$i50>>0]|0;
 $147 = $146&255;
 $148 = (_bitshift64Shl(($147|0),0,24)|0);
 $149 = (getTempRet0() | 0);
 $150 = $144 | $148;
 $151 = $145 | $149;
 $152 = (_i64Subtract(1559614444,0,($17|0),($18|0))|0);
 $153 = (getTempRet0() | 0);
 $154 = (_bitshift64Ashr(($152|0),($153|0),63)|0);
 $155 = (getTempRet0() | 0);
 $156 = (_i64Subtract(0,0,($152|0),($153|0))|0);
 $157 = (getTempRet0() | 0);
 $158 = (_bitshift64Lshr(($156|0),($157|0),63)|0);
 $159 = (getTempRet0() | 0);
 $160 = (_i64Add(($154|0),($155|0),($158|0),($159|0))|0);
 $161 = (getTempRet0() | 0);
 $162 = (_i64Subtract(1477600026,0,($36|0),($37|0))|0);
 $163 = (getTempRet0() | 0);
 $164 = (_bitshift64Ashr(($162|0),($163|0),63)|0);
 $165 = (getTempRet0() | 0);
 $166 = (_i64Subtract(0,0,($162|0),($163|0))|0);
 $167 = (getTempRet0() | 0);
 $168 = (_bitshift64Ashr(($166|0),($167|0),63)|0);
 $169 = (getTempRet0() | 0);
 $170 = (_i64Subtract(($164|0),($165|0),($168|0),($169|0))|0);
 $171 = (getTempRet0() | 0);
 $172 = (_bitshift64Shl(($170|0),($171|0),1)|0);
 $173 = (getTempRet0() | 0);
 $174 = (_i64Add(($160|0),($161|0),($172|0),($173|0))|0);
 $175 = (getTempRet0() | 0);
 $176 = (_i64Subtract(-1560830762,0,($55|0),($56|0))|0);
 $177 = (getTempRet0() | 0);
 $178 = (_bitshift64Ashr(($176|0),($177|0),63)|0);
 $179 = (getTempRet0() | 0);
 $180 = (_i64Subtract(0,0,($176|0),($177|0))|0);
 $181 = (getTempRet0() | 0);
 $182 = (_bitshift64Ashr(($180|0),($181|0),63)|0);
 $183 = (getTempRet0() | 0);
 $184 = (_i64Subtract(($178|0),($179|0),($182|0),($183|0))|0);
 $185 = (getTempRet0() | 0);
 $186 = (_bitshift64Shl(($184|0),($185|0),2)|0);
 $187 = (getTempRet0() | 0);
 $188 = (_i64Add(($174|0),($175|0),($186|0),($187|0))|0);
 $189 = (getTempRet0() | 0);
 $190 = (_i64Subtract(350157278,0,($74|0),($75|0))|0);
 $191 = (getTempRet0() | 0);
 $192 = (_bitshift64Ashr(($190|0),($191|0),63)|0);
 $193 = (getTempRet0() | 0);
 $194 = (_i64Subtract(0,0,($190|0),($191|0))|0);
 $195 = (getTempRet0() | 0);
 $196 = (_bitshift64Ashr(($194|0),($195|0),63)|0);
 $197 = (getTempRet0() | 0);
 $198 = (_i64Subtract(($192|0),($193|0),($196|0),($197|0))|0);
 $199 = (getTempRet0() | 0);
 $200 = (_bitshift64Shl(($198|0),($199|0),3)|0);
 $201 = (getTempRet0() | 0);
 $202 = (_i64Add(($188|0),($189|0),($200|0),($201|0))|0);
 $203 = (getTempRet0() | 0);
 $204 = (_i64Subtract(0,0,($93|0),($94|0))|0);
 $205 = (getTempRet0() | 0);
 $206 = (_bitshift64Ashr(($204|0),($205|0),63)|0);
 $207 = (getTempRet0() | 0);
 $208 = (_bitshift64Shl(($206|0),($207|0),4)|0);
 $209 = (getTempRet0() | 0);
 $210 = (_i64Add(($202|0),($203|0),($208|0),($209|0))|0);
 $211 = (getTempRet0() | 0);
 $212 = (_i64Subtract(0,0,($112|0),($113|0))|0);
 $213 = (getTempRet0() | 0);
 $214 = (_bitshift64Ashr(($212|0),($213|0),63)|0);
 $215 = (getTempRet0() | 0);
 $216 = (_bitshift64Shl(($214|0),($215|0),5)|0);
 $217 = (getTempRet0() | 0);
 $218 = (_i64Add(($210|0),($211|0),($216|0),($217|0))|0);
 $219 = (getTempRet0() | 0);
 $220 = (_i64Subtract(0,0,($131|0),($132|0))|0);
 $221 = (getTempRet0() | 0);
 $222 = (_bitshift64Ashr(($220|0),($221|0),63)|0);
 $223 = (getTempRet0() | 0);
 $224 = (_bitshift64Shl(($222|0),($223|0),6)|0);
 $225 = (getTempRet0() | 0);
 $226 = (_i64Add(($218|0),($219|0),($224|0),($225|0))|0);
 $227 = (getTempRet0() | 0);
 $228 = (_i64Subtract(268435456,0,($150|0),($151|0))|0);
 $229 = (getTempRet0() | 0);
 $230 = (_bitshift64Ashr(($228|0),($229|0),63)|0);
 $231 = (getTempRet0() | 0);
 $232 = (_i64Subtract(0,0,($228|0),($229|0))|0);
 $233 = (getTempRet0() | 0);
 $234 = (_bitshift64Ashr(($232|0),($233|0),63)|0);
 $235 = (getTempRet0() | 0);
 $236 = (_i64Subtract(($230|0),($231|0),($234|0),($235|0))|0);
 $237 = (getTempRet0() | 0);
 $238 = (_bitshift64Shl(($236|0),($237|0),7)|0);
 $239 = (getTempRet0() | 0);
 $240 = (_i64Add(($226|0),($227|0),($238|0),($239|0))|0);
 $241 = (getTempRet0() | 0);
 $242 = (_bitshift64Lshr(($240|0),($241|0),8)|0);
 $243 = (getTempRet0() | 0);
 return ($242|0);
}
function _sc_isnonzero($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx1 = 0, $arrayidx12 = 0, $arrayidx15 = 0, $arrayidx18 = 0, $arrayidx21 = 0, $arrayidx24 = 0, $arrayidx27 = 0;
 var $arrayidx3 = 0, $arrayidx30 = 0, $arrayidx33 = 0, $arrayidx36 = 0, $arrayidx39 = 0, $arrayidx42 = 0, $arrayidx45 = 0, $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx6 = 0, $arrayidx60 = 0, $arrayidx63 = 0, $arrayidx66 = 0, $arrayidx69 = 0, $arrayidx72 = 0, $arrayidx75 = 0, $arrayidx78 = 0, $arrayidx81 = 0;
 var $arrayidx84 = 0, $arrayidx87 = 0, $arrayidx9 = 0, $arrayidx90 = 0, $or1136 = 0, $or1437 = 0, $or1738 = 0, $or2039 = 0, $or2340 = 0, $or2641 = 0, $or2942 = 0, $or3243 = 0, $or33 = 0, $or3544 = 0, $or3845 = 0, $or4146 = 0, $or4447 = 0, $or4748 = 0, $or5049 = 0, $or534 = 0;
 var $or5350 = 0, $or5651 = 0, $or5952 = 0, $or6253 = 0, $or6554 = 0, $or6855 = 0, $or7156 = 0, $or7457 = 0, $or7758 = 0, $or8059 = 0, $or835 = 0, $or8360 = 0, $or8661 = 0, $or8962 = 0, $or92 = 0, $or9263 = 0, $shr = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $arrayidx1 = ((($s)) + 1|0);
 $1 = HEAP8[$arrayidx1>>0]|0;
 $or33 = $1 | $0;
 $arrayidx3 = ((($s)) + 2|0);
 $2 = HEAP8[$arrayidx3>>0]|0;
 $or534 = $or33 | $2;
 $arrayidx6 = ((($s)) + 3|0);
 $3 = HEAP8[$arrayidx6>>0]|0;
 $or835 = $or534 | $3;
 $arrayidx9 = ((($s)) + 4|0);
 $4 = HEAP8[$arrayidx9>>0]|0;
 $or1136 = $or835 | $4;
 $arrayidx12 = ((($s)) + 5|0);
 $5 = HEAP8[$arrayidx12>>0]|0;
 $or1437 = $or1136 | $5;
 $arrayidx15 = ((($s)) + 6|0);
 $6 = HEAP8[$arrayidx15>>0]|0;
 $or1738 = $or1437 | $6;
 $arrayidx18 = ((($s)) + 7|0);
 $7 = HEAP8[$arrayidx18>>0]|0;
 $or2039 = $or1738 | $7;
 $arrayidx21 = ((($s)) + 8|0);
 $8 = HEAP8[$arrayidx21>>0]|0;
 $or2340 = $or2039 | $8;
 $arrayidx24 = ((($s)) + 9|0);
 $9 = HEAP8[$arrayidx24>>0]|0;
 $or2641 = $or2340 | $9;
 $arrayidx27 = ((($s)) + 10|0);
 $10 = HEAP8[$arrayidx27>>0]|0;
 $or2942 = $or2641 | $10;
 $arrayidx30 = ((($s)) + 11|0);
 $11 = HEAP8[$arrayidx30>>0]|0;
 $or3243 = $or2942 | $11;
 $arrayidx33 = ((($s)) + 12|0);
 $12 = HEAP8[$arrayidx33>>0]|0;
 $or3544 = $or3243 | $12;
 $arrayidx36 = ((($s)) + 13|0);
 $13 = HEAP8[$arrayidx36>>0]|0;
 $or3845 = $or3544 | $13;
 $arrayidx39 = ((($s)) + 14|0);
 $14 = HEAP8[$arrayidx39>>0]|0;
 $or4146 = $or3845 | $14;
 $arrayidx42 = ((($s)) + 15|0);
 $15 = HEAP8[$arrayidx42>>0]|0;
 $or4447 = $or4146 | $15;
 $arrayidx45 = ((($s)) + 16|0);
 $16 = HEAP8[$arrayidx45>>0]|0;
 $or4748 = $or4447 | $16;
 $arrayidx48 = ((($s)) + 17|0);
 $17 = HEAP8[$arrayidx48>>0]|0;
 $or5049 = $or4748 | $17;
 $arrayidx51 = ((($s)) + 18|0);
 $18 = HEAP8[$arrayidx51>>0]|0;
 $or5350 = $or5049 | $18;
 $arrayidx54 = ((($s)) + 19|0);
 $19 = HEAP8[$arrayidx54>>0]|0;
 $or5651 = $or5350 | $19;
 $arrayidx57 = ((($s)) + 20|0);
 $20 = HEAP8[$arrayidx57>>0]|0;
 $or5952 = $or5651 | $20;
 $arrayidx60 = ((($s)) + 21|0);
 $21 = HEAP8[$arrayidx60>>0]|0;
 $or6253 = $or5952 | $21;
 $arrayidx63 = ((($s)) + 22|0);
 $22 = HEAP8[$arrayidx63>>0]|0;
 $or6554 = $or6253 | $22;
 $arrayidx66 = ((($s)) + 23|0);
 $23 = HEAP8[$arrayidx66>>0]|0;
 $or6855 = $or6554 | $23;
 $arrayidx69 = ((($s)) + 24|0);
 $24 = HEAP8[$arrayidx69>>0]|0;
 $or7156 = $or6855 | $24;
 $arrayidx72 = ((($s)) + 25|0);
 $25 = HEAP8[$arrayidx72>>0]|0;
 $or7457 = $or7156 | $25;
 $arrayidx75 = ((($s)) + 26|0);
 $26 = HEAP8[$arrayidx75>>0]|0;
 $or7758 = $or7457 | $26;
 $arrayidx78 = ((($s)) + 27|0);
 $27 = HEAP8[$arrayidx78>>0]|0;
 $or8059 = $or7758 | $27;
 $arrayidx81 = ((($s)) + 28|0);
 $28 = HEAP8[$arrayidx81>>0]|0;
 $or8360 = $or8059 | $28;
 $arrayidx84 = ((($s)) + 29|0);
 $29 = HEAP8[$arrayidx84>>0]|0;
 $or8661 = $or8360 | $29;
 $arrayidx87 = ((($s)) + 30|0);
 $30 = HEAP8[$arrayidx87>>0]|0;
 $or8962 = $or8661 | $30;
 $arrayidx90 = ((($s)) + 31|0);
 $31 = HEAP8[$arrayidx90>>0]|0;
 $or9263 = $or8962 | $31;
 $or92 = $or9263&255;
 $sub = (($or92) + -1)|0;
 $shr = $sub >> 8;
 $add = (($shr) + 1)|0;
 return ($add|0);
}
function _hash_permutation($state) {
 $state = $state|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _keccakf($state,24);
 return;
}
function _hash_process($state,$buf,$count) {
 $state = $state|0;
 $buf = $buf|0;
 $count = $count|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _keccak1600($buf,$count,$state);
 return;
}
function _cn_fast_hash($data,$length,$hash) {
 $data = $data|0;
 $length = $length|0;
 $hash = $hash|0;
 var $state = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $state = sp;
 _keccak1600($data,$length,$state);
 dest=$hash; src=$state; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _keccakf($st,$rounds) {
 $st = $st|0;
 $rounds = $rounds|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx12$1$phi$trans$insert = 0, $arrayidx12$2$phi$trans$insert = 0, $arrayidx12$3$phi$trans$insert = 0;
 var $arrayidx12$4$phi$trans$insert = 0, $arrayidx12$phi$trans$insert = 0, $arrayidx14$1 = 0, $arrayidx14$2 = 0, $arrayidx14$3 = 0, $arrayidx14$4 = 0, $arrayidx39 = 0, $arrayidx4 = 0, $arrayidx4$1 = 0, $arrayidx4$2 = 0, $arrayidx4$3 = 0, $arrayidx4$4 = 0, $arrayidx43 = 0, $arrayidx44 = 0, $arrayidx46 = 0, $arrayidx6$1$phi$trans$insert = 0, $arrayidx6$2$phi$trans$insert = 0, $arrayidx6$3$phi$trans$insert = 0, $arrayidx6$4$phi$trans$insert = 0, $arrayidx6$phi$trans$insert = 0;
 var $arrayidx87 = 0, $arrayidx9$1$phi$trans$insert = 0, $arrayidx9$2$phi$trans$insert = 0, $arrayidx9$3$phi$trans$insert = 0, $arrayidx9$4$phi$trans$insert = 0, $arrayidx9$phi$trans$insert = 0, $bc = 0, $cmp63 = 0, $exitcond = 0, $exitcond97 = 0, $i$258 = 0, $inc55 = 0, $inc91 = 0, $round$064 = 0, $sub = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $bc = sp;
 $cmp63 = ($rounds|0)>(0);
 if (!($cmp63)) {
  STACKTOP = sp;return;
 }
 $arrayidx39 = ((($st)) + 8|0);
 $0 = $st;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $arrayidx12$phi$trans$insert = ((($st)) + 160|0);
 $6 = $arrayidx12$phi$trans$insert;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $arrayidx9$1$phi$trans$insert = ((($st)) + 128|0);
 $12 = $arrayidx9$1$phi$trans$insert;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $arrayidx12$1$phi$trans$insert = ((($st)) + 168|0);
 $18 = $arrayidx12$1$phi$trans$insert;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $arrayidx9$2$phi$trans$insert = ((($st)) + 136|0);
 $24 = $arrayidx9$2$phi$trans$insert;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $arrayidx12$2$phi$trans$insert = ((($st)) + 176|0);
 $30 = $arrayidx12$2$phi$trans$insert;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $arrayidx9$3$phi$trans$insert = ((($st)) + 144|0);
 $36 = $arrayidx9$3$phi$trans$insert;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $arrayidx12$3$phi$trans$insert = ((($st)) + 184|0);
 $42 = $arrayidx12$3$phi$trans$insert;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $arrayidx9$4$phi$trans$insert = ((($st)) + 152|0);
 $48 = $arrayidx9$4$phi$trans$insert;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $arrayidx12$4$phi$trans$insert = ((($st)) + 192|0);
 $54 = $arrayidx12$4$phi$trans$insert;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + 4)|0;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $arrayidx6$phi$trans$insert = ((($st)) + 80|0);
 $60 = $arrayidx6$phi$trans$insert;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $arrayidx9$phi$trans$insert = ((($st)) + 120|0);
 $66 = $arrayidx9$phi$trans$insert;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $arrayidx6$1$phi$trans$insert = ((($st)) + 88|0);
 $72 = $arrayidx6$1$phi$trans$insert;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $arrayidx6$2$phi$trans$insert = ((($st)) + 96|0);
 $78 = $arrayidx6$2$phi$trans$insert;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + 4)|0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $arrayidx6$3$phi$trans$insert = ((($st)) + 104|0);
 $84 = $arrayidx6$3$phi$trans$insert;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = (($84) + 4)|0;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $arrayidx6$4$phi$trans$insert = ((($st)) + 112|0);
 $90 = $arrayidx6$4$phi$trans$insert;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = (($90) + 4)|0;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $arrayidx4 = ((($st)) + 40|0);
 $arrayidx4$1 = ((($st)) + 48|0);
 $arrayidx14$1 = ((($bc)) + 8|0);
 $arrayidx$2 = ((($st)) + 16|0);
 $arrayidx4$2 = ((($st)) + 56|0);
 $arrayidx14$2 = ((($bc)) + 16|0);
 $arrayidx$3 = ((($st)) + 24|0);
 $arrayidx4$3 = ((($st)) + 64|0);
 $arrayidx14$3 = ((($bc)) + 24|0);
 $arrayidx$4 = ((($st)) + 32|0);
 $arrayidx4$4 = ((($st)) + 72|0);
 $arrayidx14$4 = ((($bc)) + 32|0);
 $103 = $2;$105 = $5;$107 = $62;$109 = $65;$111 = $68;$113 = $71;$115 = $8;$117 = $11;$137 = $74;$139 = $77;$141 = $14;$143 = $17;$145 = $20;$147 = $23;$167 = $80;$169 = $83;$171 = $26;$173 = $29;$175 = $32;$177 = $35;$197 = $86;$199 = $89;$201 = $38;$203 = $41;$205 = $44;$207 = $47;$227 = $92;$229 = $95;$231 = $50;$233 = $53;$235 = $56;$237 = $59;$round$064 = 0;
 while(1) {
  $96 = $arrayidx4;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = (($96) + 4)|0;
  $100 = $99;
  $101 = HEAP32[$100>>2]|0;
  $102 = $98 ^ $103;
  $104 = $101 ^ $105;
  $106 = $102 ^ $107;
  $108 = $104 ^ $109;
  $110 = $106 ^ $111;
  $112 = $108 ^ $113;
  $114 = $110 ^ $115;
  $116 = $112 ^ $117;
  $118 = $bc;
  $119 = $118;
  HEAP32[$119>>2] = $114;
  $120 = (($118) + 4)|0;
  $121 = $120;
  HEAP32[$121>>2] = $116;
  $122 = $arrayidx39;
  $123 = $122;
  $124 = HEAP32[$123>>2]|0;
  $125 = (($122) + 4)|0;
  $126 = $125;
  $127 = HEAP32[$126>>2]|0;
  $128 = $arrayidx4$1;
  $129 = $128;
  $130 = HEAP32[$129>>2]|0;
  $131 = (($128) + 4)|0;
  $132 = $131;
  $133 = HEAP32[$132>>2]|0;
  $134 = $130 ^ $124;
  $135 = $133 ^ $127;
  $136 = $134 ^ $137;
  $138 = $135 ^ $139;
  $140 = $136 ^ $141;
  $142 = $138 ^ $143;
  $144 = $140 ^ $145;
  $146 = $142 ^ $147;
  $148 = $arrayidx14$1;
  $149 = $148;
  HEAP32[$149>>2] = $144;
  $150 = (($148) + 4)|0;
  $151 = $150;
  HEAP32[$151>>2] = $146;
  $152 = $arrayidx$2;
  $153 = $152;
  $154 = HEAP32[$153>>2]|0;
  $155 = (($152) + 4)|0;
  $156 = $155;
  $157 = HEAP32[$156>>2]|0;
  $158 = $arrayidx4$2;
  $159 = $158;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($158) + 4)|0;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = $160 ^ $154;
  $165 = $163 ^ $157;
  $166 = $164 ^ $167;
  $168 = $165 ^ $169;
  $170 = $166 ^ $171;
  $172 = $168 ^ $173;
  $174 = $170 ^ $175;
  $176 = $172 ^ $177;
  $178 = $arrayidx14$2;
  $179 = $178;
  HEAP32[$179>>2] = $174;
  $180 = (($178) + 4)|0;
  $181 = $180;
  HEAP32[$181>>2] = $176;
  $182 = $arrayidx$3;
  $183 = $182;
  $184 = HEAP32[$183>>2]|0;
  $185 = (($182) + 4)|0;
  $186 = $185;
  $187 = HEAP32[$186>>2]|0;
  $188 = $arrayidx4$3;
  $189 = $188;
  $190 = HEAP32[$189>>2]|0;
  $191 = (($188) + 4)|0;
  $192 = $191;
  $193 = HEAP32[$192>>2]|0;
  $194 = $190 ^ $184;
  $195 = $193 ^ $187;
  $196 = $194 ^ $197;
  $198 = $195 ^ $199;
  $200 = $196 ^ $201;
  $202 = $198 ^ $203;
  $204 = $200 ^ $205;
  $206 = $202 ^ $207;
  $208 = $arrayidx14$3;
  $209 = $208;
  HEAP32[$209>>2] = $204;
  $210 = (($208) + 4)|0;
  $211 = $210;
  HEAP32[$211>>2] = $206;
  $212 = $arrayidx$4;
  $213 = $212;
  $214 = HEAP32[$213>>2]|0;
  $215 = (($212) + 4)|0;
  $216 = $215;
  $217 = HEAP32[$216>>2]|0;
  $218 = $arrayidx4$4;
  $219 = $218;
  $220 = HEAP32[$219>>2]|0;
  $221 = (($218) + 4)|0;
  $222 = $221;
  $223 = HEAP32[$222>>2]|0;
  $224 = $220 ^ $214;
  $225 = $223 ^ $217;
  $226 = $224 ^ $227;
  $228 = $225 ^ $229;
  $230 = $226 ^ $231;
  $232 = $228 ^ $233;
  $234 = $230 ^ $235;
  $236 = $232 ^ $237;
  $238 = $arrayidx14$4;
  $239 = $238;
  HEAP32[$239>>2] = $234;
  $240 = (($238) + 4)|0;
  $241 = $240;
  HEAP32[$241>>2] = $236;
  $242 = (_bitshift64Shl(($144|0),($146|0),1)|0);
  $243 = (getTempRet0() | 0);
  $244 = (_bitshift64Lshr(($144|0),($146|0),63)|0);
  $245 = (getTempRet0() | 0);
  $246 = $242 | $244;
  $247 = $243 | $245;
  $248 = $246 ^ $234;
  $249 = $247 ^ $236;
  $250 = $248 ^ $103;
  $251 = $249 ^ $105;
  $252 = $st;
  $253 = $252;
  HEAP32[$253>>2] = $250;
  $254 = (($252) + 4)|0;
  $255 = $254;
  HEAP32[$255>>2] = $251;
  $256 = $248 ^ $98;
  $257 = $249 ^ $101;
  $258 = $arrayidx4;
  $259 = $258;
  HEAP32[$259>>2] = $256;
  $260 = (($258) + 4)|0;
  $261 = $260;
  HEAP32[$261>>2] = $257;
  $262 = $248 ^ $107;
  $263 = $249 ^ $109;
  $264 = $arrayidx6$phi$trans$insert;
  $265 = $264;
  HEAP32[$265>>2] = $262;
  $266 = (($264) + 4)|0;
  $267 = $266;
  HEAP32[$267>>2] = $263;
  $268 = $248 ^ $111;
  $269 = $249 ^ $113;
  $270 = $arrayidx9$phi$trans$insert;
  $271 = $270;
  HEAP32[$271>>2] = $268;
  $272 = (($270) + 4)|0;
  $273 = $272;
  HEAP32[$273>>2] = $269;
  $274 = $248 ^ $115;
  $275 = $249 ^ $117;
  $276 = $arrayidx12$phi$trans$insert;
  $277 = $276;
  HEAP32[$277>>2] = $274;
  $278 = (($276) + 4)|0;
  $279 = $278;
  HEAP32[$279>>2] = $275;
  $280 = (_bitshift64Shl(($174|0),($176|0),1)|0);
  $281 = (getTempRet0() | 0);
  $282 = (_bitshift64Lshr(($174|0),($176|0),63)|0);
  $283 = (getTempRet0() | 0);
  $284 = $280 | $282;
  $285 = $281 | $283;
  $286 = $284 ^ $114;
  $287 = $285 ^ $116;
  $288 = $286 ^ $124;
  $289 = $287 ^ $127;
  $290 = $arrayidx39;
  $291 = $290;
  HEAP32[$291>>2] = $288;
  $292 = (($290) + 4)|0;
  $293 = $292;
  HEAP32[$293>>2] = $289;
  $294 = $286 ^ $130;
  $295 = $287 ^ $133;
  $296 = $arrayidx4$1;
  $297 = $296;
  HEAP32[$297>>2] = $294;
  $298 = (($296) + 4)|0;
  $299 = $298;
  HEAP32[$299>>2] = $295;
  $300 = $286 ^ $137;
  $301 = $287 ^ $139;
  $302 = $arrayidx6$1$phi$trans$insert;
  $303 = $302;
  HEAP32[$303>>2] = $300;
  $304 = (($302) + 4)|0;
  $305 = $304;
  HEAP32[$305>>2] = $301;
  $306 = $arrayidx9$1$phi$trans$insert;
  $307 = $306;
  $308 = HEAP32[$307>>2]|0;
  $309 = (($306) + 4)|0;
  $310 = $309;
  $311 = HEAP32[$310>>2]|0;
  $312 = $286 ^ $308;
  $313 = $287 ^ $311;
  $314 = $arrayidx9$1$phi$trans$insert;
  $315 = $314;
  HEAP32[$315>>2] = $312;
  $316 = (($314) + 4)|0;
  $317 = $316;
  HEAP32[$317>>2] = $313;
  $318 = $arrayidx12$1$phi$trans$insert;
  $319 = $318;
  $320 = HEAP32[$319>>2]|0;
  $321 = (($318) + 4)|0;
  $322 = $321;
  $323 = HEAP32[$322>>2]|0;
  $324 = $286 ^ $320;
  $325 = $287 ^ $323;
  $326 = $arrayidx12$1$phi$trans$insert;
  $327 = $326;
  HEAP32[$327>>2] = $324;
  $328 = (($326) + 4)|0;
  $329 = $328;
  HEAP32[$329>>2] = $325;
  $330 = (_bitshift64Shl(($204|0),($206|0),1)|0);
  $331 = (getTempRet0() | 0);
  $332 = (_bitshift64Lshr(($204|0),($206|0),63)|0);
  $333 = (getTempRet0() | 0);
  $334 = $330 | $332;
  $335 = $331 | $333;
  $336 = $334 ^ $144;
  $337 = $335 ^ $146;
  $338 = $336 ^ $154;
  $339 = $337 ^ $157;
  $340 = $arrayidx$2;
  $341 = $340;
  HEAP32[$341>>2] = $338;
  $342 = (($340) + 4)|0;
  $343 = $342;
  HEAP32[$343>>2] = $339;
  $344 = $336 ^ $160;
  $345 = $337 ^ $163;
  $346 = $arrayidx4$2;
  $347 = $346;
  HEAP32[$347>>2] = $344;
  $348 = (($346) + 4)|0;
  $349 = $348;
  HEAP32[$349>>2] = $345;
  $350 = $336 ^ $167;
  $351 = $337 ^ $169;
  $352 = $arrayidx6$2$phi$trans$insert;
  $353 = $352;
  HEAP32[$353>>2] = $350;
  $354 = (($352) + 4)|0;
  $355 = $354;
  HEAP32[$355>>2] = $351;
  $356 = $arrayidx9$2$phi$trans$insert;
  $357 = $356;
  $358 = HEAP32[$357>>2]|0;
  $359 = (($356) + 4)|0;
  $360 = $359;
  $361 = HEAP32[$360>>2]|0;
  $362 = $336 ^ $358;
  $363 = $337 ^ $361;
  $364 = $arrayidx9$2$phi$trans$insert;
  $365 = $364;
  HEAP32[$365>>2] = $362;
  $366 = (($364) + 4)|0;
  $367 = $366;
  HEAP32[$367>>2] = $363;
  $368 = $arrayidx12$2$phi$trans$insert;
  $369 = $368;
  $370 = HEAP32[$369>>2]|0;
  $371 = (($368) + 4)|0;
  $372 = $371;
  $373 = HEAP32[$372>>2]|0;
  $374 = $336 ^ $370;
  $375 = $337 ^ $373;
  $376 = $arrayidx12$2$phi$trans$insert;
  $377 = $376;
  HEAP32[$377>>2] = $374;
  $378 = (($376) + 4)|0;
  $379 = $378;
  HEAP32[$379>>2] = $375;
  $380 = (_bitshift64Shl(($234|0),($236|0),1)|0);
  $381 = (getTempRet0() | 0);
  $382 = (_bitshift64Lshr(($234|0),($236|0),63)|0);
  $383 = (getTempRet0() | 0);
  $384 = $380 | $382;
  $385 = $381 | $383;
  $386 = $384 ^ $174;
  $387 = $385 ^ $176;
  $388 = $386 ^ $184;
  $389 = $387 ^ $187;
  $390 = $arrayidx$3;
  $391 = $390;
  HEAP32[$391>>2] = $388;
  $392 = (($390) + 4)|0;
  $393 = $392;
  HEAP32[$393>>2] = $389;
  $394 = $386 ^ $190;
  $395 = $387 ^ $193;
  $396 = $arrayidx4$3;
  $397 = $396;
  HEAP32[$397>>2] = $394;
  $398 = (($396) + 4)|0;
  $399 = $398;
  HEAP32[$399>>2] = $395;
  $400 = $386 ^ $197;
  $401 = $387 ^ $199;
  $402 = $arrayidx6$3$phi$trans$insert;
  $403 = $402;
  HEAP32[$403>>2] = $400;
  $404 = (($402) + 4)|0;
  $405 = $404;
  HEAP32[$405>>2] = $401;
  $406 = $arrayidx9$3$phi$trans$insert;
  $407 = $406;
  $408 = HEAP32[$407>>2]|0;
  $409 = (($406) + 4)|0;
  $410 = $409;
  $411 = HEAP32[$410>>2]|0;
  $412 = $386 ^ $408;
  $413 = $387 ^ $411;
  $414 = $arrayidx9$3$phi$trans$insert;
  $415 = $414;
  HEAP32[$415>>2] = $412;
  $416 = (($414) + 4)|0;
  $417 = $416;
  HEAP32[$417>>2] = $413;
  $418 = $arrayidx12$3$phi$trans$insert;
  $419 = $418;
  $420 = HEAP32[$419>>2]|0;
  $421 = (($418) + 4)|0;
  $422 = $421;
  $423 = HEAP32[$422>>2]|0;
  $424 = $386 ^ $420;
  $425 = $387 ^ $423;
  $426 = $arrayidx12$3$phi$trans$insert;
  $427 = $426;
  HEAP32[$427>>2] = $424;
  $428 = (($426) + 4)|0;
  $429 = $428;
  HEAP32[$429>>2] = $425;
  $430 = $bc;
  $431 = $430;
  $432 = HEAP32[$431>>2]|0;
  $433 = (($430) + 4)|0;
  $434 = $433;
  $435 = HEAP32[$434>>2]|0;
  $436 = (_bitshift64Shl(($432|0),($435|0),1)|0);
  $437 = (getTempRet0() | 0);
  $438 = (_bitshift64Lshr(($432|0),($435|0),63)|0);
  $439 = (getTempRet0() | 0);
  $440 = $436 | $438;
  $441 = $437 | $439;
  $442 = $440 ^ $204;
  $443 = $441 ^ $206;
  $444 = $442 ^ $214;
  $445 = $443 ^ $217;
  $446 = $arrayidx$4;
  $447 = $446;
  HEAP32[$447>>2] = $444;
  $448 = (($446) + 4)|0;
  $449 = $448;
  HEAP32[$449>>2] = $445;
  $450 = $442 ^ $220;
  $451 = $443 ^ $223;
  $452 = $arrayidx4$4;
  $453 = $452;
  HEAP32[$453>>2] = $450;
  $454 = (($452) + 4)|0;
  $455 = $454;
  HEAP32[$455>>2] = $451;
  $456 = $442 ^ $227;
  $457 = $443 ^ $229;
  $458 = $arrayidx6$4$phi$trans$insert;
  $459 = $458;
  HEAP32[$459>>2] = $456;
  $460 = (($458) + 4)|0;
  $461 = $460;
  HEAP32[$461>>2] = $457;
  $462 = $arrayidx9$4$phi$trans$insert;
  $463 = $462;
  $464 = HEAP32[$463>>2]|0;
  $465 = (($462) + 4)|0;
  $466 = $465;
  $467 = HEAP32[$466>>2]|0;
  $468 = $442 ^ $464;
  $469 = $443 ^ $467;
  $470 = $arrayidx9$4$phi$trans$insert;
  $471 = $470;
  HEAP32[$471>>2] = $468;
  $472 = (($470) + 4)|0;
  $473 = $472;
  HEAP32[$473>>2] = $469;
  $474 = $arrayidx12$4$phi$trans$insert;
  $475 = $474;
  $476 = HEAP32[$475>>2]|0;
  $477 = (($474) + 4)|0;
  $478 = $477;
  $479 = HEAP32[$478>>2]|0;
  $480 = $442 ^ $476;
  $481 = $443 ^ $479;
  $482 = $arrayidx12$4$phi$trans$insert;
  $483 = $482;
  HEAP32[$483>>2] = $480;
  $484 = (($482) + 4)|0;
  $485 = $484;
  HEAP32[$485>>2] = $481;
  $494 = $288;$495 = $289;$i$258 = 0;
  while(1) {
   $arrayidx43 = (32576 + ($i$258<<2)|0);
   $486 = HEAP32[$arrayidx43>>2]|0;
   $arrayidx44 = (($st) + ($486<<3)|0);
   $487 = $arrayidx44;
   $488 = $487;
   $489 = HEAP32[$488>>2]|0;
   $490 = (($487) + 4)|0;
   $491 = $490;
   $492 = HEAP32[$491>>2]|0;
   $arrayidx46 = (32480 + ($i$258<<2)|0);
   $493 = HEAP32[$arrayidx46>>2]|0;
   $496 = (_bitshift64Shl(($494|0),($495|0),($493|0))|0);
   $497 = (getTempRet0() | 0);
   $sub = (64 - ($493))|0;
   $498 = (_bitshift64Lshr(($494|0),($495|0),($sub|0))|0);
   $499 = (getTempRet0() | 0);
   $500 = $498 | $496;
   $501 = $499 | $497;
   $502 = $arrayidx44;
   $503 = $502;
   HEAP32[$503>>2] = $500;
   $504 = (($502) + 4)|0;
   $505 = $504;
   HEAP32[$505>>2] = $501;
   $inc55 = (($i$258) + 1)|0;
   $exitcond = ($inc55|0)==(24);
   if ($exitcond) {
    break;
   } else {
    $494 = $489;$495 = $492;$i$258 = $inc55;
   }
  }
  dest=$bc; src=$st; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $506 = $arrayidx14$1;
  $507 = $506;
  $508 = HEAP32[$507>>2]|0;
  $509 = (($506) + 4)|0;
  $510 = $509;
  $511 = HEAP32[$510>>2]|0;
  $512 = $508 ^ -1;
  $513 = $511 ^ -1;
  $514 = $arrayidx14$2;
  $515 = $514;
  $516 = HEAP32[$515>>2]|0;
  $517 = (($514) + 4)|0;
  $518 = $517;
  $519 = HEAP32[$518>>2]|0;
  $520 = $516 & $512;
  $521 = $519 & $513;
  $522 = $st;
  $523 = $522;
  $524 = HEAP32[$523>>2]|0;
  $525 = (($522) + 4)|0;
  $526 = $525;
  $527 = HEAP32[$526>>2]|0;
  $528 = $524 ^ $520;
  $529 = $527 ^ $521;
  $530 = $st;
  $531 = $530;
  HEAP32[$531>>2] = $528;
  $532 = (($530) + 4)|0;
  $533 = $532;
  HEAP32[$533>>2] = $529;
  $534 = $516 ^ -1;
  $535 = $519 ^ -1;
  $536 = $arrayidx14$3;
  $537 = $536;
  $538 = HEAP32[$537>>2]|0;
  $539 = (($536) + 4)|0;
  $540 = $539;
  $541 = HEAP32[$540>>2]|0;
  $542 = $538 & $534;
  $543 = $541 & $535;
  $544 = $arrayidx39;
  $545 = $544;
  $546 = HEAP32[$545>>2]|0;
  $547 = (($544) + 4)|0;
  $548 = $547;
  $549 = HEAP32[$548>>2]|0;
  $550 = $546 ^ $542;
  $551 = $549 ^ $543;
  $552 = $arrayidx39;
  $553 = $552;
  HEAP32[$553>>2] = $550;
  $554 = (($552) + 4)|0;
  $555 = $554;
  HEAP32[$555>>2] = $551;
  $556 = $538 ^ -1;
  $557 = $541 ^ -1;
  $558 = $arrayidx14$4;
  $559 = $558;
  $560 = HEAP32[$559>>2]|0;
  $561 = (($558) + 4)|0;
  $562 = $561;
  $563 = HEAP32[$562>>2]|0;
  $564 = $560 & $556;
  $565 = $563 & $557;
  $566 = $arrayidx$2;
  $567 = $566;
  $568 = HEAP32[$567>>2]|0;
  $569 = (($566) + 4)|0;
  $570 = $569;
  $571 = HEAP32[$570>>2]|0;
  $572 = $568 ^ $564;
  $573 = $571 ^ $565;
  $574 = $arrayidx$2;
  $575 = $574;
  HEAP32[$575>>2] = $572;
  $576 = (($574) + 4)|0;
  $577 = $576;
  HEAP32[$577>>2] = $573;
  $578 = $560 ^ -1;
  $579 = $563 ^ -1;
  $580 = $bc;
  $581 = $580;
  $582 = HEAP32[$581>>2]|0;
  $583 = (($580) + 4)|0;
  $584 = $583;
  $585 = HEAP32[$584>>2]|0;
  $586 = $582 & $578;
  $587 = $585 & $579;
  $588 = $arrayidx$3;
  $589 = $588;
  $590 = HEAP32[$589>>2]|0;
  $591 = (($588) + 4)|0;
  $592 = $591;
  $593 = HEAP32[$592>>2]|0;
  $594 = $590 ^ $586;
  $595 = $593 ^ $587;
  $596 = $arrayidx$3;
  $597 = $596;
  HEAP32[$597>>2] = $594;
  $598 = (($596) + 4)|0;
  $599 = $598;
  HEAP32[$599>>2] = $595;
  $600 = $582 ^ -1;
  $601 = $585 ^ -1;
  $602 = $508 & $600;
  $603 = $511 & $601;
  $604 = $arrayidx$4;
  $605 = $604;
  $606 = HEAP32[$605>>2]|0;
  $607 = (($604) + 4)|0;
  $608 = $607;
  $609 = HEAP32[$608>>2]|0;
  $610 = $606 ^ $602;
  $611 = $609 ^ $603;
  $612 = $arrayidx$4;
  $613 = $612;
  HEAP32[$613>>2] = $610;
  $614 = (($612) + 4)|0;
  $615 = $614;
  HEAP32[$615>>2] = $611;
  dest=$bc; src=$arrayidx4; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $616 = $arrayidx14$1;
  $617 = $616;
  $618 = HEAP32[$617>>2]|0;
  $619 = (($616) + 4)|0;
  $620 = $619;
  $621 = HEAP32[$620>>2]|0;
  $622 = $618 ^ -1;
  $623 = $621 ^ -1;
  $624 = $arrayidx14$2;
  $625 = $624;
  $626 = HEAP32[$625>>2]|0;
  $627 = (($624) + 4)|0;
  $628 = $627;
  $629 = HEAP32[$628>>2]|0;
  $630 = $626 & $622;
  $631 = $629 & $623;
  $632 = $arrayidx4;
  $633 = $632;
  $634 = HEAP32[$633>>2]|0;
  $635 = (($632) + 4)|0;
  $636 = $635;
  $637 = HEAP32[$636>>2]|0;
  $638 = $634 ^ $630;
  $639 = $637 ^ $631;
  $640 = $arrayidx4;
  $641 = $640;
  HEAP32[$641>>2] = $638;
  $642 = (($640) + 4)|0;
  $643 = $642;
  HEAP32[$643>>2] = $639;
  $644 = $626 ^ -1;
  $645 = $629 ^ -1;
  $646 = $arrayidx14$3;
  $647 = $646;
  $648 = HEAP32[$647>>2]|0;
  $649 = (($646) + 4)|0;
  $650 = $649;
  $651 = HEAP32[$650>>2]|0;
  $652 = $648 & $644;
  $653 = $651 & $645;
  $654 = $arrayidx4$1;
  $655 = $654;
  $656 = HEAP32[$655>>2]|0;
  $657 = (($654) + 4)|0;
  $658 = $657;
  $659 = HEAP32[$658>>2]|0;
  $660 = $656 ^ $652;
  $661 = $659 ^ $653;
  $662 = $arrayidx4$1;
  $663 = $662;
  HEAP32[$663>>2] = $660;
  $664 = (($662) + 4)|0;
  $665 = $664;
  HEAP32[$665>>2] = $661;
  $666 = $648 ^ -1;
  $667 = $651 ^ -1;
  $668 = $arrayidx14$4;
  $669 = $668;
  $670 = HEAP32[$669>>2]|0;
  $671 = (($668) + 4)|0;
  $672 = $671;
  $673 = HEAP32[$672>>2]|0;
  $674 = $670 & $666;
  $675 = $673 & $667;
  $676 = $arrayidx4$2;
  $677 = $676;
  $678 = HEAP32[$677>>2]|0;
  $679 = (($676) + 4)|0;
  $680 = $679;
  $681 = HEAP32[$680>>2]|0;
  $682 = $678 ^ $674;
  $683 = $681 ^ $675;
  $684 = $arrayidx4$2;
  $685 = $684;
  HEAP32[$685>>2] = $682;
  $686 = (($684) + 4)|0;
  $687 = $686;
  HEAP32[$687>>2] = $683;
  $688 = $670 ^ -1;
  $689 = $673 ^ -1;
  $690 = $bc;
  $691 = $690;
  $692 = HEAP32[$691>>2]|0;
  $693 = (($690) + 4)|0;
  $694 = $693;
  $695 = HEAP32[$694>>2]|0;
  $696 = $692 & $688;
  $697 = $695 & $689;
  $698 = $arrayidx4$3;
  $699 = $698;
  $700 = HEAP32[$699>>2]|0;
  $701 = (($698) + 4)|0;
  $702 = $701;
  $703 = HEAP32[$702>>2]|0;
  $704 = $700 ^ $696;
  $705 = $703 ^ $697;
  $706 = $arrayidx4$3;
  $707 = $706;
  HEAP32[$707>>2] = $704;
  $708 = (($706) + 4)|0;
  $709 = $708;
  HEAP32[$709>>2] = $705;
  $710 = $692 ^ -1;
  $711 = $695 ^ -1;
  $712 = $618 & $710;
  $713 = $621 & $711;
  $714 = $arrayidx4$4;
  $715 = $714;
  $716 = HEAP32[$715>>2]|0;
  $717 = (($714) + 4)|0;
  $718 = $717;
  $719 = HEAP32[$718>>2]|0;
  $720 = $716 ^ $712;
  $721 = $719 ^ $713;
  $722 = $arrayidx4$4;
  $723 = $722;
  HEAP32[$723>>2] = $720;
  $724 = (($722) + 4)|0;
  $725 = $724;
  HEAP32[$725>>2] = $721;
  dest=$bc; src=$arrayidx6$phi$trans$insert; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $726 = $arrayidx14$1;
  $727 = $726;
  $728 = HEAP32[$727>>2]|0;
  $729 = (($726) + 4)|0;
  $730 = $729;
  $731 = HEAP32[$730>>2]|0;
  $732 = $728 ^ -1;
  $733 = $731 ^ -1;
  $734 = $arrayidx14$2;
  $735 = $734;
  $736 = HEAP32[$735>>2]|0;
  $737 = (($734) + 4)|0;
  $738 = $737;
  $739 = HEAP32[$738>>2]|0;
  $740 = $736 & $732;
  $741 = $739 & $733;
  $742 = $arrayidx6$phi$trans$insert;
  $743 = $742;
  $744 = HEAP32[$743>>2]|0;
  $745 = (($742) + 4)|0;
  $746 = $745;
  $747 = HEAP32[$746>>2]|0;
  $748 = $744 ^ $740;
  $749 = $747 ^ $741;
  $750 = $arrayidx6$phi$trans$insert;
  $751 = $750;
  HEAP32[$751>>2] = $748;
  $752 = (($750) + 4)|0;
  $753 = $752;
  HEAP32[$753>>2] = $749;
  $754 = $736 ^ -1;
  $755 = $739 ^ -1;
  $756 = $arrayidx14$3;
  $757 = $756;
  $758 = HEAP32[$757>>2]|0;
  $759 = (($756) + 4)|0;
  $760 = $759;
  $761 = HEAP32[$760>>2]|0;
  $762 = $758 & $754;
  $763 = $761 & $755;
  $764 = $arrayidx6$1$phi$trans$insert;
  $765 = $764;
  $766 = HEAP32[$765>>2]|0;
  $767 = (($764) + 4)|0;
  $768 = $767;
  $769 = HEAP32[$768>>2]|0;
  $770 = $766 ^ $762;
  $771 = $769 ^ $763;
  $772 = $arrayidx6$1$phi$trans$insert;
  $773 = $772;
  HEAP32[$773>>2] = $770;
  $774 = (($772) + 4)|0;
  $775 = $774;
  HEAP32[$775>>2] = $771;
  $776 = $758 ^ -1;
  $777 = $761 ^ -1;
  $778 = $arrayidx14$4;
  $779 = $778;
  $780 = HEAP32[$779>>2]|0;
  $781 = (($778) + 4)|0;
  $782 = $781;
  $783 = HEAP32[$782>>2]|0;
  $784 = $780 & $776;
  $785 = $783 & $777;
  $786 = $arrayidx6$2$phi$trans$insert;
  $787 = $786;
  $788 = HEAP32[$787>>2]|0;
  $789 = (($786) + 4)|0;
  $790 = $789;
  $791 = HEAP32[$790>>2]|0;
  $792 = $788 ^ $784;
  $793 = $791 ^ $785;
  $794 = $arrayidx6$2$phi$trans$insert;
  $795 = $794;
  HEAP32[$795>>2] = $792;
  $796 = (($794) + 4)|0;
  $797 = $796;
  HEAP32[$797>>2] = $793;
  $798 = $780 ^ -1;
  $799 = $783 ^ -1;
  $800 = $bc;
  $801 = $800;
  $802 = HEAP32[$801>>2]|0;
  $803 = (($800) + 4)|0;
  $804 = $803;
  $805 = HEAP32[$804>>2]|0;
  $806 = $802 & $798;
  $807 = $805 & $799;
  $808 = $arrayidx6$3$phi$trans$insert;
  $809 = $808;
  $810 = HEAP32[$809>>2]|0;
  $811 = (($808) + 4)|0;
  $812 = $811;
  $813 = HEAP32[$812>>2]|0;
  $814 = $810 ^ $806;
  $815 = $813 ^ $807;
  $816 = $arrayidx6$3$phi$trans$insert;
  $817 = $816;
  HEAP32[$817>>2] = $814;
  $818 = (($816) + 4)|0;
  $819 = $818;
  HEAP32[$819>>2] = $815;
  $820 = $802 ^ -1;
  $821 = $805 ^ -1;
  $822 = $728 & $820;
  $823 = $731 & $821;
  $824 = $arrayidx6$4$phi$trans$insert;
  $825 = $824;
  $826 = HEAP32[$825>>2]|0;
  $827 = (($824) + 4)|0;
  $828 = $827;
  $829 = HEAP32[$828>>2]|0;
  $830 = $826 ^ $822;
  $831 = $829 ^ $823;
  $832 = $arrayidx6$4$phi$trans$insert;
  $833 = $832;
  HEAP32[$833>>2] = $830;
  $834 = (($832) + 4)|0;
  $835 = $834;
  HEAP32[$835>>2] = $831;
  dest=$bc; src=$arrayidx9$phi$trans$insert; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $836 = $arrayidx14$1;
  $837 = $836;
  $838 = HEAP32[$837>>2]|0;
  $839 = (($836) + 4)|0;
  $840 = $839;
  $841 = HEAP32[$840>>2]|0;
  $842 = $838 ^ -1;
  $843 = $841 ^ -1;
  $844 = $arrayidx14$2;
  $845 = $844;
  $846 = HEAP32[$845>>2]|0;
  $847 = (($844) + 4)|0;
  $848 = $847;
  $849 = HEAP32[$848>>2]|0;
  $850 = $846 & $842;
  $851 = $849 & $843;
  $852 = $arrayidx9$phi$trans$insert;
  $853 = $852;
  $854 = HEAP32[$853>>2]|0;
  $855 = (($852) + 4)|0;
  $856 = $855;
  $857 = HEAP32[$856>>2]|0;
  $858 = $854 ^ $850;
  $859 = $857 ^ $851;
  $860 = $arrayidx9$phi$trans$insert;
  $861 = $860;
  HEAP32[$861>>2] = $858;
  $862 = (($860) + 4)|0;
  $863 = $862;
  HEAP32[$863>>2] = $859;
  $864 = $846 ^ -1;
  $865 = $849 ^ -1;
  $866 = $arrayidx14$3;
  $867 = $866;
  $868 = HEAP32[$867>>2]|0;
  $869 = (($866) + 4)|0;
  $870 = $869;
  $871 = HEAP32[$870>>2]|0;
  $872 = $868 & $864;
  $873 = $871 & $865;
  $874 = $arrayidx9$1$phi$trans$insert;
  $875 = $874;
  $876 = HEAP32[$875>>2]|0;
  $877 = (($874) + 4)|0;
  $878 = $877;
  $879 = HEAP32[$878>>2]|0;
  $880 = $876 ^ $872;
  $881 = $879 ^ $873;
  $882 = $arrayidx9$1$phi$trans$insert;
  $883 = $882;
  HEAP32[$883>>2] = $880;
  $884 = (($882) + 4)|0;
  $885 = $884;
  HEAP32[$885>>2] = $881;
  $886 = $868 ^ -1;
  $887 = $871 ^ -1;
  $888 = $arrayidx14$4;
  $889 = $888;
  $890 = HEAP32[$889>>2]|0;
  $891 = (($888) + 4)|0;
  $892 = $891;
  $893 = HEAP32[$892>>2]|0;
  $894 = $890 & $886;
  $895 = $893 & $887;
  $896 = $arrayidx9$2$phi$trans$insert;
  $897 = $896;
  $898 = HEAP32[$897>>2]|0;
  $899 = (($896) + 4)|0;
  $900 = $899;
  $901 = HEAP32[$900>>2]|0;
  $902 = $898 ^ $894;
  $903 = $901 ^ $895;
  $904 = $arrayidx9$2$phi$trans$insert;
  $905 = $904;
  HEAP32[$905>>2] = $902;
  $906 = (($904) + 4)|0;
  $907 = $906;
  HEAP32[$907>>2] = $903;
  $908 = $890 ^ -1;
  $909 = $893 ^ -1;
  $910 = $bc;
  $911 = $910;
  $912 = HEAP32[$911>>2]|0;
  $913 = (($910) + 4)|0;
  $914 = $913;
  $915 = HEAP32[$914>>2]|0;
  $916 = $912 & $908;
  $917 = $915 & $909;
  $918 = $arrayidx9$3$phi$trans$insert;
  $919 = $918;
  $920 = HEAP32[$919>>2]|0;
  $921 = (($918) + 4)|0;
  $922 = $921;
  $923 = HEAP32[$922>>2]|0;
  $924 = $920 ^ $916;
  $925 = $923 ^ $917;
  $926 = $arrayidx9$3$phi$trans$insert;
  $927 = $926;
  HEAP32[$927>>2] = $924;
  $928 = (($926) + 4)|0;
  $929 = $928;
  HEAP32[$929>>2] = $925;
  $930 = $912 ^ -1;
  $931 = $915 ^ -1;
  $932 = $838 & $930;
  $933 = $841 & $931;
  $934 = $arrayidx9$4$phi$trans$insert;
  $935 = $934;
  $936 = HEAP32[$935>>2]|0;
  $937 = (($934) + 4)|0;
  $938 = $937;
  $939 = HEAP32[$938>>2]|0;
  $940 = $936 ^ $932;
  $941 = $939 ^ $933;
  $942 = $arrayidx9$4$phi$trans$insert;
  $943 = $942;
  HEAP32[$943>>2] = $940;
  $944 = (($942) + 4)|0;
  $945 = $944;
  HEAP32[$945>>2] = $941;
  dest=$bc; src=$arrayidx12$phi$trans$insert; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $946 = $arrayidx14$1;
  $947 = $946;
  $948 = HEAP32[$947>>2]|0;
  $949 = (($946) + 4)|0;
  $950 = $949;
  $951 = HEAP32[$950>>2]|0;
  $952 = $948 ^ -1;
  $953 = $951 ^ -1;
  $954 = $arrayidx14$2;
  $955 = $954;
  $956 = HEAP32[$955>>2]|0;
  $957 = (($954) + 4)|0;
  $958 = $957;
  $959 = HEAP32[$958>>2]|0;
  $960 = $956 & $952;
  $961 = $959 & $953;
  $962 = $arrayidx12$phi$trans$insert;
  $963 = $962;
  $964 = HEAP32[$963>>2]|0;
  $965 = (($962) + 4)|0;
  $966 = $965;
  $967 = HEAP32[$966>>2]|0;
  $968 = $964 ^ $960;
  $969 = $967 ^ $961;
  $970 = $arrayidx12$phi$trans$insert;
  $971 = $970;
  HEAP32[$971>>2] = $968;
  $972 = (($970) + 4)|0;
  $973 = $972;
  HEAP32[$973>>2] = $969;
  $974 = $956 ^ -1;
  $975 = $959 ^ -1;
  $976 = $arrayidx14$3;
  $977 = $976;
  $978 = HEAP32[$977>>2]|0;
  $979 = (($976) + 4)|0;
  $980 = $979;
  $981 = HEAP32[$980>>2]|0;
  $982 = $978 & $974;
  $983 = $981 & $975;
  $984 = $arrayidx12$1$phi$trans$insert;
  $985 = $984;
  $986 = HEAP32[$985>>2]|0;
  $987 = (($984) + 4)|0;
  $988 = $987;
  $989 = HEAP32[$988>>2]|0;
  $990 = $986 ^ $982;
  $991 = $989 ^ $983;
  $992 = $arrayidx12$1$phi$trans$insert;
  $993 = $992;
  HEAP32[$993>>2] = $990;
  $994 = (($992) + 4)|0;
  $995 = $994;
  HEAP32[$995>>2] = $991;
  $996 = $978 ^ -1;
  $997 = $981 ^ -1;
  $998 = $arrayidx14$4;
  $999 = $998;
  $1000 = HEAP32[$999>>2]|0;
  $1001 = (($998) + 4)|0;
  $1002 = $1001;
  $1003 = HEAP32[$1002>>2]|0;
  $1004 = $1000 & $996;
  $1005 = $1003 & $997;
  $1006 = $arrayidx12$2$phi$trans$insert;
  $1007 = $1006;
  $1008 = HEAP32[$1007>>2]|0;
  $1009 = (($1006) + 4)|0;
  $1010 = $1009;
  $1011 = HEAP32[$1010>>2]|0;
  $1012 = $1008 ^ $1004;
  $1013 = $1011 ^ $1005;
  $1014 = $arrayidx12$2$phi$trans$insert;
  $1015 = $1014;
  HEAP32[$1015>>2] = $1012;
  $1016 = (($1014) + 4)|0;
  $1017 = $1016;
  HEAP32[$1017>>2] = $1013;
  $1018 = $1000 ^ -1;
  $1019 = $1003 ^ -1;
  $1020 = $bc;
  $1021 = $1020;
  $1022 = HEAP32[$1021>>2]|0;
  $1023 = (($1020) + 4)|0;
  $1024 = $1023;
  $1025 = HEAP32[$1024>>2]|0;
  $1026 = $1022 & $1018;
  $1027 = $1025 & $1019;
  $1028 = $arrayidx12$3$phi$trans$insert;
  $1029 = $1028;
  $1030 = HEAP32[$1029>>2]|0;
  $1031 = (($1028) + 4)|0;
  $1032 = $1031;
  $1033 = HEAP32[$1032>>2]|0;
  $1034 = $1030 ^ $1026;
  $1035 = $1033 ^ $1027;
  $1036 = $arrayidx12$3$phi$trans$insert;
  $1037 = $1036;
  HEAP32[$1037>>2] = $1034;
  $1038 = (($1036) + 4)|0;
  $1039 = $1038;
  HEAP32[$1039>>2] = $1035;
  $1040 = $1022 ^ -1;
  $1041 = $1025 ^ -1;
  $1042 = $948 & $1040;
  $1043 = $951 & $1041;
  $1044 = $arrayidx12$4$phi$trans$insert;
  $1045 = $1044;
  $1046 = HEAP32[$1045>>2]|0;
  $1047 = (($1044) + 4)|0;
  $1048 = $1047;
  $1049 = HEAP32[$1048>>2]|0;
  $1050 = $1046 ^ $1042;
  $1051 = $1049 ^ $1043;
  $1052 = $arrayidx12$4$phi$trans$insert;
  $1053 = $1052;
  HEAP32[$1053>>2] = $1050;
  $1054 = (($1052) + 4)|0;
  $1055 = $1054;
  HEAP32[$1055>>2] = $1051;
  $arrayidx87 = (32288 + ($round$064<<3)|0);
  $1056 = $arrayidx87;
  $1057 = $1056;
  $1058 = HEAP32[$1057>>2]|0;
  $1059 = (($1056) + 4)|0;
  $1060 = $1059;
  $1061 = HEAP32[$1060>>2]|0;
  $1062 = $st;
  $1063 = $1062;
  $1064 = HEAP32[$1063>>2]|0;
  $1065 = (($1062) + 4)|0;
  $1066 = $1065;
  $1067 = HEAP32[$1066>>2]|0;
  $1068 = $1064 ^ $1058;
  $1069 = $1067 ^ $1061;
  $1070 = $st;
  $1071 = $1070;
  HEAP32[$1071>>2] = $1068;
  $1072 = (($1070) + 4)|0;
  $1073 = $1072;
  HEAP32[$1073>>2] = $1069;
  $inc91 = (($round$064) + 1)|0;
  $exitcond97 = ($inc91|0)==($rounds|0);
  if ($exitcond97) {
   break;
  } else {
   $103 = $1068;$105 = $1069;$107 = $748;$109 = $749;$111 = $858;$113 = $859;$115 = $968;$117 = $969;$137 = $770;$139 = $771;$141 = $880;$143 = $881;$145 = $990;$147 = $991;$167 = $792;$169 = $793;$171 = $902;$173 = $903;$175 = $1012;$177 = $1013;$197 = $814;$199 = $815;$201 = $924;$203 = $925;$205 = $1034;$207 = $1035;$227 = $830;$229 = $831;$231 = $940;$233 = $941;$235 = $1050;$237 = $1051;$round$064 = $inc91;
  }
 }
 STACKTOP = sp;return;
}
function _keccak($in,$inlen,$md,$mdlen) {
 $in = $in|0;
 $inlen = $inlen|0;
 $md = $md|0;
 $mdlen = $mdlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr$us = 0;
 var $add$ptr14 = 0, $arrayidx$us = 0, $arrayidx12 = 0, $arrayidx17 = 0, $arrayidx24 = 0, $arrayidx25 = 0, $arrayidx5$us = 0, $cmp = 0, $cmp1 = 0, $cmp1$us = 0, $cmp131 = 0, $cmp2027 = 0, $cmp329 = 0, $cond = 0, $div = 0, $exitcond = 0, $exitcond36 = 0, $i$030$us = 0, $i$128 = 0, $in$addr$0$lcssa = 0;
 var $in$addr$033 = 0, $in$addr$033$us = 0, $inc$us = 0, $inc11 = 0, $inc28 = 0, $inlen$addr$0$lcssa = 0, $inlen$addr$032 = 0, $inlen$addr$032$us = 0, $mul = 0, $st = 0, $sub = 0, $sub15 = 0, $sub16 = 0, $sub8 = 0, $sub8$us = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $st = sp + 144|0;
 $temp = sp;
 $cmp = ($mdlen|0)==(200);
 $mul = $mdlen << 1;
 $sub = (200 - ($mul))|0;
 $cond = $cmp ? 136 : $sub;
 $div = (($cond|0) / 8)&-1;
 _memset(($st|0),0,200)|0;
 $cmp131 = ($cond|0)>($inlen|0);
 L1: do {
  if ($cmp131) {
   $in$addr$0$lcssa = $in;$inlen$addr$0$lcssa = $inlen;
  } else {
   $cmp329 = ($cond|0)>(7);
   if (!($cmp329)) {
    $in$addr$033 = $in;$inlen$addr$032 = $inlen;
    while(1) {
     _keccakf($st,24);
     $sub8 = (($inlen$addr$032) - ($cond))|0;
     $add$ptr = (($in$addr$033) + ($cond)|0);
     $cmp1 = ($sub8|0)<($cond|0);
     if ($cmp1) {
      $in$addr$0$lcssa = $add$ptr;$inlen$addr$0$lcssa = $sub8;
      break L1;
     } else {
      $in$addr$033 = $add$ptr;$inlen$addr$032 = $sub8;
     }
    }
   }
   $in$addr$033$us = $in;$inlen$addr$032$us = $inlen;
   while(1) {
    $i$030$us = 0;
    while(1) {
     $arrayidx$us = (($in$addr$033$us) + ($i$030$us<<3)|0);
     $0 = $arrayidx$us;
     $1 = $0;
     $2 = HEAP32[$1>>2]|0;
     $3 = (($0) + 4)|0;
     $4 = $3;
     $5 = HEAP32[$4>>2]|0;
     $arrayidx5$us = (($st) + ($i$030$us<<3)|0);
     $6 = $arrayidx5$us;
     $7 = $6;
     $8 = HEAP32[$7>>2]|0;
     $9 = (($6) + 4)|0;
     $10 = $9;
     $11 = HEAP32[$10>>2]|0;
     $12 = $8 ^ $2;
     $13 = $11 ^ $5;
     $14 = $arrayidx5$us;
     $15 = $14;
     HEAP32[$15>>2] = $12;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $inc$us = (($i$030$us) + 1)|0;
     $exitcond36 = ($inc$us|0)==($div|0);
     if ($exitcond36) {
      break;
     } else {
      $i$030$us = $inc$us;
     }
    }
    _keccakf($st,24);
    $sub8$us = (($inlen$addr$032$us) - ($cond))|0;
    $add$ptr$us = (($in$addr$033$us) + ($cond)|0);
    $cmp1$us = ($sub8$us|0)<($cond|0);
    if ($cmp1$us) {
     $in$addr$0$lcssa = $add$ptr$us;$inlen$addr$0$lcssa = $sub8$us;
     break;
    } else {
     $in$addr$033$us = $add$ptr$us;$inlen$addr$032$us = $sub8$us;
    }
   }
  }
 } while(0);
 _memcpy(($temp|0),($in$addr$0$lcssa|0),($inlen$addr$0$lcssa|0))|0;
 $inc11 = (($inlen$addr$0$lcssa) + 1)|0;
 $arrayidx12 = (($temp) + ($inlen$addr$0$lcssa)|0);
 HEAP8[$arrayidx12>>0] = 1;
 $add$ptr14 = (($temp) + ($inc11)|0);
 $sub15 = (($cond) - ($inc11))|0;
 _memset(($add$ptr14|0),0,($sub15|0))|0;
 $sub16 = (($cond) + -1)|0;
 $arrayidx17 = (($temp) + ($sub16)|0);
 $18 = HEAP8[$arrayidx17>>0]|0;
 $19 = $18 | -128;
 HEAP8[$arrayidx17>>0] = $19;
 $cmp2027 = ($cond|0)>(7);
 if (!($cmp2027)) {
  _keccakf($st,24);
  _memcpy(($md|0),($st|0),($mdlen|0))|0;
  STACKTOP = sp;return 0;
 }
 $i$128 = 0;
 while(1) {
  $arrayidx24 = (($temp) + ($i$128<<3)|0);
  $20 = $arrayidx24;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $arrayidx25 = (($st) + ($i$128<<3)|0);
  $26 = $arrayidx25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = $28 ^ $22;
  $33 = $31 ^ $25;
  $34 = $arrayidx25;
  $35 = $34;
  HEAP32[$35>>2] = $32;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = $33;
  $inc28 = (($i$128) + 1)|0;
  $exitcond = ($inc28|0)==($div|0);
  if ($exitcond) {
   break;
  } else {
   $i$128 = $inc28;
  }
 }
 _keccakf($st,24);
 _memcpy(($md|0),($st|0),($mdlen|0))|0;
 STACKTOP = sp;return 0;
}
function _keccak1600($in,$inlen,$md) {
 $in = $in|0;
 $inlen = $inlen|0;
 $md = $md|0;
 var $$pre31 = 0, $$pre32 = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $$pre37 = 0, $$pre38 = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $$pre46 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr$us$i = 0, $add$ptr14$i = 0, $arrayidx$us$i$1 = 0, $arrayidx$us$i$10 = 0, $arrayidx$us$i$11 = 0, $arrayidx$us$i$12 = 0, $arrayidx$us$i$13 = 0, $arrayidx$us$i$14 = 0;
 var $arrayidx$us$i$15 = 0, $arrayidx$us$i$16 = 0, $arrayidx$us$i$2 = 0, $arrayidx$us$i$3 = 0, $arrayidx$us$i$4 = 0, $arrayidx$us$i$5 = 0, $arrayidx$us$i$6 = 0, $arrayidx$us$i$7 = 0, $arrayidx$us$i$8 = 0, $arrayidx$us$i$9 = 0, $arrayidx12$i = 0, $arrayidx17$i = 0, $arrayidx24$i$1 = 0, $arrayidx24$i$10 = 0, $arrayidx24$i$11 = 0, $arrayidx24$i$12 = 0, $arrayidx24$i$13 = 0, $arrayidx24$i$14 = 0, $arrayidx24$i$15 = 0, $arrayidx24$i$16 = 0;
 var $arrayidx24$i$2 = 0, $arrayidx24$i$3 = 0, $arrayidx24$i$4 = 0, $arrayidx24$i$5 = 0, $arrayidx24$i$6 = 0, $arrayidx24$i$7 = 0, $arrayidx24$i$8 = 0, $arrayidx24$i$9 = 0, $arrayidx25$i$16$pre$phiZZZ2D = 0, $arrayidx5$us$i$16$le = 0, $cmp1$us$i = 0, $cmp131$i = 0, $in$addr$0$lcssa$i = 0, $in$addr$033$us$i = 0, $inc11$i = 0, $inlen$addr$0$lcssa$i = 0, $inlen$addr$032$us$i = 0, $st$i = 0, $sub15$i = 0, $sub8$us$i = 0;
 var $temp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $st$i = sp + 144|0;
 $temp$i = sp;
 _memset(($st$i|0),0,200)|0;
 $cmp131$i = ($inlen|0)<(136);
 $$pre31 = ((($st$i)) + 8|0);
 $$pre32 = ((($st$i)) + 16|0);
 $$pre33 = ((($st$i)) + 24|0);
 $$pre34 = ((($st$i)) + 32|0);
 $$pre35 = ((($st$i)) + 40|0);
 $$pre36 = ((($st$i)) + 48|0);
 $$pre37 = ((($st$i)) + 56|0);
 $$pre38 = ((($st$i)) + 64|0);
 $$pre39 = ((($st$i)) + 72|0);
 $$pre40 = ((($st$i)) + 80|0);
 $$pre41 = ((($st$i)) + 88|0);
 $$pre42 = ((($st$i)) + 96|0);
 $$pre43 = ((($st$i)) + 104|0);
 $$pre44 = ((($st$i)) + 112|0);
 $$pre45 = ((($st$i)) + 120|0);
 $$pre46 = ((($st$i)) + 128|0);
 if ($cmp131$i) {
  $437 = 0;$439 = 0;$451 = 0;$453 = 0;$465 = 0;$467 = 0;$479 = 0;$481 = 0;$493 = 0;$495 = 0;$507 = 0;$509 = 0;$521 = 0;$523 = 0;$535 = 0;$537 = 0;$549 = 0;$551 = 0;$563 = 0;$565 = 0;$577 = 0;$579 = 0;$591 = 0;$593 = 0;$605 = 0;$607 = 0;$619 = 0;$621 = 0;$633 = 0;$635 = 0;$arrayidx25$i$16$pre$phiZZZ2D = $$pre46;$in$addr$0$lcssa$i = $in;$inlen$addr$0$lcssa$i = $inlen;
 } else {
  $105 = 0;$107 = 0;$119 = 0;$121 = 0;$133 = 0;$135 = 0;$147 = 0;$149 = 0;$161 = 0;$163 = 0;$175 = 0;$177 = 0;$189 = 0;$191 = 0;$203 = 0;$205 = 0;$21 = 0;$217 = 0;$219 = 0;$23 = 0;$35 = 0;$37 = 0;$49 = 0;$51 = 0;$63 = 0;$65 = 0;$7 = 0;$77 = 0;$79 = 0;$9 = 0;$91 = 0;$93 = 0;$in$addr$033$us$i = $in;$inlen$addr$032$us$i = $inlen;
  while(1) {
   $0 = $in$addr$033$us$i;
   $1 = $0;
   $2 = HEAP32[$1>>2]|0;
   $3 = (($0) + 4)|0;
   $4 = $3;
   $5 = HEAP32[$4>>2]|0;
   $6 = $7 ^ $2;
   $8 = $9 ^ $5;
   $10 = $st$i;
   $11 = $10;
   HEAP32[$11>>2] = $6;
   $12 = (($10) + 4)|0;
   $13 = $12;
   HEAP32[$13>>2] = $8;
   $arrayidx$us$i$1 = ((($in$addr$033$us$i)) + 8|0);
   $14 = $arrayidx$us$i$1;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($14) + 4)|0;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = $21 ^ $16;
   $22 = $23 ^ $19;
   $24 = $$pre31;
   $25 = $24;
   HEAP32[$25>>2] = $20;
   $26 = (($24) + 4)|0;
   $27 = $26;
   HEAP32[$27>>2] = $22;
   $arrayidx$us$i$2 = ((($in$addr$033$us$i)) + 16|0);
   $28 = $arrayidx$us$i$2;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 4)|0;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = $35 ^ $30;
   $36 = $37 ^ $33;
   $38 = $$pre32;
   $39 = $38;
   HEAP32[$39>>2] = $34;
   $40 = (($38) + 4)|0;
   $41 = $40;
   HEAP32[$41>>2] = $36;
   $arrayidx$us$i$3 = ((($in$addr$033$us$i)) + 24|0);
   $42 = $arrayidx$us$i$3;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = $49 ^ $44;
   $50 = $51 ^ $47;
   $52 = $$pre33;
   $53 = $52;
   HEAP32[$53>>2] = $48;
   $54 = (($52) + 4)|0;
   $55 = $54;
   HEAP32[$55>>2] = $50;
   $arrayidx$us$i$4 = ((($in$addr$033$us$i)) + 32|0);
   $56 = $arrayidx$us$i$4;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = (($56) + 4)|0;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = $63 ^ $58;
   $64 = $65 ^ $61;
   $66 = $$pre34;
   $67 = $66;
   HEAP32[$67>>2] = $62;
   $68 = (($66) + 4)|0;
   $69 = $68;
   HEAP32[$69>>2] = $64;
   $arrayidx$us$i$5 = ((($in$addr$033$us$i)) + 40|0);
   $70 = $arrayidx$us$i$5;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = (($70) + 4)|0;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = $77 ^ $72;
   $78 = $79 ^ $75;
   $80 = $$pre35;
   $81 = $80;
   HEAP32[$81>>2] = $76;
   $82 = (($80) + 4)|0;
   $83 = $82;
   HEAP32[$83>>2] = $78;
   $arrayidx$us$i$6 = ((($in$addr$033$us$i)) + 48|0);
   $84 = $arrayidx$us$i$6;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = (($84) + 4)|0;
   $88 = $87;
   $89 = HEAP32[$88>>2]|0;
   $90 = $91 ^ $86;
   $92 = $93 ^ $89;
   $94 = $$pre36;
   $95 = $94;
   HEAP32[$95>>2] = $90;
   $96 = (($94) + 4)|0;
   $97 = $96;
   HEAP32[$97>>2] = $92;
   $arrayidx$us$i$7 = ((($in$addr$033$us$i)) + 56|0);
   $98 = $arrayidx$us$i$7;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = (($98) + 4)|0;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = $105 ^ $100;
   $106 = $107 ^ $103;
   $108 = $$pre37;
   $109 = $108;
   HEAP32[$109>>2] = $104;
   $110 = (($108) + 4)|0;
   $111 = $110;
   HEAP32[$111>>2] = $106;
   $arrayidx$us$i$8 = ((($in$addr$033$us$i)) + 64|0);
   $112 = $arrayidx$us$i$8;
   $113 = $112;
   $114 = HEAP32[$113>>2]|0;
   $115 = (($112) + 4)|0;
   $116 = $115;
   $117 = HEAP32[$116>>2]|0;
   $118 = $119 ^ $114;
   $120 = $121 ^ $117;
   $122 = $$pre38;
   $123 = $122;
   HEAP32[$123>>2] = $118;
   $124 = (($122) + 4)|0;
   $125 = $124;
   HEAP32[$125>>2] = $120;
   $arrayidx$us$i$9 = ((($in$addr$033$us$i)) + 72|0);
   $126 = $arrayidx$us$i$9;
   $127 = $126;
   $128 = HEAP32[$127>>2]|0;
   $129 = (($126) + 4)|0;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = $133 ^ $128;
   $134 = $135 ^ $131;
   $136 = $$pre39;
   $137 = $136;
   HEAP32[$137>>2] = $132;
   $138 = (($136) + 4)|0;
   $139 = $138;
   HEAP32[$139>>2] = $134;
   $arrayidx$us$i$10 = ((($in$addr$033$us$i)) + 80|0);
   $140 = $arrayidx$us$i$10;
   $141 = $140;
   $142 = HEAP32[$141>>2]|0;
   $143 = (($140) + 4)|0;
   $144 = $143;
   $145 = HEAP32[$144>>2]|0;
   $146 = $147 ^ $142;
   $148 = $149 ^ $145;
   $150 = $$pre40;
   $151 = $150;
   HEAP32[$151>>2] = $146;
   $152 = (($150) + 4)|0;
   $153 = $152;
   HEAP32[$153>>2] = $148;
   $arrayidx$us$i$11 = ((($in$addr$033$us$i)) + 88|0);
   $154 = $arrayidx$us$i$11;
   $155 = $154;
   $156 = HEAP32[$155>>2]|0;
   $157 = (($154) + 4)|0;
   $158 = $157;
   $159 = HEAP32[$158>>2]|0;
   $160 = $161 ^ $156;
   $162 = $163 ^ $159;
   $164 = $$pre41;
   $165 = $164;
   HEAP32[$165>>2] = $160;
   $166 = (($164) + 4)|0;
   $167 = $166;
   HEAP32[$167>>2] = $162;
   $arrayidx$us$i$12 = ((($in$addr$033$us$i)) + 96|0);
   $168 = $arrayidx$us$i$12;
   $169 = $168;
   $170 = HEAP32[$169>>2]|0;
   $171 = (($168) + 4)|0;
   $172 = $171;
   $173 = HEAP32[$172>>2]|0;
   $174 = $175 ^ $170;
   $176 = $177 ^ $173;
   $178 = $$pre42;
   $179 = $178;
   HEAP32[$179>>2] = $174;
   $180 = (($178) + 4)|0;
   $181 = $180;
   HEAP32[$181>>2] = $176;
   $arrayidx$us$i$13 = ((($in$addr$033$us$i)) + 104|0);
   $182 = $arrayidx$us$i$13;
   $183 = $182;
   $184 = HEAP32[$183>>2]|0;
   $185 = (($182) + 4)|0;
   $186 = $185;
   $187 = HEAP32[$186>>2]|0;
   $188 = $189 ^ $184;
   $190 = $191 ^ $187;
   $192 = $$pre43;
   $193 = $192;
   HEAP32[$193>>2] = $188;
   $194 = (($192) + 4)|0;
   $195 = $194;
   HEAP32[$195>>2] = $190;
   $arrayidx$us$i$14 = ((($in$addr$033$us$i)) + 112|0);
   $196 = $arrayidx$us$i$14;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $202 = $203 ^ $198;
   $204 = $205 ^ $201;
   $206 = $$pre44;
   $207 = $206;
   HEAP32[$207>>2] = $202;
   $208 = (($206) + 4)|0;
   $209 = $208;
   HEAP32[$209>>2] = $204;
   $arrayidx$us$i$15 = ((($in$addr$033$us$i)) + 120|0);
   $210 = $arrayidx$us$i$15;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = $217 ^ $212;
   $218 = $219 ^ $215;
   $220 = $$pre45;
   $221 = $220;
   HEAP32[$221>>2] = $216;
   $222 = (($220) + 4)|0;
   $223 = $222;
   HEAP32[$223>>2] = $218;
   $arrayidx$us$i$16 = ((($in$addr$033$us$i)) + 128|0);
   $224 = $arrayidx$us$i$16;
   $225 = $224;
   $226 = HEAP32[$225>>2]|0;
   $227 = (($224) + 4)|0;
   $228 = $227;
   $229 = HEAP32[$228>>2]|0;
   $230 = $$pre46;
   $231 = $230;
   $232 = HEAP32[$231>>2]|0;
   $233 = (($230) + 4)|0;
   $234 = $233;
   $235 = HEAP32[$234>>2]|0;
   $236 = $232 ^ $226;
   $237 = $235 ^ $229;
   $238 = $$pre46;
   $239 = $238;
   HEAP32[$239>>2] = $236;
   $240 = (($238) + 4)|0;
   $241 = $240;
   HEAP32[$241>>2] = $237;
   _keccakf($st$i,24);
   $sub8$us$i = (($inlen$addr$032$us$i) + -136)|0;
   $add$ptr$us$i = ((($in$addr$033$us$i)) + 136|0);
   $cmp1$us$i = ($inlen$addr$032$us$i|0)<(272);
   if ($cmp1$us$i) {
    break;
   }
   $242 = $st$i;
   $243 = $242;
   $244 = HEAP32[$243>>2]|0;
   $245 = (($242) + 4)|0;
   $246 = $245;
   $247 = HEAP32[$246>>2]|0;
   $248 = $$pre31;
   $249 = $248;
   $250 = HEAP32[$249>>2]|0;
   $251 = (($248) + 4)|0;
   $252 = $251;
   $253 = HEAP32[$252>>2]|0;
   $254 = $$pre32;
   $255 = $254;
   $256 = HEAP32[$255>>2]|0;
   $257 = (($254) + 4)|0;
   $258 = $257;
   $259 = HEAP32[$258>>2]|0;
   $260 = $$pre33;
   $261 = $260;
   $262 = HEAP32[$261>>2]|0;
   $263 = (($260) + 4)|0;
   $264 = $263;
   $265 = HEAP32[$264>>2]|0;
   $266 = $$pre34;
   $267 = $266;
   $268 = HEAP32[$267>>2]|0;
   $269 = (($266) + 4)|0;
   $270 = $269;
   $271 = HEAP32[$270>>2]|0;
   $272 = $$pre35;
   $273 = $272;
   $274 = HEAP32[$273>>2]|0;
   $275 = (($272) + 4)|0;
   $276 = $275;
   $277 = HEAP32[$276>>2]|0;
   $278 = $$pre36;
   $279 = $278;
   $280 = HEAP32[$279>>2]|0;
   $281 = (($278) + 4)|0;
   $282 = $281;
   $283 = HEAP32[$282>>2]|0;
   $284 = $$pre37;
   $285 = $284;
   $286 = HEAP32[$285>>2]|0;
   $287 = (($284) + 4)|0;
   $288 = $287;
   $289 = HEAP32[$288>>2]|0;
   $290 = $$pre38;
   $291 = $290;
   $292 = HEAP32[$291>>2]|0;
   $293 = (($290) + 4)|0;
   $294 = $293;
   $295 = HEAP32[$294>>2]|0;
   $296 = $$pre39;
   $297 = $296;
   $298 = HEAP32[$297>>2]|0;
   $299 = (($296) + 4)|0;
   $300 = $299;
   $301 = HEAP32[$300>>2]|0;
   $302 = $$pre40;
   $303 = $302;
   $304 = HEAP32[$303>>2]|0;
   $305 = (($302) + 4)|0;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = $$pre41;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = (($308) + 4)|0;
   $312 = $311;
   $313 = HEAP32[$312>>2]|0;
   $314 = $$pre42;
   $315 = $314;
   $316 = HEAP32[$315>>2]|0;
   $317 = (($314) + 4)|0;
   $318 = $317;
   $319 = HEAP32[$318>>2]|0;
   $320 = $$pre43;
   $321 = $320;
   $322 = HEAP32[$321>>2]|0;
   $323 = (($320) + 4)|0;
   $324 = $323;
   $325 = HEAP32[$324>>2]|0;
   $326 = $$pre44;
   $327 = $326;
   $328 = HEAP32[$327>>2]|0;
   $329 = (($326) + 4)|0;
   $330 = $329;
   $331 = HEAP32[$330>>2]|0;
   $332 = $$pre45;
   $333 = $332;
   $334 = HEAP32[$333>>2]|0;
   $335 = (($332) + 4)|0;
   $336 = $335;
   $337 = HEAP32[$336>>2]|0;
   $105 = $286;$107 = $289;$119 = $292;$121 = $295;$133 = $298;$135 = $301;$147 = $304;$149 = $307;$161 = $310;$163 = $313;$175 = $316;$177 = $319;$189 = $322;$191 = $325;$203 = $328;$205 = $331;$21 = $250;$217 = $334;$219 = $337;$23 = $253;$35 = $256;$37 = $259;$49 = $262;$51 = $265;$63 = $268;$65 = $271;$7 = $244;$77 = $274;$79 = $277;$9 = $247;$91 = $280;$93 = $283;$in$addr$033$us$i = $add$ptr$us$i;$inlen$addr$032$us$i = $sub8$us$i;
  }
  $arrayidx5$us$i$16$le = ((($st$i)) + 128|0);
  $338 = $st$i;
  $339 = $338;
  $340 = HEAP32[$339>>2]|0;
  $341 = (($338) + 4)|0;
  $342 = $341;
  $343 = HEAP32[$342>>2]|0;
  $344 = $$pre31;
  $345 = $344;
  $346 = HEAP32[$345>>2]|0;
  $347 = (($344) + 4)|0;
  $348 = $347;
  $349 = HEAP32[$348>>2]|0;
  $350 = $$pre32;
  $351 = $350;
  $352 = HEAP32[$351>>2]|0;
  $353 = (($350) + 4)|0;
  $354 = $353;
  $355 = HEAP32[$354>>2]|0;
  $356 = $$pre33;
  $357 = $356;
  $358 = HEAP32[$357>>2]|0;
  $359 = (($356) + 4)|0;
  $360 = $359;
  $361 = HEAP32[$360>>2]|0;
  $362 = $$pre34;
  $363 = $362;
  $364 = HEAP32[$363>>2]|0;
  $365 = (($362) + 4)|0;
  $366 = $365;
  $367 = HEAP32[$366>>2]|0;
  $368 = $$pre35;
  $369 = $368;
  $370 = HEAP32[$369>>2]|0;
  $371 = (($368) + 4)|0;
  $372 = $371;
  $373 = HEAP32[$372>>2]|0;
  $374 = $$pre36;
  $375 = $374;
  $376 = HEAP32[$375>>2]|0;
  $377 = (($374) + 4)|0;
  $378 = $377;
  $379 = HEAP32[$378>>2]|0;
  $380 = $$pre37;
  $381 = $380;
  $382 = HEAP32[$381>>2]|0;
  $383 = (($380) + 4)|0;
  $384 = $383;
  $385 = HEAP32[$384>>2]|0;
  $386 = $$pre38;
  $387 = $386;
  $388 = HEAP32[$387>>2]|0;
  $389 = (($386) + 4)|0;
  $390 = $389;
  $391 = HEAP32[$390>>2]|0;
  $392 = $$pre39;
  $393 = $392;
  $394 = HEAP32[$393>>2]|0;
  $395 = (($392) + 4)|0;
  $396 = $395;
  $397 = HEAP32[$396>>2]|0;
  $398 = $$pre40;
  $399 = $398;
  $400 = HEAP32[$399>>2]|0;
  $401 = (($398) + 4)|0;
  $402 = $401;
  $403 = HEAP32[$402>>2]|0;
  $404 = $$pre41;
  $405 = $404;
  $406 = HEAP32[$405>>2]|0;
  $407 = (($404) + 4)|0;
  $408 = $407;
  $409 = HEAP32[$408>>2]|0;
  $410 = $$pre42;
  $411 = $410;
  $412 = HEAP32[$411>>2]|0;
  $413 = (($410) + 4)|0;
  $414 = $413;
  $415 = HEAP32[$414>>2]|0;
  $416 = $$pre43;
  $417 = $416;
  $418 = HEAP32[$417>>2]|0;
  $419 = (($416) + 4)|0;
  $420 = $419;
  $421 = HEAP32[$420>>2]|0;
  $422 = $$pre44;
  $423 = $422;
  $424 = HEAP32[$423>>2]|0;
  $425 = (($422) + 4)|0;
  $426 = $425;
  $427 = HEAP32[$426>>2]|0;
  $437 = $340;$439 = $343;$451 = $346;$453 = $349;$465 = $352;$467 = $355;$479 = $358;$481 = $361;$493 = $364;$495 = $367;$507 = $370;$509 = $373;$521 = $376;$523 = $379;$535 = $382;$537 = $385;$549 = $388;$551 = $391;$563 = $394;$565 = $397;$577 = $400;$579 = $403;$591 = $406;$593 = $409;$605 = $412;$607 = $415;$619 = $418;$621 = $421;$633 = $424;$635 = $427;$arrayidx25$i$16$pre$phiZZZ2D = $arrayidx5$us$i$16$le;$in$addr$0$lcssa$i = $add$ptr$us$i;$inlen$addr$0$lcssa$i = $sub8$us$i;
 }
 _memcpy(($temp$i|0),($in$addr$0$lcssa$i|0),($inlen$addr$0$lcssa$i|0))|0;
 $inc11$i = (($inlen$addr$0$lcssa$i) + 1)|0;
 $arrayidx12$i = (($temp$i) + ($inlen$addr$0$lcssa$i)|0);
 HEAP8[$arrayidx12$i>>0] = 1;
 $add$ptr14$i = (($temp$i) + ($inc11$i)|0);
 $sub15$i = (135 - ($inlen$addr$0$lcssa$i))|0;
 _memset(($add$ptr14$i|0),0,($sub15$i|0))|0;
 $arrayidx17$i = ((($temp$i)) + 135|0);
 $428 = HEAP8[$arrayidx17$i>>0]|0;
 $429 = $428 | -128;
 HEAP8[$arrayidx17$i>>0] = $429;
 $430 = $temp$i;
 $431 = $430;
 $432 = HEAP32[$431>>2]|0;
 $433 = (($430) + 4)|0;
 $434 = $433;
 $435 = HEAP32[$434>>2]|0;
 $436 = $437 ^ $432;
 $438 = $439 ^ $435;
 $440 = $st$i;
 $441 = $440;
 HEAP32[$441>>2] = $436;
 $442 = (($440) + 4)|0;
 $443 = $442;
 HEAP32[$443>>2] = $438;
 $arrayidx24$i$1 = ((($temp$i)) + 8|0);
 $444 = $arrayidx24$i$1;
 $445 = $444;
 $446 = HEAP32[$445>>2]|0;
 $447 = (($444) + 4)|0;
 $448 = $447;
 $449 = HEAP32[$448>>2]|0;
 $450 = $451 ^ $446;
 $452 = $453 ^ $449;
 $454 = $$pre31;
 $455 = $454;
 HEAP32[$455>>2] = $450;
 $456 = (($454) + 4)|0;
 $457 = $456;
 HEAP32[$457>>2] = $452;
 $arrayidx24$i$2 = ((($temp$i)) + 16|0);
 $458 = $arrayidx24$i$2;
 $459 = $458;
 $460 = HEAP32[$459>>2]|0;
 $461 = (($458) + 4)|0;
 $462 = $461;
 $463 = HEAP32[$462>>2]|0;
 $464 = $465 ^ $460;
 $466 = $467 ^ $463;
 $468 = $$pre32;
 $469 = $468;
 HEAP32[$469>>2] = $464;
 $470 = (($468) + 4)|0;
 $471 = $470;
 HEAP32[$471>>2] = $466;
 $arrayidx24$i$3 = ((($temp$i)) + 24|0);
 $472 = $arrayidx24$i$3;
 $473 = $472;
 $474 = HEAP32[$473>>2]|0;
 $475 = (($472) + 4)|0;
 $476 = $475;
 $477 = HEAP32[$476>>2]|0;
 $478 = $479 ^ $474;
 $480 = $481 ^ $477;
 $482 = $$pre33;
 $483 = $482;
 HEAP32[$483>>2] = $478;
 $484 = (($482) + 4)|0;
 $485 = $484;
 HEAP32[$485>>2] = $480;
 $arrayidx24$i$4 = ((($temp$i)) + 32|0);
 $486 = $arrayidx24$i$4;
 $487 = $486;
 $488 = HEAP32[$487>>2]|0;
 $489 = (($486) + 4)|0;
 $490 = $489;
 $491 = HEAP32[$490>>2]|0;
 $492 = $493 ^ $488;
 $494 = $495 ^ $491;
 $496 = $$pre34;
 $497 = $496;
 HEAP32[$497>>2] = $492;
 $498 = (($496) + 4)|0;
 $499 = $498;
 HEAP32[$499>>2] = $494;
 $arrayidx24$i$5 = ((($temp$i)) + 40|0);
 $500 = $arrayidx24$i$5;
 $501 = $500;
 $502 = HEAP32[$501>>2]|0;
 $503 = (($500) + 4)|0;
 $504 = $503;
 $505 = HEAP32[$504>>2]|0;
 $506 = $507 ^ $502;
 $508 = $509 ^ $505;
 $510 = $$pre35;
 $511 = $510;
 HEAP32[$511>>2] = $506;
 $512 = (($510) + 4)|0;
 $513 = $512;
 HEAP32[$513>>2] = $508;
 $arrayidx24$i$6 = ((($temp$i)) + 48|0);
 $514 = $arrayidx24$i$6;
 $515 = $514;
 $516 = HEAP32[$515>>2]|0;
 $517 = (($514) + 4)|0;
 $518 = $517;
 $519 = HEAP32[$518>>2]|0;
 $520 = $521 ^ $516;
 $522 = $523 ^ $519;
 $524 = $$pre36;
 $525 = $524;
 HEAP32[$525>>2] = $520;
 $526 = (($524) + 4)|0;
 $527 = $526;
 HEAP32[$527>>2] = $522;
 $arrayidx24$i$7 = ((($temp$i)) + 56|0);
 $528 = $arrayidx24$i$7;
 $529 = $528;
 $530 = HEAP32[$529>>2]|0;
 $531 = (($528) + 4)|0;
 $532 = $531;
 $533 = HEAP32[$532>>2]|0;
 $534 = $535 ^ $530;
 $536 = $537 ^ $533;
 $538 = $$pre37;
 $539 = $538;
 HEAP32[$539>>2] = $534;
 $540 = (($538) + 4)|0;
 $541 = $540;
 HEAP32[$541>>2] = $536;
 $arrayidx24$i$8 = ((($temp$i)) + 64|0);
 $542 = $arrayidx24$i$8;
 $543 = $542;
 $544 = HEAP32[$543>>2]|0;
 $545 = (($542) + 4)|0;
 $546 = $545;
 $547 = HEAP32[$546>>2]|0;
 $548 = $549 ^ $544;
 $550 = $551 ^ $547;
 $552 = $$pre38;
 $553 = $552;
 HEAP32[$553>>2] = $548;
 $554 = (($552) + 4)|0;
 $555 = $554;
 HEAP32[$555>>2] = $550;
 $arrayidx24$i$9 = ((($temp$i)) + 72|0);
 $556 = $arrayidx24$i$9;
 $557 = $556;
 $558 = HEAP32[$557>>2]|0;
 $559 = (($556) + 4)|0;
 $560 = $559;
 $561 = HEAP32[$560>>2]|0;
 $562 = $563 ^ $558;
 $564 = $565 ^ $561;
 $566 = $$pre39;
 $567 = $566;
 HEAP32[$567>>2] = $562;
 $568 = (($566) + 4)|0;
 $569 = $568;
 HEAP32[$569>>2] = $564;
 $arrayidx24$i$10 = ((($temp$i)) + 80|0);
 $570 = $arrayidx24$i$10;
 $571 = $570;
 $572 = HEAP32[$571>>2]|0;
 $573 = (($570) + 4)|0;
 $574 = $573;
 $575 = HEAP32[$574>>2]|0;
 $576 = $577 ^ $572;
 $578 = $579 ^ $575;
 $580 = $$pre40;
 $581 = $580;
 HEAP32[$581>>2] = $576;
 $582 = (($580) + 4)|0;
 $583 = $582;
 HEAP32[$583>>2] = $578;
 $arrayidx24$i$11 = ((($temp$i)) + 88|0);
 $584 = $arrayidx24$i$11;
 $585 = $584;
 $586 = HEAP32[$585>>2]|0;
 $587 = (($584) + 4)|0;
 $588 = $587;
 $589 = HEAP32[$588>>2]|0;
 $590 = $591 ^ $586;
 $592 = $593 ^ $589;
 $594 = $$pre41;
 $595 = $594;
 HEAP32[$595>>2] = $590;
 $596 = (($594) + 4)|0;
 $597 = $596;
 HEAP32[$597>>2] = $592;
 $arrayidx24$i$12 = ((($temp$i)) + 96|0);
 $598 = $arrayidx24$i$12;
 $599 = $598;
 $600 = HEAP32[$599>>2]|0;
 $601 = (($598) + 4)|0;
 $602 = $601;
 $603 = HEAP32[$602>>2]|0;
 $604 = $605 ^ $600;
 $606 = $607 ^ $603;
 $608 = $$pre42;
 $609 = $608;
 HEAP32[$609>>2] = $604;
 $610 = (($608) + 4)|0;
 $611 = $610;
 HEAP32[$611>>2] = $606;
 $arrayidx24$i$13 = ((($temp$i)) + 104|0);
 $612 = $arrayidx24$i$13;
 $613 = $612;
 $614 = HEAP32[$613>>2]|0;
 $615 = (($612) + 4)|0;
 $616 = $615;
 $617 = HEAP32[$616>>2]|0;
 $618 = $619 ^ $614;
 $620 = $621 ^ $617;
 $622 = $$pre43;
 $623 = $622;
 HEAP32[$623>>2] = $618;
 $624 = (($622) + 4)|0;
 $625 = $624;
 HEAP32[$625>>2] = $620;
 $arrayidx24$i$14 = ((($temp$i)) + 112|0);
 $626 = $arrayidx24$i$14;
 $627 = $626;
 $628 = HEAP32[$627>>2]|0;
 $629 = (($626) + 4)|0;
 $630 = $629;
 $631 = HEAP32[$630>>2]|0;
 $632 = $633 ^ $628;
 $634 = $635 ^ $631;
 $636 = $$pre44;
 $637 = $636;
 HEAP32[$637>>2] = $632;
 $638 = (($636) + 4)|0;
 $639 = $638;
 HEAP32[$639>>2] = $634;
 $arrayidx24$i$15 = ((($temp$i)) + 120|0);
 $640 = $arrayidx24$i$15;
 $641 = $640;
 $642 = HEAP32[$641>>2]|0;
 $643 = (($640) + 4)|0;
 $644 = $643;
 $645 = HEAP32[$644>>2]|0;
 $646 = $$pre45;
 $647 = $646;
 $648 = HEAP32[$647>>2]|0;
 $649 = (($646) + 4)|0;
 $650 = $649;
 $651 = HEAP32[$650>>2]|0;
 $652 = $648 ^ $642;
 $653 = $651 ^ $645;
 $654 = $$pre45;
 $655 = $654;
 HEAP32[$655>>2] = $652;
 $656 = (($654) + 4)|0;
 $657 = $656;
 HEAP32[$657>>2] = $653;
 $arrayidx24$i$16 = ((($temp$i)) + 128|0);
 $658 = $arrayidx24$i$16;
 $659 = $658;
 $660 = HEAP32[$659>>2]|0;
 $661 = (($658) + 4)|0;
 $662 = $661;
 $663 = HEAP32[$662>>2]|0;
 $664 = $arrayidx25$i$16$pre$phiZZZ2D;
 $665 = $664;
 $666 = HEAP32[$665>>2]|0;
 $667 = (($664) + 4)|0;
 $668 = $667;
 $669 = HEAP32[$668>>2]|0;
 $670 = $666 ^ $660;
 $671 = $669 ^ $663;
 $672 = $arrayidx25$i$16$pre$phiZZZ2D;
 $673 = $672;
 HEAP32[$673>>2] = $670;
 $674 = (($672) + 4)|0;
 $675 = $674;
 HEAP32[$675>>2] = $671;
 _keccakf($st$i,24);
 _memcpy(($md|0),($st$i|0),200)|0;
 STACKTOP = sp;return;
}
function _cn_slow_hash($data,$length,$hash,$light,$variant,$prehashed,$0,$1,$2,$3,$4,$5) {
 $data = $data|0;
 $length = $length|0;
 $hash = $hash|0;
 $light = $light|0;
 $variant = $variant|0;
 $prehashed = $prehashed|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$pre = 0, $$pre846 = 0, $$pre847 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $a = 0, $add$ptr = 0, $add$ptr126 = 0, $add$ptr128 = 0, $add$ptr130 = 0, $add$ptr267 = 0, $add$ptr271 = 0, $add$ptr285 = 0, $add$ptr39 = 0, $add$ptr46 = 0, $add229 = 0.0, $add252 = 0, $add382 = 0, $aes_ctx = 0, $and173 = 0, $and175 = 0, $and181 = 0, $and404 = 0, $arrayidx = 0;
 var $arrayidx$1$i = 0, $arrayidx$1$i134 = 0, $arrayidx$1$i156 = 0, $arrayidx$1$i246 = 0, $arrayidx$1$i385 = 0, $arrayidx$10$i = 0, $arrayidx$10$i273 = 0, $arrayidx$11$i = 0, $arrayidx$11$i276 = 0, $arrayidx$12$i = 0, $arrayidx$12$i279 = 0, $arrayidx$13$i = 0, $arrayidx$13$i282 = 0, $arrayidx$14$i = 0, $arrayidx$14$i285 = 0, $arrayidx$15$i = 0, $arrayidx$15$i288 = 0, $arrayidx$2$i = 0, $arrayidx$2$i137 = 0, $arrayidx$2$i159 = 0;
 var $arrayidx$2$i249 = 0, $arrayidx$2$i388 = 0, $arrayidx$3$i = 0, $arrayidx$3$i140 = 0, $arrayidx$3$i162 = 0, $arrayidx$3$i252 = 0, $arrayidx$3$i391 = 0, $arrayidx$4$i = 0, $arrayidx$4$i143 = 0, $arrayidx$4$i165 = 0, $arrayidx$4$i255 = 0, $arrayidx$4$i394 = 0, $arrayidx$5$i = 0, $arrayidx$5$i146 = 0, $arrayidx$5$i168 = 0, $arrayidx$5$i258 = 0, $arrayidx$5$i397 = 0, $arrayidx$6$i = 0, $arrayidx$6$i149 = 0, $arrayidx$6$i171 = 0;
 var $arrayidx$6$i261 = 0, $arrayidx$6$i400 = 0, $arrayidx$7$i = 0, $arrayidx$7$i152 = 0, $arrayidx$7$i174 = 0, $arrayidx$7$i264 = 0, $arrayidx$7$i403 = 0, $arrayidx$8$i = 0, $arrayidx$8$i267 = 0, $arrayidx$9$i = 0, $arrayidx$9$i270 = 0, $arrayidx1$1$i157 = 0, $arrayidx1$1$i201 = 0, $arrayidx1$1$i293 = 0, $arrayidx1$1$i340 = 0, $arrayidx1$10$i = 0, $arrayidx1$10$i228 = 0, $arrayidx1$10$i320 = 0, $arrayidx1$10$i367 = 0, $arrayidx1$11$i = 0;
 var $arrayidx1$11$i231 = 0, $arrayidx1$11$i323 = 0, $arrayidx1$11$i370 = 0, $arrayidx1$12$i = 0, $arrayidx1$12$i234 = 0, $arrayidx1$12$i326 = 0, $arrayidx1$12$i373 = 0, $arrayidx1$13$i = 0, $arrayidx1$13$i237 = 0, $arrayidx1$13$i329 = 0, $arrayidx1$13$i376 = 0, $arrayidx1$14$i = 0, $arrayidx1$14$i240 = 0, $arrayidx1$14$i332 = 0, $arrayidx1$14$i379 = 0, $arrayidx1$15$i = 0, $arrayidx1$15$i243 = 0, $arrayidx1$15$i335 = 0, $arrayidx1$15$i382 = 0, $arrayidx1$2$i160 = 0;
 var $arrayidx1$2$i204 = 0, $arrayidx1$2$i296 = 0, $arrayidx1$2$i343 = 0, $arrayidx1$3$i163 = 0, $arrayidx1$3$i207 = 0, $arrayidx1$3$i299 = 0, $arrayidx1$3$i346 = 0, $arrayidx1$4$i166 = 0, $arrayidx1$4$i210 = 0, $arrayidx1$4$i302 = 0, $arrayidx1$4$i349 = 0, $arrayidx1$5$i169 = 0, $arrayidx1$5$i213 = 0, $arrayidx1$5$i305 = 0, $arrayidx1$5$i352 = 0, $arrayidx1$6$i172 = 0, $arrayidx1$6$i216 = 0, $arrayidx1$6$i308 = 0, $arrayidx1$6$i355 = 0, $arrayidx1$7$i175 = 0;
 var $arrayidx1$7$i219 = 0, $arrayidx1$7$i311 = 0, $arrayidx1$7$i358 = 0, $arrayidx1$8$i = 0, $arrayidx1$8$i314 = 0, $arrayidx1$9$i = 0, $arrayidx1$9$i225 = 0, $arrayidx1$9$i317 = 0, $arrayidx1$9$i364 = 0, $arrayidx101 = 0, $arrayidx104 = 0, $arrayidx118 = 0, $arrayidx132 = 0, $arrayidx139 = 0, $arrayidx149 = 0, $arrayidx196 = 0, $arrayidx299 = 0, $arrayidx379 = 0, $arrayidx383 = 0, $arrayidx405 = 0;
 var $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx64$1 = 0, $arrayidx64$2 = 0, $arrayidx64$3 = 0, $arrayidx64$4 = 0, $arrayidx64$5 = 0, $arrayidx64$6 = 0, $arrayidx64$7 = 0, $arrayidx69 = 0, $arrayidx77 = 0, $arrayidx83 = 0, $arrayidx86 = 0, $arrayidx89 = 0, $arrayidx91 = 0, $arrayidx94 = 0, $b$sroa$0$sroa$0$sroa$0$0825 = 0, $b$sroa$0$sroa$0$sroa$10$0822 = 0, $b$sroa$0$sroa$0$sroa$11$0821 = 0, $b$sroa$0$sroa$0$sroa$12$0820 = 0;
 var $b$sroa$0$sroa$0$sroa$13$0836 = 0, $b$sroa$0$sroa$0$sroa$14$0837 = 0, $b$sroa$0$sroa$0$sroa$8$0824 = 0, $b$sroa$0$sroa$0$sroa$9$0823 = 0, $b$sroa$27$sroa$0$sroa$0$0 = 0, $b$sroa$27$sroa$0$sroa$0$1834 = 0, $b$sroa$27$sroa$0$sroa$10$0 = 0, $b$sroa$27$sroa$0$sroa$10$1832 = 0, $b$sroa$27$sroa$0$sroa$12$0 = 0, $b$sroa$27$sroa$0$sroa$12$1831 = 0, $b$sroa$27$sroa$0$sroa$14$0 = 0, $b$sroa$27$sroa$0$sroa$14$1830 = 0, $b$sroa$27$sroa$0$sroa$16$0 = 0, $b$sroa$27$sroa$0$sroa$16$1829 = 0, $b$sroa$27$sroa$0$sroa$18$0 = 0, $b$sroa$27$sroa$0$sroa$18$1828 = 0, $b$sroa$27$sroa$0$sroa$20$0 = 0, $b$sroa$27$sroa$0$sroa$20$1827 = 0, $b$sroa$27$sroa$0$sroa$8$0 = 0, $b$sroa$27$sroa$0$sroa$8$1833 = 0;
 var $b$sroa$27$sroa$22$0$b$sroa$27$16$$sroa_cast$sroa_idx666 = 0, $c$sroa$0$sroa$0$0 = 0, $c$sroa$0$sroa$10$0 = 0, $c$sroa$0$sroa$11$0 = 0, $c$sroa$0$sroa$12$0 = 0, $c$sroa$0$sroa$13$0 = 0, $c$sroa$0$sroa$14$0 = 0, $c$sroa$0$sroa$15$0 = 0, $c$sroa$0$sroa$16$0 = 0, $c$sroa$17$0$arrayidx196$sroa_idx = 0, $c1$sroa$7$0$arrayidx118$sroa_idx = 0, $call = 0, $call5 = 0, $cmp = 0, $cmp13 = 0, $cmp25 = 0, $cmp25807 = 0, $cmp345 = 0, $cond246 = 0, $cond251 = 0;
 var $conv172 = 0, $conv183 = 0, $conv212 = 0, $conv216 = 0, $d$sroa$0$sroa$0$0 = 0, $d$sroa$0$sroa$10$0 = 0, $d$sroa$0$sroa$13$0 = 0, $d$sroa$0$sroa$16$0 = 0, $d$sroa$0$sroa$19$0 = 0, $d$sroa$0$sroa$22$0 = 0, $d$sroa$0$sroa$25$0 = 0, $d$sroa$0$sroa$7$0 = 0, $exitcond = 0, $exp_data = 0, $exp_data366 = 0, $exp_data_len = 0, $exp_data_len368 = 0, $expandedKey = 0, $i$0843 = 0, $i$1840 = 0;
 var $i$2818 = 0, $inc355 = 0, $inc390 = 0, $inc393 = 0, $inc72 = 0, $init = 0, $j$1816 = 0, $mul230 = 0.0, $mul378 = 0, $mul380 = 0, $mul68 = 0, $or = 0, $shl176 = 0, $shr180 = 0, $spec$select = 0, $spec$select808 = 0, $spec$select809 = 0, $spec$select810 = 0, $spec$select811 = 0, $spec$select812 = 0;
 var $spec$select813 = 0, $spec$select814 = 0, $state = 0, $sub231 = 0.0, $text = 0, $tobool = 0, $tobool2 = 0, $tweak1_2$sroa$0$0806 = 0, $tweak1_2$sroa$12$0803 = 0, $tweak1_2$sroa$15$0802 = 0, $tweak1_2$sroa$18$0801 = 0, $tweak1_2$sroa$21$0800 = 0, $tweak1_2$sroa$24$0799 = 0, $tweak1_2$sroa$6$0805 = 0, $tweak1_2$sroa$9$0804 = 0, $xor125 = 0, $xor127 = 0, $xor129 = 0, $xor182 = 0, $xor266 = 0;
 var $xor270 = 0, $xor284 = 0, $xor5$1$i = 0, $xor5$1$i136 = 0, $xor5$1$i158 = 0, $xor5$1$i180 = 0, $xor5$1$i248 = 0, $xor5$1$i294 = 0, $xor5$1$i341 = 0, $xor5$1$i387 = 0, $xor5$10$i = 0, $xor5$10$i275 = 0, $xor5$10$i321 = 0, $xor5$10$i368 = 0, $xor5$11$i = 0, $xor5$11$i278 = 0, $xor5$11$i324 = 0, $xor5$11$i371 = 0, $xor5$12$i = 0, $xor5$12$i281 = 0;
 var $xor5$12$i327 = 0, $xor5$12$i374 = 0, $xor5$13$i = 0, $xor5$13$i284 = 0, $xor5$13$i330 = 0, $xor5$13$i377 = 0, $xor5$14$i = 0, $xor5$14$i287 = 0, $xor5$14$i333 = 0, $xor5$14$i380 = 0, $xor5$15$i = 0, $xor5$15$i290 = 0, $xor5$15$i336 = 0, $xor5$15$i383 = 0, $xor5$2$i = 0, $xor5$2$i139 = 0, $xor5$2$i161 = 0, $xor5$2$i183 = 0, $xor5$2$i251 = 0, $xor5$2$i297 = 0;
 var $xor5$2$i344 = 0, $xor5$2$i390 = 0, $xor5$3$i = 0, $xor5$3$i142 = 0, $xor5$3$i164 = 0, $xor5$3$i186 = 0, $xor5$3$i254 = 0, $xor5$3$i300 = 0, $xor5$3$i347 = 0, $xor5$3$i393 = 0, $xor5$4$i = 0, $xor5$4$i145 = 0, $xor5$4$i167 = 0, $xor5$4$i189 = 0, $xor5$4$i211 = 0, $xor5$4$i257 = 0, $xor5$4$i303 = 0, $xor5$4$i350 = 0, $xor5$4$i396 = 0, $xor5$5$i = 0;
 var $xor5$5$i148 = 0, $xor5$5$i170 = 0, $xor5$5$i192 = 0, $xor5$5$i214 = 0, $xor5$5$i260 = 0, $xor5$5$i306 = 0, $xor5$5$i353 = 0, $xor5$5$i399 = 0, $xor5$6$i = 0, $xor5$6$i151 = 0, $xor5$6$i173 = 0, $xor5$6$i195 = 0, $xor5$6$i217 = 0, $xor5$6$i263 = 0, $xor5$6$i309 = 0, $xor5$6$i356 = 0, $xor5$6$i402 = 0, $xor5$7$i = 0, $xor5$7$i154 = 0, $xor5$7$i176 = 0;
 var $xor5$7$i198 = 0, $xor5$7$i220 = 0, $xor5$7$i266 = 0, $xor5$7$i312 = 0, $xor5$7$i359 = 0, $xor5$7$i405 = 0, $xor5$8$i = 0, $xor5$8$i269 = 0, $xor5$8$i315 = 0, $xor5$8$i362 = 0, $xor5$9$i = 0, $xor5$9$i272 = 0, $xor5$9$i318 = 0, $xor5$9$i365 = 0, $xor5$i = 0, $xor5$i133 = 0, $xor5$i155 = 0, $xor5$i177 = 0, $xor5$i245 = 0, $xor5$i291 = 0;
 var $xor5$i338 = 0, $xor5$i384 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0;
 $text = sp + 272|0;
 $a = sp + 256|0;
 $expandedKey = sp;
 $state = sp + 400|0;
 $aes_ctx = sp + 600|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),7)|0);
 $7 = (getTempRet0() | 0);
 $8 = (_bitshift64Lshr(($4|0),($5|0),1)|0);
 $9 = (getTempRet0() | 0);
 $tobool = ($light|0)!=(0);
 $call = (_malloc($0)|0);
 $tobool2 = ($prehashed|0)==(0);
 if ($tobool2) {
  _hash_process($state,$data,$length);
 } else {
  _memcpy(($state|0),($data|0),($length|0))|0;
 }
 $init = ((($state)) + 64|0);
 dest=$text; src=$init; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $call5 = (_oaes_alloc()|0);
 HEAP32[$aes_ctx>>2] = $call5;
 (_oaes_key_import_data($call5,$state,32)|0);
 $cmp = ($variant|0)==(1);
 do {
  if ($cmp) {
   $cmp13 = ($length>>>0)<(43);
   if ($cmp13) {
    $10 = HEAP32[10900]|0;
    (_fwrite(45713,52,1,$10)|0);
    _abort();
    // unreachable;
   } else {
    $arrayidx = ((($state)) + 192|0);
    $11 = $arrayidx;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = (($11) + 4)|0;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = $13&255;
    $18 = (_bitshift64Lshr(($13|0),($16|0),8)|0);
    $19 = (getTempRet0() | 0);
    $20 = $18&255;
    $21 = (_bitshift64Lshr(($13|0),($16|0),16)|0);
    $22 = (getTempRet0() | 0);
    $23 = $21&255;
    $24 = (_bitshift64Lshr(($13|0),($16|0),24)|0);
    $25 = (getTempRet0() | 0);
    $26 = $24&255;
    $27 = $16&255;
    $28 = (_bitshift64Lshr(($13|0),($16|0),40)|0);
    $29 = (getTempRet0() | 0);
    $30 = $28&255;
    $31 = (_bitshift64Lshr(($13|0),($16|0),48)|0);
    $32 = (getTempRet0() | 0);
    $33 = $31&255;
    $34 = (_bitshift64Lshr(($13|0),($16|0),56)|0);
    $35 = (getTempRet0() | 0);
    $36 = $34&255;
    $add$ptr = ((($data)) + 35|0);
    $37 = HEAP8[$add$ptr>>0]|0;
    $xor5$i = $37 ^ $17;
    $arrayidx$1$i = ((($data)) + 36|0);
    $38 = HEAP8[$arrayidx$1$i>>0]|0;
    $xor5$1$i = $38 ^ $20;
    $arrayidx$2$i = ((($data)) + 37|0);
    $39 = HEAP8[$arrayidx$2$i>>0]|0;
    $xor5$2$i = $39 ^ $23;
    $arrayidx$3$i = ((($data)) + 38|0);
    $40 = HEAP8[$arrayidx$3$i>>0]|0;
    $xor5$3$i = $40 ^ $26;
    $arrayidx$4$i = ((($data)) + 39|0);
    $41 = HEAP8[$arrayidx$4$i>>0]|0;
    $xor5$4$i = $41 ^ $27;
    $arrayidx$5$i = ((($data)) + 40|0);
    $42 = HEAP8[$arrayidx$5$i>>0]|0;
    $xor5$5$i = $42 ^ $30;
    $arrayidx$6$i = ((($data)) + 41|0);
    $43 = HEAP8[$arrayidx$6$i>>0]|0;
    $xor5$6$i = $43 ^ $33;
    $arrayidx$7$i = ((($data)) + 42|0);
    $44 = HEAP8[$arrayidx$7$i>>0]|0;
    $xor5$7$i = $44 ^ $36;
    $1133 = 0;$1134 = 0;$1135 = 0;$1136 = 0;$1137 = 0;$1138 = 0;$158 = $call5;$b$sroa$27$sroa$0$sroa$0$0 = 0;$b$sroa$27$sroa$0$sroa$10$0 = 0;$b$sroa$27$sroa$0$sroa$12$0 = 0;$b$sroa$27$sroa$0$sroa$14$0 = 0;$b$sroa$27$sroa$0$sroa$16$0 = 0;$b$sroa$27$sroa$0$sroa$18$0 = 0;$b$sroa$27$sroa$0$sroa$20$0 = 0;$b$sroa$27$sroa$0$sroa$8$0 = 0;$cmp25807 = 0;$tweak1_2$sroa$0$0806 = $xor5$i;$tweak1_2$sroa$12$0803 = $xor5$3$i;$tweak1_2$sroa$15$0802 = $xor5$4$i;$tweak1_2$sroa$18$0801 = $xor5$5$i;$tweak1_2$sroa$21$0800 = $xor5$6$i;$tweak1_2$sroa$24$0799 = $xor5$7$i;$tweak1_2$sroa$6$0805 = $xor5$1$i;$tweak1_2$sroa$9$0804 = $xor5$2$i;
    break;
   }
  } else {
   $cmp25 = ($variant|0)==(2);
   if ($cmp25) {
    $45 = $init;
    $46 = $45;
    $47 = HEAP32[$46>>2]|0;
    $48 = (($45) + 4)|0;
    $49 = $48;
    $50 = HEAP32[$49>>2]|0;
    $51 = $47&255;
    $52 = (_bitshift64Lshr(($47|0),($50|0),8)|0);
    $53 = (getTempRet0() | 0);
    $54 = $52&255;
    $55 = (_bitshift64Lshr(($47|0),($50|0),16)|0);
    $56 = (getTempRet0() | 0);
    $57 = $55&255;
    $58 = (_bitshift64Lshr(($47|0),($50|0),24)|0);
    $59 = (getTempRet0() | 0);
    $60 = $58&255;
    $61 = $50&255;
    $62 = (_bitshift64Lshr(($47|0),($50|0),40)|0);
    $63 = (getTempRet0() | 0);
    $64 = $62&255;
    $65 = (_bitshift64Lshr(($47|0),($50|0),48)|0);
    $66 = (getTempRet0() | 0);
    $67 = $65&255;
    $68 = (_bitshift64Lshr(($47|0),($50|0),56)|0);
    $69 = (getTempRet0() | 0);
    $70 = $68&255;
    $b$sroa$27$sroa$22$0$b$sroa$27$16$$sroa_cast$sroa_idx666 = ((($state)) + 72|0);
    $71 = $b$sroa$27$sroa$22$0$b$sroa$27$16$$sroa_cast$sroa_idx666;
    $72 = $71;
    $73 = HEAP32[$72>>2]|0;
    $74 = (($71) + 4)|0;
    $75 = $74;
    $76 = HEAP32[$75>>2]|0;
    $add$ptr39 = ((($state)) + 80|0);
    $77 = HEAP8[$add$ptr39>>0]|0;
    $xor5$i133 = $77 ^ $51;
    $arrayidx$1$i134 = ((($add$ptr39)) + 1|0);
    $78 = HEAP8[$arrayidx$1$i134>>0]|0;
    $xor5$1$i136 = $78 ^ $54;
    $arrayidx$2$i137 = ((($add$ptr39)) + 2|0);
    $79 = HEAP8[$arrayidx$2$i137>>0]|0;
    $xor5$2$i139 = $79 ^ $57;
    $arrayidx$3$i140 = ((($add$ptr39)) + 3|0);
    $80 = HEAP8[$arrayidx$3$i140>>0]|0;
    $xor5$3$i142 = $80 ^ $60;
    $arrayidx$4$i143 = ((($add$ptr39)) + 4|0);
    $81 = HEAP8[$arrayidx$4$i143>>0]|0;
    $xor5$4$i145 = $81 ^ $61;
    $arrayidx$5$i146 = ((($add$ptr39)) + 5|0);
    $82 = HEAP8[$arrayidx$5$i146>>0]|0;
    $xor5$5$i148 = $82 ^ $64;
    $arrayidx$6$i149 = ((($add$ptr39)) + 6|0);
    $83 = HEAP8[$arrayidx$6$i149>>0]|0;
    $xor5$6$i151 = $83 ^ $67;
    $arrayidx$7$i152 = ((($add$ptr39)) + 7|0);
    $84 = HEAP8[$arrayidx$7$i152>>0]|0;
    $xor5$7$i154 = $84 ^ $70;
    $add$ptr46 = ((($state)) + 88|0);
    $85 = HEAP8[$add$ptr46>>0]|0;
    $86 = $73&255;
    $xor5$i384 = $85 ^ $86;
    $87 = $xor5$i384&255;
    $arrayidx$1$i385 = ((($add$ptr46)) + 1|0);
    $88 = HEAP8[$arrayidx$1$i385>>0]|0;
    $89 = (_bitshift64Lshr(($73|0),($76|0),8)|0);
    $90 = (getTempRet0() | 0);
    $91 = $89&255;
    $xor5$1$i387 = $88 ^ $91;
    $92 = $xor5$1$i387&255;
    $93 = (_bitshift64Shl(($92|0),0,8)|0);
    $94 = (getTempRet0() | 0);
    $95 = $93 | $87;
    $arrayidx$2$i388 = ((($add$ptr46)) + 2|0);
    $96 = HEAP8[$arrayidx$2$i388>>0]|0;
    $97 = (_bitshift64Lshr(($73|0),($76|0),16)|0);
    $98 = (getTempRet0() | 0);
    $99 = $97&255;
    $xor5$2$i390 = $96 ^ $99;
    $100 = $xor5$2$i390&255;
    $101 = (_bitshift64Shl(($100|0),0,16)|0);
    $102 = (getTempRet0() | 0);
    $103 = $95 | $101;
    $104 = $94 | $102;
    $arrayidx$3$i391 = ((($add$ptr46)) + 3|0);
    $105 = HEAP8[$arrayidx$3$i391>>0]|0;
    $106 = (_bitshift64Lshr(($73|0),($76|0),24)|0);
    $107 = (getTempRet0() | 0);
    $108 = $106&255;
    $xor5$3$i393 = $105 ^ $108;
    $109 = $xor5$3$i393&255;
    $110 = (_bitshift64Shl(($109|0),0,24)|0);
    $111 = (getTempRet0() | 0);
    $112 = $103 | $110;
    $113 = $104 | $111;
    $arrayidx$4$i394 = ((($add$ptr46)) + 4|0);
    $114 = HEAP8[$arrayidx$4$i394>>0]|0;
    $115 = $76&255;
    $xor5$4$i396 = $114 ^ $115;
    $116 = $xor5$4$i396&255;
    $arrayidx$5$i397 = ((($add$ptr46)) + 5|0);
    $117 = HEAP8[$arrayidx$5$i397>>0]|0;
    $118 = (_bitshift64Lshr(($73|0),($76|0),40)|0);
    $119 = (getTempRet0() | 0);
    $120 = $118&255;
    $xor5$5$i399 = $117 ^ $120;
    $121 = $xor5$5$i399&255;
    $122 = (_bitshift64Shl(($121|0),0,40)|0);
    $123 = (getTempRet0() | 0);
    $arrayidx$6$i400 = ((($add$ptr46)) + 6|0);
    $124 = HEAP8[$arrayidx$6$i400>>0]|0;
    $125 = (_bitshift64Lshr(($73|0),($76|0),48)|0);
    $126 = (getTempRet0() | 0);
    $127 = $125&255;
    $xor5$6$i402 = $124 ^ $127;
    $128 = $xor5$6$i402&255;
    $129 = (_bitshift64Shl(($128|0),0,48)|0);
    $130 = (getTempRet0() | 0);
    $arrayidx$7$i403 = ((($add$ptr46)) + 7|0);
    $131 = HEAP8[$arrayidx$7$i403>>0]|0;
    $132 = (_bitshift64Lshr(($73|0),($76|0),56)|0);
    $133 = (getTempRet0() | 0);
    $134 = $132&255;
    $xor5$7$i405 = $131 ^ $134;
    $135 = $xor5$7$i405&255;
    $136 = (_bitshift64Shl(($135|0),0,56)|0);
    $137 = (getTempRet0() | 0);
    $138 = $113 | $116;
    $139 = $112 | $122;
    $140 = $138 | $123;
    $141 = $139 | $129;
    $142 = $140 | $130;
    $143 = $141 | $136;
    $144 = $142 | $137;
    $arrayidx48 = ((($state)) + 96|0);
    $145 = $arrayidx48;
    $146 = $145;
    $147 = HEAP32[$146>>2]|0;
    $148 = (($145) + 4)|0;
    $149 = $148;
    $150 = HEAP32[$149>>2]|0;
    $arrayidx51 = ((($state)) + 104|0);
    $151 = $arrayidx51;
    $152 = $151;
    $153 = HEAP32[$152>>2]|0;
    $154 = (($151) + 4)|0;
    $155 = $154;
    $156 = HEAP32[$155>>2]|0;
    $$pre = HEAP32[$aes_ctx>>2]|0;
    $1133 = $143;$1134 = $144;$1135 = $153;$1136 = $156;$1137 = $147;$1138 = $150;$158 = $$pre;$b$sroa$27$sroa$0$sroa$0$0 = $xor5$i133;$b$sroa$27$sroa$0$sroa$10$0 = $xor5$2$i139;$b$sroa$27$sroa$0$sroa$12$0 = $xor5$3$i142;$b$sroa$27$sroa$0$sroa$14$0 = $xor5$4$i145;$b$sroa$27$sroa$0$sroa$16$0 = $xor5$5$i148;$b$sroa$27$sroa$0$sroa$18$0 = $xor5$6$i151;$b$sroa$27$sroa$0$sroa$20$0 = $xor5$7$i154;$b$sroa$27$sroa$0$sroa$8$0 = $xor5$1$i136;$cmp25807 = 1;$tweak1_2$sroa$0$0806 = 0;$tweak1_2$sroa$12$0803 = 0;$tweak1_2$sroa$15$0802 = 0;$tweak1_2$sroa$18$0801 = 0;$tweak1_2$sroa$21$0800 = 0;$tweak1_2$sroa$24$0799 = 0;$tweak1_2$sroa$6$0805 = 0;$tweak1_2$sroa$9$0804 = 0;
   } else {
    $1133 = 0;$1134 = 0;$1135 = 0;$1136 = 0;$1137 = 0;$1138 = 0;$158 = $call5;$b$sroa$27$sroa$0$sroa$0$0 = 0;$b$sroa$27$sroa$0$sroa$10$0 = 0;$b$sroa$27$sroa$0$sroa$12$0 = 0;$b$sroa$27$sroa$0$sroa$14$0 = 0;$b$sroa$27$sroa$0$sroa$16$0 = 0;$b$sroa$27$sroa$0$sroa$18$0 = 0;$b$sroa$27$sroa$0$sroa$20$0 = 0;$b$sroa$27$sroa$0$sroa$8$0 = 0;$cmp25807 = 0;$tweak1_2$sroa$0$0806 = 0;$tweak1_2$sroa$12$0803 = 0;$tweak1_2$sroa$15$0802 = 0;$tweak1_2$sroa$18$0801 = 0;$tweak1_2$sroa$21$0800 = 0;$tweak1_2$sroa$24$0799 = 0;$tweak1_2$sroa$6$0805 = 0;$tweak1_2$sroa$9$0804 = 0;
   }
  }
 } while(0);
 $157 = HEAP32[$158>>2]|0;
 $exp_data = ((($157)) + 12|0);
 $159 = HEAP32[$exp_data>>2]|0;
 $exp_data_len = ((($157)) + 8|0);
 $160 = HEAP32[$exp_data_len>>2]|0;
 _memcpy(($expandedKey|0),($159|0),($160|0))|0;
 $161 = ($6|0)==(0);
 $162 = ($7|0)==(0);
 $163 = $161 & $162;
 if (!($163)) {
  $arrayidx64$1 = ((($text)) + 16|0);
  $arrayidx64$2 = ((($text)) + 32|0);
  $arrayidx64$3 = ((($text)) + 48|0);
  $arrayidx64$4 = ((($text)) + 64|0);
  $arrayidx64$5 = ((($text)) + 80|0);
  $arrayidx64$6 = ((($text)) + 96|0);
  $arrayidx64$7 = ((($text)) + 112|0);
  $i$0843 = 0;
  while(1) {
   _aesb_pseudo_round($text,$text,$expandedKey);
   _aesb_pseudo_round($arrayidx64$1,$arrayidx64$1,$expandedKey);
   _aesb_pseudo_round($arrayidx64$2,$arrayidx64$2,$expandedKey);
   _aesb_pseudo_round($arrayidx64$3,$arrayidx64$3,$expandedKey);
   _aesb_pseudo_round($arrayidx64$4,$arrayidx64$4,$expandedKey);
   _aesb_pseudo_round($arrayidx64$5,$arrayidx64$5,$expandedKey);
   _aesb_pseudo_round($arrayidx64$6,$arrayidx64$6,$expandedKey);
   _aesb_pseudo_round($arrayidx64$7,$arrayidx64$7,$expandedKey);
   $mul68 = $i$0843 << 7;
   $arrayidx69 = (($call) + ($mul68)|0);
   dest=$arrayidx69; src=$text; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $inc72 = (($i$0843) + 1)|0;
   $164 = ($7>>>0)>(0);
   $165 = ($6>>>0)>($inc72>>>0);
   $166 = ($7|0)==(0);
   $167 = $166 & $165;
   $168 = $164 | $167;
   if ($168) {
    $i$0843 = $inc72;
   } else {
    break;
   }
  }
 }
 $169 = $state;
 $170 = $169;
 $171 = HEAP32[$170>>2]|0;
 $172 = (($169) + 4)|0;
 $173 = $172;
 $174 = HEAP32[$173>>2]|0;
 $arrayidx77 = ((($state)) + 32|0);
 $175 = $arrayidx77;
 $176 = $175;
 $177 = HEAP32[$176>>2]|0;
 $178 = (($175) + 4)|0;
 $179 = $178;
 $180 = HEAP32[$179>>2]|0;
 $181 = $177 ^ $171;
 $182 = $180 ^ $174;
 $183 = $a;
 $184 = $183;
 HEAP32[$184>>2] = $181;
 $185 = (($183) + 4)|0;
 $186 = $185;
 HEAP32[$186>>2] = $182;
 $arrayidx83 = ((($state)) + 8|0);
 $187 = $arrayidx83;
 $188 = $187;
 $189 = HEAP32[$188>>2]|0;
 $190 = (($187) + 4)|0;
 $191 = $190;
 $192 = HEAP32[$191>>2]|0;
 $arrayidx86 = ((($state)) + 40|0);
 $193 = $arrayidx86;
 $194 = $193;
 $195 = HEAP32[$194>>2]|0;
 $196 = (($193) + 4)|0;
 $197 = $196;
 $198 = HEAP32[$197>>2]|0;
 $199 = $195 ^ $189;
 $200 = $198 ^ $192;
 $arrayidx89 = ((($a)) + 8|0);
 $201 = $arrayidx89;
 $202 = $201;
 HEAP32[$202>>2] = $199;
 $203 = (($201) + 4)|0;
 $204 = $203;
 HEAP32[$204>>2] = $200;
 $arrayidx91 = ((($state)) + 16|0);
 $205 = $arrayidx91;
 $206 = $205;
 $207 = HEAP32[$206>>2]|0;
 $208 = (($205) + 4)|0;
 $209 = $208;
 $210 = HEAP32[$209>>2]|0;
 $arrayidx94 = ((($state)) + 48|0);
 $211 = $arrayidx94;
 $212 = $211;
 $213 = HEAP32[$212>>2]|0;
 $214 = (($211) + 4)|0;
 $215 = $214;
 $216 = HEAP32[$215>>2]|0;
 $217 = $213 ^ $207;
 $218 = $216 ^ $210;
 $219 = ($8|0)==(0);
 $220 = ($9|0)==(0);
 $221 = $219 & $220;
 L18: do {
  if (!($221)) {
   $arrayidx104 = ((($state)) + 56|0);
   $222 = $arrayidx104;
   $223 = $222;
   $224 = HEAP32[$223>>2]|0;
   $225 = (($222) + 4)|0;
   $226 = $225;
   $227 = HEAP32[$226>>2]|0;
   $arrayidx101 = ((($state)) + 24|0);
   $228 = $arrayidx101;
   $229 = $228;
   $230 = HEAP32[$229>>2]|0;
   $231 = (($228) + 4)|0;
   $232 = $231;
   $233 = HEAP32[$232>>2]|0;
   $234 = $224 ^ $230;
   $235 = $227 ^ $233;
   $236 = (_bitshift64Lshr(($217|0),($218|0),56)|0);
   $237 = (getTempRet0() | 0);
   $238 = $236&255;
   $239 = (_bitshift64Lshr(($217|0),($218|0),48)|0);
   $240 = (getTempRet0() | 0);
   $241 = $239&255;
   $242 = (_bitshift64Lshr(($217|0),($218|0),40)|0);
   $243 = (getTempRet0() | 0);
   $244 = $242&255;
   $245 = $218&255;
   $246 = (_bitshift64Lshr(($217|0),($218|0),24)|0);
   $247 = (getTempRet0() | 0);
   $248 = $246&255;
   $249 = (_bitshift64Lshr(($217|0),($218|0),16)|0);
   $250 = (getTempRet0() | 0);
   $251 = $249&255;
   $252 = (_bitshift64Lshr(($217|0),($218|0),8)|0);
   $253 = (getTempRet0() | 0);
   $254 = $252&255;
   $255 = $217&255;
   $256 = (_bitshift64Lshr(($0|0),($1|0),4)|0);
   $257 = (getTempRet0() | 0);
   $258 = $tobool&1;
   $259 = (_bitshift64Lshr(($256|0),($257|0),($258|0))|0);
   $260 = (getTempRet0() | 0);
   $261 = (_bitshift64Shl(($259|0),($260|0),4)|0);
   $262 = (getTempRet0() | 0);
   $263 = (_i64Add(($261|0),($262|0),-16,-1)|0);
   $264 = (getTempRet0() | 0);
   $arrayidx1$1$i201 = ((($a)) + 1|0);
   $arrayidx1$2$i204 = ((($a)) + 2|0);
   $arrayidx1$3$i207 = ((($a)) + 3|0);
   $arrayidx1$4$i210 = ((($a)) + 4|0);
   $arrayidx1$5$i213 = ((($a)) + 5|0);
   $arrayidx1$6$i216 = ((($a)) + 6|0);
   $arrayidx1$7$i219 = ((($a)) + 7|0);
   $arrayidx1$9$i225 = ((($a)) + 9|0);
   $arrayidx1$10$i228 = ((($a)) + 10|0);
   $arrayidx1$11$i231 = ((($a)) + 11|0);
   $arrayidx1$12$i234 = ((($a)) + 12|0);
   $arrayidx1$13$i237 = ((($a)) + 13|0);
   $arrayidx1$14$i240 = ((($a)) + 14|0);
   $arrayidx1$15$i243 = ((($a)) + 15|0);
   $cmp345 = ($variant|0)>(1);
   $1139 = $1136;$266 = $181;$267 = $182;$344 = $1133;$345 = $1134;$426 = $234;$427 = $235;$505 = $1138;$506 = $1135;$508 = $1137;$b$sroa$0$sroa$0$sroa$0$0825 = $255;$b$sroa$0$sroa$0$sroa$10$0822 = $248;$b$sroa$0$sroa$0$sroa$11$0821 = $245;$b$sroa$0$sroa$0$sroa$12$0820 = $244;$b$sroa$0$sroa$0$sroa$13$0836 = $241;$b$sroa$0$sroa$0$sroa$14$0837 = $238;$b$sroa$0$sroa$0$sroa$8$0824 = $254;$b$sroa$0$sroa$0$sroa$9$0823 = $251;$b$sroa$27$sroa$0$sroa$0$1834 = $b$sroa$27$sroa$0$sroa$0$0;$b$sroa$27$sroa$0$sroa$10$1832 = $b$sroa$27$sroa$0$sroa$10$0;$b$sroa$27$sroa$0$sroa$12$1831 = $b$sroa$27$sroa$0$sroa$12$0;$b$sroa$27$sroa$0$sroa$14$1830 = $b$sroa$27$sroa$0$sroa$14$0;$b$sroa$27$sroa$0$sroa$16$1829 = $b$sroa$27$sroa$0$sroa$16$0;$b$sroa$27$sroa$0$sroa$18$1828 = $b$sroa$27$sroa$0$sroa$18$0;$b$sroa$27$sroa$0$sroa$20$1827 = $b$sroa$27$sroa$0$sroa$20$0;$b$sroa$27$sroa$0$sroa$8$1833 = $b$sroa$27$sroa$0$sroa$8$0;$i$1840 = 0;
   while(1) {
    $265 = $266 & $263;
    $267 & $264;
    $arrayidx118 = (($call) + ($265)|0);
    _aesb_single_round($arrayidx118,$arrayidx118,$a);
    $268 = $arrayidx118;
    $269 = $268;
    $270 = HEAPU8[$269>>0]|(HEAPU8[$269+1>>0]<<8)|(HEAPU8[$269+2>>0]<<16)|(HEAPU8[$269+3>>0]<<24);
    $271 = (($268) + 4)|0;
    $272 = $271;
    $273 = HEAPU8[$272>>0]|(HEAPU8[$272+1>>0]<<8)|(HEAPU8[$272+2>>0]<<16)|(HEAPU8[$272+3>>0]<<24);
    $c1$sroa$7$0$arrayidx118$sroa_idx = ((($arrayidx118)) + 8|0);
    $274 = $c1$sroa$7$0$arrayidx118$sroa_idx;
    $275 = $274;
    $276 = HEAPU8[$275>>0]|(HEAPU8[$275+1>>0]<<8)|(HEAPU8[$275+2>>0]<<16)|(HEAPU8[$275+3>>0]<<24);
    $277 = (($274) + 4)|0;
    $278 = $277;
    $279 = HEAPU8[$278>>0]|(HEAPU8[$278+1>>0]<<8)|(HEAPU8[$278+2>>0]<<16)|(HEAPU8[$278+3>>0]<<24);
    $280 = $270&255;
    $281 = $276&255;
    if ($cmp25807) {
     $xor125 = $265 ^ 16;
     $add$ptr126 = (($call) + ($xor125)|0);
     $xor127 = $265 ^ 32;
     $add$ptr128 = (($call) + ($xor127)|0);
     $xor129 = $265 ^ 48;
     $add$ptr130 = (($call) + ($xor129)|0);
     $282 = $add$ptr126;
     $283 = $282;
     $284 = HEAP32[$283>>2]|0;
     $285 = (($282) + 4)|0;
     $286 = $285;
     $287 = HEAP32[$286>>2]|0;
     $arrayidx132 = ((($add$ptr126)) + 8|0);
     $288 = $arrayidx132;
     $289 = $288;
     $290 = HEAP32[$289>>2]|0;
     $291 = (($288) + 4)|0;
     $292 = $291;
     $293 = HEAP32[$292>>2]|0;
     $294 = $b$sroa$27$sroa$0$sroa$20$1827&255;
     $295 = (_bitshift64Shl(($294|0),0,56)|0);
     $296 = (getTempRet0() | 0);
     $297 = $b$sroa$27$sroa$0$sroa$18$1828&255;
     $298 = (_bitshift64Shl(($297|0),0,48)|0);
     $299 = (getTempRet0() | 0);
     $300 = $298 | $295;
     $301 = $299 | $296;
     $302 = $b$sroa$27$sroa$0$sroa$16$1829&255;
     $303 = (_bitshift64Shl(($302|0),0,40)|0);
     $304 = (getTempRet0() | 0);
     $305 = $300 | $303;
     $306 = $301 | $304;
     $307 = $b$sroa$27$sroa$0$sroa$14$1830&255;
     $308 = $306 | $307;
     $309 = $b$sroa$27$sroa$0$sroa$12$1831&255;
     $310 = (_bitshift64Shl(($309|0),0,24)|0);
     $311 = (getTempRet0() | 0);
     $312 = $305 | $310;
     $313 = $308 | $311;
     $314 = $b$sroa$27$sroa$0$sroa$10$1832&255;
     $315 = (_bitshift64Shl(($314|0),0,16)|0);
     $316 = (getTempRet0() | 0);
     $317 = $b$sroa$27$sroa$0$sroa$8$1833&255;
     $318 = (_bitshift64Shl(($317|0),0,8)|0);
     $319 = (getTempRet0() | 0);
     $320 = $312 | $315;
     $321 = $313 | $316;
     $322 = $b$sroa$27$sroa$0$sroa$0$1834&255;
     $323 = $320 | $318;
     $324 = $321 | $319;
     $325 = $323 | $322;
     $326 = $add$ptr130;
     $327 = $326;
     $328 = HEAP32[$327>>2]|0;
     $329 = (($326) + 4)|0;
     $330 = $329;
     $331 = HEAP32[$330>>2]|0;
     $332 = (_i64Add(($328|0),($331|0),($325|0),($324|0))|0);
     $333 = (getTempRet0() | 0);
     $334 = $add$ptr126;
     $335 = $334;
     HEAP32[$335>>2] = $332;
     $336 = (($334) + 4)|0;
     $337 = $336;
     HEAP32[$337>>2] = $333;
     $arrayidx139 = ((($add$ptr130)) + 8|0);
     $338 = $arrayidx139;
     $339 = $338;
     $340 = HEAP32[$339>>2]|0;
     $341 = (($338) + 4)|0;
     $342 = $341;
     $343 = HEAP32[$342>>2]|0;
     $346 = (_i64Add(($340|0),($343|0),($344|0),($345|0))|0);
     $347 = (getTempRet0() | 0);
     $348 = $arrayidx132;
     $349 = $348;
     HEAP32[$349>>2] = $346;
     $350 = (($348) + 4)|0;
     $351 = $350;
     HEAP32[$351>>2] = $347;
     $352 = $a;
     $353 = $352;
     $354 = HEAP32[$353>>2]|0;
     $355 = (($352) + 4)|0;
     $356 = $355;
     $357 = HEAP32[$356>>2]|0;
     $358 = $arrayidx89;
     $359 = $358;
     $360 = HEAP32[$359>>2]|0;
     $361 = (($358) + 4)|0;
     $362 = $361;
     $363 = HEAP32[$362>>2]|0;
     $364 = $add$ptr128;
     $365 = $364;
     $366 = HEAP32[$365>>2]|0;
     $367 = (($364) + 4)|0;
     $368 = $367;
     $369 = HEAP32[$368>>2]|0;
     $370 = (_i64Add(($366|0),($369|0),($354|0),($357|0))|0);
     $371 = (getTempRet0() | 0);
     $372 = $add$ptr130;
     $373 = $372;
     HEAP32[$373>>2] = $370;
     $374 = (($372) + 4)|0;
     $375 = $374;
     HEAP32[$375>>2] = $371;
     $arrayidx149 = ((($add$ptr128)) + 8|0);
     $376 = $arrayidx149;
     $377 = $376;
     $378 = HEAP32[$377>>2]|0;
     $379 = (($376) + 4)|0;
     $380 = $379;
     $381 = HEAP32[$380>>2]|0;
     $382 = (_i64Add(($378|0),($381|0),($360|0),($363|0))|0);
     $383 = (getTempRet0() | 0);
     $384 = $arrayidx139;
     $385 = $384;
     HEAP32[$385>>2] = $382;
     $386 = (($384) + 4)|0;
     $387 = $386;
     HEAP32[$387>>2] = $383;
     $388 = $b$sroa$0$sroa$0$sroa$14$0837&255;
     $389 = (_bitshift64Shl(($388|0),0,56)|0);
     $390 = (getTempRet0() | 0);
     $391 = $b$sroa$0$sroa$0$sroa$13$0836&255;
     $392 = (_bitshift64Shl(($391|0),0,48)|0);
     $393 = (getTempRet0() | 0);
     $394 = $b$sroa$0$sroa$0$sroa$12$0820&255;
     $395 = (_bitshift64Shl(($394|0),0,40)|0);
     $396 = (getTempRet0() | 0);
     $397 = $b$sroa$0$sroa$0$sroa$11$0821&255;
     $398 = $b$sroa$0$sroa$0$sroa$10$0822&255;
     $399 = (_bitshift64Shl(($398|0),0,24)|0);
     $400 = (getTempRet0() | 0);
     $401 = $b$sroa$0$sroa$0$sroa$9$0823&255;
     $402 = (_bitshift64Shl(($401|0),0,16)|0);
     $403 = (getTempRet0() | 0);
     $404 = $b$sroa$0$sroa$0$sroa$8$0824&255;
     $405 = (_bitshift64Shl(($404|0),0,8)|0);
     $406 = (getTempRet0() | 0);
     $407 = $b$sroa$0$sroa$0$sroa$0$0825&255;
     $408 = $397 | $396;
     $409 = $395 | $399;
     $410 = $408 | $400;
     $411 = $409 | $402;
     $412 = $410 | $403;
     $413 = $411 | $405;
     $414 = $412 | $406;
     $415 = $413 | $407;
     $416 = $415 | $392;
     $417 = $414 | $393;
     $418 = $416 | $389;
     $419 = $417 | $390;
     $420 = (_i64Add(($284|0),($287|0),($418|0),($419|0))|0);
     $421 = (getTempRet0() | 0);
     $422 = $add$ptr128;
     $423 = $422;
     HEAP32[$423>>2] = $420;
     $424 = (($422) + 4)|0;
     $425 = $424;
     HEAP32[$425>>2] = $421;
     $428 = (_i64Add(($290|0),($293|0),($426|0),($427|0))|0);
     $429 = (getTempRet0() | 0);
     $430 = $arrayidx149;
     $431 = $430;
     HEAP32[$431>>2] = $428;
     $432 = (($430) + 4)|0;
     $433 = $432;
     HEAP32[$433>>2] = $429;
     $$pre846 = HEAP8[$arrayidx118>>0]|0;
     $$pre847 = HEAP8[$c1$sroa$7$0$arrayidx118$sroa_idx>>0]|0;
     $434 = $$pre846;$443 = $$pre847;
    } else {
     $434 = $280;$443 = $281;
    }
    $xor5$i338 = $434 ^ $b$sroa$0$sroa$0$sroa$0$0825;
    HEAP8[$arrayidx118>>0] = $xor5$i338;
    $arrayidx1$1$i340 = ((($arrayidx118)) + 1|0);
    $435 = HEAP8[$arrayidx1$1$i340>>0]|0;
    $xor5$1$i341 = $435 ^ $b$sroa$0$sroa$0$sroa$8$0824;
    HEAP8[$arrayidx1$1$i340>>0] = $xor5$1$i341;
    $arrayidx1$2$i343 = ((($arrayidx118)) + 2|0);
    $436 = HEAP8[$arrayidx1$2$i343>>0]|0;
    $xor5$2$i344 = $436 ^ $b$sroa$0$sroa$0$sroa$9$0823;
    HEAP8[$arrayidx1$2$i343>>0] = $xor5$2$i344;
    $arrayidx1$3$i346 = ((($arrayidx118)) + 3|0);
    $437 = HEAP8[$arrayidx1$3$i346>>0]|0;
    $xor5$3$i347 = $437 ^ $b$sroa$0$sroa$0$sroa$10$0822;
    HEAP8[$arrayidx1$3$i346>>0] = $xor5$3$i347;
    $arrayidx1$4$i349 = ((($arrayidx118)) + 4|0);
    $438 = HEAP8[$arrayidx1$4$i349>>0]|0;
    $xor5$4$i350 = $438 ^ $b$sroa$0$sroa$0$sroa$11$0821;
    HEAP8[$arrayidx1$4$i349>>0] = $xor5$4$i350;
    $arrayidx1$5$i352 = ((($arrayidx118)) + 5|0);
    $439 = HEAP8[$arrayidx1$5$i352>>0]|0;
    $xor5$5$i353 = $439 ^ $b$sroa$0$sroa$0$sroa$12$0820;
    HEAP8[$arrayidx1$5$i352>>0] = $xor5$5$i353;
    $arrayidx1$6$i355 = ((($arrayidx118)) + 6|0);
    $440 = HEAP8[$arrayidx1$6$i355>>0]|0;
    $xor5$6$i356 = $440 ^ $b$sroa$0$sroa$0$sroa$13$0836;
    HEAP8[$arrayidx1$6$i355>>0] = $xor5$6$i356;
    $arrayidx1$7$i358 = ((($arrayidx118)) + 7|0);
    $441 = HEAP8[$arrayidx1$7$i358>>0]|0;
    $xor5$7$i359 = $441 ^ $b$sroa$0$sroa$0$sroa$14$0837;
    HEAP8[$arrayidx1$7$i358>>0] = $xor5$7$i359;
    $442 = $426&255;
    $xor5$8$i362 = $443 ^ $442;
    HEAP8[$c1$sroa$7$0$arrayidx118$sroa_idx>>0] = $xor5$8$i362;
    $444 = (_bitshift64Lshr(($426|0),($427|0),8)|0);
    $445 = (getTempRet0() | 0);
    $446 = $444&255;
    $arrayidx1$9$i364 = ((($arrayidx118)) + 9|0);
    $447 = HEAP8[$arrayidx1$9$i364>>0]|0;
    $xor5$9$i365 = $447 ^ $446;
    HEAP8[$arrayidx1$9$i364>>0] = $xor5$9$i365;
    $448 = (_bitshift64Lshr(($426|0),($427|0),16)|0);
    $449 = (getTempRet0() | 0);
    $450 = $448&255;
    $arrayidx1$10$i367 = ((($arrayidx118)) + 10|0);
    $451 = HEAP8[$arrayidx1$10$i367>>0]|0;
    $xor5$10$i368 = $451 ^ $450;
    HEAP8[$arrayidx1$10$i367>>0] = $xor5$10$i368;
    $452 = (_bitshift64Lshr(($426|0),($427|0),24)|0);
    $453 = (getTempRet0() | 0);
    $454 = $452&255;
    $arrayidx1$11$i370 = ((($arrayidx118)) + 11|0);
    $455 = HEAP8[$arrayidx1$11$i370>>0]|0;
    $xor5$11$i371 = $455 ^ $454;
    HEAP8[$arrayidx1$11$i370>>0] = $xor5$11$i371;
    $456 = $427&255;
    $arrayidx1$12$i373 = ((($arrayidx118)) + 12|0);
    $457 = HEAP8[$arrayidx1$12$i373>>0]|0;
    $xor5$12$i374 = $457 ^ $456;
    HEAP8[$arrayidx1$12$i373>>0] = $xor5$12$i374;
    $458 = (_bitshift64Lshr(($426|0),($427|0),40)|0);
    $459 = (getTempRet0() | 0);
    $460 = $458&255;
    $arrayidx1$13$i376 = ((($arrayidx118)) + 13|0);
    $461 = HEAP8[$arrayidx1$13$i376>>0]|0;
    $xor5$13$i377 = $461 ^ $460;
    HEAP8[$arrayidx1$13$i376>>0] = $xor5$13$i377;
    $462 = (_bitshift64Lshr(($426|0),($427|0),48)|0);
    $463 = (getTempRet0() | 0);
    $464 = $462&255;
    $arrayidx1$14$i379 = ((($arrayidx118)) + 14|0);
    $465 = HEAP8[$arrayidx1$14$i379>>0]|0;
    $xor5$14$i380 = $465 ^ $464;
    HEAP8[$arrayidx1$14$i379>>0] = $xor5$14$i380;
    $466 = (_bitshift64Lshr(($426|0),($427|0),56)|0);
    $467 = (getTempRet0() | 0);
    $468 = $466&255;
    $arrayidx1$15$i382 = ((($arrayidx118)) + 15|0);
    $469 = HEAP8[$arrayidx1$15$i382>>0]|0;
    $xor5$15$i383 = $469 ^ $468;
    HEAP8[$arrayidx1$15$i382>>0] = $xor5$15$i383;
    if ($cmp) {
     $conv172 = $xor5$11$i371&255;
     $470 = $conv172 >>> 3;
     $and173 = $470 & 6;
     $and175 = $conv172 & 1;
     $or = $and173 | $and175;
     $shl176 = $or << 1;
     $shr180 = 480016 >>> $shl176;
     $and181 = $shr180 & 48;
     $xor182 = $and181 ^ $conv172;
     $conv183 = $xor182&255;
     HEAP8[$arrayidx1$11$i370>>0] = $conv183;
    }
    $471 = $270 & $263;
    $273 & $264;
    $arrayidx196 = (($call) + ($471)|0);
    $472 = $arrayidx196;
    $473 = $472;
    $474 = HEAPU8[$473>>0]|(HEAPU8[$473+1>>0]<<8)|(HEAPU8[$473+2>>0]<<16)|(HEAPU8[$473+3>>0]<<24);
    $475 = (($472) + 4)|0;
    $476 = $475;
    $477 = HEAPU8[$476>>0]|(HEAPU8[$476+1>>0]<<8)|(HEAPU8[$476+2>>0]<<16)|(HEAPU8[$476+3>>0]<<24);
    $478 = $474&255;
    $479 = (_bitshift64Lshr(($474|0),($477|0),8)|0);
    $480 = (getTempRet0() | 0);
    $481 = $479&255;
    $482 = (_bitshift64Lshr(($474|0),($477|0),16)|0);
    $483 = (getTempRet0() | 0);
    $484 = $482&255;
    $485 = (_bitshift64Lshr(($474|0),($477|0),24)|0);
    $486 = (getTempRet0() | 0);
    $487 = $485&255;
    $488 = $477&255;
    $489 = (_bitshift64Lshr(($474|0),($477|0),40)|0);
    $490 = (getTempRet0() | 0);
    $491 = $489&255;
    $492 = (_bitshift64Lshr(($474|0),($477|0),48)|0);
    $493 = (getTempRet0() | 0);
    $494 = $492&255;
    $495 = (_bitshift64Lshr(($474|0),($477|0),56)|0);
    $496 = (getTempRet0() | 0);
    $497 = $495&255;
    $c$sroa$17$0$arrayidx196$sroa_idx = ((($arrayidx196)) + 8|0);
    $498 = $c$sroa$17$0$arrayidx196$sroa_idx;
    $499 = $498;
    $500 = HEAPU8[$499>>0]|(HEAPU8[$499+1>>0]<<8)|(HEAPU8[$499+2>>0]<<16)|(HEAPU8[$499+3>>0]<<24);
    $501 = (($498) + 4)|0;
    $502 = $501;
    $503 = HEAPU8[$502>>0]|(HEAPU8[$502+1>>0]<<8)|(HEAPU8[$502+2>>0]<<16)|(HEAPU8[$502+3>>0]<<24);
    if ($cmp25807) {
     $504 = $505 ^ $506;
     $507 = $508 ^ $474;
     $509 = $504 ^ $477;
     $510 = $507&255;
     $511 = (_bitshift64Lshr(($507|0),($509|0),8)|0);
     $512 = (getTempRet0() | 0);
     $513 = $511&255;
     $514 = (_bitshift64Lshr(($507|0),($509|0),16)|0);
     $515 = (getTempRet0() | 0);
     $516 = $514&255;
     $517 = (_bitshift64Lshr(($507|0),($509|0),24)|0);
     $518 = (getTempRet0() | 0);
     $519 = $517&255;
     $520 = $509&255;
     $521 = (_bitshift64Lshr(($507|0),($509|0),40)|0);
     $522 = (getTempRet0() | 0);
     $523 = $521&255;
     $524 = (_bitshift64Lshr(($507|0),($509|0),48)|0);
     $525 = (getTempRet0() | 0);
     $526 = $524&255;
     $527 = (_bitshift64Lshr(($507|0),($509|0),56)|0);
     $528 = (getTempRet0() | 0);
     $529 = $527&255;
     $conv212 = $506 << 1;
     $530 = (($conv212) + ($270))|0;
     $conv216 = $530 | -2147483647;
     $531 = (___udivdi3(($276|0),($279|0),($conv216|0),0)|0);
     $532 = (getTempRet0() | 0);
     $533 = (___muldi3(($531|0),($532|0),($conv216|0),0)|0);
     $534 = (getTempRet0() | 0);
     $535 = (_i64Subtract(($276|0),($279|0),($533|0),($534|0))|0);
     $536 = (getTempRet0() | 0);
     $537 = (_i64Add(($531|0),($535|0),($270|0),($273|0))|0);
     $538 = (getTempRet0() | 0);
     $539 = (+($537>>>0)) + (4294967296.0*(+($538>>>0)));
     $add229 = $539 + 1.8446744073709552E+19;
     $540 = (+Math_sqrt((+$add229)));
     $mul230 = $540 * 2.0;
     $sub231 = $mul230 + -8589934592.0;
     $541 = (~~$sub231)>>>0;
     $542 = +Math_abs($sub231) >= 1.0 ? $sub231 > 0.0 ? (~~+Math_min(+Math_floor($sub231 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($sub231 - +(~~$sub231 >>> 0)) / 4294967296.0) >>> 0 : 0;
     $543 = (_bitshift64Lshr(($541|0),($542|0),1)|0);
     $544 = (getTempRet0() | 0);
     $545 = $541 & 1;
     $546 = (_i64Add(($543|0),($544|0),($545|0),0)|0);
     $547 = (getTempRet0() | 0);
     $548 = (___muldi3(($546|0),($547|0),($543|0),($544|0))|0);
     $549 = (getTempRet0() | 0);
     $550 = (_i64Add(($548|0),($549|0),0,($541|0))|0);
     $551 = (getTempRet0() | 0);
     $552 = (_i64Add(($550|0),($551|0),($545|0),0)|0);
     $553 = (getTempRet0() | 0);
     $554 = ($553>>>0)>($538>>>0);
     $555 = ($552>>>0)>($537>>>0);
     $556 = ($553|0)==($538|0);
     $557 = $556 & $555;
     $558 = $554 | $557;
     $cond246 = $558 << 31 >> 31;
     $559 = (_i64Add(($550|0),($551|0),0,1)|0);
     $560 = (getTempRet0() | 0);
     $561 = (_i64Subtract(($537|0),($538|0),($543|0),($544|0))|0);
     $562 = (getTempRet0() | 0);
     $563 = ($560>>>0)<($562>>>0);
     $564 = ($559>>>0)<($561>>>0);
     $565 = ($560|0)==($562|0);
     $566 = $565 & $564;
     $567 = $563 | $566;
     $cond251 = $567&1;
     $add252 = (($cond246) + ($cond251))|0;
     $568 = ($add252|0)<(0);
     $569 = $568 << 31 >> 31;
     $570 = (_i64Add(($add252|0),($569|0),($541|0),($542|0))|0);
     $571 = (getTempRet0() | 0);
     $1140 = $570;$1141 = $571;$1142 = $531;$1143 = $535;$c$sroa$0$sroa$0$0 = $510;$c$sroa$0$sroa$10$0 = $513;$c$sroa$0$sroa$11$0 = $516;$c$sroa$0$sroa$12$0 = $519;$c$sroa$0$sroa$13$0 = $520;$c$sroa$0$sroa$14$0 = $523;$c$sroa$0$sroa$15$0 = $526;$c$sroa$0$sroa$16$0 = $529;
    } else {
     $1140 = $506;$1141 = $1139;$1142 = $508;$1143 = $505;$c$sroa$0$sroa$0$0 = $478;$c$sroa$0$sroa$10$0 = $481;$c$sroa$0$sroa$11$0 = $484;$c$sroa$0$sroa$12$0 = $487;$c$sroa$0$sroa$13$0 = $488;$c$sroa$0$sroa$14$0 = $491;$c$sroa$0$sroa$15$0 = $494;$c$sroa$0$sroa$16$0 = $497;
    }
    $572 = $c$sroa$0$sroa$16$0&255;
    $573 = (_bitshift64Shl(($572|0),0,56)|0);
    $574 = (getTempRet0() | 0);
    $575 = $c$sroa$0$sroa$15$0&255;
    $576 = (_bitshift64Shl(($575|0),0,48)|0);
    $577 = (getTempRet0() | 0);
    $578 = $576 | $573;
    $579 = $577 | $574;
    $580 = $c$sroa$0$sroa$14$0&255;
    $581 = (_bitshift64Shl(($580|0),0,40)|0);
    $582 = (getTempRet0() | 0);
    $583 = $578 | $581;
    $584 = $579 | $582;
    $585 = $c$sroa$0$sroa$13$0&255;
    $586 = $584 | $585;
    $587 = $c$sroa$0$sroa$12$0&255;
    $588 = (_bitshift64Shl(($587|0),0,24)|0);
    $589 = (getTempRet0() | 0);
    $590 = $583 | $588;
    $591 = $586 | $589;
    $592 = $c$sroa$0$sroa$11$0&255;
    $593 = (_bitshift64Shl(($592|0),0,16)|0);
    $594 = (getTempRet0() | 0);
    $595 = $c$sroa$0$sroa$10$0&255;
    $596 = (_bitshift64Shl(($595|0),0,8)|0);
    $597 = (getTempRet0() | 0);
    $598 = $590 | $593;
    $599 = $591 | $594;
    $600 = $c$sroa$0$sroa$0$0&255;
    $601 = $598 | $596;
    $602 = $599 | $597;
    $603 = $601 | $600;
    $604 = (___muldi3(($586|0),0,($273|0),0)|0);
    $605 = (getTempRet0() | 0);
    $606 = (___muldi3(($603|0),0,($273|0),0)|0);
    $607 = (getTempRet0() | 0);
    $608 = (___muldi3(($586|0),0,($270|0),0)|0);
    $609 = (getTempRet0() | 0);
    $610 = (___muldi3(($603|0),0,($270|0),0)|0);
    $611 = (getTempRet0() | 0);
    $612 = (_i64Add(($606|0),($607|0),($608|0),($609|0))|0);
    $613 = (getTempRet0() | 0);
    $614 = ($613>>>0)<($607>>>0);
    $615 = ($612>>>0)<($606>>>0);
    $616 = ($613|0)==($607|0);
    $617 = $616 & $615;
    $618 = $614 | $617;
    $619 = $618&1;
    $620 = (_i64Add(0,($612|0),($610|0),($611|0))|0);
    $621 = (getTempRet0() | 0);
    $622 = ($621>>>0)<($611>>>0);
    $623 = ($620>>>0)<($610>>>0);
    $624 = ($621|0)==($611|0);
    $625 = $624 & $623;
    $626 = $622 | $625;
    $627 = $626&1;
    $628 = (_i64Add(($613|0),0,($604|0),($605|0))|0);
    $629 = (getTempRet0() | 0);
    $630 = (_i64Add(($628|0),($629|0),0,($619|0))|0);
    $631 = (getTempRet0() | 0);
    $632 = (_i64Add(($630|0),($631|0),($627|0),0)|0);
    $633 = (getTempRet0() | 0);
    $634 = $632&255;
    $635 = (_bitshift64Lshr(($632|0),($633|0),8)|0);
    $636 = (getTempRet0() | 0);
    $637 = $635&255;
    $638 = (_bitshift64Lshr(($632|0),($633|0),16)|0);
    $639 = (getTempRet0() | 0);
    $640 = $638&255;
    $641 = (_bitshift64Lshr(($632|0),($633|0),24)|0);
    $642 = (getTempRet0() | 0);
    $643 = $641&255;
    $644 = $633&255;
    $645 = (_bitshift64Lshr(($632|0),($633|0),40)|0);
    $646 = (getTempRet0() | 0);
    $647 = $645&255;
    $648 = (_bitshift64Lshr(($632|0),($633|0),48)|0);
    $649 = (getTempRet0() | 0);
    $650 = $648&255;
    $651 = (_bitshift64Lshr(($632|0),($633|0),56)|0);
    $652 = (getTempRet0() | 0);
    $653 = $651&255;
    if ($cmp25807) {
     $xor266 = $471 ^ 16;
     $add$ptr267 = (($call) + ($xor266)|0);
     $666 = HEAP8[$add$ptr267>>0]|0;
     $xor5$i291 = $666 ^ $634;
     HEAP8[$add$ptr267>>0] = $xor5$i291;
     $arrayidx1$1$i293 = ((($add$ptr267)) + 1|0);
     $667 = HEAP8[$arrayidx1$1$i293>>0]|0;
     $xor5$1$i294 = $667 ^ $637;
     HEAP8[$arrayidx1$1$i293>>0] = $xor5$1$i294;
     $arrayidx1$2$i296 = ((($add$ptr267)) + 2|0);
     $668 = HEAP8[$arrayidx1$2$i296>>0]|0;
     $xor5$2$i297 = $668 ^ $640;
     HEAP8[$arrayidx1$2$i296>>0] = $xor5$2$i297;
     $arrayidx1$3$i299 = ((($add$ptr267)) + 3|0);
     $669 = HEAP8[$arrayidx1$3$i299>>0]|0;
     $xor5$3$i300 = $669 ^ $643;
     HEAP8[$arrayidx1$3$i299>>0] = $xor5$3$i300;
     $arrayidx1$4$i302 = ((($add$ptr267)) + 4|0);
     $670 = HEAP8[$arrayidx1$4$i302>>0]|0;
     $xor5$4$i303 = $670 ^ $644;
     HEAP8[$arrayidx1$4$i302>>0] = $xor5$4$i303;
     $arrayidx1$5$i305 = ((($add$ptr267)) + 5|0);
     $671 = HEAP8[$arrayidx1$5$i305>>0]|0;
     $xor5$5$i306 = $671 ^ $647;
     HEAP8[$arrayidx1$5$i305>>0] = $xor5$5$i306;
     $arrayidx1$6$i308 = ((($add$ptr267)) + 6|0);
     $672 = HEAP8[$arrayidx1$6$i308>>0]|0;
     $xor5$6$i309 = $672 ^ $650;
     HEAP8[$arrayidx1$6$i308>>0] = $xor5$6$i309;
     $arrayidx1$7$i311 = ((($add$ptr267)) + 7|0);
     $673 = HEAP8[$arrayidx1$7$i311>>0]|0;
     $xor5$7$i312 = $673 ^ $653;
     HEAP8[$arrayidx1$7$i311>>0] = $xor5$7$i312;
     $674 = $620&255;
     $arrayidx1$8$i314 = ((($add$ptr267)) + 8|0);
     $675 = HEAP8[$arrayidx1$8$i314>>0]|0;
     $xor5$8$i315 = $675 ^ $674;
     HEAP8[$arrayidx1$8$i314>>0] = $xor5$8$i315;
     $676 = (_bitshift64Lshr(($620|0),($621|0),8)|0);
     $677 = (getTempRet0() | 0);
     $678 = $676&255;
     $arrayidx1$9$i317 = ((($add$ptr267)) + 9|0);
     $679 = HEAP8[$arrayidx1$9$i317>>0]|0;
     $xor5$9$i318 = $679 ^ $678;
     HEAP8[$arrayidx1$9$i317>>0] = $xor5$9$i318;
     $680 = (_bitshift64Lshr(($620|0),($621|0),16)|0);
     $681 = (getTempRet0() | 0);
     $682 = $680&255;
     $arrayidx1$10$i320 = ((($add$ptr267)) + 10|0);
     $683 = HEAP8[$arrayidx1$10$i320>>0]|0;
     $xor5$10$i321 = $683 ^ $682;
     HEAP8[$arrayidx1$10$i320>>0] = $xor5$10$i321;
     $684 = (_bitshift64Lshr(($620|0),($621|0),24)|0);
     $685 = (getTempRet0() | 0);
     $686 = $684&255;
     $arrayidx1$11$i323 = ((($add$ptr267)) + 11|0);
     $687 = HEAP8[$arrayidx1$11$i323>>0]|0;
     $xor5$11$i324 = $687 ^ $686;
     HEAP8[$arrayidx1$11$i323>>0] = $xor5$11$i324;
     $688 = $621&255;
     $arrayidx1$12$i326 = ((($add$ptr267)) + 12|0);
     $689 = HEAP8[$arrayidx1$12$i326>>0]|0;
     $xor5$12$i327 = $689 ^ $688;
     HEAP8[$arrayidx1$12$i326>>0] = $xor5$12$i327;
     $690 = (_bitshift64Lshr(($620|0),($621|0),40)|0);
     $691 = (getTempRet0() | 0);
     $692 = $690&255;
     $arrayidx1$13$i329 = ((($add$ptr267)) + 13|0);
     $693 = HEAP8[$arrayidx1$13$i329>>0]|0;
     $xor5$13$i330 = $693 ^ $692;
     HEAP8[$arrayidx1$13$i329>>0] = $xor5$13$i330;
     $694 = (_bitshift64Lshr(($620|0),($621|0),48)|0);
     $695 = (getTempRet0() | 0);
     $696 = $694&255;
     $arrayidx1$14$i332 = ((($add$ptr267)) + 14|0);
     $697 = HEAP8[$arrayidx1$14$i332>>0]|0;
     $xor5$14$i333 = $697 ^ $696;
     HEAP8[$arrayidx1$14$i332>>0] = $xor5$14$i333;
     $698 = (_bitshift64Lshr(($620|0),($621|0),56)|0);
     $699 = (getTempRet0() | 0);
     $700 = $698&255;
     $arrayidx1$15$i335 = ((($add$ptr267)) + 15|0);
     $701 = HEAP8[$arrayidx1$15$i335>>0]|0;
     $xor5$15$i336 = $701 ^ $700;
     HEAP8[$arrayidx1$15$i335>>0] = $xor5$15$i336;
     $xor270 = $471 ^ 32;
     $add$ptr271 = (($call) + ($xor270)|0);
     $702 = HEAP8[$add$ptr271>>0]|0;
     $xor5$i245 = $702 ^ $634;
     $arrayidx$1$i246 = ((($add$ptr271)) + 1|0);
     $703 = HEAP8[$arrayidx$1$i246>>0]|0;
     $xor5$1$i248 = $703 ^ $637;
     $arrayidx$2$i249 = ((($add$ptr271)) + 2|0);
     $704 = HEAP8[$arrayidx$2$i249>>0]|0;
     $xor5$2$i251 = $704 ^ $640;
     $arrayidx$3$i252 = ((($add$ptr271)) + 3|0);
     $705 = HEAP8[$arrayidx$3$i252>>0]|0;
     $xor5$3$i254 = $705 ^ $643;
     $arrayidx$4$i255 = ((($add$ptr271)) + 4|0);
     $706 = HEAP8[$arrayidx$4$i255>>0]|0;
     $xor5$4$i257 = $706 ^ $644;
     $arrayidx$5$i258 = ((($add$ptr271)) + 5|0);
     $707 = HEAP8[$arrayidx$5$i258>>0]|0;
     $xor5$5$i260 = $707 ^ $647;
     $arrayidx$6$i261 = ((($add$ptr271)) + 6|0);
     $708 = HEAP8[$arrayidx$6$i261>>0]|0;
     $xor5$6$i263 = $708 ^ $650;
     $arrayidx$7$i264 = ((($add$ptr271)) + 7|0);
     $709 = HEAP8[$arrayidx$7$i264>>0]|0;
     $xor5$7$i266 = $709 ^ $653;
     $arrayidx$8$i267 = ((($add$ptr271)) + 8|0);
     $710 = HEAP8[$arrayidx$8$i267>>0]|0;
     $xor5$8$i269 = $710 ^ $674;
     $711 = $xor5$8$i269&255;
     $arrayidx$9$i270 = ((($add$ptr271)) + 9|0);
     $712 = HEAP8[$arrayidx$9$i270>>0]|0;
     $xor5$9$i272 = $712 ^ $678;
     $713 = $xor5$9$i272&255;
     $714 = (_bitshift64Shl(($713|0),0,8)|0);
     $715 = (getTempRet0() | 0);
     $716 = $714 | $711;
     $arrayidx$10$i273 = ((($add$ptr271)) + 10|0);
     $717 = HEAP8[$arrayidx$10$i273>>0]|0;
     $xor5$10$i275 = $717 ^ $682;
     $718 = $xor5$10$i275&255;
     $719 = (_bitshift64Shl(($718|0),0,16)|0);
     $720 = (getTempRet0() | 0);
     $721 = $716 | $719;
     $722 = $715 | $720;
     $arrayidx$11$i276 = ((($add$ptr271)) + 11|0);
     $723 = HEAP8[$arrayidx$11$i276>>0]|0;
     $xor5$11$i278 = $723 ^ $686;
     $724 = $xor5$11$i278&255;
     $725 = (_bitshift64Shl(($724|0),0,24)|0);
     $726 = (getTempRet0() | 0);
     $727 = $721 | $725;
     $728 = $722 | $726;
     $arrayidx$12$i279 = ((($add$ptr271)) + 12|0);
     $729 = HEAP8[$arrayidx$12$i279>>0]|0;
     $xor5$12$i281 = $729 ^ $688;
     $730 = $xor5$12$i281&255;
     $arrayidx$13$i282 = ((($add$ptr271)) + 13|0);
     $731 = HEAP8[$arrayidx$13$i282>>0]|0;
     $xor5$13$i284 = $731 ^ $692;
     $732 = $xor5$13$i284&255;
     $733 = (_bitshift64Shl(($732|0),0,40)|0);
     $734 = (getTempRet0() | 0);
     $arrayidx$14$i285 = ((($add$ptr271)) + 14|0);
     $735 = HEAP8[$arrayidx$14$i285>>0]|0;
     $xor5$14$i287 = $735 ^ $696;
     $736 = $xor5$14$i287&255;
     $737 = (_bitshift64Shl(($736|0),0,48)|0);
     $738 = (getTempRet0() | 0);
     $arrayidx$15$i288 = ((($add$ptr271)) + 15|0);
     $739 = HEAP8[$arrayidx$15$i288>>0]|0;
     $xor5$15$i290 = $739 ^ $700;
     $740 = $xor5$15$i290&255;
     $741 = (_bitshift64Shl(($740|0),0,56)|0);
     $742 = (getTempRet0() | 0);
     $743 = $728 | $730;
     $744 = $727 | $733;
     $745 = $743 | $734;
     $746 = $744 | $737;
     $747 = $745 | $738;
     $748 = $746 | $741;
     $749 = $747 | $742;
     $xor284 = $471 ^ 48;
     $add$ptr285 = (($call) + ($xor284)|0);
     $750 = $add$ptr267;
     $751 = $750;
     $752 = HEAP32[$751>>2]|0;
     $753 = (($750) + 4)|0;
     $754 = $753;
     $755 = HEAP32[$754>>2]|0;
     $756 = $arrayidx1$8$i314;
     $757 = $756;
     $758 = HEAP32[$757>>2]|0;
     $759 = (($756) + 4)|0;
     $760 = $759;
     $761 = HEAP32[$760>>2]|0;
     $762 = $b$sroa$27$sroa$0$sroa$20$1827&255;
     $763 = (_bitshift64Shl(($762|0),0,56)|0);
     $764 = (getTempRet0() | 0);
     $765 = $b$sroa$27$sroa$0$sroa$18$1828&255;
     $766 = (_bitshift64Shl(($765|0),0,48)|0);
     $767 = (getTempRet0() | 0);
     $768 = $766 | $763;
     $769 = $767 | $764;
     $770 = $b$sroa$27$sroa$0$sroa$16$1829&255;
     $771 = (_bitshift64Shl(($770|0),0,40)|0);
     $772 = (getTempRet0() | 0);
     $773 = $768 | $771;
     $774 = $769 | $772;
     $775 = $b$sroa$27$sroa$0$sroa$14$1830&255;
     $776 = $774 | $775;
     $777 = $b$sroa$27$sroa$0$sroa$12$1831&255;
     $778 = (_bitshift64Shl(($777|0),0,24)|0);
     $779 = (getTempRet0() | 0);
     $780 = $773 | $778;
     $781 = $776 | $779;
     $782 = $b$sroa$27$sroa$0$sroa$10$1832&255;
     $783 = (_bitshift64Shl(($782|0),0,16)|0);
     $784 = (getTempRet0() | 0);
     $785 = $b$sroa$27$sroa$0$sroa$8$1833&255;
     $786 = (_bitshift64Shl(($785|0),0,8)|0);
     $787 = (getTempRet0() | 0);
     $788 = $780 | $783;
     $789 = $781 | $784;
     $790 = $b$sroa$27$sroa$0$sroa$0$1834&255;
     $791 = $788 | $786;
     $792 = $789 | $787;
     $793 = $791 | $790;
     $794 = $add$ptr285;
     $795 = $794;
     $796 = HEAP32[$795>>2]|0;
     $797 = (($794) + 4)|0;
     $798 = $797;
     $799 = HEAP32[$798>>2]|0;
     $800 = (_i64Add(($796|0),($799|0),($793|0),($792|0))|0);
     $801 = (getTempRet0() | 0);
     $802 = $add$ptr267;
     $803 = $802;
     HEAP32[$803>>2] = $800;
     $804 = (($802) + 4)|0;
     $805 = $804;
     HEAP32[$805>>2] = $801;
     $arrayidx299 = ((($add$ptr285)) + 8|0);
     $806 = $arrayidx299;
     $807 = $806;
     $808 = HEAP32[$807>>2]|0;
     $809 = (($806) + 4)|0;
     $810 = $809;
     $811 = HEAP32[$810>>2]|0;
     $812 = (_i64Add(($808|0),($811|0),($344|0),($345|0))|0);
     $813 = (getTempRet0() | 0);
     $814 = $arrayidx1$8$i314;
     $815 = $814;
     HEAP32[$815>>2] = $812;
     $816 = (($814) + 4)|0;
     $817 = $816;
     HEAP32[$817>>2] = $813;
     $818 = $a;
     $819 = $818;
     $820 = HEAP32[$819>>2]|0;
     $821 = (($818) + 4)|0;
     $822 = $821;
     $823 = HEAP32[$822>>2]|0;
     $824 = $arrayidx89;
     $825 = $824;
     $826 = HEAP32[$825>>2]|0;
     $827 = (($824) + 4)|0;
     $828 = $827;
     $829 = HEAP32[$828>>2]|0;
     $830 = $add$ptr271;
     $831 = $830;
     $832 = HEAP32[$831>>2]|0;
     $833 = (($830) + 4)|0;
     $834 = $833;
     $835 = HEAP32[$834>>2]|0;
     $836 = (_i64Add(($832|0),($835|0),($820|0),($823|0))|0);
     $837 = (getTempRet0() | 0);
     $838 = $add$ptr285;
     $839 = $838;
     HEAP32[$839>>2] = $836;
     $840 = (($838) + 4)|0;
     $841 = $840;
     HEAP32[$841>>2] = $837;
     $842 = $arrayidx$8$i267;
     $843 = $842;
     $844 = HEAP32[$843>>2]|0;
     $845 = (($842) + 4)|0;
     $846 = $845;
     $847 = HEAP32[$846>>2]|0;
     $848 = (_i64Add(($844|0),($847|0),($826|0),($829|0))|0);
     $849 = (getTempRet0() | 0);
     $850 = $arrayidx299;
     $851 = $850;
     HEAP32[$851>>2] = $848;
     $852 = (($850) + 4)|0;
     $853 = $852;
     HEAP32[$853>>2] = $849;
     $854 = $b$sroa$0$sroa$0$sroa$14$0837&255;
     $855 = (_bitshift64Shl(($854|0),0,56)|0);
     $856 = (getTempRet0() | 0);
     $857 = $b$sroa$0$sroa$0$sroa$13$0836&255;
     $858 = (_bitshift64Shl(($857|0),0,48)|0);
     $859 = (getTempRet0() | 0);
     $860 = $b$sroa$0$sroa$0$sroa$12$0820&255;
     $861 = (_bitshift64Shl(($860|0),0,40)|0);
     $862 = (getTempRet0() | 0);
     $863 = $b$sroa$0$sroa$0$sroa$11$0821&255;
     $864 = $b$sroa$0$sroa$0$sroa$10$0822&255;
     $865 = (_bitshift64Shl(($864|0),0,24)|0);
     $866 = (getTempRet0() | 0);
     $867 = $b$sroa$0$sroa$0$sroa$9$0823&255;
     $868 = (_bitshift64Shl(($867|0),0,16)|0);
     $869 = (getTempRet0() | 0);
     $870 = $b$sroa$0$sroa$0$sroa$8$0824&255;
     $871 = (_bitshift64Shl(($870|0),0,8)|0);
     $872 = (getTempRet0() | 0);
     $873 = $b$sroa$0$sroa$0$sroa$0$0825&255;
     $874 = $863 | $862;
     $875 = $861 | $865;
     $876 = $874 | $866;
     $877 = $875 | $868;
     $878 = $876 | $869;
     $879 = $877 | $871;
     $880 = $878 | $872;
     $881 = $879 | $873;
     $882 = $881 | $858;
     $883 = $880 | $859;
     $884 = $882 | $855;
     $885 = $883 | $856;
     $886 = (_i64Add(($752|0),($755|0),($884|0),($885|0))|0);
     $887 = (getTempRet0() | 0);
     $888 = $add$ptr271;
     $889 = $888;
     HEAP32[$889>>2] = $886;
     $890 = (($888) + 4)|0;
     $891 = $890;
     HEAP32[$891>>2] = $887;
     $892 = (_i64Add(($758|0),($761|0),($426|0),($427|0))|0);
     $893 = (getTempRet0() | 0);
     $894 = $arrayidx$8$i267;
     $895 = $894;
     HEAP32[$895>>2] = $892;
     $896 = (($894) + 4)|0;
     $897 = $896;
     HEAP32[$897>>2] = $893;
     $930 = $820;$931 = $823;$934 = $826;$935 = $829;$936 = $748;$937 = $749;$d$sroa$0$sroa$0$0 = $xor5$i245;$d$sroa$0$sroa$10$0 = $xor5$2$i251;$d$sroa$0$sroa$13$0 = $xor5$3$i254;$d$sroa$0$sroa$16$0 = $xor5$4$i257;$d$sroa$0$sroa$19$0 = $xor5$5$i260;$d$sroa$0$sroa$22$0 = $xor5$6$i263;$d$sroa$0$sroa$25$0 = $xor5$7$i266;$d$sroa$0$sroa$7$0 = $xor5$1$i248;
    } else {
     $654 = $a;
     $655 = $654;
     $656 = HEAP32[$655>>2]|0;
     $657 = (($654) + 4)|0;
     $658 = $657;
     $659 = HEAP32[$658>>2]|0;
     $660 = $arrayidx89;
     $661 = $660;
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + 4)|0;
     $664 = $663;
     $665 = HEAP32[$664>>2]|0;
     $930 = $656;$931 = $659;$934 = $662;$935 = $665;$936 = $620;$937 = $621;$d$sroa$0$sroa$0$0 = $634;$d$sroa$0$sroa$10$0 = $640;$d$sroa$0$sroa$13$0 = $643;$d$sroa$0$sroa$16$0 = $644;$d$sroa$0$sroa$19$0 = $647;$d$sroa$0$sroa$22$0 = $650;$d$sroa$0$sroa$25$0 = $653;$d$sroa$0$sroa$7$0 = $637;
    }
    $898 = $d$sroa$0$sroa$25$0&255;
    $899 = (_bitshift64Shl(($898|0),0,56)|0);
    $900 = (getTempRet0() | 0);
    $901 = $d$sroa$0$sroa$22$0&255;
    $902 = (_bitshift64Shl(($901|0),0,48)|0);
    $903 = (getTempRet0() | 0);
    $904 = $902 | $899;
    $905 = $903 | $900;
    $906 = $d$sroa$0$sroa$19$0&255;
    $907 = (_bitshift64Shl(($906|0),0,40)|0);
    $908 = (getTempRet0() | 0);
    $909 = $904 | $907;
    $910 = $905 | $908;
    $911 = $d$sroa$0$sroa$16$0&255;
    $912 = $910 | $911;
    $913 = $d$sroa$0$sroa$13$0&255;
    $914 = (_bitshift64Shl(($913|0),0,24)|0);
    $915 = (getTempRet0() | 0);
    $916 = $909 | $914;
    $917 = $912 | $915;
    $918 = $d$sroa$0$sroa$10$0&255;
    $919 = (_bitshift64Shl(($918|0),0,16)|0);
    $920 = (getTempRet0() | 0);
    $921 = $d$sroa$0$sroa$7$0&255;
    $922 = (_bitshift64Shl(($921|0),0,8)|0);
    $923 = (getTempRet0() | 0);
    $924 = $916 | $919;
    $925 = $917 | $920;
    $926 = $d$sroa$0$sroa$0$0&255;
    $927 = $924 | $922;
    $928 = $925 | $923;
    $929 = $927 | $926;
    $932 = (_i64Add(($929|0),($928|0),($930|0),($931|0))|0);
    $933 = (getTempRet0() | 0);
    $938 = (_i64Add(($934|0),($935|0),($936|0),($937|0))|0);
    $939 = (getTempRet0() | 0);
    $940 = (_bitshift64Lshr(($932|0),($933|0),40)|0);
    $941 = (getTempRet0() | 0);
    $942 = (_bitshift64Lshr(($932|0),($933|0),48)|0);
    $943 = (getTempRet0() | 0);
    $944 = (_bitshift64Lshr(($932|0),($933|0),56)|0);
    $945 = (getTempRet0() | 0);
    $946 = $944&255;
    $947 = $603 ^ $932;
    $602 ^ $933;
    $948 = $947&255;
    HEAP8[$a>>0] = $948;
    $949 = $601 ^ $932;
    $950 = $602 ^ $933;
    $951 = (_bitshift64Lshr(($949|0),($950|0),8)|0);
    $952 = (getTempRet0() | 0);
    $953 = $951&255;
    HEAP8[$arrayidx1$1$i201>>0] = $953;
    $954 = $598 ^ $932;
    $955 = $599 ^ $933;
    $956 = (_bitshift64Lshr(($954|0),($955|0),16)|0);
    $957 = (getTempRet0() | 0);
    $958 = $956&255;
    HEAP8[$arrayidx1$2$i204>>0] = $958;
    $959 = $590 ^ $932;
    $960 = $591 ^ $933;
    $961 = (_bitshift64Lshr(($959|0),($960|0),24)|0);
    $962 = (getTempRet0() | 0);
    $963 = $961&255;
    HEAP8[$arrayidx1$3$i207>>0] = $963;
    $964 = $933&255;
    $xor5$4$i211 = $c$sroa$0$sroa$13$0 ^ $964;
    HEAP8[$arrayidx1$4$i210>>0] = $xor5$4$i211;
    $965 = $940&255;
    $xor5$5$i214 = $c$sroa$0$sroa$14$0 ^ $965;
    HEAP8[$arrayidx1$5$i213>>0] = $xor5$5$i214;
    $966 = $942&255;
    $xor5$6$i217 = $c$sroa$0$sroa$15$0 ^ $966;
    HEAP8[$arrayidx1$6$i216>>0] = $xor5$6$i217;
    $xor5$7$i220 = $c$sroa$0$sroa$16$0 ^ $946;
    HEAP8[$arrayidx1$7$i219>>0] = $xor5$7$i220;
    $967 = $500 ^ $938;
    $503 ^ $939;
    $968 = $967&255;
    HEAP8[$arrayidx89>>0] = $968;
    $969 = (_bitshift64Lshr(($938|0),($939|0),8)|0);
    $970 = (getTempRet0() | 0);
    $971 = (_bitshift64Lshr(($500|0),($503|0),8)|0);
    $972 = (getTempRet0() | 0);
    $973 = $971 ^ $969;
    $972 ^ $970;
    $974 = $973&255;
    HEAP8[$arrayidx1$9$i225>>0] = $974;
    $975 = (_bitshift64Lshr(($938|0),($939|0),16)|0);
    $976 = (getTempRet0() | 0);
    $977 = (_bitshift64Lshr(($500|0),($503|0),16)|0);
    $978 = (getTempRet0() | 0);
    $979 = $977 ^ $975;
    $978 ^ $976;
    $980 = $979&255;
    HEAP8[$arrayidx1$10$i228>>0] = $980;
    $981 = (_bitshift64Lshr(($938|0),($939|0),24)|0);
    $982 = (getTempRet0() | 0);
    $983 = (_bitshift64Lshr(($500|0),($503|0),24)|0);
    $984 = (getTempRet0() | 0);
    $985 = $983 ^ $981;
    $984 ^ $982;
    $986 = $985&255;
    HEAP8[$arrayidx1$11$i231>>0] = $986;
    $987 = $503 ^ $939;
    $988 = $987&255;
    HEAP8[$arrayidx1$12$i234>>0] = $988;
    $989 = (_bitshift64Lshr(($938|0),($939|0),40)|0);
    $990 = (getTempRet0() | 0);
    $991 = (_bitshift64Lshr(($500|0),($503|0),40)|0);
    $992 = (getTempRet0() | 0);
    $993 = $991 ^ $989;
    $992 ^ $990;
    $994 = $993&255;
    HEAP8[$arrayidx1$13$i237>>0] = $994;
    $995 = (_bitshift64Lshr(($938|0),($939|0),48)|0);
    $996 = (getTempRet0() | 0);
    $997 = (_bitshift64Lshr(($500|0),($503|0),48)|0);
    $998 = (getTempRet0() | 0);
    $999 = $997 ^ $995;
    $998 ^ $996;
    $1000 = $999&255;
    HEAP8[$arrayidx1$14$i240>>0] = $1000;
    $1001 = (_bitshift64Lshr(($938|0),($939|0),56)|0);
    $1002 = (getTempRet0() | 0);
    $1003 = (_bitshift64Lshr(($500|0),($503|0),56)|0);
    $1004 = (getTempRet0() | 0);
    $1005 = $1003 ^ $1001;
    $1004 ^ $1002;
    $1006 = $1005&255;
    HEAP8[$arrayidx1$15$i243>>0] = $1006;
    if ($cmp) {
     $1007 = $1001&255;
     $1008 = $995&255;
     $1009 = $989&255;
     $1010 = $939&255;
     $1011 = $981&255;
     $1012 = $975&255;
     $1013 = $969&255;
     $1014 = $938&255;
     $xor5$i177 = $tweak1_2$sroa$0$0806 ^ $1014;
     $1015 = $xor5$i177&255;
     $xor5$1$i180 = $tweak1_2$sroa$6$0805 ^ $1013;
     $1016 = $xor5$1$i180&255;
     $1017 = (_bitshift64Shl(($1016|0),0,8)|0);
     $1018 = (getTempRet0() | 0);
     $1019 = $1017 | $1015;
     $xor5$2$i183 = $tweak1_2$sroa$9$0804 ^ $1012;
     $1020 = $xor5$2$i183&255;
     $1021 = (_bitshift64Shl(($1020|0),0,16)|0);
     $1022 = (getTempRet0() | 0);
     $1023 = $1019 | $1021;
     $1024 = $1018 | $1022;
     $xor5$3$i186 = $tweak1_2$sroa$12$0803 ^ $1011;
     $1025 = $xor5$3$i186&255;
     $1026 = (_bitshift64Shl(($1025|0),0,24)|0);
     $1027 = (getTempRet0() | 0);
     $1028 = $1023 | $1026;
     $1029 = $1024 | $1027;
     $xor5$4$i189 = $tweak1_2$sroa$15$0802 ^ $1010;
     $1030 = $xor5$4$i189&255;
     $xor5$5$i192 = $tweak1_2$sroa$18$0801 ^ $1009;
     $1031 = $xor5$5$i192&255;
     $1032 = (_bitshift64Shl(($1031|0),0,40)|0);
     $1033 = (getTempRet0() | 0);
     $xor5$6$i195 = $tweak1_2$sroa$21$0800 ^ $1008;
     $1034 = $xor5$6$i195&255;
     $1035 = (_bitshift64Shl(($1034|0),0,48)|0);
     $1036 = (getTempRet0() | 0);
     $xor5$7$i198 = $tweak1_2$sroa$24$0799 ^ $1007;
     $1037 = $xor5$7$i198&255;
     $1038 = (_bitshift64Shl(($1037|0),0,56)|0);
     $1039 = (getTempRet0() | 0);
     $1040 = $1029 | $1030;
     $1041 = $1028 | $1032;
     $1042 = $1040 | $1033;
     $1043 = $1041 | $1035;
     $1044 = $1042 | $1036;
     $1045 = $1043 | $1038;
     $1046 = $1044 | $1039;
     $1053 = $1045;$1056 = $1046;
    } else {
     $1053 = $938;$1056 = $939;
    }
    $1047 = $arrayidx196;
    $1048 = $1047;
    HEAP8[$1048>>0]=$932&255;HEAP8[$1048+1>>0]=($932>>8)&255;HEAP8[$1048+2>>0]=($932>>16)&255;HEAP8[$1048+3>>0]=$932>>24;
    $1049 = (($1047) + 4)|0;
    $1050 = $1049;
    HEAP8[$1050>>0]=$933&255;HEAP8[$1050+1>>0]=($933>>8)&255;HEAP8[$1050+2>>0]=($933>>16)&255;HEAP8[$1050+3>>0]=$933>>24;
    $1051 = $c$sroa$17$0$arrayidx196$sroa_idx;
    $1052 = $1051;
    HEAP8[$1052>>0]=$1053&255;HEAP8[$1052+1>>0]=($1053>>8)&255;HEAP8[$1052+2>>0]=($1053>>16)&255;HEAP8[$1052+3>>0]=$1053>>24;
    $1054 = (($1051) + 4)|0;
    $1055 = $1054;
    HEAP8[$1055>>0]=$1056&255;HEAP8[$1055+1>>0]=($1056>>8)&255;HEAP8[$1055+2>>0]=($1056>>16)&255;HEAP8[$1055+3>>0]=$1056>>24;
    $inc355 = (($i$1840) + 1)|0;
    $1057 = ($9>>>0)>(0);
    $1058 = ($8>>>0)>($inc355>>>0);
    $1059 = ($9|0)==(0);
    $1060 = $1059 & $1058;
    $1061 = $1057 | $1060;
    if (!($1061)) {
     break L18;
    }
    $1062 = (_bitshift64Lshr(($270|0),($273|0),56)|0);
    $1063 = (getTempRet0() | 0);
    $1064 = $1062&255;
    $1065 = (_bitshift64Lshr(($270|0),($273|0),48)|0);
    $1066 = (getTempRet0() | 0);
    $1067 = $1065&255;
    $1068 = (_bitshift64Lshr(($270|0),($273|0),40)|0);
    $1069 = (getTempRet0() | 0);
    $1070 = $1068&255;
    $1071 = $273&255;
    $1072 = (_bitshift64Lshr(($270|0),($273|0),24)|0);
    $1073 = (getTempRet0() | 0);
    $1074 = $1072&255;
    $1075 = (_bitshift64Lshr(($270|0),($273|0),16)|0);
    $1076 = (getTempRet0() | 0);
    $1077 = $1075&255;
    $1078 = (_bitshift64Lshr(($270|0),($273|0),8)|0);
    $1079 = (getTempRet0() | 0);
    $1080 = $1078&255;
    $1081 = $cmp345 ? $426 : $344;
    $1082 = $cmp345 ? $427 : $345;
    $spec$select814 = $cmp345 ? $b$sroa$0$sroa$0$sroa$0$0825 : $b$sroa$27$sroa$0$sroa$0$1834;
    $spec$select813 = $cmp345 ? $b$sroa$0$sroa$0$sroa$8$0824 : $b$sroa$27$sroa$0$sroa$8$1833;
    $spec$select812 = $cmp345 ? $b$sroa$0$sroa$0$sroa$9$0823 : $b$sroa$27$sroa$0$sroa$10$1832;
    $spec$select811 = $cmp345 ? $b$sroa$0$sroa$0$sroa$10$0822 : $b$sroa$27$sroa$0$sroa$12$1831;
    $spec$select810 = $cmp345 ? $b$sroa$0$sroa$0$sroa$11$0821 : $b$sroa$27$sroa$0$sroa$14$1830;
    $spec$select809 = $cmp345 ? $b$sroa$0$sroa$0$sroa$12$0820 : $b$sroa$27$sroa$0$sroa$16$1829;
    $spec$select808 = $cmp345 ? $b$sroa$0$sroa$0$sroa$13$0836 : $b$sroa$27$sroa$0$sroa$18$1828;
    $spec$select = $cmp345 ? $b$sroa$0$sroa$0$sroa$14$0837 : $b$sroa$27$sroa$0$sroa$20$1827;
    $1083 = $a;
    $1084 = $1083;
    $1085 = HEAP32[$1084>>2]|0;
    $1086 = (($1083) + 4)|0;
    $1087 = $1086;
    $1088 = HEAP32[$1087>>2]|0;
    $1139 = $1141;$266 = $1085;$267 = $1088;$344 = $1081;$345 = $1082;$426 = $276;$427 = $279;$505 = $1143;$506 = $1140;$508 = $1142;$b$sroa$0$sroa$0$sroa$0$0825 = $280;$b$sroa$0$sroa$0$sroa$10$0822 = $1074;$b$sroa$0$sroa$0$sroa$11$0821 = $1071;$b$sroa$0$sroa$0$sroa$12$0820 = $1070;$b$sroa$0$sroa$0$sroa$13$0836 = $1067;$b$sroa$0$sroa$0$sroa$14$0837 = $1064;$b$sroa$0$sroa$0$sroa$8$0824 = $1080;$b$sroa$0$sroa$0$sroa$9$0823 = $1077;$b$sroa$27$sroa$0$sroa$0$1834 = $spec$select814;$b$sroa$27$sroa$0$sroa$10$1832 = $spec$select812;$b$sroa$27$sroa$0$sroa$12$1831 = $spec$select811;$b$sroa$27$sroa$0$sroa$14$1830 = $spec$select810;$b$sroa$27$sroa$0$sroa$16$1829 = $spec$select809;$b$sroa$27$sroa$0$sroa$18$1828 = $spec$select808;$b$sroa$27$sroa$0$sroa$20$1827 = $spec$select;$b$sroa$27$sroa$0$sroa$8$1833 = $spec$select813;$i$1840 = $inc355;
   }
  }
 } while(0);
 dest=$text; src=$init; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $1089 = HEAP32[$aes_ctx>>2]|0;
 (_oaes_key_import_data($1089,$arrayidx77,32)|0);
 $1090 = HEAP32[$1089>>2]|0;
 $exp_data366 = ((($1090)) + 12|0);
 $1091 = HEAP32[$exp_data366>>2]|0;
 $exp_data_len368 = ((($1090)) + 8|0);
 $1092 = HEAP32[$exp_data_len368>>2]|0;
 _memcpy(($expandedKey|0),($1091|0),($1092|0))|0;
 if ($163) {
  (_oaes_free($aes_ctx)|0);
  dest=$init; src=$text; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  _hash_permutation($state);
  $1130 = HEAP8[$state>>0]|0;
  $1131 = $1130 & 3;
  $and404 = $1131&255;
  $arrayidx405 = (32672 + ($and404<<2)|0);
  $1132 = HEAP32[$arrayidx405>>2]|0;
  FUNCTION_TABLE_viii[$1132 & 15]($state,200,$hash);
  (_oaes_free($aes_ctx)|0);
  _free($call);
  STACKTOP = sp;return;
 }
 $i$2818 = 0;
 while(1) {
  $mul380 = $i$2818 << 7;
  $j$1816 = 0;
  while(1) {
   $mul378 = $j$1816 << 4;
   $arrayidx379 = (($text) + ($mul378)|0);
   $add382 = (($mul378) + ($mul380))|0;
   $arrayidx383 = (($call) + ($add382)|0);
   $1093 = HEAP8[$arrayidx383>>0]|0;
   $1094 = HEAP8[$arrayidx379>>0]|0;
   $xor5$i155 = $1094 ^ $1093;
   HEAP8[$arrayidx379>>0] = $xor5$i155;
   $arrayidx$1$i156 = ((($arrayidx383)) + 1|0);
   $1095 = HEAP8[$arrayidx$1$i156>>0]|0;
   $arrayidx1$1$i157 = ((($arrayidx379)) + 1|0);
   $1096 = HEAP8[$arrayidx1$1$i157>>0]|0;
   $xor5$1$i158 = $1096 ^ $1095;
   HEAP8[$arrayidx1$1$i157>>0] = $xor5$1$i158;
   $arrayidx$2$i159 = ((($arrayidx383)) + 2|0);
   $1097 = HEAP8[$arrayidx$2$i159>>0]|0;
   $arrayidx1$2$i160 = ((($arrayidx379)) + 2|0);
   $1098 = HEAP8[$arrayidx1$2$i160>>0]|0;
   $xor5$2$i161 = $1098 ^ $1097;
   HEAP8[$arrayidx1$2$i160>>0] = $xor5$2$i161;
   $arrayidx$3$i162 = ((($arrayidx383)) + 3|0);
   $1099 = HEAP8[$arrayidx$3$i162>>0]|0;
   $arrayidx1$3$i163 = ((($arrayidx379)) + 3|0);
   $1100 = HEAP8[$arrayidx1$3$i163>>0]|0;
   $xor5$3$i164 = $1100 ^ $1099;
   HEAP8[$arrayidx1$3$i163>>0] = $xor5$3$i164;
   $arrayidx$4$i165 = ((($arrayidx383)) + 4|0);
   $1101 = HEAP8[$arrayidx$4$i165>>0]|0;
   $arrayidx1$4$i166 = ((($arrayidx379)) + 4|0);
   $1102 = HEAP8[$arrayidx1$4$i166>>0]|0;
   $xor5$4$i167 = $1102 ^ $1101;
   HEAP8[$arrayidx1$4$i166>>0] = $xor5$4$i167;
   $arrayidx$5$i168 = ((($arrayidx383)) + 5|0);
   $1103 = HEAP8[$arrayidx$5$i168>>0]|0;
   $arrayidx1$5$i169 = ((($arrayidx379)) + 5|0);
   $1104 = HEAP8[$arrayidx1$5$i169>>0]|0;
   $xor5$5$i170 = $1104 ^ $1103;
   HEAP8[$arrayidx1$5$i169>>0] = $xor5$5$i170;
   $arrayidx$6$i171 = ((($arrayidx383)) + 6|0);
   $1105 = HEAP8[$arrayidx$6$i171>>0]|0;
   $arrayidx1$6$i172 = ((($arrayidx379)) + 6|0);
   $1106 = HEAP8[$arrayidx1$6$i172>>0]|0;
   $xor5$6$i173 = $1106 ^ $1105;
   HEAP8[$arrayidx1$6$i172>>0] = $xor5$6$i173;
   $arrayidx$7$i174 = ((($arrayidx383)) + 7|0);
   $1107 = HEAP8[$arrayidx$7$i174>>0]|0;
   $arrayidx1$7$i175 = ((($arrayidx379)) + 7|0);
   $1108 = HEAP8[$arrayidx1$7$i175>>0]|0;
   $xor5$7$i176 = $1108 ^ $1107;
   HEAP8[$arrayidx1$7$i175>>0] = $xor5$7$i176;
   $arrayidx$8$i = ((($arrayidx383)) + 8|0);
   $1109 = HEAP8[$arrayidx$8$i>>0]|0;
   $arrayidx1$8$i = ((($arrayidx379)) + 8|0);
   $1110 = HEAP8[$arrayidx1$8$i>>0]|0;
   $xor5$8$i = $1110 ^ $1109;
   HEAP8[$arrayidx1$8$i>>0] = $xor5$8$i;
   $arrayidx$9$i = ((($arrayidx383)) + 9|0);
   $1111 = HEAP8[$arrayidx$9$i>>0]|0;
   $arrayidx1$9$i = ((($arrayidx379)) + 9|0);
   $1112 = HEAP8[$arrayidx1$9$i>>0]|0;
   $xor5$9$i = $1112 ^ $1111;
   HEAP8[$arrayidx1$9$i>>0] = $xor5$9$i;
   $arrayidx$10$i = ((($arrayidx383)) + 10|0);
   $1113 = HEAP8[$arrayidx$10$i>>0]|0;
   $arrayidx1$10$i = ((($arrayidx379)) + 10|0);
   $1114 = HEAP8[$arrayidx1$10$i>>0]|0;
   $xor5$10$i = $1114 ^ $1113;
   HEAP8[$arrayidx1$10$i>>0] = $xor5$10$i;
   $arrayidx$11$i = ((($arrayidx383)) + 11|0);
   $1115 = HEAP8[$arrayidx$11$i>>0]|0;
   $arrayidx1$11$i = ((($arrayidx379)) + 11|0);
   $1116 = HEAP8[$arrayidx1$11$i>>0]|0;
   $xor5$11$i = $1116 ^ $1115;
   HEAP8[$arrayidx1$11$i>>0] = $xor5$11$i;
   $arrayidx$12$i = ((($arrayidx383)) + 12|0);
   $1117 = HEAP8[$arrayidx$12$i>>0]|0;
   $arrayidx1$12$i = ((($arrayidx379)) + 12|0);
   $1118 = HEAP8[$arrayidx1$12$i>>0]|0;
   $xor5$12$i = $1118 ^ $1117;
   HEAP8[$arrayidx1$12$i>>0] = $xor5$12$i;
   $arrayidx$13$i = ((($arrayidx383)) + 13|0);
   $1119 = HEAP8[$arrayidx$13$i>>0]|0;
   $arrayidx1$13$i = ((($arrayidx379)) + 13|0);
   $1120 = HEAP8[$arrayidx1$13$i>>0]|0;
   $xor5$13$i = $1120 ^ $1119;
   HEAP8[$arrayidx1$13$i>>0] = $xor5$13$i;
   $arrayidx$14$i = ((($arrayidx383)) + 14|0);
   $1121 = HEAP8[$arrayidx$14$i>>0]|0;
   $arrayidx1$14$i = ((($arrayidx379)) + 14|0);
   $1122 = HEAP8[$arrayidx1$14$i>>0]|0;
   $xor5$14$i = $1122 ^ $1121;
   HEAP8[$arrayidx1$14$i>>0] = $xor5$14$i;
   $arrayidx$15$i = ((($arrayidx383)) + 15|0);
   $1123 = HEAP8[$arrayidx$15$i>>0]|0;
   $arrayidx1$15$i = ((($arrayidx379)) + 15|0);
   $1124 = HEAP8[$arrayidx1$15$i>>0]|0;
   $xor5$15$i = $1124 ^ $1123;
   HEAP8[$arrayidx1$15$i>>0] = $xor5$15$i;
   _aesb_pseudo_round($arrayidx379,$arrayidx379,$expandedKey);
   $inc390 = (($j$1816) + 1)|0;
   $exitcond = ($inc390|0)==(8);
   if ($exitcond) {
    break;
   } else {
    $j$1816 = $inc390;
   }
  }
  $inc393 = (($i$2818) + 1)|0;
  $1125 = ($7>>>0)>(0);
  $1126 = ($6>>>0)>($inc393>>>0);
  $1127 = ($7|0)==(0);
  $1128 = $1127 & $1126;
  $1129 = $1125 | $1128;
  if ($1129) {
   $i$2818 = $inc393;
  } else {
   break;
  }
 }
 (_oaes_free($aes_ctx)|0);
 dest=$init; src=$text; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _hash_permutation($state);
 $1130 = HEAP8[$state>>0]|0;
 $1131 = $1130 & 3;
 $and404 = $1131&255;
 $arrayidx405 = (32672 + ($and404<<2)|0);
 $1132 = HEAP32[$arrayidx405>>2]|0;
 FUNCTION_TABLE_viii[$1132 & 15]($state,200,$hash);
 (_oaes_free($aes_ctx)|0);
 _free($call);
 STACKTOP = sp;return;
}
function __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($text,$data,$0,$1,$size) {
 $text = $text|0;
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 $size = $size|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr$i = 0, $add$ptr$i35 = 0, $and = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i22 = 0, $cmp = 0, $cmp$i = 0, $cmp$i23 = 0;
 var $cmp871 = 0, $cond$i = 0, $cond$i$i$i34 = 0, $cond$i44 = 0, $conv$i$i = 0, $conv$i$i42 = 0, $conv15 = 0, $conv20 = 0, $conv2259 = 0, $conv23 = 0, $conv9 = 0, $idxprom$i = 0, $idxprom$i21 = 0, $or60 = 0, $retval$4 = 0, $shl21 = 0, $shr = 0, $shr6 = 0, $tobool$i$i = 0, $tobool$i$i39 = 0;
 var $tobool$i$i3973 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i = ((($text)) + 11|0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 $__size_$i3$i = ((($text)) + 4|0);
 $3 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $2&255;
 $cond$i = $tobool$i$i ? $3 : $conv$i$i;
 $and = $cond$i & 1;
 $cmp = ($and|0)==(0);
 if (!($cmp)) {
  $retval$4 = 0;
  return ($retval$4|0);
 }
 $shr = $cond$i >>> 1;
 $4 = (0)>($1>>>0);
 $5 = ($shr>>>0)>($0>>>0);
 $6 = (0)==($1|0);
 $7 = $6 & $5;
 $8 = $4 | $7;
 if ($8) {
  $retval$4 = 0;
  return ($retval$4|0);
 }
 $cmp871 = ($cond$i>>>0)>(1);
 L7: do {
  if ($cmp871) {
   $15 = 0;$9 = 0;$tobool$i$i3973 = $tobool$i$i;
   while(1) {
    $conv9 = $9 << 1;
    $10 = HEAP32[$text>>2]|0;
    $cond$i$i$i34 = $tobool$i$i3973 ? $10 : $text;
    $add$ptr$i35 = (($cond$i$i$i34) + ($conv9)|0);
    $11 = HEAP8[$add$ptr$i35>>0]|0;
    $idxprom$i21 = $11&255;
    $arrayidx$i22 = (32688 + ($idxprom$i21)|0);
    $12 = HEAP8[$arrayidx$i22>>0]|0;
    $cmp$i23 = ($12&255)>(15);
    if ($cmp$i23) {
     $retval$4 = 0;
     label = 9;
     break;
    }
    $conv15 = $conv9 | 1;
    $add$ptr$i = (($cond$i$i$i34) + ($conv15)|0);
    $13 = HEAP8[$add$ptr$i>>0]|0;
    $idxprom$i = $13&255;
    $arrayidx$i = (32688 + ($idxprom$i)|0);
    $14 = HEAP8[$arrayidx$i>>0]|0;
    $cmp$i = ($14&255)>(15);
    if ($cmp$i) {
     $retval$4 = 0;
     label = 9;
     break;
    }
    $conv20 = $12&255;
    $shl21 = $conv20 << 4;
    $conv2259 = $14&255;
    $or60 = $shl21 | $conv2259;
    $conv23 = $or60&255;
    $arrayidx = (($data) + ($9)|0);
    HEAP8[$arrayidx>>0] = $conv23;
    $16 = (_i64Add(($9|0),($15|0),1,0)|0);
    $17 = (getTempRet0() | 0);
    $18 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i39 = ($18<<24>>24)<(0);
    $19 = HEAP32[$__size_$i3$i>>2]|0;
    $conv$i$i42 = $18&255;
    $cond$i44 = $tobool$i$i39 ? $19 : $conv$i$i42;
    $shr6 = $cond$i44 >>> 1;
    $20 = ($17>>>0)<(0);
    $21 = ($16>>>0)<($shr6>>>0);
    $22 = ($17|0)==(0);
    $23 = $22 & $21;
    $24 = $20 | $23;
    if ($24) {
     $15 = $17;$9 = $16;$tobool$i$i3973 = $tobool$i$i39;
    } else {
     $27 = $shr6;$30 = 0;
     break L7;
    }
   }
   if ((label|0) == 9) {
    return ($retval$4|0);
   }
  } else {
   $27 = $shr;$30 = 0;
  }
 } while(0);
 $25 = $size;
 $26 = $25;
 HEAP32[$26>>2] = $27;
 $28 = (($25) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = $30;
 $retval$4 = 1;
 return ($retval$4|0);
}
function __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($agg$result,$text) {
 $agg$result = $agg$result|0;
 $text = $text|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__value_$i$i$i$i = 0;
 var $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i46 = 0, $and = 0, $arrayidx$i = 0, $arrayidx$i20 = 0, $arrayidx$i28 = 0, $call$i$i$i$i8$i = 0, $cmp = 0, $cmp$i21 = 0, $cmp$i23 = 0, $cmp$i29 = 0, $cmp350 = 0, $cond$i = 0, $cond$i$i$i = 0, $conv$i$i = 0, $conv12 = 0, $conv16 = 0, $conv17 = 0, $conv4 = 0;
 var $conv9 = 0, $exception = 0, $exception$i = 0, $exception$i30 = 0, $idxprom$i = 0, $idxprom$i27 = 0, $or = 0, $shl10 = 0, $shr = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i = ((($text)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__size_$i3$i = ((($text)) + 4|0);
 $1 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $0&255;
 $cond$i = $tobool$i$i ? $1 : $conv$i$i;
 $and = $cond$i & 1;
 $cmp = ($and|0)==(0);
 if (!($cmp)) {
  $exception = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($exception,45793);
  ___cxa_throw(($exception|0),(43272|0),(8|0));
  // unreachable;
 }
 $shr = $cond$i >>> 1;
 HEAP32[$agg$result>>2] = 0;
 $__end_$i$i = ((($agg$result)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($agg$result)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $cmp$i23 = ($shr|0)==(0);
 if ($cmp$i23) {
  return;
 }
 $call$i$i$i$i8$i = (__Znwm($shr)|0);
 HEAP32[$agg$result>>2] = $call$i$i$i$i8$i;
 $add$ptr$i$i = (($call$i$i$i$i8$i) + ($shr)|0);
 HEAP32[$__value_$i$i$i$i>>2] = $add$ptr$i$i;
 _memset(($call$i$i$i$i8$i|0),0,($shr|0))|0;
 HEAP32[$__end_$i$i>>2] = $add$ptr$i$i;
 $cmp350 = ($add$ptr$i$i|0)==($call$i$i$i$i8$i|0);
 if ($cmp350) {
  return;
 }
 $$pre = HEAP32[$text>>2]|0;
 $cond$i$i$i = $tobool$i$i ? $$pre : $text;
 $2 = 0;$7 = 0;
 while(1) {
  $conv4 = $2 << 1;
  $add$ptr$i = (($cond$i$i$i) + ($conv4)|0);
  $3 = HEAP8[$add$ptr$i>>0]|0;
  $idxprom$i27 = $3&255;
  $arrayidx$i28 = (32688 + ($idxprom$i27)|0);
  $4 = HEAP8[$arrayidx$i28>>0]|0;
  $cmp$i29 = ($4&255)>(15);
  if ($cmp$i29) {
   label = 7;
   break;
  }
  $conv12 = $conv4 | 1;
  $add$ptr$i46 = (($cond$i$i$i) + ($conv12)|0);
  $5 = HEAP8[$add$ptr$i46>>0]|0;
  $idxprom$i = $5&255;
  $arrayidx$i20 = (32688 + ($idxprom$i)|0);
  $6 = HEAP8[$arrayidx$i20>>0]|0;
  $cmp$i21 = ($6&255)>(15);
  if ($cmp$i21) {
   label = 9;
   break;
  }
  $conv9 = $4&255;
  $shl10 = $conv9 << 4;
  $conv16 = $6&255;
  $or = $shl10 | $conv16;
  $conv17 = $or&255;
  $arrayidx$i = (($call$i$i$i$i8$i) + ($2)|0);
  HEAP8[$arrayidx$i>>0] = $conv17;
  $8 = (_i64Add(($2|0),($7|0),1,0)|0);
  $9 = (getTempRet0() | 0);
  $10 = ($9>>>0)<(0);
  $11 = ($8>>>0)<($shr>>>0);
  $12 = ($9|0)==(0);
  $13 = $12 & $11;
  $14 = $10 | $13;
  if ($14) {
   $2 = $8;$7 = $9;
  } else {
   label = 11;
   break;
  }
 }
 if ((label|0) == 7) {
  $exception$i30 = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($exception$i30,45766);
  ___cxa_throw(($exception$i30|0),(43272|0),(8|0));
  // unreachable;
 }
 else if ((label|0) == 9) {
  $exception$i = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($exception$i,45766);
  ___cxa_throw(($exception$i|0),(43272|0),(8|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  return;
 }
}
function __ZN6Common5toHexEPKvy($agg$result,$data,$0,$1) {
 $agg$result = $agg$result|0;
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0;
 var $arrayidx1 = 0, $arrayidx5 = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  return;
 }
 $12 = 0;$5 = 0;
 while(1) {
  $arrayidx = (($data) + ($5)|0);
  $6 = HEAP8[$arrayidx>>0]|0;
  $conv = $6&255;
  $7 = $conv >>> 4;
  $arrayidx1 = (45822 + ($7)|0);
  $8 = HEAP8[$arrayidx1>>0]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result,$8);
  $9 = HEAP8[$arrayidx>>0]|0;
  $10 = $9 & 15;
  $and = $10&255;
  $arrayidx5 = (45822 + ($and)|0);
  $11 = HEAP8[$arrayidx5>>0]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result,$11);
  $13 = (_i64Add(($5|0),($12|0),1,0)|0);
  $14 = (getTempRet0() | 0);
  $15 = ($14>>>0)<($1>>>0);
  $16 = ($13>>>0)<($0>>>0);
  $17 = ($14|0)==($1|0);
  $18 = $17 & $16;
  $19 = $15 | $18;
  if ($19) {
   $12 = $14;$5 = $13;
  } else {
   break;
  }
 }
 return;
}
function _tree_hash($hashes,$count,$root_hash) {
 $hashes = $hashes|0;
 $count = $count|0;
 $root_hash = $root_hash|0;
 var $$alloca_mul = 0, $0 = 0, $add = 0, $add30 = 0, $and = 0, $arraydecay = 0, $arraydecay17 = 0, $arraydecay26 = 0, $arraydecay28 = 0, $cmp1445 = 0, $cmp20 = 0, $cmp2043 = 0, $cmp2340 = 0, $cnt$144 = 0, $exitcond = 0, $exitcond50 = 0, $i$147 = 0, $i$242 = 0, $inc = 0, $inc31 = 0;
 var $j$046 = 0, $j$141 = 0, $mul = 0, $mul6 = 0, $mul8 = 0, $neg = 0, $or = 0, $or$1 = 0, $or$2 = 0, $or$3 = 0, $or$4 = 0, $shr = 0, $shr$1 = 0, $shr$2 = 0, $shr$3 = 0, $shr$4 = 0, $shr21 = 0, $shr5 = 0, $sub = 0, $sub7 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 switch ($count|0) {
 case 1:  {
  dest=$root_hash; src=$hashes; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  _cn_fast_hash($hashes,64,$root_hash);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $sub = (($count) + -1)|0;
  $shr = $sub >>> 1;
  $or = $shr | $sub;
  $shr$1 = $or >>> 2;
  $or$1 = $shr$1 | $or;
  $shr$2 = $or$1 >>> 4;
  $or$2 = $shr$2 | $or$1;
  $shr$3 = $or$2 >>> 8;
  $or$3 = $shr$3 | $or$2;
  $shr$4 = $or$3 >>> 16;
  $or$4 = $shr$4 | $or$3;
  $shr5 = $or$4 >>> 1;
  $neg = $shr5 ^ -1;
  $and = $or$4 & $neg;
  $mul = $and << 5;
  $$alloca_mul = $mul;
  $0 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
  $mul6 = $and << 1;
  $sub7 = (($mul6) - ($count))|0;
  $mul8 = $sub7 << 5;
  _memcpy(($0|0),($hashes|0),($mul8|0))|0;
  $cmp1445 = ($sub7>>>0)<($and>>>0);
  if ($cmp1445) {
   $i$147 = $sub7;$j$046 = $sub7;
   while(1) {
    $arraydecay = (($hashes) + ($i$147<<5)|0);
    $arraydecay17 = (($0) + ($j$046<<5)|0);
    _cn_fast_hash($arraydecay,64,$arraydecay17);
    $add = (($i$147) + 2)|0;
    $inc = (($j$046) + 1)|0;
    $exitcond50 = ($inc|0)==($and|0);
    if ($exitcond50) {
     break;
    } else {
     $i$147 = $add;$j$046 = $inc;
    }
   }
  }
  $cmp2043 = ($and>>>0)>(2);
  if ($cmp2043) {
   $cnt$144 = $and;
   while(1) {
    $shr21 = $cnt$144 >>> 1;
    $cmp2340 = ($shr21|0)==(0);
    if (!($cmp2340)) {
     $i$242 = 0;$j$141 = 0;
     while(1) {
      $arraydecay26 = (($0) + ($i$242<<5)|0);
      $arraydecay28 = (($0) + ($j$141<<5)|0);
      _cn_fast_hash($arraydecay26,64,$arraydecay28);
      $add30 = (($i$242) + 2)|0;
      $inc31 = (($j$141) + 1)|0;
      $exitcond = ($inc31|0)==($shr21|0);
      if ($exitcond) {
       break;
      } else {
       $i$242 = $add30;$j$141 = $inc31;
      }
     }
    }
    $cmp20 = ($cnt$144>>>0)>(5);
    if ($cmp20) {
     $cnt$144 = $shr21;
    } else {
     break;
    }
   }
  }
  _cn_fast_hash($0,64,$root_hash);
  STACKTOP = sp;return;
 }
 }
}
function _tree_branch($hashes,$count,$branch) {
 $hashes = $hashes|0;
 $count = $count|0;
 $branch = $branch|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $add = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add19 = 0, $add36 = 0, $arraydecay = 0, $arraydecay17 = 0, $arraydecay24 = 0, $arraydecay32 = 0, $arraydecay34 = 0, $cmp1 = 0, $cmp1$1 = 0, $cmp1$2 = 0, $cmp1$3 = 0, $cmp1$4 = 0;
 var $cmp1444 = 0, $cmp21 = 0, $cmp2141 = 0, $cmp2938 = 0, $cnt$242 = 0, $dec = 0, $depth$243 = 0, $exitcond = 0, $exitcond50 = 0, $i$146 = 0, $i$240 = 0, $inc = 0, $inc37 = 0, $j$045 = 0, $j$139 = 0, $mul = 0, $mul3 = 0, $mul6 = 0, $not$cmp1$4 = 0, $shl$1 = 0;
 var $shl$2 = 0, $shl$3 = 0, $shl$4 = 0, $shr22 = 0, $spec$select = 0, $spec$select$1 = 0, $spec$select$2 = 0, $spec$select$3 = 0, $spec$select$4 = 0, $spec$select37$1 = 0, $spec$select37$2 = 0, $spec$select37$3 = 0, $spec$select37$4 = 0, $sub = 0, $sub28 = 0, $sub4 = 0, $sub5 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 $cmp1 = ($count>>>0)<(65536);
 $spec$select = $cmp1 ? 1 : 65536;
 $add = $cmp1 ? 0 : 16;
 $shl$1 = $spec$select << 8;
 $cmp1$1 = ($shl$1>>>0)>($count>>>0);
 $spec$select$1 = $cmp1$1 ? $spec$select : $shl$1;
 $add$1 = $cmp1$1 ? 0 : 8;
 $spec$select37$1 = $add$1 | $add;
 $shl$2 = $spec$select$1 << 4;
 $cmp1$2 = ($shl$2>>>0)>($count>>>0);
 $spec$select$2 = $cmp1$2 ? $spec$select$1 : $shl$2;
 $add$2 = $cmp1$2 ? 0 : 4;
 $spec$select37$2 = $add$2 | $spec$select37$1;
 $shl$3 = $spec$select$2 << 2;
 $cmp1$3 = ($shl$3>>>0)>($count>>>0);
 $spec$select$3 = $cmp1$3 ? $spec$select$2 : $shl$3;
 $add$3 = $cmp1$3 ? 0 : 2;
 $spec$select37$3 = $add$3 | $spec$select37$2;
 $shl$4 = $spec$select$3 << 1;
 $cmp1$4 = ($shl$4>>>0)>($count>>>0);
 $spec$select$4 = $cmp1$4 ? $spec$select$3 : $shl$4;
 $not$cmp1$4 = $cmp1$4 ^ 1;
 $add$4 = $not$cmp1$4&1;
 $spec$select37$4 = $spec$select37$3 | $add$4;
 $sub = (($spec$select$4) + -1)|0;
 $mul = $sub << 5;
 $$alloca_mul = $mul;
 $0 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $1 = ((($hashes)) + 32|0);
 $mul3 = $spec$select$4 << 1;
 $sub4 = (($mul3) - ($count))|0;
 $sub5 = (($sub4) + -1)|0;
 $mul6 = $sub5 << 5;
 _memcpy(($0|0),($1|0),($mul6|0))|0;
 $cmp1444 = ($sub5>>>0)<($sub>>>0);
 if ($cmp1444) {
  $i$146 = $sub4;$j$045 = $sub5;
  while(1) {
   $arraydecay = (($hashes) + ($i$146<<5)|0);
   $arraydecay17 = (($0) + ($j$045<<5)|0);
   _cn_fast_hash($arraydecay,64,$arraydecay17);
   $add19 = (($i$146) + 2)|0;
   $inc = (($j$045) + 1)|0;
   $exitcond50 = ($inc|0)==($sub|0);
   if ($exitcond50) {
    break;
   } else {
    $i$146 = $add19;$j$045 = $inc;
   }
  }
 }
 $cmp2141 = ($spec$select37$4|0)==(0);
 if ($cmp2141) {
  STACKTOP = sp;return;
 }
 $cnt$242 = $spec$select$4;$depth$243 = $spec$select37$4;
 while(1) {
  $shr22 = $cnt$242 >>> 1;
  $dec = (($depth$243) + -1)|0;
  $arraydecay24 = (($branch) + ($dec<<5)|0);
  dest=$arraydecay24; src=$0; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $sub28 = (($shr22) + -1)|0;
  $cmp2938 = ($sub28|0)==(0);
  if (!($cmp2938)) {
   $i$240 = 1;$j$139 = 0;
   while(1) {
    $arraydecay32 = (($0) + ($i$240<<5)|0);
    $arraydecay34 = (($0) + ($j$139<<5)|0);
    _cn_fast_hash($arraydecay32,64,$arraydecay34);
    $add36 = (($i$240) + 2)|0;
    $inc37 = (($j$139) + 1)|0;
    $exitcond = ($inc37|0)==($sub28|0);
    if ($exitcond) {
     break;
    } else {
     $i$240 = $add36;$j$139 = $inc37;
    }
   }
  }
  $cmp21 = ($dec|0)==(0);
  if ($cmp21) {
   break;
  } else {
   $cnt$242 = $shr22;$depth$243 = $dec;
  }
 }
 STACKTOP = sp;return;
}
function _tree_hash_from_branch($branch,$depth,$leaf,$path,$root_hash) {
 $branch = $branch|0;
 $depth = $depth|0;
 $leaf = $leaf|0;
 $path = $path|0;
 $root_hash = $root_hash|0;
 var $0 = 0, $1 = 0, $and = 0, $and$peel = 0, $and2 = 0, $and2$peel = 0, $arraydecay13 = 0, $arraydecay20 = 0, $arraydecay20$peel = 0, $arraydecay20$us = 0, $arraydecay20$us$peel = 0, $arrayidx = 0, $arrayidx$peel = 0, $branch_path$0 = 0, $branch_path$0$peel = 0, $buffer = 0, $cmp = 0, $cmp1 = 0, $cmp1$peel = 0, $cmp1$us = 0;
 var $cmp1$us$peel = 0, $cmp3 = 0, $cmp3$peel = 0, $conv = 0, $conv$peel = 0, $dec = 0, $dec$us = 0, $dec$us$peel = 0, $depth$addr$014 = 0, $depth$addr$014$us = 0, $leaf_path$0 = 0, $leaf_path$0$peel = 0, $shl = 0, $shl$peel = 0, $shr = 0, $shr$peel = 0, $tobool = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $buffer = sp;
 $cmp = ($depth|0)==(0);
 if ($cmp) {
  dest=$root_hash; src=$leaf; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $tobool = ($path|0)==(0|0);
 $arraydecay13 = ((($buffer)) + 32|0);
 $dec$us$peel = (($depth) + -1)|0;
 if ($tobool) {
  dest=$buffer; src=$leaf; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $arraydecay20$us$peel = (($branch) + ($dec$us$peel<<5)|0);
  dest=$arraydecay13; src=$arraydecay20$us$peel; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $cmp1$us$peel = ($dec$us$peel|0)==(0);
  if (!($cmp1$us$peel)) {
   $depth$addr$014$us = $dec$us$peel;
   while(1) {
    $dec$us = (($depth$addr$014$us) + -1)|0;
    _cn_fast_hash($buffer,64,$buffer);
    $arraydecay20$us = (($branch) + ($dec$us<<5)|0);
    dest=$arraydecay13; src=$arraydecay20$us; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $cmp1$us = ($dec$us|0)==(0);
    if ($cmp1$us) {
     break;
    } else {
     $depth$addr$014$us = $dec$us;
    }
   }
  }
 } else {
  $shr$peel = $dec$us$peel >>> 3;
  $arrayidx$peel = (($path) + ($shr$peel)|0);
  $0 = HEAP8[$arrayidx$peel>>0]|0;
  $conv$peel = $0 << 24 >> 24;
  $and$peel = $dec$us$peel & 7;
  $shl$peel = 1 << $and$peel;
  $and2$peel = $shl$peel & $conv$peel;
  $cmp3$peel = ($and2$peel|0)==(0);
  $branch_path$0$peel = $cmp3$peel ? $arraydecay13 : $buffer;
  $leaf_path$0$peel = $cmp3$peel ? $buffer : $arraydecay13;
  dest=$leaf_path$0$peel; src=$leaf; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $arraydecay20$peel = (($branch) + ($dec$us$peel<<5)|0);
  dest=$branch_path$0$peel; src=$arraydecay20$peel; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $cmp1$peel = ($dec$us$peel|0)==(0);
  if (!($cmp1$peel)) {
   $depth$addr$014 = $dec$us$peel;
   while(1) {
    $dec = (($depth$addr$014) + -1)|0;
    $shr = $dec >>> 3;
    $arrayidx = (($path) + ($shr)|0);
    $1 = HEAP8[$arrayidx>>0]|0;
    $conv = $1 << 24 >> 24;
    $and = $dec & 7;
    $shl = 1 << $and;
    $and2 = $shl & $conv;
    $cmp3 = ($and2|0)==(0);
    $branch_path$0 = $cmp3 ? $arraydecay13 : $buffer;
    $leaf_path$0 = $cmp3 ? $buffer : $arraydecay13;
    _cn_fast_hash($buffer,64,$leaf_path$0);
    $arraydecay20 = (($branch) + ($dec<<5)|0);
    dest=$branch_path$0; src=$arraydecay20; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $cmp1 = ($dec|0)==(0);
    if ($cmp1) {
     break;
    } else {
     $depth$addr$014 = $dec;
    }
   }
  }
 }
 _cn_fast_hash($buffer,64,$root_hash);
 STACKTOP = sp;return;
}
function _aesb_single_round($in,$out,$expandedKey) {
 $in = $in|0;
 $out = $out|0;
 $expandedKey = $expandedKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr1 = 0, $add$ptr3 = 0, $add$ptr5 = 0, $add$ptr95 = 0, $add$ptr97 = 0, $add$ptr99 = 0, $and = 0, $and12 = 0, $and16 = 0, $and29 = 0, $and33 = 0, $and38 = 0, $and51 = 0, $and55 = 0, $and60 = 0, $and73 = 0;
 var $and77 = 0, $and82 = 0, $arrayidx13 = 0, $arrayidx17 = 0, $arrayidx22 = 0, $arrayidx26 = 0, $arrayidx30 = 0, $arrayidx34 = 0, $arrayidx39 = 0, $arrayidx44 = 0, $arrayidx48 = 0, $arrayidx52 = 0, $arrayidx56 = 0, $arrayidx61 = 0, $arrayidx66 = 0, $arrayidx70 = 0, $arrayidx74 = 0, $arrayidx78 = 0, $arrayidx83 = 0, $arrayidx88 = 0;
 var $arrayidx9 = 0, $shr11 = 0, $shr15 = 0, $shr20 = 0, $shr32 = 0, $shr37 = 0, $shr42 = 0, $shr54 = 0, $shr59 = 0, $shr64 = 0, $shr76 = 0, $shr81 = 0, $shr86 = 0, $xor = 0, $xor18 = 0, $xor23 = 0, $xor24 = 0, $xor35 = 0, $xor40 = 0, $xor45 = 0;
 var $xor46 = 0, $xor57 = 0, $xor62 = 0, $xor67 = 0, $xor68 = 0, $xor79 = 0, $xor84 = 0, $xor89 = 0, $xor90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in>>2]|0;
 $add$ptr1 = ((($in)) + 4|0);
 $1 = HEAP32[$add$ptr1>>2]|0;
 $add$ptr3 = ((($in)) + 8|0);
 $2 = HEAP32[$add$ptr3>>2]|0;
 $add$ptr5 = ((($in)) + 12|0);
 $3 = HEAP32[$add$ptr5>>2]|0;
 $4 = HEAP32[$expandedKey>>2]|0;
 $and = $0 & 255;
 $arrayidx9 = (32944 + ($and<<2)|0);
 $5 = HEAP32[$arrayidx9>>2]|0;
 $shr11 = $1 >>> 8;
 $and12 = $shr11 & 255;
 $arrayidx13 = (33968 + ($and12<<2)|0);
 $6 = HEAP32[$arrayidx13>>2]|0;
 $shr15 = $2 >>> 16;
 $and16 = $shr15 & 255;
 $arrayidx17 = (34992 + ($and16<<2)|0);
 $7 = HEAP32[$arrayidx17>>2]|0;
 $shr20 = $3 >>> 24;
 $arrayidx22 = (36016 + ($shr20<<2)|0);
 $8 = HEAP32[$arrayidx22>>2]|0;
 $xor = $5 ^ $4;
 $xor18 = $xor ^ $6;
 $xor23 = $xor18 ^ $7;
 $xor24 = $xor23 ^ $8;
 $arrayidx26 = ((($expandedKey)) + 4|0);
 $9 = HEAP32[$arrayidx26>>2]|0;
 $and29 = $1 & 255;
 $arrayidx30 = (32944 + ($and29<<2)|0);
 $10 = HEAP32[$arrayidx30>>2]|0;
 $shr32 = $2 >>> 8;
 $and33 = $shr32 & 255;
 $arrayidx34 = (33968 + ($and33<<2)|0);
 $11 = HEAP32[$arrayidx34>>2]|0;
 $shr37 = $3 >>> 16;
 $and38 = $shr37 & 255;
 $arrayidx39 = (34992 + ($and38<<2)|0);
 $12 = HEAP32[$arrayidx39>>2]|0;
 $shr42 = $0 >>> 24;
 $arrayidx44 = (36016 + ($shr42<<2)|0);
 $13 = HEAP32[$arrayidx44>>2]|0;
 $xor35 = $10 ^ $9;
 $xor40 = $xor35 ^ $11;
 $xor45 = $xor40 ^ $12;
 $xor46 = $xor45 ^ $13;
 $arrayidx48 = ((($expandedKey)) + 8|0);
 $14 = HEAP32[$arrayidx48>>2]|0;
 $and51 = $2 & 255;
 $arrayidx52 = (32944 + ($and51<<2)|0);
 $15 = HEAP32[$arrayidx52>>2]|0;
 $shr54 = $3 >>> 8;
 $and55 = $shr54 & 255;
 $arrayidx56 = (33968 + ($and55<<2)|0);
 $16 = HEAP32[$arrayidx56>>2]|0;
 $shr59 = $0 >>> 16;
 $and60 = $shr59 & 255;
 $arrayidx61 = (34992 + ($and60<<2)|0);
 $17 = HEAP32[$arrayidx61>>2]|0;
 $shr64 = $1 >>> 24;
 $arrayidx66 = (36016 + ($shr64<<2)|0);
 $18 = HEAP32[$arrayidx66>>2]|0;
 $xor57 = $15 ^ $14;
 $xor62 = $xor57 ^ $16;
 $xor67 = $xor62 ^ $17;
 $xor68 = $xor67 ^ $18;
 $arrayidx70 = ((($expandedKey)) + 12|0);
 $19 = HEAP32[$arrayidx70>>2]|0;
 $and73 = $3 & 255;
 $arrayidx74 = (32944 + ($and73<<2)|0);
 $20 = HEAP32[$arrayidx74>>2]|0;
 $shr76 = $0 >>> 8;
 $and77 = $shr76 & 255;
 $arrayidx78 = (33968 + ($and77<<2)|0);
 $21 = HEAP32[$arrayidx78>>2]|0;
 $shr81 = $1 >>> 16;
 $and82 = $shr81 & 255;
 $arrayidx83 = (34992 + ($and82<<2)|0);
 $22 = HEAP32[$arrayidx83>>2]|0;
 $shr86 = $2 >>> 24;
 $arrayidx88 = (36016 + ($shr86<<2)|0);
 $23 = HEAP32[$arrayidx88>>2]|0;
 $xor79 = $20 ^ $19;
 $xor84 = $xor79 ^ $21;
 $xor89 = $xor84 ^ $22;
 $xor90 = $xor89 ^ $23;
 HEAP32[$out>>2] = $xor24;
 $add$ptr95 = ((($out)) + 4|0);
 HEAP32[$add$ptr95>>2] = $xor46;
 $add$ptr97 = ((($out)) + 8|0);
 HEAP32[$add$ptr97>>2] = $xor68;
 $add$ptr99 = ((($out)) + 12|0);
 HEAP32[$add$ptr99>>2] = $xor90;
 return;
}
function _aesb_pseudo_round($in,$out,$expandedKey) {
 $in = $in|0;
 $out = $out|0;
 $expandedKey = $expandedKey|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr1 = 0, $add$ptr184 = 0, $add$ptr276 = 0, $add$ptr3 = 0, $add$ptr368 = 0, $add$ptr460 = 0, $add$ptr5 = 0, $add$ptr552 = 0, $add$ptr644 = 0, $add$ptr736 = 0, $add$ptr828 = 0, $add$ptr92 = 0, $add$ptr923 = 0, $add$ptr925 = 0, $add$ptr927 = 0, $and = 0;
 var $and100 = 0, $and105 = 0, $and119 = 0, $and12 = 0, $and123 = 0, $and128 = 0, $and142 = 0, $and146 = 0, $and151 = 0, $and16 = 0, $and165 = 0, $and169 = 0, $and174 = 0, $and188 = 0, $and192 = 0, $and197 = 0, $and211 = 0, $and215 = 0, $and220 = 0, $and234 = 0;
 var $and238 = 0, $and243 = 0, $and257 = 0, $and261 = 0, $and266 = 0, $and280 = 0, $and284 = 0, $and289 = 0, $and29 = 0, $and303 = 0, $and307 = 0, $and312 = 0, $and326 = 0, $and33 = 0, $and330 = 0, $and335 = 0, $and349 = 0, $and353 = 0, $and358 = 0, $and372 = 0;
 var $and376 = 0, $and38 = 0, $and381 = 0, $and395 = 0, $and399 = 0, $and404 = 0, $and418 = 0, $and422 = 0, $and427 = 0, $and441 = 0, $and445 = 0, $and450 = 0, $and464 = 0, $and468 = 0, $and473 = 0, $and487 = 0, $and491 = 0, $and496 = 0, $and51 = 0, $and510 = 0;
 var $and514 = 0, $and519 = 0, $and533 = 0, $and537 = 0, $and542 = 0, $and55 = 0, $and556 = 0, $and560 = 0, $and565 = 0, $and579 = 0, $and583 = 0, $and588 = 0, $and60 = 0, $and602 = 0, $and606 = 0, $and611 = 0, $and625 = 0, $and629 = 0, $and634 = 0, $and648 = 0;
 var $and652 = 0, $and657 = 0, $and671 = 0, $and675 = 0, $and680 = 0, $and694 = 0, $and698 = 0, $and703 = 0, $and717 = 0, $and721 = 0, $and726 = 0, $and73 = 0, $and740 = 0, $and744 = 0, $and749 = 0, $and763 = 0, $and767 = 0, $and77 = 0, $and772 = 0, $and786 = 0;
 var $and790 = 0, $and795 = 0, $and809 = 0, $and813 = 0, $and818 = 0, $and82 = 0, $and832 = 0, $and836 = 0, $and841 = 0, $and855 = 0, $and859 = 0, $and864 = 0, $and878 = 0, $and882 = 0, $and887 = 0, $and901 = 0, $and905 = 0, $and910 = 0, $and96 = 0, $arrayidx101 = 0;
 var $arrayidx106 = 0, $arrayidx111 = 0, $arrayidx116 = 0, $arrayidx120 = 0, $arrayidx124 = 0, $arrayidx129 = 0, $arrayidx13 = 0, $arrayidx134 = 0, $arrayidx139 = 0, $arrayidx143 = 0, $arrayidx147 = 0, $arrayidx152 = 0, $arrayidx157 = 0, $arrayidx162 = 0, $arrayidx166 = 0, $arrayidx17 = 0, $arrayidx170 = 0, $arrayidx175 = 0, $arrayidx180 = 0, $arrayidx189 = 0;
 var $arrayidx193 = 0, $arrayidx198 = 0, $arrayidx203 = 0, $arrayidx208 = 0, $arrayidx212 = 0, $arrayidx216 = 0, $arrayidx22 = 0, $arrayidx221 = 0, $arrayidx226 = 0, $arrayidx231 = 0, $arrayidx235 = 0, $arrayidx239 = 0, $arrayidx244 = 0, $arrayidx249 = 0, $arrayidx254 = 0, $arrayidx258 = 0, $arrayidx26 = 0, $arrayidx262 = 0, $arrayidx267 = 0, $arrayidx272 = 0;
 var $arrayidx281 = 0, $arrayidx285 = 0, $arrayidx290 = 0, $arrayidx295 = 0, $arrayidx30 = 0, $arrayidx300 = 0, $arrayidx304 = 0, $arrayidx308 = 0, $arrayidx313 = 0, $arrayidx318 = 0, $arrayidx323 = 0, $arrayidx327 = 0, $arrayidx331 = 0, $arrayidx336 = 0, $arrayidx34 = 0, $arrayidx341 = 0, $arrayidx346 = 0, $arrayidx350 = 0, $arrayidx354 = 0, $arrayidx359 = 0;
 var $arrayidx364 = 0, $arrayidx373 = 0, $arrayidx377 = 0, $arrayidx382 = 0, $arrayidx387 = 0, $arrayidx39 = 0, $arrayidx392 = 0, $arrayidx396 = 0, $arrayidx400 = 0, $arrayidx405 = 0, $arrayidx410 = 0, $arrayidx415 = 0, $arrayidx419 = 0, $arrayidx423 = 0, $arrayidx428 = 0, $arrayidx433 = 0, $arrayidx438 = 0, $arrayidx44 = 0, $arrayidx442 = 0, $arrayidx446 = 0;
 var $arrayidx451 = 0, $arrayidx456 = 0, $arrayidx465 = 0, $arrayidx469 = 0, $arrayidx474 = 0, $arrayidx479 = 0, $arrayidx48 = 0, $arrayidx484 = 0, $arrayidx488 = 0, $arrayidx492 = 0, $arrayidx497 = 0, $arrayidx502 = 0, $arrayidx507 = 0, $arrayidx511 = 0, $arrayidx515 = 0, $arrayidx52 = 0, $arrayidx520 = 0, $arrayidx525 = 0, $arrayidx530 = 0, $arrayidx534 = 0;
 var $arrayidx538 = 0, $arrayidx543 = 0, $arrayidx548 = 0, $arrayidx557 = 0, $arrayidx56 = 0, $arrayidx561 = 0, $arrayidx566 = 0, $arrayidx571 = 0, $arrayidx576 = 0, $arrayidx580 = 0, $arrayidx584 = 0, $arrayidx589 = 0, $arrayidx594 = 0, $arrayidx599 = 0, $arrayidx603 = 0, $arrayidx607 = 0, $arrayidx61 = 0, $arrayidx612 = 0, $arrayidx617 = 0, $arrayidx622 = 0;
 var $arrayidx626 = 0, $arrayidx630 = 0, $arrayidx635 = 0, $arrayidx640 = 0, $arrayidx649 = 0, $arrayidx653 = 0, $arrayidx658 = 0, $arrayidx66 = 0, $arrayidx663 = 0, $arrayidx668 = 0, $arrayidx672 = 0, $arrayidx676 = 0, $arrayidx681 = 0, $arrayidx686 = 0, $arrayidx691 = 0, $arrayidx695 = 0, $arrayidx699 = 0, $arrayidx70 = 0, $arrayidx704 = 0, $arrayidx709 = 0;
 var $arrayidx714 = 0, $arrayidx718 = 0, $arrayidx722 = 0, $arrayidx727 = 0, $arrayidx732 = 0, $arrayidx74 = 0, $arrayidx741 = 0, $arrayidx745 = 0, $arrayidx750 = 0, $arrayidx755 = 0, $arrayidx760 = 0, $arrayidx764 = 0, $arrayidx768 = 0, $arrayidx773 = 0, $arrayidx778 = 0, $arrayidx78 = 0, $arrayidx783 = 0, $arrayidx787 = 0, $arrayidx791 = 0, $arrayidx796 = 0;
 var $arrayidx801 = 0, $arrayidx806 = 0, $arrayidx810 = 0, $arrayidx814 = 0, $arrayidx819 = 0, $arrayidx824 = 0, $arrayidx83 = 0, $arrayidx833 = 0, $arrayidx837 = 0, $arrayidx842 = 0, $arrayidx847 = 0, $arrayidx852 = 0, $arrayidx856 = 0, $arrayidx860 = 0, $arrayidx865 = 0, $arrayidx870 = 0, $arrayidx875 = 0, $arrayidx879 = 0, $arrayidx88 = 0, $arrayidx883 = 0;
 var $arrayidx888 = 0, $arrayidx893 = 0, $arrayidx898 = 0, $arrayidx9 = 0, $arrayidx902 = 0, $arrayidx906 = 0, $arrayidx911 = 0, $arrayidx916 = 0, $arrayidx97 = 0, $shr104 = 0, $shr109 = 0, $shr11 = 0, $shr122 = 0, $shr127 = 0, $shr132 = 0, $shr145 = 0, $shr15 = 0, $shr150 = 0, $shr155 = 0, $shr168 = 0;
 var $shr173 = 0, $shr178 = 0, $shr191 = 0, $shr196 = 0, $shr20 = 0, $shr201 = 0, $shr214 = 0, $shr219 = 0, $shr224 = 0, $shr237 = 0, $shr242 = 0, $shr247 = 0, $shr260 = 0, $shr265 = 0, $shr270 = 0, $shr283 = 0, $shr288 = 0, $shr293 = 0, $shr306 = 0, $shr311 = 0;
 var $shr316 = 0, $shr32 = 0, $shr329 = 0, $shr334 = 0, $shr339 = 0, $shr352 = 0, $shr357 = 0, $shr362 = 0, $shr37 = 0, $shr375 = 0, $shr380 = 0, $shr385 = 0, $shr398 = 0, $shr403 = 0, $shr408 = 0, $shr42 = 0, $shr421 = 0, $shr426 = 0, $shr431 = 0, $shr444 = 0;
 var $shr449 = 0, $shr454 = 0, $shr467 = 0, $shr472 = 0, $shr477 = 0, $shr490 = 0, $shr495 = 0, $shr500 = 0, $shr513 = 0, $shr518 = 0, $shr523 = 0, $shr536 = 0, $shr54 = 0, $shr541 = 0, $shr546 = 0, $shr559 = 0, $shr564 = 0, $shr569 = 0, $shr582 = 0, $shr587 = 0;
 var $shr59 = 0, $shr592 = 0, $shr605 = 0, $shr610 = 0, $shr615 = 0, $shr628 = 0, $shr633 = 0, $shr638 = 0, $shr64 = 0, $shr651 = 0, $shr656 = 0, $shr661 = 0, $shr674 = 0, $shr679 = 0, $shr684 = 0, $shr697 = 0, $shr702 = 0, $shr707 = 0, $shr720 = 0, $shr725 = 0;
 var $shr730 = 0, $shr743 = 0, $shr748 = 0, $shr753 = 0, $shr76 = 0, $shr766 = 0, $shr771 = 0, $shr776 = 0, $shr789 = 0, $shr794 = 0, $shr799 = 0, $shr81 = 0, $shr812 = 0, $shr817 = 0, $shr822 = 0, $shr835 = 0, $shr840 = 0, $shr845 = 0, $shr858 = 0, $shr86 = 0;
 var $shr863 = 0, $shr868 = 0, $shr881 = 0, $shr886 = 0, $shr891 = 0, $shr904 = 0, $shr909 = 0, $shr914 = 0, $shr99 = 0, $xor = 0, $xor102 = 0, $xor107 = 0, $xor112 = 0, $xor113 = 0, $xor125 = 0, $xor130 = 0, $xor135 = 0, $xor136 = 0, $xor148 = 0, $xor153 = 0;
 var $xor158 = 0, $xor159 = 0, $xor171 = 0, $xor176 = 0, $xor18 = 0, $xor181 = 0, $xor182 = 0, $xor194 = 0, $xor199 = 0, $xor204 = 0, $xor205 = 0, $xor217 = 0, $xor222 = 0, $xor227 = 0, $xor228 = 0, $xor23 = 0, $xor24 = 0, $xor240 = 0, $xor245 = 0, $xor250 = 0;
 var $xor251 = 0, $xor263 = 0, $xor268 = 0, $xor273 = 0, $xor274 = 0, $xor286 = 0, $xor291 = 0, $xor296 = 0, $xor297 = 0, $xor309 = 0, $xor314 = 0, $xor319 = 0, $xor320 = 0, $xor332 = 0, $xor337 = 0, $xor342 = 0, $xor343 = 0, $xor35 = 0, $xor355 = 0, $xor360 = 0;
 var $xor365 = 0, $xor366 = 0, $xor378 = 0, $xor383 = 0, $xor388 = 0, $xor389 = 0, $xor40 = 0, $xor401 = 0, $xor406 = 0, $xor411 = 0, $xor412 = 0, $xor424 = 0, $xor429 = 0, $xor434 = 0, $xor435 = 0, $xor447 = 0, $xor45 = 0, $xor452 = 0, $xor457 = 0, $xor458 = 0;
 var $xor46 = 0, $xor470 = 0, $xor475 = 0, $xor480 = 0, $xor481 = 0, $xor493 = 0, $xor498 = 0, $xor503 = 0, $xor504 = 0, $xor516 = 0, $xor521 = 0, $xor526 = 0, $xor527 = 0, $xor539 = 0, $xor544 = 0, $xor549 = 0, $xor550 = 0, $xor562 = 0, $xor567 = 0, $xor57 = 0;
 var $xor572 = 0, $xor573 = 0, $xor585 = 0, $xor590 = 0, $xor595 = 0, $xor596 = 0, $xor608 = 0, $xor613 = 0, $xor618 = 0, $xor619 = 0, $xor62 = 0, $xor631 = 0, $xor636 = 0, $xor641 = 0, $xor642 = 0, $xor654 = 0, $xor659 = 0, $xor664 = 0, $xor665 = 0, $xor67 = 0;
 var $xor677 = 0, $xor68 = 0, $xor682 = 0, $xor687 = 0, $xor688 = 0, $xor700 = 0, $xor705 = 0, $xor710 = 0, $xor711 = 0, $xor723 = 0, $xor728 = 0, $xor733 = 0, $xor734 = 0, $xor746 = 0, $xor751 = 0, $xor756 = 0, $xor757 = 0, $xor769 = 0, $xor774 = 0, $xor779 = 0;
 var $xor780 = 0, $xor79 = 0, $xor792 = 0, $xor797 = 0, $xor802 = 0, $xor803 = 0, $xor815 = 0, $xor820 = 0, $xor825 = 0, $xor826 = 0, $xor838 = 0, $xor84 = 0, $xor843 = 0, $xor848 = 0, $xor849 = 0, $xor861 = 0, $xor866 = 0, $xor871 = 0, $xor872 = 0, $xor884 = 0;
 var $xor889 = 0, $xor89 = 0, $xor894 = 0, $xor895 = 0, $xor90 = 0, $xor907 = 0, $xor912 = 0, $xor917 = 0, $xor918 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$in>>2]|0;
 $add$ptr1 = ((($in)) + 4|0);
 $1 = HEAP32[$add$ptr1>>2]|0;
 $add$ptr3 = ((($in)) + 8|0);
 $2 = HEAP32[$add$ptr3>>2]|0;
 $add$ptr5 = ((($in)) + 12|0);
 $3 = HEAP32[$add$ptr5>>2]|0;
 $4 = HEAP32[$expandedKey>>2]|0;
 $and = $0 & 255;
 $arrayidx9 = (32944 + ($and<<2)|0);
 $5 = HEAP32[$arrayidx9>>2]|0;
 $shr11 = $1 >>> 8;
 $and12 = $shr11 & 255;
 $arrayidx13 = (33968 + ($and12<<2)|0);
 $6 = HEAP32[$arrayidx13>>2]|0;
 $shr15 = $2 >>> 16;
 $and16 = $shr15 & 255;
 $arrayidx17 = (34992 + ($and16<<2)|0);
 $7 = HEAP32[$arrayidx17>>2]|0;
 $shr20 = $3 >>> 24;
 $arrayidx22 = (36016 + ($shr20<<2)|0);
 $8 = HEAP32[$arrayidx22>>2]|0;
 $xor = $5 ^ $4;
 $xor18 = $xor ^ $6;
 $xor23 = $xor18 ^ $7;
 $xor24 = $xor23 ^ $8;
 $arrayidx26 = ((($expandedKey)) + 4|0);
 $9 = HEAP32[$arrayidx26>>2]|0;
 $and29 = $1 & 255;
 $arrayidx30 = (32944 + ($and29<<2)|0);
 $10 = HEAP32[$arrayidx30>>2]|0;
 $shr32 = $2 >>> 8;
 $and33 = $shr32 & 255;
 $arrayidx34 = (33968 + ($and33<<2)|0);
 $11 = HEAP32[$arrayidx34>>2]|0;
 $shr37 = $3 >>> 16;
 $and38 = $shr37 & 255;
 $arrayidx39 = (34992 + ($and38<<2)|0);
 $12 = HEAP32[$arrayidx39>>2]|0;
 $shr42 = $0 >>> 24;
 $arrayidx44 = (36016 + ($shr42<<2)|0);
 $13 = HEAP32[$arrayidx44>>2]|0;
 $xor35 = $10 ^ $9;
 $xor40 = $xor35 ^ $11;
 $xor45 = $xor40 ^ $12;
 $xor46 = $xor45 ^ $13;
 $arrayidx48 = ((($expandedKey)) + 8|0);
 $14 = HEAP32[$arrayidx48>>2]|0;
 $and51 = $2 & 255;
 $arrayidx52 = (32944 + ($and51<<2)|0);
 $15 = HEAP32[$arrayidx52>>2]|0;
 $shr54 = $3 >>> 8;
 $and55 = $shr54 & 255;
 $arrayidx56 = (33968 + ($and55<<2)|0);
 $16 = HEAP32[$arrayidx56>>2]|0;
 $shr59 = $0 >>> 16;
 $and60 = $shr59 & 255;
 $arrayidx61 = (34992 + ($and60<<2)|0);
 $17 = HEAP32[$arrayidx61>>2]|0;
 $shr64 = $1 >>> 24;
 $arrayidx66 = (36016 + ($shr64<<2)|0);
 $18 = HEAP32[$arrayidx66>>2]|0;
 $xor57 = $15 ^ $14;
 $xor62 = $xor57 ^ $16;
 $xor67 = $xor62 ^ $17;
 $xor68 = $xor67 ^ $18;
 $arrayidx70 = ((($expandedKey)) + 12|0);
 $19 = HEAP32[$arrayidx70>>2]|0;
 $and73 = $3 & 255;
 $arrayidx74 = (32944 + ($and73<<2)|0);
 $20 = HEAP32[$arrayidx74>>2]|0;
 $shr76 = $0 >>> 8;
 $and77 = $shr76 & 255;
 $arrayidx78 = (33968 + ($and77<<2)|0);
 $21 = HEAP32[$arrayidx78>>2]|0;
 $shr81 = $1 >>> 16;
 $and82 = $shr81 & 255;
 $arrayidx83 = (34992 + ($and82<<2)|0);
 $22 = HEAP32[$arrayidx83>>2]|0;
 $shr86 = $2 >>> 24;
 $arrayidx88 = (36016 + ($shr86<<2)|0);
 $23 = HEAP32[$arrayidx88>>2]|0;
 $xor79 = $20 ^ $19;
 $xor84 = $xor79 ^ $21;
 $xor89 = $xor84 ^ $22;
 $xor90 = $xor89 ^ $23;
 $add$ptr92 = ((($expandedKey)) + 16|0);
 $24 = HEAP32[$add$ptr92>>2]|0;
 $and96 = $xor24 & 255;
 $arrayidx97 = (32944 + ($and96<<2)|0);
 $25 = HEAP32[$arrayidx97>>2]|0;
 $shr99 = $xor46 >>> 8;
 $and100 = $shr99 & 255;
 $arrayidx101 = (33968 + ($and100<<2)|0);
 $26 = HEAP32[$arrayidx101>>2]|0;
 $shr104 = $xor68 >>> 16;
 $and105 = $shr104 & 255;
 $arrayidx106 = (34992 + ($and105<<2)|0);
 $27 = HEAP32[$arrayidx106>>2]|0;
 $shr109 = $xor90 >>> 24;
 $arrayidx111 = (36016 + ($shr109<<2)|0);
 $28 = HEAP32[$arrayidx111>>2]|0;
 $xor102 = $25 ^ $24;
 $xor107 = $xor102 ^ $26;
 $xor112 = $xor107 ^ $27;
 $xor113 = $xor112 ^ $28;
 $arrayidx116 = ((($expandedKey)) + 20|0);
 $29 = HEAP32[$arrayidx116>>2]|0;
 $and119 = $xor46 & 255;
 $arrayidx120 = (32944 + ($and119<<2)|0);
 $30 = HEAP32[$arrayidx120>>2]|0;
 $shr122 = $xor68 >>> 8;
 $and123 = $shr122 & 255;
 $arrayidx124 = (33968 + ($and123<<2)|0);
 $31 = HEAP32[$arrayidx124>>2]|0;
 $shr127 = $xor90 >>> 16;
 $and128 = $shr127 & 255;
 $arrayidx129 = (34992 + ($and128<<2)|0);
 $32 = HEAP32[$arrayidx129>>2]|0;
 $shr132 = $xor24 >>> 24;
 $arrayidx134 = (36016 + ($shr132<<2)|0);
 $33 = HEAP32[$arrayidx134>>2]|0;
 $xor125 = $30 ^ $29;
 $xor130 = $xor125 ^ $31;
 $xor135 = $xor130 ^ $32;
 $xor136 = $xor135 ^ $33;
 $arrayidx139 = ((($expandedKey)) + 24|0);
 $34 = HEAP32[$arrayidx139>>2]|0;
 $and142 = $xor68 & 255;
 $arrayidx143 = (32944 + ($and142<<2)|0);
 $35 = HEAP32[$arrayidx143>>2]|0;
 $shr145 = $xor90 >>> 8;
 $and146 = $shr145 & 255;
 $arrayidx147 = (33968 + ($and146<<2)|0);
 $36 = HEAP32[$arrayidx147>>2]|0;
 $shr150 = $xor24 >>> 16;
 $and151 = $shr150 & 255;
 $arrayidx152 = (34992 + ($and151<<2)|0);
 $37 = HEAP32[$arrayidx152>>2]|0;
 $shr155 = $xor46 >>> 24;
 $arrayidx157 = (36016 + ($shr155<<2)|0);
 $38 = HEAP32[$arrayidx157>>2]|0;
 $xor148 = $35 ^ $34;
 $xor153 = $xor148 ^ $36;
 $xor158 = $xor153 ^ $37;
 $xor159 = $xor158 ^ $38;
 $arrayidx162 = ((($expandedKey)) + 28|0);
 $39 = HEAP32[$arrayidx162>>2]|0;
 $and165 = $xor90 & 255;
 $arrayidx166 = (32944 + ($and165<<2)|0);
 $40 = HEAP32[$arrayidx166>>2]|0;
 $shr168 = $xor24 >>> 8;
 $and169 = $shr168 & 255;
 $arrayidx170 = (33968 + ($and169<<2)|0);
 $41 = HEAP32[$arrayidx170>>2]|0;
 $shr173 = $xor46 >>> 16;
 $and174 = $shr173 & 255;
 $arrayidx175 = (34992 + ($and174<<2)|0);
 $42 = HEAP32[$arrayidx175>>2]|0;
 $shr178 = $xor68 >>> 24;
 $arrayidx180 = (36016 + ($shr178<<2)|0);
 $43 = HEAP32[$arrayidx180>>2]|0;
 $xor171 = $40 ^ $39;
 $xor176 = $xor171 ^ $41;
 $xor181 = $xor176 ^ $42;
 $xor182 = $xor181 ^ $43;
 $add$ptr184 = ((($expandedKey)) + 32|0);
 $44 = HEAP32[$add$ptr184>>2]|0;
 $and188 = $xor113 & 255;
 $arrayidx189 = (32944 + ($and188<<2)|0);
 $45 = HEAP32[$arrayidx189>>2]|0;
 $shr191 = $xor136 >>> 8;
 $and192 = $shr191 & 255;
 $arrayidx193 = (33968 + ($and192<<2)|0);
 $46 = HEAP32[$arrayidx193>>2]|0;
 $shr196 = $xor159 >>> 16;
 $and197 = $shr196 & 255;
 $arrayidx198 = (34992 + ($and197<<2)|0);
 $47 = HEAP32[$arrayidx198>>2]|0;
 $shr201 = $xor182 >>> 24;
 $arrayidx203 = (36016 + ($shr201<<2)|0);
 $48 = HEAP32[$arrayidx203>>2]|0;
 $xor194 = $45 ^ $44;
 $xor199 = $xor194 ^ $46;
 $xor204 = $xor199 ^ $47;
 $xor205 = $xor204 ^ $48;
 $arrayidx208 = ((($expandedKey)) + 36|0);
 $49 = HEAP32[$arrayidx208>>2]|0;
 $and211 = $xor136 & 255;
 $arrayidx212 = (32944 + ($and211<<2)|0);
 $50 = HEAP32[$arrayidx212>>2]|0;
 $shr214 = $xor159 >>> 8;
 $and215 = $shr214 & 255;
 $arrayidx216 = (33968 + ($and215<<2)|0);
 $51 = HEAP32[$arrayidx216>>2]|0;
 $shr219 = $xor182 >>> 16;
 $and220 = $shr219 & 255;
 $arrayidx221 = (34992 + ($and220<<2)|0);
 $52 = HEAP32[$arrayidx221>>2]|0;
 $shr224 = $xor113 >>> 24;
 $arrayidx226 = (36016 + ($shr224<<2)|0);
 $53 = HEAP32[$arrayidx226>>2]|0;
 $xor217 = $50 ^ $49;
 $xor222 = $xor217 ^ $51;
 $xor227 = $xor222 ^ $52;
 $xor228 = $xor227 ^ $53;
 $arrayidx231 = ((($expandedKey)) + 40|0);
 $54 = HEAP32[$arrayidx231>>2]|0;
 $and234 = $xor159 & 255;
 $arrayidx235 = (32944 + ($and234<<2)|0);
 $55 = HEAP32[$arrayidx235>>2]|0;
 $shr237 = $xor182 >>> 8;
 $and238 = $shr237 & 255;
 $arrayidx239 = (33968 + ($and238<<2)|0);
 $56 = HEAP32[$arrayidx239>>2]|0;
 $shr242 = $xor113 >>> 16;
 $and243 = $shr242 & 255;
 $arrayidx244 = (34992 + ($and243<<2)|0);
 $57 = HEAP32[$arrayidx244>>2]|0;
 $shr247 = $xor136 >>> 24;
 $arrayidx249 = (36016 + ($shr247<<2)|0);
 $58 = HEAP32[$arrayidx249>>2]|0;
 $xor240 = $55 ^ $54;
 $xor245 = $xor240 ^ $56;
 $xor250 = $xor245 ^ $57;
 $xor251 = $xor250 ^ $58;
 $arrayidx254 = ((($expandedKey)) + 44|0);
 $59 = HEAP32[$arrayidx254>>2]|0;
 $and257 = $xor182 & 255;
 $arrayidx258 = (32944 + ($and257<<2)|0);
 $60 = HEAP32[$arrayidx258>>2]|0;
 $shr260 = $xor113 >>> 8;
 $and261 = $shr260 & 255;
 $arrayidx262 = (33968 + ($and261<<2)|0);
 $61 = HEAP32[$arrayidx262>>2]|0;
 $shr265 = $xor136 >>> 16;
 $and266 = $shr265 & 255;
 $arrayidx267 = (34992 + ($and266<<2)|0);
 $62 = HEAP32[$arrayidx267>>2]|0;
 $shr270 = $xor159 >>> 24;
 $arrayidx272 = (36016 + ($shr270<<2)|0);
 $63 = HEAP32[$arrayidx272>>2]|0;
 $xor263 = $60 ^ $59;
 $xor268 = $xor263 ^ $61;
 $xor273 = $xor268 ^ $62;
 $xor274 = $xor273 ^ $63;
 $add$ptr276 = ((($expandedKey)) + 48|0);
 $64 = HEAP32[$add$ptr276>>2]|0;
 $and280 = $xor205 & 255;
 $arrayidx281 = (32944 + ($and280<<2)|0);
 $65 = HEAP32[$arrayidx281>>2]|0;
 $shr283 = $xor228 >>> 8;
 $and284 = $shr283 & 255;
 $arrayidx285 = (33968 + ($and284<<2)|0);
 $66 = HEAP32[$arrayidx285>>2]|0;
 $shr288 = $xor251 >>> 16;
 $and289 = $shr288 & 255;
 $arrayidx290 = (34992 + ($and289<<2)|0);
 $67 = HEAP32[$arrayidx290>>2]|0;
 $shr293 = $xor274 >>> 24;
 $arrayidx295 = (36016 + ($shr293<<2)|0);
 $68 = HEAP32[$arrayidx295>>2]|0;
 $xor286 = $65 ^ $64;
 $xor291 = $xor286 ^ $66;
 $xor296 = $xor291 ^ $67;
 $xor297 = $xor296 ^ $68;
 $arrayidx300 = ((($expandedKey)) + 52|0);
 $69 = HEAP32[$arrayidx300>>2]|0;
 $and303 = $xor228 & 255;
 $arrayidx304 = (32944 + ($and303<<2)|0);
 $70 = HEAP32[$arrayidx304>>2]|0;
 $shr306 = $xor251 >>> 8;
 $and307 = $shr306 & 255;
 $arrayidx308 = (33968 + ($and307<<2)|0);
 $71 = HEAP32[$arrayidx308>>2]|0;
 $shr311 = $xor274 >>> 16;
 $and312 = $shr311 & 255;
 $arrayidx313 = (34992 + ($and312<<2)|0);
 $72 = HEAP32[$arrayidx313>>2]|0;
 $shr316 = $xor205 >>> 24;
 $arrayidx318 = (36016 + ($shr316<<2)|0);
 $73 = HEAP32[$arrayidx318>>2]|0;
 $xor309 = $70 ^ $69;
 $xor314 = $xor309 ^ $71;
 $xor319 = $xor314 ^ $72;
 $xor320 = $xor319 ^ $73;
 $arrayidx323 = ((($expandedKey)) + 56|0);
 $74 = HEAP32[$arrayidx323>>2]|0;
 $and326 = $xor251 & 255;
 $arrayidx327 = (32944 + ($and326<<2)|0);
 $75 = HEAP32[$arrayidx327>>2]|0;
 $shr329 = $xor274 >>> 8;
 $and330 = $shr329 & 255;
 $arrayidx331 = (33968 + ($and330<<2)|0);
 $76 = HEAP32[$arrayidx331>>2]|0;
 $shr334 = $xor205 >>> 16;
 $and335 = $shr334 & 255;
 $arrayidx336 = (34992 + ($and335<<2)|0);
 $77 = HEAP32[$arrayidx336>>2]|0;
 $shr339 = $xor228 >>> 24;
 $arrayidx341 = (36016 + ($shr339<<2)|0);
 $78 = HEAP32[$arrayidx341>>2]|0;
 $xor332 = $75 ^ $74;
 $xor337 = $xor332 ^ $76;
 $xor342 = $xor337 ^ $77;
 $xor343 = $xor342 ^ $78;
 $arrayidx346 = ((($expandedKey)) + 60|0);
 $79 = HEAP32[$arrayidx346>>2]|0;
 $and349 = $xor274 & 255;
 $arrayidx350 = (32944 + ($and349<<2)|0);
 $80 = HEAP32[$arrayidx350>>2]|0;
 $shr352 = $xor205 >>> 8;
 $and353 = $shr352 & 255;
 $arrayidx354 = (33968 + ($and353<<2)|0);
 $81 = HEAP32[$arrayidx354>>2]|0;
 $shr357 = $xor228 >>> 16;
 $and358 = $shr357 & 255;
 $arrayidx359 = (34992 + ($and358<<2)|0);
 $82 = HEAP32[$arrayidx359>>2]|0;
 $shr362 = $xor251 >>> 24;
 $arrayidx364 = (36016 + ($shr362<<2)|0);
 $83 = HEAP32[$arrayidx364>>2]|0;
 $xor355 = $80 ^ $79;
 $xor360 = $xor355 ^ $81;
 $xor365 = $xor360 ^ $82;
 $xor366 = $xor365 ^ $83;
 $add$ptr368 = ((($expandedKey)) + 64|0);
 $84 = HEAP32[$add$ptr368>>2]|0;
 $and372 = $xor297 & 255;
 $arrayidx373 = (32944 + ($and372<<2)|0);
 $85 = HEAP32[$arrayidx373>>2]|0;
 $shr375 = $xor320 >>> 8;
 $and376 = $shr375 & 255;
 $arrayidx377 = (33968 + ($and376<<2)|0);
 $86 = HEAP32[$arrayidx377>>2]|0;
 $shr380 = $xor343 >>> 16;
 $and381 = $shr380 & 255;
 $arrayidx382 = (34992 + ($and381<<2)|0);
 $87 = HEAP32[$arrayidx382>>2]|0;
 $shr385 = $xor366 >>> 24;
 $arrayidx387 = (36016 + ($shr385<<2)|0);
 $88 = HEAP32[$arrayidx387>>2]|0;
 $xor378 = $85 ^ $84;
 $xor383 = $xor378 ^ $86;
 $xor388 = $xor383 ^ $87;
 $xor389 = $xor388 ^ $88;
 $arrayidx392 = ((($expandedKey)) + 68|0);
 $89 = HEAP32[$arrayidx392>>2]|0;
 $and395 = $xor320 & 255;
 $arrayidx396 = (32944 + ($and395<<2)|0);
 $90 = HEAP32[$arrayidx396>>2]|0;
 $shr398 = $xor343 >>> 8;
 $and399 = $shr398 & 255;
 $arrayidx400 = (33968 + ($and399<<2)|0);
 $91 = HEAP32[$arrayidx400>>2]|0;
 $shr403 = $xor366 >>> 16;
 $and404 = $shr403 & 255;
 $arrayidx405 = (34992 + ($and404<<2)|0);
 $92 = HEAP32[$arrayidx405>>2]|0;
 $shr408 = $xor297 >>> 24;
 $arrayidx410 = (36016 + ($shr408<<2)|0);
 $93 = HEAP32[$arrayidx410>>2]|0;
 $xor401 = $90 ^ $89;
 $xor406 = $xor401 ^ $91;
 $xor411 = $xor406 ^ $92;
 $xor412 = $xor411 ^ $93;
 $arrayidx415 = ((($expandedKey)) + 72|0);
 $94 = HEAP32[$arrayidx415>>2]|0;
 $and418 = $xor343 & 255;
 $arrayidx419 = (32944 + ($and418<<2)|0);
 $95 = HEAP32[$arrayidx419>>2]|0;
 $shr421 = $xor366 >>> 8;
 $and422 = $shr421 & 255;
 $arrayidx423 = (33968 + ($and422<<2)|0);
 $96 = HEAP32[$arrayidx423>>2]|0;
 $shr426 = $xor297 >>> 16;
 $and427 = $shr426 & 255;
 $arrayidx428 = (34992 + ($and427<<2)|0);
 $97 = HEAP32[$arrayidx428>>2]|0;
 $shr431 = $xor320 >>> 24;
 $arrayidx433 = (36016 + ($shr431<<2)|0);
 $98 = HEAP32[$arrayidx433>>2]|0;
 $xor424 = $95 ^ $94;
 $xor429 = $xor424 ^ $96;
 $xor434 = $xor429 ^ $97;
 $xor435 = $xor434 ^ $98;
 $arrayidx438 = ((($expandedKey)) + 76|0);
 $99 = HEAP32[$arrayidx438>>2]|0;
 $and441 = $xor366 & 255;
 $arrayidx442 = (32944 + ($and441<<2)|0);
 $100 = HEAP32[$arrayidx442>>2]|0;
 $shr444 = $xor297 >>> 8;
 $and445 = $shr444 & 255;
 $arrayidx446 = (33968 + ($and445<<2)|0);
 $101 = HEAP32[$arrayidx446>>2]|0;
 $shr449 = $xor320 >>> 16;
 $and450 = $shr449 & 255;
 $arrayidx451 = (34992 + ($and450<<2)|0);
 $102 = HEAP32[$arrayidx451>>2]|0;
 $shr454 = $xor343 >>> 24;
 $arrayidx456 = (36016 + ($shr454<<2)|0);
 $103 = HEAP32[$arrayidx456>>2]|0;
 $xor447 = $100 ^ $99;
 $xor452 = $xor447 ^ $101;
 $xor457 = $xor452 ^ $102;
 $xor458 = $xor457 ^ $103;
 $add$ptr460 = ((($expandedKey)) + 80|0);
 $104 = HEAP32[$add$ptr460>>2]|0;
 $and464 = $xor389 & 255;
 $arrayidx465 = (32944 + ($and464<<2)|0);
 $105 = HEAP32[$arrayidx465>>2]|0;
 $shr467 = $xor412 >>> 8;
 $and468 = $shr467 & 255;
 $arrayidx469 = (33968 + ($and468<<2)|0);
 $106 = HEAP32[$arrayidx469>>2]|0;
 $shr472 = $xor435 >>> 16;
 $and473 = $shr472 & 255;
 $arrayidx474 = (34992 + ($and473<<2)|0);
 $107 = HEAP32[$arrayidx474>>2]|0;
 $shr477 = $xor458 >>> 24;
 $arrayidx479 = (36016 + ($shr477<<2)|0);
 $108 = HEAP32[$arrayidx479>>2]|0;
 $xor470 = $105 ^ $104;
 $xor475 = $xor470 ^ $106;
 $xor480 = $xor475 ^ $107;
 $xor481 = $xor480 ^ $108;
 $arrayidx484 = ((($expandedKey)) + 84|0);
 $109 = HEAP32[$arrayidx484>>2]|0;
 $and487 = $xor412 & 255;
 $arrayidx488 = (32944 + ($and487<<2)|0);
 $110 = HEAP32[$arrayidx488>>2]|0;
 $shr490 = $xor435 >>> 8;
 $and491 = $shr490 & 255;
 $arrayidx492 = (33968 + ($and491<<2)|0);
 $111 = HEAP32[$arrayidx492>>2]|0;
 $shr495 = $xor458 >>> 16;
 $and496 = $shr495 & 255;
 $arrayidx497 = (34992 + ($and496<<2)|0);
 $112 = HEAP32[$arrayidx497>>2]|0;
 $shr500 = $xor389 >>> 24;
 $arrayidx502 = (36016 + ($shr500<<2)|0);
 $113 = HEAP32[$arrayidx502>>2]|0;
 $xor493 = $110 ^ $109;
 $xor498 = $xor493 ^ $111;
 $xor503 = $xor498 ^ $112;
 $xor504 = $xor503 ^ $113;
 $arrayidx507 = ((($expandedKey)) + 88|0);
 $114 = HEAP32[$arrayidx507>>2]|0;
 $and510 = $xor435 & 255;
 $arrayidx511 = (32944 + ($and510<<2)|0);
 $115 = HEAP32[$arrayidx511>>2]|0;
 $shr513 = $xor458 >>> 8;
 $and514 = $shr513 & 255;
 $arrayidx515 = (33968 + ($and514<<2)|0);
 $116 = HEAP32[$arrayidx515>>2]|0;
 $shr518 = $xor389 >>> 16;
 $and519 = $shr518 & 255;
 $arrayidx520 = (34992 + ($and519<<2)|0);
 $117 = HEAP32[$arrayidx520>>2]|0;
 $shr523 = $xor412 >>> 24;
 $arrayidx525 = (36016 + ($shr523<<2)|0);
 $118 = HEAP32[$arrayidx525>>2]|0;
 $xor516 = $115 ^ $114;
 $xor521 = $xor516 ^ $116;
 $xor526 = $xor521 ^ $117;
 $xor527 = $xor526 ^ $118;
 $arrayidx530 = ((($expandedKey)) + 92|0);
 $119 = HEAP32[$arrayidx530>>2]|0;
 $and533 = $xor458 & 255;
 $arrayidx534 = (32944 + ($and533<<2)|0);
 $120 = HEAP32[$arrayidx534>>2]|0;
 $shr536 = $xor389 >>> 8;
 $and537 = $shr536 & 255;
 $arrayidx538 = (33968 + ($and537<<2)|0);
 $121 = HEAP32[$arrayidx538>>2]|0;
 $shr541 = $xor412 >>> 16;
 $and542 = $shr541 & 255;
 $arrayidx543 = (34992 + ($and542<<2)|0);
 $122 = HEAP32[$arrayidx543>>2]|0;
 $shr546 = $xor435 >>> 24;
 $arrayidx548 = (36016 + ($shr546<<2)|0);
 $123 = HEAP32[$arrayidx548>>2]|0;
 $xor539 = $120 ^ $119;
 $xor544 = $xor539 ^ $121;
 $xor549 = $xor544 ^ $122;
 $xor550 = $xor549 ^ $123;
 $add$ptr552 = ((($expandedKey)) + 96|0);
 $124 = HEAP32[$add$ptr552>>2]|0;
 $and556 = $xor481 & 255;
 $arrayidx557 = (32944 + ($and556<<2)|0);
 $125 = HEAP32[$arrayidx557>>2]|0;
 $shr559 = $xor504 >>> 8;
 $and560 = $shr559 & 255;
 $arrayidx561 = (33968 + ($and560<<2)|0);
 $126 = HEAP32[$arrayidx561>>2]|0;
 $shr564 = $xor527 >>> 16;
 $and565 = $shr564 & 255;
 $arrayidx566 = (34992 + ($and565<<2)|0);
 $127 = HEAP32[$arrayidx566>>2]|0;
 $shr569 = $xor550 >>> 24;
 $arrayidx571 = (36016 + ($shr569<<2)|0);
 $128 = HEAP32[$arrayidx571>>2]|0;
 $xor562 = $125 ^ $124;
 $xor567 = $xor562 ^ $126;
 $xor572 = $xor567 ^ $127;
 $xor573 = $xor572 ^ $128;
 $arrayidx576 = ((($expandedKey)) + 100|0);
 $129 = HEAP32[$arrayidx576>>2]|0;
 $and579 = $xor504 & 255;
 $arrayidx580 = (32944 + ($and579<<2)|0);
 $130 = HEAP32[$arrayidx580>>2]|0;
 $shr582 = $xor527 >>> 8;
 $and583 = $shr582 & 255;
 $arrayidx584 = (33968 + ($and583<<2)|0);
 $131 = HEAP32[$arrayidx584>>2]|0;
 $shr587 = $xor550 >>> 16;
 $and588 = $shr587 & 255;
 $arrayidx589 = (34992 + ($and588<<2)|0);
 $132 = HEAP32[$arrayidx589>>2]|0;
 $shr592 = $xor481 >>> 24;
 $arrayidx594 = (36016 + ($shr592<<2)|0);
 $133 = HEAP32[$arrayidx594>>2]|0;
 $xor585 = $130 ^ $129;
 $xor590 = $xor585 ^ $131;
 $xor595 = $xor590 ^ $132;
 $xor596 = $xor595 ^ $133;
 $arrayidx599 = ((($expandedKey)) + 104|0);
 $134 = HEAP32[$arrayidx599>>2]|0;
 $and602 = $xor527 & 255;
 $arrayidx603 = (32944 + ($and602<<2)|0);
 $135 = HEAP32[$arrayidx603>>2]|0;
 $shr605 = $xor550 >>> 8;
 $and606 = $shr605 & 255;
 $arrayidx607 = (33968 + ($and606<<2)|0);
 $136 = HEAP32[$arrayidx607>>2]|0;
 $shr610 = $xor481 >>> 16;
 $and611 = $shr610 & 255;
 $arrayidx612 = (34992 + ($and611<<2)|0);
 $137 = HEAP32[$arrayidx612>>2]|0;
 $shr615 = $xor504 >>> 24;
 $arrayidx617 = (36016 + ($shr615<<2)|0);
 $138 = HEAP32[$arrayidx617>>2]|0;
 $xor608 = $135 ^ $134;
 $xor613 = $xor608 ^ $136;
 $xor618 = $xor613 ^ $137;
 $xor619 = $xor618 ^ $138;
 $arrayidx622 = ((($expandedKey)) + 108|0);
 $139 = HEAP32[$arrayidx622>>2]|0;
 $and625 = $xor550 & 255;
 $arrayidx626 = (32944 + ($and625<<2)|0);
 $140 = HEAP32[$arrayidx626>>2]|0;
 $shr628 = $xor481 >>> 8;
 $and629 = $shr628 & 255;
 $arrayidx630 = (33968 + ($and629<<2)|0);
 $141 = HEAP32[$arrayidx630>>2]|0;
 $shr633 = $xor504 >>> 16;
 $and634 = $shr633 & 255;
 $arrayidx635 = (34992 + ($and634<<2)|0);
 $142 = HEAP32[$arrayidx635>>2]|0;
 $shr638 = $xor527 >>> 24;
 $arrayidx640 = (36016 + ($shr638<<2)|0);
 $143 = HEAP32[$arrayidx640>>2]|0;
 $xor631 = $140 ^ $139;
 $xor636 = $xor631 ^ $141;
 $xor641 = $xor636 ^ $142;
 $xor642 = $xor641 ^ $143;
 $add$ptr644 = ((($expandedKey)) + 112|0);
 $144 = HEAP32[$add$ptr644>>2]|0;
 $and648 = $xor573 & 255;
 $arrayidx649 = (32944 + ($and648<<2)|0);
 $145 = HEAP32[$arrayidx649>>2]|0;
 $shr651 = $xor596 >>> 8;
 $and652 = $shr651 & 255;
 $arrayidx653 = (33968 + ($and652<<2)|0);
 $146 = HEAP32[$arrayidx653>>2]|0;
 $shr656 = $xor619 >>> 16;
 $and657 = $shr656 & 255;
 $arrayidx658 = (34992 + ($and657<<2)|0);
 $147 = HEAP32[$arrayidx658>>2]|0;
 $shr661 = $xor642 >>> 24;
 $arrayidx663 = (36016 + ($shr661<<2)|0);
 $148 = HEAP32[$arrayidx663>>2]|0;
 $xor654 = $145 ^ $144;
 $xor659 = $xor654 ^ $146;
 $xor664 = $xor659 ^ $147;
 $xor665 = $xor664 ^ $148;
 $arrayidx668 = ((($expandedKey)) + 116|0);
 $149 = HEAP32[$arrayidx668>>2]|0;
 $and671 = $xor596 & 255;
 $arrayidx672 = (32944 + ($and671<<2)|0);
 $150 = HEAP32[$arrayidx672>>2]|0;
 $shr674 = $xor619 >>> 8;
 $and675 = $shr674 & 255;
 $arrayidx676 = (33968 + ($and675<<2)|0);
 $151 = HEAP32[$arrayidx676>>2]|0;
 $shr679 = $xor642 >>> 16;
 $and680 = $shr679 & 255;
 $arrayidx681 = (34992 + ($and680<<2)|0);
 $152 = HEAP32[$arrayidx681>>2]|0;
 $shr684 = $xor573 >>> 24;
 $arrayidx686 = (36016 + ($shr684<<2)|0);
 $153 = HEAP32[$arrayidx686>>2]|0;
 $xor677 = $150 ^ $149;
 $xor682 = $xor677 ^ $151;
 $xor687 = $xor682 ^ $152;
 $xor688 = $xor687 ^ $153;
 $arrayidx691 = ((($expandedKey)) + 120|0);
 $154 = HEAP32[$arrayidx691>>2]|0;
 $and694 = $xor619 & 255;
 $arrayidx695 = (32944 + ($and694<<2)|0);
 $155 = HEAP32[$arrayidx695>>2]|0;
 $shr697 = $xor642 >>> 8;
 $and698 = $shr697 & 255;
 $arrayidx699 = (33968 + ($and698<<2)|0);
 $156 = HEAP32[$arrayidx699>>2]|0;
 $shr702 = $xor573 >>> 16;
 $and703 = $shr702 & 255;
 $arrayidx704 = (34992 + ($and703<<2)|0);
 $157 = HEAP32[$arrayidx704>>2]|0;
 $shr707 = $xor596 >>> 24;
 $arrayidx709 = (36016 + ($shr707<<2)|0);
 $158 = HEAP32[$arrayidx709>>2]|0;
 $xor700 = $155 ^ $154;
 $xor705 = $xor700 ^ $156;
 $xor710 = $xor705 ^ $157;
 $xor711 = $xor710 ^ $158;
 $arrayidx714 = ((($expandedKey)) + 124|0);
 $159 = HEAP32[$arrayidx714>>2]|0;
 $and717 = $xor642 & 255;
 $arrayidx718 = (32944 + ($and717<<2)|0);
 $160 = HEAP32[$arrayidx718>>2]|0;
 $shr720 = $xor573 >>> 8;
 $and721 = $shr720 & 255;
 $arrayidx722 = (33968 + ($and721<<2)|0);
 $161 = HEAP32[$arrayidx722>>2]|0;
 $shr725 = $xor596 >>> 16;
 $and726 = $shr725 & 255;
 $arrayidx727 = (34992 + ($and726<<2)|0);
 $162 = HEAP32[$arrayidx727>>2]|0;
 $shr730 = $xor619 >>> 24;
 $arrayidx732 = (36016 + ($shr730<<2)|0);
 $163 = HEAP32[$arrayidx732>>2]|0;
 $xor723 = $160 ^ $159;
 $xor728 = $xor723 ^ $161;
 $xor733 = $xor728 ^ $162;
 $xor734 = $xor733 ^ $163;
 $add$ptr736 = ((($expandedKey)) + 128|0);
 $164 = HEAP32[$add$ptr736>>2]|0;
 $and740 = $xor665 & 255;
 $arrayidx741 = (32944 + ($and740<<2)|0);
 $165 = HEAP32[$arrayidx741>>2]|0;
 $shr743 = $xor688 >>> 8;
 $and744 = $shr743 & 255;
 $arrayidx745 = (33968 + ($and744<<2)|0);
 $166 = HEAP32[$arrayidx745>>2]|0;
 $shr748 = $xor711 >>> 16;
 $and749 = $shr748 & 255;
 $arrayidx750 = (34992 + ($and749<<2)|0);
 $167 = HEAP32[$arrayidx750>>2]|0;
 $shr753 = $xor734 >>> 24;
 $arrayidx755 = (36016 + ($shr753<<2)|0);
 $168 = HEAP32[$arrayidx755>>2]|0;
 $xor746 = $165 ^ $164;
 $xor751 = $xor746 ^ $166;
 $xor756 = $xor751 ^ $167;
 $xor757 = $xor756 ^ $168;
 $arrayidx760 = ((($expandedKey)) + 132|0);
 $169 = HEAP32[$arrayidx760>>2]|0;
 $and763 = $xor688 & 255;
 $arrayidx764 = (32944 + ($and763<<2)|0);
 $170 = HEAP32[$arrayidx764>>2]|0;
 $shr766 = $xor711 >>> 8;
 $and767 = $shr766 & 255;
 $arrayidx768 = (33968 + ($and767<<2)|0);
 $171 = HEAP32[$arrayidx768>>2]|0;
 $shr771 = $xor734 >>> 16;
 $and772 = $shr771 & 255;
 $arrayidx773 = (34992 + ($and772<<2)|0);
 $172 = HEAP32[$arrayidx773>>2]|0;
 $shr776 = $xor665 >>> 24;
 $arrayidx778 = (36016 + ($shr776<<2)|0);
 $173 = HEAP32[$arrayidx778>>2]|0;
 $xor769 = $170 ^ $169;
 $xor774 = $xor769 ^ $171;
 $xor779 = $xor774 ^ $172;
 $xor780 = $xor779 ^ $173;
 $arrayidx783 = ((($expandedKey)) + 136|0);
 $174 = HEAP32[$arrayidx783>>2]|0;
 $and786 = $xor711 & 255;
 $arrayidx787 = (32944 + ($and786<<2)|0);
 $175 = HEAP32[$arrayidx787>>2]|0;
 $shr789 = $xor734 >>> 8;
 $and790 = $shr789 & 255;
 $arrayidx791 = (33968 + ($and790<<2)|0);
 $176 = HEAP32[$arrayidx791>>2]|0;
 $shr794 = $xor665 >>> 16;
 $and795 = $shr794 & 255;
 $arrayidx796 = (34992 + ($and795<<2)|0);
 $177 = HEAP32[$arrayidx796>>2]|0;
 $shr799 = $xor688 >>> 24;
 $arrayidx801 = (36016 + ($shr799<<2)|0);
 $178 = HEAP32[$arrayidx801>>2]|0;
 $xor792 = $175 ^ $174;
 $xor797 = $xor792 ^ $176;
 $xor802 = $xor797 ^ $177;
 $xor803 = $xor802 ^ $178;
 $arrayidx806 = ((($expandedKey)) + 140|0);
 $179 = HEAP32[$arrayidx806>>2]|0;
 $and809 = $xor734 & 255;
 $arrayidx810 = (32944 + ($and809<<2)|0);
 $180 = HEAP32[$arrayidx810>>2]|0;
 $shr812 = $xor665 >>> 8;
 $and813 = $shr812 & 255;
 $arrayidx814 = (33968 + ($and813<<2)|0);
 $181 = HEAP32[$arrayidx814>>2]|0;
 $shr817 = $xor688 >>> 16;
 $and818 = $shr817 & 255;
 $arrayidx819 = (34992 + ($and818<<2)|0);
 $182 = HEAP32[$arrayidx819>>2]|0;
 $shr822 = $xor711 >>> 24;
 $arrayidx824 = (36016 + ($shr822<<2)|0);
 $183 = HEAP32[$arrayidx824>>2]|0;
 $xor815 = $180 ^ $179;
 $xor820 = $xor815 ^ $181;
 $xor825 = $xor820 ^ $182;
 $xor826 = $xor825 ^ $183;
 $add$ptr828 = ((($expandedKey)) + 144|0);
 $184 = HEAP32[$add$ptr828>>2]|0;
 $and832 = $xor757 & 255;
 $arrayidx833 = (32944 + ($and832<<2)|0);
 $185 = HEAP32[$arrayidx833>>2]|0;
 $shr835 = $xor780 >>> 8;
 $and836 = $shr835 & 255;
 $arrayidx837 = (33968 + ($and836<<2)|0);
 $186 = HEAP32[$arrayidx837>>2]|0;
 $shr840 = $xor803 >>> 16;
 $and841 = $shr840 & 255;
 $arrayidx842 = (34992 + ($and841<<2)|0);
 $187 = HEAP32[$arrayidx842>>2]|0;
 $shr845 = $xor826 >>> 24;
 $arrayidx847 = (36016 + ($shr845<<2)|0);
 $188 = HEAP32[$arrayidx847>>2]|0;
 $xor838 = $185 ^ $184;
 $xor843 = $xor838 ^ $186;
 $xor848 = $xor843 ^ $187;
 $xor849 = $xor848 ^ $188;
 $arrayidx852 = ((($expandedKey)) + 148|0);
 $189 = HEAP32[$arrayidx852>>2]|0;
 $and855 = $xor780 & 255;
 $arrayidx856 = (32944 + ($and855<<2)|0);
 $190 = HEAP32[$arrayidx856>>2]|0;
 $shr858 = $xor803 >>> 8;
 $and859 = $shr858 & 255;
 $arrayidx860 = (33968 + ($and859<<2)|0);
 $191 = HEAP32[$arrayidx860>>2]|0;
 $shr863 = $xor826 >>> 16;
 $and864 = $shr863 & 255;
 $arrayidx865 = (34992 + ($and864<<2)|0);
 $192 = HEAP32[$arrayidx865>>2]|0;
 $shr868 = $xor757 >>> 24;
 $arrayidx870 = (36016 + ($shr868<<2)|0);
 $193 = HEAP32[$arrayidx870>>2]|0;
 $xor861 = $190 ^ $189;
 $xor866 = $xor861 ^ $191;
 $xor871 = $xor866 ^ $192;
 $xor872 = $xor871 ^ $193;
 $arrayidx875 = ((($expandedKey)) + 152|0);
 $194 = HEAP32[$arrayidx875>>2]|0;
 $and878 = $xor803 & 255;
 $arrayidx879 = (32944 + ($and878<<2)|0);
 $195 = HEAP32[$arrayidx879>>2]|0;
 $shr881 = $xor826 >>> 8;
 $and882 = $shr881 & 255;
 $arrayidx883 = (33968 + ($and882<<2)|0);
 $196 = HEAP32[$arrayidx883>>2]|0;
 $shr886 = $xor757 >>> 16;
 $and887 = $shr886 & 255;
 $arrayidx888 = (34992 + ($and887<<2)|0);
 $197 = HEAP32[$arrayidx888>>2]|0;
 $shr891 = $xor780 >>> 24;
 $arrayidx893 = (36016 + ($shr891<<2)|0);
 $198 = HEAP32[$arrayidx893>>2]|0;
 $xor884 = $195 ^ $194;
 $xor889 = $xor884 ^ $196;
 $xor894 = $xor889 ^ $197;
 $xor895 = $xor894 ^ $198;
 $arrayidx898 = ((($expandedKey)) + 156|0);
 $199 = HEAP32[$arrayidx898>>2]|0;
 $and901 = $xor826 & 255;
 $arrayidx902 = (32944 + ($and901<<2)|0);
 $200 = HEAP32[$arrayidx902>>2]|0;
 $shr904 = $xor757 >>> 8;
 $and905 = $shr904 & 255;
 $arrayidx906 = (33968 + ($and905<<2)|0);
 $201 = HEAP32[$arrayidx906>>2]|0;
 $shr909 = $xor780 >>> 16;
 $and910 = $shr909 & 255;
 $arrayidx911 = (34992 + ($and910<<2)|0);
 $202 = HEAP32[$arrayidx911>>2]|0;
 $shr914 = $xor803 >>> 24;
 $arrayidx916 = (36016 + ($shr914<<2)|0);
 $203 = HEAP32[$arrayidx916>>2]|0;
 $xor907 = $200 ^ $199;
 $xor912 = $xor907 ^ $201;
 $xor917 = $xor912 ^ $202;
 $xor918 = $xor917 ^ $203;
 HEAP32[$out>>2] = $xor849;
 $add$ptr923 = ((($out)) + 4|0);
 HEAP32[$add$ptr923>>2] = $xor872;
 $add$ptr925 = ((($out)) + 8|0);
 HEAP32[$add$ptr925>>2] = $xor895;
 $add$ptr927 = ((($out)) + 12|0);
 HEAP32[$add$ptr927>>2] = $xor918;
 return;
}
function _hash_extra_blake($data,$length,$hash) {
 $data = $data|0;
 $length = $length|0;
 $hash = $hash|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _blake256_hash($hash,$data,$length,0);
 return;
}
function _hash_extra_groestl($data,$length,$hash) {
 $data = $data|0;
 $length = $length|0;
 $hash = $hash|0;
 var $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = $length << 3;
 _groestl($data,$mul,0,$hash);
 return;
}
function _hash_extra_jh($data,$length,$hash) {
 $data = $data|0;
 $length = $length|0;
 $hash = $hash|0;
 var $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = $length << 3;
 (_jh_hash(256,$data,$mul,0,$hash)|0);
 return;
}
function _hash_extra_skein($data,$length,$hash) {
 $data = $data|0;
 $length = $length|0;
 $hash = $hash|0;
 var $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = $length << 3;
 (_skein_hash(256,$data,$mul,$hash)|0);
 return;
}
function _jh_hash($hashbitlen,$data,$0,$1,$hashval) {
 $hashbitlen = $hashbitlen|0;
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 $hashval = $hashval|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $add$ptr133$i = 0, $add$ptr1385$i = 0, $add$ptr1433$i = 0, $add$ptr1471$i = 0, $add$ptr56$i = 0, $add$ptr6$i = 0, $add$ptr69$i = 0, $arraydecay$i = 0, $arraydecay$i8 = 0, $arraydecay10$i = 0, $arraydecay4$i = 0, $arraydecay54$i = 0, $arraydecay67$i = 0, $arraydecay7$i = 0, $arraydecay83$i = 0, $arrayidx10$i = 0, $arrayidx100$i = 0, $arrayidx106$i = 0;
 var $arrayidx112$i = 0, $arrayidx118$i = 0, $arrayidx124$i = 0, $arrayidx130$i = 0, $arrayidx16$i = 0, $arrayidx22$i = 0, $arrayidx28$i = 0, $arrayidx34$i = 0, $arrayidx40$i = 0, $arrayidx46$i = 0, $arrayidx5$i = 0, $arrayidx79$i = 0, $arrayidx88$i = 0, $arrayidx94$i = 0, $cmp6511$i = 0, $conv72$i = 0, $conv80$i = 0, $conv81$i = 0, $conv81$i22 = 0, $databitlen$i = 0;
 var $datasize_in_buffer$i10 = 0, $i$110$i = 0, $idxprom$i = 0, $index$1$lcssa$off0$i = 0, $or$i = 0, $retval$0 = 0, $sh_prom$i = 0, $shl$i = 0, $state = 0, $uglygep$i = 0, $uglygep15$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $state = sp;
 $2 = (($hashbitlen) + -224)|0;
 $3 = $2 >>> 5;
 $4 = $2 << 27;
 $5 = $3 | $4;
 switch ($5|0) {
 case 0: case 1: case 5: case 9:  {
  break;
 }
 default: {
  $retval$0 = 2;
  STACKTOP = sp;return ($retval$0|0);
 }
 }
 $databitlen$i = ((($state)) + 8|0);
 ;HEAP32[$databitlen$i>>2]=0|0;HEAP32[$databitlen$i+4>>2]=0|0;HEAP32[$databitlen$i+8>>2]=0|0;HEAP32[$databitlen$i+12>>2]=0|0;
 HEAP32[$state>>2] = $hashbitlen;
 switch ($5|0) {
 case 0:  {
  $arraydecay$i = ((($state)) + 32|0);
  dest=$arraydecay$i; src=37040; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 1:  {
  $arraydecay4$i = ((($state)) + 32|0);
  dest=$arraydecay4$i; src=37168; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 5:  {
  $arraydecay7$i = ((($state)) + 32|0);
  dest=$arraydecay7$i; src=37296; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 9:  {
  $arraydecay10$i = ((($state)) + 32|0);
  dest=$arraydecay10$i; src=37424; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  break;
 }
 default: {
 }
 }
 $6 = $databitlen$i;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $datasize_in_buffer$i10 = ((($state)) + 16|0);
 $10 = ($1>>>0)>(0);
 $11 = ($0>>>0)>(511);
 $12 = ($1|0)==(0);
 $13 = $12 & $11;
 $14 = $10 | $13;
 if ($14) {
  $arraydecay54$i = ((($state)) + 160|0);
  $15 = 0;$16 = 0;$19 = $0;$20 = $1;
  while(1) {
   $add$ptr56$i = (($data) + ($15)|0);
   dest=$arraydecay54$i; src=$add$ptr56$i; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   _F8($state);
   $17 = (_i64Add(($15|0),($16|0),64,0)|0);
   $18 = (getTempRet0() | 0);
   $21 = (_i64Add(($19|0),($20|0),-512,-1)|0);
   $22 = (getTempRet0() | 0);
   $23 = ($22>>>0)>(0);
   $24 = ($21>>>0)>(511);
   $25 = ($22|0)==(0);
   $26 = $25 & $24;
   $27 = $23 | $26;
   if ($27) {
    $15 = $17;$16 = $18;$19 = $21;$20 = $22;
   } else {
    break;
   }
  }
  $29 = $21;$31 = $22;$index$1$lcssa$off0$i = $17;
 } else {
  $29 = $0;$31 = $1;$index$1$lcssa$off0$i = 0;
 }
 $28 = ($29|0)==(0);
 $30 = ($31|0)==(0);
 $32 = $28 & $30;
 if (!($32)) {
  $33 = $29 & 7;
  $34 = ($33|0)==(0);
  $35 = (0)==(0);
  $36 = $34 & $35;
  $arraydecay67$i = ((($state)) + 160|0);
  $add$ptr69$i = (($data) + ($index$1$lcssa$off0$i)|0);
  $37 = (_bitshift64Lshr(($29|0),($31|0),3)|0);
  $38 = (getTempRet0() | 0);
  $conv72$i = $37 & 63;
  if ($36) {
   _memcpy(($arraydecay67$i|0),($add$ptr69$i|0),($conv72$i|0))|0;
  } else {
   $conv81$i22 = (($conv72$i) + 1)|0;
   _memcpy(($arraydecay67$i|0),($add$ptr69$i|0),($conv81$i22|0))|0;
  }
  $39 = $datasize_in_buffer$i10;
  $40 = $39;
  HEAP32[$40>>2] = $29;
  $41 = (($39) + 4)|0;
  $42 = $41;
  HEAP32[$42>>2] = $31;
 }
 $43 = $databitlen$i;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43) + 4)|0;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = $45 & 511;
 $50 = ($49|0)==(0);
 $51 = (0)==(0);
 $52 = $50 & $51;
 if ($52) {
  $arraydecay$i8 = ((($state)) + 160|0);
  dest=$arraydecay$i8; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP8[$arraydecay$i8>>0] = -128;
  $53 = $45&255;
  $arrayidx5$i = ((($state)) + 223|0);
  HEAP8[$arrayidx5$i>>0] = $53;
  $54 = (_bitshift64Lshr(($45|0),($48|0),8)|0);
  $55 = (getTempRet0() | 0);
  $56 = $54&255;
  $arrayidx10$i = ((($state)) + 222|0);
  HEAP8[$arrayidx10$i>>0] = $56;
  $57 = (_bitshift64Lshr(($45|0),($48|0),16)|0);
  $58 = (getTempRet0() | 0);
  $59 = $57&255;
  $arrayidx16$i = ((($state)) + 221|0);
  HEAP8[$arrayidx16$i>>0] = $59;
  $60 = (_bitshift64Lshr(($45|0),($48|0),24)|0);
  $61 = (getTempRet0() | 0);
  $62 = $60&255;
  $arrayidx22$i = ((($state)) + 220|0);
  HEAP8[$arrayidx22$i>>0] = $62;
  $63 = $48&255;
  $arrayidx28$i = ((($state)) + 219|0);
  HEAP8[$arrayidx28$i>>0] = $63;
  $64 = (_bitshift64Lshr(($45|0),($48|0),40)|0);
  $65 = (getTempRet0() | 0);
  $66 = $64&255;
  $arrayidx34$i = ((($state)) + 218|0);
  HEAP8[$arrayidx34$i>>0] = $66;
  $67 = (_bitshift64Lshr(($45|0),($48|0),48)|0);
  $68 = (getTempRet0() | 0);
  $69 = $67&255;
  $arrayidx40$i = ((($state)) + 217|0);
  HEAP8[$arrayidx40$i>>0] = $69;
  $70 = (_bitshift64Lshr(($45|0),($48|0),56)|0);
  $71 = (getTempRet0() | 0);
  $72 = $70&255;
  $arrayidx46$i = ((($state)) + 216|0);
  HEAP8[$arrayidx46$i>>0] = $72;
  _F8($state);
 } else {
  $73 = $datasize_in_buffer$i10;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($73) + 4)|0;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = $75 & 7;
  $80 = ($79|0)==(0);
  $81 = (0)==(0);
  $82 = $80 & $81;
  $83 = (_bitshift64Lshr(($49|0),0,3)|0);
  $84 = (getTempRet0() | 0);
  if ($82) {
   $85 = (($83) + 160)|0;
   $uglygep$i = (($state) + ($85)|0);
   $86 = (64 - ($83))|0;
   _memset(($uglygep$i|0),0,($86|0))|0;
  } else {
   $i$110$i = (($83) + 1)|0;
   $cmp6511$i = ($i$110$i>>>0)<(64);
   if ($cmp6511$i) {
    $87 = $83 ^ 63;
    $88 = (($83) + 161)|0;
    $uglygep15$i = (($state) + ($88)|0);
    _memset(($uglygep15$i|0),0,($87|0))|0;
   }
  }
  $89 = $45 & 7;
  $sh_prom$i = $89 ^ 7;
  $shl$i = 1 << $sh_prom$i;
  $90 = (_bitshift64Lshr(($45|0),($48|0),3)|0);
  $91 = (getTempRet0() | 0);
  $idxprom$i = $90 & 63;
  $arrayidx79$i = (((($state)) + 160|0) + ($idxprom$i)|0);
  $92 = HEAP8[$arrayidx79$i>>0]|0;
  $conv80$i = $92&255;
  $or$i = $shl$i | $conv80$i;
  $conv81$i = $or$i&255;
  HEAP8[$arrayidx79$i>>0] = $conv81$i;
  _F8($state);
  $arraydecay83$i = ((($state)) + 160|0);
  dest=$arraydecay83$i; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $93 = $databitlen$i;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($93) + 4)|0;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = $95&255;
  $arrayidx88$i = ((($state)) + 223|0);
  HEAP8[$arrayidx88$i>>0] = $99;
  $100 = (_bitshift64Lshr(($95|0),($98|0),8)|0);
  $101 = (getTempRet0() | 0);
  $102 = $100&255;
  $arrayidx94$i = ((($state)) + 222|0);
  HEAP8[$arrayidx94$i>>0] = $102;
  $103 = (_bitshift64Lshr(($95|0),($98|0),16)|0);
  $104 = (getTempRet0() | 0);
  $105 = $103&255;
  $arrayidx100$i = ((($state)) + 221|0);
  HEAP8[$arrayidx100$i>>0] = $105;
  $106 = (_bitshift64Lshr(($95|0),($98|0),24)|0);
  $107 = (getTempRet0() | 0);
  $108 = $106&255;
  $arrayidx106$i = ((($state)) + 220|0);
  HEAP8[$arrayidx106$i>>0] = $108;
  $109 = $98&255;
  $arrayidx112$i = ((($state)) + 219|0);
  HEAP8[$arrayidx112$i>>0] = $109;
  $110 = (_bitshift64Lshr(($95|0),($98|0),40)|0);
  $111 = (getTempRet0() | 0);
  $112 = $110&255;
  $arrayidx118$i = ((($state)) + 218|0);
  HEAP8[$arrayidx118$i>>0] = $112;
  $113 = (_bitshift64Lshr(($95|0),($98|0),48)|0);
  $114 = (getTempRet0() | 0);
  $115 = $113&255;
  $arrayidx124$i = ((($state)) + 217|0);
  HEAP8[$arrayidx124$i>>0] = $115;
  $116 = (_bitshift64Lshr(($95|0),($98|0),56)|0);
  $117 = (getTempRet0() | 0);
  $118 = $116&255;
  $arrayidx130$i = ((($state)) + 216|0);
  HEAP8[$arrayidx130$i>>0] = $118;
  _F8($state);
 }
 $119 = HEAP32[$state>>2]|0;
 $120 = (($119) + -224)|0;
 $121 = $120 >>> 5;
 $122 = $120 << 27;
 $123 = $121 | $122;
 switch ($123|0) {
 case 0:  {
  $add$ptr6$i = ((($state)) + 96|0);
  $add$ptr133$i = ((($add$ptr6$i)) + 36|0);
  dest=$hashval; src=$add$ptr133$i; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
  break;
 }
 case 1:  {
  $add$ptr1385$i = ((($state)) + 128|0);
  dest=$hashval; src=$add$ptr1385$i; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
  break;
 }
 case 5:  {
  $add$ptr1433$i = ((($state)) + 112|0);
  dest=$hashval; src=$add$ptr1433$i; stop=dest+48|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
  break;
 }
 case 9:  {
  $add$ptr1471$i = ((($state)) + 96|0);
  dest=$hashval; src=$add$ptr1471$i; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
  break;
 }
 default: {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 }
 return (0)|0;
}
function _F8($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0;
 var $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0;
 var $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0;
 var $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0;
 var $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0;
 var $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0;
 var $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0;
 var $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0;
 var $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0;
 var $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0;
 var $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0;
 var $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0;
 var $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0;
 var $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0;
 var $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0;
 var $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0;
 var $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0;
 var $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0;
 var $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0;
 var $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0;
 var $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0;
 var $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0;
 var $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0;
 var $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0;
 var $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0;
 var $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0;
 var $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0;
 var $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0;
 var $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $arraydecay = 0, $arraydecay$i = 0, $arraydecay1348$i = 0, $arraydecay1792$i = 0, $arraydecay2236$i = 0, $arraydecay2672$i = 0, $arraydecay460$i = 0, $arraydecay904$i = 0, $arrayidx$1 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $arrayidx12$1$i = 0, $arrayidx12$phi$trans$insert$i = 0, $arrayidx1350$1$i = 0, $arrayidx1368$1$i = 0;
 var $arrayidx1368$i = 0, $arrayidx1794$1$i = 0, $arrayidx1812$1$i = 0, $arrayidx1812$i = 0, $arrayidx21$1$i = 0, $arrayidx21$i = 0, $arrayidx2238$1$i = 0, $arrayidx2256$1$i = 0, $arrayidx2256$i = 0, $arrayidx26$1$i = 0, $arrayidx2674$1$i = 0, $arrayidx2692$1$i = 0, $arrayidx2692$i = 0, $arrayidx34$1$i = 0, $arrayidx34$phi$trans$insert$i = 0, $arrayidx4 = 0, $arrayidx4$1 = 0, $arrayidx4$1$i = 0, $arrayidx4$2 = 0, $arrayidx4$3 = 0;
 var $arrayidx4$4 = 0, $arrayidx4$5 = 0, $arrayidx4$6 = 0, $arrayidx4$7 = 0, $arrayidx4$i = 0, $arrayidx42$1$i = 0, $arrayidx42$i = 0, $arrayidx462$1$i = 0, $arrayidx480$1$i = 0, $arrayidx480$i = 0, $arrayidx906$1$i = 0, $arrayidx924$1$i = 0, $arrayidx924$i = 0, $idxprom1346$i = 0, $idxprom1790$i = 0, $idxprom2234$i = 0, $idxprom2670$i = 0, $idxprom458$i = 0, $idxprom902$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $arraydecay = ((($state)) + 160|0);
 $0 = $arraydecay;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $arrayidx4 = ((($state)) + 32|0);
 $6 = $arrayidx4;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $8 ^ $2;
 $13 = $11 ^ $5;
 $14 = $arrayidx4;
 $15 = $14;
 HEAP32[$15>>2] = $12;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 $arrayidx$1 = ((($state)) + 168|0);
 $18 = $arrayidx$1;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $arrayidx4$1 = ((($state)) + 40|0);
 $24 = $arrayidx4$1;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $26 ^ $20;
 $31 = $29 ^ $23;
 $32 = $arrayidx4$1;
 $33 = $32;
 HEAP32[$33>>2] = $30;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $31;
 $arrayidx$2 = ((($state)) + 176|0);
 $36 = $arrayidx$2;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $arrayidx4$2 = ((($state)) + 48|0);
 $42 = $arrayidx4$2;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = $44 ^ $38;
 $49 = $47 ^ $41;
 $50 = $arrayidx4$2;
 $51 = $50;
 HEAP32[$51>>2] = $48;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = $49;
 $arrayidx$3 = ((($state)) + 184|0);
 $54 = $arrayidx$3;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + 4)|0;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $arrayidx4$3 = ((($state)) + 56|0);
 $60 = $arrayidx4$3;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = $62 ^ $56;
 $67 = $65 ^ $59;
 $68 = $arrayidx4$3;
 $69 = $68;
 HEAP32[$69>>2] = $66;
 $70 = (($68) + 4)|0;
 $71 = $70;
 HEAP32[$71>>2] = $67;
 $arrayidx$4 = ((($state)) + 192|0);
 $72 = $arrayidx$4;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $arrayidx4$4 = ((($state)) + 64|0);
 $78 = $arrayidx4$4;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + 4)|0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = $80 ^ $74;
 $85 = $83 ^ $77;
 $86 = $arrayidx4$4;
 $87 = $86;
 HEAP32[$87>>2] = $84;
 $88 = (($86) + 4)|0;
 $89 = $88;
 HEAP32[$89>>2] = $85;
 $arrayidx$5 = ((($state)) + 200|0);
 $90 = $arrayidx$5;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = (($90) + 4)|0;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $arrayidx4$5 = ((($state)) + 72|0);
 $96 = $arrayidx4$5;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = $98 ^ $92;
 $103 = $101 ^ $95;
 $104 = $arrayidx4$5;
 $105 = $104;
 HEAP32[$105>>2] = $102;
 $106 = (($104) + 4)|0;
 $107 = $106;
 HEAP32[$107>>2] = $103;
 $arrayidx$6 = ((($state)) + 208|0);
 $108 = $arrayidx$6;
 $109 = $108;
 $110 = HEAP32[$109>>2]|0;
 $111 = (($108) + 4)|0;
 $112 = $111;
 $113 = HEAP32[$112>>2]|0;
 $arrayidx4$6 = ((($state)) + 80|0);
 $114 = $arrayidx4$6;
 $115 = $114;
 $116 = HEAP32[$115>>2]|0;
 $117 = (($114) + 4)|0;
 $118 = $117;
 $119 = HEAP32[$118>>2]|0;
 $120 = $116 ^ $110;
 $121 = $119 ^ $113;
 $122 = $arrayidx4$6;
 $123 = $122;
 HEAP32[$123>>2] = $120;
 $124 = (($122) + 4)|0;
 $125 = $124;
 HEAP32[$125>>2] = $121;
 $arrayidx$7 = ((($state)) + 216|0);
 $126 = $arrayidx$7;
 $127 = $126;
 $128 = HEAP32[$127>>2]|0;
 $129 = (($126) + 4)|0;
 $130 = $129;
 $131 = HEAP32[$130>>2]|0;
 $arrayidx4$7 = ((($state)) + 88|0);
 $132 = $arrayidx4$7;
 $133 = $132;
 $134 = HEAP32[$133>>2]|0;
 $135 = (($132) + 4)|0;
 $136 = $135;
 $137 = HEAP32[$136>>2]|0;
 $138 = $134 ^ $128;
 $139 = $137 ^ $131;
 $140 = $arrayidx4$7;
 $141 = $140;
 HEAP32[$141>>2] = $138;
 $142 = (($140) + 4)|0;
 $143 = $142;
 HEAP32[$143>>2] = $139;
 $arrayidx12$phi$trans$insert$i = ((($state)) + 144|0);
 $144 = $arrayidx12$phi$trans$insert$i;
 $145 = $144;
 $146 = HEAP32[$145>>2]|0;
 $147 = (($144) + 4)|0;
 $148 = $147;
 $149 = HEAP32[$148>>2]|0;
 $arrayidx34$phi$trans$insert$i = ((($state)) + 112|0);
 $150 = $arrayidx34$phi$trans$insert$i;
 $151 = $150;
 $152 = HEAP32[$151>>2]|0;
 $153 = (($150) + 4)|0;
 $154 = $153;
 $155 = HEAP32[$154>>2]|0;
 $arrayidx4$i = ((($state)) + 128|0);
 $arrayidx21$i = ((($state)) + 96|0);
 $arrayidx4$1$i = ((($state)) + 136|0);
 $arrayidx12$1$i = ((($state)) + 152|0);
 $arrayidx21$1$i = ((($state)) + 104|0);
 $arrayidx34$1$i = ((($state)) + 120|0);
 $156 = $arrayidx4$i;
 $157 = $156;
 $158 = HEAP32[$157>>2]|0;
 $159 = (($156) + 4)|0;
 $160 = $159;
 $161 = HEAP32[$160>>2]|0;
 $162 = $arrayidx21$i;
 $163 = $162;
 $164 = HEAP32[$163>>2]|0;
 $165 = (($162) + 4)|0;
 $166 = $165;
 $167 = HEAP32[$166>>2]|0;
 $168 = 0;$170 = $158;$172 = $161;$174 = $146;$176 = $149;$178 = $164;$180 = $167;$190 = $12;$192 = $13;$194 = $152;$196 = $155;$206 = $48;$208 = $49;$210 = $84;$212 = $85;$216 = $120;$218 = $121;$2817 = 0;
 while(1) {
  $arraydecay$i = (37552 + ($168<<5)|0);
  $169 = $170 ^ -1;
  $171 = $172 ^ -1;
  $173 = $174 ^ -1;
  $175 = $176 ^ -1;
  $177 = $178 ^ -1;
  $179 = $180 ^ -1;
  $181 = $arraydecay$i;
  $182 = $181;
  $183 = HEAP32[$182>>2]|0;
  $184 = (($181) + 4)|0;
  $185 = $184;
  $186 = HEAP32[$185>>2]|0;
  $187 = $183 & $177;
  $188 = $186 & $179;
  $189 = $190 ^ $187;
  $191 = $192 ^ $188;
  $193 = $194 ^ -1;
  $195 = $196 ^ -1;
  $arrayidx42$i = (((37552 + ($168<<5)|0)) + 16|0);
  $197 = $arrayidx42$i;
  $198 = $197;
  $199 = HEAP32[$198>>2]|0;
  $200 = (($197) + 4)|0;
  $201 = $200;
  $202 = HEAP32[$201>>2]|0;
  $203 = $199 & $193;
  $204 = $202 & $195;
  $205 = $203 ^ $206;
  $207 = $204 ^ $208;
  $209 = $210 & $189;
  $211 = $212 & $191;
  $213 = $209 ^ $183;
  $214 = $211 ^ $186;
  $215 = $205 & $216;
  $217 = $207 & $218;
  $219 = $215 ^ $199;
  $220 = $217 ^ $202;
  $221 = $178 & $169;
  $222 = $180 & $171;
  $223 = $189 ^ $221;
  $224 = $191 ^ $222;
  $225 = $194 & $173;
  $226 = $196 & $175;
  $227 = $205 ^ $225;
  $228 = $207 ^ $226;
  $229 = $210 ^ -1;
  $230 = $212 ^ -1;
  $231 = $178 & $229;
  $232 = $180 & $230;
  $233 = $231 ^ $169;
  $234 = $232 ^ $171;
  $235 = $216 ^ -1;
  $236 = $218 ^ -1;
  $237 = $194 & $235;
  $238 = $196 & $236;
  $239 = $237 ^ $173;
  $240 = $238 ^ $175;
  $241 = $223 & $178;
  $242 = $224 & $180;
  $243 = $241 ^ $210;
  $244 = $242 ^ $212;
  $245 = $227 & $194;
  $246 = $228 & $196;
  $247 = $245 ^ $216;
  $248 = $246 ^ $218;
  $249 = $231 ^ $170;
  $250 = $232 ^ $172;
  $251 = $249 & $223;
  $252 = $250 & $224;
  $253 = $251 ^ $178;
  $254 = $252 ^ $180;
  $255 = $237 ^ $174;
  $256 = $238 ^ $176;
  $257 = $227 & $255;
  $258 = $228 & $256;
  $259 = $257 ^ $194;
  $260 = $258 ^ $196;
  $261 = $233 | $243;
  $262 = $234 | $244;
  $263 = $261 ^ $223;
  $264 = $262 ^ $224;
  $265 = $247 | $239;
  $266 = $248 | $240;
  $267 = $265 ^ $227;
  $268 = $266 ^ $228;
  $269 = $253 & $243;
  $270 = $254 & $244;
  $271 = $269 ^ $233;
  $272 = $270 ^ $234;
  $273 = $259 & $247;
  $274 = $260 & $248;
  $275 = $263 & $213;
  $276 = $264 & $214;
  $277 = $275 ^ $243;
  $278 = $276 ^ $244;
  $279 = $267 & $219;
  $280 = $268 & $220;
  $281 = $253 ^ $213;
  $282 = $254 ^ $214;
  $283 = $277 ^ $267;
  $284 = $278 ^ $268;
  $285 = $281 ^ $247;
  $286 = $282 ^ $248;
  $287 = $285 ^ $279;
  $288 = $286 ^ $280;
  $289 = $259 ^ $219;
  $290 = $260 ^ $220;
  $291 = $289 ^ $263;
  $292 = $290 ^ $264;
  $293 = $291 ^ $271;
  $294 = $292 ^ $272;
  $295 = $263 ^ $239;
  $296 = $264 ^ $240;
  $297 = $295 ^ $273;
  $298 = $296 ^ $274;
  $299 = $287 ^ $263;
  $300 = $288 ^ $264;
  $301 = $arrayidx4;
  $302 = $301;
  HEAP32[$302>>2] = $299;
  $303 = (($301) + 4)|0;
  $304 = $303;
  HEAP32[$304>>2] = $300;
  $305 = $293 ^ $277;
  $306 = $294 ^ $278;
  $307 = $arrayidx4$4;
  $308 = $307;
  HEAP32[$308>>2] = $305;
  $309 = (($307) + 4)|0;
  $310 = $309;
  HEAP32[$310>>2] = $306;
  $311 = $283 ^ $281;
  $312 = $284 ^ $282;
  $313 = $311 ^ $297;
  $314 = $312 ^ $298;
  $315 = $arrayidx21$i;
  $316 = $315;
  HEAP32[$316>>2] = $313;
  $317 = (($315) + 4)|0;
  $318 = $317;
  HEAP32[$318>>2] = $314;
  $319 = $283 ^ $271;
  $320 = $284 ^ $272;
  $321 = $arrayidx4$i;
  $322 = $321;
  HEAP32[$322>>2] = $319;
  $323 = (($321) + 4)|0;
  $324 = $323;
  HEAP32[$324>>2] = $320;
  $325 = (_bitshift64Shl(($283|0),($284|0),1)|0);
  $326 = (getTempRet0() | 0);
  $327 = $325 & -1431655766;
  $328 = $326 & -1431655766;
  $329 = (_bitshift64Lshr(($283|0),($284|0),1)|0);
  $330 = (getTempRet0() | 0);
  $331 = $329 & 1431655765;
  $332 = $330 & 1431655765;
  $333 = $327 | $331;
  $334 = $328 | $332;
  $335 = $arrayidx4$2;
  $336 = $335;
  HEAP32[$336>>2] = $333;
  $337 = (($335) + 4)|0;
  $338 = $337;
  HEAP32[$338>>2] = $334;
  $339 = (_bitshift64Shl(($287|0),($288|0),1)|0);
  $340 = (getTempRet0() | 0);
  $341 = $339 & -1431655766;
  $342 = $340 & -1431655766;
  $343 = (_bitshift64Lshr(($287|0),($288|0),1)|0);
  $344 = (getTempRet0() | 0);
  $345 = $343 & 1431655765;
  $346 = $344 & 1431655765;
  $347 = $341 | $345;
  $348 = $342 | $346;
  $349 = $arrayidx4$6;
  $350 = $349;
  HEAP32[$350>>2] = $347;
  $351 = (($349) + 4)|0;
  $352 = $351;
  HEAP32[$352>>2] = $348;
  $353 = (_bitshift64Shl(($293|0),($294|0),1)|0);
  $354 = (getTempRet0() | 0);
  $355 = $353 & -1431655766;
  $356 = $354 & -1431655766;
  $357 = (_bitshift64Lshr(($293|0),($294|0),1)|0);
  $358 = (getTempRet0() | 0);
  $359 = $357 & 1431655765;
  $360 = $358 & 1431655765;
  $361 = $355 | $359;
  $362 = $356 | $360;
  $363 = $arrayidx34$phi$trans$insert$i;
  $364 = $363;
  HEAP32[$364>>2] = $361;
  $365 = (($363) + 4)|0;
  $366 = $365;
  HEAP32[$366>>2] = $362;
  $367 = (_bitshift64Shl(($297|0),($298|0),1)|0);
  $368 = (getTempRet0() | 0);
  $369 = $367 & -1431655766;
  $370 = $368 & -1431655766;
  $371 = (_bitshift64Lshr(($297|0),($298|0),1)|0);
  $372 = (getTempRet0() | 0);
  $373 = $371 & 1431655765;
  $374 = $372 & 1431655765;
  $375 = $369 | $373;
  $376 = $370 | $374;
  $377 = $arrayidx12$phi$trans$insert$i;
  $378 = $377;
  HEAP32[$378>>2] = $375;
  $379 = (($377) + 4)|0;
  $380 = $379;
  HEAP32[$380>>2] = $376;
  $381 = $arrayidx4$1$i;
  $382 = $381;
  $383 = HEAP32[$382>>2]|0;
  $384 = (($381) + 4)|0;
  $385 = $384;
  $386 = HEAP32[$385>>2]|0;
  $387 = $383 ^ -1;
  $388 = $386 ^ -1;
  $389 = $arrayidx12$1$i;
  $390 = $389;
  $391 = HEAP32[$390>>2]|0;
  $392 = (($389) + 4)|0;
  $393 = $392;
  $394 = HEAP32[$393>>2]|0;
  $395 = $391 ^ -1;
  $396 = $394 ^ -1;
  $397 = $arrayidx21$1$i;
  $398 = $397;
  $399 = HEAP32[$398>>2]|0;
  $400 = (($397) + 4)|0;
  $401 = $400;
  $402 = HEAP32[$401>>2]|0;
  $403 = $399 ^ -1;
  $404 = $402 ^ -1;
  $arrayidx26$1$i = (((37552 + ($168<<5)|0)) + 8|0);
  $405 = $arrayidx26$1$i;
  $406 = $405;
  $407 = HEAP32[$406>>2]|0;
  $408 = (($405) + 4)|0;
  $409 = $408;
  $410 = HEAP32[$409>>2]|0;
  $411 = $407 & $403;
  $412 = $410 & $404;
  $413 = $arrayidx4$1;
  $414 = $413;
  $415 = HEAP32[$414>>2]|0;
  $416 = (($413) + 4)|0;
  $417 = $416;
  $418 = HEAP32[$417>>2]|0;
  $419 = $415 ^ $411;
  $420 = $418 ^ $412;
  $421 = $arrayidx34$1$i;
  $422 = $421;
  $423 = HEAP32[$422>>2]|0;
  $424 = (($421) + 4)|0;
  $425 = $424;
  $426 = HEAP32[$425>>2]|0;
  $427 = $423 ^ -1;
  $428 = $426 ^ -1;
  $arrayidx42$1$i = (((37552 + ($168<<5)|0)) + 24|0);
  $429 = $arrayidx42$1$i;
  $430 = $429;
  $431 = HEAP32[$430>>2]|0;
  $432 = (($429) + 4)|0;
  $433 = $432;
  $434 = HEAP32[$433>>2]|0;
  $435 = $431 & $427;
  $436 = $434 & $428;
  $437 = $arrayidx4$3;
  $438 = $437;
  $439 = HEAP32[$438>>2]|0;
  $440 = (($437) + 4)|0;
  $441 = $440;
  $442 = HEAP32[$441>>2]|0;
  $443 = $439 ^ $435;
  $444 = $442 ^ $436;
  $445 = $arrayidx4$5;
  $446 = $445;
  $447 = HEAP32[$446>>2]|0;
  $448 = (($445) + 4)|0;
  $449 = $448;
  $450 = HEAP32[$449>>2]|0;
  $451 = $447 & $419;
  $452 = $450 & $420;
  $453 = $451 ^ $407;
  $454 = $452 ^ $410;
  $455 = $arrayidx4$7;
  $456 = $455;
  $457 = HEAP32[$456>>2]|0;
  $458 = (($455) + 4)|0;
  $459 = $458;
  $460 = HEAP32[$459>>2]|0;
  $461 = $457 & $443;
  $462 = $460 & $444;
  $463 = $461 ^ $431;
  $464 = $462 ^ $434;
  $465 = $399 & $387;
  $466 = $402 & $388;
  $467 = $419 ^ $465;
  $468 = $420 ^ $466;
  $469 = $423 & $395;
  $470 = $426 & $396;
  $471 = $443 ^ $469;
  $472 = $444 ^ $470;
  $473 = $447 ^ -1;
  $474 = $450 ^ -1;
  $475 = $399 & $473;
  $476 = $402 & $474;
  $477 = $475 ^ $387;
  $478 = $476 ^ $388;
  $479 = $457 ^ -1;
  $480 = $460 ^ -1;
  $481 = $423 & $479;
  $482 = $426 & $480;
  $483 = $481 ^ $395;
  $484 = $482 ^ $396;
  $485 = $467 & $399;
  $486 = $468 & $402;
  $487 = $447 ^ $485;
  $488 = $450 ^ $486;
  $489 = $471 & $423;
  $490 = $472 & $426;
  $491 = $489 ^ $457;
  $492 = $490 ^ $460;
  $493 = $475 ^ $383;
  $494 = $476 ^ $386;
  $495 = $493 & $467;
  $496 = $494 & $468;
  $497 = $495 ^ $399;
  $498 = $496 ^ $402;
  $499 = $481 ^ $391;
  $500 = $482 ^ $394;
  $501 = $499 & $471;
  $502 = $500 & $472;
  $503 = $501 ^ $423;
  $504 = $502 ^ $426;
  $505 = $477 | $487;
  $506 = $478 | $488;
  $507 = $505 ^ $467;
  $508 = $506 ^ $468;
  $509 = $483 | $491;
  $510 = $484 | $492;
  $511 = $509 ^ $471;
  $512 = $510 ^ $472;
  $513 = $497 & $487;
  $514 = $498 & $488;
  $515 = $513 ^ $477;
  $516 = $514 ^ $478;
  $517 = $503 & $491;
  $518 = $504 & $492;
  $519 = $507 & $453;
  $520 = $508 & $454;
  $521 = $519 ^ $487;
  $522 = $520 ^ $488;
  $523 = $511 & $463;
  $524 = $512 & $464;
  $525 = $497 ^ $453;
  $526 = $498 ^ $454;
  $527 = $521 ^ $511;
  $528 = $522 ^ $512;
  $529 = $525 ^ $491;
  $530 = $526 ^ $492;
  $531 = $529 ^ $523;
  $532 = $530 ^ $524;
  $533 = $507 ^ $463;
  $534 = $508 ^ $464;
  $535 = $533 ^ $503;
  $536 = $534 ^ $504;
  $537 = $535 ^ $515;
  $538 = $536 ^ $516;
  $539 = $507 ^ $483;
  $540 = $508 ^ $484;
  $541 = $539 ^ $517;
  $542 = $540 ^ $518;
  $543 = $531 ^ $507;
  $544 = $532 ^ $508;
  $545 = $arrayidx4$1;
  $546 = $545;
  HEAP32[$546>>2] = $543;
  $547 = (($545) + 4)|0;
  $548 = $547;
  HEAP32[$548>>2] = $544;
  $549 = $537 ^ $521;
  $550 = $538 ^ $522;
  $551 = $arrayidx4$5;
  $552 = $551;
  HEAP32[$552>>2] = $549;
  $553 = (($551) + 4)|0;
  $554 = $553;
  HEAP32[$554>>2] = $550;
  $555 = $527 ^ $525;
  $556 = $528 ^ $526;
  $557 = $555 ^ $541;
  $558 = $556 ^ $542;
  $559 = $arrayidx21$1$i;
  $560 = $559;
  HEAP32[$560>>2] = $557;
  $561 = (($559) + 4)|0;
  $562 = $561;
  HEAP32[$562>>2] = $558;
  $563 = $527 ^ $515;
  $564 = $528 ^ $516;
  $565 = $arrayidx4$1$i;
  $566 = $565;
  HEAP32[$566>>2] = $563;
  $567 = (($565) + 4)|0;
  $568 = $567;
  HEAP32[$568>>2] = $564;
  $569 = (_bitshift64Shl(($527|0),($528|0),1)|0);
  $570 = (getTempRet0() | 0);
  $571 = $569 & -1431655766;
  $572 = $570 & -1431655766;
  $573 = (_bitshift64Lshr(($527|0),($528|0),1)|0);
  $574 = (getTempRet0() | 0);
  $575 = $573 & 1431655765;
  $576 = $574 & 1431655765;
  $577 = $571 | $575;
  $578 = $572 | $576;
  $579 = $arrayidx4$3;
  $580 = $579;
  HEAP32[$580>>2] = $577;
  $581 = (($579) + 4)|0;
  $582 = $581;
  HEAP32[$582>>2] = $578;
  $583 = (_bitshift64Shl(($531|0),($532|0),1)|0);
  $584 = (getTempRet0() | 0);
  $585 = $583 & -1431655766;
  $586 = $584 & -1431655766;
  $587 = (_bitshift64Lshr(($531|0),($532|0),1)|0);
  $588 = (getTempRet0() | 0);
  $589 = $587 & 1431655765;
  $590 = $588 & 1431655765;
  $591 = $585 | $589;
  $592 = $586 | $590;
  $593 = $arrayidx4$7;
  $594 = $593;
  HEAP32[$594>>2] = $591;
  $595 = (($593) + 4)|0;
  $596 = $595;
  HEAP32[$596>>2] = $592;
  $597 = (_bitshift64Shl(($537|0),($538|0),1)|0);
  $598 = (getTempRet0() | 0);
  $599 = $597 & -1431655766;
  $600 = $598 & -1431655766;
  $601 = (_bitshift64Lshr(($537|0),($538|0),1)|0);
  $602 = (getTempRet0() | 0);
  $603 = $601 & 1431655765;
  $604 = $602 & 1431655765;
  $605 = $599 | $603;
  $606 = $600 | $604;
  $607 = $arrayidx34$1$i;
  $608 = $607;
  HEAP32[$608>>2] = $605;
  $609 = (($607) + 4)|0;
  $610 = $609;
  HEAP32[$610>>2] = $606;
  $611 = (_bitshift64Shl(($541|0),($542|0),1)|0);
  $612 = (getTempRet0() | 0);
  $613 = $611 & -1431655766;
  $614 = $612 & -1431655766;
  $615 = (_bitshift64Lshr(($541|0),($542|0),1)|0);
  $616 = (getTempRet0() | 0);
  $617 = $615 & 1431655765;
  $618 = $616 & 1431655765;
  $619 = $613 | $617;
  $620 = $614 | $618;
  $621 = $arrayidx12$1$i;
  $622 = $621;
  HEAP32[$622>>2] = $619;
  $623 = (($621) + 4)|0;
  $624 = $623;
  HEAP32[$624>>2] = $620;
  $idxprom458$i = (($168) + 1)|0;
  $arraydecay460$i = (37552 + ($idxprom458$i<<5)|0);
  $625 = $319 ^ -1;
  $626 = $320 ^ -1;
  $627 = $375 ^ -1;
  $628 = $376 ^ -1;
  $629 = $313 ^ -1;
  $630 = $314 ^ -1;
  $631 = $arraydecay460$i;
  $632 = $631;
  $633 = HEAP32[$632>>2]|0;
  $634 = (($631) + 4)|0;
  $635 = $634;
  $636 = HEAP32[$635>>2]|0;
  $637 = $633 & $629;
  $638 = $636 & $630;
  $639 = $637 ^ $299;
  $640 = $638 ^ $300;
  $641 = $361 ^ -1;
  $642 = $362 ^ -1;
  $arrayidx480$i = (((37552 + ($idxprom458$i<<5)|0)) + 16|0);
  $643 = $arrayidx480$i;
  $644 = $643;
  $645 = HEAP32[$644>>2]|0;
  $646 = (($643) + 4)|0;
  $647 = $646;
  $648 = HEAP32[$647>>2]|0;
  $649 = $645 & $641;
  $650 = $648 & $642;
  $651 = $649 ^ $333;
  $652 = $650 ^ $334;
  $653 = $639 & $305;
  $654 = $640 & $306;
  $655 = $653 ^ $633;
  $656 = $654 ^ $636;
  $657 = $651 & $347;
  $658 = $652 & $348;
  $659 = $657 ^ $645;
  $660 = $658 ^ $648;
  $661 = $313 & $625;
  $662 = $314 & $626;
  $663 = $639 ^ $661;
  $664 = $640 ^ $662;
  $665 = $361 & $627;
  $666 = $362 & $628;
  $667 = $651 ^ $665;
  $668 = $652 ^ $666;
  $669 = $305 ^ -1;
  $670 = $306 ^ -1;
  $671 = $313 & $669;
  $672 = $314 & $670;
  $673 = $671 ^ $625;
  $674 = $672 ^ $626;
  $675 = $347 ^ -1;
  $676 = $348 ^ -1;
  $677 = $361 & $675;
  $678 = $362 & $676;
  $679 = $677 ^ $627;
  $680 = $678 ^ $628;
  $681 = $663 & $313;
  $682 = $664 & $314;
  $683 = $681 ^ $305;
  $684 = $682 ^ $306;
  $685 = $667 & $361;
  $686 = $668 & $362;
  $687 = $685 ^ $347;
  $688 = $686 ^ $348;
  $689 = $671 ^ $319;
  $690 = $672 ^ $320;
  $691 = $663 & $689;
  $692 = $664 & $690;
  $693 = $691 ^ $313;
  $694 = $692 ^ $314;
  $695 = $677 ^ $375;
  $696 = $678 ^ $376;
  $697 = $667 & $695;
  $698 = $668 & $696;
  $699 = $697 ^ $361;
  $700 = $698 ^ $362;
  $701 = $683 | $673;
  $702 = $684 | $674;
  $703 = $701 ^ $663;
  $704 = $702 ^ $664;
  $705 = $687 | $679;
  $706 = $688 | $680;
  $707 = $705 ^ $667;
  $708 = $706 ^ $668;
  $709 = $693 & $683;
  $710 = $694 & $684;
  $711 = $709 ^ $673;
  $712 = $710 ^ $674;
  $713 = $699 & $687;
  $714 = $700 & $688;
  $715 = $713 ^ $679;
  $716 = $714 ^ $680;
  $717 = $703 & $655;
  $718 = $704 & $656;
  $719 = $717 ^ $683;
  $720 = $718 ^ $684;
  $721 = $707 & $659;
  $722 = $708 & $660;
  $723 = $693 ^ $655;
  $724 = $694 ^ $656;
  $725 = $719 ^ $707;
  $726 = $720 ^ $708;
  $727 = $723 ^ $687;
  $728 = $724 ^ $688;
  $729 = $727 ^ $721;
  $730 = $728 ^ $722;
  $731 = $699 ^ $659;
  $732 = $700 ^ $660;
  $733 = $731 ^ $703;
  $734 = $732 ^ $704;
  $735 = $733 ^ $711;
  $736 = $734 ^ $712;
  $737 = $715 ^ $703;
  $738 = $716 ^ $704;
  $739 = $729 ^ $703;
  $740 = $730 ^ $704;
  $741 = $arrayidx4;
  $742 = $741;
  HEAP32[$742>>2] = $739;
  $743 = (($741) + 4)|0;
  $744 = $743;
  HEAP32[$744>>2] = $740;
  $745 = $719 ^ $735;
  $746 = $720 ^ $736;
  $747 = $arrayidx4$4;
  $748 = $747;
  HEAP32[$748>>2] = $745;
  $749 = (($747) + 4)|0;
  $750 = $749;
  HEAP32[$750>>2] = $746;
  $751 = $737 ^ $723;
  $752 = $738 ^ $724;
  $753 = $751 ^ $725;
  $754 = $752 ^ $726;
  $755 = $arrayidx21$i;
  $756 = $755;
  HEAP32[$756>>2] = $753;
  $757 = (($755) + 4)|0;
  $758 = $757;
  HEAP32[$758>>2] = $754;
  $759 = $725 ^ $711;
  $760 = $726 ^ $712;
  $761 = $arrayidx4$i;
  $762 = $761;
  HEAP32[$762>>2] = $759;
  $763 = (($761) + 4)|0;
  $764 = $763;
  HEAP32[$764>>2] = $760;
  $765 = (_bitshift64Shl(($725|0),($726|0),2)|0);
  $766 = (getTempRet0() | 0);
  $767 = $765 & -858993460;
  $768 = $766 & -858993460;
  $769 = (_bitshift64Lshr(($725|0),($726|0),2)|0);
  $770 = (getTempRet0() | 0);
  $771 = $769 & 858993459;
  $772 = $770 & 858993459;
  $773 = $767 | $771;
  $774 = $768 | $772;
  $775 = $arrayidx4$2;
  $776 = $775;
  HEAP32[$776>>2] = $773;
  $777 = (($775) + 4)|0;
  $778 = $777;
  HEAP32[$778>>2] = $774;
  $779 = (_bitshift64Shl(($729|0),($730|0),2)|0);
  $780 = (getTempRet0() | 0);
  $781 = $779 & -858993460;
  $782 = $780 & -858993460;
  $783 = (_bitshift64Lshr(($729|0),($730|0),2)|0);
  $784 = (getTempRet0() | 0);
  $785 = $783 & 858993459;
  $786 = $784 & 858993459;
  $787 = $781 | $785;
  $788 = $782 | $786;
  $789 = $arrayidx4$6;
  $790 = $789;
  HEAP32[$790>>2] = $787;
  $791 = (($789) + 4)|0;
  $792 = $791;
  HEAP32[$792>>2] = $788;
  $793 = (_bitshift64Shl(($735|0),($736|0),2)|0);
  $794 = (getTempRet0() | 0);
  $795 = $793 & -858993460;
  $796 = $794 & -858993460;
  $797 = (_bitshift64Lshr(($735|0),($736|0),2)|0);
  $798 = (getTempRet0() | 0);
  $799 = $797 & 858993459;
  $800 = $798 & 858993459;
  $801 = $795 | $799;
  $802 = $796 | $800;
  $803 = $arrayidx34$phi$trans$insert$i;
  $804 = $803;
  HEAP32[$804>>2] = $801;
  $805 = (($803) + 4)|0;
  $806 = $805;
  HEAP32[$806>>2] = $802;
  $807 = (_bitshift64Shl(($737|0),($738|0),2)|0);
  $808 = (getTempRet0() | 0);
  $809 = $807 & -858993460;
  $810 = $808 & -858993460;
  $811 = (_bitshift64Lshr(($737|0),($738|0),2)|0);
  $812 = (getTempRet0() | 0);
  $813 = $811 & 858993459;
  $814 = $812 & 858993459;
  $815 = $809 | $813;
  $816 = $810 | $814;
  $817 = $arrayidx12$phi$trans$insert$i;
  $818 = $817;
  HEAP32[$818>>2] = $815;
  $819 = (($817) + 4)|0;
  $820 = $819;
  HEAP32[$820>>2] = $816;
  $821 = $563 ^ -1;
  $822 = $564 ^ -1;
  $823 = $619 ^ -1;
  $824 = $620 ^ -1;
  $825 = $557 ^ -1;
  $826 = $558 ^ -1;
  $arrayidx462$1$i = (((37552 + ($idxprom458$i<<5)|0)) + 8|0);
  $827 = $arrayidx462$1$i;
  $828 = $827;
  $829 = HEAP32[$828>>2]|0;
  $830 = (($827) + 4)|0;
  $831 = $830;
  $832 = HEAP32[$831>>2]|0;
  $833 = $829 & $825;
  $834 = $832 & $826;
  $835 = $833 ^ $543;
  $836 = $834 ^ $544;
  $837 = $605 ^ -1;
  $838 = $606 ^ -1;
  $arrayidx480$1$i = (((37552 + ($idxprom458$i<<5)|0)) + 24|0);
  $839 = $arrayidx480$1$i;
  $840 = $839;
  $841 = HEAP32[$840>>2]|0;
  $842 = (($839) + 4)|0;
  $843 = $842;
  $844 = HEAP32[$843>>2]|0;
  $845 = $841 & $837;
  $846 = $844 & $838;
  $847 = $845 ^ $577;
  $848 = $846 ^ $578;
  $849 = $835 & $549;
  $850 = $836 & $550;
  $851 = $849 ^ $829;
  $852 = $850 ^ $832;
  $853 = $847 & $591;
  $854 = $848 & $592;
  $855 = $853 ^ $841;
  $856 = $854 ^ $844;
  $857 = $557 & $821;
  $858 = $558 & $822;
  $859 = $835 ^ $857;
  $860 = $836 ^ $858;
  $861 = $605 & $823;
  $862 = $606 & $824;
  $863 = $847 ^ $861;
  $864 = $848 ^ $862;
  $865 = $549 ^ -1;
  $866 = $550 ^ -1;
  $867 = $557 & $865;
  $868 = $558 & $866;
  $869 = $867 ^ $821;
  $870 = $868 ^ $822;
  $871 = $591 ^ -1;
  $872 = $592 ^ -1;
  $873 = $605 & $871;
  $874 = $606 & $872;
  $875 = $873 ^ $823;
  $876 = $874 ^ $824;
  $877 = $859 & $557;
  $878 = $860 & $558;
  $879 = $877 ^ $549;
  $880 = $878 ^ $550;
  $881 = $863 & $605;
  $882 = $864 & $606;
  $883 = $881 ^ $591;
  $884 = $882 ^ $592;
  $885 = $867 ^ $563;
  $886 = $868 ^ $564;
  $887 = $859 & $885;
  $888 = $860 & $886;
  $889 = $887 ^ $557;
  $890 = $888 ^ $558;
  $891 = $873 ^ $619;
  $892 = $874 ^ $620;
  $893 = $863 & $891;
  $894 = $864 & $892;
  $895 = $893 ^ $605;
  $896 = $894 ^ $606;
  $897 = $879 | $869;
  $898 = $880 | $870;
  $899 = $897 ^ $859;
  $900 = $898 ^ $860;
  $901 = $883 | $875;
  $902 = $884 | $876;
  $903 = $901 ^ $863;
  $904 = $902 ^ $864;
  $905 = $889 & $879;
  $906 = $890 & $880;
  $907 = $905 ^ $869;
  $908 = $906 ^ $870;
  $909 = $895 & $883;
  $910 = $896 & $884;
  $911 = $909 ^ $875;
  $912 = $910 ^ $876;
  $913 = $899 & $851;
  $914 = $900 & $852;
  $915 = $913 ^ $879;
  $916 = $914 ^ $880;
  $917 = $903 & $855;
  $918 = $904 & $856;
  $919 = $889 ^ $851;
  $920 = $890 ^ $852;
  $921 = $915 ^ $903;
  $922 = $916 ^ $904;
  $923 = $919 ^ $883;
  $924 = $920 ^ $884;
  $925 = $923 ^ $917;
  $926 = $924 ^ $918;
  $927 = $895 ^ $855;
  $928 = $896 ^ $856;
  $929 = $927 ^ $899;
  $930 = $928 ^ $900;
  $931 = $929 ^ $907;
  $932 = $930 ^ $908;
  $933 = $911 ^ $899;
  $934 = $912 ^ $900;
  $935 = $925 ^ $899;
  $936 = $926 ^ $900;
  $937 = $arrayidx4$1;
  $938 = $937;
  HEAP32[$938>>2] = $935;
  $939 = (($937) + 4)|0;
  $940 = $939;
  HEAP32[$940>>2] = $936;
  $941 = $915 ^ $931;
  $942 = $916 ^ $932;
  $943 = $arrayidx4$5;
  $944 = $943;
  HEAP32[$944>>2] = $941;
  $945 = (($943) + 4)|0;
  $946 = $945;
  HEAP32[$946>>2] = $942;
  $947 = $933 ^ $919;
  $948 = $934 ^ $920;
  $949 = $947 ^ $921;
  $950 = $948 ^ $922;
  $951 = $arrayidx21$1$i;
  $952 = $951;
  HEAP32[$952>>2] = $949;
  $953 = (($951) + 4)|0;
  $954 = $953;
  HEAP32[$954>>2] = $950;
  $955 = $921 ^ $907;
  $956 = $922 ^ $908;
  $957 = $arrayidx4$1$i;
  $958 = $957;
  HEAP32[$958>>2] = $955;
  $959 = (($957) + 4)|0;
  $960 = $959;
  HEAP32[$960>>2] = $956;
  $961 = (_bitshift64Shl(($921|0),($922|0),2)|0);
  $962 = (getTempRet0() | 0);
  $963 = $961 & -858993460;
  $964 = $962 & -858993460;
  $965 = (_bitshift64Lshr(($921|0),($922|0),2)|0);
  $966 = (getTempRet0() | 0);
  $967 = $965 & 858993459;
  $968 = $966 & 858993459;
  $969 = $963 | $967;
  $970 = $964 | $968;
  $971 = $arrayidx4$3;
  $972 = $971;
  HEAP32[$972>>2] = $969;
  $973 = (($971) + 4)|0;
  $974 = $973;
  HEAP32[$974>>2] = $970;
  $975 = (_bitshift64Shl(($925|0),($926|0),2)|0);
  $976 = (getTempRet0() | 0);
  $977 = $975 & -858993460;
  $978 = $976 & -858993460;
  $979 = (_bitshift64Lshr(($925|0),($926|0),2)|0);
  $980 = (getTempRet0() | 0);
  $981 = $979 & 858993459;
  $982 = $980 & 858993459;
  $983 = $977 | $981;
  $984 = $978 | $982;
  $985 = $arrayidx4$7;
  $986 = $985;
  HEAP32[$986>>2] = $983;
  $987 = (($985) + 4)|0;
  $988 = $987;
  HEAP32[$988>>2] = $984;
  $989 = (_bitshift64Shl(($931|0),($932|0),2)|0);
  $990 = (getTempRet0() | 0);
  $991 = $989 & -858993460;
  $992 = $990 & -858993460;
  $993 = (_bitshift64Lshr(($931|0),($932|0),2)|0);
  $994 = (getTempRet0() | 0);
  $995 = $993 & 858993459;
  $996 = $994 & 858993459;
  $997 = $991 | $995;
  $998 = $992 | $996;
  $999 = $arrayidx34$1$i;
  $1000 = $999;
  HEAP32[$1000>>2] = $997;
  $1001 = (($999) + 4)|0;
  $1002 = $1001;
  HEAP32[$1002>>2] = $998;
  $1003 = (_bitshift64Shl(($933|0),($934|0),2)|0);
  $1004 = (getTempRet0() | 0);
  $1005 = $1003 & -858993460;
  $1006 = $1004 & -858993460;
  $1007 = (_bitshift64Lshr(($933|0),($934|0),2)|0);
  $1008 = (getTempRet0() | 0);
  $1009 = $1007 & 858993459;
  $1010 = $1008 & 858993459;
  $1011 = $1005 | $1009;
  $1012 = $1006 | $1010;
  $1013 = $arrayidx12$1$i;
  $1014 = $1013;
  HEAP32[$1014>>2] = $1011;
  $1015 = (($1013) + 4)|0;
  $1016 = $1015;
  HEAP32[$1016>>2] = $1012;
  $idxprom902$i = (($168) + 2)|0;
  $arraydecay904$i = (37552 + ($idxprom902$i<<5)|0);
  $1017 = $759 ^ -1;
  $1018 = $760 ^ -1;
  $1019 = $815 ^ -1;
  $1020 = $816 ^ -1;
  $1021 = $753 ^ -1;
  $1022 = $754 ^ -1;
  $1023 = $arraydecay904$i;
  $1024 = $1023;
  $1025 = HEAP32[$1024>>2]|0;
  $1026 = (($1023) + 4)|0;
  $1027 = $1026;
  $1028 = HEAP32[$1027>>2]|0;
  $1029 = $1025 & $1021;
  $1030 = $1028 & $1022;
  $1031 = $1029 ^ $739;
  $1032 = $1030 ^ $740;
  $1033 = $801 ^ -1;
  $1034 = $802 ^ -1;
  $arrayidx924$i = (((37552 + ($idxprom902$i<<5)|0)) + 16|0);
  $1035 = $arrayidx924$i;
  $1036 = $1035;
  $1037 = HEAP32[$1036>>2]|0;
  $1038 = (($1035) + 4)|0;
  $1039 = $1038;
  $1040 = HEAP32[$1039>>2]|0;
  $1041 = $1037 & $1033;
  $1042 = $1040 & $1034;
  $1043 = $1041 ^ $773;
  $1044 = $1042 ^ $774;
  $1045 = $1031 & $745;
  $1046 = $1032 & $746;
  $1047 = $1045 ^ $1025;
  $1048 = $1046 ^ $1028;
  $1049 = $1043 & $787;
  $1050 = $1044 & $788;
  $1051 = $1049 ^ $1037;
  $1052 = $1050 ^ $1040;
  $1053 = $753 & $1017;
  $1054 = $754 & $1018;
  $1055 = $1031 ^ $1053;
  $1056 = $1032 ^ $1054;
  $1057 = $801 & $1019;
  $1058 = $802 & $1020;
  $1059 = $1043 ^ $1057;
  $1060 = $1044 ^ $1058;
  $1061 = $745 ^ -1;
  $1062 = $746 ^ -1;
  $1063 = $753 & $1061;
  $1064 = $754 & $1062;
  $1065 = $1063 ^ $1017;
  $1066 = $1064 ^ $1018;
  $1067 = $787 ^ -1;
  $1068 = $788 ^ -1;
  $1069 = $801 & $1067;
  $1070 = $802 & $1068;
  $1071 = $1069 ^ $1019;
  $1072 = $1070 ^ $1020;
  $1073 = $1055 & $753;
  $1074 = $1056 & $754;
  $1075 = $1073 ^ $745;
  $1076 = $1074 ^ $746;
  $1077 = $1059 & $801;
  $1078 = $1060 & $802;
  $1079 = $1077 ^ $787;
  $1080 = $1078 ^ $788;
  $1081 = $1063 ^ $759;
  $1082 = $1064 ^ $760;
  $1083 = $1055 & $1081;
  $1084 = $1056 & $1082;
  $1085 = $1083 ^ $753;
  $1086 = $1084 ^ $754;
  $1087 = $1069 ^ $815;
  $1088 = $1070 ^ $816;
  $1089 = $1059 & $1087;
  $1090 = $1060 & $1088;
  $1091 = $1089 ^ $801;
  $1092 = $1090 ^ $802;
  $1093 = $1075 | $1065;
  $1094 = $1076 | $1066;
  $1095 = $1093 ^ $1055;
  $1096 = $1094 ^ $1056;
  $1097 = $1079 | $1071;
  $1098 = $1080 | $1072;
  $1099 = $1097 ^ $1059;
  $1100 = $1098 ^ $1060;
  $1101 = $1085 & $1075;
  $1102 = $1086 & $1076;
  $1103 = $1101 ^ $1065;
  $1104 = $1102 ^ $1066;
  $1105 = $1091 & $1079;
  $1106 = $1092 & $1080;
  $1107 = $1105 ^ $1071;
  $1108 = $1106 ^ $1072;
  $1109 = $1095 & $1047;
  $1110 = $1096 & $1048;
  $1111 = $1109 ^ $1075;
  $1112 = $1110 ^ $1076;
  $1113 = $1099 & $1051;
  $1114 = $1100 & $1052;
  $1115 = $1085 ^ $1047;
  $1116 = $1086 ^ $1048;
  $1117 = $1111 ^ $1099;
  $1118 = $1112 ^ $1100;
  $1119 = $1115 ^ $1079;
  $1120 = $1116 ^ $1080;
  $1121 = $1119 ^ $1113;
  $1122 = $1120 ^ $1114;
  $1123 = $1091 ^ $1051;
  $1124 = $1092 ^ $1052;
  $1125 = $1123 ^ $1095;
  $1126 = $1124 ^ $1096;
  $1127 = $1125 ^ $1103;
  $1128 = $1126 ^ $1104;
  $1129 = $1107 ^ $1095;
  $1130 = $1108 ^ $1096;
  $1131 = $1121 ^ $1095;
  $1132 = $1122 ^ $1096;
  $1133 = $arrayidx4;
  $1134 = $1133;
  HEAP32[$1134>>2] = $1131;
  $1135 = (($1133) + 4)|0;
  $1136 = $1135;
  HEAP32[$1136>>2] = $1132;
  $1137 = $1111 ^ $1127;
  $1138 = $1112 ^ $1128;
  $1139 = $arrayidx4$4;
  $1140 = $1139;
  HEAP32[$1140>>2] = $1137;
  $1141 = (($1139) + 4)|0;
  $1142 = $1141;
  HEAP32[$1142>>2] = $1138;
  $1143 = $1129 ^ $1115;
  $1144 = $1130 ^ $1116;
  $1145 = $1143 ^ $1117;
  $1146 = $1144 ^ $1118;
  $1147 = $arrayidx21$i;
  $1148 = $1147;
  HEAP32[$1148>>2] = $1145;
  $1149 = (($1147) + 4)|0;
  $1150 = $1149;
  HEAP32[$1150>>2] = $1146;
  $1151 = $1117 ^ $1103;
  $1152 = $1118 ^ $1104;
  $1153 = $arrayidx4$i;
  $1154 = $1153;
  HEAP32[$1154>>2] = $1151;
  $1155 = (($1153) + 4)|0;
  $1156 = $1155;
  HEAP32[$1156>>2] = $1152;
  $1157 = (_bitshift64Shl(($1117|0),($1118|0),4)|0);
  $1158 = (getTempRet0() | 0);
  $1159 = $1157 & -252645136;
  $1160 = $1158 & -252645136;
  $1161 = (_bitshift64Lshr(($1117|0),($1118|0),4)|0);
  $1162 = (getTempRet0() | 0);
  $1163 = $1161 & 252645135;
  $1164 = $1162 & 252645135;
  $1165 = $1159 | $1163;
  $1166 = $1160 | $1164;
  $1167 = $arrayidx4$2;
  $1168 = $1167;
  HEAP32[$1168>>2] = $1165;
  $1169 = (($1167) + 4)|0;
  $1170 = $1169;
  HEAP32[$1170>>2] = $1166;
  $1171 = (_bitshift64Shl(($1121|0),($1122|0),4)|0);
  $1172 = (getTempRet0() | 0);
  $1173 = $1171 & -252645136;
  $1174 = $1172 & -252645136;
  $1175 = (_bitshift64Lshr(($1121|0),($1122|0),4)|0);
  $1176 = (getTempRet0() | 0);
  $1177 = $1175 & 252645135;
  $1178 = $1176 & 252645135;
  $1179 = $1173 | $1177;
  $1180 = $1174 | $1178;
  $1181 = $arrayidx4$6;
  $1182 = $1181;
  HEAP32[$1182>>2] = $1179;
  $1183 = (($1181) + 4)|0;
  $1184 = $1183;
  HEAP32[$1184>>2] = $1180;
  $1185 = (_bitshift64Shl(($1127|0),($1128|0),4)|0);
  $1186 = (getTempRet0() | 0);
  $1187 = $1185 & -252645136;
  $1188 = $1186 & -252645136;
  $1189 = (_bitshift64Lshr(($1127|0),($1128|0),4)|0);
  $1190 = (getTempRet0() | 0);
  $1191 = $1189 & 252645135;
  $1192 = $1190 & 252645135;
  $1193 = $1187 | $1191;
  $1194 = $1188 | $1192;
  $1195 = $arrayidx34$phi$trans$insert$i;
  $1196 = $1195;
  HEAP32[$1196>>2] = $1193;
  $1197 = (($1195) + 4)|0;
  $1198 = $1197;
  HEAP32[$1198>>2] = $1194;
  $1199 = (_bitshift64Shl(($1129|0),($1130|0),4)|0);
  $1200 = (getTempRet0() | 0);
  $1201 = $1199 & -252645136;
  $1202 = $1200 & -252645136;
  $1203 = (_bitshift64Lshr(($1129|0),($1130|0),4)|0);
  $1204 = (getTempRet0() | 0);
  $1205 = $1203 & 252645135;
  $1206 = $1204 & 252645135;
  $1207 = $1201 | $1205;
  $1208 = $1202 | $1206;
  $1209 = $arrayidx12$phi$trans$insert$i;
  $1210 = $1209;
  HEAP32[$1210>>2] = $1207;
  $1211 = (($1209) + 4)|0;
  $1212 = $1211;
  HEAP32[$1212>>2] = $1208;
  $1213 = $955 ^ -1;
  $1214 = $956 ^ -1;
  $1215 = $1011 ^ -1;
  $1216 = $1012 ^ -1;
  $1217 = $949 ^ -1;
  $1218 = $950 ^ -1;
  $arrayidx906$1$i = (((37552 + ($idxprom902$i<<5)|0)) + 8|0);
  $1219 = $arrayidx906$1$i;
  $1220 = $1219;
  $1221 = HEAP32[$1220>>2]|0;
  $1222 = (($1219) + 4)|0;
  $1223 = $1222;
  $1224 = HEAP32[$1223>>2]|0;
  $1225 = $1221 & $1217;
  $1226 = $1224 & $1218;
  $1227 = $1225 ^ $935;
  $1228 = $1226 ^ $936;
  $1229 = $997 ^ -1;
  $1230 = $998 ^ -1;
  $arrayidx924$1$i = (((37552 + ($idxprom902$i<<5)|0)) + 24|0);
  $1231 = $arrayidx924$1$i;
  $1232 = $1231;
  $1233 = HEAP32[$1232>>2]|0;
  $1234 = (($1231) + 4)|0;
  $1235 = $1234;
  $1236 = HEAP32[$1235>>2]|0;
  $1237 = $1233 & $1229;
  $1238 = $1236 & $1230;
  $1239 = $1237 ^ $969;
  $1240 = $1238 ^ $970;
  $1241 = $1227 & $941;
  $1242 = $1228 & $942;
  $1243 = $1241 ^ $1221;
  $1244 = $1242 ^ $1224;
  $1245 = $1239 & $983;
  $1246 = $1240 & $984;
  $1247 = $1245 ^ $1233;
  $1248 = $1246 ^ $1236;
  $1249 = $949 & $1213;
  $1250 = $950 & $1214;
  $1251 = $1227 ^ $1249;
  $1252 = $1228 ^ $1250;
  $1253 = $997 & $1215;
  $1254 = $998 & $1216;
  $1255 = $1239 ^ $1253;
  $1256 = $1240 ^ $1254;
  $1257 = $941 ^ -1;
  $1258 = $942 ^ -1;
  $1259 = $949 & $1257;
  $1260 = $950 & $1258;
  $1261 = $1259 ^ $1213;
  $1262 = $1260 ^ $1214;
  $1263 = $983 ^ -1;
  $1264 = $984 ^ -1;
  $1265 = $997 & $1263;
  $1266 = $998 & $1264;
  $1267 = $1265 ^ $1215;
  $1268 = $1266 ^ $1216;
  $1269 = $1251 & $949;
  $1270 = $1252 & $950;
  $1271 = $1269 ^ $941;
  $1272 = $1270 ^ $942;
  $1273 = $1255 & $997;
  $1274 = $1256 & $998;
  $1275 = $1273 ^ $983;
  $1276 = $1274 ^ $984;
  $1277 = $1259 ^ $955;
  $1278 = $1260 ^ $956;
  $1279 = $1251 & $1277;
  $1280 = $1252 & $1278;
  $1281 = $1279 ^ $949;
  $1282 = $1280 ^ $950;
  $1283 = $1265 ^ $1011;
  $1284 = $1266 ^ $1012;
  $1285 = $1255 & $1283;
  $1286 = $1256 & $1284;
  $1287 = $1285 ^ $997;
  $1288 = $1286 ^ $998;
  $1289 = $1271 | $1261;
  $1290 = $1272 | $1262;
  $1291 = $1289 ^ $1251;
  $1292 = $1290 ^ $1252;
  $1293 = $1275 | $1267;
  $1294 = $1276 | $1268;
  $1295 = $1293 ^ $1255;
  $1296 = $1294 ^ $1256;
  $1297 = $1281 & $1271;
  $1298 = $1282 & $1272;
  $1299 = $1297 ^ $1261;
  $1300 = $1298 ^ $1262;
  $1301 = $1287 & $1275;
  $1302 = $1288 & $1276;
  $1303 = $1301 ^ $1267;
  $1304 = $1302 ^ $1268;
  $1305 = $1291 & $1243;
  $1306 = $1292 & $1244;
  $1307 = $1305 ^ $1271;
  $1308 = $1306 ^ $1272;
  $1309 = $1295 & $1247;
  $1310 = $1296 & $1248;
  $1311 = $1281 ^ $1243;
  $1312 = $1282 ^ $1244;
  $1313 = $1307 ^ $1295;
  $1314 = $1308 ^ $1296;
  $1315 = $1311 ^ $1275;
  $1316 = $1312 ^ $1276;
  $1317 = $1315 ^ $1309;
  $1318 = $1316 ^ $1310;
  $1319 = $1287 ^ $1247;
  $1320 = $1288 ^ $1248;
  $1321 = $1319 ^ $1291;
  $1322 = $1320 ^ $1292;
  $1323 = $1321 ^ $1299;
  $1324 = $1322 ^ $1300;
  $1325 = $1303 ^ $1291;
  $1326 = $1304 ^ $1292;
  $1327 = $1317 ^ $1291;
  $1328 = $1318 ^ $1292;
  $1329 = $arrayidx4$1;
  $1330 = $1329;
  HEAP32[$1330>>2] = $1327;
  $1331 = (($1329) + 4)|0;
  $1332 = $1331;
  HEAP32[$1332>>2] = $1328;
  $1333 = $1307 ^ $1323;
  $1334 = $1308 ^ $1324;
  $1335 = $arrayidx4$5;
  $1336 = $1335;
  HEAP32[$1336>>2] = $1333;
  $1337 = (($1335) + 4)|0;
  $1338 = $1337;
  HEAP32[$1338>>2] = $1334;
  $1339 = $1325 ^ $1311;
  $1340 = $1326 ^ $1312;
  $1341 = $1339 ^ $1313;
  $1342 = $1340 ^ $1314;
  $1343 = $arrayidx21$1$i;
  $1344 = $1343;
  HEAP32[$1344>>2] = $1341;
  $1345 = (($1343) + 4)|0;
  $1346 = $1345;
  HEAP32[$1346>>2] = $1342;
  $1347 = $1313 ^ $1299;
  $1348 = $1314 ^ $1300;
  $1349 = $arrayidx4$1$i;
  $1350 = $1349;
  HEAP32[$1350>>2] = $1347;
  $1351 = (($1349) + 4)|0;
  $1352 = $1351;
  HEAP32[$1352>>2] = $1348;
  $1353 = (_bitshift64Shl(($1313|0),($1314|0),4)|0);
  $1354 = (getTempRet0() | 0);
  $1355 = $1353 & -252645136;
  $1356 = $1354 & -252645136;
  $1357 = (_bitshift64Lshr(($1313|0),($1314|0),4)|0);
  $1358 = (getTempRet0() | 0);
  $1359 = $1357 & 252645135;
  $1360 = $1358 & 252645135;
  $1361 = $1355 | $1359;
  $1362 = $1356 | $1360;
  $1363 = $arrayidx4$3;
  $1364 = $1363;
  HEAP32[$1364>>2] = $1361;
  $1365 = (($1363) + 4)|0;
  $1366 = $1365;
  HEAP32[$1366>>2] = $1362;
  $1367 = (_bitshift64Shl(($1317|0),($1318|0),4)|0);
  $1368 = (getTempRet0() | 0);
  $1369 = $1367 & -252645136;
  $1370 = $1368 & -252645136;
  $1371 = (_bitshift64Lshr(($1317|0),($1318|0),4)|0);
  $1372 = (getTempRet0() | 0);
  $1373 = $1371 & 252645135;
  $1374 = $1372 & 252645135;
  $1375 = $1369 | $1373;
  $1376 = $1370 | $1374;
  $1377 = $arrayidx4$7;
  $1378 = $1377;
  HEAP32[$1378>>2] = $1375;
  $1379 = (($1377) + 4)|0;
  $1380 = $1379;
  HEAP32[$1380>>2] = $1376;
  $1381 = (_bitshift64Shl(($1323|0),($1324|0),4)|0);
  $1382 = (getTempRet0() | 0);
  $1383 = $1381 & -252645136;
  $1384 = $1382 & -252645136;
  $1385 = (_bitshift64Lshr(($1323|0),($1324|0),4)|0);
  $1386 = (getTempRet0() | 0);
  $1387 = $1385 & 252645135;
  $1388 = $1386 & 252645135;
  $1389 = $1383 | $1387;
  $1390 = $1384 | $1388;
  $1391 = $arrayidx34$1$i;
  $1392 = $1391;
  HEAP32[$1392>>2] = $1389;
  $1393 = (($1391) + 4)|0;
  $1394 = $1393;
  HEAP32[$1394>>2] = $1390;
  $1395 = (_bitshift64Shl(($1325|0),($1326|0),4)|0);
  $1396 = (getTempRet0() | 0);
  $1397 = $1395 & -252645136;
  $1398 = $1396 & -252645136;
  $1399 = (_bitshift64Lshr(($1325|0),($1326|0),4)|0);
  $1400 = (getTempRet0() | 0);
  $1401 = $1399 & 252645135;
  $1402 = $1400 & 252645135;
  $1403 = $1397 | $1401;
  $1404 = $1398 | $1402;
  $1405 = $arrayidx12$1$i;
  $1406 = $1405;
  HEAP32[$1406>>2] = $1403;
  $1407 = (($1405) + 4)|0;
  $1408 = $1407;
  HEAP32[$1408>>2] = $1404;
  $idxprom1346$i = (($168) + 3)|0;
  $arraydecay1348$i = (37552 + ($idxprom1346$i<<5)|0);
  $1409 = $1151 ^ -1;
  $1410 = $1152 ^ -1;
  $1411 = $1207 ^ -1;
  $1412 = $1208 ^ -1;
  $1413 = $1145 ^ -1;
  $1414 = $1146 ^ -1;
  $1415 = $arraydecay1348$i;
  $1416 = $1415;
  $1417 = HEAP32[$1416>>2]|0;
  $1418 = (($1415) + 4)|0;
  $1419 = $1418;
  $1420 = HEAP32[$1419>>2]|0;
  $1421 = $1417 & $1413;
  $1422 = $1420 & $1414;
  $1423 = $1421 ^ $1131;
  $1424 = $1422 ^ $1132;
  $1425 = $1193 ^ -1;
  $1426 = $1194 ^ -1;
  $arrayidx1368$i = (((37552 + ($idxprom1346$i<<5)|0)) + 16|0);
  $1427 = $arrayidx1368$i;
  $1428 = $1427;
  $1429 = HEAP32[$1428>>2]|0;
  $1430 = (($1427) + 4)|0;
  $1431 = $1430;
  $1432 = HEAP32[$1431>>2]|0;
  $1433 = $1429 & $1425;
  $1434 = $1432 & $1426;
  $1435 = $1433 ^ $1165;
  $1436 = $1434 ^ $1166;
  $1437 = $1423 & $1137;
  $1438 = $1424 & $1138;
  $1439 = $1437 ^ $1417;
  $1440 = $1438 ^ $1420;
  $1441 = $1435 & $1179;
  $1442 = $1436 & $1180;
  $1443 = $1441 ^ $1429;
  $1444 = $1442 ^ $1432;
  $1445 = $1145 & $1409;
  $1446 = $1146 & $1410;
  $1447 = $1423 ^ $1445;
  $1448 = $1424 ^ $1446;
  $1449 = $1193 & $1411;
  $1450 = $1194 & $1412;
  $1451 = $1435 ^ $1449;
  $1452 = $1436 ^ $1450;
  $1453 = $1137 ^ -1;
  $1454 = $1138 ^ -1;
  $1455 = $1145 & $1453;
  $1456 = $1146 & $1454;
  $1457 = $1455 ^ $1409;
  $1458 = $1456 ^ $1410;
  $1459 = $1179 ^ -1;
  $1460 = $1180 ^ -1;
  $1461 = $1193 & $1459;
  $1462 = $1194 & $1460;
  $1463 = $1461 ^ $1411;
  $1464 = $1462 ^ $1412;
  $1465 = $1447 & $1145;
  $1466 = $1448 & $1146;
  $1467 = $1465 ^ $1137;
  $1468 = $1466 ^ $1138;
  $1469 = $1451 & $1193;
  $1470 = $1452 & $1194;
  $1471 = $1469 ^ $1179;
  $1472 = $1470 ^ $1180;
  $1473 = $1455 ^ $1151;
  $1474 = $1456 ^ $1152;
  $1475 = $1447 & $1473;
  $1476 = $1448 & $1474;
  $1477 = $1475 ^ $1145;
  $1478 = $1476 ^ $1146;
  $1479 = $1461 ^ $1207;
  $1480 = $1462 ^ $1208;
  $1481 = $1451 & $1479;
  $1482 = $1452 & $1480;
  $1483 = $1481 ^ $1193;
  $1484 = $1482 ^ $1194;
  $1485 = $1467 | $1457;
  $1486 = $1468 | $1458;
  $1487 = $1485 ^ $1447;
  $1488 = $1486 ^ $1448;
  $1489 = $1471 | $1463;
  $1490 = $1472 | $1464;
  $1491 = $1489 ^ $1451;
  $1492 = $1490 ^ $1452;
  $1493 = $1477 & $1467;
  $1494 = $1478 & $1468;
  $1495 = $1493 ^ $1457;
  $1496 = $1494 ^ $1458;
  $1497 = $1483 & $1471;
  $1498 = $1484 & $1472;
  $1499 = $1497 ^ $1463;
  $1500 = $1498 ^ $1464;
  $1501 = $1487 & $1439;
  $1502 = $1488 & $1440;
  $1503 = $1501 ^ $1467;
  $1504 = $1502 ^ $1468;
  $1505 = $1491 & $1443;
  $1506 = $1492 & $1444;
  $1507 = $1477 ^ $1439;
  $1508 = $1478 ^ $1440;
  $1509 = $1503 ^ $1491;
  $1510 = $1504 ^ $1492;
  $1511 = $1507 ^ $1471;
  $1512 = $1508 ^ $1472;
  $1513 = $1511 ^ $1505;
  $1514 = $1512 ^ $1506;
  $1515 = $1483 ^ $1443;
  $1516 = $1484 ^ $1444;
  $1517 = $1515 ^ $1487;
  $1518 = $1516 ^ $1488;
  $1519 = $1517 ^ $1495;
  $1520 = $1518 ^ $1496;
  $1521 = $1499 ^ $1487;
  $1522 = $1500 ^ $1488;
  $1523 = $1513 ^ $1487;
  $1524 = $1514 ^ $1488;
  $1525 = $arrayidx4;
  $1526 = $1525;
  HEAP32[$1526>>2] = $1523;
  $1527 = (($1525) + 4)|0;
  $1528 = $1527;
  HEAP32[$1528>>2] = $1524;
  $1529 = $1503 ^ $1519;
  $1530 = $1504 ^ $1520;
  $1531 = $arrayidx4$4;
  $1532 = $1531;
  HEAP32[$1532>>2] = $1529;
  $1533 = (($1531) + 4)|0;
  $1534 = $1533;
  HEAP32[$1534>>2] = $1530;
  $1535 = $1521 ^ $1507;
  $1536 = $1522 ^ $1508;
  $1537 = $1535 ^ $1509;
  $1538 = $1536 ^ $1510;
  $1539 = $arrayidx21$i;
  $1540 = $1539;
  HEAP32[$1540>>2] = $1537;
  $1541 = (($1539) + 4)|0;
  $1542 = $1541;
  HEAP32[$1542>>2] = $1538;
  $1543 = $1509 ^ $1495;
  $1544 = $1510 ^ $1496;
  $1545 = $arrayidx4$i;
  $1546 = $1545;
  HEAP32[$1546>>2] = $1543;
  $1547 = (($1545) + 4)|0;
  $1548 = $1547;
  HEAP32[$1548>>2] = $1544;
  $1549 = (_bitshift64Shl(($1509|0),($1510|0),8)|0);
  $1550 = (getTempRet0() | 0);
  $1551 = $1549 & -16711936;
  $1552 = $1550 & -16711936;
  $1553 = (_bitshift64Lshr(($1509|0),($1510|0),8)|0);
  $1554 = (getTempRet0() | 0);
  $1555 = $1553 & 16711935;
  $1556 = $1554 & 16711935;
  $1557 = $1551 | $1555;
  $1558 = $1552 | $1556;
  $1559 = $arrayidx4$2;
  $1560 = $1559;
  HEAP32[$1560>>2] = $1557;
  $1561 = (($1559) + 4)|0;
  $1562 = $1561;
  HEAP32[$1562>>2] = $1558;
  $1563 = (_bitshift64Shl(($1513|0),($1514|0),8)|0);
  $1564 = (getTempRet0() | 0);
  $1565 = $1563 & -16711936;
  $1566 = $1564 & -16711936;
  $1567 = (_bitshift64Lshr(($1513|0),($1514|0),8)|0);
  $1568 = (getTempRet0() | 0);
  $1569 = $1567 & 16711935;
  $1570 = $1568 & 16711935;
  $1571 = $1565 | $1569;
  $1572 = $1566 | $1570;
  $1573 = $arrayidx4$6;
  $1574 = $1573;
  HEAP32[$1574>>2] = $1571;
  $1575 = (($1573) + 4)|0;
  $1576 = $1575;
  HEAP32[$1576>>2] = $1572;
  $1577 = (_bitshift64Shl(($1519|0),($1520|0),8)|0);
  $1578 = (getTempRet0() | 0);
  $1579 = $1577 & -16711936;
  $1580 = $1578 & -16711936;
  $1581 = (_bitshift64Lshr(($1519|0),($1520|0),8)|0);
  $1582 = (getTempRet0() | 0);
  $1583 = $1581 & 16711935;
  $1584 = $1582 & 16711935;
  $1585 = $1579 | $1583;
  $1586 = $1580 | $1584;
  $1587 = $arrayidx34$phi$trans$insert$i;
  $1588 = $1587;
  HEAP32[$1588>>2] = $1585;
  $1589 = (($1587) + 4)|0;
  $1590 = $1589;
  HEAP32[$1590>>2] = $1586;
  $1591 = (_bitshift64Shl(($1521|0),($1522|0),8)|0);
  $1592 = (getTempRet0() | 0);
  $1593 = $1591 & -16711936;
  $1594 = $1592 & -16711936;
  $1595 = (_bitshift64Lshr(($1521|0),($1522|0),8)|0);
  $1596 = (getTempRet0() | 0);
  $1597 = $1595 & 16711935;
  $1598 = $1596 & 16711935;
  $1599 = $1593 | $1597;
  $1600 = $1594 | $1598;
  $1601 = $arrayidx12$phi$trans$insert$i;
  $1602 = $1601;
  HEAP32[$1602>>2] = $1599;
  $1603 = (($1601) + 4)|0;
  $1604 = $1603;
  HEAP32[$1604>>2] = $1600;
  $1605 = $1347 ^ -1;
  $1606 = $1348 ^ -1;
  $1607 = $1403 ^ -1;
  $1608 = $1404 ^ -1;
  $1609 = $1341 ^ -1;
  $1610 = $1342 ^ -1;
  $arrayidx1350$1$i = (((37552 + ($idxprom1346$i<<5)|0)) + 8|0);
  $1611 = $arrayidx1350$1$i;
  $1612 = $1611;
  $1613 = HEAP32[$1612>>2]|0;
  $1614 = (($1611) + 4)|0;
  $1615 = $1614;
  $1616 = HEAP32[$1615>>2]|0;
  $1617 = $1613 & $1609;
  $1618 = $1616 & $1610;
  $1619 = $1617 ^ $1327;
  $1620 = $1618 ^ $1328;
  $1621 = $1389 ^ -1;
  $1622 = $1390 ^ -1;
  $arrayidx1368$1$i = (((37552 + ($idxprom1346$i<<5)|0)) + 24|0);
  $1623 = $arrayidx1368$1$i;
  $1624 = $1623;
  $1625 = HEAP32[$1624>>2]|0;
  $1626 = (($1623) + 4)|0;
  $1627 = $1626;
  $1628 = HEAP32[$1627>>2]|0;
  $1629 = $1625 & $1621;
  $1630 = $1628 & $1622;
  $1631 = $1629 ^ $1361;
  $1632 = $1630 ^ $1362;
  $1633 = $1619 & $1333;
  $1634 = $1620 & $1334;
  $1635 = $1633 ^ $1613;
  $1636 = $1634 ^ $1616;
  $1637 = $1631 & $1375;
  $1638 = $1632 & $1376;
  $1639 = $1637 ^ $1625;
  $1640 = $1638 ^ $1628;
  $1641 = $1341 & $1605;
  $1642 = $1342 & $1606;
  $1643 = $1619 ^ $1641;
  $1644 = $1620 ^ $1642;
  $1645 = $1389 & $1607;
  $1646 = $1390 & $1608;
  $1647 = $1631 ^ $1645;
  $1648 = $1632 ^ $1646;
  $1649 = $1333 ^ -1;
  $1650 = $1334 ^ -1;
  $1651 = $1341 & $1649;
  $1652 = $1342 & $1650;
  $1653 = $1651 ^ $1605;
  $1654 = $1652 ^ $1606;
  $1655 = $1375 ^ -1;
  $1656 = $1376 ^ -1;
  $1657 = $1389 & $1655;
  $1658 = $1390 & $1656;
  $1659 = $1657 ^ $1607;
  $1660 = $1658 ^ $1608;
  $1661 = $1643 & $1341;
  $1662 = $1644 & $1342;
  $1663 = $1661 ^ $1333;
  $1664 = $1662 ^ $1334;
  $1665 = $1647 & $1389;
  $1666 = $1648 & $1390;
  $1667 = $1665 ^ $1375;
  $1668 = $1666 ^ $1376;
  $1669 = $1651 ^ $1347;
  $1670 = $1652 ^ $1348;
  $1671 = $1643 & $1669;
  $1672 = $1644 & $1670;
  $1673 = $1671 ^ $1341;
  $1674 = $1672 ^ $1342;
  $1675 = $1657 ^ $1403;
  $1676 = $1658 ^ $1404;
  $1677 = $1647 & $1675;
  $1678 = $1648 & $1676;
  $1679 = $1677 ^ $1389;
  $1680 = $1678 ^ $1390;
  $1681 = $1663 | $1653;
  $1682 = $1664 | $1654;
  $1683 = $1681 ^ $1643;
  $1684 = $1682 ^ $1644;
  $1685 = $1667 | $1659;
  $1686 = $1668 | $1660;
  $1687 = $1685 ^ $1647;
  $1688 = $1686 ^ $1648;
  $1689 = $1673 & $1663;
  $1690 = $1674 & $1664;
  $1691 = $1689 ^ $1653;
  $1692 = $1690 ^ $1654;
  $1693 = $1679 & $1667;
  $1694 = $1680 & $1668;
  $1695 = $1693 ^ $1659;
  $1696 = $1694 ^ $1660;
  $1697 = $1683 & $1635;
  $1698 = $1684 & $1636;
  $1699 = $1697 ^ $1663;
  $1700 = $1698 ^ $1664;
  $1701 = $1687 & $1639;
  $1702 = $1688 & $1640;
  $1703 = $1673 ^ $1635;
  $1704 = $1674 ^ $1636;
  $1705 = $1699 ^ $1687;
  $1706 = $1700 ^ $1688;
  $1707 = $1703 ^ $1667;
  $1708 = $1704 ^ $1668;
  $1709 = $1707 ^ $1701;
  $1710 = $1708 ^ $1702;
  $1711 = $1679 ^ $1639;
  $1712 = $1680 ^ $1640;
  $1713 = $1711 ^ $1683;
  $1714 = $1712 ^ $1684;
  $1715 = $1713 ^ $1691;
  $1716 = $1714 ^ $1692;
  $1717 = $1695 ^ $1683;
  $1718 = $1696 ^ $1684;
  $1719 = $1709 ^ $1683;
  $1720 = $1710 ^ $1684;
  $1721 = $arrayidx4$1;
  $1722 = $1721;
  HEAP32[$1722>>2] = $1719;
  $1723 = (($1721) + 4)|0;
  $1724 = $1723;
  HEAP32[$1724>>2] = $1720;
  $1725 = $1699 ^ $1715;
  $1726 = $1700 ^ $1716;
  $1727 = $arrayidx4$5;
  $1728 = $1727;
  HEAP32[$1728>>2] = $1725;
  $1729 = (($1727) + 4)|0;
  $1730 = $1729;
  HEAP32[$1730>>2] = $1726;
  $1731 = $1717 ^ $1703;
  $1732 = $1718 ^ $1704;
  $1733 = $1731 ^ $1705;
  $1734 = $1732 ^ $1706;
  $1735 = $arrayidx21$1$i;
  $1736 = $1735;
  HEAP32[$1736>>2] = $1733;
  $1737 = (($1735) + 4)|0;
  $1738 = $1737;
  HEAP32[$1738>>2] = $1734;
  $1739 = $1705 ^ $1691;
  $1740 = $1706 ^ $1692;
  $1741 = $arrayidx4$1$i;
  $1742 = $1741;
  HEAP32[$1742>>2] = $1739;
  $1743 = (($1741) + 4)|0;
  $1744 = $1743;
  HEAP32[$1744>>2] = $1740;
  $1745 = (_bitshift64Shl(($1705|0),($1706|0),8)|0);
  $1746 = (getTempRet0() | 0);
  $1747 = $1745 & -16711936;
  $1748 = $1746 & -16711936;
  $1749 = (_bitshift64Lshr(($1705|0),($1706|0),8)|0);
  $1750 = (getTempRet0() | 0);
  $1751 = $1749 & 16711935;
  $1752 = $1750 & 16711935;
  $1753 = $1747 | $1751;
  $1754 = $1748 | $1752;
  $1755 = $arrayidx4$3;
  $1756 = $1755;
  HEAP32[$1756>>2] = $1753;
  $1757 = (($1755) + 4)|0;
  $1758 = $1757;
  HEAP32[$1758>>2] = $1754;
  $1759 = (_bitshift64Shl(($1709|0),($1710|0),8)|0);
  $1760 = (getTempRet0() | 0);
  $1761 = $1759 & -16711936;
  $1762 = $1760 & -16711936;
  $1763 = (_bitshift64Lshr(($1709|0),($1710|0),8)|0);
  $1764 = (getTempRet0() | 0);
  $1765 = $1763 & 16711935;
  $1766 = $1764 & 16711935;
  $1767 = $1761 | $1765;
  $1768 = $1762 | $1766;
  $1769 = $arrayidx4$7;
  $1770 = $1769;
  HEAP32[$1770>>2] = $1767;
  $1771 = (($1769) + 4)|0;
  $1772 = $1771;
  HEAP32[$1772>>2] = $1768;
  $1773 = (_bitshift64Shl(($1715|0),($1716|0),8)|0);
  $1774 = (getTempRet0() | 0);
  $1775 = $1773 & -16711936;
  $1776 = $1774 & -16711936;
  $1777 = (_bitshift64Lshr(($1715|0),($1716|0),8)|0);
  $1778 = (getTempRet0() | 0);
  $1779 = $1777 & 16711935;
  $1780 = $1778 & 16711935;
  $1781 = $1775 | $1779;
  $1782 = $1776 | $1780;
  $1783 = $arrayidx34$1$i;
  $1784 = $1783;
  HEAP32[$1784>>2] = $1781;
  $1785 = (($1783) + 4)|0;
  $1786 = $1785;
  HEAP32[$1786>>2] = $1782;
  $1787 = (_bitshift64Shl(($1717|0),($1718|0),8)|0);
  $1788 = (getTempRet0() | 0);
  $1789 = $1787 & -16711936;
  $1790 = $1788 & -16711936;
  $1791 = (_bitshift64Lshr(($1717|0),($1718|0),8)|0);
  $1792 = (getTempRet0() | 0);
  $1793 = $1791 & 16711935;
  $1794 = $1792 & 16711935;
  $1795 = $1789 | $1793;
  $1796 = $1790 | $1794;
  $1797 = $arrayidx12$1$i;
  $1798 = $1797;
  HEAP32[$1798>>2] = $1795;
  $1799 = (($1797) + 4)|0;
  $1800 = $1799;
  HEAP32[$1800>>2] = $1796;
  $idxprom1790$i = (($168) + 4)|0;
  $arraydecay1792$i = (37552 + ($idxprom1790$i<<5)|0);
  $1801 = $1543 ^ -1;
  $1802 = $1544 ^ -1;
  $1803 = $1599 ^ -1;
  $1804 = $1600 ^ -1;
  $1805 = $1537 ^ -1;
  $1806 = $1538 ^ -1;
  $1807 = $arraydecay1792$i;
  $1808 = $1807;
  $1809 = HEAP32[$1808>>2]|0;
  $1810 = (($1807) + 4)|0;
  $1811 = $1810;
  $1812 = HEAP32[$1811>>2]|0;
  $1813 = $1809 & $1805;
  $1814 = $1812 & $1806;
  $1815 = $1813 ^ $1523;
  $1816 = $1814 ^ $1524;
  $1817 = $1585 ^ -1;
  $1818 = $1586 ^ -1;
  $arrayidx1812$i = (((37552 + ($idxprom1790$i<<5)|0)) + 16|0);
  $1819 = $arrayidx1812$i;
  $1820 = $1819;
  $1821 = HEAP32[$1820>>2]|0;
  $1822 = (($1819) + 4)|0;
  $1823 = $1822;
  $1824 = HEAP32[$1823>>2]|0;
  $1825 = $1821 & $1817;
  $1826 = $1824 & $1818;
  $1827 = $1825 ^ $1557;
  $1828 = $1826 ^ $1558;
  $1829 = $1815 & $1529;
  $1830 = $1816 & $1530;
  $1831 = $1829 ^ $1809;
  $1832 = $1830 ^ $1812;
  $1833 = $1827 & $1571;
  $1834 = $1828 & $1572;
  $1835 = $1833 ^ $1821;
  $1836 = $1834 ^ $1824;
  $1837 = $1537 & $1801;
  $1838 = $1538 & $1802;
  $1839 = $1815 ^ $1837;
  $1840 = $1816 ^ $1838;
  $1841 = $1585 & $1803;
  $1842 = $1586 & $1804;
  $1843 = $1827 ^ $1841;
  $1844 = $1828 ^ $1842;
  $1845 = $1529 ^ -1;
  $1846 = $1530 ^ -1;
  $1847 = $1537 & $1845;
  $1848 = $1538 & $1846;
  $1849 = $1847 ^ $1801;
  $1850 = $1848 ^ $1802;
  $1851 = $1571 ^ -1;
  $1852 = $1572 ^ -1;
  $1853 = $1585 & $1851;
  $1854 = $1586 & $1852;
  $1855 = $1853 ^ $1803;
  $1856 = $1854 ^ $1804;
  $1857 = $1839 & $1537;
  $1858 = $1840 & $1538;
  $1859 = $1857 ^ $1529;
  $1860 = $1858 ^ $1530;
  $1861 = $1843 & $1585;
  $1862 = $1844 & $1586;
  $1863 = $1861 ^ $1571;
  $1864 = $1862 ^ $1572;
  $1865 = $1847 ^ $1543;
  $1866 = $1848 ^ $1544;
  $1867 = $1839 & $1865;
  $1868 = $1840 & $1866;
  $1869 = $1867 ^ $1537;
  $1870 = $1868 ^ $1538;
  $1871 = $1853 ^ $1599;
  $1872 = $1854 ^ $1600;
  $1873 = $1843 & $1871;
  $1874 = $1844 & $1872;
  $1875 = $1873 ^ $1585;
  $1876 = $1874 ^ $1586;
  $1877 = $1859 | $1849;
  $1878 = $1860 | $1850;
  $1879 = $1877 ^ $1839;
  $1880 = $1878 ^ $1840;
  $1881 = $1863 | $1855;
  $1882 = $1864 | $1856;
  $1883 = $1881 ^ $1843;
  $1884 = $1882 ^ $1844;
  $1885 = $1869 & $1859;
  $1886 = $1870 & $1860;
  $1887 = $1885 ^ $1849;
  $1888 = $1886 ^ $1850;
  $1889 = $1875 & $1863;
  $1890 = $1876 & $1864;
  $1891 = $1889 ^ $1855;
  $1892 = $1890 ^ $1856;
  $1893 = $1879 & $1831;
  $1894 = $1880 & $1832;
  $1895 = $1893 ^ $1859;
  $1896 = $1894 ^ $1860;
  $1897 = $1883 & $1835;
  $1898 = $1884 & $1836;
  $1899 = $1869 ^ $1831;
  $1900 = $1870 ^ $1832;
  $1901 = $1895 ^ $1883;
  $1902 = $1896 ^ $1884;
  $1903 = $1899 ^ $1863;
  $1904 = $1900 ^ $1864;
  $1905 = $1903 ^ $1897;
  $1906 = $1904 ^ $1898;
  $1907 = $1875 ^ $1835;
  $1908 = $1876 ^ $1836;
  $1909 = $1907 ^ $1879;
  $1910 = $1908 ^ $1880;
  $1911 = $1909 ^ $1887;
  $1912 = $1910 ^ $1888;
  $1913 = $1891 ^ $1879;
  $1914 = $1892 ^ $1880;
  $1915 = $1905 ^ $1879;
  $1916 = $1906 ^ $1880;
  $1917 = $arrayidx4;
  $1918 = $1917;
  HEAP32[$1918>>2] = $1915;
  $1919 = (($1917) + 4)|0;
  $1920 = $1919;
  HEAP32[$1920>>2] = $1916;
  $1921 = $1895 ^ $1911;
  $1922 = $1896 ^ $1912;
  $1923 = $arrayidx4$4;
  $1924 = $1923;
  HEAP32[$1924>>2] = $1921;
  $1925 = (($1923) + 4)|0;
  $1926 = $1925;
  HEAP32[$1926>>2] = $1922;
  $1927 = $1913 ^ $1899;
  $1928 = $1914 ^ $1900;
  $1929 = $1927 ^ $1901;
  $1930 = $1928 ^ $1902;
  $1931 = $arrayidx21$i;
  $1932 = $1931;
  HEAP32[$1932>>2] = $1929;
  $1933 = (($1931) + 4)|0;
  $1934 = $1933;
  HEAP32[$1934>>2] = $1930;
  $1935 = $1901 ^ $1887;
  $1936 = $1902 ^ $1888;
  $1937 = $arrayidx4$i;
  $1938 = $1937;
  HEAP32[$1938>>2] = $1935;
  $1939 = (($1937) + 4)|0;
  $1940 = $1939;
  HEAP32[$1940>>2] = $1936;
  $1941 = (_bitshift64Shl(($1901|0),($1902|0),16)|0);
  $1942 = (getTempRet0() | 0);
  $1943 = $1941 & -65536;
  $1944 = $1942 & -65536;
  $1945 = (_bitshift64Lshr(($1901|0),($1902|0),16)|0);
  $1946 = (getTempRet0() | 0);
  $1947 = $1945 & 65535;
  $1948 = $1946 & 65535;
  $1949 = $1943 | $1947;
  $1950 = $1944 | $1948;
  $1951 = $arrayidx4$2;
  $1952 = $1951;
  HEAP32[$1952>>2] = $1949;
  $1953 = (($1951) + 4)|0;
  $1954 = $1953;
  HEAP32[$1954>>2] = $1950;
  $1955 = (_bitshift64Shl(($1905|0),($1906|0),16)|0);
  $1956 = (getTempRet0() | 0);
  $1957 = $1955 & -65536;
  $1958 = $1956 & -65536;
  $1959 = (_bitshift64Lshr(($1905|0),($1906|0),16)|0);
  $1960 = (getTempRet0() | 0);
  $1961 = $1959 & 65535;
  $1962 = $1960 & 65535;
  $1963 = $1957 | $1961;
  $1964 = $1958 | $1962;
  $1965 = $arrayidx4$6;
  $1966 = $1965;
  HEAP32[$1966>>2] = $1963;
  $1967 = (($1965) + 4)|0;
  $1968 = $1967;
  HEAP32[$1968>>2] = $1964;
  $1969 = (_bitshift64Shl(($1911|0),($1912|0),16)|0);
  $1970 = (getTempRet0() | 0);
  $1971 = $1969 & -65536;
  $1972 = $1970 & -65536;
  $1973 = (_bitshift64Lshr(($1911|0),($1912|0),16)|0);
  $1974 = (getTempRet0() | 0);
  $1975 = $1973 & 65535;
  $1976 = $1974 & 65535;
  $1977 = $1971 | $1975;
  $1978 = $1972 | $1976;
  $1979 = $arrayidx34$phi$trans$insert$i;
  $1980 = $1979;
  HEAP32[$1980>>2] = $1977;
  $1981 = (($1979) + 4)|0;
  $1982 = $1981;
  HEAP32[$1982>>2] = $1978;
  $1983 = (_bitshift64Shl(($1913|0),($1914|0),16)|0);
  $1984 = (getTempRet0() | 0);
  $1985 = $1983 & -65536;
  $1986 = $1984 & -65536;
  $1987 = (_bitshift64Lshr(($1913|0),($1914|0),16)|0);
  $1988 = (getTempRet0() | 0);
  $1989 = $1987 & 65535;
  $1990 = $1988 & 65535;
  $1991 = $1985 | $1989;
  $1992 = $1986 | $1990;
  $1993 = $arrayidx12$phi$trans$insert$i;
  $1994 = $1993;
  HEAP32[$1994>>2] = $1991;
  $1995 = (($1993) + 4)|0;
  $1996 = $1995;
  HEAP32[$1996>>2] = $1992;
  $1997 = $1739 ^ -1;
  $1998 = $1740 ^ -1;
  $1999 = $1795 ^ -1;
  $2000 = $1796 ^ -1;
  $2001 = $1733 ^ -1;
  $2002 = $1734 ^ -1;
  $arrayidx1794$1$i = (((37552 + ($idxprom1790$i<<5)|0)) + 8|0);
  $2003 = $arrayidx1794$1$i;
  $2004 = $2003;
  $2005 = HEAP32[$2004>>2]|0;
  $2006 = (($2003) + 4)|0;
  $2007 = $2006;
  $2008 = HEAP32[$2007>>2]|0;
  $2009 = $2005 & $2001;
  $2010 = $2008 & $2002;
  $2011 = $2009 ^ $1719;
  $2012 = $2010 ^ $1720;
  $2013 = $1781 ^ -1;
  $2014 = $1782 ^ -1;
  $arrayidx1812$1$i = (((37552 + ($idxprom1790$i<<5)|0)) + 24|0);
  $2015 = $arrayidx1812$1$i;
  $2016 = $2015;
  $2017 = HEAP32[$2016>>2]|0;
  $2018 = (($2015) + 4)|0;
  $2019 = $2018;
  $2020 = HEAP32[$2019>>2]|0;
  $2021 = $2017 & $2013;
  $2022 = $2020 & $2014;
  $2023 = $2021 ^ $1753;
  $2024 = $2022 ^ $1754;
  $2025 = $2011 & $1725;
  $2026 = $2012 & $1726;
  $2027 = $2025 ^ $2005;
  $2028 = $2026 ^ $2008;
  $2029 = $2023 & $1767;
  $2030 = $2024 & $1768;
  $2031 = $2029 ^ $2017;
  $2032 = $2030 ^ $2020;
  $2033 = $1733 & $1997;
  $2034 = $1734 & $1998;
  $2035 = $2011 ^ $2033;
  $2036 = $2012 ^ $2034;
  $2037 = $1781 & $1999;
  $2038 = $1782 & $2000;
  $2039 = $2023 ^ $2037;
  $2040 = $2024 ^ $2038;
  $2041 = $1725 ^ -1;
  $2042 = $1726 ^ -1;
  $2043 = $1733 & $2041;
  $2044 = $1734 & $2042;
  $2045 = $2043 ^ $1997;
  $2046 = $2044 ^ $1998;
  $2047 = $1767 ^ -1;
  $2048 = $1768 ^ -1;
  $2049 = $1781 & $2047;
  $2050 = $1782 & $2048;
  $2051 = $2049 ^ $1999;
  $2052 = $2050 ^ $2000;
  $2053 = $2035 & $1733;
  $2054 = $2036 & $1734;
  $2055 = $2053 ^ $1725;
  $2056 = $2054 ^ $1726;
  $2057 = $2039 & $1781;
  $2058 = $2040 & $1782;
  $2059 = $2057 ^ $1767;
  $2060 = $2058 ^ $1768;
  $2061 = $2043 ^ $1739;
  $2062 = $2044 ^ $1740;
  $2063 = $2035 & $2061;
  $2064 = $2036 & $2062;
  $2065 = $2063 ^ $1733;
  $2066 = $2064 ^ $1734;
  $2067 = $2049 ^ $1795;
  $2068 = $2050 ^ $1796;
  $2069 = $2039 & $2067;
  $2070 = $2040 & $2068;
  $2071 = $2069 ^ $1781;
  $2072 = $2070 ^ $1782;
  $2073 = $2055 | $2045;
  $2074 = $2056 | $2046;
  $2075 = $2073 ^ $2035;
  $2076 = $2074 ^ $2036;
  $2077 = $2059 | $2051;
  $2078 = $2060 | $2052;
  $2079 = $2077 ^ $2039;
  $2080 = $2078 ^ $2040;
  $2081 = $2065 & $2055;
  $2082 = $2066 & $2056;
  $2083 = $2081 ^ $2045;
  $2084 = $2082 ^ $2046;
  $2085 = $2071 & $2059;
  $2086 = $2072 & $2060;
  $2087 = $2085 ^ $2051;
  $2088 = $2086 ^ $2052;
  $2089 = $2075 & $2027;
  $2090 = $2076 & $2028;
  $2091 = $2089 ^ $2055;
  $2092 = $2090 ^ $2056;
  $2093 = $2079 & $2031;
  $2094 = $2080 & $2032;
  $2095 = $2065 ^ $2027;
  $2096 = $2066 ^ $2028;
  $2097 = $2091 ^ $2079;
  $2098 = $2092 ^ $2080;
  $2099 = $2095 ^ $2059;
  $2100 = $2096 ^ $2060;
  $2101 = $2099 ^ $2093;
  $2102 = $2100 ^ $2094;
  $2103 = $2071 ^ $2031;
  $2104 = $2072 ^ $2032;
  $2105 = $2103 ^ $2075;
  $2106 = $2104 ^ $2076;
  $2107 = $2105 ^ $2083;
  $2108 = $2106 ^ $2084;
  $2109 = $2087 ^ $2075;
  $2110 = $2088 ^ $2076;
  $2111 = $2101 ^ $2075;
  $2112 = $2102 ^ $2076;
  $2113 = $arrayidx4$1;
  $2114 = $2113;
  HEAP32[$2114>>2] = $2111;
  $2115 = (($2113) + 4)|0;
  $2116 = $2115;
  HEAP32[$2116>>2] = $2112;
  $2117 = $2091 ^ $2107;
  $2118 = $2092 ^ $2108;
  $2119 = $arrayidx4$5;
  $2120 = $2119;
  HEAP32[$2120>>2] = $2117;
  $2121 = (($2119) + 4)|0;
  $2122 = $2121;
  HEAP32[$2122>>2] = $2118;
  $2123 = $2109 ^ $2095;
  $2124 = $2110 ^ $2096;
  $2125 = $2123 ^ $2097;
  $2126 = $2124 ^ $2098;
  $2127 = $arrayidx21$1$i;
  $2128 = $2127;
  HEAP32[$2128>>2] = $2125;
  $2129 = (($2127) + 4)|0;
  $2130 = $2129;
  HEAP32[$2130>>2] = $2126;
  $2131 = $2097 ^ $2083;
  $2132 = $2098 ^ $2084;
  $2133 = $arrayidx4$1$i;
  $2134 = $2133;
  HEAP32[$2134>>2] = $2131;
  $2135 = (($2133) + 4)|0;
  $2136 = $2135;
  HEAP32[$2136>>2] = $2132;
  $2137 = (_bitshift64Shl(($2097|0),($2098|0),16)|0);
  $2138 = (getTempRet0() | 0);
  $2139 = $2137 & -65536;
  $2140 = $2138 & -65536;
  $2141 = (_bitshift64Lshr(($2097|0),($2098|0),16)|0);
  $2142 = (getTempRet0() | 0);
  $2143 = $2141 & 65535;
  $2144 = $2142 & 65535;
  $2145 = $2139 | $2143;
  $2146 = $2140 | $2144;
  $2147 = $arrayidx4$3;
  $2148 = $2147;
  HEAP32[$2148>>2] = $2145;
  $2149 = (($2147) + 4)|0;
  $2150 = $2149;
  HEAP32[$2150>>2] = $2146;
  $2151 = (_bitshift64Shl(($2101|0),($2102|0),16)|0);
  $2152 = (getTempRet0() | 0);
  $2153 = $2151 & -65536;
  $2154 = $2152 & -65536;
  $2155 = (_bitshift64Lshr(($2101|0),($2102|0),16)|0);
  $2156 = (getTempRet0() | 0);
  $2157 = $2155 & 65535;
  $2158 = $2156 & 65535;
  $2159 = $2153 | $2157;
  $2160 = $2154 | $2158;
  $2161 = $arrayidx4$7;
  $2162 = $2161;
  HEAP32[$2162>>2] = $2159;
  $2163 = (($2161) + 4)|0;
  $2164 = $2163;
  HEAP32[$2164>>2] = $2160;
  $2165 = (_bitshift64Shl(($2107|0),($2108|0),16)|0);
  $2166 = (getTempRet0() | 0);
  $2167 = $2165 & -65536;
  $2168 = $2166 & -65536;
  $2169 = (_bitshift64Lshr(($2107|0),($2108|0),16)|0);
  $2170 = (getTempRet0() | 0);
  $2171 = $2169 & 65535;
  $2172 = $2170 & 65535;
  $2173 = $2167 | $2171;
  $2174 = $2168 | $2172;
  $2175 = $arrayidx34$1$i;
  $2176 = $2175;
  HEAP32[$2176>>2] = $2173;
  $2177 = (($2175) + 4)|0;
  $2178 = $2177;
  HEAP32[$2178>>2] = $2174;
  $2179 = (_bitshift64Shl(($2109|0),($2110|0),16)|0);
  $2180 = (getTempRet0() | 0);
  $2181 = $2179 & -65536;
  $2182 = $2180 & -65536;
  $2183 = (_bitshift64Lshr(($2109|0),($2110|0),16)|0);
  $2184 = (getTempRet0() | 0);
  $2185 = $2183 & 65535;
  $2186 = $2184 & 65535;
  $2187 = $2181 | $2185;
  $2188 = $2182 | $2186;
  $2189 = $arrayidx12$1$i;
  $2190 = $2189;
  HEAP32[$2190>>2] = $2187;
  $2191 = (($2189) + 4)|0;
  $2192 = $2191;
  HEAP32[$2192>>2] = $2188;
  $idxprom2234$i = (($168) + 5)|0;
  $arraydecay2236$i = (37552 + ($idxprom2234$i<<5)|0);
  $2193 = $1935 ^ -1;
  $2194 = $1936 ^ -1;
  $2195 = $1991 ^ -1;
  $2196 = $1992 ^ -1;
  $2197 = $1929 ^ -1;
  $2198 = $1930 ^ -1;
  $2199 = $arraydecay2236$i;
  $2200 = $2199;
  $2201 = HEAP32[$2200>>2]|0;
  $2202 = (($2199) + 4)|0;
  $2203 = $2202;
  $2204 = HEAP32[$2203>>2]|0;
  $2205 = $2201 & $2197;
  $2206 = $2204 & $2198;
  $2207 = $2205 ^ $1915;
  $2208 = $2206 ^ $1916;
  $2209 = $1977 ^ -1;
  $2210 = $1978 ^ -1;
  $arrayidx2256$i = (((37552 + ($idxprom2234$i<<5)|0)) + 16|0);
  $2211 = $arrayidx2256$i;
  $2212 = $2211;
  $2213 = HEAP32[$2212>>2]|0;
  $2214 = (($2211) + 4)|0;
  $2215 = $2214;
  $2216 = HEAP32[$2215>>2]|0;
  $2217 = $2213 & $2209;
  $2218 = $2216 & $2210;
  $2219 = $2217 ^ $1949;
  $2220 = $2218 ^ $1950;
  $2221 = $2207 & $1921;
  $2222 = $2208 & $1922;
  $2223 = $2221 ^ $2201;
  $2224 = $2222 ^ $2204;
  $2225 = $2219 & $1963;
  $2226 = $2220 & $1964;
  $2227 = $2225 ^ $2213;
  $2228 = $2226 ^ $2216;
  $2229 = $1929 & $2193;
  $2230 = $1930 & $2194;
  $2231 = $2207 ^ $2229;
  $2232 = $2208 ^ $2230;
  $2233 = $1977 & $2195;
  $2234 = $1978 & $2196;
  $2235 = $2219 ^ $2233;
  $2236 = $2220 ^ $2234;
  $2237 = $1921 ^ -1;
  $2238 = $1922 ^ -1;
  $2239 = $1929 & $2237;
  $2240 = $1930 & $2238;
  $2241 = $2239 ^ $2193;
  $2242 = $2240 ^ $2194;
  $2243 = $1963 ^ -1;
  $2244 = $1964 ^ -1;
  $2245 = $1977 & $2243;
  $2246 = $1978 & $2244;
  $2247 = $2245 ^ $2195;
  $2248 = $2246 ^ $2196;
  $2249 = $2231 & $1929;
  $2250 = $2232 & $1930;
  $2251 = $2249 ^ $1921;
  $2252 = $2250 ^ $1922;
  $2253 = $2235 & $1977;
  $2254 = $2236 & $1978;
  $2255 = $2253 ^ $1963;
  $2256 = $2254 ^ $1964;
  $2257 = $2239 ^ $1935;
  $2258 = $2240 ^ $1936;
  $2259 = $2231 & $2257;
  $2260 = $2232 & $2258;
  $2261 = $2259 ^ $1929;
  $2262 = $2260 ^ $1930;
  $2263 = $2245 ^ $1991;
  $2264 = $2246 ^ $1992;
  $2265 = $2235 & $2263;
  $2266 = $2236 & $2264;
  $2267 = $2265 ^ $1977;
  $2268 = $2266 ^ $1978;
  $2269 = $2251 | $2241;
  $2270 = $2252 | $2242;
  $2271 = $2269 ^ $2231;
  $2272 = $2270 ^ $2232;
  $2273 = $2255 | $2247;
  $2274 = $2256 | $2248;
  $2275 = $2273 ^ $2235;
  $2276 = $2274 ^ $2236;
  $2277 = $2261 & $2251;
  $2278 = $2262 & $2252;
  $2279 = $2277 ^ $2241;
  $2280 = $2278 ^ $2242;
  $2281 = $2267 & $2255;
  $2282 = $2268 & $2256;
  $2283 = $2281 ^ $2247;
  $2284 = $2282 ^ $2248;
  $2285 = $2271 & $2223;
  $2286 = $2272 & $2224;
  $2287 = $2285 ^ $2251;
  $2288 = $2286 ^ $2252;
  $2289 = $2275 & $2227;
  $2290 = $2276 & $2228;
  $2291 = $2261 ^ $2223;
  $2292 = $2262 ^ $2224;
  $2293 = $2287 ^ $2275;
  $2294 = $2288 ^ $2276;
  $2295 = $2291 ^ $2255;
  $2296 = $2292 ^ $2256;
  $2297 = $2295 ^ $2289;
  $2298 = $2296 ^ $2290;
  $2299 = $2267 ^ $2227;
  $2300 = $2268 ^ $2228;
  $2301 = $2299 ^ $2271;
  $2302 = $2300 ^ $2272;
  $2303 = $2301 ^ $2279;
  $2304 = $2302 ^ $2280;
  $2305 = $2283 ^ $2271;
  $2306 = $2284 ^ $2272;
  $2307 = $2297 ^ $2271;
  $2308 = $2298 ^ $2272;
  $2309 = $arrayidx4;
  $2310 = $2309;
  HEAP32[$2310>>2] = $2307;
  $2311 = (($2309) + 4)|0;
  $2312 = $2311;
  HEAP32[$2312>>2] = $2308;
  $2313 = $2287 ^ $2303;
  $2314 = $2288 ^ $2304;
  $2315 = $arrayidx4$4;
  $2316 = $2315;
  HEAP32[$2316>>2] = $2313;
  $2317 = (($2315) + 4)|0;
  $2318 = $2317;
  HEAP32[$2318>>2] = $2314;
  $2319 = $2305 ^ $2291;
  $2320 = $2306 ^ $2292;
  $2321 = $2319 ^ $2293;
  $2322 = $2320 ^ $2294;
  $2323 = $arrayidx21$i;
  $2324 = $2323;
  HEAP32[$2324>>2] = $2321;
  $2325 = (($2323) + 4)|0;
  $2326 = $2325;
  HEAP32[$2326>>2] = $2322;
  $2327 = $2293 ^ $2279;
  $2328 = $2294 ^ $2280;
  $2329 = $arrayidx4$i;
  $2330 = $2329;
  HEAP32[$2330>>2] = $2327;
  $2331 = (($2329) + 4)|0;
  $2332 = $2331;
  HEAP32[$2332>>2] = $2328;
  $2333 = $arrayidx4$2;
  $2334 = $2333;
  HEAP32[$2334>>2] = $2294;
  $2335 = (($2333) + 4)|0;
  $2336 = $2335;
  HEAP32[$2336>>2] = $2293;
  $2337 = $arrayidx4$6;
  $2338 = $2337;
  HEAP32[$2338>>2] = $2298;
  $2339 = (($2337) + 4)|0;
  $2340 = $2339;
  HEAP32[$2340>>2] = $2297;
  $2341 = $arrayidx34$phi$trans$insert$i;
  $2342 = $2341;
  HEAP32[$2342>>2] = $2304;
  $2343 = (($2341) + 4)|0;
  $2344 = $2343;
  HEAP32[$2344>>2] = $2303;
  $2345 = $arrayidx12$phi$trans$insert$i;
  $2346 = $2345;
  HEAP32[$2346>>2] = $2306;
  $2347 = (($2345) + 4)|0;
  $2348 = $2347;
  HEAP32[$2348>>2] = $2305;
  $2349 = $2131 ^ -1;
  $2350 = $2132 ^ -1;
  $2351 = $2187 ^ -1;
  $2352 = $2188 ^ -1;
  $2353 = $2125 ^ -1;
  $2354 = $2126 ^ -1;
  $arrayidx2238$1$i = (((37552 + ($idxprom2234$i<<5)|0)) + 8|0);
  $2355 = $arrayidx2238$1$i;
  $2356 = $2355;
  $2357 = HEAP32[$2356>>2]|0;
  $2358 = (($2355) + 4)|0;
  $2359 = $2358;
  $2360 = HEAP32[$2359>>2]|0;
  $2361 = $2357 & $2353;
  $2362 = $2360 & $2354;
  $2363 = $2361 ^ $2111;
  $2364 = $2362 ^ $2112;
  $2365 = $2173 ^ -1;
  $2366 = $2174 ^ -1;
  $arrayidx2256$1$i = (((37552 + ($idxprom2234$i<<5)|0)) + 24|0);
  $2367 = $arrayidx2256$1$i;
  $2368 = $2367;
  $2369 = HEAP32[$2368>>2]|0;
  $2370 = (($2367) + 4)|0;
  $2371 = $2370;
  $2372 = HEAP32[$2371>>2]|0;
  $2373 = $2369 & $2365;
  $2374 = $2372 & $2366;
  $2375 = $2373 ^ $2145;
  $2376 = $2374 ^ $2146;
  $2377 = $2363 & $2117;
  $2378 = $2364 & $2118;
  $2379 = $2377 ^ $2357;
  $2380 = $2378 ^ $2360;
  $2381 = $2375 & $2159;
  $2382 = $2376 & $2160;
  $2383 = $2381 ^ $2369;
  $2384 = $2382 ^ $2372;
  $2385 = $2125 & $2349;
  $2386 = $2126 & $2350;
  $2387 = $2363 ^ $2385;
  $2388 = $2364 ^ $2386;
  $2389 = $2173 & $2351;
  $2390 = $2174 & $2352;
  $2391 = $2375 ^ $2389;
  $2392 = $2376 ^ $2390;
  $2393 = $2117 ^ -1;
  $2394 = $2118 ^ -1;
  $2395 = $2125 & $2393;
  $2396 = $2126 & $2394;
  $2397 = $2395 ^ $2349;
  $2398 = $2396 ^ $2350;
  $2399 = $2159 ^ -1;
  $2400 = $2160 ^ -1;
  $2401 = $2173 & $2399;
  $2402 = $2174 & $2400;
  $2403 = $2401 ^ $2351;
  $2404 = $2402 ^ $2352;
  $2405 = $2387 & $2125;
  $2406 = $2388 & $2126;
  $2407 = $2405 ^ $2117;
  $2408 = $2406 ^ $2118;
  $2409 = $2391 & $2173;
  $2410 = $2392 & $2174;
  $2411 = $2409 ^ $2159;
  $2412 = $2410 ^ $2160;
  $2413 = $2395 ^ $2131;
  $2414 = $2396 ^ $2132;
  $2415 = $2387 & $2413;
  $2416 = $2388 & $2414;
  $2417 = $2415 ^ $2125;
  $2418 = $2416 ^ $2126;
  $2419 = $2401 ^ $2187;
  $2420 = $2402 ^ $2188;
  $2421 = $2391 & $2419;
  $2422 = $2392 & $2420;
  $2423 = $2421 ^ $2173;
  $2424 = $2422 ^ $2174;
  $2425 = $2407 | $2397;
  $2426 = $2408 | $2398;
  $2427 = $2425 ^ $2387;
  $2428 = $2426 ^ $2388;
  $2429 = $2411 | $2403;
  $2430 = $2412 | $2404;
  $2431 = $2429 ^ $2391;
  $2432 = $2430 ^ $2392;
  $2433 = $2417 & $2407;
  $2434 = $2418 & $2408;
  $2435 = $2433 ^ $2397;
  $2436 = $2434 ^ $2398;
  $2437 = $2423 & $2411;
  $2438 = $2424 & $2412;
  $2439 = $2437 ^ $2403;
  $2440 = $2438 ^ $2404;
  $2441 = $2427 & $2379;
  $2442 = $2428 & $2380;
  $2443 = $2441 ^ $2407;
  $2444 = $2442 ^ $2408;
  $2445 = $2431 & $2383;
  $2446 = $2432 & $2384;
  $2447 = $2417 ^ $2379;
  $2448 = $2418 ^ $2380;
  $2449 = $2443 ^ $2431;
  $2450 = $2444 ^ $2432;
  $2451 = $2447 ^ $2411;
  $2452 = $2448 ^ $2412;
  $2453 = $2451 ^ $2445;
  $2454 = $2452 ^ $2446;
  $2455 = $2423 ^ $2383;
  $2456 = $2424 ^ $2384;
  $2457 = $2455 ^ $2427;
  $2458 = $2456 ^ $2428;
  $2459 = $2457 ^ $2435;
  $2460 = $2458 ^ $2436;
  $2461 = $2439 ^ $2427;
  $2462 = $2440 ^ $2428;
  $2463 = $2453 ^ $2427;
  $2464 = $2454 ^ $2428;
  $2465 = $arrayidx4$1;
  $2466 = $2465;
  HEAP32[$2466>>2] = $2463;
  $2467 = (($2465) + 4)|0;
  $2468 = $2467;
  HEAP32[$2468>>2] = $2464;
  $2469 = $2443 ^ $2459;
  $2470 = $2444 ^ $2460;
  $2471 = $arrayidx4$5;
  $2472 = $2471;
  HEAP32[$2472>>2] = $2469;
  $2473 = (($2471) + 4)|0;
  $2474 = $2473;
  HEAP32[$2474>>2] = $2470;
  $2475 = $2461 ^ $2447;
  $2476 = $2462 ^ $2448;
  $2477 = $2475 ^ $2449;
  $2478 = $2476 ^ $2450;
  $2479 = $arrayidx21$1$i;
  $2480 = $2479;
  HEAP32[$2480>>2] = $2477;
  $2481 = (($2479) + 4)|0;
  $2482 = $2481;
  HEAP32[$2482>>2] = $2478;
  $2483 = $2449 ^ $2435;
  $2484 = $2450 ^ $2436;
  $2485 = $arrayidx4$1$i;
  $2486 = $2485;
  HEAP32[$2486>>2] = $2483;
  $2487 = (($2485) + 4)|0;
  $2488 = $2487;
  HEAP32[$2488>>2] = $2484;
  $2489 = $arrayidx4$3;
  $2490 = $2489;
  HEAP32[$2490>>2] = $2450;
  $2491 = (($2489) + 4)|0;
  $2492 = $2491;
  HEAP32[$2492>>2] = $2449;
  $2493 = $arrayidx4$7;
  $2494 = $2493;
  HEAP32[$2494>>2] = $2454;
  $2495 = (($2493) + 4)|0;
  $2496 = $2495;
  HEAP32[$2496>>2] = $2453;
  $2497 = $arrayidx34$1$i;
  $2498 = $2497;
  HEAP32[$2498>>2] = $2460;
  $2499 = (($2497) + 4)|0;
  $2500 = $2499;
  HEAP32[$2500>>2] = $2459;
  $2501 = $arrayidx12$1$i;
  $2502 = $2501;
  HEAP32[$2502>>2] = $2462;
  $2503 = (($2501) + 4)|0;
  $2504 = $2503;
  HEAP32[$2504>>2] = $2461;
  $idxprom2670$i = (($168) + 6)|0;
  $arraydecay2672$i = (37552 + ($idxprom2670$i<<5)|0);
  $2505 = $2327 ^ -1;
  $2506 = $2328 ^ -1;
  $2507 = $2306 ^ -1;
  $2508 = $2305 ^ -1;
  $2509 = $2321 ^ -1;
  $2510 = $2322 ^ -1;
  $2511 = $arraydecay2672$i;
  $2512 = $2511;
  $2513 = HEAP32[$2512>>2]|0;
  $2514 = (($2511) + 4)|0;
  $2515 = $2514;
  $2516 = HEAP32[$2515>>2]|0;
  $2517 = $2513 & $2509;
  $2518 = $2516 & $2510;
  $2519 = $2517 ^ $2307;
  $2520 = $2518 ^ $2308;
  $2521 = $2304 ^ -1;
  $2522 = $2303 ^ -1;
  $arrayidx2692$i = (((37552 + ($idxprom2670$i<<5)|0)) + 16|0);
  $2523 = $arrayidx2692$i;
  $2524 = $2523;
  $2525 = HEAP32[$2524>>2]|0;
  $2526 = (($2523) + 4)|0;
  $2527 = $2526;
  $2528 = HEAP32[$2527>>2]|0;
  $2529 = $2525 & $2521;
  $2530 = $2528 & $2522;
  $2531 = $2529 ^ $2294;
  $2532 = $2530 ^ $2293;
  $2533 = $2519 & $2313;
  $2534 = $2520 & $2314;
  $2535 = $2533 ^ $2513;
  $2536 = $2534 ^ $2516;
  $2537 = $2531 & $2298;
  $2538 = $2532 & $2297;
  $2539 = $2537 ^ $2525;
  $2540 = $2538 ^ $2528;
  $2541 = $2321 & $2505;
  $2542 = $2322 & $2506;
  $2543 = $2519 ^ $2541;
  $2544 = $2520 ^ $2542;
  $2545 = $2304 & $2507;
  $2546 = $2303 & $2508;
  $2547 = $2531 ^ $2545;
  $2548 = $2532 ^ $2546;
  $2549 = $2313 ^ -1;
  $2550 = $2314 ^ -1;
  $2551 = $2321 & $2549;
  $2552 = $2322 & $2550;
  $2553 = $2551 ^ $2505;
  $2554 = $2552 ^ $2506;
  $2555 = $2298 ^ -1;
  $2556 = $2297 ^ -1;
  $2557 = $2304 & $2555;
  $2558 = $2303 & $2556;
  $2559 = $2557 ^ $2507;
  $2560 = $2558 ^ $2508;
  $2561 = $2543 & $2321;
  $2562 = $2544 & $2322;
  $2563 = $2561 ^ $2313;
  $2564 = $2562 ^ $2314;
  $2565 = $2547 & $2304;
  $2566 = $2548 & $2303;
  $2567 = $2565 ^ $2298;
  $2568 = $2566 ^ $2297;
  $2569 = $2551 ^ $2327;
  $2570 = $2552 ^ $2328;
  $2571 = $2543 & $2569;
  $2572 = $2544 & $2570;
  $2573 = $2571 ^ $2321;
  $2574 = $2572 ^ $2322;
  $2575 = $2557 ^ $2306;
  $2576 = $2558 ^ $2305;
  $2577 = $2547 & $2575;
  $2578 = $2548 & $2576;
  $2579 = $2577 ^ $2304;
  $2580 = $2578 ^ $2303;
  $2581 = $2563 | $2553;
  $2582 = $2564 | $2554;
  $2583 = $2581 ^ $2543;
  $2584 = $2582 ^ $2544;
  $2585 = $2567 | $2559;
  $2586 = $2568 | $2560;
  $2587 = $2585 ^ $2547;
  $2588 = $2586 ^ $2548;
  $2589 = $2573 & $2563;
  $2590 = $2574 & $2564;
  $2591 = $2589 ^ $2553;
  $2592 = $2590 ^ $2554;
  $2593 = $2579 & $2567;
  $2594 = $2580 & $2568;
  $2595 = $2593 ^ $2559;
  $2596 = $2594 ^ $2560;
  $2597 = $2583 & $2535;
  $2598 = $2584 & $2536;
  $2599 = $2597 ^ $2563;
  $2600 = $2598 ^ $2564;
  $2601 = $2587 & $2539;
  $2602 = $2588 & $2540;
  $2603 = $2573 ^ $2535;
  $2604 = $2574 ^ $2536;
  $2605 = $2599 ^ $2587;
  $2606 = $2600 ^ $2588;
  $2607 = $2603 ^ $2567;
  $2608 = $2604 ^ $2568;
  $2609 = $2607 ^ $2601;
  $2610 = $2608 ^ $2602;
  $2611 = $2579 ^ $2539;
  $2612 = $2580 ^ $2540;
  $2613 = $2611 ^ $2583;
  $2614 = $2612 ^ $2584;
  $2615 = $2613 ^ $2591;
  $2616 = $2614 ^ $2592;
  $2617 = $2595 ^ $2583;
  $2618 = $2596 ^ $2584;
  $2619 = $2609 ^ $2583;
  $2620 = $2610 ^ $2584;
  $2621 = $arrayidx4;
  $2622 = $2621;
  HEAP32[$2622>>2] = $2619;
  $2623 = (($2621) + 4)|0;
  $2624 = $2623;
  HEAP32[$2624>>2] = $2620;
  $2625 = $2599 ^ $2615;
  $2626 = $2600 ^ $2616;
  $2627 = $arrayidx4$4;
  $2628 = $2627;
  HEAP32[$2628>>2] = $2625;
  $2629 = (($2627) + 4)|0;
  $2630 = $2629;
  HEAP32[$2630>>2] = $2626;
  $2631 = $2617 ^ $2603;
  $2632 = $2618 ^ $2604;
  $2633 = $2631 ^ $2605;
  $2634 = $2632 ^ $2606;
  $2635 = $arrayidx21$i;
  $2636 = $2635;
  HEAP32[$2636>>2] = $2633;
  $2637 = (($2635) + 4)|0;
  $2638 = $2637;
  HEAP32[$2638>>2] = $2634;
  $2639 = $2605 ^ $2591;
  $2640 = $2606 ^ $2592;
  $2641 = $arrayidx4$i;
  $2642 = $2641;
  HEAP32[$2642>>2] = $2639;
  $2643 = (($2641) + 4)|0;
  $2644 = $2643;
  HEAP32[$2644>>2] = $2640;
  $2645 = $2483 ^ -1;
  $2646 = $2484 ^ -1;
  $2647 = $2462 ^ -1;
  $2648 = $2461 ^ -1;
  $2649 = $2477 ^ -1;
  $2650 = $2478 ^ -1;
  $arrayidx2674$1$i = (((37552 + ($idxprom2670$i<<5)|0)) + 8|0);
  $2651 = $arrayidx2674$1$i;
  $2652 = $2651;
  $2653 = HEAP32[$2652>>2]|0;
  $2654 = (($2651) + 4)|0;
  $2655 = $2654;
  $2656 = HEAP32[$2655>>2]|0;
  $2657 = $2653 & $2649;
  $2658 = $2656 & $2650;
  $2659 = $2657 ^ $2463;
  $2660 = $2658 ^ $2464;
  $2661 = $2460 ^ -1;
  $2662 = $2459 ^ -1;
  $arrayidx2692$1$i = (((37552 + ($idxprom2670$i<<5)|0)) + 24|0);
  $2663 = $arrayidx2692$1$i;
  $2664 = $2663;
  $2665 = HEAP32[$2664>>2]|0;
  $2666 = (($2663) + 4)|0;
  $2667 = $2666;
  $2668 = HEAP32[$2667>>2]|0;
  $2669 = $2665 & $2661;
  $2670 = $2668 & $2662;
  $2671 = $2669 ^ $2450;
  $2672 = $2670 ^ $2449;
  $2673 = $2659 & $2469;
  $2674 = $2660 & $2470;
  $2675 = $2673 ^ $2653;
  $2676 = $2674 ^ $2656;
  $2677 = $2671 & $2454;
  $2678 = $2672 & $2453;
  $2679 = $2677 ^ $2665;
  $2680 = $2678 ^ $2668;
  $2681 = $2477 & $2645;
  $2682 = $2478 & $2646;
  $2683 = $2659 ^ $2681;
  $2684 = $2660 ^ $2682;
  $2685 = $2460 & $2647;
  $2686 = $2459 & $2648;
  $2687 = $2671 ^ $2685;
  $2688 = $2672 ^ $2686;
  $2689 = $2469 ^ -1;
  $2690 = $2470 ^ -1;
  $2691 = $2477 & $2689;
  $2692 = $2478 & $2690;
  $2693 = $2691 ^ $2645;
  $2694 = $2692 ^ $2646;
  $2695 = $2454 ^ -1;
  $2696 = $2453 ^ -1;
  $2697 = $2460 & $2695;
  $2698 = $2459 & $2696;
  $2699 = $2697 ^ $2647;
  $2700 = $2698 ^ $2648;
  $2701 = $2683 & $2477;
  $2702 = $2684 & $2478;
  $2703 = $2701 ^ $2469;
  $2704 = $2702 ^ $2470;
  $2705 = $2687 & $2460;
  $2706 = $2688 & $2459;
  $2707 = $2705 ^ $2454;
  $2708 = $2706 ^ $2453;
  $2709 = $2691 ^ $2483;
  $2710 = $2692 ^ $2484;
  $2711 = $2683 & $2709;
  $2712 = $2684 & $2710;
  $2713 = $2711 ^ $2477;
  $2714 = $2712 ^ $2478;
  $2715 = $2697 ^ $2462;
  $2716 = $2698 ^ $2461;
  $2717 = $2687 & $2715;
  $2718 = $2688 & $2716;
  $2719 = $2717 ^ $2460;
  $2720 = $2718 ^ $2459;
  $2721 = $2703 | $2693;
  $2722 = $2704 | $2694;
  $2723 = $2721 ^ $2683;
  $2724 = $2722 ^ $2684;
  $2725 = $2707 | $2699;
  $2726 = $2708 | $2700;
  $2727 = $2725 ^ $2687;
  $2728 = $2726 ^ $2688;
  $2729 = $2713 & $2703;
  $2730 = $2714 & $2704;
  $2731 = $2729 ^ $2693;
  $2732 = $2730 ^ $2694;
  $2733 = $2719 & $2707;
  $2734 = $2720 & $2708;
  $2735 = $2733 ^ $2699;
  $2736 = $2734 ^ $2700;
  $2737 = $2723 & $2675;
  $2738 = $2724 & $2676;
  $2739 = $2737 ^ $2703;
  $2740 = $2738 ^ $2704;
  $2741 = $2727 & $2679;
  $2742 = $2728 & $2680;
  $2743 = $2713 ^ $2675;
  $2744 = $2714 ^ $2676;
  $2745 = $2739 ^ $2727;
  $2746 = $2740 ^ $2728;
  $2747 = $2743 ^ $2707;
  $2748 = $2744 ^ $2708;
  $2749 = $2747 ^ $2741;
  $2750 = $2748 ^ $2742;
  $2751 = $2719 ^ $2679;
  $2752 = $2720 ^ $2680;
  $2753 = $2751 ^ $2723;
  $2754 = $2752 ^ $2724;
  $2755 = $2753 ^ $2731;
  $2756 = $2754 ^ $2732;
  $2757 = $2735 ^ $2723;
  $2758 = $2736 ^ $2724;
  $2759 = $2749 ^ $2723;
  $2760 = $2750 ^ $2724;
  $2761 = $arrayidx4$1;
  $2762 = $2761;
  HEAP32[$2762>>2] = $2759;
  $2763 = (($2761) + 4)|0;
  $2764 = $2763;
  HEAP32[$2764>>2] = $2760;
  $2765 = $2739 ^ $2755;
  $2766 = $2740 ^ $2756;
  $2767 = $arrayidx4$5;
  $2768 = $2767;
  HEAP32[$2768>>2] = $2765;
  $2769 = (($2767) + 4)|0;
  $2770 = $2769;
  HEAP32[$2770>>2] = $2766;
  $2771 = $2757 ^ $2743;
  $2772 = $2758 ^ $2744;
  $2773 = $2771 ^ $2745;
  $2774 = $2772 ^ $2746;
  $2775 = $arrayidx21$1$i;
  $2776 = $2775;
  HEAP32[$2776>>2] = $2773;
  $2777 = (($2775) + 4)|0;
  $2778 = $2777;
  HEAP32[$2778>>2] = $2774;
  $2779 = $2745 ^ $2731;
  $2780 = $2746 ^ $2732;
  $2781 = $arrayidx4$1$i;
  $2782 = $2781;
  HEAP32[$2782>>2] = $2779;
  $2783 = (($2781) + 4)|0;
  $2784 = $2783;
  HEAP32[$2784>>2] = $2780;
  $2785 = $arrayidx4$2;
  $2786 = $2785;
  HEAP32[$2786>>2] = $2745;
  $2787 = (($2785) + 4)|0;
  $2788 = $2787;
  HEAP32[$2788>>2] = $2746;
  $2789 = $arrayidx4$3;
  $2790 = $2789;
  HEAP32[$2790>>2] = $2605;
  $2791 = (($2789) + 4)|0;
  $2792 = $2791;
  HEAP32[$2792>>2] = $2606;
  $2793 = $arrayidx4$6;
  $2794 = $2793;
  HEAP32[$2794>>2] = $2749;
  $2795 = (($2793) + 4)|0;
  $2796 = $2795;
  HEAP32[$2796>>2] = $2750;
  $2797 = $arrayidx4$7;
  $2798 = $2797;
  HEAP32[$2798>>2] = $2609;
  $2799 = (($2797) + 4)|0;
  $2800 = $2799;
  HEAP32[$2800>>2] = $2610;
  $2801 = $arrayidx34$phi$trans$insert$i;
  $2802 = $2801;
  HEAP32[$2802>>2] = $2755;
  $2803 = (($2801) + 4)|0;
  $2804 = $2803;
  HEAP32[$2804>>2] = $2756;
  $2805 = $arrayidx34$1$i;
  $2806 = $2805;
  HEAP32[$2806>>2] = $2615;
  $2807 = (($2805) + 4)|0;
  $2808 = $2807;
  HEAP32[$2808>>2] = $2616;
  $2809 = $arrayidx12$phi$trans$insert$i;
  $2810 = $2809;
  HEAP32[$2810>>2] = $2757;
  $2811 = (($2809) + 4)|0;
  $2812 = $2811;
  HEAP32[$2812>>2] = $2758;
  $2813 = $arrayidx12$1$i;
  $2814 = $2813;
  HEAP32[$2814>>2] = $2617;
  $2815 = (($2813) + 4)|0;
  $2816 = $2815;
  HEAP32[$2816>>2] = $2618;
  $2818 = (_i64Add(($168|0),($2817|0),7,0)|0);
  $2819 = (getTempRet0() | 0);
  $2820 = ($2819>>>0)<(0);
  $2821 = ($2818>>>0)<(42);
  $2822 = ($2819|0)==(0);
  $2823 = $2822 & $2821;
  $2824 = $2820 | $2823;
  if ($2824) {
   $168 = $2818;$170 = $2639;$172 = $2640;$174 = $2757;$176 = $2758;$178 = $2633;$180 = $2634;$190 = $2619;$192 = $2620;$194 = $2755;$196 = $2756;$206 = $2745;$208 = $2746;$210 = $2625;$212 = $2626;$216 = $2749;$218 = $2750;$2817 = $2819;
  } else {
   break;
  }
 }
 $2825 = $arraydecay;
 $2826 = $2825;
 $2827 = HEAP32[$2826>>2]|0;
 $2828 = (($2825) + 4)|0;
 $2829 = $2828;
 $2830 = HEAP32[$2829>>2]|0;
 $2831 = $2633 ^ $2827;
 $2832 = $2634 ^ $2830;
 $2833 = $arrayidx21$i;
 $2834 = $2833;
 HEAP32[$2834>>2] = $2831;
 $2835 = (($2833) + 4)|0;
 $2836 = $2835;
 HEAP32[$2836>>2] = $2832;
 $2837 = $arrayidx$1;
 $2838 = $2837;
 $2839 = HEAP32[$2838>>2]|0;
 $2840 = (($2837) + 4)|0;
 $2841 = $2840;
 $2842 = HEAP32[$2841>>2]|0;
 $2843 = $2773 ^ $2839;
 $2844 = $2774 ^ $2842;
 $2845 = $arrayidx21$1$i;
 $2846 = $2845;
 HEAP32[$2846>>2] = $2843;
 $2847 = (($2845) + 4)|0;
 $2848 = $2847;
 HEAP32[$2848>>2] = $2844;
 $2849 = $arrayidx$2;
 $2850 = $2849;
 $2851 = HEAP32[$2850>>2]|0;
 $2852 = (($2849) + 4)|0;
 $2853 = $2852;
 $2854 = HEAP32[$2853>>2]|0;
 $2855 = $2755 ^ $2851;
 $2856 = $2756 ^ $2854;
 $2857 = $arrayidx34$phi$trans$insert$i;
 $2858 = $2857;
 HEAP32[$2858>>2] = $2855;
 $2859 = (($2857) + 4)|0;
 $2860 = $2859;
 HEAP32[$2860>>2] = $2856;
 $2861 = $arrayidx$3;
 $2862 = $2861;
 $2863 = HEAP32[$2862>>2]|0;
 $2864 = (($2861) + 4)|0;
 $2865 = $2864;
 $2866 = HEAP32[$2865>>2]|0;
 $2867 = $2615 ^ $2863;
 $2868 = $2616 ^ $2866;
 $2869 = $arrayidx34$1$i;
 $2870 = $2869;
 HEAP32[$2870>>2] = $2867;
 $2871 = (($2869) + 4)|0;
 $2872 = $2871;
 HEAP32[$2872>>2] = $2868;
 $2873 = $arrayidx$4;
 $2874 = $2873;
 $2875 = HEAP32[$2874>>2]|0;
 $2876 = (($2873) + 4)|0;
 $2877 = $2876;
 $2878 = HEAP32[$2877>>2]|0;
 $2879 = $2639 ^ $2875;
 $2880 = $2640 ^ $2878;
 $2881 = $arrayidx4$i;
 $2882 = $2881;
 HEAP32[$2882>>2] = $2879;
 $2883 = (($2881) + 4)|0;
 $2884 = $2883;
 HEAP32[$2884>>2] = $2880;
 $2885 = $arrayidx$5;
 $2886 = $2885;
 $2887 = HEAP32[$2886>>2]|0;
 $2888 = (($2885) + 4)|0;
 $2889 = $2888;
 $2890 = HEAP32[$2889>>2]|0;
 $2891 = $2779 ^ $2887;
 $2892 = $2780 ^ $2890;
 $2893 = $arrayidx4$1$i;
 $2894 = $2893;
 HEAP32[$2894>>2] = $2891;
 $2895 = (($2893) + 4)|0;
 $2896 = $2895;
 HEAP32[$2896>>2] = $2892;
 $2897 = $arrayidx$6;
 $2898 = $2897;
 $2899 = HEAP32[$2898>>2]|0;
 $2900 = (($2897) + 4)|0;
 $2901 = $2900;
 $2902 = HEAP32[$2901>>2]|0;
 $2903 = $2757 ^ $2899;
 $2904 = $2758 ^ $2902;
 $2905 = $arrayidx12$phi$trans$insert$i;
 $2906 = $2905;
 HEAP32[$2906>>2] = $2903;
 $2907 = (($2905) + 4)|0;
 $2908 = $2907;
 HEAP32[$2908>>2] = $2904;
 $2909 = $arrayidx$7;
 $2910 = $2909;
 $2911 = HEAP32[$2910>>2]|0;
 $2912 = (($2909) + 4)|0;
 $2913 = $2912;
 $2914 = HEAP32[$2913>>2]|0;
 $2915 = $2617 ^ $2911;
 $2916 = $2618 ^ $2914;
 $2917 = $arrayidx12$1$i;
 $2918 = $2917;
 HEAP32[$2918>>2] = $2915;
 $2919 = (($2917) + 4)|0;
 $2920 = $2919;
 HEAP32[$2920>>2] = $2916;
 return;
}
function _oaes_key_expand($ctx) {
 $ctx = $ctx|0;
 var $$pre = 0, $$pre60 = 0, $$pre61 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_i$059 = 0, $_temp = 0, $_temp$sroa$0$0$add$ptr$sroa_raw_idx$i = 0, $_temp$sroa$4$0$$sroa_raw_idx$i = 0, $add = 0, $add$ptr = 0;
 var $add$ptr45$2 = 0, $add$ptr70$2 = 0, $add87$1 = 0, $add87$2 = 0, $add87$3 = 0, $add97$1 = 0, $add97$2 = 0, $add97$3 = 0, $and$i = 0, $and$i$1 = 0, $and$i$2 = 0, $and$i$3 = 0, $and$i48 = 0, $and$i48$1 = 0, $and$i48$2 = 0, $and$i48$3 = 0, $arrayidx2$i = 0, $arrayidx2$i$1 = 0, $arrayidx2$i$2 = 0, $arrayidx2$i$3 = 0;
 var $arrayidx2$i50 = 0, $arrayidx2$i50$1 = 0, $arrayidx2$i50$2 = 0, $arrayidx2$i50$3 = 0, $arrayidx51 = 0, $arrayidx88 = 0, $arrayidx88$1 = 0, $arrayidx88$2 = 0, $arrayidx88$3 = 0, $arrayidx90$1$phi$trans$insert = 0, $arrayidx90$2$phi$trans$insert = 0, $arrayidx98 = 0, $arrayidx98$1 = 0, $arrayidx98$2 = 0, $arrayidx98$3 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp18 = 0, $cmp31 = 0;
 var $cmp3158 = 0, $cmp37 = 0, $cmp57 = 0, $cmp62 = 0, $conv$i = 0, $conv$i$1 = 0, $conv$i$2 = 0, $conv$i47 = 0, $conv$i47$1 = 0, $conv$i47$2 = 0, $conv$i47$3 = 0, $data = 0, $div = 0, $div49 = 0, $exp_data = 0, $exp_data33 = 0, $exp_data82$1 = 0, $exp_data82$2 = 0, $exp_data82$3 = 0, $exp_data_len = 0;
 var $inc103 = 0, $key_base = 0, $key_base36$phi$trans$insert = 0, $key_base84$1 = 0, $key_base84$2 = 0, $key_base84$3 = 0, $mul11 = 0, $mul30 = 0, $mul3057 = 0, $mul34 = 0, $mul86 = 0, $mul86$1 = 0, $mul86$2 = 0, $mul86$3 = 0, $num_keys = 0, $num_keys29 = 0, $or$cond = 0, $retval$0 = 0, $shr$i = 0, $shr$i$1 = 0;
 var $shr$i$2 = 0, $shr$i$3 = 0, $shr$i49 = 0, $shr$i49$1 = 0, $shr$i49$2 = 0, $shr$i49$3 = 0, $sub = 0, $sub50 = 0, $sub85 = 0, $sub85$1 = 0, $sub85$2 = 0, $sub85$3 = 0, $xor45 = 0, $xor9244 = 0, $xor9244$1 = 0, $xor9244$2 = 0, $xor9244$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_temp = sp;
 $cmp = ($ctx|0)==(0|0);
 if ($cmp) {
  $retval$0 = 2;
  STACKTOP = sp;return ($retval$0|0);
 }
 $0 = HEAP32[$ctx>>2]|0;
 $cmp1 = ($0|0)==(0|0);
 if ($cmp1) {
  $retval$0 = 7;
  STACKTOP = sp;return ($retval$0|0);
 }
 $1 = HEAP32[$0>>2]|0;
 $div = $1 >>> 2;
 $key_base = ((($0)) + 20|0);
 HEAP32[$key_base>>2] = $div;
 $add = (($div) + 7)|0;
 $num_keys = ((($0)) + 16|0);
 HEAP32[$num_keys>>2] = $add;
 $mul11 = $add << 4;
 $exp_data_len = ((($0)) + 8|0);
 HEAP32[$exp_data_len>>2] = $mul11;
 $call = (_calloc($mul11,1)|0);
 $exp_data = ((($0)) + 12|0);
 HEAP32[$exp_data>>2] = $call;
 $cmp18 = ($call|0)==(0|0);
 if ($cmp18) {
  $retval$0 = 8;
  STACKTOP = sp;return ($retval$0|0);
 }
 $data = ((($0)) + 4|0);
 $2 = HEAP32[$data>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 _memcpy(($call|0),($2|0),($3|0))|0;
 $4 = HEAP32[$key_base>>2]|0;
 $5 = HEAP32[$num_keys>>2]|0;
 $mul3057 = $5 << 2;
 $cmp3158 = ($4>>>0)<($mul3057>>>0);
 if (!($cmp3158)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $_temp$sroa$0$0$add$ptr$sroa_raw_idx$i = ((($_temp)) + 1|0);
 $_temp$sroa$4$0$$sroa_raw_idx$i = ((($_temp)) + 3|0);
 $add$ptr45$2 = ((($_temp)) + 2|0);
 $arrayidx90$1$phi$trans$insert = ((($_temp)) + 1|0);
 $arrayidx90$2$phi$trans$insert = ((($_temp)) + 2|0);
 $add$ptr70$2 = ((($_temp)) + 2|0);
 $6 = $0;$9 = $4;$_i$059 = $4;
 while(1) {
  $exp_data33 = ((($6)) + 12|0);
  $7 = HEAP32[$exp_data33>>2]|0;
  $sub = $_i$059 << 2;
  $mul34 = (($sub) + -4)|0;
  $add$ptr = (($7) + ($mul34)|0);
  $8 = HEAPU8[$add$ptr>>0]|(HEAPU8[$add$ptr+1>>0]<<8)|(HEAPU8[$add$ptr+2>>0]<<16)|(HEAPU8[$add$ptr+3>>0]<<24);
  HEAP32[$_temp>>2] = $8;
  $div49 = (($_i$059>>>0) / ($9>>>0))&-1;
  $10 = Math_imul($div49, $9)|0;
  $11 = (($_i$059) - ($10))|0;
  $cmp37 = ($11|0)==(0);
  $12 = $8 >>> 8;
  $13 = $8 >>> 16;
  $14 = $8 >>> 24;
  if ($cmp37) {
   _memmove(($_temp|0),($_temp$sroa$0$0$add$ptr$sroa_raw_idx$i|0),3)|0;
   $42 = HEAP8[$_temp>>0]|0;
   $conv$i47 = $42&255;
   $and$i48 = $conv$i47 & 15;
   $shr$i49 = $conv$i47 >>> 4;
   $arrayidx2$i50 = ((38896 + ($shr$i49<<4)|0) + ($and$i48)|0);
   $43 = HEAP8[$arrayidx2$i50>>0]|0;
   HEAP8[$_temp>>0] = $43;
   $44 = HEAP8[$_temp$sroa$0$0$add$ptr$sroa_raw_idx$i>>0]|0;
   $conv$i47$1 = $44&255;
   $and$i48$1 = $conv$i47$1 & 15;
   $shr$i49$1 = $conv$i47$1 >>> 4;
   $arrayidx2$i50$1 = ((38896 + ($shr$i49$1<<4)|0) + ($and$i48$1)|0);
   $45 = HEAP8[$arrayidx2$i50$1>>0]|0;
   HEAP8[$_temp$sroa$0$0$add$ptr$sroa_raw_idx$i>>0] = $45;
   $46 = HEAP8[$add$ptr45$2>>0]|0;
   $conv$i47$2 = $46&255;
   $and$i48$2 = $conv$i47$2 & 15;
   $shr$i49$2 = $conv$i47$2 >>> 4;
   $arrayidx2$i50$2 = ((38896 + ($shr$i49$2<<4)|0) + ($and$i48$2)|0);
   $47 = HEAP8[$arrayidx2$i50$2>>0]|0;
   HEAP8[$add$ptr45$2>>0] = $47;
   $and$i48$3 = $8 & 15;
   $conv$i47$3 = $8 >>> 4;
   $shr$i49$3 = $conv$i47$3 & 15;
   $arrayidx2$i50$3 = ((38896 + ($shr$i49$3<<4)|0) + ($and$i48$3)|0);
   $48 = HEAP8[$arrayidx2$i50$3>>0]|0;
   HEAP8[$_temp$sroa$4$0$$sroa_raw_idx$i>>0] = $48;
   $49 = HEAP8[$_temp>>0]|0;
   $sub50 = (($div49) + -1)|0;
   $arrayidx51 = (45839 + ($sub50)|0);
   $50 = HEAP8[$arrayidx51>>0]|0;
   $xor45 = $50 ^ $49;
   HEAP8[$_temp>>0] = $xor45;
   $$pre60 = HEAP8[$arrayidx90$1$phi$trans$insert>>0]|0;
   $$pre61 = HEAP8[$arrayidx90$2$phi$trans$insert>>0]|0;
   $20 = $xor45;$25 = $$pre60;$30 = $$pre61;$35 = $48;
  } else {
   $15 = $14&255;
   $16 = $13&255;
   $17 = $12&255;
   $18 = $8&255;
   $cmp57 = ($9>>>0)>(6);
   $cmp62 = ($11|0)==(4);
   $or$cond = $cmp57 & $cmp62;
   if ($or$cond) {
    $and$i = $8 & 15;
    $conv$i = $8 >>> 4;
    $shr$i = $conv$i & 15;
    $arrayidx2$i = ((38896 + ($shr$i<<4)|0) + ($and$i)|0);
    $38 = HEAP8[$arrayidx2$i>>0]|0;
    HEAP8[$_temp>>0] = $38;
    $and$i$1 = $12 & 15;
    $conv$i$1 = $8 >>> 12;
    $shr$i$1 = $conv$i$1 & 15;
    $arrayidx2$i$1 = ((38896 + ($shr$i$1<<4)|0) + ($and$i$1)|0);
    $39 = HEAP8[$arrayidx2$i$1>>0]|0;
    HEAP8[$_temp$sroa$0$0$add$ptr$sroa_raw_idx$i>>0] = $39;
    $and$i$2 = $13 & 15;
    $conv$i$2 = $8 >>> 20;
    $shr$i$2 = $conv$i$2 & 15;
    $arrayidx2$i$2 = ((38896 + ($shr$i$2<<4)|0) + ($and$i$2)|0);
    $40 = HEAP8[$arrayidx2$i$2>>0]|0;
    HEAP8[$add$ptr70$2>>0] = $40;
    $and$i$3 = $14 & 15;
    $shr$i$3 = $8 >>> 28;
    $arrayidx2$i$3 = ((38896 + ($shr$i$3<<4)|0) + ($and$i$3)|0);
    $41 = HEAP8[$arrayidx2$i$3>>0]|0;
    HEAP8[$_temp$sroa$4$0$$sroa_raw_idx$i>>0] = $41;
    $20 = $38;$25 = $39;$30 = $40;$35 = $41;
   } else {
    $20 = $18;$25 = $17;$30 = $16;$35 = $15;
   }
  }
  $sub85 = (($_i$059) - ($9))|0;
  $mul86 = $sub85 << 2;
  $arrayidx88 = (($7) + ($mul86)|0);
  $19 = HEAP8[$arrayidx88>>0]|0;
  $xor9244 = $20 ^ $19;
  $arrayidx98 = (($7) + ($sub)|0);
  HEAP8[$arrayidx98>>0] = $xor9244;
  $21 = HEAP32[$ctx>>2]|0;
  $exp_data82$1 = ((($21)) + 12|0);
  $22 = HEAP32[$exp_data82$1>>2]|0;
  $key_base84$1 = ((($21)) + 20|0);
  $23 = HEAP32[$key_base84$1>>2]|0;
  $sub85$1 = (($_i$059) - ($23))|0;
  $mul86$1 = $sub85$1 << 2;
  $add87$1 = $mul86$1 | 1;
  $arrayidx88$1 = (($22) + ($add87$1)|0);
  $24 = HEAP8[$arrayidx88$1>>0]|0;
  $xor9244$1 = $25 ^ $24;
  $add97$1 = $sub | 1;
  $arrayidx98$1 = (($22) + ($add97$1)|0);
  HEAP8[$arrayidx98$1>>0] = $xor9244$1;
  $26 = HEAP32[$ctx>>2]|0;
  $exp_data82$2 = ((($26)) + 12|0);
  $27 = HEAP32[$exp_data82$2>>2]|0;
  $key_base84$2 = ((($26)) + 20|0);
  $28 = HEAP32[$key_base84$2>>2]|0;
  $sub85$2 = (($_i$059) - ($28))|0;
  $mul86$2 = $sub85$2 << 2;
  $add87$2 = $mul86$2 | 2;
  $arrayidx88$2 = (($27) + ($add87$2)|0);
  $29 = HEAP8[$arrayidx88$2>>0]|0;
  $xor9244$2 = $30 ^ $29;
  $add97$2 = $sub | 2;
  $arrayidx98$2 = (($27) + ($add97$2)|0);
  HEAP8[$arrayidx98$2>>0] = $xor9244$2;
  $31 = HEAP32[$ctx>>2]|0;
  $exp_data82$3 = ((($31)) + 12|0);
  $32 = HEAP32[$exp_data82$3>>2]|0;
  $key_base84$3 = ((($31)) + 20|0);
  $33 = HEAP32[$key_base84$3>>2]|0;
  $sub85$3 = (($_i$059) - ($33))|0;
  $mul86$3 = $sub85$3 << 2;
  $add87$3 = $mul86$3 | 3;
  $arrayidx88$3 = (($32) + ($add87$3)|0);
  $34 = HEAP8[$arrayidx88$3>>0]|0;
  $xor9244$3 = $35 ^ $34;
  $add97$3 = $sub | 3;
  $arrayidx98$3 = (($32) + ($add97$3)|0);
  HEAP8[$arrayidx98$3>>0] = $xor9244$3;
  $inc103 = (($_i$059) + 1)|0;
  $36 = HEAP32[$ctx>>2]|0;
  $num_keys29 = ((($36)) + 16|0);
  $37 = HEAP32[$num_keys29>>2]|0;
  $mul30 = $37 << 2;
  $cmp31 = ($inc103>>>0)<($mul30>>>0);
  if (!($cmp31)) {
   $retval$0 = 0;
   break;
  }
  $key_base36$phi$trans$insert = ((($36)) + 20|0);
  $$pre = HEAP32[$key_base36$phi$trans$insert>>2]|0;
  $6 = $36;$9 = $$pre;$_i$059 = $inc103;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _oaes_key_import_data($ctx,$data,$data_len) {
 $ctx = $ctx|0;
 $data = $data|0;
 $data_len = $data_len|0;
 var $$in$i = 0, $$in$i47 = 0, $$in2$i = 0, $$in2$i54 = 0, $$pre$i = 0, $$pre$i45 = 0, $$pre1$i = 0, $$pre1$i52 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call15 = 0, $call28 = 0;
 var $call7 = 0, $cmp = 0, $cmp$i40 = 0, $cmp1 = 0, $cmp10 = 0, $cmp20 = 0, $data$i = 0, $data$i41 = 0, $data17 = 0, $data3$i = 0, $data3$i44 = 0, $exp_data$i = 0, $exp_data$i48 = 0, $exp_data8$i = 0, $exp_data8$i51 = 0, $retval$0 = 0, $tobool = 0, $tobool$i = 0, $tobool$i42 = 0, $tobool29 = 0;
 var $tobool5$i = 0, $tobool5$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($ctx|0)==(0|0);
 if ($cmp) {
  $retval$0 = 2;
  return ($retval$0|0);
 }
 $cmp1 = ($data|0)==(0|0);
 if ($cmp1) {
  $retval$0 = 3;
  return ($retval$0|0);
 }
 switch ($data_len|0) {
 case 32: case 24: case 16:  {
  break;
 }
 default: {
  $retval$0 = 4;
  return ($retval$0|0);
 }
 }
 $0 = HEAP32[$ctx>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  $data$i = ((($0)) + 4|0);
  $1 = HEAP32[$data$i>>2]|0;
  $tobool$i = ($1|0)==(0|0);
  if ($tobool$i) {
   $$in$i = $0;
  } else {
   _free($1);
   $2 = HEAP32[$ctx>>2]|0;
   $data3$i = ((($2)) + 4|0);
   HEAP32[$data3$i>>2] = 0;
   $$pre$i = HEAP32[$ctx>>2]|0;
   $$in$i = $$pre$i;
  }
  $exp_data$i = ((($$in$i)) + 12|0);
  $3 = HEAP32[$exp_data$i>>2]|0;
  $tobool5$i = ($3|0)==(0|0);
  if ($tobool5$i) {
   $$in2$i = $$in$i;
  } else {
   _free($3);
   $4 = HEAP32[$ctx>>2]|0;
   $exp_data8$i = ((($4)) + 12|0);
   HEAP32[$exp_data8$i>>2] = 0;
   $$pre1$i = HEAP32[$ctx>>2]|0;
   $$in2$i = $$pre1$i;
  }
  _free($$in2$i);
  HEAP32[$ctx>>2] = 0;
 }
 $call7 = (_calloc(24,1)|0);
 HEAP32[$ctx>>2] = $call7;
 $cmp10 = ($call7|0)==(0|0);
 if ($cmp10) {
  $retval$0 = 8;
  return ($retval$0|0);
 }
 HEAP32[$call7>>2] = $data_len;
 $call15 = (_calloc($data_len,1)|0);
 $data17 = ((($call7)) + 4|0);
 HEAP32[$data17>>2] = $call15;
 $cmp20 = ($call15|0)==(0|0);
 if ($cmp20) {
  _free($call7);
  HEAP32[$ctx>>2] = 0;
  $retval$0 = 8;
  return ($retval$0|0);
 }
 _memcpy(($call15|0),($data|0),($data_len|0))|0;
 $call28 = (_oaes_key_expand($ctx)|0);
 $tobool29 = ($call28|0)==(0);
 if ($tobool29) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $5 = HEAP32[$ctx>>2]|0;
 $cmp$i40 = ($5|0)==(0|0);
 if ($cmp$i40) {
  $retval$0 = 1;
  return ($retval$0|0);
 }
 $data$i41 = ((($5)) + 4|0);
 $6 = HEAP32[$data$i41>>2]|0;
 $tobool$i42 = ($6|0)==(0|0);
 if ($tobool$i42) {
  $$in$i47 = $5;
 } else {
  _free($6);
  $7 = HEAP32[$ctx>>2]|0;
  $data3$i44 = ((($7)) + 4|0);
  HEAP32[$data3$i44>>2] = 0;
  $$pre$i45 = HEAP32[$ctx>>2]|0;
  $$in$i47 = $$pre$i45;
 }
 $exp_data$i48 = ((($$in$i47)) + 12|0);
 $8 = HEAP32[$exp_data$i48>>2]|0;
 $tobool5$i49 = ($8|0)==(0|0);
 if ($tobool5$i49) {
  $$in2$i54 = $$in$i47;
 } else {
  _free($8);
  $9 = HEAP32[$ctx>>2]|0;
  $exp_data8$i51 = ((($9)) + 12|0);
  HEAP32[$exp_data8$i51>>2] = 0;
  $$pre1$i52 = HEAP32[$ctx>>2]|0;
  $$in2$i54 = $$pre1$i52;
 }
 _free($$in2$i54);
 HEAP32[$ctx>>2] = 0;
 $retval$0 = 1;
 return ($retval$0|0);
}
function _oaes_alloc() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr$i = 0, $add11$i = 0, $add14$i = 0, $add16$i = 0, $add3$i = 0, $add4$i = 0, $add5$i = 0, $add6$i = 0, $add7$i = 0, $add8$i = 0, $call = 0, $call1$i = 0;
 var $call15$i = 0, $call2$i = 0, $cmp = 0, $conv$i = 0, $millitm$i = 0, $retval$0 = 0, $timer$i = 0, $tm_hour$i = 0, $tm_mday$i = 0, $tm_min$i = 0, $tm_mon$i = 0, $tm_year$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $timer$i = sp;
 $call = (_calloc(24,1)|0);
 $cmp = ($call|0)==(0|0);
 if ($cmp) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 (_ftime(($timer$i|0))|0);
 $call1$i = (_gmtime(($timer$i|0))|0);
 $millitm$i = ((($timer$i)) + 4|0);
 $0 = HEAP16[$millitm$i>>1]|0;
 $conv$i = $0&65535;
 $call2$i = (_calloc(1,$conv$i)|0);
 $tm_year$i = ((($call1$i)) + 20|0);
 $1 = HEAP32[$tm_year$i>>2]|0;
 $tm_mon$i = ((($call1$i)) + 16|0);
 $2 = HEAP32[$tm_mon$i>>2]|0;
 $tm_mday$i = ((($call1$i)) + 12|0);
 $3 = HEAP32[$tm_mday$i>>2]|0;
 $tm_hour$i = ((($call1$i)) + 8|0);
 $4 = HEAP32[$tm_hour$i>>2]|0;
 $tm_min$i = ((($call1$i)) + 4|0);
 $5 = HEAP32[$tm_min$i>>2]|0;
 $6 = HEAP32[$call1$i>>2]|0;
 $add$ptr$i = (($call2$i) + ($conv$i)|0);
 $7 = $add$ptr$i;
 $call15$i = (_getpid()|0);
 $add3$i = (($conv$i) + 1901)|0;
 $add4$i = (($add3$i) + ($1))|0;
 $add5$i = (($add4$i) + ($2))|0;
 $add6$i = (($add5$i) + ($7))|0;
 $add7$i = (($add6$i) + ($3))|0;
 $add8$i = (($add7$i) + ($4))|0;
 $add11$i = (($add8$i) + ($5))|0;
 $add14$i = (($add11$i) + ($6))|0;
 $add16$i = (($add14$i) + ($call15$i))|0;
 $tobool$i = ($call2$i|0)==(0|0);
 if (!($tobool$i)) {
  _free($call2$i);
 }
 _srand($add16$i);
 HEAP32[$call>>2] = 0;
 (_oaes_set_option($call,2,0)|0);
 $retval$0 = $call;
 STACKTOP = sp;return ($retval$0|0);
}
function _oaes_set_option($ctx,$option,$value) {
 $ctx = $ctx|0;
 $option = $option|0;
 $value = $value|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx$1 = 0, $arrayidx$10 = 0, $arrayidx$11 = 0, $arrayidx$12 = 0, $arrayidx$13 = 0, $arrayidx$14 = 0, $arrayidx$15 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0;
 var $arrayidx$8 = 0, $arrayidx$9 = 0, $call = 0, $call$1 = 0, $call$10 = 0, $call$11 = 0, $call$12 = 0, $call$13 = 0, $call$14 = 0, $call$15 = 0, $call$2 = 0, $call$3 = 0, $call$4 = 0, $call$5 = 0, $call$6 = 0, $call$7 = 0, $call$8 = 0, $call$9 = 0, $cmp = 0, $conv13 = 0;
 var $conv13$1 = 0, $conv13$10 = 0, $conv13$11 = 0, $conv13$12 = 0, $conv13$13 = 0, $conv13$14 = 0, $conv13$15 = 0, $conv13$2 = 0, $conv13$3 = 0, $conv13$4 = 0, $conv13$5 = 0, $conv13$6 = 0, $conv13$7 = 0, $conv13$8 = 0, $conv13$9 = 0, $iv = 0, $iv14 = 0, $options = 0, $options4 = 0, $or13 = 0;
 var $retval$0 = 0, $tobool = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $cmp = ($ctx|0)==(0|0);
 if ($cmp) {
  $retval$0 = 2;
  return ($retval$0|0);
 }
 L4: do {
  switch ($option<<16>>16) {
  case 1:  {
   $options = ((($ctx)) + 4|0);
   $0 = HEAP16[$options>>1]|0;
   $1 = $0 & -3;
   HEAP16[$options>>1] = $1;
   $iv = ((($ctx)) + 6|0);
   ;HEAP16[$iv>>1]=0|0;HEAP16[$iv+2>>1]=0|0;HEAP16[$iv+4>>1]=0|0;HEAP16[$iv+6>>1]=0|0;HEAP16[$iv+8>>1]=0|0;HEAP16[$iv+10>>1]=0|0;HEAP16[$iv+12>>1]=0|0;HEAP16[$iv+14>>1]=0|0;
   $$pre$phiZ2D = $options;$4 = $1;
   break;
  }
  case 2:  {
   $options4 = ((($ctx)) + 4|0);
   $2 = HEAP16[$options4>>1]|0;
   $3 = $2 & -2;
   HEAP16[$options4>>1] = $3;
   $tobool = ($value|0)==(0|0);
   $iv14 = ((($ctx)) + 6|0);
   if ($tobool) {
    $call = (_rand()|0);
    $conv13 = $call&255;
    HEAP8[$iv14>>0] = $conv13;
    $call$1 = (_rand()|0);
    $conv13$1 = $call$1&255;
    $arrayidx$1 = ((($ctx)) + 7|0);
    HEAP8[$arrayidx$1>>0] = $conv13$1;
    $call$2 = (_rand()|0);
    $conv13$2 = $call$2&255;
    $arrayidx$2 = ((($ctx)) + 8|0);
    HEAP8[$arrayidx$2>>0] = $conv13$2;
    $call$3 = (_rand()|0);
    $conv13$3 = $call$3&255;
    $arrayidx$3 = ((($ctx)) + 9|0);
    HEAP8[$arrayidx$3>>0] = $conv13$3;
    $call$4 = (_rand()|0);
    $conv13$4 = $call$4&255;
    $arrayidx$4 = ((($ctx)) + 10|0);
    HEAP8[$arrayidx$4>>0] = $conv13$4;
    $call$5 = (_rand()|0);
    $conv13$5 = $call$5&255;
    $arrayidx$5 = ((($ctx)) + 11|0);
    HEAP8[$arrayidx$5>>0] = $conv13$5;
    $call$6 = (_rand()|0);
    $conv13$6 = $call$6&255;
    $arrayidx$6 = ((($ctx)) + 12|0);
    HEAP8[$arrayidx$6>>0] = $conv13$6;
    $call$7 = (_rand()|0);
    $conv13$7 = $call$7&255;
    $arrayidx$7 = ((($ctx)) + 13|0);
    HEAP8[$arrayidx$7>>0] = $conv13$7;
    $call$8 = (_rand()|0);
    $conv13$8 = $call$8&255;
    $arrayidx$8 = ((($ctx)) + 14|0);
    HEAP8[$arrayidx$8>>0] = $conv13$8;
    $call$9 = (_rand()|0);
    $conv13$9 = $call$9&255;
    $arrayidx$9 = ((($ctx)) + 15|0);
    HEAP8[$arrayidx$9>>0] = $conv13$9;
    $call$10 = (_rand()|0);
    $conv13$10 = $call$10&255;
    $arrayidx$10 = ((($ctx)) + 16|0);
    HEAP8[$arrayidx$10>>0] = $conv13$10;
    $call$11 = (_rand()|0);
    $conv13$11 = $call$11&255;
    $arrayidx$11 = ((($ctx)) + 17|0);
    HEAP8[$arrayidx$11>>0] = $conv13$11;
    $call$12 = (_rand()|0);
    $conv13$12 = $call$12&255;
    $arrayidx$12 = ((($ctx)) + 18|0);
    HEAP8[$arrayidx$12>>0] = $conv13$12;
    $call$13 = (_rand()|0);
    $conv13$13 = $call$13&255;
    $arrayidx$13 = ((($ctx)) + 19|0);
    HEAP8[$arrayidx$13>>0] = $conv13$13;
    $call$14 = (_rand()|0);
    $conv13$14 = $call$14&255;
    $arrayidx$14 = ((($ctx)) + 20|0);
    HEAP8[$arrayidx$14>>0] = $conv13$14;
    $call$15 = (_rand()|0);
    $conv13$15 = $call$15&255;
    $arrayidx$15 = ((($ctx)) + 21|0);
    HEAP8[$arrayidx$15>>0] = $conv13$15;
    $$pre = HEAP16[$options4>>1]|0;
    $$pre$phiZ2D = $options4;$4 = $$pre;
    break L4;
   } else {
    dest=$iv14; src=$value; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$pre$phiZ2D = $options4;$4 = $3;
    break L4;
   }
   break;
  }
  default: {
   $retval$0 = 3;
   return ($retval$0|0);
  }
  }
 } while(0);
 $or13 = $4 | $option;
 HEAP16[$$pre$phiZ2D>>1] = $or13;
 $retval$0 = 0;
 return ($retval$0|0);
}
function _oaes_free($ctx) {
 $ctx = $ctx|0;
 var $$in$i = 0, $$in2$i = 0, $$pre = 0, $$pre$i = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $cmp1 = 0, $data$i = 0, $data3$i = 0, $exp_data$i = 0, $exp_data8$i = 0, $retval$0 = 0, $tobool = 0;
 var $tobool$i = 0, $tobool5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($ctx|0)==(0|0);
 if ($cmp) {
  $retval$0 = 2;
  return ($retval$0|0);
 }
 $0 = HEAP32[$ctx>>2]|0;
 $cmp1 = ($0|0)==(0|0);
 if ($cmp1) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $1 = HEAP32[$0>>2]|0;
 $tobool = ($1|0)==(0|0);
 if ($tobool) {
  $6 = $0;
 } else {
  $data$i = ((($1)) + 4|0);
  $2 = HEAP32[$data$i>>2]|0;
  $tobool$i = ($2|0)==(0|0);
  if ($tobool$i) {
   $$in$i = $1;
  } else {
   _free($2);
   $3 = HEAP32[$0>>2]|0;
   $data3$i = ((($3)) + 4|0);
   HEAP32[$data3$i>>2] = 0;
   $$pre$i = HEAP32[$0>>2]|0;
   $$in$i = $$pre$i;
  }
  $exp_data$i = ((($$in$i)) + 12|0);
  $4 = HEAP32[$exp_data$i>>2]|0;
  $tobool5$i = ($4|0)==(0|0);
  if ($tobool5$i) {
   $$in2$i = $$in$i;
  } else {
   _free($4);
   $5 = HEAP32[$0>>2]|0;
   $exp_data8$i = ((($5)) + 12|0);
   HEAP32[$exp_data8$i>>2] = 0;
   $$pre1$i = HEAP32[$0>>2]|0;
   $$in2$i = $$pre1$i;
  }
  _free($$in2$i);
  HEAP32[$0>>2] = 0;
  $$pre = HEAP32[$ctx>>2]|0;
  $6 = $$pre;
 }
 _free($6);
 HEAP32[$ctx>>2] = 0;
 $retval$0 = 0;
 return ($retval$0|0);
}
function _skein_hash($hashbitlen,$data,$databitlen,$hashval) {
 $hashbitlen = $hashbitlen|0;
 $data = $data|0;
 $databitlen = $databitlen|0;
 $hashval = $hashval|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$i10$pre = 0, $$pre14$i = 0, $$pre15$i = 0, $$pre316$i = 0, $$pre317$i = 0, $$pre317$i$pre = 0, $$pre318$i = 0, $$pre319$i = 0, $$pre319$i$pre = 0, $$pre320$i = 0, $$pre37 = 0, $$pre38 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $X$i31$i = 0, $add$i$i21 = 0, $add$i13$i = 0, $add$i133$i = 0, $add$i203$i = 0;
 var $add$i273$i = 0, $add$i43$i = 0, $add$ptr$i$i24 = 0, $add$ptr$i140$i = 0, $add$ptr$i210$i = 0, $add$ptr$i26$i = 0, $add$ptr$i280$i = 0, $add$ptr$i56$i = 0, $add$ptr23$i$i = 0, $add$ptr23$i120$i = 0, $add$ptr23$i155$i = 0, $add$ptr23$i190$i = 0, $add$ptr23$i225$i = 0, $add$ptr23$i260$i = 0, $add$ptr23$i295$i = 0, $add$ptr23$i52$i = 0, $add$ptr23$i86$i = 0, $add34$i$i = 0, $add34$i129$i = 0, $add34$i164$i$pre$phiZZZ2D = 0;
 var $add34$i199$i = 0, $add34$i234$i$pre$phiZZZ2D = 0, $add34$i269$i = 0, $add34$i304$i$pre$phiZZZ2D = 0, $add34$i61$i = 0, $add34$i95$i = 0, $and$i = 0, $and17$i = 0, $arraydecay$i$i20 = 0, $arraydecay$i11$i = 0, $arraydecay$i147$i = 0, $arraydecay$i217$i = 0, $arraydecay$i287$i = 0, $arraydecay$i41$i = 0, $arraydecay15$i45$i = 0, $arraydecay21$i$i = 0, $arraydecay7$i7$i = 0, $arrayidx$i = 0, $arrayidx$i142$i = 0, $arrayidx$i212$i = 0;
 var $arrayidx$i282$i = 0, $arrayidx$i33$i = 0, $arrayidx$i9$i = 0, $arrayidx11$i$i = 0, $arrayidx15$i$i = 0, $arrayidx17$i$i = 0, $arrayidx18$i$i = 0, $arrayidx20$i$i = 0, $arrayidx22$i48$i = 0, $arrayidx25$i$pre$phi$iZZ2D = 0, $arrayidx28$i13$pre$phi$iZZ2D = 0, $arrayidx31$i$i = 0, $arrayidx31$i128$i = 0, $arrayidx31$i163$i = 0, $arrayidx31$i198$i = 0, $arrayidx31$i233$i = 0, $arrayidx31$i268$i = 0, $arrayidx31$i303$i = 0, $arrayidx31$i60$i = 0, $arrayidx31$i94$i = 0;
 var $arrayidx4$i$i = 0, $arrayidx4$i38$i = 0, $arrayidx4$i8$i = 0, $arrayidx49$i = 0, $bCnt$i10$i = 0, $bCnt$i237$i = 0, $bCnt$i35$i = 0, $bCnt$i63$i = 0, $bCnt30$i$pre$phi$iZZ2D = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i16 = 0, $cmp$i134$i = 0, $cmp$i169$i = 0, $cmp$i204$i = 0, $cmp$i239$i = 0, $cmp$i274$i = 0, $cmp$i3 = 0, $cmp$i31$i = 0, $cmp$i36$i = 0;
 var $cmp$i6$i = 0, $cmp$i65$i = 0, $cmp$i99$i = 0, $cmp162$i$i = 0, $cmp162$i16$i = 0, $cmp162$i46$i = 0, $cmp18$i151$i = 0, $cmp18$i221$i = 0, $cmp18$i291$i = 0, $cmp32$i$i = 0, $cmp32$i24$i = 0, $cmp32$i54$i = 0, $cond$i = 0, $conv14$i = 0, $conv19$i = 0, $ctx1024$i = 0, $ctx1024$i27 = 0, $ctx1024$i8 = 0, $ctx102441$i = 0, $div$i$i = 0;
 var $div$i122$i = 0, $div$i157$i = 0, $div$i192$i = 0, $div$i227$i = 0, $div$i262$i = 0, $div$i297$i = 0, $div$i54$i = 0, $div$i88$i = 0, $exitcond$i$i = 0, $exitcond$i29$i = 0, $exitcond$i59$i = 0, $i$03$i$i = 0, $i$03$i21$i = 0, $i$03$i51$i = 0, $inc$i$i = 0, $inc$i27$i = 0, $inc$i57$i = 0, $msg$addr$0$i145$i = 0, $msg$addr$0$i215$i = 0, $msg$addr$0$i285$i = 0;
 var $msg$addr$2$i$i = 0, $msg$addr$2$i124$i = 0, $msg$addr$2$i159$i = 0, $msg$addr$2$i159308$i = 0, $msg$addr$2$i194$i = 0, $msg$addr$2$i229$i = 0, $msg$addr$2$i229311$i = 0, $msg$addr$2$i264$i = 0, $msg$addr$2$i299$i = 0, $msg$addr$2$i299314$i = 0, $msg$addr$2$i56$i = 0, $msg$addr$2$i90$i = 0, $msgByteCnt$addr$0$i146$i = 0, $msgByteCnt$addr$0$i216$i = 0, $msgByteCnt$addr$0$i286$i = 0, $msgByteCnt$addr$2$i$i = 0, $msgByteCnt$addr$2$i125$i = 0, $msgByteCnt$addr$2$i160$i = 0, $msgByteCnt$addr$2$i160309$i = 0, $msgByteCnt$addr$2$i195$i = 0;
 var $msgByteCnt$addr$2$i230$i = 0, $msgByteCnt$addr$2$i230312$i = 0, $msgByteCnt$addr$2$i265$i = 0, $msgByteCnt$addr$2$i300$i = 0, $msgByteCnt$addr$2$i300315$i = 0, $msgByteCnt$addr$2$i57$i = 0, $msgByteCnt$addr$2$i91$i = 0, $mul$i$i = 0, $mul$i$i25 = 0, $mul$i118$i = 0, $mul$i153$i = 0, $mul$i188$i = 0, $mul$i223$i = 0, $mul$i258$i = 0, $mul$i28$i = 0, $mul$i293$i = 0, $mul$i50$i = 0, $mul$i58$i = 0, $mul$i84$i = 0, $mul4$i$i = 0;
 var $mul4$i20$i = 0, $mul4$i50$i = 0, $or$i = 0, $retval$0$i = 0, $retval$1$i = 0, $shl$i = 0, $shr$i = 0, $shr$i$i = 0, $shr$i12 = 0, $shr$i14$i = 0, $shr$i44$i = 0, $shr11$i = 0, $shr2$i = 0, $shr21$i = 0, $shr5$i = 0, $shr9$i = 0, $spec$store$select$i$i = 0, $spec$store$select$i25$i = 0, $spec$store$select$i55$i = 0, $state = 0;
 var $sub$i = 0, $sub$i$i18 = 0, $sub$i137$i = 0, $sub$i207$i = 0, $sub$i277$i = 0, $sub$i37$i = 0, $sub$i7$i = 0, $sub10$i141$i = 0, $sub10$i211$i = 0, $sub10$i281$i = 0, $sub16$i = 0, $sub20$i$i = 0, $sub20$i117$i = 0, $sub20$i152$i = 0, $sub20$i187$i = 0, $sub20$i222$i = 0, $sub20$i257$i = 0, $sub20$i292$i = 0, $sub20$i49$i = 0, $sub20$i83$i = 0;
 var $sub21$i$i = 0, $sub21$i121$i = 0, $sub21$i156$i = 0, $sub21$i191$i = 0, $sub21$i226$i = 0, $sub21$i261$i = 0, $sub21$i296$i = 0, $sub21$i53$i = 0, $sub21$i87$i = 0, $sub31$i$i = 0, $sub31$i23$i = 0, $sub31$i53$i = 0, $tobool26$i$i = 0, $tobool26$i126$i = 0, $tobool26$i161$i = 0, $tobool26$i196$i = 0, $tobool26$i231$i = 0, $tobool26$i266$i = 0, $tobool26$i301$i = 0, $tobool26$i58$i = 0;
 var $tobool26$i92$i = 0, $tobool6$i138$i = 0, $tobool6$i208$i = 0, $tobool6$i278$i = 0, $trunc$i = 0, $trunc$i$clear = 0, $trunc$i13 = 0, $trunc$i13$clear = 0, $trunc28$i = 0, $trunc28$i$clear = 0, $u$i = 0, $u$i14 = 0, $u$i6 = 0, $u2$i = 0, $u24$i = 0, $u32$i = 0, $u4$i = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $X$i31$i = sp;
 $state = sp + 128|0;
 $cmp$i = ($hashbitlen|0)<(513);
 if ($cmp$i) {
  HEAP32[$state>>2] = 512;
  $u$i = ((($state)) + 8|0);
  HEAP32[$u$i>>2] = $hashbitlen;
  $0 = (($hashbitlen) + -224)|0;
  $1 = $0 >>> 5;
  $2 = $0 << 27;
  $3 = $1 | $2;
  switch ($3|0) {
  case 9:  {
   $4 = ((($state)) + 32|0);
   dest=$4; src=39344; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   break;
  }
  case 5:  {
   $5 = ((($state)) + 32|0);
   dest=$5; src=39280; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   break;
  }
  case 1:  {
   $6 = ((($state)) + 32|0);
   dest=$6; src=39216; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   break;
  }
  case 0:  {
   $7 = ((($state)) + 32|0);
   dest=$7; src=39152; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   break;
  }
  default: {
   $8 = ((($state)) + 16|0);
   $9 = $8;
   $10 = $9;
   HEAP32[$10>>2] = 0;
   $11 = (($9) + 4)|0;
   $12 = $11;
   HEAP32[$12>>2] = 0;
   $13 = ((($state)) + 24|0);
   $14 = $13;
   $15 = $14;
   HEAP32[$15>>2] = 0;
   $16 = (($14) + 4)|0;
   $17 = $16;
   HEAP32[$17>>2] = -1006632960;
   $18 = ((($state)) + 12|0);
   HEAP32[$18>>2] = 0;
   $19 = $X$i31$i;
   $20 = $19;
   HEAP32[$20>>2] = 859916371;
   $21 = (($19) + 4)|0;
   $22 = $21;
   HEAP32[$22>>2] = 1;
   $arrayidx18$i$i = ((($X$i31$i)) + 8|0);
   $23 = $arrayidx18$i$i;
   $24 = $23;
   HEAP32[$24>>2] = $hashbitlen;
   $25 = (($23) + 4)|0;
   $26 = $25;
   HEAP32[$26>>2] = 0;
   $arrayidx20$i$i = ((($X$i31$i)) + 16|0);
   $27 = ((($state)) + 32|0);
   dest=$arrayidx20$i$i; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   dest=$27; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   _Skein_512_Process_Block($u$i,$X$i31$i,1,32);
  }
  }
  $28 = ((($state)) + 16|0);
  $29 = $28;
  $30 = $29;
  HEAP32[$30>>2] = 0;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = 0;
  $33 = ((($state)) + 24|0);
  $34 = $33;
  $35 = $34;
  HEAP32[$35>>2] = 0;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = 1879048192;
  $38 = ((($state)) + 12|0);
  HEAP32[$38>>2] = 0;
 } else {
  HEAP32[$state>>2] = 1024;
  $ctx1024$i = ((($state)) + 8|0);
  HEAP32[$ctx1024$i>>2] = $hashbitlen;
  $cond$i = ($hashbitlen|0)==(1024);
  if ($cond$i) {
   $arraydecay7$i7$i = ((($state)) + 32|0);
   dest=$arraydecay7$i7$i; src=39408; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $$pre$i = ((($state)) + 16|0);
   $$pre14$i = ((($state)) + 24|0);
   $$pre15$i = ((($state)) + 12|0);
   $arrayidx25$i$pre$phi$iZZ2D = $$pre$i;$arrayidx28$i13$pre$phi$iZZ2D = $$pre14$i;$bCnt30$i$pre$phi$iZZ2D = $$pre15$i;
  } else {
   $arrayidx$i9$i = ((($state)) + 16|0);
   $39 = $arrayidx$i9$i;
   $40 = $39;
   HEAP32[$40>>2] = 0;
   $41 = (($39) + 4)|0;
   $42 = $41;
   HEAP32[$42>>2] = 0;
   $arrayidx11$i$i = ((($state)) + 24|0);
   $43 = $arrayidx11$i$i;
   $44 = $43;
   HEAP32[$44>>2] = 0;
   $45 = (($43) + 4)|0;
   $46 = $45;
   HEAP32[$46>>2] = -1006632960;
   $bCnt$i10$i = ((($state)) + 12|0);
   HEAP32[$bCnt$i10$i>>2] = 0;
   $47 = $X$i31$i;
   $48 = $47;
   HEAP32[$48>>2] = 859916371;
   $49 = (($47) + 4)|0;
   $50 = $49;
   HEAP32[$50>>2] = 1;
   $arrayidx15$i$i = ((($X$i31$i)) + 8|0);
   $51 = $arrayidx15$i$i;
   $52 = $51;
   HEAP32[$52>>2] = $hashbitlen;
   $53 = (($51) + 4)|0;
   $54 = $53;
   HEAP32[$54>>2] = 0;
   $arrayidx17$i$i = ((($X$i31$i)) + 16|0);
   $arraydecay21$i$i = ((($state)) + 32|0);
   dest=$arrayidx17$i$i; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   dest=$arraydecay21$i$i; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   _Skein1024_Process_Block($ctx1024$i,$X$i31$i,1,32);
   $arrayidx25$i$pre$phi$iZZ2D = $arrayidx$i9$i;$arrayidx28$i13$pre$phi$iZZ2D = $arrayidx11$i$i;$bCnt30$i$pre$phi$iZZ2D = $bCnt$i10$i;
  }
  $55 = $arrayidx25$i$pre$phi$iZZ2D;
  $56 = $55;
  HEAP32[$56>>2] = 0;
  $57 = (($55) + 4)|0;
  $58 = $57;
  HEAP32[$58>>2] = 0;
  $59 = $arrayidx28$i13$pre$phi$iZZ2D;
  $60 = $59;
  HEAP32[$60>>2] = 0;
  $61 = (($59) + 4)|0;
  $62 = $61;
  HEAP32[$62>>2] = 1879048192;
  HEAP32[$bCnt30$i$pre$phi$iZZ2D>>2] = 0;
 }
 $and$i = $databitlen & 7;
 $cmp$i3 = ($and$i|0)==(0);
 L16: do {
  if ($cmp$i3) {
   $63 = HEAP32[$state>>2]|0;
   $shr$i = $63 >>> 8;
   $trunc28$i = $shr$i&255;
   $trunc28$i$clear = $trunc28$i & 3;
   switch ($trunc28$i$clear<<24>>24) {
   case 2:  {
    $u$i6 = ((($state)) + 8|0);
    $shr2$i = $databitlen >>> 3;
    $64 = ((($state)) + 12|0);
    $cmp$i$i = ($databitlen>>>0)>(519);
    if ($cmp$i$i) {
     $sub20$i$i = (($shr2$i) + -1)|0;
     $mul$i$i = $sub20$i$i & -64;
     $add$ptr23$i$i = (($data) + ($mul$i$i)|0);
     $sub21$i$i = (($shr2$i) - ($mul$i$i))|0;
     $div$i$i = $sub20$i$i >>> 6;
     _Skein_512_Process_Block($u$i6,$data,$div$i$i,64);
     $msg$addr$2$i$i = $add$ptr23$i$i;$msgByteCnt$addr$2$i$i = $sub21$i$i;
    } else {
     $msg$addr$2$i$i = $data;$msgByteCnt$addr$2$i$i = $shr2$i;
    }
    $tobool26$i$i = ($msgByteCnt$addr$2$i$i|0)==(0);
    if ($tobool26$i$i) {
     $retval$1$i = 0;
     break L16;
    }
    $65 = HEAP32[$64>>2]|0;
    $arrayidx31$i$i = (((($u$i6)) + 88|0) + ($65)|0);
    _memcpy(($arrayidx31$i$i|0),($msg$addr$2$i$i|0),($msgByteCnt$addr$2$i$i|0))|0;
    $add34$i$i = (($65) + ($msgByteCnt$addr$2$i$i))|0;
    HEAP32[$64>>2] = $add34$i$i;
    $retval$1$i = 0;
    break L16;
    break;
   }
   case 1:  {
    $u4$i = ((($state)) + 8|0);
    $shr5$i = $databitlen >>> 3;
    $66 = ((($state)) + 12|0);
    $cmp$i31$i = ($databitlen>>>0)>(263);
    if ($cmp$i31$i) {
     $sub20$i49$i = (($shr5$i) + -1)|0;
     $mul$i50$i = $sub20$i49$i & -32;
     $add$ptr23$i52$i = (($data) + ($mul$i50$i)|0);
     $sub21$i53$i = (($shr5$i) - ($mul$i50$i))|0;
     $div$i54$i = $sub20$i49$i >>> 5;
     _Skein_256_Process_Block($u4$i,$data,$div$i54$i,32);
     $msg$addr$2$i56$i = $add$ptr23$i52$i;$msgByteCnt$addr$2$i57$i = $sub21$i53$i;
    } else {
     $msg$addr$2$i56$i = $data;$msgByteCnt$addr$2$i57$i = $shr5$i;
    }
    $tobool26$i58$i = ($msgByteCnt$addr$2$i57$i|0)==(0);
    if ($tobool26$i58$i) {
     $retval$1$i = 0;
     break L16;
    }
    $67 = HEAP32[$66>>2]|0;
    $arrayidx31$i60$i = (((($u4$i)) + 56|0) + ($67)|0);
    _memcpy(($arrayidx31$i60$i|0),($msg$addr$2$i56$i|0),($msgByteCnt$addr$2$i57$i|0))|0;
    $add34$i61$i = (($67) + ($msgByteCnt$addr$2$i57$i))|0;
    HEAP32[$66>>2] = $add34$i61$i;
    $retval$1$i = 0;
    break L16;
    break;
   }
   case 0:  {
    $shr9$i = $databitlen >>> 3;
    $bCnt$i63$i = ((($state)) + 12|0);
    $cmp$i65$i = ($databitlen>>>0)>(1031);
    if ($cmp$i65$i) {
     $ctx1024$i8 = ((($state)) + 8|0);
     $sub20$i83$i = (($shr9$i) + -1)|0;
     $mul$i84$i = $sub20$i83$i & -128;
     $add$ptr23$i86$i = (($data) + ($mul$i84$i)|0);
     $sub21$i87$i = (($shr9$i) - ($mul$i84$i))|0;
     $div$i88$i = $sub20$i83$i >>> 7;
     _Skein1024_Process_Block($ctx1024$i8,$data,$div$i88$i,128);
     $msg$addr$2$i90$i = $add$ptr23$i86$i;$msgByteCnt$addr$2$i91$i = $sub21$i87$i;
    } else {
     $msg$addr$2$i90$i = $data;$msgByteCnt$addr$2$i91$i = $shr9$i;
    }
    $tobool26$i92$i = ($msgByteCnt$addr$2$i91$i|0)==(0);
    if ($tobool26$i92$i) {
     $retval$1$i = 0;
     break L16;
    }
    $68 = HEAP32[$bCnt$i63$i>>2]|0;
    $arrayidx31$i94$i = (((($state)) + 160|0) + ($68)|0);
    _memcpy(($arrayidx31$i94$i|0),($msg$addr$2$i90$i|0),($msgByteCnt$addr$2$i91$i|0))|0;
    $add34$i95$i = (($68) + ($msgByteCnt$addr$2$i91$i))|0;
    HEAP32[$bCnt$i63$i>>2] = $add34$i95$i;
    $retval$1$i = 0;
    break L16;
    break;
   }
   default: {
    $retval$1$i = 1;
    break L16;
   }
   }
  } else {
   $shr11$i = $databitlen >>> 3;
   $sub$i = $and$i ^ 7;
   $shl$i = 1 << $sub$i;
   $arrayidx$i = (($data) + ($shr11$i)|0);
   $69 = HEAP8[$arrayidx$i>>0]|0;
   $conv14$i = $69&255;
   $sub16$i = (0 - ($shl$i))|0;
   $and17$i = $conv14$i & $sub16$i;
   $or$i = $and17$i | $shl$i;
   $conv19$i = $or$i&255;
   HEAP8[$X$i31$i>>0] = $conv19$i;
   $70 = HEAP32[$state>>2]|0;
   $shr21$i = $70 >>> 8;
   $trunc$i = $shr21$i&255;
   $trunc$i$clear = $trunc$i & 3;
   L35: do {
    switch ($trunc$i$clear<<24>>24) {
    case 2:  {
     $u24$i = ((($state)) + 8|0);
     $71 = ((($state)) + 12|0);
     $cmp$i99$i = ($databitlen>>>0)>(519);
     if ($cmp$i99$i) {
      $sub20$i117$i = (($shr11$i) + -1)|0;
      $mul$i118$i = $sub20$i117$i & -64;
      $add$ptr23$i120$i = (($data) + ($mul$i118$i)|0);
      $sub21$i121$i = (($shr11$i) - ($mul$i118$i))|0;
      $div$i122$i = $sub20$i117$i >>> 6;
      _Skein_512_Process_Block($u24$i,$data,$div$i122$i,64);
      $$pre319$i$pre = HEAP32[$71>>2]|0;
      $$pre319$i = $$pre319$i$pre;$msg$addr$2$i124$i = $add$ptr23$i120$i;$msgByteCnt$addr$2$i125$i = $sub21$i121$i;
     } else {
      $$pre319$i = 0;$msg$addr$2$i124$i = $data;$msgByteCnt$addr$2$i125$i = $shr11$i;
     }
     $tobool26$i126$i = ($msgByteCnt$addr$2$i125$i|0)==(0);
     $add34$i129$i = (($$pre319$i) + ($msgByteCnt$addr$2$i125$i))|0;
     if ($tobool26$i126$i) {
      $72 = $$pre319$i;
     } else {
      $arrayidx31$i128$i = (((($u24$i)) + 88|0) + ($$pre319$i)|0);
      _memcpy(($arrayidx31$i128$i|0),($msg$addr$2$i124$i|0),($msgByteCnt$addr$2$i125$i|0))|0;
      HEAP32[$71>>2] = $add34$i129$i;
      $72 = $add34$i129$i;
     }
     $add$i133$i = (($72) + 1)|0;
     $cmp$i134$i = ($add$i133$i>>>0)>(64);
     if ($cmp$i134$i) {
      $sub$i137$i = (64 - ($72))|0;
      $tobool6$i138$i = ($sub$i137$i|0)==(0);
      if ($tobool6$i138$i) {
       $msg$addr$0$i145$i = $X$i31$i;$msgByteCnt$addr$0$i146$i = 1;
      } else {
       $add$ptr$i140$i = (($X$i31$i) + ($sub$i137$i)|0);
       $sub10$i141$i = (1 - ($sub$i137$i))|0;
       $arrayidx$i142$i = (((($u24$i)) + 88|0) + ($72)|0);
       _memcpy(($arrayidx$i142$i|0),($X$i31$i|0),($sub$i137$i|0))|0;
       HEAP32[$71>>2] = 64;
       $msg$addr$0$i145$i = $add$ptr$i140$i;$msgByteCnt$addr$0$i146$i = $sub10$i141$i;
      }
      $arraydecay$i147$i = ((($state)) + 96|0);
      _Skein_512_Process_Block($u24$i,$arraydecay$i147$i,1,64);
      HEAP32[$71>>2] = 0;
      $cmp18$i151$i = ($msgByteCnt$addr$0$i146$i>>>0)>(64);
      $sub20$i152$i = (($msgByteCnt$addr$0$i146$i) + -1)|0;
      $mul$i153$i = $sub20$i152$i & -64;
      if ($cmp18$i151$i) {
       $add$ptr23$i155$i = (($msg$addr$0$i145$i) + ($mul$i153$i)|0);
       $sub21$i156$i = (($msgByteCnt$addr$0$i146$i) - ($mul$i153$i))|0;
       $div$i157$i = $sub20$i152$i >>> 6;
       _Skein_512_Process_Block($u24$i,$msg$addr$0$i145$i,$div$i157$i,64);
       $msg$addr$2$i159$i = $add$ptr23$i155$i;$msgByteCnt$addr$2$i160$i = $sub21$i156$i;
      } else {
       $msg$addr$2$i159$i = $msg$addr$0$i145$i;$msgByteCnt$addr$2$i160$i = $msgByteCnt$addr$0$i146$i;
      }
      $tobool26$i161$i = ($msgByteCnt$addr$2$i160$i|0)==(0);
      if ($tobool26$i161$i) {
       label = 64;
       break L35;
      }
      $$pre320$i = HEAP32[$71>>2]|0;
      $$pre = (($$pre320$i) + ($msgByteCnt$addr$2$i160$i))|0;
      $73 = $$pre320$i;$add34$i164$i$pre$phiZZZ2D = $$pre;$msg$addr$2$i159308$i = $msg$addr$2$i159$i;$msgByteCnt$addr$2$i160309$i = $msgByteCnt$addr$2$i160$i;
     } else {
      $73 = $72;$add34$i164$i$pre$phiZZZ2D = $add$i133$i;$msg$addr$2$i159308$i = $X$i31$i;$msgByteCnt$addr$2$i160309$i = 1;
     }
     $arrayidx31$i163$i = (((($u24$i)) + 88|0) + ($73)|0);
     _memcpy(($arrayidx31$i163$i|0),($msg$addr$2$i159308$i|0),($msgByteCnt$addr$2$i160309$i|0))|0;
     HEAP32[$71>>2] = $add34$i164$i$pre$phiZZZ2D;
     label = 64;
     break;
    }
    case 1:  {
     $u32$i = ((($state)) + 8|0);
     $74 = ((($state)) + 12|0);
     $cmp$i169$i = ($databitlen>>>0)>(263);
     if ($cmp$i169$i) {
      $sub20$i187$i = (($shr11$i) + -1)|0;
      $mul$i188$i = $sub20$i187$i & -32;
      $add$ptr23$i190$i = (($data) + ($mul$i188$i)|0);
      $sub21$i191$i = (($shr11$i) - ($mul$i188$i))|0;
      $div$i192$i = $sub20$i187$i >>> 5;
      _Skein_256_Process_Block($u32$i,$data,$div$i192$i,32);
      $$pre317$i$pre = HEAP32[$74>>2]|0;
      $$pre317$i = $$pre317$i$pre;$msg$addr$2$i194$i = $add$ptr23$i190$i;$msgByteCnt$addr$2$i195$i = $sub21$i191$i;
     } else {
      $$pre317$i = 0;$msg$addr$2$i194$i = $data;$msgByteCnt$addr$2$i195$i = $shr11$i;
     }
     $tobool26$i196$i = ($msgByteCnt$addr$2$i195$i|0)==(0);
     $add34$i199$i = (($$pre317$i) + ($msgByteCnt$addr$2$i195$i))|0;
     if ($tobool26$i196$i) {
      $75 = $$pre317$i;
     } else {
      $arrayidx31$i198$i = (((($u32$i)) + 56|0) + ($$pre317$i)|0);
      _memcpy(($arrayidx31$i198$i|0),($msg$addr$2$i194$i|0),($msgByteCnt$addr$2$i195$i|0))|0;
      HEAP32[$74>>2] = $add34$i199$i;
      $75 = $add34$i199$i;
     }
     $add$i203$i = (($75) + 1)|0;
     $cmp$i204$i = ($add$i203$i>>>0)>(32);
     if ($cmp$i204$i) {
      $sub$i207$i = (32 - ($75))|0;
      $tobool6$i208$i = ($sub$i207$i|0)==(0);
      if ($tobool6$i208$i) {
       $msg$addr$0$i215$i = $X$i31$i;$msgByteCnt$addr$0$i216$i = 1;
      } else {
       $add$ptr$i210$i = (($X$i31$i) + ($sub$i207$i)|0);
       $sub10$i211$i = (1 - ($sub$i207$i))|0;
       $arrayidx$i212$i = (((($u32$i)) + 56|0) + ($75)|0);
       _memcpy(($arrayidx$i212$i|0),($X$i31$i|0),($sub$i207$i|0))|0;
       HEAP32[$74>>2] = 32;
       $msg$addr$0$i215$i = $add$ptr$i210$i;$msgByteCnt$addr$0$i216$i = $sub10$i211$i;
      }
      $arraydecay$i217$i = ((($state)) + 64|0);
      _Skein_256_Process_Block($u32$i,$arraydecay$i217$i,1,32);
      HEAP32[$74>>2] = 0;
      $cmp18$i221$i = ($msgByteCnt$addr$0$i216$i>>>0)>(32);
      $sub20$i222$i = (($msgByteCnt$addr$0$i216$i) + -1)|0;
      $mul$i223$i = $sub20$i222$i & -32;
      if ($cmp18$i221$i) {
       $add$ptr23$i225$i = (($msg$addr$0$i215$i) + ($mul$i223$i)|0);
       $sub21$i226$i = (($msgByteCnt$addr$0$i216$i) - ($mul$i223$i))|0;
       $div$i227$i = $sub20$i222$i >>> 5;
       _Skein_256_Process_Block($u32$i,$msg$addr$0$i215$i,$div$i227$i,32);
       $msg$addr$2$i229$i = $add$ptr23$i225$i;$msgByteCnt$addr$2$i230$i = $sub21$i226$i;
      } else {
       $msg$addr$2$i229$i = $msg$addr$0$i215$i;$msgByteCnt$addr$2$i230$i = $msgByteCnt$addr$0$i216$i;
      }
      $tobool26$i231$i = ($msgByteCnt$addr$2$i230$i|0)==(0);
      if ($tobool26$i231$i) {
       label = 64;
       break L35;
      }
      $$pre318$i = HEAP32[$74>>2]|0;
      $$pre37 = (($$pre318$i) + ($msgByteCnt$addr$2$i230$i))|0;
      $76 = $$pre318$i;$add34$i234$i$pre$phiZZZ2D = $$pre37;$msg$addr$2$i229311$i = $msg$addr$2$i229$i;$msgByteCnt$addr$2$i230312$i = $msgByteCnt$addr$2$i230$i;
     } else {
      $76 = $75;$add34$i234$i$pre$phiZZZ2D = $add$i203$i;$msg$addr$2$i229311$i = $X$i31$i;$msgByteCnt$addr$2$i230312$i = 1;
     }
     $arrayidx31$i233$i = (((($u32$i)) + 56|0) + ($76)|0);
     _memcpy(($arrayidx31$i233$i|0),($msg$addr$2$i229311$i|0),($msgByteCnt$addr$2$i230312$i|0))|0;
     HEAP32[$74>>2] = $add34$i234$i$pre$phiZZZ2D;
     label = 64;
     break;
    }
    case 0:  {
     $ctx102441$i = ((($state)) + 8|0);
     $bCnt$i237$i = ((($state)) + 12|0);
     $cmp$i239$i = ($databitlen>>>0)>(1031);
     if ($cmp$i239$i) {
      $sub20$i257$i = (($shr11$i) + -1)|0;
      $mul$i258$i = $sub20$i257$i & -128;
      $add$ptr23$i260$i = (($data) + ($mul$i258$i)|0);
      $sub21$i261$i = (($shr11$i) - ($mul$i258$i))|0;
      $div$i262$i = $sub20$i257$i >>> 7;
      _Skein1024_Process_Block($ctx102441$i,$data,$div$i262$i,128);
      $$pre$i10$pre = HEAP32[$bCnt$i237$i>>2]|0;
      $$pre$i10 = $$pre$i10$pre;$msg$addr$2$i264$i = $add$ptr23$i260$i;$msgByteCnt$addr$2$i265$i = $sub21$i261$i;
     } else {
      $$pre$i10 = 0;$msg$addr$2$i264$i = $data;$msgByteCnt$addr$2$i265$i = $shr11$i;
     }
     $tobool26$i266$i = ($msgByteCnt$addr$2$i265$i|0)==(0);
     $add34$i269$i = (($$pre$i10) + ($msgByteCnt$addr$2$i265$i))|0;
     if ($tobool26$i266$i) {
      $77 = $$pre$i10;
     } else {
      $arrayidx31$i268$i = (((($state)) + 160|0) + ($$pre$i10)|0);
      _memcpy(($arrayidx31$i268$i|0),($msg$addr$2$i264$i|0),($msgByteCnt$addr$2$i265$i|0))|0;
      HEAP32[$bCnt$i237$i>>2] = $add34$i269$i;
      $77 = $add34$i269$i;
     }
     $add$i273$i = (($77) + 1)|0;
     $cmp$i274$i = ($add$i273$i>>>0)>(128);
     if ($cmp$i274$i) {
      $sub$i277$i = (128 - ($77))|0;
      $tobool6$i278$i = ($sub$i277$i|0)==(0);
      if ($tobool6$i278$i) {
       $msg$addr$0$i285$i = $X$i31$i;$msgByteCnt$addr$0$i286$i = 1;
      } else {
       $add$ptr$i280$i = (($X$i31$i) + ($sub$i277$i)|0);
       $sub10$i281$i = (1 - ($sub$i277$i))|0;
       $arrayidx$i282$i = (((($state)) + 160|0) + ($77)|0);
       _memcpy(($arrayidx$i282$i|0),($X$i31$i|0),($sub$i277$i|0))|0;
       HEAP32[$bCnt$i237$i>>2] = 128;
       $msg$addr$0$i285$i = $add$ptr$i280$i;$msgByteCnt$addr$0$i286$i = $sub10$i281$i;
      }
      $arraydecay$i287$i = ((($state)) + 160|0);
      _Skein1024_Process_Block($ctx102441$i,$arraydecay$i287$i,1,128);
      HEAP32[$bCnt$i237$i>>2] = 0;
      $cmp18$i291$i = ($msgByteCnt$addr$0$i286$i>>>0)>(128);
      $sub20$i292$i = (($msgByteCnt$addr$0$i286$i) + -1)|0;
      $mul$i293$i = $sub20$i292$i & -128;
      if ($cmp18$i291$i) {
       $add$ptr23$i295$i = (($msg$addr$0$i285$i) + ($mul$i293$i)|0);
       $sub21$i296$i = (($msgByteCnt$addr$0$i286$i) - ($mul$i293$i))|0;
       $div$i297$i = $sub20$i292$i >>> 7;
       _Skein1024_Process_Block($ctx102441$i,$msg$addr$0$i285$i,$div$i297$i,128);
       $msg$addr$2$i299$i = $add$ptr23$i295$i;$msgByteCnt$addr$2$i300$i = $sub21$i296$i;
      } else {
       $msg$addr$2$i299$i = $msg$addr$0$i285$i;$msgByteCnt$addr$2$i300$i = $msgByteCnt$addr$0$i286$i;
      }
      $tobool26$i301$i = ($msgByteCnt$addr$2$i300$i|0)==(0);
      if ($tobool26$i301$i) {
       label = 64;
       break L35;
      }
      $$pre316$i = HEAP32[$bCnt$i237$i>>2]|0;
      $$pre38 = (($$pre316$i) + ($msgByteCnt$addr$2$i300$i))|0;
      $78 = $$pre316$i;$add34$i304$i$pre$phiZZZ2D = $$pre38;$msg$addr$2$i299314$i = $msg$addr$2$i299$i;$msgByteCnt$addr$2$i300315$i = $msgByteCnt$addr$2$i300$i;
     } else {
      $78 = $77;$add34$i304$i$pre$phiZZZ2D = $add$i273$i;$msg$addr$2$i299314$i = $X$i31$i;$msgByteCnt$addr$2$i300315$i = 1;
     }
     $arrayidx31$i303$i = (((($state)) + 160|0) + ($78)|0);
     _memcpy(($arrayidx31$i303$i|0),($msg$addr$2$i299314$i|0),($msgByteCnt$addr$2$i300315$i|0))|0;
     HEAP32[$bCnt$i237$i>>2] = $add34$i304$i$pre$phiZZZ2D;
     label = 64;
     break;
    }
    default: {
     $retval$0$i = 1;
    }
    }
   } while(0);
   if ((label|0) == 64) {
    $arrayidx49$i = ((($state)) + 24|0);
    $79 = $arrayidx49$i;
    $80 = $79;
    $81 = HEAP32[$80>>2]|0;
    $82 = (($79) + 4)|0;
    $83 = $82;
    $84 = HEAP32[$83>>2]|0;
    $85 = $84 | 8388608;
    $86 = $arrayidx49$i;
    $87 = $86;
    HEAP32[$87>>2] = $81;
    $88 = (($86) + 4)|0;
    $89 = $88;
    HEAP32[$89>>2] = $85;
    $retval$0$i = 0;
   }
   $retval$1$i = $retval$0$i;
  }
 } while(0);
 $90 = HEAP32[$state>>2]|0;
 $shr$i12 = $90 >>> 8;
 $trunc$i13 = $shr$i12&255;
 $trunc$i13$clear = $trunc$i13 & 3;
 switch ($trunc$i13$clear<<24>>24) {
 case 2:  {
  $u$i14 = ((($state)) + 8|0);
  $91 = ((($state)) + 24|0);
  $92 = $91;
  $93 = $92;
  $94 = HEAP32[$93>>2]|0;
  $95 = (($92) + 4)|0;
  $96 = $95;
  $97 = HEAP32[$96>>2]|0;
  $98 = $97 | -2147483648;
  $99 = $91;
  $100 = $99;
  HEAP32[$100>>2] = $94;
  $101 = (($99) + 4)|0;
  $102 = $101;
  HEAP32[$102>>2] = $98;
  $103 = ((($state)) + 12|0);
  $104 = HEAP32[$103>>2]|0;
  $cmp$i$i16 = ($104>>>0)<(64);
  if ($cmp$i$i16) {
   $sub$i$i18 = (64 - ($104))|0;
   $arrayidx4$i$i = (((($u$i14)) + 88|0) + ($104)|0);
   _memset(($arrayidx4$i$i|0),0,($sub$i$i18|0))|0;
  }
  $arraydecay$i$i20 = ((($state)) + 96|0);
  _Skein_512_Process_Block($u$i14,$arraydecay$i$i20,1,$104);
  $105 = HEAP32[$u$i14>>2]|0;
  $add$i$i21 = (($105) + 7)|0;
  $shr$i$i = $add$i$i21 >>> 3;
  dest=$arraydecay$i$i20; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $106 = ((($state)) + 32|0);
  dest=$X$i31$i; src=$106; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $cmp162$i$i = ($shr$i$i|0)==(0);
  if (!($cmp162$i$i)) {
   $107 = ((($state)) + 16|0);
   $108 = (($shr$i$i) + -1)|0;
   $109 = $108 >>> 6;
   $i$03$i$i = 0;$mul4$i$i = 0;
   while(1) {
    $110 = $arraydecay$i$i20;
    $111 = $110;
    HEAP32[$111>>2] = $i$03$i$i;
    $112 = (($110) + 4)|0;
    $113 = $112;
    HEAP32[$113>>2] = 0;
    $114 = $107;
    $115 = $114;
    HEAP32[$115>>2] = 0;
    $116 = (($114) + 4)|0;
    $117 = $116;
    HEAP32[$117>>2] = 0;
    $118 = $91;
    $119 = $118;
    HEAP32[$119>>2] = 0;
    $120 = (($118) + 4)|0;
    $121 = $120;
    HEAP32[$121>>2] = -16777216;
    HEAP32[$103>>2] = 0;
    _Skein_512_Process_Block($u$i14,$arraydecay$i$i20,1,8);
    $sub31$i$i = (($shr$i$i) - ($mul4$i$i))|0;
    $cmp32$i$i = ($sub31$i$i>>>0)<(64);
    $spec$store$select$i$i = $cmp32$i$i ? $sub31$i$i : 64;
    $add$ptr$i$i24 = (($hashval) + ($mul4$i$i)|0);
    _memcpy(($add$ptr$i$i24|0),($106|0),($spec$store$select$i$i|0))|0;
    dest=$106; src=$X$i31$i; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $inc$i$i = (($i$03$i$i) + 1)|0;
    $mul$i$i25 = $inc$i$i << 6;
    $exitcond$i$i = ($i$03$i$i|0)==($109|0);
    if ($exitcond$i$i) {
     break;
    } else {
     $i$03$i$i = $inc$i$i;$mul4$i$i = $mul$i$i25;
    }
   }
  }
  STACKTOP = sp;return ($retval$1$i|0);
  break;
 }
 case 1:  {
  $u2$i = ((($state)) + 8|0);
  $122 = ((($state)) + 24|0);
  $123 = $122;
  $124 = $123;
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + 4)|0;
  $127 = $126;
  $128 = HEAP32[$127>>2]|0;
  $129 = $128 | -2147483648;
  $130 = $122;
  $131 = $130;
  HEAP32[$131>>2] = $125;
  $132 = (($130) + 4)|0;
  $133 = $132;
  HEAP32[$133>>2] = $129;
  $134 = ((($state)) + 12|0);
  $135 = HEAP32[$134>>2]|0;
  $cmp$i6$i = ($135>>>0)<(32);
  if ($cmp$i6$i) {
   $sub$i7$i = (32 - ($135))|0;
   $arrayidx4$i8$i = (((($u2$i)) + 56|0) + ($135)|0);
   _memset(($arrayidx4$i8$i|0),0,($sub$i7$i|0))|0;
  }
  $arraydecay$i11$i = ((($state)) + 64|0);
  _Skein_256_Process_Block($u2$i,$arraydecay$i11$i,1,$135);
  $136 = HEAP32[$u2$i>>2]|0;
  $add$i13$i = (($136) + 7)|0;
  $shr$i14$i = $add$i13$i >>> 3;
  ;HEAP32[$arraydecay$i11$i>>2]=0|0;HEAP32[$arraydecay$i11$i+4>>2]=0|0;HEAP32[$arraydecay$i11$i+8>>2]=0|0;HEAP32[$arraydecay$i11$i+12>>2]=0|0;HEAP32[$arraydecay$i11$i+16>>2]=0|0;HEAP32[$arraydecay$i11$i+20>>2]=0|0;HEAP32[$arraydecay$i11$i+24>>2]=0|0;HEAP32[$arraydecay$i11$i+28>>2]=0|0;
  $137 = ((($state)) + 32|0);
  ;HEAP32[$X$i31$i>>2]=HEAP32[$137>>2]|0;HEAP32[$X$i31$i+4>>2]=HEAP32[$137+4>>2]|0;HEAP32[$X$i31$i+8>>2]=HEAP32[$137+8>>2]|0;HEAP32[$X$i31$i+12>>2]=HEAP32[$137+12>>2]|0;HEAP32[$X$i31$i+16>>2]=HEAP32[$137+16>>2]|0;HEAP32[$X$i31$i+20>>2]=HEAP32[$137+20>>2]|0;HEAP32[$X$i31$i+24>>2]=HEAP32[$137+24>>2]|0;HEAP32[$X$i31$i+28>>2]=HEAP32[$137+28>>2]|0;
  $cmp162$i16$i = ($shr$i14$i|0)==(0);
  if (!($cmp162$i16$i)) {
   $138 = ((($state)) + 16|0);
   $139 = (($shr$i14$i) + -1)|0;
   $140 = $139 >>> 5;
   $i$03$i21$i = 0;$mul4$i20$i = 0;
   while(1) {
    $141 = $arraydecay$i11$i;
    $142 = $141;
    HEAP32[$142>>2] = $i$03$i21$i;
    $143 = (($141) + 4)|0;
    $144 = $143;
    HEAP32[$144>>2] = 0;
    $145 = $138;
    $146 = $145;
    HEAP32[$146>>2] = 0;
    $147 = (($145) + 4)|0;
    $148 = $147;
    HEAP32[$148>>2] = 0;
    $149 = $122;
    $150 = $149;
    HEAP32[$150>>2] = 0;
    $151 = (($149) + 4)|0;
    $152 = $151;
    HEAP32[$152>>2] = -16777216;
    HEAP32[$134>>2] = 0;
    _Skein_256_Process_Block($u2$i,$arraydecay$i11$i,1,8);
    $sub31$i23$i = (($shr$i14$i) - ($mul4$i20$i))|0;
    $cmp32$i24$i = ($sub31$i23$i>>>0)<(32);
    $spec$store$select$i25$i = $cmp32$i24$i ? $sub31$i23$i : 32;
    $add$ptr$i26$i = (($hashval) + ($mul4$i20$i)|0);
    _memcpy(($add$ptr$i26$i|0),($137|0),($spec$store$select$i25$i|0))|0;
    ;HEAP32[$137>>2]=HEAP32[$X$i31$i>>2]|0;HEAP32[$137+4>>2]=HEAP32[$X$i31$i+4>>2]|0;HEAP32[$137+8>>2]=HEAP32[$X$i31$i+8>>2]|0;HEAP32[$137+12>>2]=HEAP32[$X$i31$i+12>>2]|0;HEAP32[$137+16>>2]=HEAP32[$X$i31$i+16>>2]|0;HEAP32[$137+20>>2]=HEAP32[$X$i31$i+20>>2]|0;HEAP32[$137+24>>2]=HEAP32[$X$i31$i+24>>2]|0;HEAP32[$137+28>>2]=HEAP32[$X$i31$i+28>>2]|0;
    $inc$i27$i = (($i$03$i21$i) + 1)|0;
    $mul$i28$i = $inc$i27$i << 5;
    $exitcond$i29$i = ($i$03$i21$i|0)==($140|0);
    if ($exitcond$i29$i) {
     break;
    } else {
     $i$03$i21$i = $inc$i27$i;$mul4$i20$i = $mul$i28$i;
    }
   }
  }
  STACKTOP = sp;return ($retval$1$i|0);
  break;
 }
 case 0:  {
  $ctx1024$i27 = ((($state)) + 8|0);
  $arrayidx$i33$i = ((($state)) + 24|0);
  $153 = $arrayidx$i33$i;
  $154 = $153;
  $155 = HEAP32[$154>>2]|0;
  $156 = (($153) + 4)|0;
  $157 = $156;
  $158 = HEAP32[$157>>2]|0;
  $159 = $158 | -2147483648;
  $160 = $arrayidx$i33$i;
  $161 = $160;
  HEAP32[$161>>2] = $155;
  $162 = (($160) + 4)|0;
  $163 = $162;
  HEAP32[$163>>2] = $159;
  $bCnt$i35$i = ((($state)) + 12|0);
  $164 = HEAP32[$bCnt$i35$i>>2]|0;
  $cmp$i36$i = ($164>>>0)<(128);
  if ($cmp$i36$i) {
   $sub$i37$i = (128 - ($164))|0;
   $arrayidx4$i38$i = (((($state)) + 160|0) + ($164)|0);
   _memset(($arrayidx4$i38$i|0),0,($sub$i37$i|0))|0;
  }
  $arraydecay$i41$i = ((($state)) + 160|0);
  _Skein1024_Process_Block($ctx1024$i27,$arraydecay$i41$i,1,$164);
  $165 = HEAP32[$ctx1024$i27>>2]|0;
  $add$i43$i = (($165) + 7)|0;
  $shr$i44$i = $add$i43$i >>> 3;
  dest=$arraydecay$i41$i; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $arraydecay15$i45$i = ((($state)) + 32|0);
  dest=$X$i31$i; src=$arraydecay15$i45$i; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $cmp162$i46$i = ($shr$i44$i|0)==(0);
  if (!($cmp162$i46$i)) {
   $arrayidx22$i48$i = ((($state)) + 16|0);
   $166 = (($shr$i44$i) + -1)|0;
   $167 = $166 >>> 7;
   $i$03$i51$i = 0;$mul4$i50$i = 0;
   while(1) {
    $168 = $arraydecay$i41$i;
    $169 = $168;
    HEAP32[$169>>2] = $i$03$i51$i;
    $170 = (($168) + 4)|0;
    $171 = $170;
    HEAP32[$171>>2] = 0;
    $172 = $arrayidx22$i48$i;
    $173 = $172;
    HEAP32[$173>>2] = 0;
    $174 = (($172) + 4)|0;
    $175 = $174;
    HEAP32[$175>>2] = 0;
    $176 = $arrayidx$i33$i;
    $177 = $176;
    HEAP32[$177>>2] = 0;
    $178 = (($176) + 4)|0;
    $179 = $178;
    HEAP32[$179>>2] = -16777216;
    HEAP32[$bCnt$i35$i>>2] = 0;
    _Skein1024_Process_Block($ctx1024$i27,$arraydecay$i41$i,1,8);
    $sub31$i53$i = (($shr$i44$i) - ($mul4$i50$i))|0;
    $cmp32$i54$i = ($sub31$i53$i>>>0)<(128);
    $spec$store$select$i55$i = $cmp32$i54$i ? $sub31$i53$i : 128;
    $add$ptr$i56$i = (($hashval) + ($mul4$i50$i)|0);
    _memcpy(($add$ptr$i56$i|0),($arraydecay15$i45$i|0),($spec$store$select$i55$i|0))|0;
    dest=$arraydecay15$i45$i; src=$X$i31$i; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $inc$i57$i = (($i$03$i51$i) + 1)|0;
    $mul$i58$i = $inc$i57$i << 7;
    $exitcond$i59$i = ($i$03$i51$i|0)==($167|0);
    if ($exitcond$i59$i) {
     break;
    } else {
     $i$03$i51$i = $inc$i57$i;$mul4$i50$i = $mul$i58$i;
    }
   }
  }
  STACKTOP = sp;return ($retval$1$i|0);
  break;
 }
 default: {
  STACKTOP = sp;return ($retval$1$i|0);
 }
 }
 return (0)|0;
}
function _Skein_512_Process_Block($ctx,$blkPtr,$blkCnt,$byteCntAdd) {
 $ctx = $ctx|0;
 $blkPtr = $blkPtr|0;
 $blkCnt = $blkCnt|0;
 $byteCntAdd = $byteCntAdd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $102$phi = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0;
 var $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0;
 var $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0;
 var $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0;
 var $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0;
 var $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0;
 var $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0;
 var $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0;
 var $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0;
 var $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0;
 var $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0;
 var $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0;
 var $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0;
 var $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0;
 var $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0;
 var $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0;
 var $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0;
 var $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0;
 var $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0;
 var $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0;
 var $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0;
 var $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0;
 var $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0;
 var $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0;
 var $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0;
 var $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0;
 var $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0;
 var $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0;
 var $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0;
 var $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0;
 var $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0;
 var $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0;
 var $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0;
 var $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0;
 var $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0;
 var $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0;
 var $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0;
 var $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0;
 var $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0;
 var $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0;
 var $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0;
 var $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0;
 var $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0;
 var $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0;
 var $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0;
 var $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0;
 var $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0;
 var $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0;
 var $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0;
 var $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0;
 var $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0;
 var $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0;
 var $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0;
 var $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0;
 var $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0;
 var $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0;
 var $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0;
 var $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0;
 var $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0;
 var $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0;
 var $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0;
 var $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0;
 var $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0;
 var $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0;
 var $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0;
 var $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0;
 var $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0;
 var $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0;
 var $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0;
 var $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0;
 var $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0;
 var $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0;
 var $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0;
 var $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0;
 var $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0;
 var $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0;
 var $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0;
 var $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0;
 var $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0;
 var $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0;
 var $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0;
 var $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0;
 var $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0;
 var $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0;
 var $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0;
 var $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0;
 var $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0;
 var $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0;
 var $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0;
 var $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0;
 var $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0;
 var $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0;
 var $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0;
 var $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0;
 var $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0;
 var $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0;
 var $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0;
 var $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0;
 var $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0;
 var $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0;
 var $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0;
 var $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0;
 var $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0;
 var $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0;
 var $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0;
 var $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0;
 var $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0;
 var $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0;
 var $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0;
 var $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0;
 var $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0;
 var $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0;
 var $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0;
 var $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0;
 var $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0;
 var $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0;
 var $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0;
 var $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0;
 var $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0;
 var $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0;
 var $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0;
 var $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0;
 var $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0;
 var $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0;
 var $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0;
 var $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0;
 var $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0;
 var $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0;
 var $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $add$ptr143 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx16 = 0, $arrayidx21 = 0, $arrayidx26 = 0, $arrayidx31 = 0, $arrayidx36 = 0, $arrayidx4 = 0;
 var $arrayidx41 = 0, $arrayidx46 = 0, $blkCnt$addr$0 = 0, $blkPtr$addr$0 = 0, $dec = 0, $tobool = 0, $w$sroa$11$0$$sroa_idx = 0, $w$sroa$13$0$$sroa_idx = 0, $w$sroa$15$0$$sroa_idx = 0, $w$sroa$17$0$$sroa_idx = 0, $w$sroa$5$0$$sroa_idx = 0, $w$sroa$7$0$$sroa_idx = 0, $w$sroa$9$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arrayidx = ((($ctx)) + 8|0);
 $0 = $arrayidx;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $arrayidx4 = ((($ctx)) + 16|0);
 $6 = $arrayidx4;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $arrayidx11 = ((($ctx)) + 24|0);
 $arrayidx16 = ((($ctx)) + 32|0);
 $arrayidx21 = ((($ctx)) + 40|0);
 $arrayidx26 = ((($ctx)) + 48|0);
 $arrayidx31 = ((($ctx)) + 56|0);
 $arrayidx36 = ((($ctx)) + 64|0);
 $arrayidx41 = ((($ctx)) + 72|0);
 $arrayidx46 = ((($ctx)) + 80|0);
 $12 = (($blkCnt) + -1)|0;
 $13 = (_i64Add(($12|0),0,1,0)|0);
 $14 = (getTempRet0() | 0);
 $15 = (___muldi3(($13|0),($14|0),($byteCntAdd|0),0)|0);
 $16 = (getTempRet0() | 0);
 $17 = $arrayidx11;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $arrayidx16;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $arrayidx21;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = $arrayidx26;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = $arrayidx31;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = $arrayidx36;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($47) + 4)|0;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = $arrayidx41;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = $arrayidx46;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $100 = $64;$102 = $8;$104 = $11;$65 = $2;$66 = $5;$70 = $19;$72 = $22;$74 = $25;$76 = $28;$78 = $31;$80 = $34;$82 = $37;$84 = $40;$86 = $43;$88 = $46;$90 = $49;$92 = $52;$94 = $55;$96 = $58;$98 = $61;$blkCnt$addr$0 = $blkCnt;$blkPtr$addr$0 = $blkPtr;
 while(1) {
  $67 = (_i64Add(($65|0),($66|0),($byteCntAdd|0),0)|0);
  $68 = (getTempRet0() | 0);
  $69 = $70 ^ -1443096030;
  $71 = $72 ^ 466688986;
  $73 = $69 ^ $74;
  $75 = $71 ^ $76;
  $77 = $73 ^ $78;
  $79 = $75 ^ $80;
  $81 = $77 ^ $82;
  $83 = $79 ^ $84;
  $85 = $81 ^ $86;
  $87 = $83 ^ $88;
  $89 = $85 ^ $90;
  $91 = $87 ^ $92;
  $93 = $89 ^ $94;
  $95 = $91 ^ $96;
  $97 = $93 ^ $98;
  $99 = $95 ^ $100;
  $101 = $67 ^ $102;
  $103 = $68 ^ $104;
  $105 = $blkPtr$addr$0;
  $106 = $105;
  $107 = HEAPU8[$106>>0]|(HEAPU8[$106+1>>0]<<8)|(HEAPU8[$106+2>>0]<<16)|(HEAPU8[$106+3>>0]<<24);
  $108 = (($105) + 4)|0;
  $109 = $108;
  $110 = HEAPU8[$109>>0]|(HEAPU8[$109+1>>0]<<8)|(HEAPU8[$109+2>>0]<<16)|(HEAPU8[$109+3>>0]<<24);
  $w$sroa$5$0$$sroa_idx = ((($blkPtr$addr$0)) + 8|0);
  $111 = $w$sroa$5$0$$sroa_idx;
  $112 = $111;
  $113 = HEAPU8[$112>>0]|(HEAPU8[$112+1>>0]<<8)|(HEAPU8[$112+2>>0]<<16)|(HEAPU8[$112+3>>0]<<24);
  $114 = (($111) + 4)|0;
  $115 = $114;
  $116 = HEAPU8[$115>>0]|(HEAPU8[$115+1>>0]<<8)|(HEAPU8[$115+2>>0]<<16)|(HEAPU8[$115+3>>0]<<24);
  $w$sroa$7$0$$sroa_idx = ((($blkPtr$addr$0)) + 16|0);
  $117 = $w$sroa$7$0$$sroa_idx;
  $118 = $117;
  $119 = HEAPU8[$118>>0]|(HEAPU8[$118+1>>0]<<8)|(HEAPU8[$118+2>>0]<<16)|(HEAPU8[$118+3>>0]<<24);
  $120 = (($117) + 4)|0;
  $121 = $120;
  $122 = HEAPU8[$121>>0]|(HEAPU8[$121+1>>0]<<8)|(HEAPU8[$121+2>>0]<<16)|(HEAPU8[$121+3>>0]<<24);
  $w$sroa$9$0$$sroa_idx = ((($blkPtr$addr$0)) + 24|0);
  $123 = $w$sroa$9$0$$sroa_idx;
  $124 = $123;
  $125 = HEAPU8[$124>>0]|(HEAPU8[$124+1>>0]<<8)|(HEAPU8[$124+2>>0]<<16)|(HEAPU8[$124+3>>0]<<24);
  $126 = (($123) + 4)|0;
  $127 = $126;
  $128 = HEAPU8[$127>>0]|(HEAPU8[$127+1>>0]<<8)|(HEAPU8[$127+2>>0]<<16)|(HEAPU8[$127+3>>0]<<24);
  $w$sroa$11$0$$sroa_idx = ((($blkPtr$addr$0)) + 32|0);
  $129 = $w$sroa$11$0$$sroa_idx;
  $130 = $129;
  $131 = HEAPU8[$130>>0]|(HEAPU8[$130+1>>0]<<8)|(HEAPU8[$130+2>>0]<<16)|(HEAPU8[$130+3>>0]<<24);
  $132 = (($129) + 4)|0;
  $133 = $132;
  $134 = HEAPU8[$133>>0]|(HEAPU8[$133+1>>0]<<8)|(HEAPU8[$133+2>>0]<<16)|(HEAPU8[$133+3>>0]<<24);
  $w$sroa$13$0$$sroa_idx = ((($blkPtr$addr$0)) + 40|0);
  $135 = $w$sroa$13$0$$sroa_idx;
  $136 = $135;
  $137 = HEAPU8[$136>>0]|(HEAPU8[$136+1>>0]<<8)|(HEAPU8[$136+2>>0]<<16)|(HEAPU8[$136+3>>0]<<24);
  $138 = (($135) + 4)|0;
  $139 = $138;
  $140 = HEAPU8[$139>>0]|(HEAPU8[$139+1>>0]<<8)|(HEAPU8[$139+2>>0]<<16)|(HEAPU8[$139+3>>0]<<24);
  $w$sroa$15$0$$sroa_idx = ((($blkPtr$addr$0)) + 48|0);
  $141 = $w$sroa$15$0$$sroa_idx;
  $142 = $141;
  $143 = HEAPU8[$142>>0]|(HEAPU8[$142+1>>0]<<8)|(HEAPU8[$142+2>>0]<<16)|(HEAPU8[$142+3>>0]<<24);
  $144 = (($141) + 4)|0;
  $145 = $144;
  $146 = HEAPU8[$145>>0]|(HEAPU8[$145+1>>0]<<8)|(HEAPU8[$145+2>>0]<<16)|(HEAPU8[$145+3>>0]<<24);
  $w$sroa$17$0$$sroa_idx = ((($blkPtr$addr$0)) + 56|0);
  $147 = $w$sroa$17$0$$sroa_idx;
  $148 = $147;
  $149 = HEAPU8[$148>>0]|(HEAPU8[$148+1>>0]<<8)|(HEAPU8[$148+2>>0]<<16)|(HEAPU8[$148+3>>0]<<24);
  $150 = (($147) + 4)|0;
  $151 = $150;
  $152 = HEAPU8[$151>>0]|(HEAPU8[$151+1>>0]<<8)|(HEAPU8[$151+2>>0]<<16)|(HEAPU8[$151+3>>0]<<24);
  $153 = (_i64Add(($107|0),($110|0),($70|0),($72|0))|0);
  $154 = (getTempRet0() | 0);
  $155 = (_i64Add(($113|0),($116|0),($74|0),($76|0))|0);
  $156 = (getTempRet0() | 0);
  $157 = (_i64Add(($119|0),($122|0),($78|0),($80|0))|0);
  $158 = (getTempRet0() | 0);
  $159 = (_i64Add(($125|0),($128|0),($82|0),($84|0))|0);
  $160 = (getTempRet0() | 0);
  $161 = (_i64Add(($131|0),($134|0),($86|0),($88|0))|0);
  $162 = (getTempRet0() | 0);
  $163 = (_i64Add(($90|0),($92|0),($67|0),($68|0))|0);
  $164 = (getTempRet0() | 0);
  $165 = (_i64Add(($163|0),($164|0),($137|0),($140|0))|0);
  $166 = (getTempRet0() | 0);
  $167 = (_i64Add(($149|0),($152|0),($98|0),($100|0))|0);
  $168 = (getTempRet0() | 0);
  $add$ptr143 = ((($blkPtr$addr$0)) + 64|0);
  $169 = (_i64Add(($153|0),($154|0),($155|0),($156|0))|0);
  $170 = (getTempRet0() | 0);
  $171 = (_bitshift64Shl(($155|0),($156|0),46)|0);
  $172 = (getTempRet0() | 0);
  $173 = (_bitshift64Lshr(($155|0),($156|0),18)|0);
  $174 = (getTempRet0() | 0);
  $175 = $171 | $173;
  $176 = $172 | $174;
  $177 = $175 ^ $169;
  $178 = $176 ^ $170;
  $179 = (_i64Add(($157|0),($158|0),($159|0),($160|0))|0);
  $180 = (getTempRet0() | 0);
  $181 = (_bitshift64Shl(($159|0),($160|0),36)|0);
  $182 = (getTempRet0() | 0);
  $183 = (_bitshift64Lshr(($159|0),($160|0),28)|0);
  $184 = (getTempRet0() | 0);
  $185 = $181 | $183;
  $186 = $182 | $184;
  $187 = $185 ^ $179;
  $188 = $186 ^ $180;
  $189 = (_i64Add(($161|0),($162|0),($165|0),($166|0))|0);
  $190 = (getTempRet0() | 0);
  $191 = (_bitshift64Shl(($165|0),($166|0),19)|0);
  $192 = (getTempRet0() | 0);
  $193 = (_bitshift64Lshr(($165|0),($166|0),45)|0);
  $194 = (getTempRet0() | 0);
  $195 = $191 | $193;
  $196 = $192 | $194;
  $197 = $195 ^ $189;
  $198 = $196 ^ $190;
  $199 = (_i64Add(($94|0),($96|0),($102|0),($104|0))|0);
  $200 = (getTempRet0() | 0);
  $201 = (_i64Add(($199|0),($200|0),($143|0),($146|0))|0);
  $202 = (getTempRet0() | 0);
  $203 = (_i64Add(($201|0),($202|0),($167|0),($168|0))|0);
  $204 = (getTempRet0() | 0);
  $205 = (_bitshift64Shl(($167|0),($168|0),37)|0);
  $206 = (getTempRet0() | 0);
  $207 = (_bitshift64Lshr(($167|0),($168|0),27)|0);
  $208 = (getTempRet0() | 0);
  $209 = $205 | $207;
  $210 = $206 | $208;
  $211 = $209 ^ $203;
  $212 = $210 ^ $204;
  $213 = (_i64Add(($179|0),($180|0),($177|0),($178|0))|0);
  $214 = (getTempRet0() | 0);
  $215 = (_bitshift64Shl(($177|0),($178|0),33)|0);
  $216 = (getTempRet0() | 0);
  $217 = (_bitshift64Lshr(($177|0),($178|0),31)|0);
  $218 = (getTempRet0() | 0);
  $219 = $215 | $217;
  $220 = $216 | $218;
  $221 = $219 ^ $213;
  $222 = $220 ^ $214;
  $223 = (_i64Add(($211|0),($212|0),($189|0),($190|0))|0);
  $224 = (getTempRet0() | 0);
  $225 = (_bitshift64Shl(($211|0),($212|0),27)|0);
  $226 = (getTempRet0() | 0);
  $227 = (_bitshift64Lshr(($211|0),($212|0),37)|0);
  $228 = (getTempRet0() | 0);
  $229 = $225 | $227;
  $230 = $226 | $228;
  $231 = $229 ^ $223;
  $232 = $230 ^ $224;
  $233 = (_i64Add(($197|0),($198|0),($203|0),($204|0))|0);
  $234 = (getTempRet0() | 0);
  $235 = (_bitshift64Shl(($197|0),($198|0),14)|0);
  $236 = (getTempRet0() | 0);
  $237 = (_bitshift64Lshr(($197|0),($198|0),50)|0);
  $238 = (getTempRet0() | 0);
  $239 = $235 | $237;
  $240 = $236 | $238;
  $241 = $239 ^ $233;
  $242 = $240 ^ $234;
  $243 = (_i64Add(($187|0),($188|0),($169|0),($170|0))|0);
  $244 = (getTempRet0() | 0);
  $245 = (_bitshift64Shl(($187|0),($188|0),42)|0);
  $246 = (getTempRet0() | 0);
  $247 = (_bitshift64Lshr(($187|0),($188|0),22)|0);
  $248 = (getTempRet0() | 0);
  $249 = $245 | $247;
  $250 = $246 | $248;
  $251 = $249 ^ $243;
  $252 = $250 ^ $244;
  $253 = (_i64Add(($223|0),($224|0),($221|0),($222|0))|0);
  $254 = (getTempRet0() | 0);
  $255 = (_bitshift64Shl(($221|0),($222|0),17)|0);
  $256 = (getTempRet0() | 0);
  $257 = (_bitshift64Lshr(($221|0),($222|0),47)|0);
  $258 = (getTempRet0() | 0);
  $259 = $255 | $257;
  $260 = $256 | $258;
  $261 = $253 ^ $259;
  $262 = $254 ^ $260;
  $263 = (_i64Add(($233|0),($234|0),($251|0),($252|0))|0);
  $264 = (getTempRet0() | 0);
  $265 = (_bitshift64Shl(($251|0),($252|0),49)|0);
  $266 = (getTempRet0() | 0);
  $267 = (_bitshift64Lshr(($251|0),($252|0),15)|0);
  $268 = (getTempRet0() | 0);
  $269 = $265 | $267;
  $270 = $266 | $268;
  $271 = $269 ^ $263;
  $272 = $270 ^ $264;
  $273 = (_i64Add(($241|0),($242|0),($243|0),($244|0))|0);
  $274 = (getTempRet0() | 0);
  $275 = (_bitshift64Shl(($241|0),($242|0),36)|0);
  $276 = (getTempRet0() | 0);
  $277 = (_bitshift64Lshr(($241|0),($242|0),28)|0);
  $278 = (getTempRet0() | 0);
  $279 = $275 | $277;
  $280 = $276 | $278;
  $281 = $279 ^ $273;
  $282 = $280 ^ $274;
  $283 = (_i64Add(($231|0),($232|0),($213|0),($214|0))|0);
  $284 = (getTempRet0() | 0);
  $285 = (_bitshift64Shl(($231|0),($232|0),39)|0);
  $286 = (getTempRet0() | 0);
  $287 = (_bitshift64Lshr(($231|0),($232|0),25)|0);
  $288 = (getTempRet0() | 0);
  $289 = $285 | $287;
  $290 = $286 | $288;
  $291 = $289 ^ $283;
  $292 = $290 ^ $284;
  $293 = (_i64Add(($261|0),($262|0),($263|0),($264|0))|0);
  $294 = (getTempRet0() | 0);
  $295 = (_bitshift64Shl(($261|0),($262|0),44)|0);
  $296 = (getTempRet0() | 0);
  $297 = (_bitshift64Lshr(($261|0),($262|0),20)|0);
  $298 = (getTempRet0() | 0);
  $299 = $295 | $297;
  $300 = $296 | $298;
  $301 = $299 ^ $293;
  $302 = $300 ^ $294;
  $303 = (_i64Add(($291|0),($292|0),($273|0),($274|0))|0);
  $304 = (getTempRet0() | 0);
  $305 = (_bitshift64Shl(($291|0),($292|0),9)|0);
  $306 = (getTempRet0() | 0);
  $307 = (_bitshift64Lshr(($291|0),($292|0),55)|0);
  $308 = (getTempRet0() | 0);
  $309 = $305 | $307;
  $310 = $306 | $308;
  $311 = $309 ^ $303;
  $312 = $310 ^ $304;
  $313 = (_i64Add(($281|0),($282|0),($283|0),($284|0))|0);
  $314 = (getTempRet0() | 0);
  $315 = (_bitshift64Shl(($281|0),($282|0),54)|0);
  $316 = (getTempRet0() | 0);
  $317 = (_bitshift64Lshr(($281|0),($282|0),10)|0);
  $318 = (getTempRet0() | 0);
  $319 = $315 | $317;
  $320 = $316 | $318;
  $321 = $319 ^ $313;
  $322 = $320 ^ $314;
  $323 = (_i64Add(($253|0),($254|0),($271|0),($272|0))|0);
  $324 = (getTempRet0() | 0);
  $325 = (_bitshift64Shl(($271|0),($272|0),56)|0);
  $326 = (getTempRet0() | 0);
  $327 = (_bitshift64Lshr(($271|0),($272|0),8)|0);
  $328 = (getTempRet0() | 0);
  $329 = $325 | $327;
  $330 = $326 | $328;
  $331 = $329 ^ $323;
  $332 = $330 ^ $324;
  $333 = (_i64Add(($303|0),($304|0),($74|0),($76|0))|0);
  $334 = (getTempRet0() | 0);
  $335 = (_i64Add(($301|0),($302|0),($78|0),($80|0))|0);
  $336 = (getTempRet0() | 0);
  $337 = (_i64Add(($313|0),($314|0),($82|0),($84|0))|0);
  $338 = (getTempRet0() | 0);
  $339 = (_i64Add(($331|0),($332|0),($86|0),($88|0))|0);
  $340 = (getTempRet0() | 0);
  $341 = (_i64Add(($323|0),($324|0),($90|0),($92|0))|0);
  $342 = (getTempRet0() | 0);
  $343 = (_i64Add(($321|0),($322|0),($199|0),($200|0))|0);
  $344 = (getTempRet0() | 0);
  $345 = (_i64Add(($98|0),($100|0),($101|0),($103|0))|0);
  $346 = (getTempRet0() | 0);
  $347 = (_i64Add(($293|0),($294|0),($345|0),($346|0))|0);
  $348 = (getTempRet0() | 0);
  $349 = (_i64Add(($97|0),($99|0),1,0)|0);
  $350 = (getTempRet0() | 0);
  $351 = (_i64Add(($349|0),($350|0),($311|0),($312|0))|0);
  $352 = (getTempRet0() | 0);
  $353 = (_i64Add(($333|0),($334|0),($335|0),($336|0))|0);
  $354 = (getTempRet0() | 0);
  $355 = (_bitshift64Shl(($335|0),($336|0),39)|0);
  $356 = (getTempRet0() | 0);
  $357 = (_bitshift64Lshr(($335|0),($336|0),25)|0);
  $358 = (getTempRet0() | 0);
  $359 = $355 | $357;
  $360 = $356 | $358;
  $361 = $359 ^ $353;
  $362 = $360 ^ $354;
  $363 = (_i64Add(($337|0),($338|0),($339|0),($340|0))|0);
  $364 = (getTempRet0() | 0);
  $365 = (_bitshift64Shl(($339|0),($340|0),30)|0);
  $366 = (getTempRet0() | 0);
  $367 = (_bitshift64Lshr(($339|0),($340|0),34)|0);
  $368 = (getTempRet0() | 0);
  $369 = $365 | $367;
  $370 = $366 | $368;
  $371 = $369 ^ $363;
  $372 = $370 ^ $364;
  $373 = (_i64Add(($341|0),($342|0),($343|0),($344|0))|0);
  $374 = (getTempRet0() | 0);
  $375 = (_bitshift64Shl(($343|0),($344|0),34)|0);
  $376 = (getTempRet0() | 0);
  $377 = (_bitshift64Lshr(($343|0),($344|0),30)|0);
  $378 = (getTempRet0() | 0);
  $379 = $375 | $377;
  $380 = $376 | $378;
  $381 = $379 ^ $373;
  $382 = $380 ^ $374;
  $383 = (_i64Add(($347|0),($348|0),($351|0),($352|0))|0);
  $384 = (getTempRet0() | 0);
  $385 = (_bitshift64Shl(($351|0),($352|0),24)|0);
  $386 = (getTempRet0() | 0);
  $387 = (_bitshift64Lshr(($351|0),($352|0),40)|0);
  $388 = (getTempRet0() | 0);
  $389 = $385 | $387;
  $390 = $386 | $388;
  $391 = $389 ^ $383;
  $392 = $390 ^ $384;
  $393 = (_i64Add(($361|0),($362|0),($363|0),($364|0))|0);
  $394 = (getTempRet0() | 0);
  $395 = (_bitshift64Shl(($361|0),($362|0),13)|0);
  $396 = (getTempRet0() | 0);
  $397 = (_bitshift64Lshr(($361|0),($362|0),51)|0);
  $398 = (getTempRet0() | 0);
  $399 = $395 | $397;
  $400 = $396 | $398;
  $401 = $399 ^ $393;
  $402 = $400 ^ $394;
  $403 = (_i64Add(($391|0),($392|0),($373|0),($374|0))|0);
  $404 = (getTempRet0() | 0);
  $405 = (_bitshift64Shl(($391|0),($392|0),50)|0);
  $406 = (getTempRet0() | 0);
  $407 = (_bitshift64Lshr(($391|0),($392|0),14)|0);
  $408 = (getTempRet0() | 0);
  $409 = $405 | $407;
  $410 = $406 | $408;
  $411 = $409 ^ $403;
  $412 = $410 ^ $404;
  $413 = (_i64Add(($381|0),($382|0),($383|0),($384|0))|0);
  $414 = (getTempRet0() | 0);
  $415 = (_bitshift64Shl(($381|0),($382|0),10)|0);
  $416 = (getTempRet0() | 0);
  $417 = (_bitshift64Lshr(($381|0),($382|0),54)|0);
  $418 = (getTempRet0() | 0);
  $419 = $415 | $417;
  $420 = $416 | $418;
  $421 = $419 ^ $413;
  $422 = $420 ^ $414;
  $423 = (_i64Add(($353|0),($354|0),($371|0),($372|0))|0);
  $424 = (getTempRet0() | 0);
  $425 = (_bitshift64Shl(($371|0),($372|0),17)|0);
  $426 = (getTempRet0() | 0);
  $427 = (_bitshift64Lshr(($371|0),($372|0),47)|0);
  $428 = (getTempRet0() | 0);
  $429 = $425 | $427;
  $430 = $426 | $428;
  $431 = $429 ^ $423;
  $432 = $430 ^ $424;
  $433 = (_i64Add(($403|0),($404|0),($401|0),($402|0))|0);
  $434 = (getTempRet0() | 0);
  $435 = (_bitshift64Shl(($401|0),($402|0),25)|0);
  $436 = (getTempRet0() | 0);
  $437 = (_bitshift64Lshr(($401|0),($402|0),39)|0);
  $438 = (getTempRet0() | 0);
  $439 = $435 | $437;
  $440 = $436 | $438;
  $441 = $439 ^ $433;
  $442 = $440 ^ $434;
  $443 = (_i64Add(($413|0),($414|0),($431|0),($432|0))|0);
  $444 = (getTempRet0() | 0);
  $445 = (_bitshift64Shl(($431|0),($432|0),29)|0);
  $446 = (getTempRet0() | 0);
  $447 = (_bitshift64Lshr(($431|0),($432|0),35)|0);
  $448 = (getTempRet0() | 0);
  $449 = $445 | $447;
  $450 = $446 | $448;
  $451 = $449 ^ $443;
  $452 = $450 ^ $444;
  $453 = (_i64Add(($421|0),($422|0),($423|0),($424|0))|0);
  $454 = (getTempRet0() | 0);
  $455 = (_bitshift64Shl(($421|0),($422|0),39)|0);
  $456 = (getTempRet0() | 0);
  $457 = (_bitshift64Lshr(($421|0),($422|0),25)|0);
  $458 = (getTempRet0() | 0);
  $459 = $455 | $457;
  $460 = $456 | $458;
  $461 = $459 ^ $453;
  $462 = $460 ^ $454;
  $463 = (_i64Add(($411|0),($412|0),($393|0),($394|0))|0);
  $464 = (getTempRet0() | 0);
  $465 = (_bitshift64Shl(($411|0),($412|0),43)|0);
  $466 = (getTempRet0() | 0);
  $467 = (_bitshift64Lshr(($411|0),($412|0),21)|0);
  $468 = (getTempRet0() | 0);
  $469 = $465 | $467;
  $470 = $466 | $468;
  $471 = $469 ^ $463;
  $472 = $470 ^ $464;
  $473 = (_i64Add(($441|0),($442|0),($443|0),($444|0))|0);
  $474 = (getTempRet0() | 0);
  $475 = (_bitshift64Shl(($441|0),($442|0),8)|0);
  $476 = (getTempRet0() | 0);
  $477 = (_bitshift64Lshr(($441|0),($442|0),56)|0);
  $478 = (getTempRet0() | 0);
  $479 = $475 | $477;
  $480 = $476 | $478;
  $481 = $479 ^ $473;
  $482 = $480 ^ $474;
  $483 = (_i64Add(($471|0),($472|0),($453|0),($454|0))|0);
  $484 = (getTempRet0() | 0);
  $485 = (_bitshift64Shl(($471|0),($472|0),35)|0);
  $486 = (getTempRet0() | 0);
  $487 = (_bitshift64Lshr(($471|0),($472|0),29)|0);
  $488 = (getTempRet0() | 0);
  $489 = $485 | $487;
  $490 = $486 | $488;
  $491 = $489 ^ $483;
  $492 = $490 ^ $484;
  $493 = (_i64Add(($461|0),($462|0),($463|0),($464|0))|0);
  $494 = (getTempRet0() | 0);
  $495 = (_bitshift64Shl(($461|0),($462|0),56)|0);
  $496 = (getTempRet0() | 0);
  $497 = (_bitshift64Lshr(($461|0),($462|0),8)|0);
  $498 = (getTempRet0() | 0);
  $499 = $495 | $497;
  $500 = $496 | $498;
  $501 = $499 ^ $493;
  $502 = $500 ^ $494;
  $503 = (_i64Add(($433|0),($434|0),($451|0),($452|0))|0);
  $504 = (getTempRet0() | 0);
  $505 = (_bitshift64Shl(($451|0),($452|0),22)|0);
  $506 = (getTempRet0() | 0);
  $507 = (_bitshift64Lshr(($451|0),($452|0),42)|0);
  $508 = (getTempRet0() | 0);
  $509 = $505 | $507;
  $510 = $506 | $508;
  $511 = $509 ^ $503;
  $512 = $510 ^ $504;
  $513 = (_i64Add(($483|0),($484|0),($78|0),($80|0))|0);
  $514 = (getTempRet0() | 0);
  $515 = (_i64Add(($481|0),($482|0),($82|0),($84|0))|0);
  $516 = (getTempRet0() | 0);
  $517 = (_i64Add(($493|0),($494|0),($86|0),($88|0))|0);
  $518 = (getTempRet0() | 0);
  $519 = (_i64Add(($511|0),($512|0),($90|0),($92|0))|0);
  $520 = (getTempRet0() | 0);
  $521 = (_i64Add(($503|0),($504|0),($94|0),($96|0))|0);
  $522 = (getTempRet0() | 0);
  $523 = (_i64Add(($501|0),($502|0),($345|0),($346|0))|0);
  $524 = (getTempRet0() | 0);
  $525 = (_i64Add(($97|0),($99|0),($67|0),($68|0))|0);
  $526 = (getTempRet0() | 0);
  $527 = (_i64Add(($473|0),($474|0),($525|0),($526|0))|0);
  $528 = (getTempRet0() | 0);
  $529 = (_i64Add(($70|0),($72|0),2,0)|0);
  $530 = (getTempRet0() | 0);
  $531 = (_i64Add(($529|0),($530|0),($491|0),($492|0))|0);
  $532 = (getTempRet0() | 0);
  $533 = (_i64Add(($513|0),($514|0),($515|0),($516|0))|0);
  $534 = (getTempRet0() | 0);
  $535 = (_bitshift64Shl(($515|0),($516|0),46)|0);
  $536 = (getTempRet0() | 0);
  $537 = (_bitshift64Lshr(($515|0),($516|0),18)|0);
  $538 = (getTempRet0() | 0);
  $539 = $535 | $537;
  $540 = $536 | $538;
  $541 = $539 ^ $533;
  $542 = $540 ^ $534;
  $543 = (_i64Add(($517|0),($518|0),($519|0),($520|0))|0);
  $544 = (getTempRet0() | 0);
  $545 = (_bitshift64Shl(($519|0),($520|0),36)|0);
  $546 = (getTempRet0() | 0);
  $547 = (_bitshift64Lshr(($519|0),($520|0),28)|0);
  $548 = (getTempRet0() | 0);
  $549 = $545 | $547;
  $550 = $546 | $548;
  $551 = $549 ^ $543;
  $552 = $550 ^ $544;
  $553 = (_i64Add(($521|0),($522|0),($523|0),($524|0))|0);
  $554 = (getTempRet0() | 0);
  $555 = (_bitshift64Shl(($523|0),($524|0),19)|0);
  $556 = (getTempRet0() | 0);
  $557 = (_bitshift64Lshr(($523|0),($524|0),45)|0);
  $558 = (getTempRet0() | 0);
  $559 = $555 | $557;
  $560 = $556 | $558;
  $561 = $559 ^ $553;
  $562 = $560 ^ $554;
  $563 = (_i64Add(($527|0),($528|0),($531|0),($532|0))|0);
  $564 = (getTempRet0() | 0);
  $565 = (_bitshift64Shl(($531|0),($532|0),37)|0);
  $566 = (getTempRet0() | 0);
  $567 = (_bitshift64Lshr(($531|0),($532|0),27)|0);
  $568 = (getTempRet0() | 0);
  $569 = $565 | $567;
  $570 = $566 | $568;
  $571 = $569 ^ $563;
  $572 = $570 ^ $564;
  $573 = (_i64Add(($541|0),($542|0),($543|0),($544|0))|0);
  $574 = (getTempRet0() | 0);
  $575 = (_bitshift64Shl(($541|0),($542|0),33)|0);
  $576 = (getTempRet0() | 0);
  $577 = (_bitshift64Lshr(($541|0),($542|0),31)|0);
  $578 = (getTempRet0() | 0);
  $579 = $575 | $577;
  $580 = $576 | $578;
  $581 = $579 ^ $573;
  $582 = $580 ^ $574;
  $583 = (_i64Add(($571|0),($572|0),($553|0),($554|0))|0);
  $584 = (getTempRet0() | 0);
  $585 = (_bitshift64Shl(($571|0),($572|0),27)|0);
  $586 = (getTempRet0() | 0);
  $587 = (_bitshift64Lshr(($571|0),($572|0),37)|0);
  $588 = (getTempRet0() | 0);
  $589 = $585 | $587;
  $590 = $586 | $588;
  $591 = $589 ^ $583;
  $592 = $590 ^ $584;
  $593 = (_i64Add(($561|0),($562|0),($563|0),($564|0))|0);
  $594 = (getTempRet0() | 0);
  $595 = (_bitshift64Shl(($561|0),($562|0),14)|0);
  $596 = (getTempRet0() | 0);
  $597 = (_bitshift64Lshr(($561|0),($562|0),50)|0);
  $598 = (getTempRet0() | 0);
  $599 = $595 | $597;
  $600 = $596 | $598;
  $601 = $599 ^ $593;
  $602 = $600 ^ $594;
  $603 = (_i64Add(($533|0),($534|0),($551|0),($552|0))|0);
  $604 = (getTempRet0() | 0);
  $605 = (_bitshift64Shl(($551|0),($552|0),42)|0);
  $606 = (getTempRet0() | 0);
  $607 = (_bitshift64Lshr(($551|0),($552|0),22)|0);
  $608 = (getTempRet0() | 0);
  $609 = $605 | $607;
  $610 = $606 | $608;
  $611 = $609 ^ $603;
  $612 = $610 ^ $604;
  $613 = (_i64Add(($583|0),($584|0),($581|0),($582|0))|0);
  $614 = (getTempRet0() | 0);
  $615 = (_bitshift64Shl(($581|0),($582|0),17)|0);
  $616 = (getTempRet0() | 0);
  $617 = (_bitshift64Lshr(($581|0),($582|0),47)|0);
  $618 = (getTempRet0() | 0);
  $619 = $615 | $617;
  $620 = $616 | $618;
  $621 = $619 ^ $613;
  $622 = $620 ^ $614;
  $623 = (_i64Add(($593|0),($594|0),($611|0),($612|0))|0);
  $624 = (getTempRet0() | 0);
  $625 = (_bitshift64Shl(($611|0),($612|0),49)|0);
  $626 = (getTempRet0() | 0);
  $627 = (_bitshift64Lshr(($611|0),($612|0),15)|0);
  $628 = (getTempRet0() | 0);
  $629 = $625 | $627;
  $630 = $626 | $628;
  $631 = $629 ^ $623;
  $632 = $630 ^ $624;
  $633 = (_i64Add(($601|0),($602|0),($603|0),($604|0))|0);
  $634 = (getTempRet0() | 0);
  $635 = (_bitshift64Shl(($601|0),($602|0),36)|0);
  $636 = (getTempRet0() | 0);
  $637 = (_bitshift64Lshr(($601|0),($602|0),28)|0);
  $638 = (getTempRet0() | 0);
  $639 = $635 | $637;
  $640 = $636 | $638;
  $641 = $639 ^ $633;
  $642 = $640 ^ $634;
  $643 = (_i64Add(($591|0),($592|0),($573|0),($574|0))|0);
  $644 = (getTempRet0() | 0);
  $645 = (_bitshift64Shl(($591|0),($592|0),39)|0);
  $646 = (getTempRet0() | 0);
  $647 = (_bitshift64Lshr(($591|0),($592|0),25)|0);
  $648 = (getTempRet0() | 0);
  $649 = $645 | $647;
  $650 = $646 | $648;
  $651 = $649 ^ $643;
  $652 = $650 ^ $644;
  $653 = (_i64Add(($621|0),($622|0),($623|0),($624|0))|0);
  $654 = (getTempRet0() | 0);
  $655 = (_bitshift64Shl(($621|0),($622|0),44)|0);
  $656 = (getTempRet0() | 0);
  $657 = (_bitshift64Lshr(($621|0),($622|0),20)|0);
  $658 = (getTempRet0() | 0);
  $659 = $655 | $657;
  $660 = $656 | $658;
  $661 = $659 ^ $653;
  $662 = $660 ^ $654;
  $663 = (_i64Add(($651|0),($652|0),($633|0),($634|0))|0);
  $664 = (getTempRet0() | 0);
  $665 = (_bitshift64Shl(($651|0),($652|0),9)|0);
  $666 = (getTempRet0() | 0);
  $667 = (_bitshift64Lshr(($651|0),($652|0),55)|0);
  $668 = (getTempRet0() | 0);
  $669 = $665 | $667;
  $670 = $666 | $668;
  $671 = $669 ^ $663;
  $672 = $670 ^ $664;
  $673 = (_i64Add(($641|0),($642|0),($643|0),($644|0))|0);
  $674 = (getTempRet0() | 0);
  $675 = (_bitshift64Shl(($641|0),($642|0),54)|0);
  $676 = (getTempRet0() | 0);
  $677 = (_bitshift64Lshr(($641|0),($642|0),10)|0);
  $678 = (getTempRet0() | 0);
  $679 = $675 | $677;
  $680 = $676 | $678;
  $681 = $679 ^ $673;
  $682 = $680 ^ $674;
  $683 = (_i64Add(($613|0),($614|0),($631|0),($632|0))|0);
  $684 = (getTempRet0() | 0);
  $685 = (_bitshift64Shl(($631|0),($632|0),56)|0);
  $686 = (getTempRet0() | 0);
  $687 = (_bitshift64Lshr(($631|0),($632|0),8)|0);
  $688 = (getTempRet0() | 0);
  $689 = $685 | $687;
  $690 = $686 | $688;
  $691 = $689 ^ $683;
  $692 = $690 ^ $684;
  $693 = (_i64Add(($663|0),($664|0),($82|0),($84|0))|0);
  $694 = (getTempRet0() | 0);
  $695 = (_i64Add(($661|0),($662|0),($86|0),($88|0))|0);
  $696 = (getTempRet0() | 0);
  $697 = (_i64Add(($673|0),($674|0),($90|0),($92|0))|0);
  $698 = (getTempRet0() | 0);
  $699 = (_i64Add(($691|0),($692|0),($94|0),($96|0))|0);
  $700 = (getTempRet0() | 0);
  $701 = (_i64Add(($683|0),($684|0),($98|0),($100|0))|0);
  $702 = (getTempRet0() | 0);
  $703 = (_i64Add(($681|0),($682|0),($525|0),($526|0))|0);
  $704 = (getTempRet0() | 0);
  $705 = (_i64Add(($70|0),($72|0),($102|0),($104|0))|0);
  $706 = (getTempRet0() | 0);
  $707 = (_i64Add(($653|0),($654|0),($705|0),($706|0))|0);
  $708 = (getTempRet0() | 0);
  $709 = (_i64Add(($74|0),($76|0),3,0)|0);
  $710 = (getTempRet0() | 0);
  $711 = (_i64Add(($709|0),($710|0),($671|0),($672|0))|0);
  $712 = (getTempRet0() | 0);
  $713 = (_i64Add(($693|0),($694|0),($695|0),($696|0))|0);
  $714 = (getTempRet0() | 0);
  $715 = (_bitshift64Shl(($695|0),($696|0),39)|0);
  $716 = (getTempRet0() | 0);
  $717 = (_bitshift64Lshr(($695|0),($696|0),25)|0);
  $718 = (getTempRet0() | 0);
  $719 = $715 | $717;
  $720 = $716 | $718;
  $721 = $719 ^ $713;
  $722 = $720 ^ $714;
  $723 = (_i64Add(($697|0),($698|0),($699|0),($700|0))|0);
  $724 = (getTempRet0() | 0);
  $725 = (_bitshift64Shl(($699|0),($700|0),30)|0);
  $726 = (getTempRet0() | 0);
  $727 = (_bitshift64Lshr(($699|0),($700|0),34)|0);
  $728 = (getTempRet0() | 0);
  $729 = $725 | $727;
  $730 = $726 | $728;
  $731 = $729 ^ $723;
  $732 = $730 ^ $724;
  $733 = (_i64Add(($701|0),($702|0),($703|0),($704|0))|0);
  $734 = (getTempRet0() | 0);
  $735 = (_bitshift64Shl(($703|0),($704|0),34)|0);
  $736 = (getTempRet0() | 0);
  $737 = (_bitshift64Lshr(($703|0),($704|0),30)|0);
  $738 = (getTempRet0() | 0);
  $739 = $735 | $737;
  $740 = $736 | $738;
  $741 = $739 ^ $733;
  $742 = $740 ^ $734;
  $743 = (_i64Add(($707|0),($708|0),($711|0),($712|0))|0);
  $744 = (getTempRet0() | 0);
  $745 = (_bitshift64Shl(($711|0),($712|0),24)|0);
  $746 = (getTempRet0() | 0);
  $747 = (_bitshift64Lshr(($711|0),($712|0),40)|0);
  $748 = (getTempRet0() | 0);
  $749 = $745 | $747;
  $750 = $746 | $748;
  $751 = $749 ^ $743;
  $752 = $750 ^ $744;
  $753 = (_i64Add(($721|0),($722|0),($723|0),($724|0))|0);
  $754 = (getTempRet0() | 0);
  $755 = (_bitshift64Shl(($721|0),($722|0),13)|0);
  $756 = (getTempRet0() | 0);
  $757 = (_bitshift64Lshr(($721|0),($722|0),51)|0);
  $758 = (getTempRet0() | 0);
  $759 = $755 | $757;
  $760 = $756 | $758;
  $761 = $759 ^ $753;
  $762 = $760 ^ $754;
  $763 = (_i64Add(($751|0),($752|0),($733|0),($734|0))|0);
  $764 = (getTempRet0() | 0);
  $765 = (_bitshift64Shl(($751|0),($752|0),50)|0);
  $766 = (getTempRet0() | 0);
  $767 = (_bitshift64Lshr(($751|0),($752|0),14)|0);
  $768 = (getTempRet0() | 0);
  $769 = $765 | $767;
  $770 = $766 | $768;
  $771 = $769 ^ $763;
  $772 = $770 ^ $764;
  $773 = (_i64Add(($741|0),($742|0),($743|0),($744|0))|0);
  $774 = (getTempRet0() | 0);
  $775 = (_bitshift64Shl(($741|0),($742|0),10)|0);
  $776 = (getTempRet0() | 0);
  $777 = (_bitshift64Lshr(($741|0),($742|0),54)|0);
  $778 = (getTempRet0() | 0);
  $779 = $775 | $777;
  $780 = $776 | $778;
  $781 = $779 ^ $773;
  $782 = $780 ^ $774;
  $783 = (_i64Add(($713|0),($714|0),($731|0),($732|0))|0);
  $784 = (getTempRet0() | 0);
  $785 = (_bitshift64Shl(($731|0),($732|0),17)|0);
  $786 = (getTempRet0() | 0);
  $787 = (_bitshift64Lshr(($731|0),($732|0),47)|0);
  $788 = (getTempRet0() | 0);
  $789 = $785 | $787;
  $790 = $786 | $788;
  $791 = $789 ^ $783;
  $792 = $790 ^ $784;
  $793 = (_i64Add(($763|0),($764|0),($761|0),($762|0))|0);
  $794 = (getTempRet0() | 0);
  $795 = (_bitshift64Shl(($761|0),($762|0),25)|0);
  $796 = (getTempRet0() | 0);
  $797 = (_bitshift64Lshr(($761|0),($762|0),39)|0);
  $798 = (getTempRet0() | 0);
  $799 = $795 | $797;
  $800 = $796 | $798;
  $801 = $799 ^ $793;
  $802 = $800 ^ $794;
  $803 = (_i64Add(($773|0),($774|0),($791|0),($792|0))|0);
  $804 = (getTempRet0() | 0);
  $805 = (_bitshift64Shl(($791|0),($792|0),29)|0);
  $806 = (getTempRet0() | 0);
  $807 = (_bitshift64Lshr(($791|0),($792|0),35)|0);
  $808 = (getTempRet0() | 0);
  $809 = $805 | $807;
  $810 = $806 | $808;
  $811 = $809 ^ $803;
  $812 = $810 ^ $804;
  $813 = (_i64Add(($781|0),($782|0),($783|0),($784|0))|0);
  $814 = (getTempRet0() | 0);
  $815 = (_bitshift64Shl(($781|0),($782|0),39)|0);
  $816 = (getTempRet0() | 0);
  $817 = (_bitshift64Lshr(($781|0),($782|0),25)|0);
  $818 = (getTempRet0() | 0);
  $819 = $815 | $817;
  $820 = $816 | $818;
  $821 = $819 ^ $813;
  $822 = $820 ^ $814;
  $823 = (_i64Add(($771|0),($772|0),($753|0),($754|0))|0);
  $824 = (getTempRet0() | 0);
  $825 = (_bitshift64Shl(($771|0),($772|0),43)|0);
  $826 = (getTempRet0() | 0);
  $827 = (_bitshift64Lshr(($771|0),($772|0),21)|0);
  $828 = (getTempRet0() | 0);
  $829 = $825 | $827;
  $830 = $826 | $828;
  $831 = $829 ^ $823;
  $832 = $830 ^ $824;
  $833 = (_i64Add(($801|0),($802|0),($803|0),($804|0))|0);
  $834 = (getTempRet0() | 0);
  $835 = (_bitshift64Shl(($801|0),($802|0),8)|0);
  $836 = (getTempRet0() | 0);
  $837 = (_bitshift64Lshr(($801|0),($802|0),56)|0);
  $838 = (getTempRet0() | 0);
  $839 = $835 | $837;
  $840 = $836 | $838;
  $841 = $839 ^ $833;
  $842 = $840 ^ $834;
  $843 = (_i64Add(($831|0),($832|0),($813|0),($814|0))|0);
  $844 = (getTempRet0() | 0);
  $845 = (_bitshift64Shl(($831|0),($832|0),35)|0);
  $846 = (getTempRet0() | 0);
  $847 = (_bitshift64Lshr(($831|0),($832|0),29)|0);
  $848 = (getTempRet0() | 0);
  $849 = $845 | $847;
  $850 = $846 | $848;
  $851 = $849 ^ $843;
  $852 = $850 ^ $844;
  $853 = (_i64Add(($821|0),($822|0),($823|0),($824|0))|0);
  $854 = (getTempRet0() | 0);
  $855 = (_bitshift64Shl(($821|0),($822|0),56)|0);
  $856 = (getTempRet0() | 0);
  $857 = (_bitshift64Lshr(($821|0),($822|0),8)|0);
  $858 = (getTempRet0() | 0);
  $859 = $855 | $857;
  $860 = $856 | $858;
  $861 = $859 ^ $853;
  $862 = $860 ^ $854;
  $863 = (_i64Add(($793|0),($794|0),($811|0),($812|0))|0);
  $864 = (getTempRet0() | 0);
  $865 = (_bitshift64Shl(($811|0),($812|0),22)|0);
  $866 = (getTempRet0() | 0);
  $867 = (_bitshift64Lshr(($811|0),($812|0),42)|0);
  $868 = (getTempRet0() | 0);
  $869 = $865 | $867;
  $870 = $866 | $868;
  $871 = $869 ^ $863;
  $872 = $870 ^ $864;
  $873 = (_i64Add(($843|0),($844|0),($86|0),($88|0))|0);
  $874 = (getTempRet0() | 0);
  $875 = (_i64Add(($841|0),($842|0),($90|0),($92|0))|0);
  $876 = (getTempRet0() | 0);
  $877 = (_i64Add(($853|0),($854|0),($94|0),($96|0))|0);
  $878 = (getTempRet0() | 0);
  $879 = (_i64Add(($871|0),($872|0),($98|0),($100|0))|0);
  $880 = (getTempRet0() | 0);
  $881 = (_i64Add(($863|0),($864|0),($97|0),($99|0))|0);
  $882 = (getTempRet0() | 0);
  $883 = (_i64Add(($861|0),($862|0),($705|0),($706|0))|0);
  $884 = (getTempRet0() | 0);
  $885 = (_i64Add(($74|0),($76|0),($101|0),($103|0))|0);
  $886 = (getTempRet0() | 0);
  $887 = (_i64Add(($833|0),($834|0),($885|0),($886|0))|0);
  $888 = (getTempRet0() | 0);
  $889 = (_i64Add(($78|0),($80|0),4,0)|0);
  $890 = (getTempRet0() | 0);
  $891 = (_i64Add(($889|0),($890|0),($851|0),($852|0))|0);
  $892 = (getTempRet0() | 0);
  $893 = (_i64Add(($873|0),($874|0),($875|0),($876|0))|0);
  $894 = (getTempRet0() | 0);
  $895 = (_bitshift64Shl(($875|0),($876|0),46)|0);
  $896 = (getTempRet0() | 0);
  $897 = (_bitshift64Lshr(($875|0),($876|0),18)|0);
  $898 = (getTempRet0() | 0);
  $899 = $895 | $897;
  $900 = $896 | $898;
  $901 = $899 ^ $893;
  $902 = $900 ^ $894;
  $903 = (_i64Add(($877|0),($878|0),($879|0),($880|0))|0);
  $904 = (getTempRet0() | 0);
  $905 = (_bitshift64Shl(($879|0),($880|0),36)|0);
  $906 = (getTempRet0() | 0);
  $907 = (_bitshift64Lshr(($879|0),($880|0),28)|0);
  $908 = (getTempRet0() | 0);
  $909 = $905 | $907;
  $910 = $906 | $908;
  $911 = $909 ^ $903;
  $912 = $910 ^ $904;
  $913 = (_i64Add(($881|0),($882|0),($883|0),($884|0))|0);
  $914 = (getTempRet0() | 0);
  $915 = (_bitshift64Shl(($883|0),($884|0),19)|0);
  $916 = (getTempRet0() | 0);
  $917 = (_bitshift64Lshr(($883|0),($884|0),45)|0);
  $918 = (getTempRet0() | 0);
  $919 = $915 | $917;
  $920 = $916 | $918;
  $921 = $919 ^ $913;
  $922 = $920 ^ $914;
  $923 = (_i64Add(($887|0),($888|0),($891|0),($892|0))|0);
  $924 = (getTempRet0() | 0);
  $925 = (_bitshift64Shl(($891|0),($892|0),37)|0);
  $926 = (getTempRet0() | 0);
  $927 = (_bitshift64Lshr(($891|0),($892|0),27)|0);
  $928 = (getTempRet0() | 0);
  $929 = $925 | $927;
  $930 = $926 | $928;
  $931 = $929 ^ $923;
  $932 = $930 ^ $924;
  $933 = (_i64Add(($901|0),($902|0),($903|0),($904|0))|0);
  $934 = (getTempRet0() | 0);
  $935 = (_bitshift64Shl(($901|0),($902|0),33)|0);
  $936 = (getTempRet0() | 0);
  $937 = (_bitshift64Lshr(($901|0),($902|0),31)|0);
  $938 = (getTempRet0() | 0);
  $939 = $935 | $937;
  $940 = $936 | $938;
  $941 = $939 ^ $933;
  $942 = $940 ^ $934;
  $943 = (_i64Add(($931|0),($932|0),($913|0),($914|0))|0);
  $944 = (getTempRet0() | 0);
  $945 = (_bitshift64Shl(($931|0),($932|0),27)|0);
  $946 = (getTempRet0() | 0);
  $947 = (_bitshift64Lshr(($931|0),($932|0),37)|0);
  $948 = (getTempRet0() | 0);
  $949 = $945 | $947;
  $950 = $946 | $948;
  $951 = $949 ^ $943;
  $952 = $950 ^ $944;
  $953 = (_i64Add(($921|0),($922|0),($923|0),($924|0))|0);
  $954 = (getTempRet0() | 0);
  $955 = (_bitshift64Shl(($921|0),($922|0),14)|0);
  $956 = (getTempRet0() | 0);
  $957 = (_bitshift64Lshr(($921|0),($922|0),50)|0);
  $958 = (getTempRet0() | 0);
  $959 = $955 | $957;
  $960 = $956 | $958;
  $961 = $959 ^ $953;
  $962 = $960 ^ $954;
  $963 = (_i64Add(($893|0),($894|0),($911|0),($912|0))|0);
  $964 = (getTempRet0() | 0);
  $965 = (_bitshift64Shl(($911|0),($912|0),42)|0);
  $966 = (getTempRet0() | 0);
  $967 = (_bitshift64Lshr(($911|0),($912|0),22)|0);
  $968 = (getTempRet0() | 0);
  $969 = $965 | $967;
  $970 = $966 | $968;
  $971 = $969 ^ $963;
  $972 = $970 ^ $964;
  $973 = (_i64Add(($943|0),($944|0),($941|0),($942|0))|0);
  $974 = (getTempRet0() | 0);
  $975 = (_bitshift64Shl(($941|0),($942|0),17)|0);
  $976 = (getTempRet0() | 0);
  $977 = (_bitshift64Lshr(($941|0),($942|0),47)|0);
  $978 = (getTempRet0() | 0);
  $979 = $975 | $977;
  $980 = $976 | $978;
  $981 = $979 ^ $973;
  $982 = $980 ^ $974;
  $983 = (_i64Add(($953|0),($954|0),($971|0),($972|0))|0);
  $984 = (getTempRet0() | 0);
  $985 = (_bitshift64Shl(($971|0),($972|0),49)|0);
  $986 = (getTempRet0() | 0);
  $987 = (_bitshift64Lshr(($971|0),($972|0),15)|0);
  $988 = (getTempRet0() | 0);
  $989 = $985 | $987;
  $990 = $986 | $988;
  $991 = $989 ^ $983;
  $992 = $990 ^ $984;
  $993 = (_i64Add(($961|0),($962|0),($963|0),($964|0))|0);
  $994 = (getTempRet0() | 0);
  $995 = (_bitshift64Shl(($961|0),($962|0),36)|0);
  $996 = (getTempRet0() | 0);
  $997 = (_bitshift64Lshr(($961|0),($962|0),28)|0);
  $998 = (getTempRet0() | 0);
  $999 = $995 | $997;
  $1000 = $996 | $998;
  $1001 = $999 ^ $993;
  $1002 = $1000 ^ $994;
  $1003 = (_i64Add(($951|0),($952|0),($933|0),($934|0))|0);
  $1004 = (getTempRet0() | 0);
  $1005 = (_bitshift64Shl(($951|0),($952|0),39)|0);
  $1006 = (getTempRet0() | 0);
  $1007 = (_bitshift64Lshr(($951|0),($952|0),25)|0);
  $1008 = (getTempRet0() | 0);
  $1009 = $1005 | $1007;
  $1010 = $1006 | $1008;
  $1011 = $1009 ^ $1003;
  $1012 = $1010 ^ $1004;
  $1013 = (_i64Add(($981|0),($982|0),($983|0),($984|0))|0);
  $1014 = (getTempRet0() | 0);
  $1015 = (_bitshift64Shl(($981|0),($982|0),44)|0);
  $1016 = (getTempRet0() | 0);
  $1017 = (_bitshift64Lshr(($981|0),($982|0),20)|0);
  $1018 = (getTempRet0() | 0);
  $1019 = $1015 | $1017;
  $1020 = $1016 | $1018;
  $1021 = $1019 ^ $1013;
  $1022 = $1020 ^ $1014;
  $1023 = (_i64Add(($1011|0),($1012|0),($993|0),($994|0))|0);
  $1024 = (getTempRet0() | 0);
  $1025 = (_bitshift64Shl(($1011|0),($1012|0),9)|0);
  $1026 = (getTempRet0() | 0);
  $1027 = (_bitshift64Lshr(($1011|0),($1012|0),55)|0);
  $1028 = (getTempRet0() | 0);
  $1029 = $1025 | $1027;
  $1030 = $1026 | $1028;
  $1031 = $1029 ^ $1023;
  $1032 = $1030 ^ $1024;
  $1033 = (_i64Add(($1001|0),($1002|0),($1003|0),($1004|0))|0);
  $1034 = (getTempRet0() | 0);
  $1035 = (_bitshift64Shl(($1001|0),($1002|0),54)|0);
  $1036 = (getTempRet0() | 0);
  $1037 = (_bitshift64Lshr(($1001|0),($1002|0),10)|0);
  $1038 = (getTempRet0() | 0);
  $1039 = $1035 | $1037;
  $1040 = $1036 | $1038;
  $1041 = $1039 ^ $1033;
  $1042 = $1040 ^ $1034;
  $1043 = (_i64Add(($973|0),($974|0),($991|0),($992|0))|0);
  $1044 = (getTempRet0() | 0);
  $1045 = (_bitshift64Shl(($991|0),($992|0),56)|0);
  $1046 = (getTempRet0() | 0);
  $1047 = (_bitshift64Lshr(($991|0),($992|0),8)|0);
  $1048 = (getTempRet0() | 0);
  $1049 = $1045 | $1047;
  $1050 = $1046 | $1048;
  $1051 = $1049 ^ $1043;
  $1052 = $1050 ^ $1044;
  $1053 = (_i64Add(($1023|0),($1024|0),($90|0),($92|0))|0);
  $1054 = (getTempRet0() | 0);
  $1055 = (_i64Add(($1021|0),($1022|0),($94|0),($96|0))|0);
  $1056 = (getTempRet0() | 0);
  $1057 = (_i64Add(($1033|0),($1034|0),($98|0),($100|0))|0);
  $1058 = (getTempRet0() | 0);
  $1059 = (_i64Add(($1051|0),($1052|0),($97|0),($99|0))|0);
  $1060 = (getTempRet0() | 0);
  $1061 = (_i64Add(($1043|0),($1044|0),($70|0),($72|0))|0);
  $1062 = (getTempRet0() | 0);
  $1063 = (_i64Add(($1041|0),($1042|0),($885|0),($886|0))|0);
  $1064 = (getTempRet0() | 0);
  $1065 = (_i64Add(($78|0),($80|0),($67|0),($68|0))|0);
  $1066 = (getTempRet0() | 0);
  $1067 = (_i64Add(($1013|0),($1014|0),($1065|0),($1066|0))|0);
  $1068 = (getTempRet0() | 0);
  $1069 = (_i64Add(($82|0),($84|0),5,0)|0);
  $1070 = (getTempRet0() | 0);
  $1071 = (_i64Add(($1069|0),($1070|0),($1031|0),($1032|0))|0);
  $1072 = (getTempRet0() | 0);
  $1073 = (_i64Add(($1053|0),($1054|0),($1055|0),($1056|0))|0);
  $1074 = (getTempRet0() | 0);
  $1075 = (_bitshift64Shl(($1055|0),($1056|0),39)|0);
  $1076 = (getTempRet0() | 0);
  $1077 = (_bitshift64Lshr(($1055|0),($1056|0),25)|0);
  $1078 = (getTempRet0() | 0);
  $1079 = $1075 | $1077;
  $1080 = $1076 | $1078;
  $1081 = $1079 ^ $1073;
  $1082 = $1080 ^ $1074;
  $1083 = (_i64Add(($1057|0),($1058|0),($1059|0),($1060|0))|0);
  $1084 = (getTempRet0() | 0);
  $1085 = (_bitshift64Shl(($1059|0),($1060|0),30)|0);
  $1086 = (getTempRet0() | 0);
  $1087 = (_bitshift64Lshr(($1059|0),($1060|0),34)|0);
  $1088 = (getTempRet0() | 0);
  $1089 = $1085 | $1087;
  $1090 = $1086 | $1088;
  $1091 = $1089 ^ $1083;
  $1092 = $1090 ^ $1084;
  $1093 = (_i64Add(($1061|0),($1062|0),($1063|0),($1064|0))|0);
  $1094 = (getTempRet0() | 0);
  $1095 = (_bitshift64Shl(($1063|0),($1064|0),34)|0);
  $1096 = (getTempRet0() | 0);
  $1097 = (_bitshift64Lshr(($1063|0),($1064|0),30)|0);
  $1098 = (getTempRet0() | 0);
  $1099 = $1095 | $1097;
  $1100 = $1096 | $1098;
  $1101 = $1099 ^ $1093;
  $1102 = $1100 ^ $1094;
  $1103 = (_i64Add(($1067|0),($1068|0),($1071|0),($1072|0))|0);
  $1104 = (getTempRet0() | 0);
  $1105 = (_bitshift64Shl(($1071|0),($1072|0),24)|0);
  $1106 = (getTempRet0() | 0);
  $1107 = (_bitshift64Lshr(($1071|0),($1072|0),40)|0);
  $1108 = (getTempRet0() | 0);
  $1109 = $1105 | $1107;
  $1110 = $1106 | $1108;
  $1111 = $1109 ^ $1103;
  $1112 = $1110 ^ $1104;
  $1113 = (_i64Add(($1081|0),($1082|0),($1083|0),($1084|0))|0);
  $1114 = (getTempRet0() | 0);
  $1115 = (_bitshift64Shl(($1081|0),($1082|0),13)|0);
  $1116 = (getTempRet0() | 0);
  $1117 = (_bitshift64Lshr(($1081|0),($1082|0),51)|0);
  $1118 = (getTempRet0() | 0);
  $1119 = $1115 | $1117;
  $1120 = $1116 | $1118;
  $1121 = $1119 ^ $1113;
  $1122 = $1120 ^ $1114;
  $1123 = (_i64Add(($1111|0),($1112|0),($1093|0),($1094|0))|0);
  $1124 = (getTempRet0() | 0);
  $1125 = (_bitshift64Shl(($1111|0),($1112|0),50)|0);
  $1126 = (getTempRet0() | 0);
  $1127 = (_bitshift64Lshr(($1111|0),($1112|0),14)|0);
  $1128 = (getTempRet0() | 0);
  $1129 = $1125 | $1127;
  $1130 = $1126 | $1128;
  $1131 = $1129 ^ $1123;
  $1132 = $1130 ^ $1124;
  $1133 = (_i64Add(($1101|0),($1102|0),($1103|0),($1104|0))|0);
  $1134 = (getTempRet0() | 0);
  $1135 = (_bitshift64Shl(($1101|0),($1102|0),10)|0);
  $1136 = (getTempRet0() | 0);
  $1137 = (_bitshift64Lshr(($1101|0),($1102|0),54)|0);
  $1138 = (getTempRet0() | 0);
  $1139 = $1135 | $1137;
  $1140 = $1136 | $1138;
  $1141 = $1139 ^ $1133;
  $1142 = $1140 ^ $1134;
  $1143 = (_i64Add(($1073|0),($1074|0),($1091|0),($1092|0))|0);
  $1144 = (getTempRet0() | 0);
  $1145 = (_bitshift64Shl(($1091|0),($1092|0),17)|0);
  $1146 = (getTempRet0() | 0);
  $1147 = (_bitshift64Lshr(($1091|0),($1092|0),47)|0);
  $1148 = (getTempRet0() | 0);
  $1149 = $1145 | $1147;
  $1150 = $1146 | $1148;
  $1151 = $1149 ^ $1143;
  $1152 = $1150 ^ $1144;
  $1153 = (_i64Add(($1123|0),($1124|0),($1121|0),($1122|0))|0);
  $1154 = (getTempRet0() | 0);
  $1155 = (_bitshift64Shl(($1121|0),($1122|0),25)|0);
  $1156 = (getTempRet0() | 0);
  $1157 = (_bitshift64Lshr(($1121|0),($1122|0),39)|0);
  $1158 = (getTempRet0() | 0);
  $1159 = $1155 | $1157;
  $1160 = $1156 | $1158;
  $1161 = $1159 ^ $1153;
  $1162 = $1160 ^ $1154;
  $1163 = (_i64Add(($1133|0),($1134|0),($1151|0),($1152|0))|0);
  $1164 = (getTempRet0() | 0);
  $1165 = (_bitshift64Shl(($1151|0),($1152|0),29)|0);
  $1166 = (getTempRet0() | 0);
  $1167 = (_bitshift64Lshr(($1151|0),($1152|0),35)|0);
  $1168 = (getTempRet0() | 0);
  $1169 = $1165 | $1167;
  $1170 = $1166 | $1168;
  $1171 = $1169 ^ $1163;
  $1172 = $1170 ^ $1164;
  $1173 = (_i64Add(($1141|0),($1142|0),($1143|0),($1144|0))|0);
  $1174 = (getTempRet0() | 0);
  $1175 = (_bitshift64Shl(($1141|0),($1142|0),39)|0);
  $1176 = (getTempRet0() | 0);
  $1177 = (_bitshift64Lshr(($1141|0),($1142|0),25)|0);
  $1178 = (getTempRet0() | 0);
  $1179 = $1175 | $1177;
  $1180 = $1176 | $1178;
  $1181 = $1179 ^ $1173;
  $1182 = $1180 ^ $1174;
  $1183 = (_i64Add(($1131|0),($1132|0),($1113|0),($1114|0))|0);
  $1184 = (getTempRet0() | 0);
  $1185 = (_bitshift64Shl(($1131|0),($1132|0),43)|0);
  $1186 = (getTempRet0() | 0);
  $1187 = (_bitshift64Lshr(($1131|0),($1132|0),21)|0);
  $1188 = (getTempRet0() | 0);
  $1189 = $1185 | $1187;
  $1190 = $1186 | $1188;
  $1191 = $1189 ^ $1183;
  $1192 = $1190 ^ $1184;
  $1193 = (_i64Add(($1161|0),($1162|0),($1163|0),($1164|0))|0);
  $1194 = (getTempRet0() | 0);
  $1195 = (_bitshift64Shl(($1161|0),($1162|0),8)|0);
  $1196 = (getTempRet0() | 0);
  $1197 = (_bitshift64Lshr(($1161|0),($1162|0),56)|0);
  $1198 = (getTempRet0() | 0);
  $1199 = $1195 | $1197;
  $1200 = $1196 | $1198;
  $1201 = $1199 ^ $1193;
  $1202 = $1200 ^ $1194;
  $1203 = (_i64Add(($1191|0),($1192|0),($1173|0),($1174|0))|0);
  $1204 = (getTempRet0() | 0);
  $1205 = (_bitshift64Shl(($1191|0),($1192|0),35)|0);
  $1206 = (getTempRet0() | 0);
  $1207 = (_bitshift64Lshr(($1191|0),($1192|0),29)|0);
  $1208 = (getTempRet0() | 0);
  $1209 = $1205 | $1207;
  $1210 = $1206 | $1208;
  $1211 = $1209 ^ $1203;
  $1212 = $1210 ^ $1204;
  $1213 = (_i64Add(($1181|0),($1182|0),($1183|0),($1184|0))|0);
  $1214 = (getTempRet0() | 0);
  $1215 = (_bitshift64Shl(($1181|0),($1182|0),56)|0);
  $1216 = (getTempRet0() | 0);
  $1217 = (_bitshift64Lshr(($1181|0),($1182|0),8)|0);
  $1218 = (getTempRet0() | 0);
  $1219 = $1215 | $1217;
  $1220 = $1216 | $1218;
  $1221 = $1219 ^ $1213;
  $1222 = $1220 ^ $1214;
  $1223 = (_i64Add(($1153|0),($1154|0),($1171|0),($1172|0))|0);
  $1224 = (getTempRet0() | 0);
  $1225 = (_bitshift64Shl(($1171|0),($1172|0),22)|0);
  $1226 = (getTempRet0() | 0);
  $1227 = (_bitshift64Lshr(($1171|0),($1172|0),42)|0);
  $1228 = (getTempRet0() | 0);
  $1229 = $1225 | $1227;
  $1230 = $1226 | $1228;
  $1231 = $1229 ^ $1223;
  $1232 = $1230 ^ $1224;
  $1233 = (_i64Add(($1203|0),($1204|0),($94|0),($96|0))|0);
  $1234 = (getTempRet0() | 0);
  $1235 = (_i64Add(($1201|0),($1202|0),($98|0),($100|0))|0);
  $1236 = (getTempRet0() | 0);
  $1237 = (_i64Add(($1213|0),($1214|0),($97|0),($99|0))|0);
  $1238 = (getTempRet0() | 0);
  $1239 = (_i64Add(($1231|0),($1232|0),($70|0),($72|0))|0);
  $1240 = (getTempRet0() | 0);
  $1241 = (_i64Add(($1223|0),($1224|0),($74|0),($76|0))|0);
  $1242 = (getTempRet0() | 0);
  $1243 = (_i64Add(($1221|0),($1222|0),($1065|0),($1066|0))|0);
  $1244 = (getTempRet0() | 0);
  $1245 = (_i64Add(($82|0),($84|0),($102|0),($104|0))|0);
  $1246 = (getTempRet0() | 0);
  $1247 = (_i64Add(($1193|0),($1194|0),($1245|0),($1246|0))|0);
  $1248 = (getTempRet0() | 0);
  $1249 = (_i64Add(($86|0),($88|0),6,0)|0);
  $1250 = (getTempRet0() | 0);
  $1251 = (_i64Add(($1249|0),($1250|0),($1211|0),($1212|0))|0);
  $1252 = (getTempRet0() | 0);
  $1253 = (_i64Add(($1233|0),($1234|0),($1235|0),($1236|0))|0);
  $1254 = (getTempRet0() | 0);
  $1255 = (_bitshift64Shl(($1235|0),($1236|0),46)|0);
  $1256 = (getTempRet0() | 0);
  $1257 = (_bitshift64Lshr(($1235|0),($1236|0),18)|0);
  $1258 = (getTempRet0() | 0);
  $1259 = $1255 | $1257;
  $1260 = $1256 | $1258;
  $1261 = $1259 ^ $1253;
  $1262 = $1260 ^ $1254;
  $1263 = (_i64Add(($1237|0),($1238|0),($1239|0),($1240|0))|0);
  $1264 = (getTempRet0() | 0);
  $1265 = (_bitshift64Shl(($1239|0),($1240|0),36)|0);
  $1266 = (getTempRet0() | 0);
  $1267 = (_bitshift64Lshr(($1239|0),($1240|0),28)|0);
  $1268 = (getTempRet0() | 0);
  $1269 = $1265 | $1267;
  $1270 = $1266 | $1268;
  $1271 = $1269 ^ $1263;
  $1272 = $1270 ^ $1264;
  $1273 = (_i64Add(($1241|0),($1242|0),($1243|0),($1244|0))|0);
  $1274 = (getTempRet0() | 0);
  $1275 = (_bitshift64Shl(($1243|0),($1244|0),19)|0);
  $1276 = (getTempRet0() | 0);
  $1277 = (_bitshift64Lshr(($1243|0),($1244|0),45)|0);
  $1278 = (getTempRet0() | 0);
  $1279 = $1275 | $1277;
  $1280 = $1276 | $1278;
  $1281 = $1279 ^ $1273;
  $1282 = $1280 ^ $1274;
  $1283 = (_i64Add(($1247|0),($1248|0),($1251|0),($1252|0))|0);
  $1284 = (getTempRet0() | 0);
  $1285 = (_bitshift64Shl(($1251|0),($1252|0),37)|0);
  $1286 = (getTempRet0() | 0);
  $1287 = (_bitshift64Lshr(($1251|0),($1252|0),27)|0);
  $1288 = (getTempRet0() | 0);
  $1289 = $1285 | $1287;
  $1290 = $1286 | $1288;
  $1291 = $1289 ^ $1283;
  $1292 = $1290 ^ $1284;
  $1293 = (_i64Add(($1261|0),($1262|0),($1263|0),($1264|0))|0);
  $1294 = (getTempRet0() | 0);
  $1295 = (_bitshift64Shl(($1261|0),($1262|0),33)|0);
  $1296 = (getTempRet0() | 0);
  $1297 = (_bitshift64Lshr(($1261|0),($1262|0),31)|0);
  $1298 = (getTempRet0() | 0);
  $1299 = $1295 | $1297;
  $1300 = $1296 | $1298;
  $1301 = $1299 ^ $1293;
  $1302 = $1300 ^ $1294;
  $1303 = (_i64Add(($1291|0),($1292|0),($1273|0),($1274|0))|0);
  $1304 = (getTempRet0() | 0);
  $1305 = (_bitshift64Shl(($1291|0),($1292|0),27)|0);
  $1306 = (getTempRet0() | 0);
  $1307 = (_bitshift64Lshr(($1291|0),($1292|0),37)|0);
  $1308 = (getTempRet0() | 0);
  $1309 = $1305 | $1307;
  $1310 = $1306 | $1308;
  $1311 = $1309 ^ $1303;
  $1312 = $1310 ^ $1304;
  $1313 = (_i64Add(($1281|0),($1282|0),($1283|0),($1284|0))|0);
  $1314 = (getTempRet0() | 0);
  $1315 = (_bitshift64Shl(($1281|0),($1282|0),14)|0);
  $1316 = (getTempRet0() | 0);
  $1317 = (_bitshift64Lshr(($1281|0),($1282|0),50)|0);
  $1318 = (getTempRet0() | 0);
  $1319 = $1315 | $1317;
  $1320 = $1316 | $1318;
  $1321 = $1319 ^ $1313;
  $1322 = $1320 ^ $1314;
  $1323 = (_i64Add(($1253|0),($1254|0),($1271|0),($1272|0))|0);
  $1324 = (getTempRet0() | 0);
  $1325 = (_bitshift64Shl(($1271|0),($1272|0),42)|0);
  $1326 = (getTempRet0() | 0);
  $1327 = (_bitshift64Lshr(($1271|0),($1272|0),22)|0);
  $1328 = (getTempRet0() | 0);
  $1329 = $1325 | $1327;
  $1330 = $1326 | $1328;
  $1331 = $1329 ^ $1323;
  $1332 = $1330 ^ $1324;
  $1333 = (_i64Add(($1303|0),($1304|0),($1301|0),($1302|0))|0);
  $1334 = (getTempRet0() | 0);
  $1335 = (_bitshift64Shl(($1301|0),($1302|0),17)|0);
  $1336 = (getTempRet0() | 0);
  $1337 = (_bitshift64Lshr(($1301|0),($1302|0),47)|0);
  $1338 = (getTempRet0() | 0);
  $1339 = $1335 | $1337;
  $1340 = $1336 | $1338;
  $1341 = $1339 ^ $1333;
  $1342 = $1340 ^ $1334;
  $1343 = (_i64Add(($1313|0),($1314|0),($1331|0),($1332|0))|0);
  $1344 = (getTempRet0() | 0);
  $1345 = (_bitshift64Shl(($1331|0),($1332|0),49)|0);
  $1346 = (getTempRet0() | 0);
  $1347 = (_bitshift64Lshr(($1331|0),($1332|0),15)|0);
  $1348 = (getTempRet0() | 0);
  $1349 = $1345 | $1347;
  $1350 = $1346 | $1348;
  $1351 = $1349 ^ $1343;
  $1352 = $1350 ^ $1344;
  $1353 = (_i64Add(($1321|0),($1322|0),($1323|0),($1324|0))|0);
  $1354 = (getTempRet0() | 0);
  $1355 = (_bitshift64Shl(($1321|0),($1322|0),36)|0);
  $1356 = (getTempRet0() | 0);
  $1357 = (_bitshift64Lshr(($1321|0),($1322|0),28)|0);
  $1358 = (getTempRet0() | 0);
  $1359 = $1355 | $1357;
  $1360 = $1356 | $1358;
  $1361 = $1359 ^ $1353;
  $1362 = $1360 ^ $1354;
  $1363 = (_i64Add(($1311|0),($1312|0),($1293|0),($1294|0))|0);
  $1364 = (getTempRet0() | 0);
  $1365 = (_bitshift64Shl(($1311|0),($1312|0),39)|0);
  $1366 = (getTempRet0() | 0);
  $1367 = (_bitshift64Lshr(($1311|0),($1312|0),25)|0);
  $1368 = (getTempRet0() | 0);
  $1369 = $1365 | $1367;
  $1370 = $1366 | $1368;
  $1371 = $1369 ^ $1363;
  $1372 = $1370 ^ $1364;
  $1373 = (_i64Add(($1341|0),($1342|0),($1343|0),($1344|0))|0);
  $1374 = (getTempRet0() | 0);
  $1375 = (_bitshift64Shl(($1341|0),($1342|0),44)|0);
  $1376 = (getTempRet0() | 0);
  $1377 = (_bitshift64Lshr(($1341|0),($1342|0),20)|0);
  $1378 = (getTempRet0() | 0);
  $1379 = $1375 | $1377;
  $1380 = $1376 | $1378;
  $1381 = $1379 ^ $1373;
  $1382 = $1380 ^ $1374;
  $1383 = (_i64Add(($1371|0),($1372|0),($1353|0),($1354|0))|0);
  $1384 = (getTempRet0() | 0);
  $1385 = (_bitshift64Shl(($1371|0),($1372|0),9)|0);
  $1386 = (getTempRet0() | 0);
  $1387 = (_bitshift64Lshr(($1371|0),($1372|0),55)|0);
  $1388 = (getTempRet0() | 0);
  $1389 = $1385 | $1387;
  $1390 = $1386 | $1388;
  $1391 = $1389 ^ $1383;
  $1392 = $1390 ^ $1384;
  $1393 = (_i64Add(($1361|0),($1362|0),($1363|0),($1364|0))|0);
  $1394 = (getTempRet0() | 0);
  $1395 = (_bitshift64Shl(($1361|0),($1362|0),54)|0);
  $1396 = (getTempRet0() | 0);
  $1397 = (_bitshift64Lshr(($1361|0),($1362|0),10)|0);
  $1398 = (getTempRet0() | 0);
  $1399 = $1395 | $1397;
  $1400 = $1396 | $1398;
  $1401 = $1399 ^ $1393;
  $1402 = $1400 ^ $1394;
  $1403 = (_i64Add(($1333|0),($1334|0),($1351|0),($1352|0))|0);
  $1404 = (getTempRet0() | 0);
  $1405 = (_bitshift64Shl(($1351|0),($1352|0),56)|0);
  $1406 = (getTempRet0() | 0);
  $1407 = (_bitshift64Lshr(($1351|0),($1352|0),8)|0);
  $1408 = (getTempRet0() | 0);
  $1409 = $1405 | $1407;
  $1410 = $1406 | $1408;
  $1411 = $1409 ^ $1403;
  $1412 = $1410 ^ $1404;
  $1413 = (_i64Add(($1383|0),($1384|0),($98|0),($100|0))|0);
  $1414 = (getTempRet0() | 0);
  $1415 = (_i64Add(($1381|0),($1382|0),($97|0),($99|0))|0);
  $1416 = (getTempRet0() | 0);
  $1417 = (_i64Add(($1393|0),($1394|0),($70|0),($72|0))|0);
  $1418 = (getTempRet0() | 0);
  $1419 = (_i64Add(($1411|0),($1412|0),($74|0),($76|0))|0);
  $1420 = (getTempRet0() | 0);
  $1421 = (_i64Add(($1403|0),($1404|0),($78|0),($80|0))|0);
  $1422 = (getTempRet0() | 0);
  $1423 = (_i64Add(($1401|0),($1402|0),($1245|0),($1246|0))|0);
  $1424 = (getTempRet0() | 0);
  $1425 = (_i64Add(($86|0),($88|0),($101|0),($103|0))|0);
  $1426 = (getTempRet0() | 0);
  $1427 = (_i64Add(($1373|0),($1374|0),($1425|0),($1426|0))|0);
  $1428 = (getTempRet0() | 0);
  $1429 = (_i64Add(($90|0),($92|0),7,0)|0);
  $1430 = (getTempRet0() | 0);
  $1431 = (_i64Add(($1429|0),($1430|0),($1391|0),($1392|0))|0);
  $1432 = (getTempRet0() | 0);
  $1433 = (_i64Add(($1413|0),($1414|0),($1415|0),($1416|0))|0);
  $1434 = (getTempRet0() | 0);
  $1435 = (_bitshift64Shl(($1415|0),($1416|0),39)|0);
  $1436 = (getTempRet0() | 0);
  $1437 = (_bitshift64Lshr(($1415|0),($1416|0),25)|0);
  $1438 = (getTempRet0() | 0);
  $1439 = $1435 | $1437;
  $1440 = $1436 | $1438;
  $1441 = $1439 ^ $1433;
  $1442 = $1440 ^ $1434;
  $1443 = (_i64Add(($1417|0),($1418|0),($1419|0),($1420|0))|0);
  $1444 = (getTempRet0() | 0);
  $1445 = (_bitshift64Shl(($1419|0),($1420|0),30)|0);
  $1446 = (getTempRet0() | 0);
  $1447 = (_bitshift64Lshr(($1419|0),($1420|0),34)|0);
  $1448 = (getTempRet0() | 0);
  $1449 = $1445 | $1447;
  $1450 = $1446 | $1448;
  $1451 = $1449 ^ $1443;
  $1452 = $1450 ^ $1444;
  $1453 = (_i64Add(($1421|0),($1422|0),($1423|0),($1424|0))|0);
  $1454 = (getTempRet0() | 0);
  $1455 = (_bitshift64Shl(($1423|0),($1424|0),34)|0);
  $1456 = (getTempRet0() | 0);
  $1457 = (_bitshift64Lshr(($1423|0),($1424|0),30)|0);
  $1458 = (getTempRet0() | 0);
  $1459 = $1455 | $1457;
  $1460 = $1456 | $1458;
  $1461 = $1459 ^ $1453;
  $1462 = $1460 ^ $1454;
  $1463 = (_i64Add(($1427|0),($1428|0),($1431|0),($1432|0))|0);
  $1464 = (getTempRet0() | 0);
  $1465 = (_bitshift64Shl(($1431|0),($1432|0),24)|0);
  $1466 = (getTempRet0() | 0);
  $1467 = (_bitshift64Lshr(($1431|0),($1432|0),40)|0);
  $1468 = (getTempRet0() | 0);
  $1469 = $1465 | $1467;
  $1470 = $1466 | $1468;
  $1471 = $1469 ^ $1463;
  $1472 = $1470 ^ $1464;
  $1473 = (_i64Add(($1441|0),($1442|0),($1443|0),($1444|0))|0);
  $1474 = (getTempRet0() | 0);
  $1475 = (_bitshift64Shl(($1441|0),($1442|0),13)|0);
  $1476 = (getTempRet0() | 0);
  $1477 = (_bitshift64Lshr(($1441|0),($1442|0),51)|0);
  $1478 = (getTempRet0() | 0);
  $1479 = $1475 | $1477;
  $1480 = $1476 | $1478;
  $1481 = $1479 ^ $1473;
  $1482 = $1480 ^ $1474;
  $1483 = (_i64Add(($1471|0),($1472|0),($1453|0),($1454|0))|0);
  $1484 = (getTempRet0() | 0);
  $1485 = (_bitshift64Shl(($1471|0),($1472|0),50)|0);
  $1486 = (getTempRet0() | 0);
  $1487 = (_bitshift64Lshr(($1471|0),($1472|0),14)|0);
  $1488 = (getTempRet0() | 0);
  $1489 = $1485 | $1487;
  $1490 = $1486 | $1488;
  $1491 = $1489 ^ $1483;
  $1492 = $1490 ^ $1484;
  $1493 = (_i64Add(($1461|0),($1462|0),($1463|0),($1464|0))|0);
  $1494 = (getTempRet0() | 0);
  $1495 = (_bitshift64Shl(($1461|0),($1462|0),10)|0);
  $1496 = (getTempRet0() | 0);
  $1497 = (_bitshift64Lshr(($1461|0),($1462|0),54)|0);
  $1498 = (getTempRet0() | 0);
  $1499 = $1495 | $1497;
  $1500 = $1496 | $1498;
  $1501 = $1499 ^ $1493;
  $1502 = $1500 ^ $1494;
  $1503 = (_i64Add(($1433|0),($1434|0),($1451|0),($1452|0))|0);
  $1504 = (getTempRet0() | 0);
  $1505 = (_bitshift64Shl(($1451|0),($1452|0),17)|0);
  $1506 = (getTempRet0() | 0);
  $1507 = (_bitshift64Lshr(($1451|0),($1452|0),47)|0);
  $1508 = (getTempRet0() | 0);
  $1509 = $1505 | $1507;
  $1510 = $1506 | $1508;
  $1511 = $1509 ^ $1503;
  $1512 = $1510 ^ $1504;
  $1513 = (_i64Add(($1483|0),($1484|0),($1481|0),($1482|0))|0);
  $1514 = (getTempRet0() | 0);
  $1515 = (_bitshift64Shl(($1481|0),($1482|0),25)|0);
  $1516 = (getTempRet0() | 0);
  $1517 = (_bitshift64Lshr(($1481|0),($1482|0),39)|0);
  $1518 = (getTempRet0() | 0);
  $1519 = $1515 | $1517;
  $1520 = $1516 | $1518;
  $1521 = $1519 ^ $1513;
  $1522 = $1520 ^ $1514;
  $1523 = (_i64Add(($1493|0),($1494|0),($1511|0),($1512|0))|0);
  $1524 = (getTempRet0() | 0);
  $1525 = (_bitshift64Shl(($1511|0),($1512|0),29)|0);
  $1526 = (getTempRet0() | 0);
  $1527 = (_bitshift64Lshr(($1511|0),($1512|0),35)|0);
  $1528 = (getTempRet0() | 0);
  $1529 = $1525 | $1527;
  $1530 = $1526 | $1528;
  $1531 = $1529 ^ $1523;
  $1532 = $1530 ^ $1524;
  $1533 = (_i64Add(($1501|0),($1502|0),($1503|0),($1504|0))|0);
  $1534 = (getTempRet0() | 0);
  $1535 = (_bitshift64Shl(($1501|0),($1502|0),39)|0);
  $1536 = (getTempRet0() | 0);
  $1537 = (_bitshift64Lshr(($1501|0),($1502|0),25)|0);
  $1538 = (getTempRet0() | 0);
  $1539 = $1535 | $1537;
  $1540 = $1536 | $1538;
  $1541 = $1539 ^ $1533;
  $1542 = $1540 ^ $1534;
  $1543 = (_i64Add(($1491|0),($1492|0),($1473|0),($1474|0))|0);
  $1544 = (getTempRet0() | 0);
  $1545 = (_bitshift64Shl(($1491|0),($1492|0),43)|0);
  $1546 = (getTempRet0() | 0);
  $1547 = (_bitshift64Lshr(($1491|0),($1492|0),21)|0);
  $1548 = (getTempRet0() | 0);
  $1549 = $1545 | $1547;
  $1550 = $1546 | $1548;
  $1551 = $1549 ^ $1543;
  $1552 = $1550 ^ $1544;
  $1553 = (_i64Add(($1521|0),($1522|0),($1523|0),($1524|0))|0);
  $1554 = (getTempRet0() | 0);
  $1555 = (_bitshift64Shl(($1521|0),($1522|0),8)|0);
  $1556 = (getTempRet0() | 0);
  $1557 = (_bitshift64Lshr(($1521|0),($1522|0),56)|0);
  $1558 = (getTempRet0() | 0);
  $1559 = $1555 | $1557;
  $1560 = $1556 | $1558;
  $1561 = $1559 ^ $1553;
  $1562 = $1560 ^ $1554;
  $1563 = (_i64Add(($1551|0),($1552|0),($1533|0),($1534|0))|0);
  $1564 = (getTempRet0() | 0);
  $1565 = (_bitshift64Shl(($1551|0),($1552|0),35)|0);
  $1566 = (getTempRet0() | 0);
  $1567 = (_bitshift64Lshr(($1551|0),($1552|0),29)|0);
  $1568 = (getTempRet0() | 0);
  $1569 = $1565 | $1567;
  $1570 = $1566 | $1568;
  $1571 = $1569 ^ $1563;
  $1572 = $1570 ^ $1564;
  $1573 = (_i64Add(($1541|0),($1542|0),($1543|0),($1544|0))|0);
  $1574 = (getTempRet0() | 0);
  $1575 = (_bitshift64Shl(($1541|0),($1542|0),56)|0);
  $1576 = (getTempRet0() | 0);
  $1577 = (_bitshift64Lshr(($1541|0),($1542|0),8)|0);
  $1578 = (getTempRet0() | 0);
  $1579 = $1575 | $1577;
  $1580 = $1576 | $1578;
  $1581 = $1579 ^ $1573;
  $1582 = $1580 ^ $1574;
  $1583 = (_i64Add(($1513|0),($1514|0),($1531|0),($1532|0))|0);
  $1584 = (getTempRet0() | 0);
  $1585 = (_bitshift64Shl(($1531|0),($1532|0),22)|0);
  $1586 = (getTempRet0() | 0);
  $1587 = (_bitshift64Lshr(($1531|0),($1532|0),42)|0);
  $1588 = (getTempRet0() | 0);
  $1589 = $1585 | $1587;
  $1590 = $1586 | $1588;
  $1591 = $1589 ^ $1583;
  $1592 = $1590 ^ $1584;
  $1593 = (_i64Add(($1563|0),($1564|0),($97|0),($99|0))|0);
  $1594 = (getTempRet0() | 0);
  $1595 = (_i64Add(($1561|0),($1562|0),($70|0),($72|0))|0);
  $1596 = (getTempRet0() | 0);
  $1597 = (_i64Add(($1573|0),($1574|0),($74|0),($76|0))|0);
  $1598 = (getTempRet0() | 0);
  $1599 = (_i64Add(($1591|0),($1592|0),($78|0),($80|0))|0);
  $1600 = (getTempRet0() | 0);
  $1601 = (_i64Add(($1583|0),($1584|0),($82|0),($84|0))|0);
  $1602 = (getTempRet0() | 0);
  $1603 = (_i64Add(($1581|0),($1582|0),($1425|0),($1426|0))|0);
  $1604 = (getTempRet0() | 0);
  $1605 = (_i64Add(($1553|0),($1554|0),($163|0),($164|0))|0);
  $1606 = (getTempRet0() | 0);
  $1607 = (_i64Add(($94|0),($96|0),8,0)|0);
  $1608 = (getTempRet0() | 0);
  $1609 = (_i64Add(($1607|0),($1608|0),($1571|0),($1572|0))|0);
  $1610 = (getTempRet0() | 0);
  $1611 = (_i64Add(($1593|0),($1594|0),($1595|0),($1596|0))|0);
  $1612 = (getTempRet0() | 0);
  $1613 = (_bitshift64Shl(($1595|0),($1596|0),46)|0);
  $1614 = (getTempRet0() | 0);
  $1615 = (_bitshift64Lshr(($1595|0),($1596|0),18)|0);
  $1616 = (getTempRet0() | 0);
  $1617 = $1613 | $1615;
  $1618 = $1614 | $1616;
  $1619 = $1617 ^ $1611;
  $1620 = $1618 ^ $1612;
  $1621 = (_i64Add(($1597|0),($1598|0),($1599|0),($1600|0))|0);
  $1622 = (getTempRet0() | 0);
  $1623 = (_bitshift64Shl(($1599|0),($1600|0),36)|0);
  $1624 = (getTempRet0() | 0);
  $1625 = (_bitshift64Lshr(($1599|0),($1600|0),28)|0);
  $1626 = (getTempRet0() | 0);
  $1627 = $1623 | $1625;
  $1628 = $1624 | $1626;
  $1629 = $1627 ^ $1621;
  $1630 = $1628 ^ $1622;
  $1631 = (_i64Add(($1601|0),($1602|0),($1603|0),($1604|0))|0);
  $1632 = (getTempRet0() | 0);
  $1633 = (_bitshift64Shl(($1603|0),($1604|0),19)|0);
  $1634 = (getTempRet0() | 0);
  $1635 = (_bitshift64Lshr(($1603|0),($1604|0),45)|0);
  $1636 = (getTempRet0() | 0);
  $1637 = $1633 | $1635;
  $1638 = $1634 | $1636;
  $1639 = $1637 ^ $1631;
  $1640 = $1638 ^ $1632;
  $1641 = (_i64Add(($1605|0),($1606|0),($1609|0),($1610|0))|0);
  $1642 = (getTempRet0() | 0);
  $1643 = (_bitshift64Shl(($1609|0),($1610|0),37)|0);
  $1644 = (getTempRet0() | 0);
  $1645 = (_bitshift64Lshr(($1609|0),($1610|0),27)|0);
  $1646 = (getTempRet0() | 0);
  $1647 = $1643 | $1645;
  $1648 = $1644 | $1646;
  $1649 = $1647 ^ $1641;
  $1650 = $1648 ^ $1642;
  $1651 = (_i64Add(($1619|0),($1620|0),($1621|0),($1622|0))|0);
  $1652 = (getTempRet0() | 0);
  $1653 = (_bitshift64Shl(($1619|0),($1620|0),33)|0);
  $1654 = (getTempRet0() | 0);
  $1655 = (_bitshift64Lshr(($1619|0),($1620|0),31)|0);
  $1656 = (getTempRet0() | 0);
  $1657 = $1653 | $1655;
  $1658 = $1654 | $1656;
  $1659 = $1657 ^ $1651;
  $1660 = $1658 ^ $1652;
  $1661 = (_i64Add(($1649|0),($1650|0),($1631|0),($1632|0))|0);
  $1662 = (getTempRet0() | 0);
  $1663 = (_bitshift64Shl(($1649|0),($1650|0),27)|0);
  $1664 = (getTempRet0() | 0);
  $1665 = (_bitshift64Lshr(($1649|0),($1650|0),37)|0);
  $1666 = (getTempRet0() | 0);
  $1667 = $1663 | $1665;
  $1668 = $1664 | $1666;
  $1669 = $1667 ^ $1661;
  $1670 = $1668 ^ $1662;
  $1671 = (_i64Add(($1639|0),($1640|0),($1641|0),($1642|0))|0);
  $1672 = (getTempRet0() | 0);
  $1673 = (_bitshift64Shl(($1639|0),($1640|0),14)|0);
  $1674 = (getTempRet0() | 0);
  $1675 = (_bitshift64Lshr(($1639|0),($1640|0),50)|0);
  $1676 = (getTempRet0() | 0);
  $1677 = $1673 | $1675;
  $1678 = $1674 | $1676;
  $1679 = $1677 ^ $1671;
  $1680 = $1678 ^ $1672;
  $1681 = (_i64Add(($1611|0),($1612|0),($1629|0),($1630|0))|0);
  $1682 = (getTempRet0() | 0);
  $1683 = (_bitshift64Shl(($1629|0),($1630|0),42)|0);
  $1684 = (getTempRet0() | 0);
  $1685 = (_bitshift64Lshr(($1629|0),($1630|0),22)|0);
  $1686 = (getTempRet0() | 0);
  $1687 = $1683 | $1685;
  $1688 = $1684 | $1686;
  $1689 = $1687 ^ $1681;
  $1690 = $1688 ^ $1682;
  $1691 = (_i64Add(($1661|0),($1662|0),($1659|0),($1660|0))|0);
  $1692 = (getTempRet0() | 0);
  $1693 = (_bitshift64Shl(($1659|0),($1660|0),17)|0);
  $1694 = (getTempRet0() | 0);
  $1695 = (_bitshift64Lshr(($1659|0),($1660|0),47)|0);
  $1696 = (getTempRet0() | 0);
  $1697 = $1693 | $1695;
  $1698 = $1694 | $1696;
  $1699 = $1697 ^ $1691;
  $1700 = $1698 ^ $1692;
  $1701 = (_i64Add(($1671|0),($1672|0),($1689|0),($1690|0))|0);
  $1702 = (getTempRet0() | 0);
  $1703 = (_bitshift64Shl(($1689|0),($1690|0),49)|0);
  $1704 = (getTempRet0() | 0);
  $1705 = (_bitshift64Lshr(($1689|0),($1690|0),15)|0);
  $1706 = (getTempRet0() | 0);
  $1707 = $1703 | $1705;
  $1708 = $1704 | $1706;
  $1709 = $1707 ^ $1701;
  $1710 = $1708 ^ $1702;
  $1711 = (_i64Add(($1679|0),($1680|0),($1681|0),($1682|0))|0);
  $1712 = (getTempRet0() | 0);
  $1713 = (_bitshift64Shl(($1679|0),($1680|0),36)|0);
  $1714 = (getTempRet0() | 0);
  $1715 = (_bitshift64Lshr(($1679|0),($1680|0),28)|0);
  $1716 = (getTempRet0() | 0);
  $1717 = $1713 | $1715;
  $1718 = $1714 | $1716;
  $1719 = $1717 ^ $1711;
  $1720 = $1718 ^ $1712;
  $1721 = (_i64Add(($1669|0),($1670|0),($1651|0),($1652|0))|0);
  $1722 = (getTempRet0() | 0);
  $1723 = (_bitshift64Shl(($1669|0),($1670|0),39)|0);
  $1724 = (getTempRet0() | 0);
  $1725 = (_bitshift64Lshr(($1669|0),($1670|0),25)|0);
  $1726 = (getTempRet0() | 0);
  $1727 = $1723 | $1725;
  $1728 = $1724 | $1726;
  $1729 = $1727 ^ $1721;
  $1730 = $1728 ^ $1722;
  $1731 = (_i64Add(($1699|0),($1700|0),($1701|0),($1702|0))|0);
  $1732 = (getTempRet0() | 0);
  $1733 = (_bitshift64Shl(($1699|0),($1700|0),44)|0);
  $1734 = (getTempRet0() | 0);
  $1735 = (_bitshift64Lshr(($1699|0),($1700|0),20)|0);
  $1736 = (getTempRet0() | 0);
  $1737 = $1733 | $1735;
  $1738 = $1734 | $1736;
  $1739 = $1737 ^ $1731;
  $1740 = $1738 ^ $1732;
  $1741 = (_i64Add(($1729|0),($1730|0),($1711|0),($1712|0))|0);
  $1742 = (getTempRet0() | 0);
  $1743 = (_bitshift64Shl(($1729|0),($1730|0),9)|0);
  $1744 = (getTempRet0() | 0);
  $1745 = (_bitshift64Lshr(($1729|0),($1730|0),55)|0);
  $1746 = (getTempRet0() | 0);
  $1747 = $1743 | $1745;
  $1748 = $1744 | $1746;
  $1749 = $1747 ^ $1741;
  $1750 = $1748 ^ $1742;
  $1751 = (_i64Add(($1719|0),($1720|0),($1721|0),($1722|0))|0);
  $1752 = (getTempRet0() | 0);
  $1753 = (_bitshift64Shl(($1719|0),($1720|0),54)|0);
  $1754 = (getTempRet0() | 0);
  $1755 = (_bitshift64Lshr(($1719|0),($1720|0),10)|0);
  $1756 = (getTempRet0() | 0);
  $1757 = $1753 | $1755;
  $1758 = $1754 | $1756;
  $1759 = $1757 ^ $1751;
  $1760 = $1758 ^ $1752;
  $1761 = (_i64Add(($1691|0),($1692|0),($1709|0),($1710|0))|0);
  $1762 = (getTempRet0() | 0);
  $1763 = (_bitshift64Shl(($1709|0),($1710|0),56)|0);
  $1764 = (getTempRet0() | 0);
  $1765 = (_bitshift64Lshr(($1709|0),($1710|0),8)|0);
  $1766 = (getTempRet0() | 0);
  $1767 = $1763 | $1765;
  $1768 = $1764 | $1766;
  $1769 = $1767 ^ $1761;
  $1770 = $1768 ^ $1762;
  $1771 = (_i64Add(($1741|0),($1742|0),($70|0),($72|0))|0);
  $1772 = (getTempRet0() | 0);
  $1773 = (_i64Add(($1739|0),($1740|0),($74|0),($76|0))|0);
  $1774 = (getTempRet0() | 0);
  $1775 = (_i64Add(($1751|0),($1752|0),($78|0),($80|0))|0);
  $1776 = (getTempRet0() | 0);
  $1777 = (_i64Add(($1769|0),($1770|0),($82|0),($84|0))|0);
  $1778 = (getTempRet0() | 0);
  $1779 = (_i64Add(($1761|0),($1762|0),($86|0),($88|0))|0);
  $1780 = (getTempRet0() | 0);
  $1781 = (_i64Add(($1759|0),($1760|0),($163|0),($164|0))|0);
  $1782 = (getTempRet0() | 0);
  $1783 = (_i64Add(($1731|0),($1732|0),($199|0),($200|0))|0);
  $1784 = (getTempRet0() | 0);
  $1785 = (_i64Add(($98|0),($100|0),9,0)|0);
  $1786 = (getTempRet0() | 0);
  $1787 = (_i64Add(($1785|0),($1786|0),($1749|0),($1750|0))|0);
  $1788 = (getTempRet0() | 0);
  $1789 = (_i64Add(($1771|0),($1772|0),($1773|0),($1774|0))|0);
  $1790 = (getTempRet0() | 0);
  $1791 = (_bitshift64Shl(($1773|0),($1774|0),39)|0);
  $1792 = (getTempRet0() | 0);
  $1793 = (_bitshift64Lshr(($1773|0),($1774|0),25)|0);
  $1794 = (getTempRet0() | 0);
  $1795 = $1791 | $1793;
  $1796 = $1792 | $1794;
  $1797 = $1795 ^ $1789;
  $1798 = $1796 ^ $1790;
  $1799 = (_i64Add(($1775|0),($1776|0),($1777|0),($1778|0))|0);
  $1800 = (getTempRet0() | 0);
  $1801 = (_bitshift64Shl(($1777|0),($1778|0),30)|0);
  $1802 = (getTempRet0() | 0);
  $1803 = (_bitshift64Lshr(($1777|0),($1778|0),34)|0);
  $1804 = (getTempRet0() | 0);
  $1805 = $1801 | $1803;
  $1806 = $1802 | $1804;
  $1807 = $1805 ^ $1799;
  $1808 = $1806 ^ $1800;
  $1809 = (_i64Add(($1779|0),($1780|0),($1781|0),($1782|0))|0);
  $1810 = (getTempRet0() | 0);
  $1811 = (_bitshift64Shl(($1781|0),($1782|0),34)|0);
  $1812 = (getTempRet0() | 0);
  $1813 = (_bitshift64Lshr(($1781|0),($1782|0),30)|0);
  $1814 = (getTempRet0() | 0);
  $1815 = $1811 | $1813;
  $1816 = $1812 | $1814;
  $1817 = $1815 ^ $1809;
  $1818 = $1816 ^ $1810;
  $1819 = (_i64Add(($1783|0),($1784|0),($1787|0),($1788|0))|0);
  $1820 = (getTempRet0() | 0);
  $1821 = (_bitshift64Shl(($1787|0),($1788|0),24)|0);
  $1822 = (getTempRet0() | 0);
  $1823 = (_bitshift64Lshr(($1787|0),($1788|0),40)|0);
  $1824 = (getTempRet0() | 0);
  $1825 = $1821 | $1823;
  $1826 = $1822 | $1824;
  $1827 = $1825 ^ $1819;
  $1828 = $1826 ^ $1820;
  $1829 = (_i64Add(($1797|0),($1798|0),($1799|0),($1800|0))|0);
  $1830 = (getTempRet0() | 0);
  $1831 = (_bitshift64Shl(($1797|0),($1798|0),13)|0);
  $1832 = (getTempRet0() | 0);
  $1833 = (_bitshift64Lshr(($1797|0),($1798|0),51)|0);
  $1834 = (getTempRet0() | 0);
  $1835 = $1831 | $1833;
  $1836 = $1832 | $1834;
  $1837 = $1835 ^ $1829;
  $1838 = $1836 ^ $1830;
  $1839 = (_i64Add(($1827|0),($1828|0),($1809|0),($1810|0))|0);
  $1840 = (getTempRet0() | 0);
  $1841 = (_bitshift64Shl(($1827|0),($1828|0),50)|0);
  $1842 = (getTempRet0() | 0);
  $1843 = (_bitshift64Lshr(($1827|0),($1828|0),14)|0);
  $1844 = (getTempRet0() | 0);
  $1845 = $1841 | $1843;
  $1846 = $1842 | $1844;
  $1847 = $1845 ^ $1839;
  $1848 = $1846 ^ $1840;
  $1849 = (_i64Add(($1817|0),($1818|0),($1819|0),($1820|0))|0);
  $1850 = (getTempRet0() | 0);
  $1851 = (_bitshift64Shl(($1817|0),($1818|0),10)|0);
  $1852 = (getTempRet0() | 0);
  $1853 = (_bitshift64Lshr(($1817|0),($1818|0),54)|0);
  $1854 = (getTempRet0() | 0);
  $1855 = $1851 | $1853;
  $1856 = $1852 | $1854;
  $1857 = $1855 ^ $1849;
  $1858 = $1856 ^ $1850;
  $1859 = (_i64Add(($1789|0),($1790|0),($1807|0),($1808|0))|0);
  $1860 = (getTempRet0() | 0);
  $1861 = (_bitshift64Shl(($1807|0),($1808|0),17)|0);
  $1862 = (getTempRet0() | 0);
  $1863 = (_bitshift64Lshr(($1807|0),($1808|0),47)|0);
  $1864 = (getTempRet0() | 0);
  $1865 = $1861 | $1863;
  $1866 = $1862 | $1864;
  $1867 = $1865 ^ $1859;
  $1868 = $1866 ^ $1860;
  $1869 = (_i64Add(($1839|0),($1840|0),($1837|0),($1838|0))|0);
  $1870 = (getTempRet0() | 0);
  $1871 = (_bitshift64Shl(($1837|0),($1838|0),25)|0);
  $1872 = (getTempRet0() | 0);
  $1873 = (_bitshift64Lshr(($1837|0),($1838|0),39)|0);
  $1874 = (getTempRet0() | 0);
  $1875 = $1871 | $1873;
  $1876 = $1872 | $1874;
  $1877 = $1875 ^ $1869;
  $1878 = $1876 ^ $1870;
  $1879 = (_i64Add(($1849|0),($1850|0),($1867|0),($1868|0))|0);
  $1880 = (getTempRet0() | 0);
  $1881 = (_bitshift64Shl(($1867|0),($1868|0),29)|0);
  $1882 = (getTempRet0() | 0);
  $1883 = (_bitshift64Lshr(($1867|0),($1868|0),35)|0);
  $1884 = (getTempRet0() | 0);
  $1885 = $1881 | $1883;
  $1886 = $1882 | $1884;
  $1887 = $1885 ^ $1879;
  $1888 = $1886 ^ $1880;
  $1889 = (_i64Add(($1857|0),($1858|0),($1859|0),($1860|0))|0);
  $1890 = (getTempRet0() | 0);
  $1891 = (_bitshift64Shl(($1857|0),($1858|0),39)|0);
  $1892 = (getTempRet0() | 0);
  $1893 = (_bitshift64Lshr(($1857|0),($1858|0),25)|0);
  $1894 = (getTempRet0() | 0);
  $1895 = $1891 | $1893;
  $1896 = $1892 | $1894;
  $1897 = $1895 ^ $1889;
  $1898 = $1896 ^ $1890;
  $1899 = (_i64Add(($1847|0),($1848|0),($1829|0),($1830|0))|0);
  $1900 = (getTempRet0() | 0);
  $1901 = (_bitshift64Shl(($1847|0),($1848|0),43)|0);
  $1902 = (getTempRet0() | 0);
  $1903 = (_bitshift64Lshr(($1847|0),($1848|0),21)|0);
  $1904 = (getTempRet0() | 0);
  $1905 = $1901 | $1903;
  $1906 = $1902 | $1904;
  $1907 = $1905 ^ $1899;
  $1908 = $1906 ^ $1900;
  $1909 = (_i64Add(($1877|0),($1878|0),($1879|0),($1880|0))|0);
  $1910 = (getTempRet0() | 0);
  $1911 = (_bitshift64Shl(($1877|0),($1878|0),8)|0);
  $1912 = (getTempRet0() | 0);
  $1913 = (_bitshift64Lshr(($1877|0),($1878|0),56)|0);
  $1914 = (getTempRet0() | 0);
  $1915 = $1911 | $1913;
  $1916 = $1912 | $1914;
  $1917 = $1915 ^ $1909;
  $1918 = $1916 ^ $1910;
  $1919 = (_i64Add(($1907|0),($1908|0),($1889|0),($1890|0))|0);
  $1920 = (getTempRet0() | 0);
  $1921 = (_bitshift64Shl(($1907|0),($1908|0),35)|0);
  $1922 = (getTempRet0() | 0);
  $1923 = (_bitshift64Lshr(($1907|0),($1908|0),29)|0);
  $1924 = (getTempRet0() | 0);
  $1925 = $1921 | $1923;
  $1926 = $1922 | $1924;
  $1927 = $1925 ^ $1919;
  $1928 = $1926 ^ $1920;
  $1929 = (_i64Add(($1897|0),($1898|0),($1899|0),($1900|0))|0);
  $1930 = (getTempRet0() | 0);
  $1931 = (_bitshift64Shl(($1897|0),($1898|0),56)|0);
  $1932 = (getTempRet0() | 0);
  $1933 = (_bitshift64Lshr(($1897|0),($1898|0),8)|0);
  $1934 = (getTempRet0() | 0);
  $1935 = $1931 | $1933;
  $1936 = $1932 | $1934;
  $1937 = $1935 ^ $1929;
  $1938 = $1936 ^ $1930;
  $1939 = (_i64Add(($1869|0),($1870|0),($1887|0),($1888|0))|0);
  $1940 = (getTempRet0() | 0);
  $1941 = (_bitshift64Shl(($1887|0),($1888|0),22)|0);
  $1942 = (getTempRet0() | 0);
  $1943 = (_bitshift64Lshr(($1887|0),($1888|0),42)|0);
  $1944 = (getTempRet0() | 0);
  $1945 = $1941 | $1943;
  $1946 = $1942 | $1944;
  $1947 = $1945 ^ $1939;
  $1948 = $1946 ^ $1940;
  $1949 = (_i64Add(($1919|0),($1920|0),($74|0),($76|0))|0);
  $1950 = (getTempRet0() | 0);
  $1951 = (_i64Add(($1917|0),($1918|0),($78|0),($80|0))|0);
  $1952 = (getTempRet0() | 0);
  $1953 = (_i64Add(($1929|0),($1930|0),($82|0),($84|0))|0);
  $1954 = (getTempRet0() | 0);
  $1955 = (_i64Add(($1947|0),($1948|0),($86|0),($88|0))|0);
  $1956 = (getTempRet0() | 0);
  $1957 = (_i64Add(($1939|0),($1940|0),($90|0),($92|0))|0);
  $1958 = (getTempRet0() | 0);
  $1959 = (_i64Add(($1937|0),($1938|0),($199|0),($200|0))|0);
  $1960 = (getTempRet0() | 0);
  $1961 = (_i64Add(($1909|0),($1910|0),($345|0),($346|0))|0);
  $1962 = (getTempRet0() | 0);
  $1963 = (_i64Add(($97|0),($99|0),10,0)|0);
  $1964 = (getTempRet0() | 0);
  $1965 = (_i64Add(($1963|0),($1964|0),($1927|0),($1928|0))|0);
  $1966 = (getTempRet0() | 0);
  $1967 = (_i64Add(($1949|0),($1950|0),($1951|0),($1952|0))|0);
  $1968 = (getTempRet0() | 0);
  $1969 = (_bitshift64Shl(($1951|0),($1952|0),46)|0);
  $1970 = (getTempRet0() | 0);
  $1971 = (_bitshift64Lshr(($1951|0),($1952|0),18)|0);
  $1972 = (getTempRet0() | 0);
  $1973 = $1969 | $1971;
  $1974 = $1970 | $1972;
  $1975 = $1973 ^ $1967;
  $1976 = $1974 ^ $1968;
  $1977 = (_i64Add(($1953|0),($1954|0),($1955|0),($1956|0))|0);
  $1978 = (getTempRet0() | 0);
  $1979 = (_bitshift64Shl(($1955|0),($1956|0),36)|0);
  $1980 = (getTempRet0() | 0);
  $1981 = (_bitshift64Lshr(($1955|0),($1956|0),28)|0);
  $1982 = (getTempRet0() | 0);
  $1983 = $1979 | $1981;
  $1984 = $1980 | $1982;
  $1985 = $1983 ^ $1977;
  $1986 = $1984 ^ $1978;
  $1987 = (_i64Add(($1957|0),($1958|0),($1959|0),($1960|0))|0);
  $1988 = (getTempRet0() | 0);
  $1989 = (_bitshift64Shl(($1959|0),($1960|0),19)|0);
  $1990 = (getTempRet0() | 0);
  $1991 = (_bitshift64Lshr(($1959|0),($1960|0),45)|0);
  $1992 = (getTempRet0() | 0);
  $1993 = $1989 | $1991;
  $1994 = $1990 | $1992;
  $1995 = $1993 ^ $1987;
  $1996 = $1994 ^ $1988;
  $1997 = (_i64Add(($1961|0),($1962|0),($1965|0),($1966|0))|0);
  $1998 = (getTempRet0() | 0);
  $1999 = (_bitshift64Shl(($1965|0),($1966|0),37)|0);
  $2000 = (getTempRet0() | 0);
  $2001 = (_bitshift64Lshr(($1965|0),($1966|0),27)|0);
  $2002 = (getTempRet0() | 0);
  $2003 = $1999 | $2001;
  $2004 = $2000 | $2002;
  $2005 = $2003 ^ $1997;
  $2006 = $2004 ^ $1998;
  $2007 = (_i64Add(($1975|0),($1976|0),($1977|0),($1978|0))|0);
  $2008 = (getTempRet0() | 0);
  $2009 = (_bitshift64Shl(($1975|0),($1976|0),33)|0);
  $2010 = (getTempRet0() | 0);
  $2011 = (_bitshift64Lshr(($1975|0),($1976|0),31)|0);
  $2012 = (getTempRet0() | 0);
  $2013 = $2009 | $2011;
  $2014 = $2010 | $2012;
  $2015 = $2013 ^ $2007;
  $2016 = $2014 ^ $2008;
  $2017 = (_i64Add(($2005|0),($2006|0),($1987|0),($1988|0))|0);
  $2018 = (getTempRet0() | 0);
  $2019 = (_bitshift64Shl(($2005|0),($2006|0),27)|0);
  $2020 = (getTempRet0() | 0);
  $2021 = (_bitshift64Lshr(($2005|0),($2006|0),37)|0);
  $2022 = (getTempRet0() | 0);
  $2023 = $2019 | $2021;
  $2024 = $2020 | $2022;
  $2025 = $2023 ^ $2017;
  $2026 = $2024 ^ $2018;
  $2027 = (_i64Add(($1995|0),($1996|0),($1997|0),($1998|0))|0);
  $2028 = (getTempRet0() | 0);
  $2029 = (_bitshift64Shl(($1995|0),($1996|0),14)|0);
  $2030 = (getTempRet0() | 0);
  $2031 = (_bitshift64Lshr(($1995|0),($1996|0),50)|0);
  $2032 = (getTempRet0() | 0);
  $2033 = $2029 | $2031;
  $2034 = $2030 | $2032;
  $2035 = $2033 ^ $2027;
  $2036 = $2034 ^ $2028;
  $2037 = (_i64Add(($1967|0),($1968|0),($1985|0),($1986|0))|0);
  $2038 = (getTempRet0() | 0);
  $2039 = (_bitshift64Shl(($1985|0),($1986|0),42)|0);
  $2040 = (getTempRet0() | 0);
  $2041 = (_bitshift64Lshr(($1985|0),($1986|0),22)|0);
  $2042 = (getTempRet0() | 0);
  $2043 = $2039 | $2041;
  $2044 = $2040 | $2042;
  $2045 = $2043 ^ $2037;
  $2046 = $2044 ^ $2038;
  $2047 = (_i64Add(($2017|0),($2018|0),($2015|0),($2016|0))|0);
  $2048 = (getTempRet0() | 0);
  $2049 = (_bitshift64Shl(($2015|0),($2016|0),17)|0);
  $2050 = (getTempRet0() | 0);
  $2051 = (_bitshift64Lshr(($2015|0),($2016|0),47)|0);
  $2052 = (getTempRet0() | 0);
  $2053 = $2049 | $2051;
  $2054 = $2050 | $2052;
  $2055 = $2053 ^ $2047;
  $2056 = $2054 ^ $2048;
  $2057 = (_i64Add(($2027|0),($2028|0),($2045|0),($2046|0))|0);
  $2058 = (getTempRet0() | 0);
  $2059 = (_bitshift64Shl(($2045|0),($2046|0),49)|0);
  $2060 = (getTempRet0() | 0);
  $2061 = (_bitshift64Lshr(($2045|0),($2046|0),15)|0);
  $2062 = (getTempRet0() | 0);
  $2063 = $2059 | $2061;
  $2064 = $2060 | $2062;
  $2065 = $2063 ^ $2057;
  $2066 = $2064 ^ $2058;
  $2067 = (_i64Add(($2035|0),($2036|0),($2037|0),($2038|0))|0);
  $2068 = (getTempRet0() | 0);
  $2069 = (_bitshift64Shl(($2035|0),($2036|0),36)|0);
  $2070 = (getTempRet0() | 0);
  $2071 = (_bitshift64Lshr(($2035|0),($2036|0),28)|0);
  $2072 = (getTempRet0() | 0);
  $2073 = $2069 | $2071;
  $2074 = $2070 | $2072;
  $2075 = $2073 ^ $2067;
  $2076 = $2074 ^ $2068;
  $2077 = (_i64Add(($2025|0),($2026|0),($2007|0),($2008|0))|0);
  $2078 = (getTempRet0() | 0);
  $2079 = (_bitshift64Shl(($2025|0),($2026|0),39)|0);
  $2080 = (getTempRet0() | 0);
  $2081 = (_bitshift64Lshr(($2025|0),($2026|0),25)|0);
  $2082 = (getTempRet0() | 0);
  $2083 = $2079 | $2081;
  $2084 = $2080 | $2082;
  $2085 = $2083 ^ $2077;
  $2086 = $2084 ^ $2078;
  $2087 = (_i64Add(($2055|0),($2056|0),($2057|0),($2058|0))|0);
  $2088 = (getTempRet0() | 0);
  $2089 = (_bitshift64Shl(($2055|0),($2056|0),44)|0);
  $2090 = (getTempRet0() | 0);
  $2091 = (_bitshift64Lshr(($2055|0),($2056|0),20)|0);
  $2092 = (getTempRet0() | 0);
  $2093 = $2089 | $2091;
  $2094 = $2090 | $2092;
  $2095 = $2093 ^ $2087;
  $2096 = $2094 ^ $2088;
  $2097 = (_i64Add(($2085|0),($2086|0),($2067|0),($2068|0))|0);
  $2098 = (getTempRet0() | 0);
  $2099 = (_bitshift64Shl(($2085|0),($2086|0),9)|0);
  $2100 = (getTempRet0() | 0);
  $2101 = (_bitshift64Lshr(($2085|0),($2086|0),55)|0);
  $2102 = (getTempRet0() | 0);
  $2103 = $2099 | $2101;
  $2104 = $2100 | $2102;
  $2105 = $2103 ^ $2097;
  $2106 = $2104 ^ $2098;
  $2107 = (_i64Add(($2075|0),($2076|0),($2077|0),($2078|0))|0);
  $2108 = (getTempRet0() | 0);
  $2109 = (_bitshift64Shl(($2075|0),($2076|0),54)|0);
  $2110 = (getTempRet0() | 0);
  $2111 = (_bitshift64Lshr(($2075|0),($2076|0),10)|0);
  $2112 = (getTempRet0() | 0);
  $2113 = $2109 | $2111;
  $2114 = $2110 | $2112;
  $2115 = $2113 ^ $2107;
  $2116 = $2114 ^ $2108;
  $2117 = (_i64Add(($2047|0),($2048|0),($2065|0),($2066|0))|0);
  $2118 = (getTempRet0() | 0);
  $2119 = (_bitshift64Shl(($2065|0),($2066|0),56)|0);
  $2120 = (getTempRet0() | 0);
  $2121 = (_bitshift64Lshr(($2065|0),($2066|0),8)|0);
  $2122 = (getTempRet0() | 0);
  $2123 = $2119 | $2121;
  $2124 = $2120 | $2122;
  $2125 = $2123 ^ $2117;
  $2126 = $2124 ^ $2118;
  $2127 = (_i64Add(($2097|0),($2098|0),($78|0),($80|0))|0);
  $2128 = (getTempRet0() | 0);
  $2129 = (_i64Add(($2095|0),($2096|0),($82|0),($84|0))|0);
  $2130 = (getTempRet0() | 0);
  $2131 = (_i64Add(($2107|0),($2108|0),($86|0),($88|0))|0);
  $2132 = (getTempRet0() | 0);
  $2133 = (_i64Add(($2125|0),($2126|0),($90|0),($92|0))|0);
  $2134 = (getTempRet0() | 0);
  $2135 = (_i64Add(($2117|0),($2118|0),($94|0),($96|0))|0);
  $2136 = (getTempRet0() | 0);
  $2137 = (_i64Add(($2115|0),($2116|0),($345|0),($346|0))|0);
  $2138 = (getTempRet0() | 0);
  $2139 = (_i64Add(($2087|0),($2088|0),($525|0),($526|0))|0);
  $2140 = (getTempRet0() | 0);
  $2141 = (_i64Add(($70|0),($72|0),11,0)|0);
  $2142 = (getTempRet0() | 0);
  $2143 = (_i64Add(($2141|0),($2142|0),($2105|0),($2106|0))|0);
  $2144 = (getTempRet0() | 0);
  $2145 = (_i64Add(($2127|0),($2128|0),($2129|0),($2130|0))|0);
  $2146 = (getTempRet0() | 0);
  $2147 = (_bitshift64Shl(($2129|0),($2130|0),39)|0);
  $2148 = (getTempRet0() | 0);
  $2149 = (_bitshift64Lshr(($2129|0),($2130|0),25)|0);
  $2150 = (getTempRet0() | 0);
  $2151 = $2147 | $2149;
  $2152 = $2148 | $2150;
  $2153 = $2151 ^ $2145;
  $2154 = $2152 ^ $2146;
  $2155 = (_i64Add(($2131|0),($2132|0),($2133|0),($2134|0))|0);
  $2156 = (getTempRet0() | 0);
  $2157 = (_bitshift64Shl(($2133|0),($2134|0),30)|0);
  $2158 = (getTempRet0() | 0);
  $2159 = (_bitshift64Lshr(($2133|0),($2134|0),34)|0);
  $2160 = (getTempRet0() | 0);
  $2161 = $2157 | $2159;
  $2162 = $2158 | $2160;
  $2163 = $2161 ^ $2155;
  $2164 = $2162 ^ $2156;
  $2165 = (_i64Add(($2135|0),($2136|0),($2137|0),($2138|0))|0);
  $2166 = (getTempRet0() | 0);
  $2167 = (_bitshift64Shl(($2137|0),($2138|0),34)|0);
  $2168 = (getTempRet0() | 0);
  $2169 = (_bitshift64Lshr(($2137|0),($2138|0),30)|0);
  $2170 = (getTempRet0() | 0);
  $2171 = $2167 | $2169;
  $2172 = $2168 | $2170;
  $2173 = $2171 ^ $2165;
  $2174 = $2172 ^ $2166;
  $2175 = (_i64Add(($2139|0),($2140|0),($2143|0),($2144|0))|0);
  $2176 = (getTempRet0() | 0);
  $2177 = (_bitshift64Shl(($2143|0),($2144|0),24)|0);
  $2178 = (getTempRet0() | 0);
  $2179 = (_bitshift64Lshr(($2143|0),($2144|0),40)|0);
  $2180 = (getTempRet0() | 0);
  $2181 = $2177 | $2179;
  $2182 = $2178 | $2180;
  $2183 = $2181 ^ $2175;
  $2184 = $2182 ^ $2176;
  $2185 = (_i64Add(($2153|0),($2154|0),($2155|0),($2156|0))|0);
  $2186 = (getTempRet0() | 0);
  $2187 = (_bitshift64Shl(($2153|0),($2154|0),13)|0);
  $2188 = (getTempRet0() | 0);
  $2189 = (_bitshift64Lshr(($2153|0),($2154|0),51)|0);
  $2190 = (getTempRet0() | 0);
  $2191 = $2187 | $2189;
  $2192 = $2188 | $2190;
  $2193 = $2191 ^ $2185;
  $2194 = $2192 ^ $2186;
  $2195 = (_i64Add(($2183|0),($2184|0),($2165|0),($2166|0))|0);
  $2196 = (getTempRet0() | 0);
  $2197 = (_bitshift64Shl(($2183|0),($2184|0),50)|0);
  $2198 = (getTempRet0() | 0);
  $2199 = (_bitshift64Lshr(($2183|0),($2184|0),14)|0);
  $2200 = (getTempRet0() | 0);
  $2201 = $2197 | $2199;
  $2202 = $2198 | $2200;
  $2203 = $2201 ^ $2195;
  $2204 = $2202 ^ $2196;
  $2205 = (_i64Add(($2173|0),($2174|0),($2175|0),($2176|0))|0);
  $2206 = (getTempRet0() | 0);
  $2207 = (_bitshift64Shl(($2173|0),($2174|0),10)|0);
  $2208 = (getTempRet0() | 0);
  $2209 = (_bitshift64Lshr(($2173|0),($2174|0),54)|0);
  $2210 = (getTempRet0() | 0);
  $2211 = $2207 | $2209;
  $2212 = $2208 | $2210;
  $2213 = $2211 ^ $2205;
  $2214 = $2212 ^ $2206;
  $2215 = (_i64Add(($2145|0),($2146|0),($2163|0),($2164|0))|0);
  $2216 = (getTempRet0() | 0);
  $2217 = (_bitshift64Shl(($2163|0),($2164|0),17)|0);
  $2218 = (getTempRet0() | 0);
  $2219 = (_bitshift64Lshr(($2163|0),($2164|0),47)|0);
  $2220 = (getTempRet0() | 0);
  $2221 = $2217 | $2219;
  $2222 = $2218 | $2220;
  $2223 = $2221 ^ $2215;
  $2224 = $2222 ^ $2216;
  $2225 = (_i64Add(($2195|0),($2196|0),($2193|0),($2194|0))|0);
  $2226 = (getTempRet0() | 0);
  $2227 = (_bitshift64Shl(($2193|0),($2194|0),25)|0);
  $2228 = (getTempRet0() | 0);
  $2229 = (_bitshift64Lshr(($2193|0),($2194|0),39)|0);
  $2230 = (getTempRet0() | 0);
  $2231 = $2227 | $2229;
  $2232 = $2228 | $2230;
  $2233 = $2231 ^ $2225;
  $2234 = $2232 ^ $2226;
  $2235 = (_i64Add(($2205|0),($2206|0),($2223|0),($2224|0))|0);
  $2236 = (getTempRet0() | 0);
  $2237 = (_bitshift64Shl(($2223|0),($2224|0),29)|0);
  $2238 = (getTempRet0() | 0);
  $2239 = (_bitshift64Lshr(($2223|0),($2224|0),35)|0);
  $2240 = (getTempRet0() | 0);
  $2241 = $2237 | $2239;
  $2242 = $2238 | $2240;
  $2243 = $2241 ^ $2235;
  $2244 = $2242 ^ $2236;
  $2245 = (_i64Add(($2213|0),($2214|0),($2215|0),($2216|0))|0);
  $2246 = (getTempRet0() | 0);
  $2247 = (_bitshift64Shl(($2213|0),($2214|0),39)|0);
  $2248 = (getTempRet0() | 0);
  $2249 = (_bitshift64Lshr(($2213|0),($2214|0),25)|0);
  $2250 = (getTempRet0() | 0);
  $2251 = $2247 | $2249;
  $2252 = $2248 | $2250;
  $2253 = $2251 ^ $2245;
  $2254 = $2252 ^ $2246;
  $2255 = (_i64Add(($2203|0),($2204|0),($2185|0),($2186|0))|0);
  $2256 = (getTempRet0() | 0);
  $2257 = (_bitshift64Shl(($2203|0),($2204|0),43)|0);
  $2258 = (getTempRet0() | 0);
  $2259 = (_bitshift64Lshr(($2203|0),($2204|0),21)|0);
  $2260 = (getTempRet0() | 0);
  $2261 = $2257 | $2259;
  $2262 = $2258 | $2260;
  $2263 = $2261 ^ $2255;
  $2264 = $2262 ^ $2256;
  $2265 = (_i64Add(($2233|0),($2234|0),($2235|0),($2236|0))|0);
  $2266 = (getTempRet0() | 0);
  $2267 = (_bitshift64Shl(($2233|0),($2234|0),8)|0);
  $2268 = (getTempRet0() | 0);
  $2269 = (_bitshift64Lshr(($2233|0),($2234|0),56)|0);
  $2270 = (getTempRet0() | 0);
  $2271 = $2267 | $2269;
  $2272 = $2268 | $2270;
  $2273 = $2271 ^ $2265;
  $2274 = $2272 ^ $2266;
  $2275 = (_i64Add(($2263|0),($2264|0),($2245|0),($2246|0))|0);
  $2276 = (getTempRet0() | 0);
  $2277 = (_bitshift64Shl(($2263|0),($2264|0),35)|0);
  $2278 = (getTempRet0() | 0);
  $2279 = (_bitshift64Lshr(($2263|0),($2264|0),29)|0);
  $2280 = (getTempRet0() | 0);
  $2281 = $2277 | $2279;
  $2282 = $2278 | $2280;
  $2283 = $2281 ^ $2275;
  $2284 = $2282 ^ $2276;
  $2285 = (_i64Add(($2253|0),($2254|0),($2255|0),($2256|0))|0);
  $2286 = (getTempRet0() | 0);
  $2287 = (_bitshift64Shl(($2253|0),($2254|0),56)|0);
  $2288 = (getTempRet0() | 0);
  $2289 = (_bitshift64Lshr(($2253|0),($2254|0),8)|0);
  $2290 = (getTempRet0() | 0);
  $2291 = $2287 | $2289;
  $2292 = $2288 | $2290;
  $2293 = $2291 ^ $2285;
  $2294 = $2292 ^ $2286;
  $2295 = (_i64Add(($2225|0),($2226|0),($2243|0),($2244|0))|0);
  $2296 = (getTempRet0() | 0);
  $2297 = (_bitshift64Shl(($2243|0),($2244|0),22)|0);
  $2298 = (getTempRet0() | 0);
  $2299 = (_bitshift64Lshr(($2243|0),($2244|0),42)|0);
  $2300 = (getTempRet0() | 0);
  $2301 = $2297 | $2299;
  $2302 = $2298 | $2300;
  $2303 = $2301 ^ $2295;
  $2304 = $2302 ^ $2296;
  $2305 = (_i64Add(($2275|0),($2276|0),($82|0),($84|0))|0);
  $2306 = (getTempRet0() | 0);
  $2307 = (_i64Add(($2273|0),($2274|0),($86|0),($88|0))|0);
  $2308 = (getTempRet0() | 0);
  $2309 = (_i64Add(($2285|0),($2286|0),($90|0),($92|0))|0);
  $2310 = (getTempRet0() | 0);
  $2311 = (_i64Add(($2303|0),($2304|0),($94|0),($96|0))|0);
  $2312 = (getTempRet0() | 0);
  $2313 = (_i64Add(($2295|0),($2296|0),($98|0),($100|0))|0);
  $2314 = (getTempRet0() | 0);
  $2315 = (_i64Add(($2293|0),($2294|0),($525|0),($526|0))|0);
  $2316 = (getTempRet0() | 0);
  $2317 = (_i64Add(($2265|0),($2266|0),($705|0),($706|0))|0);
  $2318 = (getTempRet0() | 0);
  $2319 = (_i64Add(($74|0),($76|0),12,0)|0);
  $2320 = (getTempRet0() | 0);
  $2321 = (_i64Add(($2319|0),($2320|0),($2283|0),($2284|0))|0);
  $2322 = (getTempRet0() | 0);
  $2323 = (_i64Add(($2305|0),($2306|0),($2307|0),($2308|0))|0);
  $2324 = (getTempRet0() | 0);
  $2325 = (_bitshift64Shl(($2307|0),($2308|0),46)|0);
  $2326 = (getTempRet0() | 0);
  $2327 = (_bitshift64Lshr(($2307|0),($2308|0),18)|0);
  $2328 = (getTempRet0() | 0);
  $2329 = $2325 | $2327;
  $2330 = $2326 | $2328;
  $2331 = $2329 ^ $2323;
  $2332 = $2330 ^ $2324;
  $2333 = (_i64Add(($2309|0),($2310|0),($2311|0),($2312|0))|0);
  $2334 = (getTempRet0() | 0);
  $2335 = (_bitshift64Shl(($2311|0),($2312|0),36)|0);
  $2336 = (getTempRet0() | 0);
  $2337 = (_bitshift64Lshr(($2311|0),($2312|0),28)|0);
  $2338 = (getTempRet0() | 0);
  $2339 = $2335 | $2337;
  $2340 = $2336 | $2338;
  $2341 = $2339 ^ $2333;
  $2342 = $2340 ^ $2334;
  $2343 = (_i64Add(($2313|0),($2314|0),($2315|0),($2316|0))|0);
  $2344 = (getTempRet0() | 0);
  $2345 = (_bitshift64Shl(($2315|0),($2316|0),19)|0);
  $2346 = (getTempRet0() | 0);
  $2347 = (_bitshift64Lshr(($2315|0),($2316|0),45)|0);
  $2348 = (getTempRet0() | 0);
  $2349 = $2345 | $2347;
  $2350 = $2346 | $2348;
  $2351 = $2349 ^ $2343;
  $2352 = $2350 ^ $2344;
  $2353 = (_i64Add(($2317|0),($2318|0),($2321|0),($2322|0))|0);
  $2354 = (getTempRet0() | 0);
  $2355 = (_bitshift64Shl(($2321|0),($2322|0),37)|0);
  $2356 = (getTempRet0() | 0);
  $2357 = (_bitshift64Lshr(($2321|0),($2322|0),27)|0);
  $2358 = (getTempRet0() | 0);
  $2359 = $2355 | $2357;
  $2360 = $2356 | $2358;
  $2361 = $2359 ^ $2353;
  $2362 = $2360 ^ $2354;
  $2363 = (_i64Add(($2331|0),($2332|0),($2333|0),($2334|0))|0);
  $2364 = (getTempRet0() | 0);
  $2365 = (_bitshift64Shl(($2331|0),($2332|0),33)|0);
  $2366 = (getTempRet0() | 0);
  $2367 = (_bitshift64Lshr(($2331|0),($2332|0),31)|0);
  $2368 = (getTempRet0() | 0);
  $2369 = $2365 | $2367;
  $2370 = $2366 | $2368;
  $2371 = $2369 ^ $2363;
  $2372 = $2370 ^ $2364;
  $2373 = (_i64Add(($2361|0),($2362|0),($2343|0),($2344|0))|0);
  $2374 = (getTempRet0() | 0);
  $2375 = (_bitshift64Shl(($2361|0),($2362|0),27)|0);
  $2376 = (getTempRet0() | 0);
  $2377 = (_bitshift64Lshr(($2361|0),($2362|0),37)|0);
  $2378 = (getTempRet0() | 0);
  $2379 = $2375 | $2377;
  $2380 = $2376 | $2378;
  $2381 = $2379 ^ $2373;
  $2382 = $2380 ^ $2374;
  $2383 = (_i64Add(($2351|0),($2352|0),($2353|0),($2354|0))|0);
  $2384 = (getTempRet0() | 0);
  $2385 = (_bitshift64Shl(($2351|0),($2352|0),14)|0);
  $2386 = (getTempRet0() | 0);
  $2387 = (_bitshift64Lshr(($2351|0),($2352|0),50)|0);
  $2388 = (getTempRet0() | 0);
  $2389 = $2385 | $2387;
  $2390 = $2386 | $2388;
  $2391 = $2389 ^ $2383;
  $2392 = $2390 ^ $2384;
  $2393 = (_i64Add(($2323|0),($2324|0),($2341|0),($2342|0))|0);
  $2394 = (getTempRet0() | 0);
  $2395 = (_bitshift64Shl(($2341|0),($2342|0),42)|0);
  $2396 = (getTempRet0() | 0);
  $2397 = (_bitshift64Lshr(($2341|0),($2342|0),22)|0);
  $2398 = (getTempRet0() | 0);
  $2399 = $2395 | $2397;
  $2400 = $2396 | $2398;
  $2401 = $2399 ^ $2393;
  $2402 = $2400 ^ $2394;
  $2403 = (_i64Add(($2373|0),($2374|0),($2371|0),($2372|0))|0);
  $2404 = (getTempRet0() | 0);
  $2405 = (_bitshift64Shl(($2371|0),($2372|0),17)|0);
  $2406 = (getTempRet0() | 0);
  $2407 = (_bitshift64Lshr(($2371|0),($2372|0),47)|0);
  $2408 = (getTempRet0() | 0);
  $2409 = $2405 | $2407;
  $2410 = $2406 | $2408;
  $2411 = $2409 ^ $2403;
  $2412 = $2410 ^ $2404;
  $2413 = (_i64Add(($2383|0),($2384|0),($2401|0),($2402|0))|0);
  $2414 = (getTempRet0() | 0);
  $2415 = (_bitshift64Shl(($2401|0),($2402|0),49)|0);
  $2416 = (getTempRet0() | 0);
  $2417 = (_bitshift64Lshr(($2401|0),($2402|0),15)|0);
  $2418 = (getTempRet0() | 0);
  $2419 = $2415 | $2417;
  $2420 = $2416 | $2418;
  $2421 = $2419 ^ $2413;
  $2422 = $2420 ^ $2414;
  $2423 = (_i64Add(($2391|0),($2392|0),($2393|0),($2394|0))|0);
  $2424 = (getTempRet0() | 0);
  $2425 = (_bitshift64Shl(($2391|0),($2392|0),36)|0);
  $2426 = (getTempRet0() | 0);
  $2427 = (_bitshift64Lshr(($2391|0),($2392|0),28)|0);
  $2428 = (getTempRet0() | 0);
  $2429 = $2425 | $2427;
  $2430 = $2426 | $2428;
  $2431 = $2429 ^ $2423;
  $2432 = $2430 ^ $2424;
  $2433 = (_i64Add(($2381|0),($2382|0),($2363|0),($2364|0))|0);
  $2434 = (getTempRet0() | 0);
  $2435 = (_bitshift64Shl(($2381|0),($2382|0),39)|0);
  $2436 = (getTempRet0() | 0);
  $2437 = (_bitshift64Lshr(($2381|0),($2382|0),25)|0);
  $2438 = (getTempRet0() | 0);
  $2439 = $2435 | $2437;
  $2440 = $2436 | $2438;
  $2441 = $2439 ^ $2433;
  $2442 = $2440 ^ $2434;
  $2443 = (_i64Add(($2411|0),($2412|0),($2413|0),($2414|0))|0);
  $2444 = (getTempRet0() | 0);
  $2445 = (_bitshift64Shl(($2411|0),($2412|0),44)|0);
  $2446 = (getTempRet0() | 0);
  $2447 = (_bitshift64Lshr(($2411|0),($2412|0),20)|0);
  $2448 = (getTempRet0() | 0);
  $2449 = $2445 | $2447;
  $2450 = $2446 | $2448;
  $2451 = $2449 ^ $2443;
  $2452 = $2450 ^ $2444;
  $2453 = (_i64Add(($2441|0),($2442|0),($2423|0),($2424|0))|0);
  $2454 = (getTempRet0() | 0);
  $2455 = (_bitshift64Shl(($2441|0),($2442|0),9)|0);
  $2456 = (getTempRet0() | 0);
  $2457 = (_bitshift64Lshr(($2441|0),($2442|0),55)|0);
  $2458 = (getTempRet0() | 0);
  $2459 = $2455 | $2457;
  $2460 = $2456 | $2458;
  $2461 = $2459 ^ $2453;
  $2462 = $2460 ^ $2454;
  $2463 = (_i64Add(($2431|0),($2432|0),($2433|0),($2434|0))|0);
  $2464 = (getTempRet0() | 0);
  $2465 = (_bitshift64Shl(($2431|0),($2432|0),54)|0);
  $2466 = (getTempRet0() | 0);
  $2467 = (_bitshift64Lshr(($2431|0),($2432|0),10)|0);
  $2468 = (getTempRet0() | 0);
  $2469 = $2465 | $2467;
  $2470 = $2466 | $2468;
  $2471 = $2469 ^ $2463;
  $2472 = $2470 ^ $2464;
  $2473 = (_i64Add(($2403|0),($2404|0),($2421|0),($2422|0))|0);
  $2474 = (getTempRet0() | 0);
  $2475 = (_bitshift64Shl(($2421|0),($2422|0),56)|0);
  $2476 = (getTempRet0() | 0);
  $2477 = (_bitshift64Lshr(($2421|0),($2422|0),8)|0);
  $2478 = (getTempRet0() | 0);
  $2479 = $2475 | $2477;
  $2480 = $2476 | $2478;
  $2481 = $2479 ^ $2473;
  $2482 = $2480 ^ $2474;
  $2483 = (_i64Add(($2453|0),($2454|0),($86|0),($88|0))|0);
  $2484 = (getTempRet0() | 0);
  $2485 = (_i64Add(($2451|0),($2452|0),($90|0),($92|0))|0);
  $2486 = (getTempRet0() | 0);
  $2487 = (_i64Add(($2463|0),($2464|0),($94|0),($96|0))|0);
  $2488 = (getTempRet0() | 0);
  $2489 = (_i64Add(($2481|0),($2482|0),($98|0),($100|0))|0);
  $2490 = (getTempRet0() | 0);
  $2491 = (_i64Add(($2473|0),($2474|0),($97|0),($99|0))|0);
  $2492 = (getTempRet0() | 0);
  $2493 = (_i64Add(($2471|0),($2472|0),($705|0),($706|0))|0);
  $2494 = (getTempRet0() | 0);
  $2495 = (_i64Add(($2443|0),($2444|0),($885|0),($886|0))|0);
  $2496 = (getTempRet0() | 0);
  $2497 = (_i64Add(($78|0),($80|0),13,0)|0);
  $2498 = (getTempRet0() | 0);
  $2499 = (_i64Add(($2497|0),($2498|0),($2461|0),($2462|0))|0);
  $2500 = (getTempRet0() | 0);
  $2501 = (_i64Add(($2483|0),($2484|0),($2485|0),($2486|0))|0);
  $2502 = (getTempRet0() | 0);
  $2503 = (_bitshift64Shl(($2485|0),($2486|0),39)|0);
  $2504 = (getTempRet0() | 0);
  $2505 = (_bitshift64Lshr(($2485|0),($2486|0),25)|0);
  $2506 = (getTempRet0() | 0);
  $2507 = $2503 | $2505;
  $2508 = $2504 | $2506;
  $2509 = $2507 ^ $2501;
  $2510 = $2508 ^ $2502;
  $2511 = (_i64Add(($2487|0),($2488|0),($2489|0),($2490|0))|0);
  $2512 = (getTempRet0() | 0);
  $2513 = (_bitshift64Shl(($2489|0),($2490|0),30)|0);
  $2514 = (getTempRet0() | 0);
  $2515 = (_bitshift64Lshr(($2489|0),($2490|0),34)|0);
  $2516 = (getTempRet0() | 0);
  $2517 = $2513 | $2515;
  $2518 = $2514 | $2516;
  $2519 = $2517 ^ $2511;
  $2520 = $2518 ^ $2512;
  $2521 = (_i64Add(($2491|0),($2492|0),($2493|0),($2494|0))|0);
  $2522 = (getTempRet0() | 0);
  $2523 = (_bitshift64Shl(($2493|0),($2494|0),34)|0);
  $2524 = (getTempRet0() | 0);
  $2525 = (_bitshift64Lshr(($2493|0),($2494|0),30)|0);
  $2526 = (getTempRet0() | 0);
  $2527 = $2523 | $2525;
  $2528 = $2524 | $2526;
  $2529 = $2527 ^ $2521;
  $2530 = $2528 ^ $2522;
  $2531 = (_i64Add(($2495|0),($2496|0),($2499|0),($2500|0))|0);
  $2532 = (getTempRet0() | 0);
  $2533 = (_bitshift64Shl(($2499|0),($2500|0),24)|0);
  $2534 = (getTempRet0() | 0);
  $2535 = (_bitshift64Lshr(($2499|0),($2500|0),40)|0);
  $2536 = (getTempRet0() | 0);
  $2537 = $2533 | $2535;
  $2538 = $2534 | $2536;
  $2539 = $2537 ^ $2531;
  $2540 = $2538 ^ $2532;
  $2541 = (_i64Add(($2509|0),($2510|0),($2511|0),($2512|0))|0);
  $2542 = (getTempRet0() | 0);
  $2543 = (_bitshift64Shl(($2509|0),($2510|0),13)|0);
  $2544 = (getTempRet0() | 0);
  $2545 = (_bitshift64Lshr(($2509|0),($2510|0),51)|0);
  $2546 = (getTempRet0() | 0);
  $2547 = $2543 | $2545;
  $2548 = $2544 | $2546;
  $2549 = $2547 ^ $2541;
  $2550 = $2548 ^ $2542;
  $2551 = (_i64Add(($2539|0),($2540|0),($2521|0),($2522|0))|0);
  $2552 = (getTempRet0() | 0);
  $2553 = (_bitshift64Shl(($2539|0),($2540|0),50)|0);
  $2554 = (getTempRet0() | 0);
  $2555 = (_bitshift64Lshr(($2539|0),($2540|0),14)|0);
  $2556 = (getTempRet0() | 0);
  $2557 = $2553 | $2555;
  $2558 = $2554 | $2556;
  $2559 = $2557 ^ $2551;
  $2560 = $2558 ^ $2552;
  $2561 = (_i64Add(($2529|0),($2530|0),($2531|0),($2532|0))|0);
  $2562 = (getTempRet0() | 0);
  $2563 = (_bitshift64Shl(($2529|0),($2530|0),10)|0);
  $2564 = (getTempRet0() | 0);
  $2565 = (_bitshift64Lshr(($2529|0),($2530|0),54)|0);
  $2566 = (getTempRet0() | 0);
  $2567 = $2563 | $2565;
  $2568 = $2564 | $2566;
  $2569 = $2567 ^ $2561;
  $2570 = $2568 ^ $2562;
  $2571 = (_i64Add(($2501|0),($2502|0),($2519|0),($2520|0))|0);
  $2572 = (getTempRet0() | 0);
  $2573 = (_bitshift64Shl(($2519|0),($2520|0),17)|0);
  $2574 = (getTempRet0() | 0);
  $2575 = (_bitshift64Lshr(($2519|0),($2520|0),47)|0);
  $2576 = (getTempRet0() | 0);
  $2577 = $2573 | $2575;
  $2578 = $2574 | $2576;
  $2579 = $2577 ^ $2571;
  $2580 = $2578 ^ $2572;
  $2581 = (_i64Add(($2551|0),($2552|0),($2549|0),($2550|0))|0);
  $2582 = (getTempRet0() | 0);
  $2583 = (_bitshift64Shl(($2549|0),($2550|0),25)|0);
  $2584 = (getTempRet0() | 0);
  $2585 = (_bitshift64Lshr(($2549|0),($2550|0),39)|0);
  $2586 = (getTempRet0() | 0);
  $2587 = $2583 | $2585;
  $2588 = $2584 | $2586;
  $2589 = $2587 ^ $2581;
  $2590 = $2588 ^ $2582;
  $2591 = (_i64Add(($2561|0),($2562|0),($2579|0),($2580|0))|0);
  $2592 = (getTempRet0() | 0);
  $2593 = (_bitshift64Shl(($2579|0),($2580|0),29)|0);
  $2594 = (getTempRet0() | 0);
  $2595 = (_bitshift64Lshr(($2579|0),($2580|0),35)|0);
  $2596 = (getTempRet0() | 0);
  $2597 = $2593 | $2595;
  $2598 = $2594 | $2596;
  $2599 = $2597 ^ $2591;
  $2600 = $2598 ^ $2592;
  $2601 = (_i64Add(($2569|0),($2570|0),($2571|0),($2572|0))|0);
  $2602 = (getTempRet0() | 0);
  $2603 = (_bitshift64Shl(($2569|0),($2570|0),39)|0);
  $2604 = (getTempRet0() | 0);
  $2605 = (_bitshift64Lshr(($2569|0),($2570|0),25)|0);
  $2606 = (getTempRet0() | 0);
  $2607 = $2603 | $2605;
  $2608 = $2604 | $2606;
  $2609 = $2607 ^ $2601;
  $2610 = $2608 ^ $2602;
  $2611 = (_i64Add(($2559|0),($2560|0),($2541|0),($2542|0))|0);
  $2612 = (getTempRet0() | 0);
  $2613 = (_bitshift64Shl(($2559|0),($2560|0),43)|0);
  $2614 = (getTempRet0() | 0);
  $2615 = (_bitshift64Lshr(($2559|0),($2560|0),21)|0);
  $2616 = (getTempRet0() | 0);
  $2617 = $2613 | $2615;
  $2618 = $2614 | $2616;
  $2619 = $2617 ^ $2611;
  $2620 = $2618 ^ $2612;
  $2621 = (_i64Add(($2589|0),($2590|0),($2591|0),($2592|0))|0);
  $2622 = (getTempRet0() | 0);
  $2623 = (_bitshift64Shl(($2589|0),($2590|0),8)|0);
  $2624 = (getTempRet0() | 0);
  $2625 = (_bitshift64Lshr(($2589|0),($2590|0),56)|0);
  $2626 = (getTempRet0() | 0);
  $2627 = $2623 | $2625;
  $2628 = $2624 | $2626;
  $2629 = $2627 ^ $2621;
  $2630 = $2628 ^ $2622;
  $2631 = (_i64Add(($2619|0),($2620|0),($2601|0),($2602|0))|0);
  $2632 = (getTempRet0() | 0);
  $2633 = (_bitshift64Shl(($2619|0),($2620|0),35)|0);
  $2634 = (getTempRet0() | 0);
  $2635 = (_bitshift64Lshr(($2619|0),($2620|0),29)|0);
  $2636 = (getTempRet0() | 0);
  $2637 = $2633 | $2635;
  $2638 = $2634 | $2636;
  $2639 = $2637 ^ $2631;
  $2640 = $2638 ^ $2632;
  $2641 = (_i64Add(($2609|0),($2610|0),($2611|0),($2612|0))|0);
  $2642 = (getTempRet0() | 0);
  $2643 = (_bitshift64Shl(($2609|0),($2610|0),56)|0);
  $2644 = (getTempRet0() | 0);
  $2645 = (_bitshift64Lshr(($2609|0),($2610|0),8)|0);
  $2646 = (getTempRet0() | 0);
  $2647 = $2643 | $2645;
  $2648 = $2644 | $2646;
  $2649 = $2647 ^ $2641;
  $2650 = $2648 ^ $2642;
  $2651 = (_i64Add(($2581|0),($2582|0),($2599|0),($2600|0))|0);
  $2652 = (getTempRet0() | 0);
  $2653 = (_bitshift64Shl(($2599|0),($2600|0),22)|0);
  $2654 = (getTempRet0() | 0);
  $2655 = (_bitshift64Lshr(($2599|0),($2600|0),42)|0);
  $2656 = (getTempRet0() | 0);
  $2657 = $2653 | $2655;
  $2658 = $2654 | $2656;
  $2659 = $2657 ^ $2651;
  $2660 = $2658 ^ $2652;
  $2661 = (_i64Add(($2631|0),($2632|0),($90|0),($92|0))|0);
  $2662 = (getTempRet0() | 0);
  $2663 = (_i64Add(($2629|0),($2630|0),($94|0),($96|0))|0);
  $2664 = (getTempRet0() | 0);
  $2665 = (_i64Add(($2641|0),($2642|0),($98|0),($100|0))|0);
  $2666 = (getTempRet0() | 0);
  $2667 = (_i64Add(($2659|0),($2660|0),($97|0),($99|0))|0);
  $2668 = (getTempRet0() | 0);
  $2669 = (_i64Add(($2651|0),($2652|0),($70|0),($72|0))|0);
  $2670 = (getTempRet0() | 0);
  $2671 = (_i64Add(($2649|0),($2650|0),($885|0),($886|0))|0);
  $2672 = (getTempRet0() | 0);
  $2673 = (_i64Add(($2621|0),($2622|0),($1065|0),($1066|0))|0);
  $2674 = (getTempRet0() | 0);
  $2675 = (_i64Add(($82|0),($84|0),14,0)|0);
  $2676 = (getTempRet0() | 0);
  $2677 = (_i64Add(($2675|0),($2676|0),($2639|0),($2640|0))|0);
  $2678 = (getTempRet0() | 0);
  $2679 = (_i64Add(($2661|0),($2662|0),($2663|0),($2664|0))|0);
  $2680 = (getTempRet0() | 0);
  $2681 = (_bitshift64Shl(($2663|0),($2664|0),46)|0);
  $2682 = (getTempRet0() | 0);
  $2683 = (_bitshift64Lshr(($2663|0),($2664|0),18)|0);
  $2684 = (getTempRet0() | 0);
  $2685 = $2681 | $2683;
  $2686 = $2682 | $2684;
  $2687 = $2685 ^ $2679;
  $2688 = $2686 ^ $2680;
  $2689 = (_i64Add(($2665|0),($2666|0),($2667|0),($2668|0))|0);
  $2690 = (getTempRet0() | 0);
  $2691 = (_bitshift64Shl(($2667|0),($2668|0),36)|0);
  $2692 = (getTempRet0() | 0);
  $2693 = (_bitshift64Lshr(($2667|0),($2668|0),28)|0);
  $2694 = (getTempRet0() | 0);
  $2695 = $2691 | $2693;
  $2696 = $2692 | $2694;
  $2697 = $2695 ^ $2689;
  $2698 = $2696 ^ $2690;
  $2699 = (_i64Add(($2669|0),($2670|0),($2671|0),($2672|0))|0);
  $2700 = (getTempRet0() | 0);
  $2701 = (_bitshift64Shl(($2671|0),($2672|0),19)|0);
  $2702 = (getTempRet0() | 0);
  $2703 = (_bitshift64Lshr(($2671|0),($2672|0),45)|0);
  $2704 = (getTempRet0() | 0);
  $2705 = $2701 | $2703;
  $2706 = $2702 | $2704;
  $2707 = $2705 ^ $2699;
  $2708 = $2706 ^ $2700;
  $2709 = (_i64Add(($2673|0),($2674|0),($2677|0),($2678|0))|0);
  $2710 = (getTempRet0() | 0);
  $2711 = (_bitshift64Shl(($2677|0),($2678|0),37)|0);
  $2712 = (getTempRet0() | 0);
  $2713 = (_bitshift64Lshr(($2677|0),($2678|0),27)|0);
  $2714 = (getTempRet0() | 0);
  $2715 = $2711 | $2713;
  $2716 = $2712 | $2714;
  $2717 = $2715 ^ $2709;
  $2718 = $2716 ^ $2710;
  $2719 = (_i64Add(($2687|0),($2688|0),($2689|0),($2690|0))|0);
  $2720 = (getTempRet0() | 0);
  $2721 = (_bitshift64Shl(($2687|0),($2688|0),33)|0);
  $2722 = (getTempRet0() | 0);
  $2723 = (_bitshift64Lshr(($2687|0),($2688|0),31)|0);
  $2724 = (getTempRet0() | 0);
  $2725 = $2721 | $2723;
  $2726 = $2722 | $2724;
  $2727 = $2725 ^ $2719;
  $2728 = $2726 ^ $2720;
  $2729 = (_i64Add(($2717|0),($2718|0),($2699|0),($2700|0))|0);
  $2730 = (getTempRet0() | 0);
  $2731 = (_bitshift64Shl(($2717|0),($2718|0),27)|0);
  $2732 = (getTempRet0() | 0);
  $2733 = (_bitshift64Lshr(($2717|0),($2718|0),37)|0);
  $2734 = (getTempRet0() | 0);
  $2735 = $2731 | $2733;
  $2736 = $2732 | $2734;
  $2737 = $2735 ^ $2729;
  $2738 = $2736 ^ $2730;
  $2739 = (_i64Add(($2707|0),($2708|0),($2709|0),($2710|0))|0);
  $2740 = (getTempRet0() | 0);
  $2741 = (_bitshift64Shl(($2707|0),($2708|0),14)|0);
  $2742 = (getTempRet0() | 0);
  $2743 = (_bitshift64Lshr(($2707|0),($2708|0),50)|0);
  $2744 = (getTempRet0() | 0);
  $2745 = $2741 | $2743;
  $2746 = $2742 | $2744;
  $2747 = $2745 ^ $2739;
  $2748 = $2746 ^ $2740;
  $2749 = (_i64Add(($2679|0),($2680|0),($2697|0),($2698|0))|0);
  $2750 = (getTempRet0() | 0);
  $2751 = (_bitshift64Shl(($2697|0),($2698|0),42)|0);
  $2752 = (getTempRet0() | 0);
  $2753 = (_bitshift64Lshr(($2697|0),($2698|0),22)|0);
  $2754 = (getTempRet0() | 0);
  $2755 = $2751 | $2753;
  $2756 = $2752 | $2754;
  $2757 = $2755 ^ $2749;
  $2758 = $2756 ^ $2750;
  $2759 = (_i64Add(($2729|0),($2730|0),($2727|0),($2728|0))|0);
  $2760 = (getTempRet0() | 0);
  $2761 = (_bitshift64Shl(($2727|0),($2728|0),17)|0);
  $2762 = (getTempRet0() | 0);
  $2763 = (_bitshift64Lshr(($2727|0),($2728|0),47)|0);
  $2764 = (getTempRet0() | 0);
  $2765 = $2761 | $2763;
  $2766 = $2762 | $2764;
  $2767 = $2765 ^ $2759;
  $2768 = $2766 ^ $2760;
  $2769 = (_i64Add(($2739|0),($2740|0),($2757|0),($2758|0))|0);
  $2770 = (getTempRet0() | 0);
  $2771 = (_bitshift64Shl(($2757|0),($2758|0),49)|0);
  $2772 = (getTempRet0() | 0);
  $2773 = (_bitshift64Lshr(($2757|0),($2758|0),15)|0);
  $2774 = (getTempRet0() | 0);
  $2775 = $2771 | $2773;
  $2776 = $2772 | $2774;
  $2777 = $2775 ^ $2769;
  $2778 = $2776 ^ $2770;
  $2779 = (_i64Add(($2747|0),($2748|0),($2749|0),($2750|0))|0);
  $2780 = (getTempRet0() | 0);
  $2781 = (_bitshift64Shl(($2747|0),($2748|0),36)|0);
  $2782 = (getTempRet0() | 0);
  $2783 = (_bitshift64Lshr(($2747|0),($2748|0),28)|0);
  $2784 = (getTempRet0() | 0);
  $2785 = $2781 | $2783;
  $2786 = $2782 | $2784;
  $2787 = $2785 ^ $2779;
  $2788 = $2786 ^ $2780;
  $2789 = (_i64Add(($2737|0),($2738|0),($2719|0),($2720|0))|0);
  $2790 = (getTempRet0() | 0);
  $2791 = (_bitshift64Shl(($2737|0),($2738|0),39)|0);
  $2792 = (getTempRet0() | 0);
  $2793 = (_bitshift64Lshr(($2737|0),($2738|0),25)|0);
  $2794 = (getTempRet0() | 0);
  $2795 = $2791 | $2793;
  $2796 = $2792 | $2794;
  $2797 = $2795 ^ $2789;
  $2798 = $2796 ^ $2790;
  $2799 = (_i64Add(($2767|0),($2768|0),($2769|0),($2770|0))|0);
  $2800 = (getTempRet0() | 0);
  $2801 = (_bitshift64Shl(($2767|0),($2768|0),44)|0);
  $2802 = (getTempRet0() | 0);
  $2803 = (_bitshift64Lshr(($2767|0),($2768|0),20)|0);
  $2804 = (getTempRet0() | 0);
  $2805 = $2801 | $2803;
  $2806 = $2802 | $2804;
  $2807 = $2805 ^ $2799;
  $2808 = $2806 ^ $2800;
  $2809 = (_i64Add(($2797|0),($2798|0),($2779|0),($2780|0))|0);
  $2810 = (getTempRet0() | 0);
  $2811 = (_bitshift64Shl(($2797|0),($2798|0),9)|0);
  $2812 = (getTempRet0() | 0);
  $2813 = (_bitshift64Lshr(($2797|0),($2798|0),55)|0);
  $2814 = (getTempRet0() | 0);
  $2815 = $2811 | $2813;
  $2816 = $2812 | $2814;
  $2817 = $2815 ^ $2809;
  $2818 = $2816 ^ $2810;
  $2819 = (_i64Add(($2787|0),($2788|0),($2789|0),($2790|0))|0);
  $2820 = (getTempRet0() | 0);
  $2821 = (_bitshift64Shl(($2787|0),($2788|0),54)|0);
  $2822 = (getTempRet0() | 0);
  $2823 = (_bitshift64Lshr(($2787|0),($2788|0),10)|0);
  $2824 = (getTempRet0() | 0);
  $2825 = $2821 | $2823;
  $2826 = $2822 | $2824;
  $2827 = $2825 ^ $2819;
  $2828 = $2826 ^ $2820;
  $2829 = (_i64Add(($2759|0),($2760|0),($2777|0),($2778|0))|0);
  $2830 = (getTempRet0() | 0);
  $2831 = (_bitshift64Shl(($2777|0),($2778|0),56)|0);
  $2832 = (getTempRet0() | 0);
  $2833 = (_bitshift64Lshr(($2777|0),($2778|0),8)|0);
  $2834 = (getTempRet0() | 0);
  $2835 = $2831 | $2833;
  $2836 = $2832 | $2834;
  $2837 = $2835 ^ $2829;
  $2838 = $2836 ^ $2830;
  $2839 = (_i64Add(($2809|0),($2810|0),($94|0),($96|0))|0);
  $2840 = (getTempRet0() | 0);
  $2841 = (_i64Add(($2807|0),($2808|0),($98|0),($100|0))|0);
  $2842 = (getTempRet0() | 0);
  $2843 = (_i64Add(($2819|0),($2820|0),($97|0),($99|0))|0);
  $2844 = (getTempRet0() | 0);
  $2845 = (_i64Add(($2837|0),($2838|0),($70|0),($72|0))|0);
  $2846 = (getTempRet0() | 0);
  $2847 = (_i64Add(($2829|0),($2830|0),($74|0),($76|0))|0);
  $2848 = (getTempRet0() | 0);
  $2849 = (_i64Add(($2827|0),($2828|0),($1065|0),($1066|0))|0);
  $2850 = (getTempRet0() | 0);
  $2851 = (_i64Add(($2799|0),($2800|0),($1245|0),($1246|0))|0);
  $2852 = (getTempRet0() | 0);
  $2853 = (_i64Add(($86|0),($88|0),15,0)|0);
  $2854 = (getTempRet0() | 0);
  $2855 = (_i64Add(($2853|0),($2854|0),($2817|0),($2818|0))|0);
  $2856 = (getTempRet0() | 0);
  $2857 = (_i64Add(($2839|0),($2840|0),($2841|0),($2842|0))|0);
  $2858 = (getTempRet0() | 0);
  $2859 = (_bitshift64Shl(($2841|0),($2842|0),39)|0);
  $2860 = (getTempRet0() | 0);
  $2861 = (_bitshift64Lshr(($2841|0),($2842|0),25)|0);
  $2862 = (getTempRet0() | 0);
  $2863 = $2859 | $2861;
  $2864 = $2860 | $2862;
  $2865 = $2863 ^ $2857;
  $2866 = $2864 ^ $2858;
  $2867 = (_i64Add(($2843|0),($2844|0),($2845|0),($2846|0))|0);
  $2868 = (getTempRet0() | 0);
  $2869 = (_bitshift64Shl(($2845|0),($2846|0),30)|0);
  $2870 = (getTempRet0() | 0);
  $2871 = (_bitshift64Lshr(($2845|0),($2846|0),34)|0);
  $2872 = (getTempRet0() | 0);
  $2873 = $2869 | $2871;
  $2874 = $2870 | $2872;
  $2875 = $2873 ^ $2867;
  $2876 = $2874 ^ $2868;
  $2877 = (_i64Add(($2847|0),($2848|0),($2849|0),($2850|0))|0);
  $2878 = (getTempRet0() | 0);
  $2879 = (_bitshift64Shl(($2849|0),($2850|0),34)|0);
  $2880 = (getTempRet0() | 0);
  $2881 = (_bitshift64Lshr(($2849|0),($2850|0),30)|0);
  $2882 = (getTempRet0() | 0);
  $2883 = $2879 | $2881;
  $2884 = $2880 | $2882;
  $2885 = $2883 ^ $2877;
  $2886 = $2884 ^ $2878;
  $2887 = (_i64Add(($2851|0),($2852|0),($2855|0),($2856|0))|0);
  $2888 = (getTempRet0() | 0);
  $2889 = (_bitshift64Shl(($2855|0),($2856|0),24)|0);
  $2890 = (getTempRet0() | 0);
  $2891 = (_bitshift64Lshr(($2855|0),($2856|0),40)|0);
  $2892 = (getTempRet0() | 0);
  $2893 = $2889 | $2891;
  $2894 = $2890 | $2892;
  $2895 = $2893 ^ $2887;
  $2896 = $2894 ^ $2888;
  $2897 = (_i64Add(($2865|0),($2866|0),($2867|0),($2868|0))|0);
  $2898 = (getTempRet0() | 0);
  $2899 = (_bitshift64Shl(($2865|0),($2866|0),13)|0);
  $2900 = (getTempRet0() | 0);
  $2901 = (_bitshift64Lshr(($2865|0),($2866|0),51)|0);
  $2902 = (getTempRet0() | 0);
  $2903 = $2899 | $2901;
  $2904 = $2900 | $2902;
  $2905 = $2903 ^ $2897;
  $2906 = $2904 ^ $2898;
  $2907 = (_i64Add(($2895|0),($2896|0),($2877|0),($2878|0))|0);
  $2908 = (getTempRet0() | 0);
  $2909 = (_bitshift64Shl(($2895|0),($2896|0),50)|0);
  $2910 = (getTempRet0() | 0);
  $2911 = (_bitshift64Lshr(($2895|0),($2896|0),14)|0);
  $2912 = (getTempRet0() | 0);
  $2913 = $2909 | $2911;
  $2914 = $2910 | $2912;
  $2915 = $2913 ^ $2907;
  $2916 = $2914 ^ $2908;
  $2917 = (_i64Add(($2885|0),($2886|0),($2887|0),($2888|0))|0);
  $2918 = (getTempRet0() | 0);
  $2919 = (_bitshift64Shl(($2885|0),($2886|0),10)|0);
  $2920 = (getTempRet0() | 0);
  $2921 = (_bitshift64Lshr(($2885|0),($2886|0),54)|0);
  $2922 = (getTempRet0() | 0);
  $2923 = $2919 | $2921;
  $2924 = $2920 | $2922;
  $2925 = $2923 ^ $2917;
  $2926 = $2924 ^ $2918;
  $2927 = (_i64Add(($2857|0),($2858|0),($2875|0),($2876|0))|0);
  $2928 = (getTempRet0() | 0);
  $2929 = (_bitshift64Shl(($2875|0),($2876|0),17)|0);
  $2930 = (getTempRet0() | 0);
  $2931 = (_bitshift64Lshr(($2875|0),($2876|0),47)|0);
  $2932 = (getTempRet0() | 0);
  $2933 = $2929 | $2931;
  $2934 = $2930 | $2932;
  $2935 = $2933 ^ $2927;
  $2936 = $2934 ^ $2928;
  $2937 = (_i64Add(($2907|0),($2908|0),($2905|0),($2906|0))|0);
  $2938 = (getTempRet0() | 0);
  $2939 = (_bitshift64Shl(($2905|0),($2906|0),25)|0);
  $2940 = (getTempRet0() | 0);
  $2941 = (_bitshift64Lshr(($2905|0),($2906|0),39)|0);
  $2942 = (getTempRet0() | 0);
  $2943 = $2939 | $2941;
  $2944 = $2940 | $2942;
  $2945 = $2943 ^ $2937;
  $2946 = $2944 ^ $2938;
  $2947 = (_i64Add(($2917|0),($2918|0),($2935|0),($2936|0))|0);
  $2948 = (getTempRet0() | 0);
  $2949 = (_bitshift64Shl(($2935|0),($2936|0),29)|0);
  $2950 = (getTempRet0() | 0);
  $2951 = (_bitshift64Lshr(($2935|0),($2936|0),35)|0);
  $2952 = (getTempRet0() | 0);
  $2953 = $2949 | $2951;
  $2954 = $2950 | $2952;
  $2955 = $2953 ^ $2947;
  $2956 = $2954 ^ $2948;
  $2957 = (_i64Add(($2925|0),($2926|0),($2927|0),($2928|0))|0);
  $2958 = (getTempRet0() | 0);
  $2959 = (_bitshift64Shl(($2925|0),($2926|0),39)|0);
  $2960 = (getTempRet0() | 0);
  $2961 = (_bitshift64Lshr(($2925|0),($2926|0),25)|0);
  $2962 = (getTempRet0() | 0);
  $2963 = $2959 | $2961;
  $2964 = $2960 | $2962;
  $2965 = $2963 ^ $2957;
  $2966 = $2964 ^ $2958;
  $2967 = (_i64Add(($2915|0),($2916|0),($2897|0),($2898|0))|0);
  $2968 = (getTempRet0() | 0);
  $2969 = (_bitshift64Shl(($2915|0),($2916|0),43)|0);
  $2970 = (getTempRet0() | 0);
  $2971 = (_bitshift64Lshr(($2915|0),($2916|0),21)|0);
  $2972 = (getTempRet0() | 0);
  $2973 = $2969 | $2971;
  $2974 = $2970 | $2972;
  $2975 = $2973 ^ $2967;
  $2976 = $2974 ^ $2968;
  $2977 = (_i64Add(($2945|0),($2946|0),($2947|0),($2948|0))|0);
  $2978 = (getTempRet0() | 0);
  $2979 = (_bitshift64Shl(($2945|0),($2946|0),8)|0);
  $2980 = (getTempRet0() | 0);
  $2981 = (_bitshift64Lshr(($2945|0),($2946|0),56)|0);
  $2982 = (getTempRet0() | 0);
  $2983 = $2979 | $2981;
  $2984 = $2980 | $2982;
  $2985 = $2983 ^ $2977;
  $2986 = $2984 ^ $2978;
  $2987 = (_i64Add(($2975|0),($2976|0),($2957|0),($2958|0))|0);
  $2988 = (getTempRet0() | 0);
  $2989 = (_bitshift64Shl(($2975|0),($2976|0),35)|0);
  $2990 = (getTempRet0() | 0);
  $2991 = (_bitshift64Lshr(($2975|0),($2976|0),29)|0);
  $2992 = (getTempRet0() | 0);
  $2993 = $2989 | $2991;
  $2994 = $2990 | $2992;
  $2995 = $2993 ^ $2987;
  $2996 = $2994 ^ $2988;
  $2997 = (_i64Add(($2965|0),($2966|0),($2967|0),($2968|0))|0);
  $2998 = (getTempRet0() | 0);
  $2999 = (_bitshift64Shl(($2965|0),($2966|0),56)|0);
  $3000 = (getTempRet0() | 0);
  $3001 = (_bitshift64Lshr(($2965|0),($2966|0),8)|0);
  $3002 = (getTempRet0() | 0);
  $3003 = $2999 | $3001;
  $3004 = $3000 | $3002;
  $3005 = $3003 ^ $2997;
  $3006 = $3004 ^ $2998;
  $3007 = (_i64Add(($2937|0),($2938|0),($2955|0),($2956|0))|0);
  $3008 = (getTempRet0() | 0);
  $3009 = (_bitshift64Shl(($2955|0),($2956|0),22)|0);
  $3010 = (getTempRet0() | 0);
  $3011 = (_bitshift64Lshr(($2955|0),($2956|0),42)|0);
  $3012 = (getTempRet0() | 0);
  $3013 = $3009 | $3011;
  $3014 = $3010 | $3012;
  $3015 = $3013 ^ $3007;
  $3016 = $3014 ^ $3008;
  $3017 = (_i64Add(($2987|0),($2988|0),($98|0),($100|0))|0);
  $3018 = (getTempRet0() | 0);
  $3019 = (_i64Add(($2985|0),($2986|0),($97|0),($99|0))|0);
  $3020 = (getTempRet0() | 0);
  $3021 = (_i64Add(($2997|0),($2998|0),($70|0),($72|0))|0);
  $3022 = (getTempRet0() | 0);
  $3023 = (_i64Add(($3015|0),($3016|0),($74|0),($76|0))|0);
  $3024 = (getTempRet0() | 0);
  $3025 = (_i64Add(($3007|0),($3008|0),($78|0),($80|0))|0);
  $3026 = (getTempRet0() | 0);
  $3027 = (_i64Add(($3005|0),($3006|0),($1245|0),($1246|0))|0);
  $3028 = (getTempRet0() | 0);
  $3029 = (_i64Add(($2977|0),($2978|0),($1425|0),($1426|0))|0);
  $3030 = (getTempRet0() | 0);
  $3031 = (_i64Add(($90|0),($92|0),16,0)|0);
  $3032 = (getTempRet0() | 0);
  $3033 = (_i64Add(($3031|0),($3032|0),($2995|0),($2996|0))|0);
  $3034 = (getTempRet0() | 0);
  $3035 = (_i64Add(($3017|0),($3018|0),($3019|0),($3020|0))|0);
  $3036 = (getTempRet0() | 0);
  $3037 = (_bitshift64Shl(($3019|0),($3020|0),46)|0);
  $3038 = (getTempRet0() | 0);
  $3039 = (_bitshift64Lshr(($3019|0),($3020|0),18)|0);
  $3040 = (getTempRet0() | 0);
  $3041 = $3037 | $3039;
  $3042 = $3038 | $3040;
  $3043 = $3041 ^ $3035;
  $3044 = $3042 ^ $3036;
  $3045 = (_i64Add(($3021|0),($3022|0),($3023|0),($3024|0))|0);
  $3046 = (getTempRet0() | 0);
  $3047 = (_bitshift64Shl(($3023|0),($3024|0),36)|0);
  $3048 = (getTempRet0() | 0);
  $3049 = (_bitshift64Lshr(($3023|0),($3024|0),28)|0);
  $3050 = (getTempRet0() | 0);
  $3051 = $3047 | $3049;
  $3052 = $3048 | $3050;
  $3053 = $3051 ^ $3045;
  $3054 = $3052 ^ $3046;
  $3055 = (_i64Add(($3025|0),($3026|0),($3027|0),($3028|0))|0);
  $3056 = (getTempRet0() | 0);
  $3057 = (_bitshift64Shl(($3027|0),($3028|0),19)|0);
  $3058 = (getTempRet0() | 0);
  $3059 = (_bitshift64Lshr(($3027|0),($3028|0),45)|0);
  $3060 = (getTempRet0() | 0);
  $3061 = $3057 | $3059;
  $3062 = $3058 | $3060;
  $3063 = $3061 ^ $3055;
  $3064 = $3062 ^ $3056;
  $3065 = (_i64Add(($3029|0),($3030|0),($3033|0),($3034|0))|0);
  $3066 = (getTempRet0() | 0);
  $3067 = (_bitshift64Shl(($3033|0),($3034|0),37)|0);
  $3068 = (getTempRet0() | 0);
  $3069 = (_bitshift64Lshr(($3033|0),($3034|0),27)|0);
  $3070 = (getTempRet0() | 0);
  $3071 = $3067 | $3069;
  $3072 = $3068 | $3070;
  $3073 = $3071 ^ $3065;
  $3074 = $3072 ^ $3066;
  $3075 = (_i64Add(($3043|0),($3044|0),($3045|0),($3046|0))|0);
  $3076 = (getTempRet0() | 0);
  $3077 = (_bitshift64Shl(($3043|0),($3044|0),33)|0);
  $3078 = (getTempRet0() | 0);
  $3079 = (_bitshift64Lshr(($3043|0),($3044|0),31)|0);
  $3080 = (getTempRet0() | 0);
  $3081 = $3077 | $3079;
  $3082 = $3078 | $3080;
  $3083 = $3081 ^ $3075;
  $3084 = $3082 ^ $3076;
  $3085 = (_i64Add(($3073|0),($3074|0),($3055|0),($3056|0))|0);
  $3086 = (getTempRet0() | 0);
  $3087 = (_bitshift64Shl(($3073|0),($3074|0),27)|0);
  $3088 = (getTempRet0() | 0);
  $3089 = (_bitshift64Lshr(($3073|0),($3074|0),37)|0);
  $3090 = (getTempRet0() | 0);
  $3091 = $3087 | $3089;
  $3092 = $3088 | $3090;
  $3093 = $3091 ^ $3085;
  $3094 = $3092 ^ $3086;
  $3095 = (_i64Add(($3063|0),($3064|0),($3065|0),($3066|0))|0);
  $3096 = (getTempRet0() | 0);
  $3097 = (_bitshift64Shl(($3063|0),($3064|0),14)|0);
  $3098 = (getTempRet0() | 0);
  $3099 = (_bitshift64Lshr(($3063|0),($3064|0),50)|0);
  $3100 = (getTempRet0() | 0);
  $3101 = $3097 | $3099;
  $3102 = $3098 | $3100;
  $3103 = $3101 ^ $3095;
  $3104 = $3102 ^ $3096;
  $3105 = (_i64Add(($3035|0),($3036|0),($3053|0),($3054|0))|0);
  $3106 = (getTempRet0() | 0);
  $3107 = (_bitshift64Shl(($3053|0),($3054|0),42)|0);
  $3108 = (getTempRet0() | 0);
  $3109 = (_bitshift64Lshr(($3053|0),($3054|0),22)|0);
  $3110 = (getTempRet0() | 0);
  $3111 = $3107 | $3109;
  $3112 = $3108 | $3110;
  $3113 = $3111 ^ $3105;
  $3114 = $3112 ^ $3106;
  $3115 = (_i64Add(($3085|0),($3086|0),($3083|0),($3084|0))|0);
  $3116 = (getTempRet0() | 0);
  $3117 = (_bitshift64Shl(($3083|0),($3084|0),17)|0);
  $3118 = (getTempRet0() | 0);
  $3119 = (_bitshift64Lshr(($3083|0),($3084|0),47)|0);
  $3120 = (getTempRet0() | 0);
  $3121 = $3117 | $3119;
  $3122 = $3118 | $3120;
  $3123 = $3121 ^ $3115;
  $3124 = $3122 ^ $3116;
  $3125 = (_i64Add(($3095|0),($3096|0),($3113|0),($3114|0))|0);
  $3126 = (getTempRet0() | 0);
  $3127 = (_bitshift64Shl(($3113|0),($3114|0),49)|0);
  $3128 = (getTempRet0() | 0);
  $3129 = (_bitshift64Lshr(($3113|0),($3114|0),15)|0);
  $3130 = (getTempRet0() | 0);
  $3131 = $3127 | $3129;
  $3132 = $3128 | $3130;
  $3133 = $3131 ^ $3125;
  $3134 = $3132 ^ $3126;
  $3135 = (_i64Add(($3103|0),($3104|0),($3105|0),($3106|0))|0);
  $3136 = (getTempRet0() | 0);
  $3137 = (_bitshift64Shl(($3103|0),($3104|0),36)|0);
  $3138 = (getTempRet0() | 0);
  $3139 = (_bitshift64Lshr(($3103|0),($3104|0),28)|0);
  $3140 = (getTempRet0() | 0);
  $3141 = $3137 | $3139;
  $3142 = $3138 | $3140;
  $3143 = $3141 ^ $3135;
  $3144 = $3142 ^ $3136;
  $3145 = (_i64Add(($3093|0),($3094|0),($3075|0),($3076|0))|0);
  $3146 = (getTempRet0() | 0);
  $3147 = (_bitshift64Shl(($3093|0),($3094|0),39)|0);
  $3148 = (getTempRet0() | 0);
  $3149 = (_bitshift64Lshr(($3093|0),($3094|0),25)|0);
  $3150 = (getTempRet0() | 0);
  $3151 = $3147 | $3149;
  $3152 = $3148 | $3150;
  $3153 = $3151 ^ $3145;
  $3154 = $3152 ^ $3146;
  $3155 = (_i64Add(($3123|0),($3124|0),($3125|0),($3126|0))|0);
  $3156 = (getTempRet0() | 0);
  $3157 = (_bitshift64Shl(($3123|0),($3124|0),44)|0);
  $3158 = (getTempRet0() | 0);
  $3159 = (_bitshift64Lshr(($3123|0),($3124|0),20)|0);
  $3160 = (getTempRet0() | 0);
  $3161 = $3157 | $3159;
  $3162 = $3158 | $3160;
  $3163 = $3161 ^ $3155;
  $3164 = $3162 ^ $3156;
  $3165 = (_i64Add(($3153|0),($3154|0),($3135|0),($3136|0))|0);
  $3166 = (getTempRet0() | 0);
  $3167 = (_bitshift64Shl(($3153|0),($3154|0),9)|0);
  $3168 = (getTempRet0() | 0);
  $3169 = (_bitshift64Lshr(($3153|0),($3154|0),55)|0);
  $3170 = (getTempRet0() | 0);
  $3171 = $3167 | $3169;
  $3172 = $3168 | $3170;
  $3173 = $3171 ^ $3165;
  $3174 = $3172 ^ $3166;
  $3175 = (_i64Add(($3143|0),($3144|0),($3145|0),($3146|0))|0);
  $3176 = (getTempRet0() | 0);
  $3177 = (_bitshift64Shl(($3143|0),($3144|0),54)|0);
  $3178 = (getTempRet0() | 0);
  $3179 = (_bitshift64Lshr(($3143|0),($3144|0),10)|0);
  $3180 = (getTempRet0() | 0);
  $3181 = $3177 | $3179;
  $3182 = $3178 | $3180;
  $3183 = $3181 ^ $3175;
  $3184 = $3182 ^ $3176;
  $3185 = (_i64Add(($3115|0),($3116|0),($3133|0),($3134|0))|0);
  $3186 = (getTempRet0() | 0);
  $3187 = (_bitshift64Shl(($3133|0),($3134|0),56)|0);
  $3188 = (getTempRet0() | 0);
  $3189 = (_bitshift64Lshr(($3133|0),($3134|0),8)|0);
  $3190 = (getTempRet0() | 0);
  $3191 = $3187 | $3189;
  $3192 = $3188 | $3190;
  $3193 = $3191 ^ $3185;
  $3194 = $3192 ^ $3186;
  $3195 = (_i64Add(($3165|0),($3166|0),($97|0),($99|0))|0);
  $3196 = (getTempRet0() | 0);
  $3197 = (_i64Add(($3163|0),($3164|0),($70|0),($72|0))|0);
  $3198 = (getTempRet0() | 0);
  $3199 = (_i64Add(($3175|0),($3176|0),($74|0),($76|0))|0);
  $3200 = (getTempRet0() | 0);
  $3201 = (_i64Add(($3193|0),($3194|0),($78|0),($80|0))|0);
  $3202 = (getTempRet0() | 0);
  $3203 = (_i64Add(($3185|0),($3186|0),($82|0),($84|0))|0);
  $3204 = (getTempRet0() | 0);
  $3205 = (_i64Add(($3183|0),($3184|0),($1425|0),($1426|0))|0);
  $3206 = (getTempRet0() | 0);
  $3207 = (_i64Add(($3155|0),($3156|0),($163|0),($164|0))|0);
  $3208 = (getTempRet0() | 0);
  $3209 = (_i64Add(($94|0),($96|0),17,0)|0);
  $3210 = (getTempRet0() | 0);
  $3211 = (_i64Add(($3209|0),($3210|0),($3173|0),($3174|0))|0);
  $3212 = (getTempRet0() | 0);
  $3213 = (_i64Add(($3195|0),($3196|0),($3197|0),($3198|0))|0);
  $3214 = (getTempRet0() | 0);
  $3215 = (_bitshift64Shl(($3197|0),($3198|0),39)|0);
  $3216 = (getTempRet0() | 0);
  $3217 = (_bitshift64Lshr(($3197|0),($3198|0),25)|0);
  $3218 = (getTempRet0() | 0);
  $3219 = $3215 | $3217;
  $3220 = $3216 | $3218;
  $3221 = $3219 ^ $3213;
  $3222 = $3220 ^ $3214;
  $3223 = (_i64Add(($3199|0),($3200|0),($3201|0),($3202|0))|0);
  $3224 = (getTempRet0() | 0);
  $3225 = (_bitshift64Shl(($3201|0),($3202|0),30)|0);
  $3226 = (getTempRet0() | 0);
  $3227 = (_bitshift64Lshr(($3201|0),($3202|0),34)|0);
  $3228 = (getTempRet0() | 0);
  $3229 = $3225 | $3227;
  $3230 = $3226 | $3228;
  $3231 = $3229 ^ $3223;
  $3232 = $3230 ^ $3224;
  $3233 = (_i64Add(($3203|0),($3204|0),($3205|0),($3206|0))|0);
  $3234 = (getTempRet0() | 0);
  $3235 = (_bitshift64Shl(($3205|0),($3206|0),34)|0);
  $3236 = (getTempRet0() | 0);
  $3237 = (_bitshift64Lshr(($3205|0),($3206|0),30)|0);
  $3238 = (getTempRet0() | 0);
  $3239 = $3235 | $3237;
  $3240 = $3236 | $3238;
  $3241 = $3239 ^ $3233;
  $3242 = $3240 ^ $3234;
  $3243 = (_i64Add(($3207|0),($3208|0),($3211|0),($3212|0))|0);
  $3244 = (getTempRet0() | 0);
  $3245 = (_bitshift64Shl(($3211|0),($3212|0),24)|0);
  $3246 = (getTempRet0() | 0);
  $3247 = (_bitshift64Lshr(($3211|0),($3212|0),40)|0);
  $3248 = (getTempRet0() | 0);
  $3249 = $3245 | $3247;
  $3250 = $3246 | $3248;
  $3251 = $3249 ^ $3243;
  $3252 = $3250 ^ $3244;
  $3253 = (_i64Add(($3221|0),($3222|0),($3223|0),($3224|0))|0);
  $3254 = (getTempRet0() | 0);
  $3255 = (_bitshift64Shl(($3221|0),($3222|0),13)|0);
  $3256 = (getTempRet0() | 0);
  $3257 = (_bitshift64Lshr(($3221|0),($3222|0),51)|0);
  $3258 = (getTempRet0() | 0);
  $3259 = $3255 | $3257;
  $3260 = $3256 | $3258;
  $3261 = $3259 ^ $3253;
  $3262 = $3260 ^ $3254;
  $3263 = (_i64Add(($3251|0),($3252|0),($3233|0),($3234|0))|0);
  $3264 = (getTempRet0() | 0);
  $3265 = (_bitshift64Shl(($3251|0),($3252|0),50)|0);
  $3266 = (getTempRet0() | 0);
  $3267 = (_bitshift64Lshr(($3251|0),($3252|0),14)|0);
  $3268 = (getTempRet0() | 0);
  $3269 = $3265 | $3267;
  $3270 = $3266 | $3268;
  $3271 = $3269 ^ $3263;
  $3272 = $3270 ^ $3264;
  $3273 = (_i64Add(($3241|0),($3242|0),($3243|0),($3244|0))|0);
  $3274 = (getTempRet0() | 0);
  $3275 = (_bitshift64Shl(($3241|0),($3242|0),10)|0);
  $3276 = (getTempRet0() | 0);
  $3277 = (_bitshift64Lshr(($3241|0),($3242|0),54)|0);
  $3278 = (getTempRet0() | 0);
  $3279 = $3275 | $3277;
  $3280 = $3276 | $3278;
  $3281 = $3279 ^ $3273;
  $3282 = $3280 ^ $3274;
  $3283 = (_i64Add(($3213|0),($3214|0),($3231|0),($3232|0))|0);
  $3284 = (getTempRet0() | 0);
  $3285 = (_bitshift64Shl(($3231|0),($3232|0),17)|0);
  $3286 = (getTempRet0() | 0);
  $3287 = (_bitshift64Lshr(($3231|0),($3232|0),47)|0);
  $3288 = (getTempRet0() | 0);
  $3289 = $3285 | $3287;
  $3290 = $3286 | $3288;
  $3291 = $3289 ^ $3283;
  $3292 = $3290 ^ $3284;
  $3293 = (_i64Add(($3263|0),($3264|0),($3261|0),($3262|0))|0);
  $3294 = (getTempRet0() | 0);
  $3295 = (_bitshift64Shl(($3261|0),($3262|0),25)|0);
  $3296 = (getTempRet0() | 0);
  $3297 = (_bitshift64Lshr(($3261|0),($3262|0),39)|0);
  $3298 = (getTempRet0() | 0);
  $3299 = $3295 | $3297;
  $3300 = $3296 | $3298;
  $3301 = $3299 ^ $3293;
  $3302 = $3300 ^ $3294;
  $3303 = (_i64Add(($3273|0),($3274|0),($3291|0),($3292|0))|0);
  $3304 = (getTempRet0() | 0);
  $3305 = (_bitshift64Shl(($3291|0),($3292|0),29)|0);
  $3306 = (getTempRet0() | 0);
  $3307 = (_bitshift64Lshr(($3291|0),($3292|0),35)|0);
  $3308 = (getTempRet0() | 0);
  $3309 = $3305 | $3307;
  $3310 = $3306 | $3308;
  $3311 = $3309 ^ $3303;
  $3312 = $3310 ^ $3304;
  $3313 = (_i64Add(($3281|0),($3282|0),($3283|0),($3284|0))|0);
  $3314 = (getTempRet0() | 0);
  $3315 = (_bitshift64Shl(($3281|0),($3282|0),39)|0);
  $3316 = (getTempRet0() | 0);
  $3317 = (_bitshift64Lshr(($3281|0),($3282|0),25)|0);
  $3318 = (getTempRet0() | 0);
  $3319 = $3315 | $3317;
  $3320 = $3316 | $3318;
  $3321 = $3319 ^ $3313;
  $3322 = $3320 ^ $3314;
  $3323 = (_i64Add(($3271|0),($3272|0),($3253|0),($3254|0))|0);
  $3324 = (getTempRet0() | 0);
  $3325 = (_bitshift64Shl(($3271|0),($3272|0),43)|0);
  $3326 = (getTempRet0() | 0);
  $3327 = (_bitshift64Lshr(($3271|0),($3272|0),21)|0);
  $3328 = (getTempRet0() | 0);
  $3329 = $3325 | $3327;
  $3330 = $3326 | $3328;
  $3331 = $3329 ^ $3323;
  $3332 = $3330 ^ $3324;
  $3333 = (_i64Add(($3301|0),($3302|0),($3303|0),($3304|0))|0);
  $3334 = (getTempRet0() | 0);
  $3335 = (_bitshift64Shl(($3301|0),($3302|0),8)|0);
  $3336 = (getTempRet0() | 0);
  $3337 = (_bitshift64Lshr(($3301|0),($3302|0),56)|0);
  $3338 = (getTempRet0() | 0);
  $3339 = $3335 | $3337;
  $3340 = $3336 | $3338;
  $3341 = $3339 ^ $3333;
  $3342 = $3340 ^ $3334;
  $3343 = (_i64Add(($3331|0),($3332|0),($3313|0),($3314|0))|0);
  $3344 = (getTempRet0() | 0);
  $3345 = (_bitshift64Shl(($3331|0),($3332|0),35)|0);
  $3346 = (getTempRet0() | 0);
  $3347 = (_bitshift64Lshr(($3331|0),($3332|0),29)|0);
  $3348 = (getTempRet0() | 0);
  $3349 = $3345 | $3347;
  $3350 = $3346 | $3348;
  $3351 = $3349 ^ $3343;
  $3352 = $3350 ^ $3344;
  $3353 = (_i64Add(($3321|0),($3322|0),($3323|0),($3324|0))|0);
  $3354 = (getTempRet0() | 0);
  $3355 = (_bitshift64Shl(($3321|0),($3322|0),56)|0);
  $3356 = (getTempRet0() | 0);
  $3357 = (_bitshift64Lshr(($3321|0),($3322|0),8)|0);
  $3358 = (getTempRet0() | 0);
  $3359 = $3355 | $3357;
  $3360 = $3356 | $3358;
  $3361 = $3359 ^ $3353;
  $3362 = $3360 ^ $3354;
  $3363 = (_i64Add(($3293|0),($3294|0),($3311|0),($3312|0))|0);
  $3364 = (getTempRet0() | 0);
  $3365 = (_bitshift64Shl(($3311|0),($3312|0),22)|0);
  $3366 = (getTempRet0() | 0);
  $3367 = (_bitshift64Lshr(($3311|0),($3312|0),42)|0);
  $3368 = (getTempRet0() | 0);
  $3369 = $3365 | $3367;
  $3370 = $3366 | $3368;
  $3371 = $3369 ^ $3363;
  $3372 = $3370 ^ $3364;
  $3373 = (_i64Add(($3343|0),($3344|0),($70|0),($72|0))|0);
  $3374 = (getTempRet0() | 0);
  $3375 = (_i64Add(($3341|0),($3342|0),($74|0),($76|0))|0);
  $3376 = (getTempRet0() | 0);
  $3377 = (_i64Add(($3353|0),($3354|0),($78|0),($80|0))|0);
  $3378 = (getTempRet0() | 0);
  $3379 = (_i64Add(($3371|0),($3372|0),($82|0),($84|0))|0);
  $3380 = (getTempRet0() | 0);
  $3381 = (_i64Add(($3363|0),($3364|0),($86|0),($88|0))|0);
  $3382 = (getTempRet0() | 0);
  $3383 = (_i64Add(($3361|0),($3362|0),($163|0),($164|0))|0);
  $3384 = (getTempRet0() | 0);
  $3385 = (_i64Add(($3333|0),($3334|0),($199|0),($200|0))|0);
  $3386 = (getTempRet0() | 0);
  $3387 = (_i64Add(($98|0),($100|0),18,0)|0);
  $3388 = (getTempRet0() | 0);
  $3389 = (_i64Add(($3387|0),($3388|0),($3351|0),($3352|0))|0);
  $3390 = (getTempRet0() | 0);
  $3391 = $3373 ^ $107;
  $3392 = $3374 ^ $110;
  $3393 = $arrayidx11;
  $3394 = $3393;
  HEAP32[$3394>>2] = $3391;
  $3395 = (($3393) + 4)|0;
  $3396 = $3395;
  HEAP32[$3396>>2] = $3392;
  $3397 = $3375 ^ $113;
  $3398 = $3376 ^ $116;
  $3399 = $arrayidx16;
  $3400 = $3399;
  HEAP32[$3400>>2] = $3397;
  $3401 = (($3399) + 4)|0;
  $3402 = $3401;
  HEAP32[$3402>>2] = $3398;
  $3403 = $3377 ^ $119;
  $3404 = $3378 ^ $122;
  $3405 = $arrayidx21;
  $3406 = $3405;
  HEAP32[$3406>>2] = $3403;
  $3407 = (($3405) + 4)|0;
  $3408 = $3407;
  HEAP32[$3408>>2] = $3404;
  $3409 = $3379 ^ $125;
  $3410 = $3380 ^ $128;
  $3411 = $arrayidx26;
  $3412 = $3411;
  HEAP32[$3412>>2] = $3409;
  $3413 = (($3411) + 4)|0;
  $3414 = $3413;
  HEAP32[$3414>>2] = $3410;
  $3415 = $3381 ^ $131;
  $3416 = $3382 ^ $134;
  $3417 = $arrayidx31;
  $3418 = $3417;
  HEAP32[$3418>>2] = $3415;
  $3419 = (($3417) + 4)|0;
  $3420 = $3419;
  HEAP32[$3420>>2] = $3416;
  $3421 = $3383 ^ $137;
  $3422 = $3384 ^ $140;
  $3423 = $arrayidx36;
  $3424 = $3423;
  HEAP32[$3424>>2] = $3421;
  $3425 = (($3423) + 4)|0;
  $3426 = $3425;
  HEAP32[$3426>>2] = $3422;
  $3427 = $3385 ^ $143;
  $3428 = $3386 ^ $146;
  $3429 = $arrayidx41;
  $3430 = $3429;
  HEAP32[$3430>>2] = $3427;
  $3431 = (($3429) + 4)|0;
  $3432 = $3431;
  HEAP32[$3432>>2] = $3428;
  $3433 = $3389 ^ $149;
  $3434 = $3390 ^ $152;
  $3435 = $arrayidx46;
  $3436 = $3435;
  HEAP32[$3436>>2] = $3433;
  $3437 = (($3435) + 4)|0;
  $3438 = $3437;
  HEAP32[$3438>>2] = $3434;
  $3439 = $104 & -1073741825;
  $dec = (($blkCnt$addr$0) + -1)|0;
  $tobool = ($dec|0)==(0);
  if ($tobool) {
   break;
  } else {
   $102$phi = $102;$100 = $3434;$104 = $3439;$65 = $67;$66 = $68;$70 = $3391;$72 = $3392;$74 = $3397;$76 = $3398;$78 = $3403;$80 = $3404;$82 = $3409;$84 = $3410;$86 = $3415;$88 = $3416;$90 = $3421;$92 = $3422;$94 = $3427;$96 = $3428;$98 = $3433;$blkCnt$addr$0 = $dec;$blkPtr$addr$0 = $add$ptr143;$102 = $102$phi;
  }
 }
 $3440 = (_i64Add(($2|0),($5|0),($15|0),($16|0))|0);
 $3441 = (getTempRet0() | 0);
 $3442 = $arrayidx;
 $3443 = $3442;
 HEAP32[$3443>>2] = $3440;
 $3444 = (($3442) + 4)|0;
 $3445 = $3444;
 HEAP32[$3445>>2] = $3441;
 $3446 = $arrayidx4;
 $3447 = $3446;
 HEAP32[$3447>>2] = $102;
 $3448 = (($3446) + 4)|0;
 $3449 = $3448;
 HEAP32[$3449>>2] = $3439;
 return;
}
function _Skein1024_Process_Block($ctx,$blkPtr,$blkCnt,$byteCntAdd) {
 $ctx = $ctx|0;
 $blkPtr = $blkPtr|0;
 $blkCnt = $blkCnt|0;
 $byteCntAdd = $byteCntAdd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $add$ptr13 = 0, $add$ptr903 = 0, $add423 = 0, $add429 = 0, $add435 = 0, $add441 = 0, $add447 = 0, $add453 = 0, $add459 = 0, $add465 = 0, $add471 = 0, $add477 = 0, $add483 = 0;
 var $add489 = 0, $add495 = 0, $add507 = 0, $add519 = 0, $add532 = 0, $add823 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx156 = 0, $arrayidx166 = 0, $arrayidx17 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx25 = 0, $arrayidx27 = 0, $arrayidx30 = 0, $arrayidx32 = 0, $arrayidx35 = 0, $arrayidx37 = 0, $arrayidx4 = 0;
 var $arrayidx40 = 0, $arrayidx418 = 0, $arrayidx42 = 0, $arrayidx424 = 0, $arrayidx430 = 0, $arrayidx436 = 0, $arrayidx442 = 0, $arrayidx448 = 0, $arrayidx45 = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx466 = 0, $arrayidx47 = 0, $arrayidx472 = 0, $arrayidx478 = 0, $arrayidx484 = 0, $arrayidx490 = 0, $arrayidx496 = 0, $arrayidx50 = 0, $arrayidx501 = 0;
 var $arrayidx508 = 0, $arrayidx513 = 0, $arrayidx52 = 0, $arrayidx520 = 0, $arrayidx528 = 0, $arrayidx533 = 0, $arrayidx538 = 0, $arrayidx543 = 0, $arrayidx55 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx67 = 0, $arrayidx7 = 0, $arrayidx70 = 0, $arrayidx72 = 0, $arrayidx75 = 0, $arrayidx77 = 0, $arrayidx80 = 0;
 var $arrayidx82 = 0, $arrayidx824 = 0, $arrayidx834 = 0, $arrayidx85 = 0, $arrayidx87 = 0, $arrayidx90 = 0, $blkCnt$addr$0 = 0, $blkPtr$addr$0 = 0, $cmp = 0, $dec = 0, $kw = 0, $r$0581 = 0, $sub = 0, $tobool = 0, $w$sroa$11$0$$sroa_idx = 0, $w$sroa$13$0$$sroa_idx = 0, $w$sroa$15$0$$sroa_idx = 0, $w$sroa$17$0$$sroa_idx = 0, $w$sroa$19$0$$sroa_idx = 0, $w$sroa$21$0$$sroa_idx = 0;
 var $w$sroa$23$0$$sroa_idx = 0, $w$sroa$25$0$$sroa_idx = 0, $w$sroa$27$0$$sroa_idx = 0, $w$sroa$29$0$$sroa_idx = 0, $w$sroa$31$0$$sroa_idx = 0, $w$sroa$33$0$$sroa_idx = 0, $w$sroa$5$0$$sroa_idx = 0, $w$sroa$7$0$$sroa_idx = 0, $w$sroa$9$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $kw = sp;
 $arrayidx = ((($ctx)) + 8|0);
 $0 = $arrayidx;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $kw;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $arrayidx4 = ((($ctx)) + 16|0);
 $10 = $arrayidx4;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $arrayidx7 = ((($kw)) + 8|0);
 $16 = $arrayidx7;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $arrayidx11 = ((($ctx)) + 24|0);
 $add$ptr13 = ((($kw)) + 24|0);
 $arrayidx17 = ((($ctx)) + 32|0);
 $arrayidx20 = ((($kw)) + 32|0);
 $arrayidx22 = ((($ctx)) + 40|0);
 $arrayidx25 = ((($kw)) + 40|0);
 $arrayidx27 = ((($ctx)) + 48|0);
 $arrayidx30 = ((($kw)) + 48|0);
 $arrayidx32 = ((($ctx)) + 56|0);
 $arrayidx35 = ((($kw)) + 56|0);
 $arrayidx37 = ((($ctx)) + 64|0);
 $arrayidx40 = ((($kw)) + 64|0);
 $arrayidx42 = ((($ctx)) + 72|0);
 $arrayidx45 = ((($kw)) + 72|0);
 $arrayidx47 = ((($ctx)) + 80|0);
 $arrayidx50 = ((($kw)) + 80|0);
 $arrayidx52 = ((($ctx)) + 88|0);
 $arrayidx55 = ((($kw)) + 88|0);
 $arrayidx57 = ((($ctx)) + 96|0);
 $arrayidx60 = ((($kw)) + 96|0);
 $arrayidx62 = ((($ctx)) + 104|0);
 $arrayidx65 = ((($kw)) + 104|0);
 $arrayidx67 = ((($ctx)) + 112|0);
 $arrayidx70 = ((($kw)) + 112|0);
 $arrayidx72 = ((($ctx)) + 120|0);
 $arrayidx75 = ((($kw)) + 120|0);
 $arrayidx77 = ((($ctx)) + 128|0);
 $arrayidx80 = ((($kw)) + 128|0);
 $arrayidx82 = ((($ctx)) + 136|0);
 $arrayidx85 = ((($kw)) + 136|0);
 $arrayidx87 = ((($ctx)) + 144|0);
 $arrayidx90 = ((($kw)) + 144|0);
 $arrayidx156 = ((($kw)) + 152|0);
 $arrayidx166 = ((($kw)) + 16|0);
 $20 = $arrayidx11;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $arrayidx17;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $arrayidx22;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = $arrayidx27;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $arrayidx32;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = $arrayidx37;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 4)|0;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = $arrayidx42;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56) + 4)|0;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = $arrayidx47;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62) + 4)|0;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = $arrayidx52;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = $arrayidx57;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (($74) + 4)|0;
 $78 = $77;
 $79 = HEAP32[$78>>2]|0;
 $80 = $arrayidx62;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($80) + 4)|0;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $86 = $arrayidx67;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) + 4)|0;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $92 = $arrayidx72;
 $93 = $92;
 $94 = HEAP32[$93>>2]|0;
 $95 = (($92) + 4)|0;
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = $arrayidx77;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = (($98) + 4)|0;
 $102 = $101;
 $103 = HEAP32[$102>>2]|0;
 $104 = $arrayidx82;
 $105 = $104;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($104) + 4)|0;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = $arrayidx87;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = (($110) + 4)|0;
 $114 = $113;
 $115 = HEAP32[$114>>2]|0;
 $116 = $2;$117 = $5;$126 = $22;$129 = $25;$132 = $28;$135 = $31;$138 = $34;$141 = $37;$144 = $40;$147 = $43;$150 = $46;$153 = $49;$156 = $52;$159 = $55;$162 = $58;$165 = $61;$168 = $64;$171 = $67;$174 = $70;$177 = $73;$180 = $76;$183 = $79;$186 = $82;$189 = $85;$192 = $88;$195 = $91;$198 = $94;$201 = $97;$204 = $100;$207 = $103;$210 = $106;$213 = $109;$216 = $112;$219 = $115;$257 = $12;$259 = $15;$blkCnt$addr$0 = $blkCnt;$blkPtr$addr$0 = $blkPtr;
 while(1) {
  $118 = (_i64Add(($116|0),($117|0),($byteCntAdd|0),0)|0);
  $119 = (getTempRet0() | 0);
  $120 = $kw;
  $121 = $120;
  HEAP32[$121>>2] = $118;
  $122 = (($120) + 4)|0;
  $123 = $122;
  HEAP32[$123>>2] = $119;
  $124 = $add$ptr13;
  $125 = $124;
  HEAP32[$125>>2] = $126;
  $127 = (($124) + 4)|0;
  $128 = $127;
  HEAP32[$128>>2] = $129;
  $130 = $arrayidx20;
  $131 = $130;
  HEAP32[$131>>2] = $132;
  $133 = (($130) + 4)|0;
  $134 = $133;
  HEAP32[$134>>2] = $135;
  $136 = $arrayidx25;
  $137 = $136;
  HEAP32[$137>>2] = $138;
  $139 = (($136) + 4)|0;
  $140 = $139;
  HEAP32[$140>>2] = $141;
  $142 = $arrayidx30;
  $143 = $142;
  HEAP32[$143>>2] = $144;
  $145 = (($142) + 4)|0;
  $146 = $145;
  HEAP32[$146>>2] = $147;
  $148 = $arrayidx35;
  $149 = $148;
  HEAP32[$149>>2] = $150;
  $151 = (($148) + 4)|0;
  $152 = $151;
  HEAP32[$152>>2] = $153;
  $154 = $arrayidx40;
  $155 = $154;
  HEAP32[$155>>2] = $156;
  $157 = (($154) + 4)|0;
  $158 = $157;
  HEAP32[$158>>2] = $159;
  $160 = $arrayidx45;
  $161 = $160;
  HEAP32[$161>>2] = $162;
  $163 = (($160) + 4)|0;
  $164 = $163;
  HEAP32[$164>>2] = $165;
  $166 = $arrayidx50;
  $167 = $166;
  HEAP32[$167>>2] = $168;
  $169 = (($166) + 4)|0;
  $170 = $169;
  HEAP32[$170>>2] = $171;
  $172 = $arrayidx55;
  $173 = $172;
  HEAP32[$173>>2] = $174;
  $175 = (($172) + 4)|0;
  $176 = $175;
  HEAP32[$176>>2] = $177;
  $178 = $arrayidx60;
  $179 = $178;
  HEAP32[$179>>2] = $180;
  $181 = (($178) + 4)|0;
  $182 = $181;
  HEAP32[$182>>2] = $183;
  $184 = $arrayidx65;
  $185 = $184;
  HEAP32[$185>>2] = $186;
  $187 = (($184) + 4)|0;
  $188 = $187;
  HEAP32[$188>>2] = $189;
  $190 = $arrayidx70;
  $191 = $190;
  HEAP32[$191>>2] = $192;
  $193 = (($190) + 4)|0;
  $194 = $193;
  HEAP32[$194>>2] = $195;
  $196 = $arrayidx75;
  $197 = $196;
  HEAP32[$197>>2] = $198;
  $199 = (($196) + 4)|0;
  $200 = $199;
  HEAP32[$200>>2] = $201;
  $202 = $arrayidx80;
  $203 = $202;
  HEAP32[$203>>2] = $204;
  $205 = (($202) + 4)|0;
  $206 = $205;
  HEAP32[$206>>2] = $207;
  $208 = $arrayidx85;
  $209 = $208;
  HEAP32[$209>>2] = $210;
  $211 = (($208) + 4)|0;
  $212 = $211;
  HEAP32[$212>>2] = $213;
  $214 = $arrayidx90;
  $215 = $214;
  HEAP32[$215>>2] = $216;
  $217 = (($214) + 4)|0;
  $218 = $217;
  HEAP32[$218>>2] = $219;
  $220 = $126 ^ -1443096030;
  $221 = $129 ^ 466688986;
  $222 = $220 ^ $132;
  $223 = $221 ^ $135;
  $224 = $222 ^ $138;
  $225 = $223 ^ $141;
  $226 = $224 ^ $144;
  $227 = $225 ^ $147;
  $228 = $226 ^ $150;
  $229 = $227 ^ $153;
  $230 = $228 ^ $156;
  $231 = $229 ^ $159;
  $232 = $230 ^ $162;
  $233 = $231 ^ $165;
  $234 = $232 ^ $168;
  $235 = $233 ^ $171;
  $236 = $234 ^ $174;
  $237 = $235 ^ $177;
  $238 = $236 ^ $180;
  $239 = $237 ^ $183;
  $240 = $238 ^ $186;
  $241 = $239 ^ $189;
  $242 = $240 ^ $192;
  $243 = $241 ^ $195;
  $244 = $242 ^ $198;
  $245 = $243 ^ $201;
  $246 = $244 ^ $204;
  $247 = $245 ^ $207;
  $248 = $246 ^ $210;
  $249 = $247 ^ $213;
  $250 = $248 ^ $216;
  $251 = $249 ^ $219;
  $252 = $arrayidx156;
  $253 = $252;
  HEAP32[$253>>2] = $250;
  $254 = (($252) + 4)|0;
  $255 = $254;
  HEAP32[$255>>2] = $251;
  $256 = $257 ^ $118;
  $258 = $259 ^ $119;
  $260 = $arrayidx166;
  $261 = $260;
  HEAP32[$261>>2] = $256;
  $262 = (($260) + 4)|0;
  $263 = $262;
  HEAP32[$263>>2] = $258;
  $264 = $blkPtr$addr$0;
  $265 = $264;
  $266 = HEAPU8[$265>>0]|(HEAPU8[$265+1>>0]<<8)|(HEAPU8[$265+2>>0]<<16)|(HEAPU8[$265+3>>0]<<24);
  $267 = (($264) + 4)|0;
  $268 = $267;
  $269 = HEAPU8[$268>>0]|(HEAPU8[$268+1>>0]<<8)|(HEAPU8[$268+2>>0]<<16)|(HEAPU8[$268+3>>0]<<24);
  $w$sroa$5$0$$sroa_idx = ((($blkPtr$addr$0)) + 8|0);
  $270 = $w$sroa$5$0$$sroa_idx;
  $271 = $270;
  $272 = HEAPU8[$271>>0]|(HEAPU8[$271+1>>0]<<8)|(HEAPU8[$271+2>>0]<<16)|(HEAPU8[$271+3>>0]<<24);
  $273 = (($270) + 4)|0;
  $274 = $273;
  $275 = HEAPU8[$274>>0]|(HEAPU8[$274+1>>0]<<8)|(HEAPU8[$274+2>>0]<<16)|(HEAPU8[$274+3>>0]<<24);
  $w$sroa$7$0$$sroa_idx = ((($blkPtr$addr$0)) + 16|0);
  $276 = $w$sroa$7$0$$sroa_idx;
  $277 = $276;
  $278 = HEAPU8[$277>>0]|(HEAPU8[$277+1>>0]<<8)|(HEAPU8[$277+2>>0]<<16)|(HEAPU8[$277+3>>0]<<24);
  $279 = (($276) + 4)|0;
  $280 = $279;
  $281 = HEAPU8[$280>>0]|(HEAPU8[$280+1>>0]<<8)|(HEAPU8[$280+2>>0]<<16)|(HEAPU8[$280+3>>0]<<24);
  $w$sroa$9$0$$sroa_idx = ((($blkPtr$addr$0)) + 24|0);
  $282 = $w$sroa$9$0$$sroa_idx;
  $283 = $282;
  $284 = HEAPU8[$283>>0]|(HEAPU8[$283+1>>0]<<8)|(HEAPU8[$283+2>>0]<<16)|(HEAPU8[$283+3>>0]<<24);
  $285 = (($282) + 4)|0;
  $286 = $285;
  $287 = HEAPU8[$286>>0]|(HEAPU8[$286+1>>0]<<8)|(HEAPU8[$286+2>>0]<<16)|(HEAPU8[$286+3>>0]<<24);
  $w$sroa$11$0$$sroa_idx = ((($blkPtr$addr$0)) + 32|0);
  $288 = $w$sroa$11$0$$sroa_idx;
  $289 = $288;
  $290 = HEAPU8[$289>>0]|(HEAPU8[$289+1>>0]<<8)|(HEAPU8[$289+2>>0]<<16)|(HEAPU8[$289+3>>0]<<24);
  $291 = (($288) + 4)|0;
  $292 = $291;
  $293 = HEAPU8[$292>>0]|(HEAPU8[$292+1>>0]<<8)|(HEAPU8[$292+2>>0]<<16)|(HEAPU8[$292+3>>0]<<24);
  $w$sroa$13$0$$sroa_idx = ((($blkPtr$addr$0)) + 40|0);
  $294 = $w$sroa$13$0$$sroa_idx;
  $295 = $294;
  $296 = HEAPU8[$295>>0]|(HEAPU8[$295+1>>0]<<8)|(HEAPU8[$295+2>>0]<<16)|(HEAPU8[$295+3>>0]<<24);
  $297 = (($294) + 4)|0;
  $298 = $297;
  $299 = HEAPU8[$298>>0]|(HEAPU8[$298+1>>0]<<8)|(HEAPU8[$298+2>>0]<<16)|(HEAPU8[$298+3>>0]<<24);
  $w$sroa$15$0$$sroa_idx = ((($blkPtr$addr$0)) + 48|0);
  $300 = $w$sroa$15$0$$sroa_idx;
  $301 = $300;
  $302 = HEAPU8[$301>>0]|(HEAPU8[$301+1>>0]<<8)|(HEAPU8[$301+2>>0]<<16)|(HEAPU8[$301+3>>0]<<24);
  $303 = (($300) + 4)|0;
  $304 = $303;
  $305 = HEAPU8[$304>>0]|(HEAPU8[$304+1>>0]<<8)|(HEAPU8[$304+2>>0]<<16)|(HEAPU8[$304+3>>0]<<24);
  $w$sroa$17$0$$sroa_idx = ((($blkPtr$addr$0)) + 56|0);
  $306 = $w$sroa$17$0$$sroa_idx;
  $307 = $306;
  $308 = HEAPU8[$307>>0]|(HEAPU8[$307+1>>0]<<8)|(HEAPU8[$307+2>>0]<<16)|(HEAPU8[$307+3>>0]<<24);
  $309 = (($306) + 4)|0;
  $310 = $309;
  $311 = HEAPU8[$310>>0]|(HEAPU8[$310+1>>0]<<8)|(HEAPU8[$310+2>>0]<<16)|(HEAPU8[$310+3>>0]<<24);
  $w$sroa$19$0$$sroa_idx = ((($blkPtr$addr$0)) + 64|0);
  $312 = $w$sroa$19$0$$sroa_idx;
  $313 = $312;
  $314 = HEAPU8[$313>>0]|(HEAPU8[$313+1>>0]<<8)|(HEAPU8[$313+2>>0]<<16)|(HEAPU8[$313+3>>0]<<24);
  $315 = (($312) + 4)|0;
  $316 = $315;
  $317 = HEAPU8[$316>>0]|(HEAPU8[$316+1>>0]<<8)|(HEAPU8[$316+2>>0]<<16)|(HEAPU8[$316+3>>0]<<24);
  $w$sroa$21$0$$sroa_idx = ((($blkPtr$addr$0)) + 72|0);
  $318 = $w$sroa$21$0$$sroa_idx;
  $319 = $318;
  $320 = HEAPU8[$319>>0]|(HEAPU8[$319+1>>0]<<8)|(HEAPU8[$319+2>>0]<<16)|(HEAPU8[$319+3>>0]<<24);
  $321 = (($318) + 4)|0;
  $322 = $321;
  $323 = HEAPU8[$322>>0]|(HEAPU8[$322+1>>0]<<8)|(HEAPU8[$322+2>>0]<<16)|(HEAPU8[$322+3>>0]<<24);
  $w$sroa$23$0$$sroa_idx = ((($blkPtr$addr$0)) + 80|0);
  $324 = $w$sroa$23$0$$sroa_idx;
  $325 = $324;
  $326 = HEAPU8[$325>>0]|(HEAPU8[$325+1>>0]<<8)|(HEAPU8[$325+2>>0]<<16)|(HEAPU8[$325+3>>0]<<24);
  $327 = (($324) + 4)|0;
  $328 = $327;
  $329 = HEAPU8[$328>>0]|(HEAPU8[$328+1>>0]<<8)|(HEAPU8[$328+2>>0]<<16)|(HEAPU8[$328+3>>0]<<24);
  $w$sroa$25$0$$sroa_idx = ((($blkPtr$addr$0)) + 88|0);
  $330 = $w$sroa$25$0$$sroa_idx;
  $331 = $330;
  $332 = HEAPU8[$331>>0]|(HEAPU8[$331+1>>0]<<8)|(HEAPU8[$331+2>>0]<<16)|(HEAPU8[$331+3>>0]<<24);
  $333 = (($330) + 4)|0;
  $334 = $333;
  $335 = HEAPU8[$334>>0]|(HEAPU8[$334+1>>0]<<8)|(HEAPU8[$334+2>>0]<<16)|(HEAPU8[$334+3>>0]<<24);
  $w$sroa$27$0$$sroa_idx = ((($blkPtr$addr$0)) + 96|0);
  $336 = $w$sroa$27$0$$sroa_idx;
  $337 = $336;
  $338 = HEAPU8[$337>>0]|(HEAPU8[$337+1>>0]<<8)|(HEAPU8[$337+2>>0]<<16)|(HEAPU8[$337+3>>0]<<24);
  $339 = (($336) + 4)|0;
  $340 = $339;
  $341 = HEAPU8[$340>>0]|(HEAPU8[$340+1>>0]<<8)|(HEAPU8[$340+2>>0]<<16)|(HEAPU8[$340+3>>0]<<24);
  $w$sroa$29$0$$sroa_idx = ((($blkPtr$addr$0)) + 104|0);
  $342 = $w$sroa$29$0$$sroa_idx;
  $343 = $342;
  $344 = HEAPU8[$343>>0]|(HEAPU8[$343+1>>0]<<8)|(HEAPU8[$343+2>>0]<<16)|(HEAPU8[$343+3>>0]<<24);
  $345 = (($342) + 4)|0;
  $346 = $345;
  $347 = HEAPU8[$346>>0]|(HEAPU8[$346+1>>0]<<8)|(HEAPU8[$346+2>>0]<<16)|(HEAPU8[$346+3>>0]<<24);
  $w$sroa$31$0$$sroa_idx = ((($blkPtr$addr$0)) + 112|0);
  $348 = $w$sroa$31$0$$sroa_idx;
  $349 = $348;
  $350 = HEAPU8[$349>>0]|(HEAPU8[$349+1>>0]<<8)|(HEAPU8[$349+2>>0]<<16)|(HEAPU8[$349+3>>0]<<24);
  $351 = (($348) + 4)|0;
  $352 = $351;
  $353 = HEAPU8[$352>>0]|(HEAPU8[$352+1>>0]<<8)|(HEAPU8[$352+2>>0]<<16)|(HEAPU8[$352+3>>0]<<24);
  $w$sroa$33$0$$sroa_idx = ((($blkPtr$addr$0)) + 120|0);
  $354 = $w$sroa$33$0$$sroa_idx;
  $355 = $354;
  $356 = HEAPU8[$355>>0]|(HEAPU8[$355+1>>0]<<8)|(HEAPU8[$355+2>>0]<<16)|(HEAPU8[$355+3>>0]<<24);
  $357 = (($354) + 4)|0;
  $358 = $357;
  $359 = HEAPU8[$358>>0]|(HEAPU8[$358+1>>0]<<8)|(HEAPU8[$358+2>>0]<<16)|(HEAPU8[$358+3>>0]<<24);
  $360 = (_i64Add(($266|0),($269|0),($126|0),($129|0))|0);
  $361 = (getTempRet0() | 0);
  $362 = (_i64Add(($272|0),($275|0),($132|0),($135|0))|0);
  $363 = (getTempRet0() | 0);
  $364 = (_i64Add(($278|0),($281|0),($138|0),($141|0))|0);
  $365 = (getTempRet0() | 0);
  $366 = (_i64Add(($284|0),($287|0),($144|0),($147|0))|0);
  $367 = (getTempRet0() | 0);
  $368 = (_i64Add(($290|0),($293|0),($150|0),($153|0))|0);
  $369 = (getTempRet0() | 0);
  $370 = (_i64Add(($296|0),($299|0),($156|0),($159|0))|0);
  $371 = (getTempRet0() | 0);
  $372 = (_i64Add(($302|0),($305|0),($162|0),($165|0))|0);
  $373 = (getTempRet0() | 0);
  $374 = (_i64Add(($308|0),($311|0),($168|0),($171|0))|0);
  $375 = (getTempRet0() | 0);
  $376 = (_i64Add(($314|0),($317|0),($174|0),($177|0))|0);
  $377 = (getTempRet0() | 0);
  $378 = (_i64Add(($320|0),($323|0),($180|0),($183|0))|0);
  $379 = (getTempRet0() | 0);
  $380 = (_i64Add(($326|0),($329|0),($186|0),($189|0))|0);
  $381 = (getTempRet0() | 0);
  $382 = (_i64Add(($332|0),($335|0),($192|0),($195|0))|0);
  $383 = (getTempRet0() | 0);
  $384 = (_i64Add(($338|0),($341|0),($198|0),($201|0))|0);
  $385 = (getTempRet0() | 0);
  $386 = (_i64Add(($204|0),($207|0),($118|0),($119|0))|0);
  $387 = (getTempRet0() | 0);
  $388 = (_i64Add(($386|0),($387|0),($344|0),($347|0))|0);
  $389 = (getTempRet0() | 0);
  $390 = (_i64Add(($257|0),($259|0),($210|0),($213|0))|0);
  $391 = (getTempRet0() | 0);
  $392 = (_i64Add(($390|0),($391|0),($350|0),($353|0))|0);
  $393 = (getTempRet0() | 0);
  $394 = (_i64Add(($356|0),($359|0),($216|0),($219|0))|0);
  $395 = (getTempRet0() | 0);
  $396 = $360;$397 = $361;$398 = $362;$399 = $363;$410 = $364;$411 = $365;$412 = $366;$413 = $367;$424 = $368;$425 = $369;$426 = $370;$427 = $371;$438 = $372;$439 = $373;$440 = $374;$441 = $375;$452 = $376;$453 = $377;$454 = $378;$455 = $379;$466 = $380;$467 = $381;$468 = $382;$469 = $383;$480 = $384;$481 = $385;$482 = $388;$483 = $389;$494 = $394;$495 = $395;$496 = $392;$497 = $393;$r$0581 = 1;
  while(1) {
   $400 = (_i64Add(($396|0),($397|0),($398|0),($399|0))|0);
   $401 = (getTempRet0() | 0);
   $402 = (_bitshift64Shl(($398|0),($399|0),24)|0);
   $403 = (getTempRet0() | 0);
   $404 = (_bitshift64Lshr(($398|0),($399|0),40)|0);
   $405 = (getTempRet0() | 0);
   $406 = $402 | $404;
   $407 = $403 | $405;
   $408 = $406 ^ $400;
   $409 = $407 ^ $401;
   $414 = (_i64Add(($410|0),($411|0),($412|0),($413|0))|0);
   $415 = (getTempRet0() | 0);
   $416 = (_bitshift64Shl(($412|0),($413|0),13)|0);
   $417 = (getTempRet0() | 0);
   $418 = (_bitshift64Lshr(($412|0),($413|0),51)|0);
   $419 = (getTempRet0() | 0);
   $420 = $416 | $418;
   $421 = $417 | $419;
   $422 = $420 ^ $414;
   $423 = $421 ^ $415;
   $428 = (_i64Add(($424|0),($425|0),($426|0),($427|0))|0);
   $429 = (getTempRet0() | 0);
   $430 = (_bitshift64Shl(($426|0),($427|0),8)|0);
   $431 = (getTempRet0() | 0);
   $432 = (_bitshift64Lshr(($426|0),($427|0),56)|0);
   $433 = (getTempRet0() | 0);
   $434 = $430 | $432;
   $435 = $431 | $433;
   $436 = $434 ^ $428;
   $437 = $435 ^ $429;
   $442 = (_i64Add(($438|0),($439|0),($440|0),($441|0))|0);
   $443 = (getTempRet0() | 0);
   $444 = (_bitshift64Shl(($440|0),($441|0),47)|0);
   $445 = (getTempRet0() | 0);
   $446 = (_bitshift64Lshr(($440|0),($441|0),17)|0);
   $447 = (getTempRet0() | 0);
   $448 = $444 | $446;
   $449 = $445 | $447;
   $450 = $448 ^ $442;
   $451 = $449 ^ $443;
   $456 = (_i64Add(($452|0),($453|0),($454|0),($455|0))|0);
   $457 = (getTempRet0() | 0);
   $458 = (_bitshift64Shl(($454|0),($455|0),8)|0);
   $459 = (getTempRet0() | 0);
   $460 = (_bitshift64Lshr(($454|0),($455|0),56)|0);
   $461 = (getTempRet0() | 0);
   $462 = $458 | $460;
   $463 = $459 | $461;
   $464 = $462 ^ $456;
   $465 = $463 ^ $457;
   $470 = (_i64Add(($466|0),($467|0),($468|0),($469|0))|0);
   $471 = (getTempRet0() | 0);
   $472 = (_bitshift64Shl(($468|0),($469|0),17)|0);
   $473 = (getTempRet0() | 0);
   $474 = (_bitshift64Lshr(($468|0),($469|0),47)|0);
   $475 = (getTempRet0() | 0);
   $476 = $472 | $474;
   $477 = $473 | $475;
   $478 = $476 ^ $470;
   $479 = $477 ^ $471;
   $484 = (_i64Add(($480|0),($481|0),($482|0),($483|0))|0);
   $485 = (getTempRet0() | 0);
   $486 = (_bitshift64Shl(($482|0),($483|0),22)|0);
   $487 = (getTempRet0() | 0);
   $488 = (_bitshift64Lshr(($482|0),($483|0),42)|0);
   $489 = (getTempRet0() | 0);
   $490 = $486 | $488;
   $491 = $487 | $489;
   $492 = $484 ^ $490;
   $493 = $485 ^ $491;
   $498 = (_i64Add(($494|0),($495|0),($496|0),($497|0))|0);
   $499 = (getTempRet0() | 0);
   $500 = (_bitshift64Shl(($494|0),($495|0),37)|0);
   $501 = (getTempRet0() | 0);
   $502 = (_bitshift64Lshr(($494|0),($495|0),27)|0);
   $503 = (getTempRet0() | 0);
   $504 = $500 | $502;
   $505 = $501 | $503;
   $506 = $504 ^ $498;
   $507 = $505 ^ $499;
   $508 = (_i64Add(($400|0),($401|0),($464|0),($465|0))|0);
   $509 = (getTempRet0() | 0);
   $510 = (_bitshift64Shl(($464|0),($465|0),38)|0);
   $511 = (getTempRet0() | 0);
   $512 = (_bitshift64Lshr(($464|0),($465|0),26)|0);
   $513 = (getTempRet0() | 0);
   $514 = $510 | $512;
   $515 = $511 | $513;
   $516 = $508 ^ $514;
   $517 = $509 ^ $515;
   $518 = (_i64Add(($414|0),($415|0),($492|0),($493|0))|0);
   $519 = (getTempRet0() | 0);
   $520 = (_bitshift64Shl(($492|0),($493|0),19)|0);
   $521 = (getTempRet0() | 0);
   $522 = (_bitshift64Lshr(($492|0),($493|0),45)|0);
   $523 = (getTempRet0() | 0);
   $524 = $520 | $522;
   $525 = $521 | $523;
   $526 = $518 ^ $524;
   $527 = $519 ^ $525;
   $528 = (_i64Add(($442|0),($443|0),($478|0),($479|0))|0);
   $529 = (getTempRet0() | 0);
   $530 = (_bitshift64Shl(($478|0),($479|0),10)|0);
   $531 = (getTempRet0() | 0);
   $532 = (_bitshift64Lshr(($478|0),($479|0),54)|0);
   $533 = (getTempRet0() | 0);
   $534 = $530 | $532;
   $535 = $531 | $533;
   $536 = $528 ^ $534;
   $537 = $529 ^ $535;
   $538 = (_i64Add(($428|0),($429|0),($506|0),($507|0))|0);
   $539 = (getTempRet0() | 0);
   $540 = (_bitshift64Shl(($506|0),($507|0),55)|0);
   $541 = (getTempRet0() | 0);
   $542 = (_bitshift64Lshr(($506|0),($507|0),9)|0);
   $543 = (getTempRet0() | 0);
   $544 = $540 | $542;
   $545 = $541 | $543;
   $546 = $538 ^ $544;
   $547 = $539 ^ $545;
   $548 = (_i64Add(($450|0),($451|0),($470|0),($471|0))|0);
   $549 = (getTempRet0() | 0);
   $550 = (_bitshift64Shl(($450|0),($451|0),49)|0);
   $551 = (getTempRet0() | 0);
   $552 = (_bitshift64Lshr(($450|0),($451|0),15)|0);
   $553 = (getTempRet0() | 0);
   $554 = $550 | $552;
   $555 = $551 | $553;
   $556 = $554 ^ $548;
   $557 = $555 ^ $549;
   $558 = (_i64Add(($422|0),($423|0),($484|0),($485|0))|0);
   $559 = (getTempRet0() | 0);
   $560 = (_bitshift64Shl(($422|0),($423|0),18)|0);
   $561 = (getTempRet0() | 0);
   $562 = (_bitshift64Lshr(($422|0),($423|0),46)|0);
   $563 = (getTempRet0() | 0);
   $564 = $560 | $562;
   $565 = $561 | $563;
   $566 = $564 ^ $558;
   $567 = $565 ^ $559;
   $568 = (_i64Add(($436|0),($437|0),($498|0),($499|0))|0);
   $569 = (getTempRet0() | 0);
   $570 = (_bitshift64Shl(($436|0),($437|0),23)|0);
   $571 = (getTempRet0() | 0);
   $572 = (_bitshift64Lshr(($436|0),($437|0),41)|0);
   $573 = (getTempRet0() | 0);
   $574 = $570 | $572;
   $575 = $571 | $573;
   $576 = $574 ^ $568;
   $577 = $575 ^ $569;
   $578 = (_i64Add(($408|0),($409|0),($456|0),($457|0))|0);
   $579 = (getTempRet0() | 0);
   $580 = (_bitshift64Shl(($408|0),($409|0),52)|0);
   $581 = (getTempRet0() | 0);
   $582 = (_bitshift64Lshr(($408|0),($409|0),12)|0);
   $583 = (getTempRet0() | 0);
   $584 = $580 | $582;
   $585 = $581 | $583;
   $586 = $584 ^ $578;
   $587 = $585 ^ $579;
   $588 = (_i64Add(($508|0),($509|0),($556|0),($557|0))|0);
   $589 = (getTempRet0() | 0);
   $590 = (_bitshift64Shl(($556|0),($557|0),33)|0);
   $591 = (getTempRet0() | 0);
   $592 = (_bitshift64Lshr(($556|0),($557|0),31)|0);
   $593 = (getTempRet0() | 0);
   $594 = $590 | $592;
   $595 = $591 | $593;
   $596 = $588 ^ $594;
   $597 = $589 ^ $595;
   $598 = (_i64Add(($576|0),($577|0),($518|0),($519|0))|0);
   $599 = (getTempRet0() | 0);
   $600 = (_bitshift64Shl(($576|0),($577|0),4)|0);
   $601 = (getTempRet0() | 0);
   $602 = (_bitshift64Lshr(($576|0),($577|0),60)|0);
   $603 = (getTempRet0() | 0);
   $604 = $600 | $602;
   $605 = $601 | $603;
   $606 = $604 ^ $598;
   $607 = $605 ^ $599;
   $608 = (_i64Add(($566|0),($567|0),($538|0),($539|0))|0);
   $609 = (getTempRet0() | 0);
   $610 = (_bitshift64Shl(($566|0),($567|0),51)|0);
   $611 = (getTempRet0() | 0);
   $612 = (_bitshift64Lshr(($566|0),($567|0),13)|0);
   $613 = (getTempRet0() | 0);
   $614 = $610 | $612;
   $615 = $611 | $613;
   $616 = $614 ^ $608;
   $617 = $615 ^ $609;
   $618 = (_i64Add(($586|0),($587|0),($528|0),($529|0))|0);
   $619 = (getTempRet0() | 0);
   $620 = (_bitshift64Shl(($586|0),($587|0),13)|0);
   $621 = (getTempRet0() | 0);
   $622 = (_bitshift64Lshr(($586|0),($587|0),51)|0);
   $623 = (getTempRet0() | 0);
   $624 = $620 | $622;
   $625 = $621 | $623;
   $626 = $624 ^ $618;
   $627 = $625 ^ $619;
   $628 = (_i64Add(($558|0),($559|0),($546|0),($547|0))|0);
   $629 = (getTempRet0() | 0);
   $630 = (_bitshift64Shl(($546|0),($547|0),34)|0);
   $631 = (getTempRet0() | 0);
   $632 = (_bitshift64Lshr(($546|0),($547|0),30)|0);
   $633 = (getTempRet0() | 0);
   $634 = $630 | $632;
   $635 = $631 | $633;
   $636 = $628 ^ $634;
   $637 = $629 ^ $635;
   $638 = (_i64Add(($526|0),($527|0),($568|0),($569|0))|0);
   $639 = (getTempRet0() | 0);
   $640 = (_bitshift64Shl(($526|0),($527|0),41)|0);
   $641 = (getTempRet0() | 0);
   $642 = (_bitshift64Lshr(($526|0),($527|0),23)|0);
   $643 = (getTempRet0() | 0);
   $644 = $640 | $642;
   $645 = $641 | $643;
   $646 = $644 ^ $638;
   $647 = $645 ^ $639;
   $648 = (_i64Add(($578|0),($579|0),($536|0),($537|0))|0);
   $649 = (getTempRet0() | 0);
   $650 = (_bitshift64Shl(($536|0),($537|0),59)|0);
   $651 = (getTempRet0() | 0);
   $652 = (_bitshift64Lshr(($536|0),($537|0),5)|0);
   $653 = (getTempRet0() | 0);
   $654 = $650 | $652;
   $655 = $651 | $653;
   $656 = $648 ^ $654;
   $657 = $649 ^ $655;
   $658 = (_i64Add(($516|0),($517|0),($548|0),($549|0))|0);
   $659 = (getTempRet0() | 0);
   $660 = (_bitshift64Shl(($516|0),($517|0),17)|0);
   $661 = (getTempRet0() | 0);
   $662 = (_bitshift64Lshr(($516|0),($517|0),47)|0);
   $663 = (getTempRet0() | 0);
   $664 = $660 | $662;
   $665 = $661 | $663;
   $666 = $664 ^ $658;
   $667 = $665 ^ $659;
   $668 = (_i64Add(($588|0),($589|0),($636|0),($637|0))|0);
   $669 = (getTempRet0() | 0);
   $670 = (_bitshift64Shl(($636|0),($637|0),5)|0);
   $671 = (getTempRet0() | 0);
   $672 = (_bitshift64Lshr(($636|0),($637|0),59)|0);
   $673 = (getTempRet0() | 0);
   $674 = $670 | $672;
   $675 = $671 | $673;
   $676 = $674 ^ $668;
   $677 = $675 ^ $669;
   $678 = (_i64Add(($656|0),($657|0),($598|0),($599|0))|0);
   $679 = (getTempRet0() | 0);
   $680 = (_bitshift64Shl(($656|0),($657|0),20)|0);
   $681 = (getTempRet0() | 0);
   $682 = (_bitshift64Lshr(($656|0),($657|0),44)|0);
   $683 = (getTempRet0() | 0);
   $684 = $680 | $682;
   $685 = $681 | $683;
   $686 = $684 ^ $678;
   $687 = $685 ^ $679;
   $688 = (_i64Add(($618|0),($619|0),($646|0),($647|0))|0);
   $689 = (getTempRet0() | 0);
   $690 = (_bitshift64Shl(($646|0),($647|0),48)|0);
   $691 = (getTempRet0() | 0);
   $692 = (_bitshift64Lshr(($646|0),($647|0),16)|0);
   $693 = (getTempRet0() | 0);
   $694 = $690 | $692;
   $695 = $691 | $693;
   $696 = $688 ^ $694;
   $697 = $689 ^ $695;
   $698 = (_i64Add(($666|0),($667|0),($608|0),($609|0))|0);
   $699 = (getTempRet0() | 0);
   $700 = (_bitshift64Shl(($666|0),($667|0),41)|0);
   $701 = (getTempRet0() | 0);
   $702 = (_bitshift64Lshr(($666|0),($667|0),23)|0);
   $703 = (getTempRet0() | 0);
   $704 = $700 | $702;
   $705 = $701 | $703;
   $706 = $704 ^ $698;
   $707 = $705 ^ $699;
   $708 = (_i64Add(($626|0),($627|0),($638|0),($639|0))|0);
   $709 = (getTempRet0() | 0);
   $710 = (_bitshift64Shl(($626|0),($627|0),47)|0);
   $711 = (getTempRet0() | 0);
   $712 = (_bitshift64Lshr(($626|0),($627|0),17)|0);
   $713 = (getTempRet0() | 0);
   $714 = $710 | $712;
   $715 = $711 | $713;
   $716 = $714 ^ $708;
   $717 = $715 ^ $709;
   $718 = (_i64Add(($648|0),($649|0),($606|0),($607|0))|0);
   $719 = (getTempRet0() | 0);
   $720 = (_bitshift64Shl(($606|0),($607|0),28)|0);
   $721 = (getTempRet0() | 0);
   $722 = (_bitshift64Lshr(($606|0),($607|0),36)|0);
   $723 = (getTempRet0() | 0);
   $724 = $720 | $722;
   $725 = $721 | $723;
   $726 = $724 ^ $718;
   $727 = $725 ^ $719;
   $728 = (_i64Add(($616|0),($617|0),($658|0),($659|0))|0);
   $729 = (getTempRet0() | 0);
   $730 = (_bitshift64Shl(($616|0),($617|0),16)|0);
   $731 = (getTempRet0() | 0);
   $732 = (_bitshift64Lshr(($616|0),($617|0),48)|0);
   $733 = (getTempRet0() | 0);
   $734 = $730 | $732;
   $735 = $731 | $733;
   $736 = $734 ^ $728;
   $737 = $735 ^ $729;
   $738 = (_i64Add(($596|0),($597|0),($628|0),($629|0))|0);
   $739 = (getTempRet0() | 0);
   $740 = (_bitshift64Shl(($596|0),($597|0),25)|0);
   $741 = (getTempRet0() | 0);
   $742 = (_bitshift64Lshr(($596|0),($597|0),39)|0);
   $743 = (getTempRet0() | 0);
   $744 = $740 | $742;
   $745 = $741 | $743;
   $746 = $744 ^ $738;
   $747 = $745 ^ $739;
   $arrayidx418 = (($add$ptr13) + ($r$0581<<3)|0);
   $748 = $arrayidx418;
   $749 = $748;
   $750 = HEAP32[$749>>2]|0;
   $751 = (($748) + 4)|0;
   $752 = $751;
   $753 = HEAP32[$752>>2]|0;
   $754 = (_i64Add(($750|0),($753|0),($668|0),($669|0))|0);
   $755 = (getTempRet0() | 0);
   $add423 = (($r$0581) + 1)|0;
   $arrayidx424 = (($add$ptr13) + ($add423<<3)|0);
   $756 = $arrayidx424;
   $757 = $756;
   $758 = HEAP32[$757>>2]|0;
   $759 = (($756) + 4)|0;
   $760 = $759;
   $761 = HEAP32[$760>>2]|0;
   $762 = (_i64Add(($758|0),($761|0),($716|0),($717|0))|0);
   $763 = (getTempRet0() | 0);
   $add429 = (($r$0581) + 2)|0;
   $arrayidx430 = (($add$ptr13) + ($add429<<3)|0);
   $764 = $arrayidx430;
   $765 = $764;
   $766 = HEAP32[$765>>2]|0;
   $767 = (($764) + 4)|0;
   $768 = $767;
   $769 = HEAP32[$768>>2]|0;
   $770 = (_i64Add(($766|0),($769|0),($678|0),($679|0))|0);
   $771 = (getTempRet0() | 0);
   $add435 = (($r$0581) + 3)|0;
   $arrayidx436 = (($add$ptr13) + ($add435<<3)|0);
   $772 = $arrayidx436;
   $773 = $772;
   $774 = HEAP32[$773>>2]|0;
   $775 = (($772) + 4)|0;
   $776 = $775;
   $777 = HEAP32[$776>>2]|0;
   $778 = (_i64Add(($774|0),($777|0),($736|0),($737|0))|0);
   $779 = (getTempRet0() | 0);
   $add441 = (($r$0581) + 4)|0;
   $arrayidx442 = (($add$ptr13) + ($add441<<3)|0);
   $780 = $arrayidx442;
   $781 = $780;
   $782 = HEAP32[$781>>2]|0;
   $783 = (($780) + 4)|0;
   $784 = $783;
   $785 = HEAP32[$784>>2]|0;
   $786 = (_i64Add(($782|0),($785|0),($698|0),($699|0))|0);
   $787 = (getTempRet0() | 0);
   $add447 = (($r$0581) + 5)|0;
   $arrayidx448 = (($add$ptr13) + ($add447<<3)|0);
   $788 = $arrayidx448;
   $789 = $788;
   $790 = HEAP32[$789>>2]|0;
   $791 = (($788) + 4)|0;
   $792 = $791;
   $793 = HEAP32[$792>>2]|0;
   $794 = (_i64Add(($790|0),($793|0),($726|0),($727|0))|0);
   $795 = (getTempRet0() | 0);
   $add453 = (($r$0581) + 6)|0;
   $arrayidx454 = (($add$ptr13) + ($add453<<3)|0);
   $796 = $arrayidx454;
   $797 = $796;
   $798 = HEAP32[$797>>2]|0;
   $799 = (($796) + 4)|0;
   $800 = $799;
   $801 = HEAP32[$800>>2]|0;
   $802 = (_i64Add(($798|0),($801|0),($688|0),($689|0))|0);
   $803 = (getTempRet0() | 0);
   $add459 = (($r$0581) + 7)|0;
   $arrayidx460 = (($add$ptr13) + ($add459<<3)|0);
   $804 = $arrayidx460;
   $805 = $804;
   $806 = HEAP32[$805>>2]|0;
   $807 = (($804) + 4)|0;
   $808 = $807;
   $809 = HEAP32[$808>>2]|0;
   $810 = (_i64Add(($806|0),($809|0),($746|0),($747|0))|0);
   $811 = (getTempRet0() | 0);
   $add465 = (($r$0581) + 8)|0;
   $arrayidx466 = (($add$ptr13) + ($add465<<3)|0);
   $812 = $arrayidx466;
   $813 = $812;
   $814 = HEAP32[$813>>2]|0;
   $815 = (($812) + 4)|0;
   $816 = $815;
   $817 = HEAP32[$816>>2]|0;
   $818 = (_i64Add(($814|0),($817|0),($718|0),($719|0))|0);
   $819 = (getTempRet0() | 0);
   $add471 = (($r$0581) + 9)|0;
   $arrayidx472 = (($add$ptr13) + ($add471<<3)|0);
   $820 = $arrayidx472;
   $821 = $820;
   $822 = HEAP32[$821>>2]|0;
   $823 = (($820) + 4)|0;
   $824 = $823;
   $825 = HEAP32[$824>>2]|0;
   $826 = (_i64Add(($822|0),($825|0),($706|0),($707|0))|0);
   $827 = (getTempRet0() | 0);
   $add477 = (($r$0581) + 10)|0;
   $arrayidx478 = (($add$ptr13) + ($add477<<3)|0);
   $828 = $arrayidx478;
   $829 = $828;
   $830 = HEAP32[$829>>2]|0;
   $831 = (($828) + 4)|0;
   $832 = $831;
   $833 = HEAP32[$832>>2]|0;
   $834 = (_i64Add(($830|0),($833|0),($728|0),($729|0))|0);
   $835 = (getTempRet0() | 0);
   $add483 = (($r$0581) + 11)|0;
   $arrayidx484 = (($add$ptr13) + ($add483<<3)|0);
   $836 = $arrayidx484;
   $837 = $836;
   $838 = HEAP32[$837>>2]|0;
   $839 = (($836) + 4)|0;
   $840 = $839;
   $841 = HEAP32[$840>>2]|0;
   $842 = (_i64Add(($838|0),($841|0),($686|0),($687|0))|0);
   $843 = (getTempRet0() | 0);
   $add489 = (($r$0581) + 12)|0;
   $arrayidx490 = (($add$ptr13) + ($add489<<3)|0);
   $844 = $arrayidx490;
   $845 = $844;
   $846 = HEAP32[$845>>2]|0;
   $847 = (($844) + 4)|0;
   $848 = $847;
   $849 = HEAP32[$848>>2]|0;
   $850 = (_i64Add(($846|0),($849|0),($738|0),($739|0))|0);
   $851 = (getTempRet0() | 0);
   $add495 = (($r$0581) + 13)|0;
   $arrayidx496 = (($add$ptr13) + ($add495<<3)|0);
   $852 = $arrayidx496;
   $853 = $852;
   $854 = HEAP32[$853>>2]|0;
   $855 = (($852) + 4)|0;
   $856 = $855;
   $857 = HEAP32[$856>>2]|0;
   $arrayidx501 = (($kw) + ($r$0581<<3)|0);
   $858 = $arrayidx501;
   $859 = $858;
   $860 = HEAP32[$859>>2]|0;
   $861 = (($858) + 4)|0;
   $862 = $861;
   $863 = HEAP32[$862>>2]|0;
   $864 = (_i64Add(($854|0),($857|0),($696|0),($697|0))|0);
   $865 = (getTempRet0() | 0);
   $866 = (_i64Add(($864|0),($865|0),($860|0),($863|0))|0);
   $867 = (getTempRet0() | 0);
   $add507 = (($r$0581) + 14)|0;
   $arrayidx508 = (($add$ptr13) + ($add507<<3)|0);
   $868 = $arrayidx508;
   $869 = $868;
   $870 = HEAP32[$869>>2]|0;
   $871 = (($868) + 4)|0;
   $872 = $871;
   $873 = HEAP32[$872>>2]|0;
   $arrayidx513 = (($kw) + ($add423<<3)|0);
   $874 = $arrayidx513;
   $875 = $874;
   $876 = HEAP32[$875>>2]|0;
   $877 = (($874) + 4)|0;
   $878 = $877;
   $879 = HEAP32[$878>>2]|0;
   $880 = (_i64Add(($876|0),($879|0),($870|0),($873|0))|0);
   $881 = (getTempRet0() | 0);
   $882 = (_i64Add(($880|0),($881|0),($708|0),($709|0))|0);
   $883 = (getTempRet0() | 0);
   $add519 = (($r$0581) + 15)|0;
   $arrayidx520 = (($add$ptr13) + ($add519<<3)|0);
   $884 = $arrayidx520;
   $885 = $884;
   $886 = HEAP32[$885>>2]|0;
   $887 = (($884) + 4)|0;
   $888 = $887;
   $889 = HEAP32[$888>>2]|0;
   $890 = (_i64Add(($676|0),($677|0),($r$0581|0),0)|0);
   $891 = (getTempRet0() | 0);
   $892 = (_i64Add(($890|0),($891|0),($886|0),($889|0))|0);
   $893 = (getTempRet0() | 0);
   $sub = (($r$0581) + -1)|0;
   $arrayidx528 = (($add$ptr13) + ($sub<<3)|0);
   $894 = $arrayidx528;
   $895 = $894;
   $896 = HEAP32[$895>>2]|0;
   $897 = (($894) + 4)|0;
   $898 = $897;
   $899 = HEAP32[$898>>2]|0;
   $add532 = (($r$0581) + 16)|0;
   $arrayidx533 = (($add$ptr13) + ($add532<<3)|0);
   $900 = $arrayidx533;
   $901 = $900;
   HEAP32[$901>>2] = $896;
   $902 = (($900) + 4)|0;
   $903 = $902;
   HEAP32[$903>>2] = $899;
   $arrayidx538 = (($kw) + ($sub<<3)|0);
   $904 = $arrayidx538;
   $905 = $904;
   $906 = HEAP32[$905>>2]|0;
   $907 = (($904) + 4)|0;
   $908 = $907;
   $909 = HEAP32[$908>>2]|0;
   $arrayidx543 = (($kw) + ($add429<<3)|0);
   $910 = $arrayidx543;
   $911 = $910;
   HEAP32[$911>>2] = $906;
   $912 = (($910) + 4)|0;
   $913 = $912;
   HEAP32[$913>>2] = $909;
   $914 = (_i64Add(($754|0),($755|0),($762|0),($763|0))|0);
   $915 = (getTempRet0() | 0);
   $916 = (_bitshift64Shl(($762|0),($763|0),41)|0);
   $917 = (getTempRet0() | 0);
   $918 = (_bitshift64Lshr(($762|0),($763|0),23)|0);
   $919 = (getTempRet0() | 0);
   $920 = $916 | $918;
   $921 = $917 | $919;
   $922 = $920 ^ $914;
   $923 = $921 ^ $915;
   $924 = (_i64Add(($770|0),($771|0),($778|0),($779|0))|0);
   $925 = (getTempRet0() | 0);
   $926 = (_bitshift64Shl(($778|0),($779|0),9)|0);
   $927 = (getTempRet0() | 0);
   $928 = (_bitshift64Lshr(($778|0),($779|0),55)|0);
   $929 = (getTempRet0() | 0);
   $930 = $926 | $928;
   $931 = $927 | $929;
   $932 = $930 ^ $924;
   $933 = $931 ^ $925;
   $934 = (_i64Add(($786|0),($787|0),($794|0),($795|0))|0);
   $935 = (getTempRet0() | 0);
   $936 = (_bitshift64Shl(($794|0),($795|0),37)|0);
   $937 = (getTempRet0() | 0);
   $938 = (_bitshift64Lshr(($794|0),($795|0),27)|0);
   $939 = (getTempRet0() | 0);
   $940 = $936 | $938;
   $941 = $937 | $939;
   $942 = $940 ^ $934;
   $943 = $941 ^ $935;
   $944 = (_i64Add(($802|0),($803|0),($810|0),($811|0))|0);
   $945 = (getTempRet0() | 0);
   $946 = (_bitshift64Shl(($810|0),($811|0),31)|0);
   $947 = (getTempRet0() | 0);
   $948 = (_bitshift64Lshr(($810|0),($811|0),33)|0);
   $949 = (getTempRet0() | 0);
   $950 = $946 | $948;
   $951 = $947 | $949;
   $952 = $950 ^ $944;
   $953 = $951 ^ $945;
   $954 = (_i64Add(($818|0),($819|0),($826|0),($827|0))|0);
   $955 = (getTempRet0() | 0);
   $956 = (_bitshift64Shl(($826|0),($827|0),12)|0);
   $957 = (getTempRet0() | 0);
   $958 = (_bitshift64Lshr(($826|0),($827|0),52)|0);
   $959 = (getTempRet0() | 0);
   $960 = $956 | $958;
   $961 = $957 | $959;
   $962 = $960 ^ $954;
   $963 = $961 ^ $955;
   $964 = (_i64Add(($834|0),($835|0),($842|0),($843|0))|0);
   $965 = (getTempRet0() | 0);
   $966 = (_bitshift64Shl(($842|0),($843|0),47)|0);
   $967 = (getTempRet0() | 0);
   $968 = (_bitshift64Lshr(($842|0),($843|0),17)|0);
   $969 = (getTempRet0() | 0);
   $970 = $966 | $968;
   $971 = $967 | $969;
   $972 = $970 ^ $964;
   $973 = $971 ^ $965;
   $974 = (_i64Add(($850|0),($851|0),($866|0),($867|0))|0);
   $975 = (getTempRet0() | 0);
   $976 = (_bitshift64Shl(($866|0),($867|0),44)|0);
   $977 = (getTempRet0() | 0);
   $978 = (_bitshift64Lshr(($866|0),($867|0),20)|0);
   $979 = (getTempRet0() | 0);
   $980 = $976 | $978;
   $981 = $977 | $979;
   $982 = $980 ^ $974;
   $983 = $981 ^ $975;
   $984 = (_i64Add(($882|0),($883|0),($892|0),($893|0))|0);
   $985 = (getTempRet0() | 0);
   $986 = (_bitshift64Shl(($892|0),($893|0),30)|0);
   $987 = (getTempRet0() | 0);
   $988 = (_bitshift64Lshr(($892|0),($893|0),34)|0);
   $989 = (getTempRet0() | 0);
   $990 = $986 | $988;
   $991 = $987 | $989;
   $992 = $990 ^ $984;
   $993 = $991 ^ $985;
   $994 = (_i64Add(($962|0),($963|0),($914|0),($915|0))|0);
   $995 = (getTempRet0() | 0);
   $996 = (_bitshift64Shl(($962|0),($963|0),16)|0);
   $997 = (getTempRet0() | 0);
   $998 = (_bitshift64Lshr(($962|0),($963|0),48)|0);
   $999 = (getTempRet0() | 0);
   $1000 = $996 | $998;
   $1001 = $997 | $999;
   $1002 = $1000 ^ $994;
   $1003 = $1001 ^ $995;
   $1004 = (_i64Add(($982|0),($983|0),($924|0),($925|0))|0);
   $1005 = (getTempRet0() | 0);
   $1006 = (_bitshift64Shl(($982|0),($983|0),34)|0);
   $1007 = (getTempRet0() | 0);
   $1008 = (_bitshift64Lshr(($982|0),($983|0),30)|0);
   $1009 = (getTempRet0() | 0);
   $1010 = $1006 | $1008;
   $1011 = $1007 | $1009;
   $1012 = $1010 ^ $1004;
   $1013 = $1011 ^ $1005;
   $1014 = (_i64Add(($972|0),($973|0),($944|0),($945|0))|0);
   $1015 = (getTempRet0() | 0);
   $1016 = (_bitshift64Shl(($972|0),($973|0),56)|0);
   $1017 = (getTempRet0() | 0);
   $1018 = (_bitshift64Lshr(($972|0),($973|0),8)|0);
   $1019 = (getTempRet0() | 0);
   $1020 = $1016 | $1018;
   $1021 = $1017 | $1019;
   $1022 = $1020 ^ $1014;
   $1023 = $1021 ^ $1015;
   $1024 = (_i64Add(($992|0),($993|0),($934|0),($935|0))|0);
   $1025 = (getTempRet0() | 0);
   $1026 = (_bitshift64Shl(($992|0),($993|0),51)|0);
   $1027 = (getTempRet0() | 0);
   $1028 = (_bitshift64Lshr(($992|0),($993|0),13)|0);
   $1029 = (getTempRet0() | 0);
   $1030 = $1026 | $1028;
   $1031 = $1027 | $1029;
   $1032 = $1030 ^ $1024;
   $1033 = $1031 ^ $1025;
   $1034 = (_i64Add(($964|0),($965|0),($952|0),($953|0))|0);
   $1035 = (getTempRet0() | 0);
   $1036 = (_bitshift64Shl(($952|0),($953|0),4)|0);
   $1037 = (getTempRet0() | 0);
   $1038 = (_bitshift64Lshr(($952|0),($953|0),60)|0);
   $1039 = (getTempRet0() | 0);
   $1040 = $1036 | $1038;
   $1041 = $1037 | $1039;
   $1042 = $1034 ^ $1040;
   $1043 = $1035 ^ $1041;
   $1044 = (_i64Add(($974|0),($975|0),($932|0),($933|0))|0);
   $1045 = (getTempRet0() | 0);
   $1046 = (_bitshift64Shl(($932|0),($933|0),53)|0);
   $1047 = (getTempRet0() | 0);
   $1048 = (_bitshift64Lshr(($932|0),($933|0),11)|0);
   $1049 = (getTempRet0() | 0);
   $1050 = $1046 | $1048;
   $1051 = $1047 | $1049;
   $1052 = $1044 ^ $1050;
   $1053 = $1045 ^ $1051;
   $1054 = (_i64Add(($984|0),($985|0),($942|0),($943|0))|0);
   $1055 = (getTempRet0() | 0);
   $1056 = (_bitshift64Shl(($942|0),($943|0),42)|0);
   $1057 = (getTempRet0() | 0);
   $1058 = (_bitshift64Lshr(($942|0),($943|0),22)|0);
   $1059 = (getTempRet0() | 0);
   $1060 = $1056 | $1058;
   $1061 = $1057 | $1059;
   $1062 = $1054 ^ $1060;
   $1063 = $1055 ^ $1061;
   $1064 = (_i64Add(($954|0),($955|0),($922|0),($923|0))|0);
   $1065 = (getTempRet0() | 0);
   $1066 = (_bitshift64Shl(($922|0),($923|0),41)|0);
   $1067 = (getTempRet0() | 0);
   $1068 = (_bitshift64Lshr(($922|0),($923|0),23)|0);
   $1069 = (getTempRet0() | 0);
   $1070 = $1066 | $1068;
   $1071 = $1067 | $1069;
   $1072 = $1064 ^ $1070;
   $1073 = $1065 ^ $1071;
   $1074 = (_i64Add(($1042|0),($1043|0),($994|0),($995|0))|0);
   $1075 = (getTempRet0() | 0);
   $1076 = (_bitshift64Shl(($1042|0),($1043|0),31)|0);
   $1077 = (getTempRet0() | 0);
   $1078 = (_bitshift64Lshr(($1042|0),($1043|0),33)|0);
   $1079 = (getTempRet0() | 0);
   $1080 = $1076 | $1078;
   $1081 = $1077 | $1079;
   $1082 = $1080 ^ $1074;
   $1083 = $1081 ^ $1075;
   $1084 = (_i64Add(($1062|0),($1063|0),($1004|0),($1005|0))|0);
   $1085 = (getTempRet0() | 0);
   $1086 = (_bitshift64Shl(($1062|0),($1063|0),44)|0);
   $1087 = (getTempRet0() | 0);
   $1088 = (_bitshift64Lshr(($1062|0),($1063|0),20)|0);
   $1089 = (getTempRet0() | 0);
   $1090 = $1086 | $1088;
   $1091 = $1087 | $1089;
   $1092 = $1090 ^ $1084;
   $1093 = $1091 ^ $1085;
   $1094 = (_i64Add(($1024|0),($1025|0),($1052|0),($1053|0))|0);
   $1095 = (getTempRet0() | 0);
   $1096 = (_bitshift64Shl(($1052|0),($1053|0),47)|0);
   $1097 = (getTempRet0() | 0);
   $1098 = (_bitshift64Lshr(($1052|0),($1053|0),17)|0);
   $1099 = (getTempRet0() | 0);
   $1100 = $1096 | $1098;
   $1101 = $1097 | $1099;
   $1102 = $1094 ^ $1100;
   $1103 = $1095 ^ $1101;
   $1104 = (_i64Add(($1014|0),($1015|0),($1072|0),($1073|0))|0);
   $1105 = (getTempRet0() | 0);
   $1106 = (_bitshift64Shl(($1072|0),($1073|0),46)|0);
   $1107 = (getTempRet0() | 0);
   $1108 = (_bitshift64Lshr(($1072|0),($1073|0),18)|0);
   $1109 = (getTempRet0() | 0);
   $1110 = $1106 | $1108;
   $1111 = $1107 | $1109;
   $1112 = $1104 ^ $1110;
   $1113 = $1105 ^ $1111;
   $1114 = (_i64Add(($1032|0),($1033|0),($1044|0),($1045|0))|0);
   $1115 = (getTempRet0() | 0);
   $1116 = (_bitshift64Shl(($1032|0),($1033|0),19)|0);
   $1117 = (getTempRet0() | 0);
   $1118 = (_bitshift64Lshr(($1032|0),($1033|0),45)|0);
   $1119 = (getTempRet0() | 0);
   $1120 = $1116 | $1118;
   $1121 = $1117 | $1119;
   $1122 = $1120 ^ $1114;
   $1123 = $1121 ^ $1115;
   $1124 = (_i64Add(($1012|0),($1013|0),($1054|0),($1055|0))|0);
   $1125 = (getTempRet0() | 0);
   $1126 = (_bitshift64Shl(($1012|0),($1013|0),42)|0);
   $1127 = (getTempRet0() | 0);
   $1128 = (_bitshift64Lshr(($1012|0),($1013|0),22)|0);
   $1129 = (getTempRet0() | 0);
   $1130 = $1126 | $1128;
   $1131 = $1127 | $1129;
   $1132 = $1130 ^ $1124;
   $1133 = $1131 ^ $1125;
   $1134 = (_i64Add(($1022|0),($1023|0),($1064|0),($1065|0))|0);
   $1135 = (getTempRet0() | 0);
   $1136 = (_bitshift64Shl(($1022|0),($1023|0),44)|0);
   $1137 = (getTempRet0() | 0);
   $1138 = (_bitshift64Lshr(($1022|0),($1023|0),20)|0);
   $1139 = (getTempRet0() | 0);
   $1140 = $1136 | $1138;
   $1141 = $1137 | $1139;
   $1142 = $1140 ^ $1134;
   $1143 = $1141 ^ $1135;
   $1144 = (_i64Add(($1002|0),($1003|0),($1034|0),($1035|0))|0);
   $1145 = (getTempRet0() | 0);
   $1146 = (_bitshift64Shl(($1002|0),($1003|0),25)|0);
   $1147 = (getTempRet0() | 0);
   $1148 = (_bitshift64Lshr(($1002|0),($1003|0),39)|0);
   $1149 = (getTempRet0() | 0);
   $1150 = $1146 | $1148;
   $1151 = $1147 | $1149;
   $1152 = $1150 ^ $1144;
   $1153 = $1151 ^ $1145;
   $1154 = (_i64Add(($1122|0),($1123|0),($1074|0),($1075|0))|0);
   $1155 = (getTempRet0() | 0);
   $1156 = (_bitshift64Shl(($1122|0),($1123|0),9)|0);
   $1157 = (getTempRet0() | 0);
   $1158 = (_bitshift64Lshr(($1122|0),($1123|0),55)|0);
   $1159 = (getTempRet0() | 0);
   $1160 = $1156 | $1158;
   $1161 = $1157 | $1159;
   $1162 = $1160 ^ $1154;
   $1163 = $1161 ^ $1155;
   $1164 = (_i64Add(($1084|0),($1085|0),($1142|0),($1143|0))|0);
   $1165 = (getTempRet0() | 0);
   $1166 = (_bitshift64Shl(($1142|0),($1143|0),48)|0);
   $1167 = (getTempRet0() | 0);
   $1168 = (_bitshift64Lshr(($1142|0),($1143|0),16)|0);
   $1169 = (getTempRet0() | 0);
   $1170 = $1166 | $1168;
   $1171 = $1167 | $1169;
   $1172 = $1164 ^ $1170;
   $1173 = $1165 ^ $1171;
   $1174 = (_i64Add(($1132|0),($1133|0),($1104|0),($1105|0))|0);
   $1175 = (getTempRet0() | 0);
   $1176 = (_bitshift64Shl(($1132|0),($1133|0),35)|0);
   $1177 = (getTempRet0() | 0);
   $1178 = (_bitshift64Lshr(($1132|0),($1133|0),29)|0);
   $1179 = (getTempRet0() | 0);
   $1180 = $1176 | $1178;
   $1181 = $1177 | $1179;
   $1182 = $1180 ^ $1174;
   $1183 = $1181 ^ $1175;
   $1184 = (_i64Add(($1094|0),($1095|0),($1152|0),($1153|0))|0);
   $1185 = (getTempRet0() | 0);
   $1186 = (_bitshift64Shl(($1152|0),($1153|0),52)|0);
   $1187 = (getTempRet0() | 0);
   $1188 = (_bitshift64Lshr(($1152|0),($1153|0),12)|0);
   $1189 = (getTempRet0() | 0);
   $1190 = $1186 | $1188;
   $1191 = $1187 | $1189;
   $1192 = $1184 ^ $1190;
   $1193 = $1185 ^ $1191;
   $1194 = (_i64Add(($1124|0),($1125|0),($1112|0),($1113|0))|0);
   $1195 = (getTempRet0() | 0);
   $1196 = (_bitshift64Shl(($1112|0),($1113|0),23)|0);
   $1197 = (getTempRet0() | 0);
   $1198 = (_bitshift64Lshr(($1112|0),($1113|0),41)|0);
   $1199 = (getTempRet0() | 0);
   $1200 = $1196 | $1198;
   $1201 = $1197 | $1199;
   $1202 = $1194 ^ $1200;
   $1203 = $1195 ^ $1201;
   $1204 = (_i64Add(($1092|0),($1093|0),($1134|0),($1135|0))|0);
   $1205 = (getTempRet0() | 0);
   $1206 = (_bitshift64Shl(($1092|0),($1093|0),31)|0);
   $1207 = (getTempRet0() | 0);
   $1208 = (_bitshift64Lshr(($1092|0),($1093|0),33)|0);
   $1209 = (getTempRet0() | 0);
   $1210 = $1206 | $1208;
   $1211 = $1207 | $1209;
   $1212 = $1210 ^ $1204;
   $1213 = $1211 ^ $1205;
   $1214 = (_i64Add(($1102|0),($1103|0),($1144|0),($1145|0))|0);
   $1215 = (getTempRet0() | 0);
   $1216 = (_bitshift64Shl(($1102|0),($1103|0),37)|0);
   $1217 = (getTempRet0() | 0);
   $1218 = (_bitshift64Lshr(($1102|0),($1103|0),27)|0);
   $1219 = (getTempRet0() | 0);
   $1220 = $1216 | $1218;
   $1221 = $1217 | $1219;
   $1222 = $1220 ^ $1214;
   $1223 = $1221 ^ $1215;
   $1224 = (_i64Add(($1114|0),($1115|0),($1082|0),($1083|0))|0);
   $1225 = (getTempRet0() | 0);
   $1226 = (_bitshift64Shl(($1082|0),($1083|0),20)|0);
   $1227 = (getTempRet0() | 0);
   $1228 = (_bitshift64Lshr(($1082|0),($1083|0),44)|0);
   $1229 = (getTempRet0() | 0);
   $1230 = $1226 | $1228;
   $1231 = $1227 | $1229;
   $1232 = $1224 ^ $1230;
   $1233 = $1225 ^ $1231;
   $1234 = (_i64Add(($1154|0),($1155|0),($758|0),($761|0))|0);
   $1235 = (getTempRet0() | 0);
   $1236 = (_i64Add(($1202|0),($1203|0),($766|0),($769|0))|0);
   $1237 = (getTempRet0() | 0);
   $1238 = (_i64Add(($1164|0),($1165|0),($774|0),($777|0))|0);
   $1239 = (getTempRet0() | 0);
   $1240 = (_i64Add(($1222|0),($1223|0),($782|0),($785|0))|0);
   $1241 = (getTempRet0() | 0);
   $1242 = (_i64Add(($1184|0),($1185|0),($790|0),($793|0))|0);
   $1243 = (getTempRet0() | 0);
   $1244 = (_i64Add(($1212|0),($1213|0),($798|0),($801|0))|0);
   $1245 = (getTempRet0() | 0);
   $1246 = (_i64Add(($1174|0),($1175|0),($806|0),($809|0))|0);
   $1247 = (getTempRet0() | 0);
   $1248 = (_i64Add(($1232|0),($1233|0),($814|0),($817|0))|0);
   $1249 = (getTempRet0() | 0);
   $1250 = (_i64Add(($1204|0),($1205|0),($822|0),($825|0))|0);
   $1251 = (getTempRet0() | 0);
   $1252 = (_i64Add(($1192|0),($1193|0),($830|0),($833|0))|0);
   $1253 = (getTempRet0() | 0);
   $1254 = (_i64Add(($1214|0),($1215|0),($838|0),($841|0))|0);
   $1255 = (getTempRet0() | 0);
   $1256 = (_i64Add(($1172|0),($1173|0),($846|0),($849|0))|0);
   $1257 = (getTempRet0() | 0);
   $1258 = (_i64Add(($1224|0),($1225|0),($854|0),($857|0))|0);
   $1259 = (getTempRet0() | 0);
   $1260 = (_i64Add(($1182|0),($1183|0),($880|0),($881|0))|0);
   $1261 = (getTempRet0() | 0);
   $1262 = (_i64Add(($906|0),($909|0),($886|0),($889|0))|0);
   $1263 = (getTempRet0() | 0);
   $1264 = (_i64Add(($1262|0),($1263|0),($1194|0),($1195|0))|0);
   $1265 = (getTempRet0() | 0);
   $1266 = (_i64Add(($r$0581|0),0,1,0)|0);
   $1267 = (getTempRet0() | 0);
   $1268 = (_i64Add(($1266|0),($1267|0),($896|0),($899|0))|0);
   $1269 = (getTempRet0() | 0);
   $1270 = (_i64Add(($1268|0),($1269|0),($1162|0),($1163|0))|0);
   $1271 = (getTempRet0() | 0);
   $add823 = (($r$0581) + 17)|0;
   $arrayidx824 = (($add$ptr13) + ($add823<<3)|0);
   $1272 = $arrayidx824;
   $1273 = $1272;
   HEAP32[$1273>>2] = $750;
   $1274 = (($1272) + 4)|0;
   $1275 = $1274;
   HEAP32[$1275>>2] = $753;
   $arrayidx834 = (($kw) + ($add435<<3)|0);
   $1276 = $arrayidx834;
   $1277 = $1276;
   HEAP32[$1277>>2] = $860;
   $1278 = (($1276) + 4)|0;
   $1279 = $1278;
   HEAP32[$1279>>2] = $863;
   $cmp = ($add429>>>0)<(21);
   if ($cmp) {
    $396 = $1234;$397 = $1235;$398 = $1236;$399 = $1237;$410 = $1238;$411 = $1239;$412 = $1240;$413 = $1241;$424 = $1242;$425 = $1243;$426 = $1244;$427 = $1245;$438 = $1246;$439 = $1247;$440 = $1248;$441 = $1249;$452 = $1250;$453 = $1251;$454 = $1252;$455 = $1253;$466 = $1254;$467 = $1255;$468 = $1256;$469 = $1257;$480 = $1258;$481 = $1259;$482 = $1260;$483 = $1261;$494 = $1270;$495 = $1271;$496 = $1264;$497 = $1265;$r$0581 = $add429;
   } else {
    break;
   }
  }
  $1280 = $1234 ^ $266;
  $1281 = $1235 ^ $269;
  $1282 = $arrayidx11;
  $1283 = $1282;
  HEAP32[$1283>>2] = $1280;
  $1284 = (($1282) + 4)|0;
  $1285 = $1284;
  HEAP32[$1285>>2] = $1281;
  $1286 = $1236 ^ $272;
  $1287 = $1237 ^ $275;
  $1288 = $arrayidx17;
  $1289 = $1288;
  HEAP32[$1289>>2] = $1286;
  $1290 = (($1288) + 4)|0;
  $1291 = $1290;
  HEAP32[$1291>>2] = $1287;
  $1292 = $1238 ^ $278;
  $1293 = $1239 ^ $281;
  $1294 = $arrayidx22;
  $1295 = $1294;
  HEAP32[$1295>>2] = $1292;
  $1296 = (($1294) + 4)|0;
  $1297 = $1296;
  HEAP32[$1297>>2] = $1293;
  $1298 = $1240 ^ $284;
  $1299 = $1241 ^ $287;
  $1300 = $arrayidx27;
  $1301 = $1300;
  HEAP32[$1301>>2] = $1298;
  $1302 = (($1300) + 4)|0;
  $1303 = $1302;
  HEAP32[$1303>>2] = $1299;
  $1304 = $1242 ^ $290;
  $1305 = $1243 ^ $293;
  $1306 = $arrayidx32;
  $1307 = $1306;
  HEAP32[$1307>>2] = $1304;
  $1308 = (($1306) + 4)|0;
  $1309 = $1308;
  HEAP32[$1309>>2] = $1305;
  $1310 = $1244 ^ $296;
  $1311 = $1245 ^ $299;
  $1312 = $arrayidx37;
  $1313 = $1312;
  HEAP32[$1313>>2] = $1310;
  $1314 = (($1312) + 4)|0;
  $1315 = $1314;
  HEAP32[$1315>>2] = $1311;
  $1316 = $1246 ^ $302;
  $1317 = $1247 ^ $305;
  $1318 = $arrayidx42;
  $1319 = $1318;
  HEAP32[$1319>>2] = $1316;
  $1320 = (($1318) + 4)|0;
  $1321 = $1320;
  HEAP32[$1321>>2] = $1317;
  $1322 = $1248 ^ $308;
  $1323 = $1249 ^ $311;
  $1324 = $arrayidx47;
  $1325 = $1324;
  HEAP32[$1325>>2] = $1322;
  $1326 = (($1324) + 4)|0;
  $1327 = $1326;
  HEAP32[$1327>>2] = $1323;
  $1328 = $1250 ^ $314;
  $1329 = $1251 ^ $317;
  $1330 = $arrayidx52;
  $1331 = $1330;
  HEAP32[$1331>>2] = $1328;
  $1332 = (($1330) + 4)|0;
  $1333 = $1332;
  HEAP32[$1333>>2] = $1329;
  $1334 = $1252 ^ $320;
  $1335 = $1253 ^ $323;
  $1336 = $arrayidx57;
  $1337 = $1336;
  HEAP32[$1337>>2] = $1334;
  $1338 = (($1336) + 4)|0;
  $1339 = $1338;
  HEAP32[$1339>>2] = $1335;
  $1340 = $1254 ^ $326;
  $1341 = $1255 ^ $329;
  $1342 = $arrayidx62;
  $1343 = $1342;
  HEAP32[$1343>>2] = $1340;
  $1344 = (($1342) + 4)|0;
  $1345 = $1344;
  HEAP32[$1345>>2] = $1341;
  $1346 = $1256 ^ $332;
  $1347 = $1257 ^ $335;
  $1348 = $arrayidx67;
  $1349 = $1348;
  HEAP32[$1349>>2] = $1346;
  $1350 = (($1348) + 4)|0;
  $1351 = $1350;
  HEAP32[$1351>>2] = $1347;
  $1352 = $1258 ^ $338;
  $1353 = $1259 ^ $341;
  $1354 = $arrayidx72;
  $1355 = $1354;
  HEAP32[$1355>>2] = $1352;
  $1356 = (($1354) + 4)|0;
  $1357 = $1356;
  HEAP32[$1357>>2] = $1353;
  $1358 = $1260 ^ $344;
  $1359 = $1261 ^ $347;
  $1360 = $arrayidx77;
  $1361 = $1360;
  HEAP32[$1361>>2] = $1358;
  $1362 = (($1360) + 4)|0;
  $1363 = $1362;
  HEAP32[$1363>>2] = $1359;
  $1364 = $1264 ^ $350;
  $1365 = $1265 ^ $353;
  $1366 = $arrayidx82;
  $1367 = $1366;
  HEAP32[$1367>>2] = $1364;
  $1368 = (($1366) + 4)|0;
  $1369 = $1368;
  HEAP32[$1369>>2] = $1365;
  $1370 = $1270 ^ $356;
  $1371 = $1271 ^ $359;
  $1372 = $arrayidx87;
  $1373 = $1372;
  HEAP32[$1373>>2] = $1370;
  $1374 = (($1372) + 4)|0;
  $1375 = $1374;
  HEAP32[$1375>>2] = $1371;
  $1376 = $arrayidx7;
  $1377 = $1376;
  $1378 = HEAP32[$1377>>2]|0;
  $1379 = (($1376) + 4)|0;
  $1380 = $1379;
  $1381 = HEAP32[$1380>>2]|0;
  $1382 = $1381 & -1073741825;
  $1383 = $arrayidx7;
  $1384 = $1383;
  HEAP32[$1384>>2] = $1378;
  $1385 = (($1383) + 4)|0;
  $1386 = $1385;
  HEAP32[$1386>>2] = $1382;
  $dec = (($blkCnt$addr$0) + -1)|0;
  $tobool = ($dec|0)==(0);
  if ($tobool) {
   break;
  }
  $add$ptr903 = ((($blkPtr$addr$0)) + 128|0);
  $1387 = $kw;
  $1388 = $1387;
  $1389 = HEAP32[$1388>>2]|0;
  $1390 = (($1387) + 4)|0;
  $1391 = $1390;
  $1392 = HEAP32[$1391>>2]|0;
  $116 = $1389;$117 = $1392;$126 = $1280;$129 = $1281;$132 = $1286;$135 = $1287;$138 = $1292;$141 = $1293;$144 = $1298;$147 = $1299;$150 = $1304;$153 = $1305;$156 = $1310;$159 = $1311;$162 = $1316;$165 = $1317;$168 = $1322;$171 = $1323;$174 = $1328;$177 = $1329;$180 = $1334;$183 = $1335;$186 = $1340;$189 = $1341;$192 = $1346;$195 = $1347;$198 = $1352;$201 = $1353;$204 = $1358;$207 = $1359;$210 = $1364;$213 = $1365;$216 = $1370;$219 = $1371;$257 = $1378;$259 = $1382;$blkCnt$addr$0 = $dec;$blkPtr$addr$0 = $add$ptr903;
 }
 $1393 = $kw;
 $1394 = $1393;
 $1395 = HEAP32[$1394>>2]|0;
 $1396 = (($1393) + 4)|0;
 $1397 = $1396;
 $1398 = HEAP32[$1397>>2]|0;
 $1399 = $arrayidx;
 $1400 = $1399;
 HEAP32[$1400>>2] = $1395;
 $1401 = (($1399) + 4)|0;
 $1402 = $1401;
 HEAP32[$1402>>2] = $1398;
 $1403 = $arrayidx4;
 $1404 = $1403;
 HEAP32[$1404>>2] = $1378;
 $1405 = (($1403) + 4)|0;
 $1406 = $1405;
 HEAP32[$1406>>2] = $1382;
 STACKTOP = sp;return;
}
function _Skein_256_Process_Block($ctx,$blkPtr,$blkCnt,$byteCntAdd) {
 $ctx = $ctx|0;
 $blkPtr = $blkPtr|0;
 $blkCnt = $blkCnt|0;
 $byteCntAdd = $byteCntAdd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $62$phi = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $add$ptr87 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx16 = 0, $arrayidx21 = 0;
 var $arrayidx26 = 0, $arrayidx4 = 0, $blkCnt$addr$0 = 0, $blkPtr$addr$0 = 0, $dec = 0, $tobool = 0, $w$sroa$5$0$$sroa_idx = 0, $w$sroa$7$0$$sroa_idx = 0, $w$sroa$9$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arrayidx = ((($ctx)) + 8|0);
 $0 = $arrayidx;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $arrayidx4 = ((($ctx)) + 16|0);
 $6 = $arrayidx4;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $arrayidx11 = ((($ctx)) + 24|0);
 $arrayidx16 = ((($ctx)) + 32|0);
 $arrayidx21 = ((($ctx)) + 40|0);
 $arrayidx26 = ((($ctx)) + 48|0);
 $12 = (($blkCnt) + -1)|0;
 $13 = (_i64Add(($12|0),0,1,0)|0);
 $14 = (getTempRet0() | 0);
 $15 = (___muldi3(($13|0),($14|0),($byteCntAdd|0),0)|0);
 $16 = (getTempRet0() | 0);
 $17 = $arrayidx11;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $arrayidx16;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $arrayidx21;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = $arrayidx26;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 4)|0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = $2;$42 = $5;$46 = $19;$48 = $22;$50 = $25;$52 = $28;$54 = $31;$56 = $34;$58 = $37;$60 = $40;$62 = $8;$64 = $11;$blkCnt$addr$0 = $blkCnt;$blkPtr$addr$0 = $blkPtr;
 while(1) {
  $43 = (_i64Add(($41|0),($42|0),($byteCntAdd|0),0)|0);
  $44 = (getTempRet0() | 0);
  $45 = $46 ^ -1443096030;
  $47 = $48 ^ 466688986;
  $49 = $45 ^ $50;
  $51 = $47 ^ $52;
  $53 = $49 ^ $54;
  $55 = $51 ^ $56;
  $57 = $53 ^ $58;
  $59 = $55 ^ $60;
  $61 = $43 ^ $62;
  $63 = $44 ^ $64;
  $65 = $blkPtr$addr$0;
  $66 = $65;
  $67 = HEAPU8[$66>>0]|(HEAPU8[$66+1>>0]<<8)|(HEAPU8[$66+2>>0]<<16)|(HEAPU8[$66+3>>0]<<24);
  $68 = (($65) + 4)|0;
  $69 = $68;
  $70 = HEAPU8[$69>>0]|(HEAPU8[$69+1>>0]<<8)|(HEAPU8[$69+2>>0]<<16)|(HEAPU8[$69+3>>0]<<24);
  $w$sroa$5$0$$sroa_idx = ((($blkPtr$addr$0)) + 8|0);
  $71 = $w$sroa$5$0$$sroa_idx;
  $72 = $71;
  $73 = HEAPU8[$72>>0]|(HEAPU8[$72+1>>0]<<8)|(HEAPU8[$72+2>>0]<<16)|(HEAPU8[$72+3>>0]<<24);
  $74 = (($71) + 4)|0;
  $75 = $74;
  $76 = HEAPU8[$75>>0]|(HEAPU8[$75+1>>0]<<8)|(HEAPU8[$75+2>>0]<<16)|(HEAPU8[$75+3>>0]<<24);
  $w$sroa$7$0$$sroa_idx = ((($blkPtr$addr$0)) + 16|0);
  $77 = $w$sroa$7$0$$sroa_idx;
  $78 = $77;
  $79 = HEAPU8[$78>>0]|(HEAPU8[$78+1>>0]<<8)|(HEAPU8[$78+2>>0]<<16)|(HEAPU8[$78+3>>0]<<24);
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAPU8[$81>>0]|(HEAPU8[$81+1>>0]<<8)|(HEAPU8[$81+2>>0]<<16)|(HEAPU8[$81+3>>0]<<24);
  $w$sroa$9$0$$sroa_idx = ((($blkPtr$addr$0)) + 24|0);
  $83 = $w$sroa$9$0$$sroa_idx;
  $84 = $83;
  $85 = HEAPU8[$84>>0]|(HEAPU8[$84+1>>0]<<8)|(HEAPU8[$84+2>>0]<<16)|(HEAPU8[$84+3>>0]<<24);
  $86 = (($83) + 4)|0;
  $87 = $86;
  $88 = HEAPU8[$87>>0]|(HEAPU8[$87+1>>0]<<8)|(HEAPU8[$87+2>>0]<<16)|(HEAPU8[$87+3>>0]<<24);
  $89 = (_i64Add(($67|0),($70|0),($46|0),($48|0))|0);
  $90 = (getTempRet0() | 0);
  $91 = (_i64Add(($50|0),($52|0),($43|0),($44|0))|0);
  $92 = (getTempRet0() | 0);
  $93 = (_i64Add(($91|0),($92|0),($73|0),($76|0))|0);
  $94 = (getTempRet0() | 0);
  $95 = (_i64Add(($85|0),($88|0),($58|0),($60|0))|0);
  $96 = (getTempRet0() | 0);
  $add$ptr87 = ((($blkPtr$addr$0)) + 32|0);
  $97 = (_i64Add(($89|0),($90|0),($93|0),($94|0))|0);
  $98 = (getTempRet0() | 0);
  $99 = (_bitshift64Shl(($93|0),($94|0),14)|0);
  $100 = (getTempRet0() | 0);
  $101 = (_bitshift64Lshr(($93|0),($94|0),50)|0);
  $102 = (getTempRet0() | 0);
  $103 = $99 | $101;
  $104 = $100 | $102;
  $105 = $103 ^ $97;
  $106 = $104 ^ $98;
  $107 = (_i64Add(($54|0),($56|0),($62|0),($64|0))|0);
  $108 = (getTempRet0() | 0);
  $109 = (_i64Add(($107|0),($108|0),($79|0),($82|0))|0);
  $110 = (getTempRet0() | 0);
  $111 = (_i64Add(($109|0),($110|0),($95|0),($96|0))|0);
  $112 = (getTempRet0() | 0);
  $113 = (_bitshift64Shl(($95|0),($96|0),16)|0);
  $114 = (getTempRet0() | 0);
  $115 = (_bitshift64Lshr(($95|0),($96|0),48)|0);
  $116 = (getTempRet0() | 0);
  $117 = $113 | $115;
  $118 = $114 | $116;
  $119 = $117 ^ $111;
  $120 = $118 ^ $112;
  $121 = (_i64Add(($119|0),($120|0),($97|0),($98|0))|0);
  $122 = (getTempRet0() | 0);
  $123 = (_bitshift64Shl(($119|0),($120|0),52)|0);
  $124 = (getTempRet0() | 0);
  $125 = (_bitshift64Lshr(($119|0),($120|0),12)|0);
  $126 = (getTempRet0() | 0);
  $127 = $123 | $125;
  $128 = $124 | $126;
  $129 = $127 ^ $121;
  $130 = $128 ^ $122;
  $131 = (_i64Add(($105|0),($106|0),($111|0),($112|0))|0);
  $132 = (getTempRet0() | 0);
  $133 = (_bitshift64Shl(($105|0),($106|0),57)|0);
  $134 = (getTempRet0() | 0);
  $135 = (_bitshift64Lshr(($105|0),($106|0),7)|0);
  $136 = (getTempRet0() | 0);
  $137 = $133 | $135;
  $138 = $134 | $136;
  $139 = $137 ^ $131;
  $140 = $138 ^ $132;
  $141 = (_i64Add(($139|0),($140|0),($121|0),($122|0))|0);
  $142 = (getTempRet0() | 0);
  $143 = (_bitshift64Shl(($139|0),($140|0),23)|0);
  $144 = (getTempRet0() | 0);
  $145 = (_bitshift64Lshr(($139|0),($140|0),41)|0);
  $146 = (getTempRet0() | 0);
  $147 = $143 | $145;
  $148 = $144 | $146;
  $149 = $147 ^ $141;
  $150 = $148 ^ $142;
  $151 = (_i64Add(($129|0),($130|0),($131|0),($132|0))|0);
  $152 = (getTempRet0() | 0);
  $153 = (_bitshift64Shl(($129|0),($130|0),40)|0);
  $154 = (getTempRet0() | 0);
  $155 = (_bitshift64Lshr(($129|0),($130|0),24)|0);
  $156 = (getTempRet0() | 0);
  $157 = $153 | $155;
  $158 = $154 | $156;
  $159 = $157 ^ $151;
  $160 = $158 ^ $152;
  $161 = (_i64Add(($159|0),($160|0),($141|0),($142|0))|0);
  $162 = (getTempRet0() | 0);
  $163 = (_bitshift64Shl(($159|0),($160|0),5)|0);
  $164 = (getTempRet0() | 0);
  $165 = (_bitshift64Lshr(($159|0),($160|0),59)|0);
  $166 = (getTempRet0() | 0);
  $167 = $163 | $165;
  $168 = $164 | $166;
  $169 = $167 ^ $161;
  $170 = $168 ^ $162;
  $171 = (_i64Add(($149|0),($150|0),($151|0),($152|0))|0);
  $172 = (getTempRet0() | 0);
  $173 = (_bitshift64Shl(($149|0),($150|0),37)|0);
  $174 = (getTempRet0() | 0);
  $175 = (_bitshift64Lshr(($149|0),($150|0),27)|0);
  $176 = (getTempRet0() | 0);
  $177 = $173 | $175;
  $178 = $174 | $176;
  $179 = $177 ^ $171;
  $180 = $178 ^ $172;
  $181 = (_i64Add(($161|0),($162|0),($50|0),($52|0))|0);
  $182 = (getTempRet0() | 0);
  $183 = (_i64Add(($179|0),($180|0),($107|0),($108|0))|0);
  $184 = (getTempRet0() | 0);
  $185 = (_i64Add(($58|0),($60|0),($61|0),($63|0))|0);
  $186 = (getTempRet0() | 0);
  $187 = (_i64Add(($171|0),($172|0),($185|0),($186|0))|0);
  $188 = (getTempRet0() | 0);
  $189 = (_i64Add(($57|0),($59|0),1,0)|0);
  $190 = (getTempRet0() | 0);
  $191 = (_i64Add(($189|0),($190|0),($169|0),($170|0))|0);
  $192 = (getTempRet0() | 0);
  $193 = (_i64Add(($181|0),($182|0),($183|0),($184|0))|0);
  $194 = (getTempRet0() | 0);
  $195 = (_bitshift64Shl(($183|0),($184|0),25)|0);
  $196 = (getTempRet0() | 0);
  $197 = (_bitshift64Lshr(($183|0),($184|0),39)|0);
  $198 = (getTempRet0() | 0);
  $199 = $195 | $197;
  $200 = $196 | $198;
  $201 = $199 ^ $193;
  $202 = $200 ^ $194;
  $203 = (_i64Add(($187|0),($188|0),($191|0),($192|0))|0);
  $204 = (getTempRet0() | 0);
  $205 = (_bitshift64Shl(($191|0),($192|0),33)|0);
  $206 = (getTempRet0() | 0);
  $207 = (_bitshift64Lshr(($191|0),($192|0),31)|0);
  $208 = (getTempRet0() | 0);
  $209 = $205 | $207;
  $210 = $206 | $208;
  $211 = $209 ^ $203;
  $212 = $210 ^ $204;
  $213 = (_i64Add(($211|0),($212|0),($193|0),($194|0))|0);
  $214 = (getTempRet0() | 0);
  $215 = (_bitshift64Shl(($211|0),($212|0),46)|0);
  $216 = (getTempRet0() | 0);
  $217 = (_bitshift64Lshr(($211|0),($212|0),18)|0);
  $218 = (getTempRet0() | 0);
  $219 = $215 | $217;
  $220 = $216 | $218;
  $221 = $219 ^ $213;
  $222 = $220 ^ $214;
  $223 = (_i64Add(($201|0),($202|0),($203|0),($204|0))|0);
  $224 = (getTempRet0() | 0);
  $225 = (_bitshift64Shl(($201|0),($202|0),12)|0);
  $226 = (getTempRet0() | 0);
  $227 = (_bitshift64Lshr(($201|0),($202|0),52)|0);
  $228 = (getTempRet0() | 0);
  $229 = $225 | $227;
  $230 = $226 | $228;
  $231 = $229 ^ $223;
  $232 = $230 ^ $224;
  $233 = (_i64Add(($231|0),($232|0),($213|0),($214|0))|0);
  $234 = (getTempRet0() | 0);
  $235 = (_bitshift64Shl(($231|0),($232|0),58)|0);
  $236 = (getTempRet0() | 0);
  $237 = (_bitshift64Lshr(($231|0),($232|0),6)|0);
  $238 = (getTempRet0() | 0);
  $239 = $235 | $237;
  $240 = $236 | $238;
  $241 = $239 ^ $233;
  $242 = $240 ^ $234;
  $243 = (_i64Add(($221|0),($222|0),($223|0),($224|0))|0);
  $244 = (getTempRet0() | 0);
  $245 = (_bitshift64Shl(($221|0),($222|0),22)|0);
  $246 = (getTempRet0() | 0);
  $247 = (_bitshift64Lshr(($221|0),($222|0),42)|0);
  $248 = (getTempRet0() | 0);
  $249 = $245 | $247;
  $250 = $246 | $248;
  $251 = $249 ^ $243;
  $252 = $250 ^ $244;
  $253 = (_i64Add(($251|0),($252|0),($233|0),($234|0))|0);
  $254 = (getTempRet0() | 0);
  $255 = $252 ^ $253;
  $256 = $251 ^ $254;
  $257 = (_i64Add(($241|0),($242|0),($243|0),($244|0))|0);
  $258 = (getTempRet0() | 0);
  $259 = $242 ^ $257;
  $260 = $241 ^ $258;
  $261 = (_i64Add(($253|0),($254|0),($54|0),($56|0))|0);
  $262 = (getTempRet0() | 0);
  $263 = (_i64Add(($259|0),($260|0),($185|0),($186|0))|0);
  $264 = (getTempRet0() | 0);
  $265 = (_i64Add(($57|0),($59|0),($43|0),($44|0))|0);
  $266 = (getTempRet0() | 0);
  $267 = (_i64Add(($257|0),($258|0),($265|0),($266|0))|0);
  $268 = (getTempRet0() | 0);
  $269 = (_i64Add(($46|0),($48|0),2,0)|0);
  $270 = (getTempRet0() | 0);
  $271 = (_i64Add(($269|0),($270|0),($255|0),($256|0))|0);
  $272 = (getTempRet0() | 0);
  $273 = (_i64Add(($261|0),($262|0),($263|0),($264|0))|0);
  $274 = (getTempRet0() | 0);
  $275 = (_bitshift64Shl(($263|0),($264|0),14)|0);
  $276 = (getTempRet0() | 0);
  $277 = (_bitshift64Lshr(($263|0),($264|0),50)|0);
  $278 = (getTempRet0() | 0);
  $279 = $275 | $277;
  $280 = $276 | $278;
  $281 = $279 ^ $273;
  $282 = $280 ^ $274;
  $283 = (_i64Add(($267|0),($268|0),($271|0),($272|0))|0);
  $284 = (getTempRet0() | 0);
  $285 = (_bitshift64Shl(($271|0),($272|0),16)|0);
  $286 = (getTempRet0() | 0);
  $287 = (_bitshift64Lshr(($271|0),($272|0),48)|0);
  $288 = (getTempRet0() | 0);
  $289 = $285 | $287;
  $290 = $286 | $288;
  $291 = $289 ^ $283;
  $292 = $290 ^ $284;
  $293 = (_i64Add(($291|0),($292|0),($273|0),($274|0))|0);
  $294 = (getTempRet0() | 0);
  $295 = (_bitshift64Shl(($291|0),($292|0),52)|0);
  $296 = (getTempRet0() | 0);
  $297 = (_bitshift64Lshr(($291|0),($292|0),12)|0);
  $298 = (getTempRet0() | 0);
  $299 = $295 | $297;
  $300 = $296 | $298;
  $301 = $299 ^ $293;
  $302 = $300 ^ $294;
  $303 = (_i64Add(($281|0),($282|0),($283|0),($284|0))|0);
  $304 = (getTempRet0() | 0);
  $305 = (_bitshift64Shl(($281|0),($282|0),57)|0);
  $306 = (getTempRet0() | 0);
  $307 = (_bitshift64Lshr(($281|0),($282|0),7)|0);
  $308 = (getTempRet0() | 0);
  $309 = $305 | $307;
  $310 = $306 | $308;
  $311 = $309 ^ $303;
  $312 = $310 ^ $304;
  $313 = (_i64Add(($311|0),($312|0),($293|0),($294|0))|0);
  $314 = (getTempRet0() | 0);
  $315 = (_bitshift64Shl(($311|0),($312|0),23)|0);
  $316 = (getTempRet0() | 0);
  $317 = (_bitshift64Lshr(($311|0),($312|0),41)|0);
  $318 = (getTempRet0() | 0);
  $319 = $315 | $317;
  $320 = $316 | $318;
  $321 = $319 ^ $313;
  $322 = $320 ^ $314;
  $323 = (_i64Add(($301|0),($302|0),($303|0),($304|0))|0);
  $324 = (getTempRet0() | 0);
  $325 = (_bitshift64Shl(($301|0),($302|0),40)|0);
  $326 = (getTempRet0() | 0);
  $327 = (_bitshift64Lshr(($301|0),($302|0),24)|0);
  $328 = (getTempRet0() | 0);
  $329 = $325 | $327;
  $330 = $326 | $328;
  $331 = $329 ^ $323;
  $332 = $330 ^ $324;
  $333 = (_i64Add(($331|0),($332|0),($313|0),($314|0))|0);
  $334 = (getTempRet0() | 0);
  $335 = (_bitshift64Shl(($331|0),($332|0),5)|0);
  $336 = (getTempRet0() | 0);
  $337 = (_bitshift64Lshr(($331|0),($332|0),59)|0);
  $338 = (getTempRet0() | 0);
  $339 = $335 | $337;
  $340 = $336 | $338;
  $341 = $339 ^ $333;
  $342 = $340 ^ $334;
  $343 = (_i64Add(($321|0),($322|0),($323|0),($324|0))|0);
  $344 = (getTempRet0() | 0);
  $345 = (_bitshift64Shl(($321|0),($322|0),37)|0);
  $346 = (getTempRet0() | 0);
  $347 = (_bitshift64Lshr(($321|0),($322|0),27)|0);
  $348 = (getTempRet0() | 0);
  $349 = $345 | $347;
  $350 = $346 | $348;
  $351 = $349 ^ $343;
  $352 = $350 ^ $344;
  $353 = (_i64Add(($333|0),($334|0),($58|0),($60|0))|0);
  $354 = (getTempRet0() | 0);
  $355 = (_i64Add(($351|0),($352|0),($265|0),($266|0))|0);
  $356 = (getTempRet0() | 0);
  $357 = (_i64Add(($46|0),($48|0),($62|0),($64|0))|0);
  $358 = (getTempRet0() | 0);
  $359 = (_i64Add(($343|0),($344|0),($357|0),($358|0))|0);
  $360 = (getTempRet0() | 0);
  $361 = (_i64Add(($50|0),($52|0),3,0)|0);
  $362 = (getTempRet0() | 0);
  $363 = (_i64Add(($361|0),($362|0),($341|0),($342|0))|0);
  $364 = (getTempRet0() | 0);
  $365 = (_i64Add(($353|0),($354|0),($355|0),($356|0))|0);
  $366 = (getTempRet0() | 0);
  $367 = (_bitshift64Shl(($355|0),($356|0),25)|0);
  $368 = (getTempRet0() | 0);
  $369 = (_bitshift64Lshr(($355|0),($356|0),39)|0);
  $370 = (getTempRet0() | 0);
  $371 = $367 | $369;
  $372 = $368 | $370;
  $373 = $371 ^ $365;
  $374 = $372 ^ $366;
  $375 = (_i64Add(($359|0),($360|0),($363|0),($364|0))|0);
  $376 = (getTempRet0() | 0);
  $377 = (_bitshift64Shl(($363|0),($364|0),33)|0);
  $378 = (getTempRet0() | 0);
  $379 = (_bitshift64Lshr(($363|0),($364|0),31)|0);
  $380 = (getTempRet0() | 0);
  $381 = $377 | $379;
  $382 = $378 | $380;
  $383 = $381 ^ $375;
  $384 = $382 ^ $376;
  $385 = (_i64Add(($383|0),($384|0),($365|0),($366|0))|0);
  $386 = (getTempRet0() | 0);
  $387 = (_bitshift64Shl(($383|0),($384|0),46)|0);
  $388 = (getTempRet0() | 0);
  $389 = (_bitshift64Lshr(($383|0),($384|0),18)|0);
  $390 = (getTempRet0() | 0);
  $391 = $387 | $389;
  $392 = $388 | $390;
  $393 = $391 ^ $385;
  $394 = $392 ^ $386;
  $395 = (_i64Add(($373|0),($374|0),($375|0),($376|0))|0);
  $396 = (getTempRet0() | 0);
  $397 = (_bitshift64Shl(($373|0),($374|0),12)|0);
  $398 = (getTempRet0() | 0);
  $399 = (_bitshift64Lshr(($373|0),($374|0),52)|0);
  $400 = (getTempRet0() | 0);
  $401 = $397 | $399;
  $402 = $398 | $400;
  $403 = $401 ^ $395;
  $404 = $402 ^ $396;
  $405 = (_i64Add(($403|0),($404|0),($385|0),($386|0))|0);
  $406 = (getTempRet0() | 0);
  $407 = (_bitshift64Shl(($403|0),($404|0),58)|0);
  $408 = (getTempRet0() | 0);
  $409 = (_bitshift64Lshr(($403|0),($404|0),6)|0);
  $410 = (getTempRet0() | 0);
  $411 = $407 | $409;
  $412 = $408 | $410;
  $413 = $411 ^ $405;
  $414 = $412 ^ $406;
  $415 = (_i64Add(($393|0),($394|0),($395|0),($396|0))|0);
  $416 = (getTempRet0() | 0);
  $417 = (_bitshift64Shl(($393|0),($394|0),22)|0);
  $418 = (getTempRet0() | 0);
  $419 = (_bitshift64Lshr(($393|0),($394|0),42)|0);
  $420 = (getTempRet0() | 0);
  $421 = $417 | $419;
  $422 = $418 | $420;
  $423 = $421 ^ $415;
  $424 = $422 ^ $416;
  $425 = (_i64Add(($423|0),($424|0),($405|0),($406|0))|0);
  $426 = (getTempRet0() | 0);
  $427 = $424 ^ $425;
  $428 = $423 ^ $426;
  $429 = (_i64Add(($413|0),($414|0),($415|0),($416|0))|0);
  $430 = (getTempRet0() | 0);
  $431 = $414 ^ $429;
  $432 = $413 ^ $430;
  $433 = (_i64Add(($425|0),($426|0),($57|0),($59|0))|0);
  $434 = (getTempRet0() | 0);
  $435 = (_i64Add(($431|0),($432|0),($357|0),($358|0))|0);
  $436 = (getTempRet0() | 0);
  $437 = (_i64Add(($50|0),($52|0),($61|0),($63|0))|0);
  $438 = (getTempRet0() | 0);
  $439 = (_i64Add(($429|0),($430|0),($437|0),($438|0))|0);
  $440 = (getTempRet0() | 0);
  $441 = (_i64Add(($54|0),($56|0),4,0)|0);
  $442 = (getTempRet0() | 0);
  $443 = (_i64Add(($441|0),($442|0),($427|0),($428|0))|0);
  $444 = (getTempRet0() | 0);
  $445 = (_i64Add(($433|0),($434|0),($435|0),($436|0))|0);
  $446 = (getTempRet0() | 0);
  $447 = (_bitshift64Shl(($435|0),($436|0),14)|0);
  $448 = (getTempRet0() | 0);
  $449 = (_bitshift64Lshr(($435|0),($436|0),50)|0);
  $450 = (getTempRet0() | 0);
  $451 = $447 | $449;
  $452 = $448 | $450;
  $453 = $451 ^ $445;
  $454 = $452 ^ $446;
  $455 = (_i64Add(($439|0),($440|0),($443|0),($444|0))|0);
  $456 = (getTempRet0() | 0);
  $457 = (_bitshift64Shl(($443|0),($444|0),16)|0);
  $458 = (getTempRet0() | 0);
  $459 = (_bitshift64Lshr(($443|0),($444|0),48)|0);
  $460 = (getTempRet0() | 0);
  $461 = $457 | $459;
  $462 = $458 | $460;
  $463 = $461 ^ $455;
  $464 = $462 ^ $456;
  $465 = (_i64Add(($463|0),($464|0),($445|0),($446|0))|0);
  $466 = (getTempRet0() | 0);
  $467 = (_bitshift64Shl(($463|0),($464|0),52)|0);
  $468 = (getTempRet0() | 0);
  $469 = (_bitshift64Lshr(($463|0),($464|0),12)|0);
  $470 = (getTempRet0() | 0);
  $471 = $467 | $469;
  $472 = $468 | $470;
  $473 = $471 ^ $465;
  $474 = $472 ^ $466;
  $475 = (_i64Add(($453|0),($454|0),($455|0),($456|0))|0);
  $476 = (getTempRet0() | 0);
  $477 = (_bitshift64Shl(($453|0),($454|0),57)|0);
  $478 = (getTempRet0() | 0);
  $479 = (_bitshift64Lshr(($453|0),($454|0),7)|0);
  $480 = (getTempRet0() | 0);
  $481 = $477 | $479;
  $482 = $478 | $480;
  $483 = $481 ^ $475;
  $484 = $482 ^ $476;
  $485 = (_i64Add(($483|0),($484|0),($465|0),($466|0))|0);
  $486 = (getTempRet0() | 0);
  $487 = (_bitshift64Shl(($483|0),($484|0),23)|0);
  $488 = (getTempRet0() | 0);
  $489 = (_bitshift64Lshr(($483|0),($484|0),41)|0);
  $490 = (getTempRet0() | 0);
  $491 = $487 | $489;
  $492 = $488 | $490;
  $493 = $491 ^ $485;
  $494 = $492 ^ $486;
  $495 = (_i64Add(($473|0),($474|0),($475|0),($476|0))|0);
  $496 = (getTempRet0() | 0);
  $497 = (_bitshift64Shl(($473|0),($474|0),40)|0);
  $498 = (getTempRet0() | 0);
  $499 = (_bitshift64Lshr(($473|0),($474|0),24)|0);
  $500 = (getTempRet0() | 0);
  $501 = $497 | $499;
  $502 = $498 | $500;
  $503 = $501 ^ $495;
  $504 = $502 ^ $496;
  $505 = (_i64Add(($503|0),($504|0),($485|0),($486|0))|0);
  $506 = (getTempRet0() | 0);
  $507 = (_bitshift64Shl(($503|0),($504|0),5)|0);
  $508 = (getTempRet0() | 0);
  $509 = (_bitshift64Lshr(($503|0),($504|0),59)|0);
  $510 = (getTempRet0() | 0);
  $511 = $507 | $509;
  $512 = $508 | $510;
  $513 = $511 ^ $505;
  $514 = $512 ^ $506;
  $515 = (_i64Add(($493|0),($494|0),($495|0),($496|0))|0);
  $516 = (getTempRet0() | 0);
  $517 = (_bitshift64Shl(($493|0),($494|0),37)|0);
  $518 = (getTempRet0() | 0);
  $519 = (_bitshift64Lshr(($493|0),($494|0),27)|0);
  $520 = (getTempRet0() | 0);
  $521 = $517 | $519;
  $522 = $518 | $520;
  $523 = $521 ^ $515;
  $524 = $522 ^ $516;
  $525 = (_i64Add(($505|0),($506|0),($46|0),($48|0))|0);
  $526 = (getTempRet0() | 0);
  $527 = (_i64Add(($523|0),($524|0),($437|0),($438|0))|0);
  $528 = (getTempRet0() | 0);
  $529 = (_i64Add(($54|0),($56|0),($43|0),($44|0))|0);
  $530 = (getTempRet0() | 0);
  $531 = (_i64Add(($515|0),($516|0),($529|0),($530|0))|0);
  $532 = (getTempRet0() | 0);
  $533 = (_i64Add(($58|0),($60|0),5,0)|0);
  $534 = (getTempRet0() | 0);
  $535 = (_i64Add(($533|0),($534|0),($513|0),($514|0))|0);
  $536 = (getTempRet0() | 0);
  $537 = (_i64Add(($525|0),($526|0),($527|0),($528|0))|0);
  $538 = (getTempRet0() | 0);
  $539 = (_bitshift64Shl(($527|0),($528|0),25)|0);
  $540 = (getTempRet0() | 0);
  $541 = (_bitshift64Lshr(($527|0),($528|0),39)|0);
  $542 = (getTempRet0() | 0);
  $543 = $539 | $541;
  $544 = $540 | $542;
  $545 = $543 ^ $537;
  $546 = $544 ^ $538;
  $547 = (_i64Add(($531|0),($532|0),($535|0),($536|0))|0);
  $548 = (getTempRet0() | 0);
  $549 = (_bitshift64Shl(($535|0),($536|0),33)|0);
  $550 = (getTempRet0() | 0);
  $551 = (_bitshift64Lshr(($535|0),($536|0),31)|0);
  $552 = (getTempRet0() | 0);
  $553 = $549 | $551;
  $554 = $550 | $552;
  $555 = $553 ^ $547;
  $556 = $554 ^ $548;
  $557 = (_i64Add(($555|0),($556|0),($537|0),($538|0))|0);
  $558 = (getTempRet0() | 0);
  $559 = (_bitshift64Shl(($555|0),($556|0),46)|0);
  $560 = (getTempRet0() | 0);
  $561 = (_bitshift64Lshr(($555|0),($556|0),18)|0);
  $562 = (getTempRet0() | 0);
  $563 = $559 | $561;
  $564 = $560 | $562;
  $565 = $563 ^ $557;
  $566 = $564 ^ $558;
  $567 = (_i64Add(($545|0),($546|0),($547|0),($548|0))|0);
  $568 = (getTempRet0() | 0);
  $569 = (_bitshift64Shl(($545|0),($546|0),12)|0);
  $570 = (getTempRet0() | 0);
  $571 = (_bitshift64Lshr(($545|0),($546|0),52)|0);
  $572 = (getTempRet0() | 0);
  $573 = $569 | $571;
  $574 = $570 | $572;
  $575 = $573 ^ $567;
  $576 = $574 ^ $568;
  $577 = (_i64Add(($575|0),($576|0),($557|0),($558|0))|0);
  $578 = (getTempRet0() | 0);
  $579 = (_bitshift64Shl(($575|0),($576|0),58)|0);
  $580 = (getTempRet0() | 0);
  $581 = (_bitshift64Lshr(($575|0),($576|0),6)|0);
  $582 = (getTempRet0() | 0);
  $583 = $579 | $581;
  $584 = $580 | $582;
  $585 = $583 ^ $577;
  $586 = $584 ^ $578;
  $587 = (_i64Add(($565|0),($566|0),($567|0),($568|0))|0);
  $588 = (getTempRet0() | 0);
  $589 = (_bitshift64Shl(($565|0),($566|0),22)|0);
  $590 = (getTempRet0() | 0);
  $591 = (_bitshift64Lshr(($565|0),($566|0),42)|0);
  $592 = (getTempRet0() | 0);
  $593 = $589 | $591;
  $594 = $590 | $592;
  $595 = $593 ^ $587;
  $596 = $594 ^ $588;
  $597 = (_i64Add(($595|0),($596|0),($577|0),($578|0))|0);
  $598 = (getTempRet0() | 0);
  $599 = $596 ^ $597;
  $600 = $595 ^ $598;
  $601 = (_i64Add(($585|0),($586|0),($587|0),($588|0))|0);
  $602 = (getTempRet0() | 0);
  $603 = $586 ^ $601;
  $604 = $585 ^ $602;
  $605 = (_i64Add(($597|0),($598|0),($50|0),($52|0))|0);
  $606 = (getTempRet0() | 0);
  $607 = (_i64Add(($603|0),($604|0),($529|0),($530|0))|0);
  $608 = (getTempRet0() | 0);
  $609 = (_i64Add(($58|0),($60|0),($62|0),($64|0))|0);
  $610 = (getTempRet0() | 0);
  $611 = (_i64Add(($601|0),($602|0),($609|0),($610|0))|0);
  $612 = (getTempRet0() | 0);
  $613 = (_i64Add(($57|0),($59|0),6,0)|0);
  $614 = (getTempRet0() | 0);
  $615 = (_i64Add(($613|0),($614|0),($599|0),($600|0))|0);
  $616 = (getTempRet0() | 0);
  $617 = (_i64Add(($605|0),($606|0),($607|0),($608|0))|0);
  $618 = (getTempRet0() | 0);
  $619 = (_bitshift64Shl(($607|0),($608|0),14)|0);
  $620 = (getTempRet0() | 0);
  $621 = (_bitshift64Lshr(($607|0),($608|0),50)|0);
  $622 = (getTempRet0() | 0);
  $623 = $619 | $621;
  $624 = $620 | $622;
  $625 = $623 ^ $617;
  $626 = $624 ^ $618;
  $627 = (_i64Add(($611|0),($612|0),($615|0),($616|0))|0);
  $628 = (getTempRet0() | 0);
  $629 = (_bitshift64Shl(($615|0),($616|0),16)|0);
  $630 = (getTempRet0() | 0);
  $631 = (_bitshift64Lshr(($615|0),($616|0),48)|0);
  $632 = (getTempRet0() | 0);
  $633 = $629 | $631;
  $634 = $630 | $632;
  $635 = $633 ^ $627;
  $636 = $634 ^ $628;
  $637 = (_i64Add(($635|0),($636|0),($617|0),($618|0))|0);
  $638 = (getTempRet0() | 0);
  $639 = (_bitshift64Shl(($635|0),($636|0),52)|0);
  $640 = (getTempRet0() | 0);
  $641 = (_bitshift64Lshr(($635|0),($636|0),12)|0);
  $642 = (getTempRet0() | 0);
  $643 = $639 | $641;
  $644 = $640 | $642;
  $645 = $643 ^ $637;
  $646 = $644 ^ $638;
  $647 = (_i64Add(($625|0),($626|0),($627|0),($628|0))|0);
  $648 = (getTempRet0() | 0);
  $649 = (_bitshift64Shl(($625|0),($626|0),57)|0);
  $650 = (getTempRet0() | 0);
  $651 = (_bitshift64Lshr(($625|0),($626|0),7)|0);
  $652 = (getTempRet0() | 0);
  $653 = $649 | $651;
  $654 = $650 | $652;
  $655 = $653 ^ $647;
  $656 = $654 ^ $648;
  $657 = (_i64Add(($655|0),($656|0),($637|0),($638|0))|0);
  $658 = (getTempRet0() | 0);
  $659 = (_bitshift64Shl(($655|0),($656|0),23)|0);
  $660 = (getTempRet0() | 0);
  $661 = (_bitshift64Lshr(($655|0),($656|0),41)|0);
  $662 = (getTempRet0() | 0);
  $663 = $659 | $661;
  $664 = $660 | $662;
  $665 = $663 ^ $657;
  $666 = $664 ^ $658;
  $667 = (_i64Add(($645|0),($646|0),($647|0),($648|0))|0);
  $668 = (getTempRet0() | 0);
  $669 = (_bitshift64Shl(($645|0),($646|0),40)|0);
  $670 = (getTempRet0() | 0);
  $671 = (_bitshift64Lshr(($645|0),($646|0),24)|0);
  $672 = (getTempRet0() | 0);
  $673 = $669 | $671;
  $674 = $670 | $672;
  $675 = $673 ^ $667;
  $676 = $674 ^ $668;
  $677 = (_i64Add(($675|0),($676|0),($657|0),($658|0))|0);
  $678 = (getTempRet0() | 0);
  $679 = (_bitshift64Shl(($675|0),($676|0),5)|0);
  $680 = (getTempRet0() | 0);
  $681 = (_bitshift64Lshr(($675|0),($676|0),59)|0);
  $682 = (getTempRet0() | 0);
  $683 = $679 | $681;
  $684 = $680 | $682;
  $685 = $683 ^ $677;
  $686 = $684 ^ $678;
  $687 = (_i64Add(($665|0),($666|0),($667|0),($668|0))|0);
  $688 = (getTempRet0() | 0);
  $689 = (_bitshift64Shl(($665|0),($666|0),37)|0);
  $690 = (getTempRet0() | 0);
  $691 = (_bitshift64Lshr(($665|0),($666|0),27)|0);
  $692 = (getTempRet0() | 0);
  $693 = $689 | $691;
  $694 = $690 | $692;
  $695 = $693 ^ $687;
  $696 = $694 ^ $688;
  $697 = (_i64Add(($677|0),($678|0),($54|0),($56|0))|0);
  $698 = (getTempRet0() | 0);
  $699 = (_i64Add(($695|0),($696|0),($609|0),($610|0))|0);
  $700 = (getTempRet0() | 0);
  $701 = (_i64Add(($57|0),($59|0),($61|0),($63|0))|0);
  $702 = (getTempRet0() | 0);
  $703 = (_i64Add(($687|0),($688|0),($701|0),($702|0))|0);
  $704 = (getTempRet0() | 0);
  $705 = (_i64Add(($46|0),($48|0),7,0)|0);
  $706 = (getTempRet0() | 0);
  $707 = (_i64Add(($705|0),($706|0),($685|0),($686|0))|0);
  $708 = (getTempRet0() | 0);
  $709 = (_i64Add(($697|0),($698|0),($699|0),($700|0))|0);
  $710 = (getTempRet0() | 0);
  $711 = (_bitshift64Shl(($699|0),($700|0),25)|0);
  $712 = (getTempRet0() | 0);
  $713 = (_bitshift64Lshr(($699|0),($700|0),39)|0);
  $714 = (getTempRet0() | 0);
  $715 = $711 | $713;
  $716 = $712 | $714;
  $717 = $715 ^ $709;
  $718 = $716 ^ $710;
  $719 = (_i64Add(($703|0),($704|0),($707|0),($708|0))|0);
  $720 = (getTempRet0() | 0);
  $721 = (_bitshift64Shl(($707|0),($708|0),33)|0);
  $722 = (getTempRet0() | 0);
  $723 = (_bitshift64Lshr(($707|0),($708|0),31)|0);
  $724 = (getTempRet0() | 0);
  $725 = $721 | $723;
  $726 = $722 | $724;
  $727 = $725 ^ $719;
  $728 = $726 ^ $720;
  $729 = (_i64Add(($727|0),($728|0),($709|0),($710|0))|0);
  $730 = (getTempRet0() | 0);
  $731 = (_bitshift64Shl(($727|0),($728|0),46)|0);
  $732 = (getTempRet0() | 0);
  $733 = (_bitshift64Lshr(($727|0),($728|0),18)|0);
  $734 = (getTempRet0() | 0);
  $735 = $731 | $733;
  $736 = $732 | $734;
  $737 = $735 ^ $729;
  $738 = $736 ^ $730;
  $739 = (_i64Add(($717|0),($718|0),($719|0),($720|0))|0);
  $740 = (getTempRet0() | 0);
  $741 = (_bitshift64Shl(($717|0),($718|0),12)|0);
  $742 = (getTempRet0() | 0);
  $743 = (_bitshift64Lshr(($717|0),($718|0),52)|0);
  $744 = (getTempRet0() | 0);
  $745 = $741 | $743;
  $746 = $742 | $744;
  $747 = $745 ^ $739;
  $748 = $746 ^ $740;
  $749 = (_i64Add(($747|0),($748|0),($729|0),($730|0))|0);
  $750 = (getTempRet0() | 0);
  $751 = (_bitshift64Shl(($747|0),($748|0),58)|0);
  $752 = (getTempRet0() | 0);
  $753 = (_bitshift64Lshr(($747|0),($748|0),6)|0);
  $754 = (getTempRet0() | 0);
  $755 = $751 | $753;
  $756 = $752 | $754;
  $757 = $755 ^ $749;
  $758 = $756 ^ $750;
  $759 = (_i64Add(($737|0),($738|0),($739|0),($740|0))|0);
  $760 = (getTempRet0() | 0);
  $761 = (_bitshift64Shl(($737|0),($738|0),22)|0);
  $762 = (getTempRet0() | 0);
  $763 = (_bitshift64Lshr(($737|0),($738|0),42)|0);
  $764 = (getTempRet0() | 0);
  $765 = $761 | $763;
  $766 = $762 | $764;
  $767 = $765 ^ $759;
  $768 = $766 ^ $760;
  $769 = (_i64Add(($767|0),($768|0),($749|0),($750|0))|0);
  $770 = (getTempRet0() | 0);
  $771 = $768 ^ $769;
  $772 = $767 ^ $770;
  $773 = (_i64Add(($757|0),($758|0),($759|0),($760|0))|0);
  $774 = (getTempRet0() | 0);
  $775 = $758 ^ $773;
  $776 = $757 ^ $774;
  $777 = (_i64Add(($769|0),($770|0),($58|0),($60|0))|0);
  $778 = (getTempRet0() | 0);
  $779 = (_i64Add(($775|0),($776|0),($701|0),($702|0))|0);
  $780 = (getTempRet0() | 0);
  $781 = (_i64Add(($46|0),($48|0),($43|0),($44|0))|0);
  $782 = (getTempRet0() | 0);
  $783 = (_i64Add(($773|0),($774|0),($781|0),($782|0))|0);
  $784 = (getTempRet0() | 0);
  $785 = (_i64Add(($50|0),($52|0),8,0)|0);
  $786 = (getTempRet0() | 0);
  $787 = (_i64Add(($785|0),($786|0),($771|0),($772|0))|0);
  $788 = (getTempRet0() | 0);
  $789 = (_i64Add(($777|0),($778|0),($779|0),($780|0))|0);
  $790 = (getTempRet0() | 0);
  $791 = (_bitshift64Shl(($779|0),($780|0),14)|0);
  $792 = (getTempRet0() | 0);
  $793 = (_bitshift64Lshr(($779|0),($780|0),50)|0);
  $794 = (getTempRet0() | 0);
  $795 = $791 | $793;
  $796 = $792 | $794;
  $797 = $795 ^ $789;
  $798 = $796 ^ $790;
  $799 = (_i64Add(($783|0),($784|0),($787|0),($788|0))|0);
  $800 = (getTempRet0() | 0);
  $801 = (_bitshift64Shl(($787|0),($788|0),16)|0);
  $802 = (getTempRet0() | 0);
  $803 = (_bitshift64Lshr(($787|0),($788|0),48)|0);
  $804 = (getTempRet0() | 0);
  $805 = $801 | $803;
  $806 = $802 | $804;
  $807 = $805 ^ $799;
  $808 = $806 ^ $800;
  $809 = (_i64Add(($807|0),($808|0),($789|0),($790|0))|0);
  $810 = (getTempRet0() | 0);
  $811 = (_bitshift64Shl(($807|0),($808|0),52)|0);
  $812 = (getTempRet0() | 0);
  $813 = (_bitshift64Lshr(($807|0),($808|0),12)|0);
  $814 = (getTempRet0() | 0);
  $815 = $811 | $813;
  $816 = $812 | $814;
  $817 = $815 ^ $809;
  $818 = $816 ^ $810;
  $819 = (_i64Add(($797|0),($798|0),($799|0),($800|0))|0);
  $820 = (getTempRet0() | 0);
  $821 = (_bitshift64Shl(($797|0),($798|0),57)|0);
  $822 = (getTempRet0() | 0);
  $823 = (_bitshift64Lshr(($797|0),($798|0),7)|0);
  $824 = (getTempRet0() | 0);
  $825 = $821 | $823;
  $826 = $822 | $824;
  $827 = $825 ^ $819;
  $828 = $826 ^ $820;
  $829 = (_i64Add(($827|0),($828|0),($809|0),($810|0))|0);
  $830 = (getTempRet0() | 0);
  $831 = (_bitshift64Shl(($827|0),($828|0),23)|0);
  $832 = (getTempRet0() | 0);
  $833 = (_bitshift64Lshr(($827|0),($828|0),41)|0);
  $834 = (getTempRet0() | 0);
  $835 = $831 | $833;
  $836 = $832 | $834;
  $837 = $835 ^ $829;
  $838 = $836 ^ $830;
  $839 = (_i64Add(($817|0),($818|0),($819|0),($820|0))|0);
  $840 = (getTempRet0() | 0);
  $841 = (_bitshift64Shl(($817|0),($818|0),40)|0);
  $842 = (getTempRet0() | 0);
  $843 = (_bitshift64Lshr(($817|0),($818|0),24)|0);
  $844 = (getTempRet0() | 0);
  $845 = $841 | $843;
  $846 = $842 | $844;
  $847 = $845 ^ $839;
  $848 = $846 ^ $840;
  $849 = (_i64Add(($847|0),($848|0),($829|0),($830|0))|0);
  $850 = (getTempRet0() | 0);
  $851 = (_bitshift64Shl(($847|0),($848|0),5)|0);
  $852 = (getTempRet0() | 0);
  $853 = (_bitshift64Lshr(($847|0),($848|0),59)|0);
  $854 = (getTempRet0() | 0);
  $855 = $851 | $853;
  $856 = $852 | $854;
  $857 = $855 ^ $849;
  $858 = $856 ^ $850;
  $859 = (_i64Add(($837|0),($838|0),($839|0),($840|0))|0);
  $860 = (getTempRet0() | 0);
  $861 = (_bitshift64Shl(($837|0),($838|0),37)|0);
  $862 = (getTempRet0() | 0);
  $863 = (_bitshift64Lshr(($837|0),($838|0),27)|0);
  $864 = (getTempRet0() | 0);
  $865 = $861 | $863;
  $866 = $862 | $864;
  $867 = $865 ^ $859;
  $868 = $866 ^ $860;
  $869 = (_i64Add(($849|0),($850|0),($57|0),($59|0))|0);
  $870 = (getTempRet0() | 0);
  $871 = (_i64Add(($867|0),($868|0),($781|0),($782|0))|0);
  $872 = (getTempRet0() | 0);
  $873 = (_i64Add(($50|0),($52|0),($62|0),($64|0))|0);
  $874 = (getTempRet0() | 0);
  $875 = (_i64Add(($859|0),($860|0),($873|0),($874|0))|0);
  $876 = (getTempRet0() | 0);
  $877 = (_i64Add(($54|0),($56|0),9,0)|0);
  $878 = (getTempRet0() | 0);
  $879 = (_i64Add(($877|0),($878|0),($857|0),($858|0))|0);
  $880 = (getTempRet0() | 0);
  $881 = (_i64Add(($869|0),($870|0),($871|0),($872|0))|0);
  $882 = (getTempRet0() | 0);
  $883 = (_bitshift64Shl(($871|0),($872|0),25)|0);
  $884 = (getTempRet0() | 0);
  $885 = (_bitshift64Lshr(($871|0),($872|0),39)|0);
  $886 = (getTempRet0() | 0);
  $887 = $883 | $885;
  $888 = $884 | $886;
  $889 = $887 ^ $881;
  $890 = $888 ^ $882;
  $891 = (_i64Add(($875|0),($876|0),($879|0),($880|0))|0);
  $892 = (getTempRet0() | 0);
  $893 = (_bitshift64Shl(($879|0),($880|0),33)|0);
  $894 = (getTempRet0() | 0);
  $895 = (_bitshift64Lshr(($879|0),($880|0),31)|0);
  $896 = (getTempRet0() | 0);
  $897 = $893 | $895;
  $898 = $894 | $896;
  $899 = $897 ^ $891;
  $900 = $898 ^ $892;
  $901 = (_i64Add(($899|0),($900|0),($881|0),($882|0))|0);
  $902 = (getTempRet0() | 0);
  $903 = (_bitshift64Shl(($899|0),($900|0),46)|0);
  $904 = (getTempRet0() | 0);
  $905 = (_bitshift64Lshr(($899|0),($900|0),18)|0);
  $906 = (getTempRet0() | 0);
  $907 = $903 | $905;
  $908 = $904 | $906;
  $909 = $907 ^ $901;
  $910 = $908 ^ $902;
  $911 = (_i64Add(($889|0),($890|0),($891|0),($892|0))|0);
  $912 = (getTempRet0() | 0);
  $913 = (_bitshift64Shl(($889|0),($890|0),12)|0);
  $914 = (getTempRet0() | 0);
  $915 = (_bitshift64Lshr(($889|0),($890|0),52)|0);
  $916 = (getTempRet0() | 0);
  $917 = $913 | $915;
  $918 = $914 | $916;
  $919 = $917 ^ $911;
  $920 = $918 ^ $912;
  $921 = (_i64Add(($919|0),($920|0),($901|0),($902|0))|0);
  $922 = (getTempRet0() | 0);
  $923 = (_bitshift64Shl(($919|0),($920|0),58)|0);
  $924 = (getTempRet0() | 0);
  $925 = (_bitshift64Lshr(($919|0),($920|0),6)|0);
  $926 = (getTempRet0() | 0);
  $927 = $923 | $925;
  $928 = $924 | $926;
  $929 = $927 ^ $921;
  $930 = $928 ^ $922;
  $931 = (_i64Add(($909|0),($910|0),($911|0),($912|0))|0);
  $932 = (getTempRet0() | 0);
  $933 = (_bitshift64Shl(($909|0),($910|0),22)|0);
  $934 = (getTempRet0() | 0);
  $935 = (_bitshift64Lshr(($909|0),($910|0),42)|0);
  $936 = (getTempRet0() | 0);
  $937 = $933 | $935;
  $938 = $934 | $936;
  $939 = $937 ^ $931;
  $940 = $938 ^ $932;
  $941 = (_i64Add(($939|0),($940|0),($921|0),($922|0))|0);
  $942 = (getTempRet0() | 0);
  $943 = $940 ^ $941;
  $944 = $939 ^ $942;
  $945 = (_i64Add(($929|0),($930|0),($931|0),($932|0))|0);
  $946 = (getTempRet0() | 0);
  $947 = $930 ^ $945;
  $948 = $929 ^ $946;
  $949 = (_i64Add(($941|0),($942|0),($46|0),($48|0))|0);
  $950 = (getTempRet0() | 0);
  $951 = (_i64Add(($947|0),($948|0),($873|0),($874|0))|0);
  $952 = (getTempRet0() | 0);
  $953 = (_i64Add(($54|0),($56|0),($61|0),($63|0))|0);
  $954 = (getTempRet0() | 0);
  $955 = (_i64Add(($945|0),($946|0),($953|0),($954|0))|0);
  $956 = (getTempRet0() | 0);
  $957 = (_i64Add(($58|0),($60|0),10,0)|0);
  $958 = (getTempRet0() | 0);
  $959 = (_i64Add(($957|0),($958|0),($943|0),($944|0))|0);
  $960 = (getTempRet0() | 0);
  $961 = (_i64Add(($949|0),($950|0),($951|0),($952|0))|0);
  $962 = (getTempRet0() | 0);
  $963 = (_bitshift64Shl(($951|0),($952|0),14)|0);
  $964 = (getTempRet0() | 0);
  $965 = (_bitshift64Lshr(($951|0),($952|0),50)|0);
  $966 = (getTempRet0() | 0);
  $967 = $963 | $965;
  $968 = $964 | $966;
  $969 = $967 ^ $961;
  $970 = $968 ^ $962;
  $971 = (_i64Add(($955|0),($956|0),($959|0),($960|0))|0);
  $972 = (getTempRet0() | 0);
  $973 = (_bitshift64Shl(($959|0),($960|0),16)|0);
  $974 = (getTempRet0() | 0);
  $975 = (_bitshift64Lshr(($959|0),($960|0),48)|0);
  $976 = (getTempRet0() | 0);
  $977 = $973 | $975;
  $978 = $974 | $976;
  $979 = $977 ^ $971;
  $980 = $978 ^ $972;
  $981 = (_i64Add(($979|0),($980|0),($961|0),($962|0))|0);
  $982 = (getTempRet0() | 0);
  $983 = (_bitshift64Shl(($979|0),($980|0),52)|0);
  $984 = (getTempRet0() | 0);
  $985 = (_bitshift64Lshr(($979|0),($980|0),12)|0);
  $986 = (getTempRet0() | 0);
  $987 = $983 | $985;
  $988 = $984 | $986;
  $989 = $987 ^ $981;
  $990 = $988 ^ $982;
  $991 = (_i64Add(($969|0),($970|0),($971|0),($972|0))|0);
  $992 = (getTempRet0() | 0);
  $993 = (_bitshift64Shl(($969|0),($970|0),57)|0);
  $994 = (getTempRet0() | 0);
  $995 = (_bitshift64Lshr(($969|0),($970|0),7)|0);
  $996 = (getTempRet0() | 0);
  $997 = $993 | $995;
  $998 = $994 | $996;
  $999 = $997 ^ $991;
  $1000 = $998 ^ $992;
  $1001 = (_i64Add(($999|0),($1000|0),($981|0),($982|0))|0);
  $1002 = (getTempRet0() | 0);
  $1003 = (_bitshift64Shl(($999|0),($1000|0),23)|0);
  $1004 = (getTempRet0() | 0);
  $1005 = (_bitshift64Lshr(($999|0),($1000|0),41)|0);
  $1006 = (getTempRet0() | 0);
  $1007 = $1003 | $1005;
  $1008 = $1004 | $1006;
  $1009 = $1007 ^ $1001;
  $1010 = $1008 ^ $1002;
  $1011 = (_i64Add(($989|0),($990|0),($991|0),($992|0))|0);
  $1012 = (getTempRet0() | 0);
  $1013 = (_bitshift64Shl(($989|0),($990|0),40)|0);
  $1014 = (getTempRet0() | 0);
  $1015 = (_bitshift64Lshr(($989|0),($990|0),24)|0);
  $1016 = (getTempRet0() | 0);
  $1017 = $1013 | $1015;
  $1018 = $1014 | $1016;
  $1019 = $1017 ^ $1011;
  $1020 = $1018 ^ $1012;
  $1021 = (_i64Add(($1019|0),($1020|0),($1001|0),($1002|0))|0);
  $1022 = (getTempRet0() | 0);
  $1023 = (_bitshift64Shl(($1019|0),($1020|0),5)|0);
  $1024 = (getTempRet0() | 0);
  $1025 = (_bitshift64Lshr(($1019|0),($1020|0),59)|0);
  $1026 = (getTempRet0() | 0);
  $1027 = $1023 | $1025;
  $1028 = $1024 | $1026;
  $1029 = $1027 ^ $1021;
  $1030 = $1028 ^ $1022;
  $1031 = (_i64Add(($1009|0),($1010|0),($1011|0),($1012|0))|0);
  $1032 = (getTempRet0() | 0);
  $1033 = (_bitshift64Shl(($1009|0),($1010|0),37)|0);
  $1034 = (getTempRet0() | 0);
  $1035 = (_bitshift64Lshr(($1009|0),($1010|0),27)|0);
  $1036 = (getTempRet0() | 0);
  $1037 = $1033 | $1035;
  $1038 = $1034 | $1036;
  $1039 = $1037 ^ $1031;
  $1040 = $1038 ^ $1032;
  $1041 = (_i64Add(($1021|0),($1022|0),($50|0),($52|0))|0);
  $1042 = (getTempRet0() | 0);
  $1043 = (_i64Add(($1039|0),($1040|0),($953|0),($954|0))|0);
  $1044 = (getTempRet0() | 0);
  $1045 = (_i64Add(($58|0),($60|0),($43|0),($44|0))|0);
  $1046 = (getTempRet0() | 0);
  $1047 = (_i64Add(($1031|0),($1032|0),($1045|0),($1046|0))|0);
  $1048 = (getTempRet0() | 0);
  $1049 = (_i64Add(($57|0),($59|0),11,0)|0);
  $1050 = (getTempRet0() | 0);
  $1051 = (_i64Add(($1049|0),($1050|0),($1029|0),($1030|0))|0);
  $1052 = (getTempRet0() | 0);
  $1053 = (_i64Add(($1041|0),($1042|0),($1043|0),($1044|0))|0);
  $1054 = (getTempRet0() | 0);
  $1055 = (_bitshift64Shl(($1043|0),($1044|0),25)|0);
  $1056 = (getTempRet0() | 0);
  $1057 = (_bitshift64Lshr(($1043|0),($1044|0),39)|0);
  $1058 = (getTempRet0() | 0);
  $1059 = $1055 | $1057;
  $1060 = $1056 | $1058;
  $1061 = $1059 ^ $1053;
  $1062 = $1060 ^ $1054;
  $1063 = (_i64Add(($1047|0),($1048|0),($1051|0),($1052|0))|0);
  $1064 = (getTempRet0() | 0);
  $1065 = (_bitshift64Shl(($1051|0),($1052|0),33)|0);
  $1066 = (getTempRet0() | 0);
  $1067 = (_bitshift64Lshr(($1051|0),($1052|0),31)|0);
  $1068 = (getTempRet0() | 0);
  $1069 = $1065 | $1067;
  $1070 = $1066 | $1068;
  $1071 = $1069 ^ $1063;
  $1072 = $1070 ^ $1064;
  $1073 = (_i64Add(($1071|0),($1072|0),($1053|0),($1054|0))|0);
  $1074 = (getTempRet0() | 0);
  $1075 = (_bitshift64Shl(($1071|0),($1072|0),46)|0);
  $1076 = (getTempRet0() | 0);
  $1077 = (_bitshift64Lshr(($1071|0),($1072|0),18)|0);
  $1078 = (getTempRet0() | 0);
  $1079 = $1075 | $1077;
  $1080 = $1076 | $1078;
  $1081 = $1079 ^ $1073;
  $1082 = $1080 ^ $1074;
  $1083 = (_i64Add(($1061|0),($1062|0),($1063|0),($1064|0))|0);
  $1084 = (getTempRet0() | 0);
  $1085 = (_bitshift64Shl(($1061|0),($1062|0),12)|0);
  $1086 = (getTempRet0() | 0);
  $1087 = (_bitshift64Lshr(($1061|0),($1062|0),52)|0);
  $1088 = (getTempRet0() | 0);
  $1089 = $1085 | $1087;
  $1090 = $1086 | $1088;
  $1091 = $1089 ^ $1083;
  $1092 = $1090 ^ $1084;
  $1093 = (_i64Add(($1091|0),($1092|0),($1073|0),($1074|0))|0);
  $1094 = (getTempRet0() | 0);
  $1095 = (_bitshift64Shl(($1091|0),($1092|0),58)|0);
  $1096 = (getTempRet0() | 0);
  $1097 = (_bitshift64Lshr(($1091|0),($1092|0),6)|0);
  $1098 = (getTempRet0() | 0);
  $1099 = $1095 | $1097;
  $1100 = $1096 | $1098;
  $1101 = $1099 ^ $1093;
  $1102 = $1100 ^ $1094;
  $1103 = (_i64Add(($1081|0),($1082|0),($1083|0),($1084|0))|0);
  $1104 = (getTempRet0() | 0);
  $1105 = (_bitshift64Shl(($1081|0),($1082|0),22)|0);
  $1106 = (getTempRet0() | 0);
  $1107 = (_bitshift64Lshr(($1081|0),($1082|0),42)|0);
  $1108 = (getTempRet0() | 0);
  $1109 = $1105 | $1107;
  $1110 = $1106 | $1108;
  $1111 = $1109 ^ $1103;
  $1112 = $1110 ^ $1104;
  $1113 = (_i64Add(($1111|0),($1112|0),($1093|0),($1094|0))|0);
  $1114 = (getTempRet0() | 0);
  $1115 = $1112 ^ $1113;
  $1116 = $1111 ^ $1114;
  $1117 = (_i64Add(($1101|0),($1102|0),($1103|0),($1104|0))|0);
  $1118 = (getTempRet0() | 0);
  $1119 = $1102 ^ $1117;
  $1120 = $1101 ^ $1118;
  $1121 = (_i64Add(($1113|0),($1114|0),($54|0),($56|0))|0);
  $1122 = (getTempRet0() | 0);
  $1123 = (_i64Add(($1119|0),($1120|0),($1045|0),($1046|0))|0);
  $1124 = (getTempRet0() | 0);
  $1125 = (_i64Add(($57|0),($59|0),($62|0),($64|0))|0);
  $1126 = (getTempRet0() | 0);
  $1127 = (_i64Add(($1117|0),($1118|0),($1125|0),($1126|0))|0);
  $1128 = (getTempRet0() | 0);
  $1129 = (_i64Add(($46|0),($48|0),12,0)|0);
  $1130 = (getTempRet0() | 0);
  $1131 = (_i64Add(($1129|0),($1130|0),($1115|0),($1116|0))|0);
  $1132 = (getTempRet0() | 0);
  $1133 = (_i64Add(($1121|0),($1122|0),($1123|0),($1124|0))|0);
  $1134 = (getTempRet0() | 0);
  $1135 = (_bitshift64Shl(($1123|0),($1124|0),14)|0);
  $1136 = (getTempRet0() | 0);
  $1137 = (_bitshift64Lshr(($1123|0),($1124|0),50)|0);
  $1138 = (getTempRet0() | 0);
  $1139 = $1135 | $1137;
  $1140 = $1136 | $1138;
  $1141 = $1139 ^ $1133;
  $1142 = $1140 ^ $1134;
  $1143 = (_i64Add(($1127|0),($1128|0),($1131|0),($1132|0))|0);
  $1144 = (getTempRet0() | 0);
  $1145 = (_bitshift64Shl(($1131|0),($1132|0),16)|0);
  $1146 = (getTempRet0() | 0);
  $1147 = (_bitshift64Lshr(($1131|0),($1132|0),48)|0);
  $1148 = (getTempRet0() | 0);
  $1149 = $1145 | $1147;
  $1150 = $1146 | $1148;
  $1151 = $1149 ^ $1143;
  $1152 = $1150 ^ $1144;
  $1153 = (_i64Add(($1151|0),($1152|0),($1133|0),($1134|0))|0);
  $1154 = (getTempRet0() | 0);
  $1155 = (_bitshift64Shl(($1151|0),($1152|0),52)|0);
  $1156 = (getTempRet0() | 0);
  $1157 = (_bitshift64Lshr(($1151|0),($1152|0),12)|0);
  $1158 = (getTempRet0() | 0);
  $1159 = $1155 | $1157;
  $1160 = $1156 | $1158;
  $1161 = $1159 ^ $1153;
  $1162 = $1160 ^ $1154;
  $1163 = (_i64Add(($1141|0),($1142|0),($1143|0),($1144|0))|0);
  $1164 = (getTempRet0() | 0);
  $1165 = (_bitshift64Shl(($1141|0),($1142|0),57)|0);
  $1166 = (getTempRet0() | 0);
  $1167 = (_bitshift64Lshr(($1141|0),($1142|0),7)|0);
  $1168 = (getTempRet0() | 0);
  $1169 = $1165 | $1167;
  $1170 = $1166 | $1168;
  $1171 = $1169 ^ $1163;
  $1172 = $1170 ^ $1164;
  $1173 = (_i64Add(($1171|0),($1172|0),($1153|0),($1154|0))|0);
  $1174 = (getTempRet0() | 0);
  $1175 = (_bitshift64Shl(($1171|0),($1172|0),23)|0);
  $1176 = (getTempRet0() | 0);
  $1177 = (_bitshift64Lshr(($1171|0),($1172|0),41)|0);
  $1178 = (getTempRet0() | 0);
  $1179 = $1175 | $1177;
  $1180 = $1176 | $1178;
  $1181 = $1179 ^ $1173;
  $1182 = $1180 ^ $1174;
  $1183 = (_i64Add(($1161|0),($1162|0),($1163|0),($1164|0))|0);
  $1184 = (getTempRet0() | 0);
  $1185 = (_bitshift64Shl(($1161|0),($1162|0),40)|0);
  $1186 = (getTempRet0() | 0);
  $1187 = (_bitshift64Lshr(($1161|0),($1162|0),24)|0);
  $1188 = (getTempRet0() | 0);
  $1189 = $1185 | $1187;
  $1190 = $1186 | $1188;
  $1191 = $1189 ^ $1183;
  $1192 = $1190 ^ $1184;
  $1193 = (_i64Add(($1191|0),($1192|0),($1173|0),($1174|0))|0);
  $1194 = (getTempRet0() | 0);
  $1195 = (_bitshift64Shl(($1191|0),($1192|0),5)|0);
  $1196 = (getTempRet0() | 0);
  $1197 = (_bitshift64Lshr(($1191|0),($1192|0),59)|0);
  $1198 = (getTempRet0() | 0);
  $1199 = $1195 | $1197;
  $1200 = $1196 | $1198;
  $1201 = $1199 ^ $1193;
  $1202 = $1200 ^ $1194;
  $1203 = (_i64Add(($1181|0),($1182|0),($1183|0),($1184|0))|0);
  $1204 = (getTempRet0() | 0);
  $1205 = (_bitshift64Shl(($1181|0),($1182|0),37)|0);
  $1206 = (getTempRet0() | 0);
  $1207 = (_bitshift64Lshr(($1181|0),($1182|0),27)|0);
  $1208 = (getTempRet0() | 0);
  $1209 = $1205 | $1207;
  $1210 = $1206 | $1208;
  $1211 = $1209 ^ $1203;
  $1212 = $1210 ^ $1204;
  $1213 = (_i64Add(($1193|0),($1194|0),($58|0),($60|0))|0);
  $1214 = (getTempRet0() | 0);
  $1215 = (_i64Add(($1211|0),($1212|0),($1125|0),($1126|0))|0);
  $1216 = (getTempRet0() | 0);
  $1217 = (_i64Add(($46|0),($48|0),($61|0),($63|0))|0);
  $1218 = (getTempRet0() | 0);
  $1219 = (_i64Add(($1203|0),($1204|0),($1217|0),($1218|0))|0);
  $1220 = (getTempRet0() | 0);
  $1221 = (_i64Add(($50|0),($52|0),13,0)|0);
  $1222 = (getTempRet0() | 0);
  $1223 = (_i64Add(($1221|0),($1222|0),($1201|0),($1202|0))|0);
  $1224 = (getTempRet0() | 0);
  $1225 = (_i64Add(($1213|0),($1214|0),($1215|0),($1216|0))|0);
  $1226 = (getTempRet0() | 0);
  $1227 = (_bitshift64Shl(($1215|0),($1216|0),25)|0);
  $1228 = (getTempRet0() | 0);
  $1229 = (_bitshift64Lshr(($1215|0),($1216|0),39)|0);
  $1230 = (getTempRet0() | 0);
  $1231 = $1227 | $1229;
  $1232 = $1228 | $1230;
  $1233 = $1231 ^ $1225;
  $1234 = $1232 ^ $1226;
  $1235 = (_i64Add(($1219|0),($1220|0),($1223|0),($1224|0))|0);
  $1236 = (getTempRet0() | 0);
  $1237 = (_bitshift64Shl(($1223|0),($1224|0),33)|0);
  $1238 = (getTempRet0() | 0);
  $1239 = (_bitshift64Lshr(($1223|0),($1224|0),31)|0);
  $1240 = (getTempRet0() | 0);
  $1241 = $1237 | $1239;
  $1242 = $1238 | $1240;
  $1243 = $1241 ^ $1235;
  $1244 = $1242 ^ $1236;
  $1245 = (_i64Add(($1243|0),($1244|0),($1225|0),($1226|0))|0);
  $1246 = (getTempRet0() | 0);
  $1247 = (_bitshift64Shl(($1243|0),($1244|0),46)|0);
  $1248 = (getTempRet0() | 0);
  $1249 = (_bitshift64Lshr(($1243|0),($1244|0),18)|0);
  $1250 = (getTempRet0() | 0);
  $1251 = $1247 | $1249;
  $1252 = $1248 | $1250;
  $1253 = $1251 ^ $1245;
  $1254 = $1252 ^ $1246;
  $1255 = (_i64Add(($1233|0),($1234|0),($1235|0),($1236|0))|0);
  $1256 = (getTempRet0() | 0);
  $1257 = (_bitshift64Shl(($1233|0),($1234|0),12)|0);
  $1258 = (getTempRet0() | 0);
  $1259 = (_bitshift64Lshr(($1233|0),($1234|0),52)|0);
  $1260 = (getTempRet0() | 0);
  $1261 = $1257 | $1259;
  $1262 = $1258 | $1260;
  $1263 = $1261 ^ $1255;
  $1264 = $1262 ^ $1256;
  $1265 = (_i64Add(($1263|0),($1264|0),($1245|0),($1246|0))|0);
  $1266 = (getTempRet0() | 0);
  $1267 = (_bitshift64Shl(($1263|0),($1264|0),58)|0);
  $1268 = (getTempRet0() | 0);
  $1269 = (_bitshift64Lshr(($1263|0),($1264|0),6)|0);
  $1270 = (getTempRet0() | 0);
  $1271 = $1267 | $1269;
  $1272 = $1268 | $1270;
  $1273 = $1271 ^ $1265;
  $1274 = $1272 ^ $1266;
  $1275 = (_i64Add(($1253|0),($1254|0),($1255|0),($1256|0))|0);
  $1276 = (getTempRet0() | 0);
  $1277 = (_bitshift64Shl(($1253|0),($1254|0),22)|0);
  $1278 = (getTempRet0() | 0);
  $1279 = (_bitshift64Lshr(($1253|0),($1254|0),42)|0);
  $1280 = (getTempRet0() | 0);
  $1281 = $1277 | $1279;
  $1282 = $1278 | $1280;
  $1283 = $1281 ^ $1275;
  $1284 = $1282 ^ $1276;
  $1285 = (_i64Add(($1283|0),($1284|0),($1265|0),($1266|0))|0);
  $1286 = (getTempRet0() | 0);
  $1287 = $1284 ^ $1285;
  $1288 = $1283 ^ $1286;
  $1289 = (_i64Add(($1273|0),($1274|0),($1275|0),($1276|0))|0);
  $1290 = (getTempRet0() | 0);
  $1291 = $1274 ^ $1289;
  $1292 = $1273 ^ $1290;
  $1293 = (_i64Add(($1285|0),($1286|0),($57|0),($59|0))|0);
  $1294 = (getTempRet0() | 0);
  $1295 = (_i64Add(($1291|0),($1292|0),($1217|0),($1218|0))|0);
  $1296 = (getTempRet0() | 0);
  $1297 = (_i64Add(($1289|0),($1290|0),($91|0),($92|0))|0);
  $1298 = (getTempRet0() | 0);
  $1299 = (_i64Add(($54|0),($56|0),14,0)|0);
  $1300 = (getTempRet0() | 0);
  $1301 = (_i64Add(($1299|0),($1300|0),($1287|0),($1288|0))|0);
  $1302 = (getTempRet0() | 0);
  $1303 = (_i64Add(($1293|0),($1294|0),($1295|0),($1296|0))|0);
  $1304 = (getTempRet0() | 0);
  $1305 = (_bitshift64Shl(($1295|0),($1296|0),14)|0);
  $1306 = (getTempRet0() | 0);
  $1307 = (_bitshift64Lshr(($1295|0),($1296|0),50)|0);
  $1308 = (getTempRet0() | 0);
  $1309 = $1305 | $1307;
  $1310 = $1306 | $1308;
  $1311 = $1309 ^ $1303;
  $1312 = $1310 ^ $1304;
  $1313 = (_i64Add(($1297|0),($1298|0),($1301|0),($1302|0))|0);
  $1314 = (getTempRet0() | 0);
  $1315 = (_bitshift64Shl(($1301|0),($1302|0),16)|0);
  $1316 = (getTempRet0() | 0);
  $1317 = (_bitshift64Lshr(($1301|0),($1302|0),48)|0);
  $1318 = (getTempRet0() | 0);
  $1319 = $1315 | $1317;
  $1320 = $1316 | $1318;
  $1321 = $1319 ^ $1313;
  $1322 = $1320 ^ $1314;
  $1323 = (_i64Add(($1321|0),($1322|0),($1303|0),($1304|0))|0);
  $1324 = (getTempRet0() | 0);
  $1325 = (_bitshift64Shl(($1321|0),($1322|0),52)|0);
  $1326 = (getTempRet0() | 0);
  $1327 = (_bitshift64Lshr(($1321|0),($1322|0),12)|0);
  $1328 = (getTempRet0() | 0);
  $1329 = $1325 | $1327;
  $1330 = $1326 | $1328;
  $1331 = $1329 ^ $1323;
  $1332 = $1330 ^ $1324;
  $1333 = (_i64Add(($1311|0),($1312|0),($1313|0),($1314|0))|0);
  $1334 = (getTempRet0() | 0);
  $1335 = (_bitshift64Shl(($1311|0),($1312|0),57)|0);
  $1336 = (getTempRet0() | 0);
  $1337 = (_bitshift64Lshr(($1311|0),($1312|0),7)|0);
  $1338 = (getTempRet0() | 0);
  $1339 = $1335 | $1337;
  $1340 = $1336 | $1338;
  $1341 = $1339 ^ $1333;
  $1342 = $1340 ^ $1334;
  $1343 = (_i64Add(($1341|0),($1342|0),($1323|0),($1324|0))|0);
  $1344 = (getTempRet0() | 0);
  $1345 = (_bitshift64Shl(($1341|0),($1342|0),23)|0);
  $1346 = (getTempRet0() | 0);
  $1347 = (_bitshift64Lshr(($1341|0),($1342|0),41)|0);
  $1348 = (getTempRet0() | 0);
  $1349 = $1345 | $1347;
  $1350 = $1346 | $1348;
  $1351 = $1349 ^ $1343;
  $1352 = $1350 ^ $1344;
  $1353 = (_i64Add(($1331|0),($1332|0),($1333|0),($1334|0))|0);
  $1354 = (getTempRet0() | 0);
  $1355 = (_bitshift64Shl(($1331|0),($1332|0),40)|0);
  $1356 = (getTempRet0() | 0);
  $1357 = (_bitshift64Lshr(($1331|0),($1332|0),24)|0);
  $1358 = (getTempRet0() | 0);
  $1359 = $1355 | $1357;
  $1360 = $1356 | $1358;
  $1361 = $1359 ^ $1353;
  $1362 = $1360 ^ $1354;
  $1363 = (_i64Add(($1361|0),($1362|0),($1343|0),($1344|0))|0);
  $1364 = (getTempRet0() | 0);
  $1365 = (_bitshift64Shl(($1361|0),($1362|0),5)|0);
  $1366 = (getTempRet0() | 0);
  $1367 = (_bitshift64Lshr(($1361|0),($1362|0),59)|0);
  $1368 = (getTempRet0() | 0);
  $1369 = $1365 | $1367;
  $1370 = $1366 | $1368;
  $1371 = $1369 ^ $1363;
  $1372 = $1370 ^ $1364;
  $1373 = (_i64Add(($1351|0),($1352|0),($1353|0),($1354|0))|0);
  $1374 = (getTempRet0() | 0);
  $1375 = (_bitshift64Shl(($1351|0),($1352|0),37)|0);
  $1376 = (getTempRet0() | 0);
  $1377 = (_bitshift64Lshr(($1351|0),($1352|0),27)|0);
  $1378 = (getTempRet0() | 0);
  $1379 = $1375 | $1377;
  $1380 = $1376 | $1378;
  $1381 = $1379 ^ $1373;
  $1382 = $1380 ^ $1374;
  $1383 = (_i64Add(($1363|0),($1364|0),($46|0),($48|0))|0);
  $1384 = (getTempRet0() | 0);
  $1385 = (_i64Add(($1381|0),($1382|0),($91|0),($92|0))|0);
  $1386 = (getTempRet0() | 0);
  $1387 = (_i64Add(($1373|0),($1374|0),($107|0),($108|0))|0);
  $1388 = (getTempRet0() | 0);
  $1389 = (_i64Add(($58|0),($60|0),15,0)|0);
  $1390 = (getTempRet0() | 0);
  $1391 = (_i64Add(($1389|0),($1390|0),($1371|0),($1372|0))|0);
  $1392 = (getTempRet0() | 0);
  $1393 = (_i64Add(($1383|0),($1384|0),($1385|0),($1386|0))|0);
  $1394 = (getTempRet0() | 0);
  $1395 = (_bitshift64Shl(($1385|0),($1386|0),25)|0);
  $1396 = (getTempRet0() | 0);
  $1397 = (_bitshift64Lshr(($1385|0),($1386|0),39)|0);
  $1398 = (getTempRet0() | 0);
  $1399 = $1395 | $1397;
  $1400 = $1396 | $1398;
  $1401 = $1399 ^ $1393;
  $1402 = $1400 ^ $1394;
  $1403 = (_i64Add(($1387|0),($1388|0),($1391|0),($1392|0))|0);
  $1404 = (getTempRet0() | 0);
  $1405 = (_bitshift64Shl(($1391|0),($1392|0),33)|0);
  $1406 = (getTempRet0() | 0);
  $1407 = (_bitshift64Lshr(($1391|0),($1392|0),31)|0);
  $1408 = (getTempRet0() | 0);
  $1409 = $1405 | $1407;
  $1410 = $1406 | $1408;
  $1411 = $1409 ^ $1403;
  $1412 = $1410 ^ $1404;
  $1413 = (_i64Add(($1411|0),($1412|0),($1393|0),($1394|0))|0);
  $1414 = (getTempRet0() | 0);
  $1415 = (_bitshift64Shl(($1411|0),($1412|0),46)|0);
  $1416 = (getTempRet0() | 0);
  $1417 = (_bitshift64Lshr(($1411|0),($1412|0),18)|0);
  $1418 = (getTempRet0() | 0);
  $1419 = $1415 | $1417;
  $1420 = $1416 | $1418;
  $1421 = $1419 ^ $1413;
  $1422 = $1420 ^ $1414;
  $1423 = (_i64Add(($1401|0),($1402|0),($1403|0),($1404|0))|0);
  $1424 = (getTempRet0() | 0);
  $1425 = (_bitshift64Shl(($1401|0),($1402|0),12)|0);
  $1426 = (getTempRet0() | 0);
  $1427 = (_bitshift64Lshr(($1401|0),($1402|0),52)|0);
  $1428 = (getTempRet0() | 0);
  $1429 = $1425 | $1427;
  $1430 = $1426 | $1428;
  $1431 = $1429 ^ $1423;
  $1432 = $1430 ^ $1424;
  $1433 = (_i64Add(($1431|0),($1432|0),($1413|0),($1414|0))|0);
  $1434 = (getTempRet0() | 0);
  $1435 = (_bitshift64Shl(($1431|0),($1432|0),58)|0);
  $1436 = (getTempRet0() | 0);
  $1437 = (_bitshift64Lshr(($1431|0),($1432|0),6)|0);
  $1438 = (getTempRet0() | 0);
  $1439 = $1435 | $1437;
  $1440 = $1436 | $1438;
  $1441 = $1439 ^ $1433;
  $1442 = $1440 ^ $1434;
  $1443 = (_i64Add(($1421|0),($1422|0),($1423|0),($1424|0))|0);
  $1444 = (getTempRet0() | 0);
  $1445 = (_bitshift64Shl(($1421|0),($1422|0),22)|0);
  $1446 = (getTempRet0() | 0);
  $1447 = (_bitshift64Lshr(($1421|0),($1422|0),42)|0);
  $1448 = (getTempRet0() | 0);
  $1449 = $1445 | $1447;
  $1450 = $1446 | $1448;
  $1451 = $1449 ^ $1443;
  $1452 = $1450 ^ $1444;
  $1453 = (_i64Add(($1451|0),($1452|0),($1433|0),($1434|0))|0);
  $1454 = (getTempRet0() | 0);
  $1455 = $1452 ^ $1453;
  $1456 = $1451 ^ $1454;
  $1457 = (_i64Add(($1441|0),($1442|0),($1443|0),($1444|0))|0);
  $1458 = (getTempRet0() | 0);
  $1459 = $1442 ^ $1457;
  $1460 = $1441 ^ $1458;
  $1461 = (_i64Add(($1453|0),($1454|0),($50|0),($52|0))|0);
  $1462 = (getTempRet0() | 0);
  $1463 = (_i64Add(($1459|0),($1460|0),($107|0),($108|0))|0);
  $1464 = (getTempRet0() | 0);
  $1465 = (_i64Add(($1457|0),($1458|0),($185|0),($186|0))|0);
  $1466 = (getTempRet0() | 0);
  $1467 = (_i64Add(($57|0),($59|0),16,0)|0);
  $1468 = (getTempRet0() | 0);
  $1469 = (_i64Add(($1467|0),($1468|0),($1455|0),($1456|0))|0);
  $1470 = (getTempRet0() | 0);
  $1471 = (_i64Add(($1461|0),($1462|0),($1463|0),($1464|0))|0);
  $1472 = (getTempRet0() | 0);
  $1473 = (_bitshift64Shl(($1463|0),($1464|0),14)|0);
  $1474 = (getTempRet0() | 0);
  $1475 = (_bitshift64Lshr(($1463|0),($1464|0),50)|0);
  $1476 = (getTempRet0() | 0);
  $1477 = $1473 | $1475;
  $1478 = $1474 | $1476;
  $1479 = $1477 ^ $1471;
  $1480 = $1478 ^ $1472;
  $1481 = (_i64Add(($1465|0),($1466|0),($1469|0),($1470|0))|0);
  $1482 = (getTempRet0() | 0);
  $1483 = (_bitshift64Shl(($1469|0),($1470|0),16)|0);
  $1484 = (getTempRet0() | 0);
  $1485 = (_bitshift64Lshr(($1469|0),($1470|0),48)|0);
  $1486 = (getTempRet0() | 0);
  $1487 = $1483 | $1485;
  $1488 = $1484 | $1486;
  $1489 = $1487 ^ $1481;
  $1490 = $1488 ^ $1482;
  $1491 = (_i64Add(($1489|0),($1490|0),($1471|0),($1472|0))|0);
  $1492 = (getTempRet0() | 0);
  $1493 = (_bitshift64Shl(($1489|0),($1490|0),52)|0);
  $1494 = (getTempRet0() | 0);
  $1495 = (_bitshift64Lshr(($1489|0),($1490|0),12)|0);
  $1496 = (getTempRet0() | 0);
  $1497 = $1493 | $1495;
  $1498 = $1494 | $1496;
  $1499 = $1497 ^ $1491;
  $1500 = $1498 ^ $1492;
  $1501 = (_i64Add(($1479|0),($1480|0),($1481|0),($1482|0))|0);
  $1502 = (getTempRet0() | 0);
  $1503 = (_bitshift64Shl(($1479|0),($1480|0),57)|0);
  $1504 = (getTempRet0() | 0);
  $1505 = (_bitshift64Lshr(($1479|0),($1480|0),7)|0);
  $1506 = (getTempRet0() | 0);
  $1507 = $1503 | $1505;
  $1508 = $1504 | $1506;
  $1509 = $1507 ^ $1501;
  $1510 = $1508 ^ $1502;
  $1511 = (_i64Add(($1509|0),($1510|0),($1491|0),($1492|0))|0);
  $1512 = (getTempRet0() | 0);
  $1513 = (_bitshift64Shl(($1509|0),($1510|0),23)|0);
  $1514 = (getTempRet0() | 0);
  $1515 = (_bitshift64Lshr(($1509|0),($1510|0),41)|0);
  $1516 = (getTempRet0() | 0);
  $1517 = $1513 | $1515;
  $1518 = $1514 | $1516;
  $1519 = $1517 ^ $1511;
  $1520 = $1518 ^ $1512;
  $1521 = (_i64Add(($1499|0),($1500|0),($1501|0),($1502|0))|0);
  $1522 = (getTempRet0() | 0);
  $1523 = (_bitshift64Shl(($1499|0),($1500|0),40)|0);
  $1524 = (getTempRet0() | 0);
  $1525 = (_bitshift64Lshr(($1499|0),($1500|0),24)|0);
  $1526 = (getTempRet0() | 0);
  $1527 = $1523 | $1525;
  $1528 = $1524 | $1526;
  $1529 = $1527 ^ $1521;
  $1530 = $1528 ^ $1522;
  $1531 = (_i64Add(($1529|0),($1530|0),($1511|0),($1512|0))|0);
  $1532 = (getTempRet0() | 0);
  $1533 = (_bitshift64Shl(($1529|0),($1530|0),5)|0);
  $1534 = (getTempRet0() | 0);
  $1535 = (_bitshift64Lshr(($1529|0),($1530|0),59)|0);
  $1536 = (getTempRet0() | 0);
  $1537 = $1533 | $1535;
  $1538 = $1534 | $1536;
  $1539 = $1537 ^ $1531;
  $1540 = $1538 ^ $1532;
  $1541 = (_i64Add(($1519|0),($1520|0),($1521|0),($1522|0))|0);
  $1542 = (getTempRet0() | 0);
  $1543 = (_bitshift64Shl(($1519|0),($1520|0),37)|0);
  $1544 = (getTempRet0() | 0);
  $1545 = (_bitshift64Lshr(($1519|0),($1520|0),27)|0);
  $1546 = (getTempRet0() | 0);
  $1547 = $1543 | $1545;
  $1548 = $1544 | $1546;
  $1549 = $1547 ^ $1541;
  $1550 = $1548 ^ $1542;
  $1551 = (_i64Add(($1531|0),($1532|0),($54|0),($56|0))|0);
  $1552 = (getTempRet0() | 0);
  $1553 = (_i64Add(($1549|0),($1550|0),($185|0),($186|0))|0);
  $1554 = (getTempRet0() | 0);
  $1555 = (_i64Add(($1541|0),($1542|0),($265|0),($266|0))|0);
  $1556 = (getTempRet0() | 0);
  $1557 = (_i64Add(($46|0),($48|0),17,0)|0);
  $1558 = (getTempRet0() | 0);
  $1559 = (_i64Add(($1557|0),($1558|0),($1539|0),($1540|0))|0);
  $1560 = (getTempRet0() | 0);
  $1561 = (_i64Add(($1551|0),($1552|0),($1553|0),($1554|0))|0);
  $1562 = (getTempRet0() | 0);
  $1563 = (_bitshift64Shl(($1553|0),($1554|0),25)|0);
  $1564 = (getTempRet0() | 0);
  $1565 = (_bitshift64Lshr(($1553|0),($1554|0),39)|0);
  $1566 = (getTempRet0() | 0);
  $1567 = $1563 | $1565;
  $1568 = $1564 | $1566;
  $1569 = $1567 ^ $1561;
  $1570 = $1568 ^ $1562;
  $1571 = (_i64Add(($1555|0),($1556|0),($1559|0),($1560|0))|0);
  $1572 = (getTempRet0() | 0);
  $1573 = (_bitshift64Shl(($1559|0),($1560|0),33)|0);
  $1574 = (getTempRet0() | 0);
  $1575 = (_bitshift64Lshr(($1559|0),($1560|0),31)|0);
  $1576 = (getTempRet0() | 0);
  $1577 = $1573 | $1575;
  $1578 = $1574 | $1576;
  $1579 = $1577 ^ $1571;
  $1580 = $1578 ^ $1572;
  $1581 = (_i64Add(($1579|0),($1580|0),($1561|0),($1562|0))|0);
  $1582 = (getTempRet0() | 0);
  $1583 = (_bitshift64Shl(($1579|0),($1580|0),46)|0);
  $1584 = (getTempRet0() | 0);
  $1585 = (_bitshift64Lshr(($1579|0),($1580|0),18)|0);
  $1586 = (getTempRet0() | 0);
  $1587 = $1583 | $1585;
  $1588 = $1584 | $1586;
  $1589 = $1587 ^ $1581;
  $1590 = $1588 ^ $1582;
  $1591 = (_i64Add(($1569|0),($1570|0),($1571|0),($1572|0))|0);
  $1592 = (getTempRet0() | 0);
  $1593 = (_bitshift64Shl(($1569|0),($1570|0),12)|0);
  $1594 = (getTempRet0() | 0);
  $1595 = (_bitshift64Lshr(($1569|0),($1570|0),52)|0);
  $1596 = (getTempRet0() | 0);
  $1597 = $1593 | $1595;
  $1598 = $1594 | $1596;
  $1599 = $1597 ^ $1591;
  $1600 = $1598 ^ $1592;
  $1601 = (_i64Add(($1599|0),($1600|0),($1581|0),($1582|0))|0);
  $1602 = (getTempRet0() | 0);
  $1603 = (_bitshift64Shl(($1599|0),($1600|0),58)|0);
  $1604 = (getTempRet0() | 0);
  $1605 = (_bitshift64Lshr(($1599|0),($1600|0),6)|0);
  $1606 = (getTempRet0() | 0);
  $1607 = $1603 | $1605;
  $1608 = $1604 | $1606;
  $1609 = $1607 ^ $1601;
  $1610 = $1608 ^ $1602;
  $1611 = (_i64Add(($1589|0),($1590|0),($1591|0),($1592|0))|0);
  $1612 = (getTempRet0() | 0);
  $1613 = (_bitshift64Shl(($1589|0),($1590|0),22)|0);
  $1614 = (getTempRet0() | 0);
  $1615 = (_bitshift64Lshr(($1589|0),($1590|0),42)|0);
  $1616 = (getTempRet0() | 0);
  $1617 = $1613 | $1615;
  $1618 = $1614 | $1616;
  $1619 = $1617 ^ $1611;
  $1620 = $1618 ^ $1612;
  $1621 = (_i64Add(($1619|0),($1620|0),($1601|0),($1602|0))|0);
  $1622 = (getTempRet0() | 0);
  $1623 = $1620 ^ $1621;
  $1624 = $1619 ^ $1622;
  $1625 = (_i64Add(($1609|0),($1610|0),($1611|0),($1612|0))|0);
  $1626 = (getTempRet0() | 0);
  $1627 = $1610 ^ $1625;
  $1628 = $1609 ^ $1626;
  $1629 = (_i64Add(($1621|0),($1622|0),($58|0),($60|0))|0);
  $1630 = (getTempRet0() | 0);
  $1631 = (_i64Add(($1627|0),($1628|0),($265|0),($266|0))|0);
  $1632 = (getTempRet0() | 0);
  $1633 = (_i64Add(($1625|0),($1626|0),($357|0),($358|0))|0);
  $1634 = (getTempRet0() | 0);
  $1635 = (_i64Add(($50|0),($52|0),18,0)|0);
  $1636 = (getTempRet0() | 0);
  $1637 = (_i64Add(($1635|0),($1636|0),($1623|0),($1624|0))|0);
  $1638 = (getTempRet0() | 0);
  $1639 = $1629 ^ $67;
  $1640 = $1630 ^ $70;
  $1641 = $arrayidx11;
  $1642 = $1641;
  HEAP32[$1642>>2] = $1639;
  $1643 = (($1641) + 4)|0;
  $1644 = $1643;
  HEAP32[$1644>>2] = $1640;
  $1645 = $1631 ^ $73;
  $1646 = $1632 ^ $76;
  $1647 = $arrayidx16;
  $1648 = $1647;
  HEAP32[$1648>>2] = $1645;
  $1649 = (($1647) + 4)|0;
  $1650 = $1649;
  HEAP32[$1650>>2] = $1646;
  $1651 = $1633 ^ $79;
  $1652 = $1634 ^ $82;
  $1653 = $arrayidx21;
  $1654 = $1653;
  HEAP32[$1654>>2] = $1651;
  $1655 = (($1653) + 4)|0;
  $1656 = $1655;
  HEAP32[$1656>>2] = $1652;
  $1657 = $1637 ^ $85;
  $1658 = $1638 ^ $88;
  $1659 = $arrayidx26;
  $1660 = $1659;
  HEAP32[$1660>>2] = $1657;
  $1661 = (($1659) + 4)|0;
  $1662 = $1661;
  HEAP32[$1662>>2] = $1658;
  $1663 = $64 & -1073741825;
  $dec = (($blkCnt$addr$0) + -1)|0;
  $tobool = ($dec|0)==(0);
  if ($tobool) {
   break;
  } else {
   $62$phi = $62;$41 = $43;$42 = $44;$46 = $1639;$48 = $1640;$50 = $1645;$52 = $1646;$54 = $1651;$56 = $1652;$58 = $1657;$60 = $1658;$64 = $1663;$blkCnt$addr$0 = $dec;$blkPtr$addr$0 = $add$ptr87;$62 = $62$phi;
  }
 }
 $1664 = (_i64Add(($2|0),($5|0),($15|0),($16|0))|0);
 $1665 = (getTempRet0() | 0);
 $1666 = $arrayidx;
 $1667 = $1666;
 HEAP32[$1667>>2] = $1664;
 $1668 = (($1666) + 4)|0;
 $1669 = $1668;
 HEAP32[$1669>>2] = $1665;
 $1670 = $arrayidx4;
 $1671 = $1670;
 HEAP32[$1671>>2] = $62;
 $1672 = (($1670) + 4)|0;
 $1673 = $1672;
 HEAP32[$1673>>2] = $1663;
 return;
}
function _blake256_compress($S,$block) {
 $S = $S|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$ptr$1 = 0, $add$ptr$10 = 0, $add$ptr$11 = 0, $add$ptr$12 = 0, $add$ptr$13 = 0, $add$ptr$14 = 0, $add$ptr$15 = 0, $add$ptr$2 = 0;
 var $add$ptr$3 = 0, $add$ptr$4 = 0, $add$ptr$5 = 0, $add$ptr$6 = 0, $add$ptr$7 = 0, $add$ptr$8 = 0, $add$ptr$9 = 0, $add109 = 0, $add111 = 0, $add124 = 0, $add145 = 0, $add147 = 0, $add160 = 0, $add181 = 0, $add183 = 0, $add196 = 0, $add217 = 0, $add219 = 0, $add232 = 0, $add253 = 0;
 var $add255 = 0, $add268 = 0, $add289 = 0, $add291 = 0, $add304 = 0, $add325 = 0, $add327 = 0, $add340 = 0, $add361 = 0, $add363 = 0, $add376 = 0, $add397 = 0, $add399 = 0, $add39984 = 0, $add412 = 0, $add41278 = 0, $add433 = 0, $add435 = 0, $add448 = 0, $add469 = 0;
 var $add471 = 0, $add47180 = 0, $add484 = 0, $add48474 = 0, $add505 = 0, $add507 = 0, $add520 = 0, $add541 = 0, $add543 = 0, $add54372 = 0, $add556 = 0, $add55682 = 0, $add577 = 0, $add579 = 0, $add592 = 0, $add613 = 0, $add615 = 0, $add61576 = 0, $add628 = 0, $add62886 = 0;
 var $add76 = 0, $add88 = 0, $arrayidx102 = 0, $arrayidx106 = 0, $arrayidx136 = 0, $arrayidx138 = 0, $arrayidx14 = 0, $arrayidx14$1 = 0, $arrayidx14$10 = 0, $arrayidx14$11 = 0, $arrayidx14$12 = 0, $arrayidx14$13 = 0, $arrayidx14$14 = 0, $arrayidx14$15 = 0, $arrayidx14$2 = 0, $arrayidx14$3 = 0, $arrayidx14$4 = 0, $arrayidx14$5 = 0, $arrayidx14$6 = 0, $arrayidx14$7 = 0;
 var $arrayidx14$8 = 0, $arrayidx14$9 = 0, $arrayidx140 = 0, $arrayidx142 = 0, $arrayidx144 = 0, $arrayidx144$promoted = 0, $arrayidx146 = 0, $arrayidx146$promoted = 0, $arrayidx17$1 = 0, $arrayidx17$10 = 0, $arrayidx17$11 = 0, $arrayidx17$12 = 0, $arrayidx17$13 = 0, $arrayidx17$14 = 0, $arrayidx17$15 = 0, $arrayidx17$2 = 0, $arrayidx17$3 = 0, $arrayidx17$4 = 0, $arrayidx17$5 = 0, $arrayidx17$6 = 0;
 var $arrayidx17$7 = 0, $arrayidx17$8 = 0, $arrayidx17$9 = 0, $arrayidx174 = 0, $arrayidx178 = 0, $arrayidx208 = 0, $arrayidx210 = 0, $arrayidx212 = 0, $arrayidx214 = 0, $arrayidx216 = 0, $arrayidx216$promoted = 0, $arrayidx218 = 0, $arrayidx218$promoted = 0, $arrayidx246 = 0, $arrayidx250 = 0, $arrayidx27 = 0, $arrayidx28 = 0, $arrayidx280 = 0, $arrayidx282 = 0, $arrayidx284 = 0;
 var $arrayidx286 = 0, $arrayidx288 = 0, $arrayidx288$promoted = 0, $arrayidx290 = 0, $arrayidx290$promoted = 0, $arrayidx3 = 0, $arrayidx3$1 = 0, $arrayidx3$10 = 0, $arrayidx3$11 = 0, $arrayidx3$12 = 0, $arrayidx3$13 = 0, $arrayidx3$14 = 0, $arrayidx3$15 = 0, $arrayidx3$2 = 0, $arrayidx3$3 = 0, $arrayidx3$4 = 0, $arrayidx3$5 = 0, $arrayidx3$6 = 0, $arrayidx3$7 = 0, $arrayidx3$8 = 0;
 var $arrayidx3$9 = 0, $arrayidx30 = 0, $arrayidx318 = 0, $arrayidx32 = 0, $arrayidx322 = 0, $arrayidx34 = 0, $arrayidx352 = 0, $arrayidx354 = 0, $arrayidx356 = 0, $arrayidx358 = 0, $arrayidx36 = 0, $arrayidx38 = 0, $arrayidx390 = 0, $arrayidx394 = 0, $arrayidx40 = 0, $arrayidx41 = 0, $arrayidx41$promoted = 0, $arrayidx42 = 0, $arrayidx42$promoted = 0, $arrayidx424 = 0;
 var $arrayidx426 = 0, $arrayidx428 = 0, $arrayidx43 = 0, $arrayidx43$promoted = 0, $arrayidx430 = 0, $arrayidx44 = 0, $arrayidx44$promoted = 0, $arrayidx462 = 0, $arrayidx466 = 0, $arrayidx47 = 0, $arrayidx496 = 0, $arrayidx498 = 0, $arrayidx500 = 0, $arrayidx502 = 0, $arrayidx534 = 0, $arrayidx538 = 0, $arrayidx55 = 0, $arrayidx568 = 0, $arrayidx570 = 0, $arrayidx572 = 0;
 var $arrayidx574 = 0, $arrayidx606 = 0, $arrayidx610 = 0, $arrayidx648$1 = 0, $arrayidx648$2 = 0, $arrayidx648$3 = 0, $arrayidx648$4 = 0, $arrayidx648$5 = 0, $arrayidx648$6 = 0, $arrayidx648$7 = 0, $arrayidx67 = 0, $arrayidx68 = 0, $arrayidx70 = 0, $arrayidx72 = 0, $arrayidx74 = 0, $arrayidx74$promoted = 0, $arrayidx75$promoted = 0, $arrayidx8 = 0, $arrayidx8$1 = 0, $arrayidx8$10 = 0;
 var $arrayidx8$11 = 0, $arrayidx8$12 = 0, $arrayidx8$13 = 0, $arrayidx8$14 = 0, $arrayidx8$15 = 0, $arrayidx8$2 = 0, $arrayidx8$3 = 0, $arrayidx8$4 = 0, $arrayidx8$5 = 0, $arrayidx8$6 = 0, $arrayidx8$7 = 0, $arrayidx8$8 = 0, $arrayidx8$9 = 0, $cmp45 = 0, $conv = 0, $conv$1 = 0, $conv$10 = 0, $conv$11 = 0, $conv$12 = 0, $conv$13 = 0;
 var $conv$14 = 0, $conv$15 = 0, $conv$2 = 0, $conv$3 = 0, $conv$4 = 0, $conv$5 = 0, $conv$6 = 0, $conv$7 = 0, $conv$8 = 0, $conv$9 = 0, $conv15 = 0, $conv15$1 = 0, $conv15$10 = 0, $conv15$11 = 0, $conv15$12 = 0, $conv15$13 = 0, $conv15$14 = 0, $conv15$15 = 0, $conv15$2 = 0, $conv15$3 = 0;
 var $conv15$4 = 0, $conv15$5 = 0, $conv15$6 = 0, $conv15$7 = 0, $conv15$8 = 0, $conv15$9 = 0, $conv4 = 0, $conv4$1 = 0, $conv4$10 = 0, $conv4$11 = 0, $conv4$12 = 0, $conv4$13 = 0, $conv4$14 = 0, $conv4$15 = 0, $conv4$2 = 0, $conv4$3 = 0, $conv4$4 = 0, $conv4$5 = 0, $conv4$6 = 0, $conv4$7 = 0;
 var $conv4$8 = 0, $conv4$9 = 0, $conv9 = 0, $conv9$1 = 0, $conv9$10 = 0, $conv9$11 = 0, $conv9$12 = 0, $conv9$13 = 0, $conv9$14 = 0, $conv9$15 = 0, $conv9$2 = 0, $conv9$3 = 0, $conv9$4 = 0, $conv9$5 = 0, $conv9$6 = 0, $conv9$7 = 0, $conv9$8 = 0, $conv9$9 = 0, $exitcond = 0, $i$270 = 0;
 var $idxprom = 0, $idxprom137 = 0, $idxprom141 = 0, $idxprom209 = 0, $idxprom213 = 0, $idxprom281 = 0, $idxprom285 = 0, $idxprom353 = 0, $idxprom357 = 0, $idxprom425 = 0, $idxprom429 = 0, $idxprom497 = 0, $idxprom501 = 0, $idxprom569 = 0, $idxprom573 = 0, $idxprom71 = 0, $inc640 = 0, $m = 0, $nullt = 0, $or = 0;
 var $or$1 = 0, $or$10 = 0, $or$11 = 0, $or$12 = 0, $or$13 = 0, $or$14 = 0, $or$15 = 0, $or$2 = 0, $or$3 = 0, $or$4 = 0, $or$5 = 0, $or$6 = 0, $or$7 = 0, $or$8 = 0, $or$9 = 0, $or11 = 0, $or11$1 = 0, $or11$10 = 0, $or11$11 = 0, $or11$12 = 0;
 var $or11$13 = 0, $or11$14 = 0, $or11$15 = 0, $or11$2 = 0, $or11$3 = 0, $or11$4 = 0, $or11$5 = 0, $or11$6 = 0, $or11$7 = 0, $or11$8 = 0, $or11$9 = 0, $or120 = 0, $or133 = 0, $or156 = 0, $or16 = 0, $or16$1 = 0, $or16$10 = 0, $or16$11 = 0, $or16$12 = 0, $or16$13 = 0;
 var $or16$14 = 0, $or16$15 = 0, $or16$2 = 0, $or16$3 = 0, $or16$4 = 0, $or16$5 = 0, $or16$6 = 0, $or16$7 = 0, $or16$8 = 0, $or16$9 = 0, $or169 = 0, $or192 = 0, $or205 = 0, $or228 = 0, $or241 = 0, $or264 = 0, $or277 = 0, $or300 = 0, $or313 = 0, $or336 = 0;
 var $or349 = 0, $or372 = 0, $or385 = 0, $or408 = 0, $or40881 = 0, $or421 = 0, $or42171 = 0, $or444 = 0, $or457 = 0, $or480 = 0, $or48077 = 0, $or493 = 0, $or49383 = 0, $or516 = 0, $or529 = 0, $or552 = 0, $or55285 = 0, $or565 = 0, $or56575 = 0, $or588 = 0;
 var $or601 = 0, $or624 = 0, $or62473 = 0, $or637 = 0, $or63779 = 0, $or84 = 0, $or97 = 0, $shl = 0, $shl$1 = 0, $shl$10 = 0, $shl$11 = 0, $shl$12 = 0, $shl$13 = 0, $shl$14 = 0, $shl$15 = 0, $shl$2 = 0, $shl$3 = 0, $shl$4 = 0, $shl$5 = 0, $shl$6 = 0;
 var $shl$7 = 0, $shl$8 = 0, $shl$9 = 0, $shl10 = 0, $shl10$1 = 0, $shl10$10 = 0, $shl10$11 = 0, $shl10$12 = 0, $shl10$13 = 0, $shl10$14 = 0, $shl10$15 = 0, $shl10$2 = 0, $shl10$3 = 0, $shl10$4 = 0, $shl10$5 = 0, $shl10$6 = 0, $shl10$7 = 0, $shl10$8 = 0, $shl10$9 = 0, $shl115 = 0;
 var $shl128 = 0, $shl151 = 0, $shl164 = 0, $shl187 = 0, $shl200 = 0, $shl223 = 0, $shl236 = 0, $shl259 = 0, $shl272 = 0, $shl295 = 0, $shl308 = 0, $shl331 = 0, $shl344 = 0, $shl367 = 0, $shl380 = 0, $shl403 = 0, $shl416 = 0, $shl439 = 0, $shl452 = 0, $shl475 = 0;
 var $shl488 = 0, $shl5 = 0, $shl5$1 = 0, $shl5$10 = 0, $shl5$11 = 0, $shl5$12 = 0, $shl5$13 = 0, $shl5$14 = 0, $shl5$15 = 0, $shl5$2 = 0, $shl5$3 = 0, $shl5$4 = 0, $shl5$5 = 0, $shl5$6 = 0, $shl5$7 = 0, $shl5$8 = 0, $shl5$9 = 0, $shl511 = 0, $shl524 = 0, $shl547 = 0;
 var $shl560 = 0, $shl583 = 0, $shl596 = 0, $shl619 = 0, $shl632 = 0, $shl80 = 0, $shl92 = 0, $shr = 0, $shr119 = 0, $shr132 = 0, $shr155 = 0, $shr168 = 0, $shr191 = 0, $shr204 = 0, $shr227 = 0, $shr240 = 0, $shr263 = 0, $shr276 = 0, $shr299 = 0, $shr312 = 0;
 var $shr335 = 0, $shr348 = 0, $shr371 = 0, $shr384 = 0, $shr407 = 0, $shr420 = 0, $shr443 = 0, $shr456 = 0, $shr479 = 0, $shr492 = 0, $shr515 = 0, $shr528 = 0, $shr551 = 0, $shr564 = 0, $shr587 = 0, $shr600 = 0, $shr623 = 0, $shr636 = 0, $shr96 = 0, $v = 0;
 var $xor = 0, $xor107 = 0, $xor114 = 0, $xor127 = 0, $xor143 = 0, $xor150 = 0, $xor163 = 0, $xor179 = 0, $xor186 = 0, $xor199 = 0, $xor215 = 0, $xor222 = 0, $xor235 = 0, $xor251 = 0, $xor258 = 0, $xor271 = 0, $xor287 = 0, $xor294 = 0, $xor307 = 0, $xor31 = 0;
 var $xor323 = 0, $xor330 = 0, $xor343 = 0, $xor35 = 0, $xor359 = 0, $xor366 = 0, $xor379 = 0, $xor39 = 0, $xor395 = 0, $xor402 = 0, $xor415 = 0, $xor431 = 0, $xor438 = 0, $xor451 = 0, $xor467 = 0, $xor474 = 0, $xor487 = 0, $xor49 = 0, $xor503 = 0, $xor510 = 0;
 var $xor523 = 0, $xor53 = 0, $xor539 = 0, $xor546 = 0, $xor559 = 0, $xor57 = 0, $xor575 = 0, $xor582 = 0, $xor595 = 0, $xor61 = 0, $xor611 = 0, $xor618 = 0, $xor631 = 0, $xor649 = 0, $xor649$1 = 0, $xor649$10 = 0, $xor649$11 = 0, $xor649$12 = 0, $xor649$13 = 0, $xor649$14 = 0;
 var $xor649$15 = 0, $xor649$2 = 0, $xor649$3 = 0, $xor649$4 = 0, $xor649$5 = 0, $xor649$6 = 0, $xor649$7 = 0, $xor649$8 = 0, $xor649$9 = 0, $xor662 = 0, $xor662$1 = 0, $xor662$2 = 0, $xor662$3 = 0, $xor662$4 = 0, $xor662$5 = 0, $xor662$6 = 0, $xor662$7 = 0, $xor73 = 0, $xor79 = 0, $xor91 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $v = sp + 64|0;
 $m = sp;
 $0 = HEAP8[$block>>0]|0;
 $conv = $0&255;
 $shl = $conv << 24;
 $arrayidx3 = ((($block)) + 1|0);
 $1 = HEAP8[$arrayidx3>>0]|0;
 $conv4 = $1&255;
 $shl5 = $conv4 << 16;
 $or = $shl5 | $shl;
 $arrayidx8 = ((($block)) + 2|0);
 $2 = HEAP8[$arrayidx8>>0]|0;
 $conv9 = $2&255;
 $shl10 = $conv9 << 8;
 $or11 = $or | $shl10;
 $arrayidx14 = ((($block)) + 3|0);
 $3 = HEAP8[$arrayidx14>>0]|0;
 $conv15 = $3&255;
 $or16 = $or11 | $conv15;
 HEAP32[$m>>2] = $or16;
 $add$ptr$1 = ((($block)) + 4|0);
 $4 = HEAP8[$add$ptr$1>>0]|0;
 $conv$1 = $4&255;
 $shl$1 = $conv$1 << 24;
 $arrayidx3$1 = ((($block)) + 5|0);
 $5 = HEAP8[$arrayidx3$1>>0]|0;
 $conv4$1 = $5&255;
 $shl5$1 = $conv4$1 << 16;
 $or$1 = $shl5$1 | $shl$1;
 $arrayidx8$1 = ((($block)) + 6|0);
 $6 = HEAP8[$arrayidx8$1>>0]|0;
 $conv9$1 = $6&255;
 $shl10$1 = $conv9$1 << 8;
 $or11$1 = $or$1 | $shl10$1;
 $arrayidx14$1 = ((($block)) + 7|0);
 $7 = HEAP8[$arrayidx14$1>>0]|0;
 $conv15$1 = $7&255;
 $or16$1 = $or11$1 | $conv15$1;
 $arrayidx17$1 = ((($m)) + 4|0);
 HEAP32[$arrayidx17$1>>2] = $or16$1;
 $add$ptr$2 = ((($block)) + 8|0);
 $8 = HEAP8[$add$ptr$2>>0]|0;
 $conv$2 = $8&255;
 $shl$2 = $conv$2 << 24;
 $arrayidx3$2 = ((($block)) + 9|0);
 $9 = HEAP8[$arrayidx3$2>>0]|0;
 $conv4$2 = $9&255;
 $shl5$2 = $conv4$2 << 16;
 $or$2 = $shl5$2 | $shl$2;
 $arrayidx8$2 = ((($block)) + 10|0);
 $10 = HEAP8[$arrayidx8$2>>0]|0;
 $conv9$2 = $10&255;
 $shl10$2 = $conv9$2 << 8;
 $or11$2 = $or$2 | $shl10$2;
 $arrayidx14$2 = ((($block)) + 11|0);
 $11 = HEAP8[$arrayidx14$2>>0]|0;
 $conv15$2 = $11&255;
 $or16$2 = $or11$2 | $conv15$2;
 $arrayidx17$2 = ((($m)) + 8|0);
 HEAP32[$arrayidx17$2>>2] = $or16$2;
 $add$ptr$3 = ((($block)) + 12|0);
 $12 = HEAP8[$add$ptr$3>>0]|0;
 $conv$3 = $12&255;
 $shl$3 = $conv$3 << 24;
 $arrayidx3$3 = ((($block)) + 13|0);
 $13 = HEAP8[$arrayidx3$3>>0]|0;
 $conv4$3 = $13&255;
 $shl5$3 = $conv4$3 << 16;
 $or$3 = $shl5$3 | $shl$3;
 $arrayidx8$3 = ((($block)) + 14|0);
 $14 = HEAP8[$arrayidx8$3>>0]|0;
 $conv9$3 = $14&255;
 $shl10$3 = $conv9$3 << 8;
 $or11$3 = $or$3 | $shl10$3;
 $arrayidx14$3 = ((($block)) + 15|0);
 $15 = HEAP8[$arrayidx14$3>>0]|0;
 $conv15$3 = $15&255;
 $or16$3 = $or11$3 | $conv15$3;
 $arrayidx17$3 = ((($m)) + 12|0);
 HEAP32[$arrayidx17$3>>2] = $or16$3;
 $add$ptr$4 = ((($block)) + 16|0);
 $16 = HEAP8[$add$ptr$4>>0]|0;
 $conv$4 = $16&255;
 $shl$4 = $conv$4 << 24;
 $arrayidx3$4 = ((($block)) + 17|0);
 $17 = HEAP8[$arrayidx3$4>>0]|0;
 $conv4$4 = $17&255;
 $shl5$4 = $conv4$4 << 16;
 $or$4 = $shl5$4 | $shl$4;
 $arrayidx8$4 = ((($block)) + 18|0);
 $18 = HEAP8[$arrayidx8$4>>0]|0;
 $conv9$4 = $18&255;
 $shl10$4 = $conv9$4 << 8;
 $or11$4 = $or$4 | $shl10$4;
 $arrayidx14$4 = ((($block)) + 19|0);
 $19 = HEAP8[$arrayidx14$4>>0]|0;
 $conv15$4 = $19&255;
 $or16$4 = $or11$4 | $conv15$4;
 $arrayidx17$4 = ((($m)) + 16|0);
 HEAP32[$arrayidx17$4>>2] = $or16$4;
 $add$ptr$5 = ((($block)) + 20|0);
 $20 = HEAP8[$add$ptr$5>>0]|0;
 $conv$5 = $20&255;
 $shl$5 = $conv$5 << 24;
 $arrayidx3$5 = ((($block)) + 21|0);
 $21 = HEAP8[$arrayidx3$5>>0]|0;
 $conv4$5 = $21&255;
 $shl5$5 = $conv4$5 << 16;
 $or$5 = $shl5$5 | $shl$5;
 $arrayidx8$5 = ((($block)) + 22|0);
 $22 = HEAP8[$arrayidx8$5>>0]|0;
 $conv9$5 = $22&255;
 $shl10$5 = $conv9$5 << 8;
 $or11$5 = $or$5 | $shl10$5;
 $arrayidx14$5 = ((($block)) + 23|0);
 $23 = HEAP8[$arrayidx14$5>>0]|0;
 $conv15$5 = $23&255;
 $or16$5 = $or11$5 | $conv15$5;
 $arrayidx17$5 = ((($m)) + 20|0);
 HEAP32[$arrayidx17$5>>2] = $or16$5;
 $add$ptr$6 = ((($block)) + 24|0);
 $24 = HEAP8[$add$ptr$6>>0]|0;
 $conv$6 = $24&255;
 $shl$6 = $conv$6 << 24;
 $arrayidx3$6 = ((($block)) + 25|0);
 $25 = HEAP8[$arrayidx3$6>>0]|0;
 $conv4$6 = $25&255;
 $shl5$6 = $conv4$6 << 16;
 $or$6 = $shl5$6 | $shl$6;
 $arrayidx8$6 = ((($block)) + 26|0);
 $26 = HEAP8[$arrayidx8$6>>0]|0;
 $conv9$6 = $26&255;
 $shl10$6 = $conv9$6 << 8;
 $or11$6 = $or$6 | $shl10$6;
 $arrayidx14$6 = ((($block)) + 27|0);
 $27 = HEAP8[$arrayidx14$6>>0]|0;
 $conv15$6 = $27&255;
 $or16$6 = $or11$6 | $conv15$6;
 $arrayidx17$6 = ((($m)) + 24|0);
 HEAP32[$arrayidx17$6>>2] = $or16$6;
 $add$ptr$7 = ((($block)) + 28|0);
 $28 = HEAP8[$add$ptr$7>>0]|0;
 $conv$7 = $28&255;
 $shl$7 = $conv$7 << 24;
 $arrayidx3$7 = ((($block)) + 29|0);
 $29 = HEAP8[$arrayidx3$7>>0]|0;
 $conv4$7 = $29&255;
 $shl5$7 = $conv4$7 << 16;
 $or$7 = $shl5$7 | $shl$7;
 $arrayidx8$7 = ((($block)) + 30|0);
 $30 = HEAP8[$arrayidx8$7>>0]|0;
 $conv9$7 = $30&255;
 $shl10$7 = $conv9$7 << 8;
 $or11$7 = $or$7 | $shl10$7;
 $arrayidx14$7 = ((($block)) + 31|0);
 $31 = HEAP8[$arrayidx14$7>>0]|0;
 $conv15$7 = $31&255;
 $or16$7 = $or11$7 | $conv15$7;
 $arrayidx17$7 = ((($m)) + 28|0);
 HEAP32[$arrayidx17$7>>2] = $or16$7;
 $add$ptr$8 = ((($block)) + 32|0);
 $32 = HEAP8[$add$ptr$8>>0]|0;
 $conv$8 = $32&255;
 $shl$8 = $conv$8 << 24;
 $arrayidx3$8 = ((($block)) + 33|0);
 $33 = HEAP8[$arrayidx3$8>>0]|0;
 $conv4$8 = $33&255;
 $shl5$8 = $conv4$8 << 16;
 $or$8 = $shl5$8 | $shl$8;
 $arrayidx8$8 = ((($block)) + 34|0);
 $34 = HEAP8[$arrayidx8$8>>0]|0;
 $conv9$8 = $34&255;
 $shl10$8 = $conv9$8 << 8;
 $or11$8 = $or$8 | $shl10$8;
 $arrayidx14$8 = ((($block)) + 35|0);
 $35 = HEAP8[$arrayidx14$8>>0]|0;
 $conv15$8 = $35&255;
 $or16$8 = $or11$8 | $conv15$8;
 $arrayidx17$8 = ((($m)) + 32|0);
 HEAP32[$arrayidx17$8>>2] = $or16$8;
 $add$ptr$9 = ((($block)) + 36|0);
 $36 = HEAP8[$add$ptr$9>>0]|0;
 $conv$9 = $36&255;
 $shl$9 = $conv$9 << 24;
 $arrayidx3$9 = ((($block)) + 37|0);
 $37 = HEAP8[$arrayidx3$9>>0]|0;
 $conv4$9 = $37&255;
 $shl5$9 = $conv4$9 << 16;
 $or$9 = $shl5$9 | $shl$9;
 $arrayidx8$9 = ((($block)) + 38|0);
 $38 = HEAP8[$arrayidx8$9>>0]|0;
 $conv9$9 = $38&255;
 $shl10$9 = $conv9$9 << 8;
 $or11$9 = $or$9 | $shl10$9;
 $arrayidx14$9 = ((($block)) + 39|0);
 $39 = HEAP8[$arrayidx14$9>>0]|0;
 $conv15$9 = $39&255;
 $or16$9 = $or11$9 | $conv15$9;
 $arrayidx17$9 = ((($m)) + 36|0);
 HEAP32[$arrayidx17$9>>2] = $or16$9;
 $add$ptr$10 = ((($block)) + 40|0);
 $40 = HEAP8[$add$ptr$10>>0]|0;
 $conv$10 = $40&255;
 $shl$10 = $conv$10 << 24;
 $arrayidx3$10 = ((($block)) + 41|0);
 $41 = HEAP8[$arrayidx3$10>>0]|0;
 $conv4$10 = $41&255;
 $shl5$10 = $conv4$10 << 16;
 $or$10 = $shl5$10 | $shl$10;
 $arrayidx8$10 = ((($block)) + 42|0);
 $42 = HEAP8[$arrayidx8$10>>0]|0;
 $conv9$10 = $42&255;
 $shl10$10 = $conv9$10 << 8;
 $or11$10 = $or$10 | $shl10$10;
 $arrayidx14$10 = ((($block)) + 43|0);
 $43 = HEAP8[$arrayidx14$10>>0]|0;
 $conv15$10 = $43&255;
 $or16$10 = $or11$10 | $conv15$10;
 $arrayidx17$10 = ((($m)) + 40|0);
 HEAP32[$arrayidx17$10>>2] = $or16$10;
 $add$ptr$11 = ((($block)) + 44|0);
 $44 = HEAP8[$add$ptr$11>>0]|0;
 $conv$11 = $44&255;
 $shl$11 = $conv$11 << 24;
 $arrayidx3$11 = ((($block)) + 45|0);
 $45 = HEAP8[$arrayidx3$11>>0]|0;
 $conv4$11 = $45&255;
 $shl5$11 = $conv4$11 << 16;
 $or$11 = $shl5$11 | $shl$11;
 $arrayidx8$11 = ((($block)) + 46|0);
 $46 = HEAP8[$arrayidx8$11>>0]|0;
 $conv9$11 = $46&255;
 $shl10$11 = $conv9$11 << 8;
 $or11$11 = $or$11 | $shl10$11;
 $arrayidx14$11 = ((($block)) + 47|0);
 $47 = HEAP8[$arrayidx14$11>>0]|0;
 $conv15$11 = $47&255;
 $or16$11 = $or11$11 | $conv15$11;
 $arrayidx17$11 = ((($m)) + 44|0);
 HEAP32[$arrayidx17$11>>2] = $or16$11;
 $add$ptr$12 = ((($block)) + 48|0);
 $48 = HEAP8[$add$ptr$12>>0]|0;
 $conv$12 = $48&255;
 $shl$12 = $conv$12 << 24;
 $arrayidx3$12 = ((($block)) + 49|0);
 $49 = HEAP8[$arrayidx3$12>>0]|0;
 $conv4$12 = $49&255;
 $shl5$12 = $conv4$12 << 16;
 $or$12 = $shl5$12 | $shl$12;
 $arrayidx8$12 = ((($block)) + 50|0);
 $50 = HEAP8[$arrayidx8$12>>0]|0;
 $conv9$12 = $50&255;
 $shl10$12 = $conv9$12 << 8;
 $or11$12 = $or$12 | $shl10$12;
 $arrayidx14$12 = ((($block)) + 51|0);
 $51 = HEAP8[$arrayidx14$12>>0]|0;
 $conv15$12 = $51&255;
 $or16$12 = $or11$12 | $conv15$12;
 $arrayidx17$12 = ((($m)) + 48|0);
 HEAP32[$arrayidx17$12>>2] = $or16$12;
 $add$ptr$13 = ((($block)) + 52|0);
 $52 = HEAP8[$add$ptr$13>>0]|0;
 $conv$13 = $52&255;
 $shl$13 = $conv$13 << 24;
 $arrayidx3$13 = ((($block)) + 53|0);
 $53 = HEAP8[$arrayidx3$13>>0]|0;
 $conv4$13 = $53&255;
 $shl5$13 = $conv4$13 << 16;
 $or$13 = $shl5$13 | $shl$13;
 $arrayidx8$13 = ((($block)) + 54|0);
 $54 = HEAP8[$arrayidx8$13>>0]|0;
 $conv9$13 = $54&255;
 $shl10$13 = $conv9$13 << 8;
 $or11$13 = $or$13 | $shl10$13;
 $arrayidx14$13 = ((($block)) + 55|0);
 $55 = HEAP8[$arrayidx14$13>>0]|0;
 $conv15$13 = $55&255;
 $or16$13 = $or11$13 | $conv15$13;
 $arrayidx17$13 = ((($m)) + 52|0);
 HEAP32[$arrayidx17$13>>2] = $or16$13;
 $add$ptr$14 = ((($block)) + 56|0);
 $56 = HEAP8[$add$ptr$14>>0]|0;
 $conv$14 = $56&255;
 $shl$14 = $conv$14 << 24;
 $arrayidx3$14 = ((($block)) + 57|0);
 $57 = HEAP8[$arrayidx3$14>>0]|0;
 $conv4$14 = $57&255;
 $shl5$14 = $conv4$14 << 16;
 $or$14 = $shl5$14 | $shl$14;
 $arrayidx8$14 = ((($block)) + 58|0);
 $58 = HEAP8[$arrayidx8$14>>0]|0;
 $conv9$14 = $58&255;
 $shl10$14 = $conv9$14 << 8;
 $or11$14 = $or$14 | $shl10$14;
 $arrayidx14$14 = ((($block)) + 59|0);
 $59 = HEAP8[$arrayidx14$14>>0]|0;
 $conv15$14 = $59&255;
 $or16$14 = $or11$14 | $conv15$14;
 $arrayidx17$14 = ((($m)) + 56|0);
 HEAP32[$arrayidx17$14>>2] = $or16$14;
 $add$ptr$15 = ((($block)) + 60|0);
 $60 = HEAP8[$add$ptr$15>>0]|0;
 $conv$15 = $60&255;
 $shl$15 = $conv$15 << 24;
 $arrayidx3$15 = ((($block)) + 61|0);
 $61 = HEAP8[$arrayidx3$15>>0]|0;
 $conv4$15 = $61&255;
 $shl5$15 = $conv4$15 << 16;
 $or$15 = $shl5$15 | $shl$15;
 $arrayidx8$15 = ((($block)) + 62|0);
 $62 = HEAP8[$arrayidx8$15>>0]|0;
 $conv9$15 = $62&255;
 $shl10$15 = $conv9$15 << 8;
 $or11$15 = $or$15 | $shl10$15;
 $arrayidx14$15 = ((($block)) + 63|0);
 $63 = HEAP8[$arrayidx14$15>>0]|0;
 $conv15$15 = $63&255;
 $or16$15 = $or11$15 | $conv15$15;
 $arrayidx17$15 = ((($m)) + 60|0);
 HEAP32[$arrayidx17$15>>2] = $or16$15;
 ;HEAP32[$v>>2]=HEAP32[$S>>2]|0;HEAP32[$v+4>>2]=HEAP32[$S+4>>2]|0;HEAP32[$v+8>>2]=HEAP32[$S+8>>2]|0;HEAP32[$v+12>>2]=HEAP32[$S+12>>2]|0;HEAP32[$v+16>>2]=HEAP32[$S+16>>2]|0;HEAP32[$v+20>>2]=HEAP32[$S+20>>2]|0;HEAP32[$v+24>>2]=HEAP32[$S+24>>2]|0;HEAP32[$v+28>>2]=HEAP32[$S+28>>2]|0;
 $arrayidx27 = ((($S)) + 32|0);
 $64 = HEAP32[$arrayidx27>>2]|0;
 $xor = $64 ^ 608135816;
 $arrayidx28 = ((($v)) + 32|0);
 HEAP32[$arrayidx28>>2] = $xor;
 $arrayidx30 = ((($S)) + 36|0);
 $65 = HEAP32[$arrayidx30>>2]|0;
 $xor31 = $65 ^ -2052912941;
 $arrayidx32 = ((($v)) + 36|0);
 HEAP32[$arrayidx32>>2] = $xor31;
 $arrayidx34 = ((($S)) + 40|0);
 $66 = HEAP32[$arrayidx34>>2]|0;
 $xor35 = $66 ^ 320440878;
 $arrayidx36 = ((($v)) + 40|0);
 HEAP32[$arrayidx36>>2] = $xor35;
 $arrayidx38 = ((($S)) + 44|0);
 $67 = HEAP32[$arrayidx38>>2]|0;
 $xor39 = $67 ^ 57701188;
 $arrayidx40 = ((($v)) + 44|0);
 HEAP32[$arrayidx40>>2] = $xor39;
 $arrayidx41 = ((($v)) + 48|0);
 HEAP32[$arrayidx41>>2] = -1542899678;
 $arrayidx42 = ((($v)) + 52|0);
 HEAP32[$arrayidx42>>2] = 698298832;
 $arrayidx43 = ((($v)) + 56|0);
 HEAP32[$arrayidx43>>2] = 137296536;
 $arrayidx44 = ((($v)) + 60|0);
 HEAP32[$arrayidx44>>2] = -330404727;
 $nullt = ((($S)) + 60|0);
 $68 = HEAP32[$nullt>>2]|0;
 $cmp45 = ($68|0)==(0);
 if ($cmp45) {
  $arrayidx47 = ((($S)) + 48|0);
  $69 = HEAP32[$arrayidx47>>2]|0;
  $xor49 = $69 ^ -1542899678;
  HEAP32[$arrayidx41>>2] = $xor49;
  $xor53 = $69 ^ 698298832;
  HEAP32[$arrayidx42>>2] = $xor53;
  $arrayidx55 = ((($S)) + 52|0);
  $70 = HEAP32[$arrayidx55>>2]|0;
  $xor57 = $70 ^ 137296536;
  HEAP32[$arrayidx43>>2] = $xor57;
  $xor61 = $70 ^ -330404727;
  HEAP32[$arrayidx44>>2] = $xor61;
  $arrayidx41$promoted = $xor49;$arrayidx42$promoted = $xor53;$arrayidx43$promoted = $xor57;$arrayidx44$promoted = $xor61;
 } else {
  $arrayidx41$promoted = -1542899678;$arrayidx42$promoted = 698298832;$arrayidx43$promoted = 137296536;$arrayidx44$promoted = -330404727;
 }
 $arrayidx74 = ((($v)) + 16|0);
 $arrayidx144 = ((($v)) + 20|0);
 $arrayidx146 = ((($v)) + 4|0);
 $arrayidx216 = ((($v)) + 24|0);
 $arrayidx218 = ((($v)) + 8|0);
 $arrayidx288 = ((($v)) + 28|0);
 $arrayidx290 = ((($v)) + 12|0);
 $arrayidx74$promoted = HEAP32[$arrayidx74>>2]|0;
 $arrayidx75$promoted = HEAP32[$v>>2]|0;
 $arrayidx144$promoted = HEAP32[$arrayidx144>>2]|0;
 $arrayidx146$promoted = HEAP32[$arrayidx146>>2]|0;
 $arrayidx216$promoted = HEAP32[$arrayidx216>>2]|0;
 $arrayidx218$promoted = HEAP32[$arrayidx218>>2]|0;
 $arrayidx288$promoted = HEAP32[$arrayidx288>>2]|0;
 $arrayidx290$promoted = HEAP32[$arrayidx290>>2]|0;
 $add39984 = $arrayidx290$promoted;$add41278 = $xor31;$add47180 = $arrayidx218$promoted;$add48474 = $xor;$add54372 = $arrayidx75$promoted;$add55682 = $xor35;$add61576 = $arrayidx146$promoted;$add62886 = $xor39;$i$270 = 0;$or40881 = $arrayidx43$promoted;$or42171 = $arrayidx74$promoted;$or48077 = $arrayidx42$promoted;$or49383 = $arrayidx288$promoted;$or55285 = $arrayidx44$promoted;$or56575 = $arrayidx144$promoted;$or62473 = $arrayidx41$promoted;$or63779 = $arrayidx216$promoted;
 while(1) {
  $arrayidx67 = (39536 + ($i$270<<4)|0);
  $71 = HEAP8[$arrayidx67>>0]|0;
  $idxprom = $71&255;
  $arrayidx68 = (($m) + ($idxprom<<2)|0);
  $72 = HEAP32[$arrayidx68>>2]|0;
  $arrayidx70 = (((39536 + ($i$270<<4)|0)) + 1|0);
  $73 = HEAP8[$arrayidx70>>0]|0;
  $idxprom71 = $73&255;
  $arrayidx72 = (39760 + ($idxprom71<<2)|0);
  $74 = HEAP32[$arrayidx72>>2]|0;
  $xor73 = $74 ^ $72;
  $add = (($xor73) + ($or42171))|0;
  $add76 = (($add) + ($add54372))|0;
  $xor79 = $or62473 ^ $add76;
  $shl80 = $xor79 << 16;
  $shr = $xor79 >>> 16;
  $or84 = $shl80 | $shr;
  $add88 = (($or84) + ($add48474))|0;
  $xor91 = $add88 ^ $or42171;
  $shl92 = $xor91 << 20;
  $shr96 = $xor91 >>> 12;
  $or97 = $shl92 | $shr96;
  $arrayidx102 = (($m) + ($idxprom71<<2)|0);
  $75 = HEAP32[$arrayidx102>>2]|0;
  $arrayidx106 = (39760 + ($idxprom<<2)|0);
  $76 = HEAP32[$arrayidx106>>2]|0;
  $xor107 = $76 ^ $75;
  $add109 = (($or97) + ($add76))|0;
  $add111 = (($add109) + ($xor107))|0;
  $xor114 = $add111 ^ $or84;
  $shl115 = $xor114 << 24;
  $shr119 = $xor114 >>> 8;
  $or120 = $shl115 | $shr119;
  $add124 = (($or120) + ($add88))|0;
  $xor127 = $add124 ^ $or97;
  $shl128 = $xor127 << 25;
  $shr132 = $xor127 >>> 7;
  $or133 = $shl128 | $shr132;
  $arrayidx136 = (((39536 + ($i$270<<4)|0)) + 2|0);
  $77 = HEAP8[$arrayidx136>>0]|0;
  $idxprom137 = $77&255;
  $arrayidx138 = (($m) + ($idxprom137<<2)|0);
  $78 = HEAP32[$arrayidx138>>2]|0;
  $arrayidx140 = (((39536 + ($i$270<<4)|0)) + 3|0);
  $79 = HEAP8[$arrayidx140>>0]|0;
  $idxprom141 = $79&255;
  $arrayidx142 = (39760 + ($idxprom141<<2)|0);
  $80 = HEAP32[$arrayidx142>>2]|0;
  $xor143 = $80 ^ $78;
  $add145 = (($xor143) + ($or56575))|0;
  $add147 = (($add145) + ($add61576))|0;
  $xor150 = $or48077 ^ $add147;
  $shl151 = $xor150 << 16;
  $shr155 = $xor150 >>> 16;
  $or156 = $shl151 | $shr155;
  $add160 = (($or156) + ($add41278))|0;
  $xor163 = $add160 ^ $or56575;
  $shl164 = $xor163 << 20;
  $shr168 = $xor163 >>> 12;
  $or169 = $shl164 | $shr168;
  $arrayidx174 = (($m) + ($idxprom141<<2)|0);
  $81 = HEAP32[$arrayidx174>>2]|0;
  $arrayidx178 = (39760 + ($idxprom137<<2)|0);
  $82 = HEAP32[$arrayidx178>>2]|0;
  $xor179 = $82 ^ $81;
  $add181 = (($or169) + ($add147))|0;
  $add183 = (($add181) + ($xor179))|0;
  $xor186 = $add183 ^ $or156;
  $shl187 = $xor186 << 24;
  $shr191 = $xor186 >>> 8;
  $or192 = $shl187 | $shr191;
  $add196 = (($or192) + ($add160))|0;
  $xor199 = $add196 ^ $or169;
  $shl200 = $xor199 << 25;
  $shr204 = $xor199 >>> 7;
  $or205 = $shl200 | $shr204;
  $arrayidx208 = (((39536 + ($i$270<<4)|0)) + 4|0);
  $83 = HEAP8[$arrayidx208>>0]|0;
  $idxprom209 = $83&255;
  $arrayidx210 = (($m) + ($idxprom209<<2)|0);
  $84 = HEAP32[$arrayidx210>>2]|0;
  $arrayidx212 = (((39536 + ($i$270<<4)|0)) + 5|0);
  $85 = HEAP8[$arrayidx212>>0]|0;
  $idxprom213 = $85&255;
  $arrayidx214 = (39760 + ($idxprom213<<2)|0);
  $86 = HEAP32[$arrayidx214>>2]|0;
  $xor215 = $86 ^ $84;
  $add217 = (($xor215) + ($or63779))|0;
  $add219 = (($add217) + ($add47180))|0;
  $xor222 = $or40881 ^ $add219;
  $shl223 = $xor222 << 16;
  $shr227 = $xor222 >>> 16;
  $or228 = $shl223 | $shr227;
  $add232 = (($or228) + ($add55682))|0;
  $xor235 = $add232 ^ $or63779;
  $shl236 = $xor235 << 20;
  $shr240 = $xor235 >>> 12;
  $or241 = $shl236 | $shr240;
  $arrayidx246 = (($m) + ($idxprom213<<2)|0);
  $87 = HEAP32[$arrayidx246>>2]|0;
  $arrayidx250 = (39760 + ($idxprom209<<2)|0);
  $88 = HEAP32[$arrayidx250>>2]|0;
  $xor251 = $88 ^ $87;
  $add253 = (($or241) + ($add219))|0;
  $add255 = (($add253) + ($xor251))|0;
  $xor258 = $add255 ^ $or228;
  $shl259 = $xor258 << 24;
  $shr263 = $xor258 >>> 8;
  $or264 = $shl259 | $shr263;
  $add268 = (($or264) + ($add232))|0;
  $xor271 = $add268 ^ $or241;
  $shl272 = $xor271 << 25;
  $shr276 = $xor271 >>> 7;
  $or277 = $shl272 | $shr276;
  $arrayidx280 = (((39536 + ($i$270<<4)|0)) + 6|0);
  $89 = HEAP8[$arrayidx280>>0]|0;
  $idxprom281 = $89&255;
  $arrayidx282 = (($m) + ($idxprom281<<2)|0);
  $90 = HEAP32[$arrayidx282>>2]|0;
  $arrayidx284 = (((39536 + ($i$270<<4)|0)) + 7|0);
  $91 = HEAP8[$arrayidx284>>0]|0;
  $idxprom285 = $91&255;
  $arrayidx286 = (39760 + ($idxprom285<<2)|0);
  $92 = HEAP32[$arrayidx286>>2]|0;
  $xor287 = $92 ^ $90;
  $add289 = (($xor287) + ($or49383))|0;
  $add291 = (($add289) + ($add39984))|0;
  $xor294 = $or55285 ^ $add291;
  $shl295 = $xor294 << 16;
  $shr299 = $xor294 >>> 16;
  $or300 = $shl295 | $shr299;
  $add304 = (($or300) + ($add62886))|0;
  $xor307 = $add304 ^ $or49383;
  $shl308 = $xor307 << 20;
  $shr312 = $xor307 >>> 12;
  $or313 = $shl308 | $shr312;
  $arrayidx318 = (($m) + ($idxprom285<<2)|0);
  $93 = HEAP32[$arrayidx318>>2]|0;
  $arrayidx322 = (39760 + ($idxprom281<<2)|0);
  $94 = HEAP32[$arrayidx322>>2]|0;
  $xor323 = $94 ^ $93;
  $add325 = (($or313) + ($add291))|0;
  $add327 = (($add325) + ($xor323))|0;
  $xor330 = $add327 ^ $or300;
  $shl331 = $xor330 << 24;
  $shr335 = $xor330 >>> 8;
  $or336 = $shl331 | $shr335;
  $add340 = (($or336) + ($add304))|0;
  $xor343 = $add340 ^ $or313;
  $shl344 = $xor343 << 25;
  $shr348 = $xor343 >>> 7;
  $or349 = $shl344 | $shr348;
  $arrayidx352 = (((39536 + ($i$270<<4)|0)) + 14|0);
  $95 = HEAP8[$arrayidx352>>0]|0;
  $idxprom353 = $95&255;
  $arrayidx354 = (($m) + ($idxprom353<<2)|0);
  $96 = HEAP32[$arrayidx354>>2]|0;
  $arrayidx356 = (((39536 + ($i$270<<4)|0)) + 15|0);
  $97 = HEAP8[$arrayidx356>>0]|0;
  $idxprom357 = $97&255;
  $arrayidx358 = (39760 + ($idxprom357<<2)|0);
  $98 = HEAP32[$arrayidx358>>2]|0;
  $xor359 = $98 ^ $96;
  $add361 = (($add327) + ($or133))|0;
  $add363 = (($add361) + ($xor359))|0;
  $xor366 = $add363 ^ $or264;
  $shl367 = $xor366 << 16;
  $shr371 = $xor366 >>> 16;
  $or372 = $shl367 | $shr371;
  $add376 = (($or372) + ($add196))|0;
  $xor379 = $add376 ^ $or133;
  $shl380 = $xor379 << 20;
  $shr384 = $xor379 >>> 12;
  $or385 = $shl380 | $shr384;
  $arrayidx390 = (($m) + ($idxprom357<<2)|0);
  $99 = HEAP32[$arrayidx390>>2]|0;
  $arrayidx394 = (39760 + ($idxprom353<<2)|0);
  $100 = HEAP32[$arrayidx394>>2]|0;
  $xor395 = $100 ^ $99;
  $add397 = (($xor395) + ($add363))|0;
  $add399 = (($add397) + ($or385))|0;
  $xor402 = $add399 ^ $or372;
  $shl403 = $xor402 << 24;
  $shr407 = $xor402 >>> 8;
  $or408 = $shl403 | $shr407;
  $add412 = (($or408) + ($add376))|0;
  $xor415 = $add412 ^ $or385;
  $shl416 = $xor415 << 25;
  $shr420 = $xor415 >>> 7;
  $or421 = $shl416 | $shr420;
  $arrayidx424 = (((39536 + ($i$270<<4)|0)) + 12|0);
  $101 = HEAP8[$arrayidx424>>0]|0;
  $idxprom425 = $101&255;
  $arrayidx426 = (($m) + ($idxprom425<<2)|0);
  $102 = HEAP32[$arrayidx426>>2]|0;
  $arrayidx428 = (((39536 + ($i$270<<4)|0)) + 13|0);
  $103 = HEAP8[$arrayidx428>>0]|0;
  $idxprom429 = $103&255;
  $arrayidx430 = (39760 + ($idxprom429<<2)|0);
  $104 = HEAP32[$arrayidx430>>2]|0;
  $xor431 = $104 ^ $102;
  $add433 = (($or349) + ($add255))|0;
  $add435 = (($add433) + ($xor431))|0;
  $xor438 = $add435 ^ $or192;
  $shl439 = $xor438 << 16;
  $shr443 = $xor438 >>> 16;
  $or444 = $shl439 | $shr443;
  $add448 = (($or444) + ($add124))|0;
  $xor451 = $add448 ^ $or349;
  $shl452 = $xor451 << 20;
  $shr456 = $xor451 >>> 12;
  $or457 = $shl452 | $shr456;
  $arrayidx462 = (($m) + ($idxprom429<<2)|0);
  $105 = HEAP32[$arrayidx462>>2]|0;
  $arrayidx466 = (39760 + ($idxprom425<<2)|0);
  $106 = HEAP32[$arrayidx466>>2]|0;
  $xor467 = $106 ^ $105;
  $add469 = (($xor467) + ($add435))|0;
  $add471 = (($add469) + ($or457))|0;
  $xor474 = $add471 ^ $or444;
  $shl475 = $xor474 << 24;
  $shr479 = $xor474 >>> 8;
  $or480 = $shl475 | $shr479;
  $add484 = (($or480) + ($add448))|0;
  $xor487 = $add484 ^ $or457;
  $shl488 = $xor487 << 25;
  $shr492 = $xor487 >>> 7;
  $or493 = $shl488 | $shr492;
  $arrayidx496 = (((39536 + ($i$270<<4)|0)) + 8|0);
  $107 = HEAP8[$arrayidx496>>0]|0;
  $idxprom497 = $107&255;
  $arrayidx498 = (($m) + ($idxprom497<<2)|0);
  $108 = HEAP32[$arrayidx498>>2]|0;
  $arrayidx500 = (((39536 + ($i$270<<4)|0)) + 9|0);
  $109 = HEAP8[$arrayidx500>>0]|0;
  $idxprom501 = $109&255;
  $arrayidx502 = (39760 + ($idxprom501<<2)|0);
  $110 = HEAP32[$arrayidx502>>2]|0;
  $xor503 = $110 ^ $108;
  $add505 = (($or205) + ($add111))|0;
  $add507 = (($add505) + ($xor503))|0;
  $xor510 = $add507 ^ $or336;
  $shl511 = $xor510 << 16;
  $shr515 = $xor510 >>> 16;
  $or516 = $shl511 | $shr515;
  $add520 = (($or516) + ($add268))|0;
  $xor523 = $add520 ^ $or205;
  $shl524 = $xor523 << 20;
  $shr528 = $xor523 >>> 12;
  $or529 = $shl524 | $shr528;
  $arrayidx534 = (($m) + ($idxprom501<<2)|0);
  $111 = HEAP32[$arrayidx534>>2]|0;
  $arrayidx538 = (39760 + ($idxprom497<<2)|0);
  $112 = HEAP32[$arrayidx538>>2]|0;
  $xor539 = $112 ^ $111;
  $add541 = (($xor539) + ($add507))|0;
  $add543 = (($add541) + ($or529))|0;
  $xor546 = $add543 ^ $or516;
  $shl547 = $xor546 << 24;
  $shr551 = $xor546 >>> 8;
  $or552 = $shl547 | $shr551;
  $add556 = (($or552) + ($add520))|0;
  $xor559 = $add556 ^ $or529;
  $shl560 = $xor559 << 25;
  $shr564 = $xor559 >>> 7;
  $or565 = $shl560 | $shr564;
  $arrayidx568 = (((39536 + ($i$270<<4)|0)) + 10|0);
  $113 = HEAP8[$arrayidx568>>0]|0;
  $idxprom569 = $113&255;
  $arrayidx570 = (($m) + ($idxprom569<<2)|0);
  $114 = HEAP32[$arrayidx570>>2]|0;
  $arrayidx572 = (((39536 + ($i$270<<4)|0)) + 11|0);
  $115 = HEAP8[$arrayidx572>>0]|0;
  $idxprom573 = $115&255;
  $arrayidx574 = (39760 + ($idxprom573<<2)|0);
  $116 = HEAP32[$arrayidx574>>2]|0;
  $xor575 = $116 ^ $114;
  $add577 = (($or277) + ($add183))|0;
  $add579 = (($add577) + ($xor575))|0;
  $xor582 = $add579 ^ $or120;
  $shl583 = $xor582 << 16;
  $shr587 = $xor582 >>> 16;
  $or588 = $shl583 | $shr587;
  $add592 = (($or588) + ($add340))|0;
  $xor595 = $add592 ^ $or277;
  $shl596 = $xor595 << 20;
  $shr600 = $xor595 >>> 12;
  $or601 = $shl596 | $shr600;
  $arrayidx606 = (($m) + ($idxprom573<<2)|0);
  $117 = HEAP32[$arrayidx606>>2]|0;
  $arrayidx610 = (39760 + ($idxprom569<<2)|0);
  $118 = HEAP32[$arrayidx610>>2]|0;
  $xor611 = $118 ^ $117;
  $add613 = (($xor611) + ($add579))|0;
  $add615 = (($add613) + ($or601))|0;
  $xor618 = $add615 ^ $or588;
  $shl619 = $xor618 << 24;
  $shr623 = $xor618 >>> 8;
  $or624 = $shl619 | $shr623;
  $add628 = (($or624) + ($add592))|0;
  $xor631 = $add628 ^ $or601;
  $shl632 = $xor631 << 25;
  $shr636 = $xor631 >>> 7;
  $or637 = $shl632 | $shr636;
  $inc640 = (($i$270) + 1)|0;
  $exitcond = ($inc640|0)==(14);
  if ($exitcond) {
   break;
  } else {
   $add39984 = $add399;$add41278 = $add412;$add47180 = $add471;$add48474 = $add484;$add54372 = $add543;$add55682 = $add556;$add61576 = $add615;$add62886 = $add628;$i$270 = $inc640;$or40881 = $or408;$or42171 = $or421;$or48077 = $or480;$or49383 = $or493;$or55285 = $or552;$or56575 = $or565;$or62473 = $or624;$or63779 = $or637;
  }
 }
 $119 = HEAP32[$S>>2]|0;
 $xor649 = $119 ^ $add543;
 $arrayidx648$1 = ((($S)) + 4|0);
 $120 = HEAP32[$arrayidx648$1>>2]|0;
 $xor649$1 = $120 ^ $add615;
 $arrayidx648$2 = ((($S)) + 8|0);
 $121 = HEAP32[$arrayidx648$2>>2]|0;
 $xor649$2 = $121 ^ $add471;
 $arrayidx648$3 = ((($S)) + 12|0);
 $122 = HEAP32[$arrayidx648$3>>2]|0;
 $xor649$3 = $122 ^ $add399;
 $arrayidx648$4 = ((($S)) + 16|0);
 $123 = HEAP32[$arrayidx648$4>>2]|0;
 $xor649$4 = $123 ^ $or421;
 $arrayidx648$5 = ((($S)) + 20|0);
 $124 = HEAP32[$arrayidx648$5>>2]|0;
 $xor649$5 = $124 ^ $or565;
 $arrayidx648$6 = ((($S)) + 24|0);
 $125 = HEAP32[$arrayidx648$6>>2]|0;
 $xor649$6 = $125 ^ $or637;
 $arrayidx648$7 = ((($S)) + 28|0);
 $126 = HEAP32[$arrayidx648$7>>2]|0;
 $xor649$7 = $126 ^ $or493;
 $xor649$8 = $xor649 ^ $add484;
 $xor649$9 = $xor649$1 ^ $add412;
 $xor649$10 = $xor649$2 ^ $add556;
 $xor649$11 = $xor649$3 ^ $add628;
 $xor649$12 = $xor649$4 ^ $or624;
 $xor649$13 = $xor649$5 ^ $or480;
 $xor649$14 = $xor649$6 ^ $or408;
 $xor649$15 = $xor649$7 ^ $or552;
 $127 = HEAP32[$arrayidx27>>2]|0;
 $xor662 = $xor649$8 ^ $127;
 HEAP32[$S>>2] = $xor662;
 $128 = HEAP32[$arrayidx30>>2]|0;
 $xor662$1 = $xor649$9 ^ $128;
 HEAP32[$arrayidx648$1>>2] = $xor662$1;
 $129 = HEAP32[$arrayidx34>>2]|0;
 $xor662$2 = $xor649$10 ^ $129;
 HEAP32[$arrayidx648$2>>2] = $xor662$2;
 $130 = HEAP32[$arrayidx38>>2]|0;
 $xor662$3 = $xor649$11 ^ $130;
 HEAP32[$arrayidx648$3>>2] = $xor662$3;
 $xor662$4 = $xor649$12 ^ $127;
 HEAP32[$arrayidx648$4>>2] = $xor662$4;
 $xor662$5 = $xor649$13 ^ $128;
 HEAP32[$arrayidx648$5>>2] = $xor662$5;
 $xor662$6 = $xor649$14 ^ $129;
 HEAP32[$arrayidx648$6>>2] = $xor662$6;
 $xor662$7 = $xor649$15 ^ $130;
 HEAP32[$arrayidx648$7>>2] = $xor662$7;
 STACKTOP = sp;return;
}
function _blake256_update($S,$data,$0,$1) {
 $S = $S|0;
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr12 = 0, $add$ptr30 = 0, $add$ptr37 = 0, $add20 = 0, $add42 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx19 = 0, $arrayidx27 = 0, $arrayidx9 = 0, $buflen = 0, $cmp23 = 0, $cmp5 = 0, $data$addr$0 = 0, $data$addr$1$lcssa = 0, $data$addr$134 = 0, $inc = 0, $inc28 = 0;
 var $left$0 = 0, $shl = 0, $shl40 = 0, $shr = 0, $storemerge = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $buflen = ((($S)) + 56|0);
 $2 = HEAP32[$buflen>>2]|0;
 $shr = $2 >> 3;
 $sub = (64 - ($shr))|0;
 $tobool = ($shr|0)==(0);
 if ($tobool) {
  $18 = $1;$20 = $0;$data$addr$0 = $data;$left$0 = 0;
 } else {
  $3 = (_bitshift64Lshr(($0|0),($1|0),3)|0);
  $4 = (getTempRet0() | 0);
  $5 = $3 & 63;
  $6 = (0)<(0);
  $7 = ($5>>>0)<($sub>>>0);
  $8 = (0)==(0);
  $9 = $8 & $7;
  $10 = $6 | $9;
  if ($10) {
   $18 = $1;$20 = $0;$data$addr$0 = $data;$left$0 = $shr;
  } else {
   $arraydecay = ((($S)) + 64|0);
   $add$ptr = (((($S)) + 64|0) + ($shr)|0);
   _memcpy(($add$ptr|0),($data|0),($sub|0))|0;
   $arrayidx = ((($S)) + 48|0);
   $11 = HEAP32[$arrayidx>>2]|0;
   $add = (($11) + 512)|0;
   HEAP32[$arrayidx>>2] = $add;
   $cmp5 = ($add|0)==(0);
   if ($cmp5) {
    $arrayidx9 = ((($S)) + 52|0);
    $12 = HEAP32[$arrayidx9>>2]|0;
    $inc = (($12) + 1)|0;
    HEAP32[$arrayidx9>>2] = $inc;
   }
   _blake256_compress($S,$arraydecay);
   $add$ptr12 = (($data) + ($sub)|0);
   $shl = $sub << 3;
   $13 = ($shl|0)<(0);
   $14 = $13 << 31 >> 31;
   $15 = (_i64Subtract(($0|0),($1|0),($shl|0),($14|0))|0);
   $16 = (getTempRet0() | 0);
   $18 = $16;$20 = $15;$data$addr$0 = $add$ptr12;$left$0 = 0;
  }
 }
 $17 = ($18>>>0)>(0);
 $19 = ($20>>>0)>(511);
 $21 = ($18|0)==(0);
 $22 = $21 & $19;
 $23 = $17 | $22;
 if ($23) {
  $arrayidx19 = ((($S)) + 48|0);
  $arrayidx27 = ((($S)) + 52|0);
  $26 = $20;$27 = $18;$data$addr$134 = $data$addr$0;
  while(1) {
   $24 = HEAP32[$arrayidx19>>2]|0;
   $add20 = (($24) + 512)|0;
   HEAP32[$arrayidx19>>2] = $add20;
   $cmp23 = ($add20|0)==(0);
   if ($cmp23) {
    $25 = HEAP32[$arrayidx27>>2]|0;
    $inc28 = (($25) + 1)|0;
    HEAP32[$arrayidx27>>2] = $inc28;
   }
   _blake256_compress($S,$data$addr$134);
   $add$ptr30 = ((($data$addr$134)) + 64|0);
   $28 = (_i64Add(($26|0),($27|0),-512,-1)|0);
   $29 = (getTempRet0() | 0);
   $30 = ($29>>>0)>(0);
   $31 = ($28>>>0)>(511);
   $32 = ($29|0)==(0);
   $33 = $32 & $31;
   $34 = $30 | $33;
   if ($34) {
    $26 = $28;$27 = $29;$data$addr$134 = $add$ptr30;
   } else {
    $36 = $28;$38 = $29;$data$addr$1$lcssa = $add$ptr30;
    break;
   }
  }
 } else {
  $36 = $20;$38 = $18;$data$addr$1$lcssa = $data$addr$0;
 }
 $35 = ($36|0)==(0);
 $37 = ($38|0)==(0);
 $39 = $35 & $37;
 if ($39) {
  $storemerge = 0;
  HEAP32[$buflen>>2] = $storemerge;
  return;
 }
 $shl40 = $left$0 << 3;
 $40 = (_bitshift64Lshr(($36|0),($38|0),3)|0);
 $41 = (getTempRet0() | 0);
 $add$ptr37 = (((($S)) + 64|0) + ($left$0)|0);
 _memcpy(($add$ptr37|0),($data$addr$1$lcssa|0),($40|0))|0;
 $add42 = (($shl40) + ($36))|0;
 $storemerge = $add42;
 HEAP32[$buflen>>2] = $storemerge;
 return;
}
function _blake256_final_h($S,$digest,$pa,$pb) {
 $S = $S|0;
 $digest = $digest|0;
 $pa = $pa|0;
 $pb = $pb|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr109 = 0, $add$ptr132 = 0, $add$ptr155 = 0, $add$ptr178 = 0, $add$ptr201 = 0, $add$ptr22 = 0, $add$ptr224 = 0, $add$ptr247 = 0, $arrayidx = 0, $arrayidx104 = 0, $arrayidx106 = 0, $arrayidx116 = 0, $arrayidx122 = 0, $arrayidx127 = 0, $arrayidx129 = 0, $arrayidx139 = 0;
 var $arrayidx14 = 0, $arrayidx145 = 0, $arrayidx150 = 0, $arrayidx152 = 0, $arrayidx162 = 0, $arrayidx168 = 0, $arrayidx173 = 0, $arrayidx175 = 0, $arrayidx18 = 0, $arrayidx185 = 0, $arrayidx191 = 0, $arrayidx196 = 0, $arrayidx198 = 0, $arrayidx2 = 0, $arrayidx208 = 0, $arrayidx214 = 0, $arrayidx219 = 0, $arrayidx221 = 0, $arrayidx231 = 0, $arrayidx237 = 0;
 var $arrayidx242 = 0, $arrayidx244 = 0, $arrayidx254 = 0, $arrayidx260 = 0, $arrayidx265 = 0, $arrayidx28 = 0, $arrayidx33 = 0, $arrayidx37 = 0, $arrayidx9 = 0, $arrayidx93 = 0, $arrayidx99 = 0, $buflen = 0, $cmp = 0, $cmp39 = 0, $cmp45 = 0, $cmp49 = 0, $conv = 0, $conv102 = 0, $conv108 = 0, $conv11 = 0;
 var $conv114 = 0, $conv120 = 0, $conv125 = 0, $conv131 = 0, $conv137 = 0, $conv143 = 0, $conv148 = 0, $conv15 = 0, $conv154 = 0, $conv160 = 0, $conv166 = 0, $conv171 = 0, $conv177 = 0, $conv183 = 0, $conv189 = 0, $conv194 = 0, $conv20 = 0, $conv200 = 0, $conv206 = 0, $conv212 = 0;
 var $conv217 = 0, $conv223 = 0, $conv229 = 0, $conv235 = 0, $conv240 = 0, $conv246 = 0, $conv25 = 0, $conv252 = 0, $conv258 = 0, $conv263 = 0, $conv30 = 0, $conv34 = 0, $conv6 = 0, $conv85 = 0, $conv91 = 0, $conv97 = 0, $inc = 0, $msglen = 0, $nullt = 0, $nullt73 = 0;
 var $pa$addr = 0, $pb$addr = 0, $shr = 0, $shr10 = 0, $shr107 = 0, $shr113 = 0, $shr119 = 0, $shr130 = 0, $shr136 = 0, $shr142 = 0, $shr153 = 0, $shr159 = 0, $shr165 = 0, $shr176 = 0, $shr182 = 0, $shr188 = 0, $shr19 = 0, $shr199 = 0, $shr205 = 0, $shr211 = 0;
 var $shr222 = 0, $shr228 = 0, $shr234 = 0, $shr24 = 0, $shr245 = 0, $shr251 = 0, $shr257 = 0, $shr29 = 0, $shr5 = 0, $shr84 = 0, $shr90 = 0, $shr96 = 0, $spec$select = 0, $sub = 0, $sub57 = 0, $sub59 = 0, $sub66 = 0, $sub68 = 0, $sub72 = 0, $sub77 = 0;
 var $sub81 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $pa$addr = sp + 16|0;
 $pb$addr = sp;
 $msglen = sp + 8|0;
 HEAP8[$pa$addr>>0] = $pa;
 HEAP8[$pb$addr>>0] = $pb;
 $arrayidx = ((($S)) + 48|0);
 $0 = HEAP32[$arrayidx>>2]|0;
 $buflen = ((($S)) + 56|0);
 $1 = HEAP32[$buflen>>2]|0;
 $add = (($1) + ($0))|0;
 $arrayidx2 = ((($S)) + 52|0);
 $2 = HEAP32[$arrayidx2>>2]|0;
 $cmp = ($add>>>0)<($1>>>0);
 $inc = $cmp&1;
 $spec$select = (($2) + ($inc))|0;
 $shr = $spec$select >>> 24;
 $conv = $shr&255;
 HEAP8[$msglen>>0] = $conv;
 $shr5 = $spec$select >>> 16;
 $conv6 = $shr5&255;
 $arrayidx9 = ((($msglen)) + 1|0);
 HEAP8[$arrayidx9>>0] = $conv6;
 $shr10 = $spec$select >>> 8;
 $conv11 = $shr10&255;
 $arrayidx14 = ((($msglen)) + 2|0);
 HEAP8[$arrayidx14>>0] = $conv11;
 $conv15 = $spec$select&255;
 $arrayidx18 = ((($msglen)) + 3|0);
 HEAP8[$arrayidx18>>0] = $conv15;
 $shr19 = $add >>> 24;
 $conv20 = $shr19&255;
 $add$ptr22 = ((($msglen)) + 4|0);
 HEAP8[$add$ptr22>>0] = $conv20;
 $shr24 = $add >>> 16;
 $conv25 = $shr24&255;
 $arrayidx28 = ((($msglen)) + 5|0);
 HEAP8[$arrayidx28>>0] = $conv25;
 $shr29 = $add >>> 8;
 $conv30 = $shr29&255;
 $arrayidx33 = ((($msglen)) + 6|0);
 HEAP8[$arrayidx33>>0] = $conv30;
 $conv34 = $add&255;
 $arrayidx37 = ((($msglen)) + 7|0);
 HEAP8[$arrayidx37>>0] = $conv34;
 $cmp39 = ($1|0)==(440);
 if ($cmp39) {
  $sub = (($0) + -8)|0;
  HEAP32[$arrayidx>>2] = $sub;
  _blake256_update($S,$pa$addr,8,0);
  $$pre = HEAP32[$arrayidx>>2]|0;
  $9 = $$pre;
 } else {
  $cmp45 = ($1|0)<(440);
  if ($cmp45) {
   $cmp49 = ($1|0)==(0);
   if ($cmp49) {
    $nullt = ((($S)) + 60|0);
    HEAP32[$nullt>>2] = 1;
   }
   $sub57 = (($add) + -440)|0;
   HEAP32[$arrayidx>>2] = $sub57;
   $sub59 = (440 - ($1))|0;
   $3 = ($sub59|0)<(0);
   $4 = $3 << 31 >> 31;
   _blake256_update($S,39824,$sub59,$4);
  } else {
   $sub66 = (($add) + -512)|0;
   HEAP32[$arrayidx>>2] = $sub66;
   $sub68 = (512 - ($1))|0;
   $5 = ($sub68|0)<(0);
   $6 = $5 << 31 >> 31;
   _blake256_update($S,39824,$sub68,$6);
   $7 = HEAP32[$arrayidx>>2]|0;
   $sub72 = (($7) + -440)|0;
   HEAP32[$arrayidx>>2] = $sub72;
   _blake256_update($S,(39825),440,0);
   $nullt73 = ((($S)) + 60|0);
   HEAP32[$nullt73>>2] = 1;
  }
  _blake256_update($S,$pb$addr,8,0);
  $8 = HEAP32[$arrayidx>>2]|0;
  $sub77 = (($8) + -8)|0;
  HEAP32[$arrayidx>>2] = $sub77;
  $9 = $sub77;
 }
 $sub81 = (($9) + -64)|0;
 HEAP32[$arrayidx>>2] = $sub81;
 _blake256_update($S,$msglen,64,0);
 $10 = HEAP32[$S>>2]|0;
 $shr84 = $10 >>> 24;
 $conv85 = $shr84&255;
 HEAP8[$digest>>0] = $conv85;
 $11 = HEAP32[$S>>2]|0;
 $shr90 = $11 >>> 16;
 $conv91 = $shr90&255;
 $arrayidx93 = ((($digest)) + 1|0);
 HEAP8[$arrayidx93>>0] = $conv91;
 $12 = HEAP32[$S>>2]|0;
 $shr96 = $12 >>> 8;
 $conv97 = $shr96&255;
 $arrayidx99 = ((($digest)) + 2|0);
 HEAP8[$arrayidx99>>0] = $conv97;
 $13 = HEAP32[$S>>2]|0;
 $conv102 = $13&255;
 $arrayidx104 = ((($digest)) + 3|0);
 HEAP8[$arrayidx104>>0] = $conv102;
 $arrayidx106 = ((($S)) + 4|0);
 $14 = HEAP32[$arrayidx106>>2]|0;
 $shr107 = $14 >>> 24;
 $conv108 = $shr107&255;
 $add$ptr109 = ((($digest)) + 4|0);
 HEAP8[$add$ptr109>>0] = $conv108;
 $15 = HEAP32[$arrayidx106>>2]|0;
 $shr113 = $15 >>> 16;
 $conv114 = $shr113&255;
 $arrayidx116 = ((($digest)) + 5|0);
 HEAP8[$arrayidx116>>0] = $conv114;
 $16 = HEAP32[$arrayidx106>>2]|0;
 $shr119 = $16 >>> 8;
 $conv120 = $shr119&255;
 $arrayidx122 = ((($digest)) + 6|0);
 HEAP8[$arrayidx122>>0] = $conv120;
 $17 = HEAP32[$arrayidx106>>2]|0;
 $conv125 = $17&255;
 $arrayidx127 = ((($digest)) + 7|0);
 HEAP8[$arrayidx127>>0] = $conv125;
 $arrayidx129 = ((($S)) + 8|0);
 $18 = HEAP32[$arrayidx129>>2]|0;
 $shr130 = $18 >>> 24;
 $conv131 = $shr130&255;
 $add$ptr132 = ((($digest)) + 8|0);
 HEAP8[$add$ptr132>>0] = $conv131;
 $19 = HEAP32[$arrayidx129>>2]|0;
 $shr136 = $19 >>> 16;
 $conv137 = $shr136&255;
 $arrayidx139 = ((($digest)) + 9|0);
 HEAP8[$arrayidx139>>0] = $conv137;
 $20 = HEAP32[$arrayidx129>>2]|0;
 $shr142 = $20 >>> 8;
 $conv143 = $shr142&255;
 $arrayidx145 = ((($digest)) + 10|0);
 HEAP8[$arrayidx145>>0] = $conv143;
 $21 = HEAP32[$arrayidx129>>2]|0;
 $conv148 = $21&255;
 $arrayidx150 = ((($digest)) + 11|0);
 HEAP8[$arrayidx150>>0] = $conv148;
 $arrayidx152 = ((($S)) + 12|0);
 $22 = HEAP32[$arrayidx152>>2]|0;
 $shr153 = $22 >>> 24;
 $conv154 = $shr153&255;
 $add$ptr155 = ((($digest)) + 12|0);
 HEAP8[$add$ptr155>>0] = $conv154;
 $23 = HEAP32[$arrayidx152>>2]|0;
 $shr159 = $23 >>> 16;
 $conv160 = $shr159&255;
 $arrayidx162 = ((($digest)) + 13|0);
 HEAP8[$arrayidx162>>0] = $conv160;
 $24 = HEAP32[$arrayidx152>>2]|0;
 $shr165 = $24 >>> 8;
 $conv166 = $shr165&255;
 $arrayidx168 = ((($digest)) + 14|0);
 HEAP8[$arrayidx168>>0] = $conv166;
 $25 = HEAP32[$arrayidx152>>2]|0;
 $conv171 = $25&255;
 $arrayidx173 = ((($digest)) + 15|0);
 HEAP8[$arrayidx173>>0] = $conv171;
 $arrayidx175 = ((($S)) + 16|0);
 $26 = HEAP32[$arrayidx175>>2]|0;
 $shr176 = $26 >>> 24;
 $conv177 = $shr176&255;
 $add$ptr178 = ((($digest)) + 16|0);
 HEAP8[$add$ptr178>>0] = $conv177;
 $27 = HEAP32[$arrayidx175>>2]|0;
 $shr182 = $27 >>> 16;
 $conv183 = $shr182&255;
 $arrayidx185 = ((($digest)) + 17|0);
 HEAP8[$arrayidx185>>0] = $conv183;
 $28 = HEAP32[$arrayidx175>>2]|0;
 $shr188 = $28 >>> 8;
 $conv189 = $shr188&255;
 $arrayidx191 = ((($digest)) + 18|0);
 HEAP8[$arrayidx191>>0] = $conv189;
 $29 = HEAP32[$arrayidx175>>2]|0;
 $conv194 = $29&255;
 $arrayidx196 = ((($digest)) + 19|0);
 HEAP8[$arrayidx196>>0] = $conv194;
 $arrayidx198 = ((($S)) + 20|0);
 $30 = HEAP32[$arrayidx198>>2]|0;
 $shr199 = $30 >>> 24;
 $conv200 = $shr199&255;
 $add$ptr201 = ((($digest)) + 20|0);
 HEAP8[$add$ptr201>>0] = $conv200;
 $31 = HEAP32[$arrayidx198>>2]|0;
 $shr205 = $31 >>> 16;
 $conv206 = $shr205&255;
 $arrayidx208 = ((($digest)) + 21|0);
 HEAP8[$arrayidx208>>0] = $conv206;
 $32 = HEAP32[$arrayidx198>>2]|0;
 $shr211 = $32 >>> 8;
 $conv212 = $shr211&255;
 $arrayidx214 = ((($digest)) + 22|0);
 HEAP8[$arrayidx214>>0] = $conv212;
 $33 = HEAP32[$arrayidx198>>2]|0;
 $conv217 = $33&255;
 $arrayidx219 = ((($digest)) + 23|0);
 HEAP8[$arrayidx219>>0] = $conv217;
 $arrayidx221 = ((($S)) + 24|0);
 $34 = HEAP32[$arrayidx221>>2]|0;
 $shr222 = $34 >>> 24;
 $conv223 = $shr222&255;
 $add$ptr224 = ((($digest)) + 24|0);
 HEAP8[$add$ptr224>>0] = $conv223;
 $35 = HEAP32[$arrayidx221>>2]|0;
 $shr228 = $35 >>> 16;
 $conv229 = $shr228&255;
 $arrayidx231 = ((($digest)) + 25|0);
 HEAP8[$arrayidx231>>0] = $conv229;
 $36 = HEAP32[$arrayidx221>>2]|0;
 $shr234 = $36 >>> 8;
 $conv235 = $shr234&255;
 $arrayidx237 = ((($digest)) + 26|0);
 HEAP8[$arrayidx237>>0] = $conv235;
 $37 = HEAP32[$arrayidx221>>2]|0;
 $conv240 = $37&255;
 $arrayidx242 = ((($digest)) + 27|0);
 HEAP8[$arrayidx242>>0] = $conv240;
 $arrayidx244 = ((($S)) + 28|0);
 $38 = HEAP32[$arrayidx244>>2]|0;
 $shr245 = $38 >>> 24;
 $conv246 = $shr245&255;
 $add$ptr247 = ((($digest)) + 28|0);
 HEAP8[$add$ptr247>>0] = $conv246;
 $39 = HEAP32[$arrayidx244>>2]|0;
 $shr251 = $39 >>> 16;
 $conv252 = $shr251&255;
 $arrayidx254 = ((($digest)) + 29|0);
 HEAP8[$arrayidx254>>0] = $conv252;
 $40 = HEAP32[$arrayidx244>>2]|0;
 $shr257 = $40 >>> 8;
 $conv258 = $shr257&255;
 $arrayidx260 = ((($digest)) + 30|0);
 HEAP8[$arrayidx260>>0] = $conv258;
 $41 = HEAP32[$arrayidx244>>2]|0;
 $conv263 = $41&255;
 $arrayidx265 = ((($digest)) + 31|0);
 HEAP8[$arrayidx265>>0] = $conv263;
 STACKTOP = sp;return;
}
function _blake256_hash($out,$in,$0,$1) {
 $out = $out|0;
 $in = $in|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $S = 0, $arrayidx10$i = 0, $arrayidx12$i = 0, $arrayidx14$i = 0, $arrayidx2$i = 0, $arrayidx24$i = 0, $arrayidx4$i = 0, $arrayidx6$i = 0, $arrayidx8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $S = sp;
 HEAP32[$S>>2] = 1779033703;
 $arrayidx2$i = ((($S)) + 4|0);
 HEAP32[$arrayidx2$i>>2] = -1150833019;
 $arrayidx4$i = ((($S)) + 8|0);
 HEAP32[$arrayidx4$i>>2] = 1013904242;
 $arrayidx6$i = ((($S)) + 12|0);
 HEAP32[$arrayidx6$i>>2] = -1521486534;
 $arrayidx8$i = ((($S)) + 16|0);
 HEAP32[$arrayidx8$i>>2] = 1359893119;
 $arrayidx10$i = ((($S)) + 20|0);
 HEAP32[$arrayidx10$i>>2] = -1694144372;
 $arrayidx12$i = ((($S)) + 24|0);
 HEAP32[$arrayidx12$i>>2] = 528734635;
 $arrayidx14$i = ((($S)) + 28|0);
 HEAP32[$arrayidx14$i>>2] = 1541459225;
 $arrayidx24$i = ((($S)) + 32|0);
 ;HEAP32[$arrayidx24$i>>2]=0|0;HEAP32[$arrayidx24$i+4>>2]=0|0;HEAP32[$arrayidx24$i+8>>2]=0|0;HEAP32[$arrayidx24$i+12>>2]=0|0;HEAP32[$arrayidx24$i+16>>2]=0|0;HEAP32[$arrayidx24$i+20>>2]=0|0;HEAP32[$arrayidx24$i+24>>2]=0|0;HEAP32[$arrayidx24$i+28>>2]=0|0;
 $2 = (_bitshift64Shl(($0|0),($1|0),3)|0);
 $3 = (getTempRet0() | 0);
 _blake256_update($S,$in,$2,$3);
 _blake256_final_h($S,$out,-127,1);
 STACKTOP = sp;return;
}
function _groestl($data,$0,$1,$hashval) {
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 $hashval = $hashval|0;
 var $$ph = 0, $$pr$i = 0, $$pr50$i = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $and$i = 0, $arraydecay31$i = 0, $arraydecay79$i = 0, $arrayidx$i = 0, $arrayidx13$i = 0, $arrayidx19$i = 0, $arrayidx2$i = 0, $arrayidx24$1$i$i = 0, $arrayidx24$10$i$i = 0, $arrayidx24$11$i$i = 0, $arrayidx24$12$i$i = 0, $arrayidx24$13$i$i = 0, $arrayidx24$14$i$i = 0, $arrayidx24$15$i$i = 0, $arrayidx24$2$i$i = 0, $arrayidx24$3$i$i = 0;
 var $arrayidx24$4$i$i = 0, $arrayidx24$5$i$i = 0, $arrayidx24$6$i$i = 0, $arrayidx24$7$i$i = 0, $arrayidx24$8$i$i = 0, $arrayidx24$9$i$i = 0, $arrayidx26$1$i$i = 0, $arrayidx26$10$i$i = 0, $arrayidx26$11$i$i = 0, $arrayidx26$12$i$i = 0, $arrayidx26$13$i$i = 0, $arrayidx26$14$i$i = 0, $arrayidx26$2$i$i = 0, $arrayidx26$3$i$i = 0, $arrayidx26$4$i$i = 0, $arrayidx26$5$i$i = 0, $arrayidx26$6$i$i = 0, $arrayidx26$7$i$i = 0, $arrayidx26$8$i$i = 0, $arrayidx26$9$i$i = 0;
 var $arrayidx29$i = 0, $arrayidx32$i = 0, $arrayidx36$i = 0, $arrayidx41$i = 0, $arrayidx42$i = 0, $arrayidx45$i = 0, $arrayidx61$i = 0, $arrayidx74$i = 0, $arrayidx83$17$i = 0, $arrayidx83$18$i = 0, $arrayidx83$19$i = 0, $arrayidx83$21$i = 0, $arrayidx83$22$i = 0, $arrayidx83$23$i = 0, $arrayidx83$25$i = 0, $arrayidx83$26$i = 0, $arrayidx83$27$i = 0, $arrayidx83$29$i = 0, $arrayidx83$30$i = 0, $arrayidx83$31$i = 0;
 var $arrayidx84$1$i = 0, $arrayidx84$10$i = 0, $arrayidx84$11$i = 0, $arrayidx84$12$i = 0, $arrayidx84$13$i = 0, $arrayidx84$14$i = 0, $arrayidx84$15$i = 0, $arrayidx84$16$i = 0, $arrayidx84$17$i = 0, $arrayidx84$18$i = 0, $arrayidx84$19$i = 0, $arrayidx84$2$i = 0, $arrayidx84$20$i = 0, $arrayidx84$21$i = 0, $arrayidx84$22$i = 0, $arrayidx84$23$i = 0, $arrayidx84$24$i = 0, $arrayidx84$25$i = 0, $arrayidx84$26$i = 0, $arrayidx84$27$i = 0;
 var $arrayidx84$28$i = 0, $arrayidx84$29$i = 0, $arrayidx84$3$i = 0, $arrayidx84$30$i = 0, $arrayidx84$31$i = 0, $arrayidx84$4$i = 0, $arrayidx84$5$i = 0, $arrayidx84$6$i = 0, $arrayidx84$7$i = 0, $arrayidx84$8$i = 0, $arrayidx84$9$i = 0, $bits_in_last_byte$i = 0, $block_counter1$i = 0, $block_counter2$i = 0, $buf_ptr$i = 0, $cmp$i = 0, $cmp24$i = 0, $cmp2457$i = 0, $cmp28$i = 0, $cmp2840$i = 0;
 var $cmp36$i = 0, $cmp3656$i = 0, $cmp46$i = 0, $cmp54$i = 0, $cmp66$i = 0, $cmp6655$i = 0, $context = 0, $conv$i = 0, $conv14$i = 0, $conv15$i = 0, $conv2$i = 0, $conv58$i = 0, $conv6$i = 0, $conv70$i = 0, $dec$i = 0, $dec73$i = 0, $div26$i = 0, $inc$i = 0, $inc28$i = 0, $inc31$i = 0;
 var $inc35$i = 0, $inc41$i = 0, $inc44$i = 0, $inc44$i17 = 0, $inc49$i = 0, $index$2$lcssa$i = 0, $index$241$i = 0, $mul$i = 0, $shl$i = 0, $shl4$i = 0, $shl9$i = 0, $shr$i = 0, $shr76$i = 0, $sub$i = 0, $sub12$i = 0, $sub3$i = 0, $sub5$i = 0, $sub8$i = 0, $temp$i$i = 0, $tobool$i = 0;
 var $tobool38$i = 0, $xor$1$i$i = 0, $xor$10$i$i = 0, $xor$11$i$i = 0, $xor$12$i$i = 0, $xor$13$i$i = 0, $xor$14$i$i = 0, $xor$15$i$i = 0, $xor$2$i$i = 0, $xor$3$i$i = 0, $xor$4$i$i = 0, $xor$5$i$i = 0, $xor$6$i$i = 0, $xor$7$i$i = 0, $xor$8$i$i = 0, $xor$9$i$i = 0, $xor$i = 0, $xor$i$i = 0, $y$i$i = 0, $z$i$i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $temp$i$i = sp + 128|0;
 $y$i$i = sp + 64|0;
 $z$i$i = sp;
 $context = sp + 192|0;
 dest=$context; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arrayidx2$i = ((($context)) + 60|0);
 HEAP32[$arrayidx2$i>>2] = 65536;
 $buf_ptr$i = ((($context)) + 136|0);
 HEAP32[$buf_ptr$i>>2] = 0;
 $block_counter1$i = ((($context)) + 64|0);
 HEAP32[$block_counter1$i>>2] = 0;
 $block_counter2$i = ((($context)) + 68|0);
 HEAP32[$block_counter2$i>>2] = 0;
 $bits_in_last_byte$i = ((($context)) + 140|0);
 HEAP32[$bits_in_last_byte$i>>2] = 0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),3)|0);
 $3 = (getTempRet0() | 0);
 $conv2$i = $0 & 7;
 _Transform($context,$data,$2);
 $div26$i = (($2|0) / 64)&-1;
 $mul$i = $div26$i << 6;
 $cmp2840$i = ($mul$i|0)<($2|0);
 if ($cmp2840$i) {
  $index$241$i = $mul$i;
  while(1) {
   $inc31$i = (($index$241$i) + 1)|0;
   $arrayidx32$i = (($data) + ($index$241$i)|0);
   $4 = HEAP8[$arrayidx32$i>>0]|0;
   $5 = HEAP32[$buf_ptr$i>>2]|0;
   $inc35$i = (($5) + 1)|0;
   HEAP32[$buf_ptr$i>>2] = $inc35$i;
   $arrayidx36$i = (((($context)) + 72|0) + ($5)|0);
   HEAP8[$arrayidx36$i>>0] = $4;
   $cmp28$i = ($inc31$i|0)<($2|0);
   if ($cmp28$i) {
    $index$241$i = $inc31$i;
   } else {
    $index$2$lcssa$i = $2;
    break;
   }
  }
 } else {
  $index$2$lcssa$i = $mul$i;
 }
 $tobool38$i = ($conv2$i|0)==(0);
 if (!($tobool38$i)) {
  HEAP32[$bits_in_last_byte$i>>2] = $conv2$i;
  $arrayidx41$i = (($data) + ($index$2$lcssa$i)|0);
  $6 = HEAP8[$arrayidx41$i>>0]|0;
  $7 = HEAP32[$buf_ptr$i>>2]|0;
  $inc44$i17 = (($7) + 1)|0;
  HEAP32[$buf_ptr$i>>2] = $inc44$i17;
  $arrayidx45$i = (((($context)) + 72|0) + ($7)|0);
  HEAP8[$arrayidx45$i>>0] = $6;
 }
 $8 = HEAP32[$bits_in_last_byte$i>>2]|0;
 $tobool$i = ($8|0)==(0);
 if ($tobool$i) {
  $14 = HEAP32[$buf_ptr$i>>2]|0;
  $inc$i = (($14) + 1)|0;
  HEAP32[$buf_ptr$i>>2] = $inc$i;
  $arrayidx19$i = (((($context)) + 72|0) + ($14)|0);
  HEAP8[$arrayidx19$i>>0] = -128;
 } else {
  $shl$i = 1 << $8;
  $sub$i = (($shl$i) + -1)|0;
  $sub3$i = (8 - ($8))|0;
  $shl4$i = $sub$i << $sub3$i;
  $9 = HEAP32[$buf_ptr$i>>2]|0;
  $sub5$i = (($9) + -1)|0;
  $arrayidx$i = (((($context)) + 72|0) + ($sub5$i)|0);
  $10 = HEAP8[$arrayidx$i>>0]|0;
  $conv$i = $10&255;
  $and$i = $shl4$i & $conv$i;
  $conv6$i = $and$i&255;
  HEAP8[$arrayidx$i>>0] = $conv6$i;
  $11 = HEAP32[$bits_in_last_byte$i>>2]|0;
  $sub8$i = (7 - ($11))|0;
  $shl9$i = 1 << $sub8$i;
  $12 = HEAP32[$buf_ptr$i>>2]|0;
  $sub12$i = (($12) + -1)|0;
  $arrayidx13$i = (((($context)) + 72|0) + ($sub12$i)|0);
  $13 = HEAP8[$arrayidx13$i>>0]|0;
  $conv14$i = $13&255;
  $xor$i = $shl9$i ^ $conv14$i;
  $conv15$i = $xor$i&255;
  HEAP8[$arrayidx13$i>>0] = $conv15$i;
  HEAP32[$bits_in_last_byte$i>>2] = 0;
 }
 $15 = HEAP32[$buf_ptr$i>>2]|0;
 $cmp$i = ($15|0)>(56);
 if ($cmp$i) {
  $cmp2457$i = ($15|0)<(64);
  if ($cmp2457$i) {
   $16 = $15;
   while(1) {
    $inc28$i = (($16) + 1)|0;
    HEAP32[$buf_ptr$i>>2] = $inc28$i;
    $arrayidx29$i = (((($context)) + 72|0) + ($16)|0);
    HEAP8[$arrayidx29$i>>0] = 0;
    $$pr$i = HEAP32[$buf_ptr$i>>2]|0;
    $cmp24$i = ($$pr$i|0)<(64);
    if ($cmp24$i) {
     $16 = $$pr$i;
    } else {
     break;
    }
   }
  }
  $arraydecay31$i = ((($context)) + 72|0);
  _Transform($context,$arraydecay31$i,64);
  HEAP32[$buf_ptr$i>>2] = 0;
  $$ph = 0;
  label = 15;
 } else {
  $cmp3656$i = ($15|0)==(56);
  if (!($cmp3656$i)) {
   $$ph = $15;
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $17 = $$ph;
  while(1) {
   $inc41$i = (($17) + 1)|0;
   HEAP32[$buf_ptr$i>>2] = $inc41$i;
   $arrayidx42$i = (((($context)) + 72|0) + ($17)|0);
   HEAP8[$arrayidx42$i>>0] = 0;
   $18 = HEAP32[$buf_ptr$i>>2]|0;
   $cmp36$i = ($18|0)<(56);
   if ($cmp36$i) {
    $17 = $18;
   } else {
    break;
   }
  }
 }
 $19 = HEAP32[$block_counter1$i>>2]|0;
 $inc44$i = (($19) + 1)|0;
 HEAP32[$block_counter1$i>>2] = $inc44$i;
 $cmp46$i = ($inc44$i|0)==(0);
 if ($cmp46$i) {
  $20 = HEAP32[$block_counter2$i>>2]|0;
  $inc49$i = (($20) + 1)|0;
  HEAP32[$block_counter2$i>>2] = $inc49$i;
 }
 HEAP32[$buf_ptr$i>>2] = 64;
 $21 = $inc44$i;$22 = 64;
 while(1) {
  $conv58$i = $21&255;
  $dec$i = (($22) + -1)|0;
  HEAP32[$buf_ptr$i>>2] = $dec$i;
  $arrayidx61$i = (((($context)) + 72|0) + ($dec$i)|0);
  HEAP8[$arrayidx61$i>>0] = $conv58$i;
  $shr$i = $21 >>> 8;
  $$pr50$i = HEAP32[$buf_ptr$i>>2]|0;
  $cmp54$i = ($$pr50$i|0)>(60);
  if ($cmp54$i) {
   $21 = $shr$i;$22 = $$pr50$i;
  } else {
   break;
  }
 }
 HEAP32[$block_counter1$i>>2] = $shr$i;
 $cmp6655$i = ($$pr50$i|0)>(56);
 if ($cmp6655$i) {
  $$pre$i = HEAP32[$block_counter2$i>>2]|0;
  $23 = $$pre$i;$24 = $$pr50$i;
  while(1) {
   $conv70$i = $23&255;
   $dec73$i = (($24) + -1)|0;
   HEAP32[$buf_ptr$i>>2] = $dec73$i;
   $arrayidx74$i = (((($context)) + 72|0) + ($dec73$i)|0);
   HEAP8[$arrayidx74$i>>0] = $conv70$i;
   $shr76$i = $23 >>> 8;
   $25 = HEAP32[$buf_ptr$i>>2]|0;
   $cmp66$i = ($25|0)>(56);
   if ($cmp66$i) {
    $23 = $shr76$i;$24 = $25;
   } else {
    break;
   }
  }
  HEAP32[$block_counter2$i>>2] = $shr76$i;
 }
 $arraydecay79$i = ((($context)) + 72|0);
 _Transform($context,$arraydecay79$i,64);
 dest=$temp$i$i; src=$context; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _RND512P($temp$i$i,$y$i$i,0);
 _RND512P($y$i$i,$z$i$i,1);
 _RND512P($z$i$i,$y$i$i,2);
 _RND512P($y$i$i,$z$i$i,3);
 _RND512P($z$i$i,$y$i$i,4);
 _RND512P($y$i$i,$z$i$i,5);
 _RND512P($z$i$i,$y$i$i,6);
 _RND512P($y$i$i,$z$i$i,7);
 _RND512P($z$i$i,$y$i$i,8);
 _RND512P($y$i$i,$temp$i$i,9);
 $26 = HEAP32[$temp$i$i>>2]|0;
 $27 = HEAP32[$context>>2]|0;
 $xor$i$i = $27 ^ $26;
 HEAP32[$context>>2] = $xor$i$i;
 $arrayidx24$1$i$i = ((($temp$i$i)) + 4|0);
 $28 = HEAP32[$arrayidx24$1$i$i>>2]|0;
 $arrayidx26$1$i$i = ((($context)) + 4|0);
 $29 = HEAP32[$arrayidx26$1$i$i>>2]|0;
 $xor$1$i$i = $29 ^ $28;
 HEAP32[$arrayidx26$1$i$i>>2] = $xor$1$i$i;
 $arrayidx24$2$i$i = ((($temp$i$i)) + 8|0);
 $30 = HEAP32[$arrayidx24$2$i$i>>2]|0;
 $arrayidx26$2$i$i = ((($context)) + 8|0);
 $31 = HEAP32[$arrayidx26$2$i$i>>2]|0;
 $xor$2$i$i = $31 ^ $30;
 HEAP32[$arrayidx26$2$i$i>>2] = $xor$2$i$i;
 $arrayidx24$3$i$i = ((($temp$i$i)) + 12|0);
 $32 = HEAP32[$arrayidx24$3$i$i>>2]|0;
 $arrayidx26$3$i$i = ((($context)) + 12|0);
 $33 = HEAP32[$arrayidx26$3$i$i>>2]|0;
 $xor$3$i$i = $33 ^ $32;
 HEAP32[$arrayidx26$3$i$i>>2] = $xor$3$i$i;
 $arrayidx24$4$i$i = ((($temp$i$i)) + 16|0);
 $34 = HEAP32[$arrayidx24$4$i$i>>2]|0;
 $arrayidx26$4$i$i = ((($context)) + 16|0);
 $35 = HEAP32[$arrayidx26$4$i$i>>2]|0;
 $xor$4$i$i = $35 ^ $34;
 HEAP32[$arrayidx26$4$i$i>>2] = $xor$4$i$i;
 $arrayidx24$5$i$i = ((($temp$i$i)) + 20|0);
 $36 = HEAP32[$arrayidx24$5$i$i>>2]|0;
 $arrayidx26$5$i$i = ((($context)) + 20|0);
 $37 = HEAP32[$arrayidx26$5$i$i>>2]|0;
 $xor$5$i$i = $37 ^ $36;
 HEAP32[$arrayidx26$5$i$i>>2] = $xor$5$i$i;
 $arrayidx24$6$i$i = ((($temp$i$i)) + 24|0);
 $38 = HEAP32[$arrayidx24$6$i$i>>2]|0;
 $arrayidx26$6$i$i = ((($context)) + 24|0);
 $39 = HEAP32[$arrayidx26$6$i$i>>2]|0;
 $xor$6$i$i = $39 ^ $38;
 HEAP32[$arrayidx26$6$i$i>>2] = $xor$6$i$i;
 $arrayidx24$7$i$i = ((($temp$i$i)) + 28|0);
 $40 = HEAP32[$arrayidx24$7$i$i>>2]|0;
 $arrayidx26$7$i$i = ((($context)) + 28|0);
 $41 = HEAP32[$arrayidx26$7$i$i>>2]|0;
 $xor$7$i$i = $41 ^ $40;
 HEAP32[$arrayidx26$7$i$i>>2] = $xor$7$i$i;
 $arrayidx24$8$i$i = ((($temp$i$i)) + 32|0);
 $42 = HEAP32[$arrayidx24$8$i$i>>2]|0;
 $arrayidx26$8$i$i = ((($context)) + 32|0);
 $43 = HEAP32[$arrayidx26$8$i$i>>2]|0;
 $xor$8$i$i = $43 ^ $42;
 HEAP32[$arrayidx26$8$i$i>>2] = $xor$8$i$i;
 $arrayidx24$9$i$i = ((($temp$i$i)) + 36|0);
 $44 = HEAP32[$arrayidx24$9$i$i>>2]|0;
 $arrayidx26$9$i$i = ((($context)) + 36|0);
 $45 = HEAP32[$arrayidx26$9$i$i>>2]|0;
 $xor$9$i$i = $45 ^ $44;
 HEAP32[$arrayidx26$9$i$i>>2] = $xor$9$i$i;
 $arrayidx24$10$i$i = ((($temp$i$i)) + 40|0);
 $46 = HEAP32[$arrayidx24$10$i$i>>2]|0;
 $arrayidx26$10$i$i = ((($context)) + 40|0);
 $47 = HEAP32[$arrayidx26$10$i$i>>2]|0;
 $xor$10$i$i = $47 ^ $46;
 HEAP32[$arrayidx26$10$i$i>>2] = $xor$10$i$i;
 $arrayidx24$11$i$i = ((($temp$i$i)) + 44|0);
 $48 = HEAP32[$arrayidx24$11$i$i>>2]|0;
 $arrayidx26$11$i$i = ((($context)) + 44|0);
 $49 = HEAP32[$arrayidx26$11$i$i>>2]|0;
 $xor$11$i$i = $49 ^ $48;
 HEAP32[$arrayidx26$11$i$i>>2] = $xor$11$i$i;
 $arrayidx24$12$i$i = ((($temp$i$i)) + 48|0);
 $50 = HEAP32[$arrayidx24$12$i$i>>2]|0;
 $arrayidx26$12$i$i = ((($context)) + 48|0);
 $51 = HEAP32[$arrayidx26$12$i$i>>2]|0;
 $xor$12$i$i = $51 ^ $50;
 HEAP32[$arrayidx26$12$i$i>>2] = $xor$12$i$i;
 $arrayidx24$13$i$i = ((($temp$i$i)) + 52|0);
 $52 = HEAP32[$arrayidx24$13$i$i>>2]|0;
 $arrayidx26$13$i$i = ((($context)) + 52|0);
 $53 = HEAP32[$arrayidx26$13$i$i>>2]|0;
 $xor$13$i$i = $53 ^ $52;
 HEAP32[$arrayidx26$13$i$i>>2] = $xor$13$i$i;
 $arrayidx24$14$i$i = ((($temp$i$i)) + 56|0);
 $54 = HEAP32[$arrayidx24$14$i$i>>2]|0;
 $arrayidx26$14$i$i = ((($context)) + 56|0);
 $55 = HEAP32[$arrayidx26$14$i$i>>2]|0;
 $xor$14$i$i = $55 ^ $54;
 HEAP32[$arrayidx26$14$i$i>>2] = $xor$14$i$i;
 $arrayidx24$15$i$i = ((($temp$i$i)) + 60|0);
 $56 = HEAP32[$arrayidx24$15$i$i>>2]|0;
 $57 = HEAP32[$arrayidx2$i>>2]|0;
 $xor$15$i$i = $57 ^ $56;
 HEAP32[$arrayidx2$i>>2] = $xor$15$i$i;
 $58 = $xor$8$i$i&255;
 HEAP8[$hashval>>0] = $58;
 $59 = $xor$8$i$i >>> 8;
 $60 = $59&255;
 $arrayidx84$1$i = ((($hashval)) + 1|0);
 HEAP8[$arrayidx84$1$i>>0] = $60;
 $61 = $xor$8$i$i >>> 16;
 $62 = $61&255;
 $arrayidx84$2$i = ((($hashval)) + 2|0);
 HEAP8[$arrayidx84$2$i>>0] = $62;
 $63 = $xor$8$i$i >>> 24;
 $64 = $63&255;
 $arrayidx84$3$i = ((($hashval)) + 3|0);
 HEAP8[$arrayidx84$3$i>>0] = $64;
 $65 = $xor$9$i$i&255;
 $arrayidx84$4$i = ((($hashval)) + 4|0);
 HEAP8[$arrayidx84$4$i>>0] = $65;
 $66 = $xor$9$i$i >>> 8;
 $67 = $66&255;
 $arrayidx84$5$i = ((($hashval)) + 5|0);
 HEAP8[$arrayidx84$5$i>>0] = $67;
 $68 = $xor$9$i$i >>> 16;
 $69 = $68&255;
 $arrayidx84$6$i = ((($hashval)) + 6|0);
 HEAP8[$arrayidx84$6$i>>0] = $69;
 $70 = $xor$9$i$i >>> 24;
 $71 = $70&255;
 $arrayidx84$7$i = ((($hashval)) + 7|0);
 HEAP8[$arrayidx84$7$i>>0] = $71;
 $72 = $xor$10$i$i&255;
 $arrayidx84$8$i = ((($hashval)) + 8|0);
 HEAP8[$arrayidx84$8$i>>0] = $72;
 $73 = $xor$10$i$i >>> 8;
 $74 = $73&255;
 $arrayidx84$9$i = ((($hashval)) + 9|0);
 HEAP8[$arrayidx84$9$i>>0] = $74;
 $75 = $xor$10$i$i >>> 16;
 $76 = $75&255;
 $arrayidx84$10$i = ((($hashval)) + 10|0);
 HEAP8[$arrayidx84$10$i>>0] = $76;
 $77 = $xor$10$i$i >>> 24;
 $78 = $77&255;
 $arrayidx84$11$i = ((($hashval)) + 11|0);
 HEAP8[$arrayidx84$11$i>>0] = $78;
 $79 = $xor$11$i$i&255;
 $arrayidx84$12$i = ((($hashval)) + 12|0);
 HEAP8[$arrayidx84$12$i>>0] = $79;
 $80 = $xor$11$i$i >>> 8;
 $81 = $80&255;
 $arrayidx84$13$i = ((($hashval)) + 13|0);
 HEAP8[$arrayidx84$13$i>>0] = $81;
 $82 = $xor$11$i$i >>> 16;
 $83 = $82&255;
 $arrayidx84$14$i = ((($hashval)) + 14|0);
 HEAP8[$arrayidx84$14$i>>0] = $83;
 $84 = $xor$11$i$i >>> 24;
 $85 = $84&255;
 $arrayidx84$15$i = ((($hashval)) + 15|0);
 HEAP8[$arrayidx84$15$i>>0] = $85;
 $86 = $xor$12$i$i&255;
 $arrayidx84$16$i = ((($hashval)) + 16|0);
 HEAP8[$arrayidx84$16$i>>0] = $86;
 $arrayidx83$17$i = ((($context)) + 49|0);
 $87 = HEAP8[$arrayidx83$17$i>>0]|0;
 $arrayidx84$17$i = ((($hashval)) + 17|0);
 HEAP8[$arrayidx84$17$i>>0] = $87;
 $arrayidx83$18$i = ((($context)) + 50|0);
 $88 = HEAP8[$arrayidx83$18$i>>0]|0;
 $arrayidx84$18$i = ((($hashval)) + 18|0);
 HEAP8[$arrayidx84$18$i>>0] = $88;
 $arrayidx83$19$i = ((($context)) + 51|0);
 $89 = HEAP8[$arrayidx83$19$i>>0]|0;
 $arrayidx84$19$i = ((($hashval)) + 19|0);
 HEAP8[$arrayidx84$19$i>>0] = $89;
 $90 = HEAP8[$arrayidx26$13$i$i>>0]|0;
 $arrayidx84$20$i = ((($hashval)) + 20|0);
 HEAP8[$arrayidx84$20$i>>0] = $90;
 $arrayidx83$21$i = ((($context)) + 53|0);
 $91 = HEAP8[$arrayidx83$21$i>>0]|0;
 $arrayidx84$21$i = ((($hashval)) + 21|0);
 HEAP8[$arrayidx84$21$i>>0] = $91;
 $arrayidx83$22$i = ((($context)) + 54|0);
 $92 = HEAP8[$arrayidx83$22$i>>0]|0;
 $arrayidx84$22$i = ((($hashval)) + 22|0);
 HEAP8[$arrayidx84$22$i>>0] = $92;
 $arrayidx83$23$i = ((($context)) + 55|0);
 $93 = HEAP8[$arrayidx83$23$i>>0]|0;
 $arrayidx84$23$i = ((($hashval)) + 23|0);
 HEAP8[$arrayidx84$23$i>>0] = $93;
 $94 = HEAP8[$arrayidx26$14$i$i>>0]|0;
 $arrayidx84$24$i = ((($hashval)) + 24|0);
 HEAP8[$arrayidx84$24$i>>0] = $94;
 $arrayidx83$25$i = ((($context)) + 57|0);
 $95 = HEAP8[$arrayidx83$25$i>>0]|0;
 $arrayidx84$25$i = ((($hashval)) + 25|0);
 HEAP8[$arrayidx84$25$i>>0] = $95;
 $arrayidx83$26$i = ((($context)) + 58|0);
 $96 = HEAP8[$arrayidx83$26$i>>0]|0;
 $arrayidx84$26$i = ((($hashval)) + 26|0);
 HEAP8[$arrayidx84$26$i>>0] = $96;
 $arrayidx83$27$i = ((($context)) + 59|0);
 $97 = HEAP8[$arrayidx83$27$i>>0]|0;
 $arrayidx84$27$i = ((($hashval)) + 27|0);
 HEAP8[$arrayidx84$27$i>>0] = $97;
 $98 = HEAP8[$arrayidx2$i>>0]|0;
 $arrayidx84$28$i = ((($hashval)) + 28|0);
 HEAP8[$arrayidx84$28$i>>0] = $98;
 $arrayidx83$29$i = ((($context)) + 61|0);
 $99 = HEAP8[$arrayidx83$29$i>>0]|0;
 $arrayidx84$29$i = ((($hashval)) + 29|0);
 HEAP8[$arrayidx84$29$i>>0] = $99;
 $arrayidx83$30$i = ((($context)) + 62|0);
 $100 = HEAP8[$arrayidx83$30$i>>0]|0;
 $arrayidx84$30$i = ((($hashval)) + 30|0);
 HEAP8[$arrayidx84$30$i>>0] = $100;
 $arrayidx83$31$i = ((($context)) + 63|0);
 $101 = HEAP8[$arrayidx83$31$i>>0]|0;
 $arrayidx84$31$i = ((($hashval)) + 31|0);
 HEAP8[$arrayidx84$31$i>>0] = $101;
 STACKTOP = sp;return;
}
function _Transform($ctx,$input,$msglen) {
 $ctx = $ctx|0;
 $input = $input|0;
 $msglen = $msglen|0;
 var $$pre = 0, $$pre10 = 0, $$pre11 = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $$pre18 = 0, $$pre19 = 0, $$pre20 = 0, $$pre21 = 0, $$pre22 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $Ptmp$i = 0, $Qtmp$i = 0, $add$ptr = 0;
 var $arrayidx$1$i = 0, $arrayidx$10$i = 0, $arrayidx$11$i = 0, $arrayidx$12$i = 0, $arrayidx$13$i = 0, $arrayidx$14$i = 0, $arrayidx$15$i = 0, $arrayidx$2$i = 0, $arrayidx$3$i = 0, $arrayidx$4$i = 0, $arrayidx$5$i = 0, $arrayidx$6$i = 0, $arrayidx$7$i = 0, $arrayidx$8$i = 0, $arrayidx$9$i = 0, $arrayidx2$1$i = 0, $arrayidx2$10$i = 0, $arrayidx2$11$i = 0, $arrayidx2$12$i = 0, $arrayidx2$13$i = 0;
 var $arrayidx2$14$i = 0, $arrayidx2$15$i = 0, $arrayidx2$2$i = 0, $arrayidx2$3$i = 0, $arrayidx2$4$i = 0, $arrayidx2$5$i = 0, $arrayidx2$6$i = 0, $arrayidx2$7$i = 0, $arrayidx2$8$i = 0, $arrayidx2$9$i = 0, $arrayidx4$1$i = 0, $arrayidx4$10$i = 0, $arrayidx4$11$i = 0, $arrayidx4$12$i = 0, $arrayidx4$13$i = 0, $arrayidx4$14$i = 0, $arrayidx4$15$i = 0, $arrayidx4$2$i = 0, $arrayidx4$3$i = 0, $arrayidx4$4$i = 0;
 var $arrayidx4$5$i = 0, $arrayidx4$6$i = 0, $arrayidx4$7$i = 0, $arrayidx4$8$i = 0, $arrayidx4$9$i = 0, $arrayidx48$1$i = 0, $arrayidx48$10$i = 0, $arrayidx48$11$i = 0, $arrayidx48$12$i = 0, $arrayidx48$13$i = 0, $arrayidx48$14$i = 0, $arrayidx48$15$i = 0, $arrayidx48$2$i = 0, $arrayidx48$3$i = 0, $arrayidx48$4$i = 0, $arrayidx48$5$i = 0, $arrayidx48$6$i = 0, $arrayidx48$7$i = 0, $arrayidx48$8$i = 0, $arrayidx48$9$i = 0;
 var $block_counter1 = 0, $block_counter2 = 0, $cmp = 0, $cmp2 = 0, $cmp6 = 0, $inc = 0, $inc3 = 0, $input$addr$07 = 0, $msglen$addr$08 = 0, $sub = 0, $xor$1$i = 0, $xor$10$i = 0, $xor$11$i = 0, $xor$12$i = 0, $xor$13$i = 0, $xor$14$i = 0, $xor$15$i = 0, $xor$2$i = 0, $xor$3$i = 0, $xor$4$i = 0;
 var $xor$5$i = 0, $xor$6$i = 0, $xor$7$i = 0, $xor$8$i = 0, $xor$9$i = 0, $xor$i = 0, $xor49$1$i = 0, $xor49$10$i = 0, $xor49$11$i = 0, $xor49$12$i = 0, $xor49$13$i = 0, $xor49$14$i = 0, $xor49$15$i = 0, $xor49$2$i = 0, $xor49$3$i = 0, $xor49$4$i = 0, $xor49$5$i = 0, $xor49$6$i = 0, $xor49$7$i = 0, $xor49$8$i = 0;
 var $xor49$9$i = 0, $xor49$i = 0, $xor51$1$i = 0, $xor51$10$i = 0, $xor51$11$i = 0, $xor51$12$i = 0, $xor51$13$i = 0, $xor51$14$i = 0, $xor51$15$i = 0, $xor51$2$i = 0, $xor51$3$i = 0, $xor51$4$i = 0, $xor51$5$i = 0, $xor51$6$i = 0, $xor51$7$i = 0, $xor51$8$i = 0, $xor51$9$i = 0, $xor51$i = 0, $y$i = 0, $z$i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $Ptmp$i = sp + 192|0;
 $Qtmp$i = sp + 128|0;
 $y$i = sp + 64|0;
 $z$i = sp;
 $cmp6 = ($msglen|0)>(63);
 if (!($cmp6)) {
  STACKTOP = sp;return;
 }
 $arrayidx2$1$i = ((($ctx)) + 4|0);
 $arrayidx4$1$i = ((($Ptmp$i)) + 4|0);
 $arrayidx2$2$i = ((($ctx)) + 8|0);
 $arrayidx4$2$i = ((($Ptmp$i)) + 8|0);
 $arrayidx2$3$i = ((($ctx)) + 12|0);
 $arrayidx4$3$i = ((($Ptmp$i)) + 12|0);
 $arrayidx2$4$i = ((($ctx)) + 16|0);
 $arrayidx4$4$i = ((($Ptmp$i)) + 16|0);
 $arrayidx2$5$i = ((($ctx)) + 20|0);
 $arrayidx4$5$i = ((($Ptmp$i)) + 20|0);
 $arrayidx2$6$i = ((($ctx)) + 24|0);
 $arrayidx4$6$i = ((($Ptmp$i)) + 24|0);
 $arrayidx2$7$i = ((($ctx)) + 28|0);
 $arrayidx4$7$i = ((($Ptmp$i)) + 28|0);
 $arrayidx2$8$i = ((($ctx)) + 32|0);
 $arrayidx4$8$i = ((($Ptmp$i)) + 32|0);
 $arrayidx2$9$i = ((($ctx)) + 36|0);
 $arrayidx4$9$i = ((($Ptmp$i)) + 36|0);
 $arrayidx2$10$i = ((($ctx)) + 40|0);
 $arrayidx4$10$i = ((($Ptmp$i)) + 40|0);
 $arrayidx2$11$i = ((($ctx)) + 44|0);
 $arrayidx4$11$i = ((($Ptmp$i)) + 44|0);
 $arrayidx2$12$i = ((($ctx)) + 48|0);
 $arrayidx4$12$i = ((($Ptmp$i)) + 48|0);
 $arrayidx2$13$i = ((($ctx)) + 52|0);
 $arrayidx4$13$i = ((($Ptmp$i)) + 52|0);
 $arrayidx2$14$i = ((($ctx)) + 56|0);
 $arrayidx4$14$i = ((($Ptmp$i)) + 56|0);
 $arrayidx2$15$i = ((($ctx)) + 60|0);
 $arrayidx4$15$i = ((($Ptmp$i)) + 60|0);
 $arrayidx48$1$i = ((($Qtmp$i)) + 4|0);
 $arrayidx48$2$i = ((($Qtmp$i)) + 8|0);
 $arrayidx48$3$i = ((($Qtmp$i)) + 12|0);
 $arrayidx48$4$i = ((($Qtmp$i)) + 16|0);
 $arrayidx48$5$i = ((($Qtmp$i)) + 20|0);
 $arrayidx48$6$i = ((($Qtmp$i)) + 24|0);
 $arrayidx48$7$i = ((($Qtmp$i)) + 28|0);
 $arrayidx48$8$i = ((($Qtmp$i)) + 32|0);
 $arrayidx48$9$i = ((($Qtmp$i)) + 36|0);
 $arrayidx48$10$i = ((($Qtmp$i)) + 40|0);
 $arrayidx48$11$i = ((($Qtmp$i)) + 44|0);
 $arrayidx48$12$i = ((($Qtmp$i)) + 48|0);
 $arrayidx48$13$i = ((($Qtmp$i)) + 52|0);
 $arrayidx48$14$i = ((($Qtmp$i)) + 56|0);
 $arrayidx48$15$i = ((($Qtmp$i)) + 60|0);
 $block_counter1 = ((($ctx)) + 64|0);
 $block_counter2 = ((($ctx)) + 68|0);
 $$pre = HEAP32[$arrayidx2$1$i>>2]|0;
 $$pre9 = HEAP32[$arrayidx2$2$i>>2]|0;
 $$pre10 = HEAP32[$arrayidx2$3$i>>2]|0;
 $$pre11 = HEAP32[$arrayidx2$4$i>>2]|0;
 $$pre12 = HEAP32[$arrayidx2$5$i>>2]|0;
 $$pre13 = HEAP32[$arrayidx2$6$i>>2]|0;
 $$pre14 = HEAP32[$arrayidx2$7$i>>2]|0;
 $$pre15 = HEAP32[$arrayidx2$8$i>>2]|0;
 $$pre16 = HEAP32[$arrayidx2$9$i>>2]|0;
 $$pre17 = HEAP32[$arrayidx2$10$i>>2]|0;
 $$pre18 = HEAP32[$arrayidx2$11$i>>2]|0;
 $$pre19 = HEAP32[$arrayidx2$12$i>>2]|0;
 $$pre20 = HEAP32[$arrayidx2$13$i>>2]|0;
 $$pre21 = HEAP32[$arrayidx2$14$i>>2]|0;
 $$pre22 = HEAP32[$arrayidx2$15$i>>2]|0;
 $11 = $$pre12;$13 = $$pre13;$15 = $$pre14;$17 = $$pre15;$19 = $$pre16;$21 = $$pre17;$23 = $$pre18;$25 = $$pre19;$27 = $$pre20;$29 = $$pre21;$3 = $$pre;$31 = $$pre22;$5 = $$pre9;$7 = $$pre10;$9 = $$pre11;$input$addr$07 = $input;$msglen$addr$08 = $msglen;
 while(1) {
  dest=$z$i; src=$input$addr$07; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $0 = HEAP32[$input$addr$07>>2]|0;
  $1 = HEAP32[$ctx>>2]|0;
  $xor$i = $1 ^ $0;
  HEAP32[$Ptmp$i>>2] = $xor$i;
  $arrayidx$1$i = ((($input$addr$07)) + 4|0);
  $2 = HEAP32[$arrayidx$1$i>>2]|0;
  $xor$1$i = $3 ^ $2;
  HEAP32[$arrayidx4$1$i>>2] = $xor$1$i;
  $arrayidx$2$i = ((($input$addr$07)) + 8|0);
  $4 = HEAP32[$arrayidx$2$i>>2]|0;
  $xor$2$i = $5 ^ $4;
  HEAP32[$arrayidx4$2$i>>2] = $xor$2$i;
  $arrayidx$3$i = ((($input$addr$07)) + 12|0);
  $6 = HEAP32[$arrayidx$3$i>>2]|0;
  $xor$3$i = $7 ^ $6;
  HEAP32[$arrayidx4$3$i>>2] = $xor$3$i;
  $arrayidx$4$i = ((($input$addr$07)) + 16|0);
  $8 = HEAP32[$arrayidx$4$i>>2]|0;
  $xor$4$i = $9 ^ $8;
  HEAP32[$arrayidx4$4$i>>2] = $xor$4$i;
  $arrayidx$5$i = ((($input$addr$07)) + 20|0);
  $10 = HEAP32[$arrayidx$5$i>>2]|0;
  $xor$5$i = $11 ^ $10;
  HEAP32[$arrayidx4$5$i>>2] = $xor$5$i;
  $arrayidx$6$i = ((($input$addr$07)) + 24|0);
  $12 = HEAP32[$arrayidx$6$i>>2]|0;
  $xor$6$i = $13 ^ $12;
  HEAP32[$arrayidx4$6$i>>2] = $xor$6$i;
  $arrayidx$7$i = ((($input$addr$07)) + 28|0);
  $14 = HEAP32[$arrayidx$7$i>>2]|0;
  $xor$7$i = $15 ^ $14;
  HEAP32[$arrayidx4$7$i>>2] = $xor$7$i;
  $arrayidx$8$i = ((($input$addr$07)) + 32|0);
  $16 = HEAP32[$arrayidx$8$i>>2]|0;
  $xor$8$i = $17 ^ $16;
  HEAP32[$arrayidx4$8$i>>2] = $xor$8$i;
  $arrayidx$9$i = ((($input$addr$07)) + 36|0);
  $18 = HEAP32[$arrayidx$9$i>>2]|0;
  $xor$9$i = $19 ^ $18;
  HEAP32[$arrayidx4$9$i>>2] = $xor$9$i;
  $arrayidx$10$i = ((($input$addr$07)) + 40|0);
  $20 = HEAP32[$arrayidx$10$i>>2]|0;
  $xor$10$i = $21 ^ $20;
  HEAP32[$arrayidx4$10$i>>2] = $xor$10$i;
  $arrayidx$11$i = ((($input$addr$07)) + 44|0);
  $22 = HEAP32[$arrayidx$11$i>>2]|0;
  $xor$11$i = $23 ^ $22;
  HEAP32[$arrayidx4$11$i>>2] = $xor$11$i;
  $arrayidx$12$i = ((($input$addr$07)) + 48|0);
  $24 = HEAP32[$arrayidx$12$i>>2]|0;
  $xor$12$i = $25 ^ $24;
  HEAP32[$arrayidx4$12$i>>2] = $xor$12$i;
  $arrayidx$13$i = ((($input$addr$07)) + 52|0);
  $26 = HEAP32[$arrayidx$13$i>>2]|0;
  $xor$13$i = $27 ^ $26;
  HEAP32[$arrayidx4$13$i>>2] = $xor$13$i;
  $arrayidx$14$i = ((($input$addr$07)) + 56|0);
  $28 = HEAP32[$arrayidx$14$i>>2]|0;
  $xor$14$i = $29 ^ $28;
  HEAP32[$arrayidx4$14$i>>2] = $xor$14$i;
  $arrayidx$15$i = ((($input$addr$07)) + 60|0);
  $30 = HEAP32[$arrayidx$15$i>>2]|0;
  $xor$15$i = $31 ^ $30;
  HEAP32[$arrayidx4$15$i>>2] = $xor$15$i;
  _RND512Q($z$i,$y$i,0);
  _RND512Q($y$i,$z$i,16777216);
  _RND512Q($z$i,$y$i,33554432);
  _RND512Q($y$i,$z$i,50331648);
  _RND512Q($z$i,$y$i,67108864);
  _RND512Q($y$i,$z$i,83886080);
  _RND512Q($z$i,$y$i,100663296);
  _RND512Q($y$i,$z$i,117440512);
  _RND512Q($z$i,$y$i,134217728);
  _RND512Q($y$i,$Qtmp$i,150994944);
  _RND512P($Ptmp$i,$y$i,0);
  _RND512P($y$i,$z$i,1);
  _RND512P($z$i,$y$i,2);
  _RND512P($y$i,$z$i,3);
  _RND512P($z$i,$y$i,4);
  _RND512P($y$i,$z$i,5);
  _RND512P($z$i,$y$i,6);
  _RND512P($y$i,$z$i,7);
  _RND512P($z$i,$y$i,8);
  _RND512P($y$i,$Ptmp$i,9);
  $32 = HEAP32[$Ptmp$i>>2]|0;
  $33 = HEAP32[$Qtmp$i>>2]|0;
  $xor49$i = $33 ^ $32;
  $34 = HEAP32[$ctx>>2]|0;
  $xor51$i = $xor49$i ^ $34;
  HEAP32[$ctx>>2] = $xor51$i;
  $35 = HEAP32[$arrayidx4$1$i>>2]|0;
  $36 = HEAP32[$arrayidx48$1$i>>2]|0;
  $xor49$1$i = $36 ^ $35;
  $37 = HEAP32[$arrayidx2$1$i>>2]|0;
  $xor51$1$i = $xor49$1$i ^ $37;
  HEAP32[$arrayidx2$1$i>>2] = $xor51$1$i;
  $38 = HEAP32[$arrayidx4$2$i>>2]|0;
  $39 = HEAP32[$arrayidx48$2$i>>2]|0;
  $xor49$2$i = $39 ^ $38;
  $40 = HEAP32[$arrayidx2$2$i>>2]|0;
  $xor51$2$i = $xor49$2$i ^ $40;
  HEAP32[$arrayidx2$2$i>>2] = $xor51$2$i;
  $41 = HEAP32[$arrayidx4$3$i>>2]|0;
  $42 = HEAP32[$arrayidx48$3$i>>2]|0;
  $xor49$3$i = $42 ^ $41;
  $43 = HEAP32[$arrayidx2$3$i>>2]|0;
  $xor51$3$i = $xor49$3$i ^ $43;
  HEAP32[$arrayidx2$3$i>>2] = $xor51$3$i;
  $44 = HEAP32[$arrayidx4$4$i>>2]|0;
  $45 = HEAP32[$arrayidx48$4$i>>2]|0;
  $xor49$4$i = $45 ^ $44;
  $46 = HEAP32[$arrayidx2$4$i>>2]|0;
  $xor51$4$i = $xor49$4$i ^ $46;
  HEAP32[$arrayidx2$4$i>>2] = $xor51$4$i;
  $47 = HEAP32[$arrayidx4$5$i>>2]|0;
  $48 = HEAP32[$arrayidx48$5$i>>2]|0;
  $xor49$5$i = $48 ^ $47;
  $49 = HEAP32[$arrayidx2$5$i>>2]|0;
  $xor51$5$i = $xor49$5$i ^ $49;
  HEAP32[$arrayidx2$5$i>>2] = $xor51$5$i;
  $50 = HEAP32[$arrayidx4$6$i>>2]|0;
  $51 = HEAP32[$arrayidx48$6$i>>2]|0;
  $xor49$6$i = $51 ^ $50;
  $52 = HEAP32[$arrayidx2$6$i>>2]|0;
  $xor51$6$i = $xor49$6$i ^ $52;
  HEAP32[$arrayidx2$6$i>>2] = $xor51$6$i;
  $53 = HEAP32[$arrayidx4$7$i>>2]|0;
  $54 = HEAP32[$arrayidx48$7$i>>2]|0;
  $xor49$7$i = $54 ^ $53;
  $55 = HEAP32[$arrayidx2$7$i>>2]|0;
  $xor51$7$i = $xor49$7$i ^ $55;
  HEAP32[$arrayidx2$7$i>>2] = $xor51$7$i;
  $56 = HEAP32[$arrayidx4$8$i>>2]|0;
  $57 = HEAP32[$arrayidx48$8$i>>2]|0;
  $xor49$8$i = $57 ^ $56;
  $58 = HEAP32[$arrayidx2$8$i>>2]|0;
  $xor51$8$i = $xor49$8$i ^ $58;
  HEAP32[$arrayidx2$8$i>>2] = $xor51$8$i;
  $59 = HEAP32[$arrayidx4$9$i>>2]|0;
  $60 = HEAP32[$arrayidx48$9$i>>2]|0;
  $xor49$9$i = $60 ^ $59;
  $61 = HEAP32[$arrayidx2$9$i>>2]|0;
  $xor51$9$i = $xor49$9$i ^ $61;
  HEAP32[$arrayidx2$9$i>>2] = $xor51$9$i;
  $62 = HEAP32[$arrayidx4$10$i>>2]|0;
  $63 = HEAP32[$arrayidx48$10$i>>2]|0;
  $xor49$10$i = $63 ^ $62;
  $64 = HEAP32[$arrayidx2$10$i>>2]|0;
  $xor51$10$i = $xor49$10$i ^ $64;
  HEAP32[$arrayidx2$10$i>>2] = $xor51$10$i;
  $65 = HEAP32[$arrayidx4$11$i>>2]|0;
  $66 = HEAP32[$arrayidx48$11$i>>2]|0;
  $xor49$11$i = $66 ^ $65;
  $67 = HEAP32[$arrayidx2$11$i>>2]|0;
  $xor51$11$i = $xor49$11$i ^ $67;
  HEAP32[$arrayidx2$11$i>>2] = $xor51$11$i;
  $68 = HEAP32[$arrayidx4$12$i>>2]|0;
  $69 = HEAP32[$arrayidx48$12$i>>2]|0;
  $xor49$12$i = $69 ^ $68;
  $70 = HEAP32[$arrayidx2$12$i>>2]|0;
  $xor51$12$i = $xor49$12$i ^ $70;
  HEAP32[$arrayidx2$12$i>>2] = $xor51$12$i;
  $71 = HEAP32[$arrayidx4$13$i>>2]|0;
  $72 = HEAP32[$arrayidx48$13$i>>2]|0;
  $xor49$13$i = $72 ^ $71;
  $73 = HEAP32[$arrayidx2$13$i>>2]|0;
  $xor51$13$i = $xor49$13$i ^ $73;
  HEAP32[$arrayidx2$13$i>>2] = $xor51$13$i;
  $74 = HEAP32[$arrayidx4$14$i>>2]|0;
  $75 = HEAP32[$arrayidx48$14$i>>2]|0;
  $xor49$14$i = $75 ^ $74;
  $76 = HEAP32[$arrayidx2$14$i>>2]|0;
  $xor51$14$i = $xor49$14$i ^ $76;
  HEAP32[$arrayidx2$14$i>>2] = $xor51$14$i;
  $77 = HEAP32[$arrayidx4$15$i>>2]|0;
  $78 = HEAP32[$arrayidx48$15$i>>2]|0;
  $xor49$15$i = $78 ^ $77;
  $79 = HEAP32[$arrayidx2$15$i>>2]|0;
  $xor51$15$i = $xor49$15$i ^ $79;
  HEAP32[$arrayidx2$15$i>>2] = $xor51$15$i;
  $80 = HEAP32[$block_counter1>>2]|0;
  $inc = (($80) + 1)|0;
  HEAP32[$block_counter1>>2] = $inc;
  $cmp2 = ($inc|0)==(0);
  if ($cmp2) {
   $81 = HEAP32[$block_counter2>>2]|0;
   $inc3 = (($81) + 1)|0;
   HEAP32[$block_counter2>>2] = $inc3;
  }
  $sub = (($msglen$addr$08) + -64)|0;
  $add$ptr = ((($input$addr$07)) + 64|0);
  $cmp = ($msglen$addr$08|0)>(127);
  if ($cmp) {
   $11 = $xor51$5$i;$13 = $xor51$6$i;$15 = $xor51$7$i;$17 = $xor51$8$i;$19 = $xor51$9$i;$21 = $xor51$10$i;$23 = $xor51$11$i;$25 = $xor51$12$i;$27 = $xor51$13$i;$29 = $xor51$14$i;$3 = $xor51$1$i;$31 = $xor51$15$i;$5 = $xor51$2$i;$7 = $xor51$3$i;$9 = $xor51$4$i;$input$addr$07 = $add$ptr;$msglen$addr$08 = $sub;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _RND512P($x,$y,$r) {
 $x = $x|0;
 $y = $y|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0;
 var $add112 = 0, $add129 = 0, $add148 = 0, $add157 = 0, $add174 = 0, $add191 = 0, $add209 = 0, $add219 = 0, $add236 = 0, $add253 = 0, $add272 = 0, $add281 = 0, $add298 = 0, $add315 = 0, $add333 = 0, $add343 = 0, $add36 = 0, $add360 = 0, $add377 = 0, $add396 = 0;
 var $add405 = 0, $add422 = 0, $add439 = 0, $add457 = 0, $add467 = 0, $add484 = 0, $add50 = 0, $add501 = 0, $add520 = 0, $add529 = 0, $add546 = 0, $add563 = 0, $add581 = 0, $add591 = 0, $add608 = 0, $add625 = 0, $add644 = 0, $add653 = 0, $add67 = 0, $add670 = 0;
 var $add687 = 0, $add705 = 0, $add715 = 0, $add732 = 0, $add749 = 0, $add768 = 0, $add777 = 0, $add794 = 0, $add811 = 0, $add829 = 0, $add839 = 0, $add85 = 0, $add856 = 0, $add873 = 0, $add892 = 0, $add901 = 0, $add918 = 0, $add935 = 0, $add95 = 0, $add953 = 0;
 var $add963 = 0, $add980 = 0, $add997 = 0, $arrayidx1007 = 0, $arrayidx1008 = 0, $arrayidx105 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx12 = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx130 = 0, $arrayidx140 = 0, $arrayidx144 = 0, $arrayidx149 = 0, $arrayidx15 = 0, $arrayidx150 = 0, $arrayidx153 = 0, $arrayidx158 = 0, $arrayidx167 = 0;
 var $arrayidx170 = 0, $arrayidx175 = 0, $arrayidx18 = 0, $arrayidx184 = 0, $arrayidx187 = 0, $arrayidx192 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx21 = 0, $arrayidx210 = 0, $arrayidx212 = 0, $arrayidx215 = 0, $arrayidx220 = 0, $arrayidx229 = 0, $arrayidx232 = 0, $arrayidx237 = 0, $arrayidx24 = 0, $arrayidx246 = 0, $arrayidx249 = 0, $arrayidx254 = 0;
 var $arrayidx263 = 0, $arrayidx264 = 0, $arrayidx268 = 0, $arrayidx273 = 0, $arrayidx274 = 0, $arrayidx277 = 0, $arrayidx28 = 0, $arrayidx282 = 0, $arrayidx291 = 0, $arrayidx294 = 0, $arrayidx299 = 0, $arrayidx3 = 0, $arrayidx308 = 0, $arrayidx311 = 0, $arrayidx316 = 0, $arrayidx32 = 0, $arrayidx325 = 0, $arrayidx328 = 0, $arrayidx334 = 0, $arrayidx336 = 0;
 var $arrayidx339 = 0, $arrayidx344 = 0, $arrayidx353 = 0, $arrayidx356 = 0, $arrayidx361 = 0, $arrayidx37 = 0, $arrayidx370 = 0, $arrayidx373 = 0, $arrayidx378 = 0, $arrayidx387 = 0, $arrayidx388 = 0, $arrayidx392 = 0, $arrayidx397 = 0, $arrayidx398 = 0, $arrayidx401 = 0, $arrayidx406 = 0, $arrayidx415 = 0, $arrayidx418 = 0, $arrayidx423 = 0, $arrayidx432 = 0;
 var $arrayidx435 = 0, $arrayidx440 = 0, $arrayidx449 = 0, $arrayidx452 = 0, $arrayidx458 = 0, $arrayidx46 = 0, $arrayidx460 = 0, $arrayidx463 = 0, $arrayidx468 = 0, $arrayidx477 = 0, $arrayidx480 = 0, $arrayidx485 = 0, $arrayidx494 = 0, $arrayidx497 = 0, $arrayidx502 = 0, $arrayidx51 = 0, $arrayidx511 = 0, $arrayidx512 = 0, $arrayidx516 = 0, $arrayidx521 = 0;
 var $arrayidx522 = 0, $arrayidx525 = 0, $arrayidx530 = 0, $arrayidx539 = 0, $arrayidx542 = 0, $arrayidx547 = 0, $arrayidx556 = 0, $arrayidx559 = 0, $arrayidx564 = 0, $arrayidx573 = 0, $arrayidx576 = 0, $arrayidx582 = 0, $arrayidx584 = 0, $arrayidx587 = 0, $arrayidx592 = 0, $arrayidx6 = 0, $arrayidx601 = 0, $arrayidx604 = 0, $arrayidx609 = 0, $arrayidx618 = 0;
 var $arrayidx621 = 0, $arrayidx626 = 0, $arrayidx63 = 0, $arrayidx635 = 0, $arrayidx636 = 0, $arrayidx640 = 0, $arrayidx645 = 0, $arrayidx646 = 0, $arrayidx649 = 0, $arrayidx654 = 0, $arrayidx663 = 0, $arrayidx666 = 0, $arrayidx671 = 0, $arrayidx68 = 0, $arrayidx680 = 0, $arrayidx683 = 0, $arrayidx688 = 0, $arrayidx697 = 0, $arrayidx700 = 0, $arrayidx706 = 0;
 var $arrayidx708 = 0, $arrayidx711 = 0, $arrayidx716 = 0, $arrayidx725 = 0, $arrayidx728 = 0, $arrayidx733 = 0, $arrayidx742 = 0, $arrayidx745 = 0, $arrayidx750 = 0, $arrayidx759 = 0, $arrayidx760 = 0, $arrayidx764 = 0, $arrayidx769 = 0, $arrayidx77 = 0, $arrayidx770 = 0, $arrayidx773 = 0, $arrayidx778 = 0, $arrayidx787 = 0, $arrayidx790 = 0, $arrayidx795 = 0;
 var $arrayidx80 = 0, $arrayidx804 = 0, $arrayidx807 = 0, $arrayidx812 = 0, $arrayidx821 = 0, $arrayidx824 = 0, $arrayidx830 = 0, $arrayidx832 = 0, $arrayidx835 = 0, $arrayidx840 = 0, $arrayidx849 = 0, $arrayidx852 = 0, $arrayidx857 = 0, $arrayidx86 = 0, $arrayidx866 = 0, $arrayidx869 = 0, $arrayidx874 = 0, $arrayidx88 = 0, $arrayidx883 = 0, $arrayidx884 = 0;
 var $arrayidx888 = 0, $arrayidx893 = 0, $arrayidx894 = 0, $arrayidx897 = 0, $arrayidx9 = 0, $arrayidx902 = 0, $arrayidx91 = 0, $arrayidx911 = 0, $arrayidx914 = 0, $arrayidx919 = 0, $arrayidx928 = 0, $arrayidx931 = 0, $arrayidx936 = 0, $arrayidx945 = 0, $arrayidx948 = 0, $arrayidx954 = 0, $arrayidx956 = 0, $arrayidx959 = 0, $arrayidx96 = 0, $arrayidx964 = 0;
 var $arrayidx973 = 0, $arrayidx976 = 0, $arrayidx981 = 0, $arrayidx990 = 0, $arrayidx993 = 0, $arrayidx998 = 0, $conv = 0, $conv106 = 0, $conv123 = 0, $conv142 = 0, $conv151 = 0, $conv168 = 0, $conv185 = 0, $conv202 = 0, $conv213 = 0, $conv230 = 0, $conv247 = 0, $conv266 = 0, $conv275 = 0, $conv292 = 0;
 var $conv309 = 0, $conv326 = 0, $conv337 = 0, $conv354 = 0, $conv371 = 0, $conv390 = 0, $conv399 = 0, $conv416 = 0, $conv433 = 0, $conv450 = 0, $conv461 = 0, $conv478 = 0, $conv495 = 0, $conv514 = 0, $conv523 = 0, $conv540 = 0, $conv557 = 0, $conv574 = 0, $conv585 = 0, $conv602 = 0;
 var $conv619 = 0, $conv638 = 0, $conv647 = 0, $conv664 = 0, $conv681 = 0, $conv698 = 0, $conv709 = 0, $conv726 = 0, $conv743 = 0, $conv762 = 0, $conv771 = 0, $conv78 = 0, $conv788 = 0, $conv805 = 0, $conv822 = 0, $conv833 = 0, $conv850 = 0, $conv867 = 0, $conv886 = 0, $conv89 = 0;
 var $conv895 = 0, $conv912 = 0, $conv929 = 0, $conv946 = 0, $conv957 = 0, $conv974 = 0, $conv991 = 0, $mul = 0, $mul107 = 0, $mul124 = 0, $mul143 = 0, $mul152 = 0, $mul169 = 0, $mul186 = 0, $mul203 = 0, $mul214 = 0, $mul231 = 0, $mul248 = 0, $mul267 = 0, $mul276 = 0;
 var $mul293 = 0, $mul31 = 0, $mul310 = 0, $mul327 = 0, $mul338 = 0, $mul355 = 0, $mul372 = 0, $mul391 = 0, $mul400 = 0, $mul417 = 0, $mul434 = 0, $mul45 = 0, $mul451 = 0, $mul462 = 0, $mul479 = 0, $mul496 = 0, $mul515 = 0, $mul524 = 0, $mul541 = 0, $mul558 = 0;
 var $mul575 = 0, $mul586 = 0, $mul603 = 0, $mul62 = 0, $mul620 = 0, $mul639 = 0, $mul648 = 0, $mul665 = 0, $mul682 = 0, $mul699 = 0, $mul710 = 0, $mul727 = 0, $mul744 = 0, $mul763 = 0, $mul772 = 0, $mul789 = 0, $mul79 = 0, $mul806 = 0, $mul823 = 0, $mul834 = 0;
 var $mul851 = 0, $mul868 = 0, $mul887 = 0, $mul896 = 0, $mul90 = 0, $mul913 = 0, $mul930 = 0, $mul947 = 0, $mul958 = 0, $mul975 = 0, $mul992 = 0, $or = 0, $or1001 = 0, $or1004 = 0, $or102 = 0, $or116 = 0, $or119 = 0, $or133 = 0, $or136 = 0, $or161 = 0;
 var $or164 = 0, $or178 = 0, $or181 = 0, $or195 = 0, $or198 = 0, $or223 = 0, $or226 = 0, $or240 = 0, $or243 = 0, $or257 = 0, $or260 = 0, $or285 = 0, $or288 = 0, $or302 = 0, $or305 = 0, $or319 = 0, $or322 = 0, $or347 = 0, $or350 = 0, $or364 = 0;
 var $or367 = 0, $or381 = 0, $or384 = 0, $or40 = 0, $or409 = 0, $or412 = 0, $or426 = 0, $or429 = 0, $or443 = 0, $or446 = 0, $or471 = 0, $or474 = 0, $or488 = 0, $or491 = 0, $or505 = 0, $or508 = 0, $or533 = 0, $or536 = 0, $or54 = 0, $or550 = 0;
 var $or553 = 0, $or567 = 0, $or57 = 0, $or570 = 0, $or595 = 0, $or598 = 0, $or612 = 0, $or615 = 0, $or629 = 0, $or632 = 0, $or657 = 0, $or660 = 0, $or674 = 0, $or677 = 0, $or691 = 0, $or694 = 0, $or71 = 0, $or719 = 0, $or722 = 0, $or736 = 0;
 var $or739 = 0, $or74 = 0, $or753 = 0, $or756 = 0, $or781 = 0, $or784 = 0, $or798 = 0, $or801 = 0, $or815 = 0, $or818 = 0, $or843 = 0, $or846 = 0, $or860 = 0, $or863 = 0, $or877 = 0, $or880 = 0, $or905 = 0, $or908 = 0, $or922 = 0, $or925 = 0;
 var $or939 = 0, $or942 = 0, $or967 = 0, $or970 = 0, $or984 = 0, $or987 = 0, $or99 = 0, $shl = 0, $shl100 = 0, $shl1002 = 0, $shl114 = 0, $shl117 = 0, $shl131 = 0, $shl134 = 0, $shl159 = 0, $shl162 = 0, $shl176 = 0, $shl179 = 0, $shl193 = 0, $shl196 = 0;
 var $shl221 = 0, $shl224 = 0, $shl238 = 0, $shl241 = 0, $shl255 = 0, $shl258 = 0, $shl283 = 0, $shl286 = 0, $shl300 = 0, $shl303 = 0, $shl317 = 0, $shl320 = 0, $shl345 = 0, $shl348 = 0, $shl362 = 0, $shl365 = 0, $shl379 = 0, $shl38 = 0, $shl382 = 0, $shl407 = 0;
 var $shl410 = 0, $shl424 = 0, $shl427 = 0, $shl441 = 0, $shl444 = 0, $shl469 = 0, $shl472 = 0, $shl486 = 0, $shl489 = 0, $shl503 = 0, $shl506 = 0, $shl52 = 0, $shl531 = 0, $shl534 = 0, $shl548 = 0, $shl55 = 0, $shl551 = 0, $shl565 = 0, $shl568 = 0, $shl593 = 0;
 var $shl596 = 0, $shl610 = 0, $shl613 = 0, $shl627 = 0, $shl630 = 0, $shl655 = 0, $shl658 = 0, $shl672 = 0, $shl675 = 0, $shl689 = 0, $shl69 = 0, $shl692 = 0, $shl717 = 0, $shl72 = 0, $shl720 = 0, $shl734 = 0, $shl737 = 0, $shl751 = 0, $shl754 = 0, $shl779 = 0;
 var $shl782 = 0, $shl796 = 0, $shl799 = 0, $shl813 = 0, $shl816 = 0, $shl841 = 0, $shl844 = 0, $shl858 = 0, $shl861 = 0, $shl875 = 0, $shl878 = 0, $shl903 = 0, $shl906 = 0, $shl920 = 0, $shl923 = 0, $shl937 = 0, $shl940 = 0, $shl965 = 0, $shl968 = 0, $shl97 = 0;
 var $shl982 = 0, $shl985 = 0, $shl999 = 0, $shr = 0, $shr1000 = 0, $shr1003 = 0, $shr101 = 0, $shr115 = 0, $shr118 = 0, $shr132 = 0, $shr135 = 0, $shr160 = 0, $shr163 = 0, $shr177 = 0, $shr180 = 0, $shr194 = 0, $shr197 = 0, $shr222 = 0, $shr225 = 0, $shr239 = 0;
 var $shr242 = 0, $shr256 = 0, $shr259 = 0, $shr284 = 0, $shr287 = 0, $shr301 = 0, $shr304 = 0, $shr318 = 0, $shr321 = 0, $shr346 = 0, $shr349 = 0, $shr363 = 0, $shr366 = 0, $shr380 = 0, $shr383 = 0, $shr39 = 0, $shr408 = 0, $shr411 = 0, $shr425 = 0, $shr428 = 0;
 var $shr442 = 0, $shr445 = 0, $shr470 = 0, $shr473 = 0, $shr487 = 0, $shr490 = 0, $shr504 = 0, $shr507 = 0, $shr53 = 0, $shr532 = 0, $shr535 = 0, $shr549 = 0, $shr552 = 0, $shr56 = 0, $shr566 = 0, $shr569 = 0, $shr594 = 0, $shr597 = 0, $shr611 = 0, $shr614 = 0;
 var $shr628 = 0, $shr631 = 0, $shr656 = 0, $shr659 = 0, $shr673 = 0, $shr676 = 0, $shr690 = 0, $shr693 = 0, $shr70 = 0, $shr718 = 0, $shr721 = 0, $shr73 = 0, $shr735 = 0, $shr738 = 0, $shr752 = 0, $shr755 = 0, $shr780 = 0, $shr783 = 0, $shr797 = 0, $shr800 = 0;
 var $shr814 = 0, $shr817 = 0, $shr842 = 0, $shr845 = 0, $shr859 = 0, $shr862 = 0, $shr876 = 0, $shr879 = 0, $shr904 = 0, $shr907 = 0, $shr921 = 0, $shr924 = 0, $shr938 = 0, $shr941 = 0, $shr966 = 0, $shr969 = 0, $shr98 = 0, $shr983 = 0, $shr986 = 0, $xor1 = 0;
 var $xor10 = 0, $xor1005 = 0, $xor1006 = 0, $xor103 = 0, $xor104 = 0, $xor11 = 0, $xor120 = 0, $xor121 = 0, $xor13 = 0, $xor137 = 0, $xor138 = 0, $xor14 = 0, $xor16 = 0, $xor165 = 0, $xor166 = 0, $xor17 = 0, $xor182 = 0, $xor183 = 0, $xor19 = 0, $xor199 = 0;
 var $xor2 = 0, $xor20 = 0, $xor200 = 0, $xor205 = 0, $xor211 = 0, $xor22 = 0, $xor227 = 0, $xor228 = 0, $xor244 = 0, $xor245 = 0, $xor261 = 0, $xor262 = 0, $xor289 = 0, $xor290 = 0, $xor306 = 0, $xor307 = 0, $xor323 = 0, $xor324 = 0, $xor329 = 0, $xor335 = 0;
 var $xor351 = 0, $xor352 = 0, $xor368 = 0, $xor369 = 0, $xor385 = 0, $xor386 = 0, $xor4 = 0, $xor41 = 0, $xor413 = 0, $xor414 = 0, $xor42 = 0, $xor430 = 0, $xor431 = 0, $xor447 = 0, $xor448 = 0, $xor453 = 0, $xor459 = 0, $xor475 = 0, $xor476 = 0, $xor492 = 0;
 var $xor493 = 0, $xor5 = 0, $xor509 = 0, $xor510 = 0, $xor537 = 0, $xor538 = 0, $xor554 = 0, $xor555 = 0, $xor571 = 0, $xor572 = 0, $xor577 = 0, $xor58 = 0, $xor583 = 0, $xor59 = 0, $xor599 = 0, $xor600 = 0, $xor616 = 0, $xor617 = 0, $xor633 = 0, $xor634 = 0;
 var $xor661 = 0, $xor662 = 0, $xor678 = 0, $xor679 = 0, $xor695 = 0, $xor696 = 0, $xor7 = 0, $xor701 = 0, $xor707 = 0, $xor723 = 0, $xor724 = 0, $xor740 = 0, $xor741 = 0, $xor75 = 0, $xor757 = 0, $xor758 = 0, $xor76 = 0, $xor785 = 0, $xor786 = 0, $xor8 = 0;
 var $xor802 = 0, $xor803 = 0, $xor81 = 0, $xor819 = 0, $xor820 = 0, $xor825 = 0, $xor831 = 0, $xor847 = 0, $xor848 = 0, $xor864 = 0, $xor865 = 0, $xor87 = 0, $xor881 = 0, $xor882 = 0, $xor909 = 0, $xor910 = 0, $xor926 = 0, $xor927 = 0, $xor943 = 0, $xor944 = 0;
 var $xor949 = 0, $xor955 = 0, $xor971 = 0, $xor972 = 0, $xor988 = 0, $xor989 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$x>>2]|0;
 $xor1 = $0 ^ $r;
 HEAP32[$x>>2] = $xor1;
 $xor2 = $r ^ 16;
 $arrayidx3 = ((($x)) + 8|0);
 $1 = HEAP32[$arrayidx3>>2]|0;
 $xor4 = $xor2 ^ $1;
 HEAP32[$arrayidx3>>2] = $xor4;
 $xor5 = $r ^ 32;
 $arrayidx6 = ((($x)) + 16|0);
 $2 = HEAP32[$arrayidx6>>2]|0;
 $xor7 = $xor5 ^ $2;
 HEAP32[$arrayidx6>>2] = $xor7;
 $xor8 = $r ^ 48;
 $arrayidx9 = ((($x)) + 24|0);
 $3 = HEAP32[$arrayidx9>>2]|0;
 $xor10 = $xor8 ^ $3;
 HEAP32[$arrayidx9>>2] = $xor10;
 $xor11 = $r ^ 64;
 $arrayidx12 = ((($x)) + 32|0);
 $4 = HEAP32[$arrayidx12>>2]|0;
 $xor13 = $xor11 ^ $4;
 HEAP32[$arrayidx12>>2] = $xor13;
 $xor14 = $r ^ 80;
 $arrayidx15 = ((($x)) + 40|0);
 $5 = HEAP32[$arrayidx15>>2]|0;
 $xor16 = $xor14 ^ $5;
 HEAP32[$arrayidx15>>2] = $xor16;
 $xor17 = $r ^ 96;
 $arrayidx18 = ((($x)) + 48|0);
 $6 = HEAP32[$arrayidx18>>2]|0;
 $xor19 = $xor17 ^ $6;
 HEAP32[$arrayidx18>>2] = $xor19;
 $xor20 = $r ^ 112;
 $arrayidx21 = ((($x)) + 56|0);
 $7 = HEAP32[$arrayidx21>>2]|0;
 $xor22 = $xor20 ^ $7;
 HEAP32[$arrayidx21>>2] = $xor22;
 $conv = $xor1 << 1;
 $mul = $conv & 510;
 $arrayidx24 = (39888 + ($mul<<2)|0);
 $8 = HEAP32[$arrayidx24>>2]|0;
 $add = $mul | 1;
 $arrayidx28 = (39888 + ($add<<2)|0);
 $9 = HEAP32[$arrayidx28>>2]|0;
 $10 = $xor4 >>> 7;
 $mul31 = $10 & 510;
 $arrayidx32 = (39888 + ($mul31<<2)|0);
 $11 = HEAP32[$arrayidx32>>2]|0;
 $add36 = $mul31 | 1;
 $arrayidx37 = (39888 + ($add36<<2)|0);
 $12 = HEAP32[$arrayidx37>>2]|0;
 $shl = $11 << 8;
 $shr = $12 >>> 24;
 $or = $shr | $shl;
 $shl38 = $12 << 8;
 $shr39 = $11 >>> 24;
 $or40 = $shl38 | $shr39;
 $xor41 = $or ^ $8;
 $xor42 = $or40 ^ $9;
 $13 = $xor7 >>> 15;
 $mul45 = $13 & 510;
 $arrayidx46 = (39888 + ($mul45<<2)|0);
 $14 = HEAP32[$arrayidx46>>2]|0;
 $add50 = $mul45 | 1;
 $arrayidx51 = (39888 + ($add50<<2)|0);
 $15 = HEAP32[$arrayidx51>>2]|0;
 $shl52 = $14 << 16;
 $shr53 = $15 >>> 16;
 $or54 = $shr53 | $shl52;
 $shl55 = $15 << 16;
 $shr56 = $14 >>> 16;
 $or57 = $shl55 | $shr56;
 $xor58 = $xor41 ^ $or54;
 $xor59 = $xor42 ^ $or57;
 $16 = $xor10 >>> 24;
 $mul62 = $16 << 1;
 $arrayidx63 = (39888 + ($mul62<<2)|0);
 $17 = HEAP32[$arrayidx63>>2]|0;
 $add67 = $mul62 | 1;
 $arrayidx68 = (39888 + ($add67<<2)|0);
 $18 = HEAP32[$arrayidx68>>2]|0;
 $shl69 = $17 << 24;
 $shr70 = $18 >>> 8;
 $or71 = $shr70 | $shl69;
 $shl72 = $18 << 24;
 $shr73 = $17 >>> 8;
 $or74 = $shl72 | $shr73;
 $xor75 = $xor58 ^ $or71;
 $xor76 = $xor59 ^ $or74;
 $arrayidx77 = ((($x)) + 36|0);
 $19 = HEAP8[$arrayidx77>>0]|0;
 $conv78 = $19&255;
 $mul79 = $conv78 << 1;
 $arrayidx80 = (39888 + ($mul79<<2)|0);
 $20 = HEAP32[$arrayidx80>>2]|0;
 $xor81 = $xor76 ^ $20;
 $add85 = $mul79 | 1;
 $arrayidx86 = (39888 + ($add85<<2)|0);
 $21 = HEAP32[$arrayidx86>>2]|0;
 $xor87 = $xor75 ^ $21;
 $arrayidx88 = ((($x)) + 45|0);
 $22 = HEAP8[$arrayidx88>>0]|0;
 $conv89 = $22&255;
 $mul90 = $conv89 << 1;
 $arrayidx91 = (39888 + ($mul90<<2)|0);
 $23 = HEAP32[$arrayidx91>>2]|0;
 $add95 = $mul90 | 1;
 $arrayidx96 = (39888 + ($add95<<2)|0);
 $24 = HEAP32[$arrayidx96>>2]|0;
 $shl97 = $23 << 8;
 $shr98 = $24 >>> 24;
 $or99 = $shr98 | $shl97;
 $shl100 = $24 << 8;
 $shr101 = $23 >>> 24;
 $or102 = $shl100 | $shr101;
 $xor103 = $xor81 ^ $or99;
 $xor104 = $xor87 ^ $or102;
 $arrayidx105 = ((($x)) + 54|0);
 $25 = HEAP8[$arrayidx105>>0]|0;
 $conv106 = $25&255;
 $mul107 = $conv106 << 1;
 $arrayidx108 = (39888 + ($mul107<<2)|0);
 $26 = HEAP32[$arrayidx108>>2]|0;
 $add112 = $mul107 | 1;
 $arrayidx113 = (39888 + ($add112<<2)|0);
 $27 = HEAP32[$arrayidx113>>2]|0;
 $shl114 = $26 << 16;
 $shr115 = $27 >>> 16;
 $or116 = $shr115 | $shl114;
 $shl117 = $27 << 16;
 $shr118 = $26 >>> 16;
 $or119 = $shl117 | $shr118;
 $xor120 = $xor103 ^ $or116;
 $xor121 = $xor104 ^ $or119;
 $arrayidx122 = ((($x)) + 63|0);
 $28 = HEAP8[$arrayidx122>>0]|0;
 $conv123 = $28&255;
 $mul124 = $conv123 << 1;
 $arrayidx125 = (39888 + ($mul124<<2)|0);
 $29 = HEAP32[$arrayidx125>>2]|0;
 $add129 = $mul124 | 1;
 $arrayidx130 = (39888 + ($add129<<2)|0);
 $30 = HEAP32[$arrayidx130>>2]|0;
 $shl131 = $29 << 24;
 $shr132 = $30 >>> 8;
 $or133 = $shr132 | $shl131;
 $shl134 = $30 << 24;
 $shr135 = $29 >>> 8;
 $or136 = $shl134 | $shr135;
 $xor137 = $xor120 ^ $or133;
 $xor138 = $xor121 ^ $or136;
 HEAP32[$y>>2] = $xor138;
 $arrayidx140 = ((($y)) + 4|0);
 HEAP32[$arrayidx140>>2] = $xor137;
 $31 = HEAP8[$arrayidx3>>0]|0;
 $conv142 = $31&255;
 $mul143 = $conv142 << 1;
 $arrayidx144 = (39888 + ($mul143<<2)|0);
 $32 = HEAP32[$arrayidx144>>2]|0;
 $add148 = $mul143 | 1;
 $arrayidx149 = (39888 + ($add148<<2)|0);
 $33 = HEAP32[$arrayidx149>>2]|0;
 $arrayidx150 = ((($x)) + 17|0);
 $34 = HEAP8[$arrayidx150>>0]|0;
 $conv151 = $34&255;
 $mul152 = $conv151 << 1;
 $arrayidx153 = (39888 + ($mul152<<2)|0);
 $35 = HEAP32[$arrayidx153>>2]|0;
 $add157 = $mul152 | 1;
 $arrayidx158 = (39888 + ($add157<<2)|0);
 $36 = HEAP32[$arrayidx158>>2]|0;
 $shl159 = $35 << 8;
 $shr160 = $36 >>> 24;
 $or161 = $shr160 | $shl159;
 $shl162 = $36 << 8;
 $shr163 = $35 >>> 24;
 $or164 = $shl162 | $shr163;
 $xor165 = $or161 ^ $32;
 $xor166 = $or164 ^ $33;
 $arrayidx167 = ((($x)) + 26|0);
 $37 = HEAP8[$arrayidx167>>0]|0;
 $conv168 = $37&255;
 $mul169 = $conv168 << 1;
 $arrayidx170 = (39888 + ($mul169<<2)|0);
 $38 = HEAP32[$arrayidx170>>2]|0;
 $add174 = $mul169 | 1;
 $arrayidx175 = (39888 + ($add174<<2)|0);
 $39 = HEAP32[$arrayidx175>>2]|0;
 $shl176 = $38 << 16;
 $shr177 = $39 >>> 16;
 $or178 = $shr177 | $shl176;
 $shl179 = $39 << 16;
 $shr180 = $38 >>> 16;
 $or181 = $shl179 | $shr180;
 $xor182 = $xor165 ^ $or178;
 $xor183 = $xor166 ^ $or181;
 $arrayidx184 = ((($x)) + 35|0);
 $40 = HEAP8[$arrayidx184>>0]|0;
 $conv185 = $40&255;
 $mul186 = $conv185 << 1;
 $arrayidx187 = (39888 + ($mul186<<2)|0);
 $41 = HEAP32[$arrayidx187>>2]|0;
 $add191 = $mul186 | 1;
 $arrayidx192 = (39888 + ($add191<<2)|0);
 $42 = HEAP32[$arrayidx192>>2]|0;
 $shl193 = $41 << 24;
 $shr194 = $42 >>> 8;
 $or195 = $shr194 | $shl193;
 $shl196 = $42 << 24;
 $shr197 = $41 >>> 8;
 $or198 = $shl196 | $shr197;
 $xor199 = $xor182 ^ $or195;
 $xor200 = $xor183 ^ $or198;
 $arrayidx201 = ((($x)) + 44|0);
 $43 = HEAP8[$arrayidx201>>0]|0;
 $conv202 = $43&255;
 $mul203 = $conv202 << 1;
 $arrayidx204 = (39888 + ($mul203<<2)|0);
 $44 = HEAP32[$arrayidx204>>2]|0;
 $xor205 = $xor200 ^ $44;
 $add209 = $mul203 | 1;
 $arrayidx210 = (39888 + ($add209<<2)|0);
 $45 = HEAP32[$arrayidx210>>2]|0;
 $xor211 = $xor199 ^ $45;
 $arrayidx212 = ((($x)) + 53|0);
 $46 = HEAP8[$arrayidx212>>0]|0;
 $conv213 = $46&255;
 $mul214 = $conv213 << 1;
 $arrayidx215 = (39888 + ($mul214<<2)|0);
 $47 = HEAP32[$arrayidx215>>2]|0;
 $add219 = $mul214 | 1;
 $arrayidx220 = (39888 + ($add219<<2)|0);
 $48 = HEAP32[$arrayidx220>>2]|0;
 $shl221 = $47 << 8;
 $shr222 = $48 >>> 24;
 $or223 = $shr222 | $shl221;
 $shl224 = $48 << 8;
 $shr225 = $47 >>> 24;
 $or226 = $shl224 | $shr225;
 $xor227 = $xor205 ^ $or223;
 $xor228 = $xor211 ^ $or226;
 $arrayidx229 = ((($x)) + 62|0);
 $49 = HEAP8[$arrayidx229>>0]|0;
 $conv230 = $49&255;
 $mul231 = $conv230 << 1;
 $arrayidx232 = (39888 + ($mul231<<2)|0);
 $50 = HEAP32[$arrayidx232>>2]|0;
 $add236 = $mul231 | 1;
 $arrayidx237 = (39888 + ($add236<<2)|0);
 $51 = HEAP32[$arrayidx237>>2]|0;
 $shl238 = $50 << 16;
 $shr239 = $51 >>> 16;
 $or240 = $shr239 | $shl238;
 $shl241 = $51 << 16;
 $shr242 = $50 >>> 16;
 $or243 = $shl241 | $shr242;
 $xor244 = $xor227 ^ $or240;
 $xor245 = $xor228 ^ $or243;
 $arrayidx246 = ((($x)) + 7|0);
 $52 = HEAP8[$arrayidx246>>0]|0;
 $conv247 = $52&255;
 $mul248 = $conv247 << 1;
 $arrayidx249 = (39888 + ($mul248<<2)|0);
 $53 = HEAP32[$arrayidx249>>2]|0;
 $add253 = $mul248 | 1;
 $arrayidx254 = (39888 + ($add253<<2)|0);
 $54 = HEAP32[$arrayidx254>>2]|0;
 $shl255 = $53 << 24;
 $shr256 = $54 >>> 8;
 $or257 = $shr256 | $shl255;
 $shl258 = $54 << 24;
 $shr259 = $53 >>> 8;
 $or260 = $shl258 | $shr259;
 $xor261 = $xor244 ^ $or257;
 $xor262 = $xor245 ^ $or260;
 $arrayidx263 = ((($y)) + 8|0);
 HEAP32[$arrayidx263>>2] = $xor262;
 $arrayidx264 = ((($y)) + 12|0);
 HEAP32[$arrayidx264>>2] = $xor261;
 $55 = HEAP8[$arrayidx6>>0]|0;
 $conv266 = $55&255;
 $mul267 = $conv266 << 1;
 $arrayidx268 = (39888 + ($mul267<<2)|0);
 $56 = HEAP32[$arrayidx268>>2]|0;
 $add272 = $mul267 | 1;
 $arrayidx273 = (39888 + ($add272<<2)|0);
 $57 = HEAP32[$arrayidx273>>2]|0;
 $arrayidx274 = ((($x)) + 25|0);
 $58 = HEAP8[$arrayidx274>>0]|0;
 $conv275 = $58&255;
 $mul276 = $conv275 << 1;
 $arrayidx277 = (39888 + ($mul276<<2)|0);
 $59 = HEAP32[$arrayidx277>>2]|0;
 $add281 = $mul276 | 1;
 $arrayidx282 = (39888 + ($add281<<2)|0);
 $60 = HEAP32[$arrayidx282>>2]|0;
 $shl283 = $59 << 8;
 $shr284 = $60 >>> 24;
 $or285 = $shr284 | $shl283;
 $shl286 = $60 << 8;
 $shr287 = $59 >>> 24;
 $or288 = $shl286 | $shr287;
 $xor289 = $or285 ^ $56;
 $xor290 = $or288 ^ $57;
 $arrayidx291 = ((($x)) + 34|0);
 $61 = HEAP8[$arrayidx291>>0]|0;
 $conv292 = $61&255;
 $mul293 = $conv292 << 1;
 $arrayidx294 = (39888 + ($mul293<<2)|0);
 $62 = HEAP32[$arrayidx294>>2]|0;
 $add298 = $mul293 | 1;
 $arrayidx299 = (39888 + ($add298<<2)|0);
 $63 = HEAP32[$arrayidx299>>2]|0;
 $shl300 = $62 << 16;
 $shr301 = $63 >>> 16;
 $or302 = $shr301 | $shl300;
 $shl303 = $63 << 16;
 $shr304 = $62 >>> 16;
 $or305 = $shl303 | $shr304;
 $xor306 = $xor289 ^ $or302;
 $xor307 = $xor290 ^ $or305;
 $arrayidx308 = ((($x)) + 43|0);
 $64 = HEAP8[$arrayidx308>>0]|0;
 $conv309 = $64&255;
 $mul310 = $conv309 << 1;
 $arrayidx311 = (39888 + ($mul310<<2)|0);
 $65 = HEAP32[$arrayidx311>>2]|0;
 $add315 = $mul310 | 1;
 $arrayidx316 = (39888 + ($add315<<2)|0);
 $66 = HEAP32[$arrayidx316>>2]|0;
 $shl317 = $65 << 24;
 $shr318 = $66 >>> 8;
 $or319 = $shr318 | $shl317;
 $shl320 = $66 << 24;
 $shr321 = $65 >>> 8;
 $or322 = $shl320 | $shr321;
 $xor323 = $xor306 ^ $or319;
 $xor324 = $xor307 ^ $or322;
 $arrayidx325 = ((($x)) + 52|0);
 $67 = HEAP8[$arrayidx325>>0]|0;
 $conv326 = $67&255;
 $mul327 = $conv326 << 1;
 $arrayidx328 = (39888 + ($mul327<<2)|0);
 $68 = HEAP32[$arrayidx328>>2]|0;
 $xor329 = $xor324 ^ $68;
 $add333 = $mul327 | 1;
 $arrayidx334 = (39888 + ($add333<<2)|0);
 $69 = HEAP32[$arrayidx334>>2]|0;
 $xor335 = $xor323 ^ $69;
 $arrayidx336 = ((($x)) + 61|0);
 $70 = HEAP8[$arrayidx336>>0]|0;
 $conv337 = $70&255;
 $mul338 = $conv337 << 1;
 $arrayidx339 = (39888 + ($mul338<<2)|0);
 $71 = HEAP32[$arrayidx339>>2]|0;
 $add343 = $mul338 | 1;
 $arrayidx344 = (39888 + ($add343<<2)|0);
 $72 = HEAP32[$arrayidx344>>2]|0;
 $shl345 = $71 << 8;
 $shr346 = $72 >>> 24;
 $or347 = $shr346 | $shl345;
 $shl348 = $72 << 8;
 $shr349 = $71 >>> 24;
 $or350 = $shl348 | $shr349;
 $xor351 = $xor329 ^ $or347;
 $xor352 = $xor335 ^ $or350;
 $arrayidx353 = ((($x)) + 6|0);
 $73 = HEAP8[$arrayidx353>>0]|0;
 $conv354 = $73&255;
 $mul355 = $conv354 << 1;
 $arrayidx356 = (39888 + ($mul355<<2)|0);
 $74 = HEAP32[$arrayidx356>>2]|0;
 $add360 = $mul355 | 1;
 $arrayidx361 = (39888 + ($add360<<2)|0);
 $75 = HEAP32[$arrayidx361>>2]|0;
 $shl362 = $74 << 16;
 $shr363 = $75 >>> 16;
 $or364 = $shr363 | $shl362;
 $shl365 = $75 << 16;
 $shr366 = $74 >>> 16;
 $or367 = $shl365 | $shr366;
 $xor368 = $xor351 ^ $or364;
 $xor369 = $xor352 ^ $or367;
 $arrayidx370 = ((($x)) + 15|0);
 $76 = HEAP8[$arrayidx370>>0]|0;
 $conv371 = $76&255;
 $mul372 = $conv371 << 1;
 $arrayidx373 = (39888 + ($mul372<<2)|0);
 $77 = HEAP32[$arrayidx373>>2]|0;
 $add377 = $mul372 | 1;
 $arrayidx378 = (39888 + ($add377<<2)|0);
 $78 = HEAP32[$arrayidx378>>2]|0;
 $shl379 = $77 << 24;
 $shr380 = $78 >>> 8;
 $or381 = $shr380 | $shl379;
 $shl382 = $78 << 24;
 $shr383 = $77 >>> 8;
 $or384 = $shl382 | $shr383;
 $xor385 = $xor368 ^ $or381;
 $xor386 = $xor369 ^ $or384;
 $arrayidx387 = ((($y)) + 16|0);
 HEAP32[$arrayidx387>>2] = $xor386;
 $arrayidx388 = ((($y)) + 20|0);
 HEAP32[$arrayidx388>>2] = $xor385;
 $79 = HEAP8[$arrayidx9>>0]|0;
 $conv390 = $79&255;
 $mul391 = $conv390 << 1;
 $arrayidx392 = (39888 + ($mul391<<2)|0);
 $80 = HEAP32[$arrayidx392>>2]|0;
 $add396 = $mul391 | 1;
 $arrayidx397 = (39888 + ($add396<<2)|0);
 $81 = HEAP32[$arrayidx397>>2]|0;
 $arrayidx398 = ((($x)) + 33|0);
 $82 = HEAP8[$arrayidx398>>0]|0;
 $conv399 = $82&255;
 $mul400 = $conv399 << 1;
 $arrayidx401 = (39888 + ($mul400<<2)|0);
 $83 = HEAP32[$arrayidx401>>2]|0;
 $add405 = $mul400 | 1;
 $arrayidx406 = (39888 + ($add405<<2)|0);
 $84 = HEAP32[$arrayidx406>>2]|0;
 $shl407 = $83 << 8;
 $shr408 = $84 >>> 24;
 $or409 = $shr408 | $shl407;
 $shl410 = $84 << 8;
 $shr411 = $83 >>> 24;
 $or412 = $shl410 | $shr411;
 $xor413 = $or409 ^ $80;
 $xor414 = $or412 ^ $81;
 $arrayidx415 = ((($x)) + 42|0);
 $85 = HEAP8[$arrayidx415>>0]|0;
 $conv416 = $85&255;
 $mul417 = $conv416 << 1;
 $arrayidx418 = (39888 + ($mul417<<2)|0);
 $86 = HEAP32[$arrayidx418>>2]|0;
 $add422 = $mul417 | 1;
 $arrayidx423 = (39888 + ($add422<<2)|0);
 $87 = HEAP32[$arrayidx423>>2]|0;
 $shl424 = $86 << 16;
 $shr425 = $87 >>> 16;
 $or426 = $shr425 | $shl424;
 $shl427 = $87 << 16;
 $shr428 = $86 >>> 16;
 $or429 = $shl427 | $shr428;
 $xor430 = $xor413 ^ $or426;
 $xor431 = $xor414 ^ $or429;
 $arrayidx432 = ((($x)) + 51|0);
 $88 = HEAP8[$arrayidx432>>0]|0;
 $conv433 = $88&255;
 $mul434 = $conv433 << 1;
 $arrayidx435 = (39888 + ($mul434<<2)|0);
 $89 = HEAP32[$arrayidx435>>2]|0;
 $add439 = $mul434 | 1;
 $arrayidx440 = (39888 + ($add439<<2)|0);
 $90 = HEAP32[$arrayidx440>>2]|0;
 $shl441 = $89 << 24;
 $shr442 = $90 >>> 8;
 $or443 = $shr442 | $shl441;
 $shl444 = $90 << 24;
 $shr445 = $89 >>> 8;
 $or446 = $shl444 | $shr445;
 $xor447 = $xor430 ^ $or443;
 $xor448 = $xor431 ^ $or446;
 $arrayidx449 = ((($x)) + 60|0);
 $91 = HEAP8[$arrayidx449>>0]|0;
 $conv450 = $91&255;
 $mul451 = $conv450 << 1;
 $arrayidx452 = (39888 + ($mul451<<2)|0);
 $92 = HEAP32[$arrayidx452>>2]|0;
 $xor453 = $xor448 ^ $92;
 $add457 = $mul451 | 1;
 $arrayidx458 = (39888 + ($add457<<2)|0);
 $93 = HEAP32[$arrayidx458>>2]|0;
 $xor459 = $xor447 ^ $93;
 $arrayidx460 = ((($x)) + 5|0);
 $94 = HEAP8[$arrayidx460>>0]|0;
 $conv461 = $94&255;
 $mul462 = $conv461 << 1;
 $arrayidx463 = (39888 + ($mul462<<2)|0);
 $95 = HEAP32[$arrayidx463>>2]|0;
 $add467 = $mul462 | 1;
 $arrayidx468 = (39888 + ($add467<<2)|0);
 $96 = HEAP32[$arrayidx468>>2]|0;
 $shl469 = $95 << 8;
 $shr470 = $96 >>> 24;
 $or471 = $shr470 | $shl469;
 $shl472 = $96 << 8;
 $shr473 = $95 >>> 24;
 $or474 = $shl472 | $shr473;
 $xor475 = $xor453 ^ $or471;
 $xor476 = $xor459 ^ $or474;
 $arrayidx477 = ((($x)) + 14|0);
 $97 = HEAP8[$arrayidx477>>0]|0;
 $conv478 = $97&255;
 $mul479 = $conv478 << 1;
 $arrayidx480 = (39888 + ($mul479<<2)|0);
 $98 = HEAP32[$arrayidx480>>2]|0;
 $add484 = $mul479 | 1;
 $arrayidx485 = (39888 + ($add484<<2)|0);
 $99 = HEAP32[$arrayidx485>>2]|0;
 $shl486 = $98 << 16;
 $shr487 = $99 >>> 16;
 $or488 = $shr487 | $shl486;
 $shl489 = $99 << 16;
 $shr490 = $98 >>> 16;
 $or491 = $shl489 | $shr490;
 $xor492 = $xor475 ^ $or488;
 $xor493 = $xor476 ^ $or491;
 $arrayidx494 = ((($x)) + 23|0);
 $100 = HEAP8[$arrayidx494>>0]|0;
 $conv495 = $100&255;
 $mul496 = $conv495 << 1;
 $arrayidx497 = (39888 + ($mul496<<2)|0);
 $101 = HEAP32[$arrayidx497>>2]|0;
 $add501 = $mul496 | 1;
 $arrayidx502 = (39888 + ($add501<<2)|0);
 $102 = HEAP32[$arrayidx502>>2]|0;
 $shl503 = $101 << 24;
 $shr504 = $102 >>> 8;
 $or505 = $shr504 | $shl503;
 $shl506 = $102 << 24;
 $shr507 = $101 >>> 8;
 $or508 = $shl506 | $shr507;
 $xor509 = $xor492 ^ $or505;
 $xor510 = $xor493 ^ $or508;
 $arrayidx511 = ((($y)) + 24|0);
 HEAP32[$arrayidx511>>2] = $xor510;
 $arrayidx512 = ((($y)) + 28|0);
 HEAP32[$arrayidx512>>2] = $xor509;
 $103 = HEAP8[$arrayidx12>>0]|0;
 $conv514 = $103&255;
 $mul515 = $conv514 << 1;
 $arrayidx516 = (39888 + ($mul515<<2)|0);
 $104 = HEAP32[$arrayidx516>>2]|0;
 $add520 = $mul515 | 1;
 $arrayidx521 = (39888 + ($add520<<2)|0);
 $105 = HEAP32[$arrayidx521>>2]|0;
 $arrayidx522 = ((($x)) + 41|0);
 $106 = HEAP8[$arrayidx522>>0]|0;
 $conv523 = $106&255;
 $mul524 = $conv523 << 1;
 $arrayidx525 = (39888 + ($mul524<<2)|0);
 $107 = HEAP32[$arrayidx525>>2]|0;
 $add529 = $mul524 | 1;
 $arrayidx530 = (39888 + ($add529<<2)|0);
 $108 = HEAP32[$arrayidx530>>2]|0;
 $shl531 = $107 << 8;
 $shr532 = $108 >>> 24;
 $or533 = $shr532 | $shl531;
 $shl534 = $108 << 8;
 $shr535 = $107 >>> 24;
 $or536 = $shl534 | $shr535;
 $xor537 = $or533 ^ $104;
 $xor538 = $or536 ^ $105;
 $arrayidx539 = ((($x)) + 50|0);
 $109 = HEAP8[$arrayidx539>>0]|0;
 $conv540 = $109&255;
 $mul541 = $conv540 << 1;
 $arrayidx542 = (39888 + ($mul541<<2)|0);
 $110 = HEAP32[$arrayidx542>>2]|0;
 $add546 = $mul541 | 1;
 $arrayidx547 = (39888 + ($add546<<2)|0);
 $111 = HEAP32[$arrayidx547>>2]|0;
 $shl548 = $110 << 16;
 $shr549 = $111 >>> 16;
 $or550 = $shr549 | $shl548;
 $shl551 = $111 << 16;
 $shr552 = $110 >>> 16;
 $or553 = $shl551 | $shr552;
 $xor554 = $xor537 ^ $or550;
 $xor555 = $xor538 ^ $or553;
 $arrayidx556 = ((($x)) + 59|0);
 $112 = HEAP8[$arrayidx556>>0]|0;
 $conv557 = $112&255;
 $mul558 = $conv557 << 1;
 $arrayidx559 = (39888 + ($mul558<<2)|0);
 $113 = HEAP32[$arrayidx559>>2]|0;
 $add563 = $mul558 | 1;
 $arrayidx564 = (39888 + ($add563<<2)|0);
 $114 = HEAP32[$arrayidx564>>2]|0;
 $shl565 = $113 << 24;
 $shr566 = $114 >>> 8;
 $or567 = $shr566 | $shl565;
 $shl568 = $114 << 24;
 $shr569 = $113 >>> 8;
 $or570 = $shl568 | $shr569;
 $xor571 = $xor554 ^ $or567;
 $xor572 = $xor555 ^ $or570;
 $arrayidx573 = ((($x)) + 4|0);
 $115 = HEAP8[$arrayidx573>>0]|0;
 $conv574 = $115&255;
 $mul575 = $conv574 << 1;
 $arrayidx576 = (39888 + ($mul575<<2)|0);
 $116 = HEAP32[$arrayidx576>>2]|0;
 $xor577 = $xor572 ^ $116;
 $add581 = $mul575 | 1;
 $arrayidx582 = (39888 + ($add581<<2)|0);
 $117 = HEAP32[$arrayidx582>>2]|0;
 $xor583 = $xor571 ^ $117;
 $arrayidx584 = ((($x)) + 13|0);
 $118 = HEAP8[$arrayidx584>>0]|0;
 $conv585 = $118&255;
 $mul586 = $conv585 << 1;
 $arrayidx587 = (39888 + ($mul586<<2)|0);
 $119 = HEAP32[$arrayidx587>>2]|0;
 $add591 = $mul586 | 1;
 $arrayidx592 = (39888 + ($add591<<2)|0);
 $120 = HEAP32[$arrayidx592>>2]|0;
 $shl593 = $119 << 8;
 $shr594 = $120 >>> 24;
 $or595 = $shr594 | $shl593;
 $shl596 = $120 << 8;
 $shr597 = $119 >>> 24;
 $or598 = $shl596 | $shr597;
 $xor599 = $xor577 ^ $or595;
 $xor600 = $xor583 ^ $or598;
 $arrayidx601 = ((($x)) + 22|0);
 $121 = HEAP8[$arrayidx601>>0]|0;
 $conv602 = $121&255;
 $mul603 = $conv602 << 1;
 $arrayidx604 = (39888 + ($mul603<<2)|0);
 $122 = HEAP32[$arrayidx604>>2]|0;
 $add608 = $mul603 | 1;
 $arrayidx609 = (39888 + ($add608<<2)|0);
 $123 = HEAP32[$arrayidx609>>2]|0;
 $shl610 = $122 << 16;
 $shr611 = $123 >>> 16;
 $or612 = $shr611 | $shl610;
 $shl613 = $123 << 16;
 $shr614 = $122 >>> 16;
 $or615 = $shl613 | $shr614;
 $xor616 = $xor599 ^ $or612;
 $xor617 = $xor600 ^ $or615;
 $arrayidx618 = ((($x)) + 31|0);
 $124 = HEAP8[$arrayidx618>>0]|0;
 $conv619 = $124&255;
 $mul620 = $conv619 << 1;
 $arrayidx621 = (39888 + ($mul620<<2)|0);
 $125 = HEAP32[$arrayidx621>>2]|0;
 $add625 = $mul620 | 1;
 $arrayidx626 = (39888 + ($add625<<2)|0);
 $126 = HEAP32[$arrayidx626>>2]|0;
 $shl627 = $125 << 24;
 $shr628 = $126 >>> 8;
 $or629 = $shr628 | $shl627;
 $shl630 = $126 << 24;
 $shr631 = $125 >>> 8;
 $or632 = $shl630 | $shr631;
 $xor633 = $xor616 ^ $or629;
 $xor634 = $xor617 ^ $or632;
 $arrayidx635 = ((($y)) + 32|0);
 HEAP32[$arrayidx635>>2] = $xor634;
 $arrayidx636 = ((($y)) + 36|0);
 HEAP32[$arrayidx636>>2] = $xor633;
 $127 = HEAP8[$arrayidx15>>0]|0;
 $conv638 = $127&255;
 $mul639 = $conv638 << 1;
 $arrayidx640 = (39888 + ($mul639<<2)|0);
 $128 = HEAP32[$arrayidx640>>2]|0;
 $add644 = $mul639 | 1;
 $arrayidx645 = (39888 + ($add644<<2)|0);
 $129 = HEAP32[$arrayidx645>>2]|0;
 $arrayidx646 = ((($x)) + 49|0);
 $130 = HEAP8[$arrayidx646>>0]|0;
 $conv647 = $130&255;
 $mul648 = $conv647 << 1;
 $arrayidx649 = (39888 + ($mul648<<2)|0);
 $131 = HEAP32[$arrayidx649>>2]|0;
 $add653 = $mul648 | 1;
 $arrayidx654 = (39888 + ($add653<<2)|0);
 $132 = HEAP32[$arrayidx654>>2]|0;
 $shl655 = $131 << 8;
 $shr656 = $132 >>> 24;
 $or657 = $shr656 | $shl655;
 $shl658 = $132 << 8;
 $shr659 = $131 >>> 24;
 $or660 = $shl658 | $shr659;
 $xor661 = $or657 ^ $128;
 $xor662 = $or660 ^ $129;
 $arrayidx663 = ((($x)) + 58|0);
 $133 = HEAP8[$arrayidx663>>0]|0;
 $conv664 = $133&255;
 $mul665 = $conv664 << 1;
 $arrayidx666 = (39888 + ($mul665<<2)|0);
 $134 = HEAP32[$arrayidx666>>2]|0;
 $add670 = $mul665 | 1;
 $arrayidx671 = (39888 + ($add670<<2)|0);
 $135 = HEAP32[$arrayidx671>>2]|0;
 $shl672 = $134 << 16;
 $shr673 = $135 >>> 16;
 $or674 = $shr673 | $shl672;
 $shl675 = $135 << 16;
 $shr676 = $134 >>> 16;
 $or677 = $shl675 | $shr676;
 $xor678 = $xor661 ^ $or674;
 $xor679 = $xor662 ^ $or677;
 $arrayidx680 = ((($x)) + 3|0);
 $136 = HEAP8[$arrayidx680>>0]|0;
 $conv681 = $136&255;
 $mul682 = $conv681 << 1;
 $arrayidx683 = (39888 + ($mul682<<2)|0);
 $137 = HEAP32[$arrayidx683>>2]|0;
 $add687 = $mul682 | 1;
 $arrayidx688 = (39888 + ($add687<<2)|0);
 $138 = HEAP32[$arrayidx688>>2]|0;
 $shl689 = $137 << 24;
 $shr690 = $138 >>> 8;
 $or691 = $shr690 | $shl689;
 $shl692 = $138 << 24;
 $shr693 = $137 >>> 8;
 $or694 = $shl692 | $shr693;
 $xor695 = $xor678 ^ $or691;
 $xor696 = $xor679 ^ $or694;
 $arrayidx697 = ((($x)) + 12|0);
 $139 = HEAP8[$arrayidx697>>0]|0;
 $conv698 = $139&255;
 $mul699 = $conv698 << 1;
 $arrayidx700 = (39888 + ($mul699<<2)|0);
 $140 = HEAP32[$arrayidx700>>2]|0;
 $xor701 = $xor696 ^ $140;
 $add705 = $mul699 | 1;
 $arrayidx706 = (39888 + ($add705<<2)|0);
 $141 = HEAP32[$arrayidx706>>2]|0;
 $xor707 = $xor695 ^ $141;
 $arrayidx708 = ((($x)) + 21|0);
 $142 = HEAP8[$arrayidx708>>0]|0;
 $conv709 = $142&255;
 $mul710 = $conv709 << 1;
 $arrayidx711 = (39888 + ($mul710<<2)|0);
 $143 = HEAP32[$arrayidx711>>2]|0;
 $add715 = $mul710 | 1;
 $arrayidx716 = (39888 + ($add715<<2)|0);
 $144 = HEAP32[$arrayidx716>>2]|0;
 $shl717 = $143 << 8;
 $shr718 = $144 >>> 24;
 $or719 = $shr718 | $shl717;
 $shl720 = $144 << 8;
 $shr721 = $143 >>> 24;
 $or722 = $shl720 | $shr721;
 $xor723 = $xor701 ^ $or719;
 $xor724 = $xor707 ^ $or722;
 $arrayidx725 = ((($x)) + 30|0);
 $145 = HEAP8[$arrayidx725>>0]|0;
 $conv726 = $145&255;
 $mul727 = $conv726 << 1;
 $arrayidx728 = (39888 + ($mul727<<2)|0);
 $146 = HEAP32[$arrayidx728>>2]|0;
 $add732 = $mul727 | 1;
 $arrayidx733 = (39888 + ($add732<<2)|0);
 $147 = HEAP32[$arrayidx733>>2]|0;
 $shl734 = $146 << 16;
 $shr735 = $147 >>> 16;
 $or736 = $shr735 | $shl734;
 $shl737 = $147 << 16;
 $shr738 = $146 >>> 16;
 $or739 = $shl737 | $shr738;
 $xor740 = $xor723 ^ $or736;
 $xor741 = $xor724 ^ $or739;
 $arrayidx742 = ((($x)) + 39|0);
 $148 = HEAP8[$arrayidx742>>0]|0;
 $conv743 = $148&255;
 $mul744 = $conv743 << 1;
 $arrayidx745 = (39888 + ($mul744<<2)|0);
 $149 = HEAP32[$arrayidx745>>2]|0;
 $add749 = $mul744 | 1;
 $arrayidx750 = (39888 + ($add749<<2)|0);
 $150 = HEAP32[$arrayidx750>>2]|0;
 $shl751 = $149 << 24;
 $shr752 = $150 >>> 8;
 $or753 = $shr752 | $shl751;
 $shl754 = $150 << 24;
 $shr755 = $149 >>> 8;
 $or756 = $shl754 | $shr755;
 $xor757 = $xor740 ^ $or753;
 $xor758 = $xor741 ^ $or756;
 $arrayidx759 = ((($y)) + 40|0);
 HEAP32[$arrayidx759>>2] = $xor758;
 $arrayidx760 = ((($y)) + 44|0);
 HEAP32[$arrayidx760>>2] = $xor757;
 $151 = HEAP8[$arrayidx18>>0]|0;
 $conv762 = $151&255;
 $mul763 = $conv762 << 1;
 $arrayidx764 = (39888 + ($mul763<<2)|0);
 $152 = HEAP32[$arrayidx764>>2]|0;
 $add768 = $mul763 | 1;
 $arrayidx769 = (39888 + ($add768<<2)|0);
 $153 = HEAP32[$arrayidx769>>2]|0;
 $arrayidx770 = ((($x)) + 57|0);
 $154 = HEAP8[$arrayidx770>>0]|0;
 $conv771 = $154&255;
 $mul772 = $conv771 << 1;
 $arrayidx773 = (39888 + ($mul772<<2)|0);
 $155 = HEAP32[$arrayidx773>>2]|0;
 $add777 = $mul772 | 1;
 $arrayidx778 = (39888 + ($add777<<2)|0);
 $156 = HEAP32[$arrayidx778>>2]|0;
 $shl779 = $155 << 8;
 $shr780 = $156 >>> 24;
 $or781 = $shr780 | $shl779;
 $shl782 = $156 << 8;
 $shr783 = $155 >>> 24;
 $or784 = $shl782 | $shr783;
 $xor785 = $or781 ^ $152;
 $xor786 = $or784 ^ $153;
 $arrayidx787 = ((($x)) + 2|0);
 $157 = HEAP8[$arrayidx787>>0]|0;
 $conv788 = $157&255;
 $mul789 = $conv788 << 1;
 $arrayidx790 = (39888 + ($mul789<<2)|0);
 $158 = HEAP32[$arrayidx790>>2]|0;
 $add794 = $mul789 | 1;
 $arrayidx795 = (39888 + ($add794<<2)|0);
 $159 = HEAP32[$arrayidx795>>2]|0;
 $shl796 = $158 << 16;
 $shr797 = $159 >>> 16;
 $or798 = $shr797 | $shl796;
 $shl799 = $159 << 16;
 $shr800 = $158 >>> 16;
 $or801 = $shl799 | $shr800;
 $xor802 = $xor785 ^ $or798;
 $xor803 = $xor786 ^ $or801;
 $arrayidx804 = ((($x)) + 11|0);
 $160 = HEAP8[$arrayidx804>>0]|0;
 $conv805 = $160&255;
 $mul806 = $conv805 << 1;
 $arrayidx807 = (39888 + ($mul806<<2)|0);
 $161 = HEAP32[$arrayidx807>>2]|0;
 $add811 = $mul806 | 1;
 $arrayidx812 = (39888 + ($add811<<2)|0);
 $162 = HEAP32[$arrayidx812>>2]|0;
 $shl813 = $161 << 24;
 $shr814 = $162 >>> 8;
 $or815 = $shr814 | $shl813;
 $shl816 = $162 << 24;
 $shr817 = $161 >>> 8;
 $or818 = $shl816 | $shr817;
 $xor819 = $xor802 ^ $or815;
 $xor820 = $xor803 ^ $or818;
 $arrayidx821 = ((($x)) + 20|0);
 $163 = HEAP8[$arrayidx821>>0]|0;
 $conv822 = $163&255;
 $mul823 = $conv822 << 1;
 $arrayidx824 = (39888 + ($mul823<<2)|0);
 $164 = HEAP32[$arrayidx824>>2]|0;
 $xor825 = $xor820 ^ $164;
 $add829 = $mul823 | 1;
 $arrayidx830 = (39888 + ($add829<<2)|0);
 $165 = HEAP32[$arrayidx830>>2]|0;
 $xor831 = $xor819 ^ $165;
 $arrayidx832 = ((($x)) + 29|0);
 $166 = HEAP8[$arrayidx832>>0]|0;
 $conv833 = $166&255;
 $mul834 = $conv833 << 1;
 $arrayidx835 = (39888 + ($mul834<<2)|0);
 $167 = HEAP32[$arrayidx835>>2]|0;
 $add839 = $mul834 | 1;
 $arrayidx840 = (39888 + ($add839<<2)|0);
 $168 = HEAP32[$arrayidx840>>2]|0;
 $shl841 = $167 << 8;
 $shr842 = $168 >>> 24;
 $or843 = $shr842 | $shl841;
 $shl844 = $168 << 8;
 $shr845 = $167 >>> 24;
 $or846 = $shl844 | $shr845;
 $xor847 = $xor825 ^ $or843;
 $xor848 = $xor831 ^ $or846;
 $arrayidx849 = ((($x)) + 38|0);
 $169 = HEAP8[$arrayidx849>>0]|0;
 $conv850 = $169&255;
 $mul851 = $conv850 << 1;
 $arrayidx852 = (39888 + ($mul851<<2)|0);
 $170 = HEAP32[$arrayidx852>>2]|0;
 $add856 = $mul851 | 1;
 $arrayidx857 = (39888 + ($add856<<2)|0);
 $171 = HEAP32[$arrayidx857>>2]|0;
 $shl858 = $170 << 16;
 $shr859 = $171 >>> 16;
 $or860 = $shr859 | $shl858;
 $shl861 = $171 << 16;
 $shr862 = $170 >>> 16;
 $or863 = $shl861 | $shr862;
 $xor864 = $xor847 ^ $or860;
 $xor865 = $xor848 ^ $or863;
 $arrayidx866 = ((($x)) + 47|0);
 $172 = HEAP8[$arrayidx866>>0]|0;
 $conv867 = $172&255;
 $mul868 = $conv867 << 1;
 $arrayidx869 = (39888 + ($mul868<<2)|0);
 $173 = HEAP32[$arrayidx869>>2]|0;
 $add873 = $mul868 | 1;
 $arrayidx874 = (39888 + ($add873<<2)|0);
 $174 = HEAP32[$arrayidx874>>2]|0;
 $shl875 = $173 << 24;
 $shr876 = $174 >>> 8;
 $or877 = $shr876 | $shl875;
 $shl878 = $174 << 24;
 $shr879 = $173 >>> 8;
 $or880 = $shl878 | $shr879;
 $xor881 = $xor864 ^ $or877;
 $xor882 = $xor865 ^ $or880;
 $arrayidx883 = ((($y)) + 48|0);
 HEAP32[$arrayidx883>>2] = $xor882;
 $arrayidx884 = ((($y)) + 52|0);
 HEAP32[$arrayidx884>>2] = $xor881;
 $175 = HEAP8[$arrayidx21>>0]|0;
 $conv886 = $175&255;
 $mul887 = $conv886 << 1;
 $arrayidx888 = (39888 + ($mul887<<2)|0);
 $176 = HEAP32[$arrayidx888>>2]|0;
 $add892 = $mul887 | 1;
 $arrayidx893 = (39888 + ($add892<<2)|0);
 $177 = HEAP32[$arrayidx893>>2]|0;
 $arrayidx894 = ((($x)) + 1|0);
 $178 = HEAP8[$arrayidx894>>0]|0;
 $conv895 = $178&255;
 $mul896 = $conv895 << 1;
 $arrayidx897 = (39888 + ($mul896<<2)|0);
 $179 = HEAP32[$arrayidx897>>2]|0;
 $add901 = $mul896 | 1;
 $arrayidx902 = (39888 + ($add901<<2)|0);
 $180 = HEAP32[$arrayidx902>>2]|0;
 $shl903 = $179 << 8;
 $shr904 = $180 >>> 24;
 $or905 = $shr904 | $shl903;
 $shl906 = $180 << 8;
 $shr907 = $179 >>> 24;
 $or908 = $shl906 | $shr907;
 $xor909 = $or905 ^ $176;
 $xor910 = $or908 ^ $177;
 $arrayidx911 = ((($x)) + 10|0);
 $181 = HEAP8[$arrayidx911>>0]|0;
 $conv912 = $181&255;
 $mul913 = $conv912 << 1;
 $arrayidx914 = (39888 + ($mul913<<2)|0);
 $182 = HEAP32[$arrayidx914>>2]|0;
 $add918 = $mul913 | 1;
 $arrayidx919 = (39888 + ($add918<<2)|0);
 $183 = HEAP32[$arrayidx919>>2]|0;
 $shl920 = $182 << 16;
 $shr921 = $183 >>> 16;
 $or922 = $shr921 | $shl920;
 $shl923 = $183 << 16;
 $shr924 = $182 >>> 16;
 $or925 = $shl923 | $shr924;
 $xor926 = $xor909 ^ $or922;
 $xor927 = $xor910 ^ $or925;
 $arrayidx928 = ((($x)) + 19|0);
 $184 = HEAP8[$arrayidx928>>0]|0;
 $conv929 = $184&255;
 $mul930 = $conv929 << 1;
 $arrayidx931 = (39888 + ($mul930<<2)|0);
 $185 = HEAP32[$arrayidx931>>2]|0;
 $add935 = $mul930 | 1;
 $arrayidx936 = (39888 + ($add935<<2)|0);
 $186 = HEAP32[$arrayidx936>>2]|0;
 $shl937 = $185 << 24;
 $shr938 = $186 >>> 8;
 $or939 = $shr938 | $shl937;
 $shl940 = $186 << 24;
 $shr941 = $185 >>> 8;
 $or942 = $shl940 | $shr941;
 $xor943 = $xor926 ^ $or939;
 $xor944 = $xor927 ^ $or942;
 $arrayidx945 = ((($x)) + 28|0);
 $187 = HEAP8[$arrayidx945>>0]|0;
 $conv946 = $187&255;
 $mul947 = $conv946 << 1;
 $arrayidx948 = (39888 + ($mul947<<2)|0);
 $188 = HEAP32[$arrayidx948>>2]|0;
 $xor949 = $xor944 ^ $188;
 $add953 = $mul947 | 1;
 $arrayidx954 = (39888 + ($add953<<2)|0);
 $189 = HEAP32[$arrayidx954>>2]|0;
 $xor955 = $xor943 ^ $189;
 $arrayidx956 = ((($x)) + 37|0);
 $190 = HEAP8[$arrayidx956>>0]|0;
 $conv957 = $190&255;
 $mul958 = $conv957 << 1;
 $arrayidx959 = (39888 + ($mul958<<2)|0);
 $191 = HEAP32[$arrayidx959>>2]|0;
 $add963 = $mul958 | 1;
 $arrayidx964 = (39888 + ($add963<<2)|0);
 $192 = HEAP32[$arrayidx964>>2]|0;
 $shl965 = $191 << 8;
 $shr966 = $192 >>> 24;
 $or967 = $shr966 | $shl965;
 $shl968 = $192 << 8;
 $shr969 = $191 >>> 24;
 $or970 = $shl968 | $shr969;
 $xor971 = $xor949 ^ $or967;
 $xor972 = $xor955 ^ $or970;
 $arrayidx973 = ((($x)) + 46|0);
 $193 = HEAP8[$arrayidx973>>0]|0;
 $conv974 = $193&255;
 $mul975 = $conv974 << 1;
 $arrayidx976 = (39888 + ($mul975<<2)|0);
 $194 = HEAP32[$arrayidx976>>2]|0;
 $add980 = $mul975 | 1;
 $arrayidx981 = (39888 + ($add980<<2)|0);
 $195 = HEAP32[$arrayidx981>>2]|0;
 $shl982 = $194 << 16;
 $shr983 = $195 >>> 16;
 $or984 = $shr983 | $shl982;
 $shl985 = $195 << 16;
 $shr986 = $194 >>> 16;
 $or987 = $shl985 | $shr986;
 $xor988 = $xor971 ^ $or984;
 $xor989 = $xor972 ^ $or987;
 $arrayidx990 = ((($x)) + 55|0);
 $196 = HEAP8[$arrayidx990>>0]|0;
 $conv991 = $196&255;
 $mul992 = $conv991 << 1;
 $arrayidx993 = (39888 + ($mul992<<2)|0);
 $197 = HEAP32[$arrayidx993>>2]|0;
 $add997 = $mul992 | 1;
 $arrayidx998 = (39888 + ($add997<<2)|0);
 $198 = HEAP32[$arrayidx998>>2]|0;
 $shl999 = $197 << 24;
 $shr1000 = $198 >>> 8;
 $or1001 = $shr1000 | $shl999;
 $shl1002 = $198 << 24;
 $shr1003 = $197 >>> 8;
 $or1004 = $shl1002 | $shr1003;
 $xor1005 = $xor988 ^ $or1001;
 $xor1006 = $xor989 ^ $or1004;
 $arrayidx1007 = ((($y)) + 56|0);
 HEAP32[$arrayidx1007>>2] = $xor1006;
 $arrayidx1008 = ((($y)) + 60|0);
 HEAP32[$arrayidx1008>>2] = $xor1005;
 return;
}
function _RND512Q($x,$y,$r) {
 $x = $x|0;
 $y = $y|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add1003 = 0, $add1020 = 0, $add108 = 0, $add118 = 0, $add135 = 0, $add152 = 0, $add171 = 0, $add180 = 0, $add197 = 0, $add214 = 0, $add232 = 0, $add242 = 0;
 var $add259 = 0, $add276 = 0, $add295 = 0, $add304 = 0, $add321 = 0, $add338 = 0, $add356 = 0, $add366 = 0, $add383 = 0, $add400 = 0, $add419 = 0, $add428 = 0, $add445 = 0, $add462 = 0, $add480 = 0, $add490 = 0, $add507 = 0, $add524 = 0, $add543 = 0, $add552 = 0;
 var $add569 = 0, $add586 = 0, $add59 = 0, $add604 = 0, $add614 = 0, $add631 = 0, $add648 = 0, $add667 = 0, $add676 = 0, $add693 = 0, $add710 = 0, $add728 = 0, $add73 = 0, $add738 = 0, $add755 = 0, $add772 = 0, $add791 = 0, $add800 = 0, $add817 = 0, $add834 = 0;
 var $add852 = 0, $add862 = 0, $add879 = 0, $add896 = 0, $add90 = 0, $add915 = 0, $add924 = 0, $add941 = 0, $add958 = 0, $add976 = 0, $add986 = 0, $arrayidx10 = 0, $arrayidx1004 = 0, $arrayidx1013 = 0, $arrayidx1016 = 0, $arrayidx1021 = 0, $arrayidx103 = 0, $arrayidx1030 = 0, $arrayidx1031 = 0, $arrayidx109 = 0;
 var $arrayidx111 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx128 = 0, $arrayidx131 = 0, $arrayidx136 = 0, $arrayidx14 = 0, $arrayidx145 = 0, $arrayidx148 = 0, $arrayidx153 = 0, $arrayidx16 = 0, $arrayidx163 = 0, $arrayidx167 = 0, $arrayidx172 = 0, $arrayidx173 = 0, $arrayidx176 = 0, $arrayidx181 = 0, $arrayidx190 = 0, $arrayidx193 = 0, $arrayidx198 = 0;
 var $arrayidx2 = 0, $arrayidx20 = 0, $arrayidx207 = 0, $arrayidx210 = 0, $arrayidx215 = 0, $arrayidx22 = 0, $arrayidx227 = 0, $arrayidx233 = 0, $arrayidx235 = 0, $arrayidx238 = 0, $arrayidx243 = 0, $arrayidx252 = 0, $arrayidx255 = 0, $arrayidx26 = 0, $arrayidx260 = 0, $arrayidx269 = 0, $arrayidx272 = 0, $arrayidx277 = 0, $arrayidx28 = 0, $arrayidx286 = 0;
 var $arrayidx287 = 0, $arrayidx291 = 0, $arrayidx296 = 0, $arrayidx297 = 0, $arrayidx300 = 0, $arrayidx305 = 0, $arrayidx314 = 0, $arrayidx317 = 0, $arrayidx32 = 0, $arrayidx322 = 0, $arrayidx331 = 0, $arrayidx334 = 0, $arrayidx339 = 0, $arrayidx34 = 0, $arrayidx351 = 0, $arrayidx357 = 0, $arrayidx359 = 0, $arrayidx362 = 0, $arrayidx367 = 0, $arrayidx376 = 0;
 var $arrayidx379 = 0, $arrayidx38 = 0, $arrayidx384 = 0, $arrayidx393 = 0, $arrayidx396 = 0, $arrayidx4 = 0, $arrayidx40 = 0, $arrayidx401 = 0, $arrayidx410 = 0, $arrayidx411 = 0, $arrayidx415 = 0, $arrayidx420 = 0, $arrayidx421 = 0, $arrayidx424 = 0, $arrayidx429 = 0, $arrayidx438 = 0, $arrayidx44 = 0, $arrayidx441 = 0, $arrayidx446 = 0, $arrayidx455 = 0;
 var $arrayidx458 = 0, $arrayidx463 = 0, $arrayidx47 = 0, $arrayidx475 = 0, $arrayidx481 = 0, $arrayidx483 = 0, $arrayidx486 = 0, $arrayidx491 = 0, $arrayidx500 = 0, $arrayidx503 = 0, $arrayidx508 = 0, $arrayidx51 = 0, $arrayidx517 = 0, $arrayidx520 = 0, $arrayidx525 = 0, $arrayidx534 = 0, $arrayidx535 = 0, $arrayidx539 = 0, $arrayidx544 = 0, $arrayidx545 = 0;
 var $arrayidx548 = 0, $arrayidx55 = 0, $arrayidx553 = 0, $arrayidx562 = 0, $arrayidx565 = 0, $arrayidx570 = 0, $arrayidx579 = 0, $arrayidx582 = 0, $arrayidx587 = 0, $arrayidx599 = 0, $arrayidx60 = 0, $arrayidx605 = 0, $arrayidx607 = 0, $arrayidx610 = 0, $arrayidx615 = 0, $arrayidx624 = 0, $arrayidx627 = 0, $arrayidx632 = 0, $arrayidx641 = 0, $arrayidx644 = 0;
 var $arrayidx649 = 0, $arrayidx658 = 0, $arrayidx659 = 0, $arrayidx663 = 0, $arrayidx668 = 0, $arrayidx669 = 0, $arrayidx672 = 0, $arrayidx677 = 0, $arrayidx686 = 0, $arrayidx689 = 0, $arrayidx69 = 0, $arrayidx694 = 0, $arrayidx703 = 0, $arrayidx706 = 0, $arrayidx711 = 0, $arrayidx723 = 0, $arrayidx729 = 0, $arrayidx731 = 0, $arrayidx734 = 0, $arrayidx739 = 0;
 var $arrayidx74 = 0, $arrayidx748 = 0, $arrayidx751 = 0, $arrayidx756 = 0, $arrayidx765 = 0, $arrayidx768 = 0, $arrayidx773 = 0, $arrayidx782 = 0, $arrayidx783 = 0, $arrayidx787 = 0, $arrayidx792 = 0, $arrayidx793 = 0, $arrayidx796 = 0, $arrayidx8 = 0, $arrayidx801 = 0, $arrayidx810 = 0, $arrayidx813 = 0, $arrayidx818 = 0, $arrayidx827 = 0, $arrayidx830 = 0;
 var $arrayidx835 = 0, $arrayidx847 = 0, $arrayidx853 = 0, $arrayidx855 = 0, $arrayidx858 = 0, $arrayidx86 = 0, $arrayidx863 = 0, $arrayidx872 = 0, $arrayidx875 = 0, $arrayidx880 = 0, $arrayidx889 = 0, $arrayidx892 = 0, $arrayidx897 = 0, $arrayidx906 = 0, $arrayidx907 = 0, $arrayidx91 = 0, $arrayidx911 = 0, $arrayidx916 = 0, $arrayidx917 = 0, $arrayidx920 = 0;
 var $arrayidx925 = 0, $arrayidx934 = 0, $arrayidx937 = 0, $arrayidx942 = 0, $arrayidx951 = 0, $arrayidx954 = 0, $arrayidx959 = 0, $arrayidx971 = 0, $arrayidx977 = 0, $arrayidx979 = 0, $arrayidx982 = 0, $arrayidx987 = 0, $arrayidx996 = 0, $arrayidx999 = 0, $conv = 0, $conv101 = 0, $conv1014 = 0, $conv112 = 0, $conv129 = 0, $conv146 = 0;
 var $conv165 = 0, $conv174 = 0, $conv191 = 0, $conv208 = 0, $conv225 = 0, $conv236 = 0, $conv253 = 0, $conv270 = 0, $conv289 = 0, $conv298 = 0, $conv315 = 0, $conv332 = 0, $conv349 = 0, $conv360 = 0, $conv377 = 0, $conv394 = 0, $conv413 = 0, $conv422 = 0, $conv439 = 0, $conv456 = 0;
 var $conv473 = 0, $conv484 = 0, $conv501 = 0, $conv518 = 0, $conv537 = 0, $conv546 = 0, $conv563 = 0, $conv580 = 0, $conv597 = 0, $conv608 = 0, $conv625 = 0, $conv642 = 0, $conv661 = 0, $conv670 = 0, $conv687 = 0, $conv704 = 0, $conv721 = 0, $conv732 = 0, $conv749 = 0, $conv766 = 0;
 var $conv785 = 0, $conv794 = 0, $conv811 = 0, $conv828 = 0, $conv845 = 0, $conv856 = 0, $conv873 = 0, $conv890 = 0, $conv909 = 0, $conv918 = 0, $conv935 = 0, $conv952 = 0, $conv969 = 0, $conv980 = 0, $conv997 = 0, $mul = 0, $mul1015 = 0, $mul102 = 0, $mul113 = 0, $mul130 = 0;
 var $mul147 = 0, $mul166 = 0, $mul175 = 0, $mul192 = 0, $mul209 = 0, $mul226 = 0, $mul237 = 0, $mul254 = 0, $mul271 = 0, $mul290 = 0, $mul299 = 0, $mul316 = 0, $mul333 = 0, $mul350 = 0, $mul361 = 0, $mul378 = 0, $mul395 = 0, $mul414 = 0, $mul423 = 0, $mul440 = 0;
 var $mul457 = 0, $mul474 = 0, $mul485 = 0, $mul502 = 0, $mul519 = 0, $mul538 = 0, $mul54 = 0, $mul547 = 0, $mul564 = 0, $mul581 = 0, $mul598 = 0, $mul609 = 0, $mul626 = 0, $mul643 = 0, $mul662 = 0, $mul671 = 0, $mul68 = 0, $mul688 = 0, $mul705 = 0, $mul722 = 0;
 var $mul733 = 0, $mul750 = 0, $mul767 = 0, $mul786 = 0, $mul795 = 0, $mul812 = 0, $mul829 = 0, $mul846 = 0, $mul85 = 0, $mul857 = 0, $mul874 = 0, $mul891 = 0, $mul910 = 0, $mul919 = 0, $mul936 = 0, $mul953 = 0, $mul970 = 0, $mul981 = 0, $mul998 = 0, $neg = 0;
 var $neg11 = 0, $neg17 = 0, $neg23 = 0, $neg29 = 0, $neg35 = 0, $neg41 = 0, $neg5 = 0, $or = 0, $or1007 = 0, $or1010 = 0, $or1024 = 0, $or1027 = 0, $or122 = 0, $or125 = 0, $or139 = 0, $or142 = 0, $or156 = 0, $or159 = 0, $or184 = 0, $or187 = 0;
 var $or201 = 0, $or204 = 0, $or218 = 0, $or221 = 0, $or246 = 0, $or249 = 0, $or263 = 0, $or266 = 0, $or280 = 0, $or283 = 0, $or308 = 0, $or311 = 0, $or325 = 0, $or328 = 0, $or342 = 0, $or345 = 0, $or370 = 0, $or373 = 0, $or387 = 0, $or390 = 0;
 var $or404 = 0, $or407 = 0, $or432 = 0, $or435 = 0, $or449 = 0, $or452 = 0, $or466 = 0, $or469 = 0, $or494 = 0, $or497 = 0, $or511 = 0, $or514 = 0, $or528 = 0, $or531 = 0, $or556 = 0, $or559 = 0, $or573 = 0, $or576 = 0, $or590 = 0, $or593 = 0;
 var $or618 = 0, $or621 = 0, $or63 = 0, $or635 = 0, $or638 = 0, $or652 = 0, $or655 = 0, $or680 = 0, $or683 = 0, $or697 = 0, $or700 = 0, $or714 = 0, $or717 = 0, $or742 = 0, $or745 = 0, $or759 = 0, $or762 = 0, $or77 = 0, $or776 = 0, $or779 = 0;
 var $or80 = 0, $or804 = 0, $or807 = 0, $or821 = 0, $or824 = 0, $or838 = 0, $or841 = 0, $or866 = 0, $or869 = 0, $or883 = 0, $or886 = 0, $or900 = 0, $or903 = 0, $or928 = 0, $or931 = 0, $or94 = 0, $or945 = 0, $or948 = 0, $or962 = 0, $or965 = 0;
 var $or97 = 0, $or990 = 0, $or993 = 0, $shl = 0, $shl1005 = 0, $shl1008 = 0, $shl1022 = 0, $shl1025 = 0, $shl120 = 0, $shl123 = 0, $shl137 = 0, $shl140 = 0, $shl154 = 0, $shl157 = 0, $shl182 = 0, $shl185 = 0, $shl199 = 0, $shl202 = 0, $shl216 = 0, $shl219 = 0;
 var $shl244 = 0, $shl247 = 0, $shl261 = 0, $shl264 = 0, $shl278 = 0, $shl281 = 0, $shl306 = 0, $shl309 = 0, $shl323 = 0, $shl326 = 0, $shl340 = 0, $shl343 = 0, $shl368 = 0, $shl371 = 0, $shl385 = 0, $shl388 = 0, $shl402 = 0, $shl405 = 0, $shl430 = 0, $shl433 = 0;
 var $shl447 = 0, $shl450 = 0, $shl464 = 0, $shl467 = 0, $shl492 = 0, $shl495 = 0, $shl509 = 0, $shl512 = 0, $shl526 = 0, $shl529 = 0, $shl554 = 0, $shl557 = 0, $shl571 = 0, $shl574 = 0, $shl588 = 0, $shl591 = 0, $shl61 = 0, $shl616 = 0, $shl619 = 0, $shl633 = 0;
 var $shl636 = 0, $shl650 = 0, $shl653 = 0, $shl678 = 0, $shl681 = 0, $shl695 = 0, $shl698 = 0, $shl712 = 0, $shl715 = 0, $shl740 = 0, $shl743 = 0, $shl75 = 0, $shl757 = 0, $shl760 = 0, $shl774 = 0, $shl777 = 0, $shl78 = 0, $shl802 = 0, $shl805 = 0, $shl819 = 0;
 var $shl822 = 0, $shl836 = 0, $shl839 = 0, $shl864 = 0, $shl867 = 0, $shl881 = 0, $shl884 = 0, $shl898 = 0, $shl901 = 0, $shl92 = 0, $shl926 = 0, $shl929 = 0, $shl943 = 0, $shl946 = 0, $shl95 = 0, $shl960 = 0, $shl963 = 0, $shl988 = 0, $shl991 = 0, $shr = 0;
 var $shr1006 = 0, $shr1009 = 0, $shr1023 = 0, $shr1026 = 0, $shr121 = 0, $shr124 = 0, $shr138 = 0, $shr141 = 0, $shr155 = 0, $shr158 = 0, $shr183 = 0, $shr186 = 0, $shr200 = 0, $shr203 = 0, $shr217 = 0, $shr220 = 0, $shr245 = 0, $shr248 = 0, $shr262 = 0, $shr265 = 0;
 var $shr279 = 0, $shr282 = 0, $shr307 = 0, $shr310 = 0, $shr324 = 0, $shr327 = 0, $shr341 = 0, $shr344 = 0, $shr369 = 0, $shr372 = 0, $shr386 = 0, $shr389 = 0, $shr403 = 0, $shr406 = 0, $shr431 = 0, $shr434 = 0, $shr448 = 0, $shr451 = 0, $shr465 = 0, $shr468 = 0;
 var $shr493 = 0, $shr496 = 0, $shr510 = 0, $shr513 = 0, $shr527 = 0, $shr530 = 0, $shr555 = 0, $shr558 = 0, $shr572 = 0, $shr575 = 0, $shr589 = 0, $shr592 = 0, $shr617 = 0, $shr62 = 0, $shr620 = 0, $shr634 = 0, $shr637 = 0, $shr651 = 0, $shr654 = 0, $shr679 = 0;
 var $shr682 = 0, $shr696 = 0, $shr699 = 0, $shr713 = 0, $shr716 = 0, $shr741 = 0, $shr744 = 0, $shr758 = 0, $shr76 = 0, $shr761 = 0, $shr775 = 0, $shr778 = 0, $shr79 = 0, $shr803 = 0, $shr806 = 0, $shr820 = 0, $shr823 = 0, $shr837 = 0, $shr840 = 0, $shr865 = 0;
 var $shr868 = 0, $shr882 = 0, $shr885 = 0, $shr899 = 0, $shr902 = 0, $shr927 = 0, $shr93 = 0, $shr930 = 0, $shr944 = 0, $shr947 = 0, $shr96 = 0, $shr961 = 0, $shr964 = 0, $shr989 = 0, $shr992 = 0, $xor = 0, $xor1011 = 0, $xor1012 = 0, $xor1028 = 0, $xor1029 = 0;
 var $xor104 = 0, $xor110 = 0, $xor126 = 0, $xor127 = 0, $xor13 = 0, $xor143 = 0, $xor144 = 0, $xor15 = 0, $xor160 = 0, $xor161 = 0, $xor188 = 0, $xor189 = 0, $xor19 = 0, $xor205 = 0, $xor206 = 0, $xor21 = 0, $xor222 = 0, $xor223 = 0, $xor228 = 0, $xor234 = 0;
 var $xor25 = 0, $xor250 = 0, $xor251 = 0, $xor267 = 0, $xor268 = 0, $xor27 = 0, $xor284 = 0, $xor285 = 0, $xor3 = 0, $xor31 = 0, $xor312 = 0, $xor313 = 0, $xor329 = 0, $xor33 = 0, $xor330 = 0, $xor346 = 0, $xor347 = 0, $xor352 = 0, $xor358 = 0, $xor37 = 0;
 var $xor374 = 0, $xor375 = 0, $xor39 = 0, $xor391 = 0, $xor392 = 0, $xor408 = 0, $xor409 = 0, $xor43 = 0, $xor436 = 0, $xor437 = 0, $xor45 = 0, $xor453 = 0, $xor454 = 0, $xor470 = 0, $xor471 = 0, $xor476 = 0, $xor482 = 0, $xor498 = 0, $xor499 = 0, $xor515 = 0;
 var $xor516 = 0, $xor532 = 0, $xor533 = 0, $xor560 = 0, $xor561 = 0, $xor577 = 0, $xor578 = 0, $xor594 = 0, $xor595 = 0, $xor600 = 0, $xor606 = 0, $xor622 = 0, $xor623 = 0, $xor639 = 0, $xor64 = 0, $xor640 = 0, $xor65 = 0, $xor656 = 0, $xor657 = 0, $xor684 = 0;
 var $xor685 = 0, $xor7 = 0, $xor701 = 0, $xor702 = 0, $xor718 = 0, $xor719 = 0, $xor724 = 0, $xor730 = 0, $xor746 = 0, $xor747 = 0, $xor763 = 0, $xor764 = 0, $xor780 = 0, $xor781 = 0, $xor808 = 0, $xor809 = 0, $xor81 = 0, $xor82 = 0, $xor825 = 0, $xor826 = 0;
 var $xor842 = 0, $xor843 = 0, $xor848 = 0, $xor854 = 0, $xor870 = 0, $xor871 = 0, $xor887 = 0, $xor888 = 0, $xor9 = 0, $xor904 = 0, $xor905 = 0, $xor932 = 0, $xor933 = 0, $xor949 = 0, $xor950 = 0, $xor966 = 0, $xor967 = 0, $xor972 = 0, $xor978 = 0, $xor98 = 0;
 var $xor99 = 0, $xor994 = 0, $xor995 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$x>>2]|0;
 $neg = $0 ^ -1;
 HEAP32[$x>>2] = $neg;
 $xor = $r ^ -1;
 $arrayidx2 = ((($x)) + 4|0);
 $1 = HEAP32[$arrayidx2>>2]|0;
 $xor3 = $1 ^ $xor;
 HEAP32[$arrayidx2>>2] = $xor3;
 $arrayidx4 = ((($x)) + 8|0);
 $2 = HEAP32[$arrayidx4>>2]|0;
 $neg5 = $2 ^ -1;
 HEAP32[$arrayidx4>>2] = $neg5;
 $xor7 = $r ^ -268435457;
 $arrayidx8 = ((($x)) + 12|0);
 $3 = HEAP32[$arrayidx8>>2]|0;
 $xor9 = $xor7 ^ $3;
 HEAP32[$arrayidx8>>2] = $xor9;
 $arrayidx10 = ((($x)) + 16|0);
 $4 = HEAP32[$arrayidx10>>2]|0;
 $neg11 = $4 ^ -1;
 HEAP32[$arrayidx10>>2] = $neg11;
 $xor13 = $r ^ -536870913;
 $arrayidx14 = ((($x)) + 20|0);
 $5 = HEAP32[$arrayidx14>>2]|0;
 $xor15 = $xor13 ^ $5;
 HEAP32[$arrayidx14>>2] = $xor15;
 $arrayidx16 = ((($x)) + 24|0);
 $6 = HEAP32[$arrayidx16>>2]|0;
 $neg17 = $6 ^ -1;
 HEAP32[$arrayidx16>>2] = $neg17;
 $xor19 = $r ^ -805306369;
 $arrayidx20 = ((($x)) + 28|0);
 $7 = HEAP32[$arrayidx20>>2]|0;
 $xor21 = $xor19 ^ $7;
 HEAP32[$arrayidx20>>2] = $xor21;
 $arrayidx22 = ((($x)) + 32|0);
 $8 = HEAP32[$arrayidx22>>2]|0;
 $neg23 = $8 ^ -1;
 HEAP32[$arrayidx22>>2] = $neg23;
 $xor25 = $r ^ -1073741825;
 $arrayidx26 = ((($x)) + 36|0);
 $9 = HEAP32[$arrayidx26>>2]|0;
 $xor27 = $xor25 ^ $9;
 HEAP32[$arrayidx26>>2] = $xor27;
 $arrayidx28 = ((($x)) + 40|0);
 $10 = HEAP32[$arrayidx28>>2]|0;
 $neg29 = $10 ^ -1;
 HEAP32[$arrayidx28>>2] = $neg29;
 $xor31 = $r ^ -1342177281;
 $arrayidx32 = ((($x)) + 44|0);
 $11 = HEAP32[$arrayidx32>>2]|0;
 $xor33 = $xor31 ^ $11;
 HEAP32[$arrayidx32>>2] = $xor33;
 $arrayidx34 = ((($x)) + 48|0);
 $12 = HEAP32[$arrayidx34>>2]|0;
 $neg35 = $12 ^ -1;
 HEAP32[$arrayidx34>>2] = $neg35;
 $xor37 = $r ^ -1610612737;
 $arrayidx38 = ((($x)) + 52|0);
 $13 = HEAP32[$arrayidx38>>2]|0;
 $xor39 = $xor37 ^ $13;
 HEAP32[$arrayidx38>>2] = $xor39;
 $arrayidx40 = ((($x)) + 56|0);
 $14 = HEAP32[$arrayidx40>>2]|0;
 $neg41 = $14 ^ -1;
 HEAP32[$arrayidx40>>2] = $neg41;
 $xor43 = $r ^ -1879048193;
 $arrayidx44 = ((($x)) + 60|0);
 $15 = HEAP32[$arrayidx44>>2]|0;
 $xor45 = $xor43 ^ $15;
 HEAP32[$arrayidx44>>2] = $xor45;
 $conv = $neg5 << 1;
 $mul = $conv & 510;
 $arrayidx47 = (39888 + ($mul<<2)|0);
 $16 = HEAP32[$arrayidx47>>2]|0;
 $add = $mul | 1;
 $arrayidx51 = (39888 + ($add<<2)|0);
 $17 = HEAP32[$arrayidx51>>2]|0;
 $18 = $neg17 >>> 7;
 $mul54 = $18 & 510;
 $arrayidx55 = (39888 + ($mul54<<2)|0);
 $19 = HEAP32[$arrayidx55>>2]|0;
 $add59 = $mul54 | 1;
 $arrayidx60 = (39888 + ($add59<<2)|0);
 $20 = HEAP32[$arrayidx60>>2]|0;
 $shl = $19 << 8;
 $shr = $20 >>> 24;
 $or = $shr | $shl;
 $shl61 = $20 << 8;
 $shr62 = $19 >>> 24;
 $or63 = $shl61 | $shr62;
 $xor64 = $or ^ $16;
 $xor65 = $or63 ^ $17;
 $21 = $neg29 >>> 15;
 $mul68 = $21 & 510;
 $arrayidx69 = (39888 + ($mul68<<2)|0);
 $22 = HEAP32[$arrayidx69>>2]|0;
 $add73 = $mul68 | 1;
 $arrayidx74 = (39888 + ($add73<<2)|0);
 $23 = HEAP32[$arrayidx74>>2]|0;
 $shl75 = $22 << 16;
 $shr76 = $23 >>> 16;
 $or77 = $shr76 | $shl75;
 $shl78 = $23 << 16;
 $shr79 = $22 >>> 16;
 $or80 = $shl78 | $shr79;
 $xor81 = $xor64 ^ $or77;
 $xor82 = $xor65 ^ $or80;
 $24 = $neg41 >>> 24;
 $mul85 = $24 << 1;
 $arrayidx86 = (39888 + ($mul85<<2)|0);
 $25 = HEAP32[$arrayidx86>>2]|0;
 $add90 = $mul85 | 1;
 $arrayidx91 = (39888 + ($add90<<2)|0);
 $26 = HEAP32[$arrayidx91>>2]|0;
 $shl92 = $25 << 24;
 $shr93 = $26 >>> 8;
 $or94 = $shr93 | $shl92;
 $shl95 = $26 << 24;
 $shr96 = $25 >>> 8;
 $or97 = $shl95 | $shr96;
 $xor98 = $xor81 ^ $or94;
 $xor99 = $xor82 ^ $or97;
 $27 = HEAP8[$arrayidx2>>0]|0;
 $conv101 = $27&255;
 $mul102 = $conv101 << 1;
 $arrayidx103 = (39888 + ($mul102<<2)|0);
 $28 = HEAP32[$arrayidx103>>2]|0;
 $xor104 = $xor99 ^ $28;
 $add108 = $mul102 | 1;
 $arrayidx109 = (39888 + ($add108<<2)|0);
 $29 = HEAP32[$arrayidx109>>2]|0;
 $xor110 = $xor98 ^ $29;
 $arrayidx111 = ((($x)) + 21|0);
 $30 = HEAP8[$arrayidx111>>0]|0;
 $conv112 = $30&255;
 $mul113 = $conv112 << 1;
 $arrayidx114 = (39888 + ($mul113<<2)|0);
 $31 = HEAP32[$arrayidx114>>2]|0;
 $add118 = $mul113 | 1;
 $arrayidx119 = (39888 + ($add118<<2)|0);
 $32 = HEAP32[$arrayidx119>>2]|0;
 $shl120 = $31 << 8;
 $shr121 = $32 >>> 24;
 $or122 = $shr121 | $shl120;
 $shl123 = $32 << 8;
 $shr124 = $31 >>> 24;
 $or125 = $shl123 | $shr124;
 $xor126 = $xor104 ^ $or122;
 $xor127 = $xor110 ^ $or125;
 $arrayidx128 = ((($x)) + 38|0);
 $33 = HEAP8[$arrayidx128>>0]|0;
 $conv129 = $33&255;
 $mul130 = $conv129 << 1;
 $arrayidx131 = (39888 + ($mul130<<2)|0);
 $34 = HEAP32[$arrayidx131>>2]|0;
 $add135 = $mul130 | 1;
 $arrayidx136 = (39888 + ($add135<<2)|0);
 $35 = HEAP32[$arrayidx136>>2]|0;
 $shl137 = $34 << 16;
 $shr138 = $35 >>> 16;
 $or139 = $shr138 | $shl137;
 $shl140 = $35 << 16;
 $shr141 = $34 >>> 16;
 $or142 = $shl140 | $shr141;
 $xor143 = $xor126 ^ $or139;
 $xor144 = $xor127 ^ $or142;
 $arrayidx145 = ((($x)) + 55|0);
 $36 = HEAP8[$arrayidx145>>0]|0;
 $conv146 = $36&255;
 $mul147 = $conv146 << 1;
 $arrayidx148 = (39888 + ($mul147<<2)|0);
 $37 = HEAP32[$arrayidx148>>2]|0;
 $add152 = $mul147 | 1;
 $arrayidx153 = (39888 + ($add152<<2)|0);
 $38 = HEAP32[$arrayidx153>>2]|0;
 $shl154 = $37 << 24;
 $shr155 = $38 >>> 8;
 $or156 = $shr155 | $shl154;
 $shl157 = $38 << 24;
 $shr158 = $37 >>> 8;
 $or159 = $shl157 | $shr158;
 $xor160 = $xor143 ^ $or156;
 $xor161 = $xor144 ^ $or159;
 HEAP32[$y>>2] = $xor161;
 $arrayidx163 = ((($y)) + 4|0);
 HEAP32[$arrayidx163>>2] = $xor160;
 $39 = HEAP8[$arrayidx10>>0]|0;
 $conv165 = $39&255;
 $mul166 = $conv165 << 1;
 $arrayidx167 = (39888 + ($mul166<<2)|0);
 $40 = HEAP32[$arrayidx167>>2]|0;
 $add171 = $mul166 | 1;
 $arrayidx172 = (39888 + ($add171<<2)|0);
 $41 = HEAP32[$arrayidx172>>2]|0;
 $arrayidx173 = ((($x)) + 33|0);
 $42 = HEAP8[$arrayidx173>>0]|0;
 $conv174 = $42&255;
 $mul175 = $conv174 << 1;
 $arrayidx176 = (39888 + ($mul175<<2)|0);
 $43 = HEAP32[$arrayidx176>>2]|0;
 $add180 = $mul175 | 1;
 $arrayidx181 = (39888 + ($add180<<2)|0);
 $44 = HEAP32[$arrayidx181>>2]|0;
 $shl182 = $43 << 8;
 $shr183 = $44 >>> 24;
 $or184 = $shr183 | $shl182;
 $shl185 = $44 << 8;
 $shr186 = $43 >>> 24;
 $or187 = $shl185 | $shr186;
 $xor188 = $or184 ^ $40;
 $xor189 = $or187 ^ $41;
 $arrayidx190 = ((($x)) + 50|0);
 $45 = HEAP8[$arrayidx190>>0]|0;
 $conv191 = $45&255;
 $mul192 = $conv191 << 1;
 $arrayidx193 = (39888 + ($mul192<<2)|0);
 $46 = HEAP32[$arrayidx193>>2]|0;
 $add197 = $mul192 | 1;
 $arrayidx198 = (39888 + ($add197<<2)|0);
 $47 = HEAP32[$arrayidx198>>2]|0;
 $shl199 = $46 << 16;
 $shr200 = $47 >>> 16;
 $or201 = $shr200 | $shl199;
 $shl202 = $47 << 16;
 $shr203 = $46 >>> 16;
 $or204 = $shl202 | $shr203;
 $xor205 = $xor188 ^ $or201;
 $xor206 = $xor189 ^ $or204;
 $arrayidx207 = ((($x)) + 3|0);
 $48 = HEAP8[$arrayidx207>>0]|0;
 $conv208 = $48&255;
 $mul209 = $conv208 << 1;
 $arrayidx210 = (39888 + ($mul209<<2)|0);
 $49 = HEAP32[$arrayidx210>>2]|0;
 $add214 = $mul209 | 1;
 $arrayidx215 = (39888 + ($add214<<2)|0);
 $50 = HEAP32[$arrayidx215>>2]|0;
 $shl216 = $49 << 24;
 $shr217 = $50 >>> 8;
 $or218 = $shr217 | $shl216;
 $shl219 = $50 << 24;
 $shr220 = $49 >>> 8;
 $or221 = $shl219 | $shr220;
 $xor222 = $xor205 ^ $or218;
 $xor223 = $xor206 ^ $or221;
 $51 = HEAP8[$arrayidx8>>0]|0;
 $conv225 = $51&255;
 $mul226 = $conv225 << 1;
 $arrayidx227 = (39888 + ($mul226<<2)|0);
 $52 = HEAP32[$arrayidx227>>2]|0;
 $xor228 = $xor223 ^ $52;
 $add232 = $mul226 | 1;
 $arrayidx233 = (39888 + ($add232<<2)|0);
 $53 = HEAP32[$arrayidx233>>2]|0;
 $xor234 = $xor222 ^ $53;
 $arrayidx235 = ((($x)) + 29|0);
 $54 = HEAP8[$arrayidx235>>0]|0;
 $conv236 = $54&255;
 $mul237 = $conv236 << 1;
 $arrayidx238 = (39888 + ($mul237<<2)|0);
 $55 = HEAP32[$arrayidx238>>2]|0;
 $add242 = $mul237 | 1;
 $arrayidx243 = (39888 + ($add242<<2)|0);
 $56 = HEAP32[$arrayidx243>>2]|0;
 $shl244 = $55 << 8;
 $shr245 = $56 >>> 24;
 $or246 = $shr245 | $shl244;
 $shl247 = $56 << 8;
 $shr248 = $55 >>> 24;
 $or249 = $shl247 | $shr248;
 $xor250 = $xor228 ^ $or246;
 $xor251 = $xor234 ^ $or249;
 $arrayidx252 = ((($x)) + 46|0);
 $57 = HEAP8[$arrayidx252>>0]|0;
 $conv253 = $57&255;
 $mul254 = $conv253 << 1;
 $arrayidx255 = (39888 + ($mul254<<2)|0);
 $58 = HEAP32[$arrayidx255>>2]|0;
 $add259 = $mul254 | 1;
 $arrayidx260 = (39888 + ($add259<<2)|0);
 $59 = HEAP32[$arrayidx260>>2]|0;
 $shl261 = $58 << 16;
 $shr262 = $59 >>> 16;
 $or263 = $shr262 | $shl261;
 $shl264 = $59 << 16;
 $shr265 = $58 >>> 16;
 $or266 = $shl264 | $shr265;
 $xor267 = $xor250 ^ $or263;
 $xor268 = $xor251 ^ $or266;
 $arrayidx269 = ((($x)) + 63|0);
 $60 = HEAP8[$arrayidx269>>0]|0;
 $conv270 = $60&255;
 $mul271 = $conv270 << 1;
 $arrayidx272 = (39888 + ($mul271<<2)|0);
 $61 = HEAP32[$arrayidx272>>2]|0;
 $add276 = $mul271 | 1;
 $arrayidx277 = (39888 + ($add276<<2)|0);
 $62 = HEAP32[$arrayidx277>>2]|0;
 $shl278 = $61 << 24;
 $shr279 = $62 >>> 8;
 $or280 = $shr279 | $shl278;
 $shl281 = $62 << 24;
 $shr282 = $61 >>> 8;
 $or283 = $shl281 | $shr282;
 $xor284 = $xor267 ^ $or280;
 $xor285 = $xor268 ^ $or283;
 $arrayidx286 = ((($y)) + 8|0);
 HEAP32[$arrayidx286>>2] = $xor285;
 $arrayidx287 = ((($y)) + 12|0);
 HEAP32[$arrayidx287>>2] = $xor284;
 $63 = HEAP8[$arrayidx16>>0]|0;
 $conv289 = $63&255;
 $mul290 = $conv289 << 1;
 $arrayidx291 = (39888 + ($mul290<<2)|0);
 $64 = HEAP32[$arrayidx291>>2]|0;
 $add295 = $mul290 | 1;
 $arrayidx296 = (39888 + ($add295<<2)|0);
 $65 = HEAP32[$arrayidx296>>2]|0;
 $arrayidx297 = ((($x)) + 41|0);
 $66 = HEAP8[$arrayidx297>>0]|0;
 $conv298 = $66&255;
 $mul299 = $conv298 << 1;
 $arrayidx300 = (39888 + ($mul299<<2)|0);
 $67 = HEAP32[$arrayidx300>>2]|0;
 $add304 = $mul299 | 1;
 $arrayidx305 = (39888 + ($add304<<2)|0);
 $68 = HEAP32[$arrayidx305>>2]|0;
 $shl306 = $67 << 8;
 $shr307 = $68 >>> 24;
 $or308 = $shr307 | $shl306;
 $shl309 = $68 << 8;
 $shr310 = $67 >>> 24;
 $or311 = $shl309 | $shr310;
 $xor312 = $or308 ^ $64;
 $xor313 = $or311 ^ $65;
 $arrayidx314 = ((($x)) + 58|0);
 $69 = HEAP8[$arrayidx314>>0]|0;
 $conv315 = $69&255;
 $mul316 = $conv315 << 1;
 $arrayidx317 = (39888 + ($mul316<<2)|0);
 $70 = HEAP32[$arrayidx317>>2]|0;
 $add321 = $mul316 | 1;
 $arrayidx322 = (39888 + ($add321<<2)|0);
 $71 = HEAP32[$arrayidx322>>2]|0;
 $shl323 = $70 << 16;
 $shr324 = $71 >>> 16;
 $or325 = $shr324 | $shl323;
 $shl326 = $71 << 16;
 $shr327 = $70 >>> 16;
 $or328 = $shl326 | $shr327;
 $xor329 = $xor312 ^ $or325;
 $xor330 = $xor313 ^ $or328;
 $arrayidx331 = ((($x)) + 11|0);
 $72 = HEAP8[$arrayidx331>>0]|0;
 $conv332 = $72&255;
 $mul333 = $conv332 << 1;
 $arrayidx334 = (39888 + ($mul333<<2)|0);
 $73 = HEAP32[$arrayidx334>>2]|0;
 $add338 = $mul333 | 1;
 $arrayidx339 = (39888 + ($add338<<2)|0);
 $74 = HEAP32[$arrayidx339>>2]|0;
 $shl340 = $73 << 24;
 $shr341 = $74 >>> 8;
 $or342 = $shr341 | $shl340;
 $shl343 = $74 << 24;
 $shr344 = $73 >>> 8;
 $or345 = $shl343 | $shr344;
 $xor346 = $xor329 ^ $or342;
 $xor347 = $xor330 ^ $or345;
 $75 = HEAP8[$arrayidx14>>0]|0;
 $conv349 = $75&255;
 $mul350 = $conv349 << 1;
 $arrayidx351 = (39888 + ($mul350<<2)|0);
 $76 = HEAP32[$arrayidx351>>2]|0;
 $xor352 = $xor347 ^ $76;
 $add356 = $mul350 | 1;
 $arrayidx357 = (39888 + ($add356<<2)|0);
 $77 = HEAP32[$arrayidx357>>2]|0;
 $xor358 = $xor346 ^ $77;
 $arrayidx359 = ((($x)) + 37|0);
 $78 = HEAP8[$arrayidx359>>0]|0;
 $conv360 = $78&255;
 $mul361 = $conv360 << 1;
 $arrayidx362 = (39888 + ($mul361<<2)|0);
 $79 = HEAP32[$arrayidx362>>2]|0;
 $add366 = $mul361 | 1;
 $arrayidx367 = (39888 + ($add366<<2)|0);
 $80 = HEAP32[$arrayidx367>>2]|0;
 $shl368 = $79 << 8;
 $shr369 = $80 >>> 24;
 $or370 = $shr369 | $shl368;
 $shl371 = $80 << 8;
 $shr372 = $79 >>> 24;
 $or373 = $shl371 | $shr372;
 $xor374 = $xor352 ^ $or370;
 $xor375 = $xor358 ^ $or373;
 $arrayidx376 = ((($x)) + 54|0);
 $81 = HEAP8[$arrayidx376>>0]|0;
 $conv377 = $81&255;
 $mul378 = $conv377 << 1;
 $arrayidx379 = (39888 + ($mul378<<2)|0);
 $82 = HEAP32[$arrayidx379>>2]|0;
 $add383 = $mul378 | 1;
 $arrayidx384 = (39888 + ($add383<<2)|0);
 $83 = HEAP32[$arrayidx384>>2]|0;
 $shl385 = $82 << 16;
 $shr386 = $83 >>> 16;
 $or387 = $shr386 | $shl385;
 $shl388 = $83 << 16;
 $shr389 = $82 >>> 16;
 $or390 = $shl388 | $shr389;
 $xor391 = $xor374 ^ $or387;
 $xor392 = $xor375 ^ $or390;
 $arrayidx393 = ((($x)) + 7|0);
 $84 = HEAP8[$arrayidx393>>0]|0;
 $conv394 = $84&255;
 $mul395 = $conv394 << 1;
 $arrayidx396 = (39888 + ($mul395<<2)|0);
 $85 = HEAP32[$arrayidx396>>2]|0;
 $add400 = $mul395 | 1;
 $arrayidx401 = (39888 + ($add400<<2)|0);
 $86 = HEAP32[$arrayidx401>>2]|0;
 $shl402 = $85 << 24;
 $shr403 = $86 >>> 8;
 $or404 = $shr403 | $shl402;
 $shl405 = $86 << 24;
 $shr406 = $85 >>> 8;
 $or407 = $shl405 | $shr406;
 $xor408 = $xor391 ^ $or404;
 $xor409 = $xor392 ^ $or407;
 $arrayidx410 = ((($y)) + 16|0);
 HEAP32[$arrayidx410>>2] = $xor409;
 $arrayidx411 = ((($y)) + 20|0);
 HEAP32[$arrayidx411>>2] = $xor408;
 $87 = HEAP8[$arrayidx22>>0]|0;
 $conv413 = $87&255;
 $mul414 = $conv413 << 1;
 $arrayidx415 = (39888 + ($mul414<<2)|0);
 $88 = HEAP32[$arrayidx415>>2]|0;
 $add419 = $mul414 | 1;
 $arrayidx420 = (39888 + ($add419<<2)|0);
 $89 = HEAP32[$arrayidx420>>2]|0;
 $arrayidx421 = ((($x)) + 49|0);
 $90 = HEAP8[$arrayidx421>>0]|0;
 $conv422 = $90&255;
 $mul423 = $conv422 << 1;
 $arrayidx424 = (39888 + ($mul423<<2)|0);
 $91 = HEAP32[$arrayidx424>>2]|0;
 $add428 = $mul423 | 1;
 $arrayidx429 = (39888 + ($add428<<2)|0);
 $92 = HEAP32[$arrayidx429>>2]|0;
 $shl430 = $91 << 8;
 $shr431 = $92 >>> 24;
 $or432 = $shr431 | $shl430;
 $shl433 = $92 << 8;
 $shr434 = $91 >>> 24;
 $or435 = $shl433 | $shr434;
 $xor436 = $or432 ^ $88;
 $xor437 = $or435 ^ $89;
 $arrayidx438 = ((($x)) + 2|0);
 $93 = HEAP8[$arrayidx438>>0]|0;
 $conv439 = $93&255;
 $mul440 = $conv439 << 1;
 $arrayidx441 = (39888 + ($mul440<<2)|0);
 $94 = HEAP32[$arrayidx441>>2]|0;
 $add445 = $mul440 | 1;
 $arrayidx446 = (39888 + ($add445<<2)|0);
 $95 = HEAP32[$arrayidx446>>2]|0;
 $shl447 = $94 << 16;
 $shr448 = $95 >>> 16;
 $or449 = $shr448 | $shl447;
 $shl450 = $95 << 16;
 $shr451 = $94 >>> 16;
 $or452 = $shl450 | $shr451;
 $xor453 = $xor436 ^ $or449;
 $xor454 = $xor437 ^ $or452;
 $arrayidx455 = ((($x)) + 19|0);
 $96 = HEAP8[$arrayidx455>>0]|0;
 $conv456 = $96&255;
 $mul457 = $conv456 << 1;
 $arrayidx458 = (39888 + ($mul457<<2)|0);
 $97 = HEAP32[$arrayidx458>>2]|0;
 $add462 = $mul457 | 1;
 $arrayidx463 = (39888 + ($add462<<2)|0);
 $98 = HEAP32[$arrayidx463>>2]|0;
 $shl464 = $97 << 24;
 $shr465 = $98 >>> 8;
 $or466 = $shr465 | $shl464;
 $shl467 = $98 << 24;
 $shr468 = $97 >>> 8;
 $or469 = $shl467 | $shr468;
 $xor470 = $xor453 ^ $or466;
 $xor471 = $xor454 ^ $or469;
 $99 = HEAP8[$arrayidx20>>0]|0;
 $conv473 = $99&255;
 $mul474 = $conv473 << 1;
 $arrayidx475 = (39888 + ($mul474<<2)|0);
 $100 = HEAP32[$arrayidx475>>2]|0;
 $xor476 = $xor471 ^ $100;
 $add480 = $mul474 | 1;
 $arrayidx481 = (39888 + ($add480<<2)|0);
 $101 = HEAP32[$arrayidx481>>2]|0;
 $xor482 = $xor470 ^ $101;
 $arrayidx483 = ((($x)) + 45|0);
 $102 = HEAP8[$arrayidx483>>0]|0;
 $conv484 = $102&255;
 $mul485 = $conv484 << 1;
 $arrayidx486 = (39888 + ($mul485<<2)|0);
 $103 = HEAP32[$arrayidx486>>2]|0;
 $add490 = $mul485 | 1;
 $arrayidx491 = (39888 + ($add490<<2)|0);
 $104 = HEAP32[$arrayidx491>>2]|0;
 $shl492 = $103 << 8;
 $shr493 = $104 >>> 24;
 $or494 = $shr493 | $shl492;
 $shl495 = $104 << 8;
 $shr496 = $103 >>> 24;
 $or497 = $shl495 | $shr496;
 $xor498 = $xor476 ^ $or494;
 $xor499 = $xor482 ^ $or497;
 $arrayidx500 = ((($x)) + 62|0);
 $105 = HEAP8[$arrayidx500>>0]|0;
 $conv501 = $105&255;
 $mul502 = $conv501 << 1;
 $arrayidx503 = (39888 + ($mul502<<2)|0);
 $106 = HEAP32[$arrayidx503>>2]|0;
 $add507 = $mul502 | 1;
 $arrayidx508 = (39888 + ($add507<<2)|0);
 $107 = HEAP32[$arrayidx508>>2]|0;
 $shl509 = $106 << 16;
 $shr510 = $107 >>> 16;
 $or511 = $shr510 | $shl509;
 $shl512 = $107 << 16;
 $shr513 = $106 >>> 16;
 $or514 = $shl512 | $shr513;
 $xor515 = $xor498 ^ $or511;
 $xor516 = $xor499 ^ $or514;
 $arrayidx517 = ((($x)) + 15|0);
 $108 = HEAP8[$arrayidx517>>0]|0;
 $conv518 = $108&255;
 $mul519 = $conv518 << 1;
 $arrayidx520 = (39888 + ($mul519<<2)|0);
 $109 = HEAP32[$arrayidx520>>2]|0;
 $add524 = $mul519 | 1;
 $arrayidx525 = (39888 + ($add524<<2)|0);
 $110 = HEAP32[$arrayidx525>>2]|0;
 $shl526 = $109 << 24;
 $shr527 = $110 >>> 8;
 $or528 = $shr527 | $shl526;
 $shl529 = $110 << 24;
 $shr530 = $109 >>> 8;
 $or531 = $shl529 | $shr530;
 $xor532 = $xor515 ^ $or528;
 $xor533 = $xor516 ^ $or531;
 $arrayidx534 = ((($y)) + 24|0);
 HEAP32[$arrayidx534>>2] = $xor533;
 $arrayidx535 = ((($y)) + 28|0);
 HEAP32[$arrayidx535>>2] = $xor532;
 $111 = HEAP8[$arrayidx28>>0]|0;
 $conv537 = $111&255;
 $mul538 = $conv537 << 1;
 $arrayidx539 = (39888 + ($mul538<<2)|0);
 $112 = HEAP32[$arrayidx539>>2]|0;
 $add543 = $mul538 | 1;
 $arrayidx544 = (39888 + ($add543<<2)|0);
 $113 = HEAP32[$arrayidx544>>2]|0;
 $arrayidx545 = ((($x)) + 57|0);
 $114 = HEAP8[$arrayidx545>>0]|0;
 $conv546 = $114&255;
 $mul547 = $conv546 << 1;
 $arrayidx548 = (39888 + ($mul547<<2)|0);
 $115 = HEAP32[$arrayidx548>>2]|0;
 $add552 = $mul547 | 1;
 $arrayidx553 = (39888 + ($add552<<2)|0);
 $116 = HEAP32[$arrayidx553>>2]|0;
 $shl554 = $115 << 8;
 $shr555 = $116 >>> 24;
 $or556 = $shr555 | $shl554;
 $shl557 = $116 << 8;
 $shr558 = $115 >>> 24;
 $or559 = $shl557 | $shr558;
 $xor560 = $or556 ^ $112;
 $xor561 = $or559 ^ $113;
 $arrayidx562 = ((($x)) + 10|0);
 $117 = HEAP8[$arrayidx562>>0]|0;
 $conv563 = $117&255;
 $mul564 = $conv563 << 1;
 $arrayidx565 = (39888 + ($mul564<<2)|0);
 $118 = HEAP32[$arrayidx565>>2]|0;
 $add569 = $mul564 | 1;
 $arrayidx570 = (39888 + ($add569<<2)|0);
 $119 = HEAP32[$arrayidx570>>2]|0;
 $shl571 = $118 << 16;
 $shr572 = $119 >>> 16;
 $or573 = $shr572 | $shl571;
 $shl574 = $119 << 16;
 $shr575 = $118 >>> 16;
 $or576 = $shl574 | $shr575;
 $xor577 = $xor560 ^ $or573;
 $xor578 = $xor561 ^ $or576;
 $arrayidx579 = ((($x)) + 27|0);
 $120 = HEAP8[$arrayidx579>>0]|0;
 $conv580 = $120&255;
 $mul581 = $conv580 << 1;
 $arrayidx582 = (39888 + ($mul581<<2)|0);
 $121 = HEAP32[$arrayidx582>>2]|0;
 $add586 = $mul581 | 1;
 $arrayidx587 = (39888 + ($add586<<2)|0);
 $122 = HEAP32[$arrayidx587>>2]|0;
 $shl588 = $121 << 24;
 $shr589 = $122 >>> 8;
 $or590 = $shr589 | $shl588;
 $shl591 = $122 << 24;
 $shr592 = $121 >>> 8;
 $or593 = $shl591 | $shr592;
 $xor594 = $xor577 ^ $or590;
 $xor595 = $xor578 ^ $or593;
 $123 = HEAP8[$arrayidx26>>0]|0;
 $conv597 = $123&255;
 $mul598 = $conv597 << 1;
 $arrayidx599 = (39888 + ($mul598<<2)|0);
 $124 = HEAP32[$arrayidx599>>2]|0;
 $xor600 = $xor595 ^ $124;
 $add604 = $mul598 | 1;
 $arrayidx605 = (39888 + ($add604<<2)|0);
 $125 = HEAP32[$arrayidx605>>2]|0;
 $xor606 = $xor594 ^ $125;
 $arrayidx607 = ((($x)) + 53|0);
 $126 = HEAP8[$arrayidx607>>0]|0;
 $conv608 = $126&255;
 $mul609 = $conv608 << 1;
 $arrayidx610 = (39888 + ($mul609<<2)|0);
 $127 = HEAP32[$arrayidx610>>2]|0;
 $add614 = $mul609 | 1;
 $arrayidx615 = (39888 + ($add614<<2)|0);
 $128 = HEAP32[$arrayidx615>>2]|0;
 $shl616 = $127 << 8;
 $shr617 = $128 >>> 24;
 $or618 = $shr617 | $shl616;
 $shl619 = $128 << 8;
 $shr620 = $127 >>> 24;
 $or621 = $shl619 | $shr620;
 $xor622 = $xor600 ^ $or618;
 $xor623 = $xor606 ^ $or621;
 $arrayidx624 = ((($x)) + 6|0);
 $129 = HEAP8[$arrayidx624>>0]|0;
 $conv625 = $129&255;
 $mul626 = $conv625 << 1;
 $arrayidx627 = (39888 + ($mul626<<2)|0);
 $130 = HEAP32[$arrayidx627>>2]|0;
 $add631 = $mul626 | 1;
 $arrayidx632 = (39888 + ($add631<<2)|0);
 $131 = HEAP32[$arrayidx632>>2]|0;
 $shl633 = $130 << 16;
 $shr634 = $131 >>> 16;
 $or635 = $shr634 | $shl633;
 $shl636 = $131 << 16;
 $shr637 = $130 >>> 16;
 $or638 = $shl636 | $shr637;
 $xor639 = $xor622 ^ $or635;
 $xor640 = $xor623 ^ $or638;
 $arrayidx641 = ((($x)) + 23|0);
 $132 = HEAP8[$arrayidx641>>0]|0;
 $conv642 = $132&255;
 $mul643 = $conv642 << 1;
 $arrayidx644 = (39888 + ($mul643<<2)|0);
 $133 = HEAP32[$arrayidx644>>2]|0;
 $add648 = $mul643 | 1;
 $arrayidx649 = (39888 + ($add648<<2)|0);
 $134 = HEAP32[$arrayidx649>>2]|0;
 $shl650 = $133 << 24;
 $shr651 = $134 >>> 8;
 $or652 = $shr651 | $shl650;
 $shl653 = $134 << 24;
 $shr654 = $133 >>> 8;
 $or655 = $shl653 | $shr654;
 $xor656 = $xor639 ^ $or652;
 $xor657 = $xor640 ^ $or655;
 $arrayidx658 = ((($y)) + 32|0);
 HEAP32[$arrayidx658>>2] = $xor657;
 $arrayidx659 = ((($y)) + 36|0);
 HEAP32[$arrayidx659>>2] = $xor656;
 $135 = HEAP8[$arrayidx34>>0]|0;
 $conv661 = $135&255;
 $mul662 = $conv661 << 1;
 $arrayidx663 = (39888 + ($mul662<<2)|0);
 $136 = HEAP32[$arrayidx663>>2]|0;
 $add667 = $mul662 | 1;
 $arrayidx668 = (39888 + ($add667<<2)|0);
 $137 = HEAP32[$arrayidx668>>2]|0;
 $arrayidx669 = ((($x)) + 1|0);
 $138 = HEAP8[$arrayidx669>>0]|0;
 $conv670 = $138&255;
 $mul671 = $conv670 << 1;
 $arrayidx672 = (39888 + ($mul671<<2)|0);
 $139 = HEAP32[$arrayidx672>>2]|0;
 $add676 = $mul671 | 1;
 $arrayidx677 = (39888 + ($add676<<2)|0);
 $140 = HEAP32[$arrayidx677>>2]|0;
 $shl678 = $139 << 8;
 $shr679 = $140 >>> 24;
 $or680 = $shr679 | $shl678;
 $shl681 = $140 << 8;
 $shr682 = $139 >>> 24;
 $or683 = $shl681 | $shr682;
 $xor684 = $or680 ^ $136;
 $xor685 = $or683 ^ $137;
 $arrayidx686 = ((($x)) + 18|0);
 $141 = HEAP8[$arrayidx686>>0]|0;
 $conv687 = $141&255;
 $mul688 = $conv687 << 1;
 $arrayidx689 = (39888 + ($mul688<<2)|0);
 $142 = HEAP32[$arrayidx689>>2]|0;
 $add693 = $mul688 | 1;
 $arrayidx694 = (39888 + ($add693<<2)|0);
 $143 = HEAP32[$arrayidx694>>2]|0;
 $shl695 = $142 << 16;
 $shr696 = $143 >>> 16;
 $or697 = $shr696 | $shl695;
 $shl698 = $143 << 16;
 $shr699 = $142 >>> 16;
 $or700 = $shl698 | $shr699;
 $xor701 = $xor684 ^ $or697;
 $xor702 = $xor685 ^ $or700;
 $arrayidx703 = ((($x)) + 35|0);
 $144 = HEAP8[$arrayidx703>>0]|0;
 $conv704 = $144&255;
 $mul705 = $conv704 << 1;
 $arrayidx706 = (39888 + ($mul705<<2)|0);
 $145 = HEAP32[$arrayidx706>>2]|0;
 $add710 = $mul705 | 1;
 $arrayidx711 = (39888 + ($add710<<2)|0);
 $146 = HEAP32[$arrayidx711>>2]|0;
 $shl712 = $145 << 24;
 $shr713 = $146 >>> 8;
 $or714 = $shr713 | $shl712;
 $shl715 = $146 << 24;
 $shr716 = $145 >>> 8;
 $or717 = $shl715 | $shr716;
 $xor718 = $xor701 ^ $or714;
 $xor719 = $xor702 ^ $or717;
 $147 = HEAP8[$arrayidx32>>0]|0;
 $conv721 = $147&255;
 $mul722 = $conv721 << 1;
 $arrayidx723 = (39888 + ($mul722<<2)|0);
 $148 = HEAP32[$arrayidx723>>2]|0;
 $xor724 = $xor719 ^ $148;
 $add728 = $mul722 | 1;
 $arrayidx729 = (39888 + ($add728<<2)|0);
 $149 = HEAP32[$arrayidx729>>2]|0;
 $xor730 = $xor718 ^ $149;
 $arrayidx731 = ((($x)) + 61|0);
 $150 = HEAP8[$arrayidx731>>0]|0;
 $conv732 = $150&255;
 $mul733 = $conv732 << 1;
 $arrayidx734 = (39888 + ($mul733<<2)|0);
 $151 = HEAP32[$arrayidx734>>2]|0;
 $add738 = $mul733 | 1;
 $arrayidx739 = (39888 + ($add738<<2)|0);
 $152 = HEAP32[$arrayidx739>>2]|0;
 $shl740 = $151 << 8;
 $shr741 = $152 >>> 24;
 $or742 = $shr741 | $shl740;
 $shl743 = $152 << 8;
 $shr744 = $151 >>> 24;
 $or745 = $shl743 | $shr744;
 $xor746 = $xor724 ^ $or742;
 $xor747 = $xor730 ^ $or745;
 $arrayidx748 = ((($x)) + 14|0);
 $153 = HEAP8[$arrayidx748>>0]|0;
 $conv749 = $153&255;
 $mul750 = $conv749 << 1;
 $arrayidx751 = (39888 + ($mul750<<2)|0);
 $154 = HEAP32[$arrayidx751>>2]|0;
 $add755 = $mul750 | 1;
 $arrayidx756 = (39888 + ($add755<<2)|0);
 $155 = HEAP32[$arrayidx756>>2]|0;
 $shl757 = $154 << 16;
 $shr758 = $155 >>> 16;
 $or759 = $shr758 | $shl757;
 $shl760 = $155 << 16;
 $shr761 = $154 >>> 16;
 $or762 = $shl760 | $shr761;
 $xor763 = $xor746 ^ $or759;
 $xor764 = $xor747 ^ $or762;
 $arrayidx765 = ((($x)) + 31|0);
 $156 = HEAP8[$arrayidx765>>0]|0;
 $conv766 = $156&255;
 $mul767 = $conv766 << 1;
 $arrayidx768 = (39888 + ($mul767<<2)|0);
 $157 = HEAP32[$arrayidx768>>2]|0;
 $add772 = $mul767 | 1;
 $arrayidx773 = (39888 + ($add772<<2)|0);
 $158 = HEAP32[$arrayidx773>>2]|0;
 $shl774 = $157 << 24;
 $shr775 = $158 >>> 8;
 $or776 = $shr775 | $shl774;
 $shl777 = $158 << 24;
 $shr778 = $157 >>> 8;
 $or779 = $shl777 | $shr778;
 $xor780 = $xor763 ^ $or776;
 $xor781 = $xor764 ^ $or779;
 $arrayidx782 = ((($y)) + 40|0);
 HEAP32[$arrayidx782>>2] = $xor781;
 $arrayidx783 = ((($y)) + 44|0);
 HEAP32[$arrayidx783>>2] = $xor780;
 $159 = HEAP8[$arrayidx40>>0]|0;
 $conv785 = $159&255;
 $mul786 = $conv785 << 1;
 $arrayidx787 = (39888 + ($mul786<<2)|0);
 $160 = HEAP32[$arrayidx787>>2]|0;
 $add791 = $mul786 | 1;
 $arrayidx792 = (39888 + ($add791<<2)|0);
 $161 = HEAP32[$arrayidx792>>2]|0;
 $arrayidx793 = ((($x)) + 9|0);
 $162 = HEAP8[$arrayidx793>>0]|0;
 $conv794 = $162&255;
 $mul795 = $conv794 << 1;
 $arrayidx796 = (39888 + ($mul795<<2)|0);
 $163 = HEAP32[$arrayidx796>>2]|0;
 $add800 = $mul795 | 1;
 $arrayidx801 = (39888 + ($add800<<2)|0);
 $164 = HEAP32[$arrayidx801>>2]|0;
 $shl802 = $163 << 8;
 $shr803 = $164 >>> 24;
 $or804 = $shr803 | $shl802;
 $shl805 = $164 << 8;
 $shr806 = $163 >>> 24;
 $or807 = $shl805 | $shr806;
 $xor808 = $or804 ^ $160;
 $xor809 = $or807 ^ $161;
 $arrayidx810 = ((($x)) + 26|0);
 $165 = HEAP8[$arrayidx810>>0]|0;
 $conv811 = $165&255;
 $mul812 = $conv811 << 1;
 $arrayidx813 = (39888 + ($mul812<<2)|0);
 $166 = HEAP32[$arrayidx813>>2]|0;
 $add817 = $mul812 | 1;
 $arrayidx818 = (39888 + ($add817<<2)|0);
 $167 = HEAP32[$arrayidx818>>2]|0;
 $shl819 = $166 << 16;
 $shr820 = $167 >>> 16;
 $or821 = $shr820 | $shl819;
 $shl822 = $167 << 16;
 $shr823 = $166 >>> 16;
 $or824 = $shl822 | $shr823;
 $xor825 = $xor808 ^ $or821;
 $xor826 = $xor809 ^ $or824;
 $arrayidx827 = ((($x)) + 43|0);
 $168 = HEAP8[$arrayidx827>>0]|0;
 $conv828 = $168&255;
 $mul829 = $conv828 << 1;
 $arrayidx830 = (39888 + ($mul829<<2)|0);
 $169 = HEAP32[$arrayidx830>>2]|0;
 $add834 = $mul829 | 1;
 $arrayidx835 = (39888 + ($add834<<2)|0);
 $170 = HEAP32[$arrayidx835>>2]|0;
 $shl836 = $169 << 24;
 $shr837 = $170 >>> 8;
 $or838 = $shr837 | $shl836;
 $shl839 = $170 << 24;
 $shr840 = $169 >>> 8;
 $or841 = $shl839 | $shr840;
 $xor842 = $xor825 ^ $or838;
 $xor843 = $xor826 ^ $or841;
 $171 = HEAP8[$arrayidx38>>0]|0;
 $conv845 = $171&255;
 $mul846 = $conv845 << 1;
 $arrayidx847 = (39888 + ($mul846<<2)|0);
 $172 = HEAP32[$arrayidx847>>2]|0;
 $xor848 = $xor843 ^ $172;
 $add852 = $mul846 | 1;
 $arrayidx853 = (39888 + ($add852<<2)|0);
 $173 = HEAP32[$arrayidx853>>2]|0;
 $xor854 = $xor842 ^ $173;
 $arrayidx855 = ((($x)) + 5|0);
 $174 = HEAP8[$arrayidx855>>0]|0;
 $conv856 = $174&255;
 $mul857 = $conv856 << 1;
 $arrayidx858 = (39888 + ($mul857<<2)|0);
 $175 = HEAP32[$arrayidx858>>2]|0;
 $add862 = $mul857 | 1;
 $arrayidx863 = (39888 + ($add862<<2)|0);
 $176 = HEAP32[$arrayidx863>>2]|0;
 $shl864 = $175 << 8;
 $shr865 = $176 >>> 24;
 $or866 = $shr865 | $shl864;
 $shl867 = $176 << 8;
 $shr868 = $175 >>> 24;
 $or869 = $shl867 | $shr868;
 $xor870 = $xor848 ^ $or866;
 $xor871 = $xor854 ^ $or869;
 $arrayidx872 = ((($x)) + 22|0);
 $177 = HEAP8[$arrayidx872>>0]|0;
 $conv873 = $177&255;
 $mul874 = $conv873 << 1;
 $arrayidx875 = (39888 + ($mul874<<2)|0);
 $178 = HEAP32[$arrayidx875>>2]|0;
 $add879 = $mul874 | 1;
 $arrayidx880 = (39888 + ($add879<<2)|0);
 $179 = HEAP32[$arrayidx880>>2]|0;
 $shl881 = $178 << 16;
 $shr882 = $179 >>> 16;
 $or883 = $shr882 | $shl881;
 $shl884 = $179 << 16;
 $shr885 = $178 >>> 16;
 $or886 = $shl884 | $shr885;
 $xor887 = $xor870 ^ $or883;
 $xor888 = $xor871 ^ $or886;
 $arrayidx889 = ((($x)) + 39|0);
 $180 = HEAP8[$arrayidx889>>0]|0;
 $conv890 = $180&255;
 $mul891 = $conv890 << 1;
 $arrayidx892 = (39888 + ($mul891<<2)|0);
 $181 = HEAP32[$arrayidx892>>2]|0;
 $add896 = $mul891 | 1;
 $arrayidx897 = (39888 + ($add896<<2)|0);
 $182 = HEAP32[$arrayidx897>>2]|0;
 $shl898 = $181 << 24;
 $shr899 = $182 >>> 8;
 $or900 = $shr899 | $shl898;
 $shl901 = $182 << 24;
 $shr902 = $181 >>> 8;
 $or903 = $shl901 | $shr902;
 $xor904 = $xor887 ^ $or900;
 $xor905 = $xor888 ^ $or903;
 $arrayidx906 = ((($y)) + 48|0);
 HEAP32[$arrayidx906>>2] = $xor905;
 $arrayidx907 = ((($y)) + 52|0);
 HEAP32[$arrayidx907>>2] = $xor904;
 $183 = HEAP8[$x>>0]|0;
 $conv909 = $183&255;
 $mul910 = $conv909 << 1;
 $arrayidx911 = (39888 + ($mul910<<2)|0);
 $184 = HEAP32[$arrayidx911>>2]|0;
 $add915 = $mul910 | 1;
 $arrayidx916 = (39888 + ($add915<<2)|0);
 $185 = HEAP32[$arrayidx916>>2]|0;
 $arrayidx917 = ((($x)) + 17|0);
 $186 = HEAP8[$arrayidx917>>0]|0;
 $conv918 = $186&255;
 $mul919 = $conv918 << 1;
 $arrayidx920 = (39888 + ($mul919<<2)|0);
 $187 = HEAP32[$arrayidx920>>2]|0;
 $add924 = $mul919 | 1;
 $arrayidx925 = (39888 + ($add924<<2)|0);
 $188 = HEAP32[$arrayidx925>>2]|0;
 $shl926 = $187 << 8;
 $shr927 = $188 >>> 24;
 $or928 = $shr927 | $shl926;
 $shl929 = $188 << 8;
 $shr930 = $187 >>> 24;
 $or931 = $shl929 | $shr930;
 $xor932 = $or928 ^ $184;
 $xor933 = $or931 ^ $185;
 $arrayidx934 = ((($x)) + 34|0);
 $189 = HEAP8[$arrayidx934>>0]|0;
 $conv935 = $189&255;
 $mul936 = $conv935 << 1;
 $arrayidx937 = (39888 + ($mul936<<2)|0);
 $190 = HEAP32[$arrayidx937>>2]|0;
 $add941 = $mul936 | 1;
 $arrayidx942 = (39888 + ($add941<<2)|0);
 $191 = HEAP32[$arrayidx942>>2]|0;
 $shl943 = $190 << 16;
 $shr944 = $191 >>> 16;
 $or945 = $shr944 | $shl943;
 $shl946 = $191 << 16;
 $shr947 = $190 >>> 16;
 $or948 = $shl946 | $shr947;
 $xor949 = $xor932 ^ $or945;
 $xor950 = $xor933 ^ $or948;
 $arrayidx951 = ((($x)) + 51|0);
 $192 = HEAP8[$arrayidx951>>0]|0;
 $conv952 = $192&255;
 $mul953 = $conv952 << 1;
 $arrayidx954 = (39888 + ($mul953<<2)|0);
 $193 = HEAP32[$arrayidx954>>2]|0;
 $add958 = $mul953 | 1;
 $arrayidx959 = (39888 + ($add958<<2)|0);
 $194 = HEAP32[$arrayidx959>>2]|0;
 $shl960 = $193 << 24;
 $shr961 = $194 >>> 8;
 $or962 = $shr961 | $shl960;
 $shl963 = $194 << 24;
 $shr964 = $193 >>> 8;
 $or965 = $shl963 | $shr964;
 $xor966 = $xor949 ^ $or962;
 $xor967 = $xor950 ^ $or965;
 $195 = HEAP8[$arrayidx44>>0]|0;
 $conv969 = $195&255;
 $mul970 = $conv969 << 1;
 $arrayidx971 = (39888 + ($mul970<<2)|0);
 $196 = HEAP32[$arrayidx971>>2]|0;
 $xor972 = $xor967 ^ $196;
 $add976 = $mul970 | 1;
 $arrayidx977 = (39888 + ($add976<<2)|0);
 $197 = HEAP32[$arrayidx977>>2]|0;
 $xor978 = $xor966 ^ $197;
 $arrayidx979 = ((($x)) + 13|0);
 $198 = HEAP8[$arrayidx979>>0]|0;
 $conv980 = $198&255;
 $mul981 = $conv980 << 1;
 $arrayidx982 = (39888 + ($mul981<<2)|0);
 $199 = HEAP32[$arrayidx982>>2]|0;
 $add986 = $mul981 | 1;
 $arrayidx987 = (39888 + ($add986<<2)|0);
 $200 = HEAP32[$arrayidx987>>2]|0;
 $shl988 = $199 << 8;
 $shr989 = $200 >>> 24;
 $or990 = $shr989 | $shl988;
 $shl991 = $200 << 8;
 $shr992 = $199 >>> 24;
 $or993 = $shl991 | $shr992;
 $xor994 = $xor972 ^ $or990;
 $xor995 = $xor978 ^ $or993;
 $arrayidx996 = ((($x)) + 30|0);
 $201 = HEAP8[$arrayidx996>>0]|0;
 $conv997 = $201&255;
 $mul998 = $conv997 << 1;
 $arrayidx999 = (39888 + ($mul998<<2)|0);
 $202 = HEAP32[$arrayidx999>>2]|0;
 $add1003 = $mul998 | 1;
 $arrayidx1004 = (39888 + ($add1003<<2)|0);
 $203 = HEAP32[$arrayidx1004>>2]|0;
 $shl1005 = $202 << 16;
 $shr1006 = $203 >>> 16;
 $or1007 = $shr1006 | $shl1005;
 $shl1008 = $203 << 16;
 $shr1009 = $202 >>> 16;
 $or1010 = $shl1008 | $shr1009;
 $xor1011 = $xor994 ^ $or1007;
 $xor1012 = $xor995 ^ $or1010;
 $arrayidx1013 = ((($x)) + 47|0);
 $204 = HEAP8[$arrayidx1013>>0]|0;
 $conv1014 = $204&255;
 $mul1015 = $conv1014 << 1;
 $arrayidx1016 = (39888 + ($mul1015<<2)|0);
 $205 = HEAP32[$arrayidx1016>>2]|0;
 $add1020 = $mul1015 | 1;
 $arrayidx1021 = (39888 + ($add1020<<2)|0);
 $206 = HEAP32[$arrayidx1021>>2]|0;
 $shl1022 = $205 << 24;
 $shr1023 = $206 >>> 8;
 $or1024 = $shr1023 | $shl1022;
 $shl1025 = $206 << 24;
 $shr1026 = $205 >>> 8;
 $or1027 = $shl1025 | $shr1026;
 $xor1028 = $xor1011 ^ $or1024;
 $xor1029 = $xor1012 ^ $or1027;
 $arrayidx1030 = ((($y)) + 56|0);
 HEAP32[$arrayidx1030>>2] = $xor1029;
 $arrayidx1031 = ((($y)) + 60|0);
 HEAP32[$arrayidx1031>>2] = $xor1028;
 return;
}
function _argon2_type2string($type,$uppercase) {
 $type = $type|0;
 $uppercase = $uppercase|0;
 var $cond = 0, $cond3 = 0, $cond6 = 0, $retval$0 = 0, $tobool = 0, $tobool2 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($type|0) {
 case 0:  {
  $tobool = ($uppercase|0)==(0);
  $cond = $tobool ? 45849 : 45857;
  $retval$0 = $cond;
  break;
 }
 case 1:  {
  $tobool2 = ($uppercase|0)==(0);
  $cond3 = $tobool2 ? 45865 : 45873;
  $retval$0 = $cond3;
  break;
 }
 case 2:  {
  $tobool5 = ($uppercase|0)==(0);
  $cond6 = $tobool5 ? 45881 : 45890;
  $retval$0 = $cond6;
  break;
 }
 default: {
  $retval$0 = 0;
 }
 }
 return ($retval$0|0);
}
function _argon2_ctx_mem($context,$type,$memory,$memory_size) {
 $context = $context|0;
 $type = $type|0;
 $memory = $memory|0;
 $memory_size = $memory_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $and = 0, $and$lobit = 0, $call = 0, $call31 = 0, $call36 = 0, $cmp = 0, $cmp$i = 0, $cmp10 = 0, $cmp25 = 0, $cmp32 = 0, $cmp37 = 0, $cmp7 = 0, $cmp9 = 0;
 var $conv = 0, $div = 0, $div$i = 0, $flags = 0, $instance = 0, $keep_memory = 0, $lane_length = 0, $lanes = 0, $lanes18 = 0, $m_cost = 0, $memory_blocks15 = 0, $mul = 0, $mul$i = 0, $mul2$i = 0, $mul4$i = 0, $or$cond = 0, $passes = 0, $print_internals = 0, $rem = 0, $retval$0 = 0;
 var $segment_length16 = 0, $spec$select$i = 0, $t_cost = 0, $threads = 0, $threads19 = 0, $type20 = 0, $version = 0, $version13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $instance = sp;
 $call = (_validate_inputs($context)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  $retval$0 = $call;
  STACKTOP = sp;return ($retval$0|0);
 }
 $0 = ($type>>>0)>(2);
 if ($0) {
  $retval$0 = -26;
  STACKTOP = sp;return ($retval$0|0);
 }
 $m_cost = ((($context)) + 44|0);
 $1 = HEAP32[$m_cost>>2]|0;
 $lanes = ((($context)) + 48|0);
 $2 = HEAP32[$lanes>>2]|0;
 $mul$i = $2 << 3;
 $cmp$i = ($mul$i>>>0)>($1>>>0);
 $spec$select$i = $cmp$i ? $mul$i : $1;
 $mul2$i = $2 << 2;
 $div$i = (($spec$select$i>>>0) / ($mul2$i>>>0))&-1;
 $mul4$i = Math_imul($div$i, $mul2$i)|0;
 $cmp7 = ($memory|0)!=(0|0);
 if ($cmp7) {
  $rem = $memory_size & 1023;
  $cmp9 = ($rem|0)!=(0);
  $div = $memory_size >>> 10;
  $cmp10 = ($div>>>0)<($mul4$i>>>0);
  $or$cond = $cmp9 | $cmp10;
  if ($or$cond) {
   $retval$0 = -22;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $version = ((($context)) + 56|0);
 $3 = HEAP32[$version>>2]|0;
 $version13 = ((($instance)) + 4|0);
 HEAP32[$version13>>2] = $3;
 HEAP32[$instance>>2] = $memory;
 $t_cost = ((($context)) + 40|0);
 $4 = HEAP32[$t_cost>>2]|0;
 $passes = ((($instance)) + 8|0);
 HEAP32[$passes>>2] = $4;
 $memory_blocks15 = ((($instance)) + 12|0);
 HEAP32[$memory_blocks15>>2] = $mul4$i;
 $segment_length16 = ((($instance)) + 16|0);
 HEAP32[$segment_length16>>2] = $div$i;
 $mul = $div$i << 2;
 $lane_length = ((($instance)) + 20|0);
 HEAP32[$lane_length>>2] = $mul;
 $lanes18 = ((($instance)) + 24|0);
 HEAP32[$lanes18>>2] = $2;
 $threads = ((($context)) + 52|0);
 $5 = HEAP32[$threads>>2]|0;
 $threads19 = ((($instance)) + 28|0);
 HEAP32[$threads19>>2] = $5;
 $type20 = ((($instance)) + 32|0);
 HEAP32[$type20>>2] = $type;
 $flags = ((($context)) + 68|0);
 $6 = HEAP32[$flags>>2]|0;
 $and = $6 >>> 3;
 $and$lobit = $and & 1;
 $print_internals = ((($instance)) + 36|0);
 HEAP32[$print_internals>>2] = $and$lobit;
 $conv = $cmp7&1;
 $keep_memory = ((($instance)) + 40|0);
 HEAP32[$keep_memory>>2] = $conv;
 $cmp25 = ($5>>>0)>($2>>>0);
 if ($cmp25) {
  HEAP32[$threads19>>2] = $2;
 }
 $call31 = (_initialize($instance,$context)|0);
 $cmp32 = ($call31|0)==(0);
 if (!($cmp32)) {
  $retval$0 = $call31;
  STACKTOP = sp;return ($retval$0|0);
 }
 $call36 = (_fill_memory_blocks($instance)|0);
 $cmp37 = ($call36|0)==(0);
 if (!($cmp37)) {
  $retval$0 = $call36;
  STACKTOP = sp;return ($retval$0|0);
 }
 _finalize($context,$instance);
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _argon2_hash($t_cost,$m_cost,$parallelism,$pwd,$pwdlen,$salt,$saltlen,$hash,$hashlen,$encoded,$encodedlen,$type,$version) {
 $t_cost = $t_cost|0;
 $m_cost = $m_cost|0;
 $parallelism = $parallelism|0;
 $pwd = $pwd|0;
 $pwdlen = $pwdlen|0;
 $salt = $salt|0;
 $saltlen = $saltlen|0;
 $hash = $hash|0;
 $hashlen = $hashlen|0;
 $encoded = $encoded|0;
 $encodedlen = $encodedlen|0;
 $type = $type|0;
 $version = $version|0;
 var $allocate_cbk = 0, $call = 0, $call$i = 0, $call30 = 0, $cmp21 = 0, $cmp31 = 0, $cmp7 = 0, $context = 0, $flags = 0, $free_cbk = 0, $lanes = 0, $m_cost18 = 0, $or$cond = 0, $outlen = 0, $pwd13 = 0, $pwdlen14 = 0, $retval$0 = 0, $salt15 = 0, $saltlen16 = 0, $secret = 0;
 var $t_cost17 = 0, $threads = 0, $tobool = 0, $tobool24 = 0, $tobool27 = 0, $tobool28 = 0, $version19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $context = sp;
 $cmp7 = ($hashlen>>>0)<(4);
 if ($cmp7) {
  $retval$0 = -2;
  STACKTOP = sp;return ($retval$0|0);
 }
 $call = (_malloc($hashlen)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $retval$0 = -22;
  STACKTOP = sp;return ($retval$0|0);
 }
 HEAP32[$context>>2] = $call;
 $outlen = ((($context)) + 4|0);
 HEAP32[$outlen>>2] = $hashlen;
 $pwd13 = ((($context)) + 8|0);
 HEAP32[$pwd13>>2] = $pwd;
 $pwdlen14 = ((($context)) + 12|0);
 HEAP32[$pwdlen14>>2] = $pwdlen;
 $salt15 = ((($context)) + 16|0);
 HEAP32[$salt15>>2] = $salt;
 $saltlen16 = ((($context)) + 20|0);
 HEAP32[$saltlen16>>2] = $saltlen;
 $secret = ((($context)) + 24|0);
 $t_cost17 = ((($context)) + 40|0);
 ;HEAP32[$secret>>2]=0|0;HEAP32[$secret+4>>2]=0|0;HEAP32[$secret+8>>2]=0|0;HEAP32[$secret+12>>2]=0|0;
 HEAP32[$t_cost17>>2] = $t_cost;
 $m_cost18 = ((($context)) + 44|0);
 HEAP32[$m_cost18>>2] = $m_cost;
 $lanes = ((($context)) + 48|0);
 HEAP32[$lanes>>2] = $parallelism;
 $threads = ((($context)) + 52|0);
 HEAP32[$threads>>2] = $parallelism;
 $allocate_cbk = ((($context)) + 60|0);
 HEAP32[$allocate_cbk>>2] = 0;
 $free_cbk = ((($context)) + 64|0);
 HEAP32[$free_cbk>>2] = 0;
 $flags = ((($context)) + 68|0);
 HEAP32[$flags>>2] = 0;
 $version19 = ((($context)) + 56|0);
 HEAP32[$version19>>2] = $version;
 $call$i = (_argon2_ctx_mem($context,$type,0,0)|0);
 $cmp21 = ($call$i|0)==(0);
 if (!($cmp21)) {
  _clear_internal_memory($call,$hashlen);
  _free($call);
  $retval$0 = $call$i;
  STACKTOP = sp;return ($retval$0|0);
 }
 $tobool24 = ($hash|0)==(0|0);
 if (!($tobool24)) {
  _memcpy(($hash|0),($call|0),($hashlen|0))|0;
 }
 $tobool27 = ($encoded|0)!=(0|0);
 $tobool28 = ($encodedlen|0)!=(0);
 $or$cond = $tobool27 & $tobool28;
 if ($or$cond) {
  $call30 = (_encode_string($encoded,$encodedlen,$context,$type)|0);
  $cmp31 = ($call30|0)==(0);
  if (!($cmp31)) {
   _clear_internal_memory($call,$hashlen);
   _clear_internal_memory($encoded,$encodedlen);
   _free($call);
   $retval$0 = -31;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 _clear_internal_memory($call,$hashlen);
 _free($call);
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _argon2id_hash_raw($t_cost,$m_cost,$parallelism,$pwd,$pwdlen,$salt,$saltlen,$hash,$hashlen) {
 $t_cost = $t_cost|0;
 $m_cost = $m_cost|0;
 $parallelism = $parallelism|0;
 $pwd = $pwd|0;
 $pwdlen = $pwdlen|0;
 $salt = $salt|0;
 $saltlen = $saltlen|0;
 $hash = $hash|0;
 $hashlen = $hashlen|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_argon2_hash($t_cost,$m_cost,$parallelism,$pwd,$pwdlen,$salt,$saltlen,$hash,$hashlen,0,0,2,19)|0);
 return ($call|0);
}
function _init_block_value($b,$in) {
 $b = $b|0;
 $in = $in|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($b|0),($in|0),1024)|0;
 return;
}
function _copy_block($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memcpy(($dst|0),($src|0),1024)|0;
 return;
}
function _xor_block($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx2 = 0;
 var $exitcond = 0, $i$05 = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$05 = 0;
 while(1) {
  $arrayidx = (($src) + ($i$05<<3)|0);
  $0 = $arrayidx;
  $1 = $0;
  $2 = HEAP32[$1>>2]|0;
  $3 = (($0) + 4)|0;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $arrayidx2 = (($dst) + ($i$05<<3)|0);
  $6 = $arrayidx2;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = $8 ^ $2;
  $13 = $11 ^ $5;
  $14 = $arrayidx2;
  $15 = $14;
  HEAP32[$15>>2] = $12;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  $inc = (($i$05) + 1)|0;
  $exitcond = ($inc|0)==(128);
  if ($exitcond) {
   break;
  } else {
   $i$05 = $inc;
  }
 }
 return;
}
function _secure_wipe_memory($v,$n) {
 $v = $v|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $n$addr = 0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $v$addr = sp + 4|0;
 $n$addr = sp;
 HEAP32[$v$addr>>2] = $v;
 HEAP32[$n$addr>>2] = $n;
 $0 = HEAP32[10896]|0;
 $1 = HEAP32[$v$addr>>2]|0;
 $2 = HEAP32[$n$addr>>2]|0;
 (FUNCTION_TABLE_iiii[$0 & 15]($1,0,$2)|0);
 STACKTOP = sp;return;
}
function _clear_internal_memory($v,$n) {
 $v = $v|0;
 $n = $n|0;
 var $or$cond = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = (1)!=(0);
 $tobool1 = ($v|0)!=(0|0);
 $or$cond = $tobool1 & $tobool;
 if (!($or$cond)) {
  return;
 }
 _secure_wipe_memory($v,$n);
 return;
}
function _finalize($context,$instance) {
 $context = $context|0;
 $instance = $instance|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr2 = 0, $arrayidx$i = 0, $arrayidx2$i = 0, $blockhash = 0, $blockhash_bytes = 0, $cmp = 0, $cmp1 = 0;
 var $cmp3 = 0, $cmp331 = 0, $exitcond$i = 0, $free_cbk$i = 0, $i$05$i = 0, $inc = 0, $inc$i = 0, $keep_memory$i = 0, $l$032 = 0, $lane_length = 0, $lanes = 0, $memory_blocks$i = 0, $mul = 0, $mul$i = 0, $or$cond = 0, $or$cond$i$i = 0, $outlen = 0, $print_internals = 0, $sub = 0, $tobool = 0;
 var $tobool$i = 0, $tobool$i$i = 0, $tobool$i24 = 0, $tobool1$i = 0, $tobool1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048|0;
 $blockhash = sp + 1024|0;
 $blockhash_bytes = sp;
 $cmp = ($context|0)!=(0|0);
 $cmp1 = ($instance|0)!=(0|0);
 $or$cond = $cmp & $cmp1;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $0 = HEAP32[$instance>>2]|0;
 $lane_length = ((($instance)) + 20|0);
 $1 = HEAP32[$lane_length>>2]|0;
 $add$ptr = (($0) + ($1<<10)|0);
 $add$ptr2 = ((($add$ptr)) + -1024|0);
 _memcpy(($blockhash|0),($add$ptr2|0),1024)|0;
 $lanes = ((($instance)) + 24|0);
 $2 = HEAP32[$lanes>>2]|0;
 $cmp331 = ($2>>>0)>(1);
 if ($cmp331) {
  $sub = (($1) + -1)|0;
  $l$032 = 1;
  while(1) {
   $mul = Math_imul($l$032, $1)|0;
   $add = (($sub) + ($mul))|0;
   $i$05$i = 0;
   while(1) {
    $arrayidx$i = ((($0) + ($add<<10)|0) + ($i$05$i<<3)|0);
    $3 = $arrayidx$i;
    $4 = $3;
    $5 = HEAP32[$4>>2]|0;
    $6 = (($3) + 4)|0;
    $7 = $6;
    $8 = HEAP32[$7>>2]|0;
    $arrayidx2$i = (($blockhash) + ($i$05$i<<3)|0);
    $9 = $arrayidx2$i;
    $10 = $9;
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 4)|0;
    $13 = $12;
    $14 = HEAP32[$13>>2]|0;
    $15 = $11 ^ $5;
    $16 = $14 ^ $8;
    $17 = $arrayidx2$i;
    $18 = $17;
    HEAP32[$18>>2] = $15;
    $19 = (($17) + 4)|0;
    $20 = $19;
    HEAP32[$20>>2] = $16;
    $inc$i = (($i$05$i) + 1)|0;
    $exitcond$i = ($inc$i|0)==(128);
    if ($exitcond$i) {
     break;
    } else {
     $i$05$i = $inc$i;
    }
   }
   $inc = (($l$032) + 1)|0;
   $cmp3 = ($inc>>>0)<($2>>>0);
   if ($cmp3) {
    $l$032 = $inc;
   } else {
    break;
   }
  }
 }
 _memcpy(($blockhash_bytes|0),($blockhash|0),1024)|0;
 $21 = HEAP32[$context>>2]|0;
 $outlen = ((($context)) + 4|0);
 $22 = HEAP32[$outlen>>2]|0;
 _blake2b_long($21,$22,$blockhash_bytes,1024);
 $tobool$i24 = (1)==(0);
 if (!($tobool$i24)) {
  _secure_wipe_memory($blockhash,1024);
  _secure_wipe_memory($blockhash_bytes,1024);
 }
 $print_internals = ((($instance)) + 36|0);
 $23 = HEAP32[$print_internals>>2]|0;
 $tobool = ($23|0)==(0);
 if (!($tobool)) {
  $24 = HEAP32[$context>>2]|0;
  $25 = HEAP32[$outlen>>2]|0;
  _print_tag($24,$25);
 }
 $memory_blocks$i = ((($instance)) + 12|0);
 $26 = HEAP32[$memory_blocks$i>>2]|0;
 $mul$i = $26 << 10;
 $27 = HEAP32[$instance>>2]|0;
 $tobool$i$i = (1)!=(0);
 $tobool1$i$i = ($27|0)!=(0|0);
 $or$cond$i$i = $tobool1$i$i & $tobool$i$i;
 if ($or$cond$i$i) {
  _secure_wipe_memory($27,$mul$i);
 }
 $keep_memory$i = ((($instance)) + 40|0);
 $28 = HEAP32[$keep_memory$i>>2]|0;
 $tobool$i = ($28|0)==(0);
 do {
  if ($tobool$i) {
   $free_cbk$i = ((($context)) + 64|0);
   $29 = HEAP32[$free_cbk$i>>2]|0;
   $tobool1$i = ($29|0)==(0|0);
   $30 = HEAP32[$instance>>2]|0;
   if ($tobool1$i) {
    _free($30);
    break;
   } else {
    FUNCTION_TABLE_vii[$29 & 31]($30,$mul$i);
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _index_alpha($instance,$position,$pseudo_rand,$same_lane) {
 $instance = $instance|0;
 $position = $position|0;
 $pseudo_rand = $pseudo_rand|0;
 $same_lane = $same_lane|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add17 = 0, $add25 = 0, $add35 = 0, $add56 = 0, $cmp = 0, $cmp1 = 0, $cmp15 = 0, $cmp32 = 0, $cmp52 = 0, $cond = 0, $cond34 = 0, $conv = 0, $conv51 = 0, $index = 0, $index24 = 0, $index7 = 0, $lane_length = 0, $lane_length63 = 0;
 var $mul = 0, $mul58 = 0, $reference_area_size$0 = 0, $segment_length = 0, $segment_length22 = 0, $segment_length57 = 0, $slice = 0, $slice50 = 0, $sub = 0, $sub23 = 0, $sub26 = 0, $sub40 = 0, $sub8 = 0, $tobool = 0, $tobool20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$position>>2]|0;
 $cmp = ($0|0)==(0);
 do {
  if ($cmp) {
   $slice = ((($position)) + 8|0);
   $1 = HEAP8[$slice>>0]|0;
   $cmp1 = ($1<<24>>24)==(0);
   if ($cmp1) {
    $index = ((($position)) + 12|0);
    $2 = HEAP32[$index>>2]|0;
    $sub = (($2) + -1)|0;
    $reference_area_size$0 = $sub;
    break;
   }
   $conv = $1&255;
   $tobool = ($same_lane|0)==(0);
   $segment_length = ((($instance)) + 16|0);
   $3 = HEAP32[$segment_length>>2]|0;
   $mul = Math_imul($3, $conv)|0;
   $index7 = ((($position)) + 12|0);
   $4 = HEAP32[$index7>>2]|0;
   if ($tobool) {
    $cmp15 = ($4|0)==(0);
    $cond = $cmp15 << 31 >> 31;
    $add17 = (($mul) + ($cond))|0;
    $reference_area_size$0 = $add17;
    break;
   } else {
    $add = (($4) + -1)|0;
    $sub8 = (($add) + ($mul))|0;
    $reference_area_size$0 = $sub8;
    break;
   }
  } else {
   $tobool20 = ($same_lane|0)==(0);
   $lane_length = ((($instance)) + 20|0);
   $5 = HEAP32[$lane_length>>2]|0;
   $segment_length22 = ((($instance)) + 16|0);
   $6 = HEAP32[$segment_length22>>2]|0;
   $sub23 = (($5) - ($6))|0;
   $index24 = ((($position)) + 12|0);
   $7 = HEAP32[$index24>>2]|0;
   if ($tobool20) {
    $cmp32 = ($7|0)==(0);
    $cond34 = $cmp32 << 31 >> 31;
    $add35 = (($sub23) + ($cond34))|0;
    $reference_area_size$0 = $add35;
    break;
   } else {
    $add25 = (($7) + -1)|0;
    $sub26 = (($add25) + ($sub23))|0;
    $reference_area_size$0 = $sub26;
    break;
   }
  }
 } while(0);
 (___muldi3(($pseudo_rand|0),0,($pseudo_rand|0),0)|0);
 $8 = (getTempRet0() | 0);
 $sub40 = (($reference_area_size$0) + -1)|0;
 (___muldi3(($8|0),0,($reference_area_size$0|0),0)|0);
 $9 = (getTempRet0() | 0);
 $10 = (_i64Subtract(($sub40|0),0,($9|0),0)|0);
 $11 = (getTempRet0() | 0);
 if ($cmp) {
  $14 = 0;$15 = 0;
 } else {
  $slice50 = ((($position)) + 8|0);
  $12 = HEAP8[$slice50>>0]|0;
  $cmp52 = ($12<<24>>24)==(3);
  if ($cmp52) {
   $14 = 0;$15 = 0;
  } else {
   $segment_length57 = ((($instance)) + 16|0);
   $conv51 = $12&255;
   $add56 = (($conv51) + 1)|0;
   $13 = HEAP32[$segment_length57>>2]|0;
   $mul58 = Math_imul($13, $add56)|0;
   $14 = $mul58;$15 = 0;
  }
 }
 $16 = (_i64Add(($10|0),($11|0),($14|0),($15|0))|0);
 $17 = (getTempRet0() | 0);
 $lane_length63 = ((($instance)) + 20|0);
 $18 = HEAP32[$lane_length63>>2]|0;
 $19 = (___uremdi3(($16|0),($17|0),($18|0),0)|0);
 $20 = (getTempRet0() | 0);
 return ($19|0);
}
function _fill_memory_blocks($instance) {
 $instance = $instance|0;
 var $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$1$i = 0, $arrayidx$2$i = 0, $arrayidx$3$i = 0, $arrayidx$i = 0, $arrayidx21$1$i = 0, $arrayidx21$2$i = 0, $arrayidx21$3$i = 0, $arrayidx21$i = 0, $arrayidx23$1$i = 0, $arrayidx23$2$i = 0, $arrayidx23$3$i = 0, $arrayidx23$i = 0, $arrayidx37$1$i = 0;
 var $arrayidx37$2$i = 0, $arrayidx37$3$i = 0, $arrayidx37$i = 0, $call$i = 0, $call17$1$i = 0, $call17$2$i = 0, $call17$3$i = 0, $call17$i = 0, $call2$i = 0, $call25$1$i = 0, $call25$2$i = 0, $call25$3$i = 0, $call25$i = 0, $call38$1$i = 0, $call38$2$i = 0, $call38$3$i = 0, $call38$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i5 = 0;
 var $cmp1 = 0, $cmp12$1$i = 0, $cmp12$2$i = 0, $cmp12$3$i = 0, $cmp12$i = 0, $cmp1266$1$i = 0, $cmp1266$2$i = 0, $cmp1266$3$i = 0, $cmp1266$i = 0, $cmp14$1$i = 0, $cmp14$2$i = 0, $cmp14$3$i = 0, $cmp14$i = 0, $cmp2 = 0, $cmp3$i = 0, $cmp34$1$i = 0, $cmp34$2$i = 0, $cmp34$3$i = 0, $cmp34$i = 0, $cmp3468$1$i = 0;
 var $cmp3468$2$i = 0, $cmp3468$3$i = 0, $cmp3468$i = 0, $cmp4$i = 0, $cmp5$1$i = 0, $cmp5$2$i = 0, $cmp5$3$i = 0, $cmp5$i = 0, $cmp51$1$i = 0, $cmp51$2$i = 0, $cmp51$3$i = 0, $cmp51$i = 0, $cmp6$i = 0, $cmp671$i = 0, $inc$1$i = 0, $inc$1$i12 = 0, $inc$2$i = 0, $inc$2$i13 = 0, $inc$3$i = 0, $inc$3$i14 = 0;
 var $inc$i = 0, $inc$i11 = 0, $inc11$i = 0, $inc43$1$i = 0, $inc43$2$i = 0, $inc43$3$i = 0, $inc43$i = 0, $inc55$i = 0, $index$i = 0, $l$02$1$i = 0, $l$02$2$i = 0, $l$02$3$i = 0, $l$02$i = 0, $l$067$1$i = 0, $l$067$2$i = 0, $l$067$3$i = 0, $l$067$i = 0, $l$169$1$i = 0, $l$169$2$i = 0, $l$169$3$i = 0;
 var $l$169$i = 0, $lane$i = 0, $lanes = 0, $passes$i = 0, $passes$i6 = 0, $position$i = 0, $position$i$byval_copy3 = 0, $position$sroa$0$0$$sroa_idx$1$i = 0, $position$sroa$0$0$$sroa_idx$2$i = 0, $position$sroa$0$0$$sroa_idx$3$i = 0, $position$sroa$0$0$$sroa_idx$i = 0, $position$sroa$4$0$$sroa_idx3$1$i = 0, $position$sroa$4$0$$sroa_idx3$2$i = 0, $position$sroa$4$0$$sroa_idx3$3$i = 0, $position$sroa$4$0$$sroa_idx3$i = 0, $position$sroa$5$0$$sroa_idx$1$i = 0, $position$sroa$5$0$$sroa_idx$2$i = 0, $position$sroa$5$0$$sroa_idx$3$i = 0, $position$sroa$5$0$$sroa_idx$i = 0, $position$sroa$6$0$$sroa_raw_idx$1$i = 0;
 var $position$sroa$6$0$$sroa_raw_idx$2$i = 0, $position$sroa$6$0$$sroa_raw_idx$3$i = 0, $position$sroa$6$0$$sroa_raw_idx$i = 0, $position$sroa$67$0$$sroa_idx8$1$i = 0, $position$sroa$67$0$$sroa_idx8$2$i = 0, $position$sroa$67$0$$sroa_idx8$3$i = 0, $position$sroa$67$0$$sroa_idx8$i = 0, $print_internals$i = 0, $print_internals$i7 = 0, $r$05$i = 0, $r$072$i = 0, $rc$561$i = 0, $rc$56182$i = 0, $retval$0 = 0, $slice$i = 0, $sub$1$i = 0, $sub$2$i = 0, $sub$3$i = 0, $sub$i = 0, $sub31$1$i = 0;
 var $sub31$2$i = 0, $sub31$3$i = 0, $sub31$i = 0, $threads = 0, $tobool$1$i = 0, $tobool$2$i = 0, $tobool$3$i = 0, $tobool$i = 0, $tobool$i10 = 0, $tobool26$1$i = 0, $tobool26$2$i = 0, $tobool26$3$i = 0, $tobool26$i = 0, $tobool39$1$i = 0, $tobool39$2$i = 0, $tobool39$3$i = 0, $tobool39$i = 0, $tobool51$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $position$i$byval_copy3 = sp + 16|0;
 $position$i = sp;
 $cmp = ($instance|0)==(0|0);
 if ($cmp) {
  $retval$0 = -25;
  STACKTOP = sp;return ($retval$0|0);
 }
 $lanes = ((($instance)) + 24|0);
 $0 = HEAP32[$lanes>>2]|0;
 $cmp1 = ($0|0)==(0);
 if ($cmp1) {
  $retval$0 = -25;
  STACKTOP = sp;return ($retval$0|0);
 }
 $threads = ((($instance)) + 28|0);
 $1 = HEAP32[$threads>>2]|0;
 $cmp2 = ($1|0)==(1);
 if ($cmp2) {
  $passes$i = ((($instance)) + 8|0);
  $2 = HEAP32[$passes$i>>2]|0;
  $cmp4$i = ($2|0)==(0);
  if ($cmp4$i) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
  $lane$i = ((($position$i)) + 4|0);
  $slice$i = ((($position$i)) + 8|0);
  $index$i = ((($position$i)) + 12|0);
  $print_internals$i = ((($instance)) + 36|0);
  $3 = $0;$r$05$i = 0;
  while(1) {
   $cmp51$i = ($3|0)==(0);
   if (!($cmp51$i)) {
    $l$02$i = 0;
    while(1) {
     HEAP32[$position$i>>2] = $r$05$i;
     HEAP32[$lane$i>>2] = $l$02$i;
     HEAP8[$slice$i>>0] = 0;
     HEAP32[$index$i>>2] = 0;
     ;HEAP32[$position$i$byval_copy3>>2]=HEAP32[$position$i>>2]|0;HEAP32[$position$i$byval_copy3+4>>2]=HEAP32[$position$i+4>>2]|0;HEAP32[$position$i$byval_copy3+8>>2]=HEAP32[$position$i+8>>2]|0;HEAP32[$position$i$byval_copy3+12>>2]=HEAP32[$position$i+12>>2]|0;
     _fill_segment($instance,$position$i$byval_copy3);
     $inc$i = (($l$02$i) + 1)|0;
     $4 = HEAP32[$lanes>>2]|0;
     $cmp5$i = ($inc$i>>>0)<($4>>>0);
     if ($cmp5$i) {
      $l$02$i = $inc$i;
     } else {
      break;
     }
    }
    $cmp51$1$i = ($4|0)==(0);
    if (!($cmp51$1$i)) {
     $l$02$1$i = 0;
     while(1) {
      HEAP32[$position$i>>2] = $r$05$i;
      HEAP32[$lane$i>>2] = $l$02$1$i;
      HEAP8[$slice$i>>0] = 1;
      HEAP32[$index$i>>2] = 0;
      ;HEAP32[$position$i$byval_copy3>>2]=HEAP32[$position$i>>2]|0;HEAP32[$position$i$byval_copy3+4>>2]=HEAP32[$position$i+4>>2]|0;HEAP32[$position$i$byval_copy3+8>>2]=HEAP32[$position$i+8>>2]|0;HEAP32[$position$i$byval_copy3+12>>2]=HEAP32[$position$i+12>>2]|0;
      _fill_segment($instance,$position$i$byval_copy3);
      $inc$1$i = (($l$02$1$i) + 1)|0;
      $6 = HEAP32[$lanes>>2]|0;
      $cmp5$1$i = ($inc$1$i>>>0)<($6>>>0);
      if ($cmp5$1$i) {
       $l$02$1$i = $inc$1$i;
      } else {
       break;
      }
     }
     $cmp51$2$i = ($6|0)==(0);
     if (!($cmp51$2$i)) {
      $l$02$2$i = 0;
      while(1) {
       HEAP32[$position$i>>2] = $r$05$i;
       HEAP32[$lane$i>>2] = $l$02$2$i;
       HEAP8[$slice$i>>0] = 2;
       HEAP32[$index$i>>2] = 0;
       ;HEAP32[$position$i$byval_copy3>>2]=HEAP32[$position$i>>2]|0;HEAP32[$position$i$byval_copy3+4>>2]=HEAP32[$position$i+4>>2]|0;HEAP32[$position$i$byval_copy3+8>>2]=HEAP32[$position$i+8>>2]|0;HEAP32[$position$i$byval_copy3+12>>2]=HEAP32[$position$i+12>>2]|0;
       _fill_segment($instance,$position$i$byval_copy3);
       $inc$2$i = (($l$02$2$i) + 1)|0;
       $7 = HEAP32[$lanes>>2]|0;
       $cmp5$2$i = ($inc$2$i>>>0)<($7>>>0);
       if ($cmp5$2$i) {
        $l$02$2$i = $inc$2$i;
       } else {
        break;
       }
      }
      $cmp51$3$i = ($7|0)==(0);
      if (!($cmp51$3$i)) {
       $l$02$3$i = 0;
       while(1) {
        HEAP32[$position$i>>2] = $r$05$i;
        HEAP32[$lane$i>>2] = $l$02$3$i;
        HEAP8[$slice$i>>0] = 3;
        HEAP32[$index$i>>2] = 0;
        ;HEAP32[$position$i$byval_copy3>>2]=HEAP32[$position$i>>2]|0;HEAP32[$position$i$byval_copy3+4>>2]=HEAP32[$position$i+4>>2]|0;HEAP32[$position$i$byval_copy3+8>>2]=HEAP32[$position$i+8>>2]|0;HEAP32[$position$i$byval_copy3+12>>2]=HEAP32[$position$i+12>>2]|0;
        _fill_segment($instance,$position$i$byval_copy3);
        $inc$3$i = (($l$02$3$i) + 1)|0;
        $8 = HEAP32[$lanes>>2]|0;
        $cmp5$3$i = ($inc$3$i>>>0)<($8>>>0);
        if ($cmp5$3$i) {
         $l$02$3$i = $inc$3$i;
        } else {
         break;
        }
       }
      }
     }
    }
   }
   $9 = HEAP32[$print_internals$i>>2]|0;
   $tobool$i = ($9|0)==(0);
   if (!($tobool$i)) {
    _internal_kat($instance,$r$05$i);
   }
   $inc11$i = (($r$05$i) + 1)|0;
   $5 = HEAP32[$passes$i>>2]|0;
   $cmp$i = ($inc11$i>>>0)<($5>>>0);
   if (!($cmp$i)) {
    $retval$0 = 0;
    break;
   }
   $$pre = HEAP32[$lanes>>2]|0;
   $3 = $$pre;$r$05$i = $inc11$i;
  }
  STACKTOP = sp;return ($retval$0|0);
 }
 $call$i = (_calloc($0,4)|0);
 $cmp$i5 = ($call$i|0)==(0|0);
 if ($cmp$i5) {
  $retval$0 = -22;
  STACKTOP = sp;return ($retval$0|0);
 }
 $call2$i = (_calloc($0,20)|0);
 $cmp3$i = ($call2$i|0)==(0|0);
 if ($cmp3$i) {
  _free($call$i);
  $retval$0 = -22;
  STACKTOP = sp;return ($retval$0|0);
 }
 $passes$i6 = ((($instance)) + 8|0);
 $10 = HEAP32[$passes$i6>>2]|0;
 $cmp671$i = ($10|0)==(0);
 if ($cmp671$i) {
  _free($call$i);
  $rc$56182$i = 0;
 } else {
  $print_internals$i7 = ((($instance)) + 36|0);
  $11 = $0;$r$072$i = 0;
  L47: while(1) {
   $cmp1266$i = ($11|0)==(0);
   if ($cmp1266$i) {
    $16 = 0;
   } else {
    $l$067$i = 0;
    while(1) {
     $12 = HEAP32[$threads>>2]|0;
     $cmp14$i = ($l$067$i>>>0)<($12>>>0);
     if (!($cmp14$i)) {
      $sub$i = (($l$067$i) - ($12))|0;
      $arrayidx$i = (($call$i) + ($sub$i<<2)|0);
      $13 = HEAP32[$arrayidx$i>>2]|0;
      $call17$i = (_argon2_thread_join($13)|0);
      $tobool$i10 = ($call17$i|0)==(0);
      if (!($tobool$i10)) {
       label = 33;
       break L47;
      }
     }
     $arrayidx21$i = (($call2$i) + (($l$067$i*20)|0)|0);
     HEAP32[$arrayidx21$i>>2] = $instance;
     $position$sroa$0$0$$sroa_idx$i = (((($call2$i) + (($l$067$i*20)|0)|0)) + 4|0);
     HEAP32[$position$sroa$0$0$$sroa_idx$i>>2] = $r$072$i;
     $position$sroa$4$0$$sroa_idx3$i = (((($call2$i) + (($l$067$i*20)|0)|0)) + 8|0);
     HEAP32[$position$sroa$4$0$$sroa_idx3$i>>2] = $l$067$i;
     $position$sroa$5$0$$sroa_idx$i = (((($call2$i) + (($l$067$i*20)|0)|0)) + 12|0);
     HEAP8[$position$sroa$5$0$$sroa_idx$i>>0] = 0;
     $position$sroa$6$0$$sroa_raw_idx$i = ((($arrayidx21$i)) + 13|0);
     ;HEAP8[$position$sroa$6$0$$sroa_raw_idx$i>>0]=HEAP8[$position$i$byval_copy3>>0]|0;HEAP8[$position$sroa$6$0$$sroa_raw_idx$i+1>>0]=HEAP8[$position$i$byval_copy3+1>>0]|0;HEAP8[$position$sroa$6$0$$sroa_raw_idx$i+2>>0]=HEAP8[$position$i$byval_copy3+2>>0]|0;
     $position$sroa$67$0$$sroa_idx8$i = (((($call2$i) + (($l$067$i*20)|0)|0)) + 16|0);
     HEAP32[$position$sroa$67$0$$sroa_idx8$i>>2] = 0;
     $arrayidx23$i = (($call$i) + ($l$067$i<<2)|0);
     $call25$i = (_argon2_thread_create($arrayidx23$i,9,$arrayidx21$i)|0);
     $tobool26$i = ($call25$i|0)==(0);
     if (!($tobool26$i)) {
      label = 33;
      break L47;
     }
     $inc$i11 = (($l$067$i) + 1)|0;
     $14 = HEAP32[$lanes>>2]|0;
     $cmp12$i = ($inc$i11>>>0)<($14>>>0);
     if ($cmp12$i) {
      $l$067$i = $inc$i11;
     } else {
      $16 = $14;
      break;
     }
    }
   }
   $15 = HEAP32[$threads>>2]|0;
   $sub31$i = (($16) - ($15))|0;
   $cmp3468$i = ($sub31$i>>>0)<($16>>>0);
   if ($cmp3468$i) {
    $l$169$i = $sub31$i;
    while(1) {
     $arrayidx37$i = (($call$i) + ($l$169$i<<2)|0);
     $18 = HEAP32[$arrayidx37$i>>2]|0;
     $call38$i = (_argon2_thread_join($18)|0);
     $tobool39$i = ($call38$i|0)==(0);
     $inc43$i = (($l$169$i) + 1)|0;
     if (!($tobool39$i)) {
      $rc$561$i = -33;
      break L47;
     }
     $17 = HEAP32[$lanes>>2]|0;
     $cmp34$i = ($inc43$i>>>0)<($17>>>0);
     if ($cmp34$i) {
      $l$169$i = $inc43$i;
     } else {
      $19 = $17;
      break;
     }
    }
   } else {
    $19 = $16;
   }
   $cmp1266$1$i = ($19|0)==(0);
   if ($cmp1266$1$i) {
    $25 = 0;
   } else {
    $l$067$1$i = 0;
    while(1) {
     $21 = HEAP32[$threads>>2]|0;
     $cmp14$1$i = ($l$067$1$i>>>0)<($21>>>0);
     if (!($cmp14$1$i)) {
      $sub$1$i = (($l$067$1$i) - ($21))|0;
      $arrayidx$1$i = (($call$i) + ($sub$1$i<<2)|0);
      $22 = HEAP32[$arrayidx$1$i>>2]|0;
      $call17$1$i = (_argon2_thread_join($22)|0);
      $tobool$1$i = ($call17$1$i|0)==(0);
      if (!($tobool$1$i)) {
       label = 33;
       break L47;
      }
     }
     $arrayidx21$1$i = (($call2$i) + (($l$067$1$i*20)|0)|0);
     HEAP32[$arrayidx21$1$i>>2] = $instance;
     $position$sroa$0$0$$sroa_idx$1$i = (((($call2$i) + (($l$067$1$i*20)|0)|0)) + 4|0);
     HEAP32[$position$sroa$0$0$$sroa_idx$1$i>>2] = $r$072$i;
     $position$sroa$4$0$$sroa_idx3$1$i = (((($call2$i) + (($l$067$1$i*20)|0)|0)) + 8|0);
     HEAP32[$position$sroa$4$0$$sroa_idx3$1$i>>2] = $l$067$1$i;
     $position$sroa$5$0$$sroa_idx$1$i = (((($call2$i) + (($l$067$1$i*20)|0)|0)) + 12|0);
     HEAP8[$position$sroa$5$0$$sroa_idx$1$i>>0] = 1;
     $position$sroa$6$0$$sroa_raw_idx$1$i = ((($arrayidx21$1$i)) + 13|0);
     ;HEAP8[$position$sroa$6$0$$sroa_raw_idx$1$i>>0]=HEAP8[$position$i$byval_copy3>>0]|0;HEAP8[$position$sroa$6$0$$sroa_raw_idx$1$i+1>>0]=HEAP8[$position$i$byval_copy3+1>>0]|0;HEAP8[$position$sroa$6$0$$sroa_raw_idx$1$i+2>>0]=HEAP8[$position$i$byval_copy3+2>>0]|0;
     $position$sroa$67$0$$sroa_idx8$1$i = (((($call2$i) + (($l$067$1$i*20)|0)|0)) + 16|0);
     HEAP32[$position$sroa$67$0$$sroa_idx8$1$i>>2] = 0;
     $arrayidx23$1$i = (($call$i) + ($l$067$1$i<<2)|0);
     $call25$1$i = (_argon2_thread_create($arrayidx23$1$i,9,$arrayidx21$1$i)|0);
     $tobool26$1$i = ($call25$1$i|0)==(0);
     if (!($tobool26$1$i)) {
      label = 33;
      break L47;
     }
     $inc$1$i12 = (($l$067$1$i) + 1)|0;
     $23 = HEAP32[$lanes>>2]|0;
     $cmp12$1$i = ($inc$1$i12>>>0)<($23>>>0);
     if ($cmp12$1$i) {
      $l$067$1$i = $inc$1$i12;
     } else {
      $25 = $23;
      break;
     }
    }
   }
   $24 = HEAP32[$threads>>2]|0;
   $sub31$1$i = (($25) - ($24))|0;
   $cmp3468$1$i = ($sub31$1$i>>>0)<($25>>>0);
   if ($cmp3468$1$i) {
    $l$169$1$i = $sub31$1$i;
    while(1) {
     $arrayidx37$1$i = (($call$i) + ($l$169$1$i<<2)|0);
     $26 = HEAP32[$arrayidx37$1$i>>2]|0;
     $call38$1$i = (_argon2_thread_join($26)|0);
     $tobool39$1$i = ($call38$1$i|0)==(0);
     $inc43$1$i = (($l$169$1$i) + 1)|0;
     if (!($tobool39$1$i)) {
      $rc$561$i = -33;
      break L47;
     }
     $27 = HEAP32[$lanes>>2]|0;
     $cmp34$1$i = ($inc43$1$i>>>0)<($27>>>0);
     if ($cmp34$1$i) {
      $l$169$1$i = $inc43$1$i;
     } else {
      $28 = $27;
      break;
     }
    }
   } else {
    $28 = $25;
   }
   $cmp1266$2$i = ($28|0)==(0);
   if ($cmp1266$2$i) {
    $33 = 0;
   } else {
    $l$067$2$i = 0;
    while(1) {
     $29 = HEAP32[$threads>>2]|0;
     $cmp14$2$i = ($l$067$2$i>>>0)<($29>>>0);
     if (!($cmp14$2$i)) {
      $sub$2$i = (($l$067$2$i) - ($29))|0;
      $arrayidx$2$i = (($call$i) + ($sub$2$i<<2)|0);
      $30 = HEAP32[$arrayidx$2$i>>2]|0;
      $call17$2$i = (_argon2_thread_join($30)|0);
      $tobool$2$i = ($call17$2$i|0)==(0);
      if (!($tobool$2$i)) {
       label = 33;
       break L47;
      }
     }
     $arrayidx21$2$i = (($call2$i) + (($l$067$2$i*20)|0)|0);
     HEAP32[$arrayidx21$2$i>>2] = $instance;
     $position$sroa$0$0$$sroa_idx$2$i = (((($call2$i) + (($l$067$2$i*20)|0)|0)) + 4|0);
     HEAP32[$position$sroa$0$0$$sroa_idx$2$i>>2] = $r$072$i;
     $position$sroa$4$0$$sroa_idx3$2$i = (((($call2$i) + (($l$067$2$i*20)|0)|0)) + 8|0);
     HEAP32[$position$sroa$4$0$$sroa_idx3$2$i>>2] = $l$067$2$i;
     $position$sroa$5$0$$sroa_idx$2$i = (((($call2$i) + (($l$067$2$i*20)|0)|0)) + 12|0);
     HEAP8[$position$sroa$5$0$$sroa_idx$2$i>>0] = 2;
     $position$sroa$6$0$$sroa_raw_idx$2$i = ((($arrayidx21$2$i)) + 13|0);
     ;HEAP8[$position$sroa$6$0$$sroa_raw_idx$2$i>>0]=HEAP8[$position$i$byval_copy3>>0]|0;HEAP8[$position$sroa$6$0$$sroa_raw_idx$2$i+1>>0]=HEAP8[$position$i$byval_copy3+1>>0]|0;HEAP8[$position$sroa$6$0$$sroa_raw_idx$2$i+2>>0]=HEAP8[$position$i$byval_copy3+2>>0]|0;
     $position$sroa$67$0$$sroa_idx8$2$i = (((($call2$i) + (($l$067$2$i*20)|0)|0)) + 16|0);
     HEAP32[$position$sroa$67$0$$sroa_idx8$2$i>>2] = 0;
     $arrayidx23$2$i = (($call$i) + ($l$067$2$i<<2)|0);
     $call25$2$i = (_argon2_thread_create($arrayidx23$2$i,9,$arrayidx21$2$i)|0);
     $tobool26$2$i = ($call25$2$i|0)==(0);
     if (!($tobool26$2$i)) {
      label = 33;
      break L47;
     }
     $inc$2$i13 = (($l$067$2$i) + 1)|0;
     $31 = HEAP32[$lanes>>2]|0;
     $cmp12$2$i = ($inc$2$i13>>>0)<($31>>>0);
     if ($cmp12$2$i) {
      $l$067$2$i = $inc$2$i13;
     } else {
      $33 = $31;
      break;
     }
    }
   }
   $32 = HEAP32[$threads>>2]|0;
   $sub31$2$i = (($33) - ($32))|0;
   $cmp3468$2$i = ($sub31$2$i>>>0)<($33>>>0);
   if ($cmp3468$2$i) {
    $l$169$2$i = $sub31$2$i;
    while(1) {
     $arrayidx37$2$i = (($call$i) + ($l$169$2$i<<2)|0);
     $34 = HEAP32[$arrayidx37$2$i>>2]|0;
     $call38$2$i = (_argon2_thread_join($34)|0);
     $tobool39$2$i = ($call38$2$i|0)==(0);
     $inc43$2$i = (($l$169$2$i) + 1)|0;
     if (!($tobool39$2$i)) {
      $rc$561$i = -33;
      break L47;
     }
     $35 = HEAP32[$lanes>>2]|0;
     $cmp34$2$i = ($inc43$2$i>>>0)<($35>>>0);
     if ($cmp34$2$i) {
      $l$169$2$i = $inc43$2$i;
     } else {
      $36 = $35;
      break;
     }
    }
   } else {
    $36 = $33;
   }
   $cmp1266$3$i = ($36|0)==(0);
   if ($cmp1266$3$i) {
    $41 = 0;
   } else {
    $l$067$3$i = 0;
    while(1) {
     $37 = HEAP32[$threads>>2]|0;
     $cmp14$3$i = ($l$067$3$i>>>0)<($37>>>0);
     if (!($cmp14$3$i)) {
      $sub$3$i = (($l$067$3$i) - ($37))|0;
      $arrayidx$3$i = (($call$i) + ($sub$3$i<<2)|0);
      $38 = HEAP32[$arrayidx$3$i>>2]|0;
      $call17$3$i = (_argon2_thread_join($38)|0);
      $tobool$3$i = ($call17$3$i|0)==(0);
      if (!($tobool$3$i)) {
       label = 33;
       break L47;
      }
     }
     $arrayidx21$3$i = (($call2$i) + (($l$067$3$i*20)|0)|0);
     HEAP32[$arrayidx21$3$i>>2] = $instance;
     $position$sroa$0$0$$sroa_idx$3$i = (((($call2$i) + (($l$067$3$i*20)|0)|0)) + 4|0);
     HEAP32[$position$sroa$0$0$$sroa_idx$3$i>>2] = $r$072$i;
     $position$sroa$4$0$$sroa_idx3$3$i = (((($call2$i) + (($l$067$3$i*20)|0)|0)) + 8|0);
     HEAP32[$position$sroa$4$0$$sroa_idx3$3$i>>2] = $l$067$3$i;
     $position$sroa$5$0$$sroa_idx$3$i = (((($call2$i) + (($l$067$3$i*20)|0)|0)) + 12|0);
     HEAP8[$position$sroa$5$0$$sroa_idx$3$i>>0] = 3;
     $position$sroa$6$0$$sroa_raw_idx$3$i = ((($arrayidx21$3$i)) + 13|0);
     ;HEAP8[$position$sroa$6$0$$sroa_raw_idx$3$i>>0]=HEAP8[$position$i$byval_copy3>>0]|0;HEAP8[$position$sroa$6$0$$sroa_raw_idx$3$i+1>>0]=HEAP8[$position$i$byval_copy3+1>>0]|0;HEAP8[$position$sroa$6$0$$sroa_raw_idx$3$i+2>>0]=HEAP8[$position$i$byval_copy3+2>>0]|0;
     $position$sroa$67$0$$sroa_idx8$3$i = (((($call2$i) + (($l$067$3$i*20)|0)|0)) + 16|0);
     HEAP32[$position$sroa$67$0$$sroa_idx8$3$i>>2] = 0;
     $arrayidx23$3$i = (($call$i) + ($l$067$3$i<<2)|0);
     $call25$3$i = (_argon2_thread_create($arrayidx23$3$i,9,$arrayidx21$3$i)|0);
     $tobool26$3$i = ($call25$3$i|0)==(0);
     if (!($tobool26$3$i)) {
      label = 33;
      break L47;
     }
     $inc$3$i14 = (($l$067$3$i) + 1)|0;
     $39 = HEAP32[$lanes>>2]|0;
     $cmp12$3$i = ($inc$3$i14>>>0)<($39>>>0);
     if ($cmp12$3$i) {
      $l$067$3$i = $inc$3$i14;
     } else {
      $41 = $39;
      break;
     }
    }
   }
   $40 = HEAP32[$threads>>2]|0;
   $sub31$3$i = (($41) - ($40))|0;
   $cmp3468$3$i = ($sub31$3$i>>>0)<($41>>>0);
   if ($cmp3468$3$i) {
    $l$169$3$i = $sub31$3$i;
    while(1) {
     $arrayidx37$3$i = (($call$i) + ($l$169$3$i<<2)|0);
     $42 = HEAP32[$arrayidx37$3$i>>2]|0;
     $call38$3$i = (_argon2_thread_join($42)|0);
     $tobool39$3$i = ($call38$3$i|0)==(0);
     $inc43$3$i = (($l$169$3$i) + 1)|0;
     if (!($tobool39$3$i)) {
      $rc$561$i = -33;
      break L47;
     }
     $43 = HEAP32[$lanes>>2]|0;
     $cmp34$3$i = ($inc43$3$i>>>0)<($43>>>0);
     if ($cmp34$3$i) {
      $l$169$3$i = $inc43$3$i;
     } else {
      break;
     }
    }
   }
   $44 = HEAP32[$print_internals$i7>>2]|0;
   $tobool51$i = ($44|0)==(0);
   if (!($tobool51$i)) {
    _internal_kat($instance,$r$072$i);
   }
   $inc55$i = (($r$072$i) + 1)|0;
   $20 = HEAP32[$passes$i6>>2]|0;
   $cmp6$i = ($inc55$i>>>0)<($20>>>0);
   if (!($cmp6$i)) {
    $rc$561$i = 0;
    break;
   }
   $$pre$i = HEAP32[$lanes>>2]|0;
   $11 = $$pre$i;$r$072$i = $inc55$i;
  }
  if ((label|0) == 33) {
   $rc$561$i = -33;
  }
  _free($call$i);
  $rc$56182$i = $rc$561$i;
 }
 _free($call2$i);
 $retval$0 = $rc$56182$i;
 STACKTOP = sp;return ($retval$0|0);
}
function _fill_segment_thr($thread_data) {
 $thread_data = $thread_data|0;
 var $$byval_copy = 0, $0 = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $0 = HEAP32[$thread_data>>2]|0;
 $pos = ((($thread_data)) + 4|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$pos>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$pos+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$pos+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$pos+12>>2]|0;
 _fill_segment($0,$$byval_copy);
 _argon2_thread_exit();
 // unreachable;
 return (0)|0;
}
function _validate_inputs($context) {
 $context = $context|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ad = 0, $adlen = 0, $allocate_cbk = 0, $cmp = 0;
 var $cmp1 = 0, $cmp100 = 0, $cmp105 = 0, $cmp109 = 0, $cmp11 = 0, $cmp120 = 0, $cmp13 = 0, $cmp25 = 0, $cmp27 = 0, $cmp39 = 0, $cmp4 = 0, $cmp41 = 0, $cmp53 = 0, $cmp55 = 0, $cmp68 = 0, $cmp72 = 0, $cmp77 = 0, $cmp81 = 0, $cmp91 = 0, $cmp96 = 0;
 var $free_cbk119 = 0, $lanes = 0, $m_cost = 0, $mul = 0, $outlen = 0, $phitmp = 0, $pwd = 0, $pwdlen = 0, $retval$0 = 0, $salt = 0, $saltlen = 0, $secret = 0, $secretlen = 0, $spec$select = 0, $t_cost = 0, $threads = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($context|0)==(0|0);
 do {
  if ($cmp) {
   $retval$0 = -25;
  } else {
   $0 = HEAP32[$context>>2]|0;
   $cmp1 = ($0|0)==(0|0);
   if ($cmp1) {
    $retval$0 = -1;
   } else {
    $outlen = ((($context)) + 4|0);
    $1 = HEAP32[$outlen>>2]|0;
    $cmp4 = ($1>>>0)<(4);
    if ($cmp4) {
     $retval$0 = -2;
    } else {
     $pwd = ((($context)) + 8|0);
     $2 = HEAP32[$pwd>>2]|0;
     $cmp11 = ($2|0)==(0|0);
     if ($cmp11) {
      $pwdlen = ((($context)) + 12|0);
      $3 = HEAP32[$pwdlen>>2]|0;
      $cmp13 = ($3|0)==(0);
      if (!($cmp13)) {
       $retval$0 = -18;
       break;
      }
     }
     $salt = ((($context)) + 16|0);
     $4 = HEAP32[$salt>>2]|0;
     $cmp25 = ($4|0)==(0|0);
     $saltlen = ((($context)) + 20|0);
     $5 = HEAP32[$saltlen>>2]|0;
     if ($cmp25) {
      $cmp27 = ($5|0)==(0);
      $spec$select = $cmp27 ? -6 : -19;
      return ($spec$select|0);
     }
     $phitmp = ($5>>>0)<(8);
     if ($phitmp) {
      $retval$0 = -6;
     } else {
      $secret = ((($context)) + 24|0);
      $6 = HEAP32[$secret>>2]|0;
      $cmp39 = ($6|0)==(0|0);
      if ($cmp39) {
       $secretlen = ((($context)) + 28|0);
       $7 = HEAP32[$secretlen>>2]|0;
       $cmp41 = ($7|0)==(0);
       if (!($cmp41)) {
        $retval$0 = -20;
        break;
       }
      }
      $ad = ((($context)) + 32|0);
      $8 = HEAP32[$ad>>2]|0;
      $cmp53 = ($8|0)==(0|0);
      if ($cmp53) {
       $adlen = ((($context)) + 36|0);
       $9 = HEAP32[$adlen>>2]|0;
       $cmp55 = ($9|0)==(0);
       if (!($cmp55)) {
        $retval$0 = -21;
        break;
       }
      }
      $m_cost = ((($context)) + 44|0);
      $10 = HEAP32[$m_cost>>2]|0;
      $cmp68 = ($10>>>0)<(8);
      if ($cmp68) {
       $retval$0 = -14;
      } else {
       $cmp72 = ($10>>>0)>(2097152);
       if ($cmp72) {
        $retval$0 = -15;
       } else {
        $lanes = ((($context)) + 48|0);
        $11 = HEAP32[$lanes>>2]|0;
        $mul = $11 << 3;
        $cmp77 = ($10>>>0)<($mul>>>0);
        if ($cmp77) {
         $retval$0 = -14;
        } else {
         $t_cost = ((($context)) + 40|0);
         $12 = HEAP32[$t_cost>>2]|0;
         $cmp81 = ($12|0)==(0);
         if ($cmp81) {
          $retval$0 = -12;
         } else {
          $cmp91 = ($11|0)==(0);
          if ($cmp91) {
           $retval$0 = -16;
          } else {
           $cmp96 = ($11>>>0)>(16777215);
           if ($cmp96) {
            $retval$0 = -17;
           } else {
            $threads = ((($context)) + 52|0);
            $13 = HEAP32[$threads>>2]|0;
            $cmp100 = ($13|0)==(0);
            if ($cmp100) {
             $retval$0 = -28;
            } else {
             $cmp105 = ($13>>>0)>(16777215);
             if ($cmp105) {
              $retval$0 = -29;
             } else {
              $allocate_cbk = ((($context)) + 60|0);
              $14 = HEAP32[$allocate_cbk>>2]|0;
              $cmp109 = ($14|0)==(0|0);
              $free_cbk119 = ((($context)) + 64|0);
              $15 = HEAP32[$free_cbk119>>2]|0;
              $cmp120 = ($15|0)==(0|0);
              if ($cmp109) {
               if (!($cmp120)) {
                $retval$0 = -24;
                break;
               }
              } else {
               if ($cmp120) {
                $retval$0 = -23;
                break;
               }
              }
              $retval$0 = 0;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 return ($retval$0|0);
}
function _fill_first_blocks($blockhash,$instance) {
 $blockhash = $blockhash|0;
 $instance = $instance|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i16 = 0, $add$ptr2 = 0, $add9 = 0, $arrayidx$i = 0, $arrayidx$i17 = 0, $blockhash_bytes = 0, $cmp = 0, $cmp22 = 0, $exitcond$i = 0, $exitcond$i19 = 0, $i$05$i = 0, $i$05$i14 = 0;
 var $inc = 0, $inc$i = 0, $inc$i18 = 0, $l$023 = 0, $lane_length = 0, $lanes = 0, $mul = 0, $mul$i = 0, $mul$i15 = 0, $mul8 = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $blockhash_bytes = sp;
 $lanes = ((($instance)) + 24|0);
 $0 = HEAP32[$lanes>>2]|0;
 $cmp22 = ($0|0)==(0);
 if (!($cmp22)) {
  $add$ptr = ((($blockhash)) + 64|0);
  $add$ptr2 = ((($blockhash)) + 68|0);
  $lane_length = ((($instance)) + 20|0);
  $l$023 = 0;
  while(1) {
   HEAP32[$add$ptr>>2] = 0;
   HEAP32[$add$ptr2>>2] = $l$023;
   _blake2b_long($blockhash_bytes,1024,$blockhash,72);
   $1 = HEAP32[$instance>>2]|0;
   $2 = HEAP32[$lane_length>>2]|0;
   $mul = Math_imul($2, $l$023)|0;
   $i$05$i14 = 0;
   while(1) {
    $mul$i15 = $i$05$i14 << 3;
    $add$ptr$i16 = (($blockhash_bytes) + ($mul$i15)|0);
    $3 = $add$ptr$i16;
    $4 = $3;
    $5 = HEAP32[$4>>2]|0;
    $6 = (($3) + 4)|0;
    $7 = $6;
    $8 = HEAP32[$7>>2]|0;
    $arrayidx$i17 = ((($1) + ($mul<<10)|0) + ($i$05$i14<<3)|0);
    $9 = $arrayidx$i17;
    $10 = $9;
    HEAP32[$10>>2] = $5;
    $11 = (($9) + 4)|0;
    $12 = $11;
    HEAP32[$12>>2] = $8;
    $inc$i18 = (($i$05$i14) + 1)|0;
    $exitcond$i19 = ($inc$i18|0)==(128);
    if ($exitcond$i19) {
     break;
    } else {
     $i$05$i14 = $inc$i18;
    }
   }
   HEAP32[$add$ptr>>2] = 1;
   _blake2b_long($blockhash_bytes,1024,$blockhash,72);
   $13 = HEAP32[$instance>>2]|0;
   $14 = HEAP32[$lane_length>>2]|0;
   $mul8 = Math_imul($14, $l$023)|0;
   $add9 = (($mul8) + 1)|0;
   $i$05$i = 0;
   while(1) {
    $mul$i = $i$05$i << 3;
    $add$ptr$i = (($blockhash_bytes) + ($mul$i)|0);
    $15 = $add$ptr$i;
    $16 = $15;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($15) + 4)|0;
    $19 = $18;
    $20 = HEAP32[$19>>2]|0;
    $arrayidx$i = ((($13) + ($add9<<10)|0) + ($i$05$i<<3)|0);
    $21 = $arrayidx$i;
    $22 = $21;
    HEAP32[$22>>2] = $17;
    $23 = (($21) + 4)|0;
    $24 = $23;
    HEAP32[$24>>2] = $20;
    $inc$i = (($i$05$i) + 1)|0;
    $exitcond$i = ($inc$i|0)==(128);
    if ($exitcond$i) {
     break;
    } else {
     $i$05$i = $inc$i;
    }
   }
   $inc = (($l$023) + 1)|0;
   $25 = HEAP32[$lanes>>2]|0;
   $cmp = ($inc>>>0)<($25>>>0);
   if ($cmp) {
    $l$023 = $inc;
   } else {
    break;
   }
  }
 }
 $tobool$i = (1)==(0);
 if ($tobool$i) {
  STACKTOP = sp;return;
 }
 _secure_wipe_memory($blockhash_bytes,1024);
 STACKTOP = sp;return;
}
function _initial_hash($blockhash,$context,$type) {
 $blockhash = $blockhash|0;
 $context = $context|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $BlakeHash = 0, $ad = 0, $adlen = 0, $and = 0, $and22 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp17 = 0, $cmp2 = 0, $cmp30 = 0, $flags = 0, $flags21 = 0, $lanes = 0, $m_cost = 0, $or$cond = 0, $outlen = 0;
 var $pwd = 0, $pwdlen = 0, $salt = 0, $saltlen = 0, $secret = 0, $secretlen = 0, $t_cost = 0, $tobool = 0, $tobool23 = 0, $value31 = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $BlakeHash = sp;
 $value31 = sp + 216|0;
 $cmp = ($context|0)==(0|0);
 $cmp1 = ($blockhash|0)==(0|0);
 $or$cond = $cmp1 | $cmp;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 _blake2b_init($BlakeHash,64);
 $lanes = ((($context)) + 48|0);
 $0 = HEAP32[$lanes>>2]|0;
 HEAP32[$value31>>2] = $0;
 _blake2b_update($BlakeHash,$value31,4);
 $outlen = ((($context)) + 4|0);
 $1 = HEAP32[$outlen>>2]|0;
 HEAP32[$value31>>2] = $1;
 _blake2b_update($BlakeHash,$value31,4);
 $m_cost = ((($context)) + 44|0);
 $2 = HEAP32[$m_cost>>2]|0;
 HEAP32[$value31>>2] = $2;
 _blake2b_update($BlakeHash,$value31,4);
 $t_cost = ((($context)) + 40|0);
 $3 = HEAP32[$t_cost>>2]|0;
 HEAP32[$value31>>2] = $3;
 _blake2b_update($BlakeHash,$value31,4);
 $version = ((($context)) + 56|0);
 $4 = HEAP32[$version>>2]|0;
 HEAP32[$value31>>2] = $4;
 _blake2b_update($BlakeHash,$value31,4);
 HEAP32[$value31>>2] = $type;
 _blake2b_update($BlakeHash,$value31,4);
 $pwdlen = ((($context)) + 12|0);
 $5 = HEAP32[$pwdlen>>2]|0;
 HEAP32[$value31>>2] = $5;
 _blake2b_update($BlakeHash,$value31,4);
 $pwd = ((($context)) + 8|0);
 $6 = HEAP32[$pwd>>2]|0;
 $cmp2 = ($6|0)==(0|0);
 if (!($cmp2)) {
  $7 = HEAP32[$pwdlen>>2]|0;
  _blake2b_update($BlakeHash,$6,$7);
  $flags = ((($context)) + 68|0);
  $8 = HEAP32[$flags>>2]|0;
  $and = $8 & 1;
  $tobool = ($and|0)==(0);
  if (!($tobool)) {
   $9 = HEAP32[$pwd>>2]|0;
   $10 = HEAP32[$pwdlen>>2]|0;
   _secure_wipe_memory($9,$10);
   HEAP32[$pwdlen>>2] = 0;
  }
 }
 $saltlen = ((($context)) + 20|0);
 $11 = HEAP32[$saltlen>>2]|0;
 HEAP32[$value31>>2] = $11;
 _blake2b_update($BlakeHash,$value31,4);
 $salt = ((($context)) + 16|0);
 $12 = HEAP32[$salt>>2]|0;
 $cmp12 = ($12|0)==(0|0);
 if (!($cmp12)) {
  $13 = HEAP32[$saltlen>>2]|0;
  _blake2b_update($BlakeHash,$12,$13);
 }
 $secretlen = ((($context)) + 28|0);
 $14 = HEAP32[$secretlen>>2]|0;
 HEAP32[$value31>>2] = $14;
 _blake2b_update($BlakeHash,$value31,4);
 $secret = ((($context)) + 24|0);
 $15 = HEAP32[$secret>>2]|0;
 $cmp17 = ($15|0)==(0|0);
 if (!($cmp17)) {
  $16 = HEAP32[$secretlen>>2]|0;
  _blake2b_update($BlakeHash,$15,$16);
  $flags21 = ((($context)) + 68|0);
  $17 = HEAP32[$flags21>>2]|0;
  $and22 = $17 & 2;
  $tobool23 = ($and22|0)==(0);
  if (!($tobool23)) {
   $18 = HEAP32[$secret>>2]|0;
   $19 = HEAP32[$secretlen>>2]|0;
   _secure_wipe_memory($18,$19);
   HEAP32[$secretlen>>2] = 0;
  }
 }
 $adlen = ((($context)) + 36|0);
 $20 = HEAP32[$adlen>>2]|0;
 HEAP32[$value31>>2] = $20;
 _blake2b_update($BlakeHash,$value31,4);
 $ad = ((($context)) + 32|0);
 $21 = HEAP32[$ad>>2]|0;
 $cmp30 = ($21|0)==(0|0);
 if (!($cmp30)) {
  $22 = HEAP32[$adlen>>2]|0;
  _blake2b_update($BlakeHash,$21,$22);
 }
 _blake2b_final($BlakeHash,$blockhash,64);
 STACKTOP = sp;return;
}
function _initialize($instance,$context) {
 $instance = $instance|0;
 $context = $context|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$ptr = 0, $allocate_cbk$i = 0, $blockhash = 0, $call8$i = 0, $cmp = 0, $cmp$i = 0, $cmp1 = 0, $cmp1$i = 0, $cmp12$i = 0, $cmp2$i = 0, $context_ptr = 0, $div$i = 0;
 var $memory_blocks$i = 0, $mul$i = 0, $or$cond = 0, $or$cond$i = 0, $print_internals = 0, $retval$0 = 0, $tobool = 0, $tobool$i = 0, $tobool$i13 = 0, $tobool$i15 = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $blockhash = sp;
 $cmp = ($instance|0)==(0|0);
 $cmp1 = ($context|0)==(0|0);
 $or$cond = $cmp | $cmp1;
 if ($or$cond) {
  $retval$0 = -25;
  STACKTOP = sp;return ($retval$0|0);
 }
 $context_ptr = ((($instance)) + 44|0);
 HEAP32[$context_ptr>>2] = $context;
 $memory_blocks$i = ((($instance)) + 12|0);
 $0 = HEAP32[$memory_blocks$i>>2]|0;
 $mul$i = $0 << 10;
 $1 = HEAP32[$instance>>2]|0;
 $cmp$i = ($1|0)==(0|0);
 if ($cmp$i) {
  $cmp1$i = ($0|0)==(0);
  $div$i = $0 & 4194303;
  $cmp2$i = ($div$i|0)==($0|0);
  $or$cond$i = $cmp1$i | $cmp2$i;
  if (!($or$cond$i)) {
   $retval$0 = -22;
   STACKTOP = sp;return ($retval$0|0);
  }
  $allocate_cbk$i = ((($context)) + 60|0);
  $2 = HEAP32[$allocate_cbk$i>>2]|0;
  $tobool$i = ($2|0)==(0|0);
  if ($tobool$i) {
   $call8$i = (_malloc($mul$i)|0);
   HEAP32[$instance>>2] = $call8$i;
   $3 = $call8$i;
  } else {
   (FUNCTION_TABLE_iii[$2 & 7]($instance,$mul$i)|0);
   $$pre$i = HEAP32[$instance>>2]|0;
   $3 = $$pre$i;
  }
  $cmp12$i = ($3|0)==(0|0);
  if ($cmp12$i) {
   $retval$0 = -22;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $type = ((($instance)) + 32|0);
 $4 = HEAP32[$type>>2]|0;
 _initial_hash($blockhash,$context,$4);
 $tobool$i13 = (1)==(0);
 if (!($tobool$i13)) {
  $add$ptr = ((($blockhash)) + 64|0);
  _secure_wipe_memory($add$ptr,8);
 }
 $print_internals = ((($instance)) + 36|0);
 $5 = HEAP32[$print_internals>>2]|0;
 $tobool = ($5|0)==(0);
 if (!($tobool)) {
  $6 = HEAP32[$type>>2]|0;
  _initial_kat($blockhash,$context,$6);
 }
 _fill_first_blocks($blockhash,$instance);
 $tobool$i15 = (1)==(0);
 if ($tobool$i15) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 _secure_wipe_memory($blockhash,72);
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _encode_string($dst,$dst_len,$ctx,$type) {
 $dst = $dst|0;
 $dst_len = $dst_len|0;
 $ctx = $ctx|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $acc$027$i = 0, $acc$027$i214 = 0, $acc_len$028$i = 0, $acc_len$028$i213 = 0, $acc_len$1$lcssa$i = 0;
 var $acc_len$1$lcssa$i236 = 0, $acc_len$121$i = 0, $acc_len$121$i226 = 0, $add$i = 0, $add$i163 = 0, $add$i168 = 0, $add$i204 = 0, $add$i254 = 0, $add$i286 = 0, $add$ptr = 0, $add$ptr101 = 0, $add$ptr121 = 0, $add$ptr139 = 0, $add$ptr14 = 0, $add$ptr159 = 0, $add$ptr177 = 0, $add$ptr202 = 0, $add$ptr27 = 0, $add$ptr45 = 0, $add$ptr63 = 0;
 var $add$ptr83 = 0, $add120 = 0, $add13 = 0, $add158 = 0, $add19$i = 0, $add19$i180 = 0, $add19$i266 = 0, $add19$i298 = 0, $add4$i = 0, $add4$i221 = 0, $add44 = 0, $add5$i = 0, $add5$i222 = 0, $add82 = 0, $add9$i = 0, $add9$i174 = 0, $add9$i260 = 0, $add9$i292 = 0, $and$i = 0, $and$i230 = 0;
 var $and1$i = 0, $and1$i169 = 0, $and1$i255 = 0, $and1$i287 = 0, $and10$i = 0, $and10$i176 = 0, $and10$i262 = 0, $and10$i294 = 0, $and18$i = 0, $and18$i164 = 0, $and18$i181 = 0, $and18$i244 = 0, $and18$i267 = 0, $and18$i299 = 0, $and20$i = 0, $and20$i182 = 0, $and20$i268 = 0, $and20$i300 = 0, $and27$i = 0, $and27$i187 = 0;
 var $and27$i273 = 0, $and27$i305 = 0, $and34$i = 0, $and34$i192 = 0, $and34$i278 = 0, $and34$i310 = 0, $and8$i = 0, $and8$i175 = 0, $and8$i261 = 0, $and8$i293 = 0, $buf$026$i = 0, $buf$026$i215 = 0, $call = 0, $call1 = 0, $call115 = 0, $call153 = 0, $call39 = 0, $call77 = 0, $call9 = 0, $cmp = 0;
 var $cmp$i = 0, $cmp$i207 = 0, $cmp10 = 0, $cmp116 = 0, $cmp13$i = 0, $cmp13$i239 = 0, $cmp135 = 0, $cmp154 = 0, $cmp173 = 0, $cmp186 = 0, $cmp198 = 0, $cmp2$i = 0, $cmp2$i237 = 0, $cmp212 = 0, $cmp224$i = 0, $cmp224$i209 = 0, $cmp23 = 0, $cmp4 = 0, $cmp40 = 0, $cmp59 = 0;
 var $cmp7$i = 0, $cmp7$i233 = 0, $cmp719$i = 0, $cmp719$i223 = 0, $cmp78 = 0, $cmp97 = 0, $conv$i = 0, $conv$i220 = 0, $conv10$i = 0, $conv10$i231 = 0, $conv20$i = 0, $conv20$i245 = 0, $dec29$i = 0, $dec29$i217 = 0, $dec29$in$i = 0, $dec29$in$i212 = 0, $div$i = 0, $div$i197 = 0, $dst$addr$025$i = 0, $dst$addr$025$i216 = 0;
 var $dst$addr$1$lcssa$i = 0, $dst$addr$1$lcssa$i235 = 0, $dst$addr$11360 = 0, $dst$addr$120$i = 0, $dst$addr$120$i227 = 0, $dst$addr$2$i = 0, $dst$addr$2$i247 = 0, $dst_len$addr$11359 = 0, $inc$i = 0, $inc$i201 = 0, $incdec$ptr$i = 0, $incdec$ptr$i219 = 0, $incdec$ptr11$i = 0, $incdec$ptr11$i232 = 0, $incdec$ptr21$i = 0, $incdec$ptr21$i241 = 0, $lanes = 0, $m_cost = 0, $olen$0$i = 0, $olen$0$i203 = 0;
 var $olen$1$i = 0, $olen$1$i206 = 0, $or$i = 0, $or$i193 = 0, $or$i279 = 0, $or$i311 = 0, $or21$i = 0, $or21$i194 = 0, $or21$i280 = 0, $or21$i312 = 0, $or28$i = 0, $or28$i195 = 0, $or28$i281 = 0, $or28$i313 = 0, $or35$i = 0, $or35$i196 = 0, $or35$i282 = 0, $or35$i314 = 0, $outlen = 0, $salt = 0;
 var $saltlen = 0, $shl$i = 0, $shl$i198 = 0, $shl17$i = 0, $shl17$i243 = 0, $shl3$i = 0, $shl3$i218 = 0, $shr$i = 0, $shr$i161 = 0, $shr$i166 = 0, $shr$i229 = 0, $shr$i252 = 0, $shr$i284 = 0, $shr16$i = 0, $shr16$i179 = 0, $shr16$i265 = 0, $shr16$i297 = 0, $shr24$i = 0, $shr24$i185 = 0, $shr24$i271 = 0;
 var $shr24$i303 = 0, $shr31$i = 0, $shr31$i190 = 0, $shr31$i276 = 0, $shr31$i308 = 0, $shr6$i = 0, $shr6$i172 = 0, $shr6$i258 = 0, $shr6$i290 = 0, $sub = 0, $sub$i = 0, $sub$i160 = 0, $sub$i165 = 0, $sub$i228 = 0, $sub$i251 = 0, $sub$i283 = 0, $sub102 = 0, $sub122 = 0, $sub140 = 0, $sub15 = 0;
 var $sub15$i = 0, $sub15$i178 = 0, $sub15$i264 = 0, $sub15$i296 = 0, $sub16$i = 0, $sub16$i242 = 0, $sub160 = 0, $sub178 = 0, $sub190 = 0, $sub190356$pn = 0, $sub203 = 0, $sub23$i = 0, $sub23$i184 = 0, $sub23$i270 = 0, $sub23$i302 = 0, $sub28 = 0, $sub30$i = 0, $sub30$i189 = 0, $sub30$i275 = 0, $sub30$i307 = 0;
 var $sub46 = 0, $sub5$i = 0, $sub5$i171 = 0, $sub5$i257 = 0, $sub5$i289 = 0, $sub64 = 0, $sub84 = 0, $t_cost = 0, $tmp = 0, $tobool = 0, $trunc$i = 0, $trunc$i$clear = 0, $trunc$i200 = 0, $trunc$i200$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $version = 0, $xor$i = 0;
 var $xor$i170 = 0, $xor$i256 = 0, $xor$i288 = 0, $xor14$i = 0, $xor14$i177 = 0, $xor14$i263 = 0, $xor14$i295 = 0, $xor22$i = 0, $xor22$i183 = 0, $xor22$i269 = 0, $xor22$i301 = 0, $xor26$i = 0, $xor26$i186 = 0, $xor26$i272 = 0, $xor26$i304 = 0, $xor29$i = 0, $xor29$i188 = 0, $xor29$i274 = 0, $xor29$i306 = 0, $xor33$i = 0;
 var $xor33$i191 = 0, $xor33$i277 = 0, $xor33$i309 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer7 = sp + 128|0;
 $vararg_buffer4 = sp + 96|0;
 $vararg_buffer1 = sp + 64|0;
 $vararg_buffer = sp + 32|0;
 $tmp = sp;
 $call = (_argon2_type2string($type,0)|0);
 $call1 = (_validate_inputs($ctx)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 $cmp = ($call1|0)==(0);
 if (!($cmp)) {
  $14 = $call1;
  STACKTOP = sp;return ($14|0);
 }
 $cmp4 = ($dst_len>>>0)<(2);
 $add$ptr = ((($dst)) + 1|0);
 $sub = (($dst_len) + -1)|0;
 if ($cmp4) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 HEAP8[$dst>>0]=36&255;HEAP8[$dst+1>>0]=36>>8;
 $call9 = (_strlen($call)|0);
 $cmp10 = ($sub>>>0)>($call9>>>0);
 $add$ptr14 = (($add$ptr) + ($call9)|0);
 $sub15 = (($sub) - ($call9))|0;
 if (!($cmp10)) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 $add13 = (($call9) + 1)|0;
 _memcpy(($add$ptr|0),($call|0),($add13|0))|0;
 $cmp23 = ($sub15>>>0)<(4);
 $add$ptr27 = ((($add$ptr14)) + 3|0);
 $sub28 = (($sub15) + -3)|0;
 if ($cmp23) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 HEAP8[$add$ptr14>>0]=4027940&255;HEAP8[$add$ptr14+1>>0]=(4027940>>8)&255;HEAP8[$add$ptr14+2>>0]=(4027940>>16)&255;HEAP8[$add$ptr14+3>>0]=4027940>>24;
 $version = ((($ctx)) + 56|0);
 $0 = HEAP32[$version>>2]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 (_sprintf($tmp,45899,$vararg_buffer)|0);
 $call39 = (_strlen($tmp)|0);
 $cmp40 = ($sub28>>>0)>($call39>>>0);
 $add$ptr45 = (($add$ptr27) + ($call39)|0);
 $sub46 = (($sub28) - ($call39))|0;
 if (!($cmp40)) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 $add44 = (($call39) + 1)|0;
 _memcpy(($add$ptr27|0),($tmp|0),($add44|0))|0;
 $cmp59 = ($sub46>>>0)<(4);
 $add$ptr63 = ((($add$ptr45)) + 3|0);
 $sub64 = (($sub46) + -3)|0;
 if ($cmp59) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 HEAP8[$add$ptr45>>0]=4025636&255;HEAP8[$add$ptr45+1>>0]=(4025636>>8)&255;HEAP8[$add$ptr45+2>>0]=(4025636>>16)&255;HEAP8[$add$ptr45+3>>0]=4025636>>24;
 $m_cost = ((($ctx)) + 44|0);
 $1 = HEAP32[$m_cost>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $1;
 (_sprintf($vararg_buffer,45899,$vararg_buffer1)|0);
 $call77 = (_strlen($vararg_buffer)|0);
 $cmp78 = ($sub64>>>0)>($call77>>>0);
 $add$ptr83 = (($add$ptr63) + ($call77)|0);
 $sub84 = (($sub64) - ($call77))|0;
 if (!($cmp78)) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 $add82 = (($call77) + 1)|0;
 _memcpy(($add$ptr63|0),($vararg_buffer|0),($add82|0))|0;
 $cmp97 = ($sub84>>>0)<(4);
 $add$ptr101 = ((($add$ptr83)) + 3|0);
 $sub102 = (($sub84) + -3)|0;
 if ($cmp97) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 HEAP8[$add$ptr83>>0]=4027436&255;HEAP8[$add$ptr83+1>>0]=(4027436>>8)&255;HEAP8[$add$ptr83+2>>0]=(4027436>>16)&255;HEAP8[$add$ptr83+3>>0]=4027436>>24;
 $t_cost = ((($ctx)) + 40|0);
 $2 = HEAP32[$t_cost>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $2;
 (_sprintf($vararg_buffer1,45899,$vararg_buffer4)|0);
 $call115 = (_strlen($vararg_buffer1)|0);
 $cmp116 = ($sub102>>>0)>($call115>>>0);
 $add$ptr121 = (($add$ptr101) + ($call115)|0);
 $sub122 = (($sub102) - ($call115))|0;
 if (!($cmp116)) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 $add120 = (($call115) + 1)|0;
 _memcpy(($add$ptr101|0),($vararg_buffer1|0),($add120|0))|0;
 $cmp135 = ($sub122>>>0)<(4);
 $add$ptr139 = ((($add$ptr121)) + 3|0);
 $sub140 = (($sub122) + -3)|0;
 if ($cmp135) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 HEAP8[$add$ptr121>>0]=4026412&255;HEAP8[$add$ptr121+1>>0]=(4026412>>8)&255;HEAP8[$add$ptr121+2>>0]=(4026412>>16)&255;HEAP8[$add$ptr121+3>>0]=4026412>>24;
 $lanes = ((($ctx)) + 48|0);
 $3 = HEAP32[$lanes>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $3;
 (_sprintf($vararg_buffer4,45899,$vararg_buffer7)|0);
 $call153 = (_strlen($vararg_buffer4)|0);
 $cmp154 = ($sub140>>>0)>($call153>>>0);
 $add$ptr159 = (($add$ptr139) + ($call153)|0);
 $sub160 = (($sub140) - ($call153))|0;
 if (!($cmp154)) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 $add158 = (($call153) + 1)|0;
 _memcpy(($add$ptr139|0),($vararg_buffer4|0),($add158|0))|0;
 $cmp173 = ($sub160>>>0)<(2);
 $add$ptr177 = ((($add$ptr159)) + 1|0);
 $sub178 = (($sub160) + -1)|0;
 if ($cmp173) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 HEAP8[$add$ptr159>>0]=36&255;HEAP8[$add$ptr159+1>>0]=36>>8;
 $salt = ((($ctx)) + 16|0);
 $4 = HEAP32[$salt>>2]|0;
 $saltlen = ((($ctx)) + 20|0);
 $5 = HEAP32[$saltlen>>2]|0;
 $div$i = (($5>>>0) / 3)&-1;
 $shl$i = $div$i << 2;
 $6 = ($div$i*3)|0;
 $7 = (($5) - ($6))|0;
 $trunc$i = $7&255;
 $trunc$i$clear = $trunc$i & 3;
 switch ($trunc$i$clear<<24>>24) {
 case 2:  {
  $inc$i = $shl$i | 1;
  $olen$0$i = $inc$i;
  label = 20;
  break;
 }
 case 1:  {
  $olen$0$i = $shl$i;
  label = 20;
  break;
 }
 default: {
  $olen$1$i = $shl$i;
 }
 }
 if ((label|0) == 20) {
  $add$i = (($olen$0$i) + 2)|0;
  $olen$1$i = $add$i;
 }
 $cmp$i = ($sub178>>>0)>($olen$1$i>>>0);
 if (!($cmp$i)) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 $cmp224$i = ($5|0)==(0);
 if ($cmp224$i) {
  HEAP8[$add$ptr177>>0] = 0;
  $sub190356$pn = $olen$1$i;
 } else {
  $acc$027$i = 0;$acc_len$028$i = 0;$buf$026$i = $4;$dec29$in$i = $5;$dst$addr$025$i = $add$ptr177;
  while(1) {
   $dec29$i = (($dec29$in$i) + -1)|0;
   $shl3$i = $acc$027$i << 8;
   $incdec$ptr$i = ((($buf$026$i)) + 1|0);
   $8 = HEAP8[$buf$026$i>>0]|0;
   $conv$i = $8&255;
   $add4$i = $shl3$i | $conv$i;
   $add5$i = (($acc_len$028$i) + 8)|0;
   $cmp719$i = ($add5$i>>>0)>(5);
   if ($cmp719$i) {
    $acc_len$121$i = $add5$i;$dst$addr$120$i = $dst$addr$025$i;
    while(1) {
     $sub$i = (($acc_len$121$i) + -6)|0;
     $shr$i = $add4$i >>> $sub$i;
     $and$i = $shr$i & 63;
     $sub$i165 = (($and$i) + 65510)|0;
     $shr$i166 = $sub$i165 >>> 8;
     $add$i168 = (($and$i) + 65)|0;
     $and1$i169 = $shr$i166 & $add$i168;
     $xor$i170 = $shr$i166 ^ 255;
     $sub5$i171 = (($and$i) + 65484)|0;
     $shr6$i172 = $sub5$i171 >>> 8;
     $add9$i174 = (($and$i) + 71)|0;
     $and8$i175 = $shr6$i172 & $add9$i174;
     $and10$i176 = $and8$i175 & $xor$i170;
     $xor14$i177 = $shr6$i172 ^ 255;
     $sub15$i178 = (($and$i) + 65474)|0;
     $shr16$i179 = $sub15$i178 >>> 8;
     $add19$i180 = (($and$i) + 252)|0;
     $and18$i181 = $shr16$i179 & $add19$i180;
     $and20$i182 = $and18$i181 & $xor14$i177;
     $xor22$i183 = $and$i ^ 62;
     $sub23$i184 = (0 - ($xor22$i183))|0;
     $shr24$i185 = $sub23$i184 >>> 8;
     $xor26$i186 = $shr24$i185 & 43;
     $and27$i187 = $xor26$i186 ^ 43;
     $xor29$i188 = $and$i ^ 63;
     $sub30$i189 = (0 - ($xor29$i188))|0;
     $shr31$i190 = $sub30$i189 >>> 8;
     $xor33$i191 = $shr31$i190 & 47;
     $and34$i192 = $xor33$i191 ^ 47;
     $or$i193 = $and27$i187 | $and1$i169;
     $or21$i194 = $or$i193 | $and34$i192;
     $or28$i195 = $or21$i194 | $and10$i176;
     $or35$i196 = $or28$i195 | $and20$i182;
     $conv10$i = $or35$i196&255;
     $incdec$ptr11$i = ((($dst$addr$120$i)) + 1|0);
     HEAP8[$dst$addr$120$i>>0] = $conv10$i;
     $cmp7$i = ($sub$i>>>0)>(5);
     if ($cmp7$i) {
      $acc_len$121$i = $sub$i;$dst$addr$120$i = $incdec$ptr11$i;
     } else {
      $acc_len$1$lcssa$i = $sub$i;$dst$addr$1$lcssa$i = $incdec$ptr11$i;
      break;
     }
    }
   } else {
    $acc_len$1$lcssa$i = $add5$i;$dst$addr$1$lcssa$i = $dst$addr$025$i;
   }
   $cmp2$i = ($dec29$i|0)==(0);
   if ($cmp2$i) {
    break;
   } else {
    $acc$027$i = $add4$i;$acc_len$028$i = $acc_len$1$lcssa$i;$buf$026$i = $incdec$ptr$i;$dec29$in$i = $dec29$i;$dst$addr$025$i = $dst$addr$1$lcssa$i;
   }
  }
  $cmp13$i = ($acc_len$1$lcssa$i|0)==(0);
  if ($cmp13$i) {
   $dst$addr$2$i = $dst$addr$1$lcssa$i;
  } else {
   $incdec$ptr21$i = ((($dst$addr$1$lcssa$i)) + 1|0);
   $sub16$i = (6 - ($acc_len$1$lcssa$i))|0;
   $shl17$i = $add4$i << $sub16$i;
   $and18$i = $shl17$i & 63;
   $sub$i160 = (($and18$i) + 65510)|0;
   $shr$i161 = $sub$i160 >>> 8;
   $add$i163 = (($and18$i) + 65)|0;
   $and1$i = $shr$i161 & $add$i163;
   $xor$i = $shr$i161 ^ 255;
   $sub5$i = (($and18$i) + 65484)|0;
   $shr6$i = $sub5$i >>> 8;
   $add9$i = (($and18$i) + 71)|0;
   $and8$i = $shr6$i & $add9$i;
   $and10$i = $and8$i & $xor$i;
   $xor14$i = $shr6$i ^ 255;
   $sub15$i = (($and18$i) + 65474)|0;
   $shr16$i = $sub15$i >>> 8;
   $add19$i = (($and18$i) + 252)|0;
   $and18$i164 = $shr16$i & $add19$i;
   $and20$i = $and18$i164 & $xor14$i;
   $xor22$i = $and18$i ^ 62;
   $sub23$i = (0 - ($xor22$i))|0;
   $shr24$i = $sub23$i >>> 8;
   $xor26$i = $shr24$i & 43;
   $and27$i = $xor26$i ^ 43;
   $xor29$i = $and18$i ^ 63;
   $sub30$i = (0 - ($xor29$i))|0;
   $shr31$i = $sub30$i >>> 8;
   $xor33$i = $shr31$i & 47;
   $and34$i = $xor33$i ^ 47;
   $or$i = $and27$i | $and1$i;
   $or21$i = $or$i | $and34$i;
   $or28$i = $or21$i | $and10$i;
   $or35$i = $or28$i | $and20$i;
   $conv20$i = $or35$i&255;
   HEAP8[$dst$addr$1$lcssa$i>>0] = $conv20$i;
   $dst$addr$2$i = $incdec$ptr21$i;
  }
  HEAP8[$dst$addr$2$i>>0] = 0;
  $cmp186 = ($olen$1$i|0)==(-1);
  $sub190 = $cmp186 ? 0 : $olen$1$i;
  if ($cmp186) {
   $14 = -31;
   STACKTOP = sp;return ($14|0);
  } else {
   $sub190356$pn = $sub190;
  }
 }
 $dst_len$addr$11359 = (($sub178) - ($sub190356$pn))|0;
 $dst$addr$11360 = (($add$ptr177) + ($olen$1$i)|0);
 $cmp198 = ($dst_len$addr$11359>>>0)<(2);
 $add$ptr202 = ((($dst$addr$11360)) + 1|0);
 $sub203 = (($dst_len$addr$11359) + -1)|0;
 if ($cmp198) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 HEAP8[$dst$addr$11360>>0]=36&255;HEAP8[$dst$addr$11360+1>>0]=36>>8;
 $9 = HEAP32[$ctx>>2]|0;
 $outlen = ((($ctx)) + 4|0);
 $10 = HEAP32[$outlen>>2]|0;
 $div$i197 = (($10>>>0) / 3)&-1;
 $shl$i198 = $div$i197 << 2;
 $11 = ($div$i197*3)|0;
 $12 = (($10) - ($11))|0;
 $trunc$i200 = $12&255;
 $trunc$i200$clear = $trunc$i200 & 3;
 switch ($trunc$i200$clear<<24>>24) {
 case 2:  {
  $inc$i201 = $shl$i198 | 1;
  $olen$0$i203 = $inc$i201;
  label = 35;
  break;
 }
 case 1:  {
  $olen$0$i203 = $shl$i198;
  label = 35;
  break;
 }
 default: {
  $olen$1$i206 = $shl$i198;
 }
 }
 if ((label|0) == 35) {
  $add$i204 = (($olen$0$i203) + 2)|0;
  $olen$1$i206 = $add$i204;
 }
 $cmp$i207 = ($olen$1$i206>>>0)<($sub203>>>0);
 if (!($cmp$i207)) {
  $14 = -31;
  STACKTOP = sp;return ($14|0);
 }
 $cmp224$i209 = ($10|0)==(0);
 do {
  if ($cmp224$i209) {
   HEAP8[$add$ptr202>>0] = 0;
  } else {
   $acc$027$i214 = 0;$acc_len$028$i213 = 0;$buf$026$i215 = $9;$dec29$in$i212 = $10;$dst$addr$025$i216 = $add$ptr202;
   while(1) {
    $dec29$i217 = (($dec29$in$i212) + -1)|0;
    $shl3$i218 = $acc$027$i214 << 8;
    $incdec$ptr$i219 = ((($buf$026$i215)) + 1|0);
    $13 = HEAP8[$buf$026$i215>>0]|0;
    $conv$i220 = $13&255;
    $add4$i221 = $shl3$i218 | $conv$i220;
    $add5$i222 = (($acc_len$028$i213) + 8)|0;
    $cmp719$i223 = ($add5$i222>>>0)>(5);
    if ($cmp719$i223) {
     $acc_len$121$i226 = $add5$i222;$dst$addr$120$i227 = $dst$addr$025$i216;
     while(1) {
      $sub$i228 = (($acc_len$121$i226) + -6)|0;
      $shr$i229 = $add4$i221 >>> $sub$i228;
      $and$i230 = $shr$i229 & 63;
      $sub$i283 = (($and$i230) + 65510)|0;
      $shr$i284 = $sub$i283 >>> 8;
      $add$i286 = (($and$i230) + 65)|0;
      $and1$i287 = $shr$i284 & $add$i286;
      $xor$i288 = $shr$i284 ^ 255;
      $sub5$i289 = (($and$i230) + 65484)|0;
      $shr6$i290 = $sub5$i289 >>> 8;
      $add9$i292 = (($and$i230) + 71)|0;
      $and8$i293 = $shr6$i290 & $add9$i292;
      $and10$i294 = $and8$i293 & $xor$i288;
      $xor14$i295 = $shr6$i290 ^ 255;
      $sub15$i296 = (($and$i230) + 65474)|0;
      $shr16$i297 = $sub15$i296 >>> 8;
      $add19$i298 = (($and$i230) + 252)|0;
      $and18$i299 = $shr16$i297 & $add19$i298;
      $and20$i300 = $and18$i299 & $xor14$i295;
      $xor22$i301 = $and$i230 ^ 62;
      $sub23$i302 = (0 - ($xor22$i301))|0;
      $shr24$i303 = $sub23$i302 >>> 8;
      $xor26$i304 = $shr24$i303 & 43;
      $and27$i305 = $xor26$i304 ^ 43;
      $xor29$i306 = $and$i230 ^ 63;
      $sub30$i307 = (0 - ($xor29$i306))|0;
      $shr31$i308 = $sub30$i307 >>> 8;
      $xor33$i309 = $shr31$i308 & 47;
      $and34$i310 = $xor33$i309 ^ 47;
      $or$i311 = $and27$i305 | $and1$i287;
      $or21$i312 = $or$i311 | $and34$i310;
      $or28$i313 = $or21$i312 | $and10$i294;
      $or35$i314 = $or28$i313 | $and20$i300;
      $conv10$i231 = $or35$i314&255;
      $incdec$ptr11$i232 = ((($dst$addr$120$i227)) + 1|0);
      HEAP8[$dst$addr$120$i227>>0] = $conv10$i231;
      $cmp7$i233 = ($sub$i228>>>0)>(5);
      if ($cmp7$i233) {
       $acc_len$121$i226 = $sub$i228;$dst$addr$120$i227 = $incdec$ptr11$i232;
      } else {
       $acc_len$1$lcssa$i236 = $sub$i228;$dst$addr$1$lcssa$i235 = $incdec$ptr11$i232;
       break;
      }
     }
    } else {
     $acc_len$1$lcssa$i236 = $add5$i222;$dst$addr$1$lcssa$i235 = $dst$addr$025$i216;
    }
    $cmp2$i237 = ($dec29$i217|0)==(0);
    if ($cmp2$i237) {
     break;
    } else {
     $acc$027$i214 = $add4$i221;$acc_len$028$i213 = $acc_len$1$lcssa$i236;$buf$026$i215 = $incdec$ptr$i219;$dec29$in$i212 = $dec29$i217;$dst$addr$025$i216 = $dst$addr$1$lcssa$i235;
    }
   }
   $cmp13$i239 = ($acc_len$1$lcssa$i236|0)==(0);
   if ($cmp13$i239) {
    $dst$addr$2$i247 = $dst$addr$1$lcssa$i235;
   } else {
    $incdec$ptr21$i241 = ((($dst$addr$1$lcssa$i235)) + 1|0);
    $sub16$i242 = (6 - ($acc_len$1$lcssa$i236))|0;
    $shl17$i243 = $add4$i221 << $sub16$i242;
    $and18$i244 = $shl17$i243 & 63;
    $sub$i251 = (($and18$i244) + 65510)|0;
    $shr$i252 = $sub$i251 >>> 8;
    $add$i254 = (($and18$i244) + 65)|0;
    $and1$i255 = $shr$i252 & $add$i254;
    $xor$i256 = $shr$i252 ^ 255;
    $sub5$i257 = (($and18$i244) + 65484)|0;
    $shr6$i258 = $sub5$i257 >>> 8;
    $add9$i260 = (($and18$i244) + 71)|0;
    $and8$i261 = $shr6$i258 & $add9$i260;
    $and10$i262 = $and8$i261 & $xor$i256;
    $xor14$i263 = $shr6$i258 ^ 255;
    $sub15$i264 = (($and18$i244) + 65474)|0;
    $shr16$i265 = $sub15$i264 >>> 8;
    $add19$i266 = (($and18$i244) + 252)|0;
    $and18$i267 = $shr16$i265 & $add19$i266;
    $and20$i268 = $and18$i267 & $xor14$i263;
    $xor22$i269 = $and18$i244 ^ 62;
    $sub23$i270 = (0 - ($xor22$i269))|0;
    $shr24$i271 = $sub23$i270 >>> 8;
    $xor26$i272 = $shr24$i271 & 43;
    $and27$i273 = $xor26$i272 ^ 43;
    $xor29$i274 = $and18$i244 ^ 63;
    $sub30$i275 = (0 - ($xor29$i274))|0;
    $shr31$i276 = $sub30$i275 >>> 8;
    $xor33$i277 = $shr31$i276 & 47;
    $and34$i278 = $xor33$i277 ^ 47;
    $or$i279 = $and27$i273 | $and1$i255;
    $or21$i280 = $or$i279 | $and34$i278;
    $or28$i281 = $or21$i280 | $and10$i262;
    $or35$i282 = $or28$i281 | $and20$i268;
    $conv20$i245 = $or35$i282&255;
    HEAP8[$dst$addr$1$lcssa$i235>>0] = $conv20$i245;
    $dst$addr$2$i247 = $incdec$ptr21$i241;
   }
   HEAP8[$dst$addr$2$i247>>0] = 0;
   $cmp212 = ($olen$1$i206|0)==(-1);
   if ($cmp212) {
    $14 = -31;
   } else {
    break;
   }
   STACKTOP = sp;return ($14|0);
  }
 } while(0);
 $14 = 0;
 STACKTOP = sp;return ($14|0);
}
function _initial_kat($blockhash,$context,$type) {
 $blockhash = $blockhash|0;
 $context = $context|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ad = 0, $adlen = 0, $and = 0, $and28 = 0, $arrayidx = 0, $arrayidx19 = 0, $arrayidx38 = 0, $arrayidx52 = 0, $arrayidx64 = 0, $call2 = 0, $cmp = 0, $cmp1 = 0;
 var $cmp10 = 0, $cmp1050 = 0, $cmp16 = 0, $cmp1648 = 0, $cmp35 = 0, $cmp3546 = 0, $cmp49 = 0, $cmp4944 = 0, $conv = 0, $conv20 = 0, $conv39 = 0, $conv53 = 0, $conv65 = 0, $exitcond = 0, $flags = 0, $i$051 = 0, $i$149 = 0, $i$247 = 0, $i$345 = 0, $i$443 = 0;
 var $inc = 0, $inc23 = 0, $inc42 = 0, $inc56 = 0, $inc68 = 0, $lanes = 0, $m_cost = 0, $or$cond = 0, $outlen = 0, $pwd = 0, $pwdlen = 0, $salt = 0, $saltlen = 0, $secret = 0, $secretlen = 0, $t_cost = 0, $tobool = 0, $tobool29 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer32 = sp + 88|0;
 $vararg_buffer29 = sp + 80|0;
 $vararg_buffer26 = sp + 72|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $cmp = ($blockhash|0)!=(0|0);
 $cmp1 = ($context|0)!=(0|0);
 $or$cond = $cmp & $cmp1;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 (_puts(45903)|0);
 $call2 = (_argon2_type2string($type,1)|0);
 $version = ((($context)) + 56|0);
 $0 = HEAP32[$version>>2]|0;
 HEAP32[$vararg_buffer>>2] = $call2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 (_printf(45943,$vararg_buffer)|0);
 (_puts(45903)|0);
 $m_cost = ((($context)) + 44|0);
 $1 = HEAP32[$m_cost>>2]|0;
 $t_cost = ((($context)) + 40|0);
 $2 = HEAP32[$t_cost>>2]|0;
 $lanes = ((($context)) + 48|0);
 $3 = HEAP32[$lanes>>2]|0;
 $outlen = ((($context)) + 4|0);
 $4 = HEAP32[$outlen>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $1;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $2;
 $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
 HEAP32[$vararg_ptr6>>2] = $3;
 $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
 HEAP32[$vararg_ptr7>>2] = $4;
 (_printf(45965,$vararg_buffer2)|0);
 $pwdlen = ((($context)) + 12|0);
 $5 = HEAP32[$pwdlen>>2]|0;
 HEAP32[$vararg_buffer8>>2] = $5;
 (_printf(46042,$vararg_buffer8)|0);
 $flags = ((($context)) + 68|0);
 $6 = HEAP32[$flags>>2]|0;
 $and = $6 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $7 = HEAP32[$pwdlen>>2]|0;
  $cmp1050 = ($7|0)==(0);
  if (!($cmp1050)) {
   $pwd = ((($context)) + 8|0);
   $i$051 = 0;
   while(1) {
    $8 = HEAP32[$pwd>>2]|0;
    $arrayidx = (($8) + ($i$051)|0);
    $9 = HEAP8[$arrayidx>>0]|0;
    $conv = $9&255;
    HEAP32[$vararg_buffer11>>2] = $conv;
    (_printf(46065,$vararg_buffer11)|0);
    $inc = (($i$051) + 1)|0;
    $10 = HEAP32[$pwdlen>>2]|0;
    $cmp10 = ($inc>>>0)<($10>>>0);
    if ($cmp10) {
     $i$051 = $inc;
    } else {
     break;
    }
   }
  }
  (_putchar(10)|0);
 } else {
  (_puts(46057)|0);
 }
 $saltlen = ((($context)) + 20|0);
 $11 = HEAP32[$saltlen>>2]|0;
 HEAP32[$vararg_buffer14>>2] = $11;
 (_printf(46072,$vararg_buffer14)|0);
 $12 = HEAP32[$saltlen>>2]|0;
 $cmp1648 = ($12|0)==(0);
 if (!($cmp1648)) {
  $salt = ((($context)) + 16|0);
  $i$149 = 0;
  while(1) {
   $13 = HEAP32[$salt>>2]|0;
   $arrayidx19 = (($13) + ($i$149)|0);
   $14 = HEAP8[$arrayidx19>>0]|0;
   $conv20 = $14&255;
   HEAP32[$vararg_buffer17>>2] = $conv20;
   (_printf(46065,$vararg_buffer17)|0);
   $inc23 = (($i$149) + 1)|0;
   $15 = HEAP32[$saltlen>>2]|0;
   $cmp16 = ($inc23>>>0)<($15>>>0);
   if ($cmp16) {
    $i$149 = $inc23;
   } else {
    break;
   }
  }
 }
 (_putchar(10)|0);
 $secretlen = ((($context)) + 28|0);
 $16 = HEAP32[$secretlen>>2]|0;
 HEAP32[$vararg_buffer20>>2] = $16;
 (_printf(46083,$vararg_buffer20)|0);
 $17 = HEAP32[$flags>>2]|0;
 $and28 = $17 & 2;
 $tobool29 = ($and28|0)==(0);
 if ($tobool29) {
  $18 = HEAP32[$secretlen>>2]|0;
  $cmp3546 = ($18|0)==(0);
  if (!($cmp3546)) {
   $secret = ((($context)) + 24|0);
   $i$247 = 0;
   while(1) {
    $19 = HEAP32[$secret>>2]|0;
    $arrayidx38 = (($19) + ($i$247)|0);
    $20 = HEAP8[$arrayidx38>>0]|0;
    $conv39 = $20&255;
    HEAP32[$vararg_buffer23>>2] = $conv39;
    (_printf(46065,$vararg_buffer23)|0);
    $inc42 = (($i$247) + 1)|0;
    $21 = HEAP32[$secretlen>>2]|0;
    $cmp35 = ($inc42>>>0)<($21>>>0);
    if ($cmp35) {
     $i$247 = $inc42;
    } else {
     break;
    }
   }
  }
  (_putchar(10)|0);
 } else {
  (_puts(46057)|0);
 }
 $adlen = ((($context)) + 36|0);
 $22 = HEAP32[$adlen>>2]|0;
 HEAP32[$vararg_buffer26>>2] = $22;
 (_printf(46096,$vararg_buffer26)|0);
 $23 = HEAP32[$adlen>>2]|0;
 $cmp4944 = ($23|0)==(0);
 if (!($cmp4944)) {
  $ad = ((($context)) + 32|0);
  $i$345 = 0;
  while(1) {
   $24 = HEAP32[$ad>>2]|0;
   $arrayidx52 = (($24) + ($i$345)|0);
   $25 = HEAP8[$arrayidx52>>0]|0;
   $conv53 = $25&255;
   HEAP32[$vararg_buffer29>>2] = $conv53;
   (_printf(46065,$vararg_buffer29)|0);
   $inc56 = (($i$345) + 1)|0;
   $26 = HEAP32[$adlen>>2]|0;
   $cmp49 = ($inc56>>>0)<($26>>>0);
   if ($cmp49) {
    $i$345 = $inc56;
   } else {
    break;
   }
  }
 }
 (_putchar(10)|0);
 (_printf(46118,$vararg_buffer32)|0);
 $i$443 = 0;
 while(1) {
  $arrayidx64 = (($blockhash) + ($i$443)|0);
  $27 = HEAP8[$arrayidx64>>0]|0;
  $conv65 = $27&255;
  HEAP32[$vararg_buffer34>>2] = $conv65;
  (_printf(46065,$vararg_buffer34)|0);
  $inc68 = (($i$443) + 1)|0;
  $exitcond = ($inc68|0)==(64);
  if ($exitcond) {
   break;
  } else {
   $i$443 = $inc68;
  }
 }
 (_putchar(10)|0);
 STACKTOP = sp;return;
}
function _print_tag($out,$outlen) {
 $out = $out|0;
 $outlen = $outlen|0;
 var $0 = 0, $arrayidx = 0, $cmp = 0, $cmp15 = 0, $conv = 0, $exitcond = 0, $i$06 = 0, $inc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $cmp = ($out|0)==(0|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 (_printf(46139,$vararg_buffer)|0);
 $cmp15 = ($outlen|0)==(0);
 if (!($cmp15)) {
  $i$06 = 0;
  while(1) {
   $arrayidx = (($out) + ($i$06)|0);
   $0 = HEAP8[$arrayidx>>0]|0;
   $conv = $0&255;
   HEAP32[$vararg_buffer1>>2] = $conv;
   (_printf(46065,$vararg_buffer1)|0);
   $inc = (($i$06) + 1)|0;
   $exitcond = ($inc|0)==($outlen|0);
   if ($exitcond) {
    break;
   } else {
    $i$06 = $inc;
   }
  }
 }
 (_putchar(10)|0);
 STACKTOP = sp;return;
}
function _internal_kat($instance,$pass) {
 $instance = $instance|0;
 $pass = $pass|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx7 = 0, $cmp = 0, $cmp1 = 0, $cmp114 = 0, $cmp3 = 0, $cmp5 = 0;
 var $cond = 0, $i$015 = 0, $inc = 0, $inc10 = 0, $j$013 = 0, $memory_blocks = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $cmp = ($instance|0)==(0|0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = $pass;
 (_printf(46145,$vararg_buffer)|0);
 $memory_blocks = ((($instance)) + 12|0);
 $0 = HEAP32[$memory_blocks>>2]|0;
 $cmp114 = ($0|0)==(0);
 if ($cmp114) {
  STACKTOP = sp;return;
 }
 $1 = $0;$i$015 = 0;
 while(1) {
  $cmp3 = ($1>>>0)>(128);
  $cond = $cmp3 ? 1 : 128;
  $j$013 = 0;
  while(1) {
   $2 = HEAP32[$instance>>2]|0;
   $arrayidx7 = ((($2) + ($i$015<<10)|0) + ($j$013<<3)|0);
   $3 = $arrayidx7;
   $4 = $3;
   $5 = HEAP32[$4>>2]|0;
   $6 = (($3) + 4)|0;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $i$015;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $j$013;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   $9 = $vararg_ptr5;
   $10 = $9;
   HEAP32[$10>>2] = $5;
   $11 = (($9) + 4)|0;
   $12 = $11;
   HEAP32[$12>>2] = $8;
   (_printf(46163,$vararg_buffer1)|0);
   $inc = (($j$013) + 1)|0;
   $cmp5 = ($inc>>>0)<($cond>>>0);
   if ($cmp5) {
    $j$013 = $inc;
   } else {
    break;
   }
  }
  $inc10 = (($i$015) + 1)|0;
  $13 = HEAP32[$memory_blocks>>2]|0;
  $cmp1 = ($inc10>>>0)<($13>>>0);
  if ($cmp1) {
   $1 = $13;$i$015 = $inc10;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _fill_segment($instance,$position) {
 $instance = $instance|0;
 $position = $position|0;
 var $0 = 0, $position$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $position$byval_copy = sp;
 $0 = HEAP32[(43596)>>2]|0;
 ;HEAP32[$position$byval_copy>>2]=HEAP32[$position>>2]|0;HEAP32[$position$byval_copy+4>>2]=HEAP32[$position+4>>2]|0;HEAP32[$position$byval_copy+8>>2]=HEAP32[$position+8>>2]|0;HEAP32[$position$byval_copy+12>>2]=HEAP32[$position+12>>2]|0;
 FUNCTION_TABLE_vii[$0 & 31]($instance,$position$byval_copy);
 STACKTOP = sp;return;
}
function _argon2_select_impl($out,$prefix) {
 $out = $out|0;
 $prefix = $prefix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$i = 0, $arrayidx$us$i = 0, $best_impl$0$lcssa$i = 0, $best_impl$041$i = 0, $best_impl$041$us$i = 0, $best_impl$2$i = 0, $best_impl$2$us$i = 0, $call$i$i = 0, $call$i$us$i = 0;
 var $call10$i = 0, $call10$us$i = 0, $call3$i$i = 0, $call3$i$us$i = 0, $check$i = 0, $check$us$i = 0, $cmp = 0, $cmp$i = 0, $cmp$us$i = 0, $cmp39$i = 0, $cmp49$i = 0, $cmp8$i = 0, $cmp8$us$i = 0, $count$i = 0, $exitcond$i$i = 0, $exitcond$i$us$i = 0, $fill_segment$i$i = 0, $fill_segment$i$us$i = 0, $i$042$i = 0, $i$042$us$i = 0;
 var $i$07$i$i = 0, $i$07$i$us$i = 0, $impls$i = 0, $inc$i = 0, $inc$i$i = 0, $inc$i$us$i = 0, $inc$us$i = 0, $index$i$i = 0, $instance$i$i = 0, $lane$i$i = 0, $lane_length$i$i = 0, $lanes$i$i = 0, $memory_blocks$i$i = 0, $passes$i$i = 0, $pos$i$i = 0, $pos$i$i$byval_copy24 = 0, $segment_length$i$i = 0, $slice$i$i = 0, $spec$select38$i = 0, $spec$select38$us$i = 0;
 var $spec$store$select = 0, $sub$i$i = 0, $sub$i$us$i = 0, $threads$i$i = 0, $tobool$i = 0, $tobool11$i = 0, $tobool11$us$i = 0, $type$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0;
 var $version$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $pos$i$i$byval_copy24 = sp + 136|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $instance$i$i = sp + 88|0;
 $pos$i$i = sp + 72|0;
 $impls$i = sp + 64|0;
 $cmp = ($prefix|0)==(0|0);
 $spec$store$select = $cmp ? 577010 : $prefix;
 $tobool$i = ($out|0)!=(0|0);
 if ($tobool$i) {
  HEAP32[$vararg_buffer>>2] = $spec$store$select;
  (_fprintf($out,46200,$vararg_buffer)|0);
 }
 _argon2_get_impl_list($impls$i);
 $count$i = ((($impls$i)) + 4|0);
 $0 = HEAP32[$count$i>>2]|0;
 $cmp39$i = ($0|0)==(0);
 if (!($cmp39$i)) {
  $version$i$i = ((($instance$i$i)) + 4|0);
  $passes$i$i = ((($instance$i$i)) + 8|0);
  $memory_blocks$i$i = ((($instance$i$i)) + 12|0);
  $segment_length$i$i = ((($instance$i$i)) + 16|0);
  $lane_length$i$i = ((($instance$i$i)) + 20|0);
  $lanes$i$i = ((($instance$i$i)) + 24|0);
  $threads$i$i = ((($instance$i$i)) + 28|0);
  $type$i$i = ((($instance$i$i)) + 32|0);
  $lane$i$i = ((($pos$i$i)) + 4|0);
  $slice$i$i = ((($pos$i$i)) + 8|0);
  $index$i$i = ((($pos$i$i)) + 12|0);
  if ($tobool$i) {
   $15 = 0;$17 = -1;$best_impl$041$us$i = 0;$i$042$us$i = 0;
   while(1) {
    $1 = HEAP32[$impls$i>>2]|0;
    $arrayidx$us$i = (($1) + (($i$042$us$i*12)|0)|0);
    $2 = HEAP32[$arrayidx$us$i>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $spec$store$select;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $2;
    (_fprintf($out,46249,$vararg_buffer1)|0);
    $check$us$i = (((($1) + (($i$042$us$i*12)|0)|0)) + 4|0);
    $3 = HEAP32[$check$us$i>>2]|0;
    $cmp8$us$i = ($3|0)==(0|0);
    if ($cmp8$us$i) {
     label = 10;
    } else {
     $call10$us$i = (FUNCTION_TABLE_i[$3 & 3]()|0);
     $tobool11$us$i = ($call10$us$i|0)==(0);
     if ($tobool11$us$i) {
      (_fwrite(46281,8,1,$out)|0);
      $47 = $17;$48 = $15;$best_impl$2$us$i = $best_impl$041$us$i;
     } else {
      label = 10;
     }
    }
    if ((label|0) == 10) {
     label = 0;
     (_fwrite(46290,4,1,$out)|0);
     $4 = HEAP32[$arrayidx$us$i>>2]|0;
     HEAP32[$vararg_buffer5>>2] = $spec$store$select;
     $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $4;
     (_fprintf($out,46295,$vararg_buffer5)|0);
     _memset((48592|0),0,524288)|0;
     HEAP32[$version$i$i>>2] = 19;
     HEAP32[$instance$i$i>>2] = 48592;
     HEAP32[$passes$i$i>>2] = 1;
     HEAP32[$memory_blocks$i$i>>2] = 512;
     HEAP32[$segment_length$i$i>>2] = 128;
     HEAP32[$lane_length$i$i>>2] = 512;
     HEAP32[$lanes$i$i>>2] = 1;
     HEAP32[$threads$i$i>>2] = 1;
     HEAP32[$type$i$i>>2] = 1;
     HEAP32[$lane$i$i>>2] = 0;
     HEAP32[$pos$i$i>>2] = 0;
     HEAP8[$slice$i$i>>0] = 0;
     HEAP32[$index$i$i>>2] = 0;
     $fill_segment$i$us$i = (((($1) + (($i$042$us$i*12)|0)|0)) + 8|0);
     $5 = HEAP32[$fill_segment$i$us$i>>2]|0;
     ;HEAP32[$pos$i$i$byval_copy24>>2]=HEAP32[$pos$i$i>>2]|0;HEAP32[$pos$i$i$byval_copy24+4>>2]=HEAP32[$pos$i$i+4>>2]|0;HEAP32[$pos$i$i$byval_copy24+8>>2]=HEAP32[$pos$i$i+8>>2]|0;HEAP32[$pos$i$i$byval_copy24+12>>2]=HEAP32[$pos$i$i+12>>2]|0;
     FUNCTION_TABLE_vii[$5 & 31]($instance$i$i,$pos$i$i$byval_copy24);
     $call$i$us$i = (_clock()|0);
     $i$07$i$us$i = 0;
     while(1) {
      $6 = HEAP32[$fill_segment$i$us$i>>2]|0;
      ;HEAP32[$pos$i$i$byval_copy24>>2]=HEAP32[$pos$i$i>>2]|0;HEAP32[$pos$i$i$byval_copy24+4>>2]=HEAP32[$pos$i$i+4>>2]|0;HEAP32[$pos$i$i$byval_copy24+8>>2]=HEAP32[$pos$i$i+8>>2]|0;HEAP32[$pos$i$i$byval_copy24+12>>2]=HEAP32[$pos$i$i+12>>2]|0;
      FUNCTION_TABLE_vii[$6 & 31]($instance$i$i,$pos$i$i$byval_copy24);
      $inc$i$us$i = (($i$07$i$us$i) + 1)|0;
      $exitcond$i$us$i = ($inc$i$us$i|0)==(512);
      if ($exitcond$i$us$i) {
       break;
      } else {
       $i$07$i$us$i = $inc$i$us$i;
      }
     }
     $call3$i$us$i = (_clock()|0);
     $sub$i$us$i = (($call3$i$us$i) - ($call$i$us$i))|0;
     $7 = ($sub$i$us$i|0)<(0);
     $8 = $7 << 31 >> 31;
     $9 = HEAP32[$arrayidx$us$i>>2]|0;
     HEAP32[$vararg_buffer9>>2] = $spec$store$select;
     $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
     HEAP32[$vararg_ptr12>>2] = $9;
     $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
     $10 = $vararg_ptr13;
     $11 = $10;
     HEAP32[$11>>2] = $sub$i$us$i;
     $12 = (($10) + 4)|0;
     $13 = $12;
     HEAP32[$13>>2] = $8;
     (_fprintf($out,46318,$vararg_buffer9)|0);
     $14 = ($15>>>0)>($8>>>0);
     $16 = ($17>>>0)>($sub$i$us$i>>>0);
     $18 = ($15|0)==($8|0);
     $19 = $18 & $16;
     $20 = $14 | $19;
     $21 = $20 ? $sub$i$us$i : $17;
     $22 = $20 ? $8 : $15;
     $spec$select38$us$i = $20 ? $arrayidx$us$i : $best_impl$041$us$i;
     $47 = $21;$48 = $22;$best_impl$2$us$i = $spec$select38$us$i;
    }
    $inc$us$i = (($i$042$us$i) + 1)|0;
    $23 = HEAP32[$count$i>>2]|0;
    $cmp$us$i = ($inc$us$i>>>0)<($23>>>0);
    if ($cmp$us$i) {
     $15 = $48;$17 = $47;$best_impl$041$us$i = $best_impl$2$us$i;$i$042$us$i = $inc$us$i;
    } else {
     $43 = $47;$46 = $48;$best_impl$0$lcssa$i = $best_impl$2$us$i;
     break;
    }
   }
  } else {
   $31 = 0;$33 = -1;$best_impl$041$i = 0;$i$042$i = 0;
   while(1) {
    $24 = HEAP32[$impls$i>>2]|0;
    $arrayidx$i = (($24) + (($i$042$i*12)|0)|0);
    $check$i = (((($24) + (($i$042$i*12)|0)|0)) + 4|0);
    $25 = HEAP32[$check$i>>2]|0;
    $cmp8$i = ($25|0)==(0|0);
    if ($cmp8$i) {
     label = 16;
    } else {
     $call10$i = (FUNCTION_TABLE_i[$25 & 3]()|0);
     $tobool11$i = ($call10$i|0)==(0);
     if ($tobool11$i) {
      $49 = $33;$50 = $31;$best_impl$2$i = $best_impl$041$i;
     } else {
      label = 16;
     }
    }
    if ((label|0) == 16) {
     label = 0;
     _memset((48592|0),0,524288)|0;
     HEAP32[$version$i$i>>2] = 19;
     HEAP32[$instance$i$i>>2] = 48592;
     HEAP32[$passes$i$i>>2] = 1;
     HEAP32[$memory_blocks$i$i>>2] = 512;
     HEAP32[$segment_length$i$i>>2] = 128;
     HEAP32[$lane_length$i$i>>2] = 512;
     HEAP32[$lanes$i$i>>2] = 1;
     HEAP32[$threads$i$i>>2] = 1;
     HEAP32[$type$i$i>>2] = 1;
     HEAP32[$lane$i$i>>2] = 0;
     HEAP32[$pos$i$i>>2] = 0;
     HEAP8[$slice$i$i>>0] = 0;
     HEAP32[$index$i$i>>2] = 0;
     $fill_segment$i$i = (((($24) + (($i$042$i*12)|0)|0)) + 8|0);
     $26 = HEAP32[$fill_segment$i$i>>2]|0;
     ;HEAP32[$pos$i$i$byval_copy24>>2]=HEAP32[$pos$i$i>>2]|0;HEAP32[$pos$i$i$byval_copy24+4>>2]=HEAP32[$pos$i$i+4>>2]|0;HEAP32[$pos$i$i$byval_copy24+8>>2]=HEAP32[$pos$i$i+8>>2]|0;HEAP32[$pos$i$i$byval_copy24+12>>2]=HEAP32[$pos$i$i+12>>2]|0;
     FUNCTION_TABLE_vii[$26 & 31]($instance$i$i,$pos$i$i$byval_copy24);
     $call$i$i = (_clock()|0);
     $i$07$i$i = 0;
     while(1) {
      $27 = HEAP32[$fill_segment$i$i>>2]|0;
      ;HEAP32[$pos$i$i$byval_copy24>>2]=HEAP32[$pos$i$i>>2]|0;HEAP32[$pos$i$i$byval_copy24+4>>2]=HEAP32[$pos$i$i+4>>2]|0;HEAP32[$pos$i$i$byval_copy24+8>>2]=HEAP32[$pos$i$i+8>>2]|0;HEAP32[$pos$i$i$byval_copy24+12>>2]=HEAP32[$pos$i$i+12>>2]|0;
      FUNCTION_TABLE_vii[$27 & 31]($instance$i$i,$pos$i$i$byval_copy24);
      $inc$i$i = (($i$07$i$i) + 1)|0;
      $exitcond$i$i = ($inc$i$i|0)==(512);
      if ($exitcond$i$i) {
       break;
      } else {
       $i$07$i$i = $inc$i$i;
      }
     }
     $call3$i$i = (_clock()|0);
     $sub$i$i = (($call3$i$i) - ($call$i$i))|0;
     $28 = ($sub$i$i|0)<(0);
     $29 = $28 << 31 >> 31;
     $30 = ($31>>>0)>($29>>>0);
     $32 = ($33>>>0)>($sub$i$i>>>0);
     $34 = ($31|0)==($29|0);
     $35 = $34 & $32;
     $36 = $30 | $35;
     $37 = $36 ? $sub$i$i : $33;
     $38 = $36 ? $29 : $31;
     $spec$select38$i = $36 ? $arrayidx$i : $best_impl$041$i;
     $49 = $37;$50 = $38;$best_impl$2$i = $spec$select38$i;
    }
    $inc$i = (($i$042$i) + 1)|0;
    $39 = HEAP32[$count$i>>2]|0;
    $cmp$i = ($inc$i>>>0)<($39>>>0);
    if ($cmp$i) {
     $31 = $50;$33 = $49;$best_impl$041$i = $best_impl$2$i;$i$042$i = $inc$i;
    } else {
     $43 = $49;$46 = $50;$best_impl$0$lcssa$i = $best_impl$2$i;
     break;
    }
   }
  }
  $cmp49$i = ($best_impl$0$lcssa$i|0)==(0|0);
  if (!($cmp49$i)) {
   if ($tobool$i) {
    $40 = HEAP32[$best_impl$0$lcssa$i>>2]|0;
    HEAP32[$vararg_buffer14>>2] = $spec$store$select;
    $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
    HEAP32[$vararg_ptr17>>2] = $40;
    $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
    $41 = $vararg_ptr18;
    $42 = $41;
    HEAP32[$42>>2] = $43;
    $44 = (($41) + 4)|0;
    $45 = $44;
    HEAP32[$45>>2] = $46;
    (_fprintf($out,46348,$vararg_buffer14)|0);
   }
   ;HEAP32[43588>>2]=HEAP32[$best_impl$0$lcssa$i>>2]|0;HEAP32[43588+4>>2]=HEAP32[$best_impl$0$lcssa$i+4>>2]|0;HEAP32[43588+8>>2]=HEAP32[$best_impl$0$lcssa$i+8>>2]|0;
   STACKTOP = sp;return;
  }
 }
 if (!($tobool$i)) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer19>>2] = $spec$store$select;
 (_fprintf($out,46390,$vararg_buffer19)|0);
 STACKTOP = sp;return;
}
function _argon2_thread_create($handle,$func,$args) {
 $handle = $handle|0;
 $func = $func|0;
 $args = $args|0;
 var $call = 0, $cmp = 0, $cmp1 = 0, $or$cond = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($handle|0)==(0|0);
 $cmp1 = ($func|0)==(0|0);
 $or$cond = $cmp | $cmp1;
 if ($or$cond) {
  $retval$0 = -1;
  return ($retval$0|0);
 }
 $call = (_pthread_create(($handle|0),(0|0),($func|0),($args|0))|0);
 $retval$0 = $call;
 return ($retval$0|0);
}
function _argon2_thread_join($handle) {
 $handle = $handle|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_join(($handle|0),(0|0))|0);
 return ($call|0);
}
function _argon2_thread_exit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _pthread_exit((0|0));
 // unreachable;
}
function _blake2b_compress($S,$block,$0,$1) {
 $S = $S|0;
 $block = $block|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0;
 var $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0;
 var $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0;
 var $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0;
 var $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0;
 var $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0;
 var $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0;
 var $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0;
 var $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0;
 var $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0;
 var $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0;
 var $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0;
 var $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0;
 var $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0;
 var $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0;
 var $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0;
 var $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0;
 var $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0;
 var $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0;
 var $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0;
 var $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0;
 var $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0;
 var $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0;
 var $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0;
 var $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0;
 var $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0;
 var $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0;
 var $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0;
 var $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0;
 var $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0;
 var $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0;
 var $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0;
 var $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0;
 var $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0;
 var $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0;
 var $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0;
 var $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0;
 var $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0;
 var $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0;
 var $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0;
 var $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0;
 var $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0;
 var $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0;
 var $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0;
 var $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0;
 var $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0;
 var $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0;
 var $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0;
 var $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0;
 var $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0;
 var $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0;
 var $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0;
 var $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0;
 var $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0;
 var $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0;
 var $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0;
 var $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0;
 var $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0;
 var $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0;
 var $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0;
 var $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0;
 var $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0;
 var $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0;
 var $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0;
 var $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0;
 var $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0;
 var $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0;
 var $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0;
 var $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0;
 var $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0;
 var $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0;
 var $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0;
 var $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0;
 var $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0;
 var $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0;
 var $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0;
 var $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0;
 var $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0;
 var $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0;
 var $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0;
 var $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0;
 var $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0;
 var $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0;
 var $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0;
 var $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0;
 var $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0;
 var $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0;
 var $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0;
 var $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0;
 var $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0;
 var $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0;
 var $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0;
 var $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0;
 var $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0;
 var $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0;
 var $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0;
 var $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0;
 var $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0;
 var $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0;
 var $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0, $379 = 0;
 var $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0;
 var $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0, $3825 = 0;
 var $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0, $3843 = 0;
 var $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0, $3861 = 0;
 var $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $add$ptr1 = 0, $add$ptr10 = 0, $add$ptr13 = 0, $add$ptr16 = 0, $add$ptr19 = 0, $add$ptr22 = 0;
 var $add$ptr25 = 0, $add$ptr28 = 0, $add$ptr31 = 0, $add$ptr34 = 0, $add$ptr37 = 0, $add$ptr4 = 0, $add$ptr40 = 0, $add$ptr43 = 0, $add$ptr7 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $arrayidx61 = 0, $arrayidx64 = 0, $arrayidx67 = 0, $arrayidx73 = 0, $arrayidx76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $block;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $add$ptr1 = ((($block)) + 8|0);
 $8 = $add$ptr1;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $add$ptr4 = ((($block)) + 16|0);
 $14 = $add$ptr4;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $add$ptr7 = ((($block)) + 24|0);
 $20 = $add$ptr7;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $add$ptr10 = ((($block)) + 32|0);
 $26 = $add$ptr10;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $add$ptr13 = ((($block)) + 40|0);
 $32 = $add$ptr13;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $add$ptr16 = ((($block)) + 48|0);
 $38 = $add$ptr16;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $add$ptr19 = ((($block)) + 56|0);
 $44 = $add$ptr19;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $add$ptr22 = ((($block)) + 64|0);
 $50 = $add$ptr22;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 4)|0;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $add$ptr25 = ((($block)) + 72|0);
 $56 = $add$ptr25;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56) + 4)|0;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $add$ptr28 = ((($block)) + 80|0);
 $62 = $add$ptr28;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($62) + 4)|0;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $add$ptr31 = ((($block)) + 88|0);
 $68 = $add$ptr31;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $add$ptr34 = ((($block)) + 96|0);
 $74 = $add$ptr34;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (($74) + 4)|0;
 $78 = $77;
 $79 = HEAP32[$78>>2]|0;
 $add$ptr37 = ((($block)) + 104|0);
 $80 = $add$ptr37;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($80) + 4)|0;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $add$ptr40 = ((($block)) + 112|0);
 $86 = $add$ptr40;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) + 4)|0;
 $90 = $89;
 $91 = HEAP32[$90>>2]|0;
 $add$ptr43 = ((($block)) + 120|0);
 $92 = $add$ptr43;
 $93 = $92;
 $94 = HEAP32[$93>>2]|0;
 $95 = (($92) + 4)|0;
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = $S;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = (($98) + 4)|0;
 $102 = $101;
 $103 = HEAP32[$102>>2]|0;
 $arrayidx49 = ((($S)) + 8|0);
 $104 = $arrayidx49;
 $105 = $104;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($104) + 4)|0;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $arrayidx52 = ((($S)) + 16|0);
 $110 = $arrayidx52;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = (($110) + 4)|0;
 $114 = $113;
 $115 = HEAP32[$114>>2]|0;
 $arrayidx55 = ((($S)) + 24|0);
 $116 = $arrayidx55;
 $117 = $116;
 $118 = HEAP32[$117>>2]|0;
 $119 = (($116) + 4)|0;
 $120 = $119;
 $121 = HEAP32[$120>>2]|0;
 $arrayidx58 = ((($S)) + 32|0);
 $122 = $arrayidx58;
 $123 = $122;
 $124 = HEAP32[$123>>2]|0;
 $125 = (($122) + 4)|0;
 $126 = $125;
 $127 = HEAP32[$126>>2]|0;
 $arrayidx61 = ((($S)) + 40|0);
 $128 = $arrayidx61;
 $129 = $128;
 $130 = HEAP32[$129>>2]|0;
 $131 = (($128) + 4)|0;
 $132 = $131;
 $133 = HEAP32[$132>>2]|0;
 $arrayidx64 = ((($S)) + 48|0);
 $134 = $arrayidx64;
 $135 = $134;
 $136 = HEAP32[$135>>2]|0;
 $137 = (($134) + 4)|0;
 $138 = $137;
 $139 = HEAP32[$138>>2]|0;
 $arrayidx67 = ((($S)) + 56|0);
 $140 = $arrayidx67;
 $141 = $140;
 $142 = HEAP32[$141>>2]|0;
 $143 = (($140) + 4)|0;
 $144 = $143;
 $145 = HEAP32[$144>>2]|0;
 $arrayidx73 = ((($S)) + 64|0);
 $146 = $arrayidx73;
 $147 = $146;
 $148 = HEAP32[$147>>2]|0;
 $149 = (($146) + 4)|0;
 $150 = $149;
 $151 = HEAP32[$150>>2]|0;
 $arrayidx76 = ((($S)) + 72|0);
 $152 = $arrayidx76;
 $153 = $152;
 $154 = HEAP32[$153>>2]|0;
 $155 = (($152) + 4)|0;
 $156 = $155;
 $157 = HEAP32[$156>>2]|0;
 $158 = $0 ^ -79577749;
 $159 = $1 ^ 528734635;
 $160 = (_i64Add(($100|0),($103|0),($4|0),($7|0))|0);
 $161 = (getTempRet0() | 0);
 $162 = (_i64Add(($160|0),($161|0),($124|0),($127|0))|0);
 $163 = (getTempRet0() | 0);
 $164 = $162 ^ -1377402159;
 $165 = $163 ^ 1359893119;
 $166 = $164 ^ $148;
 $167 = $165 ^ $151;
 $168 = (_i64Add(($167|0),($166|0),-205731576,1779033703)|0);
 $169 = (getTempRet0() | 0);
 $170 = $168 ^ $124;
 $171 = $169 ^ $127;
 $172 = (_bitshift64Lshr(($170|0),($171|0),24)|0);
 $173 = (getTempRet0() | 0);
 $174 = (_bitshift64Shl(($170|0),($171|0),40)|0);
 $175 = (getTempRet0() | 0);
 $176 = $172 | $174;
 $177 = $173 | $175;
 $178 = (_i64Add(($162|0),($163|0),($10|0),($13|0))|0);
 $179 = (getTempRet0() | 0);
 $180 = (_i64Add(($178|0),($179|0),($176|0),($177|0))|0);
 $181 = (getTempRet0() | 0);
 $182 = $180 ^ $167;
 $183 = $181 ^ $166;
 $184 = (_bitshift64Lshr(($182|0),($183|0),16)|0);
 $185 = (getTempRet0() | 0);
 $186 = (_bitshift64Shl(($182|0),($183|0),48)|0);
 $187 = (getTempRet0() | 0);
 $188 = $184 | $186;
 $189 = $185 | $187;
 $190 = (_i64Add(($188|0),($189|0),($168|0),($169|0))|0);
 $191 = (getTempRet0() | 0);
 $192 = $190 ^ $176;
 $193 = $191 ^ $177;
 $194 = (_bitshift64Lshr(($192|0),($193|0),63)|0);
 $195 = (getTempRet0() | 0);
 $196 = (_bitshift64Shl(($192|0),($193|0),1)|0);
 $197 = (getTempRet0() | 0);
 $198 = $194 | $196;
 $199 = $195 | $197;
 $200 = (_i64Add(($106|0),($109|0),($16|0),($19|0))|0);
 $201 = (getTempRet0() | 0);
 $202 = (_i64Add(($200|0),($201|0),($130|0),($133|0))|0);
 $203 = (getTempRet0() | 0);
 $204 = $202 ^ 725511199;
 $205 = $203 ^ -1694144372;
 $206 = $204 ^ $154;
 $207 = $205 ^ $157;
 $208 = (_i64Add(($207|0),($206|0),-2067093701,-1150833019)|0);
 $209 = (getTempRet0() | 0);
 $210 = $208 ^ $130;
 $211 = $209 ^ $133;
 $212 = (_bitshift64Lshr(($210|0),($211|0),24)|0);
 $213 = (getTempRet0() | 0);
 $214 = (_bitshift64Shl(($210|0),($211|0),40)|0);
 $215 = (getTempRet0() | 0);
 $216 = $212 | $214;
 $217 = $213 | $215;
 $218 = (_i64Add(($202|0),($203|0),($22|0),($25|0))|0);
 $219 = (getTempRet0() | 0);
 $220 = (_i64Add(($218|0),($219|0),($216|0),($217|0))|0);
 $221 = (getTempRet0() | 0);
 $222 = $220 ^ $207;
 $223 = $221 ^ $206;
 $224 = (_bitshift64Lshr(($222|0),($223|0),16)|0);
 $225 = (getTempRet0() | 0);
 $226 = (_bitshift64Shl(($222|0),($223|0),48)|0);
 $227 = (getTempRet0() | 0);
 $228 = $224 | $226;
 $229 = $225 | $227;
 $230 = (_i64Add(($228|0),($229|0),($208|0),($209|0))|0);
 $231 = (getTempRet0() | 0);
 $232 = $230 ^ $216;
 $233 = $231 ^ $217;
 $234 = (_bitshift64Lshr(($232|0),($233|0),63)|0);
 $235 = (getTempRet0() | 0);
 $236 = (_bitshift64Shl(($232|0),($233|0),1)|0);
 $237 = (getTempRet0() | 0);
 $238 = $234 | $236;
 $239 = $235 | $237;
 $240 = (_i64Add(($112|0),($115|0),($28|0),($31|0))|0);
 $241 = (getTempRet0() | 0);
 $242 = (_i64Add(($240|0),($241|0),($136|0),($139|0))|0);
 $243 = (getTempRet0() | 0);
 $244 = $158 ^ $242;
 $245 = $159 ^ $243;
 $246 = (_i64Add(($245|0),($244|0),-23791573,1013904242)|0);
 $247 = (getTempRet0() | 0);
 $248 = $246 ^ $136;
 $249 = $247 ^ $139;
 $250 = (_bitshift64Lshr(($248|0),($249|0),24)|0);
 $251 = (getTempRet0() | 0);
 $252 = (_bitshift64Shl(($248|0),($249|0),40)|0);
 $253 = (getTempRet0() | 0);
 $254 = $250 | $252;
 $255 = $251 | $253;
 $256 = (_i64Add(($242|0),($243|0),($34|0),($37|0))|0);
 $257 = (getTempRet0() | 0);
 $258 = (_i64Add(($256|0),($257|0),($254|0),($255|0))|0);
 $259 = (getTempRet0() | 0);
 $260 = $258 ^ $245;
 $261 = $259 ^ $244;
 $262 = (_bitshift64Lshr(($260|0),($261|0),16)|0);
 $263 = (getTempRet0() | 0);
 $264 = (_bitshift64Shl(($260|0),($261|0),48)|0);
 $265 = (getTempRet0() | 0);
 $266 = $262 | $264;
 $267 = $263 | $265;
 $268 = (_i64Add(($266|0),($267|0),($246|0),($247|0))|0);
 $269 = (getTempRet0() | 0);
 $270 = $268 ^ $254;
 $271 = $269 ^ $255;
 $272 = (_bitshift64Lshr(($270|0),($271|0),63)|0);
 $273 = (getTempRet0() | 0);
 $274 = (_bitshift64Shl(($270|0),($271|0),1)|0);
 $275 = (getTempRet0() | 0);
 $276 = $272 | $274;
 $277 = $273 | $275;
 $278 = (_i64Add(($118|0),($121|0),($40|0),($43|0))|0);
 $279 = (getTempRet0() | 0);
 $280 = (_i64Add(($278|0),($279|0),($142|0),($145|0))|0);
 $281 = (getTempRet0() | 0);
 $282 = $280 ^ 327033209;
 $283 = $281 ^ 1541459225;
 $284 = (_i64Add(($283|0),($282|0),1595750129,-1521486534)|0);
 $285 = (getTempRet0() | 0);
 $286 = $284 ^ $142;
 $287 = $285 ^ $145;
 $288 = (_bitshift64Lshr(($286|0),($287|0),24)|0);
 $289 = (getTempRet0() | 0);
 $290 = (_bitshift64Shl(($286|0),($287|0),40)|0);
 $291 = (getTempRet0() | 0);
 $292 = $288 | $290;
 $293 = $289 | $291;
 $294 = (_i64Add(($280|0),($281|0),($46|0),($49|0))|0);
 $295 = (getTempRet0() | 0);
 $296 = (_i64Add(($294|0),($295|0),($292|0),($293|0))|0);
 $297 = (getTempRet0() | 0);
 $298 = $296 ^ $283;
 $299 = $297 ^ $282;
 $300 = (_bitshift64Lshr(($298|0),($299|0),16)|0);
 $301 = (getTempRet0() | 0);
 $302 = (_bitshift64Shl(($298|0),($299|0),48)|0);
 $303 = (getTempRet0() | 0);
 $304 = $300 | $302;
 $305 = $301 | $303;
 $306 = (_i64Add(($304|0),($305|0),($284|0),($285|0))|0);
 $307 = (getTempRet0() | 0);
 $308 = $306 ^ $292;
 $309 = $307 ^ $293;
 $310 = (_bitshift64Lshr(($308|0),($309|0),63)|0);
 $311 = (getTempRet0() | 0);
 $312 = (_bitshift64Shl(($308|0),($309|0),1)|0);
 $313 = (getTempRet0() | 0);
 $314 = $310 | $312;
 $315 = $311 | $313;
 $316 = (_i64Add(($180|0),($181|0),($52|0),($55|0))|0);
 $317 = (getTempRet0() | 0);
 $318 = (_i64Add(($316|0),($317|0),($238|0),($239|0))|0);
 $319 = (getTempRet0() | 0);
 $320 = $318 ^ $304;
 $321 = $319 ^ $305;
 $322 = (_i64Add(($321|0),($320|0),($268|0),($269|0))|0);
 $323 = (getTempRet0() | 0);
 $324 = $322 ^ $238;
 $325 = $323 ^ $239;
 $326 = (_bitshift64Lshr(($324|0),($325|0),24)|0);
 $327 = (getTempRet0() | 0);
 $328 = (_bitshift64Shl(($324|0),($325|0),40)|0);
 $329 = (getTempRet0() | 0);
 $330 = $326 | $328;
 $331 = $327 | $329;
 $332 = (_i64Add(($318|0),($319|0),($58|0),($61|0))|0);
 $333 = (getTempRet0() | 0);
 $334 = (_i64Add(($332|0),($333|0),($330|0),($331|0))|0);
 $335 = (getTempRet0() | 0);
 $336 = $334 ^ $321;
 $337 = $335 ^ $320;
 $338 = (_bitshift64Lshr(($336|0),($337|0),16)|0);
 $339 = (getTempRet0() | 0);
 $340 = (_bitshift64Shl(($336|0),($337|0),48)|0);
 $341 = (getTempRet0() | 0);
 $342 = $338 | $340;
 $343 = $339 | $341;
 $344 = (_i64Add(($342|0),($343|0),($322|0),($323|0))|0);
 $345 = (getTempRet0() | 0);
 $346 = $344 ^ $330;
 $347 = $345 ^ $331;
 $348 = (_bitshift64Lshr(($346|0),($347|0),63)|0);
 $349 = (getTempRet0() | 0);
 $350 = (_bitshift64Shl(($346|0),($347|0),1)|0);
 $351 = (getTempRet0() | 0);
 $352 = $348 | $350;
 $353 = $349 | $351;
 $354 = (_i64Add(($220|0),($221|0),($64|0),($67|0))|0);
 $355 = (getTempRet0() | 0);
 $356 = (_i64Add(($354|0),($355|0),($276|0),($277|0))|0);
 $357 = (getTempRet0() | 0);
 $358 = $356 ^ $188;
 $359 = $357 ^ $189;
 $360 = (_i64Add(($359|0),($358|0),($306|0),($307|0))|0);
 $361 = (getTempRet0() | 0);
 $362 = $360 ^ $276;
 $363 = $361 ^ $277;
 $364 = (_bitshift64Lshr(($362|0),($363|0),24)|0);
 $365 = (getTempRet0() | 0);
 $366 = (_bitshift64Shl(($362|0),($363|0),40)|0);
 $367 = (getTempRet0() | 0);
 $368 = $364 | $366;
 $369 = $365 | $367;
 $370 = (_i64Add(($356|0),($357|0),($70|0),($73|0))|0);
 $371 = (getTempRet0() | 0);
 $372 = (_i64Add(($370|0),($371|0),($368|0),($369|0))|0);
 $373 = (getTempRet0() | 0);
 $374 = $372 ^ $359;
 $375 = $373 ^ $358;
 $376 = (_bitshift64Lshr(($374|0),($375|0),16)|0);
 $377 = (getTempRet0() | 0);
 $378 = (_bitshift64Shl(($374|0),($375|0),48)|0);
 $379 = (getTempRet0() | 0);
 $380 = $376 | $378;
 $381 = $377 | $379;
 $382 = (_i64Add(($380|0),($381|0),($360|0),($361|0))|0);
 $383 = (getTempRet0() | 0);
 $384 = $382 ^ $368;
 $385 = $383 ^ $369;
 $386 = (_bitshift64Lshr(($384|0),($385|0),63)|0);
 $387 = (getTempRet0() | 0);
 $388 = (_bitshift64Shl(($384|0),($385|0),1)|0);
 $389 = (getTempRet0() | 0);
 $390 = $386 | $388;
 $391 = $387 | $389;
 $392 = (_i64Add(($258|0),($259|0),($76|0),($79|0))|0);
 $393 = (getTempRet0() | 0);
 $394 = (_i64Add(($392|0),($393|0),($314|0),($315|0))|0);
 $395 = (getTempRet0() | 0);
 $396 = $394 ^ $228;
 $397 = $395 ^ $229;
 $398 = (_i64Add(($397|0),($396|0),($190|0),($191|0))|0);
 $399 = (getTempRet0() | 0);
 $400 = $398 ^ $314;
 $401 = $399 ^ $315;
 $402 = (_bitshift64Lshr(($400|0),($401|0),24)|0);
 $403 = (getTempRet0() | 0);
 $404 = (_bitshift64Shl(($400|0),($401|0),40)|0);
 $405 = (getTempRet0() | 0);
 $406 = $402 | $404;
 $407 = $403 | $405;
 $408 = (_i64Add(($394|0),($395|0),($82|0),($85|0))|0);
 $409 = (getTempRet0() | 0);
 $410 = (_i64Add(($408|0),($409|0),($406|0),($407|0))|0);
 $411 = (getTempRet0() | 0);
 $412 = $410 ^ $397;
 $413 = $411 ^ $396;
 $414 = (_bitshift64Lshr(($412|0),($413|0),16)|0);
 $415 = (getTempRet0() | 0);
 $416 = (_bitshift64Shl(($412|0),($413|0),48)|0);
 $417 = (getTempRet0() | 0);
 $418 = $414 | $416;
 $419 = $415 | $417;
 $420 = (_i64Add(($418|0),($419|0),($398|0),($399|0))|0);
 $421 = (getTempRet0() | 0);
 $422 = $420 ^ $406;
 $423 = $421 ^ $407;
 $424 = (_bitshift64Lshr(($422|0),($423|0),63)|0);
 $425 = (getTempRet0() | 0);
 $426 = (_bitshift64Shl(($422|0),($423|0),1)|0);
 $427 = (getTempRet0() | 0);
 $428 = $424 | $426;
 $429 = $425 | $427;
 $430 = (_i64Add(($296|0),($297|0),($88|0),($91|0))|0);
 $431 = (getTempRet0() | 0);
 $432 = (_i64Add(($430|0),($431|0),($198|0),($199|0))|0);
 $433 = (getTempRet0() | 0);
 $434 = $432 ^ $266;
 $435 = $433 ^ $267;
 $436 = (_i64Add(($435|0),($434|0),($230|0),($231|0))|0);
 $437 = (getTempRet0() | 0);
 $438 = $436 ^ $198;
 $439 = $437 ^ $199;
 $440 = (_bitshift64Lshr(($438|0),($439|0),24)|0);
 $441 = (getTempRet0() | 0);
 $442 = (_bitshift64Shl(($438|0),($439|0),40)|0);
 $443 = (getTempRet0() | 0);
 $444 = $440 | $442;
 $445 = $441 | $443;
 $446 = (_i64Add(($432|0),($433|0),($94|0),($97|0))|0);
 $447 = (getTempRet0() | 0);
 $448 = (_i64Add(($446|0),($447|0),($444|0),($445|0))|0);
 $449 = (getTempRet0() | 0);
 $450 = $448 ^ $435;
 $451 = $449 ^ $434;
 $452 = (_bitshift64Lshr(($450|0),($451|0),16)|0);
 $453 = (getTempRet0() | 0);
 $454 = (_bitshift64Shl(($450|0),($451|0),48)|0);
 $455 = (getTempRet0() | 0);
 $456 = $452 | $454;
 $457 = $453 | $455;
 $458 = (_i64Add(($456|0),($457|0),($436|0),($437|0))|0);
 $459 = (getTempRet0() | 0);
 $460 = $458 ^ $444;
 $461 = $459 ^ $445;
 $462 = (_bitshift64Lshr(($460|0),($461|0),63)|0);
 $463 = (getTempRet0() | 0);
 $464 = (_bitshift64Shl(($460|0),($461|0),1)|0);
 $465 = (getTempRet0() | 0);
 $466 = $462 | $464;
 $467 = $463 | $465;
 $468 = (_i64Add(($334|0),($335|0),($88|0),($91|0))|0);
 $469 = (getTempRet0() | 0);
 $470 = (_i64Add(($468|0),($469|0),($466|0),($467|0))|0);
 $471 = (getTempRet0() | 0);
 $472 = $470 ^ $380;
 $473 = $471 ^ $381;
 $474 = (_i64Add(($473|0),($472|0),($420|0),($421|0))|0);
 $475 = (getTempRet0() | 0);
 $476 = $474 ^ $466;
 $477 = $475 ^ $467;
 $478 = (_bitshift64Lshr(($476|0),($477|0),24)|0);
 $479 = (getTempRet0() | 0);
 $480 = (_bitshift64Shl(($476|0),($477|0),40)|0);
 $481 = (getTempRet0() | 0);
 $482 = $478 | $480;
 $483 = $479 | $481;
 $484 = (_i64Add(($470|0),($471|0),($64|0),($67|0))|0);
 $485 = (getTempRet0() | 0);
 $486 = (_i64Add(($484|0),($485|0),($482|0),($483|0))|0);
 $487 = (getTempRet0() | 0);
 $488 = $486 ^ $473;
 $489 = $487 ^ $472;
 $490 = (_bitshift64Lshr(($488|0),($489|0),16)|0);
 $491 = (getTempRet0() | 0);
 $492 = (_bitshift64Shl(($488|0),($489|0),48)|0);
 $493 = (getTempRet0() | 0);
 $494 = $490 | $492;
 $495 = $491 | $493;
 $496 = (_i64Add(($494|0),($495|0),($474|0),($475|0))|0);
 $497 = (getTempRet0() | 0);
 $498 = $496 ^ $482;
 $499 = $497 ^ $483;
 $500 = (_bitshift64Lshr(($498|0),($499|0),63)|0);
 $501 = (getTempRet0() | 0);
 $502 = (_bitshift64Shl(($498|0),($499|0),1)|0);
 $503 = (getTempRet0() | 0);
 $504 = $500 | $502;
 $505 = $501 | $503;
 $506 = (_i64Add(($372|0),($373|0),($28|0),($31|0))|0);
 $507 = (getTempRet0() | 0);
 $508 = (_i64Add(($506|0),($507|0),($352|0),($353|0))|0);
 $509 = (getTempRet0() | 0);
 $510 = $508 ^ $418;
 $511 = $509 ^ $419;
 $512 = (_i64Add(($511|0),($510|0),($458|0),($459|0))|0);
 $513 = (getTempRet0() | 0);
 $514 = $512 ^ $352;
 $515 = $513 ^ $353;
 $516 = (_bitshift64Lshr(($514|0),($515|0),24)|0);
 $517 = (getTempRet0() | 0);
 $518 = (_bitshift64Shl(($514|0),($515|0),40)|0);
 $519 = (getTempRet0() | 0);
 $520 = $516 | $518;
 $521 = $517 | $519;
 $522 = (_i64Add(($508|0),($509|0),($52|0),($55|0))|0);
 $523 = (getTempRet0() | 0);
 $524 = (_i64Add(($522|0),($523|0),($520|0),($521|0))|0);
 $525 = (getTempRet0() | 0);
 $526 = $524 ^ $511;
 $527 = $525 ^ $510;
 $528 = (_bitshift64Lshr(($526|0),($527|0),16)|0);
 $529 = (getTempRet0() | 0);
 $530 = (_bitshift64Shl(($526|0),($527|0),48)|0);
 $531 = (getTempRet0() | 0);
 $532 = $528 | $530;
 $533 = $529 | $531;
 $534 = (_i64Add(($532|0),($533|0),($512|0),($513|0))|0);
 $535 = (getTempRet0() | 0);
 $536 = $534 ^ $520;
 $537 = $535 ^ $521;
 $538 = (_bitshift64Lshr(($536|0),($537|0),63)|0);
 $539 = (getTempRet0() | 0);
 $540 = (_bitshift64Shl(($536|0),($537|0),1)|0);
 $541 = (getTempRet0() | 0);
 $542 = $538 | $540;
 $543 = $539 | $541;
 $544 = (_i64Add(($410|0),($411|0),($58|0),($61|0))|0);
 $545 = (getTempRet0() | 0);
 $546 = (_i64Add(($544|0),($545|0),($390|0),($391|0))|0);
 $547 = (getTempRet0() | 0);
 $548 = $546 ^ $456;
 $549 = $547 ^ $457;
 $550 = (_i64Add(($549|0),($548|0),($344|0),($345|0))|0);
 $551 = (getTempRet0() | 0);
 $552 = $550 ^ $390;
 $553 = $551 ^ $391;
 $554 = (_bitshift64Lshr(($552|0),($553|0),24)|0);
 $555 = (getTempRet0() | 0);
 $556 = (_bitshift64Shl(($552|0),($553|0),40)|0);
 $557 = (getTempRet0() | 0);
 $558 = $554 | $556;
 $559 = $555 | $557;
 $560 = (_i64Add(($546|0),($547|0),($94|0),($97|0))|0);
 $561 = (getTempRet0() | 0);
 $562 = (_i64Add(($560|0),($561|0),($558|0),($559|0))|0);
 $563 = (getTempRet0() | 0);
 $564 = $562 ^ $549;
 $565 = $563 ^ $548;
 $566 = (_bitshift64Lshr(($564|0),($565|0),16)|0);
 $567 = (getTempRet0() | 0);
 $568 = (_bitshift64Shl(($564|0),($565|0),48)|0);
 $569 = (getTempRet0() | 0);
 $570 = $566 | $568;
 $571 = $567 | $569;
 $572 = (_i64Add(($570|0),($571|0),($550|0),($551|0))|0);
 $573 = (getTempRet0() | 0);
 $574 = $572 ^ $558;
 $575 = $573 ^ $559;
 $576 = (_bitshift64Lshr(($574|0),($575|0),63)|0);
 $577 = (getTempRet0() | 0);
 $578 = (_bitshift64Shl(($574|0),($575|0),1)|0);
 $579 = (getTempRet0() | 0);
 $580 = $576 | $578;
 $581 = $577 | $579;
 $582 = (_i64Add(($448|0),($449|0),($82|0),($85|0))|0);
 $583 = (getTempRet0() | 0);
 $584 = (_i64Add(($582|0),($583|0),($428|0),($429|0))|0);
 $585 = (getTempRet0() | 0);
 $586 = $584 ^ $342;
 $587 = $585 ^ $343;
 $588 = (_i64Add(($587|0),($586|0),($382|0),($383|0))|0);
 $589 = (getTempRet0() | 0);
 $590 = $588 ^ $428;
 $591 = $589 ^ $429;
 $592 = (_bitshift64Lshr(($590|0),($591|0),24)|0);
 $593 = (getTempRet0() | 0);
 $594 = (_bitshift64Shl(($590|0),($591|0),40)|0);
 $595 = (getTempRet0() | 0);
 $596 = $592 | $594;
 $597 = $593 | $595;
 $598 = (_i64Add(($584|0),($585|0),($40|0),($43|0))|0);
 $599 = (getTempRet0() | 0);
 $600 = (_i64Add(($598|0),($599|0),($596|0),($597|0))|0);
 $601 = (getTempRet0() | 0);
 $602 = $600 ^ $587;
 $603 = $601 ^ $586;
 $604 = (_bitshift64Lshr(($602|0),($603|0),16)|0);
 $605 = (getTempRet0() | 0);
 $606 = (_bitshift64Shl(($602|0),($603|0),48)|0);
 $607 = (getTempRet0() | 0);
 $608 = $604 | $606;
 $609 = $605 | $607;
 $610 = (_i64Add(($608|0),($609|0),($588|0),($589|0))|0);
 $611 = (getTempRet0() | 0);
 $612 = $610 ^ $596;
 $613 = $611 ^ $597;
 $614 = (_bitshift64Lshr(($612|0),($613|0),63)|0);
 $615 = (getTempRet0() | 0);
 $616 = (_bitshift64Shl(($612|0),($613|0),1)|0);
 $617 = (getTempRet0() | 0);
 $618 = $614 | $616;
 $619 = $615 | $617;
 $620 = (_i64Add(($486|0),($487|0),($10|0),($13|0))|0);
 $621 = (getTempRet0() | 0);
 $622 = (_i64Add(($620|0),($621|0),($542|0),($543|0))|0);
 $623 = (getTempRet0() | 0);
 $624 = $622 ^ $608;
 $625 = $623 ^ $609;
 $626 = (_i64Add(($625|0),($624|0),($572|0),($573|0))|0);
 $627 = (getTempRet0() | 0);
 $628 = $626 ^ $542;
 $629 = $627 ^ $543;
 $630 = (_bitshift64Lshr(($628|0),($629|0),24)|0);
 $631 = (getTempRet0() | 0);
 $632 = (_bitshift64Shl(($628|0),($629|0),40)|0);
 $633 = (getTempRet0() | 0);
 $634 = $630 | $632;
 $635 = $631 | $633;
 $636 = (_i64Add(($622|0),($623|0),($76|0),($79|0))|0);
 $637 = (getTempRet0() | 0);
 $638 = (_i64Add(($636|0),($637|0),($634|0),($635|0))|0);
 $639 = (getTempRet0() | 0);
 $640 = $638 ^ $625;
 $641 = $639 ^ $624;
 $642 = (_bitshift64Lshr(($640|0),($641|0),16)|0);
 $643 = (getTempRet0() | 0);
 $644 = (_bitshift64Shl(($640|0),($641|0),48)|0);
 $645 = (getTempRet0() | 0);
 $646 = $642 | $644;
 $647 = $643 | $645;
 $648 = (_i64Add(($646|0),($647|0),($626|0),($627|0))|0);
 $649 = (getTempRet0() | 0);
 $650 = $648 ^ $634;
 $651 = $649 ^ $635;
 $652 = (_bitshift64Lshr(($650|0),($651|0),63)|0);
 $653 = (getTempRet0() | 0);
 $654 = (_bitshift64Shl(($650|0),($651|0),1)|0);
 $655 = (getTempRet0() | 0);
 $656 = $652 | $654;
 $657 = $653 | $655;
 $658 = (_i64Add(($524|0),($525|0),($4|0),($7|0))|0);
 $659 = (getTempRet0() | 0);
 $660 = (_i64Add(($658|0),($659|0),($580|0),($581|0))|0);
 $661 = (getTempRet0() | 0);
 $662 = $660 ^ $494;
 $663 = $661 ^ $495;
 $664 = (_i64Add(($663|0),($662|0),($610|0),($611|0))|0);
 $665 = (getTempRet0() | 0);
 $666 = $664 ^ $580;
 $667 = $665 ^ $581;
 $668 = (_bitshift64Lshr(($666|0),($667|0),24)|0);
 $669 = (getTempRet0() | 0);
 $670 = (_bitshift64Shl(($666|0),($667|0),40)|0);
 $671 = (getTempRet0() | 0);
 $672 = $668 | $670;
 $673 = $669 | $671;
 $674 = (_i64Add(($660|0),($661|0),($16|0),($19|0))|0);
 $675 = (getTempRet0() | 0);
 $676 = (_i64Add(($674|0),($675|0),($672|0),($673|0))|0);
 $677 = (getTempRet0() | 0);
 $678 = $676 ^ $663;
 $679 = $677 ^ $662;
 $680 = (_bitshift64Lshr(($678|0),($679|0),16)|0);
 $681 = (getTempRet0() | 0);
 $682 = (_bitshift64Shl(($678|0),($679|0),48)|0);
 $683 = (getTempRet0() | 0);
 $684 = $680 | $682;
 $685 = $681 | $683;
 $686 = (_i64Add(($684|0),($685|0),($664|0),($665|0))|0);
 $687 = (getTempRet0() | 0);
 $688 = $686 ^ $672;
 $689 = $687 ^ $673;
 $690 = (_bitshift64Lshr(($688|0),($689|0),63)|0);
 $691 = (getTempRet0() | 0);
 $692 = (_bitshift64Shl(($688|0),($689|0),1)|0);
 $693 = (getTempRet0() | 0);
 $694 = $690 | $692;
 $695 = $691 | $693;
 $696 = (_i64Add(($562|0),($563|0),($70|0),($73|0))|0);
 $697 = (getTempRet0() | 0);
 $698 = (_i64Add(($696|0),($697|0),($618|0),($619|0))|0);
 $699 = (getTempRet0() | 0);
 $700 = $698 ^ $532;
 $701 = $699 ^ $533;
 $702 = (_i64Add(($701|0),($700|0),($496|0),($497|0))|0);
 $703 = (getTempRet0() | 0);
 $704 = $702 ^ $618;
 $705 = $703 ^ $619;
 $706 = (_bitshift64Lshr(($704|0),($705|0),24)|0);
 $707 = (getTempRet0() | 0);
 $708 = (_bitshift64Shl(($704|0),($705|0),40)|0);
 $709 = (getTempRet0() | 0);
 $710 = $706 | $708;
 $711 = $707 | $709;
 $712 = (_i64Add(($698|0),($699|0),($46|0),($49|0))|0);
 $713 = (getTempRet0() | 0);
 $714 = (_i64Add(($712|0),($713|0),($710|0),($711|0))|0);
 $715 = (getTempRet0() | 0);
 $716 = $714 ^ $701;
 $717 = $715 ^ $700;
 $718 = (_bitshift64Lshr(($716|0),($717|0),16)|0);
 $719 = (getTempRet0() | 0);
 $720 = (_bitshift64Shl(($716|0),($717|0),48)|0);
 $721 = (getTempRet0() | 0);
 $722 = $718 | $720;
 $723 = $719 | $721;
 $724 = (_i64Add(($722|0),($723|0),($702|0),($703|0))|0);
 $725 = (getTempRet0() | 0);
 $726 = $724 ^ $710;
 $727 = $725 ^ $711;
 $728 = (_bitshift64Lshr(($726|0),($727|0),63)|0);
 $729 = (getTempRet0() | 0);
 $730 = (_bitshift64Shl(($726|0),($727|0),1)|0);
 $731 = (getTempRet0() | 0);
 $732 = $728 | $730;
 $733 = $729 | $731;
 $734 = (_i64Add(($600|0),($601|0),($34|0),($37|0))|0);
 $735 = (getTempRet0() | 0);
 $736 = (_i64Add(($734|0),($735|0),($504|0),($505|0))|0);
 $737 = (getTempRet0() | 0);
 $738 = $736 ^ $570;
 $739 = $737 ^ $571;
 $740 = (_i64Add(($739|0),($738|0),($534|0),($535|0))|0);
 $741 = (getTempRet0() | 0);
 $742 = $740 ^ $504;
 $743 = $741 ^ $505;
 $744 = (_bitshift64Lshr(($742|0),($743|0),24)|0);
 $745 = (getTempRet0() | 0);
 $746 = (_bitshift64Shl(($742|0),($743|0),40)|0);
 $747 = (getTempRet0() | 0);
 $748 = $744 | $746;
 $749 = $745 | $747;
 $750 = (_i64Add(($736|0),($737|0),($22|0),($25|0))|0);
 $751 = (getTempRet0() | 0);
 $752 = (_i64Add(($750|0),($751|0),($748|0),($749|0))|0);
 $753 = (getTempRet0() | 0);
 $754 = $752 ^ $739;
 $755 = $753 ^ $738;
 $756 = (_bitshift64Lshr(($754|0),($755|0),16)|0);
 $757 = (getTempRet0() | 0);
 $758 = (_bitshift64Shl(($754|0),($755|0),48)|0);
 $759 = (getTempRet0() | 0);
 $760 = $756 | $758;
 $761 = $757 | $759;
 $762 = (_i64Add(($760|0),($761|0),($740|0),($741|0))|0);
 $763 = (getTempRet0() | 0);
 $764 = $762 ^ $748;
 $765 = $763 ^ $749;
 $766 = (_bitshift64Lshr(($764|0),($765|0),63)|0);
 $767 = (getTempRet0() | 0);
 $768 = (_bitshift64Shl(($764|0),($765|0),1)|0);
 $769 = (getTempRet0() | 0);
 $770 = $766 | $768;
 $771 = $767 | $769;
 $772 = (_i64Add(($638|0),($639|0),($70|0),($73|0))|0);
 $773 = (getTempRet0() | 0);
 $774 = (_i64Add(($772|0),($773|0),($770|0),($771|0))|0);
 $775 = (getTempRet0() | 0);
 $776 = $774 ^ $684;
 $777 = $775 ^ $685;
 $778 = (_i64Add(($777|0),($776|0),($724|0),($725|0))|0);
 $779 = (getTempRet0() | 0);
 $780 = $778 ^ $770;
 $781 = $779 ^ $771;
 $782 = (_bitshift64Lshr(($780|0),($781|0),24)|0);
 $783 = (getTempRet0() | 0);
 $784 = (_bitshift64Shl(($780|0),($781|0),40)|0);
 $785 = (getTempRet0() | 0);
 $786 = $782 | $784;
 $787 = $783 | $785;
 $788 = (_i64Add(($774|0),($775|0),($52|0),($55|0))|0);
 $789 = (getTempRet0() | 0);
 $790 = (_i64Add(($788|0),($789|0),($786|0),($787|0))|0);
 $791 = (getTempRet0() | 0);
 $792 = $790 ^ $777;
 $793 = $791 ^ $776;
 $794 = (_bitshift64Lshr(($792|0),($793|0),16)|0);
 $795 = (getTempRet0() | 0);
 $796 = (_bitshift64Shl(($792|0),($793|0),48)|0);
 $797 = (getTempRet0() | 0);
 $798 = $794 | $796;
 $799 = $795 | $797;
 $800 = (_i64Add(($798|0),($799|0),($778|0),($779|0))|0);
 $801 = (getTempRet0() | 0);
 $802 = $800 ^ $786;
 $803 = $801 ^ $787;
 $804 = (_bitshift64Lshr(($802|0),($803|0),63)|0);
 $805 = (getTempRet0() | 0);
 $806 = (_bitshift64Shl(($802|0),($803|0),1)|0);
 $807 = (getTempRet0() | 0);
 $808 = $804 | $806;
 $809 = $805 | $807;
 $810 = (_i64Add(($676|0),($677|0),($76|0),($79|0))|0);
 $811 = (getTempRet0() | 0);
 $812 = (_i64Add(($810|0),($811|0),($656|0),($657|0))|0);
 $813 = (getTempRet0() | 0);
 $814 = $812 ^ $722;
 $815 = $813 ^ $723;
 $816 = (_i64Add(($815|0),($814|0),($762|0),($763|0))|0);
 $817 = (getTempRet0() | 0);
 $818 = $816 ^ $656;
 $819 = $817 ^ $657;
 $820 = (_bitshift64Lshr(($818|0),($819|0),24)|0);
 $821 = (getTempRet0() | 0);
 $822 = (_bitshift64Shl(($818|0),($819|0),40)|0);
 $823 = (getTempRet0() | 0);
 $824 = $820 | $822;
 $825 = $821 | $823;
 $826 = (_i64Add(($812|0),($813|0),($4|0),($7|0))|0);
 $827 = (getTempRet0() | 0);
 $828 = (_i64Add(($826|0),($827|0),($824|0),($825|0))|0);
 $829 = (getTempRet0() | 0);
 $830 = $828 ^ $815;
 $831 = $829 ^ $814;
 $832 = (_bitshift64Lshr(($830|0),($831|0),16)|0);
 $833 = (getTempRet0() | 0);
 $834 = (_bitshift64Shl(($830|0),($831|0),48)|0);
 $835 = (getTempRet0() | 0);
 $836 = $832 | $834;
 $837 = $833 | $835;
 $838 = (_i64Add(($836|0),($837|0),($816|0),($817|0))|0);
 $839 = (getTempRet0() | 0);
 $840 = $838 ^ $824;
 $841 = $839 ^ $825;
 $842 = (_bitshift64Lshr(($840|0),($841|0),63)|0);
 $843 = (getTempRet0() | 0);
 $844 = (_bitshift64Shl(($840|0),($841|0),1)|0);
 $845 = (getTempRet0() | 0);
 $846 = $842 | $844;
 $847 = $843 | $845;
 $848 = (_i64Add(($714|0),($715|0),($34|0),($37|0))|0);
 $849 = (getTempRet0() | 0);
 $850 = (_i64Add(($848|0),($849|0),($694|0),($695|0))|0);
 $851 = (getTempRet0() | 0);
 $852 = $850 ^ $760;
 $853 = $851 ^ $761;
 $854 = (_i64Add(($853|0),($852|0),($648|0),($649|0))|0);
 $855 = (getTempRet0() | 0);
 $856 = $854 ^ $694;
 $857 = $855 ^ $695;
 $858 = (_bitshift64Lshr(($856|0),($857|0),24)|0);
 $859 = (getTempRet0() | 0);
 $860 = (_bitshift64Shl(($856|0),($857|0),40)|0);
 $861 = (getTempRet0() | 0);
 $862 = $858 | $860;
 $863 = $859 | $861;
 $864 = (_i64Add(($850|0),($851|0),($16|0),($19|0))|0);
 $865 = (getTempRet0() | 0);
 $866 = (_i64Add(($864|0),($865|0),($862|0),($863|0))|0);
 $867 = (getTempRet0() | 0);
 $868 = $866 ^ $853;
 $869 = $867 ^ $852;
 $870 = (_bitshift64Lshr(($868|0),($869|0),16)|0);
 $871 = (getTempRet0() | 0);
 $872 = (_bitshift64Shl(($868|0),($869|0),48)|0);
 $873 = (getTempRet0() | 0);
 $874 = $870 | $872;
 $875 = $871 | $873;
 $876 = (_i64Add(($874|0),($875|0),($854|0),($855|0))|0);
 $877 = (getTempRet0() | 0);
 $878 = $876 ^ $862;
 $879 = $877 ^ $863;
 $880 = (_bitshift64Lshr(($878|0),($879|0),63)|0);
 $881 = (getTempRet0() | 0);
 $882 = (_bitshift64Shl(($878|0),($879|0),1)|0);
 $883 = (getTempRet0() | 0);
 $884 = $880 | $882;
 $885 = $881 | $883;
 $886 = (_i64Add(($752|0),($753|0),($94|0),($97|0))|0);
 $887 = (getTempRet0() | 0);
 $888 = (_i64Add(($886|0),($887|0),($732|0),($733|0))|0);
 $889 = (getTempRet0() | 0);
 $890 = $888 ^ $646;
 $891 = $889 ^ $647;
 $892 = (_i64Add(($891|0),($890|0),($686|0),($687|0))|0);
 $893 = (getTempRet0() | 0);
 $894 = $892 ^ $732;
 $895 = $893 ^ $733;
 $896 = (_bitshift64Lshr(($894|0),($895|0),24)|0);
 $897 = (getTempRet0() | 0);
 $898 = (_bitshift64Shl(($894|0),($895|0),40)|0);
 $899 = (getTempRet0() | 0);
 $900 = $896 | $898;
 $901 = $897 | $899;
 $902 = (_i64Add(($888|0),($889|0),($82|0),($85|0))|0);
 $903 = (getTempRet0() | 0);
 $904 = (_i64Add(($902|0),($903|0),($900|0),($901|0))|0);
 $905 = (getTempRet0() | 0);
 $906 = $904 ^ $891;
 $907 = $905 ^ $890;
 $908 = (_bitshift64Lshr(($906|0),($907|0),16)|0);
 $909 = (getTempRet0() | 0);
 $910 = (_bitshift64Shl(($906|0),($907|0),48)|0);
 $911 = (getTempRet0() | 0);
 $912 = $908 | $910;
 $913 = $909 | $911;
 $914 = (_i64Add(($912|0),($913|0),($892|0),($893|0))|0);
 $915 = (getTempRet0() | 0);
 $916 = $914 ^ $900;
 $917 = $915 ^ $901;
 $918 = (_bitshift64Lshr(($916|0),($917|0),63)|0);
 $919 = (getTempRet0() | 0);
 $920 = (_bitshift64Shl(($916|0),($917|0),1)|0);
 $921 = (getTempRet0() | 0);
 $922 = $918 | $920;
 $923 = $919 | $921;
 $924 = (_i64Add(($790|0),($791|0),($64|0),($67|0))|0);
 $925 = (getTempRet0() | 0);
 $926 = (_i64Add(($924|0),($925|0),($846|0),($847|0))|0);
 $927 = (getTempRet0() | 0);
 $928 = $926 ^ $912;
 $929 = $927 ^ $913;
 $930 = (_i64Add(($929|0),($928|0),($876|0),($877|0))|0);
 $931 = (getTempRet0() | 0);
 $932 = $930 ^ $846;
 $933 = $931 ^ $847;
 $934 = (_bitshift64Lshr(($932|0),($933|0),24)|0);
 $935 = (getTempRet0() | 0);
 $936 = (_bitshift64Shl(($932|0),($933|0),40)|0);
 $937 = (getTempRet0() | 0);
 $938 = $934 | $936;
 $939 = $935 | $937;
 $940 = (_i64Add(($926|0),($927|0),($88|0),($91|0))|0);
 $941 = (getTempRet0() | 0);
 $942 = (_i64Add(($940|0),($941|0),($938|0),($939|0))|0);
 $943 = (getTempRet0() | 0);
 $944 = $942 ^ $929;
 $945 = $943 ^ $928;
 $946 = (_bitshift64Lshr(($944|0),($945|0),16)|0);
 $947 = (getTempRet0() | 0);
 $948 = (_bitshift64Shl(($944|0),($945|0),48)|0);
 $949 = (getTempRet0() | 0);
 $950 = $946 | $948;
 $951 = $947 | $949;
 $952 = (_i64Add(($950|0),($951|0),($930|0),($931|0))|0);
 $953 = (getTempRet0() | 0);
 $954 = $952 ^ $938;
 $955 = $953 ^ $939;
 $956 = (_bitshift64Lshr(($954|0),($955|0),63)|0);
 $957 = (getTempRet0() | 0);
 $958 = (_bitshift64Shl(($954|0),($955|0),1)|0);
 $959 = (getTempRet0() | 0);
 $960 = $956 | $958;
 $961 = $957 | $959;
 $962 = (_i64Add(($828|0),($829|0),($22|0),($25|0))|0);
 $963 = (getTempRet0() | 0);
 $964 = (_i64Add(($962|0),($963|0),($884|0),($885|0))|0);
 $965 = (getTempRet0() | 0);
 $966 = $964 ^ $798;
 $967 = $965 ^ $799;
 $968 = (_i64Add(($967|0),($966|0),($914|0),($915|0))|0);
 $969 = (getTempRet0() | 0);
 $970 = $968 ^ $884;
 $971 = $969 ^ $885;
 $972 = (_bitshift64Lshr(($970|0),($971|0),24)|0);
 $973 = (getTempRet0() | 0);
 $974 = (_bitshift64Shl(($970|0),($971|0),40)|0);
 $975 = (getTempRet0() | 0);
 $976 = $972 | $974;
 $977 = $973 | $975;
 $978 = (_i64Add(($964|0),($965|0),($40|0),($43|0))|0);
 $979 = (getTempRet0() | 0);
 $980 = (_i64Add(($978|0),($979|0),($976|0),($977|0))|0);
 $981 = (getTempRet0() | 0);
 $982 = $980 ^ $967;
 $983 = $981 ^ $966;
 $984 = (_bitshift64Lshr(($982|0),($983|0),16)|0);
 $985 = (getTempRet0() | 0);
 $986 = (_bitshift64Shl(($982|0),($983|0),48)|0);
 $987 = (getTempRet0() | 0);
 $988 = $984 | $986;
 $989 = $985 | $987;
 $990 = (_i64Add(($988|0),($989|0),($968|0),($969|0))|0);
 $991 = (getTempRet0() | 0);
 $992 = $990 ^ $976;
 $993 = $991 ^ $977;
 $994 = (_bitshift64Lshr(($992|0),($993|0),63)|0);
 $995 = (getTempRet0() | 0);
 $996 = (_bitshift64Shl(($992|0),($993|0),1)|0);
 $997 = (getTempRet0() | 0);
 $998 = $994 | $996;
 $999 = $995 | $997;
 $1000 = (_i64Add(($866|0),($867|0),($46|0),($49|0))|0);
 $1001 = (getTempRet0() | 0);
 $1002 = (_i64Add(($1000|0),($1001|0),($922|0),($923|0))|0);
 $1003 = (getTempRet0() | 0);
 $1004 = $1002 ^ $836;
 $1005 = $1003 ^ $837;
 $1006 = (_i64Add(($1005|0),($1004|0),($800|0),($801|0))|0);
 $1007 = (getTempRet0() | 0);
 $1008 = $1006 ^ $922;
 $1009 = $1007 ^ $923;
 $1010 = (_bitshift64Lshr(($1008|0),($1009|0),24)|0);
 $1011 = (getTempRet0() | 0);
 $1012 = (_bitshift64Shl(($1008|0),($1009|0),40)|0);
 $1013 = (getTempRet0() | 0);
 $1014 = $1010 | $1012;
 $1015 = $1011 | $1013;
 $1016 = (_i64Add(($1002|0),($1003|0),($10|0),($13|0))|0);
 $1017 = (getTempRet0() | 0);
 $1018 = (_i64Add(($1016|0),($1017|0),($1014|0),($1015|0))|0);
 $1019 = (getTempRet0() | 0);
 $1020 = $1018 ^ $1005;
 $1021 = $1019 ^ $1004;
 $1022 = (_bitshift64Lshr(($1020|0),($1021|0),16)|0);
 $1023 = (getTempRet0() | 0);
 $1024 = (_bitshift64Shl(($1020|0),($1021|0),48)|0);
 $1025 = (getTempRet0() | 0);
 $1026 = $1022 | $1024;
 $1027 = $1023 | $1025;
 $1028 = (_i64Add(($1026|0),($1027|0),($1006|0),($1007|0))|0);
 $1029 = (getTempRet0() | 0);
 $1030 = $1028 ^ $1014;
 $1031 = $1029 ^ $1015;
 $1032 = (_bitshift64Lshr(($1030|0),($1031|0),63)|0);
 $1033 = (getTempRet0() | 0);
 $1034 = (_bitshift64Shl(($1030|0),($1031|0),1)|0);
 $1035 = (getTempRet0() | 0);
 $1036 = $1032 | $1034;
 $1037 = $1033 | $1035;
 $1038 = (_i64Add(($904|0),($905|0),($58|0),($61|0))|0);
 $1039 = (getTempRet0() | 0);
 $1040 = (_i64Add(($1038|0),($1039|0),($808|0),($809|0))|0);
 $1041 = (getTempRet0() | 0);
 $1042 = $1040 ^ $874;
 $1043 = $1041 ^ $875;
 $1044 = (_i64Add(($1043|0),($1042|0),($838|0),($839|0))|0);
 $1045 = (getTempRet0() | 0);
 $1046 = $1044 ^ $808;
 $1047 = $1045 ^ $809;
 $1048 = (_bitshift64Lshr(($1046|0),($1047|0),24)|0);
 $1049 = (getTempRet0() | 0);
 $1050 = (_bitshift64Shl(($1046|0),($1047|0),40)|0);
 $1051 = (getTempRet0() | 0);
 $1052 = $1048 | $1050;
 $1053 = $1049 | $1051;
 $1054 = (_i64Add(($1040|0),($1041|0),($28|0),($31|0))|0);
 $1055 = (getTempRet0() | 0);
 $1056 = (_i64Add(($1054|0),($1055|0),($1052|0),($1053|0))|0);
 $1057 = (getTempRet0() | 0);
 $1058 = $1056 ^ $1043;
 $1059 = $1057 ^ $1042;
 $1060 = (_bitshift64Lshr(($1058|0),($1059|0),16)|0);
 $1061 = (getTempRet0() | 0);
 $1062 = (_bitshift64Shl(($1058|0),($1059|0),48)|0);
 $1063 = (getTempRet0() | 0);
 $1064 = $1060 | $1062;
 $1065 = $1061 | $1063;
 $1066 = (_i64Add(($1064|0),($1065|0),($1044|0),($1045|0))|0);
 $1067 = (getTempRet0() | 0);
 $1068 = $1066 ^ $1052;
 $1069 = $1067 ^ $1053;
 $1070 = (_bitshift64Lshr(($1068|0),($1069|0),63)|0);
 $1071 = (getTempRet0() | 0);
 $1072 = (_bitshift64Shl(($1068|0),($1069|0),1)|0);
 $1073 = (getTempRet0() | 0);
 $1074 = $1070 | $1072;
 $1075 = $1071 | $1073;
 $1076 = (_i64Add(($942|0),($943|0),($46|0),($49|0))|0);
 $1077 = (getTempRet0() | 0);
 $1078 = (_i64Add(($1076|0),($1077|0),($1074|0),($1075|0))|0);
 $1079 = (getTempRet0() | 0);
 $1080 = $1078 ^ $988;
 $1081 = $1079 ^ $989;
 $1082 = (_i64Add(($1081|0),($1080|0),($1028|0),($1029|0))|0);
 $1083 = (getTempRet0() | 0);
 $1084 = $1082 ^ $1074;
 $1085 = $1083 ^ $1075;
 $1086 = (_bitshift64Lshr(($1084|0),($1085|0),24)|0);
 $1087 = (getTempRet0() | 0);
 $1088 = (_bitshift64Shl(($1084|0),($1085|0),40)|0);
 $1089 = (getTempRet0() | 0);
 $1090 = $1086 | $1088;
 $1091 = $1087 | $1089;
 $1092 = (_i64Add(($1078|0),($1079|0),($58|0),($61|0))|0);
 $1093 = (getTempRet0() | 0);
 $1094 = (_i64Add(($1092|0),($1093|0),($1090|0),($1091|0))|0);
 $1095 = (getTempRet0() | 0);
 $1096 = $1094 ^ $1081;
 $1097 = $1095 ^ $1080;
 $1098 = (_bitshift64Lshr(($1096|0),($1097|0),16)|0);
 $1099 = (getTempRet0() | 0);
 $1100 = (_bitshift64Shl(($1096|0),($1097|0),48)|0);
 $1101 = (getTempRet0() | 0);
 $1102 = $1098 | $1100;
 $1103 = $1099 | $1101;
 $1104 = (_i64Add(($1102|0),($1103|0),($1082|0),($1083|0))|0);
 $1105 = (getTempRet0() | 0);
 $1106 = $1104 ^ $1090;
 $1107 = $1105 ^ $1091;
 $1108 = (_bitshift64Lshr(($1106|0),($1107|0),63)|0);
 $1109 = (getTempRet0() | 0);
 $1110 = (_bitshift64Shl(($1106|0),($1107|0),1)|0);
 $1111 = (getTempRet0() | 0);
 $1112 = $1108 | $1110;
 $1113 = $1109 | $1111;
 $1114 = (_i64Add(($980|0),($981|0),($22|0),($25|0))|0);
 $1115 = (getTempRet0() | 0);
 $1116 = (_i64Add(($1114|0),($1115|0),($960|0),($961|0))|0);
 $1117 = (getTempRet0() | 0);
 $1118 = $1116 ^ $1026;
 $1119 = $1117 ^ $1027;
 $1120 = (_i64Add(($1119|0),($1118|0),($1066|0),($1067|0))|0);
 $1121 = (getTempRet0() | 0);
 $1122 = $1120 ^ $960;
 $1123 = $1121 ^ $961;
 $1124 = (_bitshift64Lshr(($1122|0),($1123|0),24)|0);
 $1125 = (getTempRet0() | 0);
 $1126 = (_bitshift64Shl(($1122|0),($1123|0),40)|0);
 $1127 = (getTempRet0() | 0);
 $1128 = $1124 | $1126;
 $1129 = $1125 | $1127;
 $1130 = (_i64Add(($1116|0),($1117|0),($10|0),($13|0))|0);
 $1131 = (getTempRet0() | 0);
 $1132 = (_i64Add(($1130|0),($1131|0),($1128|0),($1129|0))|0);
 $1133 = (getTempRet0() | 0);
 $1134 = $1132 ^ $1119;
 $1135 = $1133 ^ $1118;
 $1136 = (_bitshift64Lshr(($1134|0),($1135|0),16)|0);
 $1137 = (getTempRet0() | 0);
 $1138 = (_bitshift64Shl(($1134|0),($1135|0),48)|0);
 $1139 = (getTempRet0() | 0);
 $1140 = $1136 | $1138;
 $1141 = $1137 | $1139;
 $1142 = (_i64Add(($1140|0),($1141|0),($1120|0),($1121|0))|0);
 $1143 = (getTempRet0() | 0);
 $1144 = $1142 ^ $1128;
 $1145 = $1143 ^ $1129;
 $1146 = (_bitshift64Lshr(($1144|0),($1145|0),63)|0);
 $1147 = (getTempRet0() | 0);
 $1148 = (_bitshift64Shl(($1144|0),($1145|0),1)|0);
 $1149 = (getTempRet0() | 0);
 $1150 = $1146 | $1148;
 $1151 = $1147 | $1149;
 $1152 = (_i64Add(($1018|0),($1019|0),($82|0),($85|0))|0);
 $1153 = (getTempRet0() | 0);
 $1154 = (_i64Add(($1152|0),($1153|0),($998|0),($999|0))|0);
 $1155 = (getTempRet0() | 0);
 $1156 = $1154 ^ $1064;
 $1157 = $1155 ^ $1065;
 $1158 = (_i64Add(($1157|0),($1156|0),($952|0),($953|0))|0);
 $1159 = (getTempRet0() | 0);
 $1160 = $1158 ^ $998;
 $1161 = $1159 ^ $999;
 $1162 = (_bitshift64Lshr(($1160|0),($1161|0),24)|0);
 $1163 = (getTempRet0() | 0);
 $1164 = (_bitshift64Shl(($1160|0),($1161|0),40)|0);
 $1165 = (getTempRet0() | 0);
 $1166 = $1162 | $1164;
 $1167 = $1163 | $1165;
 $1168 = (_i64Add(($1154|0),($1155|0),($76|0),($79|0))|0);
 $1169 = (getTempRet0() | 0);
 $1170 = (_i64Add(($1168|0),($1169|0),($1166|0),($1167|0))|0);
 $1171 = (getTempRet0() | 0);
 $1172 = $1170 ^ $1157;
 $1173 = $1171 ^ $1156;
 $1174 = (_bitshift64Lshr(($1172|0),($1173|0),16)|0);
 $1175 = (getTempRet0() | 0);
 $1176 = (_bitshift64Shl(($1172|0),($1173|0),48)|0);
 $1177 = (getTempRet0() | 0);
 $1178 = $1174 | $1176;
 $1179 = $1175 | $1177;
 $1180 = (_i64Add(($1178|0),($1179|0),($1158|0),($1159|0))|0);
 $1181 = (getTempRet0() | 0);
 $1182 = $1180 ^ $1166;
 $1183 = $1181 ^ $1167;
 $1184 = (_bitshift64Lshr(($1182|0),($1183|0),63)|0);
 $1185 = (getTempRet0() | 0);
 $1186 = (_bitshift64Shl(($1182|0),($1183|0),1)|0);
 $1187 = (getTempRet0() | 0);
 $1188 = $1184 | $1186;
 $1189 = $1185 | $1187;
 $1190 = (_i64Add(($1056|0),($1057|0),($70|0),($73|0))|0);
 $1191 = (getTempRet0() | 0);
 $1192 = (_i64Add(($1190|0),($1191|0),($1036|0),($1037|0))|0);
 $1193 = (getTempRet0() | 0);
 $1194 = $1192 ^ $950;
 $1195 = $1193 ^ $951;
 $1196 = (_i64Add(($1195|0),($1194|0),($990|0),($991|0))|0);
 $1197 = (getTempRet0() | 0);
 $1198 = $1196 ^ $1036;
 $1199 = $1197 ^ $1037;
 $1200 = (_bitshift64Lshr(($1198|0),($1199|0),24)|0);
 $1201 = (getTempRet0() | 0);
 $1202 = (_bitshift64Shl(($1198|0),($1199|0),40)|0);
 $1203 = (getTempRet0() | 0);
 $1204 = $1200 | $1202;
 $1205 = $1201 | $1203;
 $1206 = (_i64Add(($1192|0),($1193|0),($88|0),($91|0))|0);
 $1207 = (getTempRet0() | 0);
 $1208 = (_i64Add(($1206|0),($1207|0),($1204|0),($1205|0))|0);
 $1209 = (getTempRet0() | 0);
 $1210 = $1208 ^ $1195;
 $1211 = $1209 ^ $1194;
 $1212 = (_bitshift64Lshr(($1210|0),($1211|0),16)|0);
 $1213 = (getTempRet0() | 0);
 $1214 = (_bitshift64Shl(($1210|0),($1211|0),48)|0);
 $1215 = (getTempRet0() | 0);
 $1216 = $1212 | $1214;
 $1217 = $1213 | $1215;
 $1218 = (_i64Add(($1216|0),($1217|0),($1196|0),($1197|0))|0);
 $1219 = (getTempRet0() | 0);
 $1220 = $1218 ^ $1204;
 $1221 = $1219 ^ $1205;
 $1222 = (_bitshift64Lshr(($1220|0),($1221|0),63)|0);
 $1223 = (getTempRet0() | 0);
 $1224 = (_bitshift64Shl(($1220|0),($1221|0),1)|0);
 $1225 = (getTempRet0() | 0);
 $1226 = $1222 | $1224;
 $1227 = $1223 | $1225;
 $1228 = (_i64Add(($1094|0),($1095|0),($16|0),($19|0))|0);
 $1229 = (getTempRet0() | 0);
 $1230 = (_i64Add(($1228|0),($1229|0),($1150|0),($1151|0))|0);
 $1231 = (getTempRet0() | 0);
 $1232 = $1230 ^ $1216;
 $1233 = $1231 ^ $1217;
 $1234 = (_i64Add(($1233|0),($1232|0),($1180|0),($1181|0))|0);
 $1235 = (getTempRet0() | 0);
 $1236 = $1234 ^ $1150;
 $1237 = $1235 ^ $1151;
 $1238 = (_bitshift64Lshr(($1236|0),($1237|0),24)|0);
 $1239 = (getTempRet0() | 0);
 $1240 = (_bitshift64Shl(($1236|0),($1237|0),40)|0);
 $1241 = (getTempRet0() | 0);
 $1242 = $1238 | $1240;
 $1243 = $1239 | $1241;
 $1244 = (_i64Add(($1230|0),($1231|0),($40|0),($43|0))|0);
 $1245 = (getTempRet0() | 0);
 $1246 = (_i64Add(($1244|0),($1245|0),($1242|0),($1243|0))|0);
 $1247 = (getTempRet0() | 0);
 $1248 = $1246 ^ $1233;
 $1249 = $1247 ^ $1232;
 $1250 = (_bitshift64Lshr(($1248|0),($1249|0),16)|0);
 $1251 = (getTempRet0() | 0);
 $1252 = (_bitshift64Shl(($1248|0),($1249|0),48)|0);
 $1253 = (getTempRet0() | 0);
 $1254 = $1250 | $1252;
 $1255 = $1251 | $1253;
 $1256 = (_i64Add(($1254|0),($1255|0),($1234|0),($1235|0))|0);
 $1257 = (getTempRet0() | 0);
 $1258 = $1256 ^ $1242;
 $1259 = $1257 ^ $1243;
 $1260 = (_bitshift64Lshr(($1258|0),($1259|0),63)|0);
 $1261 = (getTempRet0() | 0);
 $1262 = (_bitshift64Shl(($1258|0),($1259|0),1)|0);
 $1263 = (getTempRet0() | 0);
 $1264 = $1260 | $1262;
 $1265 = $1261 | $1263;
 $1266 = (_i64Add(($1132|0),($1133|0),($34|0),($37|0))|0);
 $1267 = (getTempRet0() | 0);
 $1268 = (_i64Add(($1266|0),($1267|0),($1188|0),($1189|0))|0);
 $1269 = (getTempRet0() | 0);
 $1270 = $1268 ^ $1102;
 $1271 = $1269 ^ $1103;
 $1272 = (_i64Add(($1271|0),($1270|0),($1218|0),($1219|0))|0);
 $1273 = (getTempRet0() | 0);
 $1274 = $1272 ^ $1188;
 $1275 = $1273 ^ $1189;
 $1276 = (_bitshift64Lshr(($1274|0),($1275|0),24)|0);
 $1277 = (getTempRet0() | 0);
 $1278 = (_bitshift64Shl(($1274|0),($1275|0),40)|0);
 $1279 = (getTempRet0() | 0);
 $1280 = $1276 | $1278;
 $1281 = $1277 | $1279;
 $1282 = (_i64Add(($1268|0),($1269|0),($64|0),($67|0))|0);
 $1283 = (getTempRet0() | 0);
 $1284 = (_i64Add(($1282|0),($1283|0),($1280|0),($1281|0))|0);
 $1285 = (getTempRet0() | 0);
 $1286 = $1284 ^ $1271;
 $1287 = $1285 ^ $1270;
 $1288 = (_bitshift64Lshr(($1286|0),($1287|0),16)|0);
 $1289 = (getTempRet0() | 0);
 $1290 = (_bitshift64Shl(($1286|0),($1287|0),48)|0);
 $1291 = (getTempRet0() | 0);
 $1292 = $1288 | $1290;
 $1293 = $1289 | $1291;
 $1294 = (_i64Add(($1292|0),($1293|0),($1272|0),($1273|0))|0);
 $1295 = (getTempRet0() | 0);
 $1296 = $1294 ^ $1280;
 $1297 = $1295 ^ $1281;
 $1298 = (_bitshift64Lshr(($1296|0),($1297|0),63)|0);
 $1299 = (getTempRet0() | 0);
 $1300 = (_bitshift64Shl(($1296|0),($1297|0),1)|0);
 $1301 = (getTempRet0() | 0);
 $1302 = $1298 | $1300;
 $1303 = $1299 | $1301;
 $1304 = (_i64Add(($1170|0),($1171|0),($28|0),($31|0))|0);
 $1305 = (getTempRet0() | 0);
 $1306 = (_i64Add(($1304|0),($1305|0),($1226|0),($1227|0))|0);
 $1307 = (getTempRet0() | 0);
 $1308 = $1306 ^ $1140;
 $1309 = $1307 ^ $1141;
 $1310 = (_i64Add(($1309|0),($1308|0),($1104|0),($1105|0))|0);
 $1311 = (getTempRet0() | 0);
 $1312 = $1310 ^ $1226;
 $1313 = $1311 ^ $1227;
 $1314 = (_bitshift64Lshr(($1312|0),($1313|0),24)|0);
 $1315 = (getTempRet0() | 0);
 $1316 = (_bitshift64Shl(($1312|0),($1313|0),40)|0);
 $1317 = (getTempRet0() | 0);
 $1318 = $1314 | $1316;
 $1319 = $1315 | $1317;
 $1320 = (_i64Add(($1306|0),($1307|0),($4|0),($7|0))|0);
 $1321 = (getTempRet0() | 0);
 $1322 = (_i64Add(($1320|0),($1321|0),($1318|0),($1319|0))|0);
 $1323 = (getTempRet0() | 0);
 $1324 = $1322 ^ $1309;
 $1325 = $1323 ^ $1308;
 $1326 = (_bitshift64Lshr(($1324|0),($1325|0),16)|0);
 $1327 = (getTempRet0() | 0);
 $1328 = (_bitshift64Shl(($1324|0),($1325|0),48)|0);
 $1329 = (getTempRet0() | 0);
 $1330 = $1326 | $1328;
 $1331 = $1327 | $1329;
 $1332 = (_i64Add(($1330|0),($1331|0),($1310|0),($1311|0))|0);
 $1333 = (getTempRet0() | 0);
 $1334 = $1332 ^ $1318;
 $1335 = $1333 ^ $1319;
 $1336 = (_bitshift64Lshr(($1334|0),($1335|0),63)|0);
 $1337 = (getTempRet0() | 0);
 $1338 = (_bitshift64Shl(($1334|0),($1335|0),1)|0);
 $1339 = (getTempRet0() | 0);
 $1340 = $1336 | $1338;
 $1341 = $1337 | $1339;
 $1342 = (_i64Add(($1208|0),($1209|0),($94|0),($97|0))|0);
 $1343 = (getTempRet0() | 0);
 $1344 = (_i64Add(($1342|0),($1343|0),($1112|0),($1113|0))|0);
 $1345 = (getTempRet0() | 0);
 $1346 = $1344 ^ $1178;
 $1347 = $1345 ^ $1179;
 $1348 = (_i64Add(($1347|0),($1346|0),($1142|0),($1143|0))|0);
 $1349 = (getTempRet0() | 0);
 $1350 = $1348 ^ $1112;
 $1351 = $1349 ^ $1113;
 $1352 = (_bitshift64Lshr(($1350|0),($1351|0),24)|0);
 $1353 = (getTempRet0() | 0);
 $1354 = (_bitshift64Shl(($1350|0),($1351|0),40)|0);
 $1355 = (getTempRet0() | 0);
 $1356 = $1352 | $1354;
 $1357 = $1353 | $1355;
 $1358 = (_i64Add(($1344|0),($1345|0),($52|0),($55|0))|0);
 $1359 = (getTempRet0() | 0);
 $1360 = (_i64Add(($1358|0),($1359|0),($1356|0),($1357|0))|0);
 $1361 = (getTempRet0() | 0);
 $1362 = $1360 ^ $1347;
 $1363 = $1361 ^ $1346;
 $1364 = (_bitshift64Lshr(($1362|0),($1363|0),16)|0);
 $1365 = (getTempRet0() | 0);
 $1366 = (_bitshift64Shl(($1362|0),($1363|0),48)|0);
 $1367 = (getTempRet0() | 0);
 $1368 = $1364 | $1366;
 $1369 = $1365 | $1367;
 $1370 = (_i64Add(($1368|0),($1369|0),($1348|0),($1349|0))|0);
 $1371 = (getTempRet0() | 0);
 $1372 = $1370 ^ $1356;
 $1373 = $1371 ^ $1357;
 $1374 = (_bitshift64Lshr(($1372|0),($1373|0),63)|0);
 $1375 = (getTempRet0() | 0);
 $1376 = (_bitshift64Shl(($1372|0),($1373|0),1)|0);
 $1377 = (getTempRet0() | 0);
 $1378 = $1374 | $1376;
 $1379 = $1375 | $1377;
 $1380 = (_i64Add(($1246|0),($1247|0),($58|0),($61|0))|0);
 $1381 = (getTempRet0() | 0);
 $1382 = (_i64Add(($1380|0),($1381|0),($1378|0),($1379|0))|0);
 $1383 = (getTempRet0() | 0);
 $1384 = $1382 ^ $1292;
 $1385 = $1383 ^ $1293;
 $1386 = (_i64Add(($1385|0),($1384|0),($1332|0),($1333|0))|0);
 $1387 = (getTempRet0() | 0);
 $1388 = $1386 ^ $1378;
 $1389 = $1387 ^ $1379;
 $1390 = (_bitshift64Lshr(($1388|0),($1389|0),24)|0);
 $1391 = (getTempRet0() | 0);
 $1392 = (_bitshift64Shl(($1388|0),($1389|0),40)|0);
 $1393 = (getTempRet0() | 0);
 $1394 = $1390 | $1392;
 $1395 = $1391 | $1393;
 $1396 = (_i64Add(($1382|0),($1383|0),($4|0),($7|0))|0);
 $1397 = (getTempRet0() | 0);
 $1398 = (_i64Add(($1396|0),($1397|0),($1394|0),($1395|0))|0);
 $1399 = (getTempRet0() | 0);
 $1400 = $1398 ^ $1385;
 $1401 = $1399 ^ $1384;
 $1402 = (_bitshift64Lshr(($1400|0),($1401|0),16)|0);
 $1403 = (getTempRet0() | 0);
 $1404 = (_bitshift64Shl(($1400|0),($1401|0),48)|0);
 $1405 = (getTempRet0() | 0);
 $1406 = $1402 | $1404;
 $1407 = $1403 | $1405;
 $1408 = (_i64Add(($1406|0),($1407|0),($1386|0),($1387|0))|0);
 $1409 = (getTempRet0() | 0);
 $1410 = $1408 ^ $1394;
 $1411 = $1409 ^ $1395;
 $1412 = (_bitshift64Lshr(($1410|0),($1411|0),63)|0);
 $1413 = (getTempRet0() | 0);
 $1414 = (_bitshift64Shl(($1410|0),($1411|0),1)|0);
 $1415 = (getTempRet0() | 0);
 $1416 = $1412 | $1414;
 $1417 = $1413 | $1415;
 $1418 = (_i64Add(($1284|0),($1285|0),($34|0),($37|0))|0);
 $1419 = (getTempRet0() | 0);
 $1420 = (_i64Add(($1418|0),($1419|0),($1264|0),($1265|0))|0);
 $1421 = (getTempRet0() | 0);
 $1422 = $1420 ^ $1330;
 $1423 = $1421 ^ $1331;
 $1424 = (_i64Add(($1423|0),($1422|0),($1370|0),($1371|0))|0);
 $1425 = (getTempRet0() | 0);
 $1426 = $1424 ^ $1264;
 $1427 = $1425 ^ $1265;
 $1428 = (_bitshift64Lshr(($1426|0),($1427|0),24)|0);
 $1429 = (getTempRet0() | 0);
 $1430 = (_bitshift64Shl(($1426|0),($1427|0),40)|0);
 $1431 = (getTempRet0() | 0);
 $1432 = $1428 | $1430;
 $1433 = $1429 | $1431;
 $1434 = (_i64Add(($1420|0),($1421|0),($46|0),($49|0))|0);
 $1435 = (getTempRet0() | 0);
 $1436 = (_i64Add(($1434|0),($1435|0),($1432|0),($1433|0))|0);
 $1437 = (getTempRet0() | 0);
 $1438 = $1436 ^ $1423;
 $1439 = $1437 ^ $1422;
 $1440 = (_bitshift64Lshr(($1438|0),($1439|0),16)|0);
 $1441 = (getTempRet0() | 0);
 $1442 = (_bitshift64Shl(($1438|0),($1439|0),48)|0);
 $1443 = (getTempRet0() | 0);
 $1444 = $1440 | $1442;
 $1445 = $1441 | $1443;
 $1446 = (_i64Add(($1444|0),($1445|0),($1424|0),($1425|0))|0);
 $1447 = (getTempRet0() | 0);
 $1448 = $1446 ^ $1432;
 $1449 = $1447 ^ $1433;
 $1450 = (_bitshift64Lshr(($1448|0),($1449|0),63)|0);
 $1451 = (getTempRet0() | 0);
 $1452 = (_bitshift64Shl(($1448|0),($1449|0),1)|0);
 $1453 = (getTempRet0() | 0);
 $1454 = $1450 | $1452;
 $1455 = $1451 | $1453;
 $1456 = (_i64Add(($1322|0),($1323|0),($16|0),($19|0))|0);
 $1457 = (getTempRet0() | 0);
 $1458 = (_i64Add(($1456|0),($1457|0),($1302|0),($1303|0))|0);
 $1459 = (getTempRet0() | 0);
 $1460 = $1458 ^ $1368;
 $1461 = $1459 ^ $1369;
 $1462 = (_i64Add(($1461|0),($1460|0),($1256|0),($1257|0))|0);
 $1463 = (getTempRet0() | 0);
 $1464 = $1462 ^ $1302;
 $1465 = $1463 ^ $1303;
 $1466 = (_bitshift64Lshr(($1464|0),($1465|0),24)|0);
 $1467 = (getTempRet0() | 0);
 $1468 = (_bitshift64Shl(($1464|0),($1465|0),40)|0);
 $1469 = (getTempRet0() | 0);
 $1470 = $1466 | $1468;
 $1471 = $1467 | $1469;
 $1472 = (_i64Add(($1458|0),($1459|0),($28|0),($31|0))|0);
 $1473 = (getTempRet0() | 0);
 $1474 = (_i64Add(($1472|0),($1473|0),($1470|0),($1471|0))|0);
 $1475 = (getTempRet0() | 0);
 $1476 = $1474 ^ $1461;
 $1477 = $1475 ^ $1460;
 $1478 = (_bitshift64Lshr(($1476|0),($1477|0),16)|0);
 $1479 = (getTempRet0() | 0);
 $1480 = (_bitshift64Shl(($1476|0),($1477|0),48)|0);
 $1481 = (getTempRet0() | 0);
 $1482 = $1478 | $1480;
 $1483 = $1479 | $1481;
 $1484 = (_i64Add(($1482|0),($1483|0),($1462|0),($1463|0))|0);
 $1485 = (getTempRet0() | 0);
 $1486 = $1484 ^ $1470;
 $1487 = $1485 ^ $1471;
 $1488 = (_bitshift64Lshr(($1486|0),($1487|0),63)|0);
 $1489 = (getTempRet0() | 0);
 $1490 = (_bitshift64Shl(($1486|0),($1487|0),1)|0);
 $1491 = (getTempRet0() | 0);
 $1492 = $1488 | $1490;
 $1493 = $1489 | $1491;
 $1494 = (_i64Add(($1360|0),($1361|0),($64|0),($67|0))|0);
 $1495 = (getTempRet0() | 0);
 $1496 = (_i64Add(($1494|0),($1495|0),($1340|0),($1341|0))|0);
 $1497 = (getTempRet0() | 0);
 $1498 = $1496 ^ $1254;
 $1499 = $1497 ^ $1255;
 $1500 = (_i64Add(($1499|0),($1498|0),($1294|0),($1295|0))|0);
 $1501 = (getTempRet0() | 0);
 $1502 = $1500 ^ $1340;
 $1503 = $1501 ^ $1341;
 $1504 = (_bitshift64Lshr(($1502|0),($1503|0),24)|0);
 $1505 = (getTempRet0() | 0);
 $1506 = (_bitshift64Shl(($1502|0),($1503|0),40)|0);
 $1507 = (getTempRet0() | 0);
 $1508 = $1504 | $1506;
 $1509 = $1505 | $1507;
 $1510 = (_i64Add(($1496|0),($1497|0),($94|0),($97|0))|0);
 $1511 = (getTempRet0() | 0);
 $1512 = (_i64Add(($1510|0),($1511|0),($1508|0),($1509|0))|0);
 $1513 = (getTempRet0() | 0);
 $1514 = $1512 ^ $1499;
 $1515 = $1513 ^ $1498;
 $1516 = (_bitshift64Lshr(($1514|0),($1515|0),16)|0);
 $1517 = (getTempRet0() | 0);
 $1518 = (_bitshift64Shl(($1514|0),($1515|0),48)|0);
 $1519 = (getTempRet0() | 0);
 $1520 = $1516 | $1518;
 $1521 = $1517 | $1519;
 $1522 = (_i64Add(($1520|0),($1521|0),($1500|0),($1501|0))|0);
 $1523 = (getTempRet0() | 0);
 $1524 = $1522 ^ $1508;
 $1525 = $1523 ^ $1509;
 $1526 = (_bitshift64Lshr(($1524|0),($1525|0),63)|0);
 $1527 = (getTempRet0() | 0);
 $1528 = (_bitshift64Shl(($1524|0),($1525|0),1)|0);
 $1529 = (getTempRet0() | 0);
 $1530 = $1526 | $1528;
 $1531 = $1527 | $1529;
 $1532 = (_i64Add(($1398|0),($1399|0),($88|0),($91|0))|0);
 $1533 = (getTempRet0() | 0);
 $1534 = (_i64Add(($1532|0),($1533|0),($1454|0),($1455|0))|0);
 $1535 = (getTempRet0() | 0);
 $1536 = $1534 ^ $1520;
 $1537 = $1535 ^ $1521;
 $1538 = (_i64Add(($1537|0),($1536|0),($1484|0),($1485|0))|0);
 $1539 = (getTempRet0() | 0);
 $1540 = $1538 ^ $1454;
 $1541 = $1539 ^ $1455;
 $1542 = (_bitshift64Lshr(($1540|0),($1541|0),24)|0);
 $1543 = (getTempRet0() | 0);
 $1544 = (_bitshift64Shl(($1540|0),($1541|0),40)|0);
 $1545 = (getTempRet0() | 0);
 $1546 = $1542 | $1544;
 $1547 = $1543 | $1545;
 $1548 = (_i64Add(($1534|0),($1535|0),($10|0),($13|0))|0);
 $1549 = (getTempRet0() | 0);
 $1550 = (_i64Add(($1548|0),($1549|0),($1546|0),($1547|0))|0);
 $1551 = (getTempRet0() | 0);
 $1552 = $1550 ^ $1537;
 $1553 = $1551 ^ $1536;
 $1554 = (_bitshift64Lshr(($1552|0),($1553|0),16)|0);
 $1555 = (getTempRet0() | 0);
 $1556 = (_bitshift64Shl(($1552|0),($1553|0),48)|0);
 $1557 = (getTempRet0() | 0);
 $1558 = $1554 | $1556;
 $1559 = $1555 | $1557;
 $1560 = (_i64Add(($1558|0),($1559|0),($1538|0),($1539|0))|0);
 $1561 = (getTempRet0() | 0);
 $1562 = $1560 ^ $1546;
 $1563 = $1561 ^ $1547;
 $1564 = (_bitshift64Lshr(($1562|0),($1563|0),63)|0);
 $1565 = (getTempRet0() | 0);
 $1566 = (_bitshift64Shl(($1562|0),($1563|0),1)|0);
 $1567 = (getTempRet0() | 0);
 $1568 = $1564 | $1566;
 $1569 = $1565 | $1567;
 $1570 = (_i64Add(($1436|0),($1437|0),($70|0),($73|0))|0);
 $1571 = (getTempRet0() | 0);
 $1572 = (_i64Add(($1570|0),($1571|0),($1492|0),($1493|0))|0);
 $1573 = (getTempRet0() | 0);
 $1574 = $1572 ^ $1406;
 $1575 = $1573 ^ $1407;
 $1576 = (_i64Add(($1575|0),($1574|0),($1522|0),($1523|0))|0);
 $1577 = (getTempRet0() | 0);
 $1578 = $1576 ^ $1492;
 $1579 = $1577 ^ $1493;
 $1580 = (_bitshift64Lshr(($1578|0),($1579|0),24)|0);
 $1581 = (getTempRet0() | 0);
 $1582 = (_bitshift64Shl(($1578|0),($1579|0),40)|0);
 $1583 = (getTempRet0() | 0);
 $1584 = $1580 | $1582;
 $1585 = $1581 | $1583;
 $1586 = (_i64Add(($1572|0),($1573|0),($76|0),($79|0))|0);
 $1587 = (getTempRet0() | 0);
 $1588 = (_i64Add(($1586|0),($1587|0),($1584|0),($1585|0))|0);
 $1589 = (getTempRet0() | 0);
 $1590 = $1588 ^ $1575;
 $1591 = $1589 ^ $1574;
 $1592 = (_bitshift64Lshr(($1590|0),($1591|0),16)|0);
 $1593 = (getTempRet0() | 0);
 $1594 = (_bitshift64Shl(($1590|0),($1591|0),48)|0);
 $1595 = (getTempRet0() | 0);
 $1596 = $1592 | $1594;
 $1597 = $1593 | $1595;
 $1598 = (_i64Add(($1596|0),($1597|0),($1576|0),($1577|0))|0);
 $1599 = (getTempRet0() | 0);
 $1600 = $1598 ^ $1584;
 $1601 = $1599 ^ $1585;
 $1602 = (_bitshift64Lshr(($1600|0),($1601|0),63)|0);
 $1603 = (getTempRet0() | 0);
 $1604 = (_bitshift64Shl(($1600|0),($1601|0),1)|0);
 $1605 = (getTempRet0() | 0);
 $1606 = $1602 | $1604;
 $1607 = $1603 | $1605;
 $1608 = (_i64Add(($1474|0),($1475|0),($40|0),($43|0))|0);
 $1609 = (getTempRet0() | 0);
 $1610 = (_i64Add(($1608|0),($1609|0),($1530|0),($1531|0))|0);
 $1611 = (getTempRet0() | 0);
 $1612 = $1610 ^ $1444;
 $1613 = $1611 ^ $1445;
 $1614 = (_i64Add(($1613|0),($1612|0),($1408|0),($1409|0))|0);
 $1615 = (getTempRet0() | 0);
 $1616 = $1614 ^ $1530;
 $1617 = $1615 ^ $1531;
 $1618 = (_bitshift64Lshr(($1616|0),($1617|0),24)|0);
 $1619 = (getTempRet0() | 0);
 $1620 = (_bitshift64Shl(($1616|0),($1617|0),40)|0);
 $1621 = (getTempRet0() | 0);
 $1622 = $1618 | $1620;
 $1623 = $1619 | $1621;
 $1624 = (_i64Add(($1610|0),($1611|0),($52|0),($55|0))|0);
 $1625 = (getTempRet0() | 0);
 $1626 = (_i64Add(($1624|0),($1625|0),($1622|0),($1623|0))|0);
 $1627 = (getTempRet0() | 0);
 $1628 = $1626 ^ $1613;
 $1629 = $1627 ^ $1612;
 $1630 = (_bitshift64Lshr(($1628|0),($1629|0),16)|0);
 $1631 = (getTempRet0() | 0);
 $1632 = (_bitshift64Shl(($1628|0),($1629|0),48)|0);
 $1633 = (getTempRet0() | 0);
 $1634 = $1630 | $1632;
 $1635 = $1631 | $1633;
 $1636 = (_i64Add(($1634|0),($1635|0),($1614|0),($1615|0))|0);
 $1637 = (getTempRet0() | 0);
 $1638 = $1636 ^ $1622;
 $1639 = $1637 ^ $1623;
 $1640 = (_bitshift64Lshr(($1638|0),($1639|0),63)|0);
 $1641 = (getTempRet0() | 0);
 $1642 = (_bitshift64Shl(($1638|0),($1639|0),1)|0);
 $1643 = (getTempRet0() | 0);
 $1644 = $1640 | $1642;
 $1645 = $1641 | $1643;
 $1646 = (_i64Add(($1512|0),($1513|0),($22|0),($25|0))|0);
 $1647 = (getTempRet0() | 0);
 $1648 = (_i64Add(($1646|0),($1647|0),($1416|0),($1417|0))|0);
 $1649 = (getTempRet0() | 0);
 $1650 = $1648 ^ $1482;
 $1651 = $1649 ^ $1483;
 $1652 = (_i64Add(($1651|0),($1650|0),($1446|0),($1447|0))|0);
 $1653 = (getTempRet0() | 0);
 $1654 = $1652 ^ $1416;
 $1655 = $1653 ^ $1417;
 $1656 = (_bitshift64Lshr(($1654|0),($1655|0),24)|0);
 $1657 = (getTempRet0() | 0);
 $1658 = (_bitshift64Shl(($1654|0),($1655|0),40)|0);
 $1659 = (getTempRet0() | 0);
 $1660 = $1656 | $1658;
 $1661 = $1657 | $1659;
 $1662 = (_i64Add(($1648|0),($1649|0),($82|0),($85|0))|0);
 $1663 = (getTempRet0() | 0);
 $1664 = (_i64Add(($1662|0),($1663|0),($1660|0),($1661|0))|0);
 $1665 = (getTempRet0() | 0);
 $1666 = $1664 ^ $1651;
 $1667 = $1665 ^ $1650;
 $1668 = (_bitshift64Lshr(($1666|0),($1667|0),16)|0);
 $1669 = (getTempRet0() | 0);
 $1670 = (_bitshift64Shl(($1666|0),($1667|0),48)|0);
 $1671 = (getTempRet0() | 0);
 $1672 = $1668 | $1670;
 $1673 = $1669 | $1671;
 $1674 = (_i64Add(($1672|0),($1673|0),($1652|0),($1653|0))|0);
 $1675 = (getTempRet0() | 0);
 $1676 = $1674 ^ $1660;
 $1677 = $1675 ^ $1661;
 $1678 = (_bitshift64Lshr(($1676|0),($1677|0),63)|0);
 $1679 = (getTempRet0() | 0);
 $1680 = (_bitshift64Shl(($1676|0),($1677|0),1)|0);
 $1681 = (getTempRet0() | 0);
 $1682 = $1678 | $1680;
 $1683 = $1679 | $1681;
 $1684 = (_i64Add(($1550|0),($1551|0),($16|0),($19|0))|0);
 $1685 = (getTempRet0() | 0);
 $1686 = (_i64Add(($1684|0),($1685|0),($1682|0),($1683|0))|0);
 $1687 = (getTempRet0() | 0);
 $1688 = $1686 ^ $1596;
 $1689 = $1687 ^ $1597;
 $1690 = (_i64Add(($1689|0),($1688|0),($1636|0),($1637|0))|0);
 $1691 = (getTempRet0() | 0);
 $1692 = $1690 ^ $1682;
 $1693 = $1691 ^ $1683;
 $1694 = (_bitshift64Lshr(($1692|0),($1693|0),24)|0);
 $1695 = (getTempRet0() | 0);
 $1696 = (_bitshift64Shl(($1692|0),($1693|0),40)|0);
 $1697 = (getTempRet0() | 0);
 $1698 = $1694 | $1696;
 $1699 = $1695 | $1697;
 $1700 = (_i64Add(($1686|0),($1687|0),($76|0),($79|0))|0);
 $1701 = (getTempRet0() | 0);
 $1702 = (_i64Add(($1700|0),($1701|0),($1698|0),($1699|0))|0);
 $1703 = (getTempRet0() | 0);
 $1704 = $1702 ^ $1689;
 $1705 = $1703 ^ $1688;
 $1706 = (_bitshift64Lshr(($1704|0),($1705|0),16)|0);
 $1707 = (getTempRet0() | 0);
 $1708 = (_bitshift64Shl(($1704|0),($1705|0),48)|0);
 $1709 = (getTempRet0() | 0);
 $1710 = $1706 | $1708;
 $1711 = $1707 | $1709;
 $1712 = (_i64Add(($1710|0),($1711|0),($1690|0),($1691|0))|0);
 $1713 = (getTempRet0() | 0);
 $1714 = $1712 ^ $1698;
 $1715 = $1713 ^ $1699;
 $1716 = (_bitshift64Lshr(($1714|0),($1715|0),63)|0);
 $1717 = (getTempRet0() | 0);
 $1718 = (_bitshift64Shl(($1714|0),($1715|0),1)|0);
 $1719 = (getTempRet0() | 0);
 $1720 = $1716 | $1718;
 $1721 = $1717 | $1719;
 $1722 = (_i64Add(($1588|0),($1589|0),($40|0),($43|0))|0);
 $1723 = (getTempRet0() | 0);
 $1724 = (_i64Add(($1722|0),($1723|0),($1568|0),($1569|0))|0);
 $1725 = (getTempRet0() | 0);
 $1726 = $1724 ^ $1634;
 $1727 = $1725 ^ $1635;
 $1728 = (_i64Add(($1727|0),($1726|0),($1674|0),($1675|0))|0);
 $1729 = (getTempRet0() | 0);
 $1730 = $1728 ^ $1568;
 $1731 = $1729 ^ $1569;
 $1732 = (_bitshift64Lshr(($1730|0),($1731|0),24)|0);
 $1733 = (getTempRet0() | 0);
 $1734 = (_bitshift64Shl(($1730|0),($1731|0),40)|0);
 $1735 = (getTempRet0() | 0);
 $1736 = $1732 | $1734;
 $1737 = $1733 | $1735;
 $1738 = (_i64Add(($1724|0),($1725|0),($64|0),($67|0))|0);
 $1739 = (getTempRet0() | 0);
 $1740 = (_i64Add(($1738|0),($1739|0),($1736|0),($1737|0))|0);
 $1741 = (getTempRet0() | 0);
 $1742 = $1740 ^ $1727;
 $1743 = $1741 ^ $1726;
 $1744 = (_bitshift64Lshr(($1742|0),($1743|0),16)|0);
 $1745 = (getTempRet0() | 0);
 $1746 = (_bitshift64Shl(($1742|0),($1743|0),48)|0);
 $1747 = (getTempRet0() | 0);
 $1748 = $1744 | $1746;
 $1749 = $1745 | $1747;
 $1750 = (_i64Add(($1748|0),($1749|0),($1728|0),($1729|0))|0);
 $1751 = (getTempRet0() | 0);
 $1752 = $1750 ^ $1736;
 $1753 = $1751 ^ $1737;
 $1754 = (_bitshift64Lshr(($1752|0),($1753|0),63)|0);
 $1755 = (getTempRet0() | 0);
 $1756 = (_bitshift64Shl(($1752|0),($1753|0),1)|0);
 $1757 = (getTempRet0() | 0);
 $1758 = $1754 | $1756;
 $1759 = $1755 | $1757;
 $1760 = (_i64Add(($1626|0),($1627|0),($4|0),($7|0))|0);
 $1761 = (getTempRet0() | 0);
 $1762 = (_i64Add(($1760|0),($1761|0),($1606|0),($1607|0))|0);
 $1763 = (getTempRet0() | 0);
 $1764 = $1762 ^ $1672;
 $1765 = $1763 ^ $1673;
 $1766 = (_i64Add(($1765|0),($1764|0),($1560|0),($1561|0))|0);
 $1767 = (getTempRet0() | 0);
 $1768 = $1766 ^ $1606;
 $1769 = $1767 ^ $1607;
 $1770 = (_bitshift64Lshr(($1768|0),($1769|0),24)|0);
 $1771 = (getTempRet0() | 0);
 $1772 = (_bitshift64Shl(($1768|0),($1769|0),40)|0);
 $1773 = (getTempRet0() | 0);
 $1774 = $1770 | $1772;
 $1775 = $1771 | $1773;
 $1776 = (_i64Add(($1762|0),($1763|0),($70|0),($73|0))|0);
 $1777 = (getTempRet0() | 0);
 $1778 = (_i64Add(($1776|0),($1777|0),($1774|0),($1775|0))|0);
 $1779 = (getTempRet0() | 0);
 $1780 = $1778 ^ $1765;
 $1781 = $1779 ^ $1764;
 $1782 = (_bitshift64Lshr(($1780|0),($1781|0),16)|0);
 $1783 = (getTempRet0() | 0);
 $1784 = (_bitshift64Shl(($1780|0),($1781|0),48)|0);
 $1785 = (getTempRet0() | 0);
 $1786 = $1782 | $1784;
 $1787 = $1783 | $1785;
 $1788 = (_i64Add(($1786|0),($1787|0),($1766|0),($1767|0))|0);
 $1789 = (getTempRet0() | 0);
 $1790 = $1788 ^ $1774;
 $1791 = $1789 ^ $1775;
 $1792 = (_bitshift64Lshr(($1790|0),($1791|0),63)|0);
 $1793 = (getTempRet0() | 0);
 $1794 = (_bitshift64Shl(($1790|0),($1791|0),1)|0);
 $1795 = (getTempRet0() | 0);
 $1796 = $1792 | $1794;
 $1797 = $1793 | $1795;
 $1798 = (_i64Add(($1664|0),($1665|0),($52|0),($55|0))|0);
 $1799 = (getTempRet0() | 0);
 $1800 = (_i64Add(($1798|0),($1799|0),($1644|0),($1645|0))|0);
 $1801 = (getTempRet0() | 0);
 $1802 = $1800 ^ $1558;
 $1803 = $1801 ^ $1559;
 $1804 = (_i64Add(($1803|0),($1802|0),($1598|0),($1599|0))|0);
 $1805 = (getTempRet0() | 0);
 $1806 = $1804 ^ $1644;
 $1807 = $1805 ^ $1645;
 $1808 = (_bitshift64Lshr(($1806|0),($1807|0),24)|0);
 $1809 = (getTempRet0() | 0);
 $1810 = (_bitshift64Shl(($1806|0),($1807|0),40)|0);
 $1811 = (getTempRet0() | 0);
 $1812 = $1808 | $1810;
 $1813 = $1809 | $1811;
 $1814 = (_i64Add(($1800|0),($1801|0),($22|0),($25|0))|0);
 $1815 = (getTempRet0() | 0);
 $1816 = (_i64Add(($1814|0),($1815|0),($1812|0),($1813|0))|0);
 $1817 = (getTempRet0() | 0);
 $1818 = $1816 ^ $1803;
 $1819 = $1817 ^ $1802;
 $1820 = (_bitshift64Lshr(($1818|0),($1819|0),16)|0);
 $1821 = (getTempRet0() | 0);
 $1822 = (_bitshift64Shl(($1818|0),($1819|0),48)|0);
 $1823 = (getTempRet0() | 0);
 $1824 = $1820 | $1822;
 $1825 = $1821 | $1823;
 $1826 = (_i64Add(($1824|0),($1825|0),($1804|0),($1805|0))|0);
 $1827 = (getTempRet0() | 0);
 $1828 = $1826 ^ $1812;
 $1829 = $1827 ^ $1813;
 $1830 = (_bitshift64Lshr(($1828|0),($1829|0),63)|0);
 $1831 = (getTempRet0() | 0);
 $1832 = (_bitshift64Shl(($1828|0),($1829|0),1)|0);
 $1833 = (getTempRet0() | 0);
 $1834 = $1830 | $1832;
 $1835 = $1831 | $1833;
 $1836 = (_i64Add(($1702|0),($1703|0),($28|0),($31|0))|0);
 $1837 = (getTempRet0() | 0);
 $1838 = (_i64Add(($1836|0),($1837|0),($1758|0),($1759|0))|0);
 $1839 = (getTempRet0() | 0);
 $1840 = $1838 ^ $1824;
 $1841 = $1839 ^ $1825;
 $1842 = (_i64Add(($1841|0),($1840|0),($1788|0),($1789|0))|0);
 $1843 = (getTempRet0() | 0);
 $1844 = $1842 ^ $1758;
 $1845 = $1843 ^ $1759;
 $1846 = (_bitshift64Lshr(($1844|0),($1845|0),24)|0);
 $1847 = (getTempRet0() | 0);
 $1848 = (_bitshift64Shl(($1844|0),($1845|0),40)|0);
 $1849 = (getTempRet0() | 0);
 $1850 = $1846 | $1848;
 $1851 = $1847 | $1849;
 $1852 = (_i64Add(($1838|0),($1839|0),($82|0),($85|0))|0);
 $1853 = (getTempRet0() | 0);
 $1854 = (_i64Add(($1852|0),($1853|0),($1850|0),($1851|0))|0);
 $1855 = (getTempRet0() | 0);
 $1856 = $1854 ^ $1841;
 $1857 = $1855 ^ $1840;
 $1858 = (_bitshift64Lshr(($1856|0),($1857|0),16)|0);
 $1859 = (getTempRet0() | 0);
 $1860 = (_bitshift64Shl(($1856|0),($1857|0),48)|0);
 $1861 = (getTempRet0() | 0);
 $1862 = $1858 | $1860;
 $1863 = $1859 | $1861;
 $1864 = (_i64Add(($1862|0),($1863|0),($1842|0),($1843|0))|0);
 $1865 = (getTempRet0() | 0);
 $1866 = $1864 ^ $1850;
 $1867 = $1865 ^ $1851;
 $1868 = (_bitshift64Lshr(($1866|0),($1867|0),63)|0);
 $1869 = (getTempRet0() | 0);
 $1870 = (_bitshift64Shl(($1866|0),($1867|0),1)|0);
 $1871 = (getTempRet0() | 0);
 $1872 = $1868 | $1870;
 $1873 = $1869 | $1871;
 $1874 = (_i64Add(($1740|0),($1741|0),($46|0),($49|0))|0);
 $1875 = (getTempRet0() | 0);
 $1876 = (_i64Add(($1874|0),($1875|0),($1796|0),($1797|0))|0);
 $1877 = (getTempRet0() | 0);
 $1878 = $1876 ^ $1710;
 $1879 = $1877 ^ $1711;
 $1880 = (_i64Add(($1879|0),($1878|0),($1826|0),($1827|0))|0);
 $1881 = (getTempRet0() | 0);
 $1882 = $1880 ^ $1796;
 $1883 = $1881 ^ $1797;
 $1884 = (_bitshift64Lshr(($1882|0),($1883|0),24)|0);
 $1885 = (getTempRet0() | 0);
 $1886 = (_bitshift64Shl(($1882|0),($1883|0),40)|0);
 $1887 = (getTempRet0() | 0);
 $1888 = $1884 | $1886;
 $1889 = $1885 | $1887;
 $1890 = (_i64Add(($1876|0),($1877|0),($34|0),($37|0))|0);
 $1891 = (getTempRet0() | 0);
 $1892 = (_i64Add(($1890|0),($1891|0),($1888|0),($1889|0))|0);
 $1893 = (getTempRet0() | 0);
 $1894 = $1892 ^ $1879;
 $1895 = $1893 ^ $1878;
 $1896 = (_bitshift64Lshr(($1894|0),($1895|0),16)|0);
 $1897 = (getTempRet0() | 0);
 $1898 = (_bitshift64Shl(($1894|0),($1895|0),48)|0);
 $1899 = (getTempRet0() | 0);
 $1900 = $1896 | $1898;
 $1901 = $1897 | $1899;
 $1902 = (_i64Add(($1900|0),($1901|0),($1880|0),($1881|0))|0);
 $1903 = (getTempRet0() | 0);
 $1904 = $1902 ^ $1888;
 $1905 = $1903 ^ $1889;
 $1906 = (_bitshift64Lshr(($1904|0),($1905|0),63)|0);
 $1907 = (getTempRet0() | 0);
 $1908 = (_bitshift64Shl(($1904|0),($1905|0),1)|0);
 $1909 = (getTempRet0() | 0);
 $1910 = $1906 | $1908;
 $1911 = $1907 | $1909;
 $1912 = (_i64Add(($1778|0),($1779|0),($94|0),($97|0))|0);
 $1913 = (getTempRet0() | 0);
 $1914 = (_i64Add(($1912|0),($1913|0),($1834|0),($1835|0))|0);
 $1915 = (getTempRet0() | 0);
 $1916 = $1914 ^ $1748;
 $1917 = $1915 ^ $1749;
 $1918 = (_i64Add(($1917|0),($1916|0),($1712|0),($1713|0))|0);
 $1919 = (getTempRet0() | 0);
 $1920 = $1918 ^ $1834;
 $1921 = $1919 ^ $1835;
 $1922 = (_bitshift64Lshr(($1920|0),($1921|0),24)|0);
 $1923 = (getTempRet0() | 0);
 $1924 = (_bitshift64Shl(($1920|0),($1921|0),40)|0);
 $1925 = (getTempRet0() | 0);
 $1926 = $1922 | $1924;
 $1927 = $1923 | $1925;
 $1928 = (_i64Add(($1914|0),($1915|0),($88|0),($91|0))|0);
 $1929 = (getTempRet0() | 0);
 $1930 = (_i64Add(($1928|0),($1929|0),($1926|0),($1927|0))|0);
 $1931 = (getTempRet0() | 0);
 $1932 = $1930 ^ $1917;
 $1933 = $1931 ^ $1916;
 $1934 = (_bitshift64Lshr(($1932|0),($1933|0),16)|0);
 $1935 = (getTempRet0() | 0);
 $1936 = (_bitshift64Shl(($1932|0),($1933|0),48)|0);
 $1937 = (getTempRet0() | 0);
 $1938 = $1934 | $1936;
 $1939 = $1935 | $1937;
 $1940 = (_i64Add(($1938|0),($1939|0),($1918|0),($1919|0))|0);
 $1941 = (getTempRet0() | 0);
 $1942 = $1940 ^ $1926;
 $1943 = $1941 ^ $1927;
 $1944 = (_bitshift64Lshr(($1942|0),($1943|0),63)|0);
 $1945 = (getTempRet0() | 0);
 $1946 = (_bitshift64Shl(($1942|0),($1943|0),1)|0);
 $1947 = (getTempRet0() | 0);
 $1948 = $1944 | $1946;
 $1949 = $1945 | $1947;
 $1950 = (_i64Add(($1816|0),($1817|0),($10|0),($13|0))|0);
 $1951 = (getTempRet0() | 0);
 $1952 = (_i64Add(($1950|0),($1951|0),($1720|0),($1721|0))|0);
 $1953 = (getTempRet0() | 0);
 $1954 = $1952 ^ $1786;
 $1955 = $1953 ^ $1787;
 $1956 = (_i64Add(($1955|0),($1954|0),($1750|0),($1751|0))|0);
 $1957 = (getTempRet0() | 0);
 $1958 = $1956 ^ $1720;
 $1959 = $1957 ^ $1721;
 $1960 = (_bitshift64Lshr(($1958|0),($1959|0),24)|0);
 $1961 = (getTempRet0() | 0);
 $1962 = (_bitshift64Shl(($1958|0),($1959|0),40)|0);
 $1963 = (getTempRet0() | 0);
 $1964 = $1960 | $1962;
 $1965 = $1961 | $1963;
 $1966 = (_i64Add(($1952|0),($1953|0),($58|0),($61|0))|0);
 $1967 = (getTempRet0() | 0);
 $1968 = (_i64Add(($1966|0),($1967|0),($1964|0),($1965|0))|0);
 $1969 = (getTempRet0() | 0);
 $1970 = $1968 ^ $1955;
 $1971 = $1969 ^ $1954;
 $1972 = (_bitshift64Lshr(($1970|0),($1971|0),16)|0);
 $1973 = (getTempRet0() | 0);
 $1974 = (_bitshift64Shl(($1970|0),($1971|0),48)|0);
 $1975 = (getTempRet0() | 0);
 $1976 = $1972 | $1974;
 $1977 = $1973 | $1975;
 $1978 = (_i64Add(($1976|0),($1977|0),($1956|0),($1957|0))|0);
 $1979 = (getTempRet0() | 0);
 $1980 = $1978 ^ $1964;
 $1981 = $1979 ^ $1965;
 $1982 = (_bitshift64Lshr(($1980|0),($1981|0),63)|0);
 $1983 = (getTempRet0() | 0);
 $1984 = (_bitshift64Shl(($1980|0),($1981|0),1)|0);
 $1985 = (getTempRet0() | 0);
 $1986 = $1982 | $1984;
 $1987 = $1983 | $1985;
 $1988 = (_i64Add(($1854|0),($1855|0),($76|0),($79|0))|0);
 $1989 = (getTempRet0() | 0);
 $1990 = (_i64Add(($1988|0),($1989|0),($1986|0),($1987|0))|0);
 $1991 = (getTempRet0() | 0);
 $1992 = $1990 ^ $1900;
 $1993 = $1991 ^ $1901;
 $1994 = (_i64Add(($1993|0),($1992|0),($1940|0),($1941|0))|0);
 $1995 = (getTempRet0() | 0);
 $1996 = $1994 ^ $1986;
 $1997 = $1995 ^ $1987;
 $1998 = (_bitshift64Lshr(($1996|0),($1997|0),24)|0);
 $1999 = (getTempRet0() | 0);
 $2000 = (_bitshift64Shl(($1996|0),($1997|0),40)|0);
 $2001 = (getTempRet0() | 0);
 $2002 = $1998 | $2000;
 $2003 = $1999 | $2001;
 $2004 = (_i64Add(($1990|0),($1991|0),($34|0),($37|0))|0);
 $2005 = (getTempRet0() | 0);
 $2006 = (_i64Add(($2004|0),($2005|0),($2002|0),($2003|0))|0);
 $2007 = (getTempRet0() | 0);
 $2008 = $2006 ^ $1993;
 $2009 = $2007 ^ $1992;
 $2010 = (_bitshift64Lshr(($2008|0),($2009|0),16)|0);
 $2011 = (getTempRet0() | 0);
 $2012 = (_bitshift64Shl(($2008|0),($2009|0),48)|0);
 $2013 = (getTempRet0() | 0);
 $2014 = $2010 | $2012;
 $2015 = $2011 | $2013;
 $2016 = (_i64Add(($2014|0),($2015|0),($1994|0),($1995|0))|0);
 $2017 = (getTempRet0() | 0);
 $2018 = $2016 ^ $2002;
 $2019 = $2017 ^ $2003;
 $2020 = (_bitshift64Lshr(($2018|0),($2019|0),63)|0);
 $2021 = (getTempRet0() | 0);
 $2022 = (_bitshift64Shl(($2018|0),($2019|0),1)|0);
 $2023 = (getTempRet0() | 0);
 $2024 = $2020 | $2022;
 $2025 = $2021 | $2023;
 $2026 = (_i64Add(($1892|0),($1893|0),($10|0),($13|0))|0);
 $2027 = (getTempRet0() | 0);
 $2028 = (_i64Add(($2026|0),($2027|0),($1872|0),($1873|0))|0);
 $2029 = (getTempRet0() | 0);
 $2030 = $2028 ^ $1938;
 $2031 = $2029 ^ $1939;
 $2032 = (_i64Add(($2031|0),($2030|0),($1978|0),($1979|0))|0);
 $2033 = (getTempRet0() | 0);
 $2034 = $2032 ^ $1872;
 $2035 = $2033 ^ $1873;
 $2036 = (_bitshift64Lshr(($2034|0),($2035|0),24)|0);
 $2037 = (getTempRet0() | 0);
 $2038 = (_bitshift64Shl(($2034|0),($2035|0),40)|0);
 $2039 = (getTempRet0() | 0);
 $2040 = $2036 | $2038;
 $2041 = $2037 | $2039;
 $2042 = (_i64Add(($2028|0),($2029|0),($94|0),($97|0))|0);
 $2043 = (getTempRet0() | 0);
 $2044 = (_i64Add(($2042|0),($2043|0),($2040|0),($2041|0))|0);
 $2045 = (getTempRet0() | 0);
 $2046 = $2044 ^ $2031;
 $2047 = $2045 ^ $2030;
 $2048 = (_bitshift64Lshr(($2046|0),($2047|0),16)|0);
 $2049 = (getTempRet0() | 0);
 $2050 = (_bitshift64Shl(($2046|0),($2047|0),48)|0);
 $2051 = (getTempRet0() | 0);
 $2052 = $2048 | $2050;
 $2053 = $2049 | $2051;
 $2054 = (_i64Add(($2052|0),($2053|0),($2032|0),($2033|0))|0);
 $2055 = (getTempRet0() | 0);
 $2056 = $2054 ^ $2040;
 $2057 = $2055 ^ $2041;
 $2058 = (_bitshift64Lshr(($2056|0),($2057|0),63)|0);
 $2059 = (getTempRet0() | 0);
 $2060 = (_bitshift64Shl(($2056|0),($2057|0),1)|0);
 $2061 = (getTempRet0() | 0);
 $2062 = $2058 | $2060;
 $2063 = $2059 | $2061;
 $2064 = (_i64Add(($1930|0),($1931|0),($88|0),($91|0))|0);
 $2065 = (getTempRet0() | 0);
 $2066 = (_i64Add(($2064|0),($2065|0),($1910|0),($1911|0))|0);
 $2067 = (getTempRet0() | 0);
 $2068 = $2066 ^ $1976;
 $2069 = $2067 ^ $1977;
 $2070 = (_i64Add(($2069|0),($2068|0),($1864|0),($1865|0))|0);
 $2071 = (getTempRet0() | 0);
 $2072 = $2070 ^ $1910;
 $2073 = $2071 ^ $1911;
 $2074 = (_bitshift64Lshr(($2072|0),($2073|0),24)|0);
 $2075 = (getTempRet0() | 0);
 $2076 = (_bitshift64Shl(($2072|0),($2073|0),40)|0);
 $2077 = (getTempRet0() | 0);
 $2078 = $2074 | $2076;
 $2079 = $2075 | $2077;
 $2080 = (_i64Add(($2066|0),($2067|0),($82|0),($85|0))|0);
 $2081 = (getTempRet0() | 0);
 $2082 = (_i64Add(($2080|0),($2081|0),($2078|0),($2079|0))|0);
 $2083 = (getTempRet0() | 0);
 $2084 = $2082 ^ $2069;
 $2085 = $2083 ^ $2068;
 $2086 = (_bitshift64Lshr(($2084|0),($2085|0),16)|0);
 $2087 = (getTempRet0() | 0);
 $2088 = (_bitshift64Shl(($2084|0),($2085|0),48)|0);
 $2089 = (getTempRet0() | 0);
 $2090 = $2086 | $2088;
 $2091 = $2087 | $2089;
 $2092 = (_i64Add(($2090|0),($2091|0),($2070|0),($2071|0))|0);
 $2093 = (getTempRet0() | 0);
 $2094 = $2092 ^ $2078;
 $2095 = $2093 ^ $2079;
 $2096 = (_bitshift64Lshr(($2094|0),($2095|0),63)|0);
 $2097 = (getTempRet0() | 0);
 $2098 = (_bitshift64Shl(($2094|0),($2095|0),1)|0);
 $2099 = (getTempRet0() | 0);
 $2100 = $2096 | $2098;
 $2101 = $2097 | $2099;
 $2102 = (_i64Add(($1968|0),($1969|0),($28|0),($31|0))|0);
 $2103 = (getTempRet0() | 0);
 $2104 = (_i64Add(($2102|0),($2103|0),($1948|0),($1949|0))|0);
 $2105 = (getTempRet0() | 0);
 $2106 = $2104 ^ $1862;
 $2107 = $2105 ^ $1863;
 $2108 = (_i64Add(($2107|0),($2106|0),($1902|0),($1903|0))|0);
 $2109 = (getTempRet0() | 0);
 $2110 = $2108 ^ $1948;
 $2111 = $2109 ^ $1949;
 $2112 = (_bitshift64Lshr(($2110|0),($2111|0),24)|0);
 $2113 = (getTempRet0() | 0);
 $2114 = (_bitshift64Shl(($2110|0),($2111|0),40)|0);
 $2115 = (getTempRet0() | 0);
 $2116 = $2112 | $2114;
 $2117 = $2113 | $2115;
 $2118 = (_i64Add(($2104|0),($2105|0),($64|0),($67|0))|0);
 $2119 = (getTempRet0() | 0);
 $2120 = (_i64Add(($2118|0),($2119|0),($2116|0),($2117|0))|0);
 $2121 = (getTempRet0() | 0);
 $2122 = $2120 ^ $2107;
 $2123 = $2121 ^ $2106;
 $2124 = (_bitshift64Lshr(($2122|0),($2123|0),16)|0);
 $2125 = (getTempRet0() | 0);
 $2126 = (_bitshift64Shl(($2122|0),($2123|0),48)|0);
 $2127 = (getTempRet0() | 0);
 $2128 = $2124 | $2126;
 $2129 = $2125 | $2127;
 $2130 = (_i64Add(($2128|0),($2129|0),($2108|0),($2109|0))|0);
 $2131 = (getTempRet0() | 0);
 $2132 = $2130 ^ $2116;
 $2133 = $2131 ^ $2117;
 $2134 = (_bitshift64Lshr(($2132|0),($2133|0),63)|0);
 $2135 = (getTempRet0() | 0);
 $2136 = (_bitshift64Shl(($2132|0),($2133|0),1)|0);
 $2137 = (getTempRet0() | 0);
 $2138 = $2134 | $2136;
 $2139 = $2135 | $2137;
 $2140 = (_i64Add(($2006|0),($2007|0),($4|0),($7|0))|0);
 $2141 = (getTempRet0() | 0);
 $2142 = (_i64Add(($2140|0),($2141|0),($2062|0),($2063|0))|0);
 $2143 = (getTempRet0() | 0);
 $2144 = $2142 ^ $2128;
 $2145 = $2143 ^ $2129;
 $2146 = (_i64Add(($2145|0),($2144|0),($2092|0),($2093|0))|0);
 $2147 = (getTempRet0() | 0);
 $2148 = $2146 ^ $2062;
 $2149 = $2147 ^ $2063;
 $2150 = (_bitshift64Lshr(($2148|0),($2149|0),24)|0);
 $2151 = (getTempRet0() | 0);
 $2152 = (_bitshift64Shl(($2148|0),($2149|0),40)|0);
 $2153 = (getTempRet0() | 0);
 $2154 = $2150 | $2152;
 $2155 = $2151 | $2153;
 $2156 = (_i64Add(($2142|0),($2143|0),($46|0),($49|0))|0);
 $2157 = (getTempRet0() | 0);
 $2158 = (_i64Add(($2156|0),($2157|0),($2154|0),($2155|0))|0);
 $2159 = (getTempRet0() | 0);
 $2160 = $2158 ^ $2145;
 $2161 = $2159 ^ $2144;
 $2162 = (_bitshift64Lshr(($2160|0),($2161|0),16)|0);
 $2163 = (getTempRet0() | 0);
 $2164 = (_bitshift64Shl(($2160|0),($2161|0),48)|0);
 $2165 = (getTempRet0() | 0);
 $2166 = $2162 | $2164;
 $2167 = $2163 | $2165;
 $2168 = (_i64Add(($2166|0),($2167|0),($2146|0),($2147|0))|0);
 $2169 = (getTempRet0() | 0);
 $2170 = $2168 ^ $2154;
 $2171 = $2169 ^ $2155;
 $2172 = (_bitshift64Lshr(($2170|0),($2171|0),63)|0);
 $2173 = (getTempRet0() | 0);
 $2174 = (_bitshift64Shl(($2170|0),($2171|0),1)|0);
 $2175 = (getTempRet0() | 0);
 $2176 = $2172 | $2174;
 $2177 = $2173 | $2175;
 $2178 = (_i64Add(($2044|0),($2045|0),($40|0),($43|0))|0);
 $2179 = (getTempRet0() | 0);
 $2180 = (_i64Add(($2178|0),($2179|0),($2100|0),($2101|0))|0);
 $2181 = (getTempRet0() | 0);
 $2182 = $2180 ^ $2014;
 $2183 = $2181 ^ $2015;
 $2184 = (_i64Add(($2183|0),($2182|0),($2130|0),($2131|0))|0);
 $2185 = (getTempRet0() | 0);
 $2186 = $2184 ^ $2100;
 $2187 = $2185 ^ $2101;
 $2188 = (_bitshift64Lshr(($2186|0),($2187|0),24)|0);
 $2189 = (getTempRet0() | 0);
 $2190 = (_bitshift64Shl(($2186|0),($2187|0),40)|0);
 $2191 = (getTempRet0() | 0);
 $2192 = $2188 | $2190;
 $2193 = $2189 | $2191;
 $2194 = (_i64Add(($2180|0),($2181|0),($22|0),($25|0))|0);
 $2195 = (getTempRet0() | 0);
 $2196 = (_i64Add(($2194|0),($2195|0),($2192|0),($2193|0))|0);
 $2197 = (getTempRet0() | 0);
 $2198 = $2196 ^ $2183;
 $2199 = $2197 ^ $2182;
 $2200 = (_bitshift64Lshr(($2198|0),($2199|0),16)|0);
 $2201 = (getTempRet0() | 0);
 $2202 = (_bitshift64Shl(($2198|0),($2199|0),48)|0);
 $2203 = (getTempRet0() | 0);
 $2204 = $2200 | $2202;
 $2205 = $2201 | $2203;
 $2206 = (_i64Add(($2204|0),($2205|0),($2184|0),($2185|0))|0);
 $2207 = (getTempRet0() | 0);
 $2208 = $2206 ^ $2192;
 $2209 = $2207 ^ $2193;
 $2210 = (_bitshift64Lshr(($2208|0),($2209|0),63)|0);
 $2211 = (getTempRet0() | 0);
 $2212 = (_bitshift64Shl(($2208|0),($2209|0),1)|0);
 $2213 = (getTempRet0() | 0);
 $2214 = $2210 | $2212;
 $2215 = $2211 | $2213;
 $2216 = (_i64Add(($2082|0),($2083|0),($58|0),($61|0))|0);
 $2217 = (getTempRet0() | 0);
 $2218 = (_i64Add(($2216|0),($2217|0),($2138|0),($2139|0))|0);
 $2219 = (getTempRet0() | 0);
 $2220 = $2218 ^ $2052;
 $2221 = $2219 ^ $2053;
 $2222 = (_i64Add(($2221|0),($2220|0),($2016|0),($2017|0))|0);
 $2223 = (getTempRet0() | 0);
 $2224 = $2222 ^ $2138;
 $2225 = $2223 ^ $2139;
 $2226 = (_bitshift64Lshr(($2224|0),($2225|0),24)|0);
 $2227 = (getTempRet0() | 0);
 $2228 = (_bitshift64Shl(($2224|0),($2225|0),40)|0);
 $2229 = (getTempRet0() | 0);
 $2230 = $2226 | $2228;
 $2231 = $2227 | $2229;
 $2232 = (_i64Add(($2218|0),($2219|0),($16|0),($19|0))|0);
 $2233 = (getTempRet0() | 0);
 $2234 = (_i64Add(($2232|0),($2233|0),($2230|0),($2231|0))|0);
 $2235 = (getTempRet0() | 0);
 $2236 = $2234 ^ $2221;
 $2237 = $2235 ^ $2220;
 $2238 = (_bitshift64Lshr(($2236|0),($2237|0),16)|0);
 $2239 = (getTempRet0() | 0);
 $2240 = (_bitshift64Shl(($2236|0),($2237|0),48)|0);
 $2241 = (getTempRet0() | 0);
 $2242 = $2238 | $2240;
 $2243 = $2239 | $2241;
 $2244 = (_i64Add(($2242|0),($2243|0),($2222|0),($2223|0))|0);
 $2245 = (getTempRet0() | 0);
 $2246 = $2244 ^ $2230;
 $2247 = $2245 ^ $2231;
 $2248 = (_bitshift64Lshr(($2246|0),($2247|0),63)|0);
 $2249 = (getTempRet0() | 0);
 $2250 = (_bitshift64Shl(($2246|0),($2247|0),1)|0);
 $2251 = (getTempRet0() | 0);
 $2252 = $2248 | $2250;
 $2253 = $2249 | $2251;
 $2254 = (_i64Add(($2120|0),($2121|0),($52|0),($55|0))|0);
 $2255 = (getTempRet0() | 0);
 $2256 = (_i64Add(($2254|0),($2255|0),($2024|0),($2025|0))|0);
 $2257 = (getTempRet0() | 0);
 $2258 = $2256 ^ $2090;
 $2259 = $2257 ^ $2091;
 $2260 = (_i64Add(($2259|0),($2258|0),($2054|0),($2055|0))|0);
 $2261 = (getTempRet0() | 0);
 $2262 = $2260 ^ $2024;
 $2263 = $2261 ^ $2025;
 $2264 = (_bitshift64Lshr(($2262|0),($2263|0),24)|0);
 $2265 = (getTempRet0() | 0);
 $2266 = (_bitshift64Shl(($2262|0),($2263|0),40)|0);
 $2267 = (getTempRet0() | 0);
 $2268 = $2264 | $2266;
 $2269 = $2265 | $2267;
 $2270 = (_i64Add(($2256|0),($2257|0),($70|0),($73|0))|0);
 $2271 = (getTempRet0() | 0);
 $2272 = (_i64Add(($2270|0),($2271|0),($2268|0),($2269|0))|0);
 $2273 = (getTempRet0() | 0);
 $2274 = $2272 ^ $2259;
 $2275 = $2273 ^ $2258;
 $2276 = (_bitshift64Lshr(($2274|0),($2275|0),16)|0);
 $2277 = (getTempRet0() | 0);
 $2278 = (_bitshift64Shl(($2274|0),($2275|0),48)|0);
 $2279 = (getTempRet0() | 0);
 $2280 = $2276 | $2278;
 $2281 = $2277 | $2279;
 $2282 = (_i64Add(($2280|0),($2281|0),($2260|0),($2261|0))|0);
 $2283 = (getTempRet0() | 0);
 $2284 = $2282 ^ $2268;
 $2285 = $2283 ^ $2269;
 $2286 = (_bitshift64Lshr(($2284|0),($2285|0),63)|0);
 $2287 = (getTempRet0() | 0);
 $2288 = (_bitshift64Shl(($2284|0),($2285|0),1)|0);
 $2289 = (getTempRet0() | 0);
 $2290 = $2286 | $2288;
 $2291 = $2287 | $2289;
 $2292 = (_i64Add(($2158|0),($2159|0),($82|0),($85|0))|0);
 $2293 = (getTempRet0() | 0);
 $2294 = (_i64Add(($2292|0),($2293|0),($2290|0),($2291|0))|0);
 $2295 = (getTempRet0() | 0);
 $2296 = $2294 ^ $2204;
 $2297 = $2295 ^ $2205;
 $2298 = (_i64Add(($2297|0),($2296|0),($2244|0),($2245|0))|0);
 $2299 = (getTempRet0() | 0);
 $2300 = $2298 ^ $2290;
 $2301 = $2299 ^ $2291;
 $2302 = (_bitshift64Lshr(($2300|0),($2301|0),24)|0);
 $2303 = (getTempRet0() | 0);
 $2304 = (_bitshift64Shl(($2300|0),($2301|0),40)|0);
 $2305 = (getTempRet0() | 0);
 $2306 = $2302 | $2304;
 $2307 = $2303 | $2305;
 $2308 = (_i64Add(($2294|0),($2295|0),($70|0),($73|0))|0);
 $2309 = (getTempRet0() | 0);
 $2310 = (_i64Add(($2308|0),($2309|0),($2306|0),($2307|0))|0);
 $2311 = (getTempRet0() | 0);
 $2312 = $2310 ^ $2297;
 $2313 = $2311 ^ $2296;
 $2314 = (_bitshift64Lshr(($2312|0),($2313|0),16)|0);
 $2315 = (getTempRet0() | 0);
 $2316 = (_bitshift64Shl(($2312|0),($2313|0),48)|0);
 $2317 = (getTempRet0() | 0);
 $2318 = $2314 | $2316;
 $2319 = $2315 | $2317;
 $2320 = (_i64Add(($2318|0),($2319|0),($2298|0),($2299|0))|0);
 $2321 = (getTempRet0() | 0);
 $2322 = $2320 ^ $2306;
 $2323 = $2321 ^ $2307;
 $2324 = (_bitshift64Lshr(($2322|0),($2323|0),63)|0);
 $2325 = (getTempRet0() | 0);
 $2326 = (_bitshift64Shl(($2322|0),($2323|0),1)|0);
 $2327 = (getTempRet0() | 0);
 $2328 = $2324 | $2326;
 $2329 = $2325 | $2327;
 $2330 = (_i64Add(($2196|0),($2197|0),($46|0),($49|0))|0);
 $2331 = (getTempRet0() | 0);
 $2332 = (_i64Add(($2330|0),($2331|0),($2176|0),($2177|0))|0);
 $2333 = (getTempRet0() | 0);
 $2334 = $2332 ^ $2242;
 $2335 = $2333 ^ $2243;
 $2336 = (_i64Add(($2335|0),($2334|0),($2282|0),($2283|0))|0);
 $2337 = (getTempRet0() | 0);
 $2338 = $2336 ^ $2176;
 $2339 = $2337 ^ $2177;
 $2340 = (_bitshift64Lshr(($2338|0),($2339|0),24)|0);
 $2341 = (getTempRet0() | 0);
 $2342 = (_bitshift64Shl(($2338|0),($2339|0),40)|0);
 $2343 = (getTempRet0() | 0);
 $2344 = $2340 | $2342;
 $2345 = $2341 | $2343;
 $2346 = (_i64Add(($2332|0),($2333|0),($88|0),($91|0))|0);
 $2347 = (getTempRet0() | 0);
 $2348 = (_i64Add(($2346|0),($2347|0),($2344|0),($2345|0))|0);
 $2349 = (getTempRet0() | 0);
 $2350 = $2348 ^ $2335;
 $2351 = $2349 ^ $2334;
 $2352 = (_bitshift64Lshr(($2350|0),($2351|0),16)|0);
 $2353 = (getTempRet0() | 0);
 $2354 = (_bitshift64Shl(($2350|0),($2351|0),48)|0);
 $2355 = (getTempRet0() | 0);
 $2356 = $2352 | $2354;
 $2357 = $2353 | $2355;
 $2358 = (_i64Add(($2356|0),($2357|0),($2336|0),($2337|0))|0);
 $2359 = (getTempRet0() | 0);
 $2360 = $2358 ^ $2344;
 $2361 = $2359 ^ $2345;
 $2362 = (_bitshift64Lshr(($2360|0),($2361|0),63)|0);
 $2363 = (getTempRet0() | 0);
 $2364 = (_bitshift64Shl(($2360|0),($2361|0),1)|0);
 $2365 = (getTempRet0() | 0);
 $2366 = $2362 | $2364;
 $2367 = $2363 | $2365;
 $2368 = (_i64Add(($2234|0),($2235|0),($76|0),($79|0))|0);
 $2369 = (getTempRet0() | 0);
 $2370 = (_i64Add(($2368|0),($2369|0),($2214|0),($2215|0))|0);
 $2371 = (getTempRet0() | 0);
 $2372 = $2370 ^ $2280;
 $2373 = $2371 ^ $2281;
 $2374 = (_i64Add(($2373|0),($2372|0),($2168|0),($2169|0))|0);
 $2375 = (getTempRet0() | 0);
 $2376 = $2374 ^ $2214;
 $2377 = $2375 ^ $2215;
 $2378 = (_bitshift64Lshr(($2376|0),($2377|0),24)|0);
 $2379 = (getTempRet0() | 0);
 $2380 = (_bitshift64Shl(($2376|0),($2377|0),40)|0);
 $2381 = (getTempRet0() | 0);
 $2382 = $2378 | $2380;
 $2383 = $2379 | $2381;
 $2384 = (_i64Add(($2370|0),($2371|0),($10|0),($13|0))|0);
 $2385 = (getTempRet0() | 0);
 $2386 = (_i64Add(($2384|0),($2385|0),($2382|0),($2383|0))|0);
 $2387 = (getTempRet0() | 0);
 $2388 = $2386 ^ $2373;
 $2389 = $2387 ^ $2372;
 $2390 = (_bitshift64Lshr(($2388|0),($2389|0),16)|0);
 $2391 = (getTempRet0() | 0);
 $2392 = (_bitshift64Shl(($2388|0),($2389|0),48)|0);
 $2393 = (getTempRet0() | 0);
 $2394 = $2390 | $2392;
 $2395 = $2391 | $2393;
 $2396 = (_i64Add(($2394|0),($2395|0),($2374|0),($2375|0))|0);
 $2397 = (getTempRet0() | 0);
 $2398 = $2396 ^ $2382;
 $2399 = $2397 ^ $2383;
 $2400 = (_bitshift64Lshr(($2398|0),($2399|0),63)|0);
 $2401 = (getTempRet0() | 0);
 $2402 = (_bitshift64Shl(($2398|0),($2399|0),1)|0);
 $2403 = (getTempRet0() | 0);
 $2404 = $2400 | $2402;
 $2405 = $2401 | $2403;
 $2406 = (_i64Add(($2272|0),($2273|0),($22|0),($25|0))|0);
 $2407 = (getTempRet0() | 0);
 $2408 = (_i64Add(($2406|0),($2407|0),($2252|0),($2253|0))|0);
 $2409 = (getTempRet0() | 0);
 $2410 = $2408 ^ $2166;
 $2411 = $2409 ^ $2167;
 $2412 = (_i64Add(($2411|0),($2410|0),($2206|0),($2207|0))|0);
 $2413 = (getTempRet0() | 0);
 $2414 = $2412 ^ $2252;
 $2415 = $2413 ^ $2253;
 $2416 = (_bitshift64Lshr(($2414|0),($2415|0),24)|0);
 $2417 = (getTempRet0() | 0);
 $2418 = (_bitshift64Shl(($2414|0),($2415|0),40)|0);
 $2419 = (getTempRet0() | 0);
 $2420 = $2416 | $2418;
 $2421 = $2417 | $2419;
 $2422 = (_i64Add(($2408|0),($2409|0),($58|0),($61|0))|0);
 $2423 = (getTempRet0() | 0);
 $2424 = (_i64Add(($2422|0),($2423|0),($2420|0),($2421|0))|0);
 $2425 = (getTempRet0() | 0);
 $2426 = $2424 ^ $2411;
 $2427 = $2425 ^ $2410;
 $2428 = (_bitshift64Lshr(($2426|0),($2427|0),16)|0);
 $2429 = (getTempRet0() | 0);
 $2430 = (_bitshift64Shl(($2426|0),($2427|0),48)|0);
 $2431 = (getTempRet0() | 0);
 $2432 = $2428 | $2430;
 $2433 = $2429 | $2431;
 $2434 = (_i64Add(($2432|0),($2433|0),($2412|0),($2413|0))|0);
 $2435 = (getTempRet0() | 0);
 $2436 = $2434 ^ $2420;
 $2437 = $2435 ^ $2421;
 $2438 = (_bitshift64Lshr(($2436|0),($2437|0),63)|0);
 $2439 = (getTempRet0() | 0);
 $2440 = (_bitshift64Shl(($2436|0),($2437|0),1)|0);
 $2441 = (getTempRet0() | 0);
 $2442 = $2438 | $2440;
 $2443 = $2439 | $2441;
 $2444 = (_i64Add(($2310|0),($2311|0),($34|0),($37|0))|0);
 $2445 = (getTempRet0() | 0);
 $2446 = (_i64Add(($2444|0),($2445|0),($2366|0),($2367|0))|0);
 $2447 = (getTempRet0() | 0);
 $2448 = $2446 ^ $2432;
 $2449 = $2447 ^ $2433;
 $2450 = (_i64Add(($2449|0),($2448|0),($2396|0),($2397|0))|0);
 $2451 = (getTempRet0() | 0);
 $2452 = $2450 ^ $2366;
 $2453 = $2451 ^ $2367;
 $2454 = (_bitshift64Lshr(($2452|0),($2453|0),24)|0);
 $2455 = (getTempRet0() | 0);
 $2456 = (_bitshift64Shl(($2452|0),($2453|0),40)|0);
 $2457 = (getTempRet0() | 0);
 $2458 = $2454 | $2456;
 $2459 = $2455 | $2457;
 $2460 = (_i64Add(($2446|0),($2447|0),($4|0),($7|0))|0);
 $2461 = (getTempRet0() | 0);
 $2462 = (_i64Add(($2460|0),($2461|0),($2458|0),($2459|0))|0);
 $2463 = (getTempRet0() | 0);
 $2464 = $2462 ^ $2449;
 $2465 = $2463 ^ $2448;
 $2466 = (_bitshift64Lshr(($2464|0),($2465|0),16)|0);
 $2467 = (getTempRet0() | 0);
 $2468 = (_bitshift64Shl(($2464|0),($2465|0),48)|0);
 $2469 = (getTempRet0() | 0);
 $2470 = $2466 | $2468;
 $2471 = $2467 | $2469;
 $2472 = (_i64Add(($2470|0),($2471|0),($2450|0),($2451|0))|0);
 $2473 = (getTempRet0() | 0);
 $2474 = $2472 ^ $2458;
 $2475 = $2473 ^ $2459;
 $2476 = (_bitshift64Lshr(($2474|0),($2475|0),63)|0);
 $2477 = (getTempRet0() | 0);
 $2478 = (_bitshift64Shl(($2474|0),($2475|0),1)|0);
 $2479 = (getTempRet0() | 0);
 $2480 = $2476 | $2478;
 $2481 = $2477 | $2479;
 $2482 = (_i64Add(($2348|0),($2349|0),($94|0),($97|0))|0);
 $2483 = (getTempRet0() | 0);
 $2484 = (_i64Add(($2482|0),($2483|0),($2404|0),($2405|0))|0);
 $2485 = (getTempRet0() | 0);
 $2486 = $2484 ^ $2318;
 $2487 = $2485 ^ $2319;
 $2488 = (_i64Add(($2487|0),($2486|0),($2434|0),($2435|0))|0);
 $2489 = (getTempRet0() | 0);
 $2490 = $2488 ^ $2404;
 $2491 = $2489 ^ $2405;
 $2492 = (_bitshift64Lshr(($2490|0),($2491|0),24)|0);
 $2493 = (getTempRet0() | 0);
 $2494 = (_bitshift64Shl(($2490|0),($2491|0),40)|0);
 $2495 = (getTempRet0() | 0);
 $2496 = $2492 | $2494;
 $2497 = $2493 | $2495;
 $2498 = (_i64Add(($2484|0),($2485|0),($28|0),($31|0))|0);
 $2499 = (getTempRet0() | 0);
 $2500 = (_i64Add(($2498|0),($2499|0),($2496|0),($2497|0))|0);
 $2501 = (getTempRet0() | 0);
 $2502 = $2500 ^ $2487;
 $2503 = $2501 ^ $2486;
 $2504 = (_bitshift64Lshr(($2502|0),($2503|0),16)|0);
 $2505 = (getTempRet0() | 0);
 $2506 = (_bitshift64Shl(($2502|0),($2503|0),48)|0);
 $2507 = (getTempRet0() | 0);
 $2508 = $2504 | $2506;
 $2509 = $2505 | $2507;
 $2510 = (_i64Add(($2508|0),($2509|0),($2488|0),($2489|0))|0);
 $2511 = (getTempRet0() | 0);
 $2512 = $2510 ^ $2496;
 $2513 = $2511 ^ $2497;
 $2514 = (_bitshift64Lshr(($2512|0),($2513|0),63)|0);
 $2515 = (getTempRet0() | 0);
 $2516 = (_bitshift64Shl(($2512|0),($2513|0),1)|0);
 $2517 = (getTempRet0() | 0);
 $2518 = $2514 | $2516;
 $2519 = $2515 | $2517;
 $2520 = (_i64Add(($2386|0),($2387|0),($52|0),($55|0))|0);
 $2521 = (getTempRet0() | 0);
 $2522 = (_i64Add(($2520|0),($2521|0),($2442|0),($2443|0))|0);
 $2523 = (getTempRet0() | 0);
 $2524 = $2522 ^ $2356;
 $2525 = $2523 ^ $2357;
 $2526 = (_i64Add(($2525|0),($2524|0),($2320|0),($2321|0))|0);
 $2527 = (getTempRet0() | 0);
 $2528 = $2526 ^ $2442;
 $2529 = $2527 ^ $2443;
 $2530 = (_bitshift64Lshr(($2528|0),($2529|0),24)|0);
 $2531 = (getTempRet0() | 0);
 $2532 = (_bitshift64Shl(($2528|0),($2529|0),40)|0);
 $2533 = (getTempRet0() | 0);
 $2534 = $2530 | $2532;
 $2535 = $2531 | $2533;
 $2536 = (_i64Add(($2522|0),($2523|0),($40|0),($43|0))|0);
 $2537 = (getTempRet0() | 0);
 $2538 = (_i64Add(($2536|0),($2537|0),($2534|0),($2535|0))|0);
 $2539 = (getTempRet0() | 0);
 $2540 = $2538 ^ $2525;
 $2541 = $2539 ^ $2524;
 $2542 = (_bitshift64Lshr(($2540|0),($2541|0),16)|0);
 $2543 = (getTempRet0() | 0);
 $2544 = (_bitshift64Shl(($2540|0),($2541|0),48)|0);
 $2545 = (getTempRet0() | 0);
 $2546 = $2542 | $2544;
 $2547 = $2543 | $2545;
 $2548 = (_i64Add(($2546|0),($2547|0),($2526|0),($2527|0))|0);
 $2549 = (getTempRet0() | 0);
 $2550 = $2548 ^ $2534;
 $2551 = $2549 ^ $2535;
 $2552 = (_bitshift64Lshr(($2550|0),($2551|0),63)|0);
 $2553 = (getTempRet0() | 0);
 $2554 = (_bitshift64Shl(($2550|0),($2551|0),1)|0);
 $2555 = (getTempRet0() | 0);
 $2556 = $2552 | $2554;
 $2557 = $2553 | $2555;
 $2558 = (_i64Add(($2424|0),($2425|0),($16|0),($19|0))|0);
 $2559 = (getTempRet0() | 0);
 $2560 = (_i64Add(($2558|0),($2559|0),($2328|0),($2329|0))|0);
 $2561 = (getTempRet0() | 0);
 $2562 = $2560 ^ $2394;
 $2563 = $2561 ^ $2395;
 $2564 = (_i64Add(($2563|0),($2562|0),($2358|0),($2359|0))|0);
 $2565 = (getTempRet0() | 0);
 $2566 = $2564 ^ $2328;
 $2567 = $2565 ^ $2329;
 $2568 = (_bitshift64Lshr(($2566|0),($2567|0),24)|0);
 $2569 = (getTempRet0() | 0);
 $2570 = (_bitshift64Shl(($2566|0),($2567|0),40)|0);
 $2571 = (getTempRet0() | 0);
 $2572 = $2568 | $2570;
 $2573 = $2569 | $2571;
 $2574 = (_i64Add(($2560|0),($2561|0),($64|0),($67|0))|0);
 $2575 = (getTempRet0() | 0);
 $2576 = (_i64Add(($2574|0),($2575|0),($2572|0),($2573|0))|0);
 $2577 = (getTempRet0() | 0);
 $2578 = $2576 ^ $2563;
 $2579 = $2577 ^ $2562;
 $2580 = (_bitshift64Lshr(($2578|0),($2579|0),16)|0);
 $2581 = (getTempRet0() | 0);
 $2582 = (_bitshift64Shl(($2578|0),($2579|0),48)|0);
 $2583 = (getTempRet0() | 0);
 $2584 = $2580 | $2582;
 $2585 = $2581 | $2583;
 $2586 = (_i64Add(($2584|0),($2585|0),($2564|0),($2565|0))|0);
 $2587 = (getTempRet0() | 0);
 $2588 = $2586 ^ $2572;
 $2589 = $2587 ^ $2573;
 $2590 = (_bitshift64Lshr(($2588|0),($2589|0),63)|0);
 $2591 = (getTempRet0() | 0);
 $2592 = (_bitshift64Shl(($2588|0),($2589|0),1)|0);
 $2593 = (getTempRet0() | 0);
 $2594 = $2590 | $2592;
 $2595 = $2591 | $2593;
 $2596 = (_i64Add(($2462|0),($2463|0),($40|0),($43|0))|0);
 $2597 = (getTempRet0() | 0);
 $2598 = (_i64Add(($2596|0),($2597|0),($2594|0),($2595|0))|0);
 $2599 = (getTempRet0() | 0);
 $2600 = $2598 ^ $2508;
 $2601 = $2599 ^ $2509;
 $2602 = (_i64Add(($2601|0),($2600|0),($2548|0),($2549|0))|0);
 $2603 = (getTempRet0() | 0);
 $2604 = $2602 ^ $2594;
 $2605 = $2603 ^ $2595;
 $2606 = (_bitshift64Lshr(($2604|0),($2605|0),24)|0);
 $2607 = (getTempRet0() | 0);
 $2608 = (_bitshift64Shl(($2604|0),($2605|0),40)|0);
 $2609 = (getTempRet0() | 0);
 $2610 = $2606 | $2608;
 $2611 = $2607 | $2609;
 $2612 = (_i64Add(($2598|0),($2599|0),($94|0),($97|0))|0);
 $2613 = (getTempRet0() | 0);
 $2614 = (_i64Add(($2612|0),($2613|0),($2610|0),($2611|0))|0);
 $2615 = (getTempRet0() | 0);
 $2616 = $2614 ^ $2601;
 $2617 = $2615 ^ $2600;
 $2618 = (_bitshift64Lshr(($2616|0),($2617|0),16)|0);
 $2619 = (getTempRet0() | 0);
 $2620 = (_bitshift64Shl(($2616|0),($2617|0),48)|0);
 $2621 = (getTempRet0() | 0);
 $2622 = $2618 | $2620;
 $2623 = $2619 | $2621;
 $2624 = (_i64Add(($2622|0),($2623|0),($2602|0),($2603|0))|0);
 $2625 = (getTempRet0() | 0);
 $2626 = $2624 ^ $2610;
 $2627 = $2625 ^ $2611;
 $2628 = (_bitshift64Lshr(($2626|0),($2627|0),63)|0);
 $2629 = (getTempRet0() | 0);
 $2630 = (_bitshift64Shl(($2626|0),($2627|0),1)|0);
 $2631 = (getTempRet0() | 0);
 $2632 = $2628 | $2630;
 $2633 = $2629 | $2631;
 $2634 = (_i64Add(($2500|0),($2501|0),($88|0),($91|0))|0);
 $2635 = (getTempRet0() | 0);
 $2636 = (_i64Add(($2634|0),($2635|0),($2480|0),($2481|0))|0);
 $2637 = (getTempRet0() | 0);
 $2638 = $2636 ^ $2546;
 $2639 = $2637 ^ $2547;
 $2640 = (_i64Add(($2639|0),($2638|0),($2586|0),($2587|0))|0);
 $2641 = (getTempRet0() | 0);
 $2642 = $2640 ^ $2480;
 $2643 = $2641 ^ $2481;
 $2644 = (_bitshift64Lshr(($2642|0),($2643|0),24)|0);
 $2645 = (getTempRet0() | 0);
 $2646 = (_bitshift64Shl(($2642|0),($2643|0),40)|0);
 $2647 = (getTempRet0() | 0);
 $2648 = $2644 | $2646;
 $2649 = $2645 | $2647;
 $2650 = (_i64Add(($2636|0),($2637|0),($58|0),($61|0))|0);
 $2651 = (getTempRet0() | 0);
 $2652 = (_i64Add(($2650|0),($2651|0),($2648|0),($2649|0))|0);
 $2653 = (getTempRet0() | 0);
 $2654 = $2652 ^ $2639;
 $2655 = $2653 ^ $2638;
 $2656 = (_bitshift64Lshr(($2654|0),($2655|0),16)|0);
 $2657 = (getTempRet0() | 0);
 $2658 = (_bitshift64Shl(($2654|0),($2655|0),48)|0);
 $2659 = (getTempRet0() | 0);
 $2660 = $2656 | $2658;
 $2661 = $2657 | $2659;
 $2662 = (_i64Add(($2660|0),($2661|0),($2640|0),($2641|0))|0);
 $2663 = (getTempRet0() | 0);
 $2664 = $2662 ^ $2648;
 $2665 = $2663 ^ $2649;
 $2666 = (_bitshift64Lshr(($2664|0),($2665|0),63)|0);
 $2667 = (getTempRet0() | 0);
 $2668 = (_bitshift64Shl(($2664|0),($2665|0),1)|0);
 $2669 = (getTempRet0() | 0);
 $2670 = $2666 | $2668;
 $2671 = $2667 | $2669;
 $2672 = (_i64Add(($2538|0),($2539|0),($70|0),($73|0))|0);
 $2673 = (getTempRet0() | 0);
 $2674 = (_i64Add(($2672|0),($2673|0),($2518|0),($2519|0))|0);
 $2675 = (getTempRet0() | 0);
 $2676 = $2674 ^ $2584;
 $2677 = $2675 ^ $2585;
 $2678 = (_i64Add(($2677|0),($2676|0),($2472|0),($2473|0))|0);
 $2679 = (getTempRet0() | 0);
 $2680 = $2678 ^ $2518;
 $2681 = $2679 ^ $2519;
 $2682 = (_bitshift64Lshr(($2680|0),($2681|0),24)|0);
 $2683 = (getTempRet0() | 0);
 $2684 = (_bitshift64Shl(($2680|0),($2681|0),40)|0);
 $2685 = (getTempRet0() | 0);
 $2686 = $2682 | $2684;
 $2687 = $2683 | $2685;
 $2688 = (_i64Add(($2674|0),($2675|0),($22|0),($25|0))|0);
 $2689 = (getTempRet0() | 0);
 $2690 = (_i64Add(($2688|0),($2689|0),($2686|0),($2687|0))|0);
 $2691 = (getTempRet0() | 0);
 $2692 = $2690 ^ $2677;
 $2693 = $2691 ^ $2676;
 $2694 = (_bitshift64Lshr(($2692|0),($2693|0),16)|0);
 $2695 = (getTempRet0() | 0);
 $2696 = (_bitshift64Shl(($2692|0),($2693|0),48)|0);
 $2697 = (getTempRet0() | 0);
 $2698 = $2694 | $2696;
 $2699 = $2695 | $2697;
 $2700 = (_i64Add(($2698|0),($2699|0),($2678|0),($2679|0))|0);
 $2701 = (getTempRet0() | 0);
 $2702 = $2700 ^ $2686;
 $2703 = $2701 ^ $2687;
 $2704 = (_bitshift64Lshr(($2702|0),($2703|0),63)|0);
 $2705 = (getTempRet0() | 0);
 $2706 = (_bitshift64Shl(($2702|0),($2703|0),1)|0);
 $2707 = (getTempRet0() | 0);
 $2708 = $2704 | $2706;
 $2709 = $2705 | $2707;
 $2710 = (_i64Add(($2576|0),($2577|0),($4|0),($7|0))|0);
 $2711 = (getTempRet0() | 0);
 $2712 = (_i64Add(($2710|0),($2711|0),($2556|0),($2557|0))|0);
 $2713 = (getTempRet0() | 0);
 $2714 = $2712 ^ $2470;
 $2715 = $2713 ^ $2471;
 $2716 = (_i64Add(($2715|0),($2714|0),($2510|0),($2511|0))|0);
 $2717 = (getTempRet0() | 0);
 $2718 = $2716 ^ $2556;
 $2719 = $2717 ^ $2557;
 $2720 = (_bitshift64Lshr(($2718|0),($2719|0),24)|0);
 $2721 = (getTempRet0() | 0);
 $2722 = (_bitshift64Shl(($2718|0),($2719|0),40)|0);
 $2723 = (getTempRet0() | 0);
 $2724 = $2720 | $2722;
 $2725 = $2721 | $2723;
 $2726 = (_i64Add(($2712|0),($2713|0),($52|0),($55|0))|0);
 $2727 = (getTempRet0() | 0);
 $2728 = (_i64Add(($2726|0),($2727|0),($2724|0),($2725|0))|0);
 $2729 = (getTempRet0() | 0);
 $2730 = $2728 ^ $2715;
 $2731 = $2729 ^ $2714;
 $2732 = (_bitshift64Lshr(($2730|0),($2731|0),16)|0);
 $2733 = (getTempRet0() | 0);
 $2734 = (_bitshift64Shl(($2730|0),($2731|0),48)|0);
 $2735 = (getTempRet0() | 0);
 $2736 = $2732 | $2734;
 $2737 = $2733 | $2735;
 $2738 = (_i64Add(($2736|0),($2737|0),($2716|0),($2717|0))|0);
 $2739 = (getTempRet0() | 0);
 $2740 = $2738 ^ $2724;
 $2741 = $2739 ^ $2725;
 $2742 = (_bitshift64Lshr(($2740|0),($2741|0),63)|0);
 $2743 = (getTempRet0() | 0);
 $2744 = (_bitshift64Shl(($2740|0),($2741|0),1)|0);
 $2745 = (getTempRet0() | 0);
 $2746 = $2742 | $2744;
 $2747 = $2743 | $2745;
 $2748 = (_i64Add(($2614|0),($2615|0),($76|0),($79|0))|0);
 $2749 = (getTempRet0() | 0);
 $2750 = (_i64Add(($2748|0),($2749|0),($2670|0),($2671|0))|0);
 $2751 = (getTempRet0() | 0);
 $2752 = $2750 ^ $2736;
 $2753 = $2751 ^ $2737;
 $2754 = (_i64Add(($2753|0),($2752|0),($2700|0),($2701|0))|0);
 $2755 = (getTempRet0() | 0);
 $2756 = $2754 ^ $2670;
 $2757 = $2755 ^ $2671;
 $2758 = (_bitshift64Lshr(($2756|0),($2757|0),24)|0);
 $2759 = (getTempRet0() | 0);
 $2760 = (_bitshift64Shl(($2756|0),($2757|0),40)|0);
 $2761 = (getTempRet0() | 0);
 $2762 = $2758 | $2760;
 $2763 = $2759 | $2761;
 $2764 = (_i64Add(($2750|0),($2751|0),($16|0),($19|0))|0);
 $2765 = (getTempRet0() | 0);
 $2766 = (_i64Add(($2764|0),($2765|0),($2762|0),($2763|0))|0);
 $2767 = (getTempRet0() | 0);
 $2768 = $2766 ^ $2753;
 $2769 = $2767 ^ $2752;
 $2770 = (_bitshift64Lshr(($2768|0),($2769|0),16)|0);
 $2771 = (getTempRet0() | 0);
 $2772 = (_bitshift64Shl(($2768|0),($2769|0),48)|0);
 $2773 = (getTempRet0() | 0);
 $2774 = $2770 | $2772;
 $2775 = $2771 | $2773;
 $2776 = (_i64Add(($2774|0),($2775|0),($2754|0),($2755|0))|0);
 $2777 = (getTempRet0() | 0);
 $2778 = $2776 ^ $2762;
 $2779 = $2777 ^ $2763;
 $2780 = (_bitshift64Lshr(($2778|0),($2779|0),63)|0);
 $2781 = (getTempRet0() | 0);
 $2782 = (_bitshift64Shl(($2778|0),($2779|0),1)|0);
 $2783 = (getTempRet0() | 0);
 $2784 = $2780 | $2782;
 $2785 = $2781 | $2783;
 $2786 = (_i64Add(($2652|0),($2653|0),($82|0),($85|0))|0);
 $2787 = (getTempRet0() | 0);
 $2788 = (_i64Add(($2786|0),($2787|0),($2708|0),($2709|0))|0);
 $2789 = (getTempRet0() | 0);
 $2790 = $2788 ^ $2622;
 $2791 = $2789 ^ $2623;
 $2792 = (_i64Add(($2791|0),($2790|0),($2738|0),($2739|0))|0);
 $2793 = (getTempRet0() | 0);
 $2794 = $2792 ^ $2708;
 $2795 = $2793 ^ $2709;
 $2796 = (_bitshift64Lshr(($2794|0),($2795|0),24)|0);
 $2797 = (getTempRet0() | 0);
 $2798 = (_bitshift64Shl(($2794|0),($2795|0),40)|0);
 $2799 = (getTempRet0() | 0);
 $2800 = $2796 | $2798;
 $2801 = $2797 | $2799;
 $2802 = (_i64Add(($2788|0),($2789|0),($46|0),($49|0))|0);
 $2803 = (getTempRet0() | 0);
 $2804 = (_i64Add(($2802|0),($2803|0),($2800|0),($2801|0))|0);
 $2805 = (getTempRet0() | 0);
 $2806 = $2804 ^ $2791;
 $2807 = $2805 ^ $2790;
 $2808 = (_bitshift64Lshr(($2806|0),($2807|0),16)|0);
 $2809 = (getTempRet0() | 0);
 $2810 = (_bitshift64Shl(($2806|0),($2807|0),48)|0);
 $2811 = (getTempRet0() | 0);
 $2812 = $2808 | $2810;
 $2813 = $2809 | $2811;
 $2814 = (_i64Add(($2812|0),($2813|0),($2792|0),($2793|0))|0);
 $2815 = (getTempRet0() | 0);
 $2816 = $2814 ^ $2800;
 $2817 = $2815 ^ $2801;
 $2818 = (_bitshift64Lshr(($2816|0),($2817|0),63)|0);
 $2819 = (getTempRet0() | 0);
 $2820 = (_bitshift64Shl(($2816|0),($2817|0),1)|0);
 $2821 = (getTempRet0() | 0);
 $2822 = $2818 | $2820;
 $2823 = $2819 | $2821;
 $2824 = (_i64Add(($2690|0),($2691|0),($10|0),($13|0))|0);
 $2825 = (getTempRet0() | 0);
 $2826 = (_i64Add(($2824|0),($2825|0),($2746|0),($2747|0))|0);
 $2827 = (getTempRet0() | 0);
 $2828 = $2826 ^ $2660;
 $2829 = $2827 ^ $2661;
 $2830 = (_i64Add(($2829|0),($2828|0),($2624|0),($2625|0))|0);
 $2831 = (getTempRet0() | 0);
 $2832 = $2830 ^ $2746;
 $2833 = $2831 ^ $2747;
 $2834 = (_bitshift64Lshr(($2832|0),($2833|0),24)|0);
 $2835 = (getTempRet0() | 0);
 $2836 = (_bitshift64Shl(($2832|0),($2833|0),40)|0);
 $2837 = (getTempRet0() | 0);
 $2838 = $2834 | $2836;
 $2839 = $2835 | $2837;
 $2840 = (_i64Add(($2826|0),($2827|0),($28|0),($31|0))|0);
 $2841 = (getTempRet0() | 0);
 $2842 = (_i64Add(($2840|0),($2841|0),($2838|0),($2839|0))|0);
 $2843 = (getTempRet0() | 0);
 $2844 = $2842 ^ $2829;
 $2845 = $2843 ^ $2828;
 $2846 = (_bitshift64Lshr(($2844|0),($2845|0),16)|0);
 $2847 = (getTempRet0() | 0);
 $2848 = (_bitshift64Shl(($2844|0),($2845|0),48)|0);
 $2849 = (getTempRet0() | 0);
 $2850 = $2846 | $2848;
 $2851 = $2847 | $2849;
 $2852 = (_i64Add(($2850|0),($2851|0),($2830|0),($2831|0))|0);
 $2853 = (getTempRet0() | 0);
 $2854 = $2852 ^ $2838;
 $2855 = $2853 ^ $2839;
 $2856 = (_bitshift64Lshr(($2854|0),($2855|0),63)|0);
 $2857 = (getTempRet0() | 0);
 $2858 = (_bitshift64Shl(($2854|0),($2855|0),1)|0);
 $2859 = (getTempRet0() | 0);
 $2860 = $2856 | $2858;
 $2861 = $2857 | $2859;
 $2862 = (_i64Add(($2728|0),($2729|0),($64|0),($67|0))|0);
 $2863 = (getTempRet0() | 0);
 $2864 = (_i64Add(($2862|0),($2863|0),($2632|0),($2633|0))|0);
 $2865 = (getTempRet0() | 0);
 $2866 = $2864 ^ $2698;
 $2867 = $2865 ^ $2699;
 $2868 = (_i64Add(($2867|0),($2866|0),($2662|0),($2663|0))|0);
 $2869 = (getTempRet0() | 0);
 $2870 = $2868 ^ $2632;
 $2871 = $2869 ^ $2633;
 $2872 = (_bitshift64Lshr(($2870|0),($2871|0),24)|0);
 $2873 = (getTempRet0() | 0);
 $2874 = (_bitshift64Shl(($2870|0),($2871|0),40)|0);
 $2875 = (getTempRet0() | 0);
 $2876 = $2872 | $2874;
 $2877 = $2873 | $2875;
 $2878 = (_i64Add(($2864|0),($2865|0),($34|0),($37|0))|0);
 $2879 = (getTempRet0() | 0);
 $2880 = (_i64Add(($2878|0),($2879|0),($2876|0),($2877|0))|0);
 $2881 = (getTempRet0() | 0);
 $2882 = $2880 ^ $2867;
 $2883 = $2881 ^ $2866;
 $2884 = (_bitshift64Lshr(($2882|0),($2883|0),16)|0);
 $2885 = (getTempRet0() | 0);
 $2886 = (_bitshift64Shl(($2882|0),($2883|0),48)|0);
 $2887 = (getTempRet0() | 0);
 $2888 = $2884 | $2886;
 $2889 = $2885 | $2887;
 $2890 = (_i64Add(($2888|0),($2889|0),($2868|0),($2869|0))|0);
 $2891 = (getTempRet0() | 0);
 $2892 = $2890 ^ $2876;
 $2893 = $2891 ^ $2877;
 $2894 = (_bitshift64Lshr(($2892|0),($2893|0),63)|0);
 $2895 = (getTempRet0() | 0);
 $2896 = (_bitshift64Shl(($2892|0),($2893|0),1)|0);
 $2897 = (getTempRet0() | 0);
 $2898 = $2894 | $2896;
 $2899 = $2895 | $2897;
 $2900 = (_i64Add(($2766|0),($2767|0),($64|0),($67|0))|0);
 $2901 = (getTempRet0() | 0);
 $2902 = (_i64Add(($2900|0),($2901|0),($2898|0),($2899|0))|0);
 $2903 = (getTempRet0() | 0);
 $2904 = $2902 ^ $2812;
 $2905 = $2903 ^ $2813;
 $2906 = (_i64Add(($2905|0),($2904|0),($2852|0),($2853|0))|0);
 $2907 = (getTempRet0() | 0);
 $2908 = $2906 ^ $2898;
 $2909 = $2907 ^ $2899;
 $2910 = (_bitshift64Lshr(($2908|0),($2909|0),24)|0);
 $2911 = (getTempRet0() | 0);
 $2912 = (_bitshift64Shl(($2908|0),($2909|0),40)|0);
 $2913 = (getTempRet0() | 0);
 $2914 = $2910 | $2912;
 $2915 = $2911 | $2913;
 $2916 = (_i64Add(($2902|0),($2903|0),($16|0),($19|0))|0);
 $2917 = (getTempRet0() | 0);
 $2918 = (_i64Add(($2916|0),($2917|0),($2914|0),($2915|0))|0);
 $2919 = (getTempRet0() | 0);
 $2920 = $2918 ^ $2905;
 $2921 = $2919 ^ $2904;
 $2922 = (_bitshift64Lshr(($2920|0),($2921|0),16)|0);
 $2923 = (getTempRet0() | 0);
 $2924 = (_bitshift64Shl(($2920|0),($2921|0),48)|0);
 $2925 = (getTempRet0() | 0);
 $2926 = $2922 | $2924;
 $2927 = $2923 | $2925;
 $2928 = (_i64Add(($2926|0),($2927|0),($2906|0),($2907|0))|0);
 $2929 = (getTempRet0() | 0);
 $2930 = $2928 ^ $2914;
 $2931 = $2929 ^ $2915;
 $2932 = (_bitshift64Lshr(($2930|0),($2931|0),63)|0);
 $2933 = (getTempRet0() | 0);
 $2934 = (_bitshift64Shl(($2930|0),($2931|0),1)|0);
 $2935 = (getTempRet0() | 0);
 $2936 = $2932 | $2934;
 $2937 = $2933 | $2935;
 $2938 = (_i64Add(($2804|0),($2805|0),($52|0),($55|0))|0);
 $2939 = (getTempRet0() | 0);
 $2940 = (_i64Add(($2938|0),($2939|0),($2784|0),($2785|0))|0);
 $2941 = (getTempRet0() | 0);
 $2942 = $2940 ^ $2850;
 $2943 = $2941 ^ $2851;
 $2944 = (_i64Add(($2943|0),($2942|0),($2890|0),($2891|0))|0);
 $2945 = (getTempRet0() | 0);
 $2946 = $2944 ^ $2784;
 $2947 = $2945 ^ $2785;
 $2948 = (_bitshift64Lshr(($2946|0),($2947|0),24)|0);
 $2949 = (getTempRet0() | 0);
 $2950 = (_bitshift64Shl(($2946|0),($2947|0),40)|0);
 $2951 = (getTempRet0() | 0);
 $2952 = $2948 | $2950;
 $2953 = $2949 | $2951;
 $2954 = (_i64Add(($2940|0),($2941|0),($28|0),($31|0))|0);
 $2955 = (getTempRet0() | 0);
 $2956 = (_i64Add(($2954|0),($2955|0),($2952|0),($2953|0))|0);
 $2957 = (getTempRet0() | 0);
 $2958 = $2956 ^ $2943;
 $2959 = $2957 ^ $2942;
 $2960 = (_bitshift64Lshr(($2958|0),($2959|0),16)|0);
 $2961 = (getTempRet0() | 0);
 $2962 = (_bitshift64Shl(($2958|0),($2959|0),48)|0);
 $2963 = (getTempRet0() | 0);
 $2964 = $2960 | $2962;
 $2965 = $2961 | $2963;
 $2966 = (_i64Add(($2964|0),($2965|0),($2944|0),($2945|0))|0);
 $2967 = (getTempRet0() | 0);
 $2968 = $2966 ^ $2952;
 $2969 = $2967 ^ $2953;
 $2970 = (_bitshift64Lshr(($2968|0),($2969|0),63)|0);
 $2971 = (getTempRet0() | 0);
 $2972 = (_bitshift64Shl(($2968|0),($2969|0),1)|0);
 $2973 = (getTempRet0() | 0);
 $2974 = $2970 | $2972;
 $2975 = $2971 | $2973;
 $2976 = (_i64Add(($2842|0),($2843|0),($46|0),($49|0))|0);
 $2977 = (getTempRet0() | 0);
 $2978 = (_i64Add(($2976|0),($2977|0),($2822|0),($2823|0))|0);
 $2979 = (getTempRet0() | 0);
 $2980 = $2978 ^ $2888;
 $2981 = $2979 ^ $2889;
 $2982 = (_i64Add(($2981|0),($2980|0),($2776|0),($2777|0))|0);
 $2983 = (getTempRet0() | 0);
 $2984 = $2982 ^ $2822;
 $2985 = $2983 ^ $2823;
 $2986 = (_bitshift64Lshr(($2984|0),($2985|0),24)|0);
 $2987 = (getTempRet0() | 0);
 $2988 = (_bitshift64Shl(($2984|0),($2985|0),40)|0);
 $2989 = (getTempRet0() | 0);
 $2990 = $2986 | $2988;
 $2991 = $2987 | $2989;
 $2992 = (_i64Add(($2978|0),($2979|0),($40|0),($43|0))|0);
 $2993 = (getTempRet0() | 0);
 $2994 = (_i64Add(($2992|0),($2993|0),($2990|0),($2991|0))|0);
 $2995 = (getTempRet0() | 0);
 $2996 = $2994 ^ $2981;
 $2997 = $2995 ^ $2980;
 $2998 = (_bitshift64Lshr(($2996|0),($2997|0),16)|0);
 $2999 = (getTempRet0() | 0);
 $3000 = (_bitshift64Shl(($2996|0),($2997|0),48)|0);
 $3001 = (getTempRet0() | 0);
 $3002 = $2998 | $3000;
 $3003 = $2999 | $3001;
 $3004 = (_i64Add(($3002|0),($3003|0),($2982|0),($2983|0))|0);
 $3005 = (getTempRet0() | 0);
 $3006 = $3004 ^ $2990;
 $3007 = $3005 ^ $2991;
 $3008 = (_bitshift64Lshr(($3006|0),($3007|0),63)|0);
 $3009 = (getTempRet0() | 0);
 $3010 = (_bitshift64Shl(($3006|0),($3007|0),1)|0);
 $3011 = (getTempRet0() | 0);
 $3012 = $3008 | $3010;
 $3013 = $3009 | $3011;
 $3014 = (_i64Add(($2880|0),($2881|0),($10|0),($13|0))|0);
 $3015 = (getTempRet0() | 0);
 $3016 = (_i64Add(($3014|0),($3015|0),($2860|0),($2861|0))|0);
 $3017 = (getTempRet0() | 0);
 $3018 = $3016 ^ $2774;
 $3019 = $3017 ^ $2775;
 $3020 = (_i64Add(($3019|0),($3018|0),($2814|0),($2815|0))|0);
 $3021 = (getTempRet0() | 0);
 $3022 = $3020 ^ $2860;
 $3023 = $3021 ^ $2861;
 $3024 = (_bitshift64Lshr(($3022|0),($3023|0),24)|0);
 $3025 = (getTempRet0() | 0);
 $3026 = (_bitshift64Shl(($3022|0),($3023|0),40)|0);
 $3027 = (getTempRet0() | 0);
 $3028 = $3024 | $3026;
 $3029 = $3025 | $3027;
 $3030 = (_i64Add(($3016|0),($3017|0),($34|0),($37|0))|0);
 $3031 = (getTempRet0() | 0);
 $3032 = (_i64Add(($3030|0),($3031|0),($3028|0),($3029|0))|0);
 $3033 = (getTempRet0() | 0);
 $3034 = $3032 ^ $3019;
 $3035 = $3033 ^ $3018;
 $3036 = (_bitshift64Lshr(($3034|0),($3035|0),16)|0);
 $3037 = (getTempRet0() | 0);
 $3038 = (_bitshift64Shl(($3034|0),($3035|0),48)|0);
 $3039 = (getTempRet0() | 0);
 $3040 = $3036 | $3038;
 $3041 = $3037 | $3039;
 $3042 = (_i64Add(($3040|0),($3041|0),($3020|0),($3021|0))|0);
 $3043 = (getTempRet0() | 0);
 $3044 = $3042 ^ $3028;
 $3045 = $3043 ^ $3029;
 $3046 = (_bitshift64Lshr(($3044|0),($3045|0),63)|0);
 $3047 = (getTempRet0() | 0);
 $3048 = (_bitshift64Shl(($3044|0),($3045|0),1)|0);
 $3049 = (getTempRet0() | 0);
 $3050 = $3046 | $3048;
 $3051 = $3047 | $3049;
 $3052 = (_i64Add(($2918|0),($2919|0),($94|0),($97|0))|0);
 $3053 = (getTempRet0() | 0);
 $3054 = (_i64Add(($3052|0),($3053|0),($2974|0),($2975|0))|0);
 $3055 = (getTempRet0() | 0);
 $3056 = $3054 ^ $3040;
 $3057 = $3055 ^ $3041;
 $3058 = (_i64Add(($3057|0),($3056|0),($3004|0),($3005|0))|0);
 $3059 = (getTempRet0() | 0);
 $3060 = $3058 ^ $2974;
 $3061 = $3059 ^ $2975;
 $3062 = (_bitshift64Lshr(($3060|0),($3061|0),24)|0);
 $3063 = (getTempRet0() | 0);
 $3064 = (_bitshift64Shl(($3060|0),($3061|0),40)|0);
 $3065 = (getTempRet0() | 0);
 $3066 = $3062 | $3064;
 $3067 = $3063 | $3065;
 $3068 = (_i64Add(($3054|0),($3055|0),($70|0),($73|0))|0);
 $3069 = (getTempRet0() | 0);
 $3070 = (_i64Add(($3068|0),($3069|0),($3066|0),($3067|0))|0);
 $3071 = (getTempRet0() | 0);
 $3072 = $3070 ^ $3057;
 $3073 = $3071 ^ $3056;
 $3074 = (_bitshift64Lshr(($3072|0),($3073|0),16)|0);
 $3075 = (getTempRet0() | 0);
 $3076 = (_bitshift64Shl(($3072|0),($3073|0),48)|0);
 $3077 = (getTempRet0() | 0);
 $3078 = $3074 | $3076;
 $3079 = $3075 | $3077;
 $3080 = (_i64Add(($3078|0),($3079|0),($3058|0),($3059|0))|0);
 $3081 = (getTempRet0() | 0);
 $3082 = $3080 ^ $3066;
 $3083 = $3081 ^ $3067;
 $3084 = (_bitshift64Lshr(($3082|0),($3083|0),63)|0);
 $3085 = (getTempRet0() | 0);
 $3086 = (_bitshift64Shl(($3082|0),($3083|0),1)|0);
 $3087 = (getTempRet0() | 0);
 $3088 = $3084 | $3086;
 $3089 = $3085 | $3087;
 $3090 = (_i64Add(($2956|0),($2957|0),($58|0),($61|0))|0);
 $3091 = (getTempRet0() | 0);
 $3092 = (_i64Add(($3090|0),($3091|0),($3012|0),($3013|0))|0);
 $3093 = (getTempRet0() | 0);
 $3094 = $3092 ^ $2926;
 $3095 = $3093 ^ $2927;
 $3096 = (_i64Add(($3095|0),($3094|0),($3042|0),($3043|0))|0);
 $3097 = (getTempRet0() | 0);
 $3098 = $3096 ^ $3012;
 $3099 = $3097 ^ $3013;
 $3100 = (_bitshift64Lshr(($3098|0),($3099|0),24)|0);
 $3101 = (getTempRet0() | 0);
 $3102 = (_bitshift64Shl(($3098|0),($3099|0),40)|0);
 $3103 = (getTempRet0() | 0);
 $3104 = $3100 | $3102;
 $3105 = $3101 | $3103;
 $3106 = (_i64Add(($3092|0),($3093|0),($88|0),($91|0))|0);
 $3107 = (getTempRet0() | 0);
 $3108 = (_i64Add(($3106|0),($3107|0),($3104|0),($3105|0))|0);
 $3109 = (getTempRet0() | 0);
 $3110 = $3108 ^ $3095;
 $3111 = $3109 ^ $3094;
 $3112 = (_bitshift64Lshr(($3110|0),($3111|0),16)|0);
 $3113 = (getTempRet0() | 0);
 $3114 = (_bitshift64Shl(($3110|0),($3111|0),48)|0);
 $3115 = (getTempRet0() | 0);
 $3116 = $3112 | $3114;
 $3117 = $3113 | $3115;
 $3118 = (_i64Add(($3116|0),($3117|0),($3096|0),($3097|0))|0);
 $3119 = (getTempRet0() | 0);
 $3120 = $3118 ^ $3104;
 $3121 = $3119 ^ $3105;
 $3122 = (_bitshift64Lshr(($3120|0),($3121|0),63)|0);
 $3123 = (getTempRet0() | 0);
 $3124 = (_bitshift64Shl(($3120|0),($3121|0),1)|0);
 $3125 = (getTempRet0() | 0);
 $3126 = $3122 | $3124;
 $3127 = $3123 | $3125;
 $3128 = (_i64Add(($2994|0),($2995|0),($22|0),($25|0))|0);
 $3129 = (getTempRet0() | 0);
 $3130 = (_i64Add(($3128|0),($3129|0),($3050|0),($3051|0))|0);
 $3131 = (getTempRet0() | 0);
 $3132 = $3130 ^ $2964;
 $3133 = $3131 ^ $2965;
 $3134 = (_i64Add(($3133|0),($3132|0),($2928|0),($2929|0))|0);
 $3135 = (getTempRet0() | 0);
 $3136 = $3134 ^ $3050;
 $3137 = $3135 ^ $3051;
 $3138 = (_bitshift64Lshr(($3136|0),($3137|0),24)|0);
 $3139 = (getTempRet0() | 0);
 $3140 = (_bitshift64Shl(($3136|0),($3137|0),40)|0);
 $3141 = (getTempRet0() | 0);
 $3142 = $3138 | $3140;
 $3143 = $3139 | $3141;
 $3144 = (_i64Add(($3130|0),($3131|0),($76|0),($79|0))|0);
 $3145 = (getTempRet0() | 0);
 $3146 = (_i64Add(($3144|0),($3145|0),($3142|0),($3143|0))|0);
 $3147 = (getTempRet0() | 0);
 $3148 = $3146 ^ $3133;
 $3149 = $3147 ^ $3132;
 $3150 = (_bitshift64Lshr(($3148|0),($3149|0),16)|0);
 $3151 = (getTempRet0() | 0);
 $3152 = (_bitshift64Shl(($3148|0),($3149|0),48)|0);
 $3153 = (getTempRet0() | 0);
 $3154 = $3150 | $3152;
 $3155 = $3151 | $3153;
 $3156 = (_i64Add(($3154|0),($3155|0),($3134|0),($3135|0))|0);
 $3157 = (getTempRet0() | 0);
 $3158 = $3156 ^ $3142;
 $3159 = $3157 ^ $3143;
 $3160 = (_bitshift64Lshr(($3158|0),($3159|0),63)|0);
 $3161 = (getTempRet0() | 0);
 $3162 = (_bitshift64Shl(($3158|0),($3159|0),1)|0);
 $3163 = (getTempRet0() | 0);
 $3164 = $3160 | $3162;
 $3165 = $3161 | $3163;
 $3166 = (_i64Add(($3032|0),($3033|0),($82|0),($85|0))|0);
 $3167 = (getTempRet0() | 0);
 $3168 = (_i64Add(($3166|0),($3167|0),($2936|0),($2937|0))|0);
 $3169 = (getTempRet0() | 0);
 $3170 = $3168 ^ $3002;
 $3171 = $3169 ^ $3003;
 $3172 = (_i64Add(($3171|0),($3170|0),($2966|0),($2967|0))|0);
 $3173 = (getTempRet0() | 0);
 $3174 = $3172 ^ $2936;
 $3175 = $3173 ^ $2937;
 $3176 = (_bitshift64Lshr(($3174|0),($3175|0),24)|0);
 $3177 = (getTempRet0() | 0);
 $3178 = (_bitshift64Shl(($3174|0),($3175|0),40)|0);
 $3179 = (getTempRet0() | 0);
 $3180 = $3176 | $3178;
 $3181 = $3177 | $3179;
 $3182 = (_i64Add(($3168|0),($3169|0),($4|0),($7|0))|0);
 $3183 = (getTempRet0() | 0);
 $3184 = (_i64Add(($3182|0),($3183|0),($3180|0),($3181|0))|0);
 $3185 = (getTempRet0() | 0);
 $3186 = $3184 ^ $3171;
 $3187 = $3185 ^ $3170;
 $3188 = (_bitshift64Lshr(($3186|0),($3187|0),16)|0);
 $3189 = (getTempRet0() | 0);
 $3190 = (_bitshift64Shl(($3186|0),($3187|0),48)|0);
 $3191 = (getTempRet0() | 0);
 $3192 = $3188 | $3190;
 $3193 = $3189 | $3191;
 $3194 = (_i64Add(($3192|0),($3193|0),($3172|0),($3173|0))|0);
 $3195 = (getTempRet0() | 0);
 $3196 = $3194 ^ $3180;
 $3197 = $3195 ^ $3181;
 $3198 = (_bitshift64Lshr(($3196|0),($3197|0),63)|0);
 $3199 = (getTempRet0() | 0);
 $3200 = (_bitshift64Shl(($3196|0),($3197|0),1)|0);
 $3201 = (getTempRet0() | 0);
 $3202 = $3198 | $3200;
 $3203 = $3199 | $3201;
 $3204 = (_i64Add(($3070|0),($3071|0),($4|0),($7|0))|0);
 $3205 = (getTempRet0() | 0);
 $3206 = (_i64Add(($3204|0),($3205|0),($3202|0),($3203|0))|0);
 $3207 = (getTempRet0() | 0);
 $3208 = $3206 ^ $3116;
 $3209 = $3207 ^ $3117;
 $3210 = (_i64Add(($3209|0),($3208|0),($3156|0),($3157|0))|0);
 $3211 = (getTempRet0() | 0);
 $3212 = $3210 ^ $3202;
 $3213 = $3211 ^ $3203;
 $3214 = (_bitshift64Lshr(($3212|0),($3213|0),24)|0);
 $3215 = (getTempRet0() | 0);
 $3216 = (_bitshift64Shl(($3212|0),($3213|0),40)|0);
 $3217 = (getTempRet0() | 0);
 $3218 = $3214 | $3216;
 $3219 = $3215 | $3217;
 $3220 = (_i64Add(($3206|0),($3207|0),($10|0),($13|0))|0);
 $3221 = (getTempRet0() | 0);
 $3222 = (_i64Add(($3220|0),($3221|0),($3218|0),($3219|0))|0);
 $3223 = (getTempRet0() | 0);
 $3224 = $3222 ^ $3209;
 $3225 = $3223 ^ $3208;
 $3226 = (_bitshift64Lshr(($3224|0),($3225|0),16)|0);
 $3227 = (getTempRet0() | 0);
 $3228 = (_bitshift64Shl(($3224|0),($3225|0),48)|0);
 $3229 = (getTempRet0() | 0);
 $3230 = $3226 | $3228;
 $3231 = $3227 | $3229;
 $3232 = (_i64Add(($3230|0),($3231|0),($3210|0),($3211|0))|0);
 $3233 = (getTempRet0() | 0);
 $3234 = $3232 ^ $3218;
 $3235 = $3233 ^ $3219;
 $3236 = (_bitshift64Lshr(($3234|0),($3235|0),63)|0);
 $3237 = (getTempRet0() | 0);
 $3238 = (_bitshift64Shl(($3234|0),($3235|0),1)|0);
 $3239 = (getTempRet0() | 0);
 $3240 = $3236 | $3238;
 $3241 = $3237 | $3239;
 $3242 = (_i64Add(($3108|0),($3109|0),($16|0),($19|0))|0);
 $3243 = (getTempRet0() | 0);
 $3244 = (_i64Add(($3242|0),($3243|0),($3088|0),($3089|0))|0);
 $3245 = (getTempRet0() | 0);
 $3246 = $3244 ^ $3154;
 $3247 = $3245 ^ $3155;
 $3248 = (_i64Add(($3247|0),($3246|0),($3194|0),($3195|0))|0);
 $3249 = (getTempRet0() | 0);
 $3250 = $3248 ^ $3088;
 $3251 = $3249 ^ $3089;
 $3252 = (_bitshift64Lshr(($3250|0),($3251|0),24)|0);
 $3253 = (getTempRet0() | 0);
 $3254 = (_bitshift64Shl(($3250|0),($3251|0),40)|0);
 $3255 = (getTempRet0() | 0);
 $3256 = $3252 | $3254;
 $3257 = $3253 | $3255;
 $3258 = (_i64Add(($3244|0),($3245|0),($22|0),($25|0))|0);
 $3259 = (getTempRet0() | 0);
 $3260 = (_i64Add(($3258|0),($3259|0),($3256|0),($3257|0))|0);
 $3261 = (getTempRet0() | 0);
 $3262 = $3260 ^ $3247;
 $3263 = $3261 ^ $3246;
 $3264 = (_bitshift64Lshr(($3262|0),($3263|0),16)|0);
 $3265 = (getTempRet0() | 0);
 $3266 = (_bitshift64Shl(($3262|0),($3263|0),48)|0);
 $3267 = (getTempRet0() | 0);
 $3268 = $3264 | $3266;
 $3269 = $3265 | $3267;
 $3270 = (_i64Add(($3268|0),($3269|0),($3248|0),($3249|0))|0);
 $3271 = (getTempRet0() | 0);
 $3272 = $3270 ^ $3256;
 $3273 = $3271 ^ $3257;
 $3274 = (_bitshift64Lshr(($3272|0),($3273|0),63)|0);
 $3275 = (getTempRet0() | 0);
 $3276 = (_bitshift64Shl(($3272|0),($3273|0),1)|0);
 $3277 = (getTempRet0() | 0);
 $3278 = $3274 | $3276;
 $3279 = $3275 | $3277;
 $3280 = (_i64Add(($3146|0),($3147|0),($28|0),($31|0))|0);
 $3281 = (getTempRet0() | 0);
 $3282 = (_i64Add(($3280|0),($3281|0),($3126|0),($3127|0))|0);
 $3283 = (getTempRet0() | 0);
 $3284 = $3282 ^ $3192;
 $3285 = $3283 ^ $3193;
 $3286 = (_i64Add(($3285|0),($3284|0),($3080|0),($3081|0))|0);
 $3287 = (getTempRet0() | 0);
 $3288 = $3286 ^ $3126;
 $3289 = $3287 ^ $3127;
 $3290 = (_bitshift64Lshr(($3288|0),($3289|0),24)|0);
 $3291 = (getTempRet0() | 0);
 $3292 = (_bitshift64Shl(($3288|0),($3289|0),40)|0);
 $3293 = (getTempRet0() | 0);
 $3294 = $3290 | $3292;
 $3295 = $3291 | $3293;
 $3296 = (_i64Add(($3282|0),($3283|0),($34|0),($37|0))|0);
 $3297 = (getTempRet0() | 0);
 $3298 = (_i64Add(($3296|0),($3297|0),($3294|0),($3295|0))|0);
 $3299 = (getTempRet0() | 0);
 $3300 = $3298 ^ $3285;
 $3301 = $3299 ^ $3284;
 $3302 = (_bitshift64Lshr(($3300|0),($3301|0),16)|0);
 $3303 = (getTempRet0() | 0);
 $3304 = (_bitshift64Shl(($3300|0),($3301|0),48)|0);
 $3305 = (getTempRet0() | 0);
 $3306 = $3302 | $3304;
 $3307 = $3303 | $3305;
 $3308 = (_i64Add(($3306|0),($3307|0),($3286|0),($3287|0))|0);
 $3309 = (getTempRet0() | 0);
 $3310 = $3308 ^ $3294;
 $3311 = $3309 ^ $3295;
 $3312 = (_bitshift64Lshr(($3310|0),($3311|0),63)|0);
 $3313 = (getTempRet0() | 0);
 $3314 = (_bitshift64Shl(($3310|0),($3311|0),1)|0);
 $3315 = (getTempRet0() | 0);
 $3316 = $3312 | $3314;
 $3317 = $3313 | $3315;
 $3318 = (_i64Add(($3184|0),($3185|0),($40|0),($43|0))|0);
 $3319 = (getTempRet0() | 0);
 $3320 = (_i64Add(($3318|0),($3319|0),($3164|0),($3165|0))|0);
 $3321 = (getTempRet0() | 0);
 $3322 = $3320 ^ $3078;
 $3323 = $3321 ^ $3079;
 $3324 = (_i64Add(($3323|0),($3322|0),($3118|0),($3119|0))|0);
 $3325 = (getTempRet0() | 0);
 $3326 = $3324 ^ $3164;
 $3327 = $3325 ^ $3165;
 $3328 = (_bitshift64Lshr(($3326|0),($3327|0),24)|0);
 $3329 = (getTempRet0() | 0);
 $3330 = (_bitshift64Shl(($3326|0),($3327|0),40)|0);
 $3331 = (getTempRet0() | 0);
 $3332 = $3328 | $3330;
 $3333 = $3329 | $3331;
 $3334 = (_i64Add(($3320|0),($3321|0),($46|0),($49|0))|0);
 $3335 = (getTempRet0() | 0);
 $3336 = (_i64Add(($3334|0),($3335|0),($3332|0),($3333|0))|0);
 $3337 = (getTempRet0() | 0);
 $3338 = $3336 ^ $3323;
 $3339 = $3337 ^ $3322;
 $3340 = (_bitshift64Lshr(($3338|0),($3339|0),16)|0);
 $3341 = (getTempRet0() | 0);
 $3342 = (_bitshift64Shl(($3338|0),($3339|0),48)|0);
 $3343 = (getTempRet0() | 0);
 $3344 = $3340 | $3342;
 $3345 = $3341 | $3343;
 $3346 = (_i64Add(($3344|0),($3345|0),($3324|0),($3325|0))|0);
 $3347 = (getTempRet0() | 0);
 $3348 = $3346 ^ $3332;
 $3349 = $3347 ^ $3333;
 $3350 = (_bitshift64Lshr(($3348|0),($3349|0),63)|0);
 $3351 = (getTempRet0() | 0);
 $3352 = (_bitshift64Shl(($3348|0),($3349|0),1)|0);
 $3353 = (getTempRet0() | 0);
 $3354 = $3350 | $3352;
 $3355 = $3351 | $3353;
 $3356 = (_i64Add(($3222|0),($3223|0),($52|0),($55|0))|0);
 $3357 = (getTempRet0() | 0);
 $3358 = (_i64Add(($3356|0),($3357|0),($3278|0),($3279|0))|0);
 $3359 = (getTempRet0() | 0);
 $3360 = $3358 ^ $3344;
 $3361 = $3359 ^ $3345;
 $3362 = (_i64Add(($3361|0),($3360|0),($3308|0),($3309|0))|0);
 $3363 = (getTempRet0() | 0);
 $3364 = $3362 ^ $3278;
 $3365 = $3363 ^ $3279;
 $3366 = (_bitshift64Lshr(($3364|0),($3365|0),24)|0);
 $3367 = (getTempRet0() | 0);
 $3368 = (_bitshift64Shl(($3364|0),($3365|0),40)|0);
 $3369 = (getTempRet0() | 0);
 $3370 = $3366 | $3368;
 $3371 = $3367 | $3369;
 $3372 = (_i64Add(($3358|0),($3359|0),($58|0),($61|0))|0);
 $3373 = (getTempRet0() | 0);
 $3374 = (_i64Add(($3372|0),($3373|0),($3370|0),($3371|0))|0);
 $3375 = (getTempRet0() | 0);
 $3376 = $3374 ^ $3361;
 $3377 = $3375 ^ $3360;
 $3378 = (_bitshift64Lshr(($3376|0),($3377|0),16)|0);
 $3379 = (getTempRet0() | 0);
 $3380 = (_bitshift64Shl(($3376|0),($3377|0),48)|0);
 $3381 = (getTempRet0() | 0);
 $3382 = $3378 | $3380;
 $3383 = $3379 | $3381;
 $3384 = (_i64Add(($3382|0),($3383|0),($3362|0),($3363|0))|0);
 $3385 = (getTempRet0() | 0);
 $3386 = $3384 ^ $3370;
 $3387 = $3385 ^ $3371;
 $3388 = (_bitshift64Lshr(($3386|0),($3387|0),63)|0);
 $3389 = (getTempRet0() | 0);
 $3390 = (_bitshift64Shl(($3386|0),($3387|0),1)|0);
 $3391 = (getTempRet0() | 0);
 $3392 = $3388 | $3390;
 $3393 = $3389 | $3391;
 $3394 = (_i64Add(($3260|0),($3261|0),($64|0),($67|0))|0);
 $3395 = (getTempRet0() | 0);
 $3396 = (_i64Add(($3394|0),($3395|0),($3316|0),($3317|0))|0);
 $3397 = (getTempRet0() | 0);
 $3398 = $3396 ^ $3230;
 $3399 = $3397 ^ $3231;
 $3400 = (_i64Add(($3399|0),($3398|0),($3346|0),($3347|0))|0);
 $3401 = (getTempRet0() | 0);
 $3402 = $3400 ^ $3316;
 $3403 = $3401 ^ $3317;
 $3404 = (_bitshift64Lshr(($3402|0),($3403|0),24)|0);
 $3405 = (getTempRet0() | 0);
 $3406 = (_bitshift64Shl(($3402|0),($3403|0),40)|0);
 $3407 = (getTempRet0() | 0);
 $3408 = $3404 | $3406;
 $3409 = $3405 | $3407;
 $3410 = (_i64Add(($3396|0),($3397|0),($70|0),($73|0))|0);
 $3411 = (getTempRet0() | 0);
 $3412 = (_i64Add(($3410|0),($3411|0),($3408|0),($3409|0))|0);
 $3413 = (getTempRet0() | 0);
 $3414 = $3412 ^ $3399;
 $3415 = $3413 ^ $3398;
 $3416 = (_bitshift64Lshr(($3414|0),($3415|0),16)|0);
 $3417 = (getTempRet0() | 0);
 $3418 = (_bitshift64Shl(($3414|0),($3415|0),48)|0);
 $3419 = (getTempRet0() | 0);
 $3420 = $3416 | $3418;
 $3421 = $3417 | $3419;
 $3422 = (_i64Add(($3420|0),($3421|0),($3400|0),($3401|0))|0);
 $3423 = (getTempRet0() | 0);
 $3424 = $3422 ^ $3408;
 $3425 = $3423 ^ $3409;
 $3426 = (_bitshift64Lshr(($3424|0),($3425|0),63)|0);
 $3427 = (getTempRet0() | 0);
 $3428 = (_bitshift64Shl(($3424|0),($3425|0),1)|0);
 $3429 = (getTempRet0() | 0);
 $3430 = $3426 | $3428;
 $3431 = $3427 | $3429;
 $3432 = (_i64Add(($3298|0),($3299|0),($76|0),($79|0))|0);
 $3433 = (getTempRet0() | 0);
 $3434 = (_i64Add(($3432|0),($3433|0),($3354|0),($3355|0))|0);
 $3435 = (getTempRet0() | 0);
 $3436 = $3434 ^ $3268;
 $3437 = $3435 ^ $3269;
 $3438 = (_i64Add(($3437|0),($3436|0),($3232|0),($3233|0))|0);
 $3439 = (getTempRet0() | 0);
 $3440 = $3438 ^ $3354;
 $3441 = $3439 ^ $3355;
 $3442 = (_bitshift64Lshr(($3440|0),($3441|0),24)|0);
 $3443 = (getTempRet0() | 0);
 $3444 = (_bitshift64Shl(($3440|0),($3441|0),40)|0);
 $3445 = (getTempRet0() | 0);
 $3446 = $3442 | $3444;
 $3447 = $3443 | $3445;
 $3448 = (_i64Add(($3434|0),($3435|0),($82|0),($85|0))|0);
 $3449 = (getTempRet0() | 0);
 $3450 = (_i64Add(($3448|0),($3449|0),($3446|0),($3447|0))|0);
 $3451 = (getTempRet0() | 0);
 $3452 = $3450 ^ $3437;
 $3453 = $3451 ^ $3436;
 $3454 = (_bitshift64Lshr(($3452|0),($3453|0),16)|0);
 $3455 = (getTempRet0() | 0);
 $3456 = (_bitshift64Shl(($3452|0),($3453|0),48)|0);
 $3457 = (getTempRet0() | 0);
 $3458 = $3454 | $3456;
 $3459 = $3455 | $3457;
 $3460 = (_i64Add(($3458|0),($3459|0),($3438|0),($3439|0))|0);
 $3461 = (getTempRet0() | 0);
 $3462 = $3460 ^ $3446;
 $3463 = $3461 ^ $3447;
 $3464 = (_bitshift64Lshr(($3462|0),($3463|0),63)|0);
 $3465 = (getTempRet0() | 0);
 $3466 = (_bitshift64Shl(($3462|0),($3463|0),1)|0);
 $3467 = (getTempRet0() | 0);
 $3468 = $3464 | $3466;
 $3469 = $3465 | $3467;
 $3470 = (_i64Add(($3336|0),($3337|0),($88|0),($91|0))|0);
 $3471 = (getTempRet0() | 0);
 $3472 = (_i64Add(($3470|0),($3471|0),($3240|0),($3241|0))|0);
 $3473 = (getTempRet0() | 0);
 $3474 = $3472 ^ $3306;
 $3475 = $3473 ^ $3307;
 $3476 = (_i64Add(($3475|0),($3474|0),($3270|0),($3271|0))|0);
 $3477 = (getTempRet0() | 0);
 $3478 = $3476 ^ $3240;
 $3479 = $3477 ^ $3241;
 $3480 = (_bitshift64Lshr(($3478|0),($3479|0),24)|0);
 $3481 = (getTempRet0() | 0);
 $3482 = (_bitshift64Shl(($3478|0),($3479|0),40)|0);
 $3483 = (getTempRet0() | 0);
 $3484 = $3480 | $3482;
 $3485 = $3481 | $3483;
 $3486 = (_i64Add(($3472|0),($3473|0),($94|0),($97|0))|0);
 $3487 = (getTempRet0() | 0);
 $3488 = (_i64Add(($3486|0),($3487|0),($3484|0),($3485|0))|0);
 $3489 = (getTempRet0() | 0);
 $3490 = $3488 ^ $3475;
 $3491 = $3489 ^ $3474;
 $3492 = (_bitshift64Lshr(($3490|0),($3491|0),16)|0);
 $3493 = (getTempRet0() | 0);
 $3494 = (_bitshift64Shl(($3490|0),($3491|0),48)|0);
 $3495 = (getTempRet0() | 0);
 $3496 = $3492 | $3494;
 $3497 = $3493 | $3495;
 $3498 = (_i64Add(($3496|0),($3497|0),($3476|0),($3477|0))|0);
 $3499 = (getTempRet0() | 0);
 $3500 = $3498 ^ $3484;
 $3501 = $3499 ^ $3485;
 $3502 = (_bitshift64Lshr(($3500|0),($3501|0),63)|0);
 $3503 = (getTempRet0() | 0);
 $3504 = (_bitshift64Shl(($3500|0),($3501|0),1)|0);
 $3505 = (getTempRet0() | 0);
 $3506 = $3502 | $3504;
 $3507 = $3503 | $3505;
 $3508 = (_i64Add(($3374|0),($3375|0),($88|0),($91|0))|0);
 $3509 = (getTempRet0() | 0);
 $3510 = (_i64Add(($3508|0),($3509|0),($3506|0),($3507|0))|0);
 $3511 = (getTempRet0() | 0);
 $3512 = $3510 ^ $3420;
 $3513 = $3511 ^ $3421;
 $3514 = (_i64Add(($3513|0),($3512|0),($3460|0),($3461|0))|0);
 $3515 = (getTempRet0() | 0);
 $3516 = $3514 ^ $3506;
 $3517 = $3515 ^ $3507;
 $3518 = (_bitshift64Lshr(($3516|0),($3517|0),24)|0);
 $3519 = (getTempRet0() | 0);
 $3520 = (_bitshift64Shl(($3516|0),($3517|0),40)|0);
 $3521 = (getTempRet0() | 0);
 $3522 = $3518 | $3520;
 $3523 = $3519 | $3521;
 $3524 = (_i64Add(($3510|0),($3511|0),($64|0),($67|0))|0);
 $3525 = (getTempRet0() | 0);
 $3526 = (_i64Add(($3524|0),($3525|0),($3522|0),($3523|0))|0);
 $3527 = (getTempRet0() | 0);
 $3528 = $3526 ^ $3513;
 $3529 = $3527 ^ $3512;
 $3530 = (_bitshift64Lshr(($3528|0),($3529|0),16)|0);
 $3531 = (getTempRet0() | 0);
 $3532 = (_bitshift64Shl(($3528|0),($3529|0),48)|0);
 $3533 = (getTempRet0() | 0);
 $3534 = $3530 | $3532;
 $3535 = $3531 | $3533;
 $3536 = (_i64Add(($3534|0),($3535|0),($3514|0),($3515|0))|0);
 $3537 = (getTempRet0() | 0);
 $3538 = $3536 ^ $3522;
 $3539 = $3537 ^ $3523;
 $3540 = (_bitshift64Lshr(($3538|0),($3539|0),63)|0);
 $3541 = (getTempRet0() | 0);
 $3542 = (_bitshift64Shl(($3538|0),($3539|0),1)|0);
 $3543 = (getTempRet0() | 0);
 $3544 = $3540 | $3542;
 $3545 = $3541 | $3543;
 $3546 = (_i64Add(($3412|0),($3413|0),($28|0),($31|0))|0);
 $3547 = (getTempRet0() | 0);
 $3548 = (_i64Add(($3546|0),($3547|0),($3392|0),($3393|0))|0);
 $3549 = (getTempRet0() | 0);
 $3550 = $3548 ^ $3458;
 $3551 = $3549 ^ $3459;
 $3552 = (_i64Add(($3551|0),($3550|0),($3498|0),($3499|0))|0);
 $3553 = (getTempRet0() | 0);
 $3554 = $3552 ^ $3392;
 $3555 = $3553 ^ $3393;
 $3556 = (_bitshift64Lshr(($3554|0),($3555|0),24)|0);
 $3557 = (getTempRet0() | 0);
 $3558 = (_bitshift64Shl(($3554|0),($3555|0),40)|0);
 $3559 = (getTempRet0() | 0);
 $3560 = $3556 | $3558;
 $3561 = $3557 | $3559;
 $3562 = (_i64Add(($3548|0),($3549|0),($52|0),($55|0))|0);
 $3563 = (getTempRet0() | 0);
 $3564 = (_i64Add(($3562|0),($3563|0),($3560|0),($3561|0))|0);
 $3565 = (getTempRet0() | 0);
 $3566 = $3564 ^ $3551;
 $3567 = $3565 ^ $3550;
 $3568 = (_bitshift64Lshr(($3566|0),($3567|0),16)|0);
 $3569 = (getTempRet0() | 0);
 $3570 = (_bitshift64Shl(($3566|0),($3567|0),48)|0);
 $3571 = (getTempRet0() | 0);
 $3572 = $3568 | $3570;
 $3573 = $3569 | $3571;
 $3574 = (_i64Add(($3572|0),($3573|0),($3552|0),($3553|0))|0);
 $3575 = (getTempRet0() | 0);
 $3576 = $3574 ^ $3560;
 $3577 = $3575 ^ $3561;
 $3578 = (_bitshift64Lshr(($3576|0),($3577|0),63)|0);
 $3579 = (getTempRet0() | 0);
 $3580 = (_bitshift64Shl(($3576|0),($3577|0),1)|0);
 $3581 = (getTempRet0() | 0);
 $3582 = $3578 | $3580;
 $3583 = $3579 | $3581;
 $3584 = (_i64Add(($3450|0),($3451|0),($58|0),($61|0))|0);
 $3585 = (getTempRet0() | 0);
 $3586 = (_i64Add(($3584|0),($3585|0),($3430|0),($3431|0))|0);
 $3587 = (getTempRet0() | 0);
 $3588 = $3586 ^ $3496;
 $3589 = $3587 ^ $3497;
 $3590 = (_i64Add(($3589|0),($3588|0),($3384|0),($3385|0))|0);
 $3591 = (getTempRet0() | 0);
 $3592 = $3590 ^ $3430;
 $3593 = $3591 ^ $3431;
 $3594 = (_bitshift64Lshr(($3592|0),($3593|0),24)|0);
 $3595 = (getTempRet0() | 0);
 $3596 = (_bitshift64Shl(($3592|0),($3593|0),40)|0);
 $3597 = (getTempRet0() | 0);
 $3598 = $3594 | $3596;
 $3599 = $3595 | $3597;
 $3600 = (_i64Add(($3586|0),($3587|0),($94|0),($97|0))|0);
 $3601 = (getTempRet0() | 0);
 $3602 = (_i64Add(($3600|0),($3601|0),($3598|0),($3599|0))|0);
 $3603 = (getTempRet0() | 0);
 $3604 = $3602 ^ $3589;
 $3605 = $3603 ^ $3588;
 $3606 = (_bitshift64Lshr(($3604|0),($3605|0),16)|0);
 $3607 = (getTempRet0() | 0);
 $3608 = (_bitshift64Shl(($3604|0),($3605|0),48)|0);
 $3609 = (getTempRet0() | 0);
 $3610 = $3606 | $3608;
 $3611 = $3607 | $3609;
 $3612 = (_i64Add(($3610|0),($3611|0),($3590|0),($3591|0))|0);
 $3613 = (getTempRet0() | 0);
 $3614 = $3612 ^ $3598;
 $3615 = $3613 ^ $3599;
 $3616 = (_bitshift64Lshr(($3614|0),($3615|0),63)|0);
 $3617 = (getTempRet0() | 0);
 $3618 = (_bitshift64Shl(($3614|0),($3615|0),1)|0);
 $3619 = (getTempRet0() | 0);
 $3620 = $3616 | $3618;
 $3621 = $3617 | $3619;
 $3622 = (_i64Add(($3488|0),($3489|0),($82|0),($85|0))|0);
 $3623 = (getTempRet0() | 0);
 $3624 = (_i64Add(($3622|0),($3623|0),($3468|0),($3469|0))|0);
 $3625 = (getTempRet0() | 0);
 $3626 = $3624 ^ $3382;
 $3627 = $3625 ^ $3383;
 $3628 = (_i64Add(($3627|0),($3626|0),($3422|0),($3423|0))|0);
 $3629 = (getTempRet0() | 0);
 $3630 = $3628 ^ $3468;
 $3631 = $3629 ^ $3469;
 $3632 = (_bitshift64Lshr(($3630|0),($3631|0),24)|0);
 $3633 = (getTempRet0() | 0);
 $3634 = (_bitshift64Shl(($3630|0),($3631|0),40)|0);
 $3635 = (getTempRet0() | 0);
 $3636 = $3632 | $3634;
 $3637 = $3633 | $3635;
 $3638 = (_i64Add(($3624|0),($3625|0),($40|0),($43|0))|0);
 $3639 = (getTempRet0() | 0);
 $3640 = (_i64Add(($3638|0),($3639|0),($3636|0),($3637|0))|0);
 $3641 = (getTempRet0() | 0);
 $3642 = $3640 ^ $3627;
 $3643 = $3641 ^ $3626;
 $3644 = (_bitshift64Lshr(($3642|0),($3643|0),16)|0);
 $3645 = (getTempRet0() | 0);
 $3646 = (_bitshift64Shl(($3642|0),($3643|0),48)|0);
 $3647 = (getTempRet0() | 0);
 $3648 = $3644 | $3646;
 $3649 = $3645 | $3647;
 $3650 = (_i64Add(($3648|0),($3649|0),($3628|0),($3629|0))|0);
 $3651 = (getTempRet0() | 0);
 $3652 = $3650 ^ $3636;
 $3653 = $3651 ^ $3637;
 $3654 = (_bitshift64Lshr(($3652|0),($3653|0),63)|0);
 $3655 = (getTempRet0() | 0);
 $3656 = (_bitshift64Shl(($3652|0),($3653|0),1)|0);
 $3657 = (getTempRet0() | 0);
 $3658 = $3654 | $3656;
 $3659 = $3655 | $3657;
 $3660 = (_i64Add(($3526|0),($3527|0),($10|0),($13|0))|0);
 $3661 = (getTempRet0() | 0);
 $3662 = (_i64Add(($3660|0),($3661|0),($3582|0),($3583|0))|0);
 $3663 = (getTempRet0() | 0);
 $3664 = $3662 ^ $3648;
 $3665 = $3663 ^ $3649;
 $3666 = (_i64Add(($3665|0),($3664|0),($3612|0),($3613|0))|0);
 $3667 = (getTempRet0() | 0);
 $3668 = $3666 ^ $3582;
 $3669 = $3667 ^ $3583;
 $3670 = (_bitshift64Lshr(($3668|0),($3669|0),24)|0);
 $3671 = (getTempRet0() | 0);
 $3672 = (_bitshift64Shl(($3668|0),($3669|0),40)|0);
 $3673 = (getTempRet0() | 0);
 $3674 = $3670 | $3672;
 $3675 = $3671 | $3673;
 $3676 = (_i64Add(($3662|0),($3663|0),($76|0),($79|0))|0);
 $3677 = (getTempRet0() | 0);
 $3678 = (_i64Add(($3676|0),($3677|0),($3674|0),($3675|0))|0);
 $3679 = (getTempRet0() | 0);
 $3680 = $3678 ^ $3665;
 $3681 = $3679 ^ $3664;
 $3682 = (_bitshift64Lshr(($3680|0),($3681|0),16)|0);
 $3683 = (getTempRet0() | 0);
 $3684 = (_bitshift64Shl(($3680|0),($3681|0),48)|0);
 $3685 = (getTempRet0() | 0);
 $3686 = $3682 | $3684;
 $3687 = $3683 | $3685;
 $3688 = (_i64Add(($3686|0),($3687|0),($3666|0),($3667|0))|0);
 $3689 = (getTempRet0() | 0);
 $3690 = $3688 ^ $3674;
 $3691 = $3689 ^ $3675;
 $3692 = (_bitshift64Lshr(($3690|0),($3691|0),63)|0);
 $3693 = (getTempRet0() | 0);
 $3694 = (_bitshift64Shl(($3690|0),($3691|0),1)|0);
 $3695 = (getTempRet0() | 0);
 $3696 = $3692 | $3694;
 $3697 = $3693 | $3695;
 $3698 = (_i64Add(($3564|0),($3565|0),($4|0),($7|0))|0);
 $3699 = (getTempRet0() | 0);
 $3700 = (_i64Add(($3698|0),($3699|0),($3620|0),($3621|0))|0);
 $3701 = (getTempRet0() | 0);
 $3702 = $3700 ^ $3534;
 $3703 = $3701 ^ $3535;
 $3704 = (_i64Add(($3703|0),($3702|0),($3650|0),($3651|0))|0);
 $3705 = (getTempRet0() | 0);
 $3706 = $3704 ^ $3620;
 $3707 = $3705 ^ $3621;
 $3708 = (_bitshift64Lshr(($3706|0),($3707|0),24)|0);
 $3709 = (getTempRet0() | 0);
 $3710 = (_bitshift64Shl(($3706|0),($3707|0),40)|0);
 $3711 = (getTempRet0() | 0);
 $3712 = $3708 | $3710;
 $3713 = $3709 | $3711;
 $3714 = (_i64Add(($3700|0),($3701|0),($16|0),($19|0))|0);
 $3715 = (getTempRet0() | 0);
 $3716 = (_i64Add(($3714|0),($3715|0),($3712|0),($3713|0))|0);
 $3717 = (getTempRet0() | 0);
 $3718 = $3716 ^ $3703;
 $3719 = $3717 ^ $3702;
 $3720 = (_bitshift64Lshr(($3718|0),($3719|0),16)|0);
 $3721 = (getTempRet0() | 0);
 $3722 = (_bitshift64Shl(($3718|0),($3719|0),48)|0);
 $3723 = (getTempRet0() | 0);
 $3724 = $3720 | $3722;
 $3725 = $3721 | $3723;
 $3726 = (_i64Add(($3724|0),($3725|0),($3704|0),($3705|0))|0);
 $3727 = (getTempRet0() | 0);
 $3728 = $3726 ^ $3712;
 $3729 = $3727 ^ $3713;
 $3730 = (_bitshift64Lshr(($3728|0),($3729|0),63)|0);
 $3731 = (getTempRet0() | 0);
 $3732 = (_bitshift64Shl(($3728|0),($3729|0),1)|0);
 $3733 = (getTempRet0() | 0);
 $3734 = $3730 | $3732;
 $3735 = $3731 | $3733;
 $3736 = (_i64Add(($3602|0),($3603|0),($70|0),($73|0))|0);
 $3737 = (getTempRet0() | 0);
 $3738 = (_i64Add(($3736|0),($3737|0),($3658|0),($3659|0))|0);
 $3739 = (getTempRet0() | 0);
 $3740 = $3738 ^ $3572;
 $3741 = $3739 ^ $3573;
 $3742 = (_i64Add(($3741|0),($3740|0),($3536|0),($3537|0))|0);
 $3743 = (getTempRet0() | 0);
 $3744 = $3742 ^ $3658;
 $3745 = $3743 ^ $3659;
 $3746 = (_bitshift64Lshr(($3744|0),($3745|0),24)|0);
 $3747 = (getTempRet0() | 0);
 $3748 = (_bitshift64Shl(($3744|0),($3745|0),40)|0);
 $3749 = (getTempRet0() | 0);
 $3750 = $3746 | $3748;
 $3751 = $3747 | $3749;
 $3752 = (_i64Add(($3738|0),($3739|0),($46|0),($49|0))|0);
 $3753 = (getTempRet0() | 0);
 $3754 = (_i64Add(($3752|0),($3753|0),($3750|0),($3751|0))|0);
 $3755 = (getTempRet0() | 0);
 $3756 = $3754 ^ $3741;
 $3757 = $3755 ^ $3740;
 $3758 = (_bitshift64Lshr(($3756|0),($3757|0),16)|0);
 $3759 = (getTempRet0() | 0);
 $3760 = (_bitshift64Shl(($3756|0),($3757|0),48)|0);
 $3761 = (getTempRet0() | 0);
 $3762 = $3758 | $3760;
 $3763 = $3759 | $3761;
 $3764 = (_i64Add(($3762|0),($3763|0),($3742|0),($3743|0))|0);
 $3765 = (getTempRet0() | 0);
 $3766 = $3764 ^ $3750;
 $3767 = $3765 ^ $3751;
 $3768 = (_bitshift64Lshr(($3766|0),($3767|0),63)|0);
 $3769 = (getTempRet0() | 0);
 $3770 = (_bitshift64Shl(($3766|0),($3767|0),1)|0);
 $3771 = (getTempRet0() | 0);
 $3772 = $3768 | $3770;
 $3773 = $3769 | $3771;
 $3774 = (_i64Add(($3640|0),($3641|0),($34|0),($37|0))|0);
 $3775 = (getTempRet0() | 0);
 $3776 = (_i64Add(($3774|0),($3775|0),($3544|0),($3545|0))|0);
 $3777 = (getTempRet0() | 0);
 $3778 = $3776 ^ $3610;
 $3779 = $3777 ^ $3611;
 $3780 = (_i64Add(($3779|0),($3778|0),($3574|0),($3575|0))|0);
 $3781 = (getTempRet0() | 0);
 $3782 = $3780 ^ $3544;
 $3783 = $3781 ^ $3545;
 $3784 = (_bitshift64Lshr(($3782|0),($3783|0),24)|0);
 $3785 = (getTempRet0() | 0);
 $3786 = (_bitshift64Shl(($3782|0),($3783|0),40)|0);
 $3787 = (getTempRet0() | 0);
 $3788 = $3784 | $3786;
 $3789 = $3785 | $3787;
 $3790 = (_i64Add(($3776|0),($3777|0),($22|0),($25|0))|0);
 $3791 = (getTempRet0() | 0);
 $3792 = (_i64Add(($3790|0),($3791|0),($3788|0),($3789|0))|0);
 $3793 = (getTempRet0() | 0);
 $3794 = $3792 ^ $3779;
 $3795 = $3793 ^ $3778;
 $3796 = (_bitshift64Lshr(($3794|0),($3795|0),16)|0);
 $3797 = (getTempRet0() | 0);
 $3798 = (_bitshift64Shl(($3794|0),($3795|0),48)|0);
 $3799 = (getTempRet0() | 0);
 $3800 = $3796 | $3798;
 $3801 = $3797 | $3799;
 $3802 = (_i64Add(($3800|0),($3801|0),($3780|0),($3781|0))|0);
 $3803 = (getTempRet0() | 0);
 $3804 = $3802 ^ $3788;
 $3805 = $3803 ^ $3789;
 $3806 = (_bitshift64Lshr(($3804|0),($3805|0),63)|0);
 $3807 = (getTempRet0() | 0);
 $3808 = (_bitshift64Shl(($3804|0),($3805|0),1)|0);
 $3809 = (getTempRet0() | 0);
 $3810 = $3806 | $3808;
 $3811 = $3807 | $3809;
 $3812 = $3678 ^ $100;
 $3813 = $3679 ^ $103;
 $3814 = $3812 ^ $3764;
 $3815 = $3813 ^ $3765;
 $3816 = $S;
 $3817 = $3816;
 HEAP32[$3817>>2] = $3814;
 $3818 = (($3816) + 4)|0;
 $3819 = $3818;
 HEAP32[$3819>>2] = $3815;
 $3820 = $3716 ^ $106;
 $3821 = $3717 ^ $109;
 $3822 = $3820 ^ $3802;
 $3823 = $3821 ^ $3803;
 $3824 = $arrayidx49;
 $3825 = $3824;
 HEAP32[$3825>>2] = $3822;
 $3826 = (($3824) + 4)|0;
 $3827 = $3826;
 HEAP32[$3827>>2] = $3823;
 $3828 = $3754 ^ $112;
 $3829 = $3755 ^ $115;
 $3830 = $3828 ^ $3688;
 $3831 = $3829 ^ $3689;
 $3832 = $arrayidx52;
 $3833 = $3832;
 HEAP32[$3833>>2] = $3830;
 $3834 = (($3832) + 4)|0;
 $3835 = $3834;
 HEAP32[$3835>>2] = $3831;
 $3836 = $3792 ^ $118;
 $3837 = $3793 ^ $121;
 $3838 = $3836 ^ $3726;
 $3839 = $3837 ^ $3727;
 $3840 = $arrayidx55;
 $3841 = $3840;
 HEAP32[$3841>>2] = $3838;
 $3842 = (($3840) + 4)|0;
 $3843 = $3842;
 HEAP32[$3843>>2] = $3839;
 $3844 = $3724 ^ $124;
 $3845 = $3725 ^ $127;
 $3846 = $3844 ^ $3810;
 $3847 = $3845 ^ $3811;
 $3848 = $arrayidx58;
 $3849 = $3848;
 HEAP32[$3849>>2] = $3846;
 $3850 = (($3848) + 4)|0;
 $3851 = $3850;
 HEAP32[$3851>>2] = $3847;
 $3852 = $3762 ^ $130;
 $3853 = $3763 ^ $133;
 $3854 = $3852 ^ $3696;
 $3855 = $3853 ^ $3697;
 $3856 = $arrayidx61;
 $3857 = $3856;
 HEAP32[$3857>>2] = $3854;
 $3858 = (($3856) + 4)|0;
 $3859 = $3858;
 HEAP32[$3859>>2] = $3855;
 $3860 = $3800 ^ $136;
 $3861 = $3801 ^ $139;
 $3862 = $3860 ^ $3734;
 $3863 = $3861 ^ $3735;
 $3864 = $arrayidx64;
 $3865 = $3864;
 HEAP32[$3865>>2] = $3862;
 $3866 = (($3864) + 4)|0;
 $3867 = $3866;
 HEAP32[$3867>>2] = $3863;
 $3868 = $3686 ^ $142;
 $3869 = $3687 ^ $145;
 $3870 = $3868 ^ $3772;
 $3871 = $3869 ^ $3773;
 $3872 = $arrayidx67;
 $3873 = $3872;
 HEAP32[$3873>>2] = $3870;
 $3874 = (($3872) + 4)|0;
 $3875 = $3874;
 HEAP32[$3875>>2] = $3871;
 return;
}
function _blake2b_init($S,$outlen) {
 $S = $S|0;
 $outlen = $outlen|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx$i = 0, $buflen$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 dest=$S; src=41936; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $arrayidx$i = ((($S)) + 64|0);
 $buflen$i = ((($S)) + 208|0);
 HEAP32[$buflen$i>>2] = 0;
 ;HEAP32[$arrayidx$i>>2]=0|0;HEAP32[$arrayidx$i+4>>2]=0|0;HEAP32[$arrayidx$i+8>>2]=0|0;HEAP32[$arrayidx$i+12>>2]=0|0;
 $0 = $outlen | 16842752;
 $1 = $0 ^ -205731576;
 $2 = $S;
 $3 = $2;
 HEAP32[$3>>2] = $1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 1779033703;
 return;
}
function _blake2b_update($S,$in,$inlen) {
 $S = $S|0;
 $in = $in|0;
 $inlen = $inlen|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr7 = 0, $add12 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx10 = 0, $arrayidx5$i = 0, $buflen = 0;
 var $cmp = 0, $cmp5 = 0, $cmp533 = 0, $inlen$addr$035 = 0, $inlen$addr$1 = 0, $pin$034 = 0, $pin$1 = 0, $scevgep = 0, $sub = 0, $sub4 = 0, $sub6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $buflen = ((($S)) + 208|0);
 $0 = HEAP32[$buflen>>2]|0;
 $add = (($0) + ($inlen))|0;
 $cmp = ($add>>>0)>(128);
 if (!($cmp)) {
  $67 = $0;$inlen$addr$1 = $inlen;$pin$1 = $in;
  $arrayidx10 = (((($S)) + 80|0) + ($67)|0);
  _memcpy(($arrayidx10|0),($pin$1|0),($inlen$addr$1|0))|0;
  $68 = HEAP32[$buflen>>2]|0;
  $add12 = (($68) + ($inlen$addr$1))|0;
  HEAP32[$buflen>>2] = $add12;
  return;
 }
 $sub = (128 - ($0))|0;
 $arrayidx = (((($S)) + 80|0) + ($0)|0);
 _memcpy(($arrayidx|0),($in|0),($sub|0))|0;
 $arrayidx$i = ((($S)) + 64|0);
 $1 = $arrayidx$i;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (_i64Add(($3|0),($6|0),128,0)|0);
 $8 = (getTempRet0() | 0);
 $9 = $arrayidx$i;
 $10 = $9;
 HEAP32[$10>>2] = $7;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = ($6>>>0)>(4294967295);
 $14 = ($3>>>0)>(4294967167);
 $15 = ($6|0)==(-1);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $18 = $17&1;
 $arrayidx5$i = ((($S)) + 72|0);
 $19 = $arrayidx5$i;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_i64Add(($21|0),($24|0),($18|0),0)|0);
 $26 = (getTempRet0() | 0);
 $27 = $arrayidx5$i;
 $28 = $27;
 HEAP32[$28>>2] = $25;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $arraydecay = ((($S)) + 80|0);
 _blake2b_compress($S,$arraydecay,0,0);
 HEAP32[$buflen>>2] = 0;
 $sub4 = (($inlen) - ($sub))|0;
 $add$ptr = (($in) + ($sub)|0);
 $cmp533 = ($sub4>>>0)>(128);
 if (!($cmp533)) {
  $67 = 0;$inlen$addr$1 = $sub4;$pin$1 = $add$ptr;
  $arrayidx10 = (((($S)) + 80|0) + ($67)|0);
  _memcpy(($arrayidx10|0),($pin$1|0),($inlen$addr$1|0))|0;
  $68 = HEAP32[$buflen>>2]|0;
  $add12 = (($68) + ($inlen$addr$1))|0;
  HEAP32[$buflen>>2] = $add12;
  return;
 }
 $31 = (($add) + -257)|0;
 $32 = $31 & -128;
 $33 = (($32) + 256)|0;
 $34 = (($33) - ($0))|0;
 $inlen$addr$035 = $sub4;$pin$034 = $add$ptr;
 while(1) {
  $35 = $arrayidx$i;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = (_i64Add(($37|0),($40|0),128,0)|0);
  $42 = (getTempRet0() | 0);
  $43 = $arrayidx$i;
  $44 = $43;
  HEAP32[$44>>2] = $41;
  $45 = (($43) + 4)|0;
  $46 = $45;
  HEAP32[$46>>2] = $42;
  $47 = ($40>>>0)>(4294967295);
  $48 = ($37>>>0)>(4294967167);
  $49 = ($40|0)==(-1);
  $50 = $49 & $48;
  $51 = $47 | $50;
  $52 = $51&1;
  $53 = $arrayidx5$i;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($53) + 4)|0;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (_i64Add(($55|0),($58|0),($52|0),0)|0);
  $60 = (getTempRet0() | 0);
  $61 = $arrayidx5$i;
  $62 = $61;
  HEAP32[$62>>2] = $59;
  $63 = (($61) + 4)|0;
  $64 = $63;
  HEAP32[$64>>2] = $60;
  _blake2b_compress($S,$pin$034,0,0);
  $sub6 = (($inlen$addr$035) + -128)|0;
  $add$ptr7 = ((($pin$034)) + 128|0);
  $cmp5 = ($sub6>>>0)>(128);
  if ($cmp5) {
   $inlen$addr$035 = $sub6;$pin$034 = $add$ptr7;
  } else {
   break;
  }
 }
 $65 = (($add) + -256)|0;
 $66 = (($65) - ($32))|0;
 $scevgep = (($in) + ($34)|0);
 $$pre = HEAP32[$buflen>>2]|0;
 $67 = $$pre;$inlen$addr$1 = $66;$pin$1 = $scevgep;
 $arrayidx10 = (((($S)) + 80|0) + ($67)|0);
 _memcpy(($arrayidx10|0),($pin$1|0),($inlen$addr$1|0))|0;
 $68 = HEAP32[$buflen>>2]|0;
 $add12 = (($68) + ($inlen$addr$1))|0;
 HEAP32[$buflen>>2] = $add12;
 return;
}
function _blake2b_final($S,$out,$outlen) {
 $S = $S|0;
 $out = $out|0;
 $outlen = $outlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx5$i = 0, $buffer = 0, $buflen = 0, $sub = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $buffer = sp;
 dest=$buffer; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $buflen = ((($S)) + 208|0);
 $0 = HEAP32[$buflen>>2]|0;
 $arrayidx$i = ((($S)) + 64|0);
 $1 = $arrayidx$i;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (_i64Add(($3|0),($6|0),($0|0),0)|0);
 $8 = (getTempRet0() | 0);
 $9 = $arrayidx$i;
 $10 = $9;
 HEAP32[$10>>2] = $7;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = ($8>>>0)<(0);
 $14 = ($7>>>0)<($0>>>0);
 $15 = ($8|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $18 = $17&1;
 $arrayidx5$i = ((($S)) + 72|0);
 $19 = $arrayidx5$i;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_i64Add(($21|0),($24|0),($18|0),0)|0);
 $26 = (getTempRet0() | 0);
 $27 = $arrayidx5$i;
 $28 = $27;
 HEAP32[$28>>2] = $25;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $arrayidx = (((($S)) + 80|0) + ($0)|0);
 $sub = (128 - ($0))|0;
 _memset(($arrayidx|0),0,($sub|0))|0;
 $arraydecay = ((($S)) + 80|0);
 _blake2b_compress($S,$arraydecay,-1,-1);
 dest=$buffer; src=$S; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _memcpy(($out|0),($buffer|0),($outlen|0))|0;
 _clear_internal_memory($buffer,64);
 _clear_internal_memory($arraydecay,128);
 _clear_internal_memory($S,64);
 STACKTOP = sp;return;
}
function _blake2b_long($out,$outlen,$in,$inlen) {
 $out = $out|0;
 $outlen = $outlen|0;
 $in = $in|0;
 $inlen = $inlen|0;
 var $$pre = 0, $$pre$i144 = 0, $$pre$i58 = 0, $$pre264 = 0, $$pre265 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$i117 = 0, $add$i31 = 0, $add$ptr$i129 = 0, $add$ptr$i43 = 0;
 var $add$ptr7$i140 = 0, $add$ptr7$i54 = 0, $add12$i149 = 0, $add12$i63 = 0, $arrayidx$i$i18 = 0, $arrayidx$i$i78 = 0, $arrayidx$i$pre$phiZZ2D = 0, $arrayidx$i120 = 0, $arrayidx$i161 = 0, $arrayidx$i212 = 0, $arrayidx$i34 = 0, $arrayidx$i75 = 0, $arrayidx10$i = 0, $arrayidx10$i113 = 0, $arrayidx10$i148 = 0, $arrayidx10$i62 = 0, $arrayidx5$i$i125 = 0, $arrayidx5$i$i159$pre$phiZZZ2D = 0, $arrayidx5$i$i39 = 0, $arrayidx5$i$i73$pre$phiZZZ2D = 0;
 var $blake_state = 0, $buffer$i = 0, $buflen$i$i = 0, $buflen$i$i79 = 0, $cmp = 0, $cmp$i118 = 0, $cmp$i32 = 0, $cmp5 = 0, $cmp5$i141 = 0, $cmp5$i55 = 0, $cmp5258 = 0, $cmp533$i130 = 0, $cmp533$i44 = 0, $inlen$addr$035$i133 = 0, $inlen$addr$035$i47 = 0, $inlen$addr$1$i147 = 0, $inlen$addr$1$i61 = 0, $out_buffer = 0, $pin$034$i134 = 0, $pin$034$i48 = 0;
 var $pin$1$i146 = 0, $pin$1$i60 = 0, $pout$0 = 0, $pout$0$lcssa = 0, $pout$0257 = 0, $pout$0260 = 0, $scevgep = 0, $scevgep$i143 = 0, $scevgep$i57 = 0, $sub$i162 = 0, $sub$i76 = 0, $sub4$i128 = 0, $sub4$i42 = 0, $sub6$i139 = 0, $sub6$i53 = 0, $toproduce$0 = 0, $toproduce$0$lcssa = 0, $toproduce$0256 = 0, $toproduce$0259 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $buffer$i = sp + 64|0;
 $blake_state = sp + 128|0;
 $out_buffer = sp;
 $cmp = ($outlen>>>0)<(65);
 if ($cmp) {
  dest=$blake_state; src=41936; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $arrayidx$i$i18 = ((($blake_state)) + 64|0);
  $buflen$i$i = ((($blake_state)) + 208|0);
  ;HEAP32[$arrayidx$i$i18>>2]=0|0;HEAP32[$arrayidx$i$i18+4>>2]=0|0;HEAP32[$arrayidx$i$i18+8>>2]=0|0;HEAP32[$arrayidx$i$i18+12>>2]=0|0;
  $0 = $outlen | 16842752;
  $1 = $0 ^ -205731576;
  $2 = $blake_state;
  $3 = $2;
  HEAP32[$3>>2] = $1;
  $4 = (($2) + 4)|0;
  $5 = $4;
  HEAP32[$5>>2] = 1779033703;
  $arrayidx10$i = ((($blake_state)) + 80|0);
  HEAP32[$arrayidx10$i>>2] = $outlen;
  HEAP32[$buflen$i$i>>2] = 4;
  $add$i31 = (($inlen) + 4)|0;
  $cmp$i32 = ($add$i31>>>0)>(128);
  if ($cmp$i32) {
   $arrayidx$i34 = ((($blake_state)) + 84|0);
   dest=$arrayidx$i34; src=$in; stop=dest+124|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $6 = $arrayidx$i$i18;
   $7 = $6;
   HEAP32[$7>>2] = 128;
   $8 = (($6) + 4)|0;
   $9 = $8;
   HEAP32[$9>>2] = 0;
   $arrayidx5$i$i39 = ((($blake_state)) + 72|0);
   $10 = $arrayidx5$i$i39;
   $11 = $10;
   HEAP32[$11>>2] = 0;
   $12 = (($10) + 4)|0;
   $13 = $12;
   HEAP32[$13>>2] = 0;
   _blake2b_compress($blake_state,$arrayidx10$i,0,0);
   HEAP32[$buflen$i$i>>2] = 0;
   $sub4$i42 = (($inlen) + -124)|0;
   $add$ptr$i43 = ((($in)) + 124|0);
   $cmp533$i44 = ($sub4$i42>>>0)>(128);
   if ($cmp533$i44) {
    $14 = (($inlen) + -253)|0;
    $inlen$addr$035$i47 = $sub4$i42;$pin$034$i48 = $add$ptr$i43;
    while(1) {
     $15 = $arrayidx$i$i18;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $18 = (($15) + 4)|0;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (_i64Add(($17|0),($20|0),128,0)|0);
     $22 = (getTempRet0() | 0);
     $23 = $arrayidx$i$i18;
     $24 = $23;
     HEAP32[$24>>2] = $21;
     $25 = (($23) + 4)|0;
     $26 = $25;
     HEAP32[$26>>2] = $22;
     $27 = ($20>>>0)>(4294967295);
     $28 = ($17>>>0)>(4294967167);
     $29 = ($20|0)==(-1);
     $30 = $29 & $28;
     $31 = $27 | $30;
     $32 = $31&1;
     $33 = $arrayidx5$i$i39;
     $34 = $33;
     $35 = HEAP32[$34>>2]|0;
     $36 = (($33) + 4)|0;
     $37 = $36;
     $38 = HEAP32[$37>>2]|0;
     $39 = (_i64Add(($35|0),($38|0),($32|0),0)|0);
     $40 = (getTempRet0() | 0);
     $41 = $arrayidx5$i$i39;
     $42 = $41;
     HEAP32[$42>>2] = $39;
     $43 = (($41) + 4)|0;
     $44 = $43;
     HEAP32[$44>>2] = $40;
     _blake2b_compress($blake_state,$pin$034$i48,0,0);
     $sub6$i53 = (($inlen$addr$035$i47) + -128)|0;
     $add$ptr7$i54 = ((($pin$034$i48)) + 128|0);
     $cmp5$i55 = ($sub6$i53>>>0)>(128);
     if ($cmp5$i55) {
      $inlen$addr$035$i47 = $sub6$i53;$pin$034$i48 = $add$ptr7$i54;
     } else {
      break;
     }
    }
    $45 = $14 & -128;
    $46 = (($45) + 252)|0;
    $47 = (($inlen) + -252)|0;
    $48 = (($47) - ($45))|0;
    $scevgep$i57 = (($in) + ($46)|0);
    $$pre$i58 = HEAP32[$buflen$i$i>>2]|0;
    $49 = $$pre$i58;$arrayidx5$i$i73$pre$phiZZZ2D = $arrayidx5$i$i39;$inlen$addr$1$i61 = $48;$pin$1$i60 = $scevgep$i57;
   } else {
    $49 = 0;$arrayidx5$i$i73$pre$phiZZZ2D = $arrayidx5$i$i39;$inlen$addr$1$i61 = $sub4$i42;$pin$1$i60 = $add$ptr$i43;
   }
  } else {
   $$pre = ((($blake_state)) + 72|0);
   $49 = 4;$arrayidx5$i$i73$pre$phiZZZ2D = $$pre;$inlen$addr$1$i61 = $inlen;$pin$1$i60 = $in;
  }
  $arrayidx10$i62 = (((($blake_state)) + 80|0) + ($49)|0);
  _memcpy(($arrayidx10$i62|0),($pin$1$i60|0),($inlen$addr$1$i61|0))|0;
  $50 = HEAP32[$buflen$i$i>>2]|0;
  $add12$i63 = (($50) + ($inlen$addr$1$i61))|0;
  HEAP32[$buflen$i$i>>2] = $add12$i63;
  dest=$buffer$i; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $51 = $arrayidx$i$i18;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 4)|0;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (_i64Add(($53|0),($56|0),($add12$i63|0),0)|0);
  $58 = (getTempRet0() | 0);
  $59 = $arrayidx$i$i18;
  $60 = $59;
  HEAP32[$60>>2] = $57;
  $61 = (($59) + 4)|0;
  $62 = $61;
  HEAP32[$62>>2] = $58;
  $63 = ($58>>>0)<(0);
  $64 = ($57>>>0)<($add12$i63>>>0);
  $65 = ($58|0)==(0);
  $66 = $65 & $64;
  $67 = $63 | $66;
  $68 = $67&1;
  $69 = $arrayidx5$i$i73$pre$phiZZZ2D;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $75 = (_i64Add(($71|0),($74|0),($68|0),0)|0);
  $76 = (getTempRet0() | 0);
  $77 = $arrayidx5$i$i73$pre$phiZZZ2D;
  $78 = $77;
  HEAP32[$78>>2] = $75;
  $79 = (($77) + 4)|0;
  $80 = $79;
  HEAP32[$80>>2] = $76;
  $arrayidx$i75 = (((($blake_state)) + 80|0) + ($add12$i63)|0);
  $sub$i76 = (128 - ($add12$i63))|0;
  _memset(($arrayidx$i75|0),0,($sub$i76|0))|0;
  _blake2b_compress($blake_state,$arrayidx10$i,-1,-1);
  dest=$buffer$i; src=$blake_state; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  _memcpy(($out|0),($buffer$i|0),($outlen|0))|0;
  _clear_internal_memory($buffer$i,64);
  _clear_internal_memory($arrayidx10$i,128);
  _clear_internal_memory($blake_state,64);
  STACKTOP = sp;return;
 }
 dest=$blake_state; src=41936; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $arrayidx$i$i78 = ((($blake_state)) + 64|0);
 $buflen$i$i79 = ((($blake_state)) + 208|0);
 ;HEAP32[$arrayidx$i$i78>>2]=0|0;HEAP32[$arrayidx$i$i78+4>>2]=0|0;HEAP32[$arrayidx$i$i78+8>>2]=0|0;HEAP32[$arrayidx$i$i78+12>>2]=0|0;
 $81 = $blake_state;
 $82 = $81;
 HEAP32[$82>>2] = -222443192;
 $83 = (($81) + 4)|0;
 $84 = $83;
 HEAP32[$84>>2] = 1779033703;
 $arrayidx10$i113 = ((($blake_state)) + 80|0);
 HEAP32[$arrayidx10$i113>>2] = $outlen;
 HEAP32[$buflen$i$i79>>2] = 4;
 $add$i117 = (($inlen) + 4)|0;
 $cmp$i118 = ($add$i117>>>0)>(128);
 if ($cmp$i118) {
  $arrayidx$i120 = ((($blake_state)) + 84|0);
  dest=$arrayidx$i120; src=$in; stop=dest+124|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $85 = $arrayidx$i$i78;
  $86 = $85;
  HEAP32[$86>>2] = 128;
  $87 = (($85) + 4)|0;
  $88 = $87;
  HEAP32[$88>>2] = 0;
  $arrayidx5$i$i125 = ((($blake_state)) + 72|0);
  $89 = $arrayidx5$i$i125;
  $90 = $89;
  HEAP32[$90>>2] = 0;
  $91 = (($89) + 4)|0;
  $92 = $91;
  HEAP32[$92>>2] = 0;
  _blake2b_compress($blake_state,$arrayidx10$i113,0,0);
  HEAP32[$buflen$i$i79>>2] = 0;
  $sub4$i128 = (($inlen) + -124)|0;
  $add$ptr$i129 = ((($in)) + 124|0);
  $cmp533$i130 = ($sub4$i128>>>0)>(128);
  if ($cmp533$i130) {
   $93 = (($inlen) + -253)|0;
   $inlen$addr$035$i133 = $sub4$i128;$pin$034$i134 = $add$ptr$i129;
   while(1) {
    $94 = $arrayidx$i$i78;
    $95 = $94;
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 4)|0;
    $98 = $97;
    $99 = HEAP32[$98>>2]|0;
    $100 = (_i64Add(($96|0),($99|0),128,0)|0);
    $101 = (getTempRet0() | 0);
    $102 = $arrayidx$i$i78;
    $103 = $102;
    HEAP32[$103>>2] = $100;
    $104 = (($102) + 4)|0;
    $105 = $104;
    HEAP32[$105>>2] = $101;
    $106 = ($99>>>0)>(4294967295);
    $107 = ($96>>>0)>(4294967167);
    $108 = ($99|0)==(-1);
    $109 = $108 & $107;
    $110 = $106 | $109;
    $111 = $110&1;
    $112 = $arrayidx5$i$i125;
    $113 = $112;
    $114 = HEAP32[$113>>2]|0;
    $115 = (($112) + 4)|0;
    $116 = $115;
    $117 = HEAP32[$116>>2]|0;
    $118 = (_i64Add(($114|0),($117|0),($111|0),0)|0);
    $119 = (getTempRet0() | 0);
    $120 = $arrayidx5$i$i125;
    $121 = $120;
    HEAP32[$121>>2] = $118;
    $122 = (($120) + 4)|0;
    $123 = $122;
    HEAP32[$123>>2] = $119;
    _blake2b_compress($blake_state,$pin$034$i134,0,0);
    $sub6$i139 = (($inlen$addr$035$i133) + -128)|0;
    $add$ptr7$i140 = ((($pin$034$i134)) + 128|0);
    $cmp5$i141 = ($sub6$i139>>>0)>(128);
    if ($cmp5$i141) {
     $inlen$addr$035$i133 = $sub6$i139;$pin$034$i134 = $add$ptr7$i140;
    } else {
     break;
    }
   }
   $124 = $93 & -128;
   $125 = (($124) + 252)|0;
   $126 = (($inlen) + -252)|0;
   $127 = (($126) - ($124))|0;
   $scevgep$i143 = (($in) + ($125)|0);
   $$pre$i144 = HEAP32[$buflen$i$i79>>2]|0;
   $128 = $$pre$i144;$arrayidx5$i$i159$pre$phiZZZ2D = $arrayidx5$i$i125;$inlen$addr$1$i147 = $127;$pin$1$i146 = $scevgep$i143;
  } else {
   $128 = 0;$arrayidx5$i$i159$pre$phiZZZ2D = $arrayidx5$i$i125;$inlen$addr$1$i147 = $sub4$i128;$pin$1$i146 = $add$ptr$i129;
  }
 } else {
  $$pre264 = ((($blake_state)) + 72|0);
  $128 = 4;$arrayidx5$i$i159$pre$phiZZZ2D = $$pre264;$inlen$addr$1$i147 = $inlen;$pin$1$i146 = $in;
 }
 $arrayidx10$i148 = (((($blake_state)) + 80|0) + ($128)|0);
 _memcpy(($arrayidx10$i148|0),($pin$1$i146|0),($inlen$addr$1$i147|0))|0;
 $129 = HEAP32[$buflen$i$i79>>2]|0;
 $add12$i149 = (($129) + ($inlen$addr$1$i147))|0;
 HEAP32[$buflen$i$i79>>2] = $add12$i149;
 dest=$buffer$i; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $130 = $arrayidx$i$i78;
 $131 = $130;
 $132 = HEAP32[$131>>2]|0;
 $133 = (($130) + 4)|0;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = (_i64Add(($132|0),($135|0),($add12$i149|0),0)|0);
 $137 = (getTempRet0() | 0);
 $138 = $arrayidx$i$i78;
 $139 = $138;
 HEAP32[$139>>2] = $136;
 $140 = (($138) + 4)|0;
 $141 = $140;
 HEAP32[$141>>2] = $137;
 $142 = ($137>>>0)<(0);
 $143 = ($136>>>0)<($add12$i149>>>0);
 $144 = ($137|0)==(0);
 $145 = $144 & $143;
 $146 = $142 | $145;
 $147 = $146&1;
 $148 = $arrayidx5$i$i159$pre$phiZZZ2D;
 $149 = $148;
 $150 = HEAP32[$149>>2]|0;
 $151 = (($148) + 4)|0;
 $152 = $151;
 $153 = HEAP32[$152>>2]|0;
 $154 = (_i64Add(($150|0),($153|0),($147|0),0)|0);
 $155 = (getTempRet0() | 0);
 $156 = $arrayidx5$i$i159$pre$phiZZZ2D;
 $157 = $156;
 HEAP32[$157>>2] = $154;
 $158 = (($156) + 4)|0;
 $159 = $158;
 HEAP32[$159>>2] = $155;
 $arrayidx$i161 = (((($blake_state)) + 80|0) + ($add12$i149)|0);
 $sub$i162 = (128 - ($add12$i149))|0;
 _memset(($arrayidx$i161|0),0,($sub$i162|0))|0;
 _blake2b_compress($blake_state,$arrayidx10$i113,-1,-1);
 dest=$buffer$i; src=$blake_state; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$out_buffer; src=$blake_state; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _clear_internal_memory($buffer$i,64);
 _clear_internal_memory($arrayidx10$i113,128);
 _clear_internal_memory($blake_state,64);
 dest=$out; src=$out_buffer; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $toproduce$0256 = (($outlen) + -32)|0;
 $pout$0257 = ((($out)) + 32|0);
 $cmp5258 = ($toproduce$0256>>>0)>(64);
 dest=$blake_state; src=41936; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$buflen$i$i79>>2] = 0;
 ;HEAP32[$arrayidx$i$i78>>2]=0|0;HEAP32[$arrayidx$i$i78+4>>2]=0|0;HEAP32[$arrayidx$i$i78+8>>2]=0|0;HEAP32[$arrayidx$i$i78+12>>2]=0|0;
 if ($cmp5258) {
  $160 = (($outlen) + -97)|0;
  $161 = $160 & -32;
  $162 = (($161) + 64)|0;
  $arrayidx$i212 = ((($blake_state)) + 144|0);
  $pout$0260 = $pout$0257;$toproduce$0259 = $toproduce$0256;
  while(1) {
   $163 = $blake_state;
   $164 = $163;
   HEAP32[$164>>2] = -222443192;
   $165 = (($163) + 4)|0;
   $166 = $165;
   HEAP32[$166>>2] = 1779033703;
   dest=$arrayidx10$i113; src=$out_buffer; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$buflen$i$i79>>2] = 64;
   dest=$buffer$i; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $167 = $arrayidx$i$i78;
   $168 = $167;
   HEAP32[$168>>2] = 64;
   $169 = (($167) + 4)|0;
   $170 = $169;
   HEAP32[$170>>2] = 0;
   $171 = $arrayidx5$i$i159$pre$phiZZZ2D;
   $172 = $171;
   HEAP32[$172>>2] = 0;
   $173 = (($171) + 4)|0;
   $174 = $173;
   HEAP32[$174>>2] = 0;
   dest=$arrayidx$i212; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   _blake2b_compress($blake_state,$arrayidx10$i113,-1,-1);
   dest=$buffer$i; src=$blake_state; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   dest=$out_buffer; src=$blake_state; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   _clear_internal_memory($buffer$i,64);
   _clear_internal_memory($arrayidx10$i113,128);
   _clear_internal_memory($blake_state,64);
   dest=$pout$0260; src=$out_buffer; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $toproduce$0 = (($toproduce$0259) + -32)|0;
   $pout$0 = ((($pout$0260)) + 32|0);
   $cmp5 = ($toproduce$0>>>0)>(64);
   dest=$blake_state; src=41936; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$buflen$i$i79>>2] = 0;
   ;HEAP32[$arrayidx$i$i78>>2]=0|0;HEAP32[$arrayidx$i$i78+4>>2]=0|0;HEAP32[$arrayidx$i$i78+8>>2]=0|0;HEAP32[$arrayidx$i$i78+12>>2]=0|0;
   if ($cmp5) {
    $pout$0260 = $pout$0;$toproduce$0259 = $toproduce$0;
   } else {
    break;
   }
  }
  $175 = (($outlen) + -64)|0;
  $176 = (($175) - ($161))|0;
  $scevgep = (($out) + ($162)|0);
  $arrayidx$i$pre$phiZZ2D = $arrayidx$i212;$pout$0$lcssa = $scevgep;$toproduce$0$lcssa = $176;
 } else {
  $$pre265 = ((($blake_state)) + 144|0);
  $arrayidx$i$pre$phiZZ2D = $$pre265;$pout$0$lcssa = $pout$0257;$toproduce$0$lcssa = $toproduce$0256;
 }
 $177 = $toproduce$0$lcssa | 16842752;
 $178 = $177 ^ -205731576;
 $179 = $blake_state;
 $180 = $179;
 HEAP32[$180>>2] = $178;
 $181 = (($179) + 4)|0;
 $182 = $181;
 HEAP32[$182>>2] = 1779033703;
 dest=$arrayidx10$i113; src=$out_buffer; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$buflen$i$i79>>2] = 64;
 dest=$buffer$i; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $183 = $arrayidx$i$i78;
 $184 = $183;
 HEAP32[$184>>2] = 64;
 $185 = (($183) + 4)|0;
 $186 = $185;
 HEAP32[$186>>2] = 0;
 $187 = $arrayidx5$i$i159$pre$phiZZZ2D;
 $188 = $187;
 HEAP32[$188>>2] = 0;
 $189 = (($187) + 4)|0;
 $190 = $189;
 HEAP32[$190>>2] = 0;
 dest=$arrayidx$i$pre$phiZZ2D; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _blake2b_compress($blake_state,$arrayidx10$i113,-1,-1);
 dest=$buffer$i; src=$blake_state; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _memcpy(($out_buffer|0),($buffer$i|0),($toproduce$0$lcssa|0))|0;
 _clear_internal_memory($buffer$i,64);
 _clear_internal_memory($arrayidx10$i113,128);
 _clear_internal_memory($blake_state,64);
 _memcpy(($pout$0$lcssa|0),($out_buffer|0),($toproduce$0$lcssa|0))|0;
 _clear_internal_memory($out_buffer,64);
 STACKTOP = sp;return;
}
function _fill_segment_default($instance,$position) {
 $instance = $instance|0;
 $position = $position|0;
 var $$mux$i = 0, $$not$i = 0, $$op$i = 0, $$pre$i = 0, $$pre58$i = 0, $$pre59$i = 0, $$pre60$i = 0, $$pre61$i = 0, $$pre62$i = 0, $$pre64$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr$us$i = 0, $add$ptr104$i = 0, $add$ptr104$us$i = 0, $add$ptr106$i = 0, $add$ptr106$us$i = 0, $add$ptr108$i = 0, $add$ptr108$us$i = 0, $add45$i = 0, $address_block$i = 0, $arrayidx$i$i = 0, $arrayidx$i50$i = 0, $arrayidx12$i = 0, $arrayidx16$i = 0, $arrayidx19$i = 0;
 var $arrayidx22$i = 0, $arrayidx26$i = 0, $arrayidx73$us$i = 0, $arrayidx77$i = 0, $brmerge$i = 0, $call$i = 0, $call$us$i = 0, $cmp$i = 0, $cmp110$i = 0, $cmp110$us$i = 0, $cmp112$i = 0, $cmp112$us$i = 0, $cmp29$i = 0, $cmp34$i = 0, $cmp4$i = 0, $cmp47$i = 0, $cmp5$i = 0, $cmp55$i = 0, $cmp55$us$i = 0, $cmp5553$i = 0;
 var $cmp59$i = 0, $cmp59$us$i = 0, $cmp67$us$i = 0, $cmp82$i = 0, $cmp82$us$i = 0, $cmp87$i = 0, $cmp87$us$i = 0, $conv43$i = 0, $conv97$i = 0, $conv97$us$i = 0, $curr_offset$055$i = 0, $curr_offset$055$us$i = 0, $i$056$i = 0, $i$056$us$i = 0, $idx$ext$i = 0, $idx$ext$us$i = 0, $inc$i = 0, $inc$us$i = 0, $inc117$i = 0, $inc117$us$i = 0;
 var $inc118$i = 0, $inc118$us$i = 0, $index$i = 0, $input_block$i = 0, $lane$i = 0, $lane41$i = 0, $lane_length$i = 0, $lanes$i = 0, $memory_blocks$i = 0, $mul$i = 0, $mul44$i = 0, $or$cond$i = 0, $or$cond$us$i = 0, $pass28$pre$phi$iZ2D = 0, $pass28$pre$phi66$iZ2D = 0, $pass28$pre$phi70$iZ2D = 0, $pass8$pre$phi$iZ2D = 0, $passes$i = 0, $position1 = 0, $prev_offset$0$i = 0;
 var $prev_offset$0$in$i = 0, $prev_offset$154$i = 0, $prev_offset$154$us$i = 0, $rem$i = 0, $rem58$i = 0, $rem58$us$i = 0, $rem66$us$i = 0, $segment_length$i = 0, $slice$i = 0, $slice13$pre$phi$iZ2D = 0, $slice32$i = 0, $slice42$pre$phi$iZ2D = 0, $spec$select$i = 0, $spec$select$us$i = 0, $starting_index$0$i = 0, $sub62$i = 0, $sub62$us$i = 0, $type$i = 0, $version$i = 0, $zero_block$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3088|0;
 $address_block$i = sp + 2064|0;
 $input_block$i = sp + 1040|0;
 $zero_block$i = sp + 16|0;
 $position1 = sp;
 ;HEAP32[$position1>>2]=HEAP32[$position>>2]|0;HEAP32[$position1+4>>2]=HEAP32[$position+4>>2]|0;HEAP32[$position1+8>>2]=HEAP32[$position+8>>2]|0;HEAP32[$position1+12>>2]=HEAP32[$position+12>>2]|0;
 $cmp$i = ($instance|0)==(0|0);
 if ($cmp$i) {
  STACKTOP = sp;return;
 }
 $type$i = ((($instance)) + 32|0);
 $0 = HEAP32[$type$i>>2]|0;
 switch ($0|0) {
 case 1:  {
  $$pre64$i = ((($position1)) + 8|0);
  $pass8$pre$phi$iZ2D = $position1;$slice13$pre$phi$iZ2D = $$pre64$i;
  label = 7;
  break;
 }
 case 2:  {
  $1 = HEAP32[$position1>>2]|0;
  $cmp4$i = ($1|0)==(0);
  if ($cmp4$i) {
   $slice$i = ((($position1)) + 8|0);
   $2 = HEAP8[$slice$i>>0]|0;
   $cmp5$i = ($2&255)<(2);
   if ($cmp5$i) {
    $pass8$pre$phi$iZ2D = $position1;$slice13$pre$phi$iZ2D = $slice$i;
    label = 7;
   } else {
    $113 = 0;$pass28$pre$phi66$iZ2D = $position1;$slice42$pre$phi$iZ2D = $slice$i;$starting_index$0$i = 0;
   }
  } else {
   $112 = 0;$pass28$pre$phi70$iZ2D = $position1;
   label = 9;
  }
  break;
 }
 default: {
  $$pre$i = HEAP32[$position1>>2]|0;
  $34 = $$pre$i;$36 = 0;$pass28$pre$phi$iZ2D = $position1;
  label = 8;
 }
 }
 if ((label|0) == 7) {
  _init_block_value($zero_block$i,0);
  _init_block_value($input_block$i,0);
  $3 = HEAP32[$pass8$pre$phi$iZ2D>>2]|0;
  $4 = $input_block$i;
  $5 = $4;
  HEAP32[$5>>2] = $3;
  $6 = (($4) + 4)|0;
  $7 = $6;
  HEAP32[$7>>2] = 0;
  $lane$i = ((($position1)) + 4|0);
  $8 = HEAP32[$lane$i>>2]|0;
  $arrayidx12$i = ((($input_block$i)) + 8|0);
  $9 = $arrayidx12$i;
  $10 = $9;
  HEAP32[$10>>2] = $8;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = 0;
  $13 = HEAP8[$slice13$pre$phi$iZ2D>>0]|0;
  $14 = $13&255;
  $arrayidx16$i = ((($input_block$i)) + 16|0);
  $15 = $arrayidx16$i;
  $16 = $15;
  HEAP32[$16>>2] = $14;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = 0;
  $memory_blocks$i = ((($instance)) + 12|0);
  $19 = HEAP32[$memory_blocks$i>>2]|0;
  $arrayidx19$i = ((($input_block$i)) + 24|0);
  $20 = $arrayidx19$i;
  $21 = $20;
  HEAP32[$21>>2] = $19;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = 0;
  $passes$i = ((($instance)) + 8|0);
  $24 = HEAP32[$passes$i>>2]|0;
  $arrayidx22$i = ((($input_block$i)) + 32|0);
  $25 = $arrayidx22$i;
  $26 = $25;
  HEAP32[$26>>2] = $24;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = 0;
  $29 = HEAP32[$type$i>>2]|0;
  $arrayidx26$i = ((($input_block$i)) + 40|0);
  $30 = $arrayidx26$i;
  $31 = $30;
  HEAP32[$31>>2] = $29;
  $32 = (($30) + 4)|0;
  $33 = $32;
  HEAP32[$33>>2] = 0;
  $34 = $3;$36 = 1;$pass28$pre$phi$iZ2D = $pass8$pre$phi$iZ2D;
  label = 8;
 }
 if ((label|0) == 8) {
  $cmp29$i = ($34|0)==(0);
  if ($cmp29$i) {
   $slice32$i = ((($position1)) + 8|0);
   $35 = HEAP8[$slice32$i>>0]|0;
   $cmp34$i = ($35<<24>>24)!=(0);
   $$not$i = $36 ^ 1;
   $brmerge$i = $cmp34$i | $$not$i;
   $$mux$i = $cmp34$i ? 0 : 2;
   if ($brmerge$i) {
    $113 = $36;$pass28$pre$phi66$iZ2D = $pass28$pre$phi$iZ2D;$slice42$pre$phi$iZ2D = $slice32$i;$starting_index$0$i = $$mux$i;
   } else {
    $arrayidx$i$i = ((($input_block$i)) + 48|0);
    $37 = $arrayidx$i$i;
    $38 = $37;
    $39 = HEAP32[$38>>2]|0;
    $40 = (($37) + 4)|0;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = (_i64Add(($39|0),($42|0),1,0)|0);
    $44 = (getTempRet0() | 0);
    $45 = $arrayidx$i$i;
    $46 = $45;
    HEAP32[$46>>2] = $43;
    $47 = (($45) + 4)|0;
    $48 = $47;
    HEAP32[$48>>2] = $44;
    _fill_block($zero_block$i,$input_block$i,$address_block$i,0);
    _fill_block($zero_block$i,$address_block$i,$address_block$i,0);
    $113 = $36;$pass28$pre$phi66$iZ2D = $pass28$pre$phi$iZ2D;$slice42$pre$phi$iZ2D = $slice32$i;$starting_index$0$i = 2;
   }
  } else {
   $112 = $36;$pass28$pre$phi70$iZ2D = $pass28$pre$phi$iZ2D;
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $$pre62$i = ((($position1)) + 8|0);
  $113 = $112;$pass28$pre$phi66$iZ2D = $pass28$pre$phi70$iZ2D;$slice42$pre$phi$iZ2D = $$pre62$i;$starting_index$0$i = 0;
 }
 $lane41$i = ((($position1)) + 4|0);
 $49 = HEAP32[$lane41$i>>2]|0;
 $lane_length$i = ((($instance)) + 20|0);
 $50 = HEAP32[$lane_length$i>>2]|0;
 $mul$i = Math_imul($50, $49)|0;
 $51 = HEAP8[$slice42$pre$phi$iZ2D>>0]|0;
 $conv43$i = $51&255;
 $segment_length$i = ((($instance)) + 16|0);
 $52 = HEAP32[$segment_length$i>>2]|0;
 $mul44$i = Math_imul($52, $conv43$i)|0;
 $add$i = (($mul$i) + ($starting_index$0$i))|0;
 $add45$i = (($add$i) + ($mul44$i))|0;
 $rem$i = (($add45$i>>>0) % ($50>>>0))&-1;
 $cmp47$i = ($rem$i|0)==(0);
 $$op$i = (($50) + -1)|0;
 $prev_offset$0$in$i = $cmp47$i ? $$op$i : -1;
 $prev_offset$0$i = (($prev_offset$0$in$i) + ($add45$i))|0;
 $cmp5553$i = ($starting_index$0$i>>>0)<($52>>>0);
 if (!($cmp5553$i)) {
  STACKTOP = sp;return;
 }
 $lanes$i = ((($instance)) + 24|0);
 $index$i = ((($position1)) + 12|0);
 $arrayidx$i50$i = ((($input_block$i)) + 48|0);
 $version$i = ((($instance)) + 4|0);
 if (!($113)) {
  $100 = $51;$101 = $49;$88 = $50;$curr_offset$055$i = $add45$i;$i$056$i = $starting_index$0$i;$prev_offset$154$i = $prev_offset$0$i;
  while(1) {
   $rem58$i = (($curr_offset$055$i>>>0) % ($88>>>0))&-1;
   $cmp59$i = ($rem58$i|0)==(1);
   $sub62$i = (($curr_offset$055$i) + -1)|0;
   $spec$select$i = $cmp59$i ? $sub62$i : $prev_offset$154$i;
   $89 = HEAP32[$instance>>2]|0;
   $arrayidx77$i = (($89) + ($spec$select$i<<10)|0);
   $90 = $arrayidx77$i;
   $91 = $90;
   $92 = HEAP32[$91>>2]|0;
   $93 = (($90) + 4)|0;
   $94 = $93;
   $95 = HEAP32[$94>>2]|0;
   $96 = HEAP32[$lanes$i>>2]|0;
   $97 = (___uremdi3(($95|0),0,($96|0),0)|0);
   $98 = (getTempRet0() | 0);
   $99 = HEAP32[$pass28$pre$phi66$iZ2D>>2]|0;
   $cmp82$i = ($99|0)==(0);
   $cmp87$i = ($100<<24>>24)==(0);
   $or$cond$i = $cmp87$i & $cmp82$i;
   $102 = $or$cond$i ? $101 : $97;
   $103 = $or$cond$i ? 0 : $98;
   HEAP32[$index$i>>2] = $i$056$i;
   $104 = ($102|0)==($101|0);
   $105 = ($103|0)==(0);
   $106 = $104 & $105;
   $conv97$i = $106&1;
   $call$i = (_index_alpha($instance,$position1,$92,$conv97$i)|0);
   $107 = HEAP32[$instance>>2]|0;
   $108 = HEAP32[$lane_length$i>>2]|0;
   $idx$ext$i = Math_imul($108, $102)|0;
   $add$ptr$i = (($107) + ($idx$ext$i<<10)|0);
   $add$ptr104$i = (($add$ptr$i) + ($call$i<<10)|0);
   $add$ptr106$i = (($107) + ($curr_offset$055$i<<10)|0);
   $add$ptr108$i = (($107) + ($spec$select$i<<10)|0);
   $109 = HEAP32[$pass28$pre$phi66$iZ2D>>2]|0;
   $cmp110$i = ($109|0)==(0);
   if ($cmp110$i) {
    label = 26;
   } else {
    $110 = HEAP32[$version$i>>2]|0;
    $cmp112$i = ($110|0)==(16);
    if ($cmp112$i) {
     label = 26;
    } else {
     _fill_block($add$ptr108$i,$add$ptr104$i,$add$ptr106$i,1);
    }
   }
   if ((label|0) == 26) {
    label = 0;
    _fill_block($add$ptr108$i,$add$ptr104$i,$add$ptr106$i,0);
   }
   $inc$i = (($i$056$i) + 1)|0;
   $111 = HEAP32[$segment_length$i>>2]|0;
   $cmp55$i = ($inc$i>>>0)<($111>>>0);
   if (!($cmp55$i)) {
    break;
   }
   $inc118$i = (($spec$select$i) + 1)|0;
   $inc117$i = (($curr_offset$055$i) + 1)|0;
   $$pre58$i = HEAP32[$lane_length$i>>2]|0;
   $$pre59$i = HEAP8[$slice42$pre$phi$iZ2D>>0]|0;
   $$pre60$i = HEAP32[$lane41$i>>2]|0;
   $100 = $$pre59$i;$101 = $$pre60$i;$88 = $$pre58$i;$curr_offset$055$i = $inc117$i;$i$056$i = $inc$i;$prev_offset$154$i = $inc118$i;
  }
  STACKTOP = sp;return;
 }
 $53 = $50;$curr_offset$055$us$i = $add45$i;$i$056$us$i = $starting_index$0$i;$prev_offset$154$us$i = $prev_offset$0$i;
 while(1) {
  $rem58$us$i = (($curr_offset$055$us$i>>>0) % ($53>>>0))&-1;
  $cmp59$us$i = ($rem58$us$i|0)==(1);
  $sub62$us$i = (($curr_offset$055$us$i) + -1)|0;
  $spec$select$us$i = $cmp59$us$i ? $sub62$us$i : $prev_offset$154$us$i;
  $rem66$us$i = $i$056$us$i & 127;
  $cmp67$us$i = ($rem66$us$i|0)==(0);
  if ($cmp67$us$i) {
   $54 = $arrayidx$i50$i;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 4)|0;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (_i64Add(($56|0),($59|0),1,0)|0);
   $61 = (getTempRet0() | 0);
   $62 = $arrayidx$i50$i;
   $63 = $62;
   HEAP32[$63>>2] = $60;
   $64 = (($62) + 4)|0;
   $65 = $64;
   HEAP32[$65>>2] = $61;
   _fill_block($zero_block$i,$input_block$i,$address_block$i,0);
   _fill_block($zero_block$i,$address_block$i,$address_block$i,0);
  }
  $arrayidx73$us$i = (($address_block$i) + ($rem66$us$i<<3)|0);
  $66 = $arrayidx73$us$i;
  $67 = $66;
  $68 = HEAP32[$67>>2]|0;
  $69 = (($66) + 4)|0;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = HEAP32[$lanes$i>>2]|0;
  $73 = (___uremdi3(($71|0),0,($72|0),0)|0);
  $74 = (getTempRet0() | 0);
  $75 = HEAP32[$pass28$pre$phi66$iZ2D>>2]|0;
  $cmp82$us$i = ($75|0)==(0);
  $76 = HEAP8[$slice42$pre$phi$iZ2D>>0]|0;
  $cmp87$us$i = ($76<<24>>24)==(0);
  $or$cond$us$i = $cmp82$us$i & $cmp87$us$i;
  $77 = HEAP32[$lane41$i>>2]|0;
  $78 = $or$cond$us$i ? $77 : $73;
  $79 = $or$cond$us$i ? 0 : $74;
  HEAP32[$index$i>>2] = $i$056$us$i;
  $80 = ($78|0)==($77|0);
  $81 = ($79|0)==(0);
  $82 = $80 & $81;
  $conv97$us$i = $82&1;
  $call$us$i = (_index_alpha($instance,$position1,$68,$conv97$us$i)|0);
  $83 = HEAP32[$instance>>2]|0;
  $84 = HEAP32[$lane_length$i>>2]|0;
  $idx$ext$us$i = Math_imul($84, $78)|0;
  $add$ptr$us$i = (($83) + ($idx$ext$us$i<<10)|0);
  $add$ptr104$us$i = (($add$ptr$us$i) + ($call$us$i<<10)|0);
  $add$ptr106$us$i = (($83) + ($curr_offset$055$us$i<<10)|0);
  $add$ptr108$us$i = (($83) + ($spec$select$us$i<<10)|0);
  $85 = HEAP32[$pass28$pre$phi66$iZ2D>>2]|0;
  $cmp110$us$i = ($85|0)==(0);
  if ($cmp110$us$i) {
   label = 21;
  } else {
   $86 = HEAP32[$version$i>>2]|0;
   $cmp112$us$i = ($86|0)==(16);
   if ($cmp112$us$i) {
    label = 21;
   } else {
    _fill_block($add$ptr108$us$i,$add$ptr104$us$i,$add$ptr106$us$i,1);
   }
  }
  if ((label|0) == 21) {
   label = 0;
   _fill_block($add$ptr108$us$i,$add$ptr104$us$i,$add$ptr106$us$i,0);
  }
  $inc$us$i = (($i$056$us$i) + 1)|0;
  $87 = HEAP32[$segment_length$i>>2]|0;
  $cmp55$us$i = ($inc$us$i>>>0)<($87>>>0);
  if (!($cmp55$us$i)) {
   break;
  }
  $inc118$us$i = (($spec$select$us$i) + 1)|0;
  $inc117$us$i = (($curr_offset$055$us$i) + 1)|0;
  $$pre61$i = HEAP32[$lane_length$i>>2]|0;
  $53 = $$pre61$i;$curr_offset$055$us$i = $inc117$us$i;$i$056$us$i = $inc$us$i;$prev_offset$154$us$i = $inc118$us$i;
 }
 STACKTOP = sp;return;
}
function _fill_block($prev_block,$ref_block,$next_block,$with_xor) {
 $prev_block = $prev_block|0;
 $ref_block = $ref_block|0;
 $next_block = $next_block|0;
 $with_xor = $with_xor|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $10000 = 0, $10001 = 0, $10002 = 0, $10003 = 0, $10004 = 0, $10005 = 0, $10006 = 0, $10007 = 0, $10008 = 0, $10009 = 0, $1001 = 0, $10010 = 0, $10011 = 0, $10012 = 0, $10013 = 0;
 var $10014 = 0, $10015 = 0, $10016 = 0, $10017 = 0, $10018 = 0, $10019 = 0, $1002 = 0, $10020 = 0, $10021 = 0, $10022 = 0, $10023 = 0, $10024 = 0, $10025 = 0, $10026 = 0, $10027 = 0, $10028 = 0, $10029 = 0, $1003 = 0, $10030 = 0, $10031 = 0;
 var $10032 = 0, $10033 = 0, $10034 = 0, $10035 = 0, $10036 = 0, $10037 = 0, $10038 = 0, $10039 = 0, $1004 = 0, $10040 = 0, $10041 = 0, $10042 = 0, $10043 = 0, $10044 = 0, $10045 = 0, $10046 = 0, $10047 = 0, $10048 = 0, $10049 = 0, $1005 = 0;
 var $10050 = 0, $10051 = 0, $10052 = 0, $10053 = 0, $10054 = 0, $10055 = 0, $10056 = 0, $10057 = 0, $10058 = 0, $10059 = 0, $1006 = 0, $10060 = 0, $10061 = 0, $10062 = 0, $10063 = 0, $10064 = 0, $10065 = 0, $10066 = 0, $10067 = 0, $10068 = 0;
 var $10069 = 0, $1007 = 0, $10070 = 0, $10071 = 0, $10072 = 0, $10073 = 0, $10074 = 0, $10075 = 0, $10076 = 0, $10077 = 0, $10078 = 0, $10079 = 0, $1008 = 0, $10080 = 0, $10081 = 0, $10082 = 0, $10083 = 0, $10084 = 0, $10085 = 0, $10086 = 0;
 var $10087 = 0, $10088 = 0, $10089 = 0, $1009 = 0, $10090 = 0, $10091 = 0, $10092 = 0, $10093 = 0, $10094 = 0, $10095 = 0, $10096 = 0, $10097 = 0, $10098 = 0, $10099 = 0, $101 = 0, $1010 = 0, $10100 = 0, $10101 = 0, $10102 = 0, $10103 = 0;
 var $10104 = 0, $10105 = 0, $10106 = 0, $10107 = 0, $10108 = 0, $10109 = 0, $1011 = 0, $10110 = 0, $10111 = 0, $10112 = 0, $10113 = 0, $10114 = 0, $10115 = 0, $10116 = 0, $10117 = 0, $10118 = 0, $10119 = 0, $1012 = 0, $10120 = 0, $10121 = 0;
 var $10122 = 0, $10123 = 0, $10124 = 0, $10125 = 0, $10126 = 0, $10127 = 0, $10128 = 0, $10129 = 0, $1013 = 0, $10130 = 0, $10131 = 0, $10132 = 0, $10133 = 0, $10134 = 0, $10135 = 0, $10136 = 0, $10137 = 0, $10138 = 0, $10139 = 0, $1014 = 0;
 var $10140 = 0, $10141 = 0, $10142 = 0, $10143 = 0, $10144 = 0, $10145 = 0, $10146 = 0, $10147 = 0, $10148 = 0, $10149 = 0, $1015 = 0, $10150 = 0, $10151 = 0, $10152 = 0, $10153 = 0, $10154 = 0, $10155 = 0, $10156 = 0, $10157 = 0, $10158 = 0;
 var $10159 = 0, $1016 = 0, $10160 = 0, $10161 = 0, $10162 = 0, $10163 = 0, $10164 = 0, $10165 = 0, $10166 = 0, $10167 = 0, $10168 = 0, $10169 = 0, $1017 = 0, $10170 = 0, $10171 = 0, $10172 = 0, $10173 = 0, $10174 = 0, $10175 = 0, $10176 = 0;
 var $10177 = 0, $10178 = 0, $10179 = 0, $1018 = 0, $10180 = 0, $10181 = 0, $10182 = 0, $10183 = 0, $10184 = 0, $10185 = 0, $10186 = 0, $10187 = 0, $10188 = 0, $10189 = 0, $1019 = 0, $10190 = 0, $10191 = 0, $10192 = 0, $10193 = 0, $10194 = 0;
 var $10195 = 0, $10196 = 0, $10197 = 0, $10198 = 0, $10199 = 0, $102 = 0, $1020 = 0, $10200 = 0, $10201 = 0, $10202 = 0, $10203 = 0, $10204 = 0, $10205 = 0, $10206 = 0, $10207 = 0, $10208 = 0, $10209 = 0, $1021 = 0, $10210 = 0, $10211 = 0;
 var $10212 = 0, $10213 = 0, $10214 = 0, $10215 = 0, $10216 = 0, $10217 = 0, $10218 = 0, $10219 = 0, $1022 = 0, $10220 = 0, $10221 = 0, $10222 = 0, $10223 = 0, $10224 = 0, $10225 = 0, $10226 = 0, $10227 = 0, $10228 = 0, $10229 = 0, $1023 = 0;
 var $10230 = 0, $10231 = 0, $10232 = 0, $10233 = 0, $10234 = 0, $10235 = 0, $10236 = 0, $10237 = 0, $10238 = 0, $10239 = 0, $1024 = 0, $10240 = 0, $10241 = 0, $10242 = 0, $10243 = 0, $10244 = 0, $10245 = 0, $10246 = 0, $10247 = 0, $10248 = 0;
 var $10249 = 0, $1025 = 0, $10250 = 0, $10251 = 0, $10252 = 0, $10253 = 0, $10254 = 0, $10255 = 0, $10256 = 0, $10257 = 0, $10258 = 0, $10259 = 0, $1026 = 0, $10260 = 0, $10261 = 0, $10262 = 0, $10263 = 0, $10264 = 0, $10265 = 0, $10266 = 0;
 var $10267 = 0, $10268 = 0, $10269 = 0, $1027 = 0, $10270 = 0, $10271 = 0, $10272 = 0, $10273 = 0, $10274 = 0, $10275 = 0, $10276 = 0, $10277 = 0, $10278 = 0, $10279 = 0, $1028 = 0, $10280 = 0, $10281 = 0, $10282 = 0, $10283 = 0, $10284 = 0;
 var $10285 = 0, $10286 = 0, $10287 = 0, $10288 = 0, $10289 = 0, $1029 = 0, $10290 = 0, $10291 = 0, $10292 = 0, $10293 = 0, $10294 = 0, $10295 = 0, $10296 = 0, $10297 = 0, $10298 = 0, $10299 = 0, $103 = 0, $1030 = 0, $10300 = 0, $10301 = 0;
 var $10302 = 0, $10303 = 0, $10304 = 0, $10305 = 0, $10306 = 0, $10307 = 0, $10308 = 0, $10309 = 0, $1031 = 0, $10310 = 0, $10311 = 0, $10312 = 0, $10313 = 0, $10314 = 0, $10315 = 0, $10316 = 0, $10317 = 0, $10318 = 0, $10319 = 0, $1032 = 0;
 var $10320 = 0, $10321 = 0, $10322 = 0, $10323 = 0, $10324 = 0, $10325 = 0, $10326 = 0, $10327 = 0, $10328 = 0, $10329 = 0, $1033 = 0, $10330 = 0, $10331 = 0, $10332 = 0, $10333 = 0, $10334 = 0, $10335 = 0, $10336 = 0, $10337 = 0, $10338 = 0;
 var $10339 = 0, $1034 = 0, $10340 = 0, $10341 = 0, $10342 = 0, $10343 = 0, $10344 = 0, $10345 = 0, $10346 = 0, $10347 = 0, $10348 = 0, $10349 = 0, $1035 = 0, $10350 = 0, $10351 = 0, $10352 = 0, $10353 = 0, $10354 = 0, $10355 = 0, $10356 = 0;
 var $10357 = 0, $10358 = 0, $10359 = 0, $1036 = 0, $10360 = 0, $10361 = 0, $10362 = 0, $10363 = 0, $10364 = 0, $10365 = 0, $10366 = 0, $10367 = 0, $10368 = 0, $10369 = 0, $1037 = 0, $10370 = 0, $10371 = 0, $10372 = 0, $10373 = 0, $10374 = 0;
 var $10375 = 0, $10376 = 0, $10377 = 0, $10378 = 0, $10379 = 0, $1038 = 0, $10380 = 0, $10381 = 0, $10382 = 0, $10383 = 0, $10384 = 0, $10385 = 0, $10386 = 0, $10387 = 0, $10388 = 0, $10389 = 0, $1039 = 0, $10390 = 0, $10391 = 0, $10392 = 0;
 var $10393 = 0, $10394 = 0, $10395 = 0, $10396 = 0, $10397 = 0, $10398 = 0, $10399 = 0, $104 = 0, $1040 = 0, $10400 = 0, $10401 = 0, $10402 = 0, $10403 = 0, $10404 = 0, $10405 = 0, $10406 = 0, $10407 = 0, $10408 = 0, $10409 = 0, $1041 = 0;
 var $10410 = 0, $10411 = 0, $10412 = 0, $10413 = 0, $10414 = 0, $10415 = 0, $10416 = 0, $10417 = 0, $10418 = 0, $10419 = 0, $1042 = 0, $10420 = 0, $10421 = 0, $10422 = 0, $10423 = 0, $10424 = 0, $10425 = 0, $10426 = 0, $10427 = 0, $10428 = 0;
 var $10429 = 0, $1043 = 0, $10430 = 0, $10431 = 0, $10432 = 0, $10433 = 0, $10434 = 0, $10435 = 0, $10436 = 0, $10437 = 0, $10438 = 0, $10439 = 0, $1044 = 0, $10440 = 0, $10441 = 0, $10442 = 0, $10443 = 0, $10444 = 0, $10445 = 0, $10446 = 0;
 var $10447 = 0, $10448 = 0, $10449 = 0, $1045 = 0, $10450 = 0, $10451 = 0, $10452 = 0, $10453 = 0, $10454 = 0, $10455 = 0, $10456 = 0, $10457 = 0, $10458 = 0, $10459 = 0, $1046 = 0, $10460 = 0, $10461 = 0, $10462 = 0, $10463 = 0, $10464 = 0;
 var $10465 = 0, $10466 = 0, $10467 = 0, $10468 = 0, $10469 = 0, $1047 = 0, $10470 = 0, $10471 = 0, $10472 = 0, $10473 = 0, $10474 = 0, $10475 = 0, $10476 = 0, $10477 = 0, $10478 = 0, $10479 = 0, $1048 = 0, $10480 = 0, $10481 = 0, $10482 = 0;
 var $10483 = 0, $10484 = 0, $10485 = 0, $10486 = 0, $10487 = 0, $10488 = 0, $10489 = 0, $1049 = 0, $10490 = 0, $10491 = 0, $10492 = 0, $10493 = 0, $10494 = 0, $10495 = 0, $10496 = 0, $10497 = 0, $10498 = 0, $10499 = 0, $105 = 0, $1050 = 0;
 var $10500 = 0, $10501 = 0, $10502 = 0, $10503 = 0, $10504 = 0, $10505 = 0, $10506 = 0, $10507 = 0, $10508 = 0, $10509 = 0, $1051 = 0, $10510 = 0, $10511 = 0, $10512 = 0, $10513 = 0, $10514 = 0, $10515 = 0, $10516 = 0, $10517 = 0, $10518 = 0;
 var $10519 = 0, $1052 = 0, $10520 = 0, $10521 = 0, $10522 = 0, $10523 = 0, $10524 = 0, $10525 = 0, $10526 = 0, $10527 = 0, $10528 = 0, $10529 = 0, $1053 = 0, $10530 = 0, $10531 = 0, $10532 = 0, $10533 = 0, $10534 = 0, $10535 = 0, $10536 = 0;
 var $10537 = 0, $10538 = 0, $10539 = 0, $1054 = 0, $10540 = 0, $10541 = 0, $10542 = 0, $10543 = 0, $10544 = 0, $10545 = 0, $10546 = 0, $10547 = 0, $10548 = 0, $10549 = 0, $1055 = 0, $10550 = 0, $10551 = 0, $10552 = 0, $10553 = 0, $10554 = 0;
 var $10555 = 0, $10556 = 0, $10557 = 0, $10558 = 0, $10559 = 0, $1056 = 0, $10560 = 0, $10561 = 0, $10562 = 0, $10563 = 0, $10564 = 0, $10565 = 0, $10566 = 0, $10567 = 0, $10568 = 0, $10569 = 0, $1057 = 0, $10570 = 0, $10571 = 0, $10572 = 0;
 var $10573 = 0, $10574 = 0, $10575 = 0, $10576 = 0, $10577 = 0, $10578 = 0, $10579 = 0, $1058 = 0, $10580 = 0, $10581 = 0, $10582 = 0, $10583 = 0, $10584 = 0, $10585 = 0, $10586 = 0, $10587 = 0, $10588 = 0, $10589 = 0, $1059 = 0, $10590 = 0;
 var $10591 = 0, $10592 = 0, $10593 = 0, $10594 = 0, $10595 = 0, $10596 = 0, $10597 = 0, $10598 = 0, $10599 = 0, $106 = 0, $1060 = 0, $10600 = 0, $10601 = 0, $10602 = 0, $10603 = 0, $10604 = 0, $10605 = 0, $10606 = 0, $10607 = 0, $10608 = 0;
 var $10609 = 0, $1061 = 0, $10610 = 0, $10611 = 0, $10612 = 0, $10613 = 0, $10614 = 0, $10615 = 0, $10616 = 0, $10617 = 0, $10618 = 0, $10619 = 0, $1062 = 0, $10620 = 0, $10621 = 0, $10622 = 0, $10623 = 0, $10624 = 0, $10625 = 0, $10626 = 0;
 var $10627 = 0, $10628 = 0, $10629 = 0, $1063 = 0, $10630 = 0, $10631 = 0, $10632 = 0, $10633 = 0, $10634 = 0, $10635 = 0, $10636 = 0, $10637 = 0, $10638 = 0, $10639 = 0, $1064 = 0, $10640 = 0, $10641 = 0, $10642 = 0, $10643 = 0, $10644 = 0;
 var $10645 = 0, $10646 = 0, $10647 = 0, $10648 = 0, $10649 = 0, $1065 = 0, $10650 = 0, $10651 = 0, $10652 = 0, $10653 = 0, $10654 = 0, $10655 = 0, $10656 = 0, $10657 = 0, $10658 = 0, $10659 = 0, $1066 = 0, $10660 = 0, $10661 = 0, $10662 = 0;
 var $10663 = 0, $10664 = 0, $10665 = 0, $10666 = 0, $10667 = 0, $10668 = 0, $10669 = 0, $1067 = 0, $10670 = 0, $10671 = 0, $10672 = 0, $10673 = 0, $10674 = 0, $10675 = 0, $10676 = 0, $10677 = 0, $10678 = 0, $10679 = 0, $1068 = 0, $10680 = 0;
 var $10681 = 0, $10682 = 0, $10683 = 0, $10684 = 0, $10685 = 0, $10686 = 0, $10687 = 0, $10688 = 0, $10689 = 0, $1069 = 0, $10690 = 0, $10691 = 0, $10692 = 0, $10693 = 0, $10694 = 0, $10695 = 0, $10696 = 0, $10697 = 0, $10698 = 0, $10699 = 0;
 var $107 = 0, $1070 = 0, $10700 = 0, $10701 = 0, $10702 = 0, $10703 = 0, $10704 = 0, $10705 = 0, $10706 = 0, $10707 = 0, $10708 = 0, $10709 = 0, $1071 = 0, $10710 = 0, $10711 = 0, $10712 = 0, $10713 = 0, $10714 = 0, $10715 = 0, $10716 = 0;
 var $10717 = 0, $10718 = 0, $10719 = 0, $1072 = 0, $10720 = 0, $10721 = 0, $10722 = 0, $10723 = 0, $10724 = 0, $10725 = 0, $10726 = 0, $10727 = 0, $10728 = 0, $10729 = 0, $1073 = 0, $10730 = 0, $10731 = 0, $10732 = 0, $10733 = 0, $10734 = 0;
 var $10735 = 0, $10736 = 0, $10737 = 0, $10738 = 0, $10739 = 0, $1074 = 0, $10740 = 0, $10741 = 0, $10742 = 0, $10743 = 0, $10744 = 0, $10745 = 0, $10746 = 0, $10747 = 0, $10748 = 0, $10749 = 0, $1075 = 0, $10750 = 0, $10751 = 0, $10752 = 0;
 var $10753 = 0, $10754 = 0, $10755 = 0, $10756 = 0, $10757 = 0, $10758 = 0, $10759 = 0, $1076 = 0, $10760 = 0, $10761 = 0, $10762 = 0, $10763 = 0, $10764 = 0, $10765 = 0, $10766 = 0, $10767 = 0, $10768 = 0, $10769 = 0, $1077 = 0, $10770 = 0;
 var $10771 = 0, $10772 = 0, $10773 = 0, $10774 = 0, $10775 = 0, $10776 = 0, $10777 = 0, $10778 = 0, $10779 = 0, $1078 = 0, $10780 = 0, $10781 = 0, $10782 = 0, $10783 = 0, $10784 = 0, $10785 = 0, $10786 = 0, $10787 = 0, $10788 = 0, $10789 = 0;
 var $1079 = 0, $10790 = 0, $10791 = 0, $10792 = 0, $10793 = 0, $10794 = 0, $10795 = 0, $10796 = 0, $10797 = 0, $10798 = 0, $10799 = 0, $108 = 0, $1080 = 0, $10800 = 0, $10801 = 0, $10802 = 0, $10803 = 0, $10804 = 0, $10805 = 0, $10806 = 0;
 var $10807 = 0, $10808 = 0, $10809 = 0, $1081 = 0, $10810 = 0, $10811 = 0, $10812 = 0, $10813 = 0, $10814 = 0, $10815 = 0, $10816 = 0, $10817 = 0, $10818 = 0, $10819 = 0, $1082 = 0, $10820 = 0, $10821 = 0, $10822 = 0, $10823 = 0, $10824 = 0;
 var $10825 = 0, $10826 = 0, $10827 = 0, $10828 = 0, $10829 = 0, $1083 = 0, $10830 = 0, $10831 = 0, $10832 = 0, $10833 = 0, $10834 = 0, $10835 = 0, $10836 = 0, $10837 = 0, $10838 = 0, $10839 = 0, $1084 = 0, $10840 = 0, $10841 = 0, $10842 = 0;
 var $10843 = 0, $10844 = 0, $10845 = 0, $10846 = 0, $10847 = 0, $10848 = 0, $10849 = 0, $1085 = 0, $10850 = 0, $10851 = 0, $10852 = 0, $10853 = 0, $10854 = 0, $10855 = 0, $10856 = 0, $10857 = 0, $10858 = 0, $10859 = 0, $1086 = 0, $10860 = 0;
 var $10861 = 0, $10862 = 0, $10863 = 0, $10864 = 0, $10865 = 0, $10866 = 0, $10867 = 0, $10868 = 0, $10869 = 0, $1087 = 0, $10870 = 0, $10871 = 0, $10872 = 0, $10873 = 0, $10874 = 0, $10875 = 0, $10876 = 0, $10877 = 0, $10878 = 0, $10879 = 0;
 var $1088 = 0, $10880 = 0, $10881 = 0, $10882 = 0, $10883 = 0, $10884 = 0, $10885 = 0, $10886 = 0, $10887 = 0, $10888 = 0, $10889 = 0, $1089 = 0, $10890 = 0, $10891 = 0, $10892 = 0, $10893 = 0, $10894 = 0, $10895 = 0, $10896 = 0, $10897 = 0;
 var $10898 = 0, $10899 = 0, $109 = 0, $1090 = 0, $10900 = 0, $10901 = 0, $10902 = 0, $10903 = 0, $10904 = 0, $10905 = 0, $10906 = 0, $10907 = 0, $10908 = 0, $10909 = 0, $1091 = 0, $10910 = 0, $10911 = 0, $10912 = 0, $10913 = 0, $10914 = 0;
 var $10915 = 0, $10916 = 0, $10917 = 0, $10918 = 0, $10919 = 0, $1092 = 0, $10920 = 0, $10921 = 0, $10922 = 0, $10923 = 0, $10924 = 0, $10925 = 0, $10926 = 0, $10927 = 0, $10928 = 0, $10929 = 0, $1093 = 0, $10930 = 0, $10931 = 0, $10932 = 0;
 var $10933 = 0, $10934 = 0, $10935 = 0, $10936 = 0, $10937 = 0, $10938 = 0, $10939 = 0, $1094 = 0, $10940 = 0, $10941 = 0, $10942 = 0, $10943 = 0, $10944 = 0, $10945 = 0, $10946 = 0, $10947 = 0, $10948 = 0, $10949 = 0, $1095 = 0, $10950 = 0;
 var $10951 = 0, $10952 = 0, $10953 = 0, $10954 = 0, $10955 = 0, $10956 = 0, $10957 = 0, $10958 = 0, $10959 = 0, $1096 = 0, $10960 = 0, $10961 = 0, $10962 = 0, $10963 = 0, $10964 = 0, $10965 = 0, $10966 = 0, $10967 = 0, $10968 = 0, $10969 = 0;
 var $1097 = 0, $10970 = 0, $10971 = 0, $10972 = 0, $10973 = 0, $10974 = 0, $10975 = 0, $10976 = 0, $10977 = 0, $10978 = 0, $10979 = 0, $1098 = 0, $10980 = 0, $10981 = 0, $10982 = 0, $10983 = 0, $10984 = 0, $10985 = 0, $10986 = 0, $10987 = 0;
 var $10988 = 0, $10989 = 0, $1099 = 0, $10990 = 0, $10991 = 0, $10992 = 0, $10993 = 0, $10994 = 0, $10995 = 0, $10996 = 0, $10997 = 0, $10998 = 0, $10999 = 0, $11 = 0, $110 = 0, $1100 = 0, $11000 = 0, $11001 = 0, $11002 = 0, $11003 = 0;
 var $11004 = 0, $11005 = 0, $11006 = 0, $11007 = 0, $11008 = 0, $11009 = 0, $1101 = 0, $11010 = 0, $11011 = 0, $11012 = 0, $11013 = 0, $11014 = 0, $11015 = 0, $11016 = 0, $11017 = 0, $11018 = 0, $11019 = 0, $1102 = 0, $11020 = 0, $11021 = 0;
 var $11022 = 0, $11023 = 0, $11024 = 0, $11025 = 0, $11026 = 0, $11027 = 0, $11028 = 0, $11029 = 0, $1103 = 0, $11030 = 0, $11031 = 0, $11032 = 0, $11033 = 0, $11034 = 0, $11035 = 0, $11036 = 0, $11037 = 0, $11038 = 0, $11039 = 0, $1104 = 0;
 var $11040 = 0, $11041 = 0, $11042 = 0, $11043 = 0, $11044 = 0, $11045 = 0, $11046 = 0, $11047 = 0, $11048 = 0, $11049 = 0, $1105 = 0, $11050 = 0, $11051 = 0, $11052 = 0, $11053 = 0, $11054 = 0, $11055 = 0, $11056 = 0, $11057 = 0, $11058 = 0;
 var $11059 = 0, $1106 = 0, $11060 = 0, $11061 = 0, $11062 = 0, $11063 = 0, $11064 = 0, $11065 = 0, $11066 = 0, $11067 = 0, $11068 = 0, $11069 = 0, $1107 = 0, $11070 = 0, $11071 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0;
 var $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
 var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
 var $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0;
 var $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0;
 var $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0;
 var $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0;
 var $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0;
 var $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0;
 var $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0;
 var $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0;
 var $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0;
 var $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0;
 var $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0;
 var $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0;
 var $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0;
 var $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0;
 var $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0;
 var $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0;
 var $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0;
 var $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0;
 var $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0;
 var $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0;
 var $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0;
 var $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0;
 var $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0;
 var $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0;
 var $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0;
 var $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0;
 var $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0;
 var $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0;
 var $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0;
 var $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0;
 var $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0;
 var $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0;
 var $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0;
 var $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0;
 var $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0;
 var $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0;
 var $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0;
 var $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0;
 var $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0;
 var $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0;
 var $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0;
 var $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0;
 var $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0;
 var $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0;
 var $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0;
 var $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0;
 var $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0;
 var $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0;
 var $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0;
 var $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0;
 var $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0;
 var $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0;
 var $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0;
 var $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0;
 var $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0;
 var $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0;
 var $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0;
 var $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0;
 var $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0;
 var $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0;
 var $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0;
 var $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0;
 var $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0;
 var $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0;
 var $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0;
 var $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0;
 var $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0;
 var $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0;
 var $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0;
 var $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0;
 var $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0;
 var $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0;
 var $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0;
 var $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0;
 var $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0;
 var $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0;
 var $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0;
 var $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0;
 var $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0;
 var $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0;
 var $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0;
 var $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0;
 var $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0;
 var $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0;
 var $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0;
 var $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0;
 var $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0;
 var $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0;
 var $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0;
 var $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0;
 var $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0;
 var $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0;
 var $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0;
 var $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0;
 var $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0;
 var $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0;
 var $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0;
 var $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0;
 var $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0;
 var $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0;
 var $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0;
 var $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0;
 var $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0;
 var $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0;
 var $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0;
 var $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0;
 var $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0;
 var $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0;
 var $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0;
 var $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0;
 var $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0;
 var $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0;
 var $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0;
 var $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0;
 var $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0;
 var $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0;
 var $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0;
 var $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0;
 var $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0;
 var $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0;
 var $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0;
 var $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0;
 var $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0;
 var $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0;
 var $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0;
 var $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0;
 var $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0;
 var $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0;
 var $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0;
 var $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0;
 var $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0;
 var $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0;
 var $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0;
 var $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0;
 var $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0;
 var $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0;
 var $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0;
 var $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0;
 var $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0;
 var $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0;
 var $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0;
 var $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0;
 var $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0;
 var $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0;
 var $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0;
 var $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0;
 var $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0;
 var $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0;
 var $3813 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0;
 var $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0;
 var $385 = 0, $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0;
 var $3868 = 0, $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0;
 var $3886 = 0, $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0;
 var $3903 = 0, $3904 = 0, $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0;
 var $3921 = 0, $3922 = 0, $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0;
 var $394 = 0, $3940 = 0, $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0;
 var $3958 = 0, $3959 = 0, $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0;
 var $3976 = 0, $3977 = 0, $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0;
 var $3994 = 0, $3995 = 0, $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0, $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0;
 var $4010 = 0, $4011 = 0, $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0;
 var $4029 = 0, $403 = 0, $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0, $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0;
 var $4047 = 0, $4048 = 0, $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0, $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0, $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0;
 var $4065 = 0, $4066 = 0, $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0, $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0, $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0;
 var $4083 = 0, $4084 = 0, $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0, $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0, $4098 = 0, $4099 = 0, $41 = 0, $410 = 0;
 var $4100 = 0, $4101 = 0, $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0, $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0, $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0;
 var $4119 = 0, $412 = 0, $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0, $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0, $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0;
 var $4137 = 0, $4138 = 0, $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4148 = 0, $4149 = 0, $415 = 0, $4150 = 0, $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0;
 var $4155 = 0, $4156 = 0, $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0, $4166 = 0, $4167 = 0, $4168 = 0, $4169 = 0, $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0;
 var $4173 = 0, $4174 = 0, $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0, $4184 = 0, $4185 = 0, $4186 = 0, $4187 = 0, $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0;
 var $4191 = 0, $4192 = 0, $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0, $4201 = 0, $4202 = 0, $4203 = 0, $4204 = 0, $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0;
 var $4209 = 0, $421 = 0, $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0, $422 = 0, $4220 = 0, $4221 = 0, $4222 = 0, $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0;
 var $4227 = 0, $4228 = 0, $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0, $4238 = 0, $4239 = 0, $424 = 0, $4240 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0;
 var $4245 = 0, $4246 = 0, $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0, $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0, $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0;
 var $4263 = 0, $4264 = 0, $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0, $4274 = 0, $4275 = 0, $4276 = 0, $4277 = 0, $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0;
 var $4281 = 0, $4282 = 0, $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0, $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0, $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0;
 var $43 = 0, $430 = 0, $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0, $431 = 0, $4310 = 0, $4311 = 0, $4312 = 0, $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0;
 var $4317 = 0, $4318 = 0, $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0, $4328 = 0, $4329 = 0, $433 = 0, $4330 = 0, $4331 = 0, $4332 = 0, $4333 = 0, $4334 = 0;
 var $4335 = 0, $4336 = 0, $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0, $4345 = 0, $4346 = 0, $4347 = 0, $4348 = 0, $4349 = 0, $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0;
 var $4353 = 0, $4354 = 0, $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0, $4361 = 0, $4362 = 0, $4363 = 0, $4364 = 0, $4365 = 0, $4366 = 0, $4367 = 0, $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0;
 var $4371 = 0, $4372 = 0, $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0, $4381 = 0, $4382 = 0, $4383 = 0, $4384 = 0, $4385 = 0, $4386 = 0, $4387 = 0, $4388 = 0, $4389 = 0;
 var $439 = 0, $4390 = 0, $4391 = 0, $4392 = 0, $4393 = 0, $4394 = 0, $4395 = 0, $4396 = 0, $4397 = 0, $4398 = 0, $4399 = 0, $44 = 0, $440 = 0, $4400 = 0, $4401 = 0, $4402 = 0, $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0;
 var $4407 = 0, $4408 = 0, $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $4415 = 0, $4416 = 0, $4417 = 0, $4418 = 0, $4419 = 0, $442 = 0, $4420 = 0, $4421 = 0, $4422 = 0, $4423 = 0, $4424 = 0;
 var $4425 = 0, $4426 = 0, $4427 = 0, $4428 = 0, $4429 = 0, $443 = 0, $4430 = 0, $4431 = 0, $4432 = 0, $4433 = 0, $4434 = 0, $4435 = 0, $4436 = 0, $4437 = 0, $4438 = 0, $4439 = 0, $444 = 0, $4440 = 0, $4441 = 0, $4442 = 0;
 var $4443 = 0, $4444 = 0, $4445 = 0, $4446 = 0, $4447 = 0, $4448 = 0, $4449 = 0, $445 = 0, $4450 = 0, $4451 = 0, $4452 = 0, $4453 = 0, $4454 = 0, $4455 = 0, $4456 = 0, $4457 = 0, $4458 = 0, $4459 = 0, $446 = 0, $4460 = 0;
 var $4461 = 0, $4462 = 0, $4463 = 0, $4464 = 0, $4465 = 0, $4466 = 0, $4467 = 0, $4468 = 0, $4469 = 0, $447 = 0, $4470 = 0, $4471 = 0, $4472 = 0, $4473 = 0, $4474 = 0, $4475 = 0, $4476 = 0, $4477 = 0, $4478 = 0, $4479 = 0;
 var $448 = 0, $4480 = 0, $4481 = 0, $4482 = 0, $4483 = 0, $4484 = 0, $4485 = 0, $4486 = 0, $4487 = 0, $4488 = 0, $4489 = 0, $449 = 0, $4490 = 0, $4491 = 0, $4492 = 0, $4493 = 0, $4494 = 0, $4495 = 0, $4496 = 0, $4497 = 0;
 var $4498 = 0, $4499 = 0, $45 = 0, $450 = 0, $4500 = 0, $4501 = 0, $4502 = 0, $4503 = 0, $4504 = 0, $4505 = 0, $4506 = 0, $4507 = 0, $4508 = 0, $4509 = 0, $451 = 0, $4510 = 0, $4511 = 0, $4512 = 0, $4513 = 0, $4514 = 0;
 var $4515 = 0, $4516 = 0, $4517 = 0, $4518 = 0, $4519 = 0, $452 = 0, $4520 = 0, $4521 = 0, $4522 = 0, $4523 = 0, $4524 = 0, $4525 = 0, $4526 = 0, $4527 = 0, $4528 = 0, $4529 = 0, $453 = 0, $4530 = 0, $4531 = 0, $4532 = 0;
 var $4533 = 0, $4534 = 0, $4535 = 0, $4536 = 0, $4537 = 0, $4538 = 0, $4539 = 0, $454 = 0, $4540 = 0, $4541 = 0, $4542 = 0, $4543 = 0, $4544 = 0, $4545 = 0, $4546 = 0, $4547 = 0, $4548 = 0, $4549 = 0, $455 = 0, $4550 = 0;
 var $4551 = 0, $4552 = 0, $4553 = 0, $4554 = 0, $4555 = 0, $4556 = 0, $4557 = 0, $4558 = 0, $4559 = 0, $456 = 0, $4560 = 0, $4561 = 0, $4562 = 0, $4563 = 0, $4564 = 0, $4565 = 0, $4566 = 0, $4567 = 0, $4568 = 0, $4569 = 0;
 var $457 = 0, $4570 = 0, $4571 = 0, $4572 = 0, $4573 = 0, $4574 = 0, $4575 = 0, $4576 = 0, $4577 = 0, $4578 = 0, $4579 = 0, $458 = 0, $4580 = 0, $4581 = 0, $4582 = 0, $4583 = 0, $4584 = 0, $4585 = 0, $4586 = 0, $4587 = 0;
 var $4588 = 0, $4589 = 0, $459 = 0, $4590 = 0, $4591 = 0, $4592 = 0, $4593 = 0, $4594 = 0, $4595 = 0, $4596 = 0, $4597 = 0, $4598 = 0, $4599 = 0, $46 = 0, $460 = 0, $4600 = 0, $4601 = 0, $4602 = 0, $4603 = 0, $4604 = 0;
 var $4605 = 0, $4606 = 0, $4607 = 0, $4608 = 0, $4609 = 0, $461 = 0, $4610 = 0, $4611 = 0, $4612 = 0, $4613 = 0, $4614 = 0, $4615 = 0, $4616 = 0, $4617 = 0, $4618 = 0, $4619 = 0, $462 = 0, $4620 = 0, $4621 = 0, $4622 = 0;
 var $4623 = 0, $4624 = 0, $4625 = 0, $4626 = 0, $4627 = 0, $4628 = 0, $4629 = 0, $463 = 0, $4630 = 0, $4631 = 0, $4632 = 0, $4633 = 0, $4634 = 0, $4635 = 0, $4636 = 0, $4637 = 0, $4638 = 0, $4639 = 0, $464 = 0, $4640 = 0;
 var $4641 = 0, $4642 = 0, $4643 = 0, $4644 = 0, $4645 = 0, $4646 = 0, $4647 = 0, $4648 = 0, $4649 = 0, $465 = 0, $4650 = 0, $4651 = 0, $4652 = 0, $4653 = 0, $4654 = 0, $4655 = 0, $4656 = 0, $4657 = 0, $4658 = 0, $4659 = 0;
 var $466 = 0, $4660 = 0, $4661 = 0, $4662 = 0, $4663 = 0, $4664 = 0, $4665 = 0, $4666 = 0, $4667 = 0, $4668 = 0, $4669 = 0, $467 = 0, $4670 = 0, $4671 = 0, $4672 = 0, $4673 = 0, $4674 = 0, $4675 = 0, $4676 = 0, $4677 = 0;
 var $4678 = 0, $4679 = 0, $468 = 0, $4680 = 0, $4681 = 0, $4682 = 0, $4683 = 0, $4684 = 0, $4685 = 0, $4686 = 0, $4687 = 0, $4688 = 0, $4689 = 0, $469 = 0, $4690 = 0, $4691 = 0, $4692 = 0, $4693 = 0, $4694 = 0, $4695 = 0;
 var $4696 = 0, $4697 = 0, $4698 = 0, $4699 = 0, $47 = 0, $470 = 0, $4700 = 0, $4701 = 0, $4702 = 0, $4703 = 0, $4704 = 0, $4705 = 0, $4706 = 0, $4707 = 0, $4708 = 0, $4709 = 0, $471 = 0, $4710 = 0, $4711 = 0, $4712 = 0;
 var $4713 = 0, $4714 = 0, $4715 = 0, $4716 = 0, $4717 = 0, $4718 = 0, $4719 = 0, $472 = 0, $4720 = 0, $4721 = 0, $4722 = 0, $4723 = 0, $4724 = 0, $4725 = 0, $4726 = 0, $4727 = 0, $4728 = 0, $4729 = 0, $473 = 0, $4730 = 0;
 var $4731 = 0, $4732 = 0, $4733 = 0, $4734 = 0, $4735 = 0, $4736 = 0, $4737 = 0, $4738 = 0, $4739 = 0, $474 = 0, $4740 = 0, $4741 = 0, $4742 = 0, $4743 = 0, $4744 = 0, $4745 = 0, $4746 = 0, $4747 = 0, $4748 = 0, $4749 = 0;
 var $475 = 0, $4750 = 0, $4751 = 0, $4752 = 0, $4753 = 0, $4754 = 0, $4755 = 0, $4756 = 0, $4757 = 0, $4758 = 0, $4759 = 0, $476 = 0, $4760 = 0, $4761 = 0, $4762 = 0, $4763 = 0, $4764 = 0, $4765 = 0, $4766 = 0, $4767 = 0;
 var $4768 = 0, $4769 = 0, $477 = 0, $4770 = 0, $4771 = 0, $4772 = 0, $4773 = 0, $4774 = 0, $4775 = 0, $4776 = 0, $4777 = 0, $4778 = 0, $4779 = 0, $478 = 0, $4780 = 0, $4781 = 0, $4782 = 0, $4783 = 0, $4784 = 0, $4785 = 0;
 var $4786 = 0, $4787 = 0, $4788 = 0, $4789 = 0, $479 = 0, $4790 = 0, $4791 = 0, $4792 = 0, $4793 = 0, $4794 = 0, $4795 = 0, $4796 = 0, $4797 = 0, $4798 = 0, $4799 = 0, $48 = 0, $480 = 0, $4800 = 0, $4801 = 0, $4802 = 0;
 var $4803 = 0, $4804 = 0, $4805 = 0, $4806 = 0, $4807 = 0, $4808 = 0, $4809 = 0, $481 = 0, $4810 = 0, $4811 = 0, $4812 = 0, $4813 = 0, $4814 = 0, $4815 = 0, $4816 = 0, $4817 = 0, $4818 = 0, $4819 = 0, $482 = 0, $4820 = 0;
 var $4821 = 0, $4822 = 0, $4823 = 0, $4824 = 0, $4825 = 0, $4826 = 0, $4827 = 0, $4828 = 0, $4829 = 0, $483 = 0, $4830 = 0, $4831 = 0, $4832 = 0, $4833 = 0, $4834 = 0, $4835 = 0, $4836 = 0, $4837 = 0, $4838 = 0, $4839 = 0;
 var $484 = 0, $4840 = 0, $4841 = 0, $4842 = 0, $4843 = 0, $4844 = 0, $4845 = 0, $4846 = 0, $4847 = 0, $4848 = 0, $4849 = 0, $485 = 0, $4850 = 0, $4851 = 0, $4852 = 0, $4853 = 0, $4854 = 0, $4855 = 0, $4856 = 0, $4857 = 0;
 var $4858 = 0, $4859 = 0, $486 = 0, $4860 = 0, $4861 = 0, $4862 = 0, $4863 = 0, $4864 = 0, $4865 = 0, $4866 = 0, $4867 = 0, $4868 = 0, $4869 = 0, $487 = 0, $4870 = 0, $4871 = 0, $4872 = 0, $4873 = 0, $4874 = 0, $4875 = 0;
 var $4876 = 0, $4877 = 0, $4878 = 0, $4879 = 0, $488 = 0, $4880 = 0, $4881 = 0, $4882 = 0, $4883 = 0, $4884 = 0, $4885 = 0, $4886 = 0, $4887 = 0, $4888 = 0, $4889 = 0, $489 = 0, $4890 = 0, $4891 = 0, $4892 = 0, $4893 = 0;
 var $4894 = 0, $4895 = 0, $4896 = 0, $4897 = 0, $4898 = 0, $4899 = 0, $49 = 0, $490 = 0, $4900 = 0, $4901 = 0, $4902 = 0, $4903 = 0, $4904 = 0, $4905 = 0, $4906 = 0, $4907 = 0, $4908 = 0, $4909 = 0, $491 = 0, $4910 = 0;
 var $4911 = 0, $4912 = 0, $4913 = 0, $4914 = 0, $4915 = 0, $4916 = 0, $4917 = 0, $4918 = 0, $4919 = 0, $492 = 0, $4920 = 0, $4921 = 0, $4922 = 0, $4923 = 0, $4924 = 0, $4925 = 0, $4926 = 0, $4927 = 0, $4928 = 0, $4929 = 0;
 var $493 = 0, $4930 = 0, $4931 = 0, $4932 = 0, $4933 = 0, $4934 = 0, $4935 = 0, $4936 = 0, $4937 = 0, $4938 = 0, $4939 = 0, $494 = 0, $4940 = 0, $4941 = 0, $4942 = 0, $4943 = 0, $4944 = 0, $4945 = 0, $4946 = 0, $4947 = 0;
 var $4948 = 0, $4949 = 0, $495 = 0, $4950 = 0, $4951 = 0, $4952 = 0, $4953 = 0, $4954 = 0, $4955 = 0, $4956 = 0, $4957 = 0, $4958 = 0, $4959 = 0, $496 = 0, $4960 = 0, $4961 = 0, $4962 = 0, $4963 = 0, $4964 = 0, $4965 = 0;
 var $4966 = 0, $4967 = 0, $4968 = 0, $4969 = 0, $497 = 0, $4970 = 0, $4971 = 0, $4972 = 0, $4973 = 0, $4974 = 0, $4975 = 0, $4976 = 0, $4977 = 0, $4978 = 0, $4979 = 0, $498 = 0, $4980 = 0, $4981 = 0, $4982 = 0, $4983 = 0;
 var $4984 = 0, $4985 = 0, $4986 = 0, $4987 = 0, $4988 = 0, $4989 = 0, $499 = 0, $4990 = 0, $4991 = 0, $4992 = 0, $4993 = 0, $4994 = 0, $4995 = 0, $4996 = 0, $4997 = 0, $4998 = 0, $4999 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $5000 = 0, $5001 = 0, $5002 = 0, $5003 = 0, $5004 = 0, $5005 = 0, $5006 = 0, $5007 = 0, $5008 = 0, $5009 = 0, $501 = 0, $5010 = 0, $5011 = 0, $5012 = 0, $5013 = 0, $5014 = 0, $5015 = 0, $5016 = 0, $5017 = 0, $5018 = 0;
 var $5019 = 0, $502 = 0, $5020 = 0, $5021 = 0, $5022 = 0, $5023 = 0, $5024 = 0, $5025 = 0, $5026 = 0, $5027 = 0, $5028 = 0, $5029 = 0, $503 = 0, $5030 = 0, $5031 = 0, $5032 = 0, $5033 = 0, $5034 = 0, $5035 = 0, $5036 = 0;
 var $5037 = 0, $5038 = 0, $5039 = 0, $504 = 0, $5040 = 0, $5041 = 0, $5042 = 0, $5043 = 0, $5044 = 0, $5045 = 0, $5046 = 0, $5047 = 0, $5048 = 0, $5049 = 0, $505 = 0, $5050 = 0, $5051 = 0, $5052 = 0, $5053 = 0, $5054 = 0;
 var $5055 = 0, $5056 = 0, $5057 = 0, $5058 = 0, $5059 = 0, $506 = 0, $5060 = 0, $5061 = 0, $5062 = 0, $5063 = 0, $5064 = 0, $5065 = 0, $5066 = 0, $5067 = 0, $5068 = 0, $5069 = 0, $507 = 0, $5070 = 0, $5071 = 0, $5072 = 0;
 var $5073 = 0, $5074 = 0, $5075 = 0, $5076 = 0, $5077 = 0, $5078 = 0, $5079 = 0, $508 = 0, $5080 = 0, $5081 = 0, $5082 = 0, $5083 = 0, $5084 = 0, $5085 = 0, $5086 = 0, $5087 = 0, $5088 = 0, $5089 = 0, $509 = 0, $5090 = 0;
 var $5091 = 0, $5092 = 0, $5093 = 0, $5094 = 0, $5095 = 0, $5096 = 0, $5097 = 0, $5098 = 0, $5099 = 0, $51 = 0, $510 = 0, $5100 = 0, $5101 = 0, $5102 = 0, $5103 = 0, $5104 = 0, $5105 = 0, $5106 = 0, $5107 = 0, $5108 = 0;
 var $5109 = 0, $511 = 0, $5110 = 0, $5111 = 0, $5112 = 0, $5113 = 0, $5114 = 0, $5115 = 0, $5116 = 0, $5117 = 0, $5118 = 0, $5119 = 0, $512 = 0, $5120 = 0, $5121 = 0, $5122 = 0, $5123 = 0, $5124 = 0, $5125 = 0, $5126 = 0;
 var $5127 = 0, $5128 = 0, $5129 = 0, $513 = 0, $5130 = 0, $5131 = 0, $5132 = 0, $5133 = 0, $5134 = 0, $5135 = 0, $5136 = 0, $5137 = 0, $5138 = 0, $5139 = 0, $514 = 0, $5140 = 0, $5141 = 0, $5142 = 0, $5143 = 0, $5144 = 0;
 var $5145 = 0, $5146 = 0, $5147 = 0, $5148 = 0, $5149 = 0, $515 = 0, $5150 = 0, $5151 = 0, $5152 = 0, $5153 = 0, $5154 = 0, $5155 = 0, $5156 = 0, $5157 = 0, $5158 = 0, $5159 = 0, $516 = 0, $5160 = 0, $5161 = 0, $5162 = 0;
 var $5163 = 0, $5164 = 0, $5165 = 0, $5166 = 0, $5167 = 0, $5168 = 0, $5169 = 0, $517 = 0, $5170 = 0, $5171 = 0, $5172 = 0, $5173 = 0, $5174 = 0, $5175 = 0, $5176 = 0, $5177 = 0, $5178 = 0, $5179 = 0, $518 = 0, $5180 = 0;
 var $5181 = 0, $5182 = 0, $5183 = 0, $5184 = 0, $5185 = 0, $5186 = 0, $5187 = 0, $5188 = 0, $5189 = 0, $519 = 0, $5190 = 0, $5191 = 0, $5192 = 0, $5193 = 0, $5194 = 0, $5195 = 0, $5196 = 0, $5197 = 0, $5198 = 0, $5199 = 0;
 var $52 = 0, $520 = 0, $5200 = 0, $5201 = 0, $5202 = 0, $5203 = 0, $5204 = 0, $5205 = 0, $5206 = 0, $5207 = 0, $5208 = 0, $5209 = 0, $521 = 0, $5210 = 0, $5211 = 0, $5212 = 0, $5213 = 0, $5214 = 0, $5215 = 0, $5216 = 0;
 var $5217 = 0, $5218 = 0, $5219 = 0, $522 = 0, $5220 = 0, $5221 = 0, $5222 = 0, $5223 = 0, $5224 = 0, $5225 = 0, $5226 = 0, $5227 = 0, $5228 = 0, $5229 = 0, $523 = 0, $5230 = 0, $5231 = 0, $5232 = 0, $5233 = 0, $5234 = 0;
 var $5235 = 0, $5236 = 0, $5237 = 0, $5238 = 0, $5239 = 0, $524 = 0, $5240 = 0, $5241 = 0, $5242 = 0, $5243 = 0, $5244 = 0, $5245 = 0, $5246 = 0, $5247 = 0, $5248 = 0, $5249 = 0, $525 = 0, $5250 = 0, $5251 = 0, $5252 = 0;
 var $5253 = 0, $5254 = 0, $5255 = 0, $5256 = 0, $5257 = 0, $5258 = 0, $5259 = 0, $526 = 0, $5260 = 0, $5261 = 0, $5262 = 0, $5263 = 0, $5264 = 0, $5265 = 0, $5266 = 0, $5267 = 0, $5268 = 0, $5269 = 0, $527 = 0, $5270 = 0;
 var $5271 = 0, $5272 = 0, $5273 = 0, $5274 = 0, $5275 = 0, $5276 = 0, $5277 = 0, $5278 = 0, $5279 = 0, $528 = 0, $5280 = 0, $5281 = 0, $5282 = 0, $5283 = 0, $5284 = 0, $5285 = 0, $5286 = 0, $5287 = 0, $5288 = 0, $5289 = 0;
 var $529 = 0, $5290 = 0, $5291 = 0, $5292 = 0, $5293 = 0, $5294 = 0, $5295 = 0, $5296 = 0, $5297 = 0, $5298 = 0, $5299 = 0, $53 = 0, $530 = 0, $5300 = 0, $5301 = 0, $5302 = 0, $5303 = 0, $5304 = 0, $5305 = 0, $5306 = 0;
 var $5307 = 0, $5308 = 0, $5309 = 0, $531 = 0, $5310 = 0, $5311 = 0, $5312 = 0, $5313 = 0, $5314 = 0, $5315 = 0, $5316 = 0, $5317 = 0, $5318 = 0, $5319 = 0, $532 = 0, $5320 = 0, $5321 = 0, $5322 = 0, $5323 = 0, $5324 = 0;
 var $5325 = 0, $5326 = 0, $5327 = 0, $5328 = 0, $5329 = 0, $533 = 0, $5330 = 0, $5331 = 0, $5332 = 0, $5333 = 0, $5334 = 0, $5335 = 0, $5336 = 0, $5337 = 0, $5338 = 0, $5339 = 0, $534 = 0, $5340 = 0, $5341 = 0, $5342 = 0;
 var $5343 = 0, $5344 = 0, $5345 = 0, $5346 = 0, $5347 = 0, $5348 = 0, $5349 = 0, $535 = 0, $5350 = 0, $5351 = 0, $5352 = 0, $5353 = 0, $5354 = 0, $5355 = 0, $5356 = 0, $5357 = 0, $5358 = 0, $5359 = 0, $536 = 0, $5360 = 0;
 var $5361 = 0, $5362 = 0, $5363 = 0, $5364 = 0, $5365 = 0, $5366 = 0, $5367 = 0, $5368 = 0, $5369 = 0, $537 = 0, $5370 = 0, $5371 = 0, $5372 = 0, $5373 = 0, $5374 = 0, $5375 = 0, $5376 = 0, $5377 = 0, $5378 = 0, $5379 = 0;
 var $538 = 0, $5380 = 0, $5381 = 0, $5382 = 0, $5383 = 0, $5384 = 0, $5385 = 0, $5386 = 0, $5387 = 0, $5388 = 0, $5389 = 0, $539 = 0, $5390 = 0, $5391 = 0, $5392 = 0, $5393 = 0, $5394 = 0, $5395 = 0, $5396 = 0, $5397 = 0;
 var $5398 = 0, $5399 = 0, $54 = 0, $540 = 0, $5400 = 0, $5401 = 0, $5402 = 0, $5403 = 0, $5404 = 0, $5405 = 0, $5406 = 0, $5407 = 0, $5408 = 0, $5409 = 0, $541 = 0, $5410 = 0, $5411 = 0, $5412 = 0, $5413 = 0, $5414 = 0;
 var $5415 = 0, $5416 = 0, $5417 = 0, $5418 = 0, $5419 = 0, $542 = 0, $5420 = 0, $5421 = 0, $5422 = 0, $5423 = 0, $5424 = 0, $5425 = 0, $5426 = 0, $5427 = 0, $5428 = 0, $5429 = 0, $543 = 0, $5430 = 0, $5431 = 0, $5432 = 0;
 var $5433 = 0, $5434 = 0, $5435 = 0, $5436 = 0, $5437 = 0, $5438 = 0, $5439 = 0, $544 = 0, $5440 = 0, $5441 = 0, $5442 = 0, $5443 = 0, $5444 = 0, $5445 = 0, $5446 = 0, $5447 = 0, $5448 = 0, $5449 = 0, $545 = 0, $5450 = 0;
 var $5451 = 0, $5452 = 0, $5453 = 0, $5454 = 0, $5455 = 0, $5456 = 0, $5457 = 0, $5458 = 0, $5459 = 0, $546 = 0, $5460 = 0, $5461 = 0, $5462 = 0, $5463 = 0, $5464 = 0, $5465 = 0, $5466 = 0, $5467 = 0, $5468 = 0, $5469 = 0;
 var $547 = 0, $5470 = 0, $5471 = 0, $5472 = 0, $5473 = 0, $5474 = 0, $5475 = 0, $5476 = 0, $5477 = 0, $5478 = 0, $5479 = 0, $548 = 0, $5480 = 0, $5481 = 0, $5482 = 0, $5483 = 0, $5484 = 0, $5485 = 0, $5486 = 0, $5487 = 0;
 var $5488 = 0, $5489 = 0, $549 = 0, $5490 = 0, $5491 = 0, $5492 = 0, $5493 = 0, $5494 = 0, $5495 = 0, $5496 = 0, $5497 = 0, $5498 = 0, $5499 = 0, $55 = 0, $550 = 0, $5500 = 0, $5501 = 0, $5502 = 0, $5503 = 0, $5504 = 0;
 var $5505 = 0, $5506 = 0, $5507 = 0, $5508 = 0, $5509 = 0, $551 = 0, $5510 = 0, $5511 = 0, $5512 = 0, $5513 = 0, $5514 = 0, $5515 = 0, $5516 = 0, $5517 = 0, $5518 = 0, $5519 = 0, $552 = 0, $5520 = 0, $5521 = 0, $5522 = 0;
 var $5523 = 0, $5524 = 0, $5525 = 0, $5526 = 0, $5527 = 0, $5528 = 0, $5529 = 0, $553 = 0, $5530 = 0, $5531 = 0, $5532 = 0, $5533 = 0, $5534 = 0, $5535 = 0, $5536 = 0, $5537 = 0, $5538 = 0, $5539 = 0, $554 = 0, $5540 = 0;
 var $5541 = 0, $5542 = 0, $5543 = 0, $5544 = 0, $5545 = 0, $5546 = 0, $5547 = 0, $5548 = 0, $5549 = 0, $555 = 0, $5550 = 0, $5551 = 0, $5552 = 0, $5553 = 0, $5554 = 0, $5555 = 0, $5556 = 0, $5557 = 0, $5558 = 0, $5559 = 0;
 var $556 = 0, $5560 = 0, $5561 = 0, $5562 = 0, $5563 = 0, $5564 = 0, $5565 = 0, $5566 = 0, $5567 = 0, $5568 = 0, $5569 = 0, $557 = 0, $5570 = 0, $5571 = 0, $5572 = 0, $5573 = 0, $5574 = 0, $5575 = 0, $5576 = 0, $5577 = 0;
 var $5578 = 0, $5579 = 0, $558 = 0, $5580 = 0, $5581 = 0, $5582 = 0, $5583 = 0, $5584 = 0, $5585 = 0, $5586 = 0, $5587 = 0, $5588 = 0, $5589 = 0, $559 = 0, $5590 = 0, $5591 = 0, $5592 = 0, $5593 = 0, $5594 = 0, $5595 = 0;
 var $5596 = 0, $5597 = 0, $5598 = 0, $5599 = 0, $56 = 0, $560 = 0, $5600 = 0, $5601 = 0, $5602 = 0, $5603 = 0, $5604 = 0, $5605 = 0, $5606 = 0, $5607 = 0, $5608 = 0, $5609 = 0, $561 = 0, $5610 = 0, $5611 = 0, $5612 = 0;
 var $5613 = 0, $5614 = 0, $5615 = 0, $5616 = 0, $5617 = 0, $5618 = 0, $5619 = 0, $562 = 0, $5620 = 0, $5621 = 0, $5622 = 0, $5623 = 0, $5624 = 0, $5625 = 0, $5626 = 0, $5627 = 0, $5628 = 0, $5629 = 0, $563 = 0, $5630 = 0;
 var $5631 = 0, $5632 = 0, $5633 = 0, $5634 = 0, $5635 = 0, $5636 = 0, $5637 = 0, $5638 = 0, $5639 = 0, $564 = 0, $5640 = 0, $5641 = 0, $5642 = 0, $5643 = 0, $5644 = 0, $5645 = 0, $5646 = 0, $5647 = 0, $5648 = 0, $5649 = 0;
 var $565 = 0, $5650 = 0, $5651 = 0, $5652 = 0, $5653 = 0, $5654 = 0, $5655 = 0, $5656 = 0, $5657 = 0, $5658 = 0, $5659 = 0, $566 = 0, $5660 = 0, $5661 = 0, $5662 = 0, $5663 = 0, $5664 = 0, $5665 = 0, $5666 = 0, $5667 = 0;
 var $5668 = 0, $5669 = 0, $567 = 0, $5670 = 0, $5671 = 0, $5672 = 0, $5673 = 0, $5674 = 0, $5675 = 0, $5676 = 0, $5677 = 0, $5678 = 0, $5679 = 0, $568 = 0, $5680 = 0, $5681 = 0, $5682 = 0, $5683 = 0, $5684 = 0, $5685 = 0;
 var $5686 = 0, $5687 = 0, $5688 = 0, $5689 = 0, $569 = 0, $5690 = 0, $5691 = 0, $5692 = 0, $5693 = 0, $5694 = 0, $5695 = 0, $5696 = 0, $5697 = 0, $5698 = 0, $5699 = 0, $57 = 0, $570 = 0, $5700 = 0, $5701 = 0, $5702 = 0;
 var $5703 = 0, $5704 = 0, $5705 = 0, $5706 = 0, $5707 = 0, $5708 = 0, $5709 = 0, $571 = 0, $5710 = 0, $5711 = 0, $5712 = 0, $5713 = 0, $5714 = 0, $5715 = 0, $5716 = 0, $5717 = 0, $5718 = 0, $5719 = 0, $572 = 0, $5720 = 0;
 var $5721 = 0, $5722 = 0, $5723 = 0, $5724 = 0, $5725 = 0, $5726 = 0, $5727 = 0, $5728 = 0, $5729 = 0, $573 = 0, $5730 = 0, $5731 = 0, $5732 = 0, $5733 = 0, $5734 = 0, $5735 = 0, $5736 = 0, $5737 = 0, $5738 = 0, $5739 = 0;
 var $574 = 0, $5740 = 0, $5741 = 0, $5742 = 0, $5743 = 0, $5744 = 0, $5745 = 0, $5746 = 0, $5747 = 0, $5748 = 0, $5749 = 0, $575 = 0, $5750 = 0, $5751 = 0, $5752 = 0, $5753 = 0, $5754 = 0, $5755 = 0, $5756 = 0, $5757 = 0;
 var $5758 = 0, $5759 = 0, $576 = 0, $5760 = 0, $5761 = 0, $5762 = 0, $5763 = 0, $5764 = 0, $5765 = 0, $5766 = 0, $5767 = 0, $5768 = 0, $5769 = 0, $577 = 0, $5770 = 0, $5771 = 0, $5772 = 0, $5773 = 0, $5774 = 0, $5775 = 0;
 var $5776 = 0, $5777 = 0, $5778 = 0, $5779 = 0, $578 = 0, $5780 = 0, $5781 = 0, $5782 = 0, $5783 = 0, $5784 = 0, $5785 = 0, $5786 = 0, $5787 = 0, $5788 = 0, $5789 = 0, $579 = 0, $5790 = 0, $5791 = 0, $5792 = 0, $5793 = 0;
 var $5794 = 0, $5795 = 0, $5796 = 0, $5797 = 0, $5798 = 0, $5799 = 0, $58 = 0, $580 = 0, $5800 = 0, $5801 = 0, $5802 = 0, $5803 = 0, $5804 = 0, $5805 = 0, $5806 = 0, $5807 = 0, $5808 = 0, $5809 = 0, $581 = 0, $5810 = 0;
 var $5811 = 0, $5812 = 0, $5813 = 0, $5814 = 0, $5815 = 0, $5816 = 0, $5817 = 0, $5818 = 0, $5819 = 0, $582 = 0, $5820 = 0, $5821 = 0, $5822 = 0, $5823 = 0, $5824 = 0, $5825 = 0, $5826 = 0, $5827 = 0, $5828 = 0, $5829 = 0;
 var $583 = 0, $5830 = 0, $5831 = 0, $5832 = 0, $5833 = 0, $5834 = 0, $5835 = 0, $5836 = 0, $5837 = 0, $5838 = 0, $5839 = 0, $584 = 0, $5840 = 0, $5841 = 0, $5842 = 0, $5843 = 0, $5844 = 0, $5845 = 0, $5846 = 0, $5847 = 0;
 var $5848 = 0, $5849 = 0, $585 = 0, $5850 = 0, $5851 = 0, $5852 = 0, $5853 = 0, $5854 = 0, $5855 = 0, $5856 = 0, $5857 = 0, $5858 = 0, $5859 = 0, $586 = 0, $5860 = 0, $5861 = 0, $5862 = 0, $5863 = 0, $5864 = 0, $5865 = 0;
 var $5866 = 0, $5867 = 0, $5868 = 0, $5869 = 0, $587 = 0, $5870 = 0, $5871 = 0, $5872 = 0, $5873 = 0, $5874 = 0, $5875 = 0, $5876 = 0, $5877 = 0, $5878 = 0, $5879 = 0, $588 = 0, $5880 = 0, $5881 = 0, $5882 = 0, $5883 = 0;
 var $5884 = 0, $5885 = 0, $5886 = 0, $5887 = 0, $5888 = 0, $5889 = 0, $589 = 0, $5890 = 0, $5891 = 0, $5892 = 0, $5893 = 0, $5894 = 0, $5895 = 0, $5896 = 0, $5897 = 0, $5898 = 0, $5899 = 0, $59 = 0, $590 = 0, $5900 = 0;
 var $5901 = 0, $5902 = 0, $5903 = 0, $5904 = 0, $5905 = 0, $5906 = 0, $5907 = 0, $5908 = 0, $5909 = 0, $591 = 0, $5910 = 0, $5911 = 0, $5912 = 0, $5913 = 0, $5914 = 0, $5915 = 0, $5916 = 0, $5917 = 0, $5918 = 0, $5919 = 0;
 var $592 = 0, $5920 = 0, $5921 = 0, $5922 = 0, $5923 = 0, $5924 = 0, $5925 = 0, $5926 = 0, $5927 = 0, $5928 = 0, $5929 = 0, $593 = 0, $5930 = 0, $5931 = 0, $5932 = 0, $5933 = 0, $5934 = 0, $5935 = 0, $5936 = 0, $5937 = 0;
 var $5938 = 0, $5939 = 0, $594 = 0, $5940 = 0, $5941 = 0, $5942 = 0, $5943 = 0, $5944 = 0, $5945 = 0, $5946 = 0, $5947 = 0, $5948 = 0, $5949 = 0, $595 = 0, $5950 = 0, $5951 = 0, $5952 = 0, $5953 = 0, $5954 = 0, $5955 = 0;
 var $5956 = 0, $5957 = 0, $5958 = 0, $5959 = 0, $596 = 0, $5960 = 0, $5961 = 0, $5962 = 0, $5963 = 0, $5964 = 0, $5965 = 0, $5966 = 0, $5967 = 0, $5968 = 0, $5969 = 0, $597 = 0, $5970 = 0, $5971 = 0, $5972 = 0, $5973 = 0;
 var $5974 = 0, $5975 = 0, $5976 = 0, $5977 = 0, $5978 = 0, $5979 = 0, $598 = 0, $5980 = 0, $5981 = 0, $5982 = 0, $5983 = 0, $5984 = 0, $5985 = 0, $5986 = 0, $5987 = 0, $5988 = 0, $5989 = 0, $599 = 0, $5990 = 0, $5991 = 0;
 var $5992 = 0, $5993 = 0, $5994 = 0, $5995 = 0, $5996 = 0, $5997 = 0, $5998 = 0, $5999 = 0, $6 = 0, $60 = 0, $600 = 0, $6000 = 0, $6001 = 0, $6002 = 0, $6003 = 0, $6004 = 0, $6005 = 0, $6006 = 0, $6007 = 0, $6008 = 0;
 var $6009 = 0, $601 = 0, $6010 = 0, $6011 = 0, $6012 = 0, $6013 = 0, $6014 = 0, $6015 = 0, $6016 = 0, $6017 = 0, $6018 = 0, $6019 = 0, $602 = 0, $6020 = 0, $6021 = 0, $6022 = 0, $6023 = 0, $6024 = 0, $6025 = 0, $6026 = 0;
 var $6027 = 0, $6028 = 0, $6029 = 0, $603 = 0, $6030 = 0, $6031 = 0, $6032 = 0, $6033 = 0, $6034 = 0, $6035 = 0, $6036 = 0, $6037 = 0, $6038 = 0, $6039 = 0, $604 = 0, $6040 = 0, $6041 = 0, $6042 = 0, $6043 = 0, $6044 = 0;
 var $6045 = 0, $6046 = 0, $6047 = 0, $6048 = 0, $6049 = 0, $605 = 0, $6050 = 0, $6051 = 0, $6052 = 0, $6053 = 0, $6054 = 0, $6055 = 0, $6056 = 0, $6057 = 0, $6058 = 0, $6059 = 0, $606 = 0, $6060 = 0, $6061 = 0, $6062 = 0;
 var $6063 = 0, $6064 = 0, $6065 = 0, $6066 = 0, $6067 = 0, $6068 = 0, $6069 = 0, $607 = 0, $6070 = 0, $6071 = 0, $6072 = 0, $6073 = 0, $6074 = 0, $6075 = 0, $6076 = 0, $6077 = 0, $6078 = 0, $6079 = 0, $608 = 0, $6080 = 0;
 var $6081 = 0, $6082 = 0, $6083 = 0, $6084 = 0, $6085 = 0, $6086 = 0, $6087 = 0, $6088 = 0, $6089 = 0, $609 = 0, $6090 = 0, $6091 = 0, $6092 = 0, $6093 = 0, $6094 = 0, $6095 = 0, $6096 = 0, $6097 = 0, $6098 = 0, $6099 = 0;
 var $61 = 0, $610 = 0, $6100 = 0, $6101 = 0, $6102 = 0, $6103 = 0, $6104 = 0, $6105 = 0, $6106 = 0, $6107 = 0, $6108 = 0, $6109 = 0, $611 = 0, $6110 = 0, $6111 = 0, $6112 = 0, $6113 = 0, $6114 = 0, $6115 = 0, $6116 = 0;
 var $6117 = 0, $6118 = 0, $6119 = 0, $612 = 0, $6120 = 0, $6121 = 0, $6122 = 0, $6123 = 0, $6124 = 0, $6125 = 0, $6126 = 0, $6127 = 0, $6128 = 0, $6129 = 0, $613 = 0, $6130 = 0, $6131 = 0, $6132 = 0, $6133 = 0, $6134 = 0;
 var $6135 = 0, $6136 = 0, $6137 = 0, $6138 = 0, $6139 = 0, $614 = 0, $6140 = 0, $6141 = 0, $6142 = 0, $6143 = 0, $6144 = 0, $6145 = 0, $6146 = 0, $6147 = 0, $6148 = 0, $6149 = 0, $615 = 0, $6150 = 0, $6151 = 0, $6152 = 0;
 var $6153 = 0, $6154 = 0, $6155 = 0, $6156 = 0, $6157 = 0, $6158 = 0, $6159 = 0, $616 = 0, $6160 = 0, $6161 = 0, $6162 = 0, $6163 = 0, $6164 = 0, $6165 = 0, $6166 = 0, $6167 = 0, $6168 = 0, $6169 = 0, $617 = 0, $6170 = 0;
 var $6171 = 0, $6172 = 0, $6173 = 0, $6174 = 0, $6175 = 0, $6176 = 0, $6177 = 0, $6178 = 0, $6179 = 0, $618 = 0, $6180 = 0, $6181 = 0, $6182 = 0, $6183 = 0, $6184 = 0, $6185 = 0, $6186 = 0, $6187 = 0, $6188 = 0, $6189 = 0;
 var $619 = 0, $6190 = 0, $6191 = 0, $6192 = 0, $6193 = 0, $6194 = 0, $6195 = 0, $6196 = 0, $6197 = 0, $6198 = 0, $6199 = 0, $62 = 0, $620 = 0, $6200 = 0, $6201 = 0, $6202 = 0, $6203 = 0, $6204 = 0, $6205 = 0, $6206 = 0;
 var $6207 = 0, $6208 = 0, $6209 = 0, $621 = 0, $6210 = 0, $6211 = 0, $6212 = 0, $6213 = 0, $6214 = 0, $6215 = 0, $6216 = 0, $6217 = 0, $6218 = 0, $6219 = 0, $622 = 0, $6220 = 0, $6221 = 0, $6222 = 0, $6223 = 0, $6224 = 0;
 var $6225 = 0, $6226 = 0, $6227 = 0, $6228 = 0, $6229 = 0, $623 = 0, $6230 = 0, $6231 = 0, $6232 = 0, $6233 = 0, $6234 = 0, $6235 = 0, $6236 = 0, $6237 = 0, $6238 = 0, $6239 = 0, $624 = 0, $6240 = 0, $6241 = 0, $6242 = 0;
 var $6243 = 0, $6244 = 0, $6245 = 0, $6246 = 0, $6247 = 0, $6248 = 0, $6249 = 0, $625 = 0, $6250 = 0, $6251 = 0, $6252 = 0, $6253 = 0, $6254 = 0, $6255 = 0, $6256 = 0, $6257 = 0, $6258 = 0, $6259 = 0, $626 = 0, $6260 = 0;
 var $6261 = 0, $6262 = 0, $6263 = 0, $6264 = 0, $6265 = 0, $6266 = 0, $6267 = 0, $6268 = 0, $6269 = 0, $627 = 0, $6270 = 0, $6271 = 0, $6272 = 0, $6273 = 0, $6274 = 0, $6275 = 0, $6276 = 0, $6277 = 0, $6278 = 0, $6279 = 0;
 var $628 = 0, $6280 = 0, $6281 = 0, $6282 = 0, $6283 = 0, $6284 = 0, $6285 = 0, $6286 = 0, $6287 = 0, $6288 = 0, $6289 = 0, $629 = 0, $6290 = 0, $6291 = 0, $6292 = 0, $6293 = 0, $6294 = 0, $6295 = 0, $6296 = 0, $6297 = 0;
 var $6298 = 0, $6299 = 0, $63 = 0, $630 = 0, $6300 = 0, $6301 = 0, $6302 = 0, $6303 = 0, $6304 = 0, $6305 = 0, $6306 = 0, $6307 = 0, $6308 = 0, $6309 = 0, $631 = 0, $6310 = 0, $6311 = 0, $6312 = 0, $6313 = 0, $6314 = 0;
 var $6315 = 0, $6316 = 0, $6317 = 0, $6318 = 0, $6319 = 0, $632 = 0, $6320 = 0, $6321 = 0, $6322 = 0, $6323 = 0, $6324 = 0, $6325 = 0, $6326 = 0, $6327 = 0, $6328 = 0, $6329 = 0, $633 = 0, $6330 = 0, $6331 = 0, $6332 = 0;
 var $6333 = 0, $6334 = 0, $6335 = 0, $6336 = 0, $6337 = 0, $6338 = 0, $6339 = 0, $634 = 0, $6340 = 0, $6341 = 0, $6342 = 0, $6343 = 0, $6344 = 0, $6345 = 0, $6346 = 0, $6347 = 0, $6348 = 0, $6349 = 0, $635 = 0, $6350 = 0;
 var $6351 = 0, $6352 = 0, $6353 = 0, $6354 = 0, $6355 = 0, $6356 = 0, $6357 = 0, $6358 = 0, $6359 = 0, $636 = 0, $6360 = 0, $6361 = 0, $6362 = 0, $6363 = 0, $6364 = 0, $6365 = 0, $6366 = 0, $6367 = 0, $6368 = 0, $6369 = 0;
 var $637 = 0, $6370 = 0, $6371 = 0, $6372 = 0, $6373 = 0, $6374 = 0, $6375 = 0, $6376 = 0, $6377 = 0, $6378 = 0, $6379 = 0, $638 = 0, $6380 = 0, $6381 = 0, $6382 = 0, $6383 = 0, $6384 = 0, $6385 = 0, $6386 = 0, $6387 = 0;
 var $6388 = 0, $6389 = 0, $639 = 0, $6390 = 0, $6391 = 0, $6392 = 0, $6393 = 0, $6394 = 0, $6395 = 0, $6396 = 0, $6397 = 0, $6398 = 0, $6399 = 0, $64 = 0, $640 = 0, $6400 = 0, $6401 = 0, $6402 = 0, $6403 = 0, $6404 = 0;
 var $6405 = 0, $6406 = 0, $6407 = 0, $6408 = 0, $6409 = 0, $641 = 0, $6410 = 0, $6411 = 0, $6412 = 0, $6413 = 0, $6414 = 0, $6415 = 0, $6416 = 0, $6417 = 0, $6418 = 0, $6419 = 0, $642 = 0, $6420 = 0, $6421 = 0, $6422 = 0;
 var $6423 = 0, $6424 = 0, $6425 = 0, $6426 = 0, $6427 = 0, $6428 = 0, $6429 = 0, $643 = 0, $6430 = 0, $6431 = 0, $6432 = 0, $6433 = 0, $6434 = 0, $6435 = 0, $6436 = 0, $6437 = 0, $6438 = 0, $6439 = 0, $644 = 0, $6440 = 0;
 var $6441 = 0, $6442 = 0, $6443 = 0, $6444 = 0, $6445 = 0, $6446 = 0, $6447 = 0, $6448 = 0, $6449 = 0, $645 = 0, $6450 = 0, $6451 = 0, $6452 = 0, $6453 = 0, $6454 = 0, $6455 = 0, $6456 = 0, $6457 = 0, $6458 = 0, $6459 = 0;
 var $646 = 0, $6460 = 0, $6461 = 0, $6462 = 0, $6463 = 0, $6464 = 0, $6465 = 0, $6466 = 0, $6467 = 0, $6468 = 0, $6469 = 0, $647 = 0, $6470 = 0, $6471 = 0, $6472 = 0, $6473 = 0, $6474 = 0, $6475 = 0, $6476 = 0, $6477 = 0;
 var $6478 = 0, $6479 = 0, $648 = 0, $6480 = 0, $6481 = 0, $6482 = 0, $6483 = 0, $6484 = 0, $6485 = 0, $6486 = 0, $6487 = 0, $6488 = 0, $6489 = 0, $649 = 0, $6490 = 0, $6491 = 0, $6492 = 0, $6493 = 0, $6494 = 0, $6495 = 0;
 var $6496 = 0, $6497 = 0, $6498 = 0, $6499 = 0, $65 = 0, $650 = 0, $6500 = 0, $6501 = 0, $6502 = 0, $6503 = 0, $6504 = 0, $6505 = 0, $6506 = 0, $6507 = 0, $6508 = 0, $6509 = 0, $651 = 0, $6510 = 0, $6511 = 0, $6512 = 0;
 var $6513 = 0, $6514 = 0, $6515 = 0, $6516 = 0, $6517 = 0, $6518 = 0, $6519 = 0, $652 = 0, $6520 = 0, $6521 = 0, $6522 = 0, $6523 = 0, $6524 = 0, $6525 = 0, $6526 = 0, $6527 = 0, $6528 = 0, $6529 = 0, $653 = 0, $6530 = 0;
 var $6531 = 0, $6532 = 0, $6533 = 0, $6534 = 0, $6535 = 0, $6536 = 0, $6537 = 0, $6538 = 0, $6539 = 0, $654 = 0, $6540 = 0, $6541 = 0, $6542 = 0, $6543 = 0, $6544 = 0, $6545 = 0, $6546 = 0, $6547 = 0, $6548 = 0, $6549 = 0;
 var $655 = 0, $6550 = 0, $6551 = 0, $6552 = 0, $6553 = 0, $6554 = 0, $6555 = 0, $6556 = 0, $6557 = 0, $6558 = 0, $6559 = 0, $656 = 0, $6560 = 0, $6561 = 0, $6562 = 0, $6563 = 0, $6564 = 0, $6565 = 0, $6566 = 0, $6567 = 0;
 var $6568 = 0, $6569 = 0, $657 = 0, $6570 = 0, $6571 = 0, $6572 = 0, $6573 = 0, $6574 = 0, $6575 = 0, $6576 = 0, $6577 = 0, $6578 = 0, $6579 = 0, $658 = 0, $6580 = 0, $6581 = 0, $6582 = 0, $6583 = 0, $6584 = 0, $6585 = 0;
 var $6586 = 0, $6587 = 0, $6588 = 0, $6589 = 0, $659 = 0, $6590 = 0, $6591 = 0, $6592 = 0, $6593 = 0, $6594 = 0, $6595 = 0, $6596 = 0, $6597 = 0, $6598 = 0, $6599 = 0, $66 = 0, $660 = 0, $6600 = 0, $6601 = 0, $6602 = 0;
 var $6603 = 0, $6604 = 0, $6605 = 0, $6606 = 0, $6607 = 0, $6608 = 0, $6609 = 0, $661 = 0, $6610 = 0, $6611 = 0, $6612 = 0, $6613 = 0, $6614 = 0, $6615 = 0, $6616 = 0, $6617 = 0, $6618 = 0, $6619 = 0, $662 = 0, $6620 = 0;
 var $6621 = 0, $6622 = 0, $6623 = 0, $6624 = 0, $6625 = 0, $6626 = 0, $6627 = 0, $6628 = 0, $6629 = 0, $663 = 0, $6630 = 0, $6631 = 0, $6632 = 0, $6633 = 0, $6634 = 0, $6635 = 0, $6636 = 0, $6637 = 0, $6638 = 0, $6639 = 0;
 var $664 = 0, $6640 = 0, $6641 = 0, $6642 = 0, $6643 = 0, $6644 = 0, $6645 = 0, $6646 = 0, $6647 = 0, $6648 = 0, $6649 = 0, $665 = 0, $6650 = 0, $6651 = 0, $6652 = 0, $6653 = 0, $6654 = 0, $6655 = 0, $6656 = 0, $6657 = 0;
 var $6658 = 0, $6659 = 0, $666 = 0, $6660 = 0, $6661 = 0, $6662 = 0, $6663 = 0, $6664 = 0, $6665 = 0, $6666 = 0, $6667 = 0, $6668 = 0, $6669 = 0, $667 = 0, $6670 = 0, $6671 = 0, $6672 = 0, $6673 = 0, $6674 = 0, $6675 = 0;
 var $6676 = 0, $6677 = 0, $6678 = 0, $6679 = 0, $668 = 0, $6680 = 0, $6681 = 0, $6682 = 0, $6683 = 0, $6684 = 0, $6685 = 0, $6686 = 0, $6687 = 0, $6688 = 0, $6689 = 0, $669 = 0, $6690 = 0, $6691 = 0, $6692 = 0, $6693 = 0;
 var $6694 = 0, $6695 = 0, $6696 = 0, $6697 = 0, $6698 = 0, $6699 = 0, $67 = 0, $670 = 0, $6700 = 0, $6701 = 0, $6702 = 0, $6703 = 0, $6704 = 0, $6705 = 0, $6706 = 0, $6707 = 0, $6708 = 0, $6709 = 0, $671 = 0, $6710 = 0;
 var $6711 = 0, $6712 = 0, $6713 = 0, $6714 = 0, $6715 = 0, $6716 = 0, $6717 = 0, $6718 = 0, $6719 = 0, $672 = 0, $6720 = 0, $6721 = 0, $6722 = 0, $6723 = 0, $6724 = 0, $6725 = 0, $6726 = 0, $6727 = 0, $6728 = 0, $6729 = 0;
 var $673 = 0, $6730 = 0, $6731 = 0, $6732 = 0, $6733 = 0, $6734 = 0, $6735 = 0, $6736 = 0, $6737 = 0, $6738 = 0, $6739 = 0, $674 = 0, $6740 = 0, $6741 = 0, $6742 = 0, $6743 = 0, $6744 = 0, $6745 = 0, $6746 = 0, $6747 = 0;
 var $6748 = 0, $6749 = 0, $675 = 0, $6750 = 0, $6751 = 0, $6752 = 0, $6753 = 0, $6754 = 0, $6755 = 0, $6756 = 0, $6757 = 0, $6758 = 0, $6759 = 0, $676 = 0, $6760 = 0, $6761 = 0, $6762 = 0, $6763 = 0, $6764 = 0, $6765 = 0;
 var $6766 = 0, $6767 = 0, $6768 = 0, $6769 = 0, $677 = 0, $6770 = 0, $6771 = 0, $6772 = 0, $6773 = 0, $6774 = 0, $6775 = 0, $6776 = 0, $6777 = 0, $6778 = 0, $6779 = 0, $678 = 0, $6780 = 0, $6781 = 0, $6782 = 0, $6783 = 0;
 var $6784 = 0, $6785 = 0, $6786 = 0, $6787 = 0, $6788 = 0, $6789 = 0, $679 = 0, $6790 = 0, $6791 = 0, $6792 = 0, $6793 = 0, $6794 = 0, $6795 = 0, $6796 = 0, $6797 = 0, $6798 = 0, $6799 = 0, $68 = 0, $680 = 0, $6800 = 0;
 var $6801 = 0, $6802 = 0, $6803 = 0, $6804 = 0, $6805 = 0, $6806 = 0, $6807 = 0, $6808 = 0, $6809 = 0, $681 = 0, $6810 = 0, $6811 = 0, $6812 = 0, $6813 = 0, $6814 = 0, $6815 = 0, $6816 = 0, $6817 = 0, $6818 = 0, $6819 = 0;
 var $682 = 0, $6820 = 0, $6821 = 0, $6822 = 0, $6823 = 0, $6824 = 0, $6825 = 0, $6826 = 0, $6827 = 0, $6828 = 0, $6829 = 0, $683 = 0, $6830 = 0, $6831 = 0, $6832 = 0, $6833 = 0, $6834 = 0, $6835 = 0, $6836 = 0, $6837 = 0;
 var $6838 = 0, $6839 = 0, $684 = 0, $6840 = 0, $6841 = 0, $6842 = 0, $6843 = 0, $6844 = 0, $6845 = 0, $6846 = 0, $6847 = 0, $6848 = 0, $6849 = 0, $685 = 0, $6850 = 0, $6851 = 0, $6852 = 0, $6853 = 0, $6854 = 0, $6855 = 0;
 var $6856 = 0, $6857 = 0, $6858 = 0, $6859 = 0, $686 = 0, $6860 = 0, $6861 = 0, $6862 = 0, $6863 = 0, $6864 = 0, $6865 = 0, $6866 = 0, $6867 = 0, $6868 = 0, $6869 = 0, $687 = 0, $6870 = 0, $6871 = 0, $6872 = 0, $6873 = 0;
 var $6874 = 0, $6875 = 0, $6876 = 0, $6877 = 0, $6878 = 0, $6879 = 0, $688 = 0, $6880 = 0, $6881 = 0, $6882 = 0, $6883 = 0, $6884 = 0, $6885 = 0, $6886 = 0, $6887 = 0, $6888 = 0, $6889 = 0, $689 = 0, $6890 = 0, $6891 = 0;
 var $6892 = 0, $6893 = 0, $6894 = 0, $6895 = 0, $6896 = 0, $6897 = 0, $6898 = 0, $6899 = 0, $69 = 0, $690 = 0, $6900 = 0, $6901 = 0, $6902 = 0, $6903 = 0, $6904 = 0, $6905 = 0, $6906 = 0, $6907 = 0, $6908 = 0, $6909 = 0;
 var $691 = 0, $6910 = 0, $6911 = 0, $6912 = 0, $6913 = 0, $6914 = 0, $6915 = 0, $6916 = 0, $6917 = 0, $6918 = 0, $6919 = 0, $692 = 0, $6920 = 0, $6921 = 0, $6922 = 0, $6923 = 0, $6924 = 0, $6925 = 0, $6926 = 0, $6927 = 0;
 var $6928 = 0, $6929 = 0, $693 = 0, $6930 = 0, $6931 = 0, $6932 = 0, $6933 = 0, $6934 = 0, $6935 = 0, $6936 = 0, $6937 = 0, $6938 = 0, $6939 = 0, $694 = 0, $6940 = 0, $6941 = 0, $6942 = 0, $6943 = 0, $6944 = 0, $6945 = 0;
 var $6946 = 0, $6947 = 0, $6948 = 0, $6949 = 0, $695 = 0, $6950 = 0, $6951 = 0, $6952 = 0, $6953 = 0, $6954 = 0, $6955 = 0, $6956 = 0, $6957 = 0, $6958 = 0, $6959 = 0, $696 = 0, $6960 = 0, $6961 = 0, $6962 = 0, $6963 = 0;
 var $6964 = 0, $6965 = 0, $6966 = 0, $6967 = 0, $6968 = 0, $6969 = 0, $697 = 0, $6970 = 0, $6971 = 0, $6972 = 0, $6973 = 0, $6974 = 0, $6975 = 0, $6976 = 0, $6977 = 0, $6978 = 0, $6979 = 0, $698 = 0, $6980 = 0, $6981 = 0;
 var $6982 = 0, $6983 = 0, $6984 = 0, $6985 = 0, $6986 = 0, $6987 = 0, $6988 = 0, $6989 = 0, $699 = 0, $6990 = 0, $6991 = 0, $6992 = 0, $6993 = 0, $6994 = 0, $6995 = 0, $6996 = 0, $6997 = 0, $6998 = 0, $6999 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $7000 = 0, $7001 = 0, $7002 = 0, $7003 = 0, $7004 = 0, $7005 = 0, $7006 = 0, $7007 = 0, $7008 = 0, $7009 = 0, $701 = 0, $7010 = 0, $7011 = 0, $7012 = 0, $7013 = 0, $7014 = 0, $7015 = 0, $7016 = 0;
 var $7017 = 0, $7018 = 0, $7019 = 0, $702 = 0, $7020 = 0, $7021 = 0, $7022 = 0, $7023 = 0, $7024 = 0, $7025 = 0, $7026 = 0, $7027 = 0, $7028 = 0, $7029 = 0, $703 = 0, $7030 = 0, $7031 = 0, $7032 = 0, $7033 = 0, $7034 = 0;
 var $7035 = 0, $7036 = 0, $7037 = 0, $7038 = 0, $7039 = 0, $704 = 0, $7040 = 0, $7041 = 0, $7042 = 0, $7043 = 0, $7044 = 0, $7045 = 0, $7046 = 0, $7047 = 0, $7048 = 0, $7049 = 0, $705 = 0, $7050 = 0, $7051 = 0, $7052 = 0;
 var $7053 = 0, $7054 = 0, $7055 = 0, $7056 = 0, $7057 = 0, $7058 = 0, $7059 = 0, $706 = 0, $7060 = 0, $7061 = 0, $7062 = 0, $7063 = 0, $7064 = 0, $7065 = 0, $7066 = 0, $7067 = 0, $7068 = 0, $7069 = 0, $707 = 0, $7070 = 0;
 var $7071 = 0, $7072 = 0, $7073 = 0, $7074 = 0, $7075 = 0, $7076 = 0, $7077 = 0, $7078 = 0, $7079 = 0, $708 = 0, $7080 = 0, $7081 = 0, $7082 = 0, $7083 = 0, $7084 = 0, $7085 = 0, $7086 = 0, $7087 = 0, $7088 = 0, $7089 = 0;
 var $709 = 0, $7090 = 0, $7091 = 0, $7092 = 0, $7093 = 0, $7094 = 0, $7095 = 0, $7096 = 0, $7097 = 0, $7098 = 0, $7099 = 0, $71 = 0, $710 = 0, $7100 = 0, $7101 = 0, $7102 = 0, $7103 = 0, $7104 = 0, $7105 = 0, $7106 = 0;
 var $7107 = 0, $7108 = 0, $7109 = 0, $711 = 0, $7110 = 0, $7111 = 0, $7112 = 0, $7113 = 0, $7114 = 0, $7115 = 0, $7116 = 0, $7117 = 0, $7118 = 0, $7119 = 0, $712 = 0, $7120 = 0, $7121 = 0, $7122 = 0, $7123 = 0, $7124 = 0;
 var $7125 = 0, $7126 = 0, $7127 = 0, $7128 = 0, $7129 = 0, $713 = 0, $7130 = 0, $7131 = 0, $7132 = 0, $7133 = 0, $7134 = 0, $7135 = 0, $7136 = 0, $7137 = 0, $7138 = 0, $7139 = 0, $714 = 0, $7140 = 0, $7141 = 0, $7142 = 0;
 var $7143 = 0, $7144 = 0, $7145 = 0, $7146 = 0, $7147 = 0, $7148 = 0, $7149 = 0, $715 = 0, $7150 = 0, $7151 = 0, $7152 = 0, $7153 = 0, $7154 = 0, $7155 = 0, $7156 = 0, $7157 = 0, $7158 = 0, $7159 = 0, $716 = 0, $7160 = 0;
 var $7161 = 0, $7162 = 0, $7163 = 0, $7164 = 0, $7165 = 0, $7166 = 0, $7167 = 0, $7168 = 0, $7169 = 0, $717 = 0, $7170 = 0, $7171 = 0, $7172 = 0, $7173 = 0, $7174 = 0, $7175 = 0, $7176 = 0, $7177 = 0, $7178 = 0, $7179 = 0;
 var $718 = 0, $7180 = 0, $7181 = 0, $7182 = 0, $7183 = 0, $7184 = 0, $7185 = 0, $7186 = 0, $7187 = 0, $7188 = 0, $7189 = 0, $719 = 0, $7190 = 0, $7191 = 0, $7192 = 0, $7193 = 0, $7194 = 0, $7195 = 0, $7196 = 0, $7197 = 0;
 var $7198 = 0, $7199 = 0, $72 = 0, $720 = 0, $7200 = 0, $7201 = 0, $7202 = 0, $7203 = 0, $7204 = 0, $7205 = 0, $7206 = 0, $7207 = 0, $7208 = 0, $7209 = 0, $721 = 0, $7210 = 0, $7211 = 0, $7212 = 0, $7213 = 0, $7214 = 0;
 var $7215 = 0, $7216 = 0, $7217 = 0, $7218 = 0, $7219 = 0, $722 = 0, $7220 = 0, $7221 = 0, $7222 = 0, $7223 = 0, $7224 = 0, $7225 = 0, $7226 = 0, $7227 = 0, $7228 = 0, $7229 = 0, $723 = 0, $7230 = 0, $7231 = 0, $7232 = 0;
 var $7233 = 0, $7234 = 0, $7235 = 0, $7236 = 0, $7237 = 0, $7238 = 0, $7239 = 0, $724 = 0, $7240 = 0, $7241 = 0, $7242 = 0, $7243 = 0, $7244 = 0, $7245 = 0, $7246 = 0, $7247 = 0, $7248 = 0, $7249 = 0, $725 = 0, $7250 = 0;
 var $7251 = 0, $7252 = 0, $7253 = 0, $7254 = 0, $7255 = 0, $7256 = 0, $7257 = 0, $7258 = 0, $7259 = 0, $726 = 0, $7260 = 0, $7261 = 0, $7262 = 0, $7263 = 0, $7264 = 0, $7265 = 0, $7266 = 0, $7267 = 0, $7268 = 0, $7269 = 0;
 var $727 = 0, $7270 = 0, $7271 = 0, $7272 = 0, $7273 = 0, $7274 = 0, $7275 = 0, $7276 = 0, $7277 = 0, $7278 = 0, $7279 = 0, $728 = 0, $7280 = 0, $7281 = 0, $7282 = 0, $7283 = 0, $7284 = 0, $7285 = 0, $7286 = 0, $7287 = 0;
 var $7288 = 0, $7289 = 0, $729 = 0, $7290 = 0, $7291 = 0, $7292 = 0, $7293 = 0, $7294 = 0, $7295 = 0, $7296 = 0, $7297 = 0, $7298 = 0, $7299 = 0, $73 = 0, $730 = 0, $7300 = 0, $7301 = 0, $7302 = 0, $7303 = 0, $7304 = 0;
 var $7305 = 0, $7306 = 0, $7307 = 0, $7308 = 0, $7309 = 0, $731 = 0, $7310 = 0, $7311 = 0, $7312 = 0, $7313 = 0, $7314 = 0, $7315 = 0, $7316 = 0, $7317 = 0, $7318 = 0, $7319 = 0, $732 = 0, $7320 = 0, $7321 = 0, $7322 = 0;
 var $7323 = 0, $7324 = 0, $7325 = 0, $7326 = 0, $7327 = 0, $7328 = 0, $7329 = 0, $733 = 0, $7330 = 0, $7331 = 0, $7332 = 0, $7333 = 0, $7334 = 0, $7335 = 0, $7336 = 0, $7337 = 0, $7338 = 0, $7339 = 0, $734 = 0, $7340 = 0;
 var $7341 = 0, $7342 = 0, $7343 = 0, $7344 = 0, $7345 = 0, $7346 = 0, $7347 = 0, $7348 = 0, $7349 = 0, $735 = 0, $7350 = 0, $7351 = 0, $7352 = 0, $7353 = 0, $7354 = 0, $7355 = 0, $7356 = 0, $7357 = 0, $7358 = 0, $7359 = 0;
 var $736 = 0, $7360 = 0, $7361 = 0, $7362 = 0, $7363 = 0, $7364 = 0, $7365 = 0, $7366 = 0, $7367 = 0, $7368 = 0, $7369 = 0, $737 = 0, $7370 = 0, $7371 = 0, $7372 = 0, $7373 = 0, $7374 = 0, $7375 = 0, $7376 = 0, $7377 = 0;
 var $7378 = 0, $7379 = 0, $738 = 0, $7380 = 0, $7381 = 0, $7382 = 0, $7383 = 0, $7384 = 0, $7385 = 0, $7386 = 0, $7387 = 0, $7388 = 0, $7389 = 0, $739 = 0, $7390 = 0, $7391 = 0, $7392 = 0, $7393 = 0, $7394 = 0, $7395 = 0;
 var $7396 = 0, $7397 = 0, $7398 = 0, $7399 = 0, $74 = 0, $740 = 0, $7400 = 0, $7401 = 0, $7402 = 0, $7403 = 0, $7404 = 0, $7405 = 0, $7406 = 0, $7407 = 0, $7408 = 0, $7409 = 0, $741 = 0, $7410 = 0, $7411 = 0, $7412 = 0;
 var $7413 = 0, $7414 = 0, $7415 = 0, $7416 = 0, $7417 = 0, $7418 = 0, $7419 = 0, $742 = 0, $7420 = 0, $7421 = 0, $7422 = 0, $7423 = 0, $7424 = 0, $7425 = 0, $7426 = 0, $7427 = 0, $7428 = 0, $7429 = 0, $743 = 0, $7430 = 0;
 var $7431 = 0, $7432 = 0, $7433 = 0, $7434 = 0, $7435 = 0, $7436 = 0, $7437 = 0, $7438 = 0, $7439 = 0, $744 = 0, $7440 = 0, $7441 = 0, $7442 = 0, $7443 = 0, $7444 = 0, $7445 = 0, $7446 = 0, $7447 = 0, $7448 = 0, $7449 = 0;
 var $745 = 0, $7450 = 0, $7451 = 0, $7452 = 0, $7453 = 0, $7454 = 0, $7455 = 0, $7456 = 0, $7457 = 0, $7458 = 0, $7459 = 0, $746 = 0, $7460 = 0, $7461 = 0, $7462 = 0, $7463 = 0, $7464 = 0, $7465 = 0, $7466 = 0, $7467 = 0;
 var $7468 = 0, $7469 = 0, $747 = 0, $7470 = 0, $7471 = 0, $7472 = 0, $7473 = 0, $7474 = 0, $7475 = 0, $7476 = 0, $7477 = 0, $7478 = 0, $7479 = 0, $748 = 0, $7480 = 0, $7481 = 0, $7482 = 0, $7483 = 0, $7484 = 0, $7485 = 0;
 var $7486 = 0, $7487 = 0, $7488 = 0, $7489 = 0, $749 = 0, $7490 = 0, $7491 = 0, $7492 = 0, $7493 = 0, $7494 = 0, $7495 = 0, $7496 = 0, $7497 = 0, $7498 = 0, $7499 = 0, $75 = 0, $750 = 0, $7500 = 0, $7501 = 0, $7502 = 0;
 var $7503 = 0, $7504 = 0, $7505 = 0, $7506 = 0, $7507 = 0, $7508 = 0, $7509 = 0, $751 = 0, $7510 = 0, $7511 = 0, $7512 = 0, $7513 = 0, $7514 = 0, $7515 = 0, $7516 = 0, $7517 = 0, $7518 = 0, $7519 = 0, $752 = 0, $7520 = 0;
 var $7521 = 0, $7522 = 0, $7523 = 0, $7524 = 0, $7525 = 0, $7526 = 0, $7527 = 0, $7528 = 0, $7529 = 0, $753 = 0, $7530 = 0, $7531 = 0, $7532 = 0, $7533 = 0, $7534 = 0, $7535 = 0, $7536 = 0, $7537 = 0, $7538 = 0, $7539 = 0;
 var $754 = 0, $7540 = 0, $7541 = 0, $7542 = 0, $7543 = 0, $7544 = 0, $7545 = 0, $7546 = 0, $7547 = 0, $7548 = 0, $7549 = 0, $755 = 0, $7550 = 0, $7551 = 0, $7552 = 0, $7553 = 0, $7554 = 0, $7555 = 0, $7556 = 0, $7557 = 0;
 var $7558 = 0, $7559 = 0, $756 = 0, $7560 = 0, $7561 = 0, $7562 = 0, $7563 = 0, $7564 = 0, $7565 = 0, $7566 = 0, $7567 = 0, $7568 = 0, $7569 = 0, $757 = 0, $7570 = 0, $7571 = 0, $7572 = 0, $7573 = 0, $7574 = 0, $7575 = 0;
 var $7576 = 0, $7577 = 0, $7578 = 0, $7579 = 0, $758 = 0, $7580 = 0, $7581 = 0, $7582 = 0, $7583 = 0, $7584 = 0, $7585 = 0, $7586 = 0, $7587 = 0, $7588 = 0, $7589 = 0, $759 = 0, $7590 = 0, $7591 = 0, $7592 = 0, $7593 = 0;
 var $7594 = 0, $7595 = 0, $7596 = 0, $7597 = 0, $7598 = 0, $7599 = 0, $76 = 0, $760 = 0, $7600 = 0, $7601 = 0, $7602 = 0, $7603 = 0, $7604 = 0, $7605 = 0, $7606 = 0, $7607 = 0, $7608 = 0, $7609 = 0, $761 = 0, $7610 = 0;
 var $7611 = 0, $7612 = 0, $7613 = 0, $7614 = 0, $7615 = 0, $7616 = 0, $7617 = 0, $7618 = 0, $7619 = 0, $762 = 0, $7620 = 0, $7621 = 0, $7622 = 0, $7623 = 0, $7624 = 0, $7625 = 0, $7626 = 0, $7627 = 0, $7628 = 0, $7629 = 0;
 var $763 = 0, $7630 = 0, $7631 = 0, $7632 = 0, $7633 = 0, $7634 = 0, $7635 = 0, $7636 = 0, $7637 = 0, $7638 = 0, $7639 = 0, $764 = 0, $7640 = 0, $7641 = 0, $7642 = 0, $7643 = 0, $7644 = 0, $7645 = 0, $7646 = 0, $7647 = 0;
 var $7648 = 0, $7649 = 0, $765 = 0, $7650 = 0, $7651 = 0, $7652 = 0, $7653 = 0, $7654 = 0, $7655 = 0, $7656 = 0, $7657 = 0, $7658 = 0, $7659 = 0, $766 = 0, $7660 = 0, $7661 = 0, $7662 = 0, $7663 = 0, $7664 = 0, $7665 = 0;
 var $7666 = 0, $7667 = 0, $7668 = 0, $7669 = 0, $767 = 0, $7670 = 0, $7671 = 0, $7672 = 0, $7673 = 0, $7674 = 0, $7675 = 0, $7676 = 0, $7677 = 0, $7678 = 0, $7679 = 0, $768 = 0, $7680 = 0, $7681 = 0, $7682 = 0, $7683 = 0;
 var $7684 = 0, $7685 = 0, $7686 = 0, $7687 = 0, $7688 = 0, $7689 = 0, $769 = 0, $7690 = 0, $7691 = 0, $7692 = 0, $7693 = 0, $7694 = 0, $7695 = 0, $7696 = 0, $7697 = 0, $7698 = 0, $7699 = 0, $77 = 0, $770 = 0, $7700 = 0;
 var $7701 = 0, $7702 = 0, $7703 = 0, $7704 = 0, $7705 = 0, $7706 = 0, $7707 = 0, $7708 = 0, $7709 = 0, $771 = 0, $7710 = 0, $7711 = 0, $7712 = 0, $7713 = 0, $7714 = 0, $7715 = 0, $7716 = 0, $7717 = 0, $7718 = 0, $7719 = 0;
 var $772 = 0, $7720 = 0, $7721 = 0, $7722 = 0, $7723 = 0, $7724 = 0, $7725 = 0, $7726 = 0, $7727 = 0, $7728 = 0, $7729 = 0, $773 = 0, $7730 = 0, $7731 = 0, $7732 = 0, $7733 = 0, $7734 = 0, $7735 = 0, $7736 = 0, $7737 = 0;
 var $7738 = 0, $7739 = 0, $774 = 0, $7740 = 0, $7741 = 0, $7742 = 0, $7743 = 0, $7744 = 0, $7745 = 0, $7746 = 0, $7747 = 0, $7748 = 0, $7749 = 0, $775 = 0, $7750 = 0, $7751 = 0, $7752 = 0, $7753 = 0, $7754 = 0, $7755 = 0;
 var $7756 = 0, $7757 = 0, $7758 = 0, $7759 = 0, $776 = 0, $7760 = 0, $7761 = 0, $7762 = 0, $7763 = 0, $7764 = 0, $7765 = 0, $7766 = 0, $7767 = 0, $7768 = 0, $7769 = 0, $777 = 0, $7770 = 0, $7771 = 0, $7772 = 0, $7773 = 0;
 var $7774 = 0, $7775 = 0, $7776 = 0, $7777 = 0, $7778 = 0, $7779 = 0, $778 = 0, $7780 = 0, $7781 = 0, $7782 = 0, $7783 = 0, $7784 = 0, $7785 = 0, $7786 = 0, $7787 = 0, $7788 = 0, $7789 = 0, $779 = 0, $7790 = 0, $7791 = 0;
 var $7792 = 0, $7793 = 0, $7794 = 0, $7795 = 0, $7796 = 0, $7797 = 0, $7798 = 0, $7799 = 0, $78 = 0, $780 = 0, $7800 = 0, $7801 = 0, $7802 = 0, $7803 = 0, $7804 = 0, $7805 = 0, $7806 = 0, $7807 = 0, $7808 = 0, $7809 = 0;
 var $781 = 0, $7810 = 0, $7811 = 0, $7812 = 0, $7813 = 0, $7814 = 0, $7815 = 0, $7816 = 0, $7817 = 0, $7818 = 0, $7819 = 0, $782 = 0, $7820 = 0, $7821 = 0, $7822 = 0, $7823 = 0, $7824 = 0, $7825 = 0, $7826 = 0, $7827 = 0;
 var $7828 = 0, $7829 = 0, $783 = 0, $7830 = 0, $7831 = 0, $7832 = 0, $7833 = 0, $7834 = 0, $7835 = 0, $7836 = 0, $7837 = 0, $7838 = 0, $7839 = 0, $784 = 0, $7840 = 0, $7841 = 0, $7842 = 0, $7843 = 0, $7844 = 0, $7845 = 0;
 var $7846 = 0, $7847 = 0, $7848 = 0, $7849 = 0, $785 = 0, $7850 = 0, $7851 = 0, $7852 = 0, $7853 = 0, $7854 = 0, $7855 = 0, $7856 = 0, $7857 = 0, $7858 = 0, $7859 = 0, $786 = 0, $7860 = 0, $7861 = 0, $7862 = 0, $7863 = 0;
 var $7864 = 0, $7865 = 0, $7866 = 0, $7867 = 0, $7868 = 0, $7869 = 0, $787 = 0, $7870 = 0, $7871 = 0, $7872 = 0, $7873 = 0, $7874 = 0, $7875 = 0, $7876 = 0, $7877 = 0, $7878 = 0, $7879 = 0, $788 = 0, $7880 = 0, $7881 = 0;
 var $7882 = 0, $7883 = 0, $7884 = 0, $7885 = 0, $7886 = 0, $7887 = 0, $7888 = 0, $7889 = 0, $789 = 0, $7890 = 0, $7891 = 0, $7892 = 0, $7893 = 0, $7894 = 0, $7895 = 0, $7896 = 0, $7897 = 0, $7898 = 0, $7899 = 0, $79 = 0;
 var $790 = 0, $7900 = 0, $7901 = 0, $7902 = 0, $7903 = 0, $7904 = 0, $7905 = 0, $7906 = 0, $7907 = 0, $7908 = 0, $7909 = 0, $791 = 0, $7910 = 0, $7911 = 0, $7912 = 0, $7913 = 0, $7914 = 0, $7915 = 0, $7916 = 0, $7917 = 0;
 var $7918 = 0, $7919 = 0, $792 = 0, $7920 = 0, $7921 = 0, $7922 = 0, $7923 = 0, $7924 = 0, $7925 = 0, $7926 = 0, $7927 = 0, $7928 = 0, $7929 = 0, $793 = 0, $7930 = 0, $7931 = 0, $7932 = 0, $7933 = 0, $7934 = 0, $7935 = 0;
 var $7936 = 0, $7937 = 0, $7938 = 0, $7939 = 0, $794 = 0, $7940 = 0, $7941 = 0, $7942 = 0, $7943 = 0, $7944 = 0, $7945 = 0, $7946 = 0, $7947 = 0, $7948 = 0, $7949 = 0, $795 = 0, $7950 = 0, $7951 = 0, $7952 = 0, $7953 = 0;
 var $7954 = 0, $7955 = 0, $7956 = 0, $7957 = 0, $7958 = 0, $7959 = 0, $796 = 0, $7960 = 0, $7961 = 0, $7962 = 0, $7963 = 0, $7964 = 0, $7965 = 0, $7966 = 0, $7967 = 0, $7968 = 0, $7969 = 0, $797 = 0, $7970 = 0, $7971 = 0;
 var $7972 = 0, $7973 = 0, $7974 = 0, $7975 = 0, $7976 = 0, $7977 = 0, $7978 = 0, $7979 = 0, $798 = 0, $7980 = 0, $7981 = 0, $7982 = 0, $7983 = 0, $7984 = 0, $7985 = 0, $7986 = 0, $7987 = 0, $7988 = 0, $7989 = 0, $799 = 0;
 var $7990 = 0, $7991 = 0, $7992 = 0, $7993 = 0, $7994 = 0, $7995 = 0, $7996 = 0, $7997 = 0, $7998 = 0, $7999 = 0, $8 = 0, $80 = 0, $800 = 0, $8000 = 0, $8001 = 0, $8002 = 0, $8003 = 0, $8004 = 0, $8005 = 0, $8006 = 0;
 var $8007 = 0, $8008 = 0, $8009 = 0, $801 = 0, $8010 = 0, $8011 = 0, $8012 = 0, $8013 = 0, $8014 = 0, $8015 = 0, $8016 = 0, $8017 = 0, $8018 = 0, $8019 = 0, $802 = 0, $8020 = 0, $8021 = 0, $8022 = 0, $8023 = 0, $8024 = 0;
 var $8025 = 0, $8026 = 0, $8027 = 0, $8028 = 0, $8029 = 0, $803 = 0, $8030 = 0, $8031 = 0, $8032 = 0, $8033 = 0, $8034 = 0, $8035 = 0, $8036 = 0, $8037 = 0, $8038 = 0, $8039 = 0, $804 = 0, $8040 = 0, $8041 = 0, $8042 = 0;
 var $8043 = 0, $8044 = 0, $8045 = 0, $8046 = 0, $8047 = 0, $8048 = 0, $8049 = 0, $805 = 0, $8050 = 0, $8051 = 0, $8052 = 0, $8053 = 0, $8054 = 0, $8055 = 0, $8056 = 0, $8057 = 0, $8058 = 0, $8059 = 0, $806 = 0, $8060 = 0;
 var $8061 = 0, $8062 = 0, $8063 = 0, $8064 = 0, $8065 = 0, $8066 = 0, $8067 = 0, $8068 = 0, $8069 = 0, $807 = 0, $8070 = 0, $8071 = 0, $8072 = 0, $8073 = 0, $8074 = 0, $8075 = 0, $8076 = 0, $8077 = 0, $8078 = 0, $8079 = 0;
 var $808 = 0, $8080 = 0, $8081 = 0, $8082 = 0, $8083 = 0, $8084 = 0, $8085 = 0, $8086 = 0, $8087 = 0, $8088 = 0, $8089 = 0, $809 = 0, $8090 = 0, $8091 = 0, $8092 = 0, $8093 = 0, $8094 = 0, $8095 = 0, $8096 = 0, $8097 = 0;
 var $8098 = 0, $8099 = 0, $81 = 0, $810 = 0, $8100 = 0, $8101 = 0, $8102 = 0, $8103 = 0, $8104 = 0, $8105 = 0, $8106 = 0, $8107 = 0, $8108 = 0, $8109 = 0, $811 = 0, $8110 = 0, $8111 = 0, $8112 = 0, $8113 = 0, $8114 = 0;
 var $8115 = 0, $8116 = 0, $8117 = 0, $8118 = 0, $8119 = 0, $812 = 0, $8120 = 0, $8121 = 0, $8122 = 0, $8123 = 0, $8124 = 0, $8125 = 0, $8126 = 0, $8127 = 0, $8128 = 0, $8129 = 0, $813 = 0, $8130 = 0, $8131 = 0, $8132 = 0;
 var $8133 = 0, $8134 = 0, $8135 = 0, $8136 = 0, $8137 = 0, $8138 = 0, $8139 = 0, $814 = 0, $8140 = 0, $8141 = 0, $8142 = 0, $8143 = 0, $8144 = 0, $8145 = 0, $8146 = 0, $8147 = 0, $8148 = 0, $8149 = 0, $815 = 0, $8150 = 0;
 var $8151 = 0, $8152 = 0, $8153 = 0, $8154 = 0, $8155 = 0, $8156 = 0, $8157 = 0, $8158 = 0, $8159 = 0, $816 = 0, $8160 = 0, $8161 = 0, $8162 = 0, $8163 = 0, $8164 = 0, $8165 = 0, $8166 = 0, $8167 = 0, $8168 = 0, $8169 = 0;
 var $817 = 0, $8170 = 0, $8171 = 0, $8172 = 0, $8173 = 0, $8174 = 0, $8175 = 0, $8176 = 0, $8177 = 0, $8178 = 0, $8179 = 0, $818 = 0, $8180 = 0, $8181 = 0, $8182 = 0, $8183 = 0, $8184 = 0, $8185 = 0, $8186 = 0, $8187 = 0;
 var $8188 = 0, $8189 = 0, $819 = 0, $8190 = 0, $8191 = 0, $8192 = 0, $8193 = 0, $8194 = 0, $8195 = 0, $8196 = 0, $8197 = 0, $8198 = 0, $8199 = 0, $82 = 0, $820 = 0, $8200 = 0, $8201 = 0, $8202 = 0, $8203 = 0, $8204 = 0;
 var $8205 = 0, $8206 = 0, $8207 = 0, $8208 = 0, $8209 = 0, $821 = 0, $8210 = 0, $8211 = 0, $8212 = 0, $8213 = 0, $8214 = 0, $8215 = 0, $8216 = 0, $8217 = 0, $8218 = 0, $8219 = 0, $822 = 0, $8220 = 0, $8221 = 0, $8222 = 0;
 var $8223 = 0, $8224 = 0, $8225 = 0, $8226 = 0, $8227 = 0, $8228 = 0, $8229 = 0, $823 = 0, $8230 = 0, $8231 = 0, $8232 = 0, $8233 = 0, $8234 = 0, $8235 = 0, $8236 = 0, $8237 = 0, $8238 = 0, $8239 = 0, $824 = 0, $8240 = 0;
 var $8241 = 0, $8242 = 0, $8243 = 0, $8244 = 0, $8245 = 0, $8246 = 0, $8247 = 0, $8248 = 0, $8249 = 0, $825 = 0, $8250 = 0, $8251 = 0, $8252 = 0, $8253 = 0, $8254 = 0, $8255 = 0, $8256 = 0, $8257 = 0, $8258 = 0, $8259 = 0;
 var $826 = 0, $8260 = 0, $8261 = 0, $8262 = 0, $8263 = 0, $8264 = 0, $8265 = 0, $8266 = 0, $8267 = 0, $8268 = 0, $8269 = 0, $827 = 0, $8270 = 0, $8271 = 0, $8272 = 0, $8273 = 0, $8274 = 0, $8275 = 0, $8276 = 0, $8277 = 0;
 var $8278 = 0, $8279 = 0, $828 = 0, $8280 = 0, $8281 = 0, $8282 = 0, $8283 = 0, $8284 = 0, $8285 = 0, $8286 = 0, $8287 = 0, $8288 = 0, $8289 = 0, $829 = 0, $8290 = 0, $8291 = 0, $8292 = 0, $8293 = 0, $8294 = 0, $8295 = 0;
 var $8296 = 0, $8297 = 0, $8298 = 0, $8299 = 0, $83 = 0, $830 = 0, $8300 = 0, $8301 = 0, $8302 = 0, $8303 = 0, $8304 = 0, $8305 = 0, $8306 = 0, $8307 = 0, $8308 = 0, $8309 = 0, $831 = 0, $8310 = 0, $8311 = 0, $8312 = 0;
 var $8313 = 0, $8314 = 0, $8315 = 0, $8316 = 0, $8317 = 0, $8318 = 0, $8319 = 0, $832 = 0, $8320 = 0, $8321 = 0, $8322 = 0, $8323 = 0, $8324 = 0, $8325 = 0, $8326 = 0, $8327 = 0, $8328 = 0, $8329 = 0, $833 = 0, $8330 = 0;
 var $8331 = 0, $8332 = 0, $8333 = 0, $8334 = 0, $8335 = 0, $8336 = 0, $8337 = 0, $8338 = 0, $8339 = 0, $834 = 0, $8340 = 0, $8341 = 0, $8342 = 0, $8343 = 0, $8344 = 0, $8345 = 0, $8346 = 0, $8347 = 0, $8348 = 0, $8349 = 0;
 var $835 = 0, $8350 = 0, $8351 = 0, $8352 = 0, $8353 = 0, $8354 = 0, $8355 = 0, $8356 = 0, $8357 = 0, $8358 = 0, $8359 = 0, $836 = 0, $8360 = 0, $8361 = 0, $8362 = 0, $8363 = 0, $8364 = 0, $8365 = 0, $8366 = 0, $8367 = 0;
 var $8368 = 0, $8369 = 0, $837 = 0, $8370 = 0, $8371 = 0, $8372 = 0, $8373 = 0, $8374 = 0, $8375 = 0, $8376 = 0, $8377 = 0, $8378 = 0, $8379 = 0, $838 = 0, $8380 = 0, $8381 = 0, $8382 = 0, $8383 = 0, $8384 = 0, $8385 = 0;
 var $8386 = 0, $8387 = 0, $8388 = 0, $8389 = 0, $839 = 0, $8390 = 0, $8391 = 0, $8392 = 0, $8393 = 0, $8394 = 0, $8395 = 0, $8396 = 0, $8397 = 0, $8398 = 0, $8399 = 0, $84 = 0, $840 = 0, $8400 = 0, $8401 = 0, $8402 = 0;
 var $8403 = 0, $8404 = 0, $8405 = 0, $8406 = 0, $8407 = 0, $8408 = 0, $8409 = 0, $841 = 0, $8410 = 0, $8411 = 0, $8412 = 0, $8413 = 0, $8414 = 0, $8415 = 0, $8416 = 0, $8417 = 0, $8418 = 0, $8419 = 0, $842 = 0, $8420 = 0;
 var $8421 = 0, $8422 = 0, $8423 = 0, $8424 = 0, $8425 = 0, $8426 = 0, $8427 = 0, $8428 = 0, $8429 = 0, $843 = 0, $8430 = 0, $8431 = 0, $8432 = 0, $8433 = 0, $8434 = 0, $8435 = 0, $8436 = 0, $8437 = 0, $8438 = 0, $8439 = 0;
 var $844 = 0, $8440 = 0, $8441 = 0, $8442 = 0, $8443 = 0, $8444 = 0, $8445 = 0, $8446 = 0, $8447 = 0, $8448 = 0, $8449 = 0, $845 = 0, $8450 = 0, $8451 = 0, $8452 = 0, $8453 = 0, $8454 = 0, $8455 = 0, $8456 = 0, $8457 = 0;
 var $8458 = 0, $8459 = 0, $846 = 0, $8460 = 0, $8461 = 0, $8462 = 0, $8463 = 0, $8464 = 0, $8465 = 0, $8466 = 0, $8467 = 0, $8468 = 0, $8469 = 0, $847 = 0, $8470 = 0, $8471 = 0, $8472 = 0, $8473 = 0, $8474 = 0, $8475 = 0;
 var $8476 = 0, $8477 = 0, $8478 = 0, $8479 = 0, $848 = 0, $8480 = 0, $8481 = 0, $8482 = 0, $8483 = 0, $8484 = 0, $8485 = 0, $8486 = 0, $8487 = 0, $8488 = 0, $8489 = 0, $849 = 0, $8490 = 0, $8491 = 0, $8492 = 0, $8493 = 0;
 var $8494 = 0, $8495 = 0, $8496 = 0, $8497 = 0, $8498 = 0, $8499 = 0, $85 = 0, $850 = 0, $8500 = 0, $8501 = 0, $8502 = 0, $8503 = 0, $8504 = 0, $8505 = 0, $8506 = 0, $8507 = 0, $8508 = 0, $8509 = 0, $851 = 0, $8510 = 0;
 var $8511 = 0, $8512 = 0, $8513 = 0, $8514 = 0, $8515 = 0, $8516 = 0, $8517 = 0, $8518 = 0, $8519 = 0, $852 = 0, $8520 = 0, $8521 = 0, $8522 = 0, $8523 = 0, $8524 = 0, $8525 = 0, $8526 = 0, $8527 = 0, $8528 = 0, $8529 = 0;
 var $853 = 0, $8530 = 0, $8531 = 0, $8532 = 0, $8533 = 0, $8534 = 0, $8535 = 0, $8536 = 0, $8537 = 0, $8538 = 0, $8539 = 0, $854 = 0, $8540 = 0, $8541 = 0, $8542 = 0, $8543 = 0, $8544 = 0, $8545 = 0, $8546 = 0, $8547 = 0;
 var $8548 = 0, $8549 = 0, $855 = 0, $8550 = 0, $8551 = 0, $8552 = 0, $8553 = 0, $8554 = 0, $8555 = 0, $8556 = 0, $8557 = 0, $8558 = 0, $8559 = 0, $856 = 0, $8560 = 0, $8561 = 0, $8562 = 0, $8563 = 0, $8564 = 0, $8565 = 0;
 var $8566 = 0, $8567 = 0, $8568 = 0, $8569 = 0, $857 = 0, $8570 = 0, $8571 = 0, $8572 = 0, $8573 = 0, $8574 = 0, $8575 = 0, $8576 = 0, $8577 = 0, $8578 = 0, $8579 = 0, $858 = 0, $8580 = 0, $8581 = 0, $8582 = 0, $8583 = 0;
 var $8584 = 0, $8585 = 0, $8586 = 0, $8587 = 0, $8588 = 0, $8589 = 0, $859 = 0, $8590 = 0, $8591 = 0, $8592 = 0, $8593 = 0, $8594 = 0, $8595 = 0, $8596 = 0, $8597 = 0, $8598 = 0, $8599 = 0, $86 = 0, $860 = 0, $8600 = 0;
 var $8601 = 0, $8602 = 0, $8603 = 0, $8604 = 0, $8605 = 0, $8606 = 0, $8607 = 0, $8608 = 0, $8609 = 0, $861 = 0, $8610 = 0, $8611 = 0, $8612 = 0, $8613 = 0, $8614 = 0, $8615 = 0, $8616 = 0, $8617 = 0, $8618 = 0, $8619 = 0;
 var $862 = 0, $8620 = 0, $8621 = 0, $8622 = 0, $8623 = 0, $8624 = 0, $8625 = 0, $8626 = 0, $8627 = 0, $8628 = 0, $8629 = 0, $863 = 0, $8630 = 0, $8631 = 0, $8632 = 0, $8633 = 0, $8634 = 0, $8635 = 0, $8636 = 0, $8637 = 0;
 var $8638 = 0, $8639 = 0, $864 = 0, $8640 = 0, $8641 = 0, $8642 = 0, $8643 = 0, $8644 = 0, $8645 = 0, $8646 = 0, $8647 = 0, $8648 = 0, $8649 = 0, $865 = 0, $8650 = 0, $8651 = 0, $8652 = 0, $8653 = 0, $8654 = 0, $8655 = 0;
 var $8656 = 0, $8657 = 0, $8658 = 0, $8659 = 0, $866 = 0, $8660 = 0, $8661 = 0, $8662 = 0, $8663 = 0, $8664 = 0, $8665 = 0, $8666 = 0, $8667 = 0, $8668 = 0, $8669 = 0, $867 = 0, $8670 = 0, $8671 = 0, $8672 = 0, $8673 = 0;
 var $8674 = 0, $8675 = 0, $8676 = 0, $8677 = 0, $8678 = 0, $8679 = 0, $868 = 0, $8680 = 0, $8681 = 0, $8682 = 0, $8683 = 0, $8684 = 0, $8685 = 0, $8686 = 0, $8687 = 0, $8688 = 0, $8689 = 0, $869 = 0, $8690 = 0, $8691 = 0;
 var $8692 = 0, $8693 = 0, $8694 = 0, $8695 = 0, $8696 = 0, $8697 = 0, $8698 = 0, $8699 = 0, $87 = 0, $870 = 0, $8700 = 0, $8701 = 0, $8702 = 0, $8703 = 0, $8704 = 0, $8705 = 0, $8706 = 0, $8707 = 0, $8708 = 0, $8709 = 0;
 var $871 = 0, $8710 = 0, $8711 = 0, $8712 = 0, $8713 = 0, $8714 = 0, $8715 = 0, $8716 = 0, $8717 = 0, $8718 = 0, $8719 = 0, $872 = 0, $8720 = 0, $8721 = 0, $8722 = 0, $8723 = 0, $8724 = 0, $8725 = 0, $8726 = 0, $8727 = 0;
 var $8728 = 0, $8729 = 0, $873 = 0, $8730 = 0, $8731 = 0, $8732 = 0, $8733 = 0, $8734 = 0, $8735 = 0, $8736 = 0, $8737 = 0, $8738 = 0, $8739 = 0, $874 = 0, $8740 = 0, $8741 = 0, $8742 = 0, $8743 = 0, $8744 = 0, $8745 = 0;
 var $8746 = 0, $8747 = 0, $8748 = 0, $8749 = 0, $875 = 0, $8750 = 0, $8751 = 0, $8752 = 0, $8753 = 0, $8754 = 0, $8755 = 0, $8756 = 0, $8757 = 0, $8758 = 0, $8759 = 0, $876 = 0, $8760 = 0, $8761 = 0, $8762 = 0, $8763 = 0;
 var $8764 = 0, $8765 = 0, $8766 = 0, $8767 = 0, $8768 = 0, $8769 = 0, $877 = 0, $8770 = 0, $8771 = 0, $8772 = 0, $8773 = 0, $8774 = 0, $8775 = 0, $8776 = 0, $8777 = 0, $8778 = 0, $8779 = 0, $878 = 0, $8780 = 0, $8781 = 0;
 var $8782 = 0, $8783 = 0, $8784 = 0, $8785 = 0, $8786 = 0, $8787 = 0, $8788 = 0, $8789 = 0, $879 = 0, $8790 = 0, $8791 = 0, $8792 = 0, $8793 = 0, $8794 = 0, $8795 = 0, $8796 = 0, $8797 = 0, $8798 = 0, $8799 = 0, $88 = 0;
 var $880 = 0, $8800 = 0, $8801 = 0, $8802 = 0, $8803 = 0, $8804 = 0, $8805 = 0, $8806 = 0, $8807 = 0, $8808 = 0, $8809 = 0, $881 = 0, $8810 = 0, $8811 = 0, $8812 = 0, $8813 = 0, $8814 = 0, $8815 = 0, $8816 = 0, $8817 = 0;
 var $8818 = 0, $8819 = 0, $882 = 0, $8820 = 0, $8821 = 0, $8822 = 0, $8823 = 0, $8824 = 0, $8825 = 0, $8826 = 0, $8827 = 0, $8828 = 0, $8829 = 0, $883 = 0, $8830 = 0, $8831 = 0, $8832 = 0, $8833 = 0, $8834 = 0, $8835 = 0;
 var $8836 = 0, $8837 = 0, $8838 = 0, $8839 = 0, $884 = 0, $8840 = 0, $8841 = 0, $8842 = 0, $8843 = 0, $8844 = 0, $8845 = 0, $8846 = 0, $8847 = 0, $8848 = 0, $8849 = 0, $885 = 0, $8850 = 0, $8851 = 0, $8852 = 0, $8853 = 0;
 var $8854 = 0, $8855 = 0, $8856 = 0, $8857 = 0, $8858 = 0, $8859 = 0, $886 = 0, $8860 = 0, $8861 = 0, $8862 = 0, $8863 = 0, $8864 = 0, $8865 = 0, $8866 = 0, $8867 = 0, $8868 = 0, $8869 = 0, $887 = 0, $8870 = 0, $8871 = 0;
 var $8872 = 0, $8873 = 0, $8874 = 0, $8875 = 0, $8876 = 0, $8877 = 0, $8878 = 0, $8879 = 0, $888 = 0, $8880 = 0, $8881 = 0, $8882 = 0, $8883 = 0, $8884 = 0, $8885 = 0, $8886 = 0, $8887 = 0, $8888 = 0, $8889 = 0, $889 = 0;
 var $8890 = 0, $8891 = 0, $8892 = 0, $8893 = 0, $8894 = 0, $8895 = 0, $8896 = 0, $8897 = 0, $8898 = 0, $8899 = 0, $89 = 0, $890 = 0, $8900 = 0, $8901 = 0, $8902 = 0, $8903 = 0, $8904 = 0, $8905 = 0, $8906 = 0, $8907 = 0;
 var $8908 = 0, $8909 = 0, $891 = 0, $8910 = 0, $8911 = 0, $8912 = 0, $8913 = 0, $8914 = 0, $8915 = 0, $8916 = 0, $8917 = 0, $8918 = 0, $8919 = 0, $892 = 0, $8920 = 0, $8921 = 0, $8922 = 0, $8923 = 0, $8924 = 0, $8925 = 0;
 var $8926 = 0, $8927 = 0, $8928 = 0, $8929 = 0, $893 = 0, $8930 = 0, $8931 = 0, $8932 = 0, $8933 = 0, $8934 = 0, $8935 = 0, $8936 = 0, $8937 = 0, $8938 = 0, $8939 = 0, $894 = 0, $8940 = 0, $8941 = 0, $8942 = 0, $8943 = 0;
 var $8944 = 0, $8945 = 0, $8946 = 0, $8947 = 0, $8948 = 0, $8949 = 0, $895 = 0, $8950 = 0, $8951 = 0, $8952 = 0, $8953 = 0, $8954 = 0, $8955 = 0, $8956 = 0, $8957 = 0, $8958 = 0, $8959 = 0, $896 = 0, $8960 = 0, $8961 = 0;
 var $8962 = 0, $8963 = 0, $8964 = 0, $8965 = 0, $8966 = 0, $8967 = 0, $8968 = 0, $8969 = 0, $897 = 0, $8970 = 0, $8971 = 0, $8972 = 0, $8973 = 0, $8974 = 0, $8975 = 0, $8976 = 0, $8977 = 0, $8978 = 0, $8979 = 0, $898 = 0;
 var $8980 = 0, $8981 = 0, $8982 = 0, $8983 = 0, $8984 = 0, $8985 = 0, $8986 = 0, $8987 = 0, $8988 = 0, $8989 = 0, $899 = 0, $8990 = 0, $8991 = 0, $8992 = 0, $8993 = 0, $8994 = 0, $8995 = 0, $8996 = 0, $8997 = 0, $8998 = 0;
 var $8999 = 0, $9 = 0, $90 = 0, $900 = 0, $9000 = 0, $9001 = 0, $9002 = 0, $9003 = 0, $9004 = 0, $9005 = 0, $9006 = 0, $9007 = 0, $9008 = 0, $9009 = 0, $901 = 0, $9010 = 0, $9011 = 0, $9012 = 0, $9013 = 0, $9014 = 0;
 var $9015 = 0, $9016 = 0, $9017 = 0, $9018 = 0, $9019 = 0, $902 = 0, $9020 = 0, $9021 = 0, $9022 = 0, $9023 = 0, $9024 = 0, $9025 = 0, $9026 = 0, $9027 = 0, $9028 = 0, $9029 = 0, $903 = 0, $9030 = 0, $9031 = 0, $9032 = 0;
 var $9033 = 0, $9034 = 0, $9035 = 0, $9036 = 0, $9037 = 0, $9038 = 0, $9039 = 0, $904 = 0, $9040 = 0, $9041 = 0, $9042 = 0, $9043 = 0, $9044 = 0, $9045 = 0, $9046 = 0, $9047 = 0, $9048 = 0, $9049 = 0, $905 = 0, $9050 = 0;
 var $9051 = 0, $9052 = 0, $9053 = 0, $9054 = 0, $9055 = 0, $9056 = 0, $9057 = 0, $9058 = 0, $9059 = 0, $906 = 0, $9060 = 0, $9061 = 0, $9062 = 0, $9063 = 0, $9064 = 0, $9065 = 0, $9066 = 0, $9067 = 0, $9068 = 0, $9069 = 0;
 var $907 = 0, $9070 = 0, $9071 = 0, $9072 = 0, $9073 = 0, $9074 = 0, $9075 = 0, $9076 = 0, $9077 = 0, $9078 = 0, $9079 = 0, $908 = 0, $9080 = 0, $9081 = 0, $9082 = 0, $9083 = 0, $9084 = 0, $9085 = 0, $9086 = 0, $9087 = 0;
 var $9088 = 0, $9089 = 0, $909 = 0, $9090 = 0, $9091 = 0, $9092 = 0, $9093 = 0, $9094 = 0, $9095 = 0, $9096 = 0, $9097 = 0, $9098 = 0, $9099 = 0, $91 = 0, $910 = 0, $9100 = 0, $9101 = 0, $9102 = 0, $9103 = 0, $9104 = 0;
 var $9105 = 0, $9106 = 0, $9107 = 0, $9108 = 0, $9109 = 0, $911 = 0, $9110 = 0, $9111 = 0, $9112 = 0, $9113 = 0, $9114 = 0, $9115 = 0, $9116 = 0, $9117 = 0, $9118 = 0, $9119 = 0, $912 = 0, $9120 = 0, $9121 = 0, $9122 = 0;
 var $9123 = 0, $9124 = 0, $9125 = 0, $9126 = 0, $9127 = 0, $9128 = 0, $9129 = 0, $913 = 0, $9130 = 0, $9131 = 0, $9132 = 0, $9133 = 0, $9134 = 0, $9135 = 0, $9136 = 0, $9137 = 0, $9138 = 0, $9139 = 0, $914 = 0, $9140 = 0;
 var $9141 = 0, $9142 = 0, $9143 = 0, $9144 = 0, $9145 = 0, $9146 = 0, $9147 = 0, $9148 = 0, $9149 = 0, $915 = 0, $9150 = 0, $9151 = 0, $9152 = 0, $9153 = 0, $9154 = 0, $9155 = 0, $9156 = 0, $9157 = 0, $9158 = 0, $9159 = 0;
 var $916 = 0, $9160 = 0, $9161 = 0, $9162 = 0, $9163 = 0, $9164 = 0, $9165 = 0, $9166 = 0, $9167 = 0, $9168 = 0, $9169 = 0, $917 = 0, $9170 = 0, $9171 = 0, $9172 = 0, $9173 = 0, $9174 = 0, $9175 = 0, $9176 = 0, $9177 = 0;
 var $9178 = 0, $9179 = 0, $918 = 0, $9180 = 0, $9181 = 0, $9182 = 0, $9183 = 0, $9184 = 0, $9185 = 0, $9186 = 0, $9187 = 0, $9188 = 0, $9189 = 0, $919 = 0, $9190 = 0, $9191 = 0, $9192 = 0, $9193 = 0, $9194 = 0, $9195 = 0;
 var $9196 = 0, $9197 = 0, $9198 = 0, $9199 = 0, $92 = 0, $920 = 0, $9200 = 0, $9201 = 0, $9202 = 0, $9203 = 0, $9204 = 0, $9205 = 0, $9206 = 0, $9207 = 0, $9208 = 0, $9209 = 0, $921 = 0, $9210 = 0, $9211 = 0, $9212 = 0;
 var $9213 = 0, $9214 = 0, $9215 = 0, $9216 = 0, $9217 = 0, $9218 = 0, $9219 = 0, $922 = 0, $9220 = 0, $9221 = 0, $9222 = 0, $9223 = 0, $9224 = 0, $9225 = 0, $9226 = 0, $9227 = 0, $9228 = 0, $9229 = 0, $923 = 0, $9230 = 0;
 var $9231 = 0, $9232 = 0, $9233 = 0, $9234 = 0, $9235 = 0, $9236 = 0, $9237 = 0, $9238 = 0, $9239 = 0, $924 = 0, $9240 = 0, $9241 = 0, $9242 = 0, $9243 = 0, $9244 = 0, $9245 = 0, $9246 = 0, $9247 = 0, $9248 = 0, $9249 = 0;
 var $925 = 0, $9250 = 0, $9251 = 0, $9252 = 0, $9253 = 0, $9254 = 0, $9255 = 0, $9256 = 0, $9257 = 0, $9258 = 0, $9259 = 0, $926 = 0, $9260 = 0, $9261 = 0, $9262 = 0, $9263 = 0, $9264 = 0, $9265 = 0, $9266 = 0, $9267 = 0;
 var $9268 = 0, $9269 = 0, $927 = 0, $9270 = 0, $9271 = 0, $9272 = 0, $9273 = 0, $9274 = 0, $9275 = 0, $9276 = 0, $9277 = 0, $9278 = 0, $9279 = 0, $928 = 0, $9280 = 0, $9281 = 0, $9282 = 0, $9283 = 0, $9284 = 0, $9285 = 0;
 var $9286 = 0, $9287 = 0, $9288 = 0, $9289 = 0, $929 = 0, $9290 = 0, $9291 = 0, $9292 = 0, $9293 = 0, $9294 = 0, $9295 = 0, $9296 = 0, $9297 = 0, $9298 = 0, $9299 = 0, $93 = 0, $930 = 0, $9300 = 0, $9301 = 0, $9302 = 0;
 var $9303 = 0, $9304 = 0, $9305 = 0, $9306 = 0, $9307 = 0, $9308 = 0, $9309 = 0, $931 = 0, $9310 = 0, $9311 = 0, $9312 = 0, $9313 = 0, $9314 = 0, $9315 = 0, $9316 = 0, $9317 = 0, $9318 = 0, $9319 = 0, $932 = 0, $9320 = 0;
 var $9321 = 0, $9322 = 0, $9323 = 0, $9324 = 0, $9325 = 0, $9326 = 0, $9327 = 0, $9328 = 0, $9329 = 0, $933 = 0, $9330 = 0, $9331 = 0, $9332 = 0, $9333 = 0, $9334 = 0, $9335 = 0, $9336 = 0, $9337 = 0, $9338 = 0, $9339 = 0;
 var $934 = 0, $9340 = 0, $9341 = 0, $9342 = 0, $9343 = 0, $9344 = 0, $9345 = 0, $9346 = 0, $9347 = 0, $9348 = 0, $9349 = 0, $935 = 0, $9350 = 0, $9351 = 0, $9352 = 0, $9353 = 0, $9354 = 0, $9355 = 0, $9356 = 0, $9357 = 0;
 var $9358 = 0, $9359 = 0, $936 = 0, $9360 = 0, $9361 = 0, $9362 = 0, $9363 = 0, $9364 = 0, $9365 = 0, $9366 = 0, $9367 = 0, $9368 = 0, $9369 = 0, $937 = 0, $9370 = 0, $9371 = 0, $9372 = 0, $9373 = 0, $9374 = 0, $9375 = 0;
 var $9376 = 0, $9377 = 0, $9378 = 0, $9379 = 0, $938 = 0, $9380 = 0, $9381 = 0, $9382 = 0, $9383 = 0, $9384 = 0, $9385 = 0, $9386 = 0, $9387 = 0, $9388 = 0, $9389 = 0, $939 = 0, $9390 = 0, $9391 = 0, $9392 = 0, $9393 = 0;
 var $9394 = 0, $9395 = 0, $9396 = 0, $9397 = 0, $9398 = 0, $9399 = 0, $94 = 0, $940 = 0, $9400 = 0, $9401 = 0, $9402 = 0, $9403 = 0, $9404 = 0, $9405 = 0, $9406 = 0, $9407 = 0, $9408 = 0, $9409 = 0, $941 = 0, $9410 = 0;
 var $9411 = 0, $9412 = 0, $9413 = 0, $9414 = 0, $9415 = 0, $9416 = 0, $9417 = 0, $9418 = 0, $9419 = 0, $942 = 0, $9420 = 0, $9421 = 0, $9422 = 0, $9423 = 0, $9424 = 0, $9425 = 0, $9426 = 0, $9427 = 0, $9428 = 0, $9429 = 0;
 var $943 = 0, $9430 = 0, $9431 = 0, $9432 = 0, $9433 = 0, $9434 = 0, $9435 = 0, $9436 = 0, $9437 = 0, $9438 = 0, $9439 = 0, $944 = 0, $9440 = 0, $9441 = 0, $9442 = 0, $9443 = 0, $9444 = 0, $9445 = 0, $9446 = 0, $9447 = 0;
 var $9448 = 0, $9449 = 0, $945 = 0, $9450 = 0, $9451 = 0, $9452 = 0, $9453 = 0, $9454 = 0, $9455 = 0, $9456 = 0, $9457 = 0, $9458 = 0, $9459 = 0, $946 = 0, $9460 = 0, $9461 = 0, $9462 = 0, $9463 = 0, $9464 = 0, $9465 = 0;
 var $9466 = 0, $9467 = 0, $9468 = 0, $9469 = 0, $947 = 0, $9470 = 0, $9471 = 0, $9472 = 0, $9473 = 0, $9474 = 0, $9475 = 0, $9476 = 0, $9477 = 0, $9478 = 0, $9479 = 0, $948 = 0, $9480 = 0, $9481 = 0, $9482 = 0, $9483 = 0;
 var $9484 = 0, $9485 = 0, $9486 = 0, $9487 = 0, $9488 = 0, $9489 = 0, $949 = 0, $9490 = 0, $9491 = 0, $9492 = 0, $9493 = 0, $9494 = 0, $9495 = 0, $9496 = 0, $9497 = 0, $9498 = 0, $9499 = 0, $95 = 0, $950 = 0, $9500 = 0;
 var $9501 = 0, $9502 = 0, $9503 = 0, $9504 = 0, $9505 = 0, $9506 = 0, $9507 = 0, $9508 = 0, $9509 = 0, $951 = 0, $9510 = 0, $9511 = 0, $9512 = 0, $9513 = 0, $9514 = 0, $9515 = 0, $9516 = 0, $9517 = 0, $9518 = 0, $9519 = 0;
 var $952 = 0, $9520 = 0, $9521 = 0, $9522 = 0, $9523 = 0, $9524 = 0, $9525 = 0, $9526 = 0, $9527 = 0, $9528 = 0, $9529 = 0, $953 = 0, $9530 = 0, $9531 = 0, $9532 = 0, $9533 = 0, $9534 = 0, $9535 = 0, $9536 = 0, $9537 = 0;
 var $9538 = 0, $9539 = 0, $954 = 0, $9540 = 0, $9541 = 0, $9542 = 0, $9543 = 0, $9544 = 0, $9545 = 0, $9546 = 0, $9547 = 0, $9548 = 0, $9549 = 0, $955 = 0, $9550 = 0, $9551 = 0, $9552 = 0, $9553 = 0, $9554 = 0, $9555 = 0;
 var $9556 = 0, $9557 = 0, $9558 = 0, $9559 = 0, $956 = 0, $9560 = 0, $9561 = 0, $9562 = 0, $9563 = 0, $9564 = 0, $9565 = 0, $9566 = 0, $9567 = 0, $9568 = 0, $9569 = 0, $957 = 0, $9570 = 0, $9571 = 0, $9572 = 0, $9573 = 0;
 var $9574 = 0, $9575 = 0, $9576 = 0, $9577 = 0, $9578 = 0, $9579 = 0, $958 = 0, $9580 = 0, $9581 = 0, $9582 = 0, $9583 = 0, $9584 = 0, $9585 = 0, $9586 = 0, $9587 = 0, $9588 = 0, $9589 = 0, $959 = 0, $9590 = 0, $9591 = 0;
 var $9592 = 0, $9593 = 0, $9594 = 0, $9595 = 0, $9596 = 0, $9597 = 0, $9598 = 0, $9599 = 0, $96 = 0, $960 = 0, $9600 = 0, $9601 = 0, $9602 = 0, $9603 = 0, $9604 = 0, $9605 = 0, $9606 = 0, $9607 = 0, $9608 = 0, $9609 = 0;
 var $961 = 0, $9610 = 0, $9611 = 0, $9612 = 0, $9613 = 0, $9614 = 0, $9615 = 0, $9616 = 0, $9617 = 0, $9618 = 0, $9619 = 0, $962 = 0, $9620 = 0, $9621 = 0, $9622 = 0, $9623 = 0, $9624 = 0, $9625 = 0, $9626 = 0, $9627 = 0;
 var $9628 = 0, $9629 = 0, $963 = 0, $9630 = 0, $9631 = 0, $9632 = 0, $9633 = 0, $9634 = 0, $9635 = 0, $9636 = 0, $9637 = 0, $9638 = 0, $9639 = 0, $964 = 0, $9640 = 0, $9641 = 0, $9642 = 0, $9643 = 0, $9644 = 0, $9645 = 0;
 var $9646 = 0, $9647 = 0, $9648 = 0, $9649 = 0, $965 = 0, $9650 = 0, $9651 = 0, $9652 = 0, $9653 = 0, $9654 = 0, $9655 = 0, $9656 = 0, $9657 = 0, $9658 = 0, $9659 = 0, $966 = 0, $9660 = 0, $9661 = 0, $9662 = 0, $9663 = 0;
 var $9664 = 0, $9665 = 0, $9666 = 0, $9667 = 0, $9668 = 0, $9669 = 0, $967 = 0, $9670 = 0, $9671 = 0, $9672 = 0, $9673 = 0, $9674 = 0, $9675 = 0, $9676 = 0, $9677 = 0, $9678 = 0, $9679 = 0, $968 = 0, $9680 = 0, $9681 = 0;
 var $9682 = 0, $9683 = 0, $9684 = 0, $9685 = 0, $9686 = 0, $9687 = 0, $9688 = 0, $9689 = 0, $969 = 0, $9690 = 0, $9691 = 0, $9692 = 0, $9693 = 0, $9694 = 0, $9695 = 0, $9696 = 0, $9697 = 0, $9698 = 0, $9699 = 0, $97 = 0;
 var $970 = 0, $9700 = 0, $9701 = 0, $9702 = 0, $9703 = 0, $9704 = 0, $9705 = 0, $9706 = 0, $9707 = 0, $9708 = 0, $9709 = 0, $971 = 0, $9710 = 0, $9711 = 0, $9712 = 0, $9713 = 0, $9714 = 0, $9715 = 0, $9716 = 0, $9717 = 0;
 var $9718 = 0, $9719 = 0, $972 = 0, $9720 = 0, $9721 = 0, $9722 = 0, $9723 = 0, $9724 = 0, $9725 = 0, $9726 = 0, $9727 = 0, $9728 = 0, $9729 = 0, $973 = 0, $9730 = 0, $9731 = 0, $9732 = 0, $9733 = 0, $9734 = 0, $9735 = 0;
 var $9736 = 0, $9737 = 0, $9738 = 0, $9739 = 0, $974 = 0, $9740 = 0, $9741 = 0, $9742 = 0, $9743 = 0, $9744 = 0, $9745 = 0, $9746 = 0, $9747 = 0, $9748 = 0, $9749 = 0, $975 = 0, $9750 = 0, $9751 = 0, $9752 = 0, $9753 = 0;
 var $9754 = 0, $9755 = 0, $9756 = 0, $9757 = 0, $9758 = 0, $9759 = 0, $976 = 0, $9760 = 0, $9761 = 0, $9762 = 0, $9763 = 0, $9764 = 0, $9765 = 0, $9766 = 0, $9767 = 0, $9768 = 0, $9769 = 0, $977 = 0, $9770 = 0, $9771 = 0;
 var $9772 = 0, $9773 = 0, $9774 = 0, $9775 = 0, $9776 = 0, $9777 = 0, $9778 = 0, $9779 = 0, $978 = 0, $9780 = 0, $9781 = 0, $9782 = 0, $9783 = 0, $9784 = 0, $9785 = 0, $9786 = 0, $9787 = 0, $9788 = 0, $9789 = 0, $979 = 0;
 var $9790 = 0, $9791 = 0, $9792 = 0, $9793 = 0, $9794 = 0, $9795 = 0, $9796 = 0, $9797 = 0, $9798 = 0, $9799 = 0, $98 = 0, $980 = 0, $9800 = 0, $9801 = 0, $9802 = 0, $9803 = 0, $9804 = 0, $9805 = 0, $9806 = 0, $9807 = 0;
 var $9808 = 0, $9809 = 0, $981 = 0, $9810 = 0, $9811 = 0, $9812 = 0, $9813 = 0, $9814 = 0, $9815 = 0, $9816 = 0, $9817 = 0, $9818 = 0, $9819 = 0, $982 = 0, $9820 = 0, $9821 = 0, $9822 = 0, $9823 = 0, $9824 = 0, $9825 = 0;
 var $9826 = 0, $9827 = 0, $9828 = 0, $9829 = 0, $983 = 0, $9830 = 0, $9831 = 0, $9832 = 0, $9833 = 0, $9834 = 0, $9835 = 0, $9836 = 0, $9837 = 0, $9838 = 0, $9839 = 0, $984 = 0, $9840 = 0, $9841 = 0, $9842 = 0, $9843 = 0;
 var $9844 = 0, $9845 = 0, $9846 = 0, $9847 = 0, $9848 = 0, $9849 = 0, $985 = 0, $9850 = 0, $9851 = 0, $9852 = 0, $9853 = 0, $9854 = 0, $9855 = 0, $9856 = 0, $9857 = 0, $9858 = 0, $9859 = 0, $986 = 0, $9860 = 0, $9861 = 0;
 var $9862 = 0, $9863 = 0, $9864 = 0, $9865 = 0, $9866 = 0, $9867 = 0, $9868 = 0, $9869 = 0, $987 = 0, $9870 = 0, $9871 = 0, $9872 = 0, $9873 = 0, $9874 = 0, $9875 = 0, $9876 = 0, $9877 = 0, $9878 = 0, $9879 = 0, $988 = 0;
 var $9880 = 0, $9881 = 0, $9882 = 0, $9883 = 0, $9884 = 0, $9885 = 0, $9886 = 0, $9887 = 0, $9888 = 0, $9889 = 0, $989 = 0, $9890 = 0, $9891 = 0, $9892 = 0, $9893 = 0, $9894 = 0, $9895 = 0, $9896 = 0, $9897 = 0, $9898 = 0;
 var $9899 = 0, $99 = 0, $990 = 0, $9900 = 0, $9901 = 0, $9902 = 0, $9903 = 0, $9904 = 0, $9905 = 0, $9906 = 0, $9907 = 0, $9908 = 0, $9909 = 0, $991 = 0, $9910 = 0, $9911 = 0, $9912 = 0, $9913 = 0, $9914 = 0, $9915 = 0;
 var $9916 = 0, $9917 = 0, $9918 = 0, $9919 = 0, $992 = 0, $9920 = 0, $9921 = 0, $9922 = 0, $9923 = 0, $9924 = 0, $9925 = 0, $9926 = 0, $9927 = 0, $9928 = 0, $9929 = 0, $993 = 0, $9930 = 0, $9931 = 0, $9932 = 0, $9933 = 0;
 var $9934 = 0, $9935 = 0, $9936 = 0, $9937 = 0, $9938 = 0, $9939 = 0, $994 = 0, $9940 = 0, $9941 = 0, $9942 = 0, $9943 = 0, $9944 = 0, $9945 = 0, $9946 = 0, $9947 = 0, $9948 = 0, $9949 = 0, $995 = 0, $9950 = 0, $9951 = 0;
 var $9952 = 0, $9953 = 0, $9954 = 0, $9955 = 0, $9956 = 0, $9957 = 0, $9958 = 0, $9959 = 0, $996 = 0, $9960 = 0, $9961 = 0, $9962 = 0, $9963 = 0, $9964 = 0, $9965 = 0, $9966 = 0, $9967 = 0, $9968 = 0, $9969 = 0, $997 = 0;
 var $9970 = 0, $9971 = 0, $9972 = 0, $9973 = 0, $9974 = 0, $9975 = 0, $9976 = 0, $9977 = 0, $9978 = 0, $9979 = 0, $998 = 0, $9980 = 0, $9981 = 0, $9982 = 0, $9983 = 0, $9984 = 0, $9985 = 0, $9986 = 0, $9987 = 0, $9988 = 0;
 var $9989 = 0, $999 = 0, $9990 = 0, $9991 = 0, $9992 = 0, $9993 = 0, $9994 = 0, $9995 = 0, $9996 = 0, $9997 = 0, $9998 = 0, $9999 = 0, $add$ptr11604 = 0, $add$ptr1650 = 0, $add$ptr3309 = 0, $add$ptr4968 = 0, $add$ptr6627 = 0, $add$ptr8286 = 0, $add$ptr9945 = 0, $arrayidx10153 = 0;
 var $arrayidx10157 = 0, $arrayidx10179 = 0, $arrayidx10204 = 0, $arrayidx10360 = 0, $arrayidx10364 = 0, $arrayidx10386 = 0, $arrayidx10411 = 0, $arrayidx10567 = 0, $arrayidx10571 = 0, $arrayidx10593 = 0, $arrayidx10618 = 0, $arrayidx11609 = 0, $arrayidx11631 = 0, $arrayidx11656 = 0, $arrayidx11812 = 0, $arrayidx11816 = 0, $arrayidx11838 = 0, $arrayidx11863 = 0, $arrayidx12019 = 0, $arrayidx12023 = 0;
 var $arrayidx12045 = 0, $arrayidx12070 = 0, $arrayidx12226 = 0, $arrayidx12230 = 0, $arrayidx12252 = 0, $arrayidx12277 = 0, $arrayidx1655 = 0, $arrayidx1677 = 0, $arrayidx1702 = 0, $arrayidx1858 = 0, $arrayidx1862 = 0, $arrayidx1884 = 0, $arrayidx1909 = 0, $arrayidx199 = 0, $arrayidx203 = 0, $arrayidx2065 = 0, $arrayidx2069 = 0, $arrayidx2091 = 0, $arrayidx2116 = 0, $arrayidx225 = 0;
 var $arrayidx2272 = 0, $arrayidx2276 = 0, $arrayidx2298 = 0, $arrayidx2323 = 0, $arrayidx24 = 0, $arrayidx250 = 0, $arrayidx3314 = 0, $arrayidx3336 = 0, $arrayidx3361 = 0, $arrayidx3517 = 0, $arrayidx3521 = 0, $arrayidx3543 = 0, $arrayidx3568 = 0, $arrayidx3724 = 0, $arrayidx3728 = 0, $arrayidx3750 = 0, $arrayidx3775 = 0, $arrayidx3931 = 0, $arrayidx3935 = 0, $arrayidx3957 = 0;
 var $arrayidx3982 = 0, $arrayidx406 = 0, $arrayidx410 = 0, $arrayidx432 = 0, $arrayidx45 = 0, $arrayidx457 = 0, $arrayidx4973 = 0, $arrayidx4995 = 0, $arrayidx5 = 0, $arrayidx5020 = 0, $arrayidx5176 = 0, $arrayidx5180 = 0, $arrayidx5202 = 0, $arrayidx5227 = 0, $arrayidx5383 = 0, $arrayidx5387 = 0, $arrayidx5409 = 0, $arrayidx5434 = 0, $arrayidx5590 = 0, $arrayidx5594 = 0;
 var $arrayidx5616 = 0, $arrayidx5641 = 0, $arrayidx613 = 0, $arrayidx617 = 0, $arrayidx639 = 0, $arrayidx6632 = 0, $arrayidx664 = 0, $arrayidx6654 = 0, $arrayidx6679 = 0, $arrayidx6835 = 0, $arrayidx6839 = 0, $arrayidx6861 = 0, $arrayidx6886 = 0, $arrayidx7042 = 0, $arrayidx7046 = 0, $arrayidx7068 = 0, $arrayidx7093 = 0, $arrayidx7249 = 0, $arrayidx7253 = 0, $arrayidx7275 = 0;
 var $arrayidx7300 = 0, $arrayidx8291 = 0, $arrayidx8313 = 0, $arrayidx8338 = 0, $arrayidx8494 = 0, $arrayidx8498 = 0, $arrayidx8520 = 0, $arrayidx8545 = 0, $arrayidx8701 = 0, $arrayidx8705 = 0, $arrayidx8727 = 0, $arrayidx8752 = 0, $arrayidx8908 = 0, $arrayidx8912 = 0, $arrayidx8934 = 0, $arrayidx8959 = 0, $arrayidx9950 = 0, $arrayidx9972 = 0, $arrayidx9997 = 0, $blockR = 0;
 var $block_tmp = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048|0;
 $blockR = sp + 1024|0;
 $block_tmp = sp;
 _copy_block($blockR,$ref_block);
 _xor_block($blockR,$prev_block);
 _copy_block($block_tmp,$blockR);
 $tobool = ($with_xor|0)==(0);
 if (!($tobool)) {
  _xor_block($block_tmp,$next_block);
 }
 $0 = $blockR;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $arrayidx5 = ((($blockR)) + 32|0);
 $6 = $arrayidx5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_i64Add(($8|0),($11|0),($2|0),($5|0))|0);
 $13 = (getTempRet0() | 0);
 $14 = (_bitshift64Shl(($2|0),($5|0),1)|0);
 $15 = (getTempRet0() | 0);
 $16 = $14 & -2;
 $17 = $15 & 1;
 $18 = (___muldi3(($16|0),($17|0),($8|0),0)|0);
 $19 = (getTempRet0() | 0);
 $20 = (_i64Add(($12|0),($13|0),($18|0),($19|0))|0);
 $21 = (getTempRet0() | 0);
 $arrayidx24 = ((($blockR)) + 96|0);
 $22 = $arrayidx24;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = $20 ^ $24;
 $29 = $21 ^ $27;
 $arrayidx45 = ((($blockR)) + 64|0);
 $30 = $arrayidx45;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (_i64Add(($29|0),($28|0),($32|0),($35|0))|0);
 $37 = (getTempRet0() | 0);
 $38 = (_bitshift64Shl(($32|0),($35|0),1)|0);
 $39 = (getTempRet0() | 0);
 $40 = $38 & -2;
 $41 = $39 & 1;
 $42 = (___muldi3(($40|0),($41|0),($29|0),0)|0);
 $43 = (getTempRet0() | 0);
 $44 = (_i64Add(($36|0),($37|0),($42|0),($43|0))|0);
 $45 = (getTempRet0() | 0);
 $46 = $44 ^ $8;
 $47 = $45 ^ $11;
 $48 = (_bitshift64Lshr(($46|0),($47|0),24)|0);
 $49 = (getTempRet0() | 0);
 $50 = (_bitshift64Shl(($46|0),($47|0),40)|0);
 $51 = (getTempRet0() | 0);
 $52 = $48 | $50;
 $53 = $49 | $51;
 $54 = (_i64Add(($52|0),($53|0),($20|0),($21|0))|0);
 $55 = (getTempRet0() | 0);
 $56 = (_bitshift64Shl(($20|0),($21|0),1)|0);
 $57 = (getTempRet0() | 0);
 $58 = $56 & -2;
 $59 = $57 & 1;
 $60 = (___muldi3(($48|0),0,($58|0),($59|0))|0);
 $61 = (getTempRet0() | 0);
 $62 = (_i64Add(($54|0),($55|0),($60|0),($61|0))|0);
 $63 = (getTempRet0() | 0);
 $64 = $blockR;
 $65 = $64;
 HEAP32[$65>>2] = $62;
 $66 = (($64) + 4)|0;
 $67 = $66;
 HEAP32[$67>>2] = $63;
 $68 = $62 ^ $29;
 $69 = $63 ^ $28;
 $70 = (_bitshift64Lshr(($68|0),($69|0),16)|0);
 $71 = (getTempRet0() | 0);
 $72 = (_bitshift64Shl(($68|0),($69|0),48)|0);
 $73 = (getTempRet0() | 0);
 $74 = $70 | $72;
 $75 = $71 | $73;
 $76 = $arrayidx24;
 $77 = $76;
 HEAP32[$77>>2] = $74;
 $78 = (($76) + 4)|0;
 $79 = $78;
 HEAP32[$79>>2] = $75;
 $80 = (_i64Add(($74|0),($75|0),($44|0),($45|0))|0);
 $81 = (getTempRet0() | 0);
 $82 = (_bitshift64Shl(($44|0),($45|0),1)|0);
 $83 = (getTempRet0() | 0);
 $84 = $82 & -2;
 $85 = $83 & 1;
 $86 = (___muldi3(($70|0),0,($84|0),($85|0))|0);
 $87 = (getTempRet0() | 0);
 $88 = (_i64Add(($80|0),($81|0),($86|0),($87|0))|0);
 $89 = (getTempRet0() | 0);
 $90 = $arrayidx45;
 $91 = $90;
 HEAP32[$91>>2] = $88;
 $92 = (($90) + 4)|0;
 $93 = $92;
 HEAP32[$93>>2] = $89;
 $94 = $88 ^ $52;
 $95 = $89 ^ $53;
 $96 = (_bitshift64Lshr(($94|0),($95|0),63)|0);
 $97 = (getTempRet0() | 0);
 $98 = (_bitshift64Shl(($94|0),($95|0),1)|0);
 $99 = (getTempRet0() | 0);
 $100 = $96 | $98;
 $101 = $97 | $99;
 $102 = $arrayidx5;
 $103 = $102;
 HEAP32[$103>>2] = $100;
 $104 = (($102) + 4)|0;
 $105 = $104;
 HEAP32[$105>>2] = $101;
 $arrayidx199 = ((($blockR)) + 8|0);
 $106 = $arrayidx199;
 $107 = $106;
 $108 = HEAP32[$107>>2]|0;
 $109 = (($106) + 4)|0;
 $110 = $109;
 $111 = HEAP32[$110>>2]|0;
 $arrayidx203 = ((($blockR)) + 40|0);
 $112 = $arrayidx203;
 $113 = $112;
 $114 = HEAP32[$113>>2]|0;
 $115 = (($112) + 4)|0;
 $116 = $115;
 $117 = HEAP32[$116>>2]|0;
 $118 = (_i64Add(($114|0),($117|0),($108|0),($111|0))|0);
 $119 = (getTempRet0() | 0);
 $120 = (_bitshift64Shl(($108|0),($111|0),1)|0);
 $121 = (getTempRet0() | 0);
 $122 = $120 & -2;
 $123 = $121 & 1;
 $124 = (___muldi3(($122|0),($123|0),($114|0),0)|0);
 $125 = (getTempRet0() | 0);
 $126 = (_i64Add(($118|0),($119|0),($124|0),($125|0))|0);
 $127 = (getTempRet0() | 0);
 $arrayidx225 = ((($blockR)) + 104|0);
 $128 = $arrayidx225;
 $129 = $128;
 $130 = HEAP32[$129>>2]|0;
 $131 = (($128) + 4)|0;
 $132 = $131;
 $133 = HEAP32[$132>>2]|0;
 $134 = $126 ^ $130;
 $135 = $127 ^ $133;
 $arrayidx250 = ((($blockR)) + 72|0);
 $136 = $arrayidx250;
 $137 = $136;
 $138 = HEAP32[$137>>2]|0;
 $139 = (($136) + 4)|0;
 $140 = $139;
 $141 = HEAP32[$140>>2]|0;
 $142 = (_i64Add(($135|0),($134|0),($138|0),($141|0))|0);
 $143 = (getTempRet0() | 0);
 $144 = (_bitshift64Shl(($138|0),($141|0),1)|0);
 $145 = (getTempRet0() | 0);
 $146 = $144 & -2;
 $147 = $145 & 1;
 $148 = (___muldi3(($146|0),($147|0),($135|0),0)|0);
 $149 = (getTempRet0() | 0);
 $150 = (_i64Add(($142|0),($143|0),($148|0),($149|0))|0);
 $151 = (getTempRet0() | 0);
 $152 = $150 ^ $114;
 $153 = $151 ^ $117;
 $154 = (_bitshift64Lshr(($152|0),($153|0),24)|0);
 $155 = (getTempRet0() | 0);
 $156 = (_bitshift64Shl(($152|0),($153|0),40)|0);
 $157 = (getTempRet0() | 0);
 $158 = $154 | $156;
 $159 = $155 | $157;
 $160 = (_i64Add(($158|0),($159|0),($126|0),($127|0))|0);
 $161 = (getTempRet0() | 0);
 $162 = (_bitshift64Shl(($126|0),($127|0),1)|0);
 $163 = (getTempRet0() | 0);
 $164 = $162 & -2;
 $165 = $163 & 1;
 $166 = (___muldi3(($154|0),0,($164|0),($165|0))|0);
 $167 = (getTempRet0() | 0);
 $168 = (_i64Add(($160|0),($161|0),($166|0),($167|0))|0);
 $169 = (getTempRet0() | 0);
 $170 = $arrayidx199;
 $171 = $170;
 HEAP32[$171>>2] = $168;
 $172 = (($170) + 4)|0;
 $173 = $172;
 HEAP32[$173>>2] = $169;
 $174 = $168 ^ $135;
 $175 = $169 ^ $134;
 $176 = (_bitshift64Lshr(($174|0),($175|0),16)|0);
 $177 = (getTempRet0() | 0);
 $178 = (_bitshift64Shl(($174|0),($175|0),48)|0);
 $179 = (getTempRet0() | 0);
 $180 = $176 | $178;
 $181 = $177 | $179;
 $182 = $arrayidx225;
 $183 = $182;
 HEAP32[$183>>2] = $180;
 $184 = (($182) + 4)|0;
 $185 = $184;
 HEAP32[$185>>2] = $181;
 $186 = (_i64Add(($180|0),($181|0),($150|0),($151|0))|0);
 $187 = (getTempRet0() | 0);
 $188 = (_bitshift64Shl(($150|0),($151|0),1)|0);
 $189 = (getTempRet0() | 0);
 $190 = $188 & -2;
 $191 = $189 & 1;
 $192 = (___muldi3(($176|0),0,($190|0),($191|0))|0);
 $193 = (getTempRet0() | 0);
 $194 = (_i64Add(($186|0),($187|0),($192|0),($193|0))|0);
 $195 = (getTempRet0() | 0);
 $196 = $arrayidx250;
 $197 = $196;
 HEAP32[$197>>2] = $194;
 $198 = (($196) + 4)|0;
 $199 = $198;
 HEAP32[$199>>2] = $195;
 $200 = $194 ^ $158;
 $201 = $195 ^ $159;
 $202 = (_bitshift64Lshr(($200|0),($201|0),63)|0);
 $203 = (getTempRet0() | 0);
 $204 = (_bitshift64Shl(($200|0),($201|0),1)|0);
 $205 = (getTempRet0() | 0);
 $206 = $202 | $204;
 $207 = $203 | $205;
 $208 = $arrayidx203;
 $209 = $208;
 HEAP32[$209>>2] = $206;
 $210 = (($208) + 4)|0;
 $211 = $210;
 HEAP32[$211>>2] = $207;
 $arrayidx406 = ((($blockR)) + 16|0);
 $212 = $arrayidx406;
 $213 = $212;
 $214 = HEAP32[$213>>2]|0;
 $215 = (($212) + 4)|0;
 $216 = $215;
 $217 = HEAP32[$216>>2]|0;
 $arrayidx410 = ((($blockR)) + 48|0);
 $218 = $arrayidx410;
 $219 = $218;
 $220 = HEAP32[$219>>2]|0;
 $221 = (($218) + 4)|0;
 $222 = $221;
 $223 = HEAP32[$222>>2]|0;
 $224 = (_i64Add(($220|0),($223|0),($214|0),($217|0))|0);
 $225 = (getTempRet0() | 0);
 $226 = (_bitshift64Shl(($214|0),($217|0),1)|0);
 $227 = (getTempRet0() | 0);
 $228 = $226 & -2;
 $229 = $227 & 1;
 $230 = (___muldi3(($228|0),($229|0),($220|0),0)|0);
 $231 = (getTempRet0() | 0);
 $232 = (_i64Add(($224|0),($225|0),($230|0),($231|0))|0);
 $233 = (getTempRet0() | 0);
 $arrayidx432 = ((($blockR)) + 112|0);
 $234 = $arrayidx432;
 $235 = $234;
 $236 = HEAP32[$235>>2]|0;
 $237 = (($234) + 4)|0;
 $238 = $237;
 $239 = HEAP32[$238>>2]|0;
 $240 = $232 ^ $236;
 $241 = $233 ^ $239;
 $arrayidx457 = ((($blockR)) + 80|0);
 $242 = $arrayidx457;
 $243 = $242;
 $244 = HEAP32[$243>>2]|0;
 $245 = (($242) + 4)|0;
 $246 = $245;
 $247 = HEAP32[$246>>2]|0;
 $248 = (_i64Add(($241|0),($240|0),($244|0),($247|0))|0);
 $249 = (getTempRet0() | 0);
 $250 = (_bitshift64Shl(($244|0),($247|0),1)|0);
 $251 = (getTempRet0() | 0);
 $252 = $250 & -2;
 $253 = $251 & 1;
 $254 = (___muldi3(($252|0),($253|0),($241|0),0)|0);
 $255 = (getTempRet0() | 0);
 $256 = (_i64Add(($248|0),($249|0),($254|0),($255|0))|0);
 $257 = (getTempRet0() | 0);
 $258 = $256 ^ $220;
 $259 = $257 ^ $223;
 $260 = (_bitshift64Lshr(($258|0),($259|0),24)|0);
 $261 = (getTempRet0() | 0);
 $262 = (_bitshift64Shl(($258|0),($259|0),40)|0);
 $263 = (getTempRet0() | 0);
 $264 = $260 | $262;
 $265 = $261 | $263;
 $266 = (_i64Add(($264|0),($265|0),($232|0),($233|0))|0);
 $267 = (getTempRet0() | 0);
 $268 = (_bitshift64Shl(($232|0),($233|0),1)|0);
 $269 = (getTempRet0() | 0);
 $270 = $268 & -2;
 $271 = $269 & 1;
 $272 = (___muldi3(($260|0),0,($270|0),($271|0))|0);
 $273 = (getTempRet0() | 0);
 $274 = (_i64Add(($266|0),($267|0),($272|0),($273|0))|0);
 $275 = (getTempRet0() | 0);
 $276 = $arrayidx406;
 $277 = $276;
 HEAP32[$277>>2] = $274;
 $278 = (($276) + 4)|0;
 $279 = $278;
 HEAP32[$279>>2] = $275;
 $280 = $274 ^ $241;
 $281 = $275 ^ $240;
 $282 = (_bitshift64Lshr(($280|0),($281|0),16)|0);
 $283 = (getTempRet0() | 0);
 $284 = (_bitshift64Shl(($280|0),($281|0),48)|0);
 $285 = (getTempRet0() | 0);
 $286 = $282 | $284;
 $287 = $283 | $285;
 $288 = $arrayidx432;
 $289 = $288;
 HEAP32[$289>>2] = $286;
 $290 = (($288) + 4)|0;
 $291 = $290;
 HEAP32[$291>>2] = $287;
 $292 = (_i64Add(($286|0),($287|0),($256|0),($257|0))|0);
 $293 = (getTempRet0() | 0);
 $294 = (_bitshift64Shl(($256|0),($257|0),1)|0);
 $295 = (getTempRet0() | 0);
 $296 = $294 & -2;
 $297 = $295 & 1;
 $298 = (___muldi3(($282|0),0,($296|0),($297|0))|0);
 $299 = (getTempRet0() | 0);
 $300 = (_i64Add(($292|0),($293|0),($298|0),($299|0))|0);
 $301 = (getTempRet0() | 0);
 $302 = $300 ^ $264;
 $303 = $301 ^ $265;
 $304 = (_bitshift64Lshr(($302|0),($303|0),63)|0);
 $305 = (getTempRet0() | 0);
 $306 = (_bitshift64Shl(($302|0),($303|0),1)|0);
 $307 = (getTempRet0() | 0);
 $308 = $304 | $306;
 $309 = $305 | $307;
 $310 = $arrayidx410;
 $311 = $310;
 HEAP32[$311>>2] = $308;
 $312 = (($310) + 4)|0;
 $313 = $312;
 HEAP32[$313>>2] = $309;
 $arrayidx613 = ((($blockR)) + 24|0);
 $314 = $arrayidx613;
 $315 = $314;
 $316 = HEAP32[$315>>2]|0;
 $317 = (($314) + 4)|0;
 $318 = $317;
 $319 = HEAP32[$318>>2]|0;
 $arrayidx617 = ((($blockR)) + 56|0);
 $320 = $arrayidx617;
 $321 = $320;
 $322 = HEAP32[$321>>2]|0;
 $323 = (($320) + 4)|0;
 $324 = $323;
 $325 = HEAP32[$324>>2]|0;
 $326 = (_i64Add(($322|0),($325|0),($316|0),($319|0))|0);
 $327 = (getTempRet0() | 0);
 $328 = (_bitshift64Shl(($316|0),($319|0),1)|0);
 $329 = (getTempRet0() | 0);
 $330 = $328 & -2;
 $331 = $329 & 1;
 $332 = (___muldi3(($330|0),($331|0),($322|0),0)|0);
 $333 = (getTempRet0() | 0);
 $334 = (_i64Add(($326|0),($327|0),($332|0),($333|0))|0);
 $335 = (getTempRet0() | 0);
 $arrayidx639 = ((($blockR)) + 120|0);
 $336 = $arrayidx639;
 $337 = $336;
 $338 = HEAP32[$337>>2]|0;
 $339 = (($336) + 4)|0;
 $340 = $339;
 $341 = HEAP32[$340>>2]|0;
 $342 = $334 ^ $338;
 $343 = $335 ^ $341;
 $arrayidx664 = ((($blockR)) + 88|0);
 $344 = $arrayidx664;
 $345 = $344;
 $346 = HEAP32[$345>>2]|0;
 $347 = (($344) + 4)|0;
 $348 = $347;
 $349 = HEAP32[$348>>2]|0;
 $350 = (_i64Add(($343|0),($342|0),($346|0),($349|0))|0);
 $351 = (getTempRet0() | 0);
 $352 = (_bitshift64Shl(($346|0),($349|0),1)|0);
 $353 = (getTempRet0() | 0);
 $354 = $352 & -2;
 $355 = $353 & 1;
 $356 = (___muldi3(($354|0),($355|0),($343|0),0)|0);
 $357 = (getTempRet0() | 0);
 $358 = (_i64Add(($350|0),($351|0),($356|0),($357|0))|0);
 $359 = (getTempRet0() | 0);
 $360 = $358 ^ $322;
 $361 = $359 ^ $325;
 $362 = (_bitshift64Lshr(($360|0),($361|0),24)|0);
 $363 = (getTempRet0() | 0);
 $364 = (_bitshift64Shl(($360|0),($361|0),40)|0);
 $365 = (getTempRet0() | 0);
 $366 = $362 | $364;
 $367 = $363 | $365;
 $368 = (_i64Add(($366|0),($367|0),($334|0),($335|0))|0);
 $369 = (getTempRet0() | 0);
 $370 = (_bitshift64Shl(($334|0),($335|0),1)|0);
 $371 = (getTempRet0() | 0);
 $372 = $370 & -2;
 $373 = $371 & 1;
 $374 = (___muldi3(($362|0),0,($372|0),($373|0))|0);
 $375 = (getTempRet0() | 0);
 $376 = (_i64Add(($368|0),($369|0),($374|0),($375|0))|0);
 $377 = (getTempRet0() | 0);
 $378 = $arrayidx613;
 $379 = $378;
 HEAP32[$379>>2] = $376;
 $380 = (($378) + 4)|0;
 $381 = $380;
 HEAP32[$381>>2] = $377;
 $382 = $376 ^ $343;
 $383 = $377 ^ $342;
 $384 = (_bitshift64Lshr(($382|0),($383|0),16)|0);
 $385 = (getTempRet0() | 0);
 $386 = (_bitshift64Shl(($382|0),($383|0),48)|0);
 $387 = (getTempRet0() | 0);
 $388 = $384 | $386;
 $389 = $385 | $387;
 $390 = (_i64Add(($388|0),($389|0),($358|0),($359|0))|0);
 $391 = (getTempRet0() | 0);
 $392 = (_bitshift64Shl(($358|0),($359|0),1)|0);
 $393 = (getTempRet0() | 0);
 $394 = $392 & -2;
 $395 = $393 & 1;
 $396 = (___muldi3(($384|0),0,($394|0),($395|0))|0);
 $397 = (getTempRet0() | 0);
 $398 = (_i64Add(($390|0),($391|0),($396|0),($397|0))|0);
 $399 = (getTempRet0() | 0);
 $400 = $398 ^ $366;
 $401 = $399 ^ $367;
 $402 = (_bitshift64Lshr(($400|0),($401|0),63)|0);
 $403 = (getTempRet0() | 0);
 $404 = (_bitshift64Shl(($400|0),($401|0),1)|0);
 $405 = (getTempRet0() | 0);
 $406 = $402 | $404;
 $407 = $403 | $405;
 $408 = $arrayidx617;
 $409 = $408;
 HEAP32[$409>>2] = $406;
 $410 = (($408) + 4)|0;
 $411 = $410;
 HEAP32[$411>>2] = $407;
 $412 = (_i64Add(($206|0),($207|0),($62|0),($63|0))|0);
 $413 = (getTempRet0() | 0);
 $414 = (_bitshift64Shl(($62|0),($63|0),1)|0);
 $415 = (getTempRet0() | 0);
 $416 = $414 & -2;
 $417 = $415 & 1;
 $418 = (___muldi3(($206|0),0,($416|0),($417|0))|0);
 $419 = (getTempRet0() | 0);
 $420 = (_i64Add(($412|0),($413|0),($418|0),($419|0))|0);
 $421 = (getTempRet0() | 0);
 $422 = $388 ^ $420;
 $423 = $389 ^ $421;
 $424 = (_i64Add(($423|0),($422|0),($300|0),($301|0))|0);
 $425 = (getTempRet0() | 0);
 $426 = (_bitshift64Shl(($300|0),($301|0),1)|0);
 $427 = (getTempRet0() | 0);
 $428 = $426 & -2;
 $429 = $427 & 1;
 $430 = (___muldi3(($423|0),0,($428|0),($429|0))|0);
 $431 = (getTempRet0() | 0);
 $432 = (_i64Add(($424|0),($425|0),($430|0),($431|0))|0);
 $433 = (getTempRet0() | 0);
 $434 = $432 ^ $206;
 $435 = $433 ^ $207;
 $436 = (_bitshift64Lshr(($434|0),($435|0),24)|0);
 $437 = (getTempRet0() | 0);
 $438 = (_bitshift64Shl(($434|0),($435|0),40)|0);
 $439 = (getTempRet0() | 0);
 $440 = $436 | $438;
 $441 = $437 | $439;
 $442 = (_i64Add(($440|0),($441|0),($420|0),($421|0))|0);
 $443 = (getTempRet0() | 0);
 $444 = (_bitshift64Shl(($420|0),($421|0),1)|0);
 $445 = (getTempRet0() | 0);
 $446 = $444 & -2;
 $447 = $445 & 1;
 $448 = (___muldi3(($436|0),0,($446|0),($447|0))|0);
 $449 = (getTempRet0() | 0);
 $450 = (_i64Add(($442|0),($443|0),($448|0),($449|0))|0);
 $451 = (getTempRet0() | 0);
 $452 = $blockR;
 $453 = $452;
 HEAP32[$453>>2] = $450;
 $454 = (($452) + 4)|0;
 $455 = $454;
 HEAP32[$455>>2] = $451;
 $456 = $450 ^ $423;
 $457 = $451 ^ $422;
 $458 = (_bitshift64Lshr(($456|0),($457|0),16)|0);
 $459 = (getTempRet0() | 0);
 $460 = (_bitshift64Shl(($456|0),($457|0),48)|0);
 $461 = (getTempRet0() | 0);
 $462 = $458 | $460;
 $463 = $459 | $461;
 $464 = $arrayidx639;
 $465 = $464;
 HEAP32[$465>>2] = $462;
 $466 = (($464) + 4)|0;
 $467 = $466;
 HEAP32[$467>>2] = $463;
 $468 = (_i64Add(($462|0),($463|0),($432|0),($433|0))|0);
 $469 = (getTempRet0() | 0);
 $470 = (_bitshift64Shl(($432|0),($433|0),1)|0);
 $471 = (getTempRet0() | 0);
 $472 = $470 & -2;
 $473 = $471 & 1;
 $474 = (___muldi3(($458|0),0,($472|0),($473|0))|0);
 $475 = (getTempRet0() | 0);
 $476 = (_i64Add(($468|0),($469|0),($474|0),($475|0))|0);
 $477 = (getTempRet0() | 0);
 $478 = $arrayidx457;
 $479 = $478;
 HEAP32[$479>>2] = $476;
 $480 = (($478) + 4)|0;
 $481 = $480;
 HEAP32[$481>>2] = $477;
 $482 = $476 ^ $440;
 $483 = $477 ^ $441;
 $484 = (_bitshift64Lshr(($482|0),($483|0),63)|0);
 $485 = (getTempRet0() | 0);
 $486 = (_bitshift64Shl(($482|0),($483|0),1)|0);
 $487 = (getTempRet0() | 0);
 $488 = $484 | $486;
 $489 = $485 | $487;
 $490 = $arrayidx203;
 $491 = $490;
 HEAP32[$491>>2] = $488;
 $492 = (($490) + 4)|0;
 $493 = $492;
 HEAP32[$493>>2] = $489;
 $494 = (_i64Add(($308|0),($309|0),($168|0),($169|0))|0);
 $495 = (getTempRet0() | 0);
 $496 = (_bitshift64Shl(($168|0),($169|0),1)|0);
 $497 = (getTempRet0() | 0);
 $498 = $496 & -2;
 $499 = $497 & 1;
 $500 = (___muldi3(($308|0),0,($498|0),($499|0))|0);
 $501 = (getTempRet0() | 0);
 $502 = (_i64Add(($494|0),($495|0),($500|0),($501|0))|0);
 $503 = (getTempRet0() | 0);
 $504 = $502 ^ $74;
 $505 = $503 ^ $75;
 $506 = (_i64Add(($398|0),($399|0),($505|0),($504|0))|0);
 $507 = (getTempRet0() | 0);
 $508 = (_bitshift64Shl(($398|0),($399|0),1)|0);
 $509 = (getTempRet0() | 0);
 $510 = $508 & -2;
 $511 = $509 & 1;
 $512 = (___muldi3(($510|0),($511|0),($505|0),0)|0);
 $513 = (getTempRet0() | 0);
 $514 = (_i64Add(($506|0),($507|0),($512|0),($513|0))|0);
 $515 = (getTempRet0() | 0);
 $516 = $514 ^ $308;
 $517 = $515 ^ $309;
 $518 = (_bitshift64Lshr(($516|0),($517|0),24)|0);
 $519 = (getTempRet0() | 0);
 $520 = (_bitshift64Shl(($516|0),($517|0),40)|0);
 $521 = (getTempRet0() | 0);
 $522 = $518 | $520;
 $523 = $519 | $521;
 $524 = (_i64Add(($522|0),($523|0),($502|0),($503|0))|0);
 $525 = (getTempRet0() | 0);
 $526 = (_bitshift64Shl(($502|0),($503|0),1)|0);
 $527 = (getTempRet0() | 0);
 $528 = $526 & -2;
 $529 = $527 & 1;
 $530 = (___muldi3(($518|0),0,($528|0),($529|0))|0);
 $531 = (getTempRet0() | 0);
 $532 = (_i64Add(($524|0),($525|0),($530|0),($531|0))|0);
 $533 = (getTempRet0() | 0);
 $534 = $arrayidx199;
 $535 = $534;
 HEAP32[$535>>2] = $532;
 $536 = (($534) + 4)|0;
 $537 = $536;
 HEAP32[$537>>2] = $533;
 $538 = $532 ^ $505;
 $539 = $533 ^ $504;
 $540 = (_bitshift64Lshr(($538|0),($539|0),16)|0);
 $541 = (getTempRet0() | 0);
 $542 = (_bitshift64Shl(($538|0),($539|0),48)|0);
 $543 = (getTempRet0() | 0);
 $544 = $540 | $542;
 $545 = $541 | $543;
 $546 = $arrayidx24;
 $547 = $546;
 HEAP32[$547>>2] = $544;
 $548 = (($546) + 4)|0;
 $549 = $548;
 HEAP32[$549>>2] = $545;
 $550 = (_i64Add(($544|0),($545|0),($514|0),($515|0))|0);
 $551 = (getTempRet0() | 0);
 $552 = (_bitshift64Shl(($514|0),($515|0),1)|0);
 $553 = (getTempRet0() | 0);
 $554 = $552 & -2;
 $555 = $553 & 1;
 $556 = (___muldi3(($540|0),0,($554|0),($555|0))|0);
 $557 = (getTempRet0() | 0);
 $558 = (_i64Add(($550|0),($551|0),($556|0),($557|0))|0);
 $559 = (getTempRet0() | 0);
 $560 = $arrayidx664;
 $561 = $560;
 HEAP32[$561>>2] = $558;
 $562 = (($560) + 4)|0;
 $563 = $562;
 HEAP32[$563>>2] = $559;
 $564 = $558 ^ $522;
 $565 = $559 ^ $523;
 $566 = (_bitshift64Lshr(($564|0),($565|0),63)|0);
 $567 = (getTempRet0() | 0);
 $568 = (_bitshift64Shl(($564|0),($565|0),1)|0);
 $569 = (getTempRet0() | 0);
 $570 = $566 | $568;
 $571 = $567 | $569;
 $572 = $arrayidx410;
 $573 = $572;
 HEAP32[$573>>2] = $570;
 $574 = (($572) + 4)|0;
 $575 = $574;
 HEAP32[$575>>2] = $571;
 $576 = (_i64Add(($406|0),($407|0),($274|0),($275|0))|0);
 $577 = (getTempRet0() | 0);
 $578 = (_bitshift64Shl(($274|0),($275|0),1)|0);
 $579 = (getTempRet0() | 0);
 $580 = $578 & -2;
 $581 = $579 & 1;
 $582 = (___muldi3(($406|0),0,($580|0),($581|0))|0);
 $583 = (getTempRet0() | 0);
 $584 = (_i64Add(($576|0),($577|0),($582|0),($583|0))|0);
 $585 = (getTempRet0() | 0);
 $586 = $584 ^ $180;
 $587 = $585 ^ $181;
 $588 = (_i64Add(($587|0),($586|0),($88|0),($89|0))|0);
 $589 = (getTempRet0() | 0);
 $590 = (_bitshift64Shl(($88|0),($89|0),1)|0);
 $591 = (getTempRet0() | 0);
 $592 = $590 & -2;
 $593 = $591 & 1;
 $594 = (___muldi3(($587|0),0,($592|0),($593|0))|0);
 $595 = (getTempRet0() | 0);
 $596 = (_i64Add(($588|0),($589|0),($594|0),($595|0))|0);
 $597 = (getTempRet0() | 0);
 $598 = $596 ^ $406;
 $599 = $597 ^ $407;
 $600 = (_bitshift64Lshr(($598|0),($599|0),24)|0);
 $601 = (getTempRet0() | 0);
 $602 = (_bitshift64Shl(($598|0),($599|0),40)|0);
 $603 = (getTempRet0() | 0);
 $604 = $600 | $602;
 $605 = $601 | $603;
 $606 = (_i64Add(($604|0),($605|0),($584|0),($585|0))|0);
 $607 = (getTempRet0() | 0);
 $608 = (_bitshift64Shl(($584|0),($585|0),1)|0);
 $609 = (getTempRet0() | 0);
 $610 = $608 & -2;
 $611 = $609 & 1;
 $612 = (___muldi3(($600|0),0,($610|0),($611|0))|0);
 $613 = (getTempRet0() | 0);
 $614 = (_i64Add(($606|0),($607|0),($612|0),($613|0))|0);
 $615 = (getTempRet0() | 0);
 $616 = $arrayidx406;
 $617 = $616;
 HEAP32[$617>>2] = $614;
 $618 = (($616) + 4)|0;
 $619 = $618;
 HEAP32[$619>>2] = $615;
 $620 = $614 ^ $587;
 $621 = $615 ^ $586;
 $622 = (_bitshift64Lshr(($620|0),($621|0),16)|0);
 $623 = (getTempRet0() | 0);
 $624 = (_bitshift64Shl(($620|0),($621|0),48)|0);
 $625 = (getTempRet0() | 0);
 $626 = $622 | $624;
 $627 = $623 | $625;
 $628 = $arrayidx225;
 $629 = $628;
 HEAP32[$629>>2] = $626;
 $630 = (($628) + 4)|0;
 $631 = $630;
 HEAP32[$631>>2] = $627;
 $632 = (_i64Add(($626|0),($627|0),($596|0),($597|0))|0);
 $633 = (getTempRet0() | 0);
 $634 = (_bitshift64Shl(($596|0),($597|0),1)|0);
 $635 = (getTempRet0() | 0);
 $636 = $634 & -2;
 $637 = $635 & 1;
 $638 = (___muldi3(($622|0),0,($636|0),($637|0))|0);
 $639 = (getTempRet0() | 0);
 $640 = (_i64Add(($632|0),($633|0),($638|0),($639|0))|0);
 $641 = (getTempRet0() | 0);
 $642 = $arrayidx45;
 $643 = $642;
 HEAP32[$643>>2] = $640;
 $644 = (($642) + 4)|0;
 $645 = $644;
 HEAP32[$645>>2] = $641;
 $646 = $640 ^ $604;
 $647 = $641 ^ $605;
 $648 = (_bitshift64Lshr(($646|0),($647|0),63)|0);
 $649 = (getTempRet0() | 0);
 $650 = (_bitshift64Shl(($646|0),($647|0),1)|0);
 $651 = (getTempRet0() | 0);
 $652 = $648 | $650;
 $653 = $649 | $651;
 $654 = $arrayidx617;
 $655 = $654;
 HEAP32[$655>>2] = $652;
 $656 = (($654) + 4)|0;
 $657 = $656;
 HEAP32[$657>>2] = $653;
 $658 = (_i64Add(($376|0),($377|0),($100|0),($101|0))|0);
 $659 = (getTempRet0() | 0);
 $660 = (_bitshift64Shl(($376|0),($377|0),1)|0);
 $661 = (getTempRet0() | 0);
 $662 = $660 & -2;
 $663 = $661 & 1;
 $664 = (___muldi3(($662|0),($663|0),($100|0),0)|0);
 $665 = (getTempRet0() | 0);
 $666 = (_i64Add(($658|0),($659|0),($664|0),($665|0))|0);
 $667 = (getTempRet0() | 0);
 $668 = $666 ^ $286;
 $669 = $667 ^ $287;
 $670 = (_i64Add(($669|0),($668|0),($194|0),($195|0))|0);
 $671 = (getTempRet0() | 0);
 $672 = (_bitshift64Shl(($194|0),($195|0),1)|0);
 $673 = (getTempRet0() | 0);
 $674 = $672 & -2;
 $675 = $673 & 1;
 $676 = (___muldi3(($669|0),0,($674|0),($675|0))|0);
 $677 = (getTempRet0() | 0);
 $678 = (_i64Add(($670|0),($671|0),($676|0),($677|0))|0);
 $679 = (getTempRet0() | 0);
 $680 = $678 ^ $100;
 $681 = $679 ^ $101;
 $682 = (_bitshift64Lshr(($680|0),($681|0),24)|0);
 $683 = (getTempRet0() | 0);
 $684 = (_bitshift64Shl(($680|0),($681|0),40)|0);
 $685 = (getTempRet0() | 0);
 $686 = $682 | $684;
 $687 = $683 | $685;
 $688 = (_i64Add(($686|0),($687|0),($666|0),($667|0))|0);
 $689 = (getTempRet0() | 0);
 $690 = (_bitshift64Shl(($666|0),($667|0),1)|0);
 $691 = (getTempRet0() | 0);
 $692 = $690 & -2;
 $693 = $691 & 1;
 $694 = (___muldi3(($682|0),0,($692|0),($693|0))|0);
 $695 = (getTempRet0() | 0);
 $696 = (_i64Add(($688|0),($689|0),($694|0),($695|0))|0);
 $697 = (getTempRet0() | 0);
 $698 = $arrayidx613;
 $699 = $698;
 HEAP32[$699>>2] = $696;
 $700 = (($698) + 4)|0;
 $701 = $700;
 HEAP32[$701>>2] = $697;
 $702 = $696 ^ $669;
 $703 = $697 ^ $668;
 $704 = (_bitshift64Lshr(($702|0),($703|0),16)|0);
 $705 = (getTempRet0() | 0);
 $706 = (_bitshift64Shl(($702|0),($703|0),48)|0);
 $707 = (getTempRet0() | 0);
 $708 = $704 | $706;
 $709 = $705 | $707;
 $710 = $arrayidx432;
 $711 = $710;
 HEAP32[$711>>2] = $708;
 $712 = (($710) + 4)|0;
 $713 = $712;
 HEAP32[$713>>2] = $709;
 $714 = (_i64Add(($708|0),($709|0),($678|0),($679|0))|0);
 $715 = (getTempRet0() | 0);
 $716 = (_bitshift64Shl(($678|0),($679|0),1)|0);
 $717 = (getTempRet0() | 0);
 $718 = $716 & -2;
 $719 = $717 & 1;
 $720 = (___muldi3(($704|0),0,($718|0),($719|0))|0);
 $721 = (getTempRet0() | 0);
 $722 = (_i64Add(($714|0),($715|0),($720|0),($721|0))|0);
 $723 = (getTempRet0() | 0);
 $724 = $arrayidx250;
 $725 = $724;
 HEAP32[$725>>2] = $722;
 $726 = (($724) + 4)|0;
 $727 = $726;
 HEAP32[$727>>2] = $723;
 $728 = $722 ^ $686;
 $729 = $723 ^ $687;
 $730 = (_bitshift64Lshr(($728|0),($729|0),63)|0);
 $731 = (getTempRet0() | 0);
 $732 = (_bitshift64Shl(($728|0),($729|0),1)|0);
 $733 = (getTempRet0() | 0);
 $734 = $730 | $732;
 $735 = $731 | $733;
 $736 = $arrayidx5;
 $737 = $736;
 HEAP32[$737>>2] = $734;
 $738 = (($736) + 4)|0;
 $739 = $738;
 HEAP32[$739>>2] = $735;
 $add$ptr1650 = ((($blockR)) + 128|0);
 $740 = $add$ptr1650;
 $741 = $740;
 $742 = HEAP32[$741>>2]|0;
 $743 = (($740) + 4)|0;
 $744 = $743;
 $745 = HEAP32[$744>>2]|0;
 $arrayidx1655 = ((($blockR)) + 160|0);
 $746 = $arrayidx1655;
 $747 = $746;
 $748 = HEAP32[$747>>2]|0;
 $749 = (($746) + 4)|0;
 $750 = $749;
 $751 = HEAP32[$750>>2]|0;
 $752 = (_i64Add(($748|0),($751|0),($742|0),($745|0))|0);
 $753 = (getTempRet0() | 0);
 $754 = (_bitshift64Shl(($742|0),($745|0),1)|0);
 $755 = (getTempRet0() | 0);
 $756 = $754 & -2;
 $757 = $755 & 1;
 $758 = (___muldi3(($756|0),($757|0),($748|0),0)|0);
 $759 = (getTempRet0() | 0);
 $760 = (_i64Add(($752|0),($753|0),($758|0),($759|0))|0);
 $761 = (getTempRet0() | 0);
 $arrayidx1677 = ((($blockR)) + 224|0);
 $762 = $arrayidx1677;
 $763 = $762;
 $764 = HEAP32[$763>>2]|0;
 $765 = (($762) + 4)|0;
 $766 = $765;
 $767 = HEAP32[$766>>2]|0;
 $768 = $760 ^ $764;
 $769 = $761 ^ $767;
 $arrayidx1702 = ((($blockR)) + 192|0);
 $770 = $arrayidx1702;
 $771 = $770;
 $772 = HEAP32[$771>>2]|0;
 $773 = (($770) + 4)|0;
 $774 = $773;
 $775 = HEAP32[$774>>2]|0;
 $776 = (_i64Add(($769|0),($768|0),($772|0),($775|0))|0);
 $777 = (getTempRet0() | 0);
 $778 = (_bitshift64Shl(($772|0),($775|0),1)|0);
 $779 = (getTempRet0() | 0);
 $780 = $778 & -2;
 $781 = $779 & 1;
 $782 = (___muldi3(($780|0),($781|0),($769|0),0)|0);
 $783 = (getTempRet0() | 0);
 $784 = (_i64Add(($776|0),($777|0),($782|0),($783|0))|0);
 $785 = (getTempRet0() | 0);
 $786 = $784 ^ $748;
 $787 = $785 ^ $751;
 $788 = (_bitshift64Lshr(($786|0),($787|0),24)|0);
 $789 = (getTempRet0() | 0);
 $790 = (_bitshift64Shl(($786|0),($787|0),40)|0);
 $791 = (getTempRet0() | 0);
 $792 = $788 | $790;
 $793 = $789 | $791;
 $794 = (_i64Add(($792|0),($793|0),($760|0),($761|0))|0);
 $795 = (getTempRet0() | 0);
 $796 = (_bitshift64Shl(($760|0),($761|0),1)|0);
 $797 = (getTempRet0() | 0);
 $798 = $796 & -2;
 $799 = $797 & 1;
 $800 = (___muldi3(($788|0),0,($798|0),($799|0))|0);
 $801 = (getTempRet0() | 0);
 $802 = (_i64Add(($794|0),($795|0),($800|0),($801|0))|0);
 $803 = (getTempRet0() | 0);
 $804 = $add$ptr1650;
 $805 = $804;
 HEAP32[$805>>2] = $802;
 $806 = (($804) + 4)|0;
 $807 = $806;
 HEAP32[$807>>2] = $803;
 $808 = $802 ^ $769;
 $809 = $803 ^ $768;
 $810 = (_bitshift64Lshr(($808|0),($809|0),16)|0);
 $811 = (getTempRet0() | 0);
 $812 = (_bitshift64Shl(($808|0),($809|0),48)|0);
 $813 = (getTempRet0() | 0);
 $814 = $810 | $812;
 $815 = $811 | $813;
 $816 = $arrayidx1677;
 $817 = $816;
 HEAP32[$817>>2] = $814;
 $818 = (($816) + 4)|0;
 $819 = $818;
 HEAP32[$819>>2] = $815;
 $820 = (_i64Add(($814|0),($815|0),($784|0),($785|0))|0);
 $821 = (getTempRet0() | 0);
 $822 = (_bitshift64Shl(($784|0),($785|0),1)|0);
 $823 = (getTempRet0() | 0);
 $824 = $822 & -2;
 $825 = $823 & 1;
 $826 = (___muldi3(($810|0),0,($824|0),($825|0))|0);
 $827 = (getTempRet0() | 0);
 $828 = (_i64Add(($820|0),($821|0),($826|0),($827|0))|0);
 $829 = (getTempRet0() | 0);
 $830 = $arrayidx1702;
 $831 = $830;
 HEAP32[$831>>2] = $828;
 $832 = (($830) + 4)|0;
 $833 = $832;
 HEAP32[$833>>2] = $829;
 $834 = $828 ^ $792;
 $835 = $829 ^ $793;
 $836 = (_bitshift64Lshr(($834|0),($835|0),63)|0);
 $837 = (getTempRet0() | 0);
 $838 = (_bitshift64Shl(($834|0),($835|0),1)|0);
 $839 = (getTempRet0() | 0);
 $840 = $836 | $838;
 $841 = $837 | $839;
 $842 = $arrayidx1655;
 $843 = $842;
 HEAP32[$843>>2] = $840;
 $844 = (($842) + 4)|0;
 $845 = $844;
 HEAP32[$845>>2] = $841;
 $arrayidx1858 = ((($blockR)) + 136|0);
 $846 = $arrayidx1858;
 $847 = $846;
 $848 = HEAP32[$847>>2]|0;
 $849 = (($846) + 4)|0;
 $850 = $849;
 $851 = HEAP32[$850>>2]|0;
 $arrayidx1862 = ((($blockR)) + 168|0);
 $852 = $arrayidx1862;
 $853 = $852;
 $854 = HEAP32[$853>>2]|0;
 $855 = (($852) + 4)|0;
 $856 = $855;
 $857 = HEAP32[$856>>2]|0;
 $858 = (_i64Add(($854|0),($857|0),($848|0),($851|0))|0);
 $859 = (getTempRet0() | 0);
 $860 = (_bitshift64Shl(($848|0),($851|0),1)|0);
 $861 = (getTempRet0() | 0);
 $862 = $860 & -2;
 $863 = $861 & 1;
 $864 = (___muldi3(($862|0),($863|0),($854|0),0)|0);
 $865 = (getTempRet0() | 0);
 $866 = (_i64Add(($858|0),($859|0),($864|0),($865|0))|0);
 $867 = (getTempRet0() | 0);
 $arrayidx1884 = ((($blockR)) + 232|0);
 $868 = $arrayidx1884;
 $869 = $868;
 $870 = HEAP32[$869>>2]|0;
 $871 = (($868) + 4)|0;
 $872 = $871;
 $873 = HEAP32[$872>>2]|0;
 $874 = $866 ^ $870;
 $875 = $867 ^ $873;
 $arrayidx1909 = ((($blockR)) + 200|0);
 $876 = $arrayidx1909;
 $877 = $876;
 $878 = HEAP32[$877>>2]|0;
 $879 = (($876) + 4)|0;
 $880 = $879;
 $881 = HEAP32[$880>>2]|0;
 $882 = (_i64Add(($875|0),($874|0),($878|0),($881|0))|0);
 $883 = (getTempRet0() | 0);
 $884 = (_bitshift64Shl(($878|0),($881|0),1)|0);
 $885 = (getTempRet0() | 0);
 $886 = $884 & -2;
 $887 = $885 & 1;
 $888 = (___muldi3(($886|0),($887|0),($875|0),0)|0);
 $889 = (getTempRet0() | 0);
 $890 = (_i64Add(($882|0),($883|0),($888|0),($889|0))|0);
 $891 = (getTempRet0() | 0);
 $892 = $890 ^ $854;
 $893 = $891 ^ $857;
 $894 = (_bitshift64Lshr(($892|0),($893|0),24)|0);
 $895 = (getTempRet0() | 0);
 $896 = (_bitshift64Shl(($892|0),($893|0),40)|0);
 $897 = (getTempRet0() | 0);
 $898 = $894 | $896;
 $899 = $895 | $897;
 $900 = (_i64Add(($898|0),($899|0),($866|0),($867|0))|0);
 $901 = (getTempRet0() | 0);
 $902 = (_bitshift64Shl(($866|0),($867|0),1)|0);
 $903 = (getTempRet0() | 0);
 $904 = $902 & -2;
 $905 = $903 & 1;
 $906 = (___muldi3(($894|0),0,($904|0),($905|0))|0);
 $907 = (getTempRet0() | 0);
 $908 = (_i64Add(($900|0),($901|0),($906|0),($907|0))|0);
 $909 = (getTempRet0() | 0);
 $910 = $arrayidx1858;
 $911 = $910;
 HEAP32[$911>>2] = $908;
 $912 = (($910) + 4)|0;
 $913 = $912;
 HEAP32[$913>>2] = $909;
 $914 = $908 ^ $875;
 $915 = $909 ^ $874;
 $916 = (_bitshift64Lshr(($914|0),($915|0),16)|0);
 $917 = (getTempRet0() | 0);
 $918 = (_bitshift64Shl(($914|0),($915|0),48)|0);
 $919 = (getTempRet0() | 0);
 $920 = $916 | $918;
 $921 = $917 | $919;
 $922 = $arrayidx1884;
 $923 = $922;
 HEAP32[$923>>2] = $920;
 $924 = (($922) + 4)|0;
 $925 = $924;
 HEAP32[$925>>2] = $921;
 $926 = (_i64Add(($920|0),($921|0),($890|0),($891|0))|0);
 $927 = (getTempRet0() | 0);
 $928 = (_bitshift64Shl(($890|0),($891|0),1)|0);
 $929 = (getTempRet0() | 0);
 $930 = $928 & -2;
 $931 = $929 & 1;
 $932 = (___muldi3(($916|0),0,($930|0),($931|0))|0);
 $933 = (getTempRet0() | 0);
 $934 = (_i64Add(($926|0),($927|0),($932|0),($933|0))|0);
 $935 = (getTempRet0() | 0);
 $936 = $arrayidx1909;
 $937 = $936;
 HEAP32[$937>>2] = $934;
 $938 = (($936) + 4)|0;
 $939 = $938;
 HEAP32[$939>>2] = $935;
 $940 = $934 ^ $898;
 $941 = $935 ^ $899;
 $942 = (_bitshift64Lshr(($940|0),($941|0),63)|0);
 $943 = (getTempRet0() | 0);
 $944 = (_bitshift64Shl(($940|0),($941|0),1)|0);
 $945 = (getTempRet0() | 0);
 $946 = $942 | $944;
 $947 = $943 | $945;
 $948 = $arrayidx1862;
 $949 = $948;
 HEAP32[$949>>2] = $946;
 $950 = (($948) + 4)|0;
 $951 = $950;
 HEAP32[$951>>2] = $947;
 $arrayidx2065 = ((($blockR)) + 144|0);
 $952 = $arrayidx2065;
 $953 = $952;
 $954 = HEAP32[$953>>2]|0;
 $955 = (($952) + 4)|0;
 $956 = $955;
 $957 = HEAP32[$956>>2]|0;
 $arrayidx2069 = ((($blockR)) + 176|0);
 $958 = $arrayidx2069;
 $959 = $958;
 $960 = HEAP32[$959>>2]|0;
 $961 = (($958) + 4)|0;
 $962 = $961;
 $963 = HEAP32[$962>>2]|0;
 $964 = (_i64Add(($960|0),($963|0),($954|0),($957|0))|0);
 $965 = (getTempRet0() | 0);
 $966 = (_bitshift64Shl(($954|0),($957|0),1)|0);
 $967 = (getTempRet0() | 0);
 $968 = $966 & -2;
 $969 = $967 & 1;
 $970 = (___muldi3(($968|0),($969|0),($960|0),0)|0);
 $971 = (getTempRet0() | 0);
 $972 = (_i64Add(($964|0),($965|0),($970|0),($971|0))|0);
 $973 = (getTempRet0() | 0);
 $arrayidx2091 = ((($blockR)) + 240|0);
 $974 = $arrayidx2091;
 $975 = $974;
 $976 = HEAP32[$975>>2]|0;
 $977 = (($974) + 4)|0;
 $978 = $977;
 $979 = HEAP32[$978>>2]|0;
 $980 = $972 ^ $976;
 $981 = $973 ^ $979;
 $arrayidx2116 = ((($blockR)) + 208|0);
 $982 = $arrayidx2116;
 $983 = $982;
 $984 = HEAP32[$983>>2]|0;
 $985 = (($982) + 4)|0;
 $986 = $985;
 $987 = HEAP32[$986>>2]|0;
 $988 = (_i64Add(($981|0),($980|0),($984|0),($987|0))|0);
 $989 = (getTempRet0() | 0);
 $990 = (_bitshift64Shl(($984|0),($987|0),1)|0);
 $991 = (getTempRet0() | 0);
 $992 = $990 & -2;
 $993 = $991 & 1;
 $994 = (___muldi3(($992|0),($993|0),($981|0),0)|0);
 $995 = (getTempRet0() | 0);
 $996 = (_i64Add(($988|0),($989|0),($994|0),($995|0))|0);
 $997 = (getTempRet0() | 0);
 $998 = $996 ^ $960;
 $999 = $997 ^ $963;
 $1000 = (_bitshift64Lshr(($998|0),($999|0),24)|0);
 $1001 = (getTempRet0() | 0);
 $1002 = (_bitshift64Shl(($998|0),($999|0),40)|0);
 $1003 = (getTempRet0() | 0);
 $1004 = $1000 | $1002;
 $1005 = $1001 | $1003;
 $1006 = (_i64Add(($1004|0),($1005|0),($972|0),($973|0))|0);
 $1007 = (getTempRet0() | 0);
 $1008 = (_bitshift64Shl(($972|0),($973|0),1)|0);
 $1009 = (getTempRet0() | 0);
 $1010 = $1008 & -2;
 $1011 = $1009 & 1;
 $1012 = (___muldi3(($1000|0),0,($1010|0),($1011|0))|0);
 $1013 = (getTempRet0() | 0);
 $1014 = (_i64Add(($1006|0),($1007|0),($1012|0),($1013|0))|0);
 $1015 = (getTempRet0() | 0);
 $1016 = $arrayidx2065;
 $1017 = $1016;
 HEAP32[$1017>>2] = $1014;
 $1018 = (($1016) + 4)|0;
 $1019 = $1018;
 HEAP32[$1019>>2] = $1015;
 $1020 = $1014 ^ $981;
 $1021 = $1015 ^ $980;
 $1022 = (_bitshift64Lshr(($1020|0),($1021|0),16)|0);
 $1023 = (getTempRet0() | 0);
 $1024 = (_bitshift64Shl(($1020|0),($1021|0),48)|0);
 $1025 = (getTempRet0() | 0);
 $1026 = $1022 | $1024;
 $1027 = $1023 | $1025;
 $1028 = $arrayidx2091;
 $1029 = $1028;
 HEAP32[$1029>>2] = $1026;
 $1030 = (($1028) + 4)|0;
 $1031 = $1030;
 HEAP32[$1031>>2] = $1027;
 $1032 = (_i64Add(($1026|0),($1027|0),($996|0),($997|0))|0);
 $1033 = (getTempRet0() | 0);
 $1034 = (_bitshift64Shl(($996|0),($997|0),1)|0);
 $1035 = (getTempRet0() | 0);
 $1036 = $1034 & -2;
 $1037 = $1035 & 1;
 $1038 = (___muldi3(($1022|0),0,($1036|0),($1037|0))|0);
 $1039 = (getTempRet0() | 0);
 $1040 = (_i64Add(($1032|0),($1033|0),($1038|0),($1039|0))|0);
 $1041 = (getTempRet0() | 0);
 $1042 = $1040 ^ $1004;
 $1043 = $1041 ^ $1005;
 $1044 = (_bitshift64Lshr(($1042|0),($1043|0),63)|0);
 $1045 = (getTempRet0() | 0);
 $1046 = (_bitshift64Shl(($1042|0),($1043|0),1)|0);
 $1047 = (getTempRet0() | 0);
 $1048 = $1044 | $1046;
 $1049 = $1045 | $1047;
 $1050 = $arrayidx2069;
 $1051 = $1050;
 HEAP32[$1051>>2] = $1048;
 $1052 = (($1050) + 4)|0;
 $1053 = $1052;
 HEAP32[$1053>>2] = $1049;
 $arrayidx2272 = ((($blockR)) + 152|0);
 $1054 = $arrayidx2272;
 $1055 = $1054;
 $1056 = HEAP32[$1055>>2]|0;
 $1057 = (($1054) + 4)|0;
 $1058 = $1057;
 $1059 = HEAP32[$1058>>2]|0;
 $arrayidx2276 = ((($blockR)) + 184|0);
 $1060 = $arrayidx2276;
 $1061 = $1060;
 $1062 = HEAP32[$1061>>2]|0;
 $1063 = (($1060) + 4)|0;
 $1064 = $1063;
 $1065 = HEAP32[$1064>>2]|0;
 $1066 = (_i64Add(($1062|0),($1065|0),($1056|0),($1059|0))|0);
 $1067 = (getTempRet0() | 0);
 $1068 = (_bitshift64Shl(($1056|0),($1059|0),1)|0);
 $1069 = (getTempRet0() | 0);
 $1070 = $1068 & -2;
 $1071 = $1069 & 1;
 $1072 = (___muldi3(($1070|0),($1071|0),($1062|0),0)|0);
 $1073 = (getTempRet0() | 0);
 $1074 = (_i64Add(($1066|0),($1067|0),($1072|0),($1073|0))|0);
 $1075 = (getTempRet0() | 0);
 $arrayidx2298 = ((($blockR)) + 248|0);
 $1076 = $arrayidx2298;
 $1077 = $1076;
 $1078 = HEAP32[$1077>>2]|0;
 $1079 = (($1076) + 4)|0;
 $1080 = $1079;
 $1081 = HEAP32[$1080>>2]|0;
 $1082 = $1074 ^ $1078;
 $1083 = $1075 ^ $1081;
 $arrayidx2323 = ((($blockR)) + 216|0);
 $1084 = $arrayidx2323;
 $1085 = $1084;
 $1086 = HEAP32[$1085>>2]|0;
 $1087 = (($1084) + 4)|0;
 $1088 = $1087;
 $1089 = HEAP32[$1088>>2]|0;
 $1090 = (_i64Add(($1083|0),($1082|0),($1086|0),($1089|0))|0);
 $1091 = (getTempRet0() | 0);
 $1092 = (_bitshift64Shl(($1086|0),($1089|0),1)|0);
 $1093 = (getTempRet0() | 0);
 $1094 = $1092 & -2;
 $1095 = $1093 & 1;
 $1096 = (___muldi3(($1094|0),($1095|0),($1083|0),0)|0);
 $1097 = (getTempRet0() | 0);
 $1098 = (_i64Add(($1090|0),($1091|0),($1096|0),($1097|0))|0);
 $1099 = (getTempRet0() | 0);
 $1100 = $1098 ^ $1062;
 $1101 = $1099 ^ $1065;
 $1102 = (_bitshift64Lshr(($1100|0),($1101|0),24)|0);
 $1103 = (getTempRet0() | 0);
 $1104 = (_bitshift64Shl(($1100|0),($1101|0),40)|0);
 $1105 = (getTempRet0() | 0);
 $1106 = $1102 | $1104;
 $1107 = $1103 | $1105;
 $1108 = (_i64Add(($1106|0),($1107|0),($1074|0),($1075|0))|0);
 $1109 = (getTempRet0() | 0);
 $1110 = (_bitshift64Shl(($1074|0),($1075|0),1)|0);
 $1111 = (getTempRet0() | 0);
 $1112 = $1110 & -2;
 $1113 = $1111 & 1;
 $1114 = (___muldi3(($1102|0),0,($1112|0),($1113|0))|0);
 $1115 = (getTempRet0() | 0);
 $1116 = (_i64Add(($1108|0),($1109|0),($1114|0),($1115|0))|0);
 $1117 = (getTempRet0() | 0);
 $1118 = $arrayidx2272;
 $1119 = $1118;
 HEAP32[$1119>>2] = $1116;
 $1120 = (($1118) + 4)|0;
 $1121 = $1120;
 HEAP32[$1121>>2] = $1117;
 $1122 = $1116 ^ $1083;
 $1123 = $1117 ^ $1082;
 $1124 = (_bitshift64Lshr(($1122|0),($1123|0),16)|0);
 $1125 = (getTempRet0() | 0);
 $1126 = (_bitshift64Shl(($1122|0),($1123|0),48)|0);
 $1127 = (getTempRet0() | 0);
 $1128 = $1124 | $1126;
 $1129 = $1125 | $1127;
 $1130 = (_i64Add(($1128|0),($1129|0),($1098|0),($1099|0))|0);
 $1131 = (getTempRet0() | 0);
 $1132 = (_bitshift64Shl(($1098|0),($1099|0),1)|0);
 $1133 = (getTempRet0() | 0);
 $1134 = $1132 & -2;
 $1135 = $1133 & 1;
 $1136 = (___muldi3(($1124|0),0,($1134|0),($1135|0))|0);
 $1137 = (getTempRet0() | 0);
 $1138 = (_i64Add(($1130|0),($1131|0),($1136|0),($1137|0))|0);
 $1139 = (getTempRet0() | 0);
 $1140 = $1138 ^ $1106;
 $1141 = $1139 ^ $1107;
 $1142 = (_bitshift64Lshr(($1140|0),($1141|0),63)|0);
 $1143 = (getTempRet0() | 0);
 $1144 = (_bitshift64Shl(($1140|0),($1141|0),1)|0);
 $1145 = (getTempRet0() | 0);
 $1146 = $1142 | $1144;
 $1147 = $1143 | $1145;
 $1148 = $arrayidx2276;
 $1149 = $1148;
 HEAP32[$1149>>2] = $1146;
 $1150 = (($1148) + 4)|0;
 $1151 = $1150;
 HEAP32[$1151>>2] = $1147;
 $1152 = (_i64Add(($946|0),($947|0),($802|0),($803|0))|0);
 $1153 = (getTempRet0() | 0);
 $1154 = (_bitshift64Shl(($802|0),($803|0),1)|0);
 $1155 = (getTempRet0() | 0);
 $1156 = $1154 & -2;
 $1157 = $1155 & 1;
 $1158 = (___muldi3(($946|0),0,($1156|0),($1157|0))|0);
 $1159 = (getTempRet0() | 0);
 $1160 = (_i64Add(($1152|0),($1153|0),($1158|0),($1159|0))|0);
 $1161 = (getTempRet0() | 0);
 $1162 = $1128 ^ $1160;
 $1163 = $1129 ^ $1161;
 $1164 = (_i64Add(($1163|0),($1162|0),($1040|0),($1041|0))|0);
 $1165 = (getTempRet0() | 0);
 $1166 = (_bitshift64Shl(($1040|0),($1041|0),1)|0);
 $1167 = (getTempRet0() | 0);
 $1168 = $1166 & -2;
 $1169 = $1167 & 1;
 $1170 = (___muldi3(($1163|0),0,($1168|0),($1169|0))|0);
 $1171 = (getTempRet0() | 0);
 $1172 = (_i64Add(($1164|0),($1165|0),($1170|0),($1171|0))|0);
 $1173 = (getTempRet0() | 0);
 $1174 = $1172 ^ $946;
 $1175 = $1173 ^ $947;
 $1176 = (_bitshift64Lshr(($1174|0),($1175|0),24)|0);
 $1177 = (getTempRet0() | 0);
 $1178 = (_bitshift64Shl(($1174|0),($1175|0),40)|0);
 $1179 = (getTempRet0() | 0);
 $1180 = $1176 | $1178;
 $1181 = $1177 | $1179;
 $1182 = (_i64Add(($1180|0),($1181|0),($1160|0),($1161|0))|0);
 $1183 = (getTempRet0() | 0);
 $1184 = (_bitshift64Shl(($1160|0),($1161|0),1)|0);
 $1185 = (getTempRet0() | 0);
 $1186 = $1184 & -2;
 $1187 = $1185 & 1;
 $1188 = (___muldi3(($1176|0),0,($1186|0),($1187|0))|0);
 $1189 = (getTempRet0() | 0);
 $1190 = (_i64Add(($1182|0),($1183|0),($1188|0),($1189|0))|0);
 $1191 = (getTempRet0() | 0);
 $1192 = $add$ptr1650;
 $1193 = $1192;
 HEAP32[$1193>>2] = $1190;
 $1194 = (($1192) + 4)|0;
 $1195 = $1194;
 HEAP32[$1195>>2] = $1191;
 $1196 = $1190 ^ $1163;
 $1197 = $1191 ^ $1162;
 $1198 = (_bitshift64Lshr(($1196|0),($1197|0),16)|0);
 $1199 = (getTempRet0() | 0);
 $1200 = (_bitshift64Shl(($1196|0),($1197|0),48)|0);
 $1201 = (getTempRet0() | 0);
 $1202 = $1198 | $1200;
 $1203 = $1199 | $1201;
 $1204 = $arrayidx2298;
 $1205 = $1204;
 HEAP32[$1205>>2] = $1202;
 $1206 = (($1204) + 4)|0;
 $1207 = $1206;
 HEAP32[$1207>>2] = $1203;
 $1208 = (_i64Add(($1202|0),($1203|0),($1172|0),($1173|0))|0);
 $1209 = (getTempRet0() | 0);
 $1210 = (_bitshift64Shl(($1172|0),($1173|0),1)|0);
 $1211 = (getTempRet0() | 0);
 $1212 = $1210 & -2;
 $1213 = $1211 & 1;
 $1214 = (___muldi3(($1198|0),0,($1212|0),($1213|0))|0);
 $1215 = (getTempRet0() | 0);
 $1216 = (_i64Add(($1208|0),($1209|0),($1214|0),($1215|0))|0);
 $1217 = (getTempRet0() | 0);
 $1218 = $arrayidx2116;
 $1219 = $1218;
 HEAP32[$1219>>2] = $1216;
 $1220 = (($1218) + 4)|0;
 $1221 = $1220;
 HEAP32[$1221>>2] = $1217;
 $1222 = $1216 ^ $1180;
 $1223 = $1217 ^ $1181;
 $1224 = (_bitshift64Lshr(($1222|0),($1223|0),63)|0);
 $1225 = (getTempRet0() | 0);
 $1226 = (_bitshift64Shl(($1222|0),($1223|0),1)|0);
 $1227 = (getTempRet0() | 0);
 $1228 = $1224 | $1226;
 $1229 = $1225 | $1227;
 $1230 = $arrayidx1862;
 $1231 = $1230;
 HEAP32[$1231>>2] = $1228;
 $1232 = (($1230) + 4)|0;
 $1233 = $1232;
 HEAP32[$1233>>2] = $1229;
 $1234 = (_i64Add(($1048|0),($1049|0),($908|0),($909|0))|0);
 $1235 = (getTempRet0() | 0);
 $1236 = (_bitshift64Shl(($908|0),($909|0),1)|0);
 $1237 = (getTempRet0() | 0);
 $1238 = $1236 & -2;
 $1239 = $1237 & 1;
 $1240 = (___muldi3(($1048|0),0,($1238|0),($1239|0))|0);
 $1241 = (getTempRet0() | 0);
 $1242 = (_i64Add(($1234|0),($1235|0),($1240|0),($1241|0))|0);
 $1243 = (getTempRet0() | 0);
 $1244 = $1242 ^ $814;
 $1245 = $1243 ^ $815;
 $1246 = (_i64Add(($1138|0),($1139|0),($1245|0),($1244|0))|0);
 $1247 = (getTempRet0() | 0);
 $1248 = (_bitshift64Shl(($1138|0),($1139|0),1)|0);
 $1249 = (getTempRet0() | 0);
 $1250 = $1248 & -2;
 $1251 = $1249 & 1;
 $1252 = (___muldi3(($1250|0),($1251|0),($1245|0),0)|0);
 $1253 = (getTempRet0() | 0);
 $1254 = (_i64Add(($1246|0),($1247|0),($1252|0),($1253|0))|0);
 $1255 = (getTempRet0() | 0);
 $1256 = $1254 ^ $1048;
 $1257 = $1255 ^ $1049;
 $1258 = (_bitshift64Lshr(($1256|0),($1257|0),24)|0);
 $1259 = (getTempRet0() | 0);
 $1260 = (_bitshift64Shl(($1256|0),($1257|0),40)|0);
 $1261 = (getTempRet0() | 0);
 $1262 = $1258 | $1260;
 $1263 = $1259 | $1261;
 $1264 = (_i64Add(($1262|0),($1263|0),($1242|0),($1243|0))|0);
 $1265 = (getTempRet0() | 0);
 $1266 = (_bitshift64Shl(($1242|0),($1243|0),1)|0);
 $1267 = (getTempRet0() | 0);
 $1268 = $1266 & -2;
 $1269 = $1267 & 1;
 $1270 = (___muldi3(($1258|0),0,($1268|0),($1269|0))|0);
 $1271 = (getTempRet0() | 0);
 $1272 = (_i64Add(($1264|0),($1265|0),($1270|0),($1271|0))|0);
 $1273 = (getTempRet0() | 0);
 $1274 = $arrayidx1858;
 $1275 = $1274;
 HEAP32[$1275>>2] = $1272;
 $1276 = (($1274) + 4)|0;
 $1277 = $1276;
 HEAP32[$1277>>2] = $1273;
 $1278 = $1272 ^ $1245;
 $1279 = $1273 ^ $1244;
 $1280 = (_bitshift64Lshr(($1278|0),($1279|0),16)|0);
 $1281 = (getTempRet0() | 0);
 $1282 = (_bitshift64Shl(($1278|0),($1279|0),48)|0);
 $1283 = (getTempRet0() | 0);
 $1284 = $1280 | $1282;
 $1285 = $1281 | $1283;
 $1286 = $arrayidx1677;
 $1287 = $1286;
 HEAP32[$1287>>2] = $1284;
 $1288 = (($1286) + 4)|0;
 $1289 = $1288;
 HEAP32[$1289>>2] = $1285;
 $1290 = (_i64Add(($1284|0),($1285|0),($1254|0),($1255|0))|0);
 $1291 = (getTempRet0() | 0);
 $1292 = (_bitshift64Shl(($1254|0),($1255|0),1)|0);
 $1293 = (getTempRet0() | 0);
 $1294 = $1292 & -2;
 $1295 = $1293 & 1;
 $1296 = (___muldi3(($1280|0),0,($1294|0),($1295|0))|0);
 $1297 = (getTempRet0() | 0);
 $1298 = (_i64Add(($1290|0),($1291|0),($1296|0),($1297|0))|0);
 $1299 = (getTempRet0() | 0);
 $1300 = $arrayidx2323;
 $1301 = $1300;
 HEAP32[$1301>>2] = $1298;
 $1302 = (($1300) + 4)|0;
 $1303 = $1302;
 HEAP32[$1303>>2] = $1299;
 $1304 = $1298 ^ $1262;
 $1305 = $1299 ^ $1263;
 $1306 = (_bitshift64Lshr(($1304|0),($1305|0),63)|0);
 $1307 = (getTempRet0() | 0);
 $1308 = (_bitshift64Shl(($1304|0),($1305|0),1)|0);
 $1309 = (getTempRet0() | 0);
 $1310 = $1306 | $1308;
 $1311 = $1307 | $1309;
 $1312 = $arrayidx2069;
 $1313 = $1312;
 HEAP32[$1313>>2] = $1310;
 $1314 = (($1312) + 4)|0;
 $1315 = $1314;
 HEAP32[$1315>>2] = $1311;
 $1316 = (_i64Add(($1146|0),($1147|0),($1014|0),($1015|0))|0);
 $1317 = (getTempRet0() | 0);
 $1318 = (_bitshift64Shl(($1014|0),($1015|0),1)|0);
 $1319 = (getTempRet0() | 0);
 $1320 = $1318 & -2;
 $1321 = $1319 & 1;
 $1322 = (___muldi3(($1146|0),0,($1320|0),($1321|0))|0);
 $1323 = (getTempRet0() | 0);
 $1324 = (_i64Add(($1316|0),($1317|0),($1322|0),($1323|0))|0);
 $1325 = (getTempRet0() | 0);
 $1326 = $1324 ^ $920;
 $1327 = $1325 ^ $921;
 $1328 = (_i64Add(($1327|0),($1326|0),($828|0),($829|0))|0);
 $1329 = (getTempRet0() | 0);
 $1330 = (_bitshift64Shl(($828|0),($829|0),1)|0);
 $1331 = (getTempRet0() | 0);
 $1332 = $1330 & -2;
 $1333 = $1331 & 1;
 $1334 = (___muldi3(($1327|0),0,($1332|0),($1333|0))|0);
 $1335 = (getTempRet0() | 0);
 $1336 = (_i64Add(($1328|0),($1329|0),($1334|0),($1335|0))|0);
 $1337 = (getTempRet0() | 0);
 $1338 = $1336 ^ $1146;
 $1339 = $1337 ^ $1147;
 $1340 = (_bitshift64Lshr(($1338|0),($1339|0),24)|0);
 $1341 = (getTempRet0() | 0);
 $1342 = (_bitshift64Shl(($1338|0),($1339|0),40)|0);
 $1343 = (getTempRet0() | 0);
 $1344 = $1340 | $1342;
 $1345 = $1341 | $1343;
 $1346 = (_i64Add(($1344|0),($1345|0),($1324|0),($1325|0))|0);
 $1347 = (getTempRet0() | 0);
 $1348 = (_bitshift64Shl(($1324|0),($1325|0),1)|0);
 $1349 = (getTempRet0() | 0);
 $1350 = $1348 & -2;
 $1351 = $1349 & 1;
 $1352 = (___muldi3(($1340|0),0,($1350|0),($1351|0))|0);
 $1353 = (getTempRet0() | 0);
 $1354 = (_i64Add(($1346|0),($1347|0),($1352|0),($1353|0))|0);
 $1355 = (getTempRet0() | 0);
 $1356 = $arrayidx2065;
 $1357 = $1356;
 HEAP32[$1357>>2] = $1354;
 $1358 = (($1356) + 4)|0;
 $1359 = $1358;
 HEAP32[$1359>>2] = $1355;
 $1360 = $1354 ^ $1327;
 $1361 = $1355 ^ $1326;
 $1362 = (_bitshift64Lshr(($1360|0),($1361|0),16)|0);
 $1363 = (getTempRet0() | 0);
 $1364 = (_bitshift64Shl(($1360|0),($1361|0),48)|0);
 $1365 = (getTempRet0() | 0);
 $1366 = $1362 | $1364;
 $1367 = $1363 | $1365;
 $1368 = $arrayidx1884;
 $1369 = $1368;
 HEAP32[$1369>>2] = $1366;
 $1370 = (($1368) + 4)|0;
 $1371 = $1370;
 HEAP32[$1371>>2] = $1367;
 $1372 = (_i64Add(($1366|0),($1367|0),($1336|0),($1337|0))|0);
 $1373 = (getTempRet0() | 0);
 $1374 = (_bitshift64Shl(($1336|0),($1337|0),1)|0);
 $1375 = (getTempRet0() | 0);
 $1376 = $1374 & -2;
 $1377 = $1375 & 1;
 $1378 = (___muldi3(($1362|0),0,($1376|0),($1377|0))|0);
 $1379 = (getTempRet0() | 0);
 $1380 = (_i64Add(($1372|0),($1373|0),($1378|0),($1379|0))|0);
 $1381 = (getTempRet0() | 0);
 $1382 = $arrayidx1702;
 $1383 = $1382;
 HEAP32[$1383>>2] = $1380;
 $1384 = (($1382) + 4)|0;
 $1385 = $1384;
 HEAP32[$1385>>2] = $1381;
 $1386 = $1380 ^ $1344;
 $1387 = $1381 ^ $1345;
 $1388 = (_bitshift64Lshr(($1386|0),($1387|0),63)|0);
 $1389 = (getTempRet0() | 0);
 $1390 = (_bitshift64Shl(($1386|0),($1387|0),1)|0);
 $1391 = (getTempRet0() | 0);
 $1392 = $1388 | $1390;
 $1393 = $1389 | $1391;
 $1394 = $arrayidx2276;
 $1395 = $1394;
 HEAP32[$1395>>2] = $1392;
 $1396 = (($1394) + 4)|0;
 $1397 = $1396;
 HEAP32[$1397>>2] = $1393;
 $1398 = (_i64Add(($1116|0),($1117|0),($840|0),($841|0))|0);
 $1399 = (getTempRet0() | 0);
 $1400 = (_bitshift64Shl(($1116|0),($1117|0),1)|0);
 $1401 = (getTempRet0() | 0);
 $1402 = $1400 & -2;
 $1403 = $1401 & 1;
 $1404 = (___muldi3(($1402|0),($1403|0),($840|0),0)|0);
 $1405 = (getTempRet0() | 0);
 $1406 = (_i64Add(($1398|0),($1399|0),($1404|0),($1405|0))|0);
 $1407 = (getTempRet0() | 0);
 $1408 = $1406 ^ $1026;
 $1409 = $1407 ^ $1027;
 $1410 = (_i64Add(($1409|0),($1408|0),($934|0),($935|0))|0);
 $1411 = (getTempRet0() | 0);
 $1412 = (_bitshift64Shl(($934|0),($935|0),1)|0);
 $1413 = (getTempRet0() | 0);
 $1414 = $1412 & -2;
 $1415 = $1413 & 1;
 $1416 = (___muldi3(($1409|0),0,($1414|0),($1415|0))|0);
 $1417 = (getTempRet0() | 0);
 $1418 = (_i64Add(($1410|0),($1411|0),($1416|0),($1417|0))|0);
 $1419 = (getTempRet0() | 0);
 $1420 = $1418 ^ $840;
 $1421 = $1419 ^ $841;
 $1422 = (_bitshift64Lshr(($1420|0),($1421|0),24)|0);
 $1423 = (getTempRet0() | 0);
 $1424 = (_bitshift64Shl(($1420|0),($1421|0),40)|0);
 $1425 = (getTempRet0() | 0);
 $1426 = $1422 | $1424;
 $1427 = $1423 | $1425;
 $1428 = (_i64Add(($1426|0),($1427|0),($1406|0),($1407|0))|0);
 $1429 = (getTempRet0() | 0);
 $1430 = (_bitshift64Shl(($1406|0),($1407|0),1)|0);
 $1431 = (getTempRet0() | 0);
 $1432 = $1430 & -2;
 $1433 = $1431 & 1;
 $1434 = (___muldi3(($1422|0),0,($1432|0),($1433|0))|0);
 $1435 = (getTempRet0() | 0);
 $1436 = (_i64Add(($1428|0),($1429|0),($1434|0),($1435|0))|0);
 $1437 = (getTempRet0() | 0);
 $1438 = $arrayidx2272;
 $1439 = $1438;
 HEAP32[$1439>>2] = $1436;
 $1440 = (($1438) + 4)|0;
 $1441 = $1440;
 HEAP32[$1441>>2] = $1437;
 $1442 = $1436 ^ $1409;
 $1443 = $1437 ^ $1408;
 $1444 = (_bitshift64Lshr(($1442|0),($1443|0),16)|0);
 $1445 = (getTempRet0() | 0);
 $1446 = (_bitshift64Shl(($1442|0),($1443|0),48)|0);
 $1447 = (getTempRet0() | 0);
 $1448 = $1444 | $1446;
 $1449 = $1445 | $1447;
 $1450 = $arrayidx2091;
 $1451 = $1450;
 HEAP32[$1451>>2] = $1448;
 $1452 = (($1450) + 4)|0;
 $1453 = $1452;
 HEAP32[$1453>>2] = $1449;
 $1454 = (_i64Add(($1448|0),($1449|0),($1418|0),($1419|0))|0);
 $1455 = (getTempRet0() | 0);
 $1456 = (_bitshift64Shl(($1418|0),($1419|0),1)|0);
 $1457 = (getTempRet0() | 0);
 $1458 = $1456 & -2;
 $1459 = $1457 & 1;
 $1460 = (___muldi3(($1444|0),0,($1458|0),($1459|0))|0);
 $1461 = (getTempRet0() | 0);
 $1462 = (_i64Add(($1454|0),($1455|0),($1460|0),($1461|0))|0);
 $1463 = (getTempRet0() | 0);
 $1464 = $arrayidx1909;
 $1465 = $1464;
 HEAP32[$1465>>2] = $1462;
 $1466 = (($1464) + 4)|0;
 $1467 = $1466;
 HEAP32[$1467>>2] = $1463;
 $1468 = $1462 ^ $1426;
 $1469 = $1463 ^ $1427;
 $1470 = (_bitshift64Lshr(($1468|0),($1469|0),63)|0);
 $1471 = (getTempRet0() | 0);
 $1472 = (_bitshift64Shl(($1468|0),($1469|0),1)|0);
 $1473 = (getTempRet0() | 0);
 $1474 = $1470 | $1472;
 $1475 = $1471 | $1473;
 $1476 = $arrayidx1655;
 $1477 = $1476;
 HEAP32[$1477>>2] = $1474;
 $1478 = (($1476) + 4)|0;
 $1479 = $1478;
 HEAP32[$1479>>2] = $1475;
 $add$ptr3309 = ((($blockR)) + 256|0);
 $1480 = $add$ptr3309;
 $1481 = $1480;
 $1482 = HEAP32[$1481>>2]|0;
 $1483 = (($1480) + 4)|0;
 $1484 = $1483;
 $1485 = HEAP32[$1484>>2]|0;
 $arrayidx3314 = ((($blockR)) + 288|0);
 $1486 = $arrayidx3314;
 $1487 = $1486;
 $1488 = HEAP32[$1487>>2]|0;
 $1489 = (($1486) + 4)|0;
 $1490 = $1489;
 $1491 = HEAP32[$1490>>2]|0;
 $1492 = (_i64Add(($1488|0),($1491|0),($1482|0),($1485|0))|0);
 $1493 = (getTempRet0() | 0);
 $1494 = (_bitshift64Shl(($1482|0),($1485|0),1)|0);
 $1495 = (getTempRet0() | 0);
 $1496 = $1494 & -2;
 $1497 = $1495 & 1;
 $1498 = (___muldi3(($1496|0),($1497|0),($1488|0),0)|0);
 $1499 = (getTempRet0() | 0);
 $1500 = (_i64Add(($1492|0),($1493|0),($1498|0),($1499|0))|0);
 $1501 = (getTempRet0() | 0);
 $arrayidx3336 = ((($blockR)) + 352|0);
 $1502 = $arrayidx3336;
 $1503 = $1502;
 $1504 = HEAP32[$1503>>2]|0;
 $1505 = (($1502) + 4)|0;
 $1506 = $1505;
 $1507 = HEAP32[$1506>>2]|0;
 $1508 = $1500 ^ $1504;
 $1509 = $1501 ^ $1507;
 $arrayidx3361 = ((($blockR)) + 320|0);
 $1510 = $arrayidx3361;
 $1511 = $1510;
 $1512 = HEAP32[$1511>>2]|0;
 $1513 = (($1510) + 4)|0;
 $1514 = $1513;
 $1515 = HEAP32[$1514>>2]|0;
 $1516 = (_i64Add(($1509|0),($1508|0),($1512|0),($1515|0))|0);
 $1517 = (getTempRet0() | 0);
 $1518 = (_bitshift64Shl(($1512|0),($1515|0),1)|0);
 $1519 = (getTempRet0() | 0);
 $1520 = $1518 & -2;
 $1521 = $1519 & 1;
 $1522 = (___muldi3(($1520|0),($1521|0),($1509|0),0)|0);
 $1523 = (getTempRet0() | 0);
 $1524 = (_i64Add(($1516|0),($1517|0),($1522|0),($1523|0))|0);
 $1525 = (getTempRet0() | 0);
 $1526 = $1524 ^ $1488;
 $1527 = $1525 ^ $1491;
 $1528 = (_bitshift64Lshr(($1526|0),($1527|0),24)|0);
 $1529 = (getTempRet0() | 0);
 $1530 = (_bitshift64Shl(($1526|0),($1527|0),40)|0);
 $1531 = (getTempRet0() | 0);
 $1532 = $1528 | $1530;
 $1533 = $1529 | $1531;
 $1534 = (_i64Add(($1532|0),($1533|0),($1500|0),($1501|0))|0);
 $1535 = (getTempRet0() | 0);
 $1536 = (_bitshift64Shl(($1500|0),($1501|0),1)|0);
 $1537 = (getTempRet0() | 0);
 $1538 = $1536 & -2;
 $1539 = $1537 & 1;
 $1540 = (___muldi3(($1528|0),0,($1538|0),($1539|0))|0);
 $1541 = (getTempRet0() | 0);
 $1542 = (_i64Add(($1534|0),($1535|0),($1540|0),($1541|0))|0);
 $1543 = (getTempRet0() | 0);
 $1544 = $add$ptr3309;
 $1545 = $1544;
 HEAP32[$1545>>2] = $1542;
 $1546 = (($1544) + 4)|0;
 $1547 = $1546;
 HEAP32[$1547>>2] = $1543;
 $1548 = $1542 ^ $1509;
 $1549 = $1543 ^ $1508;
 $1550 = (_bitshift64Lshr(($1548|0),($1549|0),16)|0);
 $1551 = (getTempRet0() | 0);
 $1552 = (_bitshift64Shl(($1548|0),($1549|0),48)|0);
 $1553 = (getTempRet0() | 0);
 $1554 = $1550 | $1552;
 $1555 = $1551 | $1553;
 $1556 = $arrayidx3336;
 $1557 = $1556;
 HEAP32[$1557>>2] = $1554;
 $1558 = (($1556) + 4)|0;
 $1559 = $1558;
 HEAP32[$1559>>2] = $1555;
 $1560 = (_i64Add(($1554|0),($1555|0),($1524|0),($1525|0))|0);
 $1561 = (getTempRet0() | 0);
 $1562 = (_bitshift64Shl(($1524|0),($1525|0),1)|0);
 $1563 = (getTempRet0() | 0);
 $1564 = $1562 & -2;
 $1565 = $1563 & 1;
 $1566 = (___muldi3(($1550|0),0,($1564|0),($1565|0))|0);
 $1567 = (getTempRet0() | 0);
 $1568 = (_i64Add(($1560|0),($1561|0),($1566|0),($1567|0))|0);
 $1569 = (getTempRet0() | 0);
 $1570 = $arrayidx3361;
 $1571 = $1570;
 HEAP32[$1571>>2] = $1568;
 $1572 = (($1570) + 4)|0;
 $1573 = $1572;
 HEAP32[$1573>>2] = $1569;
 $1574 = $1568 ^ $1532;
 $1575 = $1569 ^ $1533;
 $1576 = (_bitshift64Lshr(($1574|0),($1575|0),63)|0);
 $1577 = (getTempRet0() | 0);
 $1578 = (_bitshift64Shl(($1574|0),($1575|0),1)|0);
 $1579 = (getTempRet0() | 0);
 $1580 = $1576 | $1578;
 $1581 = $1577 | $1579;
 $1582 = $arrayidx3314;
 $1583 = $1582;
 HEAP32[$1583>>2] = $1580;
 $1584 = (($1582) + 4)|0;
 $1585 = $1584;
 HEAP32[$1585>>2] = $1581;
 $arrayidx3517 = ((($blockR)) + 264|0);
 $1586 = $arrayidx3517;
 $1587 = $1586;
 $1588 = HEAP32[$1587>>2]|0;
 $1589 = (($1586) + 4)|0;
 $1590 = $1589;
 $1591 = HEAP32[$1590>>2]|0;
 $arrayidx3521 = ((($blockR)) + 296|0);
 $1592 = $arrayidx3521;
 $1593 = $1592;
 $1594 = HEAP32[$1593>>2]|0;
 $1595 = (($1592) + 4)|0;
 $1596 = $1595;
 $1597 = HEAP32[$1596>>2]|0;
 $1598 = (_i64Add(($1594|0),($1597|0),($1588|0),($1591|0))|0);
 $1599 = (getTempRet0() | 0);
 $1600 = (_bitshift64Shl(($1588|0),($1591|0),1)|0);
 $1601 = (getTempRet0() | 0);
 $1602 = $1600 & -2;
 $1603 = $1601 & 1;
 $1604 = (___muldi3(($1602|0),($1603|0),($1594|0),0)|0);
 $1605 = (getTempRet0() | 0);
 $1606 = (_i64Add(($1598|0),($1599|0),($1604|0),($1605|0))|0);
 $1607 = (getTempRet0() | 0);
 $arrayidx3543 = ((($blockR)) + 360|0);
 $1608 = $arrayidx3543;
 $1609 = $1608;
 $1610 = HEAP32[$1609>>2]|0;
 $1611 = (($1608) + 4)|0;
 $1612 = $1611;
 $1613 = HEAP32[$1612>>2]|0;
 $1614 = $1606 ^ $1610;
 $1615 = $1607 ^ $1613;
 $arrayidx3568 = ((($blockR)) + 328|0);
 $1616 = $arrayidx3568;
 $1617 = $1616;
 $1618 = HEAP32[$1617>>2]|0;
 $1619 = (($1616) + 4)|0;
 $1620 = $1619;
 $1621 = HEAP32[$1620>>2]|0;
 $1622 = (_i64Add(($1615|0),($1614|0),($1618|0),($1621|0))|0);
 $1623 = (getTempRet0() | 0);
 $1624 = (_bitshift64Shl(($1618|0),($1621|0),1)|0);
 $1625 = (getTempRet0() | 0);
 $1626 = $1624 & -2;
 $1627 = $1625 & 1;
 $1628 = (___muldi3(($1626|0),($1627|0),($1615|0),0)|0);
 $1629 = (getTempRet0() | 0);
 $1630 = (_i64Add(($1622|0),($1623|0),($1628|0),($1629|0))|0);
 $1631 = (getTempRet0() | 0);
 $1632 = $1630 ^ $1594;
 $1633 = $1631 ^ $1597;
 $1634 = (_bitshift64Lshr(($1632|0),($1633|0),24)|0);
 $1635 = (getTempRet0() | 0);
 $1636 = (_bitshift64Shl(($1632|0),($1633|0),40)|0);
 $1637 = (getTempRet0() | 0);
 $1638 = $1634 | $1636;
 $1639 = $1635 | $1637;
 $1640 = (_i64Add(($1638|0),($1639|0),($1606|0),($1607|0))|0);
 $1641 = (getTempRet0() | 0);
 $1642 = (_bitshift64Shl(($1606|0),($1607|0),1)|0);
 $1643 = (getTempRet0() | 0);
 $1644 = $1642 & -2;
 $1645 = $1643 & 1;
 $1646 = (___muldi3(($1634|0),0,($1644|0),($1645|0))|0);
 $1647 = (getTempRet0() | 0);
 $1648 = (_i64Add(($1640|0),($1641|0),($1646|0),($1647|0))|0);
 $1649 = (getTempRet0() | 0);
 $1650 = $arrayidx3517;
 $1651 = $1650;
 HEAP32[$1651>>2] = $1648;
 $1652 = (($1650) + 4)|0;
 $1653 = $1652;
 HEAP32[$1653>>2] = $1649;
 $1654 = $1648 ^ $1615;
 $1655 = $1649 ^ $1614;
 $1656 = (_bitshift64Lshr(($1654|0),($1655|0),16)|0);
 $1657 = (getTempRet0() | 0);
 $1658 = (_bitshift64Shl(($1654|0),($1655|0),48)|0);
 $1659 = (getTempRet0() | 0);
 $1660 = $1656 | $1658;
 $1661 = $1657 | $1659;
 $1662 = $arrayidx3543;
 $1663 = $1662;
 HEAP32[$1663>>2] = $1660;
 $1664 = (($1662) + 4)|0;
 $1665 = $1664;
 HEAP32[$1665>>2] = $1661;
 $1666 = (_i64Add(($1660|0),($1661|0),($1630|0),($1631|0))|0);
 $1667 = (getTempRet0() | 0);
 $1668 = (_bitshift64Shl(($1630|0),($1631|0),1)|0);
 $1669 = (getTempRet0() | 0);
 $1670 = $1668 & -2;
 $1671 = $1669 & 1;
 $1672 = (___muldi3(($1656|0),0,($1670|0),($1671|0))|0);
 $1673 = (getTempRet0() | 0);
 $1674 = (_i64Add(($1666|0),($1667|0),($1672|0),($1673|0))|0);
 $1675 = (getTempRet0() | 0);
 $1676 = $arrayidx3568;
 $1677 = $1676;
 HEAP32[$1677>>2] = $1674;
 $1678 = (($1676) + 4)|0;
 $1679 = $1678;
 HEAP32[$1679>>2] = $1675;
 $1680 = $1674 ^ $1638;
 $1681 = $1675 ^ $1639;
 $1682 = (_bitshift64Lshr(($1680|0),($1681|0),63)|0);
 $1683 = (getTempRet0() | 0);
 $1684 = (_bitshift64Shl(($1680|0),($1681|0),1)|0);
 $1685 = (getTempRet0() | 0);
 $1686 = $1682 | $1684;
 $1687 = $1683 | $1685;
 $1688 = $arrayidx3521;
 $1689 = $1688;
 HEAP32[$1689>>2] = $1686;
 $1690 = (($1688) + 4)|0;
 $1691 = $1690;
 HEAP32[$1691>>2] = $1687;
 $arrayidx3724 = ((($blockR)) + 272|0);
 $1692 = $arrayidx3724;
 $1693 = $1692;
 $1694 = HEAP32[$1693>>2]|0;
 $1695 = (($1692) + 4)|0;
 $1696 = $1695;
 $1697 = HEAP32[$1696>>2]|0;
 $arrayidx3728 = ((($blockR)) + 304|0);
 $1698 = $arrayidx3728;
 $1699 = $1698;
 $1700 = HEAP32[$1699>>2]|0;
 $1701 = (($1698) + 4)|0;
 $1702 = $1701;
 $1703 = HEAP32[$1702>>2]|0;
 $1704 = (_i64Add(($1700|0),($1703|0),($1694|0),($1697|0))|0);
 $1705 = (getTempRet0() | 0);
 $1706 = (_bitshift64Shl(($1694|0),($1697|0),1)|0);
 $1707 = (getTempRet0() | 0);
 $1708 = $1706 & -2;
 $1709 = $1707 & 1;
 $1710 = (___muldi3(($1708|0),($1709|0),($1700|0),0)|0);
 $1711 = (getTempRet0() | 0);
 $1712 = (_i64Add(($1704|0),($1705|0),($1710|0),($1711|0))|0);
 $1713 = (getTempRet0() | 0);
 $arrayidx3750 = ((($blockR)) + 368|0);
 $1714 = $arrayidx3750;
 $1715 = $1714;
 $1716 = HEAP32[$1715>>2]|0;
 $1717 = (($1714) + 4)|0;
 $1718 = $1717;
 $1719 = HEAP32[$1718>>2]|0;
 $1720 = $1712 ^ $1716;
 $1721 = $1713 ^ $1719;
 $arrayidx3775 = ((($blockR)) + 336|0);
 $1722 = $arrayidx3775;
 $1723 = $1722;
 $1724 = HEAP32[$1723>>2]|0;
 $1725 = (($1722) + 4)|0;
 $1726 = $1725;
 $1727 = HEAP32[$1726>>2]|0;
 $1728 = (_i64Add(($1721|0),($1720|0),($1724|0),($1727|0))|0);
 $1729 = (getTempRet0() | 0);
 $1730 = (_bitshift64Shl(($1724|0),($1727|0),1)|0);
 $1731 = (getTempRet0() | 0);
 $1732 = $1730 & -2;
 $1733 = $1731 & 1;
 $1734 = (___muldi3(($1732|0),($1733|0),($1721|0),0)|0);
 $1735 = (getTempRet0() | 0);
 $1736 = (_i64Add(($1728|0),($1729|0),($1734|0),($1735|0))|0);
 $1737 = (getTempRet0() | 0);
 $1738 = $1736 ^ $1700;
 $1739 = $1737 ^ $1703;
 $1740 = (_bitshift64Lshr(($1738|0),($1739|0),24)|0);
 $1741 = (getTempRet0() | 0);
 $1742 = (_bitshift64Shl(($1738|0),($1739|0),40)|0);
 $1743 = (getTempRet0() | 0);
 $1744 = $1740 | $1742;
 $1745 = $1741 | $1743;
 $1746 = (_i64Add(($1744|0),($1745|0),($1712|0),($1713|0))|0);
 $1747 = (getTempRet0() | 0);
 $1748 = (_bitshift64Shl(($1712|0),($1713|0),1)|0);
 $1749 = (getTempRet0() | 0);
 $1750 = $1748 & -2;
 $1751 = $1749 & 1;
 $1752 = (___muldi3(($1740|0),0,($1750|0),($1751|0))|0);
 $1753 = (getTempRet0() | 0);
 $1754 = (_i64Add(($1746|0),($1747|0),($1752|0),($1753|0))|0);
 $1755 = (getTempRet0() | 0);
 $1756 = $arrayidx3724;
 $1757 = $1756;
 HEAP32[$1757>>2] = $1754;
 $1758 = (($1756) + 4)|0;
 $1759 = $1758;
 HEAP32[$1759>>2] = $1755;
 $1760 = $1754 ^ $1721;
 $1761 = $1755 ^ $1720;
 $1762 = (_bitshift64Lshr(($1760|0),($1761|0),16)|0);
 $1763 = (getTempRet0() | 0);
 $1764 = (_bitshift64Shl(($1760|0),($1761|0),48)|0);
 $1765 = (getTempRet0() | 0);
 $1766 = $1762 | $1764;
 $1767 = $1763 | $1765;
 $1768 = $arrayidx3750;
 $1769 = $1768;
 HEAP32[$1769>>2] = $1766;
 $1770 = (($1768) + 4)|0;
 $1771 = $1770;
 HEAP32[$1771>>2] = $1767;
 $1772 = (_i64Add(($1766|0),($1767|0),($1736|0),($1737|0))|0);
 $1773 = (getTempRet0() | 0);
 $1774 = (_bitshift64Shl(($1736|0),($1737|0),1)|0);
 $1775 = (getTempRet0() | 0);
 $1776 = $1774 & -2;
 $1777 = $1775 & 1;
 $1778 = (___muldi3(($1762|0),0,($1776|0),($1777|0))|0);
 $1779 = (getTempRet0() | 0);
 $1780 = (_i64Add(($1772|0),($1773|0),($1778|0),($1779|0))|0);
 $1781 = (getTempRet0() | 0);
 $1782 = $1780 ^ $1744;
 $1783 = $1781 ^ $1745;
 $1784 = (_bitshift64Lshr(($1782|0),($1783|0),63)|0);
 $1785 = (getTempRet0() | 0);
 $1786 = (_bitshift64Shl(($1782|0),($1783|0),1)|0);
 $1787 = (getTempRet0() | 0);
 $1788 = $1784 | $1786;
 $1789 = $1785 | $1787;
 $1790 = $arrayidx3728;
 $1791 = $1790;
 HEAP32[$1791>>2] = $1788;
 $1792 = (($1790) + 4)|0;
 $1793 = $1792;
 HEAP32[$1793>>2] = $1789;
 $arrayidx3931 = ((($blockR)) + 280|0);
 $1794 = $arrayidx3931;
 $1795 = $1794;
 $1796 = HEAP32[$1795>>2]|0;
 $1797 = (($1794) + 4)|0;
 $1798 = $1797;
 $1799 = HEAP32[$1798>>2]|0;
 $arrayidx3935 = ((($blockR)) + 312|0);
 $1800 = $arrayidx3935;
 $1801 = $1800;
 $1802 = HEAP32[$1801>>2]|0;
 $1803 = (($1800) + 4)|0;
 $1804 = $1803;
 $1805 = HEAP32[$1804>>2]|0;
 $1806 = (_i64Add(($1802|0),($1805|0),($1796|0),($1799|0))|0);
 $1807 = (getTempRet0() | 0);
 $1808 = (_bitshift64Shl(($1796|0),($1799|0),1)|0);
 $1809 = (getTempRet0() | 0);
 $1810 = $1808 & -2;
 $1811 = $1809 & 1;
 $1812 = (___muldi3(($1810|0),($1811|0),($1802|0),0)|0);
 $1813 = (getTempRet0() | 0);
 $1814 = (_i64Add(($1806|0),($1807|0),($1812|0),($1813|0))|0);
 $1815 = (getTempRet0() | 0);
 $arrayidx3957 = ((($blockR)) + 376|0);
 $1816 = $arrayidx3957;
 $1817 = $1816;
 $1818 = HEAP32[$1817>>2]|0;
 $1819 = (($1816) + 4)|0;
 $1820 = $1819;
 $1821 = HEAP32[$1820>>2]|0;
 $1822 = $1814 ^ $1818;
 $1823 = $1815 ^ $1821;
 $arrayidx3982 = ((($blockR)) + 344|0);
 $1824 = $arrayidx3982;
 $1825 = $1824;
 $1826 = HEAP32[$1825>>2]|0;
 $1827 = (($1824) + 4)|0;
 $1828 = $1827;
 $1829 = HEAP32[$1828>>2]|0;
 $1830 = (_i64Add(($1823|0),($1822|0),($1826|0),($1829|0))|0);
 $1831 = (getTempRet0() | 0);
 $1832 = (_bitshift64Shl(($1826|0),($1829|0),1)|0);
 $1833 = (getTempRet0() | 0);
 $1834 = $1832 & -2;
 $1835 = $1833 & 1;
 $1836 = (___muldi3(($1834|0),($1835|0),($1823|0),0)|0);
 $1837 = (getTempRet0() | 0);
 $1838 = (_i64Add(($1830|0),($1831|0),($1836|0),($1837|0))|0);
 $1839 = (getTempRet0() | 0);
 $1840 = $1838 ^ $1802;
 $1841 = $1839 ^ $1805;
 $1842 = (_bitshift64Lshr(($1840|0),($1841|0),24)|0);
 $1843 = (getTempRet0() | 0);
 $1844 = (_bitshift64Shl(($1840|0),($1841|0),40)|0);
 $1845 = (getTempRet0() | 0);
 $1846 = $1842 | $1844;
 $1847 = $1843 | $1845;
 $1848 = (_i64Add(($1846|0),($1847|0),($1814|0),($1815|0))|0);
 $1849 = (getTempRet0() | 0);
 $1850 = (_bitshift64Shl(($1814|0),($1815|0),1)|0);
 $1851 = (getTempRet0() | 0);
 $1852 = $1850 & -2;
 $1853 = $1851 & 1;
 $1854 = (___muldi3(($1842|0),0,($1852|0),($1853|0))|0);
 $1855 = (getTempRet0() | 0);
 $1856 = (_i64Add(($1848|0),($1849|0),($1854|0),($1855|0))|0);
 $1857 = (getTempRet0() | 0);
 $1858 = $arrayidx3931;
 $1859 = $1858;
 HEAP32[$1859>>2] = $1856;
 $1860 = (($1858) + 4)|0;
 $1861 = $1860;
 HEAP32[$1861>>2] = $1857;
 $1862 = $1856 ^ $1823;
 $1863 = $1857 ^ $1822;
 $1864 = (_bitshift64Lshr(($1862|0),($1863|0),16)|0);
 $1865 = (getTempRet0() | 0);
 $1866 = (_bitshift64Shl(($1862|0),($1863|0),48)|0);
 $1867 = (getTempRet0() | 0);
 $1868 = $1864 | $1866;
 $1869 = $1865 | $1867;
 $1870 = (_i64Add(($1868|0),($1869|0),($1838|0),($1839|0))|0);
 $1871 = (getTempRet0() | 0);
 $1872 = (_bitshift64Shl(($1838|0),($1839|0),1)|0);
 $1873 = (getTempRet0() | 0);
 $1874 = $1872 & -2;
 $1875 = $1873 & 1;
 $1876 = (___muldi3(($1864|0),0,($1874|0),($1875|0))|0);
 $1877 = (getTempRet0() | 0);
 $1878 = (_i64Add(($1870|0),($1871|0),($1876|0),($1877|0))|0);
 $1879 = (getTempRet0() | 0);
 $1880 = $1878 ^ $1846;
 $1881 = $1879 ^ $1847;
 $1882 = (_bitshift64Lshr(($1880|0),($1881|0),63)|0);
 $1883 = (getTempRet0() | 0);
 $1884 = (_bitshift64Shl(($1880|0),($1881|0),1)|0);
 $1885 = (getTempRet0() | 0);
 $1886 = $1882 | $1884;
 $1887 = $1883 | $1885;
 $1888 = $arrayidx3935;
 $1889 = $1888;
 HEAP32[$1889>>2] = $1886;
 $1890 = (($1888) + 4)|0;
 $1891 = $1890;
 HEAP32[$1891>>2] = $1887;
 $1892 = (_i64Add(($1686|0),($1687|0),($1542|0),($1543|0))|0);
 $1893 = (getTempRet0() | 0);
 $1894 = (_bitshift64Shl(($1542|0),($1543|0),1)|0);
 $1895 = (getTempRet0() | 0);
 $1896 = $1894 & -2;
 $1897 = $1895 & 1;
 $1898 = (___muldi3(($1686|0),0,($1896|0),($1897|0))|0);
 $1899 = (getTempRet0() | 0);
 $1900 = (_i64Add(($1892|0),($1893|0),($1898|0),($1899|0))|0);
 $1901 = (getTempRet0() | 0);
 $1902 = $1868 ^ $1900;
 $1903 = $1869 ^ $1901;
 $1904 = (_i64Add(($1903|0),($1902|0),($1780|0),($1781|0))|0);
 $1905 = (getTempRet0() | 0);
 $1906 = (_bitshift64Shl(($1780|0),($1781|0),1)|0);
 $1907 = (getTempRet0() | 0);
 $1908 = $1906 & -2;
 $1909 = $1907 & 1;
 $1910 = (___muldi3(($1903|0),0,($1908|0),($1909|0))|0);
 $1911 = (getTempRet0() | 0);
 $1912 = (_i64Add(($1904|0),($1905|0),($1910|0),($1911|0))|0);
 $1913 = (getTempRet0() | 0);
 $1914 = $1912 ^ $1686;
 $1915 = $1913 ^ $1687;
 $1916 = (_bitshift64Lshr(($1914|0),($1915|0),24)|0);
 $1917 = (getTempRet0() | 0);
 $1918 = (_bitshift64Shl(($1914|0),($1915|0),40)|0);
 $1919 = (getTempRet0() | 0);
 $1920 = $1916 | $1918;
 $1921 = $1917 | $1919;
 $1922 = (_i64Add(($1920|0),($1921|0),($1900|0),($1901|0))|0);
 $1923 = (getTempRet0() | 0);
 $1924 = (_bitshift64Shl(($1900|0),($1901|0),1)|0);
 $1925 = (getTempRet0() | 0);
 $1926 = $1924 & -2;
 $1927 = $1925 & 1;
 $1928 = (___muldi3(($1916|0),0,($1926|0),($1927|0))|0);
 $1929 = (getTempRet0() | 0);
 $1930 = (_i64Add(($1922|0),($1923|0),($1928|0),($1929|0))|0);
 $1931 = (getTempRet0() | 0);
 $1932 = $add$ptr3309;
 $1933 = $1932;
 HEAP32[$1933>>2] = $1930;
 $1934 = (($1932) + 4)|0;
 $1935 = $1934;
 HEAP32[$1935>>2] = $1931;
 $1936 = $1930 ^ $1903;
 $1937 = $1931 ^ $1902;
 $1938 = (_bitshift64Lshr(($1936|0),($1937|0),16)|0);
 $1939 = (getTempRet0() | 0);
 $1940 = (_bitshift64Shl(($1936|0),($1937|0),48)|0);
 $1941 = (getTempRet0() | 0);
 $1942 = $1938 | $1940;
 $1943 = $1939 | $1941;
 $1944 = $arrayidx3957;
 $1945 = $1944;
 HEAP32[$1945>>2] = $1942;
 $1946 = (($1944) + 4)|0;
 $1947 = $1946;
 HEAP32[$1947>>2] = $1943;
 $1948 = (_i64Add(($1942|0),($1943|0),($1912|0),($1913|0))|0);
 $1949 = (getTempRet0() | 0);
 $1950 = (_bitshift64Shl(($1912|0),($1913|0),1)|0);
 $1951 = (getTempRet0() | 0);
 $1952 = $1950 & -2;
 $1953 = $1951 & 1;
 $1954 = (___muldi3(($1938|0),0,($1952|0),($1953|0))|0);
 $1955 = (getTempRet0() | 0);
 $1956 = (_i64Add(($1948|0),($1949|0),($1954|0),($1955|0))|0);
 $1957 = (getTempRet0() | 0);
 $1958 = $arrayidx3775;
 $1959 = $1958;
 HEAP32[$1959>>2] = $1956;
 $1960 = (($1958) + 4)|0;
 $1961 = $1960;
 HEAP32[$1961>>2] = $1957;
 $1962 = $1956 ^ $1920;
 $1963 = $1957 ^ $1921;
 $1964 = (_bitshift64Lshr(($1962|0),($1963|0),63)|0);
 $1965 = (getTempRet0() | 0);
 $1966 = (_bitshift64Shl(($1962|0),($1963|0),1)|0);
 $1967 = (getTempRet0() | 0);
 $1968 = $1964 | $1966;
 $1969 = $1965 | $1967;
 $1970 = $arrayidx3521;
 $1971 = $1970;
 HEAP32[$1971>>2] = $1968;
 $1972 = (($1970) + 4)|0;
 $1973 = $1972;
 HEAP32[$1973>>2] = $1969;
 $1974 = (_i64Add(($1788|0),($1789|0),($1648|0),($1649|0))|0);
 $1975 = (getTempRet0() | 0);
 $1976 = (_bitshift64Shl(($1648|0),($1649|0),1)|0);
 $1977 = (getTempRet0() | 0);
 $1978 = $1976 & -2;
 $1979 = $1977 & 1;
 $1980 = (___muldi3(($1788|0),0,($1978|0),($1979|0))|0);
 $1981 = (getTempRet0() | 0);
 $1982 = (_i64Add(($1974|0),($1975|0),($1980|0),($1981|0))|0);
 $1983 = (getTempRet0() | 0);
 $1984 = $1982 ^ $1554;
 $1985 = $1983 ^ $1555;
 $1986 = (_i64Add(($1878|0),($1879|0),($1985|0),($1984|0))|0);
 $1987 = (getTempRet0() | 0);
 $1988 = (_bitshift64Shl(($1878|0),($1879|0),1)|0);
 $1989 = (getTempRet0() | 0);
 $1990 = $1988 & -2;
 $1991 = $1989 & 1;
 $1992 = (___muldi3(($1990|0),($1991|0),($1985|0),0)|0);
 $1993 = (getTempRet0() | 0);
 $1994 = (_i64Add(($1986|0),($1987|0),($1992|0),($1993|0))|0);
 $1995 = (getTempRet0() | 0);
 $1996 = $1994 ^ $1788;
 $1997 = $1995 ^ $1789;
 $1998 = (_bitshift64Lshr(($1996|0),($1997|0),24)|0);
 $1999 = (getTempRet0() | 0);
 $2000 = (_bitshift64Shl(($1996|0),($1997|0),40)|0);
 $2001 = (getTempRet0() | 0);
 $2002 = $1998 | $2000;
 $2003 = $1999 | $2001;
 $2004 = (_i64Add(($2002|0),($2003|0),($1982|0),($1983|0))|0);
 $2005 = (getTempRet0() | 0);
 $2006 = (_bitshift64Shl(($1982|0),($1983|0),1)|0);
 $2007 = (getTempRet0() | 0);
 $2008 = $2006 & -2;
 $2009 = $2007 & 1;
 $2010 = (___muldi3(($1998|0),0,($2008|0),($2009|0))|0);
 $2011 = (getTempRet0() | 0);
 $2012 = (_i64Add(($2004|0),($2005|0),($2010|0),($2011|0))|0);
 $2013 = (getTempRet0() | 0);
 $2014 = $arrayidx3517;
 $2015 = $2014;
 HEAP32[$2015>>2] = $2012;
 $2016 = (($2014) + 4)|0;
 $2017 = $2016;
 HEAP32[$2017>>2] = $2013;
 $2018 = $2012 ^ $1985;
 $2019 = $2013 ^ $1984;
 $2020 = (_bitshift64Lshr(($2018|0),($2019|0),16)|0);
 $2021 = (getTempRet0() | 0);
 $2022 = (_bitshift64Shl(($2018|0),($2019|0),48)|0);
 $2023 = (getTempRet0() | 0);
 $2024 = $2020 | $2022;
 $2025 = $2021 | $2023;
 $2026 = $arrayidx3336;
 $2027 = $2026;
 HEAP32[$2027>>2] = $2024;
 $2028 = (($2026) + 4)|0;
 $2029 = $2028;
 HEAP32[$2029>>2] = $2025;
 $2030 = (_i64Add(($2024|0),($2025|0),($1994|0),($1995|0))|0);
 $2031 = (getTempRet0() | 0);
 $2032 = (_bitshift64Shl(($1994|0),($1995|0),1)|0);
 $2033 = (getTempRet0() | 0);
 $2034 = $2032 & -2;
 $2035 = $2033 & 1;
 $2036 = (___muldi3(($2020|0),0,($2034|0),($2035|0))|0);
 $2037 = (getTempRet0() | 0);
 $2038 = (_i64Add(($2030|0),($2031|0),($2036|0),($2037|0))|0);
 $2039 = (getTempRet0() | 0);
 $2040 = $arrayidx3982;
 $2041 = $2040;
 HEAP32[$2041>>2] = $2038;
 $2042 = (($2040) + 4)|0;
 $2043 = $2042;
 HEAP32[$2043>>2] = $2039;
 $2044 = $2038 ^ $2002;
 $2045 = $2039 ^ $2003;
 $2046 = (_bitshift64Lshr(($2044|0),($2045|0),63)|0);
 $2047 = (getTempRet0() | 0);
 $2048 = (_bitshift64Shl(($2044|0),($2045|0),1)|0);
 $2049 = (getTempRet0() | 0);
 $2050 = $2046 | $2048;
 $2051 = $2047 | $2049;
 $2052 = $arrayidx3728;
 $2053 = $2052;
 HEAP32[$2053>>2] = $2050;
 $2054 = (($2052) + 4)|0;
 $2055 = $2054;
 HEAP32[$2055>>2] = $2051;
 $2056 = (_i64Add(($1886|0),($1887|0),($1754|0),($1755|0))|0);
 $2057 = (getTempRet0() | 0);
 $2058 = (_bitshift64Shl(($1754|0),($1755|0),1)|0);
 $2059 = (getTempRet0() | 0);
 $2060 = $2058 & -2;
 $2061 = $2059 & 1;
 $2062 = (___muldi3(($1886|0),0,($2060|0),($2061|0))|0);
 $2063 = (getTempRet0() | 0);
 $2064 = (_i64Add(($2056|0),($2057|0),($2062|0),($2063|0))|0);
 $2065 = (getTempRet0() | 0);
 $2066 = $2064 ^ $1660;
 $2067 = $2065 ^ $1661;
 $2068 = (_i64Add(($2067|0),($2066|0),($1568|0),($1569|0))|0);
 $2069 = (getTempRet0() | 0);
 $2070 = (_bitshift64Shl(($1568|0),($1569|0),1)|0);
 $2071 = (getTempRet0() | 0);
 $2072 = $2070 & -2;
 $2073 = $2071 & 1;
 $2074 = (___muldi3(($2067|0),0,($2072|0),($2073|0))|0);
 $2075 = (getTempRet0() | 0);
 $2076 = (_i64Add(($2068|0),($2069|0),($2074|0),($2075|0))|0);
 $2077 = (getTempRet0() | 0);
 $2078 = $2076 ^ $1886;
 $2079 = $2077 ^ $1887;
 $2080 = (_bitshift64Lshr(($2078|0),($2079|0),24)|0);
 $2081 = (getTempRet0() | 0);
 $2082 = (_bitshift64Shl(($2078|0),($2079|0),40)|0);
 $2083 = (getTempRet0() | 0);
 $2084 = $2080 | $2082;
 $2085 = $2081 | $2083;
 $2086 = (_i64Add(($2084|0),($2085|0),($2064|0),($2065|0))|0);
 $2087 = (getTempRet0() | 0);
 $2088 = (_bitshift64Shl(($2064|0),($2065|0),1)|0);
 $2089 = (getTempRet0() | 0);
 $2090 = $2088 & -2;
 $2091 = $2089 & 1;
 $2092 = (___muldi3(($2080|0),0,($2090|0),($2091|0))|0);
 $2093 = (getTempRet0() | 0);
 $2094 = (_i64Add(($2086|0),($2087|0),($2092|0),($2093|0))|0);
 $2095 = (getTempRet0() | 0);
 $2096 = $arrayidx3724;
 $2097 = $2096;
 HEAP32[$2097>>2] = $2094;
 $2098 = (($2096) + 4)|0;
 $2099 = $2098;
 HEAP32[$2099>>2] = $2095;
 $2100 = $2094 ^ $2067;
 $2101 = $2095 ^ $2066;
 $2102 = (_bitshift64Lshr(($2100|0),($2101|0),16)|0);
 $2103 = (getTempRet0() | 0);
 $2104 = (_bitshift64Shl(($2100|0),($2101|0),48)|0);
 $2105 = (getTempRet0() | 0);
 $2106 = $2102 | $2104;
 $2107 = $2103 | $2105;
 $2108 = $arrayidx3543;
 $2109 = $2108;
 HEAP32[$2109>>2] = $2106;
 $2110 = (($2108) + 4)|0;
 $2111 = $2110;
 HEAP32[$2111>>2] = $2107;
 $2112 = (_i64Add(($2106|0),($2107|0),($2076|0),($2077|0))|0);
 $2113 = (getTempRet0() | 0);
 $2114 = (_bitshift64Shl(($2076|0),($2077|0),1)|0);
 $2115 = (getTempRet0() | 0);
 $2116 = $2114 & -2;
 $2117 = $2115 & 1;
 $2118 = (___muldi3(($2102|0),0,($2116|0),($2117|0))|0);
 $2119 = (getTempRet0() | 0);
 $2120 = (_i64Add(($2112|0),($2113|0),($2118|0),($2119|0))|0);
 $2121 = (getTempRet0() | 0);
 $2122 = $arrayidx3361;
 $2123 = $2122;
 HEAP32[$2123>>2] = $2120;
 $2124 = (($2122) + 4)|0;
 $2125 = $2124;
 HEAP32[$2125>>2] = $2121;
 $2126 = $2120 ^ $2084;
 $2127 = $2121 ^ $2085;
 $2128 = (_bitshift64Lshr(($2126|0),($2127|0),63)|0);
 $2129 = (getTempRet0() | 0);
 $2130 = (_bitshift64Shl(($2126|0),($2127|0),1)|0);
 $2131 = (getTempRet0() | 0);
 $2132 = $2128 | $2130;
 $2133 = $2129 | $2131;
 $2134 = $arrayidx3935;
 $2135 = $2134;
 HEAP32[$2135>>2] = $2132;
 $2136 = (($2134) + 4)|0;
 $2137 = $2136;
 HEAP32[$2137>>2] = $2133;
 $2138 = (_i64Add(($1856|0),($1857|0),($1580|0),($1581|0))|0);
 $2139 = (getTempRet0() | 0);
 $2140 = (_bitshift64Shl(($1856|0),($1857|0),1)|0);
 $2141 = (getTempRet0() | 0);
 $2142 = $2140 & -2;
 $2143 = $2141 & 1;
 $2144 = (___muldi3(($2142|0),($2143|0),($1580|0),0)|0);
 $2145 = (getTempRet0() | 0);
 $2146 = (_i64Add(($2138|0),($2139|0),($2144|0),($2145|0))|0);
 $2147 = (getTempRet0() | 0);
 $2148 = $2146 ^ $1766;
 $2149 = $2147 ^ $1767;
 $2150 = (_i64Add(($2149|0),($2148|0),($1674|0),($1675|0))|0);
 $2151 = (getTempRet0() | 0);
 $2152 = (_bitshift64Shl(($1674|0),($1675|0),1)|0);
 $2153 = (getTempRet0() | 0);
 $2154 = $2152 & -2;
 $2155 = $2153 & 1;
 $2156 = (___muldi3(($2149|0),0,($2154|0),($2155|0))|0);
 $2157 = (getTempRet0() | 0);
 $2158 = (_i64Add(($2150|0),($2151|0),($2156|0),($2157|0))|0);
 $2159 = (getTempRet0() | 0);
 $2160 = $2158 ^ $1580;
 $2161 = $2159 ^ $1581;
 $2162 = (_bitshift64Lshr(($2160|0),($2161|0),24)|0);
 $2163 = (getTempRet0() | 0);
 $2164 = (_bitshift64Shl(($2160|0),($2161|0),40)|0);
 $2165 = (getTempRet0() | 0);
 $2166 = $2162 | $2164;
 $2167 = $2163 | $2165;
 $2168 = (_i64Add(($2166|0),($2167|0),($2146|0),($2147|0))|0);
 $2169 = (getTempRet0() | 0);
 $2170 = (_bitshift64Shl(($2146|0),($2147|0),1)|0);
 $2171 = (getTempRet0() | 0);
 $2172 = $2170 & -2;
 $2173 = $2171 & 1;
 $2174 = (___muldi3(($2162|0),0,($2172|0),($2173|0))|0);
 $2175 = (getTempRet0() | 0);
 $2176 = (_i64Add(($2168|0),($2169|0),($2174|0),($2175|0))|0);
 $2177 = (getTempRet0() | 0);
 $2178 = $arrayidx3931;
 $2179 = $2178;
 HEAP32[$2179>>2] = $2176;
 $2180 = (($2178) + 4)|0;
 $2181 = $2180;
 HEAP32[$2181>>2] = $2177;
 $2182 = $2176 ^ $2149;
 $2183 = $2177 ^ $2148;
 $2184 = (_bitshift64Lshr(($2182|0),($2183|0),16)|0);
 $2185 = (getTempRet0() | 0);
 $2186 = (_bitshift64Shl(($2182|0),($2183|0),48)|0);
 $2187 = (getTempRet0() | 0);
 $2188 = $2184 | $2186;
 $2189 = $2185 | $2187;
 $2190 = $arrayidx3750;
 $2191 = $2190;
 HEAP32[$2191>>2] = $2188;
 $2192 = (($2190) + 4)|0;
 $2193 = $2192;
 HEAP32[$2193>>2] = $2189;
 $2194 = (_i64Add(($2188|0),($2189|0),($2158|0),($2159|0))|0);
 $2195 = (getTempRet0() | 0);
 $2196 = (_bitshift64Shl(($2158|0),($2159|0),1)|0);
 $2197 = (getTempRet0() | 0);
 $2198 = $2196 & -2;
 $2199 = $2197 & 1;
 $2200 = (___muldi3(($2184|0),0,($2198|0),($2199|0))|0);
 $2201 = (getTempRet0() | 0);
 $2202 = (_i64Add(($2194|0),($2195|0),($2200|0),($2201|0))|0);
 $2203 = (getTempRet0() | 0);
 $2204 = $arrayidx3568;
 $2205 = $2204;
 HEAP32[$2205>>2] = $2202;
 $2206 = (($2204) + 4)|0;
 $2207 = $2206;
 HEAP32[$2207>>2] = $2203;
 $2208 = $2202 ^ $2166;
 $2209 = $2203 ^ $2167;
 $2210 = (_bitshift64Lshr(($2208|0),($2209|0),63)|0);
 $2211 = (getTempRet0() | 0);
 $2212 = (_bitshift64Shl(($2208|0),($2209|0),1)|0);
 $2213 = (getTempRet0() | 0);
 $2214 = $2210 | $2212;
 $2215 = $2211 | $2213;
 $2216 = $arrayidx3314;
 $2217 = $2216;
 HEAP32[$2217>>2] = $2214;
 $2218 = (($2216) + 4)|0;
 $2219 = $2218;
 HEAP32[$2219>>2] = $2215;
 $add$ptr4968 = ((($blockR)) + 384|0);
 $2220 = $add$ptr4968;
 $2221 = $2220;
 $2222 = HEAP32[$2221>>2]|0;
 $2223 = (($2220) + 4)|0;
 $2224 = $2223;
 $2225 = HEAP32[$2224>>2]|0;
 $arrayidx4973 = ((($blockR)) + 416|0);
 $2226 = $arrayidx4973;
 $2227 = $2226;
 $2228 = HEAP32[$2227>>2]|0;
 $2229 = (($2226) + 4)|0;
 $2230 = $2229;
 $2231 = HEAP32[$2230>>2]|0;
 $2232 = (_i64Add(($2228|0),($2231|0),($2222|0),($2225|0))|0);
 $2233 = (getTempRet0() | 0);
 $2234 = (_bitshift64Shl(($2222|0),($2225|0),1)|0);
 $2235 = (getTempRet0() | 0);
 $2236 = $2234 & -2;
 $2237 = $2235 & 1;
 $2238 = (___muldi3(($2236|0),($2237|0),($2228|0),0)|0);
 $2239 = (getTempRet0() | 0);
 $2240 = (_i64Add(($2232|0),($2233|0),($2238|0),($2239|0))|0);
 $2241 = (getTempRet0() | 0);
 $arrayidx4995 = ((($blockR)) + 480|0);
 $2242 = $arrayidx4995;
 $2243 = $2242;
 $2244 = HEAP32[$2243>>2]|0;
 $2245 = (($2242) + 4)|0;
 $2246 = $2245;
 $2247 = HEAP32[$2246>>2]|0;
 $2248 = $2240 ^ $2244;
 $2249 = $2241 ^ $2247;
 $arrayidx5020 = ((($blockR)) + 448|0);
 $2250 = $arrayidx5020;
 $2251 = $2250;
 $2252 = HEAP32[$2251>>2]|0;
 $2253 = (($2250) + 4)|0;
 $2254 = $2253;
 $2255 = HEAP32[$2254>>2]|0;
 $2256 = (_i64Add(($2249|0),($2248|0),($2252|0),($2255|0))|0);
 $2257 = (getTempRet0() | 0);
 $2258 = (_bitshift64Shl(($2252|0),($2255|0),1)|0);
 $2259 = (getTempRet0() | 0);
 $2260 = $2258 & -2;
 $2261 = $2259 & 1;
 $2262 = (___muldi3(($2260|0),($2261|0),($2249|0),0)|0);
 $2263 = (getTempRet0() | 0);
 $2264 = (_i64Add(($2256|0),($2257|0),($2262|0),($2263|0))|0);
 $2265 = (getTempRet0() | 0);
 $2266 = $2264 ^ $2228;
 $2267 = $2265 ^ $2231;
 $2268 = (_bitshift64Lshr(($2266|0),($2267|0),24)|0);
 $2269 = (getTempRet0() | 0);
 $2270 = (_bitshift64Shl(($2266|0),($2267|0),40)|0);
 $2271 = (getTempRet0() | 0);
 $2272 = $2268 | $2270;
 $2273 = $2269 | $2271;
 $2274 = (_i64Add(($2272|0),($2273|0),($2240|0),($2241|0))|0);
 $2275 = (getTempRet0() | 0);
 $2276 = (_bitshift64Shl(($2240|0),($2241|0),1)|0);
 $2277 = (getTempRet0() | 0);
 $2278 = $2276 & -2;
 $2279 = $2277 & 1;
 $2280 = (___muldi3(($2268|0),0,($2278|0),($2279|0))|0);
 $2281 = (getTempRet0() | 0);
 $2282 = (_i64Add(($2274|0),($2275|0),($2280|0),($2281|0))|0);
 $2283 = (getTempRet0() | 0);
 $2284 = $add$ptr4968;
 $2285 = $2284;
 HEAP32[$2285>>2] = $2282;
 $2286 = (($2284) + 4)|0;
 $2287 = $2286;
 HEAP32[$2287>>2] = $2283;
 $2288 = $2282 ^ $2249;
 $2289 = $2283 ^ $2248;
 $2290 = (_bitshift64Lshr(($2288|0),($2289|0),16)|0);
 $2291 = (getTempRet0() | 0);
 $2292 = (_bitshift64Shl(($2288|0),($2289|0),48)|0);
 $2293 = (getTempRet0() | 0);
 $2294 = $2290 | $2292;
 $2295 = $2291 | $2293;
 $2296 = $arrayidx4995;
 $2297 = $2296;
 HEAP32[$2297>>2] = $2294;
 $2298 = (($2296) + 4)|0;
 $2299 = $2298;
 HEAP32[$2299>>2] = $2295;
 $2300 = (_i64Add(($2294|0),($2295|0),($2264|0),($2265|0))|0);
 $2301 = (getTempRet0() | 0);
 $2302 = (_bitshift64Shl(($2264|0),($2265|0),1)|0);
 $2303 = (getTempRet0() | 0);
 $2304 = $2302 & -2;
 $2305 = $2303 & 1;
 $2306 = (___muldi3(($2290|0),0,($2304|0),($2305|0))|0);
 $2307 = (getTempRet0() | 0);
 $2308 = (_i64Add(($2300|0),($2301|0),($2306|0),($2307|0))|0);
 $2309 = (getTempRet0() | 0);
 $2310 = $arrayidx5020;
 $2311 = $2310;
 HEAP32[$2311>>2] = $2308;
 $2312 = (($2310) + 4)|0;
 $2313 = $2312;
 HEAP32[$2313>>2] = $2309;
 $2314 = $2308 ^ $2272;
 $2315 = $2309 ^ $2273;
 $2316 = (_bitshift64Lshr(($2314|0),($2315|0),63)|0);
 $2317 = (getTempRet0() | 0);
 $2318 = (_bitshift64Shl(($2314|0),($2315|0),1)|0);
 $2319 = (getTempRet0() | 0);
 $2320 = $2316 | $2318;
 $2321 = $2317 | $2319;
 $2322 = $arrayidx4973;
 $2323 = $2322;
 HEAP32[$2323>>2] = $2320;
 $2324 = (($2322) + 4)|0;
 $2325 = $2324;
 HEAP32[$2325>>2] = $2321;
 $arrayidx5176 = ((($blockR)) + 392|0);
 $2326 = $arrayidx5176;
 $2327 = $2326;
 $2328 = HEAP32[$2327>>2]|0;
 $2329 = (($2326) + 4)|0;
 $2330 = $2329;
 $2331 = HEAP32[$2330>>2]|0;
 $arrayidx5180 = ((($blockR)) + 424|0);
 $2332 = $arrayidx5180;
 $2333 = $2332;
 $2334 = HEAP32[$2333>>2]|0;
 $2335 = (($2332) + 4)|0;
 $2336 = $2335;
 $2337 = HEAP32[$2336>>2]|0;
 $2338 = (_i64Add(($2334|0),($2337|0),($2328|0),($2331|0))|0);
 $2339 = (getTempRet0() | 0);
 $2340 = (_bitshift64Shl(($2328|0),($2331|0),1)|0);
 $2341 = (getTempRet0() | 0);
 $2342 = $2340 & -2;
 $2343 = $2341 & 1;
 $2344 = (___muldi3(($2342|0),($2343|0),($2334|0),0)|0);
 $2345 = (getTempRet0() | 0);
 $2346 = (_i64Add(($2338|0),($2339|0),($2344|0),($2345|0))|0);
 $2347 = (getTempRet0() | 0);
 $arrayidx5202 = ((($blockR)) + 488|0);
 $2348 = $arrayidx5202;
 $2349 = $2348;
 $2350 = HEAP32[$2349>>2]|0;
 $2351 = (($2348) + 4)|0;
 $2352 = $2351;
 $2353 = HEAP32[$2352>>2]|0;
 $2354 = $2346 ^ $2350;
 $2355 = $2347 ^ $2353;
 $arrayidx5227 = ((($blockR)) + 456|0);
 $2356 = $arrayidx5227;
 $2357 = $2356;
 $2358 = HEAP32[$2357>>2]|0;
 $2359 = (($2356) + 4)|0;
 $2360 = $2359;
 $2361 = HEAP32[$2360>>2]|0;
 $2362 = (_i64Add(($2355|0),($2354|0),($2358|0),($2361|0))|0);
 $2363 = (getTempRet0() | 0);
 $2364 = (_bitshift64Shl(($2358|0),($2361|0),1)|0);
 $2365 = (getTempRet0() | 0);
 $2366 = $2364 & -2;
 $2367 = $2365 & 1;
 $2368 = (___muldi3(($2366|0),($2367|0),($2355|0),0)|0);
 $2369 = (getTempRet0() | 0);
 $2370 = (_i64Add(($2362|0),($2363|0),($2368|0),($2369|0))|0);
 $2371 = (getTempRet0() | 0);
 $2372 = $2370 ^ $2334;
 $2373 = $2371 ^ $2337;
 $2374 = (_bitshift64Lshr(($2372|0),($2373|0),24)|0);
 $2375 = (getTempRet0() | 0);
 $2376 = (_bitshift64Shl(($2372|0),($2373|0),40)|0);
 $2377 = (getTempRet0() | 0);
 $2378 = $2374 | $2376;
 $2379 = $2375 | $2377;
 $2380 = (_i64Add(($2378|0),($2379|0),($2346|0),($2347|0))|0);
 $2381 = (getTempRet0() | 0);
 $2382 = (_bitshift64Shl(($2346|0),($2347|0),1)|0);
 $2383 = (getTempRet0() | 0);
 $2384 = $2382 & -2;
 $2385 = $2383 & 1;
 $2386 = (___muldi3(($2374|0),0,($2384|0),($2385|0))|0);
 $2387 = (getTempRet0() | 0);
 $2388 = (_i64Add(($2380|0),($2381|0),($2386|0),($2387|0))|0);
 $2389 = (getTempRet0() | 0);
 $2390 = $arrayidx5176;
 $2391 = $2390;
 HEAP32[$2391>>2] = $2388;
 $2392 = (($2390) + 4)|0;
 $2393 = $2392;
 HEAP32[$2393>>2] = $2389;
 $2394 = $2388 ^ $2355;
 $2395 = $2389 ^ $2354;
 $2396 = (_bitshift64Lshr(($2394|0),($2395|0),16)|0);
 $2397 = (getTempRet0() | 0);
 $2398 = (_bitshift64Shl(($2394|0),($2395|0),48)|0);
 $2399 = (getTempRet0() | 0);
 $2400 = $2396 | $2398;
 $2401 = $2397 | $2399;
 $2402 = $arrayidx5202;
 $2403 = $2402;
 HEAP32[$2403>>2] = $2400;
 $2404 = (($2402) + 4)|0;
 $2405 = $2404;
 HEAP32[$2405>>2] = $2401;
 $2406 = (_i64Add(($2400|0),($2401|0),($2370|0),($2371|0))|0);
 $2407 = (getTempRet0() | 0);
 $2408 = (_bitshift64Shl(($2370|0),($2371|0),1)|0);
 $2409 = (getTempRet0() | 0);
 $2410 = $2408 & -2;
 $2411 = $2409 & 1;
 $2412 = (___muldi3(($2396|0),0,($2410|0),($2411|0))|0);
 $2413 = (getTempRet0() | 0);
 $2414 = (_i64Add(($2406|0),($2407|0),($2412|0),($2413|0))|0);
 $2415 = (getTempRet0() | 0);
 $2416 = $arrayidx5227;
 $2417 = $2416;
 HEAP32[$2417>>2] = $2414;
 $2418 = (($2416) + 4)|0;
 $2419 = $2418;
 HEAP32[$2419>>2] = $2415;
 $2420 = $2414 ^ $2378;
 $2421 = $2415 ^ $2379;
 $2422 = (_bitshift64Lshr(($2420|0),($2421|0),63)|0);
 $2423 = (getTempRet0() | 0);
 $2424 = (_bitshift64Shl(($2420|0),($2421|0),1)|0);
 $2425 = (getTempRet0() | 0);
 $2426 = $2422 | $2424;
 $2427 = $2423 | $2425;
 $2428 = $arrayidx5180;
 $2429 = $2428;
 HEAP32[$2429>>2] = $2426;
 $2430 = (($2428) + 4)|0;
 $2431 = $2430;
 HEAP32[$2431>>2] = $2427;
 $arrayidx5383 = ((($blockR)) + 400|0);
 $2432 = $arrayidx5383;
 $2433 = $2432;
 $2434 = HEAP32[$2433>>2]|0;
 $2435 = (($2432) + 4)|0;
 $2436 = $2435;
 $2437 = HEAP32[$2436>>2]|0;
 $arrayidx5387 = ((($blockR)) + 432|0);
 $2438 = $arrayidx5387;
 $2439 = $2438;
 $2440 = HEAP32[$2439>>2]|0;
 $2441 = (($2438) + 4)|0;
 $2442 = $2441;
 $2443 = HEAP32[$2442>>2]|0;
 $2444 = (_i64Add(($2440|0),($2443|0),($2434|0),($2437|0))|0);
 $2445 = (getTempRet0() | 0);
 $2446 = (_bitshift64Shl(($2434|0),($2437|0),1)|0);
 $2447 = (getTempRet0() | 0);
 $2448 = $2446 & -2;
 $2449 = $2447 & 1;
 $2450 = (___muldi3(($2448|0),($2449|0),($2440|0),0)|0);
 $2451 = (getTempRet0() | 0);
 $2452 = (_i64Add(($2444|0),($2445|0),($2450|0),($2451|0))|0);
 $2453 = (getTempRet0() | 0);
 $arrayidx5409 = ((($blockR)) + 496|0);
 $2454 = $arrayidx5409;
 $2455 = $2454;
 $2456 = HEAP32[$2455>>2]|0;
 $2457 = (($2454) + 4)|0;
 $2458 = $2457;
 $2459 = HEAP32[$2458>>2]|0;
 $2460 = $2452 ^ $2456;
 $2461 = $2453 ^ $2459;
 $arrayidx5434 = ((($blockR)) + 464|0);
 $2462 = $arrayidx5434;
 $2463 = $2462;
 $2464 = HEAP32[$2463>>2]|0;
 $2465 = (($2462) + 4)|0;
 $2466 = $2465;
 $2467 = HEAP32[$2466>>2]|0;
 $2468 = (_i64Add(($2461|0),($2460|0),($2464|0),($2467|0))|0);
 $2469 = (getTempRet0() | 0);
 $2470 = (_bitshift64Shl(($2464|0),($2467|0),1)|0);
 $2471 = (getTempRet0() | 0);
 $2472 = $2470 & -2;
 $2473 = $2471 & 1;
 $2474 = (___muldi3(($2472|0),($2473|0),($2461|0),0)|0);
 $2475 = (getTempRet0() | 0);
 $2476 = (_i64Add(($2468|0),($2469|0),($2474|0),($2475|0))|0);
 $2477 = (getTempRet0() | 0);
 $2478 = $2476 ^ $2440;
 $2479 = $2477 ^ $2443;
 $2480 = (_bitshift64Lshr(($2478|0),($2479|0),24)|0);
 $2481 = (getTempRet0() | 0);
 $2482 = (_bitshift64Shl(($2478|0),($2479|0),40)|0);
 $2483 = (getTempRet0() | 0);
 $2484 = $2480 | $2482;
 $2485 = $2481 | $2483;
 $2486 = (_i64Add(($2484|0),($2485|0),($2452|0),($2453|0))|0);
 $2487 = (getTempRet0() | 0);
 $2488 = (_bitshift64Shl(($2452|0),($2453|0),1)|0);
 $2489 = (getTempRet0() | 0);
 $2490 = $2488 & -2;
 $2491 = $2489 & 1;
 $2492 = (___muldi3(($2480|0),0,($2490|0),($2491|0))|0);
 $2493 = (getTempRet0() | 0);
 $2494 = (_i64Add(($2486|0),($2487|0),($2492|0),($2493|0))|0);
 $2495 = (getTempRet0() | 0);
 $2496 = $arrayidx5383;
 $2497 = $2496;
 HEAP32[$2497>>2] = $2494;
 $2498 = (($2496) + 4)|0;
 $2499 = $2498;
 HEAP32[$2499>>2] = $2495;
 $2500 = $2494 ^ $2461;
 $2501 = $2495 ^ $2460;
 $2502 = (_bitshift64Lshr(($2500|0),($2501|0),16)|0);
 $2503 = (getTempRet0() | 0);
 $2504 = (_bitshift64Shl(($2500|0),($2501|0),48)|0);
 $2505 = (getTempRet0() | 0);
 $2506 = $2502 | $2504;
 $2507 = $2503 | $2505;
 $2508 = $arrayidx5409;
 $2509 = $2508;
 HEAP32[$2509>>2] = $2506;
 $2510 = (($2508) + 4)|0;
 $2511 = $2510;
 HEAP32[$2511>>2] = $2507;
 $2512 = (_i64Add(($2506|0),($2507|0),($2476|0),($2477|0))|0);
 $2513 = (getTempRet0() | 0);
 $2514 = (_bitshift64Shl(($2476|0),($2477|0),1)|0);
 $2515 = (getTempRet0() | 0);
 $2516 = $2514 & -2;
 $2517 = $2515 & 1;
 $2518 = (___muldi3(($2502|0),0,($2516|0),($2517|0))|0);
 $2519 = (getTempRet0() | 0);
 $2520 = (_i64Add(($2512|0),($2513|0),($2518|0),($2519|0))|0);
 $2521 = (getTempRet0() | 0);
 $2522 = $2520 ^ $2484;
 $2523 = $2521 ^ $2485;
 $2524 = (_bitshift64Lshr(($2522|0),($2523|0),63)|0);
 $2525 = (getTempRet0() | 0);
 $2526 = (_bitshift64Shl(($2522|0),($2523|0),1)|0);
 $2527 = (getTempRet0() | 0);
 $2528 = $2524 | $2526;
 $2529 = $2525 | $2527;
 $2530 = $arrayidx5387;
 $2531 = $2530;
 HEAP32[$2531>>2] = $2528;
 $2532 = (($2530) + 4)|0;
 $2533 = $2532;
 HEAP32[$2533>>2] = $2529;
 $arrayidx5590 = ((($blockR)) + 408|0);
 $2534 = $arrayidx5590;
 $2535 = $2534;
 $2536 = HEAP32[$2535>>2]|0;
 $2537 = (($2534) + 4)|0;
 $2538 = $2537;
 $2539 = HEAP32[$2538>>2]|0;
 $arrayidx5594 = ((($blockR)) + 440|0);
 $2540 = $arrayidx5594;
 $2541 = $2540;
 $2542 = HEAP32[$2541>>2]|0;
 $2543 = (($2540) + 4)|0;
 $2544 = $2543;
 $2545 = HEAP32[$2544>>2]|0;
 $2546 = (_i64Add(($2542|0),($2545|0),($2536|0),($2539|0))|0);
 $2547 = (getTempRet0() | 0);
 $2548 = (_bitshift64Shl(($2536|0),($2539|0),1)|0);
 $2549 = (getTempRet0() | 0);
 $2550 = $2548 & -2;
 $2551 = $2549 & 1;
 $2552 = (___muldi3(($2550|0),($2551|0),($2542|0),0)|0);
 $2553 = (getTempRet0() | 0);
 $2554 = (_i64Add(($2546|0),($2547|0),($2552|0),($2553|0))|0);
 $2555 = (getTempRet0() | 0);
 $arrayidx5616 = ((($blockR)) + 504|0);
 $2556 = $arrayidx5616;
 $2557 = $2556;
 $2558 = HEAP32[$2557>>2]|0;
 $2559 = (($2556) + 4)|0;
 $2560 = $2559;
 $2561 = HEAP32[$2560>>2]|0;
 $2562 = $2554 ^ $2558;
 $2563 = $2555 ^ $2561;
 $arrayidx5641 = ((($blockR)) + 472|0);
 $2564 = $arrayidx5641;
 $2565 = $2564;
 $2566 = HEAP32[$2565>>2]|0;
 $2567 = (($2564) + 4)|0;
 $2568 = $2567;
 $2569 = HEAP32[$2568>>2]|0;
 $2570 = (_i64Add(($2563|0),($2562|0),($2566|0),($2569|0))|0);
 $2571 = (getTempRet0() | 0);
 $2572 = (_bitshift64Shl(($2566|0),($2569|0),1)|0);
 $2573 = (getTempRet0() | 0);
 $2574 = $2572 & -2;
 $2575 = $2573 & 1;
 $2576 = (___muldi3(($2574|0),($2575|0),($2563|0),0)|0);
 $2577 = (getTempRet0() | 0);
 $2578 = (_i64Add(($2570|0),($2571|0),($2576|0),($2577|0))|0);
 $2579 = (getTempRet0() | 0);
 $2580 = $2578 ^ $2542;
 $2581 = $2579 ^ $2545;
 $2582 = (_bitshift64Lshr(($2580|0),($2581|0),24)|0);
 $2583 = (getTempRet0() | 0);
 $2584 = (_bitshift64Shl(($2580|0),($2581|0),40)|0);
 $2585 = (getTempRet0() | 0);
 $2586 = $2582 | $2584;
 $2587 = $2583 | $2585;
 $2588 = (_i64Add(($2586|0),($2587|0),($2554|0),($2555|0))|0);
 $2589 = (getTempRet0() | 0);
 $2590 = (_bitshift64Shl(($2554|0),($2555|0),1)|0);
 $2591 = (getTempRet0() | 0);
 $2592 = $2590 & -2;
 $2593 = $2591 & 1;
 $2594 = (___muldi3(($2582|0),0,($2592|0),($2593|0))|0);
 $2595 = (getTempRet0() | 0);
 $2596 = (_i64Add(($2588|0),($2589|0),($2594|0),($2595|0))|0);
 $2597 = (getTempRet0() | 0);
 $2598 = $arrayidx5590;
 $2599 = $2598;
 HEAP32[$2599>>2] = $2596;
 $2600 = (($2598) + 4)|0;
 $2601 = $2600;
 HEAP32[$2601>>2] = $2597;
 $2602 = $2596 ^ $2563;
 $2603 = $2597 ^ $2562;
 $2604 = (_bitshift64Lshr(($2602|0),($2603|0),16)|0);
 $2605 = (getTempRet0() | 0);
 $2606 = (_bitshift64Shl(($2602|0),($2603|0),48)|0);
 $2607 = (getTempRet0() | 0);
 $2608 = $2604 | $2606;
 $2609 = $2605 | $2607;
 $2610 = (_i64Add(($2608|0),($2609|0),($2578|0),($2579|0))|0);
 $2611 = (getTempRet0() | 0);
 $2612 = (_bitshift64Shl(($2578|0),($2579|0),1)|0);
 $2613 = (getTempRet0() | 0);
 $2614 = $2612 & -2;
 $2615 = $2613 & 1;
 $2616 = (___muldi3(($2604|0),0,($2614|0),($2615|0))|0);
 $2617 = (getTempRet0() | 0);
 $2618 = (_i64Add(($2610|0),($2611|0),($2616|0),($2617|0))|0);
 $2619 = (getTempRet0() | 0);
 $2620 = $2618 ^ $2586;
 $2621 = $2619 ^ $2587;
 $2622 = (_bitshift64Lshr(($2620|0),($2621|0),63)|0);
 $2623 = (getTempRet0() | 0);
 $2624 = (_bitshift64Shl(($2620|0),($2621|0),1)|0);
 $2625 = (getTempRet0() | 0);
 $2626 = $2622 | $2624;
 $2627 = $2623 | $2625;
 $2628 = $arrayidx5594;
 $2629 = $2628;
 HEAP32[$2629>>2] = $2626;
 $2630 = (($2628) + 4)|0;
 $2631 = $2630;
 HEAP32[$2631>>2] = $2627;
 $2632 = (_i64Add(($2426|0),($2427|0),($2282|0),($2283|0))|0);
 $2633 = (getTempRet0() | 0);
 $2634 = (_bitshift64Shl(($2282|0),($2283|0),1)|0);
 $2635 = (getTempRet0() | 0);
 $2636 = $2634 & -2;
 $2637 = $2635 & 1;
 $2638 = (___muldi3(($2426|0),0,($2636|0),($2637|0))|0);
 $2639 = (getTempRet0() | 0);
 $2640 = (_i64Add(($2632|0),($2633|0),($2638|0),($2639|0))|0);
 $2641 = (getTempRet0() | 0);
 $2642 = $2608 ^ $2640;
 $2643 = $2609 ^ $2641;
 $2644 = (_i64Add(($2643|0),($2642|0),($2520|0),($2521|0))|0);
 $2645 = (getTempRet0() | 0);
 $2646 = (_bitshift64Shl(($2520|0),($2521|0),1)|0);
 $2647 = (getTempRet0() | 0);
 $2648 = $2646 & -2;
 $2649 = $2647 & 1;
 $2650 = (___muldi3(($2643|0),0,($2648|0),($2649|0))|0);
 $2651 = (getTempRet0() | 0);
 $2652 = (_i64Add(($2644|0),($2645|0),($2650|0),($2651|0))|0);
 $2653 = (getTempRet0() | 0);
 $2654 = $2652 ^ $2426;
 $2655 = $2653 ^ $2427;
 $2656 = (_bitshift64Lshr(($2654|0),($2655|0),24)|0);
 $2657 = (getTempRet0() | 0);
 $2658 = (_bitshift64Shl(($2654|0),($2655|0),40)|0);
 $2659 = (getTempRet0() | 0);
 $2660 = $2656 | $2658;
 $2661 = $2657 | $2659;
 $2662 = (_i64Add(($2660|0),($2661|0),($2640|0),($2641|0))|0);
 $2663 = (getTempRet0() | 0);
 $2664 = (_bitshift64Shl(($2640|0),($2641|0),1)|0);
 $2665 = (getTempRet0() | 0);
 $2666 = $2664 & -2;
 $2667 = $2665 & 1;
 $2668 = (___muldi3(($2656|0),0,($2666|0),($2667|0))|0);
 $2669 = (getTempRet0() | 0);
 $2670 = (_i64Add(($2662|0),($2663|0),($2668|0),($2669|0))|0);
 $2671 = (getTempRet0() | 0);
 $2672 = $add$ptr4968;
 $2673 = $2672;
 HEAP32[$2673>>2] = $2670;
 $2674 = (($2672) + 4)|0;
 $2675 = $2674;
 HEAP32[$2675>>2] = $2671;
 $2676 = $2670 ^ $2643;
 $2677 = $2671 ^ $2642;
 $2678 = (_bitshift64Lshr(($2676|0),($2677|0),16)|0);
 $2679 = (getTempRet0() | 0);
 $2680 = (_bitshift64Shl(($2676|0),($2677|0),48)|0);
 $2681 = (getTempRet0() | 0);
 $2682 = $2678 | $2680;
 $2683 = $2679 | $2681;
 $2684 = $arrayidx5616;
 $2685 = $2684;
 HEAP32[$2685>>2] = $2682;
 $2686 = (($2684) + 4)|0;
 $2687 = $2686;
 HEAP32[$2687>>2] = $2683;
 $2688 = (_i64Add(($2682|0),($2683|0),($2652|0),($2653|0))|0);
 $2689 = (getTempRet0() | 0);
 $2690 = (_bitshift64Shl(($2652|0),($2653|0),1)|0);
 $2691 = (getTempRet0() | 0);
 $2692 = $2690 & -2;
 $2693 = $2691 & 1;
 $2694 = (___muldi3(($2678|0),0,($2692|0),($2693|0))|0);
 $2695 = (getTempRet0() | 0);
 $2696 = (_i64Add(($2688|0),($2689|0),($2694|0),($2695|0))|0);
 $2697 = (getTempRet0() | 0);
 $2698 = $arrayidx5434;
 $2699 = $2698;
 HEAP32[$2699>>2] = $2696;
 $2700 = (($2698) + 4)|0;
 $2701 = $2700;
 HEAP32[$2701>>2] = $2697;
 $2702 = $2696 ^ $2660;
 $2703 = $2697 ^ $2661;
 $2704 = (_bitshift64Lshr(($2702|0),($2703|0),63)|0);
 $2705 = (getTempRet0() | 0);
 $2706 = (_bitshift64Shl(($2702|0),($2703|0),1)|0);
 $2707 = (getTempRet0() | 0);
 $2708 = $2704 | $2706;
 $2709 = $2705 | $2707;
 $2710 = $arrayidx5180;
 $2711 = $2710;
 HEAP32[$2711>>2] = $2708;
 $2712 = (($2710) + 4)|0;
 $2713 = $2712;
 HEAP32[$2713>>2] = $2709;
 $2714 = (_i64Add(($2528|0),($2529|0),($2388|0),($2389|0))|0);
 $2715 = (getTempRet0() | 0);
 $2716 = (_bitshift64Shl(($2388|0),($2389|0),1)|0);
 $2717 = (getTempRet0() | 0);
 $2718 = $2716 & -2;
 $2719 = $2717 & 1;
 $2720 = (___muldi3(($2528|0),0,($2718|0),($2719|0))|0);
 $2721 = (getTempRet0() | 0);
 $2722 = (_i64Add(($2714|0),($2715|0),($2720|0),($2721|0))|0);
 $2723 = (getTempRet0() | 0);
 $2724 = $2722 ^ $2294;
 $2725 = $2723 ^ $2295;
 $2726 = (_i64Add(($2618|0),($2619|0),($2725|0),($2724|0))|0);
 $2727 = (getTempRet0() | 0);
 $2728 = (_bitshift64Shl(($2618|0),($2619|0),1)|0);
 $2729 = (getTempRet0() | 0);
 $2730 = $2728 & -2;
 $2731 = $2729 & 1;
 $2732 = (___muldi3(($2730|0),($2731|0),($2725|0),0)|0);
 $2733 = (getTempRet0() | 0);
 $2734 = (_i64Add(($2726|0),($2727|0),($2732|0),($2733|0))|0);
 $2735 = (getTempRet0() | 0);
 $2736 = $2734 ^ $2528;
 $2737 = $2735 ^ $2529;
 $2738 = (_bitshift64Lshr(($2736|0),($2737|0),24)|0);
 $2739 = (getTempRet0() | 0);
 $2740 = (_bitshift64Shl(($2736|0),($2737|0),40)|0);
 $2741 = (getTempRet0() | 0);
 $2742 = $2738 | $2740;
 $2743 = $2739 | $2741;
 $2744 = (_i64Add(($2742|0),($2743|0),($2722|0),($2723|0))|0);
 $2745 = (getTempRet0() | 0);
 $2746 = (_bitshift64Shl(($2722|0),($2723|0),1)|0);
 $2747 = (getTempRet0() | 0);
 $2748 = $2746 & -2;
 $2749 = $2747 & 1;
 $2750 = (___muldi3(($2738|0),0,($2748|0),($2749|0))|0);
 $2751 = (getTempRet0() | 0);
 $2752 = (_i64Add(($2744|0),($2745|0),($2750|0),($2751|0))|0);
 $2753 = (getTempRet0() | 0);
 $2754 = $arrayidx5176;
 $2755 = $2754;
 HEAP32[$2755>>2] = $2752;
 $2756 = (($2754) + 4)|0;
 $2757 = $2756;
 HEAP32[$2757>>2] = $2753;
 $2758 = $2752 ^ $2725;
 $2759 = $2753 ^ $2724;
 $2760 = (_bitshift64Lshr(($2758|0),($2759|0),16)|0);
 $2761 = (getTempRet0() | 0);
 $2762 = (_bitshift64Shl(($2758|0),($2759|0),48)|0);
 $2763 = (getTempRet0() | 0);
 $2764 = $2760 | $2762;
 $2765 = $2761 | $2763;
 $2766 = $arrayidx4995;
 $2767 = $2766;
 HEAP32[$2767>>2] = $2764;
 $2768 = (($2766) + 4)|0;
 $2769 = $2768;
 HEAP32[$2769>>2] = $2765;
 $2770 = (_i64Add(($2764|0),($2765|0),($2734|0),($2735|0))|0);
 $2771 = (getTempRet0() | 0);
 $2772 = (_bitshift64Shl(($2734|0),($2735|0),1)|0);
 $2773 = (getTempRet0() | 0);
 $2774 = $2772 & -2;
 $2775 = $2773 & 1;
 $2776 = (___muldi3(($2760|0),0,($2774|0),($2775|0))|0);
 $2777 = (getTempRet0() | 0);
 $2778 = (_i64Add(($2770|0),($2771|0),($2776|0),($2777|0))|0);
 $2779 = (getTempRet0() | 0);
 $2780 = $arrayidx5641;
 $2781 = $2780;
 HEAP32[$2781>>2] = $2778;
 $2782 = (($2780) + 4)|0;
 $2783 = $2782;
 HEAP32[$2783>>2] = $2779;
 $2784 = $2778 ^ $2742;
 $2785 = $2779 ^ $2743;
 $2786 = (_bitshift64Lshr(($2784|0),($2785|0),63)|0);
 $2787 = (getTempRet0() | 0);
 $2788 = (_bitshift64Shl(($2784|0),($2785|0),1)|0);
 $2789 = (getTempRet0() | 0);
 $2790 = $2786 | $2788;
 $2791 = $2787 | $2789;
 $2792 = $arrayidx5387;
 $2793 = $2792;
 HEAP32[$2793>>2] = $2790;
 $2794 = (($2792) + 4)|0;
 $2795 = $2794;
 HEAP32[$2795>>2] = $2791;
 $2796 = (_i64Add(($2626|0),($2627|0),($2494|0),($2495|0))|0);
 $2797 = (getTempRet0() | 0);
 $2798 = (_bitshift64Shl(($2494|0),($2495|0),1)|0);
 $2799 = (getTempRet0() | 0);
 $2800 = $2798 & -2;
 $2801 = $2799 & 1;
 $2802 = (___muldi3(($2626|0),0,($2800|0),($2801|0))|0);
 $2803 = (getTempRet0() | 0);
 $2804 = (_i64Add(($2796|0),($2797|0),($2802|0),($2803|0))|0);
 $2805 = (getTempRet0() | 0);
 $2806 = $2804 ^ $2400;
 $2807 = $2805 ^ $2401;
 $2808 = (_i64Add(($2807|0),($2806|0),($2308|0),($2309|0))|0);
 $2809 = (getTempRet0() | 0);
 $2810 = (_bitshift64Shl(($2308|0),($2309|0),1)|0);
 $2811 = (getTempRet0() | 0);
 $2812 = $2810 & -2;
 $2813 = $2811 & 1;
 $2814 = (___muldi3(($2807|0),0,($2812|0),($2813|0))|0);
 $2815 = (getTempRet0() | 0);
 $2816 = (_i64Add(($2808|0),($2809|0),($2814|0),($2815|0))|0);
 $2817 = (getTempRet0() | 0);
 $2818 = $2816 ^ $2626;
 $2819 = $2817 ^ $2627;
 $2820 = (_bitshift64Lshr(($2818|0),($2819|0),24)|0);
 $2821 = (getTempRet0() | 0);
 $2822 = (_bitshift64Shl(($2818|0),($2819|0),40)|0);
 $2823 = (getTempRet0() | 0);
 $2824 = $2820 | $2822;
 $2825 = $2821 | $2823;
 $2826 = (_i64Add(($2824|0),($2825|0),($2804|0),($2805|0))|0);
 $2827 = (getTempRet0() | 0);
 $2828 = (_bitshift64Shl(($2804|0),($2805|0),1)|0);
 $2829 = (getTempRet0() | 0);
 $2830 = $2828 & -2;
 $2831 = $2829 & 1;
 $2832 = (___muldi3(($2820|0),0,($2830|0),($2831|0))|0);
 $2833 = (getTempRet0() | 0);
 $2834 = (_i64Add(($2826|0),($2827|0),($2832|0),($2833|0))|0);
 $2835 = (getTempRet0() | 0);
 $2836 = $arrayidx5383;
 $2837 = $2836;
 HEAP32[$2837>>2] = $2834;
 $2838 = (($2836) + 4)|0;
 $2839 = $2838;
 HEAP32[$2839>>2] = $2835;
 $2840 = $2834 ^ $2807;
 $2841 = $2835 ^ $2806;
 $2842 = (_bitshift64Lshr(($2840|0),($2841|0),16)|0);
 $2843 = (getTempRet0() | 0);
 $2844 = (_bitshift64Shl(($2840|0),($2841|0),48)|0);
 $2845 = (getTempRet0() | 0);
 $2846 = $2842 | $2844;
 $2847 = $2843 | $2845;
 $2848 = $arrayidx5202;
 $2849 = $2848;
 HEAP32[$2849>>2] = $2846;
 $2850 = (($2848) + 4)|0;
 $2851 = $2850;
 HEAP32[$2851>>2] = $2847;
 $2852 = (_i64Add(($2846|0),($2847|0),($2816|0),($2817|0))|0);
 $2853 = (getTempRet0() | 0);
 $2854 = (_bitshift64Shl(($2816|0),($2817|0),1)|0);
 $2855 = (getTempRet0() | 0);
 $2856 = $2854 & -2;
 $2857 = $2855 & 1;
 $2858 = (___muldi3(($2842|0),0,($2856|0),($2857|0))|0);
 $2859 = (getTempRet0() | 0);
 $2860 = (_i64Add(($2852|0),($2853|0),($2858|0),($2859|0))|0);
 $2861 = (getTempRet0() | 0);
 $2862 = $arrayidx5020;
 $2863 = $2862;
 HEAP32[$2863>>2] = $2860;
 $2864 = (($2862) + 4)|0;
 $2865 = $2864;
 HEAP32[$2865>>2] = $2861;
 $2866 = $2860 ^ $2824;
 $2867 = $2861 ^ $2825;
 $2868 = (_bitshift64Lshr(($2866|0),($2867|0),63)|0);
 $2869 = (getTempRet0() | 0);
 $2870 = (_bitshift64Shl(($2866|0),($2867|0),1)|0);
 $2871 = (getTempRet0() | 0);
 $2872 = $2868 | $2870;
 $2873 = $2869 | $2871;
 $2874 = $arrayidx5594;
 $2875 = $2874;
 HEAP32[$2875>>2] = $2872;
 $2876 = (($2874) + 4)|0;
 $2877 = $2876;
 HEAP32[$2877>>2] = $2873;
 $2878 = (_i64Add(($2596|0),($2597|0),($2320|0),($2321|0))|0);
 $2879 = (getTempRet0() | 0);
 $2880 = (_bitshift64Shl(($2596|0),($2597|0),1)|0);
 $2881 = (getTempRet0() | 0);
 $2882 = $2880 & -2;
 $2883 = $2881 & 1;
 $2884 = (___muldi3(($2882|0),($2883|0),($2320|0),0)|0);
 $2885 = (getTempRet0() | 0);
 $2886 = (_i64Add(($2878|0),($2879|0),($2884|0),($2885|0))|0);
 $2887 = (getTempRet0() | 0);
 $2888 = $2886 ^ $2506;
 $2889 = $2887 ^ $2507;
 $2890 = (_i64Add(($2889|0),($2888|0),($2414|0),($2415|0))|0);
 $2891 = (getTempRet0() | 0);
 $2892 = (_bitshift64Shl(($2414|0),($2415|0),1)|0);
 $2893 = (getTempRet0() | 0);
 $2894 = $2892 & -2;
 $2895 = $2893 & 1;
 $2896 = (___muldi3(($2889|0),0,($2894|0),($2895|0))|0);
 $2897 = (getTempRet0() | 0);
 $2898 = (_i64Add(($2890|0),($2891|0),($2896|0),($2897|0))|0);
 $2899 = (getTempRet0() | 0);
 $2900 = $2898 ^ $2320;
 $2901 = $2899 ^ $2321;
 $2902 = (_bitshift64Lshr(($2900|0),($2901|0),24)|0);
 $2903 = (getTempRet0() | 0);
 $2904 = (_bitshift64Shl(($2900|0),($2901|0),40)|0);
 $2905 = (getTempRet0() | 0);
 $2906 = $2902 | $2904;
 $2907 = $2903 | $2905;
 $2908 = (_i64Add(($2906|0),($2907|0),($2886|0),($2887|0))|0);
 $2909 = (getTempRet0() | 0);
 $2910 = (_bitshift64Shl(($2886|0),($2887|0),1)|0);
 $2911 = (getTempRet0() | 0);
 $2912 = $2910 & -2;
 $2913 = $2911 & 1;
 $2914 = (___muldi3(($2902|0),0,($2912|0),($2913|0))|0);
 $2915 = (getTempRet0() | 0);
 $2916 = (_i64Add(($2908|0),($2909|0),($2914|0),($2915|0))|0);
 $2917 = (getTempRet0() | 0);
 $2918 = $arrayidx5590;
 $2919 = $2918;
 HEAP32[$2919>>2] = $2916;
 $2920 = (($2918) + 4)|0;
 $2921 = $2920;
 HEAP32[$2921>>2] = $2917;
 $2922 = $2916 ^ $2889;
 $2923 = $2917 ^ $2888;
 $2924 = (_bitshift64Lshr(($2922|0),($2923|0),16)|0);
 $2925 = (getTempRet0() | 0);
 $2926 = (_bitshift64Shl(($2922|0),($2923|0),48)|0);
 $2927 = (getTempRet0() | 0);
 $2928 = $2924 | $2926;
 $2929 = $2925 | $2927;
 $2930 = $arrayidx5409;
 $2931 = $2930;
 HEAP32[$2931>>2] = $2928;
 $2932 = (($2930) + 4)|0;
 $2933 = $2932;
 HEAP32[$2933>>2] = $2929;
 $2934 = (_i64Add(($2928|0),($2929|0),($2898|0),($2899|0))|0);
 $2935 = (getTempRet0() | 0);
 $2936 = (_bitshift64Shl(($2898|0),($2899|0),1)|0);
 $2937 = (getTempRet0() | 0);
 $2938 = $2936 & -2;
 $2939 = $2937 & 1;
 $2940 = (___muldi3(($2924|0),0,($2938|0),($2939|0))|0);
 $2941 = (getTempRet0() | 0);
 $2942 = (_i64Add(($2934|0),($2935|0),($2940|0),($2941|0))|0);
 $2943 = (getTempRet0() | 0);
 $2944 = $arrayidx5227;
 $2945 = $2944;
 HEAP32[$2945>>2] = $2942;
 $2946 = (($2944) + 4)|0;
 $2947 = $2946;
 HEAP32[$2947>>2] = $2943;
 $2948 = $2942 ^ $2906;
 $2949 = $2943 ^ $2907;
 $2950 = (_bitshift64Lshr(($2948|0),($2949|0),63)|0);
 $2951 = (getTempRet0() | 0);
 $2952 = (_bitshift64Shl(($2948|0),($2949|0),1)|0);
 $2953 = (getTempRet0() | 0);
 $2954 = $2950 | $2952;
 $2955 = $2951 | $2953;
 $2956 = $arrayidx4973;
 $2957 = $2956;
 HEAP32[$2957>>2] = $2954;
 $2958 = (($2956) + 4)|0;
 $2959 = $2958;
 HEAP32[$2959>>2] = $2955;
 $add$ptr6627 = ((($blockR)) + 512|0);
 $2960 = $add$ptr6627;
 $2961 = $2960;
 $2962 = HEAP32[$2961>>2]|0;
 $2963 = (($2960) + 4)|0;
 $2964 = $2963;
 $2965 = HEAP32[$2964>>2]|0;
 $arrayidx6632 = ((($blockR)) + 544|0);
 $2966 = $arrayidx6632;
 $2967 = $2966;
 $2968 = HEAP32[$2967>>2]|0;
 $2969 = (($2966) + 4)|0;
 $2970 = $2969;
 $2971 = HEAP32[$2970>>2]|0;
 $2972 = (_i64Add(($2968|0),($2971|0),($2962|0),($2965|0))|0);
 $2973 = (getTempRet0() | 0);
 $2974 = (_bitshift64Shl(($2962|0),($2965|0),1)|0);
 $2975 = (getTempRet0() | 0);
 $2976 = $2974 & -2;
 $2977 = $2975 & 1;
 $2978 = (___muldi3(($2976|0),($2977|0),($2968|0),0)|0);
 $2979 = (getTempRet0() | 0);
 $2980 = (_i64Add(($2972|0),($2973|0),($2978|0),($2979|0))|0);
 $2981 = (getTempRet0() | 0);
 $arrayidx6654 = ((($blockR)) + 608|0);
 $2982 = $arrayidx6654;
 $2983 = $2982;
 $2984 = HEAP32[$2983>>2]|0;
 $2985 = (($2982) + 4)|0;
 $2986 = $2985;
 $2987 = HEAP32[$2986>>2]|0;
 $2988 = $2980 ^ $2984;
 $2989 = $2981 ^ $2987;
 $arrayidx6679 = ((($blockR)) + 576|0);
 $2990 = $arrayidx6679;
 $2991 = $2990;
 $2992 = HEAP32[$2991>>2]|0;
 $2993 = (($2990) + 4)|0;
 $2994 = $2993;
 $2995 = HEAP32[$2994>>2]|0;
 $2996 = (_i64Add(($2989|0),($2988|0),($2992|0),($2995|0))|0);
 $2997 = (getTempRet0() | 0);
 $2998 = (_bitshift64Shl(($2992|0),($2995|0),1)|0);
 $2999 = (getTempRet0() | 0);
 $3000 = $2998 & -2;
 $3001 = $2999 & 1;
 $3002 = (___muldi3(($3000|0),($3001|0),($2989|0),0)|0);
 $3003 = (getTempRet0() | 0);
 $3004 = (_i64Add(($2996|0),($2997|0),($3002|0),($3003|0))|0);
 $3005 = (getTempRet0() | 0);
 $3006 = $3004 ^ $2968;
 $3007 = $3005 ^ $2971;
 $3008 = (_bitshift64Lshr(($3006|0),($3007|0),24)|0);
 $3009 = (getTempRet0() | 0);
 $3010 = (_bitshift64Shl(($3006|0),($3007|0),40)|0);
 $3011 = (getTempRet0() | 0);
 $3012 = $3008 | $3010;
 $3013 = $3009 | $3011;
 $3014 = (_i64Add(($3012|0),($3013|0),($2980|0),($2981|0))|0);
 $3015 = (getTempRet0() | 0);
 $3016 = (_bitshift64Shl(($2980|0),($2981|0),1)|0);
 $3017 = (getTempRet0() | 0);
 $3018 = $3016 & -2;
 $3019 = $3017 & 1;
 $3020 = (___muldi3(($3008|0),0,($3018|0),($3019|0))|0);
 $3021 = (getTempRet0() | 0);
 $3022 = (_i64Add(($3014|0),($3015|0),($3020|0),($3021|0))|0);
 $3023 = (getTempRet0() | 0);
 $3024 = $add$ptr6627;
 $3025 = $3024;
 HEAP32[$3025>>2] = $3022;
 $3026 = (($3024) + 4)|0;
 $3027 = $3026;
 HEAP32[$3027>>2] = $3023;
 $3028 = $3022 ^ $2989;
 $3029 = $3023 ^ $2988;
 $3030 = (_bitshift64Lshr(($3028|0),($3029|0),16)|0);
 $3031 = (getTempRet0() | 0);
 $3032 = (_bitshift64Shl(($3028|0),($3029|0),48)|0);
 $3033 = (getTempRet0() | 0);
 $3034 = $3030 | $3032;
 $3035 = $3031 | $3033;
 $3036 = $arrayidx6654;
 $3037 = $3036;
 HEAP32[$3037>>2] = $3034;
 $3038 = (($3036) + 4)|0;
 $3039 = $3038;
 HEAP32[$3039>>2] = $3035;
 $3040 = (_i64Add(($3034|0),($3035|0),($3004|0),($3005|0))|0);
 $3041 = (getTempRet0() | 0);
 $3042 = (_bitshift64Shl(($3004|0),($3005|0),1)|0);
 $3043 = (getTempRet0() | 0);
 $3044 = $3042 & -2;
 $3045 = $3043 & 1;
 $3046 = (___muldi3(($3030|0),0,($3044|0),($3045|0))|0);
 $3047 = (getTempRet0() | 0);
 $3048 = (_i64Add(($3040|0),($3041|0),($3046|0),($3047|0))|0);
 $3049 = (getTempRet0() | 0);
 $3050 = $arrayidx6679;
 $3051 = $3050;
 HEAP32[$3051>>2] = $3048;
 $3052 = (($3050) + 4)|0;
 $3053 = $3052;
 HEAP32[$3053>>2] = $3049;
 $3054 = $3048 ^ $3012;
 $3055 = $3049 ^ $3013;
 $3056 = (_bitshift64Lshr(($3054|0),($3055|0),63)|0);
 $3057 = (getTempRet0() | 0);
 $3058 = (_bitshift64Shl(($3054|0),($3055|0),1)|0);
 $3059 = (getTempRet0() | 0);
 $3060 = $3056 | $3058;
 $3061 = $3057 | $3059;
 $3062 = $arrayidx6632;
 $3063 = $3062;
 HEAP32[$3063>>2] = $3060;
 $3064 = (($3062) + 4)|0;
 $3065 = $3064;
 HEAP32[$3065>>2] = $3061;
 $arrayidx6835 = ((($blockR)) + 520|0);
 $3066 = $arrayidx6835;
 $3067 = $3066;
 $3068 = HEAP32[$3067>>2]|0;
 $3069 = (($3066) + 4)|0;
 $3070 = $3069;
 $3071 = HEAP32[$3070>>2]|0;
 $arrayidx6839 = ((($blockR)) + 552|0);
 $3072 = $arrayidx6839;
 $3073 = $3072;
 $3074 = HEAP32[$3073>>2]|0;
 $3075 = (($3072) + 4)|0;
 $3076 = $3075;
 $3077 = HEAP32[$3076>>2]|0;
 $3078 = (_i64Add(($3074|0),($3077|0),($3068|0),($3071|0))|0);
 $3079 = (getTempRet0() | 0);
 $3080 = (_bitshift64Shl(($3068|0),($3071|0),1)|0);
 $3081 = (getTempRet0() | 0);
 $3082 = $3080 & -2;
 $3083 = $3081 & 1;
 $3084 = (___muldi3(($3082|0),($3083|0),($3074|0),0)|0);
 $3085 = (getTempRet0() | 0);
 $3086 = (_i64Add(($3078|0),($3079|0),($3084|0),($3085|0))|0);
 $3087 = (getTempRet0() | 0);
 $arrayidx6861 = ((($blockR)) + 616|0);
 $3088 = $arrayidx6861;
 $3089 = $3088;
 $3090 = HEAP32[$3089>>2]|0;
 $3091 = (($3088) + 4)|0;
 $3092 = $3091;
 $3093 = HEAP32[$3092>>2]|0;
 $3094 = $3086 ^ $3090;
 $3095 = $3087 ^ $3093;
 $arrayidx6886 = ((($blockR)) + 584|0);
 $3096 = $arrayidx6886;
 $3097 = $3096;
 $3098 = HEAP32[$3097>>2]|0;
 $3099 = (($3096) + 4)|0;
 $3100 = $3099;
 $3101 = HEAP32[$3100>>2]|0;
 $3102 = (_i64Add(($3095|0),($3094|0),($3098|0),($3101|0))|0);
 $3103 = (getTempRet0() | 0);
 $3104 = (_bitshift64Shl(($3098|0),($3101|0),1)|0);
 $3105 = (getTempRet0() | 0);
 $3106 = $3104 & -2;
 $3107 = $3105 & 1;
 $3108 = (___muldi3(($3106|0),($3107|0),($3095|0),0)|0);
 $3109 = (getTempRet0() | 0);
 $3110 = (_i64Add(($3102|0),($3103|0),($3108|0),($3109|0))|0);
 $3111 = (getTempRet0() | 0);
 $3112 = $3110 ^ $3074;
 $3113 = $3111 ^ $3077;
 $3114 = (_bitshift64Lshr(($3112|0),($3113|0),24)|0);
 $3115 = (getTempRet0() | 0);
 $3116 = (_bitshift64Shl(($3112|0),($3113|0),40)|0);
 $3117 = (getTempRet0() | 0);
 $3118 = $3114 | $3116;
 $3119 = $3115 | $3117;
 $3120 = (_i64Add(($3118|0),($3119|0),($3086|0),($3087|0))|0);
 $3121 = (getTempRet0() | 0);
 $3122 = (_bitshift64Shl(($3086|0),($3087|0),1)|0);
 $3123 = (getTempRet0() | 0);
 $3124 = $3122 & -2;
 $3125 = $3123 & 1;
 $3126 = (___muldi3(($3114|0),0,($3124|0),($3125|0))|0);
 $3127 = (getTempRet0() | 0);
 $3128 = (_i64Add(($3120|0),($3121|0),($3126|0),($3127|0))|0);
 $3129 = (getTempRet0() | 0);
 $3130 = $arrayidx6835;
 $3131 = $3130;
 HEAP32[$3131>>2] = $3128;
 $3132 = (($3130) + 4)|0;
 $3133 = $3132;
 HEAP32[$3133>>2] = $3129;
 $3134 = $3128 ^ $3095;
 $3135 = $3129 ^ $3094;
 $3136 = (_bitshift64Lshr(($3134|0),($3135|0),16)|0);
 $3137 = (getTempRet0() | 0);
 $3138 = (_bitshift64Shl(($3134|0),($3135|0),48)|0);
 $3139 = (getTempRet0() | 0);
 $3140 = $3136 | $3138;
 $3141 = $3137 | $3139;
 $3142 = $arrayidx6861;
 $3143 = $3142;
 HEAP32[$3143>>2] = $3140;
 $3144 = (($3142) + 4)|0;
 $3145 = $3144;
 HEAP32[$3145>>2] = $3141;
 $3146 = (_i64Add(($3140|0),($3141|0),($3110|0),($3111|0))|0);
 $3147 = (getTempRet0() | 0);
 $3148 = (_bitshift64Shl(($3110|0),($3111|0),1)|0);
 $3149 = (getTempRet0() | 0);
 $3150 = $3148 & -2;
 $3151 = $3149 & 1;
 $3152 = (___muldi3(($3136|0),0,($3150|0),($3151|0))|0);
 $3153 = (getTempRet0() | 0);
 $3154 = (_i64Add(($3146|0),($3147|0),($3152|0),($3153|0))|0);
 $3155 = (getTempRet0() | 0);
 $3156 = $arrayidx6886;
 $3157 = $3156;
 HEAP32[$3157>>2] = $3154;
 $3158 = (($3156) + 4)|0;
 $3159 = $3158;
 HEAP32[$3159>>2] = $3155;
 $3160 = $3154 ^ $3118;
 $3161 = $3155 ^ $3119;
 $3162 = (_bitshift64Lshr(($3160|0),($3161|0),63)|0);
 $3163 = (getTempRet0() | 0);
 $3164 = (_bitshift64Shl(($3160|0),($3161|0),1)|0);
 $3165 = (getTempRet0() | 0);
 $3166 = $3162 | $3164;
 $3167 = $3163 | $3165;
 $3168 = $arrayidx6839;
 $3169 = $3168;
 HEAP32[$3169>>2] = $3166;
 $3170 = (($3168) + 4)|0;
 $3171 = $3170;
 HEAP32[$3171>>2] = $3167;
 $arrayidx7042 = ((($blockR)) + 528|0);
 $3172 = $arrayidx7042;
 $3173 = $3172;
 $3174 = HEAP32[$3173>>2]|0;
 $3175 = (($3172) + 4)|0;
 $3176 = $3175;
 $3177 = HEAP32[$3176>>2]|0;
 $arrayidx7046 = ((($blockR)) + 560|0);
 $3178 = $arrayidx7046;
 $3179 = $3178;
 $3180 = HEAP32[$3179>>2]|0;
 $3181 = (($3178) + 4)|0;
 $3182 = $3181;
 $3183 = HEAP32[$3182>>2]|0;
 $3184 = (_i64Add(($3180|0),($3183|0),($3174|0),($3177|0))|0);
 $3185 = (getTempRet0() | 0);
 $3186 = (_bitshift64Shl(($3174|0),($3177|0),1)|0);
 $3187 = (getTempRet0() | 0);
 $3188 = $3186 & -2;
 $3189 = $3187 & 1;
 $3190 = (___muldi3(($3188|0),($3189|0),($3180|0),0)|0);
 $3191 = (getTempRet0() | 0);
 $3192 = (_i64Add(($3184|0),($3185|0),($3190|0),($3191|0))|0);
 $3193 = (getTempRet0() | 0);
 $arrayidx7068 = ((($blockR)) + 624|0);
 $3194 = $arrayidx7068;
 $3195 = $3194;
 $3196 = HEAP32[$3195>>2]|0;
 $3197 = (($3194) + 4)|0;
 $3198 = $3197;
 $3199 = HEAP32[$3198>>2]|0;
 $3200 = $3192 ^ $3196;
 $3201 = $3193 ^ $3199;
 $arrayidx7093 = ((($blockR)) + 592|0);
 $3202 = $arrayidx7093;
 $3203 = $3202;
 $3204 = HEAP32[$3203>>2]|0;
 $3205 = (($3202) + 4)|0;
 $3206 = $3205;
 $3207 = HEAP32[$3206>>2]|0;
 $3208 = (_i64Add(($3201|0),($3200|0),($3204|0),($3207|0))|0);
 $3209 = (getTempRet0() | 0);
 $3210 = (_bitshift64Shl(($3204|0),($3207|0),1)|0);
 $3211 = (getTempRet0() | 0);
 $3212 = $3210 & -2;
 $3213 = $3211 & 1;
 $3214 = (___muldi3(($3212|0),($3213|0),($3201|0),0)|0);
 $3215 = (getTempRet0() | 0);
 $3216 = (_i64Add(($3208|0),($3209|0),($3214|0),($3215|0))|0);
 $3217 = (getTempRet0() | 0);
 $3218 = $3216 ^ $3180;
 $3219 = $3217 ^ $3183;
 $3220 = (_bitshift64Lshr(($3218|0),($3219|0),24)|0);
 $3221 = (getTempRet0() | 0);
 $3222 = (_bitshift64Shl(($3218|0),($3219|0),40)|0);
 $3223 = (getTempRet0() | 0);
 $3224 = $3220 | $3222;
 $3225 = $3221 | $3223;
 $3226 = (_i64Add(($3224|0),($3225|0),($3192|0),($3193|0))|0);
 $3227 = (getTempRet0() | 0);
 $3228 = (_bitshift64Shl(($3192|0),($3193|0),1)|0);
 $3229 = (getTempRet0() | 0);
 $3230 = $3228 & -2;
 $3231 = $3229 & 1;
 $3232 = (___muldi3(($3220|0),0,($3230|0),($3231|0))|0);
 $3233 = (getTempRet0() | 0);
 $3234 = (_i64Add(($3226|0),($3227|0),($3232|0),($3233|0))|0);
 $3235 = (getTempRet0() | 0);
 $3236 = $arrayidx7042;
 $3237 = $3236;
 HEAP32[$3237>>2] = $3234;
 $3238 = (($3236) + 4)|0;
 $3239 = $3238;
 HEAP32[$3239>>2] = $3235;
 $3240 = $3234 ^ $3201;
 $3241 = $3235 ^ $3200;
 $3242 = (_bitshift64Lshr(($3240|0),($3241|0),16)|0);
 $3243 = (getTempRet0() | 0);
 $3244 = (_bitshift64Shl(($3240|0),($3241|0),48)|0);
 $3245 = (getTempRet0() | 0);
 $3246 = $3242 | $3244;
 $3247 = $3243 | $3245;
 $3248 = $arrayidx7068;
 $3249 = $3248;
 HEAP32[$3249>>2] = $3246;
 $3250 = (($3248) + 4)|0;
 $3251 = $3250;
 HEAP32[$3251>>2] = $3247;
 $3252 = (_i64Add(($3246|0),($3247|0),($3216|0),($3217|0))|0);
 $3253 = (getTempRet0() | 0);
 $3254 = (_bitshift64Shl(($3216|0),($3217|0),1)|0);
 $3255 = (getTempRet0() | 0);
 $3256 = $3254 & -2;
 $3257 = $3255 & 1;
 $3258 = (___muldi3(($3242|0),0,($3256|0),($3257|0))|0);
 $3259 = (getTempRet0() | 0);
 $3260 = (_i64Add(($3252|0),($3253|0),($3258|0),($3259|0))|0);
 $3261 = (getTempRet0() | 0);
 $3262 = $3260 ^ $3224;
 $3263 = $3261 ^ $3225;
 $3264 = (_bitshift64Lshr(($3262|0),($3263|0),63)|0);
 $3265 = (getTempRet0() | 0);
 $3266 = (_bitshift64Shl(($3262|0),($3263|0),1)|0);
 $3267 = (getTempRet0() | 0);
 $3268 = $3264 | $3266;
 $3269 = $3265 | $3267;
 $3270 = $arrayidx7046;
 $3271 = $3270;
 HEAP32[$3271>>2] = $3268;
 $3272 = (($3270) + 4)|0;
 $3273 = $3272;
 HEAP32[$3273>>2] = $3269;
 $arrayidx7249 = ((($blockR)) + 536|0);
 $3274 = $arrayidx7249;
 $3275 = $3274;
 $3276 = HEAP32[$3275>>2]|0;
 $3277 = (($3274) + 4)|0;
 $3278 = $3277;
 $3279 = HEAP32[$3278>>2]|0;
 $arrayidx7253 = ((($blockR)) + 568|0);
 $3280 = $arrayidx7253;
 $3281 = $3280;
 $3282 = HEAP32[$3281>>2]|0;
 $3283 = (($3280) + 4)|0;
 $3284 = $3283;
 $3285 = HEAP32[$3284>>2]|0;
 $3286 = (_i64Add(($3282|0),($3285|0),($3276|0),($3279|0))|0);
 $3287 = (getTempRet0() | 0);
 $3288 = (_bitshift64Shl(($3276|0),($3279|0),1)|0);
 $3289 = (getTempRet0() | 0);
 $3290 = $3288 & -2;
 $3291 = $3289 & 1;
 $3292 = (___muldi3(($3290|0),($3291|0),($3282|0),0)|0);
 $3293 = (getTempRet0() | 0);
 $3294 = (_i64Add(($3286|0),($3287|0),($3292|0),($3293|0))|0);
 $3295 = (getTempRet0() | 0);
 $arrayidx7275 = ((($blockR)) + 632|0);
 $3296 = $arrayidx7275;
 $3297 = $3296;
 $3298 = HEAP32[$3297>>2]|0;
 $3299 = (($3296) + 4)|0;
 $3300 = $3299;
 $3301 = HEAP32[$3300>>2]|0;
 $3302 = $3294 ^ $3298;
 $3303 = $3295 ^ $3301;
 $arrayidx7300 = ((($blockR)) + 600|0);
 $3304 = $arrayidx7300;
 $3305 = $3304;
 $3306 = HEAP32[$3305>>2]|0;
 $3307 = (($3304) + 4)|0;
 $3308 = $3307;
 $3309 = HEAP32[$3308>>2]|0;
 $3310 = (_i64Add(($3303|0),($3302|0),($3306|0),($3309|0))|0);
 $3311 = (getTempRet0() | 0);
 $3312 = (_bitshift64Shl(($3306|0),($3309|0),1)|0);
 $3313 = (getTempRet0() | 0);
 $3314 = $3312 & -2;
 $3315 = $3313 & 1;
 $3316 = (___muldi3(($3314|0),($3315|0),($3303|0),0)|0);
 $3317 = (getTempRet0() | 0);
 $3318 = (_i64Add(($3310|0),($3311|0),($3316|0),($3317|0))|0);
 $3319 = (getTempRet0() | 0);
 $3320 = $3318 ^ $3282;
 $3321 = $3319 ^ $3285;
 $3322 = (_bitshift64Lshr(($3320|0),($3321|0),24)|0);
 $3323 = (getTempRet0() | 0);
 $3324 = (_bitshift64Shl(($3320|0),($3321|0),40)|0);
 $3325 = (getTempRet0() | 0);
 $3326 = $3322 | $3324;
 $3327 = $3323 | $3325;
 $3328 = (_i64Add(($3326|0),($3327|0),($3294|0),($3295|0))|0);
 $3329 = (getTempRet0() | 0);
 $3330 = (_bitshift64Shl(($3294|0),($3295|0),1)|0);
 $3331 = (getTempRet0() | 0);
 $3332 = $3330 & -2;
 $3333 = $3331 & 1;
 $3334 = (___muldi3(($3322|0),0,($3332|0),($3333|0))|0);
 $3335 = (getTempRet0() | 0);
 $3336 = (_i64Add(($3328|0),($3329|0),($3334|0),($3335|0))|0);
 $3337 = (getTempRet0() | 0);
 $3338 = $arrayidx7249;
 $3339 = $3338;
 HEAP32[$3339>>2] = $3336;
 $3340 = (($3338) + 4)|0;
 $3341 = $3340;
 HEAP32[$3341>>2] = $3337;
 $3342 = $3336 ^ $3303;
 $3343 = $3337 ^ $3302;
 $3344 = (_bitshift64Lshr(($3342|0),($3343|0),16)|0);
 $3345 = (getTempRet0() | 0);
 $3346 = (_bitshift64Shl(($3342|0),($3343|0),48)|0);
 $3347 = (getTempRet0() | 0);
 $3348 = $3344 | $3346;
 $3349 = $3345 | $3347;
 $3350 = (_i64Add(($3348|0),($3349|0),($3318|0),($3319|0))|0);
 $3351 = (getTempRet0() | 0);
 $3352 = (_bitshift64Shl(($3318|0),($3319|0),1)|0);
 $3353 = (getTempRet0() | 0);
 $3354 = $3352 & -2;
 $3355 = $3353 & 1;
 $3356 = (___muldi3(($3344|0),0,($3354|0),($3355|0))|0);
 $3357 = (getTempRet0() | 0);
 $3358 = (_i64Add(($3350|0),($3351|0),($3356|0),($3357|0))|0);
 $3359 = (getTempRet0() | 0);
 $3360 = $3358 ^ $3326;
 $3361 = $3359 ^ $3327;
 $3362 = (_bitshift64Lshr(($3360|0),($3361|0),63)|0);
 $3363 = (getTempRet0() | 0);
 $3364 = (_bitshift64Shl(($3360|0),($3361|0),1)|0);
 $3365 = (getTempRet0() | 0);
 $3366 = $3362 | $3364;
 $3367 = $3363 | $3365;
 $3368 = $arrayidx7253;
 $3369 = $3368;
 HEAP32[$3369>>2] = $3366;
 $3370 = (($3368) + 4)|0;
 $3371 = $3370;
 HEAP32[$3371>>2] = $3367;
 $3372 = (_i64Add(($3166|0),($3167|0),($3022|0),($3023|0))|0);
 $3373 = (getTempRet0() | 0);
 $3374 = (_bitshift64Shl(($3022|0),($3023|0),1)|0);
 $3375 = (getTempRet0() | 0);
 $3376 = $3374 & -2;
 $3377 = $3375 & 1;
 $3378 = (___muldi3(($3166|0),0,($3376|0),($3377|0))|0);
 $3379 = (getTempRet0() | 0);
 $3380 = (_i64Add(($3372|0),($3373|0),($3378|0),($3379|0))|0);
 $3381 = (getTempRet0() | 0);
 $3382 = $3348 ^ $3380;
 $3383 = $3349 ^ $3381;
 $3384 = (_i64Add(($3383|0),($3382|0),($3260|0),($3261|0))|0);
 $3385 = (getTempRet0() | 0);
 $3386 = (_bitshift64Shl(($3260|0),($3261|0),1)|0);
 $3387 = (getTempRet0() | 0);
 $3388 = $3386 & -2;
 $3389 = $3387 & 1;
 $3390 = (___muldi3(($3383|0),0,($3388|0),($3389|0))|0);
 $3391 = (getTempRet0() | 0);
 $3392 = (_i64Add(($3384|0),($3385|0),($3390|0),($3391|0))|0);
 $3393 = (getTempRet0() | 0);
 $3394 = $3392 ^ $3166;
 $3395 = $3393 ^ $3167;
 $3396 = (_bitshift64Lshr(($3394|0),($3395|0),24)|0);
 $3397 = (getTempRet0() | 0);
 $3398 = (_bitshift64Shl(($3394|0),($3395|0),40)|0);
 $3399 = (getTempRet0() | 0);
 $3400 = $3396 | $3398;
 $3401 = $3397 | $3399;
 $3402 = (_i64Add(($3400|0),($3401|0),($3380|0),($3381|0))|0);
 $3403 = (getTempRet0() | 0);
 $3404 = (_bitshift64Shl(($3380|0),($3381|0),1)|0);
 $3405 = (getTempRet0() | 0);
 $3406 = $3404 & -2;
 $3407 = $3405 & 1;
 $3408 = (___muldi3(($3396|0),0,($3406|0),($3407|0))|0);
 $3409 = (getTempRet0() | 0);
 $3410 = (_i64Add(($3402|0),($3403|0),($3408|0),($3409|0))|0);
 $3411 = (getTempRet0() | 0);
 $3412 = $add$ptr6627;
 $3413 = $3412;
 HEAP32[$3413>>2] = $3410;
 $3414 = (($3412) + 4)|0;
 $3415 = $3414;
 HEAP32[$3415>>2] = $3411;
 $3416 = $3410 ^ $3383;
 $3417 = $3411 ^ $3382;
 $3418 = (_bitshift64Lshr(($3416|0),($3417|0),16)|0);
 $3419 = (getTempRet0() | 0);
 $3420 = (_bitshift64Shl(($3416|0),($3417|0),48)|0);
 $3421 = (getTempRet0() | 0);
 $3422 = $3418 | $3420;
 $3423 = $3419 | $3421;
 $3424 = $arrayidx7275;
 $3425 = $3424;
 HEAP32[$3425>>2] = $3422;
 $3426 = (($3424) + 4)|0;
 $3427 = $3426;
 HEAP32[$3427>>2] = $3423;
 $3428 = (_i64Add(($3422|0),($3423|0),($3392|0),($3393|0))|0);
 $3429 = (getTempRet0() | 0);
 $3430 = (_bitshift64Shl(($3392|0),($3393|0),1)|0);
 $3431 = (getTempRet0() | 0);
 $3432 = $3430 & -2;
 $3433 = $3431 & 1;
 $3434 = (___muldi3(($3418|0),0,($3432|0),($3433|0))|0);
 $3435 = (getTempRet0() | 0);
 $3436 = (_i64Add(($3428|0),($3429|0),($3434|0),($3435|0))|0);
 $3437 = (getTempRet0() | 0);
 $3438 = $arrayidx7093;
 $3439 = $3438;
 HEAP32[$3439>>2] = $3436;
 $3440 = (($3438) + 4)|0;
 $3441 = $3440;
 HEAP32[$3441>>2] = $3437;
 $3442 = $3436 ^ $3400;
 $3443 = $3437 ^ $3401;
 $3444 = (_bitshift64Lshr(($3442|0),($3443|0),63)|0);
 $3445 = (getTempRet0() | 0);
 $3446 = (_bitshift64Shl(($3442|0),($3443|0),1)|0);
 $3447 = (getTempRet0() | 0);
 $3448 = $3444 | $3446;
 $3449 = $3445 | $3447;
 $3450 = $arrayidx6839;
 $3451 = $3450;
 HEAP32[$3451>>2] = $3448;
 $3452 = (($3450) + 4)|0;
 $3453 = $3452;
 HEAP32[$3453>>2] = $3449;
 $3454 = (_i64Add(($3268|0),($3269|0),($3128|0),($3129|0))|0);
 $3455 = (getTempRet0() | 0);
 $3456 = (_bitshift64Shl(($3128|0),($3129|0),1)|0);
 $3457 = (getTempRet0() | 0);
 $3458 = $3456 & -2;
 $3459 = $3457 & 1;
 $3460 = (___muldi3(($3268|0),0,($3458|0),($3459|0))|0);
 $3461 = (getTempRet0() | 0);
 $3462 = (_i64Add(($3454|0),($3455|0),($3460|0),($3461|0))|0);
 $3463 = (getTempRet0() | 0);
 $3464 = $3462 ^ $3034;
 $3465 = $3463 ^ $3035;
 $3466 = (_i64Add(($3358|0),($3359|0),($3465|0),($3464|0))|0);
 $3467 = (getTempRet0() | 0);
 $3468 = (_bitshift64Shl(($3358|0),($3359|0),1)|0);
 $3469 = (getTempRet0() | 0);
 $3470 = $3468 & -2;
 $3471 = $3469 & 1;
 $3472 = (___muldi3(($3470|0),($3471|0),($3465|0),0)|0);
 $3473 = (getTempRet0() | 0);
 $3474 = (_i64Add(($3466|0),($3467|0),($3472|0),($3473|0))|0);
 $3475 = (getTempRet0() | 0);
 $3476 = $3474 ^ $3268;
 $3477 = $3475 ^ $3269;
 $3478 = (_bitshift64Lshr(($3476|0),($3477|0),24)|0);
 $3479 = (getTempRet0() | 0);
 $3480 = (_bitshift64Shl(($3476|0),($3477|0),40)|0);
 $3481 = (getTempRet0() | 0);
 $3482 = $3478 | $3480;
 $3483 = $3479 | $3481;
 $3484 = (_i64Add(($3482|0),($3483|0),($3462|0),($3463|0))|0);
 $3485 = (getTempRet0() | 0);
 $3486 = (_bitshift64Shl(($3462|0),($3463|0),1)|0);
 $3487 = (getTempRet0() | 0);
 $3488 = $3486 & -2;
 $3489 = $3487 & 1;
 $3490 = (___muldi3(($3478|0),0,($3488|0),($3489|0))|0);
 $3491 = (getTempRet0() | 0);
 $3492 = (_i64Add(($3484|0),($3485|0),($3490|0),($3491|0))|0);
 $3493 = (getTempRet0() | 0);
 $3494 = $arrayidx6835;
 $3495 = $3494;
 HEAP32[$3495>>2] = $3492;
 $3496 = (($3494) + 4)|0;
 $3497 = $3496;
 HEAP32[$3497>>2] = $3493;
 $3498 = $3492 ^ $3465;
 $3499 = $3493 ^ $3464;
 $3500 = (_bitshift64Lshr(($3498|0),($3499|0),16)|0);
 $3501 = (getTempRet0() | 0);
 $3502 = (_bitshift64Shl(($3498|0),($3499|0),48)|0);
 $3503 = (getTempRet0() | 0);
 $3504 = $3500 | $3502;
 $3505 = $3501 | $3503;
 $3506 = $arrayidx6654;
 $3507 = $3506;
 HEAP32[$3507>>2] = $3504;
 $3508 = (($3506) + 4)|0;
 $3509 = $3508;
 HEAP32[$3509>>2] = $3505;
 $3510 = (_i64Add(($3504|0),($3505|0),($3474|0),($3475|0))|0);
 $3511 = (getTempRet0() | 0);
 $3512 = (_bitshift64Shl(($3474|0),($3475|0),1)|0);
 $3513 = (getTempRet0() | 0);
 $3514 = $3512 & -2;
 $3515 = $3513 & 1;
 $3516 = (___muldi3(($3500|0),0,($3514|0),($3515|0))|0);
 $3517 = (getTempRet0() | 0);
 $3518 = (_i64Add(($3510|0),($3511|0),($3516|0),($3517|0))|0);
 $3519 = (getTempRet0() | 0);
 $3520 = $arrayidx7300;
 $3521 = $3520;
 HEAP32[$3521>>2] = $3518;
 $3522 = (($3520) + 4)|0;
 $3523 = $3522;
 HEAP32[$3523>>2] = $3519;
 $3524 = $3518 ^ $3482;
 $3525 = $3519 ^ $3483;
 $3526 = (_bitshift64Lshr(($3524|0),($3525|0),63)|0);
 $3527 = (getTempRet0() | 0);
 $3528 = (_bitshift64Shl(($3524|0),($3525|0),1)|0);
 $3529 = (getTempRet0() | 0);
 $3530 = $3526 | $3528;
 $3531 = $3527 | $3529;
 $3532 = $arrayidx7046;
 $3533 = $3532;
 HEAP32[$3533>>2] = $3530;
 $3534 = (($3532) + 4)|0;
 $3535 = $3534;
 HEAP32[$3535>>2] = $3531;
 $3536 = (_i64Add(($3366|0),($3367|0),($3234|0),($3235|0))|0);
 $3537 = (getTempRet0() | 0);
 $3538 = (_bitshift64Shl(($3234|0),($3235|0),1)|0);
 $3539 = (getTempRet0() | 0);
 $3540 = $3538 & -2;
 $3541 = $3539 & 1;
 $3542 = (___muldi3(($3366|0),0,($3540|0),($3541|0))|0);
 $3543 = (getTempRet0() | 0);
 $3544 = (_i64Add(($3536|0),($3537|0),($3542|0),($3543|0))|0);
 $3545 = (getTempRet0() | 0);
 $3546 = $3544 ^ $3140;
 $3547 = $3545 ^ $3141;
 $3548 = (_i64Add(($3547|0),($3546|0),($3048|0),($3049|0))|0);
 $3549 = (getTempRet0() | 0);
 $3550 = (_bitshift64Shl(($3048|0),($3049|0),1)|0);
 $3551 = (getTempRet0() | 0);
 $3552 = $3550 & -2;
 $3553 = $3551 & 1;
 $3554 = (___muldi3(($3547|0),0,($3552|0),($3553|0))|0);
 $3555 = (getTempRet0() | 0);
 $3556 = (_i64Add(($3548|0),($3549|0),($3554|0),($3555|0))|0);
 $3557 = (getTempRet0() | 0);
 $3558 = $3556 ^ $3366;
 $3559 = $3557 ^ $3367;
 $3560 = (_bitshift64Lshr(($3558|0),($3559|0),24)|0);
 $3561 = (getTempRet0() | 0);
 $3562 = (_bitshift64Shl(($3558|0),($3559|0),40)|0);
 $3563 = (getTempRet0() | 0);
 $3564 = $3560 | $3562;
 $3565 = $3561 | $3563;
 $3566 = (_i64Add(($3564|0),($3565|0),($3544|0),($3545|0))|0);
 $3567 = (getTempRet0() | 0);
 $3568 = (_bitshift64Shl(($3544|0),($3545|0),1)|0);
 $3569 = (getTempRet0() | 0);
 $3570 = $3568 & -2;
 $3571 = $3569 & 1;
 $3572 = (___muldi3(($3560|0),0,($3570|0),($3571|0))|0);
 $3573 = (getTempRet0() | 0);
 $3574 = (_i64Add(($3566|0),($3567|0),($3572|0),($3573|0))|0);
 $3575 = (getTempRet0() | 0);
 $3576 = $arrayidx7042;
 $3577 = $3576;
 HEAP32[$3577>>2] = $3574;
 $3578 = (($3576) + 4)|0;
 $3579 = $3578;
 HEAP32[$3579>>2] = $3575;
 $3580 = $3574 ^ $3547;
 $3581 = $3575 ^ $3546;
 $3582 = (_bitshift64Lshr(($3580|0),($3581|0),16)|0);
 $3583 = (getTempRet0() | 0);
 $3584 = (_bitshift64Shl(($3580|0),($3581|0),48)|0);
 $3585 = (getTempRet0() | 0);
 $3586 = $3582 | $3584;
 $3587 = $3583 | $3585;
 $3588 = $arrayidx6861;
 $3589 = $3588;
 HEAP32[$3589>>2] = $3586;
 $3590 = (($3588) + 4)|0;
 $3591 = $3590;
 HEAP32[$3591>>2] = $3587;
 $3592 = (_i64Add(($3586|0),($3587|0),($3556|0),($3557|0))|0);
 $3593 = (getTempRet0() | 0);
 $3594 = (_bitshift64Shl(($3556|0),($3557|0),1)|0);
 $3595 = (getTempRet0() | 0);
 $3596 = $3594 & -2;
 $3597 = $3595 & 1;
 $3598 = (___muldi3(($3582|0),0,($3596|0),($3597|0))|0);
 $3599 = (getTempRet0() | 0);
 $3600 = (_i64Add(($3592|0),($3593|0),($3598|0),($3599|0))|0);
 $3601 = (getTempRet0() | 0);
 $3602 = $arrayidx6679;
 $3603 = $3602;
 HEAP32[$3603>>2] = $3600;
 $3604 = (($3602) + 4)|0;
 $3605 = $3604;
 HEAP32[$3605>>2] = $3601;
 $3606 = $3600 ^ $3564;
 $3607 = $3601 ^ $3565;
 $3608 = (_bitshift64Lshr(($3606|0),($3607|0),63)|0);
 $3609 = (getTempRet0() | 0);
 $3610 = (_bitshift64Shl(($3606|0),($3607|0),1)|0);
 $3611 = (getTempRet0() | 0);
 $3612 = $3608 | $3610;
 $3613 = $3609 | $3611;
 $3614 = $arrayidx7253;
 $3615 = $3614;
 HEAP32[$3615>>2] = $3612;
 $3616 = (($3614) + 4)|0;
 $3617 = $3616;
 HEAP32[$3617>>2] = $3613;
 $3618 = (_i64Add(($3336|0),($3337|0),($3060|0),($3061|0))|0);
 $3619 = (getTempRet0() | 0);
 $3620 = (_bitshift64Shl(($3336|0),($3337|0),1)|0);
 $3621 = (getTempRet0() | 0);
 $3622 = $3620 & -2;
 $3623 = $3621 & 1;
 $3624 = (___muldi3(($3622|0),($3623|0),($3060|0),0)|0);
 $3625 = (getTempRet0() | 0);
 $3626 = (_i64Add(($3618|0),($3619|0),($3624|0),($3625|0))|0);
 $3627 = (getTempRet0() | 0);
 $3628 = $3626 ^ $3246;
 $3629 = $3627 ^ $3247;
 $3630 = (_i64Add(($3629|0),($3628|0),($3154|0),($3155|0))|0);
 $3631 = (getTempRet0() | 0);
 $3632 = (_bitshift64Shl(($3154|0),($3155|0),1)|0);
 $3633 = (getTempRet0() | 0);
 $3634 = $3632 & -2;
 $3635 = $3633 & 1;
 $3636 = (___muldi3(($3629|0),0,($3634|0),($3635|0))|0);
 $3637 = (getTempRet0() | 0);
 $3638 = (_i64Add(($3630|0),($3631|0),($3636|0),($3637|0))|0);
 $3639 = (getTempRet0() | 0);
 $3640 = $3638 ^ $3060;
 $3641 = $3639 ^ $3061;
 $3642 = (_bitshift64Lshr(($3640|0),($3641|0),24)|0);
 $3643 = (getTempRet0() | 0);
 $3644 = (_bitshift64Shl(($3640|0),($3641|0),40)|0);
 $3645 = (getTempRet0() | 0);
 $3646 = $3642 | $3644;
 $3647 = $3643 | $3645;
 $3648 = (_i64Add(($3646|0),($3647|0),($3626|0),($3627|0))|0);
 $3649 = (getTempRet0() | 0);
 $3650 = (_bitshift64Shl(($3626|0),($3627|0),1)|0);
 $3651 = (getTempRet0() | 0);
 $3652 = $3650 & -2;
 $3653 = $3651 & 1;
 $3654 = (___muldi3(($3642|0),0,($3652|0),($3653|0))|0);
 $3655 = (getTempRet0() | 0);
 $3656 = (_i64Add(($3648|0),($3649|0),($3654|0),($3655|0))|0);
 $3657 = (getTempRet0() | 0);
 $3658 = $arrayidx7249;
 $3659 = $3658;
 HEAP32[$3659>>2] = $3656;
 $3660 = (($3658) + 4)|0;
 $3661 = $3660;
 HEAP32[$3661>>2] = $3657;
 $3662 = $3656 ^ $3629;
 $3663 = $3657 ^ $3628;
 $3664 = (_bitshift64Lshr(($3662|0),($3663|0),16)|0);
 $3665 = (getTempRet0() | 0);
 $3666 = (_bitshift64Shl(($3662|0),($3663|0),48)|0);
 $3667 = (getTempRet0() | 0);
 $3668 = $3664 | $3666;
 $3669 = $3665 | $3667;
 $3670 = $arrayidx7068;
 $3671 = $3670;
 HEAP32[$3671>>2] = $3668;
 $3672 = (($3670) + 4)|0;
 $3673 = $3672;
 HEAP32[$3673>>2] = $3669;
 $3674 = (_i64Add(($3668|0),($3669|0),($3638|0),($3639|0))|0);
 $3675 = (getTempRet0() | 0);
 $3676 = (_bitshift64Shl(($3638|0),($3639|0),1)|0);
 $3677 = (getTempRet0() | 0);
 $3678 = $3676 & -2;
 $3679 = $3677 & 1;
 $3680 = (___muldi3(($3664|0),0,($3678|0),($3679|0))|0);
 $3681 = (getTempRet0() | 0);
 $3682 = (_i64Add(($3674|0),($3675|0),($3680|0),($3681|0))|0);
 $3683 = (getTempRet0() | 0);
 $3684 = $arrayidx6886;
 $3685 = $3684;
 HEAP32[$3685>>2] = $3682;
 $3686 = (($3684) + 4)|0;
 $3687 = $3686;
 HEAP32[$3687>>2] = $3683;
 $3688 = $3682 ^ $3646;
 $3689 = $3683 ^ $3647;
 $3690 = (_bitshift64Lshr(($3688|0),($3689|0),63)|0);
 $3691 = (getTempRet0() | 0);
 $3692 = (_bitshift64Shl(($3688|0),($3689|0),1)|0);
 $3693 = (getTempRet0() | 0);
 $3694 = $3690 | $3692;
 $3695 = $3691 | $3693;
 $3696 = $arrayidx6632;
 $3697 = $3696;
 HEAP32[$3697>>2] = $3694;
 $3698 = (($3696) + 4)|0;
 $3699 = $3698;
 HEAP32[$3699>>2] = $3695;
 $add$ptr8286 = ((($blockR)) + 640|0);
 $3700 = $add$ptr8286;
 $3701 = $3700;
 $3702 = HEAP32[$3701>>2]|0;
 $3703 = (($3700) + 4)|0;
 $3704 = $3703;
 $3705 = HEAP32[$3704>>2]|0;
 $arrayidx8291 = ((($blockR)) + 672|0);
 $3706 = $arrayidx8291;
 $3707 = $3706;
 $3708 = HEAP32[$3707>>2]|0;
 $3709 = (($3706) + 4)|0;
 $3710 = $3709;
 $3711 = HEAP32[$3710>>2]|0;
 $3712 = (_i64Add(($3708|0),($3711|0),($3702|0),($3705|0))|0);
 $3713 = (getTempRet0() | 0);
 $3714 = (_bitshift64Shl(($3702|0),($3705|0),1)|0);
 $3715 = (getTempRet0() | 0);
 $3716 = $3714 & -2;
 $3717 = $3715 & 1;
 $3718 = (___muldi3(($3716|0),($3717|0),($3708|0),0)|0);
 $3719 = (getTempRet0() | 0);
 $3720 = (_i64Add(($3712|0),($3713|0),($3718|0),($3719|0))|0);
 $3721 = (getTempRet0() | 0);
 $arrayidx8313 = ((($blockR)) + 736|0);
 $3722 = $arrayidx8313;
 $3723 = $3722;
 $3724 = HEAP32[$3723>>2]|0;
 $3725 = (($3722) + 4)|0;
 $3726 = $3725;
 $3727 = HEAP32[$3726>>2]|0;
 $3728 = $3720 ^ $3724;
 $3729 = $3721 ^ $3727;
 $arrayidx8338 = ((($blockR)) + 704|0);
 $3730 = $arrayidx8338;
 $3731 = $3730;
 $3732 = HEAP32[$3731>>2]|0;
 $3733 = (($3730) + 4)|0;
 $3734 = $3733;
 $3735 = HEAP32[$3734>>2]|0;
 $3736 = (_i64Add(($3729|0),($3728|0),($3732|0),($3735|0))|0);
 $3737 = (getTempRet0() | 0);
 $3738 = (_bitshift64Shl(($3732|0),($3735|0),1)|0);
 $3739 = (getTempRet0() | 0);
 $3740 = $3738 & -2;
 $3741 = $3739 & 1;
 $3742 = (___muldi3(($3740|0),($3741|0),($3729|0),0)|0);
 $3743 = (getTempRet0() | 0);
 $3744 = (_i64Add(($3736|0),($3737|0),($3742|0),($3743|0))|0);
 $3745 = (getTempRet0() | 0);
 $3746 = $3744 ^ $3708;
 $3747 = $3745 ^ $3711;
 $3748 = (_bitshift64Lshr(($3746|0),($3747|0),24)|0);
 $3749 = (getTempRet0() | 0);
 $3750 = (_bitshift64Shl(($3746|0),($3747|0),40)|0);
 $3751 = (getTempRet0() | 0);
 $3752 = $3748 | $3750;
 $3753 = $3749 | $3751;
 $3754 = (_i64Add(($3752|0),($3753|0),($3720|0),($3721|0))|0);
 $3755 = (getTempRet0() | 0);
 $3756 = (_bitshift64Shl(($3720|0),($3721|0),1)|0);
 $3757 = (getTempRet0() | 0);
 $3758 = $3756 & -2;
 $3759 = $3757 & 1;
 $3760 = (___muldi3(($3748|0),0,($3758|0),($3759|0))|0);
 $3761 = (getTempRet0() | 0);
 $3762 = (_i64Add(($3754|0),($3755|0),($3760|0),($3761|0))|0);
 $3763 = (getTempRet0() | 0);
 $3764 = $add$ptr8286;
 $3765 = $3764;
 HEAP32[$3765>>2] = $3762;
 $3766 = (($3764) + 4)|0;
 $3767 = $3766;
 HEAP32[$3767>>2] = $3763;
 $3768 = $3762 ^ $3729;
 $3769 = $3763 ^ $3728;
 $3770 = (_bitshift64Lshr(($3768|0),($3769|0),16)|0);
 $3771 = (getTempRet0() | 0);
 $3772 = (_bitshift64Shl(($3768|0),($3769|0),48)|0);
 $3773 = (getTempRet0() | 0);
 $3774 = $3770 | $3772;
 $3775 = $3771 | $3773;
 $3776 = $arrayidx8313;
 $3777 = $3776;
 HEAP32[$3777>>2] = $3774;
 $3778 = (($3776) + 4)|0;
 $3779 = $3778;
 HEAP32[$3779>>2] = $3775;
 $3780 = (_i64Add(($3774|0),($3775|0),($3744|0),($3745|0))|0);
 $3781 = (getTempRet0() | 0);
 $3782 = (_bitshift64Shl(($3744|0),($3745|0),1)|0);
 $3783 = (getTempRet0() | 0);
 $3784 = $3782 & -2;
 $3785 = $3783 & 1;
 $3786 = (___muldi3(($3770|0),0,($3784|0),($3785|0))|0);
 $3787 = (getTempRet0() | 0);
 $3788 = (_i64Add(($3780|0),($3781|0),($3786|0),($3787|0))|0);
 $3789 = (getTempRet0() | 0);
 $3790 = $arrayidx8338;
 $3791 = $3790;
 HEAP32[$3791>>2] = $3788;
 $3792 = (($3790) + 4)|0;
 $3793 = $3792;
 HEAP32[$3793>>2] = $3789;
 $3794 = $3788 ^ $3752;
 $3795 = $3789 ^ $3753;
 $3796 = (_bitshift64Lshr(($3794|0),($3795|0),63)|0);
 $3797 = (getTempRet0() | 0);
 $3798 = (_bitshift64Shl(($3794|0),($3795|0),1)|0);
 $3799 = (getTempRet0() | 0);
 $3800 = $3796 | $3798;
 $3801 = $3797 | $3799;
 $3802 = $arrayidx8291;
 $3803 = $3802;
 HEAP32[$3803>>2] = $3800;
 $3804 = (($3802) + 4)|0;
 $3805 = $3804;
 HEAP32[$3805>>2] = $3801;
 $arrayidx8494 = ((($blockR)) + 648|0);
 $3806 = $arrayidx8494;
 $3807 = $3806;
 $3808 = HEAP32[$3807>>2]|0;
 $3809 = (($3806) + 4)|0;
 $3810 = $3809;
 $3811 = HEAP32[$3810>>2]|0;
 $arrayidx8498 = ((($blockR)) + 680|0);
 $3812 = $arrayidx8498;
 $3813 = $3812;
 $3814 = HEAP32[$3813>>2]|0;
 $3815 = (($3812) + 4)|0;
 $3816 = $3815;
 $3817 = HEAP32[$3816>>2]|0;
 $3818 = (_i64Add(($3814|0),($3817|0),($3808|0),($3811|0))|0);
 $3819 = (getTempRet0() | 0);
 $3820 = (_bitshift64Shl(($3808|0),($3811|0),1)|0);
 $3821 = (getTempRet0() | 0);
 $3822 = $3820 & -2;
 $3823 = $3821 & 1;
 $3824 = (___muldi3(($3822|0),($3823|0),($3814|0),0)|0);
 $3825 = (getTempRet0() | 0);
 $3826 = (_i64Add(($3818|0),($3819|0),($3824|0),($3825|0))|0);
 $3827 = (getTempRet0() | 0);
 $arrayidx8520 = ((($blockR)) + 744|0);
 $3828 = $arrayidx8520;
 $3829 = $3828;
 $3830 = HEAP32[$3829>>2]|0;
 $3831 = (($3828) + 4)|0;
 $3832 = $3831;
 $3833 = HEAP32[$3832>>2]|0;
 $3834 = $3826 ^ $3830;
 $3835 = $3827 ^ $3833;
 $arrayidx8545 = ((($blockR)) + 712|0);
 $3836 = $arrayidx8545;
 $3837 = $3836;
 $3838 = HEAP32[$3837>>2]|0;
 $3839 = (($3836) + 4)|0;
 $3840 = $3839;
 $3841 = HEAP32[$3840>>2]|0;
 $3842 = (_i64Add(($3835|0),($3834|0),($3838|0),($3841|0))|0);
 $3843 = (getTempRet0() | 0);
 $3844 = (_bitshift64Shl(($3838|0),($3841|0),1)|0);
 $3845 = (getTempRet0() | 0);
 $3846 = $3844 & -2;
 $3847 = $3845 & 1;
 $3848 = (___muldi3(($3846|0),($3847|0),($3835|0),0)|0);
 $3849 = (getTempRet0() | 0);
 $3850 = (_i64Add(($3842|0),($3843|0),($3848|0),($3849|0))|0);
 $3851 = (getTempRet0() | 0);
 $3852 = $3850 ^ $3814;
 $3853 = $3851 ^ $3817;
 $3854 = (_bitshift64Lshr(($3852|0),($3853|0),24)|0);
 $3855 = (getTempRet0() | 0);
 $3856 = (_bitshift64Shl(($3852|0),($3853|0),40)|0);
 $3857 = (getTempRet0() | 0);
 $3858 = $3854 | $3856;
 $3859 = $3855 | $3857;
 $3860 = (_i64Add(($3858|0),($3859|0),($3826|0),($3827|0))|0);
 $3861 = (getTempRet0() | 0);
 $3862 = (_bitshift64Shl(($3826|0),($3827|0),1)|0);
 $3863 = (getTempRet0() | 0);
 $3864 = $3862 & -2;
 $3865 = $3863 & 1;
 $3866 = (___muldi3(($3854|0),0,($3864|0),($3865|0))|0);
 $3867 = (getTempRet0() | 0);
 $3868 = (_i64Add(($3860|0),($3861|0),($3866|0),($3867|0))|0);
 $3869 = (getTempRet0() | 0);
 $3870 = $arrayidx8494;
 $3871 = $3870;
 HEAP32[$3871>>2] = $3868;
 $3872 = (($3870) + 4)|0;
 $3873 = $3872;
 HEAP32[$3873>>2] = $3869;
 $3874 = $3868 ^ $3835;
 $3875 = $3869 ^ $3834;
 $3876 = (_bitshift64Lshr(($3874|0),($3875|0),16)|0);
 $3877 = (getTempRet0() | 0);
 $3878 = (_bitshift64Shl(($3874|0),($3875|0),48)|0);
 $3879 = (getTempRet0() | 0);
 $3880 = $3876 | $3878;
 $3881 = $3877 | $3879;
 $3882 = $arrayidx8520;
 $3883 = $3882;
 HEAP32[$3883>>2] = $3880;
 $3884 = (($3882) + 4)|0;
 $3885 = $3884;
 HEAP32[$3885>>2] = $3881;
 $3886 = (_i64Add(($3880|0),($3881|0),($3850|0),($3851|0))|0);
 $3887 = (getTempRet0() | 0);
 $3888 = (_bitshift64Shl(($3850|0),($3851|0),1)|0);
 $3889 = (getTempRet0() | 0);
 $3890 = $3888 & -2;
 $3891 = $3889 & 1;
 $3892 = (___muldi3(($3876|0),0,($3890|0),($3891|0))|0);
 $3893 = (getTempRet0() | 0);
 $3894 = (_i64Add(($3886|0),($3887|0),($3892|0),($3893|0))|0);
 $3895 = (getTempRet0() | 0);
 $3896 = $arrayidx8545;
 $3897 = $3896;
 HEAP32[$3897>>2] = $3894;
 $3898 = (($3896) + 4)|0;
 $3899 = $3898;
 HEAP32[$3899>>2] = $3895;
 $3900 = $3894 ^ $3858;
 $3901 = $3895 ^ $3859;
 $3902 = (_bitshift64Lshr(($3900|0),($3901|0),63)|0);
 $3903 = (getTempRet0() | 0);
 $3904 = (_bitshift64Shl(($3900|0),($3901|0),1)|0);
 $3905 = (getTempRet0() | 0);
 $3906 = $3902 | $3904;
 $3907 = $3903 | $3905;
 $3908 = $arrayidx8498;
 $3909 = $3908;
 HEAP32[$3909>>2] = $3906;
 $3910 = (($3908) + 4)|0;
 $3911 = $3910;
 HEAP32[$3911>>2] = $3907;
 $arrayidx8701 = ((($blockR)) + 656|0);
 $3912 = $arrayidx8701;
 $3913 = $3912;
 $3914 = HEAP32[$3913>>2]|0;
 $3915 = (($3912) + 4)|0;
 $3916 = $3915;
 $3917 = HEAP32[$3916>>2]|0;
 $arrayidx8705 = ((($blockR)) + 688|0);
 $3918 = $arrayidx8705;
 $3919 = $3918;
 $3920 = HEAP32[$3919>>2]|0;
 $3921 = (($3918) + 4)|0;
 $3922 = $3921;
 $3923 = HEAP32[$3922>>2]|0;
 $3924 = (_i64Add(($3920|0),($3923|0),($3914|0),($3917|0))|0);
 $3925 = (getTempRet0() | 0);
 $3926 = (_bitshift64Shl(($3914|0),($3917|0),1)|0);
 $3927 = (getTempRet0() | 0);
 $3928 = $3926 & -2;
 $3929 = $3927 & 1;
 $3930 = (___muldi3(($3928|0),($3929|0),($3920|0),0)|0);
 $3931 = (getTempRet0() | 0);
 $3932 = (_i64Add(($3924|0),($3925|0),($3930|0),($3931|0))|0);
 $3933 = (getTempRet0() | 0);
 $arrayidx8727 = ((($blockR)) + 752|0);
 $3934 = $arrayidx8727;
 $3935 = $3934;
 $3936 = HEAP32[$3935>>2]|0;
 $3937 = (($3934) + 4)|0;
 $3938 = $3937;
 $3939 = HEAP32[$3938>>2]|0;
 $3940 = $3932 ^ $3936;
 $3941 = $3933 ^ $3939;
 $arrayidx8752 = ((($blockR)) + 720|0);
 $3942 = $arrayidx8752;
 $3943 = $3942;
 $3944 = HEAP32[$3943>>2]|0;
 $3945 = (($3942) + 4)|0;
 $3946 = $3945;
 $3947 = HEAP32[$3946>>2]|0;
 $3948 = (_i64Add(($3941|0),($3940|0),($3944|0),($3947|0))|0);
 $3949 = (getTempRet0() | 0);
 $3950 = (_bitshift64Shl(($3944|0),($3947|0),1)|0);
 $3951 = (getTempRet0() | 0);
 $3952 = $3950 & -2;
 $3953 = $3951 & 1;
 $3954 = (___muldi3(($3952|0),($3953|0),($3941|0),0)|0);
 $3955 = (getTempRet0() | 0);
 $3956 = (_i64Add(($3948|0),($3949|0),($3954|0),($3955|0))|0);
 $3957 = (getTempRet0() | 0);
 $3958 = $3956 ^ $3920;
 $3959 = $3957 ^ $3923;
 $3960 = (_bitshift64Lshr(($3958|0),($3959|0),24)|0);
 $3961 = (getTempRet0() | 0);
 $3962 = (_bitshift64Shl(($3958|0),($3959|0),40)|0);
 $3963 = (getTempRet0() | 0);
 $3964 = $3960 | $3962;
 $3965 = $3961 | $3963;
 $3966 = (_i64Add(($3964|0),($3965|0),($3932|0),($3933|0))|0);
 $3967 = (getTempRet0() | 0);
 $3968 = (_bitshift64Shl(($3932|0),($3933|0),1)|0);
 $3969 = (getTempRet0() | 0);
 $3970 = $3968 & -2;
 $3971 = $3969 & 1;
 $3972 = (___muldi3(($3960|0),0,($3970|0),($3971|0))|0);
 $3973 = (getTempRet0() | 0);
 $3974 = (_i64Add(($3966|0),($3967|0),($3972|0),($3973|0))|0);
 $3975 = (getTempRet0() | 0);
 $3976 = $arrayidx8701;
 $3977 = $3976;
 HEAP32[$3977>>2] = $3974;
 $3978 = (($3976) + 4)|0;
 $3979 = $3978;
 HEAP32[$3979>>2] = $3975;
 $3980 = $3974 ^ $3941;
 $3981 = $3975 ^ $3940;
 $3982 = (_bitshift64Lshr(($3980|0),($3981|0),16)|0);
 $3983 = (getTempRet0() | 0);
 $3984 = (_bitshift64Shl(($3980|0),($3981|0),48)|0);
 $3985 = (getTempRet0() | 0);
 $3986 = $3982 | $3984;
 $3987 = $3983 | $3985;
 $3988 = $arrayidx8727;
 $3989 = $3988;
 HEAP32[$3989>>2] = $3986;
 $3990 = (($3988) + 4)|0;
 $3991 = $3990;
 HEAP32[$3991>>2] = $3987;
 $3992 = (_i64Add(($3986|0),($3987|0),($3956|0),($3957|0))|0);
 $3993 = (getTempRet0() | 0);
 $3994 = (_bitshift64Shl(($3956|0),($3957|0),1)|0);
 $3995 = (getTempRet0() | 0);
 $3996 = $3994 & -2;
 $3997 = $3995 & 1;
 $3998 = (___muldi3(($3982|0),0,($3996|0),($3997|0))|0);
 $3999 = (getTempRet0() | 0);
 $4000 = (_i64Add(($3992|0),($3993|0),($3998|0),($3999|0))|0);
 $4001 = (getTempRet0() | 0);
 $4002 = $4000 ^ $3964;
 $4003 = $4001 ^ $3965;
 $4004 = (_bitshift64Lshr(($4002|0),($4003|0),63)|0);
 $4005 = (getTempRet0() | 0);
 $4006 = (_bitshift64Shl(($4002|0),($4003|0),1)|0);
 $4007 = (getTempRet0() | 0);
 $4008 = $4004 | $4006;
 $4009 = $4005 | $4007;
 $4010 = $arrayidx8705;
 $4011 = $4010;
 HEAP32[$4011>>2] = $4008;
 $4012 = (($4010) + 4)|0;
 $4013 = $4012;
 HEAP32[$4013>>2] = $4009;
 $arrayidx8908 = ((($blockR)) + 664|0);
 $4014 = $arrayidx8908;
 $4015 = $4014;
 $4016 = HEAP32[$4015>>2]|0;
 $4017 = (($4014) + 4)|0;
 $4018 = $4017;
 $4019 = HEAP32[$4018>>2]|0;
 $arrayidx8912 = ((($blockR)) + 696|0);
 $4020 = $arrayidx8912;
 $4021 = $4020;
 $4022 = HEAP32[$4021>>2]|0;
 $4023 = (($4020) + 4)|0;
 $4024 = $4023;
 $4025 = HEAP32[$4024>>2]|0;
 $4026 = (_i64Add(($4022|0),($4025|0),($4016|0),($4019|0))|0);
 $4027 = (getTempRet0() | 0);
 $4028 = (_bitshift64Shl(($4016|0),($4019|0),1)|0);
 $4029 = (getTempRet0() | 0);
 $4030 = $4028 & -2;
 $4031 = $4029 & 1;
 $4032 = (___muldi3(($4030|0),($4031|0),($4022|0),0)|0);
 $4033 = (getTempRet0() | 0);
 $4034 = (_i64Add(($4026|0),($4027|0),($4032|0),($4033|0))|0);
 $4035 = (getTempRet0() | 0);
 $arrayidx8934 = ((($blockR)) + 760|0);
 $4036 = $arrayidx8934;
 $4037 = $4036;
 $4038 = HEAP32[$4037>>2]|0;
 $4039 = (($4036) + 4)|0;
 $4040 = $4039;
 $4041 = HEAP32[$4040>>2]|0;
 $4042 = $4034 ^ $4038;
 $4043 = $4035 ^ $4041;
 $arrayidx8959 = ((($blockR)) + 728|0);
 $4044 = $arrayidx8959;
 $4045 = $4044;
 $4046 = HEAP32[$4045>>2]|0;
 $4047 = (($4044) + 4)|0;
 $4048 = $4047;
 $4049 = HEAP32[$4048>>2]|0;
 $4050 = (_i64Add(($4043|0),($4042|0),($4046|0),($4049|0))|0);
 $4051 = (getTempRet0() | 0);
 $4052 = (_bitshift64Shl(($4046|0),($4049|0),1)|0);
 $4053 = (getTempRet0() | 0);
 $4054 = $4052 & -2;
 $4055 = $4053 & 1;
 $4056 = (___muldi3(($4054|0),($4055|0),($4043|0),0)|0);
 $4057 = (getTempRet0() | 0);
 $4058 = (_i64Add(($4050|0),($4051|0),($4056|0),($4057|0))|0);
 $4059 = (getTempRet0() | 0);
 $4060 = $4058 ^ $4022;
 $4061 = $4059 ^ $4025;
 $4062 = (_bitshift64Lshr(($4060|0),($4061|0),24)|0);
 $4063 = (getTempRet0() | 0);
 $4064 = (_bitshift64Shl(($4060|0),($4061|0),40)|0);
 $4065 = (getTempRet0() | 0);
 $4066 = $4062 | $4064;
 $4067 = $4063 | $4065;
 $4068 = (_i64Add(($4066|0),($4067|0),($4034|0),($4035|0))|0);
 $4069 = (getTempRet0() | 0);
 $4070 = (_bitshift64Shl(($4034|0),($4035|0),1)|0);
 $4071 = (getTempRet0() | 0);
 $4072 = $4070 & -2;
 $4073 = $4071 & 1;
 $4074 = (___muldi3(($4062|0),0,($4072|0),($4073|0))|0);
 $4075 = (getTempRet0() | 0);
 $4076 = (_i64Add(($4068|0),($4069|0),($4074|0),($4075|0))|0);
 $4077 = (getTempRet0() | 0);
 $4078 = $arrayidx8908;
 $4079 = $4078;
 HEAP32[$4079>>2] = $4076;
 $4080 = (($4078) + 4)|0;
 $4081 = $4080;
 HEAP32[$4081>>2] = $4077;
 $4082 = $4076 ^ $4043;
 $4083 = $4077 ^ $4042;
 $4084 = (_bitshift64Lshr(($4082|0),($4083|0),16)|0);
 $4085 = (getTempRet0() | 0);
 $4086 = (_bitshift64Shl(($4082|0),($4083|0),48)|0);
 $4087 = (getTempRet0() | 0);
 $4088 = $4084 | $4086;
 $4089 = $4085 | $4087;
 $4090 = (_i64Add(($4088|0),($4089|0),($4058|0),($4059|0))|0);
 $4091 = (getTempRet0() | 0);
 $4092 = (_bitshift64Shl(($4058|0),($4059|0),1)|0);
 $4093 = (getTempRet0() | 0);
 $4094 = $4092 & -2;
 $4095 = $4093 & 1;
 $4096 = (___muldi3(($4084|0),0,($4094|0),($4095|0))|0);
 $4097 = (getTempRet0() | 0);
 $4098 = (_i64Add(($4090|0),($4091|0),($4096|0),($4097|0))|0);
 $4099 = (getTempRet0() | 0);
 $4100 = $4098 ^ $4066;
 $4101 = $4099 ^ $4067;
 $4102 = (_bitshift64Lshr(($4100|0),($4101|0),63)|0);
 $4103 = (getTempRet0() | 0);
 $4104 = (_bitshift64Shl(($4100|0),($4101|0),1)|0);
 $4105 = (getTempRet0() | 0);
 $4106 = $4102 | $4104;
 $4107 = $4103 | $4105;
 $4108 = $arrayidx8912;
 $4109 = $4108;
 HEAP32[$4109>>2] = $4106;
 $4110 = (($4108) + 4)|0;
 $4111 = $4110;
 HEAP32[$4111>>2] = $4107;
 $4112 = (_i64Add(($3906|0),($3907|0),($3762|0),($3763|0))|0);
 $4113 = (getTempRet0() | 0);
 $4114 = (_bitshift64Shl(($3762|0),($3763|0),1)|0);
 $4115 = (getTempRet0() | 0);
 $4116 = $4114 & -2;
 $4117 = $4115 & 1;
 $4118 = (___muldi3(($3906|0),0,($4116|0),($4117|0))|0);
 $4119 = (getTempRet0() | 0);
 $4120 = (_i64Add(($4112|0),($4113|0),($4118|0),($4119|0))|0);
 $4121 = (getTempRet0() | 0);
 $4122 = $4088 ^ $4120;
 $4123 = $4089 ^ $4121;
 $4124 = (_i64Add(($4123|0),($4122|0),($4000|0),($4001|0))|0);
 $4125 = (getTempRet0() | 0);
 $4126 = (_bitshift64Shl(($4000|0),($4001|0),1)|0);
 $4127 = (getTempRet0() | 0);
 $4128 = $4126 & -2;
 $4129 = $4127 & 1;
 $4130 = (___muldi3(($4123|0),0,($4128|0),($4129|0))|0);
 $4131 = (getTempRet0() | 0);
 $4132 = (_i64Add(($4124|0),($4125|0),($4130|0),($4131|0))|0);
 $4133 = (getTempRet0() | 0);
 $4134 = $4132 ^ $3906;
 $4135 = $4133 ^ $3907;
 $4136 = (_bitshift64Lshr(($4134|0),($4135|0),24)|0);
 $4137 = (getTempRet0() | 0);
 $4138 = (_bitshift64Shl(($4134|0),($4135|0),40)|0);
 $4139 = (getTempRet0() | 0);
 $4140 = $4136 | $4138;
 $4141 = $4137 | $4139;
 $4142 = (_i64Add(($4140|0),($4141|0),($4120|0),($4121|0))|0);
 $4143 = (getTempRet0() | 0);
 $4144 = (_bitshift64Shl(($4120|0),($4121|0),1)|0);
 $4145 = (getTempRet0() | 0);
 $4146 = $4144 & -2;
 $4147 = $4145 & 1;
 $4148 = (___muldi3(($4136|0),0,($4146|0),($4147|0))|0);
 $4149 = (getTempRet0() | 0);
 $4150 = (_i64Add(($4142|0),($4143|0),($4148|0),($4149|0))|0);
 $4151 = (getTempRet0() | 0);
 $4152 = $add$ptr8286;
 $4153 = $4152;
 HEAP32[$4153>>2] = $4150;
 $4154 = (($4152) + 4)|0;
 $4155 = $4154;
 HEAP32[$4155>>2] = $4151;
 $4156 = $4150 ^ $4123;
 $4157 = $4151 ^ $4122;
 $4158 = (_bitshift64Lshr(($4156|0),($4157|0),16)|0);
 $4159 = (getTempRet0() | 0);
 $4160 = (_bitshift64Shl(($4156|0),($4157|0),48)|0);
 $4161 = (getTempRet0() | 0);
 $4162 = $4158 | $4160;
 $4163 = $4159 | $4161;
 $4164 = $arrayidx8934;
 $4165 = $4164;
 HEAP32[$4165>>2] = $4162;
 $4166 = (($4164) + 4)|0;
 $4167 = $4166;
 HEAP32[$4167>>2] = $4163;
 $4168 = (_i64Add(($4162|0),($4163|0),($4132|0),($4133|0))|0);
 $4169 = (getTempRet0() | 0);
 $4170 = (_bitshift64Shl(($4132|0),($4133|0),1)|0);
 $4171 = (getTempRet0() | 0);
 $4172 = $4170 & -2;
 $4173 = $4171 & 1;
 $4174 = (___muldi3(($4158|0),0,($4172|0),($4173|0))|0);
 $4175 = (getTempRet0() | 0);
 $4176 = (_i64Add(($4168|0),($4169|0),($4174|0),($4175|0))|0);
 $4177 = (getTempRet0() | 0);
 $4178 = $arrayidx8752;
 $4179 = $4178;
 HEAP32[$4179>>2] = $4176;
 $4180 = (($4178) + 4)|0;
 $4181 = $4180;
 HEAP32[$4181>>2] = $4177;
 $4182 = $4176 ^ $4140;
 $4183 = $4177 ^ $4141;
 $4184 = (_bitshift64Lshr(($4182|0),($4183|0),63)|0);
 $4185 = (getTempRet0() | 0);
 $4186 = (_bitshift64Shl(($4182|0),($4183|0),1)|0);
 $4187 = (getTempRet0() | 0);
 $4188 = $4184 | $4186;
 $4189 = $4185 | $4187;
 $4190 = $arrayidx8498;
 $4191 = $4190;
 HEAP32[$4191>>2] = $4188;
 $4192 = (($4190) + 4)|0;
 $4193 = $4192;
 HEAP32[$4193>>2] = $4189;
 $4194 = (_i64Add(($4008|0),($4009|0),($3868|0),($3869|0))|0);
 $4195 = (getTempRet0() | 0);
 $4196 = (_bitshift64Shl(($3868|0),($3869|0),1)|0);
 $4197 = (getTempRet0() | 0);
 $4198 = $4196 & -2;
 $4199 = $4197 & 1;
 $4200 = (___muldi3(($4008|0),0,($4198|0),($4199|0))|0);
 $4201 = (getTempRet0() | 0);
 $4202 = (_i64Add(($4194|0),($4195|0),($4200|0),($4201|0))|0);
 $4203 = (getTempRet0() | 0);
 $4204 = $4202 ^ $3774;
 $4205 = $4203 ^ $3775;
 $4206 = (_i64Add(($4098|0),($4099|0),($4205|0),($4204|0))|0);
 $4207 = (getTempRet0() | 0);
 $4208 = (_bitshift64Shl(($4098|0),($4099|0),1)|0);
 $4209 = (getTempRet0() | 0);
 $4210 = $4208 & -2;
 $4211 = $4209 & 1;
 $4212 = (___muldi3(($4210|0),($4211|0),($4205|0),0)|0);
 $4213 = (getTempRet0() | 0);
 $4214 = (_i64Add(($4206|0),($4207|0),($4212|0),($4213|0))|0);
 $4215 = (getTempRet0() | 0);
 $4216 = $4214 ^ $4008;
 $4217 = $4215 ^ $4009;
 $4218 = (_bitshift64Lshr(($4216|0),($4217|0),24)|0);
 $4219 = (getTempRet0() | 0);
 $4220 = (_bitshift64Shl(($4216|0),($4217|0),40)|0);
 $4221 = (getTempRet0() | 0);
 $4222 = $4218 | $4220;
 $4223 = $4219 | $4221;
 $4224 = (_i64Add(($4222|0),($4223|0),($4202|0),($4203|0))|0);
 $4225 = (getTempRet0() | 0);
 $4226 = (_bitshift64Shl(($4202|0),($4203|0),1)|0);
 $4227 = (getTempRet0() | 0);
 $4228 = $4226 & -2;
 $4229 = $4227 & 1;
 $4230 = (___muldi3(($4218|0),0,($4228|0),($4229|0))|0);
 $4231 = (getTempRet0() | 0);
 $4232 = (_i64Add(($4224|0),($4225|0),($4230|0),($4231|0))|0);
 $4233 = (getTempRet0() | 0);
 $4234 = $arrayidx8494;
 $4235 = $4234;
 HEAP32[$4235>>2] = $4232;
 $4236 = (($4234) + 4)|0;
 $4237 = $4236;
 HEAP32[$4237>>2] = $4233;
 $4238 = $4232 ^ $4205;
 $4239 = $4233 ^ $4204;
 $4240 = (_bitshift64Lshr(($4238|0),($4239|0),16)|0);
 $4241 = (getTempRet0() | 0);
 $4242 = (_bitshift64Shl(($4238|0),($4239|0),48)|0);
 $4243 = (getTempRet0() | 0);
 $4244 = $4240 | $4242;
 $4245 = $4241 | $4243;
 $4246 = $arrayidx8313;
 $4247 = $4246;
 HEAP32[$4247>>2] = $4244;
 $4248 = (($4246) + 4)|0;
 $4249 = $4248;
 HEAP32[$4249>>2] = $4245;
 $4250 = (_i64Add(($4244|0),($4245|0),($4214|0),($4215|0))|0);
 $4251 = (getTempRet0() | 0);
 $4252 = (_bitshift64Shl(($4214|0),($4215|0),1)|0);
 $4253 = (getTempRet0() | 0);
 $4254 = $4252 & -2;
 $4255 = $4253 & 1;
 $4256 = (___muldi3(($4240|0),0,($4254|0),($4255|0))|0);
 $4257 = (getTempRet0() | 0);
 $4258 = (_i64Add(($4250|0),($4251|0),($4256|0),($4257|0))|0);
 $4259 = (getTempRet0() | 0);
 $4260 = $arrayidx8959;
 $4261 = $4260;
 HEAP32[$4261>>2] = $4258;
 $4262 = (($4260) + 4)|0;
 $4263 = $4262;
 HEAP32[$4263>>2] = $4259;
 $4264 = $4258 ^ $4222;
 $4265 = $4259 ^ $4223;
 $4266 = (_bitshift64Lshr(($4264|0),($4265|0),63)|0);
 $4267 = (getTempRet0() | 0);
 $4268 = (_bitshift64Shl(($4264|0),($4265|0),1)|0);
 $4269 = (getTempRet0() | 0);
 $4270 = $4266 | $4268;
 $4271 = $4267 | $4269;
 $4272 = $arrayidx8705;
 $4273 = $4272;
 HEAP32[$4273>>2] = $4270;
 $4274 = (($4272) + 4)|0;
 $4275 = $4274;
 HEAP32[$4275>>2] = $4271;
 $4276 = (_i64Add(($4106|0),($4107|0),($3974|0),($3975|0))|0);
 $4277 = (getTempRet0() | 0);
 $4278 = (_bitshift64Shl(($3974|0),($3975|0),1)|0);
 $4279 = (getTempRet0() | 0);
 $4280 = $4278 & -2;
 $4281 = $4279 & 1;
 $4282 = (___muldi3(($4106|0),0,($4280|0),($4281|0))|0);
 $4283 = (getTempRet0() | 0);
 $4284 = (_i64Add(($4276|0),($4277|0),($4282|0),($4283|0))|0);
 $4285 = (getTempRet0() | 0);
 $4286 = $4284 ^ $3880;
 $4287 = $4285 ^ $3881;
 $4288 = (_i64Add(($4287|0),($4286|0),($3788|0),($3789|0))|0);
 $4289 = (getTempRet0() | 0);
 $4290 = (_bitshift64Shl(($3788|0),($3789|0),1)|0);
 $4291 = (getTempRet0() | 0);
 $4292 = $4290 & -2;
 $4293 = $4291 & 1;
 $4294 = (___muldi3(($4287|0),0,($4292|0),($4293|0))|0);
 $4295 = (getTempRet0() | 0);
 $4296 = (_i64Add(($4288|0),($4289|0),($4294|0),($4295|0))|0);
 $4297 = (getTempRet0() | 0);
 $4298 = $4296 ^ $4106;
 $4299 = $4297 ^ $4107;
 $4300 = (_bitshift64Lshr(($4298|0),($4299|0),24)|0);
 $4301 = (getTempRet0() | 0);
 $4302 = (_bitshift64Shl(($4298|0),($4299|0),40)|0);
 $4303 = (getTempRet0() | 0);
 $4304 = $4300 | $4302;
 $4305 = $4301 | $4303;
 $4306 = (_i64Add(($4304|0),($4305|0),($4284|0),($4285|0))|0);
 $4307 = (getTempRet0() | 0);
 $4308 = (_bitshift64Shl(($4284|0),($4285|0),1)|0);
 $4309 = (getTempRet0() | 0);
 $4310 = $4308 & -2;
 $4311 = $4309 & 1;
 $4312 = (___muldi3(($4300|0),0,($4310|0),($4311|0))|0);
 $4313 = (getTempRet0() | 0);
 $4314 = (_i64Add(($4306|0),($4307|0),($4312|0),($4313|0))|0);
 $4315 = (getTempRet0() | 0);
 $4316 = $arrayidx8701;
 $4317 = $4316;
 HEAP32[$4317>>2] = $4314;
 $4318 = (($4316) + 4)|0;
 $4319 = $4318;
 HEAP32[$4319>>2] = $4315;
 $4320 = $4314 ^ $4287;
 $4321 = $4315 ^ $4286;
 $4322 = (_bitshift64Lshr(($4320|0),($4321|0),16)|0);
 $4323 = (getTempRet0() | 0);
 $4324 = (_bitshift64Shl(($4320|0),($4321|0),48)|0);
 $4325 = (getTempRet0() | 0);
 $4326 = $4322 | $4324;
 $4327 = $4323 | $4325;
 $4328 = $arrayidx8520;
 $4329 = $4328;
 HEAP32[$4329>>2] = $4326;
 $4330 = (($4328) + 4)|0;
 $4331 = $4330;
 HEAP32[$4331>>2] = $4327;
 $4332 = (_i64Add(($4326|0),($4327|0),($4296|0),($4297|0))|0);
 $4333 = (getTempRet0() | 0);
 $4334 = (_bitshift64Shl(($4296|0),($4297|0),1)|0);
 $4335 = (getTempRet0() | 0);
 $4336 = $4334 & -2;
 $4337 = $4335 & 1;
 $4338 = (___muldi3(($4322|0),0,($4336|0),($4337|0))|0);
 $4339 = (getTempRet0() | 0);
 $4340 = (_i64Add(($4332|0),($4333|0),($4338|0),($4339|0))|0);
 $4341 = (getTempRet0() | 0);
 $4342 = $arrayidx8338;
 $4343 = $4342;
 HEAP32[$4343>>2] = $4340;
 $4344 = (($4342) + 4)|0;
 $4345 = $4344;
 HEAP32[$4345>>2] = $4341;
 $4346 = $4340 ^ $4304;
 $4347 = $4341 ^ $4305;
 $4348 = (_bitshift64Lshr(($4346|0),($4347|0),63)|0);
 $4349 = (getTempRet0() | 0);
 $4350 = (_bitshift64Shl(($4346|0),($4347|0),1)|0);
 $4351 = (getTempRet0() | 0);
 $4352 = $4348 | $4350;
 $4353 = $4349 | $4351;
 $4354 = $arrayidx8912;
 $4355 = $4354;
 HEAP32[$4355>>2] = $4352;
 $4356 = (($4354) + 4)|0;
 $4357 = $4356;
 HEAP32[$4357>>2] = $4353;
 $4358 = (_i64Add(($4076|0),($4077|0),($3800|0),($3801|0))|0);
 $4359 = (getTempRet0() | 0);
 $4360 = (_bitshift64Shl(($4076|0),($4077|0),1)|0);
 $4361 = (getTempRet0() | 0);
 $4362 = $4360 & -2;
 $4363 = $4361 & 1;
 $4364 = (___muldi3(($4362|0),($4363|0),($3800|0),0)|0);
 $4365 = (getTempRet0() | 0);
 $4366 = (_i64Add(($4358|0),($4359|0),($4364|0),($4365|0))|0);
 $4367 = (getTempRet0() | 0);
 $4368 = $4366 ^ $3986;
 $4369 = $4367 ^ $3987;
 $4370 = (_i64Add(($4369|0),($4368|0),($3894|0),($3895|0))|0);
 $4371 = (getTempRet0() | 0);
 $4372 = (_bitshift64Shl(($3894|0),($3895|0),1)|0);
 $4373 = (getTempRet0() | 0);
 $4374 = $4372 & -2;
 $4375 = $4373 & 1;
 $4376 = (___muldi3(($4369|0),0,($4374|0),($4375|0))|0);
 $4377 = (getTempRet0() | 0);
 $4378 = (_i64Add(($4370|0),($4371|0),($4376|0),($4377|0))|0);
 $4379 = (getTempRet0() | 0);
 $4380 = $4378 ^ $3800;
 $4381 = $4379 ^ $3801;
 $4382 = (_bitshift64Lshr(($4380|0),($4381|0),24)|0);
 $4383 = (getTempRet0() | 0);
 $4384 = (_bitshift64Shl(($4380|0),($4381|0),40)|0);
 $4385 = (getTempRet0() | 0);
 $4386 = $4382 | $4384;
 $4387 = $4383 | $4385;
 $4388 = (_i64Add(($4386|0),($4387|0),($4366|0),($4367|0))|0);
 $4389 = (getTempRet0() | 0);
 $4390 = (_bitshift64Shl(($4366|0),($4367|0),1)|0);
 $4391 = (getTempRet0() | 0);
 $4392 = $4390 & -2;
 $4393 = $4391 & 1;
 $4394 = (___muldi3(($4382|0),0,($4392|0),($4393|0))|0);
 $4395 = (getTempRet0() | 0);
 $4396 = (_i64Add(($4388|0),($4389|0),($4394|0),($4395|0))|0);
 $4397 = (getTempRet0() | 0);
 $4398 = $arrayidx8908;
 $4399 = $4398;
 HEAP32[$4399>>2] = $4396;
 $4400 = (($4398) + 4)|0;
 $4401 = $4400;
 HEAP32[$4401>>2] = $4397;
 $4402 = $4396 ^ $4369;
 $4403 = $4397 ^ $4368;
 $4404 = (_bitshift64Lshr(($4402|0),($4403|0),16)|0);
 $4405 = (getTempRet0() | 0);
 $4406 = (_bitshift64Shl(($4402|0),($4403|0),48)|0);
 $4407 = (getTempRet0() | 0);
 $4408 = $4404 | $4406;
 $4409 = $4405 | $4407;
 $4410 = $arrayidx8727;
 $4411 = $4410;
 HEAP32[$4411>>2] = $4408;
 $4412 = (($4410) + 4)|0;
 $4413 = $4412;
 HEAP32[$4413>>2] = $4409;
 $4414 = (_i64Add(($4408|0),($4409|0),($4378|0),($4379|0))|0);
 $4415 = (getTempRet0() | 0);
 $4416 = (_bitshift64Shl(($4378|0),($4379|0),1)|0);
 $4417 = (getTempRet0() | 0);
 $4418 = $4416 & -2;
 $4419 = $4417 & 1;
 $4420 = (___muldi3(($4404|0),0,($4418|0),($4419|0))|0);
 $4421 = (getTempRet0() | 0);
 $4422 = (_i64Add(($4414|0),($4415|0),($4420|0),($4421|0))|0);
 $4423 = (getTempRet0() | 0);
 $4424 = $arrayidx8545;
 $4425 = $4424;
 HEAP32[$4425>>2] = $4422;
 $4426 = (($4424) + 4)|0;
 $4427 = $4426;
 HEAP32[$4427>>2] = $4423;
 $4428 = $4422 ^ $4386;
 $4429 = $4423 ^ $4387;
 $4430 = (_bitshift64Lshr(($4428|0),($4429|0),63)|0);
 $4431 = (getTempRet0() | 0);
 $4432 = (_bitshift64Shl(($4428|0),($4429|0),1)|0);
 $4433 = (getTempRet0() | 0);
 $4434 = $4430 | $4432;
 $4435 = $4431 | $4433;
 $4436 = $arrayidx8291;
 $4437 = $4436;
 HEAP32[$4437>>2] = $4434;
 $4438 = (($4436) + 4)|0;
 $4439 = $4438;
 HEAP32[$4439>>2] = $4435;
 $add$ptr9945 = ((($blockR)) + 768|0);
 $4440 = $add$ptr9945;
 $4441 = $4440;
 $4442 = HEAP32[$4441>>2]|0;
 $4443 = (($4440) + 4)|0;
 $4444 = $4443;
 $4445 = HEAP32[$4444>>2]|0;
 $arrayidx9950 = ((($blockR)) + 800|0);
 $4446 = $arrayidx9950;
 $4447 = $4446;
 $4448 = HEAP32[$4447>>2]|0;
 $4449 = (($4446) + 4)|0;
 $4450 = $4449;
 $4451 = HEAP32[$4450>>2]|0;
 $4452 = (_i64Add(($4448|0),($4451|0),($4442|0),($4445|0))|0);
 $4453 = (getTempRet0() | 0);
 $4454 = (_bitshift64Shl(($4442|0),($4445|0),1)|0);
 $4455 = (getTempRet0() | 0);
 $4456 = $4454 & -2;
 $4457 = $4455 & 1;
 $4458 = (___muldi3(($4456|0),($4457|0),($4448|0),0)|0);
 $4459 = (getTempRet0() | 0);
 $4460 = (_i64Add(($4452|0),($4453|0),($4458|0),($4459|0))|0);
 $4461 = (getTempRet0() | 0);
 $arrayidx9972 = ((($blockR)) + 864|0);
 $4462 = $arrayidx9972;
 $4463 = $4462;
 $4464 = HEAP32[$4463>>2]|0;
 $4465 = (($4462) + 4)|0;
 $4466 = $4465;
 $4467 = HEAP32[$4466>>2]|0;
 $4468 = $4460 ^ $4464;
 $4469 = $4461 ^ $4467;
 $arrayidx9997 = ((($blockR)) + 832|0);
 $4470 = $arrayidx9997;
 $4471 = $4470;
 $4472 = HEAP32[$4471>>2]|0;
 $4473 = (($4470) + 4)|0;
 $4474 = $4473;
 $4475 = HEAP32[$4474>>2]|0;
 $4476 = (_i64Add(($4469|0),($4468|0),($4472|0),($4475|0))|0);
 $4477 = (getTempRet0() | 0);
 $4478 = (_bitshift64Shl(($4472|0),($4475|0),1)|0);
 $4479 = (getTempRet0() | 0);
 $4480 = $4478 & -2;
 $4481 = $4479 & 1;
 $4482 = (___muldi3(($4480|0),($4481|0),($4469|0),0)|0);
 $4483 = (getTempRet0() | 0);
 $4484 = (_i64Add(($4476|0),($4477|0),($4482|0),($4483|0))|0);
 $4485 = (getTempRet0() | 0);
 $4486 = $4484 ^ $4448;
 $4487 = $4485 ^ $4451;
 $4488 = (_bitshift64Lshr(($4486|0),($4487|0),24)|0);
 $4489 = (getTempRet0() | 0);
 $4490 = (_bitshift64Shl(($4486|0),($4487|0),40)|0);
 $4491 = (getTempRet0() | 0);
 $4492 = $4488 | $4490;
 $4493 = $4489 | $4491;
 $4494 = (_i64Add(($4492|0),($4493|0),($4460|0),($4461|0))|0);
 $4495 = (getTempRet0() | 0);
 $4496 = (_bitshift64Shl(($4460|0),($4461|0),1)|0);
 $4497 = (getTempRet0() | 0);
 $4498 = $4496 & -2;
 $4499 = $4497 & 1;
 $4500 = (___muldi3(($4488|0),0,($4498|0),($4499|0))|0);
 $4501 = (getTempRet0() | 0);
 $4502 = (_i64Add(($4494|0),($4495|0),($4500|0),($4501|0))|0);
 $4503 = (getTempRet0() | 0);
 $4504 = $add$ptr9945;
 $4505 = $4504;
 HEAP32[$4505>>2] = $4502;
 $4506 = (($4504) + 4)|0;
 $4507 = $4506;
 HEAP32[$4507>>2] = $4503;
 $4508 = $4502 ^ $4469;
 $4509 = $4503 ^ $4468;
 $4510 = (_bitshift64Lshr(($4508|0),($4509|0),16)|0);
 $4511 = (getTempRet0() | 0);
 $4512 = (_bitshift64Shl(($4508|0),($4509|0),48)|0);
 $4513 = (getTempRet0() | 0);
 $4514 = $4510 | $4512;
 $4515 = $4511 | $4513;
 $4516 = $arrayidx9972;
 $4517 = $4516;
 HEAP32[$4517>>2] = $4514;
 $4518 = (($4516) + 4)|0;
 $4519 = $4518;
 HEAP32[$4519>>2] = $4515;
 $4520 = (_i64Add(($4514|0),($4515|0),($4484|0),($4485|0))|0);
 $4521 = (getTempRet0() | 0);
 $4522 = (_bitshift64Shl(($4484|0),($4485|0),1)|0);
 $4523 = (getTempRet0() | 0);
 $4524 = $4522 & -2;
 $4525 = $4523 & 1;
 $4526 = (___muldi3(($4510|0),0,($4524|0),($4525|0))|0);
 $4527 = (getTempRet0() | 0);
 $4528 = (_i64Add(($4520|0),($4521|0),($4526|0),($4527|0))|0);
 $4529 = (getTempRet0() | 0);
 $4530 = $arrayidx9997;
 $4531 = $4530;
 HEAP32[$4531>>2] = $4528;
 $4532 = (($4530) + 4)|0;
 $4533 = $4532;
 HEAP32[$4533>>2] = $4529;
 $4534 = $4528 ^ $4492;
 $4535 = $4529 ^ $4493;
 $4536 = (_bitshift64Lshr(($4534|0),($4535|0),63)|0);
 $4537 = (getTempRet0() | 0);
 $4538 = (_bitshift64Shl(($4534|0),($4535|0),1)|0);
 $4539 = (getTempRet0() | 0);
 $4540 = $4536 | $4538;
 $4541 = $4537 | $4539;
 $4542 = $arrayidx9950;
 $4543 = $4542;
 HEAP32[$4543>>2] = $4540;
 $4544 = (($4542) + 4)|0;
 $4545 = $4544;
 HEAP32[$4545>>2] = $4541;
 $arrayidx10153 = ((($blockR)) + 776|0);
 $4546 = $arrayidx10153;
 $4547 = $4546;
 $4548 = HEAP32[$4547>>2]|0;
 $4549 = (($4546) + 4)|0;
 $4550 = $4549;
 $4551 = HEAP32[$4550>>2]|0;
 $arrayidx10157 = ((($blockR)) + 808|0);
 $4552 = $arrayidx10157;
 $4553 = $4552;
 $4554 = HEAP32[$4553>>2]|0;
 $4555 = (($4552) + 4)|0;
 $4556 = $4555;
 $4557 = HEAP32[$4556>>2]|0;
 $4558 = (_i64Add(($4554|0),($4557|0),($4548|0),($4551|0))|0);
 $4559 = (getTempRet0() | 0);
 $4560 = (_bitshift64Shl(($4548|0),($4551|0),1)|0);
 $4561 = (getTempRet0() | 0);
 $4562 = $4560 & -2;
 $4563 = $4561 & 1;
 $4564 = (___muldi3(($4562|0),($4563|0),($4554|0),0)|0);
 $4565 = (getTempRet0() | 0);
 $4566 = (_i64Add(($4558|0),($4559|0),($4564|0),($4565|0))|0);
 $4567 = (getTempRet0() | 0);
 $arrayidx10179 = ((($blockR)) + 872|0);
 $4568 = $arrayidx10179;
 $4569 = $4568;
 $4570 = HEAP32[$4569>>2]|0;
 $4571 = (($4568) + 4)|0;
 $4572 = $4571;
 $4573 = HEAP32[$4572>>2]|0;
 $4574 = $4566 ^ $4570;
 $4575 = $4567 ^ $4573;
 $arrayidx10204 = ((($blockR)) + 840|0);
 $4576 = $arrayidx10204;
 $4577 = $4576;
 $4578 = HEAP32[$4577>>2]|0;
 $4579 = (($4576) + 4)|0;
 $4580 = $4579;
 $4581 = HEAP32[$4580>>2]|0;
 $4582 = (_i64Add(($4575|0),($4574|0),($4578|0),($4581|0))|0);
 $4583 = (getTempRet0() | 0);
 $4584 = (_bitshift64Shl(($4578|0),($4581|0),1)|0);
 $4585 = (getTempRet0() | 0);
 $4586 = $4584 & -2;
 $4587 = $4585 & 1;
 $4588 = (___muldi3(($4586|0),($4587|0),($4575|0),0)|0);
 $4589 = (getTempRet0() | 0);
 $4590 = (_i64Add(($4582|0),($4583|0),($4588|0),($4589|0))|0);
 $4591 = (getTempRet0() | 0);
 $4592 = $4590 ^ $4554;
 $4593 = $4591 ^ $4557;
 $4594 = (_bitshift64Lshr(($4592|0),($4593|0),24)|0);
 $4595 = (getTempRet0() | 0);
 $4596 = (_bitshift64Shl(($4592|0),($4593|0),40)|0);
 $4597 = (getTempRet0() | 0);
 $4598 = $4594 | $4596;
 $4599 = $4595 | $4597;
 $4600 = (_i64Add(($4598|0),($4599|0),($4566|0),($4567|0))|0);
 $4601 = (getTempRet0() | 0);
 $4602 = (_bitshift64Shl(($4566|0),($4567|0),1)|0);
 $4603 = (getTempRet0() | 0);
 $4604 = $4602 & -2;
 $4605 = $4603 & 1;
 $4606 = (___muldi3(($4594|0),0,($4604|0),($4605|0))|0);
 $4607 = (getTempRet0() | 0);
 $4608 = (_i64Add(($4600|0),($4601|0),($4606|0),($4607|0))|0);
 $4609 = (getTempRet0() | 0);
 $4610 = $arrayidx10153;
 $4611 = $4610;
 HEAP32[$4611>>2] = $4608;
 $4612 = (($4610) + 4)|0;
 $4613 = $4612;
 HEAP32[$4613>>2] = $4609;
 $4614 = $4608 ^ $4575;
 $4615 = $4609 ^ $4574;
 $4616 = (_bitshift64Lshr(($4614|0),($4615|0),16)|0);
 $4617 = (getTempRet0() | 0);
 $4618 = (_bitshift64Shl(($4614|0),($4615|0),48)|0);
 $4619 = (getTempRet0() | 0);
 $4620 = $4616 | $4618;
 $4621 = $4617 | $4619;
 $4622 = $arrayidx10179;
 $4623 = $4622;
 HEAP32[$4623>>2] = $4620;
 $4624 = (($4622) + 4)|0;
 $4625 = $4624;
 HEAP32[$4625>>2] = $4621;
 $4626 = (_i64Add(($4620|0),($4621|0),($4590|0),($4591|0))|0);
 $4627 = (getTempRet0() | 0);
 $4628 = (_bitshift64Shl(($4590|0),($4591|0),1)|0);
 $4629 = (getTempRet0() | 0);
 $4630 = $4628 & -2;
 $4631 = $4629 & 1;
 $4632 = (___muldi3(($4616|0),0,($4630|0),($4631|0))|0);
 $4633 = (getTempRet0() | 0);
 $4634 = (_i64Add(($4626|0),($4627|0),($4632|0),($4633|0))|0);
 $4635 = (getTempRet0() | 0);
 $4636 = $arrayidx10204;
 $4637 = $4636;
 HEAP32[$4637>>2] = $4634;
 $4638 = (($4636) + 4)|0;
 $4639 = $4638;
 HEAP32[$4639>>2] = $4635;
 $4640 = $4634 ^ $4598;
 $4641 = $4635 ^ $4599;
 $4642 = (_bitshift64Lshr(($4640|0),($4641|0),63)|0);
 $4643 = (getTempRet0() | 0);
 $4644 = (_bitshift64Shl(($4640|0),($4641|0),1)|0);
 $4645 = (getTempRet0() | 0);
 $4646 = $4642 | $4644;
 $4647 = $4643 | $4645;
 $4648 = $arrayidx10157;
 $4649 = $4648;
 HEAP32[$4649>>2] = $4646;
 $4650 = (($4648) + 4)|0;
 $4651 = $4650;
 HEAP32[$4651>>2] = $4647;
 $arrayidx10360 = ((($blockR)) + 784|0);
 $4652 = $arrayidx10360;
 $4653 = $4652;
 $4654 = HEAP32[$4653>>2]|0;
 $4655 = (($4652) + 4)|0;
 $4656 = $4655;
 $4657 = HEAP32[$4656>>2]|0;
 $arrayidx10364 = ((($blockR)) + 816|0);
 $4658 = $arrayidx10364;
 $4659 = $4658;
 $4660 = HEAP32[$4659>>2]|0;
 $4661 = (($4658) + 4)|0;
 $4662 = $4661;
 $4663 = HEAP32[$4662>>2]|0;
 $4664 = (_i64Add(($4660|0),($4663|0),($4654|0),($4657|0))|0);
 $4665 = (getTempRet0() | 0);
 $4666 = (_bitshift64Shl(($4654|0),($4657|0),1)|0);
 $4667 = (getTempRet0() | 0);
 $4668 = $4666 & -2;
 $4669 = $4667 & 1;
 $4670 = (___muldi3(($4668|0),($4669|0),($4660|0),0)|0);
 $4671 = (getTempRet0() | 0);
 $4672 = (_i64Add(($4664|0),($4665|0),($4670|0),($4671|0))|0);
 $4673 = (getTempRet0() | 0);
 $arrayidx10386 = ((($blockR)) + 880|0);
 $4674 = $arrayidx10386;
 $4675 = $4674;
 $4676 = HEAP32[$4675>>2]|0;
 $4677 = (($4674) + 4)|0;
 $4678 = $4677;
 $4679 = HEAP32[$4678>>2]|0;
 $4680 = $4672 ^ $4676;
 $4681 = $4673 ^ $4679;
 $arrayidx10411 = ((($blockR)) + 848|0);
 $4682 = $arrayidx10411;
 $4683 = $4682;
 $4684 = HEAP32[$4683>>2]|0;
 $4685 = (($4682) + 4)|0;
 $4686 = $4685;
 $4687 = HEAP32[$4686>>2]|0;
 $4688 = (_i64Add(($4681|0),($4680|0),($4684|0),($4687|0))|0);
 $4689 = (getTempRet0() | 0);
 $4690 = (_bitshift64Shl(($4684|0),($4687|0),1)|0);
 $4691 = (getTempRet0() | 0);
 $4692 = $4690 & -2;
 $4693 = $4691 & 1;
 $4694 = (___muldi3(($4692|0),($4693|0),($4681|0),0)|0);
 $4695 = (getTempRet0() | 0);
 $4696 = (_i64Add(($4688|0),($4689|0),($4694|0),($4695|0))|0);
 $4697 = (getTempRet0() | 0);
 $4698 = $4696 ^ $4660;
 $4699 = $4697 ^ $4663;
 $4700 = (_bitshift64Lshr(($4698|0),($4699|0),24)|0);
 $4701 = (getTempRet0() | 0);
 $4702 = (_bitshift64Shl(($4698|0),($4699|0),40)|0);
 $4703 = (getTempRet0() | 0);
 $4704 = $4700 | $4702;
 $4705 = $4701 | $4703;
 $4706 = (_i64Add(($4704|0),($4705|0),($4672|0),($4673|0))|0);
 $4707 = (getTempRet0() | 0);
 $4708 = (_bitshift64Shl(($4672|0),($4673|0),1)|0);
 $4709 = (getTempRet0() | 0);
 $4710 = $4708 & -2;
 $4711 = $4709 & 1;
 $4712 = (___muldi3(($4700|0),0,($4710|0),($4711|0))|0);
 $4713 = (getTempRet0() | 0);
 $4714 = (_i64Add(($4706|0),($4707|0),($4712|0),($4713|0))|0);
 $4715 = (getTempRet0() | 0);
 $4716 = $arrayidx10360;
 $4717 = $4716;
 HEAP32[$4717>>2] = $4714;
 $4718 = (($4716) + 4)|0;
 $4719 = $4718;
 HEAP32[$4719>>2] = $4715;
 $4720 = $4714 ^ $4681;
 $4721 = $4715 ^ $4680;
 $4722 = (_bitshift64Lshr(($4720|0),($4721|0),16)|0);
 $4723 = (getTempRet0() | 0);
 $4724 = (_bitshift64Shl(($4720|0),($4721|0),48)|0);
 $4725 = (getTempRet0() | 0);
 $4726 = $4722 | $4724;
 $4727 = $4723 | $4725;
 $4728 = $arrayidx10386;
 $4729 = $4728;
 HEAP32[$4729>>2] = $4726;
 $4730 = (($4728) + 4)|0;
 $4731 = $4730;
 HEAP32[$4731>>2] = $4727;
 $4732 = (_i64Add(($4726|0),($4727|0),($4696|0),($4697|0))|0);
 $4733 = (getTempRet0() | 0);
 $4734 = (_bitshift64Shl(($4696|0),($4697|0),1)|0);
 $4735 = (getTempRet0() | 0);
 $4736 = $4734 & -2;
 $4737 = $4735 & 1;
 $4738 = (___muldi3(($4722|0),0,($4736|0),($4737|0))|0);
 $4739 = (getTempRet0() | 0);
 $4740 = (_i64Add(($4732|0),($4733|0),($4738|0),($4739|0))|0);
 $4741 = (getTempRet0() | 0);
 $4742 = $4740 ^ $4704;
 $4743 = $4741 ^ $4705;
 $4744 = (_bitshift64Lshr(($4742|0),($4743|0),63)|0);
 $4745 = (getTempRet0() | 0);
 $4746 = (_bitshift64Shl(($4742|0),($4743|0),1)|0);
 $4747 = (getTempRet0() | 0);
 $4748 = $4744 | $4746;
 $4749 = $4745 | $4747;
 $4750 = $arrayidx10364;
 $4751 = $4750;
 HEAP32[$4751>>2] = $4748;
 $4752 = (($4750) + 4)|0;
 $4753 = $4752;
 HEAP32[$4753>>2] = $4749;
 $arrayidx10567 = ((($blockR)) + 792|0);
 $4754 = $arrayidx10567;
 $4755 = $4754;
 $4756 = HEAP32[$4755>>2]|0;
 $4757 = (($4754) + 4)|0;
 $4758 = $4757;
 $4759 = HEAP32[$4758>>2]|0;
 $arrayidx10571 = ((($blockR)) + 824|0);
 $4760 = $arrayidx10571;
 $4761 = $4760;
 $4762 = HEAP32[$4761>>2]|0;
 $4763 = (($4760) + 4)|0;
 $4764 = $4763;
 $4765 = HEAP32[$4764>>2]|0;
 $4766 = (_i64Add(($4762|0),($4765|0),($4756|0),($4759|0))|0);
 $4767 = (getTempRet0() | 0);
 $4768 = (_bitshift64Shl(($4756|0),($4759|0),1)|0);
 $4769 = (getTempRet0() | 0);
 $4770 = $4768 & -2;
 $4771 = $4769 & 1;
 $4772 = (___muldi3(($4770|0),($4771|0),($4762|0),0)|0);
 $4773 = (getTempRet0() | 0);
 $4774 = (_i64Add(($4766|0),($4767|0),($4772|0),($4773|0))|0);
 $4775 = (getTempRet0() | 0);
 $arrayidx10593 = ((($blockR)) + 888|0);
 $4776 = $arrayidx10593;
 $4777 = $4776;
 $4778 = HEAP32[$4777>>2]|0;
 $4779 = (($4776) + 4)|0;
 $4780 = $4779;
 $4781 = HEAP32[$4780>>2]|0;
 $4782 = $4774 ^ $4778;
 $4783 = $4775 ^ $4781;
 $arrayidx10618 = ((($blockR)) + 856|0);
 $4784 = $arrayidx10618;
 $4785 = $4784;
 $4786 = HEAP32[$4785>>2]|0;
 $4787 = (($4784) + 4)|0;
 $4788 = $4787;
 $4789 = HEAP32[$4788>>2]|0;
 $4790 = (_i64Add(($4783|0),($4782|0),($4786|0),($4789|0))|0);
 $4791 = (getTempRet0() | 0);
 $4792 = (_bitshift64Shl(($4786|0),($4789|0),1)|0);
 $4793 = (getTempRet0() | 0);
 $4794 = $4792 & -2;
 $4795 = $4793 & 1;
 $4796 = (___muldi3(($4794|0),($4795|0),($4783|0),0)|0);
 $4797 = (getTempRet0() | 0);
 $4798 = (_i64Add(($4790|0),($4791|0),($4796|0),($4797|0))|0);
 $4799 = (getTempRet0() | 0);
 $4800 = $4798 ^ $4762;
 $4801 = $4799 ^ $4765;
 $4802 = (_bitshift64Lshr(($4800|0),($4801|0),24)|0);
 $4803 = (getTempRet0() | 0);
 $4804 = (_bitshift64Shl(($4800|0),($4801|0),40)|0);
 $4805 = (getTempRet0() | 0);
 $4806 = $4802 | $4804;
 $4807 = $4803 | $4805;
 $4808 = (_i64Add(($4806|0),($4807|0),($4774|0),($4775|0))|0);
 $4809 = (getTempRet0() | 0);
 $4810 = (_bitshift64Shl(($4774|0),($4775|0),1)|0);
 $4811 = (getTempRet0() | 0);
 $4812 = $4810 & -2;
 $4813 = $4811 & 1;
 $4814 = (___muldi3(($4802|0),0,($4812|0),($4813|0))|0);
 $4815 = (getTempRet0() | 0);
 $4816 = (_i64Add(($4808|0),($4809|0),($4814|0),($4815|0))|0);
 $4817 = (getTempRet0() | 0);
 $4818 = $arrayidx10567;
 $4819 = $4818;
 HEAP32[$4819>>2] = $4816;
 $4820 = (($4818) + 4)|0;
 $4821 = $4820;
 HEAP32[$4821>>2] = $4817;
 $4822 = $4816 ^ $4783;
 $4823 = $4817 ^ $4782;
 $4824 = (_bitshift64Lshr(($4822|0),($4823|0),16)|0);
 $4825 = (getTempRet0() | 0);
 $4826 = (_bitshift64Shl(($4822|0),($4823|0),48)|0);
 $4827 = (getTempRet0() | 0);
 $4828 = $4824 | $4826;
 $4829 = $4825 | $4827;
 $4830 = (_i64Add(($4828|0),($4829|0),($4798|0),($4799|0))|0);
 $4831 = (getTempRet0() | 0);
 $4832 = (_bitshift64Shl(($4798|0),($4799|0),1)|0);
 $4833 = (getTempRet0() | 0);
 $4834 = $4832 & -2;
 $4835 = $4833 & 1;
 $4836 = (___muldi3(($4824|0),0,($4834|0),($4835|0))|0);
 $4837 = (getTempRet0() | 0);
 $4838 = (_i64Add(($4830|0),($4831|0),($4836|0),($4837|0))|0);
 $4839 = (getTempRet0() | 0);
 $4840 = $4838 ^ $4806;
 $4841 = $4839 ^ $4807;
 $4842 = (_bitshift64Lshr(($4840|0),($4841|0),63)|0);
 $4843 = (getTempRet0() | 0);
 $4844 = (_bitshift64Shl(($4840|0),($4841|0),1)|0);
 $4845 = (getTempRet0() | 0);
 $4846 = $4842 | $4844;
 $4847 = $4843 | $4845;
 $4848 = $arrayidx10571;
 $4849 = $4848;
 HEAP32[$4849>>2] = $4846;
 $4850 = (($4848) + 4)|0;
 $4851 = $4850;
 HEAP32[$4851>>2] = $4847;
 $4852 = (_i64Add(($4646|0),($4647|0),($4502|0),($4503|0))|0);
 $4853 = (getTempRet0() | 0);
 $4854 = (_bitshift64Shl(($4502|0),($4503|0),1)|0);
 $4855 = (getTempRet0() | 0);
 $4856 = $4854 & -2;
 $4857 = $4855 & 1;
 $4858 = (___muldi3(($4646|0),0,($4856|0),($4857|0))|0);
 $4859 = (getTempRet0() | 0);
 $4860 = (_i64Add(($4852|0),($4853|0),($4858|0),($4859|0))|0);
 $4861 = (getTempRet0() | 0);
 $4862 = $4828 ^ $4860;
 $4863 = $4829 ^ $4861;
 $4864 = (_i64Add(($4863|0),($4862|0),($4740|0),($4741|0))|0);
 $4865 = (getTempRet0() | 0);
 $4866 = (_bitshift64Shl(($4740|0),($4741|0),1)|0);
 $4867 = (getTempRet0() | 0);
 $4868 = $4866 & -2;
 $4869 = $4867 & 1;
 $4870 = (___muldi3(($4863|0),0,($4868|0),($4869|0))|0);
 $4871 = (getTempRet0() | 0);
 $4872 = (_i64Add(($4864|0),($4865|0),($4870|0),($4871|0))|0);
 $4873 = (getTempRet0() | 0);
 $4874 = $4872 ^ $4646;
 $4875 = $4873 ^ $4647;
 $4876 = (_bitshift64Lshr(($4874|0),($4875|0),24)|0);
 $4877 = (getTempRet0() | 0);
 $4878 = (_bitshift64Shl(($4874|0),($4875|0),40)|0);
 $4879 = (getTempRet0() | 0);
 $4880 = $4876 | $4878;
 $4881 = $4877 | $4879;
 $4882 = (_i64Add(($4880|0),($4881|0),($4860|0),($4861|0))|0);
 $4883 = (getTempRet0() | 0);
 $4884 = (_bitshift64Shl(($4860|0),($4861|0),1)|0);
 $4885 = (getTempRet0() | 0);
 $4886 = $4884 & -2;
 $4887 = $4885 & 1;
 $4888 = (___muldi3(($4876|0),0,($4886|0),($4887|0))|0);
 $4889 = (getTempRet0() | 0);
 $4890 = (_i64Add(($4882|0),($4883|0),($4888|0),($4889|0))|0);
 $4891 = (getTempRet0() | 0);
 $4892 = $add$ptr9945;
 $4893 = $4892;
 HEAP32[$4893>>2] = $4890;
 $4894 = (($4892) + 4)|0;
 $4895 = $4894;
 HEAP32[$4895>>2] = $4891;
 $4896 = $4890 ^ $4863;
 $4897 = $4891 ^ $4862;
 $4898 = (_bitshift64Lshr(($4896|0),($4897|0),16)|0);
 $4899 = (getTempRet0() | 0);
 $4900 = (_bitshift64Shl(($4896|0),($4897|0),48)|0);
 $4901 = (getTempRet0() | 0);
 $4902 = $4898 | $4900;
 $4903 = $4899 | $4901;
 $4904 = $arrayidx10593;
 $4905 = $4904;
 HEAP32[$4905>>2] = $4902;
 $4906 = (($4904) + 4)|0;
 $4907 = $4906;
 HEAP32[$4907>>2] = $4903;
 $4908 = (_i64Add(($4902|0),($4903|0),($4872|0),($4873|0))|0);
 $4909 = (getTempRet0() | 0);
 $4910 = (_bitshift64Shl(($4872|0),($4873|0),1)|0);
 $4911 = (getTempRet0() | 0);
 $4912 = $4910 & -2;
 $4913 = $4911 & 1;
 $4914 = (___muldi3(($4898|0),0,($4912|0),($4913|0))|0);
 $4915 = (getTempRet0() | 0);
 $4916 = (_i64Add(($4908|0),($4909|0),($4914|0),($4915|0))|0);
 $4917 = (getTempRet0() | 0);
 $4918 = $arrayidx10411;
 $4919 = $4918;
 HEAP32[$4919>>2] = $4916;
 $4920 = (($4918) + 4)|0;
 $4921 = $4920;
 HEAP32[$4921>>2] = $4917;
 $4922 = $4916 ^ $4880;
 $4923 = $4917 ^ $4881;
 $4924 = (_bitshift64Lshr(($4922|0),($4923|0),63)|0);
 $4925 = (getTempRet0() | 0);
 $4926 = (_bitshift64Shl(($4922|0),($4923|0),1)|0);
 $4927 = (getTempRet0() | 0);
 $4928 = $4924 | $4926;
 $4929 = $4925 | $4927;
 $4930 = $arrayidx10157;
 $4931 = $4930;
 HEAP32[$4931>>2] = $4928;
 $4932 = (($4930) + 4)|0;
 $4933 = $4932;
 HEAP32[$4933>>2] = $4929;
 $4934 = (_i64Add(($4748|0),($4749|0),($4608|0),($4609|0))|0);
 $4935 = (getTempRet0() | 0);
 $4936 = (_bitshift64Shl(($4608|0),($4609|0),1)|0);
 $4937 = (getTempRet0() | 0);
 $4938 = $4936 & -2;
 $4939 = $4937 & 1;
 $4940 = (___muldi3(($4748|0),0,($4938|0),($4939|0))|0);
 $4941 = (getTempRet0() | 0);
 $4942 = (_i64Add(($4934|0),($4935|0),($4940|0),($4941|0))|0);
 $4943 = (getTempRet0() | 0);
 $4944 = $4942 ^ $4514;
 $4945 = $4943 ^ $4515;
 $4946 = (_i64Add(($4838|0),($4839|0),($4945|0),($4944|0))|0);
 $4947 = (getTempRet0() | 0);
 $4948 = (_bitshift64Shl(($4838|0),($4839|0),1)|0);
 $4949 = (getTempRet0() | 0);
 $4950 = $4948 & -2;
 $4951 = $4949 & 1;
 $4952 = (___muldi3(($4950|0),($4951|0),($4945|0),0)|0);
 $4953 = (getTempRet0() | 0);
 $4954 = (_i64Add(($4946|0),($4947|0),($4952|0),($4953|0))|0);
 $4955 = (getTempRet0() | 0);
 $4956 = $4954 ^ $4748;
 $4957 = $4955 ^ $4749;
 $4958 = (_bitshift64Lshr(($4956|0),($4957|0),24)|0);
 $4959 = (getTempRet0() | 0);
 $4960 = (_bitshift64Shl(($4956|0),($4957|0),40)|0);
 $4961 = (getTempRet0() | 0);
 $4962 = $4958 | $4960;
 $4963 = $4959 | $4961;
 $4964 = (_i64Add(($4962|0),($4963|0),($4942|0),($4943|0))|0);
 $4965 = (getTempRet0() | 0);
 $4966 = (_bitshift64Shl(($4942|0),($4943|0),1)|0);
 $4967 = (getTempRet0() | 0);
 $4968 = $4966 & -2;
 $4969 = $4967 & 1;
 $4970 = (___muldi3(($4958|0),0,($4968|0),($4969|0))|0);
 $4971 = (getTempRet0() | 0);
 $4972 = (_i64Add(($4964|0),($4965|0),($4970|0),($4971|0))|0);
 $4973 = (getTempRet0() | 0);
 $4974 = $arrayidx10153;
 $4975 = $4974;
 HEAP32[$4975>>2] = $4972;
 $4976 = (($4974) + 4)|0;
 $4977 = $4976;
 HEAP32[$4977>>2] = $4973;
 $4978 = $4972 ^ $4945;
 $4979 = $4973 ^ $4944;
 $4980 = (_bitshift64Lshr(($4978|0),($4979|0),16)|0);
 $4981 = (getTempRet0() | 0);
 $4982 = (_bitshift64Shl(($4978|0),($4979|0),48)|0);
 $4983 = (getTempRet0() | 0);
 $4984 = $4980 | $4982;
 $4985 = $4981 | $4983;
 $4986 = $arrayidx9972;
 $4987 = $4986;
 HEAP32[$4987>>2] = $4984;
 $4988 = (($4986) + 4)|0;
 $4989 = $4988;
 HEAP32[$4989>>2] = $4985;
 $4990 = (_i64Add(($4984|0),($4985|0),($4954|0),($4955|0))|0);
 $4991 = (getTempRet0() | 0);
 $4992 = (_bitshift64Shl(($4954|0),($4955|0),1)|0);
 $4993 = (getTempRet0() | 0);
 $4994 = $4992 & -2;
 $4995 = $4993 & 1;
 $4996 = (___muldi3(($4980|0),0,($4994|0),($4995|0))|0);
 $4997 = (getTempRet0() | 0);
 $4998 = (_i64Add(($4990|0),($4991|0),($4996|0),($4997|0))|0);
 $4999 = (getTempRet0() | 0);
 $5000 = $arrayidx10618;
 $5001 = $5000;
 HEAP32[$5001>>2] = $4998;
 $5002 = (($5000) + 4)|0;
 $5003 = $5002;
 HEAP32[$5003>>2] = $4999;
 $5004 = $4998 ^ $4962;
 $5005 = $4999 ^ $4963;
 $5006 = (_bitshift64Lshr(($5004|0),($5005|0),63)|0);
 $5007 = (getTempRet0() | 0);
 $5008 = (_bitshift64Shl(($5004|0),($5005|0),1)|0);
 $5009 = (getTempRet0() | 0);
 $5010 = $5006 | $5008;
 $5011 = $5007 | $5009;
 $5012 = $arrayidx10364;
 $5013 = $5012;
 HEAP32[$5013>>2] = $5010;
 $5014 = (($5012) + 4)|0;
 $5015 = $5014;
 HEAP32[$5015>>2] = $5011;
 $5016 = (_i64Add(($4846|0),($4847|0),($4714|0),($4715|0))|0);
 $5017 = (getTempRet0() | 0);
 $5018 = (_bitshift64Shl(($4714|0),($4715|0),1)|0);
 $5019 = (getTempRet0() | 0);
 $5020 = $5018 & -2;
 $5021 = $5019 & 1;
 $5022 = (___muldi3(($4846|0),0,($5020|0),($5021|0))|0);
 $5023 = (getTempRet0() | 0);
 $5024 = (_i64Add(($5016|0),($5017|0),($5022|0),($5023|0))|0);
 $5025 = (getTempRet0() | 0);
 $5026 = $5024 ^ $4620;
 $5027 = $5025 ^ $4621;
 $5028 = (_i64Add(($5027|0),($5026|0),($4528|0),($4529|0))|0);
 $5029 = (getTempRet0() | 0);
 $5030 = (_bitshift64Shl(($4528|0),($4529|0),1)|0);
 $5031 = (getTempRet0() | 0);
 $5032 = $5030 & -2;
 $5033 = $5031 & 1;
 $5034 = (___muldi3(($5027|0),0,($5032|0),($5033|0))|0);
 $5035 = (getTempRet0() | 0);
 $5036 = (_i64Add(($5028|0),($5029|0),($5034|0),($5035|0))|0);
 $5037 = (getTempRet0() | 0);
 $5038 = $5036 ^ $4846;
 $5039 = $5037 ^ $4847;
 $5040 = (_bitshift64Lshr(($5038|0),($5039|0),24)|0);
 $5041 = (getTempRet0() | 0);
 $5042 = (_bitshift64Shl(($5038|0),($5039|0),40)|0);
 $5043 = (getTempRet0() | 0);
 $5044 = $5040 | $5042;
 $5045 = $5041 | $5043;
 $5046 = (_i64Add(($5044|0),($5045|0),($5024|0),($5025|0))|0);
 $5047 = (getTempRet0() | 0);
 $5048 = (_bitshift64Shl(($5024|0),($5025|0),1)|0);
 $5049 = (getTempRet0() | 0);
 $5050 = $5048 & -2;
 $5051 = $5049 & 1;
 $5052 = (___muldi3(($5040|0),0,($5050|0),($5051|0))|0);
 $5053 = (getTempRet0() | 0);
 $5054 = (_i64Add(($5046|0),($5047|0),($5052|0),($5053|0))|0);
 $5055 = (getTempRet0() | 0);
 $5056 = $arrayidx10360;
 $5057 = $5056;
 HEAP32[$5057>>2] = $5054;
 $5058 = (($5056) + 4)|0;
 $5059 = $5058;
 HEAP32[$5059>>2] = $5055;
 $5060 = $5054 ^ $5027;
 $5061 = $5055 ^ $5026;
 $5062 = (_bitshift64Lshr(($5060|0),($5061|0),16)|0);
 $5063 = (getTempRet0() | 0);
 $5064 = (_bitshift64Shl(($5060|0),($5061|0),48)|0);
 $5065 = (getTempRet0() | 0);
 $5066 = $5062 | $5064;
 $5067 = $5063 | $5065;
 $5068 = $arrayidx10179;
 $5069 = $5068;
 HEAP32[$5069>>2] = $5066;
 $5070 = (($5068) + 4)|0;
 $5071 = $5070;
 HEAP32[$5071>>2] = $5067;
 $5072 = (_i64Add(($5066|0),($5067|0),($5036|0),($5037|0))|0);
 $5073 = (getTempRet0() | 0);
 $5074 = (_bitshift64Shl(($5036|0),($5037|0),1)|0);
 $5075 = (getTempRet0() | 0);
 $5076 = $5074 & -2;
 $5077 = $5075 & 1;
 $5078 = (___muldi3(($5062|0),0,($5076|0),($5077|0))|0);
 $5079 = (getTempRet0() | 0);
 $5080 = (_i64Add(($5072|0),($5073|0),($5078|0),($5079|0))|0);
 $5081 = (getTempRet0() | 0);
 $5082 = $arrayidx9997;
 $5083 = $5082;
 HEAP32[$5083>>2] = $5080;
 $5084 = (($5082) + 4)|0;
 $5085 = $5084;
 HEAP32[$5085>>2] = $5081;
 $5086 = $5080 ^ $5044;
 $5087 = $5081 ^ $5045;
 $5088 = (_bitshift64Lshr(($5086|0),($5087|0),63)|0);
 $5089 = (getTempRet0() | 0);
 $5090 = (_bitshift64Shl(($5086|0),($5087|0),1)|0);
 $5091 = (getTempRet0() | 0);
 $5092 = $5088 | $5090;
 $5093 = $5089 | $5091;
 $5094 = $arrayidx10571;
 $5095 = $5094;
 HEAP32[$5095>>2] = $5092;
 $5096 = (($5094) + 4)|0;
 $5097 = $5096;
 HEAP32[$5097>>2] = $5093;
 $5098 = (_i64Add(($4816|0),($4817|0),($4540|0),($4541|0))|0);
 $5099 = (getTempRet0() | 0);
 $5100 = (_bitshift64Shl(($4816|0),($4817|0),1)|0);
 $5101 = (getTempRet0() | 0);
 $5102 = $5100 & -2;
 $5103 = $5101 & 1;
 $5104 = (___muldi3(($5102|0),($5103|0),($4540|0),0)|0);
 $5105 = (getTempRet0() | 0);
 $5106 = (_i64Add(($5098|0),($5099|0),($5104|0),($5105|0))|0);
 $5107 = (getTempRet0() | 0);
 $5108 = $5106 ^ $4726;
 $5109 = $5107 ^ $4727;
 $5110 = (_i64Add(($5109|0),($5108|0),($4634|0),($4635|0))|0);
 $5111 = (getTempRet0() | 0);
 $5112 = (_bitshift64Shl(($4634|0),($4635|0),1)|0);
 $5113 = (getTempRet0() | 0);
 $5114 = $5112 & -2;
 $5115 = $5113 & 1;
 $5116 = (___muldi3(($5109|0),0,($5114|0),($5115|0))|0);
 $5117 = (getTempRet0() | 0);
 $5118 = (_i64Add(($5110|0),($5111|0),($5116|0),($5117|0))|0);
 $5119 = (getTempRet0() | 0);
 $5120 = $5118 ^ $4540;
 $5121 = $5119 ^ $4541;
 $5122 = (_bitshift64Lshr(($5120|0),($5121|0),24)|0);
 $5123 = (getTempRet0() | 0);
 $5124 = (_bitshift64Shl(($5120|0),($5121|0),40)|0);
 $5125 = (getTempRet0() | 0);
 $5126 = $5122 | $5124;
 $5127 = $5123 | $5125;
 $5128 = (_i64Add(($5126|0),($5127|0),($5106|0),($5107|0))|0);
 $5129 = (getTempRet0() | 0);
 $5130 = (_bitshift64Shl(($5106|0),($5107|0),1)|0);
 $5131 = (getTempRet0() | 0);
 $5132 = $5130 & -2;
 $5133 = $5131 & 1;
 $5134 = (___muldi3(($5122|0),0,($5132|0),($5133|0))|0);
 $5135 = (getTempRet0() | 0);
 $5136 = (_i64Add(($5128|0),($5129|0),($5134|0),($5135|0))|0);
 $5137 = (getTempRet0() | 0);
 $5138 = $arrayidx10567;
 $5139 = $5138;
 HEAP32[$5139>>2] = $5136;
 $5140 = (($5138) + 4)|0;
 $5141 = $5140;
 HEAP32[$5141>>2] = $5137;
 $5142 = $5136 ^ $5109;
 $5143 = $5137 ^ $5108;
 $5144 = (_bitshift64Lshr(($5142|0),($5143|0),16)|0);
 $5145 = (getTempRet0() | 0);
 $5146 = (_bitshift64Shl(($5142|0),($5143|0),48)|0);
 $5147 = (getTempRet0() | 0);
 $5148 = $5144 | $5146;
 $5149 = $5145 | $5147;
 $5150 = $arrayidx10386;
 $5151 = $5150;
 HEAP32[$5151>>2] = $5148;
 $5152 = (($5150) + 4)|0;
 $5153 = $5152;
 HEAP32[$5153>>2] = $5149;
 $5154 = (_i64Add(($5148|0),($5149|0),($5118|0),($5119|0))|0);
 $5155 = (getTempRet0() | 0);
 $5156 = (_bitshift64Shl(($5118|0),($5119|0),1)|0);
 $5157 = (getTempRet0() | 0);
 $5158 = $5156 & -2;
 $5159 = $5157 & 1;
 $5160 = (___muldi3(($5144|0),0,($5158|0),($5159|0))|0);
 $5161 = (getTempRet0() | 0);
 $5162 = (_i64Add(($5154|0),($5155|0),($5160|0),($5161|0))|0);
 $5163 = (getTempRet0() | 0);
 $5164 = $arrayidx10204;
 $5165 = $5164;
 HEAP32[$5165>>2] = $5162;
 $5166 = (($5164) + 4)|0;
 $5167 = $5166;
 HEAP32[$5167>>2] = $5163;
 $5168 = $5162 ^ $5126;
 $5169 = $5163 ^ $5127;
 $5170 = (_bitshift64Lshr(($5168|0),($5169|0),63)|0);
 $5171 = (getTempRet0() | 0);
 $5172 = (_bitshift64Shl(($5168|0),($5169|0),1)|0);
 $5173 = (getTempRet0() | 0);
 $5174 = $5170 | $5172;
 $5175 = $5171 | $5173;
 $5176 = $arrayidx9950;
 $5177 = $5176;
 HEAP32[$5177>>2] = $5174;
 $5178 = (($5176) + 4)|0;
 $5179 = $5178;
 HEAP32[$5179>>2] = $5175;
 $add$ptr11604 = ((($blockR)) + 896|0);
 $5180 = $add$ptr11604;
 $5181 = $5180;
 $5182 = HEAP32[$5181>>2]|0;
 $5183 = (($5180) + 4)|0;
 $5184 = $5183;
 $5185 = HEAP32[$5184>>2]|0;
 $arrayidx11609 = ((($blockR)) + 928|0);
 $5186 = $arrayidx11609;
 $5187 = $5186;
 $5188 = HEAP32[$5187>>2]|0;
 $5189 = (($5186) + 4)|0;
 $5190 = $5189;
 $5191 = HEAP32[$5190>>2]|0;
 $5192 = (_i64Add(($5188|0),($5191|0),($5182|0),($5185|0))|0);
 $5193 = (getTempRet0() | 0);
 $5194 = (_bitshift64Shl(($5182|0),($5185|0),1)|0);
 $5195 = (getTempRet0() | 0);
 $5196 = $5194 & -2;
 $5197 = $5195 & 1;
 $5198 = (___muldi3(($5196|0),($5197|0),($5188|0),0)|0);
 $5199 = (getTempRet0() | 0);
 $5200 = (_i64Add(($5192|0),($5193|0),($5198|0),($5199|0))|0);
 $5201 = (getTempRet0() | 0);
 $arrayidx11631 = ((($blockR)) + 992|0);
 $5202 = $arrayidx11631;
 $5203 = $5202;
 $5204 = HEAP32[$5203>>2]|0;
 $5205 = (($5202) + 4)|0;
 $5206 = $5205;
 $5207 = HEAP32[$5206>>2]|0;
 $5208 = $5200 ^ $5204;
 $5209 = $5201 ^ $5207;
 $arrayidx11656 = ((($blockR)) + 960|0);
 $5210 = $arrayidx11656;
 $5211 = $5210;
 $5212 = HEAP32[$5211>>2]|0;
 $5213 = (($5210) + 4)|0;
 $5214 = $5213;
 $5215 = HEAP32[$5214>>2]|0;
 $5216 = (_i64Add(($5209|0),($5208|0),($5212|0),($5215|0))|0);
 $5217 = (getTempRet0() | 0);
 $5218 = (_bitshift64Shl(($5212|0),($5215|0),1)|0);
 $5219 = (getTempRet0() | 0);
 $5220 = $5218 & -2;
 $5221 = $5219 & 1;
 $5222 = (___muldi3(($5220|0),($5221|0),($5209|0),0)|0);
 $5223 = (getTempRet0() | 0);
 $5224 = (_i64Add(($5216|0),($5217|0),($5222|0),($5223|0))|0);
 $5225 = (getTempRet0() | 0);
 $5226 = $5224 ^ $5188;
 $5227 = $5225 ^ $5191;
 $5228 = (_bitshift64Lshr(($5226|0),($5227|0),24)|0);
 $5229 = (getTempRet0() | 0);
 $5230 = (_bitshift64Shl(($5226|0),($5227|0),40)|0);
 $5231 = (getTempRet0() | 0);
 $5232 = $5228 | $5230;
 $5233 = $5229 | $5231;
 $5234 = (_i64Add(($5232|0),($5233|0),($5200|0),($5201|0))|0);
 $5235 = (getTempRet0() | 0);
 $5236 = (_bitshift64Shl(($5200|0),($5201|0),1)|0);
 $5237 = (getTempRet0() | 0);
 $5238 = $5236 & -2;
 $5239 = $5237 & 1;
 $5240 = (___muldi3(($5228|0),0,($5238|0),($5239|0))|0);
 $5241 = (getTempRet0() | 0);
 $5242 = (_i64Add(($5234|0),($5235|0),($5240|0),($5241|0))|0);
 $5243 = (getTempRet0() | 0);
 $5244 = $add$ptr11604;
 $5245 = $5244;
 HEAP32[$5245>>2] = $5242;
 $5246 = (($5244) + 4)|0;
 $5247 = $5246;
 HEAP32[$5247>>2] = $5243;
 $5248 = $5242 ^ $5209;
 $5249 = $5243 ^ $5208;
 $5250 = (_bitshift64Lshr(($5248|0),($5249|0),16)|0);
 $5251 = (getTempRet0() | 0);
 $5252 = (_bitshift64Shl(($5248|0),($5249|0),48)|0);
 $5253 = (getTempRet0() | 0);
 $5254 = $5250 | $5252;
 $5255 = $5251 | $5253;
 $5256 = $arrayidx11631;
 $5257 = $5256;
 HEAP32[$5257>>2] = $5254;
 $5258 = (($5256) + 4)|0;
 $5259 = $5258;
 HEAP32[$5259>>2] = $5255;
 $5260 = (_i64Add(($5254|0),($5255|0),($5224|0),($5225|0))|0);
 $5261 = (getTempRet0() | 0);
 $5262 = (_bitshift64Shl(($5224|0),($5225|0),1)|0);
 $5263 = (getTempRet0() | 0);
 $5264 = $5262 & -2;
 $5265 = $5263 & 1;
 $5266 = (___muldi3(($5250|0),0,($5264|0),($5265|0))|0);
 $5267 = (getTempRet0() | 0);
 $5268 = (_i64Add(($5260|0),($5261|0),($5266|0),($5267|0))|0);
 $5269 = (getTempRet0() | 0);
 $5270 = $arrayidx11656;
 $5271 = $5270;
 HEAP32[$5271>>2] = $5268;
 $5272 = (($5270) + 4)|0;
 $5273 = $5272;
 HEAP32[$5273>>2] = $5269;
 $5274 = $5268 ^ $5232;
 $5275 = $5269 ^ $5233;
 $5276 = (_bitshift64Lshr(($5274|0),($5275|0),63)|0);
 $5277 = (getTempRet0() | 0);
 $5278 = (_bitshift64Shl(($5274|0),($5275|0),1)|0);
 $5279 = (getTempRet0() | 0);
 $5280 = $5276 | $5278;
 $5281 = $5277 | $5279;
 $5282 = $arrayidx11609;
 $5283 = $5282;
 HEAP32[$5283>>2] = $5280;
 $5284 = (($5282) + 4)|0;
 $5285 = $5284;
 HEAP32[$5285>>2] = $5281;
 $arrayidx11812 = ((($blockR)) + 904|0);
 $5286 = $arrayidx11812;
 $5287 = $5286;
 $5288 = HEAP32[$5287>>2]|0;
 $5289 = (($5286) + 4)|0;
 $5290 = $5289;
 $5291 = HEAP32[$5290>>2]|0;
 $arrayidx11816 = ((($blockR)) + 936|0);
 $5292 = $arrayidx11816;
 $5293 = $5292;
 $5294 = HEAP32[$5293>>2]|0;
 $5295 = (($5292) + 4)|0;
 $5296 = $5295;
 $5297 = HEAP32[$5296>>2]|0;
 $5298 = (_i64Add(($5294|0),($5297|0),($5288|0),($5291|0))|0);
 $5299 = (getTempRet0() | 0);
 $5300 = (_bitshift64Shl(($5288|0),($5291|0),1)|0);
 $5301 = (getTempRet0() | 0);
 $5302 = $5300 & -2;
 $5303 = $5301 & 1;
 $5304 = (___muldi3(($5302|0),($5303|0),($5294|0),0)|0);
 $5305 = (getTempRet0() | 0);
 $5306 = (_i64Add(($5298|0),($5299|0),($5304|0),($5305|0))|0);
 $5307 = (getTempRet0() | 0);
 $arrayidx11838 = ((($blockR)) + 1000|0);
 $5308 = $arrayidx11838;
 $5309 = $5308;
 $5310 = HEAP32[$5309>>2]|0;
 $5311 = (($5308) + 4)|0;
 $5312 = $5311;
 $5313 = HEAP32[$5312>>2]|0;
 $5314 = $5306 ^ $5310;
 $5315 = $5307 ^ $5313;
 $arrayidx11863 = ((($blockR)) + 968|0);
 $5316 = $arrayidx11863;
 $5317 = $5316;
 $5318 = HEAP32[$5317>>2]|0;
 $5319 = (($5316) + 4)|0;
 $5320 = $5319;
 $5321 = HEAP32[$5320>>2]|0;
 $5322 = (_i64Add(($5315|0),($5314|0),($5318|0),($5321|0))|0);
 $5323 = (getTempRet0() | 0);
 $5324 = (_bitshift64Shl(($5318|0),($5321|0),1)|0);
 $5325 = (getTempRet0() | 0);
 $5326 = $5324 & -2;
 $5327 = $5325 & 1;
 $5328 = (___muldi3(($5326|0),($5327|0),($5315|0),0)|0);
 $5329 = (getTempRet0() | 0);
 $5330 = (_i64Add(($5322|0),($5323|0),($5328|0),($5329|0))|0);
 $5331 = (getTempRet0() | 0);
 $5332 = $5330 ^ $5294;
 $5333 = $5331 ^ $5297;
 $5334 = (_bitshift64Lshr(($5332|0),($5333|0),24)|0);
 $5335 = (getTempRet0() | 0);
 $5336 = (_bitshift64Shl(($5332|0),($5333|0),40)|0);
 $5337 = (getTempRet0() | 0);
 $5338 = $5334 | $5336;
 $5339 = $5335 | $5337;
 $5340 = (_i64Add(($5338|0),($5339|0),($5306|0),($5307|0))|0);
 $5341 = (getTempRet0() | 0);
 $5342 = (_bitshift64Shl(($5306|0),($5307|0),1)|0);
 $5343 = (getTempRet0() | 0);
 $5344 = $5342 & -2;
 $5345 = $5343 & 1;
 $5346 = (___muldi3(($5334|0),0,($5344|0),($5345|0))|0);
 $5347 = (getTempRet0() | 0);
 $5348 = (_i64Add(($5340|0),($5341|0),($5346|0),($5347|0))|0);
 $5349 = (getTempRet0() | 0);
 $5350 = $arrayidx11812;
 $5351 = $5350;
 HEAP32[$5351>>2] = $5348;
 $5352 = (($5350) + 4)|0;
 $5353 = $5352;
 HEAP32[$5353>>2] = $5349;
 $5354 = $5348 ^ $5315;
 $5355 = $5349 ^ $5314;
 $5356 = (_bitshift64Lshr(($5354|0),($5355|0),16)|0);
 $5357 = (getTempRet0() | 0);
 $5358 = (_bitshift64Shl(($5354|0),($5355|0),48)|0);
 $5359 = (getTempRet0() | 0);
 $5360 = $5356 | $5358;
 $5361 = $5357 | $5359;
 $5362 = $arrayidx11838;
 $5363 = $5362;
 HEAP32[$5363>>2] = $5360;
 $5364 = (($5362) + 4)|0;
 $5365 = $5364;
 HEAP32[$5365>>2] = $5361;
 $5366 = (_i64Add(($5360|0),($5361|0),($5330|0),($5331|0))|0);
 $5367 = (getTempRet0() | 0);
 $5368 = (_bitshift64Shl(($5330|0),($5331|0),1)|0);
 $5369 = (getTempRet0() | 0);
 $5370 = $5368 & -2;
 $5371 = $5369 & 1;
 $5372 = (___muldi3(($5356|0),0,($5370|0),($5371|0))|0);
 $5373 = (getTempRet0() | 0);
 $5374 = (_i64Add(($5366|0),($5367|0),($5372|0),($5373|0))|0);
 $5375 = (getTempRet0() | 0);
 $5376 = $arrayidx11863;
 $5377 = $5376;
 HEAP32[$5377>>2] = $5374;
 $5378 = (($5376) + 4)|0;
 $5379 = $5378;
 HEAP32[$5379>>2] = $5375;
 $5380 = $5374 ^ $5338;
 $5381 = $5375 ^ $5339;
 $5382 = (_bitshift64Lshr(($5380|0),($5381|0),63)|0);
 $5383 = (getTempRet0() | 0);
 $5384 = (_bitshift64Shl(($5380|0),($5381|0),1)|0);
 $5385 = (getTempRet0() | 0);
 $5386 = $5382 | $5384;
 $5387 = $5383 | $5385;
 $5388 = $arrayidx11816;
 $5389 = $5388;
 HEAP32[$5389>>2] = $5386;
 $5390 = (($5388) + 4)|0;
 $5391 = $5390;
 HEAP32[$5391>>2] = $5387;
 $arrayidx12019 = ((($blockR)) + 912|0);
 $5392 = $arrayidx12019;
 $5393 = $5392;
 $5394 = HEAP32[$5393>>2]|0;
 $5395 = (($5392) + 4)|0;
 $5396 = $5395;
 $5397 = HEAP32[$5396>>2]|0;
 $arrayidx12023 = ((($blockR)) + 944|0);
 $5398 = $arrayidx12023;
 $5399 = $5398;
 $5400 = HEAP32[$5399>>2]|0;
 $5401 = (($5398) + 4)|0;
 $5402 = $5401;
 $5403 = HEAP32[$5402>>2]|0;
 $5404 = (_i64Add(($5400|0),($5403|0),($5394|0),($5397|0))|0);
 $5405 = (getTempRet0() | 0);
 $5406 = (_bitshift64Shl(($5394|0),($5397|0),1)|0);
 $5407 = (getTempRet0() | 0);
 $5408 = $5406 & -2;
 $5409 = $5407 & 1;
 $5410 = (___muldi3(($5408|0),($5409|0),($5400|0),0)|0);
 $5411 = (getTempRet0() | 0);
 $5412 = (_i64Add(($5404|0),($5405|0),($5410|0),($5411|0))|0);
 $5413 = (getTempRet0() | 0);
 $arrayidx12045 = ((($blockR)) + 1008|0);
 $5414 = $arrayidx12045;
 $5415 = $5414;
 $5416 = HEAP32[$5415>>2]|0;
 $5417 = (($5414) + 4)|0;
 $5418 = $5417;
 $5419 = HEAP32[$5418>>2]|0;
 $5420 = $5412 ^ $5416;
 $5421 = $5413 ^ $5419;
 $arrayidx12070 = ((($blockR)) + 976|0);
 $5422 = $arrayidx12070;
 $5423 = $5422;
 $5424 = HEAP32[$5423>>2]|0;
 $5425 = (($5422) + 4)|0;
 $5426 = $5425;
 $5427 = HEAP32[$5426>>2]|0;
 $5428 = (_i64Add(($5421|0),($5420|0),($5424|0),($5427|0))|0);
 $5429 = (getTempRet0() | 0);
 $5430 = (_bitshift64Shl(($5424|0),($5427|0),1)|0);
 $5431 = (getTempRet0() | 0);
 $5432 = $5430 & -2;
 $5433 = $5431 & 1;
 $5434 = (___muldi3(($5432|0),($5433|0),($5421|0),0)|0);
 $5435 = (getTempRet0() | 0);
 $5436 = (_i64Add(($5428|0),($5429|0),($5434|0),($5435|0))|0);
 $5437 = (getTempRet0() | 0);
 $5438 = $5436 ^ $5400;
 $5439 = $5437 ^ $5403;
 $5440 = (_bitshift64Lshr(($5438|0),($5439|0),24)|0);
 $5441 = (getTempRet0() | 0);
 $5442 = (_bitshift64Shl(($5438|0),($5439|0),40)|0);
 $5443 = (getTempRet0() | 0);
 $5444 = $5440 | $5442;
 $5445 = $5441 | $5443;
 $5446 = (_i64Add(($5444|0),($5445|0),($5412|0),($5413|0))|0);
 $5447 = (getTempRet0() | 0);
 $5448 = (_bitshift64Shl(($5412|0),($5413|0),1)|0);
 $5449 = (getTempRet0() | 0);
 $5450 = $5448 & -2;
 $5451 = $5449 & 1;
 $5452 = (___muldi3(($5440|0),0,($5450|0),($5451|0))|0);
 $5453 = (getTempRet0() | 0);
 $5454 = (_i64Add(($5446|0),($5447|0),($5452|0),($5453|0))|0);
 $5455 = (getTempRet0() | 0);
 $5456 = $arrayidx12019;
 $5457 = $5456;
 HEAP32[$5457>>2] = $5454;
 $5458 = (($5456) + 4)|0;
 $5459 = $5458;
 HEAP32[$5459>>2] = $5455;
 $5460 = $5454 ^ $5421;
 $5461 = $5455 ^ $5420;
 $5462 = (_bitshift64Lshr(($5460|0),($5461|0),16)|0);
 $5463 = (getTempRet0() | 0);
 $5464 = (_bitshift64Shl(($5460|0),($5461|0),48)|0);
 $5465 = (getTempRet0() | 0);
 $5466 = $5462 | $5464;
 $5467 = $5463 | $5465;
 $5468 = $arrayidx12045;
 $5469 = $5468;
 HEAP32[$5469>>2] = $5466;
 $5470 = (($5468) + 4)|0;
 $5471 = $5470;
 HEAP32[$5471>>2] = $5467;
 $5472 = (_i64Add(($5466|0),($5467|0),($5436|0),($5437|0))|0);
 $5473 = (getTempRet0() | 0);
 $5474 = (_bitshift64Shl(($5436|0),($5437|0),1)|0);
 $5475 = (getTempRet0() | 0);
 $5476 = $5474 & -2;
 $5477 = $5475 & 1;
 $5478 = (___muldi3(($5462|0),0,($5476|0),($5477|0))|0);
 $5479 = (getTempRet0() | 0);
 $5480 = (_i64Add(($5472|0),($5473|0),($5478|0),($5479|0))|0);
 $5481 = (getTempRet0() | 0);
 $5482 = $5480 ^ $5444;
 $5483 = $5481 ^ $5445;
 $5484 = (_bitshift64Lshr(($5482|0),($5483|0),63)|0);
 $5485 = (getTempRet0() | 0);
 $5486 = (_bitshift64Shl(($5482|0),($5483|0),1)|0);
 $5487 = (getTempRet0() | 0);
 $5488 = $5484 | $5486;
 $5489 = $5485 | $5487;
 $5490 = $arrayidx12023;
 $5491 = $5490;
 HEAP32[$5491>>2] = $5488;
 $5492 = (($5490) + 4)|0;
 $5493 = $5492;
 HEAP32[$5493>>2] = $5489;
 $arrayidx12226 = ((($blockR)) + 920|0);
 $5494 = $arrayidx12226;
 $5495 = $5494;
 $5496 = HEAP32[$5495>>2]|0;
 $5497 = (($5494) + 4)|0;
 $5498 = $5497;
 $5499 = HEAP32[$5498>>2]|0;
 $arrayidx12230 = ((($blockR)) + 952|0);
 $5500 = $arrayidx12230;
 $5501 = $5500;
 $5502 = HEAP32[$5501>>2]|0;
 $5503 = (($5500) + 4)|0;
 $5504 = $5503;
 $5505 = HEAP32[$5504>>2]|0;
 $5506 = (_i64Add(($5502|0),($5505|0),($5496|0),($5499|0))|0);
 $5507 = (getTempRet0() | 0);
 $5508 = (_bitshift64Shl(($5496|0),($5499|0),1)|0);
 $5509 = (getTempRet0() | 0);
 $5510 = $5508 & -2;
 $5511 = $5509 & 1;
 $5512 = (___muldi3(($5510|0),($5511|0),($5502|0),0)|0);
 $5513 = (getTempRet0() | 0);
 $5514 = (_i64Add(($5506|0),($5507|0),($5512|0),($5513|0))|0);
 $5515 = (getTempRet0() | 0);
 $arrayidx12252 = ((($blockR)) + 1016|0);
 $5516 = $arrayidx12252;
 $5517 = $5516;
 $5518 = HEAP32[$5517>>2]|0;
 $5519 = (($5516) + 4)|0;
 $5520 = $5519;
 $5521 = HEAP32[$5520>>2]|0;
 $5522 = $5514 ^ $5518;
 $5523 = $5515 ^ $5521;
 $arrayidx12277 = ((($blockR)) + 984|0);
 $5524 = $arrayidx12277;
 $5525 = $5524;
 $5526 = HEAP32[$5525>>2]|0;
 $5527 = (($5524) + 4)|0;
 $5528 = $5527;
 $5529 = HEAP32[$5528>>2]|0;
 $5530 = (_i64Add(($5523|0),($5522|0),($5526|0),($5529|0))|0);
 $5531 = (getTempRet0() | 0);
 $5532 = (_bitshift64Shl(($5526|0),($5529|0),1)|0);
 $5533 = (getTempRet0() | 0);
 $5534 = $5532 & -2;
 $5535 = $5533 & 1;
 $5536 = (___muldi3(($5534|0),($5535|0),($5523|0),0)|0);
 $5537 = (getTempRet0() | 0);
 $5538 = (_i64Add(($5530|0),($5531|0),($5536|0),($5537|0))|0);
 $5539 = (getTempRet0() | 0);
 $5540 = $5538 ^ $5502;
 $5541 = $5539 ^ $5505;
 $5542 = (_bitshift64Lshr(($5540|0),($5541|0),24)|0);
 $5543 = (getTempRet0() | 0);
 $5544 = (_bitshift64Shl(($5540|0),($5541|0),40)|0);
 $5545 = (getTempRet0() | 0);
 $5546 = $5542 | $5544;
 $5547 = $5543 | $5545;
 $5548 = (_i64Add(($5546|0),($5547|0),($5514|0),($5515|0))|0);
 $5549 = (getTempRet0() | 0);
 $5550 = (_bitshift64Shl(($5514|0),($5515|0),1)|0);
 $5551 = (getTempRet0() | 0);
 $5552 = $5550 & -2;
 $5553 = $5551 & 1;
 $5554 = (___muldi3(($5542|0),0,($5552|0),($5553|0))|0);
 $5555 = (getTempRet0() | 0);
 $5556 = (_i64Add(($5548|0),($5549|0),($5554|0),($5555|0))|0);
 $5557 = (getTempRet0() | 0);
 $5558 = $arrayidx12226;
 $5559 = $5558;
 HEAP32[$5559>>2] = $5556;
 $5560 = (($5558) + 4)|0;
 $5561 = $5560;
 HEAP32[$5561>>2] = $5557;
 $5562 = $5556 ^ $5523;
 $5563 = $5557 ^ $5522;
 $5564 = (_bitshift64Lshr(($5562|0),($5563|0),16)|0);
 $5565 = (getTempRet0() | 0);
 $5566 = (_bitshift64Shl(($5562|0),($5563|0),48)|0);
 $5567 = (getTempRet0() | 0);
 $5568 = $5564 | $5566;
 $5569 = $5565 | $5567;
 $5570 = (_i64Add(($5568|0),($5569|0),($5538|0),($5539|0))|0);
 $5571 = (getTempRet0() | 0);
 $5572 = (_bitshift64Shl(($5538|0),($5539|0),1)|0);
 $5573 = (getTempRet0() | 0);
 $5574 = $5572 & -2;
 $5575 = $5573 & 1;
 $5576 = (___muldi3(($5564|0),0,($5574|0),($5575|0))|0);
 $5577 = (getTempRet0() | 0);
 $5578 = (_i64Add(($5570|0),($5571|0),($5576|0),($5577|0))|0);
 $5579 = (getTempRet0() | 0);
 $5580 = $5578 ^ $5546;
 $5581 = $5579 ^ $5547;
 $5582 = (_bitshift64Lshr(($5580|0),($5581|0),63)|0);
 $5583 = (getTempRet0() | 0);
 $5584 = (_bitshift64Shl(($5580|0),($5581|0),1)|0);
 $5585 = (getTempRet0() | 0);
 $5586 = $5582 | $5584;
 $5587 = $5583 | $5585;
 $5588 = $arrayidx12230;
 $5589 = $5588;
 HEAP32[$5589>>2] = $5586;
 $5590 = (($5588) + 4)|0;
 $5591 = $5590;
 HEAP32[$5591>>2] = $5587;
 $5592 = (_i64Add(($5386|0),($5387|0),($5242|0),($5243|0))|0);
 $5593 = (getTempRet0() | 0);
 $5594 = (_bitshift64Shl(($5242|0),($5243|0),1)|0);
 $5595 = (getTempRet0() | 0);
 $5596 = $5594 & -2;
 $5597 = $5595 & 1;
 $5598 = (___muldi3(($5386|0),0,($5596|0),($5597|0))|0);
 $5599 = (getTempRet0() | 0);
 $5600 = (_i64Add(($5592|0),($5593|0),($5598|0),($5599|0))|0);
 $5601 = (getTempRet0() | 0);
 $5602 = $5568 ^ $5600;
 $5603 = $5569 ^ $5601;
 $5604 = (_i64Add(($5603|0),($5602|0),($5480|0),($5481|0))|0);
 $5605 = (getTempRet0() | 0);
 $5606 = (_bitshift64Shl(($5480|0),($5481|0),1)|0);
 $5607 = (getTempRet0() | 0);
 $5608 = $5606 & -2;
 $5609 = $5607 & 1;
 $5610 = (___muldi3(($5603|0),0,($5608|0),($5609|0))|0);
 $5611 = (getTempRet0() | 0);
 $5612 = (_i64Add(($5604|0),($5605|0),($5610|0),($5611|0))|0);
 $5613 = (getTempRet0() | 0);
 $5614 = $5612 ^ $5386;
 $5615 = $5613 ^ $5387;
 $5616 = (_bitshift64Lshr(($5614|0),($5615|0),24)|0);
 $5617 = (getTempRet0() | 0);
 $5618 = (_bitshift64Shl(($5614|0),($5615|0),40)|0);
 $5619 = (getTempRet0() | 0);
 $5620 = $5616 | $5618;
 $5621 = $5617 | $5619;
 $5622 = (_i64Add(($5620|0),($5621|0),($5600|0),($5601|0))|0);
 $5623 = (getTempRet0() | 0);
 $5624 = (_bitshift64Shl(($5600|0),($5601|0),1)|0);
 $5625 = (getTempRet0() | 0);
 $5626 = $5624 & -2;
 $5627 = $5625 & 1;
 $5628 = (___muldi3(($5616|0),0,($5626|0),($5627|0))|0);
 $5629 = (getTempRet0() | 0);
 $5630 = (_i64Add(($5622|0),($5623|0),($5628|0),($5629|0))|0);
 $5631 = (getTempRet0() | 0);
 $5632 = $add$ptr11604;
 $5633 = $5632;
 HEAP32[$5633>>2] = $5630;
 $5634 = (($5632) + 4)|0;
 $5635 = $5634;
 HEAP32[$5635>>2] = $5631;
 $5636 = $5630 ^ $5603;
 $5637 = $5631 ^ $5602;
 $5638 = (_bitshift64Lshr(($5636|0),($5637|0),16)|0);
 $5639 = (getTempRet0() | 0);
 $5640 = (_bitshift64Shl(($5636|0),($5637|0),48)|0);
 $5641 = (getTempRet0() | 0);
 $5642 = $5638 | $5640;
 $5643 = $5639 | $5641;
 $5644 = $arrayidx12252;
 $5645 = $5644;
 HEAP32[$5645>>2] = $5642;
 $5646 = (($5644) + 4)|0;
 $5647 = $5646;
 HEAP32[$5647>>2] = $5643;
 $5648 = (_i64Add(($5642|0),($5643|0),($5612|0),($5613|0))|0);
 $5649 = (getTempRet0() | 0);
 $5650 = (_bitshift64Shl(($5612|0),($5613|0),1)|0);
 $5651 = (getTempRet0() | 0);
 $5652 = $5650 & -2;
 $5653 = $5651 & 1;
 $5654 = (___muldi3(($5638|0),0,($5652|0),($5653|0))|0);
 $5655 = (getTempRet0() | 0);
 $5656 = (_i64Add(($5648|0),($5649|0),($5654|0),($5655|0))|0);
 $5657 = (getTempRet0() | 0);
 $5658 = $arrayidx12070;
 $5659 = $5658;
 HEAP32[$5659>>2] = $5656;
 $5660 = (($5658) + 4)|0;
 $5661 = $5660;
 HEAP32[$5661>>2] = $5657;
 $5662 = $5656 ^ $5620;
 $5663 = $5657 ^ $5621;
 $5664 = (_bitshift64Lshr(($5662|0),($5663|0),63)|0);
 $5665 = (getTempRet0() | 0);
 $5666 = (_bitshift64Shl(($5662|0),($5663|0),1)|0);
 $5667 = (getTempRet0() | 0);
 $5668 = $5664 | $5666;
 $5669 = $5665 | $5667;
 $5670 = $arrayidx11816;
 $5671 = $5670;
 HEAP32[$5671>>2] = $5668;
 $5672 = (($5670) + 4)|0;
 $5673 = $5672;
 HEAP32[$5673>>2] = $5669;
 $5674 = (_i64Add(($5488|0),($5489|0),($5348|0),($5349|0))|0);
 $5675 = (getTempRet0() | 0);
 $5676 = (_bitshift64Shl(($5348|0),($5349|0),1)|0);
 $5677 = (getTempRet0() | 0);
 $5678 = $5676 & -2;
 $5679 = $5677 & 1;
 $5680 = (___muldi3(($5488|0),0,($5678|0),($5679|0))|0);
 $5681 = (getTempRet0() | 0);
 $5682 = (_i64Add(($5674|0),($5675|0),($5680|0),($5681|0))|0);
 $5683 = (getTempRet0() | 0);
 $5684 = $5682 ^ $5254;
 $5685 = $5683 ^ $5255;
 $5686 = (_i64Add(($5578|0),($5579|0),($5685|0),($5684|0))|0);
 $5687 = (getTempRet0() | 0);
 $5688 = (_bitshift64Shl(($5578|0),($5579|0),1)|0);
 $5689 = (getTempRet0() | 0);
 $5690 = $5688 & -2;
 $5691 = $5689 & 1;
 $5692 = (___muldi3(($5690|0),($5691|0),($5685|0),0)|0);
 $5693 = (getTempRet0() | 0);
 $5694 = (_i64Add(($5686|0),($5687|0),($5692|0),($5693|0))|0);
 $5695 = (getTempRet0() | 0);
 $5696 = $5694 ^ $5488;
 $5697 = $5695 ^ $5489;
 $5698 = (_bitshift64Lshr(($5696|0),($5697|0),24)|0);
 $5699 = (getTempRet0() | 0);
 $5700 = (_bitshift64Shl(($5696|0),($5697|0),40)|0);
 $5701 = (getTempRet0() | 0);
 $5702 = $5698 | $5700;
 $5703 = $5699 | $5701;
 $5704 = (_i64Add(($5702|0),($5703|0),($5682|0),($5683|0))|0);
 $5705 = (getTempRet0() | 0);
 $5706 = (_bitshift64Shl(($5682|0),($5683|0),1)|0);
 $5707 = (getTempRet0() | 0);
 $5708 = $5706 & -2;
 $5709 = $5707 & 1;
 $5710 = (___muldi3(($5698|0),0,($5708|0),($5709|0))|0);
 $5711 = (getTempRet0() | 0);
 $5712 = (_i64Add(($5704|0),($5705|0),($5710|0),($5711|0))|0);
 $5713 = (getTempRet0() | 0);
 $5714 = $arrayidx11812;
 $5715 = $5714;
 HEAP32[$5715>>2] = $5712;
 $5716 = (($5714) + 4)|0;
 $5717 = $5716;
 HEAP32[$5717>>2] = $5713;
 $5718 = $5712 ^ $5685;
 $5719 = $5713 ^ $5684;
 $5720 = (_bitshift64Lshr(($5718|0),($5719|0),16)|0);
 $5721 = (getTempRet0() | 0);
 $5722 = (_bitshift64Shl(($5718|0),($5719|0),48)|0);
 $5723 = (getTempRet0() | 0);
 $5724 = $5720 | $5722;
 $5725 = $5721 | $5723;
 $5726 = $arrayidx11631;
 $5727 = $5726;
 HEAP32[$5727>>2] = $5724;
 $5728 = (($5726) + 4)|0;
 $5729 = $5728;
 HEAP32[$5729>>2] = $5725;
 $5730 = (_i64Add(($5724|0),($5725|0),($5694|0),($5695|0))|0);
 $5731 = (getTempRet0() | 0);
 $5732 = (_bitshift64Shl(($5694|0),($5695|0),1)|0);
 $5733 = (getTempRet0() | 0);
 $5734 = $5732 & -2;
 $5735 = $5733 & 1;
 $5736 = (___muldi3(($5720|0),0,($5734|0),($5735|0))|0);
 $5737 = (getTempRet0() | 0);
 $5738 = (_i64Add(($5730|0),($5731|0),($5736|0),($5737|0))|0);
 $5739 = (getTempRet0() | 0);
 $5740 = $arrayidx12277;
 $5741 = $5740;
 HEAP32[$5741>>2] = $5738;
 $5742 = (($5740) + 4)|0;
 $5743 = $5742;
 HEAP32[$5743>>2] = $5739;
 $5744 = $5738 ^ $5702;
 $5745 = $5739 ^ $5703;
 $5746 = (_bitshift64Lshr(($5744|0),($5745|0),63)|0);
 $5747 = (getTempRet0() | 0);
 $5748 = (_bitshift64Shl(($5744|0),($5745|0),1)|0);
 $5749 = (getTempRet0() | 0);
 $5750 = $5746 | $5748;
 $5751 = $5747 | $5749;
 $5752 = $arrayidx12023;
 $5753 = $5752;
 HEAP32[$5753>>2] = $5750;
 $5754 = (($5752) + 4)|0;
 $5755 = $5754;
 HEAP32[$5755>>2] = $5751;
 $5756 = (_i64Add(($5586|0),($5587|0),($5454|0),($5455|0))|0);
 $5757 = (getTempRet0() | 0);
 $5758 = (_bitshift64Shl(($5454|0),($5455|0),1)|0);
 $5759 = (getTempRet0() | 0);
 $5760 = $5758 & -2;
 $5761 = $5759 & 1;
 $5762 = (___muldi3(($5586|0),0,($5760|0),($5761|0))|0);
 $5763 = (getTempRet0() | 0);
 $5764 = (_i64Add(($5756|0),($5757|0),($5762|0),($5763|0))|0);
 $5765 = (getTempRet0() | 0);
 $5766 = $5764 ^ $5360;
 $5767 = $5765 ^ $5361;
 $5768 = (_i64Add(($5767|0),($5766|0),($5268|0),($5269|0))|0);
 $5769 = (getTempRet0() | 0);
 $5770 = (_bitshift64Shl(($5268|0),($5269|0),1)|0);
 $5771 = (getTempRet0() | 0);
 $5772 = $5770 & -2;
 $5773 = $5771 & 1;
 $5774 = (___muldi3(($5767|0),0,($5772|0),($5773|0))|0);
 $5775 = (getTempRet0() | 0);
 $5776 = (_i64Add(($5768|0),($5769|0),($5774|0),($5775|0))|0);
 $5777 = (getTempRet0() | 0);
 $5778 = $5776 ^ $5586;
 $5779 = $5777 ^ $5587;
 $5780 = (_bitshift64Lshr(($5778|0),($5779|0),24)|0);
 $5781 = (getTempRet0() | 0);
 $5782 = (_bitshift64Shl(($5778|0),($5779|0),40)|0);
 $5783 = (getTempRet0() | 0);
 $5784 = $5780 | $5782;
 $5785 = $5781 | $5783;
 $5786 = (_i64Add(($5784|0),($5785|0),($5764|0),($5765|0))|0);
 $5787 = (getTempRet0() | 0);
 $5788 = (_bitshift64Shl(($5764|0),($5765|0),1)|0);
 $5789 = (getTempRet0() | 0);
 $5790 = $5788 & -2;
 $5791 = $5789 & 1;
 $5792 = (___muldi3(($5780|0),0,($5790|0),($5791|0))|0);
 $5793 = (getTempRet0() | 0);
 $5794 = (_i64Add(($5786|0),($5787|0),($5792|0),($5793|0))|0);
 $5795 = (getTempRet0() | 0);
 $5796 = $arrayidx12019;
 $5797 = $5796;
 HEAP32[$5797>>2] = $5794;
 $5798 = (($5796) + 4)|0;
 $5799 = $5798;
 HEAP32[$5799>>2] = $5795;
 $5800 = $5794 ^ $5767;
 $5801 = $5795 ^ $5766;
 $5802 = (_bitshift64Lshr(($5800|0),($5801|0),16)|0);
 $5803 = (getTempRet0() | 0);
 $5804 = (_bitshift64Shl(($5800|0),($5801|0),48)|0);
 $5805 = (getTempRet0() | 0);
 $5806 = $5802 | $5804;
 $5807 = $5803 | $5805;
 $5808 = $arrayidx11838;
 $5809 = $5808;
 HEAP32[$5809>>2] = $5806;
 $5810 = (($5808) + 4)|0;
 $5811 = $5810;
 HEAP32[$5811>>2] = $5807;
 $5812 = (_i64Add(($5806|0),($5807|0),($5776|0),($5777|0))|0);
 $5813 = (getTempRet0() | 0);
 $5814 = (_bitshift64Shl(($5776|0),($5777|0),1)|0);
 $5815 = (getTempRet0() | 0);
 $5816 = $5814 & -2;
 $5817 = $5815 & 1;
 $5818 = (___muldi3(($5802|0),0,($5816|0),($5817|0))|0);
 $5819 = (getTempRet0() | 0);
 $5820 = (_i64Add(($5812|0),($5813|0),($5818|0),($5819|0))|0);
 $5821 = (getTempRet0() | 0);
 $5822 = $arrayidx11656;
 $5823 = $5822;
 HEAP32[$5823>>2] = $5820;
 $5824 = (($5822) + 4)|0;
 $5825 = $5824;
 HEAP32[$5825>>2] = $5821;
 $5826 = $5820 ^ $5784;
 $5827 = $5821 ^ $5785;
 $5828 = (_bitshift64Lshr(($5826|0),($5827|0),63)|0);
 $5829 = (getTempRet0() | 0);
 $5830 = (_bitshift64Shl(($5826|0),($5827|0),1)|0);
 $5831 = (getTempRet0() | 0);
 $5832 = $5828 | $5830;
 $5833 = $5829 | $5831;
 $5834 = $arrayidx12230;
 $5835 = $5834;
 HEAP32[$5835>>2] = $5832;
 $5836 = (($5834) + 4)|0;
 $5837 = $5836;
 HEAP32[$5837>>2] = $5833;
 $5838 = (_i64Add(($5556|0),($5557|0),($5280|0),($5281|0))|0);
 $5839 = (getTempRet0() | 0);
 $5840 = (_bitshift64Shl(($5556|0),($5557|0),1)|0);
 $5841 = (getTempRet0() | 0);
 $5842 = $5840 & -2;
 $5843 = $5841 & 1;
 $5844 = (___muldi3(($5842|0),($5843|0),($5280|0),0)|0);
 $5845 = (getTempRet0() | 0);
 $5846 = (_i64Add(($5838|0),($5839|0),($5844|0),($5845|0))|0);
 $5847 = (getTempRet0() | 0);
 $5848 = $5846 ^ $5466;
 $5849 = $5847 ^ $5467;
 $5850 = (_i64Add(($5849|0),($5848|0),($5374|0),($5375|0))|0);
 $5851 = (getTempRet0() | 0);
 $5852 = (_bitshift64Shl(($5374|0),($5375|0),1)|0);
 $5853 = (getTempRet0() | 0);
 $5854 = $5852 & -2;
 $5855 = $5853 & 1;
 $5856 = (___muldi3(($5849|0),0,($5854|0),($5855|0))|0);
 $5857 = (getTempRet0() | 0);
 $5858 = (_i64Add(($5850|0),($5851|0),($5856|0),($5857|0))|0);
 $5859 = (getTempRet0() | 0);
 $5860 = $5858 ^ $5280;
 $5861 = $5859 ^ $5281;
 $5862 = (_bitshift64Lshr(($5860|0),($5861|0),24)|0);
 $5863 = (getTempRet0() | 0);
 $5864 = (_bitshift64Shl(($5860|0),($5861|0),40)|0);
 $5865 = (getTempRet0() | 0);
 $5866 = $5862 | $5864;
 $5867 = $5863 | $5865;
 $5868 = (_i64Add(($5866|0),($5867|0),($5846|0),($5847|0))|0);
 $5869 = (getTempRet0() | 0);
 $5870 = (_bitshift64Shl(($5846|0),($5847|0),1)|0);
 $5871 = (getTempRet0() | 0);
 $5872 = $5870 & -2;
 $5873 = $5871 & 1;
 $5874 = (___muldi3(($5862|0),0,($5872|0),($5873|0))|0);
 $5875 = (getTempRet0() | 0);
 $5876 = (_i64Add(($5868|0),($5869|0),($5874|0),($5875|0))|0);
 $5877 = (getTempRet0() | 0);
 $5878 = $arrayidx12226;
 $5879 = $5878;
 HEAP32[$5879>>2] = $5876;
 $5880 = (($5878) + 4)|0;
 $5881 = $5880;
 HEAP32[$5881>>2] = $5877;
 $5882 = $5876 ^ $5849;
 $5883 = $5877 ^ $5848;
 $5884 = (_bitshift64Lshr(($5882|0),($5883|0),16)|0);
 $5885 = (getTempRet0() | 0);
 $5886 = (_bitshift64Shl(($5882|0),($5883|0),48)|0);
 $5887 = (getTempRet0() | 0);
 $5888 = $5884 | $5886;
 $5889 = $5885 | $5887;
 $5890 = $arrayidx12045;
 $5891 = $5890;
 HEAP32[$5891>>2] = $5888;
 $5892 = (($5890) + 4)|0;
 $5893 = $5892;
 HEAP32[$5893>>2] = $5889;
 $5894 = (_i64Add(($5888|0),($5889|0),($5858|0),($5859|0))|0);
 $5895 = (getTempRet0() | 0);
 $5896 = (_bitshift64Shl(($5858|0),($5859|0),1)|0);
 $5897 = (getTempRet0() | 0);
 $5898 = $5896 & -2;
 $5899 = $5897 & 1;
 $5900 = (___muldi3(($5884|0),0,($5898|0),($5899|0))|0);
 $5901 = (getTempRet0() | 0);
 $5902 = (_i64Add(($5894|0),($5895|0),($5900|0),($5901|0))|0);
 $5903 = (getTempRet0() | 0);
 $5904 = $arrayidx11863;
 $5905 = $5904;
 HEAP32[$5905>>2] = $5902;
 $5906 = (($5904) + 4)|0;
 $5907 = $5906;
 HEAP32[$5907>>2] = $5903;
 $5908 = $5902 ^ $5866;
 $5909 = $5903 ^ $5867;
 $5910 = (_bitshift64Lshr(($5908|0),($5909|0),63)|0);
 $5911 = (getTempRet0() | 0);
 $5912 = (_bitshift64Shl(($5908|0),($5909|0),1)|0);
 $5913 = (getTempRet0() | 0);
 $5914 = $5910 | $5912;
 $5915 = $5911 | $5913;
 $5916 = $arrayidx11609;
 $5917 = $5916;
 HEAP32[$5917>>2] = $5914;
 $5918 = (($5916) + 4)|0;
 $5919 = $5918;
 HEAP32[$5919>>2] = $5915;
 $5920 = (_i64Add(($1930|0),($1931|0),($450|0),($451|0))|0);
 $5921 = (getTempRet0() | 0);
 $5922 = (_bitshift64Shl(($450|0),($451|0),1)|0);
 $5923 = (getTempRet0() | 0);
 $5924 = $5922 & -2;
 $5925 = $5923 & 1;
 $5926 = (___muldi3(($1930|0),0,($5924|0),($5925|0))|0);
 $5927 = (getTempRet0() | 0);
 $5928 = (_i64Add(($5920|0),($5921|0),($5926|0),($5927|0))|0);
 $5929 = (getTempRet0() | 0);
 $5930 = $4890 ^ $5928;
 $5931 = $4891 ^ $5929;
 $5932 = (_i64Add(($5931|0),($5930|0),($3410|0),($3411|0))|0);
 $5933 = (getTempRet0() | 0);
 $5934 = (_bitshift64Shl(($3410|0),($3411|0),1)|0);
 $5935 = (getTempRet0() | 0);
 $5936 = $5934 & -2;
 $5937 = $5935 & 1;
 $5938 = (___muldi3(($5931|0),0,($5936|0),($5937|0))|0);
 $5939 = (getTempRet0() | 0);
 $5940 = (_i64Add(($5932|0),($5933|0),($5938|0),($5939|0))|0);
 $5941 = (getTempRet0() | 0);
 $5942 = $5940 ^ $1930;
 $5943 = $5941 ^ $1931;
 $5944 = (_bitshift64Lshr(($5942|0),($5943|0),24)|0);
 $5945 = (getTempRet0() | 0);
 $5946 = (_bitshift64Shl(($5942|0),($5943|0),40)|0);
 $5947 = (getTempRet0() | 0);
 $5948 = $5944 | $5946;
 $5949 = $5945 | $5947;
 $5950 = (_i64Add(($5948|0),($5949|0),($5928|0),($5929|0))|0);
 $5951 = (getTempRet0() | 0);
 $5952 = (_bitshift64Shl(($5928|0),($5929|0),1)|0);
 $5953 = (getTempRet0() | 0);
 $5954 = $5952 & -2;
 $5955 = $5953 & 1;
 $5956 = (___muldi3(($5944|0),0,($5954|0),($5955|0))|0);
 $5957 = (getTempRet0() | 0);
 $5958 = (_i64Add(($5950|0),($5951|0),($5956|0),($5957|0))|0);
 $5959 = (getTempRet0() | 0);
 $5960 = $blockR;
 $5961 = $5960;
 HEAP32[$5961>>2] = $5958;
 $5962 = (($5960) + 4)|0;
 $5963 = $5962;
 HEAP32[$5963>>2] = $5959;
 $5964 = $5958 ^ $5931;
 $5965 = $5959 ^ $5930;
 $5966 = (_bitshift64Lshr(($5964|0),($5965|0),16)|0);
 $5967 = (getTempRet0() | 0);
 $5968 = (_bitshift64Shl(($5964|0),($5965|0),48)|0);
 $5969 = (getTempRet0() | 0);
 $5970 = $5966 | $5968;
 $5971 = $5967 | $5969;
 $5972 = $add$ptr9945;
 $5973 = $5972;
 HEAP32[$5973>>2] = $5970;
 $5974 = (($5972) + 4)|0;
 $5975 = $5974;
 HEAP32[$5975>>2] = $5971;
 $5976 = (_i64Add(($5970|0),($5971|0),($5940|0),($5941|0))|0);
 $5977 = (getTempRet0() | 0);
 $5978 = (_bitshift64Shl(($5940|0),($5941|0),1)|0);
 $5979 = (getTempRet0() | 0);
 $5980 = $5978 & -2;
 $5981 = $5979 & 1;
 $5982 = (___muldi3(($5966|0),0,($5980|0),($5981|0))|0);
 $5983 = (getTempRet0() | 0);
 $5984 = (_i64Add(($5976|0),($5977|0),($5982|0),($5983|0))|0);
 $5985 = (getTempRet0() | 0);
 $5986 = $add$ptr6627;
 $5987 = $5986;
 HEAP32[$5987>>2] = $5984;
 $5988 = (($5986) + 4)|0;
 $5989 = $5988;
 HEAP32[$5989>>2] = $5985;
 $5990 = $5984 ^ $5948;
 $5991 = $5985 ^ $5949;
 $5992 = (_bitshift64Lshr(($5990|0),($5991|0),63)|0);
 $5993 = (getTempRet0() | 0);
 $5994 = (_bitshift64Shl(($5990|0),($5991|0),1)|0);
 $5995 = (getTempRet0() | 0);
 $5996 = $5992 | $5994;
 $5997 = $5993 | $5995;
 $5998 = $add$ptr3309;
 $5999 = $5998;
 HEAP32[$5999>>2] = $5996;
 $6000 = (($5998) + 4)|0;
 $6001 = $6000;
 HEAP32[$6001>>2] = $5997;
 $6002 = (_i64Add(($2012|0),($2013|0),($532|0),($533|0))|0);
 $6003 = (getTempRet0() | 0);
 $6004 = (_bitshift64Shl(($532|0),($533|0),1)|0);
 $6005 = (getTempRet0() | 0);
 $6006 = $6004 & -2;
 $6007 = $6005 & 1;
 $6008 = (___muldi3(($2012|0),0,($6006|0),($6007|0))|0);
 $6009 = (getTempRet0() | 0);
 $6010 = (_i64Add(($6002|0),($6003|0),($6008|0),($6009|0))|0);
 $6011 = (getTempRet0() | 0);
 $6012 = $4972 ^ $6010;
 $6013 = $4973 ^ $6011;
 $6014 = (_i64Add(($6013|0),($6012|0),($3492|0),($3493|0))|0);
 $6015 = (getTempRet0() | 0);
 $6016 = (_bitshift64Shl(($3492|0),($3493|0),1)|0);
 $6017 = (getTempRet0() | 0);
 $6018 = $6016 & -2;
 $6019 = $6017 & 1;
 $6020 = (___muldi3(($6013|0),0,($6018|0),($6019|0))|0);
 $6021 = (getTempRet0() | 0);
 $6022 = (_i64Add(($6014|0),($6015|0),($6020|0),($6021|0))|0);
 $6023 = (getTempRet0() | 0);
 $6024 = $6022 ^ $2012;
 $6025 = $6023 ^ $2013;
 $6026 = (_bitshift64Lshr(($6024|0),($6025|0),24)|0);
 $6027 = (getTempRet0() | 0);
 $6028 = (_bitshift64Shl(($6024|0),($6025|0),40)|0);
 $6029 = (getTempRet0() | 0);
 $6030 = $6026 | $6028;
 $6031 = $6027 | $6029;
 $6032 = (_i64Add(($6030|0),($6031|0),($6010|0),($6011|0))|0);
 $6033 = (getTempRet0() | 0);
 $6034 = (_bitshift64Shl(($6010|0),($6011|0),1)|0);
 $6035 = (getTempRet0() | 0);
 $6036 = $6034 & -2;
 $6037 = $6035 & 1;
 $6038 = (___muldi3(($6026|0),0,($6036|0),($6037|0))|0);
 $6039 = (getTempRet0() | 0);
 $6040 = (_i64Add(($6032|0),($6033|0),($6038|0),($6039|0))|0);
 $6041 = (getTempRet0() | 0);
 $6042 = $arrayidx199;
 $6043 = $6042;
 HEAP32[$6043>>2] = $6040;
 $6044 = (($6042) + 4)|0;
 $6045 = $6044;
 HEAP32[$6045>>2] = $6041;
 $6046 = $6040 ^ $6013;
 $6047 = $6041 ^ $6012;
 $6048 = (_bitshift64Lshr(($6046|0),($6047|0),16)|0);
 $6049 = (getTempRet0() | 0);
 $6050 = (_bitshift64Shl(($6046|0),($6047|0),48)|0);
 $6051 = (getTempRet0() | 0);
 $6052 = $6048 | $6050;
 $6053 = $6049 | $6051;
 $6054 = $arrayidx10153;
 $6055 = $6054;
 HEAP32[$6055>>2] = $6052;
 $6056 = (($6054) + 4)|0;
 $6057 = $6056;
 HEAP32[$6057>>2] = $6053;
 $6058 = (_i64Add(($6052|0),($6053|0),($6022|0),($6023|0))|0);
 $6059 = (getTempRet0() | 0);
 $6060 = (_bitshift64Shl(($6022|0),($6023|0),1)|0);
 $6061 = (getTempRet0() | 0);
 $6062 = $6060 & -2;
 $6063 = $6061 & 1;
 $6064 = (___muldi3(($6048|0),0,($6062|0),($6063|0))|0);
 $6065 = (getTempRet0() | 0);
 $6066 = (_i64Add(($6058|0),($6059|0),($6064|0),($6065|0))|0);
 $6067 = (getTempRet0() | 0);
 $6068 = $arrayidx6835;
 $6069 = $6068;
 HEAP32[$6069>>2] = $6066;
 $6070 = (($6068) + 4)|0;
 $6071 = $6070;
 HEAP32[$6071>>2] = $6067;
 $6072 = $6066 ^ $6030;
 $6073 = $6067 ^ $6031;
 $6074 = (_bitshift64Lshr(($6072|0),($6073|0),63)|0);
 $6075 = (getTempRet0() | 0);
 $6076 = (_bitshift64Shl(($6072|0),($6073|0),1)|0);
 $6077 = (getTempRet0() | 0);
 $6078 = $6074 | $6076;
 $6079 = $6075 | $6077;
 $6080 = $arrayidx3517;
 $6081 = $6080;
 HEAP32[$6081>>2] = $6078;
 $6082 = (($6080) + 4)|0;
 $6083 = $6082;
 HEAP32[$6083>>2] = $6079;
 $6084 = (_i64Add(($2670|0),($2671|0),($1190|0),($1191|0))|0);
 $6085 = (getTempRet0() | 0);
 $6086 = (_bitshift64Shl(($1190|0),($1191|0),1)|0);
 $6087 = (getTempRet0() | 0);
 $6088 = $6086 & -2;
 $6089 = $6087 & 1;
 $6090 = (___muldi3(($2670|0),0,($6088|0),($6089|0))|0);
 $6091 = (getTempRet0() | 0);
 $6092 = (_i64Add(($6084|0),($6085|0),($6090|0),($6091|0))|0);
 $6093 = (getTempRet0() | 0);
 $6094 = $5630 ^ $6092;
 $6095 = $5631 ^ $6093;
 $6096 = (_i64Add(($6095|0),($6094|0),($4150|0),($4151|0))|0);
 $6097 = (getTempRet0() | 0);
 $6098 = (_bitshift64Shl(($4150|0),($4151|0),1)|0);
 $6099 = (getTempRet0() | 0);
 $6100 = $6098 & -2;
 $6101 = $6099 & 1;
 $6102 = (___muldi3(($6095|0),0,($6100|0),($6101|0))|0);
 $6103 = (getTempRet0() | 0);
 $6104 = (_i64Add(($6096|0),($6097|0),($6102|0),($6103|0))|0);
 $6105 = (getTempRet0() | 0);
 $6106 = $6104 ^ $2670;
 $6107 = $6105 ^ $2671;
 $6108 = (_bitshift64Lshr(($6106|0),($6107|0),24)|0);
 $6109 = (getTempRet0() | 0);
 $6110 = (_bitshift64Shl(($6106|0),($6107|0),40)|0);
 $6111 = (getTempRet0() | 0);
 $6112 = $6108 | $6110;
 $6113 = $6109 | $6111;
 $6114 = (_i64Add(($6112|0),($6113|0),($6092|0),($6093|0))|0);
 $6115 = (getTempRet0() | 0);
 $6116 = (_bitshift64Shl(($6092|0),($6093|0),1)|0);
 $6117 = (getTempRet0() | 0);
 $6118 = $6116 & -2;
 $6119 = $6117 & 1;
 $6120 = (___muldi3(($6108|0),0,($6118|0),($6119|0))|0);
 $6121 = (getTempRet0() | 0);
 $6122 = (_i64Add(($6114|0),($6115|0),($6120|0),($6121|0))|0);
 $6123 = (getTempRet0() | 0);
 $6124 = $add$ptr1650;
 $6125 = $6124;
 HEAP32[$6125>>2] = $6122;
 $6126 = (($6124) + 4)|0;
 $6127 = $6126;
 HEAP32[$6127>>2] = $6123;
 $6128 = $6122 ^ $6095;
 $6129 = $6123 ^ $6094;
 $6130 = (_bitshift64Lshr(($6128|0),($6129|0),16)|0);
 $6131 = (getTempRet0() | 0);
 $6132 = (_bitshift64Shl(($6128|0),($6129|0),48)|0);
 $6133 = (getTempRet0() | 0);
 $6134 = $6130 | $6132;
 $6135 = $6131 | $6133;
 $6136 = $add$ptr11604;
 $6137 = $6136;
 HEAP32[$6137>>2] = $6134;
 $6138 = (($6136) + 4)|0;
 $6139 = $6138;
 HEAP32[$6139>>2] = $6135;
 $6140 = (_i64Add(($6134|0),($6135|0),($6104|0),($6105|0))|0);
 $6141 = (getTempRet0() | 0);
 $6142 = (_bitshift64Shl(($6104|0),($6105|0),1)|0);
 $6143 = (getTempRet0() | 0);
 $6144 = $6142 & -2;
 $6145 = $6143 & 1;
 $6146 = (___muldi3(($6130|0),0,($6144|0),($6145|0))|0);
 $6147 = (getTempRet0() | 0);
 $6148 = (_i64Add(($6140|0),($6141|0),($6146|0),($6147|0))|0);
 $6149 = (getTempRet0() | 0);
 $6150 = $6148 ^ $6112;
 $6151 = $6149 ^ $6113;
 $6152 = (_bitshift64Lshr(($6150|0),($6151|0),63)|0);
 $6153 = (getTempRet0() | 0);
 $6154 = (_bitshift64Shl(($6150|0),($6151|0),1)|0);
 $6155 = (getTempRet0() | 0);
 $6156 = $6152 | $6154;
 $6157 = $6153 | $6155;
 $6158 = $add$ptr4968;
 $6159 = $6158;
 HEAP32[$6159>>2] = $6156;
 $6160 = (($6158) + 4)|0;
 $6161 = $6160;
 HEAP32[$6161>>2] = $6157;
 $6162 = (_i64Add(($2752|0),($2753|0),($1272|0),($1273|0))|0);
 $6163 = (getTempRet0() | 0);
 $6164 = (_bitshift64Shl(($1272|0),($1273|0),1)|0);
 $6165 = (getTempRet0() | 0);
 $6166 = $6164 & -2;
 $6167 = $6165 & 1;
 $6168 = (___muldi3(($2752|0),0,($6166|0),($6167|0))|0);
 $6169 = (getTempRet0() | 0);
 $6170 = (_i64Add(($6162|0),($6163|0),($6168|0),($6169|0))|0);
 $6171 = (getTempRet0() | 0);
 $6172 = $5712 ^ $6170;
 $6173 = $5713 ^ $6171;
 $6174 = (_i64Add(($6173|0),($6172|0),($4232|0),($4233|0))|0);
 $6175 = (getTempRet0() | 0);
 $6176 = (_bitshift64Shl(($4232|0),($4233|0),1)|0);
 $6177 = (getTempRet0() | 0);
 $6178 = $6176 & -2;
 $6179 = $6177 & 1;
 $6180 = (___muldi3(($6173|0),0,($6178|0),($6179|0))|0);
 $6181 = (getTempRet0() | 0);
 $6182 = (_i64Add(($6174|0),($6175|0),($6180|0),($6181|0))|0);
 $6183 = (getTempRet0() | 0);
 $6184 = $6182 ^ $2752;
 $6185 = $6183 ^ $2753;
 $6186 = (_bitshift64Lshr(($6184|0),($6185|0),24)|0);
 $6187 = (getTempRet0() | 0);
 $6188 = (_bitshift64Shl(($6184|0),($6185|0),40)|0);
 $6189 = (getTempRet0() | 0);
 $6190 = $6186 | $6188;
 $6191 = $6187 | $6189;
 $6192 = (_i64Add(($6190|0),($6191|0),($6170|0),($6171|0))|0);
 $6193 = (getTempRet0() | 0);
 $6194 = (_bitshift64Shl(($6170|0),($6171|0),1)|0);
 $6195 = (getTempRet0() | 0);
 $6196 = $6194 & -2;
 $6197 = $6195 & 1;
 $6198 = (___muldi3(($6186|0),0,($6196|0),($6197|0))|0);
 $6199 = (getTempRet0() | 0);
 $6200 = (_i64Add(($6192|0),($6193|0),($6198|0),($6199|0))|0);
 $6201 = (getTempRet0() | 0);
 $6202 = $arrayidx1858;
 $6203 = $6202;
 HEAP32[$6203>>2] = $6200;
 $6204 = (($6202) + 4)|0;
 $6205 = $6204;
 HEAP32[$6205>>2] = $6201;
 $6206 = $6200 ^ $6173;
 $6207 = $6201 ^ $6172;
 $6208 = (_bitshift64Lshr(($6206|0),($6207|0),16)|0);
 $6209 = (getTempRet0() | 0);
 $6210 = (_bitshift64Shl(($6206|0),($6207|0),48)|0);
 $6211 = (getTempRet0() | 0);
 $6212 = $6208 | $6210;
 $6213 = $6209 | $6211;
 $6214 = (_i64Add(($6212|0),($6213|0),($6182|0),($6183|0))|0);
 $6215 = (getTempRet0() | 0);
 $6216 = (_bitshift64Shl(($6182|0),($6183|0),1)|0);
 $6217 = (getTempRet0() | 0);
 $6218 = $6216 & -2;
 $6219 = $6217 & 1;
 $6220 = (___muldi3(($6208|0),0,($6218|0),($6219|0))|0);
 $6221 = (getTempRet0() | 0);
 $6222 = (_i64Add(($6214|0),($6215|0),($6220|0),($6221|0))|0);
 $6223 = (getTempRet0() | 0);
 $6224 = $6222 ^ $6190;
 $6225 = $6223 ^ $6191;
 $6226 = (_bitshift64Lshr(($6224|0),($6225|0),63)|0);
 $6227 = (getTempRet0() | 0);
 $6228 = (_bitshift64Shl(($6224|0),($6225|0),1)|0);
 $6229 = (getTempRet0() | 0);
 $6230 = $6226 | $6228;
 $6231 = $6227 | $6229;
 $6232 = $arrayidx5176;
 $6233 = $6232;
 HEAP32[$6233>>2] = $6230;
 $6234 = (($6232) + 4)|0;
 $6235 = $6234;
 HEAP32[$6235>>2] = $6231;
 $6236 = (_i64Add(($6078|0),($6079|0),($5958|0),($5959|0))|0);
 $6237 = (getTempRet0() | 0);
 $6238 = (_bitshift64Shl(($5958|0),($5959|0),1)|0);
 $6239 = (getTempRet0() | 0);
 $6240 = $6238 & -2;
 $6241 = $6239 & 1;
 $6242 = (___muldi3(($6078|0),0,($6240|0),($6241|0))|0);
 $6243 = (getTempRet0() | 0);
 $6244 = (_i64Add(($6236|0),($6237|0),($6242|0),($6243|0))|0);
 $6245 = (getTempRet0() | 0);
 $6246 = $6212 ^ $6244;
 $6247 = $6213 ^ $6245;
 $6248 = (_i64Add(($6247|0),($6246|0),($6148|0),($6149|0))|0);
 $6249 = (getTempRet0() | 0);
 $6250 = (_bitshift64Shl(($6148|0),($6149|0),1)|0);
 $6251 = (getTempRet0() | 0);
 $6252 = $6250 & -2;
 $6253 = $6251 & 1;
 $6254 = (___muldi3(($6252|0),($6253|0),($6247|0),0)|0);
 $6255 = (getTempRet0() | 0);
 $6256 = (_i64Add(($6248|0),($6249|0),($6254|0),($6255|0))|0);
 $6257 = (getTempRet0() | 0);
 $6258 = $6256 ^ $6078;
 $6259 = $6257 ^ $6079;
 $6260 = (_bitshift64Lshr(($6258|0),($6259|0),24)|0);
 $6261 = (getTempRet0() | 0);
 $6262 = (_bitshift64Shl(($6258|0),($6259|0),40)|0);
 $6263 = (getTempRet0() | 0);
 $6264 = $6260 | $6262;
 $6265 = $6261 | $6263;
 $6266 = (_i64Add(($6264|0),($6265|0),($6244|0),($6245|0))|0);
 $6267 = (getTempRet0() | 0);
 $6268 = (_bitshift64Shl(($6244|0),($6245|0),1)|0);
 $6269 = (getTempRet0() | 0);
 $6270 = $6268 & -2;
 $6271 = $6269 & 1;
 $6272 = (___muldi3(($6260|0),0,($6270|0),($6271|0))|0);
 $6273 = (getTempRet0() | 0);
 $6274 = (_i64Add(($6266|0),($6267|0),($6272|0),($6273|0))|0);
 $6275 = (getTempRet0() | 0);
 $6276 = $blockR;
 $6277 = $6276;
 HEAP32[$6277>>2] = $6274;
 $6278 = (($6276) + 4)|0;
 $6279 = $6278;
 HEAP32[$6279>>2] = $6275;
 $6280 = $6274 ^ $6247;
 $6281 = $6275 ^ $6246;
 $6282 = (_bitshift64Lshr(($6280|0),($6281|0),16)|0);
 $6283 = (getTempRet0() | 0);
 $6284 = (_bitshift64Shl(($6280|0),($6281|0),48)|0);
 $6285 = (getTempRet0() | 0);
 $6286 = $6282 | $6284;
 $6287 = $6283 | $6285;
 $6288 = $arrayidx11812;
 $6289 = $6288;
 HEAP32[$6289>>2] = $6286;
 $6290 = (($6288) + 4)|0;
 $6291 = $6290;
 HEAP32[$6291>>2] = $6287;
 $6292 = (_i64Add(($6286|0),($6287|0),($6256|0),($6257|0))|0);
 $6293 = (getTempRet0() | 0);
 $6294 = (_bitshift64Shl(($6256|0),($6257|0),1)|0);
 $6295 = (getTempRet0() | 0);
 $6296 = $6294 & -2;
 $6297 = $6295 & 1;
 $6298 = (___muldi3(($6282|0),0,($6296|0),($6297|0))|0);
 $6299 = (getTempRet0() | 0);
 $6300 = (_i64Add(($6292|0),($6293|0),($6298|0),($6299|0))|0);
 $6301 = (getTempRet0() | 0);
 $6302 = $add$ptr8286;
 $6303 = $6302;
 HEAP32[$6303>>2] = $6300;
 $6304 = (($6302) + 4)|0;
 $6305 = $6304;
 HEAP32[$6305>>2] = $6301;
 $6306 = $6300 ^ $6264;
 $6307 = $6301 ^ $6265;
 $6308 = (_bitshift64Lshr(($6306|0),($6307|0),63)|0);
 $6309 = (getTempRet0() | 0);
 $6310 = (_bitshift64Shl(($6306|0),($6307|0),1)|0);
 $6311 = (getTempRet0() | 0);
 $6312 = $6308 | $6310;
 $6313 = $6309 | $6311;
 $6314 = $arrayidx3517;
 $6315 = $6314;
 HEAP32[$6315>>2] = $6312;
 $6316 = (($6314) + 4)|0;
 $6317 = $6316;
 HEAP32[$6317>>2] = $6313;
 $6318 = (_i64Add(($6156|0),($6157|0),($6040|0),($6041|0))|0);
 $6319 = (getTempRet0() | 0);
 $6320 = (_bitshift64Shl(($6040|0),($6041|0),1)|0);
 $6321 = (getTempRet0() | 0);
 $6322 = $6320 & -2;
 $6323 = $6321 & 1;
 $6324 = (___muldi3(($6156|0),0,($6322|0),($6323|0))|0);
 $6325 = (getTempRet0() | 0);
 $6326 = (_i64Add(($6318|0),($6319|0),($6324|0),($6325|0))|0);
 $6327 = (getTempRet0() | 0);
 $6328 = $6326 ^ $5970;
 $6329 = $6327 ^ $5971;
 $6330 = (_i64Add(($6329|0),($6328|0),($6222|0),($6223|0))|0);
 $6331 = (getTempRet0() | 0);
 $6332 = (_bitshift64Shl(($6222|0),($6223|0),1)|0);
 $6333 = (getTempRet0() | 0);
 $6334 = $6332 & -2;
 $6335 = $6333 & 1;
 $6336 = (___muldi3(($6329|0),0,($6334|0),($6335|0))|0);
 $6337 = (getTempRet0() | 0);
 $6338 = (_i64Add(($6330|0),($6331|0),($6336|0),($6337|0))|0);
 $6339 = (getTempRet0() | 0);
 $6340 = $6338 ^ $6156;
 $6341 = $6339 ^ $6157;
 $6342 = (_bitshift64Lshr(($6340|0),($6341|0),24)|0);
 $6343 = (getTempRet0() | 0);
 $6344 = (_bitshift64Shl(($6340|0),($6341|0),40)|0);
 $6345 = (getTempRet0() | 0);
 $6346 = $6342 | $6344;
 $6347 = $6343 | $6345;
 $6348 = (_i64Add(($6346|0),($6347|0),($6326|0),($6327|0))|0);
 $6349 = (getTempRet0() | 0);
 $6350 = (_bitshift64Shl(($6326|0),($6327|0),1)|0);
 $6351 = (getTempRet0() | 0);
 $6352 = $6350 & -2;
 $6353 = $6351 & 1;
 $6354 = (___muldi3(($6342|0),0,($6352|0),($6353|0))|0);
 $6355 = (getTempRet0() | 0);
 $6356 = (_i64Add(($6348|0),($6349|0),($6354|0),($6355|0))|0);
 $6357 = (getTempRet0() | 0);
 $6358 = $arrayidx199;
 $6359 = $6358;
 HEAP32[$6359>>2] = $6356;
 $6360 = (($6358) + 4)|0;
 $6361 = $6360;
 HEAP32[$6361>>2] = $6357;
 $6362 = $6356 ^ $6329;
 $6363 = $6357 ^ $6328;
 $6364 = (_bitshift64Lshr(($6362|0),($6363|0),16)|0);
 $6365 = (getTempRet0() | 0);
 $6366 = (_bitshift64Shl(($6362|0),($6363|0),48)|0);
 $6367 = (getTempRet0() | 0);
 $6368 = $6364 | $6366;
 $6369 = $6365 | $6367;
 $6370 = $add$ptr9945;
 $6371 = $6370;
 HEAP32[$6371>>2] = $6368;
 $6372 = (($6370) + 4)|0;
 $6373 = $6372;
 HEAP32[$6373>>2] = $6369;
 $6374 = (_i64Add(($6368|0),($6369|0),($6338|0),($6339|0))|0);
 $6375 = (getTempRet0() | 0);
 $6376 = (_bitshift64Shl(($6338|0),($6339|0),1)|0);
 $6377 = (getTempRet0() | 0);
 $6378 = $6376 & -2;
 $6379 = $6377 & 1;
 $6380 = (___muldi3(($6364|0),0,($6378|0),($6379|0))|0);
 $6381 = (getTempRet0() | 0);
 $6382 = (_i64Add(($6374|0),($6375|0),($6380|0),($6381|0))|0);
 $6383 = (getTempRet0() | 0);
 $6384 = $arrayidx8494;
 $6385 = $6384;
 HEAP32[$6385>>2] = $6382;
 $6386 = (($6384) + 4)|0;
 $6387 = $6386;
 HEAP32[$6387>>2] = $6383;
 $6388 = $6382 ^ $6346;
 $6389 = $6383 ^ $6347;
 $6390 = (_bitshift64Lshr(($6388|0),($6389|0),63)|0);
 $6391 = (getTempRet0() | 0);
 $6392 = (_bitshift64Shl(($6388|0),($6389|0),1)|0);
 $6393 = (getTempRet0() | 0);
 $6394 = $6390 | $6392;
 $6395 = $6391 | $6393;
 $6396 = $add$ptr4968;
 $6397 = $6396;
 HEAP32[$6397>>2] = $6394;
 $6398 = (($6396) + 4)|0;
 $6399 = $6398;
 HEAP32[$6399>>2] = $6395;
 $6400 = (_i64Add(($6230|0),($6231|0),($6122|0),($6123|0))|0);
 $6401 = (getTempRet0() | 0);
 $6402 = (_bitshift64Shl(($6122|0),($6123|0),1)|0);
 $6403 = (getTempRet0() | 0);
 $6404 = $6402 & -2;
 $6405 = $6403 & 1;
 $6406 = (___muldi3(($6230|0),0,($6404|0),($6405|0))|0);
 $6407 = (getTempRet0() | 0);
 $6408 = (_i64Add(($6400|0),($6401|0),($6406|0),($6407|0))|0);
 $6409 = (getTempRet0() | 0);
 $6410 = $6408 ^ $6052;
 $6411 = $6409 ^ $6053;
 $6412 = (_i64Add(($6411|0),($6410|0),($5984|0),($5985|0))|0);
 $6413 = (getTempRet0() | 0);
 $6414 = (_bitshift64Shl(($5984|0),($5985|0),1)|0);
 $6415 = (getTempRet0() | 0);
 $6416 = $6414 & -2;
 $6417 = $6415 & 1;
 $6418 = (___muldi3(($6411|0),0,($6416|0),($6417|0))|0);
 $6419 = (getTempRet0() | 0);
 $6420 = (_i64Add(($6412|0),($6413|0),($6418|0),($6419|0))|0);
 $6421 = (getTempRet0() | 0);
 $6422 = $6420 ^ $6230;
 $6423 = $6421 ^ $6231;
 $6424 = (_bitshift64Lshr(($6422|0),($6423|0),24)|0);
 $6425 = (getTempRet0() | 0);
 $6426 = (_bitshift64Shl(($6422|0),($6423|0),40)|0);
 $6427 = (getTempRet0() | 0);
 $6428 = $6424 | $6426;
 $6429 = $6425 | $6427;
 $6430 = (_i64Add(($6428|0),($6429|0),($6408|0),($6409|0))|0);
 $6431 = (getTempRet0() | 0);
 $6432 = (_bitshift64Shl(($6408|0),($6409|0),1)|0);
 $6433 = (getTempRet0() | 0);
 $6434 = $6432 & -2;
 $6435 = $6433 & 1;
 $6436 = (___muldi3(($6424|0),0,($6434|0),($6435|0))|0);
 $6437 = (getTempRet0() | 0);
 $6438 = (_i64Add(($6430|0),($6431|0),($6436|0),($6437|0))|0);
 $6439 = (getTempRet0() | 0);
 $6440 = $add$ptr1650;
 $6441 = $6440;
 HEAP32[$6441>>2] = $6438;
 $6442 = (($6440) + 4)|0;
 $6443 = $6442;
 HEAP32[$6443>>2] = $6439;
 $6444 = $6438 ^ $6411;
 $6445 = $6439 ^ $6410;
 $6446 = (_bitshift64Lshr(($6444|0),($6445|0),16)|0);
 $6447 = (getTempRet0() | 0);
 $6448 = (_bitshift64Shl(($6444|0),($6445|0),48)|0);
 $6449 = (getTempRet0() | 0);
 $6450 = $6446 | $6448;
 $6451 = $6447 | $6449;
 $6452 = $arrayidx10153;
 $6453 = $6452;
 HEAP32[$6453>>2] = $6450;
 $6454 = (($6452) + 4)|0;
 $6455 = $6454;
 HEAP32[$6455>>2] = $6451;
 $6456 = (_i64Add(($6450|0),($6451|0),($6420|0),($6421|0))|0);
 $6457 = (getTempRet0() | 0);
 $6458 = (_bitshift64Shl(($6420|0),($6421|0),1)|0);
 $6459 = (getTempRet0() | 0);
 $6460 = $6458 & -2;
 $6461 = $6459 & 1;
 $6462 = (___muldi3(($6446|0),0,($6460|0),($6461|0))|0);
 $6463 = (getTempRet0() | 0);
 $6464 = (_i64Add(($6456|0),($6457|0),($6462|0),($6463|0))|0);
 $6465 = (getTempRet0() | 0);
 $6466 = $add$ptr6627;
 $6467 = $6466;
 HEAP32[$6467>>2] = $6464;
 $6468 = (($6466) + 4)|0;
 $6469 = $6468;
 HEAP32[$6469>>2] = $6465;
 $6470 = $6464 ^ $6428;
 $6471 = $6465 ^ $6429;
 $6472 = (_bitshift64Lshr(($6470|0),($6471|0),63)|0);
 $6473 = (getTempRet0() | 0);
 $6474 = (_bitshift64Shl(($6470|0),($6471|0),1)|0);
 $6475 = (getTempRet0() | 0);
 $6476 = $6472 | $6474;
 $6477 = $6473 | $6475;
 $6478 = $arrayidx5176;
 $6479 = $6478;
 HEAP32[$6479>>2] = $6476;
 $6480 = (($6478) + 4)|0;
 $6481 = $6480;
 HEAP32[$6481>>2] = $6477;
 $6482 = (_i64Add(($6200|0),($6201|0),($5996|0),($5997|0))|0);
 $6483 = (getTempRet0() | 0);
 $6484 = (_bitshift64Shl(($6200|0),($6201|0),1)|0);
 $6485 = (getTempRet0() | 0);
 $6486 = $6484 & -2;
 $6487 = $6485 & 1;
 $6488 = (___muldi3(($6486|0),($6487|0),($5996|0),0)|0);
 $6489 = (getTempRet0() | 0);
 $6490 = (_i64Add(($6482|0),($6483|0),($6488|0),($6489|0))|0);
 $6491 = (getTempRet0() | 0);
 $6492 = $6490 ^ $6134;
 $6493 = $6491 ^ $6135;
 $6494 = (_i64Add(($6493|0),($6492|0),($6066|0),($6067|0))|0);
 $6495 = (getTempRet0() | 0);
 $6496 = (_bitshift64Shl(($6066|0),($6067|0),1)|0);
 $6497 = (getTempRet0() | 0);
 $6498 = $6496 & -2;
 $6499 = $6497 & 1;
 $6500 = (___muldi3(($6493|0),0,($6498|0),($6499|0))|0);
 $6501 = (getTempRet0() | 0);
 $6502 = (_i64Add(($6494|0),($6495|0),($6500|0),($6501|0))|0);
 $6503 = (getTempRet0() | 0);
 $6504 = $6502 ^ $5996;
 $6505 = $6503 ^ $5997;
 $6506 = (_bitshift64Lshr(($6504|0),($6505|0),24)|0);
 $6507 = (getTempRet0() | 0);
 $6508 = (_bitshift64Shl(($6504|0),($6505|0),40)|0);
 $6509 = (getTempRet0() | 0);
 $6510 = $6506 | $6508;
 $6511 = $6507 | $6509;
 $6512 = (_i64Add(($6510|0),($6511|0),($6490|0),($6491|0))|0);
 $6513 = (getTempRet0() | 0);
 $6514 = (_bitshift64Shl(($6490|0),($6491|0),1)|0);
 $6515 = (getTempRet0() | 0);
 $6516 = $6514 & -2;
 $6517 = $6515 & 1;
 $6518 = (___muldi3(($6506|0),0,($6516|0),($6517|0))|0);
 $6519 = (getTempRet0() | 0);
 $6520 = (_i64Add(($6512|0),($6513|0),($6518|0),($6519|0))|0);
 $6521 = (getTempRet0() | 0);
 $6522 = $arrayidx1858;
 $6523 = $6522;
 HEAP32[$6523>>2] = $6520;
 $6524 = (($6522) + 4)|0;
 $6525 = $6524;
 HEAP32[$6525>>2] = $6521;
 $6526 = $6520 ^ $6493;
 $6527 = $6521 ^ $6492;
 $6528 = (_bitshift64Lshr(($6526|0),($6527|0),16)|0);
 $6529 = (getTempRet0() | 0);
 $6530 = (_bitshift64Shl(($6526|0),($6527|0),48)|0);
 $6531 = (getTempRet0() | 0);
 $6532 = $6528 | $6530;
 $6533 = $6529 | $6531;
 $6534 = $add$ptr11604;
 $6535 = $6534;
 HEAP32[$6535>>2] = $6532;
 $6536 = (($6534) + 4)|0;
 $6537 = $6536;
 HEAP32[$6537>>2] = $6533;
 $6538 = (_i64Add(($6532|0),($6533|0),($6502|0),($6503|0))|0);
 $6539 = (getTempRet0() | 0);
 $6540 = (_bitshift64Shl(($6502|0),($6503|0),1)|0);
 $6541 = (getTempRet0() | 0);
 $6542 = $6540 & -2;
 $6543 = $6541 & 1;
 $6544 = (___muldi3(($6528|0),0,($6542|0),($6543|0))|0);
 $6545 = (getTempRet0() | 0);
 $6546 = (_i64Add(($6538|0),($6539|0),($6544|0),($6545|0))|0);
 $6547 = (getTempRet0() | 0);
 $6548 = $arrayidx6835;
 $6549 = $6548;
 HEAP32[$6549>>2] = $6546;
 $6550 = (($6548) + 4)|0;
 $6551 = $6550;
 HEAP32[$6551>>2] = $6547;
 $6552 = $6546 ^ $6510;
 $6553 = $6547 ^ $6511;
 $6554 = (_bitshift64Lshr(($6552|0),($6553|0),63)|0);
 $6555 = (getTempRet0() | 0);
 $6556 = (_bitshift64Shl(($6552|0),($6553|0),1)|0);
 $6557 = (getTempRet0() | 0);
 $6558 = $6554 | $6556;
 $6559 = $6555 | $6557;
 $6560 = $add$ptr3309;
 $6561 = $6560;
 HEAP32[$6561>>2] = $6558;
 $6562 = (($6560) + 4)|0;
 $6563 = $6562;
 HEAP32[$6563>>2] = $6559;
 $6564 = (_i64Add(($2094|0),($2095|0),($614|0),($615|0))|0);
 $6565 = (getTempRet0() | 0);
 $6566 = (_bitshift64Shl(($614|0),($615|0),1)|0);
 $6567 = (getTempRet0() | 0);
 $6568 = $6566 & -2;
 $6569 = $6567 & 1;
 $6570 = (___muldi3(($2094|0),0,($6568|0),($6569|0))|0);
 $6571 = (getTempRet0() | 0);
 $6572 = (_i64Add(($6564|0),($6565|0),($6570|0),($6571|0))|0);
 $6573 = (getTempRet0() | 0);
 $6574 = $5054 ^ $6572;
 $6575 = $5055 ^ $6573;
 $6576 = (_i64Add(($6575|0),($6574|0),($3574|0),($3575|0))|0);
 $6577 = (getTempRet0() | 0);
 $6578 = (_bitshift64Shl(($3574|0),($3575|0),1)|0);
 $6579 = (getTempRet0() | 0);
 $6580 = $6578 & -2;
 $6581 = $6579 & 1;
 $6582 = (___muldi3(($6575|0),0,($6580|0),($6581|0))|0);
 $6583 = (getTempRet0() | 0);
 $6584 = (_i64Add(($6576|0),($6577|0),($6582|0),($6583|0))|0);
 $6585 = (getTempRet0() | 0);
 $6586 = $6584 ^ $2094;
 $6587 = $6585 ^ $2095;
 $6588 = (_bitshift64Lshr(($6586|0),($6587|0),24)|0);
 $6589 = (getTempRet0() | 0);
 $6590 = (_bitshift64Shl(($6586|0),($6587|0),40)|0);
 $6591 = (getTempRet0() | 0);
 $6592 = $6588 | $6590;
 $6593 = $6589 | $6591;
 $6594 = (_i64Add(($6592|0),($6593|0),($6572|0),($6573|0))|0);
 $6595 = (getTempRet0() | 0);
 $6596 = (_bitshift64Shl(($6572|0),($6573|0),1)|0);
 $6597 = (getTempRet0() | 0);
 $6598 = $6596 & -2;
 $6599 = $6597 & 1;
 $6600 = (___muldi3(($6588|0),0,($6598|0),($6599|0))|0);
 $6601 = (getTempRet0() | 0);
 $6602 = (_i64Add(($6594|0),($6595|0),($6600|0),($6601|0))|0);
 $6603 = (getTempRet0() | 0);
 $6604 = $arrayidx406;
 $6605 = $6604;
 HEAP32[$6605>>2] = $6602;
 $6606 = (($6604) + 4)|0;
 $6607 = $6606;
 HEAP32[$6607>>2] = $6603;
 $6608 = $6602 ^ $6575;
 $6609 = $6603 ^ $6574;
 $6610 = (_bitshift64Lshr(($6608|0),($6609|0),16)|0);
 $6611 = (getTempRet0() | 0);
 $6612 = (_bitshift64Shl(($6608|0),($6609|0),48)|0);
 $6613 = (getTempRet0() | 0);
 $6614 = $6610 | $6612;
 $6615 = $6611 | $6613;
 $6616 = $arrayidx10360;
 $6617 = $6616;
 HEAP32[$6617>>2] = $6614;
 $6618 = (($6616) + 4)|0;
 $6619 = $6618;
 HEAP32[$6619>>2] = $6615;
 $6620 = (_i64Add(($6614|0),($6615|0),($6584|0),($6585|0))|0);
 $6621 = (getTempRet0() | 0);
 $6622 = (_bitshift64Shl(($6584|0),($6585|0),1)|0);
 $6623 = (getTempRet0() | 0);
 $6624 = $6622 & -2;
 $6625 = $6623 & 1;
 $6626 = (___muldi3(($6610|0),0,($6624|0),($6625|0))|0);
 $6627 = (getTempRet0() | 0);
 $6628 = (_i64Add(($6620|0),($6621|0),($6626|0),($6627|0))|0);
 $6629 = (getTempRet0() | 0);
 $6630 = $arrayidx7042;
 $6631 = $6630;
 HEAP32[$6631>>2] = $6628;
 $6632 = (($6630) + 4)|0;
 $6633 = $6632;
 HEAP32[$6633>>2] = $6629;
 $6634 = $6628 ^ $6592;
 $6635 = $6629 ^ $6593;
 $6636 = (_bitshift64Lshr(($6634|0),($6635|0),63)|0);
 $6637 = (getTempRet0() | 0);
 $6638 = (_bitshift64Shl(($6634|0),($6635|0),1)|0);
 $6639 = (getTempRet0() | 0);
 $6640 = $6636 | $6638;
 $6641 = $6637 | $6639;
 $6642 = $arrayidx3724;
 $6643 = $6642;
 HEAP32[$6643>>2] = $6640;
 $6644 = (($6642) + 4)|0;
 $6645 = $6644;
 HEAP32[$6645>>2] = $6641;
 $6646 = (_i64Add(($2176|0),($2177|0),($696|0),($697|0))|0);
 $6647 = (getTempRet0() | 0);
 $6648 = (_bitshift64Shl(($696|0),($697|0),1)|0);
 $6649 = (getTempRet0() | 0);
 $6650 = $6648 & -2;
 $6651 = $6649 & 1;
 $6652 = (___muldi3(($2176|0),0,($6650|0),($6651|0))|0);
 $6653 = (getTempRet0() | 0);
 $6654 = (_i64Add(($6646|0),($6647|0),($6652|0),($6653|0))|0);
 $6655 = (getTempRet0() | 0);
 $6656 = $5136 ^ $6654;
 $6657 = $5137 ^ $6655;
 $6658 = (_i64Add(($6657|0),($6656|0),($3656|0),($3657|0))|0);
 $6659 = (getTempRet0() | 0);
 $6660 = (_bitshift64Shl(($3656|0),($3657|0),1)|0);
 $6661 = (getTempRet0() | 0);
 $6662 = $6660 & -2;
 $6663 = $6661 & 1;
 $6664 = (___muldi3(($6657|0),0,($6662|0),($6663|0))|0);
 $6665 = (getTempRet0() | 0);
 $6666 = (_i64Add(($6658|0),($6659|0),($6664|0),($6665|0))|0);
 $6667 = (getTempRet0() | 0);
 $6668 = $6666 ^ $2176;
 $6669 = $6667 ^ $2177;
 $6670 = (_bitshift64Lshr(($6668|0),($6669|0),24)|0);
 $6671 = (getTempRet0() | 0);
 $6672 = (_bitshift64Shl(($6668|0),($6669|0),40)|0);
 $6673 = (getTempRet0() | 0);
 $6674 = $6670 | $6672;
 $6675 = $6671 | $6673;
 $6676 = (_i64Add(($6674|0),($6675|0),($6654|0),($6655|0))|0);
 $6677 = (getTempRet0() | 0);
 $6678 = (_bitshift64Shl(($6654|0),($6655|0),1)|0);
 $6679 = (getTempRet0() | 0);
 $6680 = $6678 & -2;
 $6681 = $6679 & 1;
 $6682 = (___muldi3(($6670|0),0,($6680|0),($6681|0))|0);
 $6683 = (getTempRet0() | 0);
 $6684 = (_i64Add(($6676|0),($6677|0),($6682|0),($6683|0))|0);
 $6685 = (getTempRet0() | 0);
 $6686 = $arrayidx613;
 $6687 = $6686;
 HEAP32[$6687>>2] = $6684;
 $6688 = (($6686) + 4)|0;
 $6689 = $6688;
 HEAP32[$6689>>2] = $6685;
 $6690 = $6684 ^ $6657;
 $6691 = $6685 ^ $6656;
 $6692 = (_bitshift64Lshr(($6690|0),($6691|0),16)|0);
 $6693 = (getTempRet0() | 0);
 $6694 = (_bitshift64Shl(($6690|0),($6691|0),48)|0);
 $6695 = (getTempRet0() | 0);
 $6696 = $6692 | $6694;
 $6697 = $6693 | $6695;
 $6698 = $arrayidx10567;
 $6699 = $6698;
 HEAP32[$6699>>2] = $6696;
 $6700 = (($6698) + 4)|0;
 $6701 = $6700;
 HEAP32[$6701>>2] = $6697;
 $6702 = (_i64Add(($6696|0),($6697|0),($6666|0),($6667|0))|0);
 $6703 = (getTempRet0() | 0);
 $6704 = (_bitshift64Shl(($6666|0),($6667|0),1)|0);
 $6705 = (getTempRet0() | 0);
 $6706 = $6704 & -2;
 $6707 = $6705 & 1;
 $6708 = (___muldi3(($6692|0),0,($6706|0),($6707|0))|0);
 $6709 = (getTempRet0() | 0);
 $6710 = (_i64Add(($6702|0),($6703|0),($6708|0),($6709|0))|0);
 $6711 = (getTempRet0() | 0);
 $6712 = $arrayidx7249;
 $6713 = $6712;
 HEAP32[$6713>>2] = $6710;
 $6714 = (($6712) + 4)|0;
 $6715 = $6714;
 HEAP32[$6715>>2] = $6711;
 $6716 = $6710 ^ $6674;
 $6717 = $6711 ^ $6675;
 $6718 = (_bitshift64Lshr(($6716|0),($6717|0),63)|0);
 $6719 = (getTempRet0() | 0);
 $6720 = (_bitshift64Shl(($6716|0),($6717|0),1)|0);
 $6721 = (getTempRet0() | 0);
 $6722 = $6718 | $6720;
 $6723 = $6719 | $6721;
 $6724 = $arrayidx3931;
 $6725 = $6724;
 HEAP32[$6725>>2] = $6722;
 $6726 = (($6724) + 4)|0;
 $6727 = $6726;
 HEAP32[$6727>>2] = $6723;
 $6728 = (_i64Add(($2834|0),($2835|0),($1354|0),($1355|0))|0);
 $6729 = (getTempRet0() | 0);
 $6730 = (_bitshift64Shl(($1354|0),($1355|0),1)|0);
 $6731 = (getTempRet0() | 0);
 $6732 = $6730 & -2;
 $6733 = $6731 & 1;
 $6734 = (___muldi3(($2834|0),0,($6732|0),($6733|0))|0);
 $6735 = (getTempRet0() | 0);
 $6736 = (_i64Add(($6728|0),($6729|0),($6734|0),($6735|0))|0);
 $6737 = (getTempRet0() | 0);
 $6738 = $5794 ^ $6736;
 $6739 = $5795 ^ $6737;
 $6740 = (_i64Add(($6739|0),($6738|0),($4314|0),($4315|0))|0);
 $6741 = (getTempRet0() | 0);
 $6742 = (_bitshift64Shl(($4314|0),($4315|0),1)|0);
 $6743 = (getTempRet0() | 0);
 $6744 = $6742 & -2;
 $6745 = $6743 & 1;
 $6746 = (___muldi3(($6739|0),0,($6744|0),($6745|0))|0);
 $6747 = (getTempRet0() | 0);
 $6748 = (_i64Add(($6740|0),($6741|0),($6746|0),($6747|0))|0);
 $6749 = (getTempRet0() | 0);
 $6750 = $6748 ^ $2834;
 $6751 = $6749 ^ $2835;
 $6752 = (_bitshift64Lshr(($6750|0),($6751|0),24)|0);
 $6753 = (getTempRet0() | 0);
 $6754 = (_bitshift64Shl(($6750|0),($6751|0),40)|0);
 $6755 = (getTempRet0() | 0);
 $6756 = $6752 | $6754;
 $6757 = $6753 | $6755;
 $6758 = (_i64Add(($6756|0),($6757|0),($6736|0),($6737|0))|0);
 $6759 = (getTempRet0() | 0);
 $6760 = (_bitshift64Shl(($6736|0),($6737|0),1)|0);
 $6761 = (getTempRet0() | 0);
 $6762 = $6760 & -2;
 $6763 = $6761 & 1;
 $6764 = (___muldi3(($6752|0),0,($6762|0),($6763|0))|0);
 $6765 = (getTempRet0() | 0);
 $6766 = (_i64Add(($6758|0),($6759|0),($6764|0),($6765|0))|0);
 $6767 = (getTempRet0() | 0);
 $6768 = $arrayidx2065;
 $6769 = $6768;
 HEAP32[$6769>>2] = $6766;
 $6770 = (($6768) + 4)|0;
 $6771 = $6770;
 HEAP32[$6771>>2] = $6767;
 $6772 = $6766 ^ $6739;
 $6773 = $6767 ^ $6738;
 $6774 = (_bitshift64Lshr(($6772|0),($6773|0),16)|0);
 $6775 = (getTempRet0() | 0);
 $6776 = (_bitshift64Shl(($6772|0),($6773|0),48)|0);
 $6777 = (getTempRet0() | 0);
 $6778 = $6774 | $6776;
 $6779 = $6775 | $6777;
 $6780 = $arrayidx12019;
 $6781 = $6780;
 HEAP32[$6781>>2] = $6778;
 $6782 = (($6780) + 4)|0;
 $6783 = $6782;
 HEAP32[$6783>>2] = $6779;
 $6784 = (_i64Add(($6778|0),($6779|0),($6748|0),($6749|0))|0);
 $6785 = (getTempRet0() | 0);
 $6786 = (_bitshift64Shl(($6748|0),($6749|0),1)|0);
 $6787 = (getTempRet0() | 0);
 $6788 = $6786 & -2;
 $6789 = $6787 & 1;
 $6790 = (___muldi3(($6774|0),0,($6788|0),($6789|0))|0);
 $6791 = (getTempRet0() | 0);
 $6792 = (_i64Add(($6784|0),($6785|0),($6790|0),($6791|0))|0);
 $6793 = (getTempRet0() | 0);
 $6794 = $6792 ^ $6756;
 $6795 = $6793 ^ $6757;
 $6796 = (_bitshift64Lshr(($6794|0),($6795|0),63)|0);
 $6797 = (getTempRet0() | 0);
 $6798 = (_bitshift64Shl(($6794|0),($6795|0),1)|0);
 $6799 = (getTempRet0() | 0);
 $6800 = $6796 | $6798;
 $6801 = $6797 | $6799;
 $6802 = $arrayidx5383;
 $6803 = $6802;
 HEAP32[$6803>>2] = $6800;
 $6804 = (($6802) + 4)|0;
 $6805 = $6804;
 HEAP32[$6805>>2] = $6801;
 $6806 = (_i64Add(($2916|0),($2917|0),($1436|0),($1437|0))|0);
 $6807 = (getTempRet0() | 0);
 $6808 = (_bitshift64Shl(($1436|0),($1437|0),1)|0);
 $6809 = (getTempRet0() | 0);
 $6810 = $6808 & -2;
 $6811 = $6809 & 1;
 $6812 = (___muldi3(($2916|0),0,($6810|0),($6811|0))|0);
 $6813 = (getTempRet0() | 0);
 $6814 = (_i64Add(($6806|0),($6807|0),($6812|0),($6813|0))|0);
 $6815 = (getTempRet0() | 0);
 $6816 = $5876 ^ $6814;
 $6817 = $5877 ^ $6815;
 $6818 = (_i64Add(($6817|0),($6816|0),($4396|0),($4397|0))|0);
 $6819 = (getTempRet0() | 0);
 $6820 = (_bitshift64Shl(($4396|0),($4397|0),1)|0);
 $6821 = (getTempRet0() | 0);
 $6822 = $6820 & -2;
 $6823 = $6821 & 1;
 $6824 = (___muldi3(($6817|0),0,($6822|0),($6823|0))|0);
 $6825 = (getTempRet0() | 0);
 $6826 = (_i64Add(($6818|0),($6819|0),($6824|0),($6825|0))|0);
 $6827 = (getTempRet0() | 0);
 $6828 = $6826 ^ $2916;
 $6829 = $6827 ^ $2917;
 $6830 = (_bitshift64Lshr(($6828|0),($6829|0),24)|0);
 $6831 = (getTempRet0() | 0);
 $6832 = (_bitshift64Shl(($6828|0),($6829|0),40)|0);
 $6833 = (getTempRet0() | 0);
 $6834 = $6830 | $6832;
 $6835 = $6831 | $6833;
 $6836 = (_i64Add(($6834|0),($6835|0),($6814|0),($6815|0))|0);
 $6837 = (getTempRet0() | 0);
 $6838 = (_bitshift64Shl(($6814|0),($6815|0),1)|0);
 $6839 = (getTempRet0() | 0);
 $6840 = $6838 & -2;
 $6841 = $6839 & 1;
 $6842 = (___muldi3(($6830|0),0,($6840|0),($6841|0))|0);
 $6843 = (getTempRet0() | 0);
 $6844 = (_i64Add(($6836|0),($6837|0),($6842|0),($6843|0))|0);
 $6845 = (getTempRet0() | 0);
 $6846 = $arrayidx2272;
 $6847 = $6846;
 HEAP32[$6847>>2] = $6844;
 $6848 = (($6846) + 4)|0;
 $6849 = $6848;
 HEAP32[$6849>>2] = $6845;
 $6850 = $6844 ^ $6817;
 $6851 = $6845 ^ $6816;
 $6852 = (_bitshift64Lshr(($6850|0),($6851|0),16)|0);
 $6853 = (getTempRet0() | 0);
 $6854 = (_bitshift64Shl(($6850|0),($6851|0),48)|0);
 $6855 = (getTempRet0() | 0);
 $6856 = $6852 | $6854;
 $6857 = $6853 | $6855;
 $6858 = (_i64Add(($6856|0),($6857|0),($6826|0),($6827|0))|0);
 $6859 = (getTempRet0() | 0);
 $6860 = (_bitshift64Shl(($6826|0),($6827|0),1)|0);
 $6861 = (getTempRet0() | 0);
 $6862 = $6860 & -2;
 $6863 = $6861 & 1;
 $6864 = (___muldi3(($6852|0),0,($6862|0),($6863|0))|0);
 $6865 = (getTempRet0() | 0);
 $6866 = (_i64Add(($6858|0),($6859|0),($6864|0),($6865|0))|0);
 $6867 = (getTempRet0() | 0);
 $6868 = $6866 ^ $6834;
 $6869 = $6867 ^ $6835;
 $6870 = (_bitshift64Lshr(($6868|0),($6869|0),63)|0);
 $6871 = (getTempRet0() | 0);
 $6872 = (_bitshift64Shl(($6868|0),($6869|0),1)|0);
 $6873 = (getTempRet0() | 0);
 $6874 = $6870 | $6872;
 $6875 = $6871 | $6873;
 $6876 = $arrayidx5590;
 $6877 = $6876;
 HEAP32[$6877>>2] = $6874;
 $6878 = (($6876) + 4)|0;
 $6879 = $6878;
 HEAP32[$6879>>2] = $6875;
 $6880 = (_i64Add(($6722|0),($6723|0),($6602|0),($6603|0))|0);
 $6881 = (getTempRet0() | 0);
 $6882 = (_bitshift64Shl(($6602|0),($6603|0),1)|0);
 $6883 = (getTempRet0() | 0);
 $6884 = $6882 & -2;
 $6885 = $6883 & 1;
 $6886 = (___muldi3(($6884|0),($6885|0),($6722|0),0)|0);
 $6887 = (getTempRet0() | 0);
 $6888 = (_i64Add(($6880|0),($6881|0),($6886|0),($6887|0))|0);
 $6889 = (getTempRet0() | 0);
 $6890 = $6856 ^ $6888;
 $6891 = $6857 ^ $6889;
 $6892 = (_i64Add(($6792|0),($6793|0),($6891|0),($6890|0))|0);
 $6893 = (getTempRet0() | 0);
 $6894 = (_bitshift64Shl(($6792|0),($6793|0),1)|0);
 $6895 = (getTempRet0() | 0);
 $6896 = $6894 & -2;
 $6897 = $6895 & 1;
 $6898 = (___muldi3(($6896|0),($6897|0),($6891|0),0)|0);
 $6899 = (getTempRet0() | 0);
 $6900 = (_i64Add(($6892|0),($6893|0),($6898|0),($6899|0))|0);
 $6901 = (getTempRet0() | 0);
 $6902 = $6900 ^ $6722;
 $6903 = $6901 ^ $6723;
 $6904 = (_bitshift64Lshr(($6902|0),($6903|0),24)|0);
 $6905 = (getTempRet0() | 0);
 $6906 = (_bitshift64Shl(($6902|0),($6903|0),40)|0);
 $6907 = (getTempRet0() | 0);
 $6908 = $6904 | $6906;
 $6909 = $6905 | $6907;
 $6910 = (_i64Add(($6908|0),($6909|0),($6888|0),($6889|0))|0);
 $6911 = (getTempRet0() | 0);
 $6912 = (_bitshift64Shl(($6888|0),($6889|0),1)|0);
 $6913 = (getTempRet0() | 0);
 $6914 = $6912 & -2;
 $6915 = $6913 & 1;
 $6916 = (___muldi3(($6904|0),0,($6914|0),($6915|0))|0);
 $6917 = (getTempRet0() | 0);
 $6918 = (_i64Add(($6910|0),($6911|0),($6916|0),($6917|0))|0);
 $6919 = (getTempRet0() | 0);
 $6920 = $arrayidx406;
 $6921 = $6920;
 HEAP32[$6921>>2] = $6918;
 $6922 = (($6920) + 4)|0;
 $6923 = $6922;
 HEAP32[$6923>>2] = $6919;
 $6924 = $6918 ^ $6891;
 $6925 = $6919 ^ $6890;
 $6926 = (_bitshift64Lshr(($6924|0),($6925|0),16)|0);
 $6927 = (getTempRet0() | 0);
 $6928 = (_bitshift64Shl(($6924|0),($6925|0),48)|0);
 $6929 = (getTempRet0() | 0);
 $6930 = $6926 | $6928;
 $6931 = $6927 | $6929;
 $6932 = $arrayidx12226;
 $6933 = $6932;
 HEAP32[$6933>>2] = $6930;
 $6934 = (($6932) + 4)|0;
 $6935 = $6934;
 HEAP32[$6935>>2] = $6931;
 $6936 = (_i64Add(($6930|0),($6931|0),($6900|0),($6901|0))|0);
 $6937 = (getTempRet0() | 0);
 $6938 = (_bitshift64Shl(($6900|0),($6901|0),1)|0);
 $6939 = (getTempRet0() | 0);
 $6940 = $6938 & -2;
 $6941 = $6939 & 1;
 $6942 = (___muldi3(($6926|0),0,($6940|0),($6941|0))|0);
 $6943 = (getTempRet0() | 0);
 $6944 = (_i64Add(($6936|0),($6937|0),($6942|0),($6943|0))|0);
 $6945 = (getTempRet0() | 0);
 $6946 = $arrayidx8701;
 $6947 = $6946;
 HEAP32[$6947>>2] = $6944;
 $6948 = (($6946) + 4)|0;
 $6949 = $6948;
 HEAP32[$6949>>2] = $6945;
 $6950 = $6944 ^ $6908;
 $6951 = $6945 ^ $6909;
 $6952 = (_bitshift64Lshr(($6950|0),($6951|0),63)|0);
 $6953 = (getTempRet0() | 0);
 $6954 = (_bitshift64Shl(($6950|0),($6951|0),1)|0);
 $6955 = (getTempRet0() | 0);
 $6956 = $6952 | $6954;
 $6957 = $6953 | $6955;
 $6958 = $arrayidx3931;
 $6959 = $6958;
 HEAP32[$6959>>2] = $6956;
 $6960 = (($6958) + 4)|0;
 $6961 = $6960;
 HEAP32[$6961>>2] = $6957;
 $6962 = (_i64Add(($6800|0),($6801|0),($6684|0),($6685|0))|0);
 $6963 = (getTempRet0() | 0);
 $6964 = (_bitshift64Shl(($6684|0),($6685|0),1)|0);
 $6965 = (getTempRet0() | 0);
 $6966 = $6964 & -2;
 $6967 = $6965 & 1;
 $6968 = (___muldi3(($6800|0),0,($6966|0),($6967|0))|0);
 $6969 = (getTempRet0() | 0);
 $6970 = (_i64Add(($6962|0),($6963|0),($6968|0),($6969|0))|0);
 $6971 = (getTempRet0() | 0);
 $6972 = $6970 ^ $6614;
 $6973 = $6971 ^ $6615;
 $6974 = (_i64Add(($6973|0),($6972|0),($6866|0),($6867|0))|0);
 $6975 = (getTempRet0() | 0);
 $6976 = (_bitshift64Shl(($6866|0),($6867|0),1)|0);
 $6977 = (getTempRet0() | 0);
 $6978 = $6976 & -2;
 $6979 = $6977 & 1;
 $6980 = (___muldi3(($6973|0),0,($6978|0),($6979|0))|0);
 $6981 = (getTempRet0() | 0);
 $6982 = (_i64Add(($6974|0),($6975|0),($6980|0),($6981|0))|0);
 $6983 = (getTempRet0() | 0);
 $6984 = $6982 ^ $6800;
 $6985 = $6983 ^ $6801;
 $6986 = (_bitshift64Lshr(($6984|0),($6985|0),24)|0);
 $6987 = (getTempRet0() | 0);
 $6988 = (_bitshift64Shl(($6984|0),($6985|0),40)|0);
 $6989 = (getTempRet0() | 0);
 $6990 = $6986 | $6988;
 $6991 = $6987 | $6989;
 $6992 = (_i64Add(($6990|0),($6991|0),($6970|0),($6971|0))|0);
 $6993 = (getTempRet0() | 0);
 $6994 = (_bitshift64Shl(($6970|0),($6971|0),1)|0);
 $6995 = (getTempRet0() | 0);
 $6996 = $6994 & -2;
 $6997 = $6995 & 1;
 $6998 = (___muldi3(($6986|0),0,($6996|0),($6997|0))|0);
 $6999 = (getTempRet0() | 0);
 $7000 = (_i64Add(($6992|0),($6993|0),($6998|0),($6999|0))|0);
 $7001 = (getTempRet0() | 0);
 $7002 = $arrayidx613;
 $7003 = $7002;
 HEAP32[$7003>>2] = $7000;
 $7004 = (($7002) + 4)|0;
 $7005 = $7004;
 HEAP32[$7005>>2] = $7001;
 $7006 = $7000 ^ $6973;
 $7007 = $7001 ^ $6972;
 $7008 = (_bitshift64Lshr(($7006|0),($7007|0),16)|0);
 $7009 = (getTempRet0() | 0);
 $7010 = (_bitshift64Shl(($7006|0),($7007|0),48)|0);
 $7011 = (getTempRet0() | 0);
 $7012 = $7008 | $7010;
 $7013 = $7009 | $7011;
 $7014 = $arrayidx10360;
 $7015 = $7014;
 HEAP32[$7015>>2] = $7012;
 $7016 = (($7014) + 4)|0;
 $7017 = $7016;
 HEAP32[$7017>>2] = $7013;
 $7018 = (_i64Add(($7012|0),($7013|0),($6982|0),($6983|0))|0);
 $7019 = (getTempRet0() | 0);
 $7020 = (_bitshift64Shl(($6982|0),($6983|0),1)|0);
 $7021 = (getTempRet0() | 0);
 $7022 = $7020 & -2;
 $7023 = $7021 & 1;
 $7024 = (___muldi3(($7008|0),0,($7022|0),($7023|0))|0);
 $7025 = (getTempRet0() | 0);
 $7026 = (_i64Add(($7018|0),($7019|0),($7024|0),($7025|0))|0);
 $7027 = (getTempRet0() | 0);
 $7028 = $arrayidx8908;
 $7029 = $7028;
 HEAP32[$7029>>2] = $7026;
 $7030 = (($7028) + 4)|0;
 $7031 = $7030;
 HEAP32[$7031>>2] = $7027;
 $7032 = $7026 ^ $6990;
 $7033 = $7027 ^ $6991;
 $7034 = (_bitshift64Lshr(($7032|0),($7033|0),63)|0);
 $7035 = (getTempRet0() | 0);
 $7036 = (_bitshift64Shl(($7032|0),($7033|0),1)|0);
 $7037 = (getTempRet0() | 0);
 $7038 = $7034 | $7036;
 $7039 = $7035 | $7037;
 $7040 = $arrayidx5383;
 $7041 = $7040;
 HEAP32[$7041>>2] = $7038;
 $7042 = (($7040) + 4)|0;
 $7043 = $7042;
 HEAP32[$7043>>2] = $7039;
 $7044 = (_i64Add(($6874|0),($6875|0),($6766|0),($6767|0))|0);
 $7045 = (getTempRet0() | 0);
 $7046 = (_bitshift64Shl(($6766|0),($6767|0),1)|0);
 $7047 = (getTempRet0() | 0);
 $7048 = $7046 & -2;
 $7049 = $7047 & 1;
 $7050 = (___muldi3(($7048|0),($7049|0),($6874|0),0)|0);
 $7051 = (getTempRet0() | 0);
 $7052 = (_i64Add(($7044|0),($7045|0),($7050|0),($7051|0))|0);
 $7053 = (getTempRet0() | 0);
 $7054 = $7052 ^ $6696;
 $7055 = $7053 ^ $6697;
 $7056 = (_i64Add(($7055|0),($7054|0),($6628|0),($6629|0))|0);
 $7057 = (getTempRet0() | 0);
 $7058 = (_bitshift64Shl(($6628|0),($6629|0),1)|0);
 $7059 = (getTempRet0() | 0);
 $7060 = $7058 & -2;
 $7061 = $7059 & 1;
 $7062 = (___muldi3(($7055|0),0,($7060|0),($7061|0))|0);
 $7063 = (getTempRet0() | 0);
 $7064 = (_i64Add(($7056|0),($7057|0),($7062|0),($7063|0))|0);
 $7065 = (getTempRet0() | 0);
 $7066 = $7064 ^ $6874;
 $7067 = $7065 ^ $6875;
 $7068 = (_bitshift64Lshr(($7066|0),($7067|0),24)|0);
 $7069 = (getTempRet0() | 0);
 $7070 = (_bitshift64Shl(($7066|0),($7067|0),40)|0);
 $7071 = (getTempRet0() | 0);
 $7072 = $7068 | $7070;
 $7073 = $7069 | $7071;
 $7074 = (_i64Add(($7072|0),($7073|0),($7052|0),($7053|0))|0);
 $7075 = (getTempRet0() | 0);
 $7076 = (_bitshift64Shl(($7052|0),($7053|0),1)|0);
 $7077 = (getTempRet0() | 0);
 $7078 = $7076 & -2;
 $7079 = $7077 & 1;
 $7080 = (___muldi3(($7068|0),0,($7078|0),($7079|0))|0);
 $7081 = (getTempRet0() | 0);
 $7082 = (_i64Add(($7074|0),($7075|0),($7080|0),($7081|0))|0);
 $7083 = (getTempRet0() | 0);
 $7084 = $arrayidx2065;
 $7085 = $7084;
 HEAP32[$7085>>2] = $7082;
 $7086 = (($7084) + 4)|0;
 $7087 = $7086;
 HEAP32[$7087>>2] = $7083;
 $7088 = $7082 ^ $7055;
 $7089 = $7083 ^ $7054;
 $7090 = (_bitshift64Lshr(($7088|0),($7089|0),16)|0);
 $7091 = (getTempRet0() | 0);
 $7092 = (_bitshift64Shl(($7088|0),($7089|0),48)|0);
 $7093 = (getTempRet0() | 0);
 $7094 = $7090 | $7092;
 $7095 = $7091 | $7093;
 $7096 = $arrayidx10567;
 $7097 = $7096;
 HEAP32[$7097>>2] = $7094;
 $7098 = (($7096) + 4)|0;
 $7099 = $7098;
 HEAP32[$7099>>2] = $7095;
 $7100 = (_i64Add(($7094|0),($7095|0),($7064|0),($7065|0))|0);
 $7101 = (getTempRet0() | 0);
 $7102 = (_bitshift64Shl(($7064|0),($7065|0),1)|0);
 $7103 = (getTempRet0() | 0);
 $7104 = $7102 & -2;
 $7105 = $7103 & 1;
 $7106 = (___muldi3(($7090|0),0,($7104|0),($7105|0))|0);
 $7107 = (getTempRet0() | 0);
 $7108 = (_i64Add(($7100|0),($7101|0),($7106|0),($7107|0))|0);
 $7109 = (getTempRet0() | 0);
 $7110 = $arrayidx7042;
 $7111 = $7110;
 HEAP32[$7111>>2] = $7108;
 $7112 = (($7110) + 4)|0;
 $7113 = $7112;
 HEAP32[$7113>>2] = $7109;
 $7114 = $7108 ^ $7072;
 $7115 = $7109 ^ $7073;
 $7116 = (_bitshift64Lshr(($7114|0),($7115|0),63)|0);
 $7117 = (getTempRet0() | 0);
 $7118 = (_bitshift64Shl(($7114|0),($7115|0),1)|0);
 $7119 = (getTempRet0() | 0);
 $7120 = $7116 | $7118;
 $7121 = $7117 | $7119;
 $7122 = $arrayidx5590;
 $7123 = $7122;
 HEAP32[$7123>>2] = $7120;
 $7124 = (($7122) + 4)|0;
 $7125 = $7124;
 HEAP32[$7125>>2] = $7121;
 $7126 = (_i64Add(($6844|0),($6845|0),($6640|0),($6641|0))|0);
 $7127 = (getTempRet0() | 0);
 $7128 = (_bitshift64Shl(($6844|0),($6845|0),1)|0);
 $7129 = (getTempRet0() | 0);
 $7130 = $7128 & -2;
 $7131 = $7129 & 1;
 $7132 = (___muldi3(($7130|0),($7131|0),($6640|0),0)|0);
 $7133 = (getTempRet0() | 0);
 $7134 = (_i64Add(($7126|0),($7127|0),($7132|0),($7133|0))|0);
 $7135 = (getTempRet0() | 0);
 $7136 = $6778 ^ $7134;
 $7137 = $6779 ^ $7135;
 $7138 = (_i64Add(($7137|0),($7136|0),($6710|0),($6711|0))|0);
 $7139 = (getTempRet0() | 0);
 $7140 = (_bitshift64Shl(($6710|0),($6711|0),1)|0);
 $7141 = (getTempRet0() | 0);
 $7142 = $7140 & -2;
 $7143 = $7141 & 1;
 $7144 = (___muldi3(($7137|0),0,($7142|0),($7143|0))|0);
 $7145 = (getTempRet0() | 0);
 $7146 = (_i64Add(($7138|0),($7139|0),($7144|0),($7145|0))|0);
 $7147 = (getTempRet0() | 0);
 $7148 = $7146 ^ $6640;
 $7149 = $7147 ^ $6641;
 $7150 = (_bitshift64Lshr(($7148|0),($7149|0),24)|0);
 $7151 = (getTempRet0() | 0);
 $7152 = (_bitshift64Shl(($7148|0),($7149|0),40)|0);
 $7153 = (getTempRet0() | 0);
 $7154 = $7150 | $7152;
 $7155 = $7151 | $7153;
 $7156 = (_i64Add(($7154|0),($7155|0),($7134|0),($7135|0))|0);
 $7157 = (getTempRet0() | 0);
 $7158 = (_bitshift64Shl(($7134|0),($7135|0),1)|0);
 $7159 = (getTempRet0() | 0);
 $7160 = $7158 & -2;
 $7161 = $7159 & 1;
 $7162 = (___muldi3(($7150|0),0,($7160|0),($7161|0))|0);
 $7163 = (getTempRet0() | 0);
 $7164 = (_i64Add(($7156|0),($7157|0),($7162|0),($7163|0))|0);
 $7165 = (getTempRet0() | 0);
 $7166 = $arrayidx2272;
 $7167 = $7166;
 HEAP32[$7167>>2] = $7164;
 $7168 = (($7166) + 4)|0;
 $7169 = $7168;
 HEAP32[$7169>>2] = $7165;
 $7170 = $7164 ^ $7137;
 $7171 = $7165 ^ $7136;
 $7172 = (_bitshift64Lshr(($7170|0),($7171|0),16)|0);
 $7173 = (getTempRet0() | 0);
 $7174 = (_bitshift64Shl(($7170|0),($7171|0),48)|0);
 $7175 = (getTempRet0() | 0);
 $7176 = $7172 | $7174;
 $7177 = $7173 | $7175;
 $7178 = $arrayidx12019;
 $7179 = $7178;
 HEAP32[$7179>>2] = $7176;
 $7180 = (($7178) + 4)|0;
 $7181 = $7180;
 HEAP32[$7181>>2] = $7177;
 $7182 = (_i64Add(($7176|0),($7177|0),($7146|0),($7147|0))|0);
 $7183 = (getTempRet0() | 0);
 $7184 = (_bitshift64Shl(($7146|0),($7147|0),1)|0);
 $7185 = (getTempRet0() | 0);
 $7186 = $7184 & -2;
 $7187 = $7185 & 1;
 $7188 = (___muldi3(($7172|0),0,($7186|0),($7187|0))|0);
 $7189 = (getTempRet0() | 0);
 $7190 = (_i64Add(($7182|0),($7183|0),($7188|0),($7189|0))|0);
 $7191 = (getTempRet0() | 0);
 $7192 = $arrayidx7249;
 $7193 = $7192;
 HEAP32[$7193>>2] = $7190;
 $7194 = (($7192) + 4)|0;
 $7195 = $7194;
 HEAP32[$7195>>2] = $7191;
 $7196 = $7190 ^ $7154;
 $7197 = $7191 ^ $7155;
 $7198 = (_bitshift64Lshr(($7196|0),($7197|0),63)|0);
 $7199 = (getTempRet0() | 0);
 $7200 = (_bitshift64Shl(($7196|0),($7197|0),1)|0);
 $7201 = (getTempRet0() | 0);
 $7202 = $7198 | $7200;
 $7203 = $7199 | $7201;
 $7204 = $arrayidx3724;
 $7205 = $7204;
 HEAP32[$7205>>2] = $7202;
 $7206 = (($7204) + 4)|0;
 $7207 = $7206;
 HEAP32[$7207>>2] = $7203;
 $7208 = (_i64Add(($2214|0),($2215|0),($734|0),($735|0))|0);
 $7209 = (getTempRet0() | 0);
 $7210 = (_bitshift64Shl(($734|0),($735|0),1)|0);
 $7211 = (getTempRet0() | 0);
 $7212 = $7210 & -2;
 $7213 = $7211 & 1;
 $7214 = (___muldi3(($2214|0),0,($7212|0),($7213|0))|0);
 $7215 = (getTempRet0() | 0);
 $7216 = (_i64Add(($7208|0),($7209|0),($7214|0),($7215|0))|0);
 $7217 = (getTempRet0() | 0);
 $7218 = $5174 ^ $7216;
 $7219 = $5175 ^ $7217;
 $7220 = (_i64Add(($7219|0),($7218|0),($3694|0),($3695|0))|0);
 $7221 = (getTempRet0() | 0);
 $7222 = (_bitshift64Shl(($3694|0),($3695|0),1)|0);
 $7223 = (getTempRet0() | 0);
 $7224 = $7222 & -2;
 $7225 = $7223 & 1;
 $7226 = (___muldi3(($7219|0),0,($7224|0),($7225|0))|0);
 $7227 = (getTempRet0() | 0);
 $7228 = (_i64Add(($7220|0),($7221|0),($7226|0),($7227|0))|0);
 $7229 = (getTempRet0() | 0);
 $7230 = $7228 ^ $2214;
 $7231 = $7229 ^ $2215;
 $7232 = (_bitshift64Lshr(($7230|0),($7231|0),24)|0);
 $7233 = (getTempRet0() | 0);
 $7234 = (_bitshift64Shl(($7230|0),($7231|0),40)|0);
 $7235 = (getTempRet0() | 0);
 $7236 = $7232 | $7234;
 $7237 = $7233 | $7235;
 $7238 = (_i64Add(($7236|0),($7237|0),($7216|0),($7217|0))|0);
 $7239 = (getTempRet0() | 0);
 $7240 = (_bitshift64Shl(($7216|0),($7217|0),1)|0);
 $7241 = (getTempRet0() | 0);
 $7242 = $7240 & -2;
 $7243 = $7241 & 1;
 $7244 = (___muldi3(($7232|0),0,($7242|0),($7243|0))|0);
 $7245 = (getTempRet0() | 0);
 $7246 = (_i64Add(($7238|0),($7239|0),($7244|0),($7245|0))|0);
 $7247 = (getTempRet0() | 0);
 $7248 = $arrayidx5;
 $7249 = $7248;
 HEAP32[$7249>>2] = $7246;
 $7250 = (($7248) + 4)|0;
 $7251 = $7250;
 HEAP32[$7251>>2] = $7247;
 $7252 = $7246 ^ $7219;
 $7253 = $7247 ^ $7218;
 $7254 = (_bitshift64Lshr(($7252|0),($7253|0),16)|0);
 $7255 = (getTempRet0() | 0);
 $7256 = (_bitshift64Shl(($7252|0),($7253|0),48)|0);
 $7257 = (getTempRet0() | 0);
 $7258 = $7254 | $7256;
 $7259 = $7255 | $7257;
 $7260 = $arrayidx9950;
 $7261 = $7260;
 HEAP32[$7261>>2] = $7258;
 $7262 = (($7260) + 4)|0;
 $7263 = $7262;
 HEAP32[$7263>>2] = $7259;
 $7264 = (_i64Add(($7258|0),($7259|0),($7228|0),($7229|0))|0);
 $7265 = (getTempRet0() | 0);
 $7266 = (_bitshift64Shl(($7228|0),($7229|0),1)|0);
 $7267 = (getTempRet0() | 0);
 $7268 = $7266 & -2;
 $7269 = $7267 & 1;
 $7270 = (___muldi3(($7254|0),0,($7268|0),($7269|0))|0);
 $7271 = (getTempRet0() | 0);
 $7272 = (_i64Add(($7264|0),($7265|0),($7270|0),($7271|0))|0);
 $7273 = (getTempRet0() | 0);
 $7274 = $arrayidx6632;
 $7275 = $7274;
 HEAP32[$7275>>2] = $7272;
 $7276 = (($7274) + 4)|0;
 $7277 = $7276;
 HEAP32[$7277>>2] = $7273;
 $7278 = $7272 ^ $7236;
 $7279 = $7273 ^ $7237;
 $7280 = (_bitshift64Lshr(($7278|0),($7279|0),63)|0);
 $7281 = (getTempRet0() | 0);
 $7282 = (_bitshift64Shl(($7278|0),($7279|0),1)|0);
 $7283 = (getTempRet0() | 0);
 $7284 = $7280 | $7282;
 $7285 = $7281 | $7283;
 $7286 = $arrayidx3314;
 $7287 = $7286;
 HEAP32[$7287>>2] = $7284;
 $7288 = (($7286) + 4)|0;
 $7289 = $7288;
 HEAP32[$7289>>2] = $7285;
 $7290 = (_i64Add(($1968|0),($1969|0),($488|0),($489|0))|0);
 $7291 = (getTempRet0() | 0);
 $7292 = (_bitshift64Shl(($488|0),($489|0),1)|0);
 $7293 = (getTempRet0() | 0);
 $7294 = $7292 & -2;
 $7295 = $7293 & 1;
 $7296 = (___muldi3(($1968|0),0,($7294|0),($7295|0))|0);
 $7297 = (getTempRet0() | 0);
 $7298 = (_i64Add(($7290|0),($7291|0),($7296|0),($7297|0))|0);
 $7299 = (getTempRet0() | 0);
 $7300 = $4928 ^ $7298;
 $7301 = $4929 ^ $7299;
 $7302 = (_i64Add(($7301|0),($7300|0),($3448|0),($3449|0))|0);
 $7303 = (getTempRet0() | 0);
 $7304 = (_bitshift64Shl(($3448|0),($3449|0),1)|0);
 $7305 = (getTempRet0() | 0);
 $7306 = $7304 & -2;
 $7307 = $7305 & 1;
 $7308 = (___muldi3(($7301|0),0,($7306|0),($7307|0))|0);
 $7309 = (getTempRet0() | 0);
 $7310 = (_i64Add(($7302|0),($7303|0),($7308|0),($7309|0))|0);
 $7311 = (getTempRet0() | 0);
 $7312 = $7310 ^ $1968;
 $7313 = $7311 ^ $1969;
 $7314 = (_bitshift64Lshr(($7312|0),($7313|0),24)|0);
 $7315 = (getTempRet0() | 0);
 $7316 = (_bitshift64Shl(($7312|0),($7313|0),40)|0);
 $7317 = (getTempRet0() | 0);
 $7318 = $7314 | $7316;
 $7319 = $7315 | $7317;
 $7320 = (_i64Add(($7318|0),($7319|0),($7298|0),($7299|0))|0);
 $7321 = (getTempRet0() | 0);
 $7322 = (_bitshift64Shl(($7298|0),($7299|0),1)|0);
 $7323 = (getTempRet0() | 0);
 $7324 = $7322 & -2;
 $7325 = $7323 & 1;
 $7326 = (___muldi3(($7314|0),0,($7324|0),($7325|0))|0);
 $7327 = (getTempRet0() | 0);
 $7328 = (_i64Add(($7320|0),($7321|0),($7326|0),($7327|0))|0);
 $7329 = (getTempRet0() | 0);
 $7330 = $arrayidx203;
 $7331 = $7330;
 HEAP32[$7331>>2] = $7328;
 $7332 = (($7330) + 4)|0;
 $7333 = $7332;
 HEAP32[$7333>>2] = $7329;
 $7334 = $7328 ^ $7301;
 $7335 = $7329 ^ $7300;
 $7336 = (_bitshift64Lshr(($7334|0),($7335|0),16)|0);
 $7337 = (getTempRet0() | 0);
 $7338 = (_bitshift64Shl(($7334|0),($7335|0),48)|0);
 $7339 = (getTempRet0() | 0);
 $7340 = $7336 | $7338;
 $7341 = $7337 | $7339;
 $7342 = $arrayidx10157;
 $7343 = $7342;
 HEAP32[$7343>>2] = $7340;
 $7344 = (($7342) + 4)|0;
 $7345 = $7344;
 HEAP32[$7345>>2] = $7341;
 $7346 = (_i64Add(($7340|0),($7341|0),($7310|0),($7311|0))|0);
 $7347 = (getTempRet0() | 0);
 $7348 = (_bitshift64Shl(($7310|0),($7311|0),1)|0);
 $7349 = (getTempRet0() | 0);
 $7350 = $7348 & -2;
 $7351 = $7349 & 1;
 $7352 = (___muldi3(($7336|0),0,($7350|0),($7351|0))|0);
 $7353 = (getTempRet0() | 0);
 $7354 = (_i64Add(($7346|0),($7347|0),($7352|0),($7353|0))|0);
 $7355 = (getTempRet0() | 0);
 $7356 = $arrayidx6839;
 $7357 = $7356;
 HEAP32[$7357>>2] = $7354;
 $7358 = (($7356) + 4)|0;
 $7359 = $7358;
 HEAP32[$7359>>2] = $7355;
 $7360 = $7354 ^ $7318;
 $7361 = $7355 ^ $7319;
 $7362 = (_bitshift64Lshr(($7360|0),($7361|0),63)|0);
 $7363 = (getTempRet0() | 0);
 $7364 = (_bitshift64Shl(($7360|0),($7361|0),1)|0);
 $7365 = (getTempRet0() | 0);
 $7366 = $7362 | $7364;
 $7367 = $7363 | $7365;
 $7368 = $arrayidx3521;
 $7369 = $7368;
 HEAP32[$7369>>2] = $7366;
 $7370 = (($7368) + 4)|0;
 $7371 = $7370;
 HEAP32[$7371>>2] = $7367;
 $7372 = (_i64Add(($2954|0),($2955|0),($1474|0),($1475|0))|0);
 $7373 = (getTempRet0() | 0);
 $7374 = (_bitshift64Shl(($1474|0),($1475|0),1)|0);
 $7375 = (getTempRet0() | 0);
 $7376 = $7374 & -2;
 $7377 = $7375 & 1;
 $7378 = (___muldi3(($2954|0),0,($7376|0),($7377|0))|0);
 $7379 = (getTempRet0() | 0);
 $7380 = (_i64Add(($7372|0),($7373|0),($7378|0),($7379|0))|0);
 $7381 = (getTempRet0() | 0);
 $7382 = $5914 ^ $7380;
 $7383 = $5915 ^ $7381;
 $7384 = (_i64Add(($7383|0),($7382|0),($4434|0),($4435|0))|0);
 $7385 = (getTempRet0() | 0);
 $7386 = (_bitshift64Shl(($4434|0),($4435|0),1)|0);
 $7387 = (getTempRet0() | 0);
 $7388 = $7386 & -2;
 $7389 = $7387 & 1;
 $7390 = (___muldi3(($7383|0),0,($7388|0),($7389|0))|0);
 $7391 = (getTempRet0() | 0);
 $7392 = (_i64Add(($7384|0),($7385|0),($7390|0),($7391|0))|0);
 $7393 = (getTempRet0() | 0);
 $7394 = $7392 ^ $2954;
 $7395 = $7393 ^ $2955;
 $7396 = (_bitshift64Lshr(($7394|0),($7395|0),24)|0);
 $7397 = (getTempRet0() | 0);
 $7398 = (_bitshift64Shl(($7394|0),($7395|0),40)|0);
 $7399 = (getTempRet0() | 0);
 $7400 = $7396 | $7398;
 $7401 = $7397 | $7399;
 $7402 = (_i64Add(($7400|0),($7401|0),($7380|0),($7381|0))|0);
 $7403 = (getTempRet0() | 0);
 $7404 = (_bitshift64Shl(($7380|0),($7381|0),1)|0);
 $7405 = (getTempRet0() | 0);
 $7406 = $7404 & -2;
 $7407 = $7405 & 1;
 $7408 = (___muldi3(($7396|0),0,($7406|0),($7407|0))|0);
 $7409 = (getTempRet0() | 0);
 $7410 = (_i64Add(($7402|0),($7403|0),($7408|0),($7409|0))|0);
 $7411 = (getTempRet0() | 0);
 $7412 = $arrayidx1655;
 $7413 = $7412;
 HEAP32[$7413>>2] = $7410;
 $7414 = (($7412) + 4)|0;
 $7415 = $7414;
 HEAP32[$7415>>2] = $7411;
 $7416 = $7410 ^ $7383;
 $7417 = $7411 ^ $7382;
 $7418 = (_bitshift64Lshr(($7416|0),($7417|0),16)|0);
 $7419 = (getTempRet0() | 0);
 $7420 = (_bitshift64Shl(($7416|0),($7417|0),48)|0);
 $7421 = (getTempRet0() | 0);
 $7422 = $7418 | $7420;
 $7423 = $7419 | $7421;
 $7424 = $arrayidx11609;
 $7425 = $7424;
 HEAP32[$7425>>2] = $7422;
 $7426 = (($7424) + 4)|0;
 $7427 = $7426;
 HEAP32[$7427>>2] = $7423;
 $7428 = (_i64Add(($7422|0),($7423|0),($7392|0),($7393|0))|0);
 $7429 = (getTempRet0() | 0);
 $7430 = (_bitshift64Shl(($7392|0),($7393|0),1)|0);
 $7431 = (getTempRet0() | 0);
 $7432 = $7430 & -2;
 $7433 = $7431 & 1;
 $7434 = (___muldi3(($7418|0),0,($7432|0),($7433|0))|0);
 $7435 = (getTempRet0() | 0);
 $7436 = (_i64Add(($7428|0),($7429|0),($7434|0),($7435|0))|0);
 $7437 = (getTempRet0() | 0);
 $7438 = $7436 ^ $7400;
 $7439 = $7437 ^ $7401;
 $7440 = (_bitshift64Lshr(($7438|0),($7439|0),63)|0);
 $7441 = (getTempRet0() | 0);
 $7442 = (_bitshift64Shl(($7438|0),($7439|0),1)|0);
 $7443 = (getTempRet0() | 0);
 $7444 = $7440 | $7442;
 $7445 = $7441 | $7443;
 $7446 = $arrayidx4973;
 $7447 = $7446;
 HEAP32[$7447>>2] = $7444;
 $7448 = (($7446) + 4)|0;
 $7449 = $7448;
 HEAP32[$7449>>2] = $7445;
 $7450 = (_i64Add(($2708|0),($2709|0),($1228|0),($1229|0))|0);
 $7451 = (getTempRet0() | 0);
 $7452 = (_bitshift64Shl(($1228|0),($1229|0),1)|0);
 $7453 = (getTempRet0() | 0);
 $7454 = $7452 & -2;
 $7455 = $7453 & 1;
 $7456 = (___muldi3(($2708|0),0,($7454|0),($7455|0))|0);
 $7457 = (getTempRet0() | 0);
 $7458 = (_i64Add(($7450|0),($7451|0),($7456|0),($7457|0))|0);
 $7459 = (getTempRet0() | 0);
 $7460 = $5668 ^ $7458;
 $7461 = $5669 ^ $7459;
 $7462 = (_i64Add(($7461|0),($7460|0),($4188|0),($4189|0))|0);
 $7463 = (getTempRet0() | 0);
 $7464 = (_bitshift64Shl(($4188|0),($4189|0),1)|0);
 $7465 = (getTempRet0() | 0);
 $7466 = $7464 & -2;
 $7467 = $7465 & 1;
 $7468 = (___muldi3(($7461|0),0,($7466|0),($7467|0))|0);
 $7469 = (getTempRet0() | 0);
 $7470 = (_i64Add(($7462|0),($7463|0),($7468|0),($7469|0))|0);
 $7471 = (getTempRet0() | 0);
 $7472 = $7470 ^ $2708;
 $7473 = $7471 ^ $2709;
 $7474 = (_bitshift64Lshr(($7472|0),($7473|0),24)|0);
 $7475 = (getTempRet0() | 0);
 $7476 = (_bitshift64Shl(($7472|0),($7473|0),40)|0);
 $7477 = (getTempRet0() | 0);
 $7478 = $7474 | $7476;
 $7479 = $7475 | $7477;
 $7480 = (_i64Add(($7478|0),($7479|0),($7458|0),($7459|0))|0);
 $7481 = (getTempRet0() | 0);
 $7482 = (_bitshift64Shl(($7458|0),($7459|0),1)|0);
 $7483 = (getTempRet0() | 0);
 $7484 = $7482 & -2;
 $7485 = $7483 & 1;
 $7486 = (___muldi3(($7474|0),0,($7484|0),($7485|0))|0);
 $7487 = (getTempRet0() | 0);
 $7488 = (_i64Add(($7480|0),($7481|0),($7486|0),($7487|0))|0);
 $7489 = (getTempRet0() | 0);
 $7490 = $arrayidx1862;
 $7491 = $7490;
 HEAP32[$7491>>2] = $7488;
 $7492 = (($7490) + 4)|0;
 $7493 = $7492;
 HEAP32[$7493>>2] = $7489;
 $7494 = $7488 ^ $7461;
 $7495 = $7489 ^ $7460;
 $7496 = (_bitshift64Lshr(($7494|0),($7495|0),16)|0);
 $7497 = (getTempRet0() | 0);
 $7498 = (_bitshift64Shl(($7494|0),($7495|0),48)|0);
 $7499 = (getTempRet0() | 0);
 $7500 = $7496 | $7498;
 $7501 = $7497 | $7499;
 $7502 = (_i64Add(($7500|0),($7501|0),($7470|0),($7471|0))|0);
 $7503 = (getTempRet0() | 0);
 $7504 = (_bitshift64Shl(($7470|0),($7471|0),1)|0);
 $7505 = (getTempRet0() | 0);
 $7506 = $7504 & -2;
 $7507 = $7505 & 1;
 $7508 = (___muldi3(($7496|0),0,($7506|0),($7507|0))|0);
 $7509 = (getTempRet0() | 0);
 $7510 = (_i64Add(($7502|0),($7503|0),($7508|0),($7509|0))|0);
 $7511 = (getTempRet0() | 0);
 $7512 = $7510 ^ $7478;
 $7513 = $7511 ^ $7479;
 $7514 = (_bitshift64Lshr(($7512|0),($7513|0),63)|0);
 $7515 = (getTempRet0() | 0);
 $7516 = (_bitshift64Shl(($7512|0),($7513|0),1)|0);
 $7517 = (getTempRet0() | 0);
 $7518 = $7514 | $7516;
 $7519 = $7515 | $7517;
 $7520 = $arrayidx5180;
 $7521 = $7520;
 HEAP32[$7521>>2] = $7518;
 $7522 = (($7520) + 4)|0;
 $7523 = $7522;
 HEAP32[$7523>>2] = $7519;
 $7524 = (_i64Add(($7366|0),($7367|0),($7246|0),($7247|0))|0);
 $7525 = (getTempRet0() | 0);
 $7526 = (_bitshift64Shl(($7246|0),($7247|0),1)|0);
 $7527 = (getTempRet0() | 0);
 $7528 = $7526 & -2;
 $7529 = $7527 & 1;
 $7530 = (___muldi3(($7366|0),0,($7528|0),($7529|0))|0);
 $7531 = (getTempRet0() | 0);
 $7532 = (_i64Add(($7524|0),($7525|0),($7530|0),($7531|0))|0);
 $7533 = (getTempRet0() | 0);
 $7534 = $7500 ^ $7532;
 $7535 = $7501 ^ $7533;
 $7536 = (_i64Add(($7436|0),($7437|0),($7535|0),($7534|0))|0);
 $7537 = (getTempRet0() | 0);
 $7538 = (_bitshift64Shl(($7436|0),($7437|0),1)|0);
 $7539 = (getTempRet0() | 0);
 $7540 = $7538 & -2;
 $7541 = $7539 & 1;
 $7542 = (___muldi3(($7540|0),($7541|0),($7535|0),0)|0);
 $7543 = (getTempRet0() | 0);
 $7544 = (_i64Add(($7536|0),($7537|0),($7542|0),($7543|0))|0);
 $7545 = (getTempRet0() | 0);
 $7546 = $7544 ^ $7366;
 $7547 = $7545 ^ $7367;
 $7548 = (_bitshift64Lshr(($7546|0),($7547|0),24)|0);
 $7549 = (getTempRet0() | 0);
 $7550 = (_bitshift64Shl(($7546|0),($7547|0),40)|0);
 $7551 = (getTempRet0() | 0);
 $7552 = $7548 | $7550;
 $7553 = $7549 | $7551;
 $7554 = (_i64Add(($7552|0),($7553|0),($7532|0),($7533|0))|0);
 $7555 = (getTempRet0() | 0);
 $7556 = (_bitshift64Shl(($7532|0),($7533|0),1)|0);
 $7557 = (getTempRet0() | 0);
 $7558 = $7556 & -2;
 $7559 = $7557 & 1;
 $7560 = (___muldi3(($7548|0),0,($7558|0),($7559|0))|0);
 $7561 = (getTempRet0() | 0);
 $7562 = (_i64Add(($7554|0),($7555|0),($7560|0),($7561|0))|0);
 $7563 = (getTempRet0() | 0);
 $7564 = $arrayidx5;
 $7565 = $7564;
 HEAP32[$7565>>2] = $7562;
 $7566 = (($7564) + 4)|0;
 $7567 = $7566;
 HEAP32[$7567>>2] = $7563;
 $7568 = $7562 ^ $7535;
 $7569 = $7563 ^ $7534;
 $7570 = (_bitshift64Lshr(($7568|0),($7569|0),16)|0);
 $7571 = (getTempRet0() | 0);
 $7572 = (_bitshift64Shl(($7568|0),($7569|0),48)|0);
 $7573 = (getTempRet0() | 0);
 $7574 = $7570 | $7572;
 $7575 = $7571 | $7573;
 $7576 = $arrayidx11816;
 $7577 = $7576;
 HEAP32[$7577>>2] = $7574;
 $7578 = (($7576) + 4)|0;
 $7579 = $7578;
 HEAP32[$7579>>2] = $7575;
 $7580 = (_i64Add(($7574|0),($7575|0),($7544|0),($7545|0))|0);
 $7581 = (getTempRet0() | 0);
 $7582 = (_bitshift64Shl(($7544|0),($7545|0),1)|0);
 $7583 = (getTempRet0() | 0);
 $7584 = $7582 & -2;
 $7585 = $7583 & 1;
 $7586 = (___muldi3(($7570|0),0,($7584|0),($7585|0))|0);
 $7587 = (getTempRet0() | 0);
 $7588 = (_i64Add(($7580|0),($7581|0),($7586|0),($7587|0))|0);
 $7589 = (getTempRet0() | 0);
 $7590 = $arrayidx8291;
 $7591 = $7590;
 HEAP32[$7591>>2] = $7588;
 $7592 = (($7590) + 4)|0;
 $7593 = $7592;
 HEAP32[$7593>>2] = $7589;
 $7594 = $7588 ^ $7552;
 $7595 = $7589 ^ $7553;
 $7596 = (_bitshift64Lshr(($7594|0),($7595|0),63)|0);
 $7597 = (getTempRet0() | 0);
 $7598 = (_bitshift64Shl(($7594|0),($7595|0),1)|0);
 $7599 = (getTempRet0() | 0);
 $7600 = $7596 | $7598;
 $7601 = $7597 | $7599;
 $7602 = $arrayidx3521;
 $7603 = $7602;
 HEAP32[$7603>>2] = $7600;
 $7604 = (($7602) + 4)|0;
 $7605 = $7604;
 HEAP32[$7605>>2] = $7601;
 $7606 = (_i64Add(($7444|0),($7445|0),($7328|0),($7329|0))|0);
 $7607 = (getTempRet0() | 0);
 $7608 = (_bitshift64Shl(($7328|0),($7329|0),1)|0);
 $7609 = (getTempRet0() | 0);
 $7610 = $7608 & -2;
 $7611 = $7609 & 1;
 $7612 = (___muldi3(($7444|0),0,($7610|0),($7611|0))|0);
 $7613 = (getTempRet0() | 0);
 $7614 = (_i64Add(($7606|0),($7607|0),($7612|0),($7613|0))|0);
 $7615 = (getTempRet0() | 0);
 $7616 = $7614 ^ $7258;
 $7617 = $7615 ^ $7259;
 $7618 = (_i64Add(($7617|0),($7616|0),($7510|0),($7511|0))|0);
 $7619 = (getTempRet0() | 0);
 $7620 = (_bitshift64Shl(($7510|0),($7511|0),1)|0);
 $7621 = (getTempRet0() | 0);
 $7622 = $7620 & -2;
 $7623 = $7621 & 1;
 $7624 = (___muldi3(($7617|0),0,($7622|0),($7623|0))|0);
 $7625 = (getTempRet0() | 0);
 $7626 = (_i64Add(($7618|0),($7619|0),($7624|0),($7625|0))|0);
 $7627 = (getTempRet0() | 0);
 $7628 = $7626 ^ $7444;
 $7629 = $7627 ^ $7445;
 $7630 = (_bitshift64Lshr(($7628|0),($7629|0),24)|0);
 $7631 = (getTempRet0() | 0);
 $7632 = (_bitshift64Shl(($7628|0),($7629|0),40)|0);
 $7633 = (getTempRet0() | 0);
 $7634 = $7630 | $7632;
 $7635 = $7631 | $7633;
 $7636 = (_i64Add(($7634|0),($7635|0),($7614|0),($7615|0))|0);
 $7637 = (getTempRet0() | 0);
 $7638 = (_bitshift64Shl(($7614|0),($7615|0),1)|0);
 $7639 = (getTempRet0() | 0);
 $7640 = $7638 & -2;
 $7641 = $7639 & 1;
 $7642 = (___muldi3(($7630|0),0,($7640|0),($7641|0))|0);
 $7643 = (getTempRet0() | 0);
 $7644 = (_i64Add(($7636|0),($7637|0),($7642|0),($7643|0))|0);
 $7645 = (getTempRet0() | 0);
 $7646 = $arrayidx203;
 $7647 = $7646;
 HEAP32[$7647>>2] = $7644;
 $7648 = (($7646) + 4)|0;
 $7649 = $7648;
 HEAP32[$7649>>2] = $7645;
 $7650 = $7644 ^ $7617;
 $7651 = $7645 ^ $7616;
 $7652 = (_bitshift64Lshr(($7650|0),($7651|0),16)|0);
 $7653 = (getTempRet0() | 0);
 $7654 = (_bitshift64Shl(($7650|0),($7651|0),48)|0);
 $7655 = (getTempRet0() | 0);
 $7656 = $7652 | $7654;
 $7657 = $7653 | $7655;
 $7658 = $arrayidx9950;
 $7659 = $7658;
 HEAP32[$7659>>2] = $7656;
 $7660 = (($7658) + 4)|0;
 $7661 = $7660;
 HEAP32[$7661>>2] = $7657;
 $7662 = (_i64Add(($7656|0),($7657|0),($7626|0),($7627|0))|0);
 $7663 = (getTempRet0() | 0);
 $7664 = (_bitshift64Shl(($7626|0),($7627|0),1)|0);
 $7665 = (getTempRet0() | 0);
 $7666 = $7664 & -2;
 $7667 = $7665 & 1;
 $7668 = (___muldi3(($7652|0),0,($7666|0),($7667|0))|0);
 $7669 = (getTempRet0() | 0);
 $7670 = (_i64Add(($7662|0),($7663|0),($7668|0),($7669|0))|0);
 $7671 = (getTempRet0() | 0);
 $7672 = $arrayidx8498;
 $7673 = $7672;
 HEAP32[$7673>>2] = $7670;
 $7674 = (($7672) + 4)|0;
 $7675 = $7674;
 HEAP32[$7675>>2] = $7671;
 $7676 = $7670 ^ $7634;
 $7677 = $7671 ^ $7635;
 $7678 = (_bitshift64Lshr(($7676|0),($7677|0),63)|0);
 $7679 = (getTempRet0() | 0);
 $7680 = (_bitshift64Shl(($7676|0),($7677|0),1)|0);
 $7681 = (getTempRet0() | 0);
 $7682 = $7678 | $7680;
 $7683 = $7679 | $7681;
 $7684 = $arrayidx4973;
 $7685 = $7684;
 HEAP32[$7685>>2] = $7682;
 $7686 = (($7684) + 4)|0;
 $7687 = $7686;
 HEAP32[$7687>>2] = $7683;
 $7688 = (_i64Add(($7518|0),($7519|0),($7410|0),($7411|0))|0);
 $7689 = (getTempRet0() | 0);
 $7690 = (_bitshift64Shl(($7410|0),($7411|0),1)|0);
 $7691 = (getTempRet0() | 0);
 $7692 = $7690 & -2;
 $7693 = $7691 & 1;
 $7694 = (___muldi3(($7518|0),0,($7692|0),($7693|0))|0);
 $7695 = (getTempRet0() | 0);
 $7696 = (_i64Add(($7688|0),($7689|0),($7694|0),($7695|0))|0);
 $7697 = (getTempRet0() | 0);
 $7698 = $7696 ^ $7340;
 $7699 = $7697 ^ $7341;
 $7700 = (_i64Add(($7699|0),($7698|0),($7272|0),($7273|0))|0);
 $7701 = (getTempRet0() | 0);
 $7702 = (_bitshift64Shl(($7272|0),($7273|0),1)|0);
 $7703 = (getTempRet0() | 0);
 $7704 = $7702 & -2;
 $7705 = $7703 & 1;
 $7706 = (___muldi3(($7699|0),0,($7704|0),($7705|0))|0);
 $7707 = (getTempRet0() | 0);
 $7708 = (_i64Add(($7700|0),($7701|0),($7706|0),($7707|0))|0);
 $7709 = (getTempRet0() | 0);
 $7710 = $7708 ^ $7518;
 $7711 = $7709 ^ $7519;
 $7712 = (_bitshift64Lshr(($7710|0),($7711|0),24)|0);
 $7713 = (getTempRet0() | 0);
 $7714 = (_bitshift64Shl(($7710|0),($7711|0),40)|0);
 $7715 = (getTempRet0() | 0);
 $7716 = $7712 | $7714;
 $7717 = $7713 | $7715;
 $7718 = (_i64Add(($7716|0),($7717|0),($7696|0),($7697|0))|0);
 $7719 = (getTempRet0() | 0);
 $7720 = (_bitshift64Shl(($7696|0),($7697|0),1)|0);
 $7721 = (getTempRet0() | 0);
 $7722 = $7720 & -2;
 $7723 = $7721 & 1;
 $7724 = (___muldi3(($7712|0),0,($7722|0),($7723|0))|0);
 $7725 = (getTempRet0() | 0);
 $7726 = (_i64Add(($7718|0),($7719|0),($7724|0),($7725|0))|0);
 $7727 = (getTempRet0() | 0);
 $7728 = $arrayidx1655;
 $7729 = $7728;
 HEAP32[$7729>>2] = $7726;
 $7730 = (($7728) + 4)|0;
 $7731 = $7730;
 HEAP32[$7731>>2] = $7727;
 $7732 = $7726 ^ $7699;
 $7733 = $7727 ^ $7698;
 $7734 = (_bitshift64Lshr(($7732|0),($7733|0),16)|0);
 $7735 = (getTempRet0() | 0);
 $7736 = (_bitshift64Shl(($7732|0),($7733|0),48)|0);
 $7737 = (getTempRet0() | 0);
 $7738 = $7734 | $7736;
 $7739 = $7735 | $7737;
 $7740 = $arrayidx10157;
 $7741 = $7740;
 HEAP32[$7741>>2] = $7738;
 $7742 = (($7740) + 4)|0;
 $7743 = $7742;
 HEAP32[$7743>>2] = $7739;
 $7744 = (_i64Add(($7738|0),($7739|0),($7708|0),($7709|0))|0);
 $7745 = (getTempRet0() | 0);
 $7746 = (_bitshift64Shl(($7708|0),($7709|0),1)|0);
 $7747 = (getTempRet0() | 0);
 $7748 = $7746 & -2;
 $7749 = $7747 & 1;
 $7750 = (___muldi3(($7734|0),0,($7748|0),($7749|0))|0);
 $7751 = (getTempRet0() | 0);
 $7752 = (_i64Add(($7744|0),($7745|0),($7750|0),($7751|0))|0);
 $7753 = (getTempRet0() | 0);
 $7754 = $arrayidx6632;
 $7755 = $7754;
 HEAP32[$7755>>2] = $7752;
 $7756 = (($7754) + 4)|0;
 $7757 = $7756;
 HEAP32[$7757>>2] = $7753;
 $7758 = $7752 ^ $7716;
 $7759 = $7753 ^ $7717;
 $7760 = (_bitshift64Lshr(($7758|0),($7759|0),63)|0);
 $7761 = (getTempRet0() | 0);
 $7762 = (_bitshift64Shl(($7758|0),($7759|0),1)|0);
 $7763 = (getTempRet0() | 0);
 $7764 = $7760 | $7762;
 $7765 = $7761 | $7763;
 $7766 = $arrayidx5180;
 $7767 = $7766;
 HEAP32[$7767>>2] = $7764;
 $7768 = (($7766) + 4)|0;
 $7769 = $7768;
 HEAP32[$7769>>2] = $7765;
 $7770 = (_i64Add(($7488|0),($7489|0),($7284|0),($7285|0))|0);
 $7771 = (getTempRet0() | 0);
 $7772 = (_bitshift64Shl(($7488|0),($7489|0),1)|0);
 $7773 = (getTempRet0() | 0);
 $7774 = $7772 & -2;
 $7775 = $7773 & 1;
 $7776 = (___muldi3(($7774|0),($7775|0),($7284|0),0)|0);
 $7777 = (getTempRet0() | 0);
 $7778 = (_i64Add(($7770|0),($7771|0),($7776|0),($7777|0))|0);
 $7779 = (getTempRet0() | 0);
 $7780 = $7422 ^ $7778;
 $7781 = $7423 ^ $7779;
 $7782 = (_i64Add(($7781|0),($7780|0),($7354|0),($7355|0))|0);
 $7783 = (getTempRet0() | 0);
 $7784 = (_bitshift64Shl(($7354|0),($7355|0),1)|0);
 $7785 = (getTempRet0() | 0);
 $7786 = $7784 & -2;
 $7787 = $7785 & 1;
 $7788 = (___muldi3(($7781|0),0,($7786|0),($7787|0))|0);
 $7789 = (getTempRet0() | 0);
 $7790 = (_i64Add(($7782|0),($7783|0),($7788|0),($7789|0))|0);
 $7791 = (getTempRet0() | 0);
 $7792 = $7790 ^ $7284;
 $7793 = $7791 ^ $7285;
 $7794 = (_bitshift64Lshr(($7792|0),($7793|0),24)|0);
 $7795 = (getTempRet0() | 0);
 $7796 = (_bitshift64Shl(($7792|0),($7793|0),40)|0);
 $7797 = (getTempRet0() | 0);
 $7798 = $7794 | $7796;
 $7799 = $7795 | $7797;
 $7800 = (_i64Add(($7798|0),($7799|0),($7778|0),($7779|0))|0);
 $7801 = (getTempRet0() | 0);
 $7802 = (_bitshift64Shl(($7778|0),($7779|0),1)|0);
 $7803 = (getTempRet0() | 0);
 $7804 = $7802 & -2;
 $7805 = $7803 & 1;
 $7806 = (___muldi3(($7794|0),0,($7804|0),($7805|0))|0);
 $7807 = (getTempRet0() | 0);
 $7808 = (_i64Add(($7800|0),($7801|0),($7806|0),($7807|0))|0);
 $7809 = (getTempRet0() | 0);
 $7810 = $arrayidx1862;
 $7811 = $7810;
 HEAP32[$7811>>2] = $7808;
 $7812 = (($7810) + 4)|0;
 $7813 = $7812;
 HEAP32[$7813>>2] = $7809;
 $7814 = $7808 ^ $7781;
 $7815 = $7809 ^ $7780;
 $7816 = (_bitshift64Lshr(($7814|0),($7815|0),16)|0);
 $7817 = (getTempRet0() | 0);
 $7818 = (_bitshift64Shl(($7814|0),($7815|0),48)|0);
 $7819 = (getTempRet0() | 0);
 $7820 = $7816 | $7818;
 $7821 = $7817 | $7819;
 $7822 = $arrayidx11609;
 $7823 = $7822;
 HEAP32[$7823>>2] = $7820;
 $7824 = (($7822) + 4)|0;
 $7825 = $7824;
 HEAP32[$7825>>2] = $7821;
 $7826 = (_i64Add(($7820|0),($7821|0),($7790|0),($7791|0))|0);
 $7827 = (getTempRet0() | 0);
 $7828 = (_bitshift64Shl(($7790|0),($7791|0),1)|0);
 $7829 = (getTempRet0() | 0);
 $7830 = $7828 & -2;
 $7831 = $7829 & 1;
 $7832 = (___muldi3(($7816|0),0,($7830|0),($7831|0))|0);
 $7833 = (getTempRet0() | 0);
 $7834 = (_i64Add(($7826|0),($7827|0),($7832|0),($7833|0))|0);
 $7835 = (getTempRet0() | 0);
 $7836 = $arrayidx6839;
 $7837 = $7836;
 HEAP32[$7837>>2] = $7834;
 $7838 = (($7836) + 4)|0;
 $7839 = $7838;
 HEAP32[$7839>>2] = $7835;
 $7840 = $7834 ^ $7798;
 $7841 = $7835 ^ $7799;
 $7842 = (_bitshift64Lshr(($7840|0),($7841|0),63)|0);
 $7843 = (getTempRet0() | 0);
 $7844 = (_bitshift64Shl(($7840|0),($7841|0),1)|0);
 $7845 = (getTempRet0() | 0);
 $7846 = $7842 | $7844;
 $7847 = $7843 | $7845;
 $7848 = $arrayidx3314;
 $7849 = $7848;
 HEAP32[$7849>>2] = $7846;
 $7850 = (($7848) + 4)|0;
 $7851 = $7850;
 HEAP32[$7851>>2] = $7847;
 $7852 = (_i64Add(($2050|0),($2051|0),($570|0),($571|0))|0);
 $7853 = (getTempRet0() | 0);
 $7854 = (_bitshift64Shl(($570|0),($571|0),1)|0);
 $7855 = (getTempRet0() | 0);
 $7856 = $7854 & -2;
 $7857 = $7855 & 1;
 $7858 = (___muldi3(($2050|0),0,($7856|0),($7857|0))|0);
 $7859 = (getTempRet0() | 0);
 $7860 = (_i64Add(($7852|0),($7853|0),($7858|0),($7859|0))|0);
 $7861 = (getTempRet0() | 0);
 $7862 = $5010 ^ $7860;
 $7863 = $5011 ^ $7861;
 $7864 = (_i64Add(($7863|0),($7862|0),($3530|0),($3531|0))|0);
 $7865 = (getTempRet0() | 0);
 $7866 = (_bitshift64Shl(($3530|0),($3531|0),1)|0);
 $7867 = (getTempRet0() | 0);
 $7868 = $7866 & -2;
 $7869 = $7867 & 1;
 $7870 = (___muldi3(($7863|0),0,($7868|0),($7869|0))|0);
 $7871 = (getTempRet0() | 0);
 $7872 = (_i64Add(($7864|0),($7865|0),($7870|0),($7871|0))|0);
 $7873 = (getTempRet0() | 0);
 $7874 = $7872 ^ $2050;
 $7875 = $7873 ^ $2051;
 $7876 = (_bitshift64Lshr(($7874|0),($7875|0),24)|0);
 $7877 = (getTempRet0() | 0);
 $7878 = (_bitshift64Shl(($7874|0),($7875|0),40)|0);
 $7879 = (getTempRet0() | 0);
 $7880 = $7876 | $7878;
 $7881 = $7877 | $7879;
 $7882 = (_i64Add(($7880|0),($7881|0),($7860|0),($7861|0))|0);
 $7883 = (getTempRet0() | 0);
 $7884 = (_bitshift64Shl(($7860|0),($7861|0),1)|0);
 $7885 = (getTempRet0() | 0);
 $7886 = $7884 & -2;
 $7887 = $7885 & 1;
 $7888 = (___muldi3(($7876|0),0,($7886|0),($7887|0))|0);
 $7889 = (getTempRet0() | 0);
 $7890 = (_i64Add(($7882|0),($7883|0),($7888|0),($7889|0))|0);
 $7891 = (getTempRet0() | 0);
 $7892 = $arrayidx410;
 $7893 = $7892;
 HEAP32[$7893>>2] = $7890;
 $7894 = (($7892) + 4)|0;
 $7895 = $7894;
 HEAP32[$7895>>2] = $7891;
 $7896 = $7890 ^ $7863;
 $7897 = $7891 ^ $7862;
 $7898 = (_bitshift64Lshr(($7896|0),($7897|0),16)|0);
 $7899 = (getTempRet0() | 0);
 $7900 = (_bitshift64Shl(($7896|0),($7897|0),48)|0);
 $7901 = (getTempRet0() | 0);
 $7902 = $7898 | $7900;
 $7903 = $7899 | $7901;
 $7904 = $arrayidx10364;
 $7905 = $7904;
 HEAP32[$7905>>2] = $7902;
 $7906 = (($7904) + 4)|0;
 $7907 = $7906;
 HEAP32[$7907>>2] = $7903;
 $7908 = (_i64Add(($7902|0),($7903|0),($7872|0),($7873|0))|0);
 $7909 = (getTempRet0() | 0);
 $7910 = (_bitshift64Shl(($7872|0),($7873|0),1)|0);
 $7911 = (getTempRet0() | 0);
 $7912 = $7910 & -2;
 $7913 = $7911 & 1;
 $7914 = (___muldi3(($7898|0),0,($7912|0),($7913|0))|0);
 $7915 = (getTempRet0() | 0);
 $7916 = (_i64Add(($7908|0),($7909|0),($7914|0),($7915|0))|0);
 $7917 = (getTempRet0() | 0);
 $7918 = $arrayidx7046;
 $7919 = $7918;
 HEAP32[$7919>>2] = $7916;
 $7920 = (($7918) + 4)|0;
 $7921 = $7920;
 HEAP32[$7921>>2] = $7917;
 $7922 = $7916 ^ $7880;
 $7923 = $7917 ^ $7881;
 $7924 = (_bitshift64Lshr(($7922|0),($7923|0),63)|0);
 $7925 = (getTempRet0() | 0);
 $7926 = (_bitshift64Shl(($7922|0),($7923|0),1)|0);
 $7927 = (getTempRet0() | 0);
 $7928 = $7924 | $7926;
 $7929 = $7925 | $7927;
 $7930 = $arrayidx3728;
 $7931 = $7930;
 HEAP32[$7931>>2] = $7928;
 $7932 = (($7930) + 4)|0;
 $7933 = $7932;
 HEAP32[$7933>>2] = $7929;
 $7934 = (_i64Add(($2132|0),($2133|0),($652|0),($653|0))|0);
 $7935 = (getTempRet0() | 0);
 $7936 = (_bitshift64Shl(($652|0),($653|0),1)|0);
 $7937 = (getTempRet0() | 0);
 $7938 = $7936 & -2;
 $7939 = $7937 & 1;
 $7940 = (___muldi3(($2132|0),0,($7938|0),($7939|0))|0);
 $7941 = (getTempRet0() | 0);
 $7942 = (_i64Add(($7934|0),($7935|0),($7940|0),($7941|0))|0);
 $7943 = (getTempRet0() | 0);
 $7944 = $5092 ^ $7942;
 $7945 = $5093 ^ $7943;
 $7946 = (_i64Add(($7945|0),($7944|0),($3612|0),($3613|0))|0);
 $7947 = (getTempRet0() | 0);
 $7948 = (_bitshift64Shl(($3612|0),($3613|0),1)|0);
 $7949 = (getTempRet0() | 0);
 $7950 = $7948 & -2;
 $7951 = $7949 & 1;
 $7952 = (___muldi3(($7945|0),0,($7950|0),($7951|0))|0);
 $7953 = (getTempRet0() | 0);
 $7954 = (_i64Add(($7946|0),($7947|0),($7952|0),($7953|0))|0);
 $7955 = (getTempRet0() | 0);
 $7956 = $7954 ^ $2132;
 $7957 = $7955 ^ $2133;
 $7958 = (_bitshift64Lshr(($7956|0),($7957|0),24)|0);
 $7959 = (getTempRet0() | 0);
 $7960 = (_bitshift64Shl(($7956|0),($7957|0),40)|0);
 $7961 = (getTempRet0() | 0);
 $7962 = $7958 | $7960;
 $7963 = $7959 | $7961;
 $7964 = (_i64Add(($7962|0),($7963|0),($7942|0),($7943|0))|0);
 $7965 = (getTempRet0() | 0);
 $7966 = (_bitshift64Shl(($7942|0),($7943|0),1)|0);
 $7967 = (getTempRet0() | 0);
 $7968 = $7966 & -2;
 $7969 = $7967 & 1;
 $7970 = (___muldi3(($7958|0),0,($7968|0),($7969|0))|0);
 $7971 = (getTempRet0() | 0);
 $7972 = (_i64Add(($7964|0),($7965|0),($7970|0),($7971|0))|0);
 $7973 = (getTempRet0() | 0);
 $7974 = $arrayidx617;
 $7975 = $7974;
 HEAP32[$7975>>2] = $7972;
 $7976 = (($7974) + 4)|0;
 $7977 = $7976;
 HEAP32[$7977>>2] = $7973;
 $7978 = $7972 ^ $7945;
 $7979 = $7973 ^ $7944;
 $7980 = (_bitshift64Lshr(($7978|0),($7979|0),16)|0);
 $7981 = (getTempRet0() | 0);
 $7982 = (_bitshift64Shl(($7978|0),($7979|0),48)|0);
 $7983 = (getTempRet0() | 0);
 $7984 = $7980 | $7982;
 $7985 = $7981 | $7983;
 $7986 = $arrayidx10571;
 $7987 = $7986;
 HEAP32[$7987>>2] = $7984;
 $7988 = (($7986) + 4)|0;
 $7989 = $7988;
 HEAP32[$7989>>2] = $7985;
 $7990 = (_i64Add(($7984|0),($7985|0),($7954|0),($7955|0))|0);
 $7991 = (getTempRet0() | 0);
 $7992 = (_bitshift64Shl(($7954|0),($7955|0),1)|0);
 $7993 = (getTempRet0() | 0);
 $7994 = $7992 & -2;
 $7995 = $7993 & 1;
 $7996 = (___muldi3(($7980|0),0,($7994|0),($7995|0))|0);
 $7997 = (getTempRet0() | 0);
 $7998 = (_i64Add(($7990|0),($7991|0),($7996|0),($7997|0))|0);
 $7999 = (getTempRet0() | 0);
 $8000 = $arrayidx7253;
 $8001 = $8000;
 HEAP32[$8001>>2] = $7998;
 $8002 = (($8000) + 4)|0;
 $8003 = $8002;
 HEAP32[$8003>>2] = $7999;
 $8004 = $7998 ^ $7962;
 $8005 = $7999 ^ $7963;
 $8006 = (_bitshift64Lshr(($8004|0),($8005|0),63)|0);
 $8007 = (getTempRet0() | 0);
 $8008 = (_bitshift64Shl(($8004|0),($8005|0),1)|0);
 $8009 = (getTempRet0() | 0);
 $8010 = $8006 | $8008;
 $8011 = $8007 | $8009;
 $8012 = $arrayidx3935;
 $8013 = $8012;
 HEAP32[$8013>>2] = $8010;
 $8014 = (($8012) + 4)|0;
 $8015 = $8014;
 HEAP32[$8015>>2] = $8011;
 $8016 = (_i64Add(($2790|0),($2791|0),($1310|0),($1311|0))|0);
 $8017 = (getTempRet0() | 0);
 $8018 = (_bitshift64Shl(($1310|0),($1311|0),1)|0);
 $8019 = (getTempRet0() | 0);
 $8020 = $8018 & -2;
 $8021 = $8019 & 1;
 $8022 = (___muldi3(($2790|0),0,($8020|0),($8021|0))|0);
 $8023 = (getTempRet0() | 0);
 $8024 = (_i64Add(($8016|0),($8017|0),($8022|0),($8023|0))|0);
 $8025 = (getTempRet0() | 0);
 $8026 = $5750 ^ $8024;
 $8027 = $5751 ^ $8025;
 $8028 = (_i64Add(($8027|0),($8026|0),($4270|0),($4271|0))|0);
 $8029 = (getTempRet0() | 0);
 $8030 = (_bitshift64Shl(($4270|0),($4271|0),1)|0);
 $8031 = (getTempRet0() | 0);
 $8032 = $8030 & -2;
 $8033 = $8031 & 1;
 $8034 = (___muldi3(($8027|0),0,($8032|0),($8033|0))|0);
 $8035 = (getTempRet0() | 0);
 $8036 = (_i64Add(($8028|0),($8029|0),($8034|0),($8035|0))|0);
 $8037 = (getTempRet0() | 0);
 $8038 = $8036 ^ $2790;
 $8039 = $8037 ^ $2791;
 $8040 = (_bitshift64Lshr(($8038|0),($8039|0),24)|0);
 $8041 = (getTempRet0() | 0);
 $8042 = (_bitshift64Shl(($8038|0),($8039|0),40)|0);
 $8043 = (getTempRet0() | 0);
 $8044 = $8040 | $8042;
 $8045 = $8041 | $8043;
 $8046 = (_i64Add(($8044|0),($8045|0),($8024|0),($8025|0))|0);
 $8047 = (getTempRet0() | 0);
 $8048 = (_bitshift64Shl(($8024|0),($8025|0),1)|0);
 $8049 = (getTempRet0() | 0);
 $8050 = $8048 & -2;
 $8051 = $8049 & 1;
 $8052 = (___muldi3(($8040|0),0,($8050|0),($8051|0))|0);
 $8053 = (getTempRet0() | 0);
 $8054 = (_i64Add(($8046|0),($8047|0),($8052|0),($8053|0))|0);
 $8055 = (getTempRet0() | 0);
 $8056 = $arrayidx2069;
 $8057 = $8056;
 HEAP32[$8057>>2] = $8054;
 $8058 = (($8056) + 4)|0;
 $8059 = $8058;
 HEAP32[$8059>>2] = $8055;
 $8060 = $8054 ^ $8027;
 $8061 = $8055 ^ $8026;
 $8062 = (_bitshift64Lshr(($8060|0),($8061|0),16)|0);
 $8063 = (getTempRet0() | 0);
 $8064 = (_bitshift64Shl(($8060|0),($8061|0),48)|0);
 $8065 = (getTempRet0() | 0);
 $8066 = $8062 | $8064;
 $8067 = $8063 | $8065;
 $8068 = $arrayidx12023;
 $8069 = $8068;
 HEAP32[$8069>>2] = $8066;
 $8070 = (($8068) + 4)|0;
 $8071 = $8070;
 HEAP32[$8071>>2] = $8067;
 $8072 = (_i64Add(($8066|0),($8067|0),($8036|0),($8037|0))|0);
 $8073 = (getTempRet0() | 0);
 $8074 = (_bitshift64Shl(($8036|0),($8037|0),1)|0);
 $8075 = (getTempRet0() | 0);
 $8076 = $8074 & -2;
 $8077 = $8075 & 1;
 $8078 = (___muldi3(($8062|0),0,($8076|0),($8077|0))|0);
 $8079 = (getTempRet0() | 0);
 $8080 = (_i64Add(($8072|0),($8073|0),($8078|0),($8079|0))|0);
 $8081 = (getTempRet0() | 0);
 $8082 = $8080 ^ $8044;
 $8083 = $8081 ^ $8045;
 $8084 = (_bitshift64Lshr(($8082|0),($8083|0),63)|0);
 $8085 = (getTempRet0() | 0);
 $8086 = (_bitshift64Shl(($8082|0),($8083|0),1)|0);
 $8087 = (getTempRet0() | 0);
 $8088 = $8084 | $8086;
 $8089 = $8085 | $8087;
 $8090 = $arrayidx5387;
 $8091 = $8090;
 HEAP32[$8091>>2] = $8088;
 $8092 = (($8090) + 4)|0;
 $8093 = $8092;
 HEAP32[$8093>>2] = $8089;
 $8094 = (_i64Add(($2872|0),($2873|0),($1392|0),($1393|0))|0);
 $8095 = (getTempRet0() | 0);
 $8096 = (_bitshift64Shl(($1392|0),($1393|0),1)|0);
 $8097 = (getTempRet0() | 0);
 $8098 = $8096 & -2;
 $8099 = $8097 & 1;
 $8100 = (___muldi3(($2872|0),0,($8098|0),($8099|0))|0);
 $8101 = (getTempRet0() | 0);
 $8102 = (_i64Add(($8094|0),($8095|0),($8100|0),($8101|0))|0);
 $8103 = (getTempRet0() | 0);
 $8104 = $5832 ^ $8102;
 $8105 = $5833 ^ $8103;
 $8106 = (_i64Add(($8105|0),($8104|0),($4352|0),($4353|0))|0);
 $8107 = (getTempRet0() | 0);
 $8108 = (_bitshift64Shl(($4352|0),($4353|0),1)|0);
 $8109 = (getTempRet0() | 0);
 $8110 = $8108 & -2;
 $8111 = $8109 & 1;
 $8112 = (___muldi3(($8105|0),0,($8110|0),($8111|0))|0);
 $8113 = (getTempRet0() | 0);
 $8114 = (_i64Add(($8106|0),($8107|0),($8112|0),($8113|0))|0);
 $8115 = (getTempRet0() | 0);
 $8116 = $8114 ^ $2872;
 $8117 = $8115 ^ $2873;
 $8118 = (_bitshift64Lshr(($8116|0),($8117|0),24)|0);
 $8119 = (getTempRet0() | 0);
 $8120 = (_bitshift64Shl(($8116|0),($8117|0),40)|0);
 $8121 = (getTempRet0() | 0);
 $8122 = $8118 | $8120;
 $8123 = $8119 | $8121;
 $8124 = (_i64Add(($8122|0),($8123|0),($8102|0),($8103|0))|0);
 $8125 = (getTempRet0() | 0);
 $8126 = (_bitshift64Shl(($8102|0),($8103|0),1)|0);
 $8127 = (getTempRet0() | 0);
 $8128 = $8126 & -2;
 $8129 = $8127 & 1;
 $8130 = (___muldi3(($8118|0),0,($8128|0),($8129|0))|0);
 $8131 = (getTempRet0() | 0);
 $8132 = (_i64Add(($8124|0),($8125|0),($8130|0),($8131|0))|0);
 $8133 = (getTempRet0() | 0);
 $8134 = $arrayidx2276;
 $8135 = $8134;
 HEAP32[$8135>>2] = $8132;
 $8136 = (($8134) + 4)|0;
 $8137 = $8136;
 HEAP32[$8137>>2] = $8133;
 $8138 = $8132 ^ $8105;
 $8139 = $8133 ^ $8104;
 $8140 = (_bitshift64Lshr(($8138|0),($8139|0),16)|0);
 $8141 = (getTempRet0() | 0);
 $8142 = (_bitshift64Shl(($8138|0),($8139|0),48)|0);
 $8143 = (getTempRet0() | 0);
 $8144 = $8140 | $8142;
 $8145 = $8141 | $8143;
 $8146 = (_i64Add(($8144|0),($8145|0),($8114|0),($8115|0))|0);
 $8147 = (getTempRet0() | 0);
 $8148 = (_bitshift64Shl(($8114|0),($8115|0),1)|0);
 $8149 = (getTempRet0() | 0);
 $8150 = $8148 & -2;
 $8151 = $8149 & 1;
 $8152 = (___muldi3(($8140|0),0,($8150|0),($8151|0))|0);
 $8153 = (getTempRet0() | 0);
 $8154 = (_i64Add(($8146|0),($8147|0),($8152|0),($8153|0))|0);
 $8155 = (getTempRet0() | 0);
 $8156 = $8154 ^ $8122;
 $8157 = $8155 ^ $8123;
 $8158 = (_bitshift64Lshr(($8156|0),($8157|0),63)|0);
 $8159 = (getTempRet0() | 0);
 $8160 = (_bitshift64Shl(($8156|0),($8157|0),1)|0);
 $8161 = (getTempRet0() | 0);
 $8162 = $8158 | $8160;
 $8163 = $8159 | $8161;
 $8164 = $arrayidx5594;
 $8165 = $8164;
 HEAP32[$8165>>2] = $8162;
 $8166 = (($8164) + 4)|0;
 $8167 = $8166;
 HEAP32[$8167>>2] = $8163;
 $8168 = (_i64Add(($8010|0),($8011|0),($7890|0),($7891|0))|0);
 $8169 = (getTempRet0() | 0);
 $8170 = (_bitshift64Shl(($7890|0),($7891|0),1)|0);
 $8171 = (getTempRet0() | 0);
 $8172 = $8170 & -2;
 $8173 = $8171 & 1;
 $8174 = (___muldi3(($8010|0),0,($8172|0),($8173|0))|0);
 $8175 = (getTempRet0() | 0);
 $8176 = (_i64Add(($8168|0),($8169|0),($8174|0),($8175|0))|0);
 $8177 = (getTempRet0() | 0);
 $8178 = $8144 ^ $8176;
 $8179 = $8145 ^ $8177;
 $8180 = (_i64Add(($8179|0),($8178|0),($8080|0),($8081|0))|0);
 $8181 = (getTempRet0() | 0);
 $8182 = (_bitshift64Shl(($8080|0),($8081|0),1)|0);
 $8183 = (getTempRet0() | 0);
 $8184 = $8182 & -2;
 $8185 = $8183 & 1;
 $8186 = (___muldi3(($8179|0),0,($8184|0),($8185|0))|0);
 $8187 = (getTempRet0() | 0);
 $8188 = (_i64Add(($8180|0),($8181|0),($8186|0),($8187|0))|0);
 $8189 = (getTempRet0() | 0);
 $8190 = $8188 ^ $8010;
 $8191 = $8189 ^ $8011;
 $8192 = (_bitshift64Lshr(($8190|0),($8191|0),24)|0);
 $8193 = (getTempRet0() | 0);
 $8194 = (_bitshift64Shl(($8190|0),($8191|0),40)|0);
 $8195 = (getTempRet0() | 0);
 $8196 = $8192 | $8194;
 $8197 = $8193 | $8195;
 $8198 = (_i64Add(($8196|0),($8197|0),($8176|0),($8177|0))|0);
 $8199 = (getTempRet0() | 0);
 $8200 = (_bitshift64Shl(($8176|0),($8177|0),1)|0);
 $8201 = (getTempRet0() | 0);
 $8202 = $8200 & -2;
 $8203 = $8201 & 1;
 $8204 = (___muldi3(($8192|0),0,($8202|0),($8203|0))|0);
 $8205 = (getTempRet0() | 0);
 $8206 = (_i64Add(($8198|0),($8199|0),($8204|0),($8205|0))|0);
 $8207 = (getTempRet0() | 0);
 $8208 = $arrayidx410;
 $8209 = $8208;
 HEAP32[$8209>>2] = $8206;
 $8210 = (($8208) + 4)|0;
 $8211 = $8210;
 HEAP32[$8211>>2] = $8207;
 $8212 = $8206 ^ $8179;
 $8213 = $8207 ^ $8178;
 $8214 = (_bitshift64Lshr(($8212|0),($8213|0),16)|0);
 $8215 = (getTempRet0() | 0);
 $8216 = (_bitshift64Shl(($8212|0),($8213|0),48)|0);
 $8217 = (getTempRet0() | 0);
 $8218 = $8214 | $8216;
 $8219 = $8215 | $8217;
 $8220 = $arrayidx12230;
 $8221 = $8220;
 HEAP32[$8221>>2] = $8218;
 $8222 = (($8220) + 4)|0;
 $8223 = $8222;
 HEAP32[$8223>>2] = $8219;
 $8224 = (_i64Add(($8218|0),($8219|0),($8188|0),($8189|0))|0);
 $8225 = (getTempRet0() | 0);
 $8226 = (_bitshift64Shl(($8188|0),($8189|0),1)|0);
 $8227 = (getTempRet0() | 0);
 $8228 = $8226 & -2;
 $8229 = $8227 & 1;
 $8230 = (___muldi3(($8214|0),0,($8228|0),($8229|0))|0);
 $8231 = (getTempRet0() | 0);
 $8232 = (_i64Add(($8224|0),($8225|0),($8230|0),($8231|0))|0);
 $8233 = (getTempRet0() | 0);
 $8234 = $arrayidx8705;
 $8235 = $8234;
 HEAP32[$8235>>2] = $8232;
 $8236 = (($8234) + 4)|0;
 $8237 = $8236;
 HEAP32[$8237>>2] = $8233;
 $8238 = $8232 ^ $8196;
 $8239 = $8233 ^ $8197;
 $8240 = (_bitshift64Lshr(($8238|0),($8239|0),63)|0);
 $8241 = (getTempRet0() | 0);
 $8242 = (_bitshift64Shl(($8238|0),($8239|0),1)|0);
 $8243 = (getTempRet0() | 0);
 $8244 = $8240 | $8242;
 $8245 = $8241 | $8243;
 $8246 = $arrayidx3935;
 $8247 = $8246;
 HEAP32[$8247>>2] = $8244;
 $8248 = (($8246) + 4)|0;
 $8249 = $8248;
 HEAP32[$8249>>2] = $8245;
 $8250 = (_i64Add(($8088|0),($8089|0),($7972|0),($7973|0))|0);
 $8251 = (getTempRet0() | 0);
 $8252 = (_bitshift64Shl(($7972|0),($7973|0),1)|0);
 $8253 = (getTempRet0() | 0);
 $8254 = $8252 & -2;
 $8255 = $8253 & 1;
 $8256 = (___muldi3(($8088|0),0,($8254|0),($8255|0))|0);
 $8257 = (getTempRet0() | 0);
 $8258 = (_i64Add(($8250|0),($8251|0),($8256|0),($8257|0))|0);
 $8259 = (getTempRet0() | 0);
 $8260 = $8258 ^ $7902;
 $8261 = $8259 ^ $7903;
 $8262 = (_i64Add(($8261|0),($8260|0),($8154|0),($8155|0))|0);
 $8263 = (getTempRet0() | 0);
 $8264 = (_bitshift64Shl(($8154|0),($8155|0),1)|0);
 $8265 = (getTempRet0() | 0);
 $8266 = $8264 & -2;
 $8267 = $8265 & 1;
 $8268 = (___muldi3(($8266|0),($8267|0),($8261|0),0)|0);
 $8269 = (getTempRet0() | 0);
 $8270 = (_i64Add(($8262|0),($8263|0),($8268|0),($8269|0))|0);
 $8271 = (getTempRet0() | 0);
 $8272 = $8270 ^ $8088;
 $8273 = $8271 ^ $8089;
 $8274 = (_bitshift64Lshr(($8272|0),($8273|0),24)|0);
 $8275 = (getTempRet0() | 0);
 $8276 = (_bitshift64Shl(($8272|0),($8273|0),40)|0);
 $8277 = (getTempRet0() | 0);
 $8278 = $8274 | $8276;
 $8279 = $8275 | $8277;
 $8280 = (_i64Add(($8278|0),($8279|0),($8258|0),($8259|0))|0);
 $8281 = (getTempRet0() | 0);
 $8282 = (_bitshift64Shl(($8258|0),($8259|0),1)|0);
 $8283 = (getTempRet0() | 0);
 $8284 = $8282 & -2;
 $8285 = $8283 & 1;
 $8286 = (___muldi3(($8274|0),0,($8284|0),($8285|0))|0);
 $8287 = (getTempRet0() | 0);
 $8288 = (_i64Add(($8280|0),($8281|0),($8286|0),($8287|0))|0);
 $8289 = (getTempRet0() | 0);
 $8290 = $arrayidx617;
 $8291 = $8290;
 HEAP32[$8291>>2] = $8288;
 $8292 = (($8290) + 4)|0;
 $8293 = $8292;
 HEAP32[$8293>>2] = $8289;
 $8294 = $8288 ^ $8261;
 $8295 = $8289 ^ $8260;
 $8296 = (_bitshift64Lshr(($8294|0),($8295|0),16)|0);
 $8297 = (getTempRet0() | 0);
 $8298 = (_bitshift64Shl(($8294|0),($8295|0),48)|0);
 $8299 = (getTempRet0() | 0);
 $8300 = $8296 | $8298;
 $8301 = $8297 | $8299;
 $8302 = $arrayidx10364;
 $8303 = $8302;
 HEAP32[$8303>>2] = $8300;
 $8304 = (($8302) + 4)|0;
 $8305 = $8304;
 HEAP32[$8305>>2] = $8301;
 $8306 = (_i64Add(($8300|0),($8301|0),($8270|0),($8271|0))|0);
 $8307 = (getTempRet0() | 0);
 $8308 = (_bitshift64Shl(($8270|0),($8271|0),1)|0);
 $8309 = (getTempRet0() | 0);
 $8310 = $8308 & -2;
 $8311 = $8309 & 1;
 $8312 = (___muldi3(($8296|0),0,($8310|0),($8311|0))|0);
 $8313 = (getTempRet0() | 0);
 $8314 = (_i64Add(($8306|0),($8307|0),($8312|0),($8313|0))|0);
 $8315 = (getTempRet0() | 0);
 $8316 = $arrayidx8912;
 $8317 = $8316;
 HEAP32[$8317>>2] = $8314;
 $8318 = (($8316) + 4)|0;
 $8319 = $8318;
 HEAP32[$8319>>2] = $8315;
 $8320 = $8314 ^ $8278;
 $8321 = $8315 ^ $8279;
 $8322 = (_bitshift64Lshr(($8320|0),($8321|0),63)|0);
 $8323 = (getTempRet0() | 0);
 $8324 = (_bitshift64Shl(($8320|0),($8321|0),1)|0);
 $8325 = (getTempRet0() | 0);
 $8326 = $8322 | $8324;
 $8327 = $8323 | $8325;
 $8328 = $arrayidx5387;
 $8329 = $8328;
 HEAP32[$8329>>2] = $8326;
 $8330 = (($8328) + 4)|0;
 $8331 = $8330;
 HEAP32[$8331>>2] = $8327;
 $8332 = (_i64Add(($8162|0),($8163|0),($8054|0),($8055|0))|0);
 $8333 = (getTempRet0() | 0);
 $8334 = (_bitshift64Shl(($8054|0),($8055|0),1)|0);
 $8335 = (getTempRet0() | 0);
 $8336 = $8334 & -2;
 $8337 = $8335 & 1;
 $8338 = (___muldi3(($8162|0),0,($8336|0),($8337|0))|0);
 $8339 = (getTempRet0() | 0);
 $8340 = (_i64Add(($8332|0),($8333|0),($8338|0),($8339|0))|0);
 $8341 = (getTempRet0() | 0);
 $8342 = $8340 ^ $7984;
 $8343 = $8341 ^ $7985;
 $8344 = (_i64Add(($8343|0),($8342|0),($7916|0),($7917|0))|0);
 $8345 = (getTempRet0() | 0);
 $8346 = (_bitshift64Shl(($7916|0),($7917|0),1)|0);
 $8347 = (getTempRet0() | 0);
 $8348 = $8346 & -2;
 $8349 = $8347 & 1;
 $8350 = (___muldi3(($8343|0),0,($8348|0),($8349|0))|0);
 $8351 = (getTempRet0() | 0);
 $8352 = (_i64Add(($8344|0),($8345|0),($8350|0),($8351|0))|0);
 $8353 = (getTempRet0() | 0);
 $8354 = $8352 ^ $8162;
 $8355 = $8353 ^ $8163;
 $8356 = (_bitshift64Lshr(($8354|0),($8355|0),24)|0);
 $8357 = (getTempRet0() | 0);
 $8358 = (_bitshift64Shl(($8354|0),($8355|0),40)|0);
 $8359 = (getTempRet0() | 0);
 $8360 = $8356 | $8358;
 $8361 = $8357 | $8359;
 $8362 = (_i64Add(($8360|0),($8361|0),($8340|0),($8341|0))|0);
 $8363 = (getTempRet0() | 0);
 $8364 = (_bitshift64Shl(($8340|0),($8341|0),1)|0);
 $8365 = (getTempRet0() | 0);
 $8366 = $8364 & -2;
 $8367 = $8365 & 1;
 $8368 = (___muldi3(($8356|0),0,($8366|0),($8367|0))|0);
 $8369 = (getTempRet0() | 0);
 $8370 = (_i64Add(($8362|0),($8363|0),($8368|0),($8369|0))|0);
 $8371 = (getTempRet0() | 0);
 $8372 = $arrayidx2069;
 $8373 = $8372;
 HEAP32[$8373>>2] = $8370;
 $8374 = (($8372) + 4)|0;
 $8375 = $8374;
 HEAP32[$8375>>2] = $8371;
 $8376 = $8370 ^ $8343;
 $8377 = $8371 ^ $8342;
 $8378 = (_bitshift64Lshr(($8376|0),($8377|0),16)|0);
 $8379 = (getTempRet0() | 0);
 $8380 = (_bitshift64Shl(($8376|0),($8377|0),48)|0);
 $8381 = (getTempRet0() | 0);
 $8382 = $8378 | $8380;
 $8383 = $8379 | $8381;
 $8384 = $arrayidx10571;
 $8385 = $8384;
 HEAP32[$8385>>2] = $8382;
 $8386 = (($8384) + 4)|0;
 $8387 = $8386;
 HEAP32[$8387>>2] = $8383;
 $8388 = (_i64Add(($8382|0),($8383|0),($8352|0),($8353|0))|0);
 $8389 = (getTempRet0() | 0);
 $8390 = (_bitshift64Shl(($8352|0),($8353|0),1)|0);
 $8391 = (getTempRet0() | 0);
 $8392 = $8390 & -2;
 $8393 = $8391 & 1;
 $8394 = (___muldi3(($8378|0),0,($8392|0),($8393|0))|0);
 $8395 = (getTempRet0() | 0);
 $8396 = (_i64Add(($8388|0),($8389|0),($8394|0),($8395|0))|0);
 $8397 = (getTempRet0() | 0);
 $8398 = $arrayidx7046;
 $8399 = $8398;
 HEAP32[$8399>>2] = $8396;
 $8400 = (($8398) + 4)|0;
 $8401 = $8400;
 HEAP32[$8401>>2] = $8397;
 $8402 = $8396 ^ $8360;
 $8403 = $8397 ^ $8361;
 $8404 = (_bitshift64Lshr(($8402|0),($8403|0),63)|0);
 $8405 = (getTempRet0() | 0);
 $8406 = (_bitshift64Shl(($8402|0),($8403|0),1)|0);
 $8407 = (getTempRet0() | 0);
 $8408 = $8404 | $8406;
 $8409 = $8405 | $8407;
 $8410 = $arrayidx5594;
 $8411 = $8410;
 HEAP32[$8411>>2] = $8408;
 $8412 = (($8410) + 4)|0;
 $8413 = $8412;
 HEAP32[$8413>>2] = $8409;
 $8414 = (_i64Add(($8132|0),($8133|0),($7928|0),($7929|0))|0);
 $8415 = (getTempRet0() | 0);
 $8416 = (_bitshift64Shl(($8132|0),($8133|0),1)|0);
 $8417 = (getTempRet0() | 0);
 $8418 = $8416 & -2;
 $8419 = $8417 & 1;
 $8420 = (___muldi3(($8418|0),($8419|0),($7928|0),0)|0);
 $8421 = (getTempRet0() | 0);
 $8422 = (_i64Add(($8414|0),($8415|0),($8420|0),($8421|0))|0);
 $8423 = (getTempRet0() | 0);
 $8424 = $8422 ^ $8066;
 $8425 = $8423 ^ $8067;
 $8426 = (_i64Add(($8425|0),($8424|0),($7998|0),($7999|0))|0);
 $8427 = (getTempRet0() | 0);
 $8428 = (_bitshift64Shl(($7998|0),($7999|0),1)|0);
 $8429 = (getTempRet0() | 0);
 $8430 = $8428 & -2;
 $8431 = $8429 & 1;
 $8432 = (___muldi3(($8425|0),0,($8430|0),($8431|0))|0);
 $8433 = (getTempRet0() | 0);
 $8434 = (_i64Add(($8426|0),($8427|0),($8432|0),($8433|0))|0);
 $8435 = (getTempRet0() | 0);
 $8436 = $8434 ^ $7928;
 $8437 = $8435 ^ $7929;
 $8438 = (_bitshift64Lshr(($8436|0),($8437|0),24)|0);
 $8439 = (getTempRet0() | 0);
 $8440 = (_bitshift64Shl(($8436|0),($8437|0),40)|0);
 $8441 = (getTempRet0() | 0);
 $8442 = $8438 | $8440;
 $8443 = $8439 | $8441;
 $8444 = (_i64Add(($8442|0),($8443|0),($8422|0),($8423|0))|0);
 $8445 = (getTempRet0() | 0);
 $8446 = (_bitshift64Shl(($8422|0),($8423|0),1)|0);
 $8447 = (getTempRet0() | 0);
 $8448 = $8446 & -2;
 $8449 = $8447 & 1;
 $8450 = (___muldi3(($8438|0),0,($8448|0),($8449|0))|0);
 $8451 = (getTempRet0() | 0);
 $8452 = (_i64Add(($8444|0),($8445|0),($8450|0),($8451|0))|0);
 $8453 = (getTempRet0() | 0);
 $8454 = $arrayidx2276;
 $8455 = $8454;
 HEAP32[$8455>>2] = $8452;
 $8456 = (($8454) + 4)|0;
 $8457 = $8456;
 HEAP32[$8457>>2] = $8453;
 $8458 = $8452 ^ $8425;
 $8459 = $8453 ^ $8424;
 $8460 = (_bitshift64Lshr(($8458|0),($8459|0),16)|0);
 $8461 = (getTempRet0() | 0);
 $8462 = (_bitshift64Shl(($8458|0),($8459|0),48)|0);
 $8463 = (getTempRet0() | 0);
 $8464 = $8460 | $8462;
 $8465 = $8461 | $8463;
 $8466 = $arrayidx12023;
 $8467 = $8466;
 HEAP32[$8467>>2] = $8464;
 $8468 = (($8466) + 4)|0;
 $8469 = $8468;
 HEAP32[$8469>>2] = $8465;
 $8470 = (_i64Add(($8464|0),($8465|0),($8434|0),($8435|0))|0);
 $8471 = (getTempRet0() | 0);
 $8472 = (_bitshift64Shl(($8434|0),($8435|0),1)|0);
 $8473 = (getTempRet0() | 0);
 $8474 = $8472 & -2;
 $8475 = $8473 & 1;
 $8476 = (___muldi3(($8460|0),0,($8474|0),($8475|0))|0);
 $8477 = (getTempRet0() | 0);
 $8478 = (_i64Add(($8470|0),($8471|0),($8476|0),($8477|0))|0);
 $8479 = (getTempRet0() | 0);
 $8480 = $arrayidx7253;
 $8481 = $8480;
 HEAP32[$8481>>2] = $8478;
 $8482 = (($8480) + 4)|0;
 $8483 = $8482;
 HEAP32[$8483>>2] = $8479;
 $8484 = $8478 ^ $8442;
 $8485 = $8479 ^ $8443;
 $8486 = (_bitshift64Lshr(($8484|0),($8485|0),63)|0);
 $8487 = (getTempRet0() | 0);
 $8488 = (_bitshift64Shl(($8484|0),($8485|0),1)|0);
 $8489 = (getTempRet0() | 0);
 $8490 = $8486 | $8488;
 $8491 = $8487 | $8489;
 $8492 = $arrayidx3728;
 $8493 = $8492;
 HEAP32[$8493>>2] = $8490;
 $8494 = (($8492) + 4)|0;
 $8495 = $8494;
 HEAP32[$8495>>2] = $8491;
 $8496 = (_i64Add(($2120|0),($2121|0),($640|0),($641|0))|0);
 $8497 = (getTempRet0() | 0);
 $8498 = (_bitshift64Shl(($640|0),($641|0),1)|0);
 $8499 = (getTempRet0() | 0);
 $8500 = $8498 & -2;
 $8501 = $8499 & 1;
 $8502 = (___muldi3(($2120|0),0,($8500|0),($8501|0))|0);
 $8503 = (getTempRet0() | 0);
 $8504 = (_i64Add(($8496|0),($8497|0),($8502|0),($8503|0))|0);
 $8505 = (getTempRet0() | 0);
 $8506 = $5080 ^ $8504;
 $8507 = $5081 ^ $8505;
 $8508 = (_i64Add(($8507|0),($8506|0),($3600|0),($3601|0))|0);
 $8509 = (getTempRet0() | 0);
 $8510 = (_bitshift64Shl(($3600|0),($3601|0),1)|0);
 $8511 = (getTempRet0() | 0);
 $8512 = $8510 & -2;
 $8513 = $8511 & 1;
 $8514 = (___muldi3(($8507|0),0,($8512|0),($8513|0))|0);
 $8515 = (getTempRet0() | 0);
 $8516 = (_i64Add(($8508|0),($8509|0),($8514|0),($8515|0))|0);
 $8517 = (getTempRet0() | 0);
 $8518 = $8516 ^ $2120;
 $8519 = $8517 ^ $2121;
 $8520 = (_bitshift64Lshr(($8518|0),($8519|0),24)|0);
 $8521 = (getTempRet0() | 0);
 $8522 = (_bitshift64Shl(($8518|0),($8519|0),40)|0);
 $8523 = (getTempRet0() | 0);
 $8524 = $8520 | $8522;
 $8525 = $8521 | $8523;
 $8526 = (_i64Add(($8524|0),($8525|0),($8504|0),($8505|0))|0);
 $8527 = (getTempRet0() | 0);
 $8528 = (_bitshift64Shl(($8504|0),($8505|0),1)|0);
 $8529 = (getTempRet0() | 0);
 $8530 = $8528 & -2;
 $8531 = $8529 & 1;
 $8532 = (___muldi3(($8520|0),0,($8530|0),($8531|0))|0);
 $8533 = (getTempRet0() | 0);
 $8534 = (_i64Add(($8526|0),($8527|0),($8532|0),($8533|0))|0);
 $8535 = (getTempRet0() | 0);
 $8536 = $arrayidx45;
 $8537 = $8536;
 HEAP32[$8537>>2] = $8534;
 $8538 = (($8536) + 4)|0;
 $8539 = $8538;
 HEAP32[$8539>>2] = $8535;
 $8540 = $8534 ^ $8507;
 $8541 = $8535 ^ $8506;
 $8542 = (_bitshift64Lshr(($8540|0),($8541|0),16)|0);
 $8543 = (getTempRet0() | 0);
 $8544 = (_bitshift64Shl(($8540|0),($8541|0),48)|0);
 $8545 = (getTempRet0() | 0);
 $8546 = $8542 | $8544;
 $8547 = $8543 | $8545;
 $8548 = $arrayidx9997;
 $8549 = $8548;
 HEAP32[$8549>>2] = $8546;
 $8550 = (($8548) + 4)|0;
 $8551 = $8550;
 HEAP32[$8551>>2] = $8547;
 $8552 = (_i64Add(($8546|0),($8547|0),($8516|0),($8517|0))|0);
 $8553 = (getTempRet0() | 0);
 $8554 = (_bitshift64Shl(($8516|0),($8517|0),1)|0);
 $8555 = (getTempRet0() | 0);
 $8556 = $8554 & -2;
 $8557 = $8555 & 1;
 $8558 = (___muldi3(($8542|0),0,($8556|0),($8557|0))|0);
 $8559 = (getTempRet0() | 0);
 $8560 = (_i64Add(($8552|0),($8553|0),($8558|0),($8559|0))|0);
 $8561 = (getTempRet0() | 0);
 $8562 = $arrayidx6679;
 $8563 = $8562;
 HEAP32[$8563>>2] = $8560;
 $8564 = (($8562) + 4)|0;
 $8565 = $8564;
 HEAP32[$8565>>2] = $8561;
 $8566 = $8560 ^ $8524;
 $8567 = $8561 ^ $8525;
 $8568 = (_bitshift64Lshr(($8566|0),($8567|0),63)|0);
 $8569 = (getTempRet0() | 0);
 $8570 = (_bitshift64Shl(($8566|0),($8567|0),1)|0);
 $8571 = (getTempRet0() | 0);
 $8572 = $8568 | $8570;
 $8573 = $8569 | $8571;
 $8574 = $arrayidx3361;
 $8575 = $8574;
 HEAP32[$8575>>2] = $8572;
 $8576 = (($8574) + 4)|0;
 $8577 = $8576;
 HEAP32[$8577>>2] = $8573;
 $8578 = (_i64Add(($2202|0),($2203|0),($722|0),($723|0))|0);
 $8579 = (getTempRet0() | 0);
 $8580 = (_bitshift64Shl(($722|0),($723|0),1)|0);
 $8581 = (getTempRet0() | 0);
 $8582 = $8580 & -2;
 $8583 = $8581 & 1;
 $8584 = (___muldi3(($2202|0),0,($8582|0),($8583|0))|0);
 $8585 = (getTempRet0() | 0);
 $8586 = (_i64Add(($8578|0),($8579|0),($8584|0),($8585|0))|0);
 $8587 = (getTempRet0() | 0);
 $8588 = $5162 ^ $8586;
 $8589 = $5163 ^ $8587;
 $8590 = (_i64Add(($8589|0),($8588|0),($3682|0),($3683|0))|0);
 $8591 = (getTempRet0() | 0);
 $8592 = (_bitshift64Shl(($3682|0),($3683|0),1)|0);
 $8593 = (getTempRet0() | 0);
 $8594 = $8592 & -2;
 $8595 = $8593 & 1;
 $8596 = (___muldi3(($8589|0),0,($8594|0),($8595|0))|0);
 $8597 = (getTempRet0() | 0);
 $8598 = (_i64Add(($8590|0),($8591|0),($8596|0),($8597|0))|0);
 $8599 = (getTempRet0() | 0);
 $8600 = $8598 ^ $2202;
 $8601 = $8599 ^ $2203;
 $8602 = (_bitshift64Lshr(($8600|0),($8601|0),24)|0);
 $8603 = (getTempRet0() | 0);
 $8604 = (_bitshift64Shl(($8600|0),($8601|0),40)|0);
 $8605 = (getTempRet0() | 0);
 $8606 = $8602 | $8604;
 $8607 = $8603 | $8605;
 $8608 = (_i64Add(($8606|0),($8607|0),($8586|0),($8587|0))|0);
 $8609 = (getTempRet0() | 0);
 $8610 = (_bitshift64Shl(($8586|0),($8587|0),1)|0);
 $8611 = (getTempRet0() | 0);
 $8612 = $8610 & -2;
 $8613 = $8611 & 1;
 $8614 = (___muldi3(($8602|0),0,($8612|0),($8613|0))|0);
 $8615 = (getTempRet0() | 0);
 $8616 = (_i64Add(($8608|0),($8609|0),($8614|0),($8615|0))|0);
 $8617 = (getTempRet0() | 0);
 $8618 = $arrayidx250;
 $8619 = $8618;
 HEAP32[$8619>>2] = $8616;
 $8620 = (($8618) + 4)|0;
 $8621 = $8620;
 HEAP32[$8621>>2] = $8617;
 $8622 = $8616 ^ $8589;
 $8623 = $8617 ^ $8588;
 $8624 = (_bitshift64Lshr(($8622|0),($8623|0),16)|0);
 $8625 = (getTempRet0() | 0);
 $8626 = (_bitshift64Shl(($8622|0),($8623|0),48)|0);
 $8627 = (getTempRet0() | 0);
 $8628 = $8624 | $8626;
 $8629 = $8625 | $8627;
 $8630 = $arrayidx10204;
 $8631 = $8630;
 HEAP32[$8631>>2] = $8628;
 $8632 = (($8630) + 4)|0;
 $8633 = $8632;
 HEAP32[$8633>>2] = $8629;
 $8634 = (_i64Add(($8628|0),($8629|0),($8598|0),($8599|0))|0);
 $8635 = (getTempRet0() | 0);
 $8636 = (_bitshift64Shl(($8598|0),($8599|0),1)|0);
 $8637 = (getTempRet0() | 0);
 $8638 = $8636 & -2;
 $8639 = $8637 & 1;
 $8640 = (___muldi3(($8624|0),0,($8638|0),($8639|0))|0);
 $8641 = (getTempRet0() | 0);
 $8642 = (_i64Add(($8634|0),($8635|0),($8640|0),($8641|0))|0);
 $8643 = (getTempRet0() | 0);
 $8644 = $arrayidx6886;
 $8645 = $8644;
 HEAP32[$8645>>2] = $8642;
 $8646 = (($8644) + 4)|0;
 $8647 = $8646;
 HEAP32[$8647>>2] = $8643;
 $8648 = $8642 ^ $8606;
 $8649 = $8643 ^ $8607;
 $8650 = (_bitshift64Lshr(($8648|0),($8649|0),63)|0);
 $8651 = (getTempRet0() | 0);
 $8652 = (_bitshift64Shl(($8648|0),($8649|0),1)|0);
 $8653 = (getTempRet0() | 0);
 $8654 = $8650 | $8652;
 $8655 = $8651 | $8653;
 $8656 = $arrayidx3568;
 $8657 = $8656;
 HEAP32[$8657>>2] = $8654;
 $8658 = (($8656) + 4)|0;
 $8659 = $8658;
 HEAP32[$8659>>2] = $8655;
 $8660 = (_i64Add(($2860|0),($2861|0),($1380|0),($1381|0))|0);
 $8661 = (getTempRet0() | 0);
 $8662 = (_bitshift64Shl(($1380|0),($1381|0),1)|0);
 $8663 = (getTempRet0() | 0);
 $8664 = $8662 & -2;
 $8665 = $8663 & 1;
 $8666 = (___muldi3(($2860|0),0,($8664|0),($8665|0))|0);
 $8667 = (getTempRet0() | 0);
 $8668 = (_i64Add(($8660|0),($8661|0),($8666|0),($8667|0))|0);
 $8669 = (getTempRet0() | 0);
 $8670 = $5820 ^ $8668;
 $8671 = $5821 ^ $8669;
 $8672 = (_i64Add(($8671|0),($8670|0),($4340|0),($4341|0))|0);
 $8673 = (getTempRet0() | 0);
 $8674 = (_bitshift64Shl(($4340|0),($4341|0),1)|0);
 $8675 = (getTempRet0() | 0);
 $8676 = $8674 & -2;
 $8677 = $8675 & 1;
 $8678 = (___muldi3(($8671|0),0,($8676|0),($8677|0))|0);
 $8679 = (getTempRet0() | 0);
 $8680 = (_i64Add(($8672|0),($8673|0),($8678|0),($8679|0))|0);
 $8681 = (getTempRet0() | 0);
 $8682 = $8680 ^ $2860;
 $8683 = $8681 ^ $2861;
 $8684 = (_bitshift64Lshr(($8682|0),($8683|0),24)|0);
 $8685 = (getTempRet0() | 0);
 $8686 = (_bitshift64Shl(($8682|0),($8683|0),40)|0);
 $8687 = (getTempRet0() | 0);
 $8688 = $8684 | $8686;
 $8689 = $8685 | $8687;
 $8690 = (_i64Add(($8688|0),($8689|0),($8668|0),($8669|0))|0);
 $8691 = (getTempRet0() | 0);
 $8692 = (_bitshift64Shl(($8668|0),($8669|0),1)|0);
 $8693 = (getTempRet0() | 0);
 $8694 = $8692 & -2;
 $8695 = $8693 & 1;
 $8696 = (___muldi3(($8684|0),0,($8694|0),($8695|0))|0);
 $8697 = (getTempRet0() | 0);
 $8698 = (_i64Add(($8690|0),($8691|0),($8696|0),($8697|0))|0);
 $8699 = (getTempRet0() | 0);
 $8700 = $arrayidx1702;
 $8701 = $8700;
 HEAP32[$8701>>2] = $8698;
 $8702 = (($8700) + 4)|0;
 $8703 = $8702;
 HEAP32[$8703>>2] = $8699;
 $8704 = $8698 ^ $8671;
 $8705 = $8699 ^ $8670;
 $8706 = (_bitshift64Lshr(($8704|0),($8705|0),16)|0);
 $8707 = (getTempRet0() | 0);
 $8708 = (_bitshift64Shl(($8704|0),($8705|0),48)|0);
 $8709 = (getTempRet0() | 0);
 $8710 = $8706 | $8708;
 $8711 = $8707 | $8709;
 $8712 = $arrayidx11656;
 $8713 = $8712;
 HEAP32[$8713>>2] = $8710;
 $8714 = (($8712) + 4)|0;
 $8715 = $8714;
 HEAP32[$8715>>2] = $8711;
 $8716 = (_i64Add(($8710|0),($8711|0),($8680|0),($8681|0))|0);
 $8717 = (getTempRet0() | 0);
 $8718 = (_bitshift64Shl(($8680|0),($8681|0),1)|0);
 $8719 = (getTempRet0() | 0);
 $8720 = $8718 & -2;
 $8721 = $8719 & 1;
 $8722 = (___muldi3(($8706|0),0,($8720|0),($8721|0))|0);
 $8723 = (getTempRet0() | 0);
 $8724 = (_i64Add(($8716|0),($8717|0),($8722|0),($8723|0))|0);
 $8725 = (getTempRet0() | 0);
 $8726 = $8724 ^ $8688;
 $8727 = $8725 ^ $8689;
 $8728 = (_bitshift64Lshr(($8726|0),($8727|0),63)|0);
 $8729 = (getTempRet0() | 0);
 $8730 = (_bitshift64Shl(($8726|0),($8727|0),1)|0);
 $8731 = (getTempRet0() | 0);
 $8732 = $8728 | $8730;
 $8733 = $8729 | $8731;
 $8734 = $arrayidx5020;
 $8735 = $8734;
 HEAP32[$8735>>2] = $8732;
 $8736 = (($8734) + 4)|0;
 $8737 = $8736;
 HEAP32[$8737>>2] = $8733;
 $8738 = (_i64Add(($2942|0),($2943|0),($1462|0),($1463|0))|0);
 $8739 = (getTempRet0() | 0);
 $8740 = (_bitshift64Shl(($1462|0),($1463|0),1)|0);
 $8741 = (getTempRet0() | 0);
 $8742 = $8740 & -2;
 $8743 = $8741 & 1;
 $8744 = (___muldi3(($2942|0),0,($8742|0),($8743|0))|0);
 $8745 = (getTempRet0() | 0);
 $8746 = (_i64Add(($8738|0),($8739|0),($8744|0),($8745|0))|0);
 $8747 = (getTempRet0() | 0);
 $8748 = $5902 ^ $8746;
 $8749 = $5903 ^ $8747;
 $8750 = (_i64Add(($8749|0),($8748|0),($4422|0),($4423|0))|0);
 $8751 = (getTempRet0() | 0);
 $8752 = (_bitshift64Shl(($4422|0),($4423|0),1)|0);
 $8753 = (getTempRet0() | 0);
 $8754 = $8752 & -2;
 $8755 = $8753 & 1;
 $8756 = (___muldi3(($8749|0),0,($8754|0),($8755|0))|0);
 $8757 = (getTempRet0() | 0);
 $8758 = (_i64Add(($8750|0),($8751|0),($8756|0),($8757|0))|0);
 $8759 = (getTempRet0() | 0);
 $8760 = $8758 ^ $2942;
 $8761 = $8759 ^ $2943;
 $8762 = (_bitshift64Lshr(($8760|0),($8761|0),24)|0);
 $8763 = (getTempRet0() | 0);
 $8764 = (_bitshift64Shl(($8760|0),($8761|0),40)|0);
 $8765 = (getTempRet0() | 0);
 $8766 = $8762 | $8764;
 $8767 = $8763 | $8765;
 $8768 = (_i64Add(($8766|0),($8767|0),($8746|0),($8747|0))|0);
 $8769 = (getTempRet0() | 0);
 $8770 = (_bitshift64Shl(($8746|0),($8747|0),1)|0);
 $8771 = (getTempRet0() | 0);
 $8772 = $8770 & -2;
 $8773 = $8771 & 1;
 $8774 = (___muldi3(($8762|0),0,($8772|0),($8773|0))|0);
 $8775 = (getTempRet0() | 0);
 $8776 = (_i64Add(($8768|0),($8769|0),($8774|0),($8775|0))|0);
 $8777 = (getTempRet0() | 0);
 $8778 = $arrayidx1909;
 $8779 = $8778;
 HEAP32[$8779>>2] = $8776;
 $8780 = (($8778) + 4)|0;
 $8781 = $8780;
 HEAP32[$8781>>2] = $8777;
 $8782 = $8776 ^ $8749;
 $8783 = $8777 ^ $8748;
 $8784 = (_bitshift64Lshr(($8782|0),($8783|0),16)|0);
 $8785 = (getTempRet0() | 0);
 $8786 = (_bitshift64Shl(($8782|0),($8783|0),48)|0);
 $8787 = (getTempRet0() | 0);
 $8788 = $8784 | $8786;
 $8789 = $8785 | $8787;
 $8790 = (_i64Add(($8788|0),($8789|0),($8758|0),($8759|0))|0);
 $8791 = (getTempRet0() | 0);
 $8792 = (_bitshift64Shl(($8758|0),($8759|0),1)|0);
 $8793 = (getTempRet0() | 0);
 $8794 = $8792 & -2;
 $8795 = $8793 & 1;
 $8796 = (___muldi3(($8784|0),0,($8794|0),($8795|0))|0);
 $8797 = (getTempRet0() | 0);
 $8798 = (_i64Add(($8790|0),($8791|0),($8796|0),($8797|0))|0);
 $8799 = (getTempRet0() | 0);
 $8800 = $8798 ^ $8766;
 $8801 = $8799 ^ $8767;
 $8802 = (_bitshift64Lshr(($8800|0),($8801|0),63)|0);
 $8803 = (getTempRet0() | 0);
 $8804 = (_bitshift64Shl(($8800|0),($8801|0),1)|0);
 $8805 = (getTempRet0() | 0);
 $8806 = $8802 | $8804;
 $8807 = $8803 | $8805;
 $8808 = $arrayidx5227;
 $8809 = $8808;
 HEAP32[$8809>>2] = $8806;
 $8810 = (($8808) + 4)|0;
 $8811 = $8810;
 HEAP32[$8811>>2] = $8807;
 $8812 = (_i64Add(($8654|0),($8655|0),($8534|0),($8535|0))|0);
 $8813 = (getTempRet0() | 0);
 $8814 = (_bitshift64Shl(($8534|0),($8535|0),1)|0);
 $8815 = (getTempRet0() | 0);
 $8816 = $8814 & -2;
 $8817 = $8815 & 1;
 $8818 = (___muldi3(($8816|0),($8817|0),($8654|0),0)|0);
 $8819 = (getTempRet0() | 0);
 $8820 = (_i64Add(($8812|0),($8813|0),($8818|0),($8819|0))|0);
 $8821 = (getTempRet0() | 0);
 $8822 = $8788 ^ $8820;
 $8823 = $8789 ^ $8821;
 $8824 = (_i64Add(($8724|0),($8725|0),($8823|0),($8822|0))|0);
 $8825 = (getTempRet0() | 0);
 $8826 = (_bitshift64Shl(($8724|0),($8725|0),1)|0);
 $8827 = (getTempRet0() | 0);
 $8828 = $8826 & -2;
 $8829 = $8827 & 1;
 $8830 = (___muldi3(($8828|0),($8829|0),($8823|0),0)|0);
 $8831 = (getTempRet0() | 0);
 $8832 = (_i64Add(($8824|0),($8825|0),($8830|0),($8831|0))|0);
 $8833 = (getTempRet0() | 0);
 $8834 = $8832 ^ $8654;
 $8835 = $8833 ^ $8655;
 $8836 = (_bitshift64Lshr(($8834|0),($8835|0),24)|0);
 $8837 = (getTempRet0() | 0);
 $8838 = (_bitshift64Shl(($8834|0),($8835|0),40)|0);
 $8839 = (getTempRet0() | 0);
 $8840 = $8836 | $8838;
 $8841 = $8837 | $8839;
 $8842 = (_i64Add(($8840|0),($8841|0),($8820|0),($8821|0))|0);
 $8843 = (getTempRet0() | 0);
 $8844 = (_bitshift64Shl(($8820|0),($8821|0),1)|0);
 $8845 = (getTempRet0() | 0);
 $8846 = $8844 & -2;
 $8847 = $8845 & 1;
 $8848 = (___muldi3(($8836|0),0,($8846|0),($8847|0))|0);
 $8849 = (getTempRet0() | 0);
 $8850 = (_i64Add(($8842|0),($8843|0),($8848|0),($8849|0))|0);
 $8851 = (getTempRet0() | 0);
 $8852 = $arrayidx45;
 $8853 = $8852;
 HEAP32[$8853>>2] = $8850;
 $8854 = (($8852) + 4)|0;
 $8855 = $8854;
 HEAP32[$8855>>2] = $8851;
 $8856 = $8850 ^ $8823;
 $8857 = $8851 ^ $8822;
 $8858 = (_bitshift64Lshr(($8856|0),($8857|0),16)|0);
 $8859 = (getTempRet0() | 0);
 $8860 = (_bitshift64Shl(($8856|0),($8857|0),48)|0);
 $8861 = (getTempRet0() | 0);
 $8862 = $8858 | $8860;
 $8863 = $8859 | $8861;
 $8864 = $arrayidx11863;
 $8865 = $8864;
 HEAP32[$8865>>2] = $8862;
 $8866 = (($8864) + 4)|0;
 $8867 = $8866;
 HEAP32[$8867>>2] = $8863;
 $8868 = (_i64Add(($8862|0),($8863|0),($8832|0),($8833|0))|0);
 $8869 = (getTempRet0() | 0);
 $8870 = (_bitshift64Shl(($8832|0),($8833|0),1)|0);
 $8871 = (getTempRet0() | 0);
 $8872 = $8870 & -2;
 $8873 = $8871 & 1;
 $8874 = (___muldi3(($8858|0),0,($8872|0),($8873|0))|0);
 $8875 = (getTempRet0() | 0);
 $8876 = (_i64Add(($8868|0),($8869|0),($8874|0),($8875|0))|0);
 $8877 = (getTempRet0() | 0);
 $8878 = $arrayidx8338;
 $8879 = $8878;
 HEAP32[$8879>>2] = $8876;
 $8880 = (($8878) + 4)|0;
 $8881 = $8880;
 HEAP32[$8881>>2] = $8877;
 $8882 = $8876 ^ $8840;
 $8883 = $8877 ^ $8841;
 $8884 = (_bitshift64Lshr(($8882|0),($8883|0),63)|0);
 $8885 = (getTempRet0() | 0);
 $8886 = (_bitshift64Shl(($8882|0),($8883|0),1)|0);
 $8887 = (getTempRet0() | 0);
 $8888 = $8884 | $8886;
 $8889 = $8885 | $8887;
 $8890 = $arrayidx3568;
 $8891 = $8890;
 HEAP32[$8891>>2] = $8888;
 $8892 = (($8890) + 4)|0;
 $8893 = $8892;
 HEAP32[$8893>>2] = $8889;
 $8894 = (_i64Add(($8732|0),($8733|0),($8616|0),($8617|0))|0);
 $8895 = (getTempRet0() | 0);
 $8896 = (_bitshift64Shl(($8616|0),($8617|0),1)|0);
 $8897 = (getTempRet0() | 0);
 $8898 = $8896 & -2;
 $8899 = $8897 & 1;
 $8900 = (___muldi3(($8732|0),0,($8898|0),($8899|0))|0);
 $8901 = (getTempRet0() | 0);
 $8902 = (_i64Add(($8894|0),($8895|0),($8900|0),($8901|0))|0);
 $8903 = (getTempRet0() | 0);
 $8904 = $8902 ^ $8546;
 $8905 = $8903 ^ $8547;
 $8906 = (_i64Add(($8905|0),($8904|0),($8798|0),($8799|0))|0);
 $8907 = (getTempRet0() | 0);
 $8908 = (_bitshift64Shl(($8798|0),($8799|0),1)|0);
 $8909 = (getTempRet0() | 0);
 $8910 = $8908 & -2;
 $8911 = $8909 & 1;
 $8912 = (___muldi3(($8905|0),0,($8910|0),($8911|0))|0);
 $8913 = (getTempRet0() | 0);
 $8914 = (_i64Add(($8906|0),($8907|0),($8912|0),($8913|0))|0);
 $8915 = (getTempRet0() | 0);
 $8916 = $8914 ^ $8732;
 $8917 = $8915 ^ $8733;
 $8918 = (_bitshift64Lshr(($8916|0),($8917|0),24)|0);
 $8919 = (getTempRet0() | 0);
 $8920 = (_bitshift64Shl(($8916|0),($8917|0),40)|0);
 $8921 = (getTempRet0() | 0);
 $8922 = $8918 | $8920;
 $8923 = $8919 | $8921;
 $8924 = (_i64Add(($8922|0),($8923|0),($8902|0),($8903|0))|0);
 $8925 = (getTempRet0() | 0);
 $8926 = (_bitshift64Shl(($8902|0),($8903|0),1)|0);
 $8927 = (getTempRet0() | 0);
 $8928 = $8926 & -2;
 $8929 = $8927 & 1;
 $8930 = (___muldi3(($8918|0),0,($8928|0),($8929|0))|0);
 $8931 = (getTempRet0() | 0);
 $8932 = (_i64Add(($8924|0),($8925|0),($8930|0),($8931|0))|0);
 $8933 = (getTempRet0() | 0);
 $8934 = $arrayidx250;
 $8935 = $8934;
 HEAP32[$8935>>2] = $8932;
 $8936 = (($8934) + 4)|0;
 $8937 = $8936;
 HEAP32[$8937>>2] = $8933;
 $8938 = $8932 ^ $8905;
 $8939 = $8933 ^ $8904;
 $8940 = (_bitshift64Lshr(($8938|0),($8939|0),16)|0);
 $8941 = (getTempRet0() | 0);
 $8942 = (_bitshift64Shl(($8938|0),($8939|0),48)|0);
 $8943 = (getTempRet0() | 0);
 $8944 = $8940 | $8942;
 $8945 = $8941 | $8943;
 $8946 = $arrayidx9997;
 $8947 = $8946;
 HEAP32[$8947>>2] = $8944;
 $8948 = (($8946) + 4)|0;
 $8949 = $8948;
 HEAP32[$8949>>2] = $8945;
 $8950 = (_i64Add(($8944|0),($8945|0),($8914|0),($8915|0))|0);
 $8951 = (getTempRet0() | 0);
 $8952 = (_bitshift64Shl(($8914|0),($8915|0),1)|0);
 $8953 = (getTempRet0() | 0);
 $8954 = $8952 & -2;
 $8955 = $8953 & 1;
 $8956 = (___muldi3(($8940|0),0,($8954|0),($8955|0))|0);
 $8957 = (getTempRet0() | 0);
 $8958 = (_i64Add(($8950|0),($8951|0),($8956|0),($8957|0))|0);
 $8959 = (getTempRet0() | 0);
 $8960 = $arrayidx8545;
 $8961 = $8960;
 HEAP32[$8961>>2] = $8958;
 $8962 = (($8960) + 4)|0;
 $8963 = $8962;
 HEAP32[$8963>>2] = $8959;
 $8964 = $8958 ^ $8922;
 $8965 = $8959 ^ $8923;
 $8966 = (_bitshift64Lshr(($8964|0),($8965|0),63)|0);
 $8967 = (getTempRet0() | 0);
 $8968 = (_bitshift64Shl(($8964|0),($8965|0),1)|0);
 $8969 = (getTempRet0() | 0);
 $8970 = $8966 | $8968;
 $8971 = $8967 | $8969;
 $8972 = $arrayidx5020;
 $8973 = $8972;
 HEAP32[$8973>>2] = $8970;
 $8974 = (($8972) + 4)|0;
 $8975 = $8974;
 HEAP32[$8975>>2] = $8971;
 $8976 = (_i64Add(($8806|0),($8807|0),($8698|0),($8699|0))|0);
 $8977 = (getTempRet0() | 0);
 $8978 = (_bitshift64Shl(($8698|0),($8699|0),1)|0);
 $8979 = (getTempRet0() | 0);
 $8980 = $8978 & -2;
 $8981 = $8979 & 1;
 $8982 = (___muldi3(($8980|0),($8981|0),($8806|0),0)|0);
 $8983 = (getTempRet0() | 0);
 $8984 = (_i64Add(($8976|0),($8977|0),($8982|0),($8983|0))|0);
 $8985 = (getTempRet0() | 0);
 $8986 = $8984 ^ $8628;
 $8987 = $8985 ^ $8629;
 $8988 = (_i64Add(($8987|0),($8986|0),($8560|0),($8561|0))|0);
 $8989 = (getTempRet0() | 0);
 $8990 = (_bitshift64Shl(($8560|0),($8561|0),1)|0);
 $8991 = (getTempRet0() | 0);
 $8992 = $8990 & -2;
 $8993 = $8991 & 1;
 $8994 = (___muldi3(($8987|0),0,($8992|0),($8993|0))|0);
 $8995 = (getTempRet0() | 0);
 $8996 = (_i64Add(($8988|0),($8989|0),($8994|0),($8995|0))|0);
 $8997 = (getTempRet0() | 0);
 $8998 = $8996 ^ $8806;
 $8999 = $8997 ^ $8807;
 $9000 = (_bitshift64Lshr(($8998|0),($8999|0),24)|0);
 $9001 = (getTempRet0() | 0);
 $9002 = (_bitshift64Shl(($8998|0),($8999|0),40)|0);
 $9003 = (getTempRet0() | 0);
 $9004 = $9000 | $9002;
 $9005 = $9001 | $9003;
 $9006 = (_i64Add(($9004|0),($9005|0),($8984|0),($8985|0))|0);
 $9007 = (getTempRet0() | 0);
 $9008 = (_bitshift64Shl(($8984|0),($8985|0),1)|0);
 $9009 = (getTempRet0() | 0);
 $9010 = $9008 & -2;
 $9011 = $9009 & 1;
 $9012 = (___muldi3(($9000|0),0,($9010|0),($9011|0))|0);
 $9013 = (getTempRet0() | 0);
 $9014 = (_i64Add(($9006|0),($9007|0),($9012|0),($9013|0))|0);
 $9015 = (getTempRet0() | 0);
 $9016 = $arrayidx1702;
 $9017 = $9016;
 HEAP32[$9017>>2] = $9014;
 $9018 = (($9016) + 4)|0;
 $9019 = $9018;
 HEAP32[$9019>>2] = $9015;
 $9020 = $9014 ^ $8987;
 $9021 = $9015 ^ $8986;
 $9022 = (_bitshift64Lshr(($9020|0),($9021|0),16)|0);
 $9023 = (getTempRet0() | 0);
 $9024 = (_bitshift64Shl(($9020|0),($9021|0),48)|0);
 $9025 = (getTempRet0() | 0);
 $9026 = $9022 | $9024;
 $9027 = $9023 | $9025;
 $9028 = $arrayidx10204;
 $9029 = $9028;
 HEAP32[$9029>>2] = $9026;
 $9030 = (($9028) + 4)|0;
 $9031 = $9030;
 HEAP32[$9031>>2] = $9027;
 $9032 = (_i64Add(($9026|0),($9027|0),($8996|0),($8997|0))|0);
 $9033 = (getTempRet0() | 0);
 $9034 = (_bitshift64Shl(($8996|0),($8997|0),1)|0);
 $9035 = (getTempRet0() | 0);
 $9036 = $9034 & -2;
 $9037 = $9035 & 1;
 $9038 = (___muldi3(($9022|0),0,($9036|0),($9037|0))|0);
 $9039 = (getTempRet0() | 0);
 $9040 = (_i64Add(($9032|0),($9033|0),($9038|0),($9039|0))|0);
 $9041 = (getTempRet0() | 0);
 $9042 = $arrayidx6679;
 $9043 = $9042;
 HEAP32[$9043>>2] = $9040;
 $9044 = (($9042) + 4)|0;
 $9045 = $9044;
 HEAP32[$9045>>2] = $9041;
 $9046 = $9040 ^ $9004;
 $9047 = $9041 ^ $9005;
 $9048 = (_bitshift64Lshr(($9046|0),($9047|0),63)|0);
 $9049 = (getTempRet0() | 0);
 $9050 = (_bitshift64Shl(($9046|0),($9047|0),1)|0);
 $9051 = (getTempRet0() | 0);
 $9052 = $9048 | $9050;
 $9053 = $9049 | $9051;
 $9054 = $arrayidx5227;
 $9055 = $9054;
 HEAP32[$9055>>2] = $9052;
 $9056 = (($9054) + 4)|0;
 $9057 = $9056;
 HEAP32[$9057>>2] = $9053;
 $9058 = (_i64Add(($8776|0),($8777|0),($8572|0),($8573|0))|0);
 $9059 = (getTempRet0() | 0);
 $9060 = (_bitshift64Shl(($8776|0),($8777|0),1)|0);
 $9061 = (getTempRet0() | 0);
 $9062 = $9060 & -2;
 $9063 = $9061 & 1;
 $9064 = (___muldi3(($9062|0),($9063|0),($8572|0),0)|0);
 $9065 = (getTempRet0() | 0);
 $9066 = (_i64Add(($9058|0),($9059|0),($9064|0),($9065|0))|0);
 $9067 = (getTempRet0() | 0);
 $9068 = $8710 ^ $9066;
 $9069 = $8711 ^ $9067;
 $9070 = (_i64Add(($9069|0),($9068|0),($8642|0),($8643|0))|0);
 $9071 = (getTempRet0() | 0);
 $9072 = (_bitshift64Shl(($8642|0),($8643|0),1)|0);
 $9073 = (getTempRet0() | 0);
 $9074 = $9072 & -2;
 $9075 = $9073 & 1;
 $9076 = (___muldi3(($9069|0),0,($9074|0),($9075|0))|0);
 $9077 = (getTempRet0() | 0);
 $9078 = (_i64Add(($9070|0),($9071|0),($9076|0),($9077|0))|0);
 $9079 = (getTempRet0() | 0);
 $9080 = $9078 ^ $8572;
 $9081 = $9079 ^ $8573;
 $9082 = (_bitshift64Lshr(($9080|0),($9081|0),24)|0);
 $9083 = (getTempRet0() | 0);
 $9084 = (_bitshift64Shl(($9080|0),($9081|0),40)|0);
 $9085 = (getTempRet0() | 0);
 $9086 = $9082 | $9084;
 $9087 = $9083 | $9085;
 $9088 = (_i64Add(($9086|0),($9087|0),($9066|0),($9067|0))|0);
 $9089 = (getTempRet0() | 0);
 $9090 = (_bitshift64Shl(($9066|0),($9067|0),1)|0);
 $9091 = (getTempRet0() | 0);
 $9092 = $9090 & -2;
 $9093 = $9091 & 1;
 $9094 = (___muldi3(($9082|0),0,($9092|0),($9093|0))|0);
 $9095 = (getTempRet0() | 0);
 $9096 = (_i64Add(($9088|0),($9089|0),($9094|0),($9095|0))|0);
 $9097 = (getTempRet0() | 0);
 $9098 = $arrayidx1909;
 $9099 = $9098;
 HEAP32[$9099>>2] = $9096;
 $9100 = (($9098) + 4)|0;
 $9101 = $9100;
 HEAP32[$9101>>2] = $9097;
 $9102 = $9096 ^ $9069;
 $9103 = $9097 ^ $9068;
 $9104 = (_bitshift64Lshr(($9102|0),($9103|0),16)|0);
 $9105 = (getTempRet0() | 0);
 $9106 = (_bitshift64Shl(($9102|0),($9103|0),48)|0);
 $9107 = (getTempRet0() | 0);
 $9108 = $9104 | $9106;
 $9109 = $9105 | $9107;
 $9110 = $arrayidx11656;
 $9111 = $9110;
 HEAP32[$9111>>2] = $9108;
 $9112 = (($9110) + 4)|0;
 $9113 = $9112;
 HEAP32[$9113>>2] = $9109;
 $9114 = (_i64Add(($9108|0),($9109|0),($9078|0),($9079|0))|0);
 $9115 = (getTempRet0() | 0);
 $9116 = (_bitshift64Shl(($9078|0),($9079|0),1)|0);
 $9117 = (getTempRet0() | 0);
 $9118 = $9116 & -2;
 $9119 = $9117 & 1;
 $9120 = (___muldi3(($9104|0),0,($9118|0),($9119|0))|0);
 $9121 = (getTempRet0() | 0);
 $9122 = (_i64Add(($9114|0),($9115|0),($9120|0),($9121|0))|0);
 $9123 = (getTempRet0() | 0);
 $9124 = $arrayidx6886;
 $9125 = $9124;
 HEAP32[$9125>>2] = $9122;
 $9126 = (($9124) + 4)|0;
 $9127 = $9126;
 HEAP32[$9127>>2] = $9123;
 $9128 = $9122 ^ $9086;
 $9129 = $9123 ^ $9087;
 $9130 = (_bitshift64Lshr(($9128|0),($9129|0),63)|0);
 $9131 = (getTempRet0() | 0);
 $9132 = (_bitshift64Shl(($9128|0),($9129|0),1)|0);
 $9133 = (getTempRet0() | 0);
 $9134 = $9130 | $9132;
 $9135 = $9131 | $9133;
 $9136 = $arrayidx3361;
 $9137 = $9136;
 HEAP32[$9137>>2] = $9134;
 $9138 = (($9136) + 4)|0;
 $9139 = $9138;
 HEAP32[$9139>>2] = $9135;
 $9140 = (_i64Add(($1956|0),($1957|0),($476|0),($477|0))|0);
 $9141 = (getTempRet0() | 0);
 $9142 = (_bitshift64Shl(($476|0),($477|0),1)|0);
 $9143 = (getTempRet0() | 0);
 $9144 = $9142 & -2;
 $9145 = $9143 & 1;
 $9146 = (___muldi3(($1956|0),0,($9144|0),($9145|0))|0);
 $9147 = (getTempRet0() | 0);
 $9148 = (_i64Add(($9140|0),($9141|0),($9146|0),($9147|0))|0);
 $9149 = (getTempRet0() | 0);
 $9150 = $4916 ^ $9148;
 $9151 = $4917 ^ $9149;
 $9152 = (_i64Add(($9151|0),($9150|0),($3436|0),($3437|0))|0);
 $9153 = (getTempRet0() | 0);
 $9154 = (_bitshift64Shl(($3436|0),($3437|0),1)|0);
 $9155 = (getTempRet0() | 0);
 $9156 = $9154 & -2;
 $9157 = $9155 & 1;
 $9158 = (___muldi3(($9151|0),0,($9156|0),($9157|0))|0);
 $9159 = (getTempRet0() | 0);
 $9160 = (_i64Add(($9152|0),($9153|0),($9158|0),($9159|0))|0);
 $9161 = (getTempRet0() | 0);
 $9162 = $9160 ^ $1956;
 $9163 = $9161 ^ $1957;
 $9164 = (_bitshift64Lshr(($9162|0),($9163|0),24)|0);
 $9165 = (getTempRet0() | 0);
 $9166 = (_bitshift64Shl(($9162|0),($9163|0),40)|0);
 $9167 = (getTempRet0() | 0);
 $9168 = $9164 | $9166;
 $9169 = $9165 | $9167;
 $9170 = (_i64Add(($9168|0),($9169|0),($9148|0),($9149|0))|0);
 $9171 = (getTempRet0() | 0);
 $9172 = (_bitshift64Shl(($9148|0),($9149|0),1)|0);
 $9173 = (getTempRet0() | 0);
 $9174 = $9172 & -2;
 $9175 = $9173 & 1;
 $9176 = (___muldi3(($9164|0),0,($9174|0),($9175|0))|0);
 $9177 = (getTempRet0() | 0);
 $9178 = (_i64Add(($9170|0),($9171|0),($9176|0),($9177|0))|0);
 $9179 = (getTempRet0() | 0);
 $9180 = $arrayidx457;
 $9181 = $9180;
 HEAP32[$9181>>2] = $9178;
 $9182 = (($9180) + 4)|0;
 $9183 = $9182;
 HEAP32[$9183>>2] = $9179;
 $9184 = $9178 ^ $9151;
 $9185 = $9179 ^ $9150;
 $9186 = (_bitshift64Lshr(($9184|0),($9185|0),16)|0);
 $9187 = (getTempRet0() | 0);
 $9188 = (_bitshift64Shl(($9184|0),($9185|0),48)|0);
 $9189 = (getTempRet0() | 0);
 $9190 = $9186 | $9188;
 $9191 = $9187 | $9189;
 $9192 = $arrayidx10411;
 $9193 = $9192;
 HEAP32[$9193>>2] = $9190;
 $9194 = (($9192) + 4)|0;
 $9195 = $9194;
 HEAP32[$9195>>2] = $9191;
 $9196 = (_i64Add(($9190|0),($9191|0),($9160|0),($9161|0))|0);
 $9197 = (getTempRet0() | 0);
 $9198 = (_bitshift64Shl(($9160|0),($9161|0),1)|0);
 $9199 = (getTempRet0() | 0);
 $9200 = $9198 & -2;
 $9201 = $9199 & 1;
 $9202 = (___muldi3(($9186|0),0,($9200|0),($9201|0))|0);
 $9203 = (getTempRet0() | 0);
 $9204 = (_i64Add(($9196|0),($9197|0),($9202|0),($9203|0))|0);
 $9205 = (getTempRet0() | 0);
 $9206 = $arrayidx7093;
 $9207 = $9206;
 HEAP32[$9207>>2] = $9204;
 $9208 = (($9206) + 4)|0;
 $9209 = $9208;
 HEAP32[$9209>>2] = $9205;
 $9210 = $9204 ^ $9168;
 $9211 = $9205 ^ $9169;
 $9212 = (_bitshift64Lshr(($9210|0),($9211|0),63)|0);
 $9213 = (getTempRet0() | 0);
 $9214 = (_bitshift64Shl(($9210|0),($9211|0),1)|0);
 $9215 = (getTempRet0() | 0);
 $9216 = $9212 | $9214;
 $9217 = $9213 | $9215;
 $9218 = $arrayidx3775;
 $9219 = $9218;
 HEAP32[$9219>>2] = $9216;
 $9220 = (($9218) + 4)|0;
 $9221 = $9220;
 HEAP32[$9221>>2] = $9217;
 $9222 = (_i64Add(($2038|0),($2039|0),($558|0),($559|0))|0);
 $9223 = (getTempRet0() | 0);
 $9224 = (_bitshift64Shl(($558|0),($559|0),1)|0);
 $9225 = (getTempRet0() | 0);
 $9226 = $9224 & -2;
 $9227 = $9225 & 1;
 $9228 = (___muldi3(($2038|0),0,($9226|0),($9227|0))|0);
 $9229 = (getTempRet0() | 0);
 $9230 = (_i64Add(($9222|0),($9223|0),($9228|0),($9229|0))|0);
 $9231 = (getTempRet0() | 0);
 $9232 = $4998 ^ $9230;
 $9233 = $4999 ^ $9231;
 $9234 = (_i64Add(($9233|0),($9232|0),($3518|0),($3519|0))|0);
 $9235 = (getTempRet0() | 0);
 $9236 = (_bitshift64Shl(($3518|0),($3519|0),1)|0);
 $9237 = (getTempRet0() | 0);
 $9238 = $9236 & -2;
 $9239 = $9237 & 1;
 $9240 = (___muldi3(($9233|0),0,($9238|0),($9239|0))|0);
 $9241 = (getTempRet0() | 0);
 $9242 = (_i64Add(($9234|0),($9235|0),($9240|0),($9241|0))|0);
 $9243 = (getTempRet0() | 0);
 $9244 = $9242 ^ $2038;
 $9245 = $9243 ^ $2039;
 $9246 = (_bitshift64Lshr(($9244|0),($9245|0),24)|0);
 $9247 = (getTempRet0() | 0);
 $9248 = (_bitshift64Shl(($9244|0),($9245|0),40)|0);
 $9249 = (getTempRet0() | 0);
 $9250 = $9246 | $9248;
 $9251 = $9247 | $9249;
 $9252 = (_i64Add(($9250|0),($9251|0),($9230|0),($9231|0))|0);
 $9253 = (getTempRet0() | 0);
 $9254 = (_bitshift64Shl(($9230|0),($9231|0),1)|0);
 $9255 = (getTempRet0() | 0);
 $9256 = $9254 & -2;
 $9257 = $9255 & 1;
 $9258 = (___muldi3(($9246|0),0,($9256|0),($9257|0))|0);
 $9259 = (getTempRet0() | 0);
 $9260 = (_i64Add(($9252|0),($9253|0),($9258|0),($9259|0))|0);
 $9261 = (getTempRet0() | 0);
 $9262 = $arrayidx664;
 $9263 = $9262;
 HEAP32[$9263>>2] = $9260;
 $9264 = (($9262) + 4)|0;
 $9265 = $9264;
 HEAP32[$9265>>2] = $9261;
 $9266 = $9260 ^ $9233;
 $9267 = $9261 ^ $9232;
 $9268 = (_bitshift64Lshr(($9266|0),($9267|0),16)|0);
 $9269 = (getTempRet0() | 0);
 $9270 = (_bitshift64Shl(($9266|0),($9267|0),48)|0);
 $9271 = (getTempRet0() | 0);
 $9272 = $9268 | $9270;
 $9273 = $9269 | $9271;
 $9274 = $arrayidx10618;
 $9275 = $9274;
 HEAP32[$9275>>2] = $9272;
 $9276 = (($9274) + 4)|0;
 $9277 = $9276;
 HEAP32[$9277>>2] = $9273;
 $9278 = (_i64Add(($9272|0),($9273|0),($9242|0),($9243|0))|0);
 $9279 = (getTempRet0() | 0);
 $9280 = (_bitshift64Shl(($9242|0),($9243|0),1)|0);
 $9281 = (getTempRet0() | 0);
 $9282 = $9280 & -2;
 $9283 = $9281 & 1;
 $9284 = (___muldi3(($9268|0),0,($9282|0),($9283|0))|0);
 $9285 = (getTempRet0() | 0);
 $9286 = (_i64Add(($9278|0),($9279|0),($9284|0),($9285|0))|0);
 $9287 = (getTempRet0() | 0);
 $9288 = $arrayidx7300;
 $9289 = $9288;
 HEAP32[$9289>>2] = $9286;
 $9290 = (($9288) + 4)|0;
 $9291 = $9290;
 HEAP32[$9291>>2] = $9287;
 $9292 = $9286 ^ $9250;
 $9293 = $9287 ^ $9251;
 $9294 = (_bitshift64Lshr(($9292|0),($9293|0),63)|0);
 $9295 = (getTempRet0() | 0);
 $9296 = (_bitshift64Shl(($9292|0),($9293|0),1)|0);
 $9297 = (getTempRet0() | 0);
 $9298 = $9294 | $9296;
 $9299 = $9295 | $9297;
 $9300 = $arrayidx3982;
 $9301 = $9300;
 HEAP32[$9301>>2] = $9298;
 $9302 = (($9300) + 4)|0;
 $9303 = $9302;
 HEAP32[$9303>>2] = $9299;
 $9304 = (_i64Add(($2696|0),($2697|0),($1216|0),($1217|0))|0);
 $9305 = (getTempRet0() | 0);
 $9306 = (_bitshift64Shl(($1216|0),($1217|0),1)|0);
 $9307 = (getTempRet0() | 0);
 $9308 = $9306 & -2;
 $9309 = $9307 & 1;
 $9310 = (___muldi3(($2696|0),0,($9308|0),($9309|0))|0);
 $9311 = (getTempRet0() | 0);
 $9312 = (_i64Add(($9304|0),($9305|0),($9310|0),($9311|0))|0);
 $9313 = (getTempRet0() | 0);
 $9314 = $5656 ^ $9312;
 $9315 = $5657 ^ $9313;
 $9316 = (_i64Add(($9315|0),($9314|0),($4176|0),($4177|0))|0);
 $9317 = (getTempRet0() | 0);
 $9318 = (_bitshift64Shl(($4176|0),($4177|0),1)|0);
 $9319 = (getTempRet0() | 0);
 $9320 = $9318 & -2;
 $9321 = $9319 & 1;
 $9322 = (___muldi3(($9315|0),0,($9320|0),($9321|0))|0);
 $9323 = (getTempRet0() | 0);
 $9324 = (_i64Add(($9316|0),($9317|0),($9322|0),($9323|0))|0);
 $9325 = (getTempRet0() | 0);
 $9326 = $9324 ^ $2696;
 $9327 = $9325 ^ $2697;
 $9328 = (_bitshift64Lshr(($9326|0),($9327|0),24)|0);
 $9329 = (getTempRet0() | 0);
 $9330 = (_bitshift64Shl(($9326|0),($9327|0),40)|0);
 $9331 = (getTempRet0() | 0);
 $9332 = $9328 | $9330;
 $9333 = $9329 | $9331;
 $9334 = (_i64Add(($9332|0),($9333|0),($9312|0),($9313|0))|0);
 $9335 = (getTempRet0() | 0);
 $9336 = (_bitshift64Shl(($9312|0),($9313|0),1)|0);
 $9337 = (getTempRet0() | 0);
 $9338 = $9336 & -2;
 $9339 = $9337 & 1;
 $9340 = (___muldi3(($9328|0),0,($9338|0),($9339|0))|0);
 $9341 = (getTempRet0() | 0);
 $9342 = (_i64Add(($9334|0),($9335|0),($9340|0),($9341|0))|0);
 $9343 = (getTempRet0() | 0);
 $9344 = $arrayidx2116;
 $9345 = $9344;
 HEAP32[$9345>>2] = $9342;
 $9346 = (($9344) + 4)|0;
 $9347 = $9346;
 HEAP32[$9347>>2] = $9343;
 $9348 = $9342 ^ $9315;
 $9349 = $9343 ^ $9314;
 $9350 = (_bitshift64Lshr(($9348|0),($9349|0),16)|0);
 $9351 = (getTempRet0() | 0);
 $9352 = (_bitshift64Shl(($9348|0),($9349|0),48)|0);
 $9353 = (getTempRet0() | 0);
 $9354 = $9350 | $9352;
 $9355 = $9351 | $9353;
 $9356 = $arrayidx12070;
 $9357 = $9356;
 HEAP32[$9357>>2] = $9354;
 $9358 = (($9356) + 4)|0;
 $9359 = $9358;
 HEAP32[$9359>>2] = $9355;
 $9360 = (_i64Add(($9354|0),($9355|0),($9324|0),($9325|0))|0);
 $9361 = (getTempRet0() | 0);
 $9362 = (_bitshift64Shl(($9324|0),($9325|0),1)|0);
 $9363 = (getTempRet0() | 0);
 $9364 = $9362 & -2;
 $9365 = $9363 & 1;
 $9366 = (___muldi3(($9350|0),0,($9364|0),($9365|0))|0);
 $9367 = (getTempRet0() | 0);
 $9368 = (_i64Add(($9360|0),($9361|0),($9366|0),($9367|0))|0);
 $9369 = (getTempRet0() | 0);
 $9370 = $9368 ^ $9332;
 $9371 = $9369 ^ $9333;
 $9372 = (_bitshift64Lshr(($9370|0),($9371|0),63)|0);
 $9373 = (getTempRet0() | 0);
 $9374 = (_bitshift64Shl(($9370|0),($9371|0),1)|0);
 $9375 = (getTempRet0() | 0);
 $9376 = $9372 | $9374;
 $9377 = $9373 | $9375;
 $9378 = $arrayidx5434;
 $9379 = $9378;
 HEAP32[$9379>>2] = $9376;
 $9380 = (($9378) + 4)|0;
 $9381 = $9380;
 HEAP32[$9381>>2] = $9377;
 $9382 = (_i64Add(($2778|0),($2779|0),($1298|0),($1299|0))|0);
 $9383 = (getTempRet0() | 0);
 $9384 = (_bitshift64Shl(($1298|0),($1299|0),1)|0);
 $9385 = (getTempRet0() | 0);
 $9386 = $9384 & -2;
 $9387 = $9385 & 1;
 $9388 = (___muldi3(($2778|0),0,($9386|0),($9387|0))|0);
 $9389 = (getTempRet0() | 0);
 $9390 = (_i64Add(($9382|0),($9383|0),($9388|0),($9389|0))|0);
 $9391 = (getTempRet0() | 0);
 $9392 = $5738 ^ $9390;
 $9393 = $5739 ^ $9391;
 $9394 = (_i64Add(($9393|0),($9392|0),($4258|0),($4259|0))|0);
 $9395 = (getTempRet0() | 0);
 $9396 = (_bitshift64Shl(($4258|0),($4259|0),1)|0);
 $9397 = (getTempRet0() | 0);
 $9398 = $9396 & -2;
 $9399 = $9397 & 1;
 $9400 = (___muldi3(($9393|0),0,($9398|0),($9399|0))|0);
 $9401 = (getTempRet0() | 0);
 $9402 = (_i64Add(($9394|0),($9395|0),($9400|0),($9401|0))|0);
 $9403 = (getTempRet0() | 0);
 $9404 = $9402 ^ $2778;
 $9405 = $9403 ^ $2779;
 $9406 = (_bitshift64Lshr(($9404|0),($9405|0),24)|0);
 $9407 = (getTempRet0() | 0);
 $9408 = (_bitshift64Shl(($9404|0),($9405|0),40)|0);
 $9409 = (getTempRet0() | 0);
 $9410 = $9406 | $9408;
 $9411 = $9407 | $9409;
 $9412 = (_i64Add(($9410|0),($9411|0),($9390|0),($9391|0))|0);
 $9413 = (getTempRet0() | 0);
 $9414 = (_bitshift64Shl(($9390|0),($9391|0),1)|0);
 $9415 = (getTempRet0() | 0);
 $9416 = $9414 & -2;
 $9417 = $9415 & 1;
 $9418 = (___muldi3(($9406|0),0,($9416|0),($9417|0))|0);
 $9419 = (getTempRet0() | 0);
 $9420 = (_i64Add(($9412|0),($9413|0),($9418|0),($9419|0))|0);
 $9421 = (getTempRet0() | 0);
 $9422 = $arrayidx2323;
 $9423 = $9422;
 HEAP32[$9423>>2] = $9420;
 $9424 = (($9422) + 4)|0;
 $9425 = $9424;
 HEAP32[$9425>>2] = $9421;
 $9426 = $9420 ^ $9393;
 $9427 = $9421 ^ $9392;
 $9428 = (_bitshift64Lshr(($9426|0),($9427|0),16)|0);
 $9429 = (getTempRet0() | 0);
 $9430 = (_bitshift64Shl(($9426|0),($9427|0),48)|0);
 $9431 = (getTempRet0() | 0);
 $9432 = $9428 | $9430;
 $9433 = $9429 | $9431;
 $9434 = (_i64Add(($9432|0),($9433|0),($9402|0),($9403|0))|0);
 $9435 = (getTempRet0() | 0);
 $9436 = (_bitshift64Shl(($9402|0),($9403|0),1)|0);
 $9437 = (getTempRet0() | 0);
 $9438 = $9436 & -2;
 $9439 = $9437 & 1;
 $9440 = (___muldi3(($9428|0),0,($9438|0),($9439|0))|0);
 $9441 = (getTempRet0() | 0);
 $9442 = (_i64Add(($9434|0),($9435|0),($9440|0),($9441|0))|0);
 $9443 = (getTempRet0() | 0);
 $9444 = $9442 ^ $9410;
 $9445 = $9443 ^ $9411;
 $9446 = (_bitshift64Lshr(($9444|0),($9445|0),63)|0);
 $9447 = (getTempRet0() | 0);
 $9448 = (_bitshift64Shl(($9444|0),($9445|0),1)|0);
 $9449 = (getTempRet0() | 0);
 $9450 = $9446 | $9448;
 $9451 = $9447 | $9449;
 $9452 = $arrayidx5641;
 $9453 = $9452;
 HEAP32[$9453>>2] = $9450;
 $9454 = (($9452) + 4)|0;
 $9455 = $9454;
 HEAP32[$9455>>2] = $9451;
 $9456 = (_i64Add(($9298|0),($9299|0),($9178|0),($9179|0))|0);
 $9457 = (getTempRet0() | 0);
 $9458 = (_bitshift64Shl(($9178|0),($9179|0),1)|0);
 $9459 = (getTempRet0() | 0);
 $9460 = $9458 & -2;
 $9461 = $9459 & 1;
 $9462 = (___muldi3(($9298|0),0,($9460|0),($9461|0))|0);
 $9463 = (getTempRet0() | 0);
 $9464 = (_i64Add(($9456|0),($9457|0),($9462|0),($9463|0))|0);
 $9465 = (getTempRet0() | 0);
 $9466 = $9432 ^ $9464;
 $9467 = $9433 ^ $9465;
 $9468 = (_i64Add(($9467|0),($9466|0),($9368|0),($9369|0))|0);
 $9469 = (getTempRet0() | 0);
 $9470 = (_bitshift64Shl(($9368|0),($9369|0),1)|0);
 $9471 = (getTempRet0() | 0);
 $9472 = $9470 & -2;
 $9473 = $9471 & 1;
 $9474 = (___muldi3(($9472|0),($9473|0),($9467|0),0)|0);
 $9475 = (getTempRet0() | 0);
 $9476 = (_i64Add(($9468|0),($9469|0),($9474|0),($9475|0))|0);
 $9477 = (getTempRet0() | 0);
 $9478 = $9476 ^ $9298;
 $9479 = $9477 ^ $9299;
 $9480 = (_bitshift64Lshr(($9478|0),($9479|0),24)|0);
 $9481 = (getTempRet0() | 0);
 $9482 = (_bitshift64Shl(($9478|0),($9479|0),40)|0);
 $9483 = (getTempRet0() | 0);
 $9484 = $9480 | $9482;
 $9485 = $9481 | $9483;
 $9486 = (_i64Add(($9484|0),($9485|0),($9464|0),($9465|0))|0);
 $9487 = (getTempRet0() | 0);
 $9488 = (_bitshift64Shl(($9464|0),($9465|0),1)|0);
 $9489 = (getTempRet0() | 0);
 $9490 = $9488 & -2;
 $9491 = $9489 & 1;
 $9492 = (___muldi3(($9480|0),0,($9490|0),($9491|0))|0);
 $9493 = (getTempRet0() | 0);
 $9494 = (_i64Add(($9486|0),($9487|0),($9492|0),($9493|0))|0);
 $9495 = (getTempRet0() | 0);
 $9496 = $arrayidx457;
 $9497 = $9496;
 HEAP32[$9497>>2] = $9494;
 $9498 = (($9496) + 4)|0;
 $9499 = $9498;
 HEAP32[$9499>>2] = $9495;
 $9500 = $9494 ^ $9467;
 $9501 = $9495 ^ $9466;
 $9502 = (_bitshift64Lshr(($9500|0),($9501|0),16)|0);
 $9503 = (getTempRet0() | 0);
 $9504 = (_bitshift64Shl(($9500|0),($9501|0),48)|0);
 $9505 = (getTempRet0() | 0);
 $9506 = $9502 | $9504;
 $9507 = $9503 | $9505;
 $9508 = $arrayidx12277;
 $9509 = $9508;
 HEAP32[$9509>>2] = $9506;
 $9510 = (($9508) + 4)|0;
 $9511 = $9510;
 HEAP32[$9511>>2] = $9507;
 $9512 = (_i64Add(($9506|0),($9507|0),($9476|0),($9477|0))|0);
 $9513 = (getTempRet0() | 0);
 $9514 = (_bitshift64Shl(($9476|0),($9477|0),1)|0);
 $9515 = (getTempRet0() | 0);
 $9516 = $9514 & -2;
 $9517 = $9515 & 1;
 $9518 = (___muldi3(($9502|0),0,($9516|0),($9517|0))|0);
 $9519 = (getTempRet0() | 0);
 $9520 = (_i64Add(($9512|0),($9513|0),($9518|0),($9519|0))|0);
 $9521 = (getTempRet0() | 0);
 $9522 = $arrayidx8752;
 $9523 = $9522;
 HEAP32[$9523>>2] = $9520;
 $9524 = (($9522) + 4)|0;
 $9525 = $9524;
 HEAP32[$9525>>2] = $9521;
 $9526 = $9520 ^ $9484;
 $9527 = $9521 ^ $9485;
 $9528 = (_bitshift64Lshr(($9526|0),($9527|0),63)|0);
 $9529 = (getTempRet0() | 0);
 $9530 = (_bitshift64Shl(($9526|0),($9527|0),1)|0);
 $9531 = (getTempRet0() | 0);
 $9532 = $9528 | $9530;
 $9533 = $9529 | $9531;
 $9534 = $arrayidx3982;
 $9535 = $9534;
 HEAP32[$9535>>2] = $9532;
 $9536 = (($9534) + 4)|0;
 $9537 = $9536;
 HEAP32[$9537>>2] = $9533;
 $9538 = (_i64Add(($9376|0),($9377|0),($9260|0),($9261|0))|0);
 $9539 = (getTempRet0() | 0);
 $9540 = (_bitshift64Shl(($9260|0),($9261|0),1)|0);
 $9541 = (getTempRet0() | 0);
 $9542 = $9540 & -2;
 $9543 = $9541 & 1;
 $9544 = (___muldi3(($9376|0),0,($9542|0),($9543|0))|0);
 $9545 = (getTempRet0() | 0);
 $9546 = (_i64Add(($9538|0),($9539|0),($9544|0),($9545|0))|0);
 $9547 = (getTempRet0() | 0);
 $9548 = $9546 ^ $9190;
 $9549 = $9547 ^ $9191;
 $9550 = (_i64Add(($9549|0),($9548|0),($9442|0),($9443|0))|0);
 $9551 = (getTempRet0() | 0);
 $9552 = (_bitshift64Shl(($9442|0),($9443|0),1)|0);
 $9553 = (getTempRet0() | 0);
 $9554 = $9552 & -2;
 $9555 = $9553 & 1;
 $9556 = (___muldi3(($9549|0),0,($9554|0),($9555|0))|0);
 $9557 = (getTempRet0() | 0);
 $9558 = (_i64Add(($9550|0),($9551|0),($9556|0),($9557|0))|0);
 $9559 = (getTempRet0() | 0);
 $9560 = $9558 ^ $9376;
 $9561 = $9559 ^ $9377;
 $9562 = (_bitshift64Lshr(($9560|0),($9561|0),24)|0);
 $9563 = (getTempRet0() | 0);
 $9564 = (_bitshift64Shl(($9560|0),($9561|0),40)|0);
 $9565 = (getTempRet0() | 0);
 $9566 = $9562 | $9564;
 $9567 = $9563 | $9565;
 $9568 = (_i64Add(($9566|0),($9567|0),($9546|0),($9547|0))|0);
 $9569 = (getTempRet0() | 0);
 $9570 = (_bitshift64Shl(($9546|0),($9547|0),1)|0);
 $9571 = (getTempRet0() | 0);
 $9572 = $9570 & -2;
 $9573 = $9571 & 1;
 $9574 = (___muldi3(($9562|0),0,($9572|0),($9573|0))|0);
 $9575 = (getTempRet0() | 0);
 $9576 = (_i64Add(($9568|0),($9569|0),($9574|0),($9575|0))|0);
 $9577 = (getTempRet0() | 0);
 $9578 = $arrayidx664;
 $9579 = $9578;
 HEAP32[$9579>>2] = $9576;
 $9580 = (($9578) + 4)|0;
 $9581 = $9580;
 HEAP32[$9581>>2] = $9577;
 $9582 = $9576 ^ $9549;
 $9583 = $9577 ^ $9548;
 $9584 = (_bitshift64Lshr(($9582|0),($9583|0),16)|0);
 $9585 = (getTempRet0() | 0);
 $9586 = (_bitshift64Shl(($9582|0),($9583|0),48)|0);
 $9587 = (getTempRet0() | 0);
 $9588 = $9584 | $9586;
 $9589 = $9585 | $9587;
 $9590 = $arrayidx10411;
 $9591 = $9590;
 HEAP32[$9591>>2] = $9588;
 $9592 = (($9590) + 4)|0;
 $9593 = $9592;
 HEAP32[$9593>>2] = $9589;
 $9594 = (_i64Add(($9588|0),($9589|0),($9558|0),($9559|0))|0);
 $9595 = (getTempRet0() | 0);
 $9596 = (_bitshift64Shl(($9558|0),($9559|0),1)|0);
 $9597 = (getTempRet0() | 0);
 $9598 = $9596 & -2;
 $9599 = $9597 & 1;
 $9600 = (___muldi3(($9584|0),0,($9598|0),($9599|0))|0);
 $9601 = (getTempRet0() | 0);
 $9602 = (_i64Add(($9594|0),($9595|0),($9600|0),($9601|0))|0);
 $9603 = (getTempRet0() | 0);
 $9604 = $arrayidx8959;
 $9605 = $9604;
 HEAP32[$9605>>2] = $9602;
 $9606 = (($9604) + 4)|0;
 $9607 = $9606;
 HEAP32[$9607>>2] = $9603;
 $9608 = $9602 ^ $9566;
 $9609 = $9603 ^ $9567;
 $9610 = (_bitshift64Lshr(($9608|0),($9609|0),63)|0);
 $9611 = (getTempRet0() | 0);
 $9612 = (_bitshift64Shl(($9608|0),($9609|0),1)|0);
 $9613 = (getTempRet0() | 0);
 $9614 = $9610 | $9612;
 $9615 = $9611 | $9613;
 $9616 = $arrayidx5434;
 $9617 = $9616;
 HEAP32[$9617>>2] = $9614;
 $9618 = (($9616) + 4)|0;
 $9619 = $9618;
 HEAP32[$9619>>2] = $9615;
 $9620 = (_i64Add(($9450|0),($9451|0),($9342|0),($9343|0))|0);
 $9621 = (getTempRet0() | 0);
 $9622 = (_bitshift64Shl(($9342|0),($9343|0),1)|0);
 $9623 = (getTempRet0() | 0);
 $9624 = $9622 & -2;
 $9625 = $9623 & 1;
 $9626 = (___muldi3(($9450|0),0,($9624|0),($9625|0))|0);
 $9627 = (getTempRet0() | 0);
 $9628 = (_i64Add(($9620|0),($9621|0),($9626|0),($9627|0))|0);
 $9629 = (getTempRet0() | 0);
 $9630 = $9628 ^ $9272;
 $9631 = $9629 ^ $9273;
 $9632 = (_i64Add(($9631|0),($9630|0),($9204|0),($9205|0))|0);
 $9633 = (getTempRet0() | 0);
 $9634 = (_bitshift64Shl(($9204|0),($9205|0),1)|0);
 $9635 = (getTempRet0() | 0);
 $9636 = $9634 & -2;
 $9637 = $9635 & 1;
 $9638 = (___muldi3(($9631|0),0,($9636|0),($9637|0))|0);
 $9639 = (getTempRet0() | 0);
 $9640 = (_i64Add(($9632|0),($9633|0),($9638|0),($9639|0))|0);
 $9641 = (getTempRet0() | 0);
 $9642 = $9640 ^ $9450;
 $9643 = $9641 ^ $9451;
 $9644 = (_bitshift64Lshr(($9642|0),($9643|0),24)|0);
 $9645 = (getTempRet0() | 0);
 $9646 = (_bitshift64Shl(($9642|0),($9643|0),40)|0);
 $9647 = (getTempRet0() | 0);
 $9648 = $9644 | $9646;
 $9649 = $9645 | $9647;
 $9650 = (_i64Add(($9648|0),($9649|0),($9628|0),($9629|0))|0);
 $9651 = (getTempRet0() | 0);
 $9652 = (_bitshift64Shl(($9628|0),($9629|0),1)|0);
 $9653 = (getTempRet0() | 0);
 $9654 = $9652 & -2;
 $9655 = $9653 & 1;
 $9656 = (___muldi3(($9644|0),0,($9654|0),($9655|0))|0);
 $9657 = (getTempRet0() | 0);
 $9658 = (_i64Add(($9650|0),($9651|0),($9656|0),($9657|0))|0);
 $9659 = (getTempRet0() | 0);
 $9660 = $arrayidx2116;
 $9661 = $9660;
 HEAP32[$9661>>2] = $9658;
 $9662 = (($9660) + 4)|0;
 $9663 = $9662;
 HEAP32[$9663>>2] = $9659;
 $9664 = $9658 ^ $9631;
 $9665 = $9659 ^ $9630;
 $9666 = (_bitshift64Lshr(($9664|0),($9665|0),16)|0);
 $9667 = (getTempRet0() | 0);
 $9668 = (_bitshift64Shl(($9664|0),($9665|0),48)|0);
 $9669 = (getTempRet0() | 0);
 $9670 = $9666 | $9668;
 $9671 = $9667 | $9669;
 $9672 = $arrayidx10618;
 $9673 = $9672;
 HEAP32[$9673>>2] = $9670;
 $9674 = (($9672) + 4)|0;
 $9675 = $9674;
 HEAP32[$9675>>2] = $9671;
 $9676 = (_i64Add(($9670|0),($9671|0),($9640|0),($9641|0))|0);
 $9677 = (getTempRet0() | 0);
 $9678 = (_bitshift64Shl(($9640|0),($9641|0),1)|0);
 $9679 = (getTempRet0() | 0);
 $9680 = $9678 & -2;
 $9681 = $9679 & 1;
 $9682 = (___muldi3(($9666|0),0,($9680|0),($9681|0))|0);
 $9683 = (getTempRet0() | 0);
 $9684 = (_i64Add(($9676|0),($9677|0),($9682|0),($9683|0))|0);
 $9685 = (getTempRet0() | 0);
 $9686 = $arrayidx7093;
 $9687 = $9686;
 HEAP32[$9687>>2] = $9684;
 $9688 = (($9686) + 4)|0;
 $9689 = $9688;
 HEAP32[$9689>>2] = $9685;
 $9690 = $9684 ^ $9648;
 $9691 = $9685 ^ $9649;
 $9692 = (_bitshift64Lshr(($9690|0),($9691|0),63)|0);
 $9693 = (getTempRet0() | 0);
 $9694 = (_bitshift64Shl(($9690|0),($9691|0),1)|0);
 $9695 = (getTempRet0() | 0);
 $9696 = $9692 | $9694;
 $9697 = $9693 | $9695;
 $9698 = $arrayidx5641;
 $9699 = $9698;
 HEAP32[$9699>>2] = $9696;
 $9700 = (($9698) + 4)|0;
 $9701 = $9700;
 HEAP32[$9701>>2] = $9697;
 $9702 = (_i64Add(($9420|0),($9421|0),($9216|0),($9217|0))|0);
 $9703 = (getTempRet0() | 0);
 $9704 = (_bitshift64Shl(($9420|0),($9421|0),1)|0);
 $9705 = (getTempRet0() | 0);
 $9706 = $9704 & -2;
 $9707 = $9705 & 1;
 $9708 = (___muldi3(($9706|0),($9707|0),($9216|0),0)|0);
 $9709 = (getTempRet0() | 0);
 $9710 = (_i64Add(($9702|0),($9703|0),($9708|0),($9709|0))|0);
 $9711 = (getTempRet0() | 0);
 $9712 = $9710 ^ $9354;
 $9713 = $9711 ^ $9355;
 $9714 = (_i64Add(($9713|0),($9712|0),($9286|0),($9287|0))|0);
 $9715 = (getTempRet0() | 0);
 $9716 = (_bitshift64Shl(($9286|0),($9287|0),1)|0);
 $9717 = (getTempRet0() | 0);
 $9718 = $9716 & -2;
 $9719 = $9717 & 1;
 $9720 = (___muldi3(($9713|0),0,($9718|0),($9719|0))|0);
 $9721 = (getTempRet0() | 0);
 $9722 = (_i64Add(($9714|0),($9715|0),($9720|0),($9721|0))|0);
 $9723 = (getTempRet0() | 0);
 $9724 = $9722 ^ $9216;
 $9725 = $9723 ^ $9217;
 $9726 = (_bitshift64Lshr(($9724|0),($9725|0),24)|0);
 $9727 = (getTempRet0() | 0);
 $9728 = (_bitshift64Shl(($9724|0),($9725|0),40)|0);
 $9729 = (getTempRet0() | 0);
 $9730 = $9726 | $9728;
 $9731 = $9727 | $9729;
 $9732 = (_i64Add(($9730|0),($9731|0),($9710|0),($9711|0))|0);
 $9733 = (getTempRet0() | 0);
 $9734 = (_bitshift64Shl(($9710|0),($9711|0),1)|0);
 $9735 = (getTempRet0() | 0);
 $9736 = $9734 & -2;
 $9737 = $9735 & 1;
 $9738 = (___muldi3(($9726|0),0,($9736|0),($9737|0))|0);
 $9739 = (getTempRet0() | 0);
 $9740 = (_i64Add(($9732|0),($9733|0),($9738|0),($9739|0))|0);
 $9741 = (getTempRet0() | 0);
 $9742 = $arrayidx2323;
 $9743 = $9742;
 HEAP32[$9743>>2] = $9740;
 $9744 = (($9742) + 4)|0;
 $9745 = $9744;
 HEAP32[$9745>>2] = $9741;
 $9746 = $9740 ^ $9713;
 $9747 = $9741 ^ $9712;
 $9748 = (_bitshift64Lshr(($9746|0),($9747|0),16)|0);
 $9749 = (getTempRet0() | 0);
 $9750 = (_bitshift64Shl(($9746|0),($9747|0),48)|0);
 $9751 = (getTempRet0() | 0);
 $9752 = $9748 | $9750;
 $9753 = $9749 | $9751;
 $9754 = $arrayidx12070;
 $9755 = $9754;
 HEAP32[$9755>>2] = $9752;
 $9756 = (($9754) + 4)|0;
 $9757 = $9756;
 HEAP32[$9757>>2] = $9753;
 $9758 = (_i64Add(($9752|0),($9753|0),($9722|0),($9723|0))|0);
 $9759 = (getTempRet0() | 0);
 $9760 = (_bitshift64Shl(($9722|0),($9723|0),1)|0);
 $9761 = (getTempRet0() | 0);
 $9762 = $9760 & -2;
 $9763 = $9761 & 1;
 $9764 = (___muldi3(($9748|0),0,($9762|0),($9763|0))|0);
 $9765 = (getTempRet0() | 0);
 $9766 = (_i64Add(($9758|0),($9759|0),($9764|0),($9765|0))|0);
 $9767 = (getTempRet0() | 0);
 $9768 = $arrayidx7300;
 $9769 = $9768;
 HEAP32[$9769>>2] = $9766;
 $9770 = (($9768) + 4)|0;
 $9771 = $9770;
 HEAP32[$9771>>2] = $9767;
 $9772 = $9766 ^ $9730;
 $9773 = $9767 ^ $9731;
 $9774 = (_bitshift64Lshr(($9772|0),($9773|0),63)|0);
 $9775 = (getTempRet0() | 0);
 $9776 = (_bitshift64Shl(($9772|0),($9773|0),1)|0);
 $9777 = (getTempRet0() | 0);
 $9778 = $9774 | $9776;
 $9779 = $9775 | $9777;
 $9780 = $arrayidx3775;
 $9781 = $9780;
 HEAP32[$9781>>2] = $9778;
 $9782 = (($9780) + 4)|0;
 $9783 = $9782;
 HEAP32[$9783>>2] = $9779;
 $9784 = (_i64Add(($2024|0),($2025|0),($544|0),($545|0))|0);
 $9785 = (getTempRet0() | 0);
 $9786 = (_bitshift64Shl(($540|0),($541|0),1)|0);
 $9787 = (getTempRet0() | 0);
 $9788 = $9786 & -2;
 $9789 = $9787 & 1;
 $9790 = (___muldi3(($2020|0),0,($9788|0),($9789|0))|0);
 $9791 = (getTempRet0() | 0);
 $9792 = (_i64Add(($9784|0),($9785|0),($9790|0),($9791|0))|0);
 $9793 = (getTempRet0() | 0);
 $9794 = $4984 ^ $9792;
 $9795 = $4985 ^ $9793;
 $9796 = (_i64Add(($9795|0),($9794|0),($3504|0),($3505|0))|0);
 $9797 = (getTempRet0() | 0);
 $9798 = (_bitshift64Shl(($3500|0),($3501|0),1)|0);
 $9799 = (getTempRet0() | 0);
 $9800 = $9798 & -2;
 $9801 = $9799 & 1;
 $9802 = (___muldi3(($9795|0),0,($9800|0),($9801|0))|0);
 $9803 = (getTempRet0() | 0);
 $9804 = (_i64Add(($9796|0),($9797|0),($9802|0),($9803|0))|0);
 $9805 = (getTempRet0() | 0);
 $9806 = $9804 ^ $2024;
 $9807 = $9805 ^ $2025;
 $9808 = (_bitshift64Lshr(($9806|0),($9807|0),24)|0);
 $9809 = (getTempRet0() | 0);
 $9810 = (_bitshift64Shl(($9806|0),($9807|0),40)|0);
 $9811 = (getTempRet0() | 0);
 $9812 = $9808 | $9810;
 $9813 = $9809 | $9811;
 $9814 = (_i64Add(($9812|0),($9813|0),($9792|0),($9793|0))|0);
 $9815 = (getTempRet0() | 0);
 $9816 = (_bitshift64Shl(($9792|0),($9793|0),1)|0);
 $9817 = (getTempRet0() | 0);
 $9818 = $9816 & -2;
 $9819 = $9817 & 1;
 $9820 = (___muldi3(($9808|0),0,($9818|0),($9819|0))|0);
 $9821 = (getTempRet0() | 0);
 $9822 = (_i64Add(($9814|0),($9815|0),($9820|0),($9821|0))|0);
 $9823 = (getTempRet0() | 0);
 $9824 = $arrayidx24;
 $9825 = $9824;
 HEAP32[$9825>>2] = $9822;
 $9826 = (($9824) + 4)|0;
 $9827 = $9826;
 HEAP32[$9827>>2] = $9823;
 $9828 = $9822 ^ $9795;
 $9829 = $9823 ^ $9794;
 $9830 = (_bitshift64Lshr(($9828|0),($9829|0),16)|0);
 $9831 = (getTempRet0() | 0);
 $9832 = (_bitshift64Shl(($9828|0),($9829|0),48)|0);
 $9833 = (getTempRet0() | 0);
 $9834 = $9830 | $9832;
 $9835 = $9831 | $9833;
 $9836 = $arrayidx9972;
 $9837 = $9836;
 HEAP32[$9837>>2] = $9834;
 $9838 = (($9836) + 4)|0;
 $9839 = $9838;
 HEAP32[$9839>>2] = $9835;
 $9840 = (_i64Add(($9834|0),($9835|0),($9804|0),($9805|0))|0);
 $9841 = (getTempRet0() | 0);
 $9842 = (_bitshift64Shl(($9804|0),($9805|0),1)|0);
 $9843 = (getTempRet0() | 0);
 $9844 = $9842 & -2;
 $9845 = $9843 & 1;
 $9846 = (___muldi3(($9830|0),0,($9844|0),($9845|0))|0);
 $9847 = (getTempRet0() | 0);
 $9848 = (_i64Add(($9840|0),($9841|0),($9846|0),($9847|0))|0);
 $9849 = (getTempRet0() | 0);
 $9850 = $arrayidx6654;
 $9851 = $9850;
 HEAP32[$9851>>2] = $9848;
 $9852 = (($9850) + 4)|0;
 $9853 = $9852;
 HEAP32[$9853>>2] = $9849;
 $9854 = $9848 ^ $9812;
 $9855 = $9849 ^ $9813;
 $9856 = (_bitshift64Lshr(($9854|0),($9855|0),63)|0);
 $9857 = (getTempRet0() | 0);
 $9858 = (_bitshift64Shl(($9854|0),($9855|0),1)|0);
 $9859 = (getTempRet0() | 0);
 $9860 = $9856 | $9858;
 $9861 = $9857 | $9859;
 $9862 = $arrayidx3336;
 $9863 = $9862;
 HEAP32[$9863>>2] = $9860;
 $9864 = (($9862) + 4)|0;
 $9865 = $9864;
 HEAP32[$9865>>2] = $9861;
 $9866 = (_i64Add(($2106|0),($2107|0),($626|0),($627|0))|0);
 $9867 = (getTempRet0() | 0);
 $9868 = (_bitshift64Shl(($622|0),($623|0),1)|0);
 $9869 = (getTempRet0() | 0);
 $9870 = $9868 & -2;
 $9871 = $9869 & 1;
 $9872 = (___muldi3(($2102|0),0,($9870|0),($9871|0))|0);
 $9873 = (getTempRet0() | 0);
 $9874 = (_i64Add(($9866|0),($9867|0),($9872|0),($9873|0))|0);
 $9875 = (getTempRet0() | 0);
 $9876 = $5066 ^ $9874;
 $9877 = $5067 ^ $9875;
 $9878 = (_i64Add(($9877|0),($9876|0),($3586|0),($3587|0))|0);
 $9879 = (getTempRet0() | 0);
 $9880 = (_bitshift64Shl(($3582|0),($3583|0),1)|0);
 $9881 = (getTempRet0() | 0);
 $9882 = $9880 & -2;
 $9883 = $9881 & 1;
 $9884 = (___muldi3(($9877|0),0,($9882|0),($9883|0))|0);
 $9885 = (getTempRet0() | 0);
 $9886 = (_i64Add(($9878|0),($9879|0),($9884|0),($9885|0))|0);
 $9887 = (getTempRet0() | 0);
 $9888 = $9886 ^ $2106;
 $9889 = $9887 ^ $2107;
 $9890 = (_bitshift64Lshr(($9888|0),($9889|0),24)|0);
 $9891 = (getTempRet0() | 0);
 $9892 = (_bitshift64Shl(($9888|0),($9889|0),40)|0);
 $9893 = (getTempRet0() | 0);
 $9894 = $9890 | $9892;
 $9895 = $9891 | $9893;
 $9896 = (_i64Add(($9894|0),($9895|0),($9874|0),($9875|0))|0);
 $9897 = (getTempRet0() | 0);
 $9898 = (_bitshift64Shl(($9874|0),($9875|0),1)|0);
 $9899 = (getTempRet0() | 0);
 $9900 = $9898 & -2;
 $9901 = $9899 & 1;
 $9902 = (___muldi3(($9890|0),0,($9900|0),($9901|0))|0);
 $9903 = (getTempRet0() | 0);
 $9904 = (_i64Add(($9896|0),($9897|0),($9902|0),($9903|0))|0);
 $9905 = (getTempRet0() | 0);
 $9906 = $arrayidx225;
 $9907 = $9906;
 HEAP32[$9907>>2] = $9904;
 $9908 = (($9906) + 4)|0;
 $9909 = $9908;
 HEAP32[$9909>>2] = $9905;
 $9910 = $9904 ^ $9877;
 $9911 = $9905 ^ $9876;
 $9912 = (_bitshift64Lshr(($9910|0),($9911|0),16)|0);
 $9913 = (getTempRet0() | 0);
 $9914 = (_bitshift64Shl(($9910|0),($9911|0),48)|0);
 $9915 = (getTempRet0() | 0);
 $9916 = $9912 | $9914;
 $9917 = $9913 | $9915;
 $9918 = $arrayidx10179;
 $9919 = $9918;
 HEAP32[$9919>>2] = $9916;
 $9920 = (($9918) + 4)|0;
 $9921 = $9920;
 HEAP32[$9921>>2] = $9917;
 $9922 = (_i64Add(($9916|0),($9917|0),($9886|0),($9887|0))|0);
 $9923 = (getTempRet0() | 0);
 $9924 = (_bitshift64Shl(($9886|0),($9887|0),1)|0);
 $9925 = (getTempRet0() | 0);
 $9926 = $9924 & -2;
 $9927 = $9925 & 1;
 $9928 = (___muldi3(($9912|0),0,($9926|0),($9927|0))|0);
 $9929 = (getTempRet0() | 0);
 $9930 = (_i64Add(($9922|0),($9923|0),($9928|0),($9929|0))|0);
 $9931 = (getTempRet0() | 0);
 $9932 = $arrayidx6861;
 $9933 = $9932;
 HEAP32[$9933>>2] = $9930;
 $9934 = (($9932) + 4)|0;
 $9935 = $9934;
 HEAP32[$9935>>2] = $9931;
 $9936 = $9930 ^ $9894;
 $9937 = $9931 ^ $9895;
 $9938 = (_bitshift64Lshr(($9936|0),($9937|0),63)|0);
 $9939 = (getTempRet0() | 0);
 $9940 = (_bitshift64Shl(($9936|0),($9937|0),1)|0);
 $9941 = (getTempRet0() | 0);
 $9942 = $9938 | $9940;
 $9943 = $9939 | $9941;
 $9944 = $arrayidx3543;
 $9945 = $9944;
 HEAP32[$9945>>2] = $9942;
 $9946 = (($9944) + 4)|0;
 $9947 = $9946;
 HEAP32[$9947>>2] = $9943;
 $9948 = (_i64Add(($2764|0),($2765|0),($1284|0),($1285|0))|0);
 $9949 = (getTempRet0() | 0);
 $9950 = (_bitshift64Shl(($1280|0),($1281|0),1)|0);
 $9951 = (getTempRet0() | 0);
 $9952 = $9950 & -2;
 $9953 = $9951 & 1;
 $9954 = (___muldi3(($2760|0),0,($9952|0),($9953|0))|0);
 $9955 = (getTempRet0() | 0);
 $9956 = (_i64Add(($9948|0),($9949|0),($9954|0),($9955|0))|0);
 $9957 = (getTempRet0() | 0);
 $9958 = $5724 ^ $9956;
 $9959 = $5725 ^ $9957;
 $9960 = (_i64Add(($9959|0),($9958|0),($4244|0),($4245|0))|0);
 $9961 = (getTempRet0() | 0);
 $9962 = (_bitshift64Shl(($4240|0),($4241|0),1)|0);
 $9963 = (getTempRet0() | 0);
 $9964 = $9962 & -2;
 $9965 = $9963 & 1;
 $9966 = (___muldi3(($9959|0),0,($9964|0),($9965|0))|0);
 $9967 = (getTempRet0() | 0);
 $9968 = (_i64Add(($9960|0),($9961|0),($9966|0),($9967|0))|0);
 $9969 = (getTempRet0() | 0);
 $9970 = $9968 ^ $2764;
 $9971 = $9969 ^ $2765;
 $9972 = (_bitshift64Lshr(($9970|0),($9971|0),24)|0);
 $9973 = (getTempRet0() | 0);
 $9974 = (_bitshift64Shl(($9970|0),($9971|0),40)|0);
 $9975 = (getTempRet0() | 0);
 $9976 = $9972 | $9974;
 $9977 = $9973 | $9975;
 $9978 = (_i64Add(($9976|0),($9977|0),($9956|0),($9957|0))|0);
 $9979 = (getTempRet0() | 0);
 $9980 = (_bitshift64Shl(($9956|0),($9957|0),1)|0);
 $9981 = (getTempRet0() | 0);
 $9982 = $9980 & -2;
 $9983 = $9981 & 1;
 $9984 = (___muldi3(($9972|0),0,($9982|0),($9983|0))|0);
 $9985 = (getTempRet0() | 0);
 $9986 = (_i64Add(($9978|0),($9979|0),($9984|0),($9985|0))|0);
 $9987 = (getTempRet0() | 0);
 $9988 = $arrayidx1677;
 $9989 = $9988;
 HEAP32[$9989>>2] = $9986;
 $9990 = (($9988) + 4)|0;
 $9991 = $9990;
 HEAP32[$9991>>2] = $9987;
 $9992 = $9986 ^ $9959;
 $9993 = $9987 ^ $9958;
 $9994 = (_bitshift64Lshr(($9992|0),($9993|0),16)|0);
 $9995 = (getTempRet0() | 0);
 $9996 = (_bitshift64Shl(($9992|0),($9993|0),48)|0);
 $9997 = (getTempRet0() | 0);
 $9998 = $9994 | $9996;
 $9999 = $9995 | $9997;
 $10000 = $arrayidx11631;
 $10001 = $10000;
 HEAP32[$10001>>2] = $9998;
 $10002 = (($10000) + 4)|0;
 $10003 = $10002;
 HEAP32[$10003>>2] = $9999;
 $10004 = (_i64Add(($9998|0),($9999|0),($9968|0),($9969|0))|0);
 $10005 = (getTempRet0() | 0);
 $10006 = (_bitshift64Shl(($9968|0),($9969|0),1)|0);
 $10007 = (getTempRet0() | 0);
 $10008 = $10006 & -2;
 $10009 = $10007 & 1;
 $10010 = (___muldi3(($9994|0),0,($10008|0),($10009|0))|0);
 $10011 = (getTempRet0() | 0);
 $10012 = (_i64Add(($10004|0),($10005|0),($10010|0),($10011|0))|0);
 $10013 = (getTempRet0() | 0);
 $10014 = $10012 ^ $9976;
 $10015 = $10013 ^ $9977;
 $10016 = (_bitshift64Lshr(($10014|0),($10015|0),63)|0);
 $10017 = (getTempRet0() | 0);
 $10018 = (_bitshift64Shl(($10014|0),($10015|0),1)|0);
 $10019 = (getTempRet0() | 0);
 $10020 = $10016 | $10018;
 $10021 = $10017 | $10019;
 $10022 = $arrayidx4995;
 $10023 = $10022;
 HEAP32[$10023>>2] = $10020;
 $10024 = (($10022) + 4)|0;
 $10025 = $10024;
 HEAP32[$10025>>2] = $10021;
 $10026 = (_i64Add(($2846|0),($2847|0),($1366|0),($1367|0))|0);
 $10027 = (getTempRet0() | 0);
 $10028 = (_bitshift64Shl(($1362|0),($1363|0),1)|0);
 $10029 = (getTempRet0() | 0);
 $10030 = $10028 & -2;
 $10031 = $10029 & 1;
 $10032 = (___muldi3(($2842|0),0,($10030|0),($10031|0))|0);
 $10033 = (getTempRet0() | 0);
 $10034 = (_i64Add(($10026|0),($10027|0),($10032|0),($10033|0))|0);
 $10035 = (getTempRet0() | 0);
 $10036 = $5806 ^ $10034;
 $10037 = $5807 ^ $10035;
 $10038 = (_i64Add(($10037|0),($10036|0),($4326|0),($4327|0))|0);
 $10039 = (getTempRet0() | 0);
 $10040 = (_bitshift64Shl(($4322|0),($4323|0),1)|0);
 $10041 = (getTempRet0() | 0);
 $10042 = $10040 & -2;
 $10043 = $10041 & 1;
 $10044 = (___muldi3(($10037|0),0,($10042|0),($10043|0))|0);
 $10045 = (getTempRet0() | 0);
 $10046 = (_i64Add(($10038|0),($10039|0),($10044|0),($10045|0))|0);
 $10047 = (getTempRet0() | 0);
 $10048 = $10046 ^ $2846;
 $10049 = $10047 ^ $2847;
 $10050 = (_bitshift64Lshr(($10048|0),($10049|0),24)|0);
 $10051 = (getTempRet0() | 0);
 $10052 = (_bitshift64Shl(($10048|0),($10049|0),40)|0);
 $10053 = (getTempRet0() | 0);
 $10054 = $10050 | $10052;
 $10055 = $10051 | $10053;
 $10056 = (_i64Add(($10054|0),($10055|0),($10034|0),($10035|0))|0);
 $10057 = (getTempRet0() | 0);
 $10058 = (_bitshift64Shl(($10034|0),($10035|0),1)|0);
 $10059 = (getTempRet0() | 0);
 $10060 = $10058 & -2;
 $10061 = $10059 & 1;
 $10062 = (___muldi3(($10050|0),0,($10060|0),($10061|0))|0);
 $10063 = (getTempRet0() | 0);
 $10064 = (_i64Add(($10056|0),($10057|0),($10062|0),($10063|0))|0);
 $10065 = (getTempRet0() | 0);
 $10066 = $arrayidx1884;
 $10067 = $10066;
 HEAP32[$10067>>2] = $10064;
 $10068 = (($10066) + 4)|0;
 $10069 = $10068;
 HEAP32[$10069>>2] = $10065;
 $10070 = $10064 ^ $10037;
 $10071 = $10065 ^ $10036;
 $10072 = (_bitshift64Lshr(($10070|0),($10071|0),16)|0);
 $10073 = (getTempRet0() | 0);
 $10074 = (_bitshift64Shl(($10070|0),($10071|0),48)|0);
 $10075 = (getTempRet0() | 0);
 $10076 = $10072 | $10074;
 $10077 = $10073 | $10075;
 $10078 = (_i64Add(($10076|0),($10077|0),($10046|0),($10047|0))|0);
 $10079 = (getTempRet0() | 0);
 $10080 = (_bitshift64Shl(($10046|0),($10047|0),1)|0);
 $10081 = (getTempRet0() | 0);
 $10082 = $10080 & -2;
 $10083 = $10081 & 1;
 $10084 = (___muldi3(($10072|0),0,($10082|0),($10083|0))|0);
 $10085 = (getTempRet0() | 0);
 $10086 = (_i64Add(($10078|0),($10079|0),($10084|0),($10085|0))|0);
 $10087 = (getTempRet0() | 0);
 $10088 = $10086 ^ $10054;
 $10089 = $10087 ^ $10055;
 $10090 = (_bitshift64Lshr(($10088|0),($10089|0),63)|0);
 $10091 = (getTempRet0() | 0);
 $10092 = (_bitshift64Shl(($10088|0),($10089|0),1)|0);
 $10093 = (getTempRet0() | 0);
 $10094 = $10090 | $10092;
 $10095 = $10091 | $10093;
 $10096 = $arrayidx5202;
 $10097 = $10096;
 HEAP32[$10097>>2] = $10094;
 $10098 = (($10096) + 4)|0;
 $10099 = $10098;
 HEAP32[$10099>>2] = $10095;
 $10100 = (_i64Add(($9942|0),($9943|0),($9822|0),($9823|0))|0);
 $10101 = (getTempRet0() | 0);
 $10102 = (_bitshift64Shl(($9822|0),($9823|0),1)|0);
 $10103 = (getTempRet0() | 0);
 $10104 = $10102 & -2;
 $10105 = $10103 & 1;
 $10106 = (___muldi3(($9942|0),0,($10104|0),($10105|0))|0);
 $10107 = (getTempRet0() | 0);
 $10108 = (_i64Add(($10100|0),($10101|0),($10106|0),($10107|0))|0);
 $10109 = (getTempRet0() | 0);
 $10110 = $10076 ^ $10108;
 $10111 = $10077 ^ $10109;
 $10112 = (_i64Add(($10111|0),($10110|0),($10012|0),($10013|0))|0);
 $10113 = (getTempRet0() | 0);
 $10114 = (_bitshift64Shl(($10012|0),($10013|0),1)|0);
 $10115 = (getTempRet0() | 0);
 $10116 = $10114 & -2;
 $10117 = $10115 & 1;
 $10118 = (___muldi3(($10111|0),0,($10116|0),($10117|0))|0);
 $10119 = (getTempRet0() | 0);
 $10120 = (_i64Add(($10112|0),($10113|0),($10118|0),($10119|0))|0);
 $10121 = (getTempRet0() | 0);
 $10122 = $10120 ^ $9942;
 $10123 = $10121 ^ $9943;
 $10124 = (_bitshift64Lshr(($10122|0),($10123|0),24)|0);
 $10125 = (getTempRet0() | 0);
 $10126 = (_bitshift64Shl(($10122|0),($10123|0),40)|0);
 $10127 = (getTempRet0() | 0);
 $10128 = $10124 | $10126;
 $10129 = $10125 | $10127;
 $10130 = (_i64Add(($10128|0),($10129|0),($10108|0),($10109|0))|0);
 $10131 = (getTempRet0() | 0);
 $10132 = (_bitshift64Shl(($10108|0),($10109|0),1)|0);
 $10133 = (getTempRet0() | 0);
 $10134 = $10132 & -2;
 $10135 = $10133 & 1;
 $10136 = (___muldi3(($10124|0),0,($10134|0),($10135|0))|0);
 $10137 = (getTempRet0() | 0);
 $10138 = (_i64Add(($10130|0),($10131|0),($10136|0),($10137|0))|0);
 $10139 = (getTempRet0() | 0);
 $10140 = $arrayidx24;
 $10141 = $10140;
 HEAP32[$10141>>2] = $10138;
 $10142 = (($10140) + 4)|0;
 $10143 = $10142;
 HEAP32[$10143>>2] = $10139;
 $10144 = $10138 ^ $10111;
 $10145 = $10139 ^ $10110;
 $10146 = (_bitshift64Lshr(($10144|0),($10145|0),16)|0);
 $10147 = (getTempRet0() | 0);
 $10148 = (_bitshift64Shl(($10144|0),($10145|0),48)|0);
 $10149 = (getTempRet0() | 0);
 $10150 = $10146 | $10148;
 $10151 = $10147 | $10149;
 $10152 = $arrayidx11838;
 $10153 = $10152;
 HEAP32[$10153>>2] = $10150;
 $10154 = (($10152) + 4)|0;
 $10155 = $10154;
 HEAP32[$10155>>2] = $10151;
 $10156 = (_i64Add(($10150|0),($10151|0),($10120|0),($10121|0))|0);
 $10157 = (getTempRet0() | 0);
 $10158 = (_bitshift64Shl(($10120|0),($10121|0),1)|0);
 $10159 = (getTempRet0() | 0);
 $10160 = $10158 & -2;
 $10161 = $10159 & 1;
 $10162 = (___muldi3(($10146|0),0,($10160|0),($10161|0))|0);
 $10163 = (getTempRet0() | 0);
 $10164 = (_i64Add(($10156|0),($10157|0),($10162|0),($10163|0))|0);
 $10165 = (getTempRet0() | 0);
 $10166 = $arrayidx8313;
 $10167 = $10166;
 HEAP32[$10167>>2] = $10164;
 $10168 = (($10166) + 4)|0;
 $10169 = $10168;
 HEAP32[$10169>>2] = $10165;
 $10170 = $10164 ^ $10128;
 $10171 = $10165 ^ $10129;
 $10172 = (_bitshift64Lshr(($10170|0),($10171|0),63)|0);
 $10173 = (getTempRet0() | 0);
 $10174 = (_bitshift64Shl(($10170|0),($10171|0),1)|0);
 $10175 = (getTempRet0() | 0);
 $10176 = $10172 | $10174;
 $10177 = $10173 | $10175;
 $10178 = $arrayidx3543;
 $10179 = $10178;
 HEAP32[$10179>>2] = $10176;
 $10180 = (($10178) + 4)|0;
 $10181 = $10180;
 HEAP32[$10181>>2] = $10177;
 $10182 = (_i64Add(($10020|0),($10021|0),($9904|0),($9905|0))|0);
 $10183 = (getTempRet0() | 0);
 $10184 = (_bitshift64Shl(($9904|0),($9905|0),1)|0);
 $10185 = (getTempRet0() | 0);
 $10186 = $10184 & -2;
 $10187 = $10185 & 1;
 $10188 = (___muldi3(($10020|0),0,($10186|0),($10187|0))|0);
 $10189 = (getTempRet0() | 0);
 $10190 = (_i64Add(($10182|0),($10183|0),($10188|0),($10189|0))|0);
 $10191 = (getTempRet0() | 0);
 $10192 = $10190 ^ $9834;
 $10193 = $10191 ^ $9835;
 $10194 = (_i64Add(($10193|0),($10192|0),($10086|0),($10087|0))|0);
 $10195 = (getTempRet0() | 0);
 $10196 = (_bitshift64Shl(($10086|0),($10087|0),1)|0);
 $10197 = (getTempRet0() | 0);
 $10198 = $10196 & -2;
 $10199 = $10197 & 1;
 $10200 = (___muldi3(($10198|0),($10199|0),($10193|0),0)|0);
 $10201 = (getTempRet0() | 0);
 $10202 = (_i64Add(($10194|0),($10195|0),($10200|0),($10201|0))|0);
 $10203 = (getTempRet0() | 0);
 $10204 = $10202 ^ $10020;
 $10205 = $10203 ^ $10021;
 $10206 = (_bitshift64Lshr(($10204|0),($10205|0),24)|0);
 $10207 = (getTempRet0() | 0);
 $10208 = (_bitshift64Shl(($10204|0),($10205|0),40)|0);
 $10209 = (getTempRet0() | 0);
 $10210 = $10206 | $10208;
 $10211 = $10207 | $10209;
 $10212 = (_i64Add(($10210|0),($10211|0),($10190|0),($10191|0))|0);
 $10213 = (getTempRet0() | 0);
 $10214 = (_bitshift64Shl(($10190|0),($10191|0),1)|0);
 $10215 = (getTempRet0() | 0);
 $10216 = $10214 & -2;
 $10217 = $10215 & 1;
 $10218 = (___muldi3(($10206|0),0,($10216|0),($10217|0))|0);
 $10219 = (getTempRet0() | 0);
 $10220 = (_i64Add(($10212|0),($10213|0),($10218|0),($10219|0))|0);
 $10221 = (getTempRet0() | 0);
 $10222 = $arrayidx225;
 $10223 = $10222;
 HEAP32[$10223>>2] = $10220;
 $10224 = (($10222) + 4)|0;
 $10225 = $10224;
 HEAP32[$10225>>2] = $10221;
 $10226 = $10220 ^ $10193;
 $10227 = $10221 ^ $10192;
 $10228 = (_bitshift64Lshr(($10226|0),($10227|0),16)|0);
 $10229 = (getTempRet0() | 0);
 $10230 = (_bitshift64Shl(($10226|0),($10227|0),48)|0);
 $10231 = (getTempRet0() | 0);
 $10232 = $10228 | $10230;
 $10233 = $10229 | $10231;
 $10234 = $arrayidx9972;
 $10235 = $10234;
 HEAP32[$10235>>2] = $10232;
 $10236 = (($10234) + 4)|0;
 $10237 = $10236;
 HEAP32[$10237>>2] = $10233;
 $10238 = (_i64Add(($10232|0),($10233|0),($10202|0),($10203|0))|0);
 $10239 = (getTempRet0() | 0);
 $10240 = (_bitshift64Shl(($10202|0),($10203|0),1)|0);
 $10241 = (getTempRet0() | 0);
 $10242 = $10240 & -2;
 $10243 = $10241 & 1;
 $10244 = (___muldi3(($10228|0),0,($10242|0),($10243|0))|0);
 $10245 = (getTempRet0() | 0);
 $10246 = (_i64Add(($10238|0),($10239|0),($10244|0),($10245|0))|0);
 $10247 = (getTempRet0() | 0);
 $10248 = $arrayidx8520;
 $10249 = $10248;
 HEAP32[$10249>>2] = $10246;
 $10250 = (($10248) + 4)|0;
 $10251 = $10250;
 HEAP32[$10251>>2] = $10247;
 $10252 = $10246 ^ $10210;
 $10253 = $10247 ^ $10211;
 $10254 = (_bitshift64Lshr(($10252|0),($10253|0),63)|0);
 $10255 = (getTempRet0() | 0);
 $10256 = (_bitshift64Shl(($10252|0),($10253|0),1)|0);
 $10257 = (getTempRet0() | 0);
 $10258 = $10254 | $10256;
 $10259 = $10255 | $10257;
 $10260 = $arrayidx4995;
 $10261 = $10260;
 HEAP32[$10261>>2] = $10258;
 $10262 = (($10260) + 4)|0;
 $10263 = $10262;
 HEAP32[$10263>>2] = $10259;
 $10264 = (_i64Add(($10094|0),($10095|0),($9986|0),($9987|0))|0);
 $10265 = (getTempRet0() | 0);
 $10266 = (_bitshift64Shl(($9986|0),($9987|0),1)|0);
 $10267 = (getTempRet0() | 0);
 $10268 = $10266 & -2;
 $10269 = $10267 & 1;
 $10270 = (___muldi3(($10094|0),0,($10268|0),($10269|0))|0);
 $10271 = (getTempRet0() | 0);
 $10272 = (_i64Add(($10264|0),($10265|0),($10270|0),($10271|0))|0);
 $10273 = (getTempRet0() | 0);
 $10274 = $10272 ^ $9916;
 $10275 = $10273 ^ $9917;
 $10276 = (_i64Add(($10275|0),($10274|0),($9848|0),($9849|0))|0);
 $10277 = (getTempRet0() | 0);
 $10278 = (_bitshift64Shl(($9848|0),($9849|0),1)|0);
 $10279 = (getTempRet0() | 0);
 $10280 = $10278 & -2;
 $10281 = $10279 & 1;
 $10282 = (___muldi3(($10275|0),0,($10280|0),($10281|0))|0);
 $10283 = (getTempRet0() | 0);
 $10284 = (_i64Add(($10276|0),($10277|0),($10282|0),($10283|0))|0);
 $10285 = (getTempRet0() | 0);
 $10286 = $10284 ^ $10094;
 $10287 = $10285 ^ $10095;
 $10288 = (_bitshift64Lshr(($10286|0),($10287|0),24)|0);
 $10289 = (getTempRet0() | 0);
 $10290 = (_bitshift64Shl(($10286|0),($10287|0),40)|0);
 $10291 = (getTempRet0() | 0);
 $10292 = $10288 | $10290;
 $10293 = $10289 | $10291;
 $10294 = (_i64Add(($10292|0),($10293|0),($10272|0),($10273|0))|0);
 $10295 = (getTempRet0() | 0);
 $10296 = (_bitshift64Shl(($10272|0),($10273|0),1)|0);
 $10297 = (getTempRet0() | 0);
 $10298 = $10296 & -2;
 $10299 = $10297 & 1;
 $10300 = (___muldi3(($10288|0),0,($10298|0),($10299|0))|0);
 $10301 = (getTempRet0() | 0);
 $10302 = (_i64Add(($10294|0),($10295|0),($10300|0),($10301|0))|0);
 $10303 = (getTempRet0() | 0);
 $10304 = $arrayidx1677;
 $10305 = $10304;
 HEAP32[$10305>>2] = $10302;
 $10306 = (($10304) + 4)|0;
 $10307 = $10306;
 HEAP32[$10307>>2] = $10303;
 $10308 = $10302 ^ $10275;
 $10309 = $10303 ^ $10274;
 $10310 = (_bitshift64Lshr(($10308|0),($10309|0),16)|0);
 $10311 = (getTempRet0() | 0);
 $10312 = (_bitshift64Shl(($10308|0),($10309|0),48)|0);
 $10313 = (getTempRet0() | 0);
 $10314 = $10310 | $10312;
 $10315 = $10311 | $10313;
 $10316 = $arrayidx10179;
 $10317 = $10316;
 HEAP32[$10317>>2] = $10314;
 $10318 = (($10316) + 4)|0;
 $10319 = $10318;
 HEAP32[$10319>>2] = $10315;
 $10320 = (_i64Add(($10314|0),($10315|0),($10284|0),($10285|0))|0);
 $10321 = (getTempRet0() | 0);
 $10322 = (_bitshift64Shl(($10284|0),($10285|0),1)|0);
 $10323 = (getTempRet0() | 0);
 $10324 = $10322 & -2;
 $10325 = $10323 & 1;
 $10326 = (___muldi3(($10310|0),0,($10324|0),($10325|0))|0);
 $10327 = (getTempRet0() | 0);
 $10328 = (_i64Add(($10320|0),($10321|0),($10326|0),($10327|0))|0);
 $10329 = (getTempRet0() | 0);
 $10330 = $arrayidx6654;
 $10331 = $10330;
 HEAP32[$10331>>2] = $10328;
 $10332 = (($10330) + 4)|0;
 $10333 = $10332;
 HEAP32[$10333>>2] = $10329;
 $10334 = $10328 ^ $10292;
 $10335 = $10329 ^ $10293;
 $10336 = (_bitshift64Lshr(($10334|0),($10335|0),63)|0);
 $10337 = (getTempRet0() | 0);
 $10338 = (_bitshift64Shl(($10334|0),($10335|0),1)|0);
 $10339 = (getTempRet0() | 0);
 $10340 = $10336 | $10338;
 $10341 = $10337 | $10339;
 $10342 = $arrayidx5202;
 $10343 = $10342;
 HEAP32[$10343>>2] = $10340;
 $10344 = (($10342) + 4)|0;
 $10345 = $10344;
 HEAP32[$10345>>2] = $10341;
 $10346 = (_i64Add(($10064|0),($10065|0),($9860|0),($9861|0))|0);
 $10347 = (getTempRet0() | 0);
 $10348 = (_bitshift64Shl(($10064|0),($10065|0),1)|0);
 $10349 = (getTempRet0() | 0);
 $10350 = $10348 & -2;
 $10351 = $10349 & 1;
 $10352 = (___muldi3(($10350|0),($10351|0),($9860|0),0)|0);
 $10353 = (getTempRet0() | 0);
 $10354 = (_i64Add(($10346|0),($10347|0),($10352|0),($10353|0))|0);
 $10355 = (getTempRet0() | 0);
 $10356 = $10354 ^ $9998;
 $10357 = $10355 ^ $9999;
 $10358 = (_i64Add(($10357|0),($10356|0),($9930|0),($9931|0))|0);
 $10359 = (getTempRet0() | 0);
 $10360 = (_bitshift64Shl(($9930|0),($9931|0),1)|0);
 $10361 = (getTempRet0() | 0);
 $10362 = $10360 & -2;
 $10363 = $10361 & 1;
 $10364 = (___muldi3(($10357|0),0,($10362|0),($10363|0))|0);
 $10365 = (getTempRet0() | 0);
 $10366 = (_i64Add(($10358|0),($10359|0),($10364|0),($10365|0))|0);
 $10367 = (getTempRet0() | 0);
 $10368 = $10366 ^ $9860;
 $10369 = $10367 ^ $9861;
 $10370 = (_bitshift64Lshr(($10368|0),($10369|0),24)|0);
 $10371 = (getTempRet0() | 0);
 $10372 = (_bitshift64Shl(($10368|0),($10369|0),40)|0);
 $10373 = (getTempRet0() | 0);
 $10374 = $10370 | $10372;
 $10375 = $10371 | $10373;
 $10376 = (_i64Add(($10374|0),($10375|0),($10354|0),($10355|0))|0);
 $10377 = (getTempRet0() | 0);
 $10378 = (_bitshift64Shl(($10354|0),($10355|0),1)|0);
 $10379 = (getTempRet0() | 0);
 $10380 = $10378 & -2;
 $10381 = $10379 & 1;
 $10382 = (___muldi3(($10370|0),0,($10380|0),($10381|0))|0);
 $10383 = (getTempRet0() | 0);
 $10384 = (_i64Add(($10376|0),($10377|0),($10382|0),($10383|0))|0);
 $10385 = (getTempRet0() | 0);
 $10386 = $arrayidx1884;
 $10387 = $10386;
 HEAP32[$10387>>2] = $10384;
 $10388 = (($10386) + 4)|0;
 $10389 = $10388;
 HEAP32[$10389>>2] = $10385;
 $10390 = $10384 ^ $10357;
 $10391 = $10385 ^ $10356;
 $10392 = (_bitshift64Lshr(($10390|0),($10391|0),16)|0);
 $10393 = (getTempRet0() | 0);
 $10394 = (_bitshift64Shl(($10390|0),($10391|0),48)|0);
 $10395 = (getTempRet0() | 0);
 $10396 = $10392 | $10394;
 $10397 = $10393 | $10395;
 $10398 = $arrayidx11631;
 $10399 = $10398;
 HEAP32[$10399>>2] = $10396;
 $10400 = (($10398) + 4)|0;
 $10401 = $10400;
 HEAP32[$10401>>2] = $10397;
 $10402 = (_i64Add(($10396|0),($10397|0),($10366|0),($10367|0))|0);
 $10403 = (getTempRet0() | 0);
 $10404 = (_bitshift64Shl(($10366|0),($10367|0),1)|0);
 $10405 = (getTempRet0() | 0);
 $10406 = $10404 & -2;
 $10407 = $10405 & 1;
 $10408 = (___muldi3(($10392|0),0,($10406|0),($10407|0))|0);
 $10409 = (getTempRet0() | 0);
 $10410 = (_i64Add(($10402|0),($10403|0),($10408|0),($10409|0))|0);
 $10411 = (getTempRet0() | 0);
 $10412 = $arrayidx6861;
 $10413 = $10412;
 HEAP32[$10413>>2] = $10410;
 $10414 = (($10412) + 4)|0;
 $10415 = $10414;
 HEAP32[$10415>>2] = $10411;
 $10416 = $10410 ^ $10374;
 $10417 = $10411 ^ $10375;
 $10418 = (_bitshift64Lshr(($10416|0),($10417|0),63)|0);
 $10419 = (getTempRet0() | 0);
 $10420 = (_bitshift64Shl(($10416|0),($10417|0),1)|0);
 $10421 = (getTempRet0() | 0);
 $10422 = $10418 | $10420;
 $10423 = $10419 | $10421;
 $10424 = $arrayidx3336;
 $10425 = $10424;
 HEAP32[$10425>>2] = $10422;
 $10426 = (($10424) + 4)|0;
 $10427 = $10426;
 HEAP32[$10427>>2] = $10423;
 $10428 = (_i64Add(($2188|0),($2189|0),($708|0),($709|0))|0);
 $10429 = (getTempRet0() | 0);
 $10430 = (_bitshift64Shl(($704|0),($705|0),1)|0);
 $10431 = (getTempRet0() | 0);
 $10432 = $10430 & -2;
 $10433 = $10431 & 1;
 $10434 = (___muldi3(($2184|0),0,($10432|0),($10433|0))|0);
 $10435 = (getTempRet0() | 0);
 $10436 = (_i64Add(($10428|0),($10429|0),($10434|0),($10435|0))|0);
 $10437 = (getTempRet0() | 0);
 $10438 = $5148 ^ $10436;
 $10439 = $5149 ^ $10437;
 $10440 = (_i64Add(($10439|0),($10438|0),($3668|0),($3669|0))|0);
 $10441 = (getTempRet0() | 0);
 $10442 = (_bitshift64Shl(($3664|0),($3665|0),1)|0);
 $10443 = (getTempRet0() | 0);
 $10444 = $10442 & -2;
 $10445 = $10443 & 1;
 $10446 = (___muldi3(($10439|0),0,($10444|0),($10445|0))|0);
 $10447 = (getTempRet0() | 0);
 $10448 = (_i64Add(($10440|0),($10441|0),($10446|0),($10447|0))|0);
 $10449 = (getTempRet0() | 0);
 $10450 = $10448 ^ $2188;
 $10451 = $10449 ^ $2189;
 $10452 = (_bitshift64Lshr(($10450|0),($10451|0),24)|0);
 $10453 = (getTempRet0() | 0);
 $10454 = (_bitshift64Shl(($10450|0),($10451|0),40)|0);
 $10455 = (getTempRet0() | 0);
 $10456 = $10452 | $10454;
 $10457 = $10453 | $10455;
 $10458 = (_i64Add(($10456|0),($10457|0),($10436|0),($10437|0))|0);
 $10459 = (getTempRet0() | 0);
 $10460 = (_bitshift64Shl(($10436|0),($10437|0),1)|0);
 $10461 = (getTempRet0() | 0);
 $10462 = $10460 & -2;
 $10463 = $10461 & 1;
 $10464 = (___muldi3(($10452|0),0,($10462|0),($10463|0))|0);
 $10465 = (getTempRet0() | 0);
 $10466 = (_i64Add(($10458|0),($10459|0),($10464|0),($10465|0))|0);
 $10467 = (getTempRet0() | 0);
 $10468 = $arrayidx432;
 $10469 = $10468;
 HEAP32[$10469>>2] = $10466;
 $10470 = (($10468) + 4)|0;
 $10471 = $10470;
 HEAP32[$10471>>2] = $10467;
 $10472 = $10466 ^ $10439;
 $10473 = $10467 ^ $10438;
 $10474 = (_bitshift64Lshr(($10472|0),($10473|0),16)|0);
 $10475 = (getTempRet0() | 0);
 $10476 = (_bitshift64Shl(($10472|0),($10473|0),48)|0);
 $10477 = (getTempRet0() | 0);
 $10478 = $10474 | $10476;
 $10479 = $10475 | $10477;
 $10480 = $arrayidx10386;
 $10481 = $10480;
 HEAP32[$10481>>2] = $10478;
 $10482 = (($10480) + 4)|0;
 $10483 = $10482;
 HEAP32[$10483>>2] = $10479;
 $10484 = (_i64Add(($10478|0),($10479|0),($10448|0),($10449|0))|0);
 $10485 = (getTempRet0() | 0);
 $10486 = (_bitshift64Shl(($10448|0),($10449|0),1)|0);
 $10487 = (getTempRet0() | 0);
 $10488 = $10486 & -2;
 $10489 = $10487 & 1;
 $10490 = (___muldi3(($10474|0),0,($10488|0),($10489|0))|0);
 $10491 = (getTempRet0() | 0);
 $10492 = (_i64Add(($10484|0),($10485|0),($10490|0),($10491|0))|0);
 $10493 = (getTempRet0() | 0);
 $10494 = $arrayidx7068;
 $10495 = $10494;
 HEAP32[$10495>>2] = $10492;
 $10496 = (($10494) + 4)|0;
 $10497 = $10496;
 HEAP32[$10497>>2] = $10493;
 $10498 = $10492 ^ $10456;
 $10499 = $10493 ^ $10457;
 $10500 = (_bitshift64Lshr(($10498|0),($10499|0),63)|0);
 $10501 = (getTempRet0() | 0);
 $10502 = (_bitshift64Shl(($10498|0),($10499|0),1)|0);
 $10503 = (getTempRet0() | 0);
 $10504 = $10500 | $10502;
 $10505 = $10501 | $10503;
 $10506 = $arrayidx3750;
 $10507 = $10506;
 HEAP32[$10507>>2] = $10504;
 $10508 = (($10506) + 4)|0;
 $10509 = $10508;
 HEAP32[$10509>>2] = $10505;
 $10510 = (_i64Add(($1942|0),($1943|0),($462|0),($463|0))|0);
 $10511 = (getTempRet0() | 0);
 $10512 = (_bitshift64Shl(($458|0),($459|0),1)|0);
 $10513 = (getTempRet0() | 0);
 $10514 = $10512 & -2;
 $10515 = $10513 & 1;
 $10516 = (___muldi3(($1938|0),0,($10514|0),($10515|0))|0);
 $10517 = (getTempRet0() | 0);
 $10518 = (_i64Add(($10510|0),($10511|0),($10516|0),($10517|0))|0);
 $10519 = (getTempRet0() | 0);
 $10520 = $4902 ^ $10518;
 $10521 = $4903 ^ $10519;
 $10522 = (_i64Add(($10521|0),($10520|0),($3422|0),($3423|0))|0);
 $10523 = (getTempRet0() | 0);
 $10524 = (_bitshift64Shl(($3418|0),($3419|0),1)|0);
 $10525 = (getTempRet0() | 0);
 $10526 = $10524 & -2;
 $10527 = $10525 & 1;
 $10528 = (___muldi3(($10521|0),0,($10526|0),($10527|0))|0);
 $10529 = (getTempRet0() | 0);
 $10530 = (_i64Add(($10522|0),($10523|0),($10528|0),($10529|0))|0);
 $10531 = (getTempRet0() | 0);
 $10532 = $10530 ^ $1942;
 $10533 = $10531 ^ $1943;
 $10534 = (_bitshift64Lshr(($10532|0),($10533|0),24)|0);
 $10535 = (getTempRet0() | 0);
 $10536 = (_bitshift64Shl(($10532|0),($10533|0),40)|0);
 $10537 = (getTempRet0() | 0);
 $10538 = $10534 | $10536;
 $10539 = $10535 | $10537;
 $10540 = (_i64Add(($10538|0),($10539|0),($10518|0),($10519|0))|0);
 $10541 = (getTempRet0() | 0);
 $10542 = (_bitshift64Shl(($10518|0),($10519|0),1)|0);
 $10543 = (getTempRet0() | 0);
 $10544 = $10542 & -2;
 $10545 = $10543 & 1;
 $10546 = (___muldi3(($10534|0),0,($10544|0),($10545|0))|0);
 $10547 = (getTempRet0() | 0);
 $10548 = (_i64Add(($10540|0),($10541|0),($10546|0),($10547|0))|0);
 $10549 = (getTempRet0() | 0);
 $10550 = $arrayidx639;
 $10551 = $10550;
 HEAP32[$10551>>2] = $10548;
 $10552 = (($10550) + 4)|0;
 $10553 = $10552;
 HEAP32[$10553>>2] = $10549;
 $10554 = $10548 ^ $10521;
 $10555 = $10549 ^ $10520;
 $10556 = (_bitshift64Lshr(($10554|0),($10555|0),16)|0);
 $10557 = (getTempRet0() | 0);
 $10558 = (_bitshift64Shl(($10554|0),($10555|0),48)|0);
 $10559 = (getTempRet0() | 0);
 $10560 = $10556 | $10558;
 $10561 = $10557 | $10559;
 $10562 = $arrayidx10593;
 $10563 = $10562;
 HEAP32[$10563>>2] = $10560;
 $10564 = (($10562) + 4)|0;
 $10565 = $10564;
 HEAP32[$10565>>2] = $10561;
 $10566 = (_i64Add(($10560|0),($10561|0),($10530|0),($10531|0))|0);
 $10567 = (getTempRet0() | 0);
 $10568 = (_bitshift64Shl(($10530|0),($10531|0),1)|0);
 $10569 = (getTempRet0() | 0);
 $10570 = $10568 & -2;
 $10571 = $10569 & 1;
 $10572 = (___muldi3(($10556|0),0,($10570|0),($10571|0))|0);
 $10573 = (getTempRet0() | 0);
 $10574 = (_i64Add(($10566|0),($10567|0),($10572|0),($10573|0))|0);
 $10575 = (getTempRet0() | 0);
 $10576 = $arrayidx7275;
 $10577 = $10576;
 HEAP32[$10577>>2] = $10574;
 $10578 = (($10576) + 4)|0;
 $10579 = $10578;
 HEAP32[$10579>>2] = $10575;
 $10580 = $10574 ^ $10538;
 $10581 = $10575 ^ $10539;
 $10582 = (_bitshift64Lshr(($10580|0),($10581|0),63)|0);
 $10583 = (getTempRet0() | 0);
 $10584 = (_bitshift64Shl(($10580|0),($10581|0),1)|0);
 $10585 = (getTempRet0() | 0);
 $10586 = $10582 | $10584;
 $10587 = $10583 | $10585;
 $10588 = $arrayidx3957;
 $10589 = $10588;
 HEAP32[$10589>>2] = $10586;
 $10590 = (($10588) + 4)|0;
 $10591 = $10590;
 HEAP32[$10591>>2] = $10587;
 $10592 = (_i64Add(($2928|0),($2929|0),($1448|0),($1449|0))|0);
 $10593 = (getTempRet0() | 0);
 $10594 = (_bitshift64Shl(($1444|0),($1445|0),1)|0);
 $10595 = (getTempRet0() | 0);
 $10596 = $10594 & -2;
 $10597 = $10595 & 1;
 $10598 = (___muldi3(($2924|0),0,($10596|0),($10597|0))|0);
 $10599 = (getTempRet0() | 0);
 $10600 = (_i64Add(($10592|0),($10593|0),($10598|0),($10599|0))|0);
 $10601 = (getTempRet0() | 0);
 $10602 = $5888 ^ $10600;
 $10603 = $5889 ^ $10601;
 $10604 = (_i64Add(($10603|0),($10602|0),($4408|0),($4409|0))|0);
 $10605 = (getTempRet0() | 0);
 $10606 = (_bitshift64Shl(($4404|0),($4405|0),1)|0);
 $10607 = (getTempRet0() | 0);
 $10608 = $10606 & -2;
 $10609 = $10607 & 1;
 $10610 = (___muldi3(($10603|0),0,($10608|0),($10609|0))|0);
 $10611 = (getTempRet0() | 0);
 $10612 = (_i64Add(($10604|0),($10605|0),($10610|0),($10611|0))|0);
 $10613 = (getTempRet0() | 0);
 $10614 = $10612 ^ $2928;
 $10615 = $10613 ^ $2929;
 $10616 = (_bitshift64Lshr(($10614|0),($10615|0),24)|0);
 $10617 = (getTempRet0() | 0);
 $10618 = (_bitshift64Shl(($10614|0),($10615|0),40)|0);
 $10619 = (getTempRet0() | 0);
 $10620 = $10616 | $10618;
 $10621 = $10617 | $10619;
 $10622 = (_i64Add(($10620|0),($10621|0),($10600|0),($10601|0))|0);
 $10623 = (getTempRet0() | 0);
 $10624 = (_bitshift64Shl(($10600|0),($10601|0),1)|0);
 $10625 = (getTempRet0() | 0);
 $10626 = $10624 & -2;
 $10627 = $10625 & 1;
 $10628 = (___muldi3(($10616|0),0,($10626|0),($10627|0))|0);
 $10629 = (getTempRet0() | 0);
 $10630 = (_i64Add(($10622|0),($10623|0),($10628|0),($10629|0))|0);
 $10631 = (getTempRet0() | 0);
 $10632 = $arrayidx2091;
 $10633 = $10632;
 HEAP32[$10633>>2] = $10630;
 $10634 = (($10632) + 4)|0;
 $10635 = $10634;
 HEAP32[$10635>>2] = $10631;
 $10636 = $10630 ^ $10603;
 $10637 = $10631 ^ $10602;
 $10638 = (_bitshift64Lshr(($10636|0),($10637|0),16)|0);
 $10639 = (getTempRet0() | 0);
 $10640 = (_bitshift64Shl(($10636|0),($10637|0),48)|0);
 $10641 = (getTempRet0() | 0);
 $10642 = $10638 | $10640;
 $10643 = $10639 | $10641;
 $10644 = $arrayidx12045;
 $10645 = $10644;
 HEAP32[$10645>>2] = $10642;
 $10646 = (($10644) + 4)|0;
 $10647 = $10646;
 HEAP32[$10647>>2] = $10643;
 $10648 = (_i64Add(($10642|0),($10643|0),($10612|0),($10613|0))|0);
 $10649 = (getTempRet0() | 0);
 $10650 = (_bitshift64Shl(($10612|0),($10613|0),1)|0);
 $10651 = (getTempRet0() | 0);
 $10652 = $10650 & -2;
 $10653 = $10651 & 1;
 $10654 = (___muldi3(($10638|0),0,($10652|0),($10653|0))|0);
 $10655 = (getTempRet0() | 0);
 $10656 = (_i64Add(($10648|0),($10649|0),($10654|0),($10655|0))|0);
 $10657 = (getTempRet0() | 0);
 $10658 = $10656 ^ $10620;
 $10659 = $10657 ^ $10621;
 $10660 = (_bitshift64Lshr(($10658|0),($10659|0),63)|0);
 $10661 = (getTempRet0() | 0);
 $10662 = (_bitshift64Shl(($10658|0),($10659|0),1)|0);
 $10663 = (getTempRet0() | 0);
 $10664 = $10660 | $10662;
 $10665 = $10661 | $10663;
 $10666 = $arrayidx5409;
 $10667 = $10666;
 HEAP32[$10667>>2] = $10664;
 $10668 = (($10666) + 4)|0;
 $10669 = $10668;
 HEAP32[$10669>>2] = $10665;
 $10670 = (_i64Add(($2682|0),($2683|0),($1202|0),($1203|0))|0);
 $10671 = (getTempRet0() | 0);
 $10672 = (_bitshift64Shl(($1198|0),($1199|0),1)|0);
 $10673 = (getTempRet0() | 0);
 $10674 = $10672 & -2;
 $10675 = $10673 & 1;
 $10676 = (___muldi3(($2678|0),0,($10674|0),($10675|0))|0);
 $10677 = (getTempRet0() | 0);
 $10678 = (_i64Add(($10670|0),($10671|0),($10676|0),($10677|0))|0);
 $10679 = (getTempRet0() | 0);
 $10680 = $5642 ^ $10678;
 $10681 = $5643 ^ $10679;
 $10682 = (_i64Add(($10681|0),($10680|0),($4162|0),($4163|0))|0);
 $10683 = (getTempRet0() | 0);
 $10684 = (_bitshift64Shl(($4158|0),($4159|0),1)|0);
 $10685 = (getTempRet0() | 0);
 $10686 = $10684 & -2;
 $10687 = $10685 & 1;
 $10688 = (___muldi3(($10681|0),0,($10686|0),($10687|0))|0);
 $10689 = (getTempRet0() | 0);
 $10690 = (_i64Add(($10682|0),($10683|0),($10688|0),($10689|0))|0);
 $10691 = (getTempRet0() | 0);
 $10692 = $10690 ^ $2682;
 $10693 = $10691 ^ $2683;
 $10694 = (_bitshift64Lshr(($10692|0),($10693|0),24)|0);
 $10695 = (getTempRet0() | 0);
 $10696 = (_bitshift64Shl(($10692|0),($10693|0),40)|0);
 $10697 = (getTempRet0() | 0);
 $10698 = $10694 | $10696;
 $10699 = $10695 | $10697;
 $10700 = (_i64Add(($10698|0),($10699|0),($10678|0),($10679|0))|0);
 $10701 = (getTempRet0() | 0);
 $10702 = (_bitshift64Shl(($10678|0),($10679|0),1)|0);
 $10703 = (getTempRet0() | 0);
 $10704 = $10702 & -2;
 $10705 = $10703 & 1;
 $10706 = (___muldi3(($10694|0),0,($10704|0),($10705|0))|0);
 $10707 = (getTempRet0() | 0);
 $10708 = (_i64Add(($10700|0),($10701|0),($10706|0),($10707|0))|0);
 $10709 = (getTempRet0() | 0);
 $10710 = $arrayidx2298;
 $10711 = $10710;
 HEAP32[$10711>>2] = $10708;
 $10712 = (($10710) + 4)|0;
 $10713 = $10712;
 HEAP32[$10713>>2] = $10709;
 $10714 = $10708 ^ $10681;
 $10715 = $10709 ^ $10680;
 $10716 = (_bitshift64Lshr(($10714|0),($10715|0),16)|0);
 $10717 = (getTempRet0() | 0);
 $10718 = (_bitshift64Shl(($10714|0),($10715|0),48)|0);
 $10719 = (getTempRet0() | 0);
 $10720 = $10716 | $10718;
 $10721 = $10717 | $10719;
 $10722 = (_i64Add(($10720|0),($10721|0),($10690|0),($10691|0))|0);
 $10723 = (getTempRet0() | 0);
 $10724 = (_bitshift64Shl(($10690|0),($10691|0),1)|0);
 $10725 = (getTempRet0() | 0);
 $10726 = $10724 & -2;
 $10727 = $10725 & 1;
 $10728 = (___muldi3(($10716|0),0,($10726|0),($10727|0))|0);
 $10729 = (getTempRet0() | 0);
 $10730 = (_i64Add(($10722|0),($10723|0),($10728|0),($10729|0))|0);
 $10731 = (getTempRet0() | 0);
 $10732 = $10730 ^ $10698;
 $10733 = $10731 ^ $10699;
 $10734 = (_bitshift64Lshr(($10732|0),($10733|0),63)|0);
 $10735 = (getTempRet0() | 0);
 $10736 = (_bitshift64Shl(($10732|0),($10733|0),1)|0);
 $10737 = (getTempRet0() | 0);
 $10738 = $10734 | $10736;
 $10739 = $10735 | $10737;
 $10740 = $arrayidx5616;
 $10741 = $10740;
 HEAP32[$10741>>2] = $10738;
 $10742 = (($10740) + 4)|0;
 $10743 = $10742;
 HEAP32[$10743>>2] = $10739;
 $10744 = (_i64Add(($10586|0),($10587|0),($10466|0),($10467|0))|0);
 $10745 = (getTempRet0() | 0);
 $10746 = (_bitshift64Shl(($10466|0),($10467|0),1)|0);
 $10747 = (getTempRet0() | 0);
 $10748 = $10746 & -2;
 $10749 = $10747 & 1;
 $10750 = (___muldi3(($10586|0),0,($10748|0),($10749|0))|0);
 $10751 = (getTempRet0() | 0);
 $10752 = (_i64Add(($10744|0),($10745|0),($10750|0),($10751|0))|0);
 $10753 = (getTempRet0() | 0);
 $10754 = $10720 ^ $10752;
 $10755 = $10721 ^ $10753;
 $10756 = (_i64Add(($10656|0),($10657|0),($10755|0),($10754|0))|0);
 $10757 = (getTempRet0() | 0);
 $10758 = (_bitshift64Shl(($10656|0),($10657|0),1)|0);
 $10759 = (getTempRet0() | 0);
 $10760 = $10758 & -2;
 $10761 = $10759 & 1;
 $10762 = (___muldi3(($10760|0),($10761|0),($10755|0),0)|0);
 $10763 = (getTempRet0() | 0);
 $10764 = (_i64Add(($10756|0),($10757|0),($10762|0),($10763|0))|0);
 $10765 = (getTempRet0() | 0);
 $10766 = $10764 ^ $10586;
 $10767 = $10765 ^ $10587;
 $10768 = (_bitshift64Lshr(($10766|0),($10767|0),24)|0);
 $10769 = (getTempRet0() | 0);
 $10770 = (_bitshift64Shl(($10766|0),($10767|0),40)|0);
 $10771 = (getTempRet0() | 0);
 $10772 = $10768 | $10770;
 $10773 = $10769 | $10771;
 $10774 = (_i64Add(($10772|0),($10773|0),($10752|0),($10753|0))|0);
 $10775 = (getTempRet0() | 0);
 $10776 = (_bitshift64Shl(($10752|0),($10753|0),1)|0);
 $10777 = (getTempRet0() | 0);
 $10778 = $10776 & -2;
 $10779 = $10777 & 1;
 $10780 = (___muldi3(($10768|0),0,($10778|0),($10779|0))|0);
 $10781 = (getTempRet0() | 0);
 $10782 = (_i64Add(($10774|0),($10775|0),($10780|0),($10781|0))|0);
 $10783 = (getTempRet0() | 0);
 $10784 = $arrayidx432;
 $10785 = $10784;
 HEAP32[$10785>>2] = $10782;
 $10786 = (($10784) + 4)|0;
 $10787 = $10786;
 HEAP32[$10787>>2] = $10783;
 $10788 = $10782 ^ $10755;
 $10789 = $10783 ^ $10754;
 $10790 = (_bitshift64Lshr(($10788|0),($10789|0),16)|0);
 $10791 = (getTempRet0() | 0);
 $10792 = (_bitshift64Shl(($10788|0),($10789|0),48)|0);
 $10793 = (getTempRet0() | 0);
 $10794 = $10790 | $10792;
 $10795 = $10791 | $10793;
 $10796 = $arrayidx12252;
 $10797 = $10796;
 HEAP32[$10797>>2] = $10794;
 $10798 = (($10796) + 4)|0;
 $10799 = $10798;
 HEAP32[$10799>>2] = $10795;
 $10800 = (_i64Add(($10794|0),($10795|0),($10764|0),($10765|0))|0);
 $10801 = (getTempRet0() | 0);
 $10802 = (_bitshift64Shl(($10764|0),($10765|0),1)|0);
 $10803 = (getTempRet0() | 0);
 $10804 = $10802 & -2;
 $10805 = $10803 & 1;
 $10806 = (___muldi3(($10790|0),0,($10804|0),($10805|0))|0);
 $10807 = (getTempRet0() | 0);
 $10808 = (_i64Add(($10800|0),($10801|0),($10806|0),($10807|0))|0);
 $10809 = (getTempRet0() | 0);
 $10810 = $arrayidx8727;
 $10811 = $10810;
 HEAP32[$10811>>2] = $10808;
 $10812 = (($10810) + 4)|0;
 $10813 = $10812;
 HEAP32[$10813>>2] = $10809;
 $10814 = $10808 ^ $10772;
 $10815 = $10809 ^ $10773;
 $10816 = (_bitshift64Lshr(($10814|0),($10815|0),63)|0);
 $10817 = (getTempRet0() | 0);
 $10818 = (_bitshift64Shl(($10814|0),($10815|0),1)|0);
 $10819 = (getTempRet0() | 0);
 $10820 = $10816 | $10818;
 $10821 = $10817 | $10819;
 $10822 = $arrayidx3957;
 $10823 = $10822;
 HEAP32[$10823>>2] = $10820;
 $10824 = (($10822) + 4)|0;
 $10825 = $10824;
 HEAP32[$10825>>2] = $10821;
 $10826 = (_i64Add(($10664|0),($10665|0),($10548|0),($10549|0))|0);
 $10827 = (getTempRet0() | 0);
 $10828 = (_bitshift64Shl(($10548|0),($10549|0),1)|0);
 $10829 = (getTempRet0() | 0);
 $10830 = $10828 & -2;
 $10831 = $10829 & 1;
 $10832 = (___muldi3(($10664|0),0,($10830|0),($10831|0))|0);
 $10833 = (getTempRet0() | 0);
 $10834 = (_i64Add(($10826|0),($10827|0),($10832|0),($10833|0))|0);
 $10835 = (getTempRet0() | 0);
 $10836 = $10834 ^ $10478;
 $10837 = $10835 ^ $10479;
 $10838 = (_i64Add(($10837|0),($10836|0),($10730|0),($10731|0))|0);
 $10839 = (getTempRet0() | 0);
 $10840 = (_bitshift64Shl(($10730|0),($10731|0),1)|0);
 $10841 = (getTempRet0() | 0);
 $10842 = $10840 & -2;
 $10843 = $10841 & 1;
 $10844 = (___muldi3(($10837|0),0,($10842|0),($10843|0))|0);
 $10845 = (getTempRet0() | 0);
 $10846 = (_i64Add(($10838|0),($10839|0),($10844|0),($10845|0))|0);
 $10847 = (getTempRet0() | 0);
 $10848 = $10846 ^ $10664;
 $10849 = $10847 ^ $10665;
 $10850 = (_bitshift64Lshr(($10848|0),($10849|0),24)|0);
 $10851 = (getTempRet0() | 0);
 $10852 = (_bitshift64Shl(($10848|0),($10849|0),40)|0);
 $10853 = (getTempRet0() | 0);
 $10854 = $10850 | $10852;
 $10855 = $10851 | $10853;
 $10856 = (_i64Add(($10854|0),($10855|0),($10834|0),($10835|0))|0);
 $10857 = (getTempRet0() | 0);
 $10858 = (_bitshift64Shl(($10834|0),($10835|0),1)|0);
 $10859 = (getTempRet0() | 0);
 $10860 = $10858 & -2;
 $10861 = $10859 & 1;
 $10862 = (___muldi3(($10850|0),0,($10860|0),($10861|0))|0);
 $10863 = (getTempRet0() | 0);
 $10864 = (_i64Add(($10856|0),($10857|0),($10862|0),($10863|0))|0);
 $10865 = (getTempRet0() | 0);
 $10866 = $arrayidx639;
 $10867 = $10866;
 HEAP32[$10867>>2] = $10864;
 $10868 = (($10866) + 4)|0;
 $10869 = $10868;
 HEAP32[$10869>>2] = $10865;
 $10870 = $10864 ^ $10837;
 $10871 = $10865 ^ $10836;
 $10872 = (_bitshift64Lshr(($10870|0),($10871|0),16)|0);
 $10873 = (getTempRet0() | 0);
 $10874 = (_bitshift64Shl(($10870|0),($10871|0),48)|0);
 $10875 = (getTempRet0() | 0);
 $10876 = $10872 | $10874;
 $10877 = $10873 | $10875;
 $10878 = $arrayidx10386;
 $10879 = $10878;
 HEAP32[$10879>>2] = $10876;
 $10880 = (($10878) + 4)|0;
 $10881 = $10880;
 HEAP32[$10881>>2] = $10877;
 $10882 = (_i64Add(($10876|0),($10877|0),($10846|0),($10847|0))|0);
 $10883 = (getTempRet0() | 0);
 $10884 = (_bitshift64Shl(($10846|0),($10847|0),1)|0);
 $10885 = (getTempRet0() | 0);
 $10886 = $10884 & -2;
 $10887 = $10885 & 1;
 $10888 = (___muldi3(($10872|0),0,($10886|0),($10887|0))|0);
 $10889 = (getTempRet0() | 0);
 $10890 = (_i64Add(($10882|0),($10883|0),($10888|0),($10889|0))|0);
 $10891 = (getTempRet0() | 0);
 $10892 = $arrayidx8934;
 $10893 = $10892;
 HEAP32[$10893>>2] = $10890;
 $10894 = (($10892) + 4)|0;
 $10895 = $10894;
 HEAP32[$10895>>2] = $10891;
 $10896 = $10890 ^ $10854;
 $10897 = $10891 ^ $10855;
 $10898 = (_bitshift64Lshr(($10896|0),($10897|0),63)|0);
 $10899 = (getTempRet0() | 0);
 $10900 = (_bitshift64Shl(($10896|0),($10897|0),1)|0);
 $10901 = (getTempRet0() | 0);
 $10902 = $10898 | $10900;
 $10903 = $10899 | $10901;
 $10904 = $arrayidx5409;
 $10905 = $10904;
 HEAP32[$10905>>2] = $10902;
 $10906 = (($10904) + 4)|0;
 $10907 = $10906;
 HEAP32[$10907>>2] = $10903;
 $10908 = (_i64Add(($10738|0),($10739|0),($10630|0),($10631|0))|0);
 $10909 = (getTempRet0() | 0);
 $10910 = (_bitshift64Shl(($10630|0),($10631|0),1)|0);
 $10911 = (getTempRet0() | 0);
 $10912 = $10910 & -2;
 $10913 = $10911 & 1;
 $10914 = (___muldi3(($10738|0),0,($10912|0),($10913|0))|0);
 $10915 = (getTempRet0() | 0);
 $10916 = (_i64Add(($10908|0),($10909|0),($10914|0),($10915|0))|0);
 $10917 = (getTempRet0() | 0);
 $10918 = $10916 ^ $10560;
 $10919 = $10917 ^ $10561;
 $10920 = (_i64Add(($10919|0),($10918|0),($10492|0),($10493|0))|0);
 $10921 = (getTempRet0() | 0);
 $10922 = (_bitshift64Shl(($10492|0),($10493|0),1)|0);
 $10923 = (getTempRet0() | 0);
 $10924 = $10922 & -2;
 $10925 = $10923 & 1;
 $10926 = (___muldi3(($10919|0),0,($10924|0),($10925|0))|0);
 $10927 = (getTempRet0() | 0);
 $10928 = (_i64Add(($10920|0),($10921|0),($10926|0),($10927|0))|0);
 $10929 = (getTempRet0() | 0);
 $10930 = $10928 ^ $10738;
 $10931 = $10929 ^ $10739;
 $10932 = (_bitshift64Lshr(($10930|0),($10931|0),24)|0);
 $10933 = (getTempRet0() | 0);
 $10934 = (_bitshift64Shl(($10930|0),($10931|0),40)|0);
 $10935 = (getTempRet0() | 0);
 $10936 = $10932 | $10934;
 $10937 = $10933 | $10935;
 $10938 = (_i64Add(($10936|0),($10937|0),($10916|0),($10917|0))|0);
 $10939 = (getTempRet0() | 0);
 $10940 = (_bitshift64Shl(($10916|0),($10917|0),1)|0);
 $10941 = (getTempRet0() | 0);
 $10942 = $10940 & -2;
 $10943 = $10941 & 1;
 $10944 = (___muldi3(($10932|0),0,($10942|0),($10943|0))|0);
 $10945 = (getTempRet0() | 0);
 $10946 = (_i64Add(($10938|0),($10939|0),($10944|0),($10945|0))|0);
 $10947 = (getTempRet0() | 0);
 $10948 = $arrayidx2091;
 $10949 = $10948;
 HEAP32[$10949>>2] = $10946;
 $10950 = (($10948) + 4)|0;
 $10951 = $10950;
 HEAP32[$10951>>2] = $10947;
 $10952 = $10946 ^ $10919;
 $10953 = $10947 ^ $10918;
 $10954 = (_bitshift64Lshr(($10952|0),($10953|0),16)|0);
 $10955 = (getTempRet0() | 0);
 $10956 = (_bitshift64Shl(($10952|0),($10953|0),48)|0);
 $10957 = (getTempRet0() | 0);
 $10958 = $10954 | $10956;
 $10959 = $10955 | $10957;
 $10960 = $arrayidx10593;
 $10961 = $10960;
 HEAP32[$10961>>2] = $10958;
 $10962 = (($10960) + 4)|0;
 $10963 = $10962;
 HEAP32[$10963>>2] = $10959;
 $10964 = (_i64Add(($10958|0),($10959|0),($10928|0),($10929|0))|0);
 $10965 = (getTempRet0() | 0);
 $10966 = (_bitshift64Shl(($10928|0),($10929|0),1)|0);
 $10967 = (getTempRet0() | 0);
 $10968 = $10966 & -2;
 $10969 = $10967 & 1;
 $10970 = (___muldi3(($10954|0),0,($10968|0),($10969|0))|0);
 $10971 = (getTempRet0() | 0);
 $10972 = (_i64Add(($10964|0),($10965|0),($10970|0),($10971|0))|0);
 $10973 = (getTempRet0() | 0);
 $10974 = $arrayidx7068;
 $10975 = $10974;
 HEAP32[$10975>>2] = $10972;
 $10976 = (($10974) + 4)|0;
 $10977 = $10976;
 HEAP32[$10977>>2] = $10973;
 $10978 = $10972 ^ $10936;
 $10979 = $10973 ^ $10937;
 $10980 = (_bitshift64Lshr(($10978|0),($10979|0),63)|0);
 $10981 = (getTempRet0() | 0);
 $10982 = (_bitshift64Shl(($10978|0),($10979|0),1)|0);
 $10983 = (getTempRet0() | 0);
 $10984 = $10980 | $10982;
 $10985 = $10981 | $10983;
 $10986 = $arrayidx5616;
 $10987 = $10986;
 HEAP32[$10987>>2] = $10984;
 $10988 = (($10986) + 4)|0;
 $10989 = $10988;
 HEAP32[$10989>>2] = $10985;
 $10990 = (_i64Add(($10708|0),($10709|0),($10504|0),($10505|0))|0);
 $10991 = (getTempRet0() | 0);
 $10992 = (_bitshift64Shl(($10708|0),($10709|0),1)|0);
 $10993 = (getTempRet0() | 0);
 $10994 = $10992 & -2;
 $10995 = $10993 & 1;
 $10996 = (___muldi3(($10994|0),($10995|0),($10504|0),0)|0);
 $10997 = (getTempRet0() | 0);
 $10998 = (_i64Add(($10990|0),($10991|0),($10996|0),($10997|0))|0);
 $10999 = (getTempRet0() | 0);
 $11000 = $10642 ^ $10998;
 $11001 = $10643 ^ $10999;
 $11002 = (_i64Add(($11001|0),($11000|0),($10574|0),($10575|0))|0);
 $11003 = (getTempRet0() | 0);
 $11004 = (_bitshift64Shl(($10574|0),($10575|0),1)|0);
 $11005 = (getTempRet0() | 0);
 $11006 = $11004 & -2;
 $11007 = $11005 & 1;
 $11008 = (___muldi3(($11001|0),0,($11006|0),($11007|0))|0);
 $11009 = (getTempRet0() | 0);
 $11010 = (_i64Add(($11002|0),($11003|0),($11008|0),($11009|0))|0);
 $11011 = (getTempRet0() | 0);
 $11012 = $11010 ^ $10504;
 $11013 = $11011 ^ $10505;
 $11014 = (_bitshift64Lshr(($11012|0),($11013|0),24)|0);
 $11015 = (getTempRet0() | 0);
 $11016 = (_bitshift64Shl(($11012|0),($11013|0),40)|0);
 $11017 = (getTempRet0() | 0);
 $11018 = $11014 | $11016;
 $11019 = $11015 | $11017;
 $11020 = (_i64Add(($11018|0),($11019|0),($10998|0),($10999|0))|0);
 $11021 = (getTempRet0() | 0);
 $11022 = (_bitshift64Shl(($10998|0),($10999|0),1)|0);
 $11023 = (getTempRet0() | 0);
 $11024 = $11022 & -2;
 $11025 = $11023 & 1;
 $11026 = (___muldi3(($11014|0),0,($11024|0),($11025|0))|0);
 $11027 = (getTempRet0() | 0);
 $11028 = (_i64Add(($11020|0),($11021|0),($11026|0),($11027|0))|0);
 $11029 = (getTempRet0() | 0);
 $11030 = $arrayidx2298;
 $11031 = $11030;
 HEAP32[$11031>>2] = $11028;
 $11032 = (($11030) + 4)|0;
 $11033 = $11032;
 HEAP32[$11033>>2] = $11029;
 $11034 = $11028 ^ $11001;
 $11035 = $11029 ^ $11000;
 $11036 = (_bitshift64Lshr(($11034|0),($11035|0),16)|0);
 $11037 = (getTempRet0() | 0);
 $11038 = (_bitshift64Shl(($11034|0),($11035|0),48)|0);
 $11039 = (getTempRet0() | 0);
 $11040 = $11036 | $11038;
 $11041 = $11037 | $11039;
 $11042 = $arrayidx12045;
 $11043 = $11042;
 HEAP32[$11043>>2] = $11040;
 $11044 = (($11042) + 4)|0;
 $11045 = $11044;
 HEAP32[$11045>>2] = $11041;
 $11046 = (_i64Add(($11040|0),($11041|0),($11010|0),($11011|0))|0);
 $11047 = (getTempRet0() | 0);
 $11048 = (_bitshift64Shl(($11010|0),($11011|0),1)|0);
 $11049 = (getTempRet0() | 0);
 $11050 = $11048 & -2;
 $11051 = $11049 & 1;
 $11052 = (___muldi3(($11036|0),0,($11050|0),($11051|0))|0);
 $11053 = (getTempRet0() | 0);
 $11054 = (_i64Add(($11046|0),($11047|0),($11052|0),($11053|0))|0);
 $11055 = (getTempRet0() | 0);
 $11056 = $arrayidx7275;
 $11057 = $11056;
 HEAP32[$11057>>2] = $11054;
 $11058 = (($11056) + 4)|0;
 $11059 = $11058;
 HEAP32[$11059>>2] = $11055;
 $11060 = $11054 ^ $11018;
 $11061 = $11055 ^ $11019;
 $11062 = (_bitshift64Lshr(($11060|0),($11061|0),63)|0);
 $11063 = (getTempRet0() | 0);
 $11064 = (_bitshift64Shl(($11060|0),($11061|0),1)|0);
 $11065 = (getTempRet0() | 0);
 $11066 = $11062 | $11064;
 $11067 = $11063 | $11065;
 $11068 = $arrayidx3750;
 $11069 = $11068;
 HEAP32[$11069>>2] = $11066;
 $11070 = (($11068) + 4)|0;
 $11071 = $11070;
 HEAP32[$11071>>2] = $11067;
 _copy_block($next_block,$block_tmp);
 _xor_block($next_block,$blockR);
 STACKTOP = sp;return;
}
function _argon2_get_impl_list($list) {
 $list = $list|0;
 var $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $count = ((($list)) + 4|0);
 HEAP32[$count>>2] = 0;
 return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_void((43352|0),(46447|0));
 __embind_register_bool((43368|0),(46452|0),1,1,0);
 __embind_register_integer((43376|0),(46457|0),1,-128,127);
 __embind_register_integer((43392|0),(46462|0),1,-128,127);
 __embind_register_integer((43384|0),(46474|0),1,0,255);
 __embind_register_integer((43400|0),(46488|0),2,-32768,32767);
 __embind_register_integer((43408|0),(46494|0),2,0,65535);
 __embind_register_integer((43416|0),(46509|0),4,-2147483648,2147483647);
 __embind_register_integer((43424|0),(46513|0),4,0,-1);
 __embind_register_integer((43432|0),(46526|0),4,-2147483648,2147483647);
 __embind_register_integer((43440|0),(46531|0),4,0,-1);
 __embind_register_float((43448|0),(46545|0),4);
 __embind_register_float((43456|0),(46551|0),8);
 __embind_register_std_string((42488|0),(46558|0));
 __embind_register_std_string((42616|0),(46570|0));
 __embind_register_std_wstring((42640|0),4,(46603|0));
 __embind_register_emval((42608|0),(46616|0));
 __embind_register_memory_view((42664|0),0,(46632|0));
 __embind_register_memory_view((42672|0),0,(46662|0));
 __embind_register_memory_view((42680|0),1,(46699|0));
 __embind_register_memory_view((42688|0),2,(46738|0));
 __embind_register_memory_view((42696|0),3,(46769|0));
 __embind_register_memory_view((42704|0),4,(46809|0));
 __embind_register_memory_view((42712|0),5,(46838|0));
 __embind_register_memory_view((42720|0),4,(46876|0));
 __embind_register_memory_view((42728|0),5,(46906|0));
 __embind_register_memory_view((42672|0),0,(46945|0));
 __embind_register_memory_view((42680|0),1,(46977|0));
 __embind_register_memory_view((42688|0),2,(47010|0));
 __embind_register_memory_view((42696|0),3,(47043|0));
 __embind_register_memory_view((42704|0),4,(47077|0));
 __embind_register_memory_view((42712|0),5,(47110|0));
 __embind_register_memory_view((42736|0),6,(47144|0));
 __embind_register_memory_view((42744|0),7,(47175|0));
 __embind_register_memory_view((42752|0),7,(47207|0));
 return;
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $0 = 0, $__type_name$i = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__type_name$i = ((($ti)) + 4|0);
 $0 = HEAP32[$__type_name$i>>2]|0;
 $call1 = (___strdup($0)|0);
 return ($call1|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call2 = 0, $fd = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $call = (_dummy_731($0)|0);
 HEAP32[$vararg_buffer>>2] = $call;
 $call1 = (___syscall6(6,($vararg_buffer|0))|0);
 $call2 = (___syscall_ret($call1)|0);
 STACKTOP = sp;return ($call2|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr32 = 0, $buf8 = 0, $buf_size = 0, $call = 0;
 var $call40 = 0, $call7 = 0, $call741 = 0, $call746 = 0, $cmp = 0, $cmp12 = 0, $cmp17 = 0, $cmp24 = 0, $cmp42 = 0, $cnt$0 = 0, $dec = 0, $fd = 0, $incdec$ptr = 0, $iov$043 = 0, $iov$1 = 0, $iov_base2 = 0, $iov_len = 0, $iov_len19 = 0, $iov_len23 = 0, $iov_len3 = 0;
 var $iov_len36 = 0, $iovcnt$045 = 0, $iovcnt$1 = 0, $iovs = 0, $or = 0, $rem$044 = 0, $retval$0 = 0, $sub = 0, $sub$ptr$sub = 0, $sub21 = 0, $sub28 = 0, $sub37 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $wbase = 0, $wend = 0;
 var $wend14 = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $iovs = sp;
 $wbase = ((($f)) + 28|0);
 $0 = HEAP32[$wbase>>2]|0;
 HEAP32[$iovs>>2] = $0;
 $iov_len = ((($iovs)) + 4|0);
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($1) - ($0))|0;
 HEAP32[$iov_len>>2] = $sub$ptr$sub;
 $iov_base2 = ((($iovs)) + 8|0);
 HEAP32[$iov_base2>>2] = $buf;
 $iov_len3 = ((($iovs)) + 12|0);
 HEAP32[$iov_len3>>2] = $len;
 $add = (($sub$ptr$sub) + ($len))|0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $iovs;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $call40 = (___syscall146(146,($vararg_buffer|0))|0);
 $call741 = (___syscall_ret($call40)|0);
 $cmp42 = ($add|0)==($call741|0);
 L1: do {
  if ($cmp42) {
   label = 3;
  } else {
   $call746 = $call741;$iov$043 = $iovs;$iovcnt$045 = 2;$rem$044 = $add;
   while(1) {
    $cmp12 = ($call746|0)<(0);
    if ($cmp12) {
     break;
    }
    $sub21 = (($rem$044) - ($call746))|0;
    $iov_len23 = ((($iov$043)) + 4|0);
    $9 = HEAP32[$iov_len23>>2]|0;
    $cmp24 = ($call746>>>0)>($9>>>0);
    $incdec$ptr = ((($iov$043)) + 8|0);
    $iov$1 = $cmp24 ? $incdec$ptr : $iov$043;
    $dec = $cmp24 << 31 >> 31;
    $iovcnt$1 = (($iovcnt$045) + ($dec))|0;
    $sub28 = $cmp24 ? $9 : 0;
    $cnt$0 = (($call746) - ($sub28))|0;
    $10 = HEAP32[$iov$1>>2]|0;
    $add$ptr32 = (($10) + ($cnt$0)|0);
    HEAP32[$iov$1>>2] = $add$ptr32;
    $iov_len36 = ((($iov$1)) + 4|0);
    $11 = HEAP32[$iov_len36>>2]|0;
    $sub37 = (($11) - ($cnt$0))|0;
    HEAP32[$iov_len36>>2] = $sub37;
    $12 = HEAP32[$fd>>2]|0;
    $13 = $iov$1;
    HEAP32[$vararg_buffer3>>2] = $12;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $13;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $iovcnt$1;
    $call = (___syscall146(146,($vararg_buffer3|0))|0);
    $call7 = (___syscall_ret($call)|0);
    $cmp = ($sub21|0)==($call7|0);
    if ($cmp) {
     label = 3;
     break L1;
    } else {
     $call746 = $call7;$iov$043 = $iov$1;$iovcnt$045 = $iovcnt$1;$rem$044 = $sub21;
    }
   }
   $wend14 = ((($f)) + 16|0);
   HEAP32[$wend14>>2] = 0;
   HEAP32[$wbase>>2] = 0;
   HEAP32[$wpos>>2] = 0;
   $7 = HEAP32[$f>>2]|0;
   $or = $7 | 32;
   HEAP32[$f>>2] = $or;
   $cmp17 = ($iovcnt$045|0)==(2);
   if ($cmp17) {
    $retval$0 = 0;
   } else {
    $iov_len19 = ((($iov$043)) + 4|0);
    $8 = HEAP32[$iov_len19>>2]|0;
    $sub = (($len) - ($8))|0;
    $retval$0 = $sub;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $buf8 = ((($f)) + 44|0);
  $4 = HEAP32[$buf8>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $5 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($4) + ($5)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $6 = $4;
  HEAP32[$wbase>>2] = $6;
  HEAP32[$wpos>>2] = $6;
  $retval$0 = $len;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___stdio_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $cmp = 0, $fd = 0, $ret = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp + 8|0;
 $ret = sp;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $ret;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $call = (___syscall140(140,($vararg_buffer|0))|0);
 $call2 = (___syscall_ret($call)|0);
 $cmp = ($call2|0)<(0);
 if ($cmp) {
  $10 = $ret;
  $11 = $10;
  HEAP32[$11>>2] = -1;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = -1;
  $14 = -1;$15 = -1;
 } else {
  $4 = $ret;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $14 = $9;$15 = $6;
 }
 setTempRet0(($14) | 0);
 STACKTOP = sp;return ($15|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $call = 0, $cmp = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($r>>>0)>(4294963200);
 if ($cmp) {
  $sub = (0 - ($r))|0;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $sub;
  $retval$0 = -1;
 } else {
  $retval$0 = $r;
 }
 return ($retval$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (576496|0);
}
function _dummy_731($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($fd|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $call = 0, $call3 = 0, $fd = 0, $lbf = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $write = 0, $wsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $wsz = sp + 16|0;
 $write = ((($f)) + 36|0);
 HEAP32[$write>>2] = 2;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 64;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $fd = ((($f)) + 60|0);
  $1 = HEAP32[$fd>>2]|0;
  $2 = $wsz;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  $call = (___syscall54(54,($vararg_buffer|0))|0);
  $tobool2 = ($call|0)==(0);
  if (!($tobool2)) {
   $lbf = ((($f)) + 75|0);
   HEAP8[$lbf>>0] = -1;
  }
 }
 $call3 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($call3|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -48)|0;
 $cmp = ($sub>>>0)<(10);
 $conv = $cmp&1;
 return ($conv|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($call|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp16 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub17 = 0;
 var $sub3 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $b = sp + 144|0;
 $f = sp;
 _memcpy(($f|0),(43048|0),144)|0;
 $sub = (($n) + -1)|0;
 $cmp = ($sub>>>0)>(2147483646);
 if ($cmp) {
  $tobool = ($n|0)==(0);
  if ($tobool) {
   $n$addr$0 = 1;$s$addr$0 = $b;
   label = 4;
  } else {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 75;
   $retval$0 = -1;
  }
 } else {
  $n$addr$0 = $n;$s$addr$0 = $s;
  label = 4;
 }
 if ((label|0) == 4) {
  $sub$ptr$rhs$cast = $s$addr$0;
  $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
  $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
  $spec$select = $cmp4 ? $sub3 : $n$addr$0;
  $buf_size = ((($f)) + 48|0);
  HEAP32[$buf_size>>2] = $spec$select;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $s$addr$0;
  $buf = ((($f)) + 44|0);
  HEAP32[$buf>>2] = $s$addr$0;
  $add$ptr = (($s$addr$0) + ($spec$select)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $add$ptr;
  $call10 = (_vfprintf($f,$fmt,$ap)|0);
  $tobool11 = ($spec$select|0)==(0);
  if ($tobool11) {
   $retval$0 = $call10;
  } else {
   $0 = HEAP32[$wpos>>2]|0;
   $1 = HEAP32[$wend>>2]|0;
   $cmp16 = ($0|0)==($1|0);
   $sub17 = $cmp16 << 31 >> 31;
   $arrayidx = (($0) + ($sub17)|0);
   HEAP8[$arrayidx>>0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___vfprintf_internal($f,$fmt,$ap,1,31)|0);
 return ($call|0);
}
function _fmt_fp($f,$y,$w,$p,$fl,$t) {
 $f = $f|0;
 $y = +$y;
 $w = $w|0;
 $p = $p|0;
 $fl = $fl|0;
 $t = $t|0;
 var $$ = 0, $$pr = 0, $$pr415 = 0, $$pre = 0, $$pre517 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0;
 var $a$9 = 0, $add = 0, $add$ptr213 = 0, $add$ptr311 = 0, $add$ptr354 = 0, $add$ptr358 = 0, $add$ptr373 = 0, $add$ptr442 = 0, $add$ptr65 = 0, $add$ptr671 = 0, $add$ptr742 = 0, $add$ptr756 = 0, $add113 = 0, $add150 = 0, $add154 = 0, $add163 = 0, $add165 = 0, $add273 = 0, $add275 = 0, $add284 = 0;
 var $add313 = 0, $add355 = 0, $add410 = 0.0, $add414 = 0, $add477$neg = 0, $add561 = 0, $add608 = 0, $add612 = 0, $add620 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $add737 = 0, $add810 = 0, $add87 = 0.0, $add90 = 0.0, $and = 0, $and12 = 0, $and134 = 0, $and282 = 0;
 var $and36 = 0, $and379 = 0, $and45 = 0, $and483 = 0, $and610 = 0, $and610$lobit = 0, $and62 = 0, $and702 = 0, $and780 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx251 = 0, $arrayidx453 = 0, $arrayidx489 = 0, $big = 0, $buf = 0, $call55 = 0.0, $carry$0493 = 0, $carry262$0484 = 0, $cmp103 = 0;
 var $cmp127 = 0, $cmp131 = 0, $cmp147 = 0, $cmp196 = 0, $cmp205 = 0, $cmp225 = 0, $cmp225500 = 0, $cmp235 = 0, $cmp235492 = 0, $cmp249 = 0, $cmp249496 = 0, $cmp259 = 0, $cmp259486 = 0, $cmp277 = 0, $cmp277482 = 0, $cmp299 = 0, $cmp308 = 0, $cmp315 = 0, $cmp324 = 0, $cmp324478 = 0;
 var $cmp333 = 0, $cmp338 = 0, $cmp350 = 0, $cmp363 = 0, $cmp363474 = 0, $cmp374 = 0, $cmp38 = 0, $cmp385 = 0, $cmp390 = 0, $cmp403 = 0, $cmp411 = 0, $cmp416 = 0, $cmp416469 = 0, $cmp420 = 0, $cmp433 = 0, $cmp433465 = 0, $cmp443 = 0, $cmp450 = 0, $cmp450$lcssa = 0, $cmp450458 = 0;
 var $cmp470 = 0, $cmp473 = 0, $cmp495 = 0, $cmp495454 = 0, $cmp505 = 0, $cmp528 = 0, $cmp577 = 0, $cmp59 = 0, $cmp614 = 0, $cmp617 = 0, $cmp623 = 0, $cmp636 = 0, $cmp636449 = 0, $cmp660 = 0, $cmp665 = 0, $cmp673 = 0, $cmp678 = 0, $cmp678435 = 0, $cmp686 = 0, $cmp707 = 0;
 var $cmp707430 = 0, $cmp710 = 0, $cmp710431 = 0, $cmp722 = 0, $cmp722427 = 0, $cmp745 = 0, $cmp745442 = 0, $cmp748 = 0, $cmp748443 = 0, $cmp760 = 0, $cmp765 = 0, $cmp770 = 0, $cmp770439 = 0, $cmp777 = 0, $cmp790 = 0, $cmp818 = 0, $cmp82 = 0, $cmp94 = 0, $cond = 0, $cond100 = 0;
 var $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond43 = 0, $cond629 = 0, $cond732 = 0, $cond800 = 0, $conv111 = 0, $conv114 = 0, $conv116 = 0, $conv118393 = 0, $conv121 = 0, $conv123 = 0.0, $conv216 = 0, $conv218 = 0.0, $conv644 = 0, $conv646 = 0, $d$0 = 0, $d$0491 = 0, $d$0494 = 0;
 var $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $dec = 0, $dec476 = 0, $dec481 = 0, $dec78 = 0, $div274 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0;
 var $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc468 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr112 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0;
 var $incdec$ptr137 = 0, $incdec$ptr217 = 0, $incdec$ptr246 = 0, $incdec$ptr288 = 0, $incdec$ptr292 = 0, $incdec$ptr292520 = 0, $incdec$ptr296 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr645 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr698 = 0, $incdec$ptr725 = 0, $incdec$ptr734 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0;
 var $incdec$ptr808 = 0, $j$0 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $l$1 = 0, $land$ext$neg = 0, $mul = 0.0, $mul125 = 0.0, $mul202 = 0.0, $mul220 = 0.0, $mul286 = 0, $mul322 = 0, $mul328 = 0, $mul335 = 0, $mul349 = 0, $mul367 = 0, $mul406 = 0.0, $mul407 = 0.0;
 var $mul431 = 0, $mul437 = 0, $mul499 = 0, $mul513 = 0, $mul80 = 0.0, $not$tobool341 = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond398 = 0, $or$cond400 = 0, $or$cond409 = 0, $or$cond411 = 0, $or120 = 0, $or504 = 0, $or613 = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0;
 var $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $rem494 = 0, $rem494453 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s35$0 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0;
 var $scevgep513 = 0, $scevgep513514 = 0, $shl280 = 0, $shr283 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396521 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select401 = 0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select412 = 0.0;
 var $spec$select413 = 0, $spec$select414 = 0, $spec$select416 = 0, $spec$select417 = 0, $spec$select418 = 0.0, $spec$select419 = 0.0, $spec$select420 = 0.0, $sub = 0.0, $sub$ptr$div = 0, $sub$ptr$div321 = 0, $sub$ptr$div347 = 0, $sub$ptr$div430 = 0, $sub$ptr$div511 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast305 = 0, $sub$ptr$lhs$cast344 = 0, $sub$ptr$lhs$cast508 = 0;
 var $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$lhs$cast811 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast306 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$rhs$cast428 = 0, $sub$ptr$rhs$cast634 = 0, $sub$ptr$rhs$cast634447 = 0, $sub$ptr$rhs$cast649 = 0, $sub$ptr$rhs$cast695 = 0, $sub$ptr$rhs$cast788 = 0, $sub$ptr$rhs$cast812 = 0, $sub$ptr$sub = 0, $sub$ptr$sub145 = 0;
 var $sub$ptr$sub153 = 0, $sub$ptr$sub159 = 0, $sub$ptr$sub162 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub307 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub346 = 0, $sub$ptr$sub429 = 0, $sub$ptr$sub510 = 0, $sub$ptr$sub635 = 0, $sub$ptr$sub635448 = 0, $sub$ptr$sub650 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub696 = 0, $sub$ptr$sub789 = 0, $sub$ptr$sub813 = 0, $sub124 = 0.0, $sub146 = 0, $sub181 = 0;
 var $sub203 = 0, $sub219 = 0.0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub336 = 0, $sub343 = 0, $sub357 = 0, $sub409 = 0, $sub478 = 0, $sub480 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $sub85 = 0.0, $sub86 = 0.0, $sub88 = 0.0;
 var $sub91 = 0.0, $sub97 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool129 = 0, $tobool13 = 0, $tobool135 = 0, $tobool139 = 0, $tobool140 = 0, $tobool222 = 0, $tobool244 = 0, $tobool252 = 0, $tobool290 = 0, $tobool290519 = 0, $tobool294 = 0, $tobool341 = 0, $tobool37 = 0, $tobool371 = 0, $tobool380 = 0, $tobool400 = 0;
 var $tobool454 = 0, $tobool484 = 0, $tobool490 = 0, $tobool56 = 0, $tobool609 = 0, $tobool609$not = 0, $tobool63 = 0, $tobool703 = 0, $tobool76 = 0, $tobool76421 = 0, $tobool781 = 0, $tobool79 = 0, $tobool9 = 0, $w$add653 = 0, $xor = 0, $xor167 = 0, $xor186 = 0, $xor655 = 0, $xor816 = 0, $y$addr$0 = 0.0;
 var $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0;
 $big = sp + 32|0;
 $e2 = sp + 536|0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540|0;
 HEAP32[$e2>>2] = 0;
 $arrayidx = ((($ebuf0)) + 12|0);
 $0 = (___DOUBLE_BITS_662($y)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)<(0);
 if ($2) {
  $sub = - $y;
  $3 = (___DOUBLE_BITS_662($sub)|0);
  $4 = (getTempRet0() | 0);
  $8 = $4;$85 = $3;$pl$0 = 1;$prefix$0 = 47759;$y$addr$0 = $sub;
 } else {
  $and = $fl & 2048;
  $tobool9 = ($and|0)==(0);
  $and12 = $fl & 1;
  $tobool13 = ($and12|0)==(0);
  $$ = $tobool13 ? (47760) : (47765);
  $spec$select416 = $tobool9 ? $$ : (47762);
  $5 = $fl & 2049;
  $6 = ($5|0)!=(0);
  $spec$select417 = $6&1;
  $8 = $1;$85 = $0;$pl$0 = $spec$select417;$prefix$0 = $spec$select416;$y$addr$0 = $y;
 }
 $7 = $8 & 2146435072;
 $9 = (0)==(0);
 $10 = ($7|0)==(2146435072);
 $11 = $9 & $10;
 do {
  if ($11) {
   $and36 = $t & 32;
   $tobool37 = ($and36|0)!=(0);
   $cond = $tobool37 ? 47778 : 47782;
   $cmp38 = ($y$addr$0 != $y$addr$0) | (0.0 != 0.0);
   $cond43 = $tobool37 ? 47786 : 47790;
   $s35$0 = $cmp38 ? $cond43 : $cond;
   $add = (($pl$0) + 3)|0;
   $and45 = $fl & -65537;
   _pad_659($f,32,$w,$add,$and45);
   _out($f,$prefix$0,$pl$0);
   _out($f,$s35$0,3);
   $xor = $fl ^ 8192;
   _pad_659($f,32,$w,$add,$xor);
   $add653$sink524 = $add;
  } else {
   $call55 = (+_frexp($y$addr$0,$e2));
   $mul = $call55 * 2.0;
   $tobool56 = $mul != 0.0;
   if ($tobool56) {
    $12 = HEAP32[$e2>>2]|0;
    $dec = (($12) + -1)|0;
    HEAP32[$e2>>2] = $dec;
   }
   $or = $t | 32;
   $cmp59 = ($or|0)==(97);
   if ($cmp59) {
    $and62 = $t & 32;
    $tobool63 = ($and62|0)==(0);
    $add$ptr65 = ((($prefix$0)) + 9|0);
    $spec$select = $tobool63 ? $prefix$0 : $add$ptr65;
    $add67 = $pl$0 | 2;
    $13 = ($p>>>0)>(11);
    $sub74 = (12 - ($p))|0;
    $tobool76421 = ($sub74|0)==(0);
    $tobool76 = $13 | $tobool76421;
    do {
     if ($tobool76) {
      $y$addr$1 = $mul;
     } else {
      $re$1426 = $sub74;$round$0425 = 8.0;
      while(1) {
       $dec78 = (($re$1426) + -1)|0;
       $mul80 = $round$0425 * 16.0;
       $tobool79 = ($dec78|0)==(0);
       if ($tobool79) {
        break;
       } else {
        $re$1426 = $dec78;$round$0425 = $mul80;
       }
      }
      $14 = HEAP8[$spec$select>>0]|0;
      $cmp82 = ($14<<24>>24)==(45);
      if ($cmp82) {
       $sub85 = - $mul;
       $sub86 = $sub85 - $mul80;
       $add87 = $mul80 + $sub86;
       $sub88 = - $add87;
       $y$addr$1 = $sub88;
       break;
      } else {
       $add90 = $mul + $mul80;
       $sub91 = $add90 - $mul80;
       $y$addr$1 = $sub91;
       break;
      }
     }
    } while(0);
    $15 = HEAP32[$e2>>2]|0;
    $cmp94 = ($15|0)<(0);
    $sub97 = (0 - ($15))|0;
    $cond100 = $cmp94 ? $sub97 : $15;
    $16 = ($cond100|0)<(0);
    $17 = $16 << 31 >> 31;
    $18 = (_fmt_u($cond100,$17,$arrayidx)|0);
    $cmp103 = ($18|0)==($arrayidx|0);
    if ($cmp103) {
     $incdec$ptr106 = ((($ebuf0)) + 11|0);
     HEAP8[$incdec$ptr106>>0] = 48;
     $estr$0 = $incdec$ptr106;
    } else {
     $estr$0 = $18;
    }
    $19 = $15 >> 31;
    $20 = $19 & 2;
    $21 = (($20) + 43)|0;
    $conv111 = $21&255;
    $incdec$ptr112 = ((($estr$0)) + -1|0);
    HEAP8[$incdec$ptr112>>0] = $conv111;
    $add113 = (($t) + 15)|0;
    $conv114 = $add113&255;
    $incdec$ptr115 = ((($estr$0)) + -2|0);
    HEAP8[$incdec$ptr115>>0] = $conv114;
    $cmp131 = ($p|0)<(1);
    $and134 = $fl & 8;
    $tobool135 = ($and134|0)==(0);
    $s$0 = $buf;$y$addr$2 = $y$addr$1;
    while(1) {
     $conv116 = (~~(($y$addr$2)));
     $arrayidx117 = (42464 + ($conv116)|0);
     $22 = HEAP8[$arrayidx117>>0]|0;
     $conv118393 = $22&255;
     $or120 = $and62 | $conv118393;
     $conv121 = $or120&255;
     $incdec$ptr122 = ((($s$0)) + 1|0);
     HEAP8[$s$0>>0] = $conv121;
     $conv123 = (+($conv116|0));
     $sub124 = $y$addr$2 - $conv123;
     $mul125 = $sub124 * 16.0;
     $sub$ptr$lhs$cast = $incdec$ptr122;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast$le))|0;
     $cmp127 = ($sub$ptr$sub|0)==(1);
     if ($cmp127) {
      $tobool129 = $mul125 == 0.0;
      $or$cond1$not = $cmp131 & $tobool129;
      $or$cond = $tobool135 & $or$cond1$not;
      if ($or$cond) {
       $s$1 = $incdec$ptr122;
      } else {
       $incdec$ptr137 = ((($s$0)) + 2|0);
       HEAP8[$incdec$ptr122>>0] = 46;
       $s$1 = $incdec$ptr137;
      }
     } else {
      $s$1 = $incdec$ptr122;
     }
     $tobool139 = $mul125 != 0.0;
     if ($tobool139) {
      $s$0 = $s$1;$y$addr$2 = $mul125;
     } else {
      break;
     }
    }
    $tobool140 = ($p|0)==(0);
    $$pre517 = $s$1;
    if ($tobool140) {
     label = 25;
    } else {
     $sub$ptr$sub145 = (-2 - ($sub$ptr$rhs$cast$le))|0;
     $sub146 = (($sub$ptr$sub145) + ($$pre517))|0;
     $cmp147 = ($sub146|0)<($p|0);
     if ($cmp147) {
      $sub$ptr$lhs$cast151 = $arrayidx;
      $sub$ptr$rhs$cast152 = $incdec$ptr115;
      $sub$ptr$sub153 = (($p) + 2)|0;
      $add150 = (($sub$ptr$sub153) + ($sub$ptr$lhs$cast151))|0;
      $add154 = (($add150) - ($sub$ptr$rhs$cast152))|0;
      $l$0 = $add154;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $sub$ptr$lhs$cast160 = $arrayidx;
     $sub$ptr$rhs$cast161 = $incdec$ptr115;
     $sub$ptr$sub159 = (($sub$ptr$lhs$cast160) - ($sub$ptr$rhs$cast$le))|0;
     $sub$ptr$sub162 = (($sub$ptr$sub159) - ($sub$ptr$rhs$cast161))|0;
     $add163 = (($sub$ptr$sub162) + ($$pre517))|0;
     $l$0 = $add163;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
    }
    $add165 = (($l$0) + ($add67))|0;
    _pad_659($f,32,$w,$add165,$fl);
    _out($f,$spec$select,$add67);
    $xor167 = $fl ^ 65536;
    _pad_659($f,48,$w,$add165,$xor167);
    $sub$ptr$sub172 = (($$pre517) - ($sub$ptr$rhs$cast$le))|0;
    _out($f,$buf,$sub$ptr$sub172);
    $sub$ptr$sub175 = (($sub$ptr$lhs$cast173$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast174$pre$phiZZZZ2D))|0;
    $23 = (($sub$ptr$sub172) + ($sub$ptr$sub175))|0;
    $sub181 = (($l$0) - ($23))|0;
    _pad_659($f,48,$sub181,0,0);
    _out($f,$incdec$ptr115,$sub$ptr$sub175);
    $xor186 = $fl ^ 8192;
    _pad_659($f,32,$w,$add165,$xor186);
    $add653$sink524 = $add165;
    break;
   }
   $cmp196 = ($p|0)<(0);
   $spec$select395 = $cmp196 ? 6 : $p;
   if ($tobool56) {
    $mul202 = $mul * 268435456.0;
    $24 = HEAP32[$e2>>2]|0;
    $sub203 = (($24) + -28)|0;
    HEAP32[$e2>>2] = $sub203;
    $$pr = $sub203;$y$addr$3 = $mul202;
   } else {
    $$pre = HEAP32[$e2>>2]|0;
    $$pr = $$pre;$y$addr$3 = $mul;
   }
   $cmp205 = ($$pr|0)<(0);
   $add$ptr213 = ((($big)) + 288|0);
   $z$0 = $cmp205 ? $big : $add$ptr213;
   $y$addr$4 = $y$addr$3;$z$1 = $z$0;
   while(1) {
    $conv216 = (~~(($y$addr$4))>>>0);
    HEAP32[$z$1>>2] = $conv216;
    $incdec$ptr217 = ((($z$1)) + 4|0);
    $conv218 = (+($conv216>>>0));
    $sub219 = $y$addr$4 - $conv218;
    $mul220 = $sub219 * 1.0E+9;
    $tobool222 = $mul220 != 0.0;
    if ($tobool222) {
     $y$addr$4 = $mul220;$z$1 = $incdec$ptr217;
    } else {
     break;
    }
   }
   $sub$ptr$rhs$cast345 = $z$0;
   $cmp225500 = ($$pr|0)>(0);
   if ($cmp225500) {
    $26 = $$pr;$a$1502 = $z$0;$z$2501 = $incdec$ptr217;
    while(1) {
     $25 = ($26|0)<(29);
     $cond233 = $25 ? $26 : 29;
     $d$0491 = ((($z$2501)) + -4|0);
     $cmp235492 = ($d$0491>>>0)<($a$1502>>>0);
     if ($cmp235492) {
      $a$2 = $a$1502;
     } else {
      $carry$0493 = 0;$d$0494 = $d$0491;
      while(1) {
       $27 = HEAP32[$d$0494>>2]|0;
       $28 = (_bitshift64Shl(($27|0),0,($cond233|0))|0);
       $29 = (getTempRet0() | 0);
       $30 = (_i64Add(($28|0),($29|0),($carry$0493|0),0)|0);
       $31 = (getTempRet0() | 0);
       $32 = (___udivdi3(($30|0),($31|0),1000000000,0)|0);
       $33 = (getTempRet0() | 0);
       $34 = (___muldi3(($32|0),($33|0),1000000000,0)|0);
       $35 = (getTempRet0() | 0);
       $36 = (_i64Subtract(($30|0),($31|0),($34|0),($35|0))|0);
       $37 = (getTempRet0() | 0);
       HEAP32[$d$0494>>2] = $36;
       $d$0 = ((($d$0494)) + -4|0);
       $cmp235 = ($d$0>>>0)<($a$1502>>>0);
       if ($cmp235) {
        break;
       } else {
        $carry$0493 = $32;$d$0494 = $d$0;
       }
      }
      $tobool244 = ($32|0)==(0);
      if ($tobool244) {
       $a$2 = $a$1502;
      } else {
       $incdec$ptr246 = ((($a$1502)) + -4|0);
       HEAP32[$incdec$ptr246>>2] = $32;
       $a$2 = $incdec$ptr246;
      }
     }
     $cmp249496 = ($z$2501>>>0)>($a$2>>>0);
     L57: do {
      if ($cmp249496) {
       $z$3497 = $z$2501;
       while(1) {
        $arrayidx251 = ((($z$3497)) + -4|0);
        $38 = HEAP32[$arrayidx251>>2]|0;
        $tobool252 = ($38|0)==(0);
        if (!($tobool252)) {
         $z$3$lcssa = $z$3497;
         break L57;
        }
        $cmp249 = ($arrayidx251>>>0)>($a$2>>>0);
        if ($cmp249) {
         $z$3497 = $arrayidx251;
        } else {
         $z$3$lcssa = $arrayidx251;
         break;
        }
       }
      } else {
       $z$3$lcssa = $z$2501;
      }
     } while(0);
     $39 = HEAP32[$e2>>2]|0;
     $sub256 = (($39) - ($cond233))|0;
     HEAP32[$e2>>2] = $sub256;
     $cmp225 = ($sub256|0)>(0);
     if ($cmp225) {
      $26 = $sub256;$a$1502 = $a$2;$z$2501 = $z$3$lcssa;
     } else {
      $$pr415 = $sub256;$a$1$lcssa = $a$2;$z$2$lcssa = $z$3$lcssa;
      break;
     }
    }
   } else {
    $$pr415 = $$pr;$a$1$lcssa = $z$0;$z$2$lcssa = $incdec$ptr217;
   }
   $cmp259486 = ($$pr415|0)<(0);
   if ($cmp259486) {
    $add273 = (($spec$select395) + 25)|0;
    $div274 = (($add273|0) / 9)&-1;
    $add275 = (($div274) + 1)|0;
    $cmp299 = ($or|0)==(102);
    $40 = $$pr415;$a$3488 = $a$1$lcssa;$z$4487 = $z$2$lcssa;
    while(1) {
     $sub264 = (0 - ($40))|0;
     $41 = ($sub264|0)<(9);
     $cond271 = $41 ? $sub264 : 9;
     $cmp277482 = ($a$3488>>>0)<($z$4487>>>0);
     if ($cmp277482) {
      $shl280 = 1 << $cond271;
      $sub281 = (($shl280) + -1)|0;
      $shr285 = 1000000000 >>> $cond271;
      $carry262$0484 = 0;$d$1483 = $a$3488;
      while(1) {
       $43 = HEAP32[$d$1483>>2]|0;
       $and282 = $43 & $sub281;
       $shr283 = $43 >>> $cond271;
       $add284 = (($shr283) + ($carry262$0484))|0;
       HEAP32[$d$1483>>2] = $add284;
       $mul286 = Math_imul($and282, $shr285)|0;
       $incdec$ptr288 = ((($d$1483)) + 4|0);
       $cmp277 = ($incdec$ptr288>>>0)<($z$4487>>>0);
       if ($cmp277) {
        $carry262$0484 = $mul286;$d$1483 = $incdec$ptr288;
       } else {
        break;
       }
      }
      $44 = HEAP32[$a$3488>>2]|0;
      $tobool290 = ($44|0)==(0);
      $incdec$ptr292 = ((($a$3488)) + 4|0);
      $spec$select396 = $tobool290 ? $incdec$ptr292 : $a$3488;
      $tobool294 = ($mul286|0)==(0);
      if ($tobool294) {
       $spec$select396523 = $spec$select396;$z$5 = $z$4487;
      } else {
       $incdec$ptr296 = ((($z$4487)) + 4|0);
       HEAP32[$z$4487>>2] = $mul286;
       $spec$select396523 = $spec$select396;$z$5 = $incdec$ptr296;
      }
     } else {
      $42 = HEAP32[$a$3488>>2]|0;
      $tobool290519 = ($42|0)==(0);
      $incdec$ptr292520 = ((($a$3488)) + 4|0);
      $spec$select396521 = $tobool290519 ? $incdec$ptr292520 : $a$3488;
      $spec$select396523 = $spec$select396521;$z$5 = $z$4487;
     }
     $cond304 = $cmp299 ? $z$0 : $spec$select396523;
     $sub$ptr$lhs$cast305 = $z$5;
     $sub$ptr$rhs$cast306 = $cond304;
     $sub$ptr$sub307 = (($sub$ptr$lhs$cast305) - ($sub$ptr$rhs$cast306))|0;
     $sub$ptr$div = $sub$ptr$sub307 >> 2;
     $cmp308 = ($sub$ptr$div|0)>($add275|0);
     $add$ptr311 = (($cond304) + ($add275<<2)|0);
     $spec$select397 = $cmp308 ? $add$ptr311 : $z$5;
     $45 = HEAP32[$e2>>2]|0;
     $add313 = (($45) + ($cond271))|0;
     HEAP32[$e2>>2] = $add313;
     $cmp259 = ($add313|0)<(0);
     if ($cmp259) {
      $40 = $add313;$a$3488 = $spec$select396523;$z$4487 = $spec$select397;
     } else {
      $a$3$lcssa = $spec$select396523;$z$4$lcssa = $spec$select397;
      break;
     }
    }
   } else {
    $a$3$lcssa = $a$1$lcssa;$z$4$lcssa = $z$2$lcssa;
   }
   $cmp315 = ($a$3$lcssa>>>0)<($z$4$lcssa>>>0);
   if ($cmp315) {
    $sub$ptr$rhs$cast319 = $a$3$lcssa;
    $sub$ptr$sub320 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast319))|0;
    $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
    $mul322 = ($sub$ptr$div321*9)|0;
    $46 = HEAP32[$a$3$lcssa>>2]|0;
    $cmp324478 = ($46>>>0)<(10);
    if ($cmp324478) {
     $e$1 = $mul322;
    } else {
     $e$0480 = $mul322;$i$0479 = 10;
     while(1) {
      $mul328 = ($i$0479*10)|0;
      $inc = (($e$0480) + 1)|0;
      $cmp324 = ($46>>>0)<($mul328>>>0);
      if ($cmp324) {
       $e$1 = $inc;
       break;
      } else {
       $e$0480 = $inc;$i$0479 = $mul328;
      }
     }
    }
   } else {
    $e$1 = 0;
   }
   $cmp333 = ($or|0)==(102);
   $mul335 = $cmp333 ? 0 : $e$1;
   $sub336 = (($spec$select395) - ($mul335))|0;
   $cmp338 = ($or|0)==(103);
   $tobool341 = ($spec$select395|0)!=(0);
   $47 = $tobool341 & $cmp338;
   $land$ext$neg = $47 << 31 >> 31;
   $sub343 = (($sub336) + ($land$ext$neg))|0;
   $sub$ptr$lhs$cast344 = $z$4$lcssa;
   $sub$ptr$sub346 = (($sub$ptr$lhs$cast344) - ($sub$ptr$rhs$cast345))|0;
   $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
   $48 = ($sub$ptr$div347*9)|0;
   $mul349 = (($48) + -9)|0;
   $cmp350 = ($sub343|0)<($mul349|0);
   if ($cmp350) {
    $add$ptr354 = ((($z$0)) + 4|0);
    $add355 = (($sub343) + 9216)|0;
    $div356 = (($add355|0) / 9)&-1;
    $sub357 = (($div356) + -1024)|0;
    $add$ptr358 = (($add$ptr354) + ($sub357<<2)|0);
    $49 = ($div356*9)|0;
    $50 = (($add355) - ($49))|0;
    $cmp363474 = ($50|0)<(8);
    if ($cmp363474) {
     $i$1475 = 10;$j$0$in476 = $50;
     while(1) {
      $j$0 = (($j$0$in476) + 1)|0;
      $mul367 = ($i$1475*10)|0;
      $cmp363 = ($j$0$in476|0)<(7);
      if ($cmp363) {
       $i$1475 = $mul367;$j$0$in476 = $j$0;
      } else {
       $i$1$lcssa = $mul367;
       break;
      }
     }
    } else {
     $i$1$lcssa = 10;
    }
    $51 = HEAP32[$add$ptr358>>2]|0;
    $div378 = (($51>>>0) / ($i$1$lcssa>>>0))&-1;
    $52 = Math_imul($div378, $i$1$lcssa)|0;
    $53 = (($51) - ($52))|0;
    $tobool371 = ($53|0)==(0);
    $add$ptr373 = ((($add$ptr358)) + 4|0);
    $cmp374 = ($add$ptr373|0)==($z$4$lcssa|0);
    $or$cond398 = $cmp374 & $tobool371;
    if ($or$cond398) {
     $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
    } else {
     $and379 = $div378 & 1;
     $tobool380 = ($and379|0)==(0);
     $spec$select399 = $tobool380 ? 9007199254740992.0 : 9007199254740994.0;
     $div384 = $i$1$lcssa >>> 1;
     $cmp385 = ($53>>>0)<($div384>>>0);
     $cmp390 = ($53|0)==($div384|0);
     $or$cond400 = $cmp374 & $cmp390;
     $spec$select412 = $or$cond400 ? 1.0 : 1.5;
     $spec$select418 = $cmp385 ? 0.5 : $spec$select412;
     $tobool400 = ($pl$0|0)==(0);
     if ($tobool400) {
      $round377$1 = $spec$select399;$small$1 = $spec$select418;
     } else {
      $54 = HEAP8[$prefix$0>>0]|0;
      $cmp403 = ($54<<24>>24)==(45);
      $mul406 = - $spec$select399;
      $mul407 = - $spec$select418;
      $spec$select419 = $cmp403 ? $mul406 : $spec$select399;
      $spec$select420 = $cmp403 ? $mul407 : $spec$select418;
      $round377$1 = $spec$select419;$small$1 = $spec$select420;
     }
     $sub409 = (($51) - ($53))|0;
     HEAP32[$add$ptr358>>2] = $sub409;
     $add410 = $round377$1 + $small$1;
     $cmp411 = $add410 != $round377$1;
     if ($cmp411) {
      $add414 = (($sub409) + ($i$1$lcssa))|0;
      HEAP32[$add$ptr358>>2] = $add414;
      $cmp416469 = ($add414>>>0)>(999999999);
      if ($cmp416469) {
       $a$5471 = $a$3$lcssa;$d$2470 = $add$ptr358;
       while(1) {
        $incdec$ptr419 = ((($d$2470)) + -4|0);
        HEAP32[$d$2470>>2] = 0;
        $cmp420 = ($incdec$ptr419>>>0)<($a$5471>>>0);
        if ($cmp420) {
         $incdec$ptr423 = ((($a$5471)) + -4|0);
         HEAP32[$incdec$ptr423>>2] = 0;
         $a$6 = $incdec$ptr423;
        } else {
         $a$6 = $a$5471;
        }
        $55 = HEAP32[$incdec$ptr419>>2]|0;
        $inc425 = (($55) + 1)|0;
        HEAP32[$incdec$ptr419>>2] = $inc425;
        $cmp416 = ($inc425>>>0)>(999999999);
        if ($cmp416) {
         $a$5471 = $a$6;$d$2470 = $incdec$ptr419;
        } else {
         $a$5$lcssa = $a$6;$d$2$lcssa = $incdec$ptr419;
         break;
        }
       }
      } else {
       $a$5$lcssa = $a$3$lcssa;$d$2$lcssa = $add$ptr358;
      }
      $sub$ptr$rhs$cast428 = $a$5$lcssa;
      $sub$ptr$sub429 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast428))|0;
      $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
      $mul431 = ($sub$ptr$div430*9)|0;
      $56 = HEAP32[$a$5$lcssa>>2]|0;
      $cmp433465 = ($56>>>0)<(10);
      if ($cmp433465) {
       $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $mul431;
      } else {
       $e$2467 = $mul431;$i$2466 = 10;
       while(1) {
        $mul437 = ($i$2466*10)|0;
        $inc438 = (($e$2467) + 1)|0;
        $cmp433 = ($56>>>0)<($mul437>>>0);
        if ($cmp433) {
         $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $inc438;
         break;
        } else {
         $e$2467 = $inc438;$i$2466 = $mul437;
        }
       }
      }
     } else {
      $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
     }
    }
    $add$ptr442 = ((($d$4)) + 4|0);
    $cmp443 = ($z$4$lcssa>>>0)>($add$ptr442>>>0);
    $spec$select401 = $cmp443 ? $add$ptr442 : $z$4$lcssa;
    $a$9 = $a$8;$e$5 = $e$4;$z$8 = $spec$select401;
   } else {
    $a$9 = $a$3$lcssa;$e$5 = $e$1;$z$8 = $z$4$lcssa;
   }
   $sub626 = (0 - ($e$5))|0;
   $cmp450458 = ($z$8>>>0)>($a$9>>>0);
   L109: do {
    if ($cmp450458) {
     $z$9459 = $z$8;
     while(1) {
      $arrayidx453 = ((($z$9459)) + -4|0);
      $57 = HEAP32[$arrayidx453>>2]|0;
      $tobool454 = ($57|0)==(0);
      if (!($tobool454)) {
       $cmp450$lcssa = 1;$z$9$lcssa = $z$9459;
       break L109;
      }
      $cmp450 = ($arrayidx453>>>0)>($a$9>>>0);
      if ($cmp450) {
       $z$9459 = $arrayidx453;
      } else {
       $cmp450$lcssa = 0;$z$9$lcssa = $arrayidx453;
       break;
      }
     }
    } else {
     $cmp450$lcssa = 0;$z$9$lcssa = $z$8;
    }
   } while(0);
   do {
    if ($cmp338) {
     $not$tobool341 = $tobool341 ^ 1;
     $inc468 = $not$tobool341&1;
     $spec$select402 = (($spec$select395) + ($inc468))|0;
     $cmp470 = ($spec$select402|0)>($e$5|0);
     $cmp473 = ($e$5|0)>(-5);
     $or$cond2 = $cmp470 & $cmp473;
     if ($or$cond2) {
      $dec476 = (($t) + -1)|0;
      $add477$neg = (($spec$select402) + -1)|0;
      $sub478 = (($add477$neg) - ($e$5))|0;
      $p$addr$2 = $sub478;$t$addr$0 = $dec476;
     } else {
      $sub480 = (($t) + -2)|0;
      $dec481 = (($spec$select402) + -1)|0;
      $p$addr$2 = $dec481;$t$addr$0 = $sub480;
     }
     $and483 = $fl & 8;
     $tobool484 = ($and483|0)==(0);
     if ($tobool484) {
      if ($cmp450$lcssa) {
       $arrayidx489 = ((($z$9$lcssa)) + -4|0);
       $58 = HEAP32[$arrayidx489>>2]|0;
       $tobool490 = ($58|0)==(0);
       if ($tobool490) {
        $j$2 = 9;
       } else {
        $rem494453 = (($58>>>0) % 10)&-1;
        $cmp495454 = ($rem494453|0)==(0);
        if ($cmp495454) {
         $i$3455 = 10;$j$1456 = 0;
         while(1) {
          $mul499 = ($i$3455*10)|0;
          $inc500 = (($j$1456) + 1)|0;
          $rem494 = (($58>>>0) % ($mul499>>>0))&-1;
          $cmp495 = ($rem494|0)==(0);
          if ($cmp495) {
           $i$3455 = $mul499;$j$1456 = $inc500;
          } else {
           $j$2 = $inc500;
           break;
          }
         }
        } else {
         $j$2 = 0;
        }
       }
      } else {
       $j$2 = 9;
      }
      $or504 = $t$addr$0 | 32;
      $cmp505 = ($or504|0)==(102);
      $sub$ptr$lhs$cast508 = $z$9$lcssa;
      $sub$ptr$sub510 = (($sub$ptr$lhs$cast508) - ($sub$ptr$rhs$cast345))|0;
      $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
      $59 = ($sub$ptr$div511*9)|0;
      $mul513 = (($59) + -9)|0;
      if ($cmp505) {
       $sub514 = (($mul513) - ($j$2))|0;
       $60 = ($sub514|0)>(0);
       $spec$select403 = $60 ? $sub514 : 0;
       $cmp528 = ($p$addr$2|0)<($spec$select403|0);
       $spec$select413 = $cmp528 ? $p$addr$2 : $spec$select403;
       $p$addr$3 = $spec$select413;$t$addr$1 = $t$addr$0;
       break;
      } else {
       $add561 = (($mul513) + ($e$5))|0;
       $sub562 = (($add561) - ($j$2))|0;
       $61 = ($sub562|0)>(0);
       $spec$select405 = $61 ? $sub562 : 0;
       $cmp577 = ($p$addr$2|0)<($spec$select405|0);
       $spec$select414 = $cmp577 ? $p$addr$2 : $spec$select405;
       $p$addr$3 = $spec$select414;$t$addr$1 = $t$addr$0;
       break;
      }
     } else {
      $p$addr$3 = $p$addr$2;$t$addr$1 = $t$addr$0;
     }
    } else {
     $p$addr$3 = $spec$select395;$t$addr$1 = $t;
    }
   } while(0);
   $tobool609 = ($p$addr$3|0)!=(0);
   $and610 = $fl >>> 3;
   $and610$lobit = $and610 & 1;
   $62 = $tobool609 ? 1 : $and610$lobit;
   $or613 = $t$addr$1 | 32;
   $cmp614 = ($or613|0)==(102);
   if ($cmp614) {
    $cmp617 = ($e$5|0)>(0);
    $add620 = $cmp617 ? $e$5 : 0;
    $estr$2 = 0;$sub$ptr$sub650$pn = $add620;
   } else {
    $cmp623 = ($e$5|0)<(0);
    $cond629 = $cmp623 ? $sub626 : $e$5;
    $63 = ($cond629|0)<(0);
    $64 = $63 << 31 >> 31;
    $65 = (_fmt_u($cond629,$64,$arrayidx)|0);
    $sub$ptr$lhs$cast633 = $arrayidx;
    $sub$ptr$rhs$cast634447 = $65;
    $sub$ptr$sub635448 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634447))|0;
    $cmp636449 = ($sub$ptr$sub635448|0)<(2);
    if ($cmp636449) {
     $estr$1450 = $65;
     while(1) {
      $incdec$ptr639 = ((($estr$1450)) + -1|0);
      HEAP8[$incdec$ptr639>>0] = 48;
      $sub$ptr$rhs$cast634 = $incdec$ptr639;
      $sub$ptr$sub635 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634))|0;
      $cmp636 = ($sub$ptr$sub635|0)<(2);
      if ($cmp636) {
       $estr$1450 = $incdec$ptr639;
      } else {
       $estr$1$lcssa = $incdec$ptr639;
       break;
      }
     }
    } else {
     $estr$1$lcssa = $65;
    }
    $66 = $e$5 >> 31;
    $67 = $66 & 2;
    $68 = (($67) + 43)|0;
    $conv644 = $68&255;
    $incdec$ptr645 = ((($estr$1$lcssa)) + -1|0);
    HEAP8[$incdec$ptr645>>0] = $conv644;
    $conv646 = $t$addr$1&255;
    $incdec$ptr647 = ((($estr$1$lcssa)) + -2|0);
    HEAP8[$incdec$ptr647>>0] = $conv646;
    $sub$ptr$rhs$cast649 = $incdec$ptr647;
    $sub$ptr$sub650 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast649))|0;
    $estr$2 = $incdec$ptr647;$sub$ptr$sub650$pn = $sub$ptr$sub650;
   }
   $add608 = (($pl$0) + 1)|0;
   $add612 = (($add608) + ($p$addr$3))|0;
   $l$1 = (($add612) + ($62))|0;
   $add653 = (($l$1) + ($sub$ptr$sub650$pn))|0;
   _pad_659($f,32,$w,$add653,$fl);
   _out($f,$prefix$0,$pl$0);
   $xor655 = $fl ^ 65536;
   _pad_659($f,48,$w,$add653,$xor655);
   if ($cmp614) {
    $cmp660 = ($a$9>>>0)>($z$0>>>0);
    $spec$select408 = $cmp660 ? $z$0 : $a$9;
    $add$ptr671 = ((($buf)) + 9|0);
    $sub$ptr$lhs$cast694 = $add$ptr671;
    $incdec$ptr689 = ((($buf)) + 8|0);
    $d$5438 = $spec$select408;
    while(1) {
     $69 = HEAP32[$d$5438>>2]|0;
     $70 = (_fmt_u($69,0,$add$ptr671)|0);
     $cmp673 = ($d$5438|0)==($spec$select408|0);
     if ($cmp673) {
      $cmp686 = ($70|0)==($add$ptr671|0);
      if ($cmp686) {
       HEAP8[$incdec$ptr689>>0] = 48;
       $s668$1 = $incdec$ptr689;
      } else {
       $s668$1 = $70;
      }
     } else {
      $cmp678435 = ($70>>>0)>($buf>>>0);
      if ($cmp678435) {
       $71 = $70;
       $72 = (($71) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($72|0))|0;
       $s668$0436 = $70;
       while(1) {
        $incdec$ptr681 = ((($s668$0436)) + -1|0);
        $cmp678 = ($incdec$ptr681>>>0)>($buf>>>0);
        if ($cmp678) {
         $s668$0436 = $incdec$ptr681;
        } else {
         $s668$1 = $incdec$ptr681;
         break;
        }
       }
      } else {
       $s668$1 = $70;
      }
     }
     $sub$ptr$rhs$cast695 = $s668$1;
     $sub$ptr$sub696 = (($sub$ptr$lhs$cast694) - ($sub$ptr$rhs$cast695))|0;
     _out($f,$s668$1,$sub$ptr$sub696);
     $incdec$ptr698 = ((($d$5438)) + 4|0);
     $cmp665 = ($incdec$ptr698>>>0)>($z$0>>>0);
     if ($cmp665) {
      break;
     } else {
      $d$5438 = $incdec$ptr698;
     }
    }
    $tobool609$not = $tobool609 ^ 1;
    $and702 = $fl & 8;
    $tobool703 = ($and702|0)==(0);
    $or$cond409 = $tobool703 & $tobool609$not;
    if (!($or$cond409)) {
     _out($f,47794,1);
    }
    $cmp707430 = ($incdec$ptr698>>>0)<($z$9$lcssa>>>0);
    $cmp710431 = ($p$addr$3|0)>(0);
    $73 = $cmp707430 & $cmp710431;
    if ($73) {
     $d$6432 = $incdec$ptr698;$p$addr$4433 = $p$addr$3;
     while(1) {
      $74 = HEAP32[$d$6432>>2]|0;
      $75 = (_fmt_u($74,0,$add$ptr671)|0);
      $cmp722427 = ($75>>>0)>($buf>>>0);
      if ($cmp722427) {
       $76 = $75;
       $77 = (($76) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($77|0))|0;
       $s715$0428 = $75;
       while(1) {
        $incdec$ptr725 = ((($s715$0428)) + -1|0);
        $cmp722 = ($incdec$ptr725>>>0)>($buf>>>0);
        if ($cmp722) {
         $s715$0428 = $incdec$ptr725;
        } else {
         $s715$0$lcssa = $incdec$ptr725;
         break;
        }
       }
      } else {
       $s715$0$lcssa = $75;
      }
      $78 = ($p$addr$4433|0)<(9);
      $cond732 = $78 ? $p$addr$4433 : 9;
      _out($f,$s715$0$lcssa,$cond732);
      $incdec$ptr734 = ((($d$6432)) + 4|0);
      $sub735 = (($p$addr$4433) + -9)|0;
      $cmp707 = ($incdec$ptr734>>>0)<($z$9$lcssa>>>0);
      $cmp710 = ($p$addr$4433|0)>(9);
      $79 = $cmp707 & $cmp710;
      if ($79) {
       $d$6432 = $incdec$ptr734;$p$addr$4433 = $sub735;
      } else {
       $p$addr$4$lcssa = $sub735;
       break;
      }
     }
    } else {
     $p$addr$4$lcssa = $p$addr$3;
    }
    $add737 = (($p$addr$4$lcssa) + 9)|0;
    _pad_659($f,48,$add737,9,0);
   } else {
    $add$ptr742 = ((($a$9)) + 4|0);
    $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $add$ptr742;
    $cmp745442 = ($a$9>>>0)<($spec$select410>>>0);
    $cmp748443 = ($p$addr$3|0)>(-1);
    $80 = $cmp745442 & $cmp748443;
    if ($80) {
     $add$ptr756 = ((($buf)) + 9|0);
     $and780 = $fl & 8;
     $tobool781 = ($and780|0)==(0);
     $sub$ptr$lhs$cast787 = $add$ptr756;
     $81 = (0 - ($sub$ptr$rhs$cast$le))|0;
     $incdec$ptr763 = ((($buf)) + 8|0);
     $d$7444 = $a$9;$p$addr$5445 = $p$addr$3;
     while(1) {
      $82 = HEAP32[$d$7444>>2]|0;
      $83 = (_fmt_u($82,0,$add$ptr756)|0);
      $cmp760 = ($83|0)==($add$ptr756|0);
      if ($cmp760) {
       HEAP8[$incdec$ptr763>>0] = 48;
       $s753$0 = $incdec$ptr763;
      } else {
       $s753$0 = $83;
      }
      $cmp765 = ($d$7444|0)==($a$9|0);
      do {
       if ($cmp765) {
        $incdec$ptr776 = ((($s753$0)) + 1|0);
        _out($f,$s753$0,1);
        $cmp777 = ($p$addr$5445|0)<(1);
        $or$cond411 = $tobool781 & $cmp777;
        if ($or$cond411) {
         $s753$2 = $incdec$ptr776;
         break;
        }
        _out($f,47794,1);
        $s753$2 = $incdec$ptr776;
       } else {
        $cmp770439 = ($s753$0>>>0)>($buf>>>0);
        if (!($cmp770439)) {
         $s753$2 = $s753$0;
         break;
        }
        $scevgep513 = (($s753$0) + ($81)|0);
        $scevgep513514 = $scevgep513;
        _memset(($buf|0),48,($scevgep513514|0))|0;
        $s753$1440 = $s753$0;
        while(1) {
         $incdec$ptr773 = ((($s753$1440)) + -1|0);
         $cmp770 = ($incdec$ptr773>>>0)>($buf>>>0);
         if ($cmp770) {
          $s753$1440 = $incdec$ptr773;
         } else {
          $s753$2 = $incdec$ptr773;
          break;
         }
        }
       }
      } while(0);
      $sub$ptr$rhs$cast788 = $s753$2;
      $sub$ptr$sub789 = (($sub$ptr$lhs$cast787) - ($sub$ptr$rhs$cast788))|0;
      $cmp790 = ($p$addr$5445|0)>($sub$ptr$sub789|0);
      $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5445;
      _out($f,$s753$2,$cond800);
      $sub806 = (($p$addr$5445) - ($sub$ptr$sub789))|0;
      $incdec$ptr808 = ((($d$7444)) + 4|0);
      $cmp745 = ($incdec$ptr808>>>0)<($spec$select410>>>0);
      $cmp748 = ($sub806|0)>(-1);
      $84 = $cmp745 & $cmp748;
      if ($84) {
       $d$7444 = $incdec$ptr808;$p$addr$5445 = $sub806;
      } else {
       $p$addr$5$lcssa = $sub806;
       break;
      }
     }
    } else {
     $p$addr$5$lcssa = $p$addr$3;
    }
    $add810 = (($p$addr$5$lcssa) + 18)|0;
    _pad_659($f,48,$add810,18,0);
    $sub$ptr$lhs$cast811 = $arrayidx;
    $sub$ptr$rhs$cast812 = $estr$2;
    $sub$ptr$sub813 = (($sub$ptr$lhs$cast811) - ($sub$ptr$rhs$cast812))|0;
    _out($f,$estr$2,$sub$ptr$sub813);
   }
   $xor816 = $fl ^ 8192;
   _pad_659($f,32,$w,$add653,$xor816);
   $add653$sink524 = $add653;
  }
 } while(0);
 $cmp818 = ($add653$sink524|0)<($w|0);
 $w$add653 = $cmp818 ? $w : $add653$sink524;
 STACKTOP = sp;return ($w$add653|0);
}
function _pop_arg_long_double($arg,$ap) {
 $arg = $arg|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 8|0);
 $expanded1 = $1;
 $expanded = (($expanded1) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 8|0);
 $expanded5 = $3;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $4 = $2 & $expanded3;
 $5 = $4;
 $6 = +HEAPF64[$5>>3];
 $arglist_next = ((($5)) + 8|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAPF64[$arg>>3] = $6;
 return;
}
function ___vfprintf_internal($f,$fmt,$ap,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $and11 = 0, $and36 = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call21 = 0, $call2133 = 0, $call6 = 0, $cmp = 0;
 var $cmp5 = 0, $cmp7 = 0, $cond = 0, $internal_buf = 0, $lock = 0, $mode = 0, $nl_arg = 0, $nl_type = 0, $or = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $spec$select32 = 0, $tobool = 0, $tobool22 = 0, $tobool26 = 0, $tobool37 = 0, $tobool41 = 0, $vacopy_currentptr = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 208|0;
 $nl_type = sp + 160|0;
 $nl_arg = sp + 80|0;
 $internal_buf = sp;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $lock = ((($f)) + 76|0);
  $0 = HEAP32[$lock>>2]|0;
  $cmp5 = ($0|0)>(-1);
  if ($cmp5) {
   $call6 = (___lockfile($f)|0);
   $cond = $call6;
  } else {
   $cond = 0;
  }
  $1 = HEAP32[$f>>2]|0;
  $and = $1 & 32;
  $mode = ((($f)) + 74|0);
  $2 = HEAP8[$mode>>0]|0;
  $cmp7 = ($2<<24>>24)<(1);
  if ($cmp7) {
   $and11 = $1 & -33;
   HEAP32[$f>>2] = $and11;
  }
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $tobool = ($3|0)==(0);
  if ($tobool) {
   $buf = ((($f)) + 44|0);
   $4 = HEAP32[$buf>>2]|0;
   HEAP32[$buf>>2] = $internal_buf;
   $wbase = ((($f)) + 28|0);
   HEAP32[$wbase>>2] = $internal_buf;
   $wpos = ((($f)) + 20|0);
   HEAP32[$wpos>>2] = $internal_buf;
   HEAP32[$buf_size>>2] = 80;
   $add$ptr = ((($internal_buf)) + 80|0);
   $wend = ((($f)) + 16|0);
   HEAP32[$wend>>2] = $add$ptr;
   $call21 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $tobool22 = ($4|0)==(0|0);
   if ($tobool22) {
    $ret$1 = $call21;
   } else {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    (FUNCTION_TABLE_iiii[$5 & 15]($f,0,0)|0);
    $6 = HEAP32[$wpos>>2]|0;
    $tobool26 = ($6|0)==(0|0);
    $spec$select = $tobool26 ? -1 : $call21;
    HEAP32[$buf>>2] = $4;
    HEAP32[$buf_size>>2] = 0;
    HEAP32[$wend>>2] = 0;
    HEAP32[$wbase>>2] = 0;
    HEAP32[$wpos>>2] = 0;
    $ret$1 = $spec$select;
   }
  } else {
   $call2133 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $ret$1 = $call2133;
  }
  $7 = HEAP32[$f>>2]|0;
  $and36 = $7 & 32;
  $tobool37 = ($and36|0)==(0);
  $spec$select32 = $tobool37 ? $ret$1 : -1;
  $or = $7 | $and;
  HEAP32[$f>>2] = $or;
  $tobool41 = ($cond|0)==(0);
  if (!($tobool41)) {
   ___unlockfile($f);
  }
  $retval$0 = $spec$select32;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $$ = 0, $$lcssa213 = 0, $$pre = 0, $$pre261 = 0, $$pre262 = 0, $$pre263 = 0, $$pre263$pre = 0, $$pre264 = 0, $$pre267 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr258 = 0, $add$ptr341 = 0, $add$ptr354 = 0, $add$ptr468 = 0, $add$ptr88 = 0, $add270 = 0, $add323 = 0, $add390 = 0, $add407 = 0, $add436 = 0, $and = 0, $and211 = 0, $and215 = 0, $and217 = 0, $and220 = 0;
 var $and233 = 0, $and250 = 0, $and255 = 0, $and264 = 0, $and290 = 0, $and295 = 0, $and310 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx174 = 0;
 var $arrayidx193 = 0, $arrayidx207 = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx365 = 0, $arrayidx40 = 0, $arrayidx464 = 0, $arrayidx476 = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx78 = 0, $arrayidx81 = 0, $brmerge = 0, $brmerge235 = 0, $buf = 0, $call = 0, $call104 = 0, $call121 = 0, $call160 = 0, $call33 = 0;
 var $call351 = 0, $call379 = 0, $call406 = 0, $call424 = 0, $call70 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp126 = 0, $cmp13 = 0, $cmp166 = 0, $cmp177 = 0, $cmp18 = 0, $cmp182 = 0, $cmp185 = 0, $cmp212 = 0, $cmp241 = 0, $cmp271 = 0;
 var $cmp307 = 0, $cmp324 = 0, $cmp37 = 0, $cmp372 = 0, $cmp372242 = 0, $cmp380 = 0, $cmp385 = 0, $cmp399 = 0, $cmp399247 = 0, $cmp408 = 0, $cmp416 = 0, $cmp429 = 0, $cmp437 = 0, $cmp461 = 0, $cmp473 = 0, $cmp50 = 0, $cmp50231 = 0, $cmp65 = 0, $cmp75 = 0, $cmp97 = 0;
 var $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond246 = 0, $cond350 = 0, $cond421 = 0, $conv120 = 0, $conv130 = 0, $conv134 = 0, $conv164 = 0, $conv172 = 0, $conv175 = 0, $conv208 = 0, $conv230 = 0, $conv233 = 0, $conv32 = 0, $conv41 = 0, $conv48 = 0;
 var $conv48229 = 0, $conv69 = 0, $conv79 = 0, $conv83 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0;
 var $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $i137 = 0, $i86 = 0, $inc = 0, $inc483 = 0, $incdec$ptr = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr378 = 0, $incdec$ptr405 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $incdec$ptr93 = 0, $l$0 = 0, $l$0$ph = 0;
 var $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot = 0, $lnot$ext = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0, $or100 = 0, $or247 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add323 = 0, $p$3 = 0;
 var $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $shl = 0, $shl232 = 0, $shl60 = 0, $shr199 = 0, $spec$select = 0, $spec$select193 = 0, $spec$select195 = 0, $spec$select200 = 0, $spec$select201 = 0, $spec$select202 = 0;
 var $spec$select203 = 0, $spec$select204 = 0, $spec$select205 = 0, $spec$select206 = 0, $spec$select207 = 0, $spec$select208 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast356 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast268 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast357 = 0, $sub$ptr$rhs$cast427 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub358 = 0, $sub$ptr$sub428 = 0, $sub101 = 0, $sub131 = 0, $sub135 = 0, $sub165 = 0, $sub173 = 0, $sub176 = 0, $sub384 = 0, $sub42 = 0, $sub49 = 0, $sub49230 = 0, $sub49238 = 0, $sub80 = 0, $sub84 = 0, $t$0 = 0, $t$1 = 0;
 var $tobool = 0, $tobool122 = 0, $tobool141 = 0, $tobool179 = 0, $tobool209 = 0, $tobool218 = 0, $tobool25 = 0, $tobool256 = 0, $tobool265 = 0, $tobool28 = 0, $tobool291 = 0, $tobool296 = 0, $tobool315 = 0, $tobool34 = 0, $tobool345 = 0, $tobool352 = 0, $tobool375 = 0, $tobool402 = 0, $tobool454 = 0, $tobool457 = 0;
 var $tobool465 = 0, $tobool477 = 0, $tobool55 = 0, $tobool55234 = 0, $tobool71 = 0, $tobool90 = 0, $trunc = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $xor = 0, $xor444 = 0, $xor452 = 0, $z$0$lcssa = 0, $z$0226 = 0, $z$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $s = sp + 56|0;
 $arg = sp + 40|0;
 $buf = sp;
 $wc = sp + 48|0;
 $mb = sp + 60|0;
 HEAP32[$s>>2] = $fmt;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr206 = ((($buf)) + 40|0);
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = ((($buf)) + 39|0);
 $arrayidx365 = ((($wc)) + 4|0);
 $cnt$0$ph = 0;$l$0$ph = 0;$l10n$0$ph = 0;
 L1: while(1) {
  $cnt$0 = $cnt$0$ph;$l$0 = $l$0$ph;
  while(1) {
   $cmp = ($cnt$0|0)>(-1);
   do {
    if ($cmp) {
     $sub = (2147483647 - ($cnt$0))|0;
     $cmp1 = ($l$0|0)>($sub|0);
     if ($cmp1) {
      $call = (___errno_location()|0);
      HEAP32[$call>>2] = 75;
      $cnt$1 = -1;
      break;
     } else {
      $add = (($l$0) + ($cnt$0))|0;
      $cnt$1 = $add;
      break;
     }
    } else {
     $cnt$1 = $cnt$0;
    }
   } while(0);
   $0 = HEAP32[$s>>2]|0;
   $1 = HEAP8[$0>>0]|0;
   $tobool = ($1<<24>>24)==(0);
   if ($tobool) {
    label = 92;
    break L1;
   }
   $2 = $1;$3 = $0;
   L12: while(1) {
    switch ($2<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $z$0$lcssa = $3;
     break L12;
     break;
    }
    default: {
    }
    }
    $incdec$ptr = ((($3)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr;
    $$pre = HEAP8[$incdec$ptr>>0]|0;
    $2 = $$pre;$3 = $incdec$ptr;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $4 = $3;$z$0226 = $3;
     while(1) {
      $arrayidx16 = ((($4)) + 1|0);
      $5 = HEAP8[$arrayidx16>>0]|0;
      $cmp18 = ($5<<24>>24)==(37);
      if (!($cmp18)) {
       $z$0$lcssa = $z$0226;
       break L15;
      }
      $incdec$ptr23 = ((($z$0226)) + 1|0);
      $add$ptr = ((($4)) + 2|0);
      HEAP32[$s>>2] = $add$ptr;
      $6 = HEAP8[$add$ptr>>0]|0;
      $cmp13 = ($6<<24>>24)==(37);
      if ($cmp13) {
       $4 = $add$ptr;$z$0226 = $incdec$ptr23;
      } else {
       $z$0$lcssa = $incdec$ptr23;
       break;
      }
     }
    }
   } while(0);
   $sub$ptr$lhs$cast = $z$0$lcssa;
   $sub$ptr$rhs$cast = $0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   if ($tobool25) {
    _out($f,$0,$sub$ptr$sub);
   }
   $tobool28 = ($sub$ptr$sub|0)==(0);
   if ($tobool28) {
    break;
   } else {
    $cnt$0 = $cnt$1;$l$0 = $sub$ptr$sub;
   }
  }
  $7 = HEAP32[$s>>2]|0;
  $arrayidx31 = ((($7)) + 1|0);
  $8 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $8 << 24 >> 24;
  $call33 = (_isdigit($conv32)|0);
  $tobool34 = ($call33|0)==(0);
  $$pre261 = HEAP32[$s>>2]|0;
  if ($tobool34) {
   $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
  } else {
   $arrayidx35 = ((($$pre261)) + 2|0);
   $9 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($9<<24>>24)==(36);
   if ($cmp37) {
    $arrayidx40 = ((($$pre261)) + 1|0);
    $10 = HEAP8[$arrayidx40>>0]|0;
    $conv41 = $10 << 24 >> 24;
    $sub42 = (($conv41) + -48)|0;
    $$sink = 3;$argpos$0 = $sub42;$l10n$1 = 1;
   } else {
    $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
   }
  }
  $incdec$ptr45 = (($$pre261) + ($$sink)|0);
  HEAP32[$s>>2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45>>0]|0;
  $conv48229 = $11 << 24 >> 24;
  $sub49230 = (($conv48229) + -32)|0;
  $cmp50231 = ($sub49230>>>0)>(31);
  $shl232 = 1 << $sub49230;
  $and233 = $shl232 & 75913;
  $tobool55234 = ($and233|0)==(0);
  $brmerge235 = $cmp50231 | $tobool55234;
  if ($brmerge235) {
   $$lcssa213 = $11;$fl$0$lcssa = 0;$storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;$storemerge187236 = $incdec$ptr45;$sub49238 = $sub49230;
   while(1) {
    $shl60 = 1 << $sub49238;
    $or = $shl60 | $fl$0237;
    $incdec$ptr62 = ((($storemerge187236)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62>>0]|0;
    $conv48 = $12 << 24 >> 24;
    $sub49 = (($conv48) + -32)|0;
    $cmp50 = ($sub49>>>0)>(31);
    $shl = 1 << $sub49;
    $and = $shl & 75913;
    $tobool55 = ($and|0)==(0);
    $brmerge = $cmp50 | $tobool55;
    if ($brmerge) {
     $$lcssa213 = $12;$fl$0$lcssa = $or;$storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;$storemerge187236 = $incdec$ptr62;$sub49238 = $sub49;
    }
   }
  }
  $cmp65 = ($$lcssa213<<24>>24)==(42);
  if ($cmp65) {
   $arrayidx68 = ((($storemerge187$lcssa)) + 1|0);
   $13 = HEAP8[$arrayidx68>>0]|0;
   $conv69 = $13 << 24 >> 24;
   $call70 = (_isdigit($conv69)|0);
   $tobool71 = ($call70|0)==(0);
   if ($tobool71) {
    label = 27;
   } else {
    $14 = HEAP32[$s>>2]|0;
    $arrayidx73 = ((($14)) + 2|0);
    $15 = HEAP8[$arrayidx73>>0]|0;
    $cmp75 = ($15<<24>>24)==(36);
    if ($cmp75) {
     $arrayidx78 = ((($14)) + 1|0);
     $16 = HEAP8[$arrayidx78>>0]|0;
     $conv79 = $16 << 24 >> 24;
     $sub80 = (($conv79) + -48)|0;
     $arrayidx81 = (($nl_type) + ($sub80<<2)|0);
     HEAP32[$arrayidx81>>2] = 10;
     $17 = HEAP8[$arrayidx78>>0]|0;
     $conv83 = $17 << 24 >> 24;
     $sub84 = (($conv83) + -48)|0;
     $i86 = (($nl_arg) + ($sub84<<3)|0);
     $18 = $i86;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $add$ptr88 = ((($14)) + 3|0);
     $l10n$2 = 1;$storemerge188 = $add$ptr88;$w$0 = $20;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $tobool90 = ($l10n$1|0)==(0);
    if (!($tobool90)) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $arglist_current = HEAP32[$ap>>2]|0;
     $24 = $arglist_current;
     $25 = ((0) + 4|0);
     $expanded4 = $25;
     $expanded = (($expanded4) - 1)|0;
     $26 = (($24) + ($expanded))|0;
     $27 = ((0) + 4|0);
     $expanded8 = $27;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $28 = $26 & $expanded6;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next = ((($29)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $cond = $30;
    } else {
     $cond = 0;
    }
    $31 = HEAP32[$s>>2]|0;
    $incdec$ptr93 = ((($31)) + 1|0);
    $l10n$2 = 0;$storemerge188 = $incdec$ptr93;$w$0 = $cond;
   }
   HEAP32[$s>>2] = $storemerge188;
   $cmp97 = ($w$0|0)<(0);
   $or100 = $fl$0$lcssa | 8192;
   $sub101 = (0 - ($w$0))|0;
   $spec$select200 = $cmp97 ? $or100 : $fl$0$lcssa;
   $spec$select201 = $cmp97 ? $sub101 : $w$0;
   $33 = $storemerge188;$fl$1 = $spec$select200;$l10n$3 = $l10n$2;$w$1 = $spec$select201;
  } else {
   $call104 = (_getint($s)|0);
   $cmp105 = ($call104|0)<(0);
   if ($cmp105) {
    $retval$0 = -1;
    break;
   }
   $$pre262 = HEAP32[$s>>2]|0;
   $33 = $$pre262;$fl$1 = $fl$0$lcssa;$l10n$3 = $l10n$1;$w$1 = $call104;
  }
  $32 = HEAP8[$33>>0]|0;
  $cmp111 = ($32<<24>>24)==(46);
  do {
   if ($cmp111) {
    $arrayidx114 = ((($33)) + 1|0);
    $34 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($34<<24>>24)==(42);
    if (!($cmp116)) {
     HEAP32[$s>>2] = $arrayidx114;
     $call160 = (_getint($s)|0);
     $$pre263$pre = HEAP32[$s>>2]|0;
     $$pre263 = $$pre263$pre;$p$0 = $call160;
     break;
    }
    $arrayidx119 = ((($33)) + 2|0);
    $35 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $35 << 24 >> 24;
    $call121 = (_isdigit($conv120)|0);
    $tobool122 = ($call121|0)==(0);
    if (!($tobool122)) {
     $36 = HEAP32[$s>>2]|0;
     $arrayidx124 = ((($36)) + 3|0);
     $37 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($37<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx129 = ((($36)) + 2|0);
      $38 = HEAP8[$arrayidx129>>0]|0;
      $conv130 = $38 << 24 >> 24;
      $sub131 = (($conv130) + -48)|0;
      $arrayidx132 = (($nl_type) + ($sub131<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $39 = HEAP8[$arrayidx129>>0]|0;
      $conv134 = $39 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $40 = $i137;
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + 4)|0;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $add$ptr139 = ((($36)) + 4|0);
      HEAP32[$s>>2] = $add$ptr139;
      $$pre263 = $add$ptr139;$p$0 = $42;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $46 = $arglist_current2;
     $47 = ((0) + 4|0);
     $expanded11 = $47;
     $expanded10 = (($expanded11) - 1)|0;
     $48 = (($46) + ($expanded10))|0;
     $49 = ((0) + 4|0);
     $expanded15 = $49;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $50 = $48 & $expanded13;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $arglist_next3 = ((($51)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $cond149 = $52;
    } else {
     $cond149 = 0;
    }
    $53 = HEAP32[$s>>2]|0;
    $add$ptr150 = ((($53)) + 2|0);
    HEAP32[$s>>2] = $add$ptr150;
    $$pre263 = $add$ptr150;$p$0 = $cond149;
   } else {
    $$pre263 = $33;$p$0 = -1;
   }
  } while(0);
  $55 = $$pre263;$st$0 = 0;
  while(1) {
   $54 = HEAP8[$55>>0]|0;
   $conv164 = $54 << 24 >> 24;
   $sub165 = (($conv164) + -65)|0;
   $cmp166 = ($sub165>>>0)>(57);
   if ($cmp166) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = ((($55)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr171;
   $56 = HEAP8[$55>>0]|0;
   $conv172 = $56 << 24 >> 24;
   $sub173 = (($conv172) + -65)|0;
   $arrayidx174 = ((42000 + (($st$0*58)|0)|0) + ($sub173)|0);
   $57 = HEAP8[$arrayidx174>>0]|0;
   $conv175 = $57&255;
   $sub176 = (($conv175) + -1)|0;
   $cmp177 = ($sub176>>>0)<(8);
   if ($cmp177) {
    $55 = $incdec$ptr171;$st$0 = $conv175;
   } else {
    break;
   }
  }
  $tobool179 = ($57<<24>>24)==(0);
  if ($tobool179) {
   $retval$0 = -1;
   break;
  }
  $cmp182 = ($57<<24>>24)==(19);
  $cmp185 = ($argpos$0|0)>(-1);
  do {
   if ($cmp182) {
    if ($cmp185) {
     $retval$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($cmp185) {
     $arrayidx193 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx193>>2] = $conv175;
     $58 = (($nl_arg) + ($argpos$0<<3)|0);
     $59 = $58;
     $60 = $59;
     $61 = HEAP32[$60>>2]|0;
     $62 = (($59) + 4)|0;
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = $arg;
     $66 = $65;
     HEAP32[$66>>2] = $61;
     $67 = (($65) + 4)|0;
     $68 = $67;
     HEAP32[$68>>2] = $64;
     label = 54;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     break L1;
    }
    _pop_arg($arg,$conv175,$ap,$pop_arg_long_double);
    $$pre264 = HEAP32[$s>>2]|0;
    $69 = $$pre264;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $incdec$ptr171;
    label = 55;
   } else {
    $l$0$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $arrayidx207 = ((($69)) + -1|0);
    $70 = HEAP8[$arrayidx207>>0]|0;
    $conv208 = $70 << 24 >> 24;
    $tobool209 = ($st$0|0)!=(0);
    $and211 = $conv208 & 15;
    $cmp212 = ($and211|0)==(3);
    $or$cond189 = $tobool209 & $cmp212;
    $and215 = $conv208 & -33;
    $t$0 = $or$cond189 ? $and215 : $conv208;
    $and217 = $fl$1 & 8192;
    $tobool218 = ($and217|0)==(0);
    $and220 = $fl$1 & -65537;
    $spec$select = $tobool218 ? $fl$1 : $and220;
    L79: do {
     switch ($t$0|0) {
     case 110:  {
      $trunc = $st$0&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $77 = HEAP32[$arg>>2]|0;
       HEAP32[$77>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $78 = HEAP32[$arg>>2]|0;
       HEAP32[$78>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $79 = ($cnt$1|0)<(0);
       $80 = $79 << 31 >> 31;
       $81 = HEAP32[$arg>>2]|0;
       $82 = $81;
       $83 = $82;
       HEAP32[$83>>2] = $cnt$1;
       $84 = (($82) + 4)|0;
       $85 = $84;
       HEAP32[$85>>2] = $80;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $conv230 = $cnt$1&65535;
       $86 = HEAP32[$arg>>2]|0;
       HEAP16[$86>>1] = $conv230;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $conv233 = $cnt$1&255;
       $87 = HEAP32[$arg>>2]|0;
       HEAP8[$87>>0] = $conv233;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $88 = HEAP32[$arg>>2]|0;
       HEAP32[$88>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $89 = ($cnt$1|0)<(0);
       $90 = $89 << 31 >> 31;
       $91 = HEAP32[$arg>>2]|0;
       $92 = $91;
       $93 = $92;
       HEAP32[$93>>2] = $cnt$1;
       $94 = (($92) + 4)|0;
       $95 = $94;
       HEAP32[$95>>2] = $90;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $l$0$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $cmp241 = ($p$0>>>0)>(8);
      $cond246 = $cmp241 ? $p$0 : 8;
      $or247 = $spec$select | 8;
      $fl$3 = $or247;$p$1 = $cond246;$t$1 = 120;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $spec$select;$p$1 = $p$0;$t$1 = $t$0;
      label = 67;
      break;
     }
     case 111:  {
      $112 = $arg;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($112) + 4)|0;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (_fmt_o($114,$117,$add$ptr206)|0);
      $and264 = $spec$select & 8;
      $tobool265 = ($and264|0)==(0);
      $sub$ptr$rhs$cast268 = $118;
      $sub$ptr$sub269 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast268))|0;
      $cmp271 = ($p$0|0)>($sub$ptr$sub269|0);
      $add270 = (($sub$ptr$sub269) + 1)|0;
      $119 = $tobool265 | $cmp271;
      $spec$select204 = $119 ? $p$0 : $add270;
      $a$0 = $118;$fl$4 = $spec$select;$p$2 = $spec$select204;$pl$1 = 0;$prefix$1 = 47742;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $120 = $arg;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)<(0);
      if ($126) {
       $127 = (_i64Subtract(0,0,($122|0),($125|0))|0);
       $128 = (getTempRet0() | 0);
       $129 = $arg;
       $130 = $129;
       HEAP32[$130>>2] = $127;
       $131 = (($129) + 4)|0;
       $132 = $131;
       HEAP32[$132>>2] = $128;
       $135 = $127;$136 = $128;$pl$0 = 1;$prefix$0 = 47742;
       label = 72;
       break L79;
      } else {
       $and290 = $spec$select & 2048;
       $tobool291 = ($and290|0)==(0);
       $and295 = $spec$select & 1;
       $tobool296 = ($and295|0)==(0);
       $$ = $tobool296 ? 47742 : (47744);
       $spec$select205 = $tobool291 ? $$ : (47743);
       $133 = $spec$select & 2049;
       $134 = ($133|0)!=(0);
       $spec$select206 = $134&1;
       $135 = $122;$136 = $125;$pl$0 = $spec$select206;$prefix$0 = $spec$select205;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $71 = $arg;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $135 = $73;$136 = $76;$pl$0 = 0;$prefix$0 = 47742;
      label = 72;
      break;
     }
     case 99:  {
      $147 = $arg;
      $148 = $147;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($147) + 4)|0;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = $149&255;
      HEAP8[$add$ptr341>>0] = $153;
      $a$1 = $add$ptr341;$fl$6 = $and220;$p$5 = 1;$pl$2 = 0;$prefix$2 = 47742;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
      break;
     }
     case 115:  {
      $154 = HEAP32[$arg>>2]|0;
      $tobool345 = ($154|0)==(0|0);
      $cond350 = $tobool345 ? 47752 : $154;
      $call351 = (_memchr($cond350,0,$p$0)|0);
      $tobool352 = ($call351|0)==(0|0);
      $sub$ptr$lhs$cast356 = $call351;
      $sub$ptr$rhs$cast357 = $cond350;
      $sub$ptr$sub358 = (($sub$ptr$lhs$cast356) - ($sub$ptr$rhs$cast357))|0;
      $add$ptr354 = (($cond350) + ($p$0)|0);
      $p$3 = $tobool352 ? $p$0 : $sub$ptr$sub358;
      $z$1 = $tobool352 ? $add$ptr354 : $call351;
      $$pre267 = $z$1;
      $a$1 = $cond350;$fl$6 = $and220;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 47742;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $$pre267;
      break;
     }
     case 67:  {
      $155 = $arg;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      HEAP32[$wc>>2] = $157;
      HEAP32[$arrayidx365>>2] = 0;
      HEAP32[$arg>>2] = $wc;
      $p$4269 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $cmp372242 = ($p$0|0)==(0);
      if ($cmp372242) {
       _pad_659($f,32,$w$1,0,$spec$select);
       $i$0217271 = 0;
       label = 89;
      } else {
       $p$4269 = $p$0;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $165 = +HEAPF64[$arg>>3];
      $call424 = (FUNCTION_TABLE_iidiiii[$fmt_fp & 1]($f,$165,$w$1,$p$0,$spec$select,$t$0)|0);
      $l$0$ph$be = $call424;
      break L77;
      break;
     }
     default: {
      $a$1 = $0;$fl$6 = $spec$select;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 47742;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $96 = $arg;
      $97 = $96;
      $98 = HEAP32[$97>>2]|0;
      $99 = (($96) + 4)|0;
      $100 = $99;
      $101 = HEAP32[$100>>2]|0;
      $and250 = $t$1 & 32;
      $102 = (_fmt_x($98,$101,$add$ptr206,$and250)|0);
      $103 = $arg;
      $104 = $103;
      $105 = HEAP32[$104>>2]|0;
      $106 = (($103) + 4)|0;
      $107 = $106;
      $108 = HEAP32[$107>>2]|0;
      $109 = ($105|0)==(0);
      $110 = ($108|0)==(0);
      $111 = $109 & $110;
      $and255 = $fl$3 & 8;
      $tobool256 = ($and255|0)==(0);
      $or$cond190 = $tobool256 | $111;
      $shr199 = $t$1 >>> 4;
      $add$ptr258 = (47742 + ($shr199)|0);
      $spec$select202 = $or$cond190 ? 47742 : $add$ptr258;
      $spec$select203 = $or$cond190 ? 0 : 2;
      $a$0 = $102;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = $spec$select203;$prefix$1 = $spec$select202;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $137 = (_fmt_u($135,$136,$add$ptr206)|0);
      $a$0 = $137;$fl$4 = $spec$select;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $161 = HEAP32[$arg>>2]|0;
      $i$0243 = 0;$ws$0244 = $161;
      while(1) {
       $162 = HEAP32[$ws$0244>>2]|0;
       $tobool375 = ($162|0)==(0);
       if ($tobool375) {
        $i$0217 = $i$0243;
        break;
       }
       $call379 = (_wctomb($mb,$162)|0);
       $cmp380 = ($call379|0)<(0);
       $sub384 = (($p$4269) - ($i$0243))|0;
       $cmp385 = ($call379>>>0)>($sub384>>>0);
       $or$cond194 = $cmp380 | $cmp385;
       if ($or$cond194) {
        label = 83;
        break;
       }
       $incdec$ptr378 = ((($ws$0244)) + 4|0);
       $add390 = (($call379) + ($i$0243))|0;
       $cmp372 = ($p$4269>>>0)>($add390>>>0);
       if ($cmp372) {
        $i$0243 = $add390;$ws$0244 = $incdec$ptr378;
       } else {
        $i$0217 = $add390;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($cmp380) {
        $retval$0 = -1;
        break L1;
       } else {
        $i$0217 = $i$0243;
       }
      }
      _pad_659($f,32,$w$1,$i$0217,$spec$select);
      $cmp399247 = ($i$0217|0)==(0);
      if ($cmp399247) {
       $i$0217271 = 0;
       label = 89;
      } else {
       $163 = HEAP32[$arg>>2]|0;
       $i$1248 = 0;$ws$1249 = $163;
       while(1) {
        $164 = HEAP32[$ws$1249>>2]|0;
        $tobool402 = ($164|0)==(0);
        if ($tobool402) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $call406 = (_wctomb($mb,$164)|0);
        $add407 = (($call406) + ($i$1248))|0;
        $cmp408 = ($add407|0)>($i$0217|0);
        if ($cmp408) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $incdec$ptr405 = ((($ws$1249)) + 4|0);
        _out($f,$mb,$call406);
        $cmp399 = ($add407>>>0)<($i$0217>>>0);
        if ($cmp399) {
         $i$1248 = $add407;$ws$1249 = $incdec$ptr405;
        } else {
         $i$0217271 = $i$0217;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $cmp307 = ($p$2|0)>(-1);
     $and310 = $fl$4 & -65537;
     $spec$select193 = $cmp307 ? $and310 : $fl$4;
     $138 = $arg;
     $139 = $138;
     $140 = HEAP32[$139>>2]|0;
     $141 = (($138) + 4)|0;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)!=(0);
     $145 = ($143|0)!=(0);
     $146 = $144 | $145;
     $tobool315 = ($p$2|0)!=(0);
     $or$cond = $tobool315 | $146;
     $sub$ptr$rhs$cast319 = $a$0;
     $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
     $lnot = $146 ^ 1;
     $lnot$ext = $lnot&1;
     $add323 = (($sub$ptr$sub320) + ($lnot$ext))|0;
     $cmp324 = ($p$2|0)>($add323|0);
     $p$2$add323 = $cmp324 ? $p$2 : $add323;
     $spec$select207 = $or$cond ? $p$2$add323 : 0;
     $spec$select208 = $or$cond ? $a$0 : $add$ptr206;
     $a$1 = $spec$select208;$fl$6 = $spec$select193;$p$5 = $spec$select207;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
    else if ((label|0) == 89) {
     label = 0;
     $xor = $spec$select ^ 8192;
     _pad_659($f,32,$w$1,$i$0217271,$xor);
     $cmp416 = ($w$1|0)>($i$0217271|0);
     $cond421 = $cmp416 ? $w$1 : $i$0217271;
     $l$0$ph$be = $cond421;
     break;
    }
    $sub$ptr$rhs$cast427 = $a$1;
    $sub$ptr$sub428 = (($sub$ptr$lhs$cast426$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast427))|0;
    $cmp429 = ($p$5|0)<($sub$ptr$sub428|0);
    $spec$select195 = $cmp429 ? $sub$ptr$sub428 : $p$5;
    $add436 = (($spec$select195) + ($pl$2))|0;
    $cmp437 = ($w$1|0)<($add436|0);
    $w$2 = $cmp437 ? $add436 : $w$1;
    _pad_659($f,32,$w$2,$add436,$fl$6);
    _out($f,$prefix$2,$pl$2);
    $xor444 = $fl$6 ^ 65536;
    _pad_659($f,48,$w$2,$add436,$xor444);
    _pad_659($f,48,$spec$select195,$sub$ptr$sub428,0);
    _out($f,$a$1,$sub$ptr$sub428);
    $xor452 = $fl$6 ^ 8192;
    _pad_659($f,32,$w$2,$add436,$xor452);
    $l$0$ph$be = $w$2;
   }
  } while(0);
  $cnt$0$ph = $cnt$1;$l$0$ph = $l$0$ph$be;$l10n$0$ph = $l10n$3;
 }
 L123: do {
  if ((label|0) == 92) {
   $tobool454 = ($f|0)==(0|0);
   if ($tobool454) {
    $tobool457 = ($l10n$0$ph|0)==(0);
    if ($tobool457) {
     $retval$0 = 0;
    } else {
     $i$2224 = 1;
     while(1) {
      $arrayidx464 = (($nl_type) + ($i$2224<<2)|0);
      $166 = HEAP32[$arrayidx464>>2]|0;
      $tobool465 = ($166|0)==(0);
      if ($tobool465) {
       break;
      }
      $add$ptr468 = (($nl_arg) + ($i$2224<<3)|0);
      _pop_arg($add$ptr468,$166,$ap,$pop_arg_long_double);
      $inc = (($i$2224) + 1)|0;
      $cmp461 = ($inc>>>0)<(10);
      if ($cmp461) {
       $i$2224 = $inc;
      } else {
       $retval$0 = 1;
       break L123;
      }
     }
     $i$3221 = $i$2224;
     while(1) {
      $arrayidx476 = (($nl_type) + ($i$3221<<2)|0);
      $167 = HEAP32[$arrayidx476>>2]|0;
      $tobool477 = ($167|0)==(0);
      $inc483 = (($i$3221) + 1)|0;
      if (!($tobool477)) {
       $retval$0 = -1;
       break L123;
      }
      $cmp473 = ($inc483>>>0)<(10);
      if ($cmp473) {
       $i$3221 = $inc483;
      } else {
       $retval$0 = 1;
       break;
      }
     }
    }
   } else {
    $retval$0 = $cnt$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $and = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 32;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  (___fwritex($s,$l,$f)|0);
 }
 return;
}
function _getint($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $call = 0, $call5 = 0, $conv = 0, $conv1 = 0, $conv4 = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0, $mul = 0, $sub = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $conv4 = $1 << 24 >> 24;
 $call5 = (_isdigit($conv4)|0);
 $tobool6 = ($call5|0)==(0);
 if ($tobool6) {
  $i$0$lcssa = 0;
 } else {
  $i$07 = 0;
  while(1) {
   $mul = ($i$07*10)|0;
   $2 = HEAP32[$s>>2]|0;
   $3 = HEAP8[$2>>0]|0;
   $conv1 = $3 << 24 >> 24;
   $sub = (($mul) + -48)|0;
   $add = (($sub) + ($conv1))|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $4 = HEAP8[$incdec$ptr>>0]|0;
   $conv = $4 << 24 >> 24;
   $call = (_isdigit($conv)|0);
   $tobool = ($call|0)==(0);
   if ($tobool) {
    $i$0$lcssa = $add;
    break;
   } else {
    $i$07 = $add;
   }
  }
 }
 return ($i$0$lcssa|0);
}
function _pop_arg($arg,$type,$ap,$pop_arg_long_double) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0;
 var $arglist_next6 = 0, $arglist_next9 = 0, $cmp = 0, $conv16 = 0, $conv22$mask = 0, $conv28 = 0, $conv34$mask = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($type>>>0)>(20);
 L1: do {
  if (!($cmp)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $0 = $arglist_current;
     $1 = ((0) + 4|0);
     $expanded25 = $1;
     $expanded = (($expanded25) - 1)|0;
     $2 = (($0) + ($expanded))|0;
     $3 = ((0) + 4|0);
     $expanded29 = $3;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $4 = $2 & $expanded27;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $arglist_next = ((($5)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $6;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $7 = $arglist_current2;
     $8 = ((0) + 4|0);
     $expanded32 = $8;
     $expanded31 = (($expanded32) - 1)|0;
     $9 = (($7) + ($expanded31))|0;
     $10 = ((0) + 4|0);
     $expanded36 = $10;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $11 = $9 & $expanded34;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $arglist_next3 = ((($12)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $14 = ($13|0)<(0);
     $15 = $14 << 31 >> 31;
     $16 = $arg;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = (($16) + 4)|0;
     $19 = $18;
     HEAP32[$19>>2] = $15;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $20 = $arglist_current5;
     $21 = ((0) + 4|0);
     $expanded39 = $21;
     $expanded38 = (($expanded39) - 1)|0;
     $22 = (($20) + ($expanded38))|0;
     $23 = ((0) + 4|0);
     $expanded43 = $23;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $24 = $22 & $expanded41;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $arglist_next6 = ((($25)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $27 = $arg;
     $28 = $27;
     HEAP32[$28>>2] = $26;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $31 = $arglist_current8;
     $32 = ((0) + 8|0);
     $expanded46 = $32;
     $expanded45 = (($expanded46) - 1)|0;
     $33 = (($31) + ($expanded45))|0;
     $34 = ((0) + 8|0);
     $expanded50 = $34;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $35 = $33 & $expanded48;
     $36 = $35;
     $37 = $36;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $arglist_next9 = ((($36)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $43 = $arg;
     $44 = $43;
     HEAP32[$44>>2] = $39;
     $45 = (($43) + 4)|0;
     $46 = $45;
     HEAP32[$46>>2] = $42;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $47 = $arglist_current11;
     $48 = ((0) + 4|0);
     $expanded53 = $48;
     $expanded52 = (($expanded53) - 1)|0;
     $49 = (($47) + ($expanded52))|0;
     $50 = ((0) + 4|0);
     $expanded57 = $50;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $51 = $49 & $expanded55;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $arglist_next12 = ((($52)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $conv16 = $53&65535;
     $54 = $conv16 << 16 >> 16;
     $55 = ($54|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = $arg;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $61 = $arglist_current14;
     $62 = ((0) + 4|0);
     $expanded60 = $62;
     $expanded59 = (($expanded60) - 1)|0;
     $63 = (($61) + ($expanded59))|0;
     $64 = ((0) + 4|0);
     $expanded64 = $64;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $65 = $63 & $expanded62;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $arglist_next15 = ((($66)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $conv22$mask = $67 & 65535;
     $68 = $arg;
     $69 = $68;
     HEAP32[$69>>2] = $conv22$mask;
     $70 = (($68) + 4)|0;
     $71 = $70;
     HEAP32[$71>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $72 = $arglist_current17;
     $73 = ((0) + 4|0);
     $expanded67 = $73;
     $expanded66 = (($expanded67) - 1)|0;
     $74 = (($72) + ($expanded66))|0;
     $75 = ((0) + 4|0);
     $expanded71 = $75;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $76 = $74 & $expanded69;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $arglist_next18 = ((($77)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $conv28 = $78&255;
     $79 = $conv28 << 24 >> 24;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = $arg;
     $83 = $82;
     HEAP32[$83>>2] = $79;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $86 = $arglist_current20;
     $87 = ((0) + 4|0);
     $expanded74 = $87;
     $expanded73 = (($expanded74) - 1)|0;
     $88 = (($86) + ($expanded73))|0;
     $89 = ((0) + 4|0);
     $expanded78 = $89;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $90 = $88 & $expanded76;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next21 = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $conv34$mask = $92 & 255;
     $93 = $arg;
     $94 = $93;
     HEAP32[$94>>2] = $conv34$mask;
     $95 = (($93) + 4)|0;
     $96 = $95;
     HEAP32[$96>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $97 = $arglist_current23;
     $98 = ((0) + 8|0);
     $expanded81 = $98;
     $expanded80 = (($expanded81) - 1)|0;
     $99 = (($97) + ($expanded80))|0;
     $100 = ((0) + 8|0);
     $expanded85 = $100;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $101 = $99 & $expanded83;
     $102 = $101;
     $103 = +HEAPF64[$102>>3];
     $arglist_next24 = ((($102)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $103;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$pop_arg_long_double & 31]($arg,$ap);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$s,$lower) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 $lower = $lower|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $conv1 = 0, $conv4 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $5 = $0;$7 = $1;$s$addr$06 = $s;
  while(1) {
   $idxprom = $5 & 15;
   $arrayidx = (42464 + ($idxprom)|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv4 = $6&255;
   $or = $conv4 | $lower;
   $conv1 = $or&255;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv1;
   $8 = (_bitshift64Lshr(($5|0),($7|0),4)|0);
   $9 = (getTempRet0() | 0);
   $10 = ($8|0)==(0);
   $11 = ($9|0)==(0);
   $12 = $10 & $11;
   if ($12) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $5 = $8;$7 = $9;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_o($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $6 = $0;$8 = $1;$s$addr$06 = $s;
  while(1) {
   $5 = $6&255;
   $7 = $5 & 7;
   $conv = $7 | 48;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $9 = (_bitshift64Lshr(($6|0),($8|0),3)|0);
   $10 = (getTempRet0() | 0);
   $11 = ($9|0)==(0);
   $12 = ($10|0)==(0);
   $13 = $11 & $12;
   if ($13) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $6 = $9;$8 = $10;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add5 = 0, $conv = 0, $conv6 = 0, $div9 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $tobool8 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0;$8 = $1;$s$addr$013 = $s;
  while(1) {
   $9 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $10 = (getTempRet0() | 0);
   $11 = (___muldi3(($9|0),($10|0),10,0)|0);
   $12 = (getTempRet0() | 0);
   $13 = (_i64Subtract(($7|0),($8|0),($11|0),($12|0))|0);
   $14 = (getTempRet0() | 0);
   $15 = $13&255;
   $conv = $15 | 48;
   $incdec$ptr = ((($s$addr$013)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $7 = $9;$8 = $10;$s$addr$013 = $incdec$ptr;
   } else {
    break;
   }
  }
  $s$addr$0$lcssa = $incdec$ptr;$x$addr$0$lcssa$off0 = $9;
 } else {
  $s$addr$0$lcssa = $s;$x$addr$0$lcssa$off0 = $0;
 }
 $tobool8 = ($x$addr$0$lcssa$off0|0)==(0);
 if ($tobool8) {
  $s$addr$1$lcssa = $s$addr$0$lcssa;
 } else {
  $s$addr$19 = $s$addr$0$lcssa;$y$010 = $x$addr$0$lcssa$off0;
  while(1) {
   $div9 = (($y$010>>>0) / 10)&-1;
   $21 = ($div9*10)|0;
   $22 = (($y$010) - ($21))|0;
   $add5 = $22 | 48;
   $conv6 = $add5&255;
   $incdec$ptr7 = ((($s$addr$19)) + -1|0);
   HEAP8[$incdec$ptr7>>0] = $conv6;
   $23 = ($y$010>>>0)<(10);
   if ($23) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;$y$010 = $div9;
   }
  }
 }
 return ($s$addr$1$lcssa|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $and15 = 0, $and16 = 0, $and39 = 0, $cmp = 0, $cmp11 = 0, $cmp1132 = 0, $cmp28 = 0, $cmp8 = 0, $conv1 = 0;
 var $dec = 0, $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $neg = 0, $or$cond = 0, $or$cond42 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0;
 var $sub = 0, $sub22 = 0, $tobool = 0, $tobool17 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $tobool25 = 0, $tobool2526 = 0, $tobool36 = 0, $tobool40 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and39 = $0 & 3;
 $tobool40 = ($and39|0)!=(0);
 $tobool241 = ($n|0)!=(0);
 $or$cond42 = $tobool241 & $tobool40;
 L1: do {
  if ($or$cond42) {
   $1 = $c&255;
   $n$addr$043 = $n;$s$044 = $src;
   while(1) {
    $2 = HEAP8[$s$044>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa52 = $n$addr$043;$s$0$lcssa53 = $s$044;
     label = 6;
     break L1;
    }
    $incdec$ptr = ((($s$044)) + 1|0);
    $dec = (($n$addr$043) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)!=(0);
    $tobool2 = ($dec|0)!=(0);
    $or$cond = $tobool2 & $tobool;
    if ($or$cond) {
     $n$addr$043 = $dec;$s$044 = $incdec$ptr;
    } else {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    }
   }
  } else {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool241;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$0$lcssa52 = $n$addr$0$lcssa;$s$0$lcssa53 = $s$0$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa53>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $tobool36 = ($n$addr$0$lcssa52|0)==(0);
    if ($tobool36) {
     label = 16;
     break;
    } else {
     $8 = $s$0$lcssa53;
     break;
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $cmp1132 = ($n$addr$0$lcssa52>>>0)>(3);
   L13: do {
    if ($cmp1132) {
     $n$addr$133 = $n$addr$0$lcssa52;$w$034 = $s$0$lcssa53;
     while(1) {
      $6 = HEAP32[$w$034>>2]|0;
      $xor = $6 ^ $mul;
      $sub = (($xor) + -16843009)|0;
      $neg = $xor & -2139062144;
      $and15 = $neg ^ -2139062144;
      $and16 = $and15 & $sub;
      $tobool17 = ($and16|0)==(0);
      if (!($tobool17)) {
       $$in = $w$034;$n$addr$1$lcssa55 = $n$addr$133;
       break L13;
      }
      $incdec$ptr21 = ((($w$034)) + 4|0);
      $sub22 = (($n$addr$133) + -4)|0;
      $cmp11 = ($sub22>>>0)>(3);
      if ($cmp11) {
       $n$addr$133 = $sub22;$w$034 = $incdec$ptr21;
      } else {
       $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
       label = 11;
       break;
      }
     }
    } else {
     $n$addr$1$lcssa = $n$addr$0$lcssa52;$w$0$lcssa = $s$0$lcssa53;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $tobool2526 = ($n$addr$1$lcssa|0)==(0);
    if ($tobool2526) {
     label = 16;
     break;
    } else {
     $$in = $w$0$lcssa;$n$addr$1$lcssa55 = $n$addr$1$lcssa;
    }
   }
   $n$addr$227 = $n$addr$1$lcssa55;$s$128 = $$in;
   while(1) {
    $7 = HEAP8[$s$128>>0]|0;
    $cmp28 = ($7<<24>>24)==($5<<24>>24);
    if ($cmp28) {
     $8 = $s$128;
     break L8;
    }
    $incdec$ptr33 = ((($s$128)) + 1|0);
    $dec34 = (($n$addr$227) + -1)|0;
    $tobool25 = ($dec34|0)==(0);
    if ($tobool25) {
     label = 16;
     break;
    } else {
     $n$addr$227 = $dec34;$s$128 = $incdec$ptr33;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $8 = 0;
 }
 return ($8|0);
}
function _pad_659($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $cmp3 = 0, $cmp38 = 0, $cond = 0, $conv = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $or$cond = 0, $pad = 0, $sub = 0, $sub6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $pad = sp;
 $and = $fl & 73728;
 $tobool = ($and|0)==(0);
 $cmp = ($w|0)>($l|0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($w) - ($l))|0;
  $conv = $c << 24 >> 24;
  $0 = ($sub>>>0)<(256);
  $cond = $0 ? $sub : 256;
  (_memset(($pad|0),($conv|0),($cond|0))|0);
  $cmp38 = ($sub>>>0)>(255);
  if ($cmp38) {
   $1 = (($w) - ($l))|0;
   $l$addr$09 = $sub;
   while(1) {
    _out($f,$pad,256);
    $sub6 = (($l$addr$09) + -256)|0;
    $cmp3 = ($sub6>>>0)>(255);
    if ($cmp3) {
     $l$addr$09 = $sub6;
    } else {
     break;
    }
   }
   $2 = $1 & 255;
   $l$addr$0$lcssa = $2;
  } else {
   $l$addr$0$lcssa = $sub;
  }
  _out($f,$pad,$l$addr$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 return ($retval$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and32 = 0, $and36 = 0, $and49 = 0, $and54 = 0, $and58 = 0, $call = 0, $call10 = 0, $call66 = 0, $cmp = 0;
 var $cmp14 = 0, $cmp21 = 0, $cmp24 = 0, $cmp41 = 0, $cmp7 = 0, $conv = 0, $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv29 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv51 = 0, $conv56 = 0, $conv60 = 0, $incdec$ptr = 0, $incdec$ptr30 = 0, $incdec$ptr35 = 0, $incdec$ptr47 = 0;
 var $incdec$ptr52 = 0, $incdec$ptr57 = 0, $locale = 0, $or = 0, $or$cond = 0, $or18 = 0, $or28 = 0, $or33 = 0, $or37 = 0, $or45 = 0, $or50 = 0, $or55 = 0, $or59 = 0, $retval$0 = 0, $sub40 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 do {
  if ($tobool) {
   $retval$0 = 1;
  } else {
   $cmp = ($wc>>>0)<(128);
   if ($cmp) {
    $conv = $wc&255;
    HEAP8[$s>>0] = $conv;
    $retval$0 = 1;
    break;
   }
   $call = (___pthread_self_440()|0);
   $locale = ((($call)) + 188|0);
   $0 = HEAP32[$locale>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $tobool2 = ($1|0)==(0|0);
   if ($tobool2) {
    $2 = $wc & -128;
    $cmp7 = ($2|0)==(57216);
    if ($cmp7) {
     $conv12 = $wc&255;
     HEAP8[$s>>0] = $conv12;
     $retval$0 = 1;
     break;
    } else {
     $call10 = (___errno_location()|0);
     HEAP32[$call10>>2] = 84;
     $retval$0 = -1;
     break;
    }
   }
   $cmp14 = ($wc>>>0)<(2048);
   if ($cmp14) {
    $3 = $wc >>> 6;
    $or = $3 | 192;
    $conv17 = $or&255;
    $incdec$ptr = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv17;
    $and = $wc & 63;
    $or18 = $and | 128;
    $conv19 = $or18&255;
    HEAP8[$incdec$ptr>>0] = $conv19;
    $retval$0 = 2;
    break;
   }
   $cmp21 = ($wc>>>0)<(55296);
   $4 = $wc & -8192;
   $cmp24 = ($4|0)==(57344);
   $or$cond = $cmp21 | $cmp24;
   if ($or$cond) {
    $5 = $wc >>> 12;
    $or28 = $5 | 224;
    $conv29 = $or28&255;
    $incdec$ptr30 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv29;
    $6 = $wc >>> 6;
    $and32 = $6 & 63;
    $or33 = $and32 | 128;
    $conv34 = $or33&255;
    $incdec$ptr35 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr30>>0] = $conv34;
    $and36 = $wc & 63;
    $or37 = $and36 | 128;
    $conv38 = $or37&255;
    HEAP8[$incdec$ptr35>>0] = $conv38;
    $retval$0 = 3;
    break;
   }
   $sub40 = (($wc) + -65536)|0;
   $cmp41 = ($sub40>>>0)<(1048576);
   if ($cmp41) {
    $7 = $wc >>> 18;
    $or45 = $7 | 240;
    $conv46 = $or45&255;
    $incdec$ptr47 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv46;
    $8 = $wc >>> 12;
    $and49 = $8 & 63;
    $or50 = $and49 | 128;
    $conv51 = $or50&255;
    $incdec$ptr52 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr47>>0] = $conv51;
    $9 = $wc >>> 6;
    $and54 = $9 & 63;
    $or55 = $and54 | 128;
    $conv56 = $or55&255;
    $incdec$ptr57 = ((($s)) + 3|0);
    HEAP8[$incdec$ptr52>>0] = $conv56;
    $and58 = $wc & 63;
    $or59 = $and58 | 128;
    $conv60 = $or59&255;
    HEAP8[$incdec$ptr57>>0] = $conv60;
    $retval$0 = 4;
    break;
   } else {
    $call66 = (___errno_location()|0);
    HEAP32[$call66>>2] = 84;
    $retval$0 = -1;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___pthread_self_440() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (43608|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr27 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp6 = 0, $i$033 = 0, $i$1 = 0, $l$addr$0 = 0, $l$addr$1 = 0, $lbf = 0, $or$cond = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $tobool932 = 0, $wend = 0, $wpos = 0;
 var $write = 0, $write15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $3 = $$pre;
   label = 5;
  } else {
   $retval$1 = 0;
  }
 } else {
  $1 = $0;
  $3 = $1;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $wpos = ((($f)) + 20|0);
   $2 = HEAP32[$wpos>>2]|0;
   $sub$ptr$sub = (($3) - ($2))|0;
   $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
   $4 = $2;
   if ($cmp) {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    $call4 = (FUNCTION_TABLE_iiii[$5 & 15]($f,$s,$l)|0);
    $retval$1 = $call4;
    break;
   }
   $lbf = ((($f)) + 75|0);
   $6 = HEAP8[$lbf>>0]|0;
   $cmp6 = ($6<<24>>24)<(0);
   $tobool932 = ($l|0)==(0);
   $or$cond = $cmp6 | $tobool932;
   L10: do {
    if ($or$cond) {
     $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
    } else {
     $i$033 = $l;
     while(1) {
      $sub = (($i$033) + -1)|0;
      $arrayidx = (($s) + ($sub)|0);
      $7 = HEAP8[$arrayidx>>0]|0;
      $cmp11 = ($7<<24>>24)==(10);
      if ($cmp11) {
       break;
      }
      $tobool9 = ($sub|0)==(0);
      if ($tobool9) {
       $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
       break L10;
      } else {
       $i$033 = $sub;
      }
     }
     $write15 = ((($f)) + 36|0);
     $8 = HEAP32[$write15>>2]|0;
     $call16 = (FUNCTION_TABLE_iiii[$8 & 15]($f,$s,$i$033)|0);
     $cmp17 = ($call16>>>0)<($i$033>>>0);
     if ($cmp17) {
      $retval$1 = $call16;
      break L5;
     }
     $add$ptr = (($s) + ($i$033)|0);
     $l$addr$0 = (($l) - ($i$033))|0;
     $$pre35 = HEAP32[$wpos>>2]|0;
     $9 = $$pre35;$i$1 = $i$033;$l$addr$1 = $l$addr$0;$s$addr$1 = $add$ptr;
    }
   } while(0);
   (_memcpy(($9|0),($s$addr$1|0),($l$addr$1|0))|0);
   $10 = HEAP32[$wpos>>2]|0;
   $add$ptr27 = (($10) + ($l$addr$1)|0);
   HEAP32[$wpos>>2] = $add$ptr27;
   $add = (($i$1) + ($l$addr$1))|0;
   $retval$1 = $add;
  }
 } while(0);
 return ($retval$1|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = ((($f)) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $3 = $2;
  $buf_size = ((($f)) + 48|0);
  $4 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($3) + ($4)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___DOUBLE_BITS_662($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $trunc$clear = 0, $x$addr$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2&65535;
 $trunc$clear = $4 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 1.8446744073709552E+19;
   $call = (+_frexp($mul,$e));
   $5 = HEAP32[$e>>2]|0;
   $sub = (($5) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  break;
 }
 case 2047:  {
  $retval$0 = $x;
  break;
 }
 default: {
  $conv = $2 & 2047;
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $6 = $1 & -2146435073;
  $7 = $6 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $7;$8 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $8;
 }
 }
 return (+$retval$0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $spec$select = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
 $spec$select = $cmp ? $l : $sub$ptr$sub;
 $$cast = $1;
 (_memcpy(($$cast|0),($s|0),($spec$select|0))|0);
 $2 = HEAP32[$wpos>>2]|0;
 $add$ptr = (($2) + ($spec$select)|0);
 HEAP32[$wpos>>2] = $add$ptr;
 return ($l|0);
}
function _close($fd) {
 $fd = $fd|0;
 var $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $spec$store$select = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $call = (_dummy_731($fd)|0);
 HEAP32[$vararg_buffer>>2] = $call;
 $call1 = (___syscall6(6,($vararg_buffer|0))|0);
 $cmp = ($call1|0)==(-4);
 $spec$store$select = $cmp ? 0 : $call1;
 $call2 = (___syscall_ret($spec$store$select)|0);
 STACKTOP = sp;return ($call2|0);
}
function _open($filename,$flags,$varargs) {
 $filename = $filename|0;
 $flags = $flags|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and7 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $call = 0, $call12 = 0, $cmp6 = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0;
 var $expanded5 = 0, $expanded6 = 0, $mode$0 = 0, $or = 0, $or$cond8 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $ap = sp;
 $0 = $flags & 4194368;
 $1 = ($0|0)==(0);
 if ($1) {
  $mode$0 = 0;
 } else {
  HEAP32[$ap>>2] = $varargs;
  $arglist_current = HEAP32[$ap>>2]|0;
  $2 = $arglist_current;
  $3 = ((0) + 4|0);
  $expanded2 = $3;
  $expanded = (($expanded2) - 1)|0;
  $4 = (($2) + ($expanded))|0;
  $5 = ((0) + 4|0);
  $expanded6 = $5;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $6 = $4 & $expanded4;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $arglist_next = ((($7)) + 4|0);
  HEAP32[$ap>>2] = $arglist_next;
  $mode$0 = $8;
 }
 $9 = $filename;
 $or = $flags | 32768;
 HEAP32[$vararg_buffer>>2] = $9;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $or;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $mode$0;
 $call = (___syscall5(5,($vararg_buffer|0))|0);
 $cmp6 = ($call|0)<(0);
 $and7 = $flags & 524288;
 $tobool8 = ($and7|0)==(0);
 $or$cond8 = $tobool8 | $cmp6;
 if (!($or$cond8)) {
  HEAP32[$vararg_buffer3>>2] = $call;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 1;
  (___syscall221(221,($vararg_buffer3|0))|0);
 }
 $call12 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call12|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$pn = 0, $$pn24 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and3 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $incdec$ptr7 = 0, $neg = 0, $rem = 0, $rem13 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0;
 var $s$addr$1$lcssa = 0, $sub = 0, $sub$ptr$lhs$cast15 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool1021 = 0, $tobool14 = 0, $tobool4 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $rem13 = $0 & 3;
 $tobool14 = ($rem13|0)==(0);
 L1: do {
  if ($tobool14) {
   $s$addr$0$lcssa = $s;
   label = 5;
  } else {
   $5 = $0;$s$addr$015 = $s;
   while(1) {
    $1 = HEAP8[$s$addr$015>>0]|0;
    $tobool1 = ($1<<24>>24)==(0);
    if ($tobool1) {
     $$pn = $5;
     break L1;
    }
    $incdec$ptr = ((($s$addr$015)) + 1|0);
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $s$addr$0$lcssa = $incdec$ptr;
     label = 5;
     break;
    } else {
     $5 = $2;$s$addr$015 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while(1) {
   $3 = HEAP32[$w$0>>2]|0;
   $sub = (($3) + -16843009)|0;
   $neg = $3 & -2139062144;
   $and = $neg ^ -2139062144;
   $and3 = $and & $sub;
   $tobool4 = ($and3|0)==(0);
   $incdec$ptr7 = ((($w$0)) + 4|0);
   if ($tobool4) {
    $w$0 = $incdec$ptr7;
   } else {
    break;
   }
  }
  $4 = $3&255;
  $tobool1021 = ($4<<24>>24)==(0);
  if ($tobool1021) {
   $s$addr$1$lcssa = $w$0;
  } else {
   $$pn24 = $w$0;
   while(1) {
    $incdec$ptr1323 = ((($$pn24)) + 1|0);
    $$pre = HEAP8[$incdec$ptr1323>>0]|0;
    $tobool10 = ($$pre<<24>>24)==(0);
    if ($tobool10) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else {
     $$pn24 = $incdec$ptr1323;
    }
   }
  }
  $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
  $$pn = $sub$ptr$lhs$cast15;
 }
 $retval$0 = (($$pn) - ($0))|0;
 return ($retval$0|0);
}
function _read($fd,$buf,$count) {
 $fd = $fd|0;
 $buf = $buf|0;
 $count = $count|0;
 var $0 = 0, $call = 0, $call1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = $buf;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $call = (___syscall3(3,($vararg_buffer|0))|0);
 $call1 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call1|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $call = 0, $call1 = 0, $cmp = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $call1 = (_fwrite($s,1,$call,$f)|0);
 $cmp = ($call1|0)!=($call|0);
 $sub = $cmp << 31 >> 31;
 return ($sub|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call112 = 0, $call113 = 0, $cmp = 0, $cmp5 = 0, $cond9 = 0, $div = 0, $lock = 0, $mul = 0, $phitmp = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $spec$select = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $call1 = (___fwritex($src,$mul,$f)|0);
  if ($phitmp) {
   $call113 = $call1;
  } else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else {
  $call112 = (___fwritex($src,$mul,$f)|0);
  $call113 = $call112;
 }
 $cmp5 = ($call113|0)==($mul|0);
 if ($cmp5) {
  $cond9 = $spec$select;
 } else {
  $div = (($call113>>>0) / ($size>>>0))&-1;
  $cond9 = $div;
 }
 return ($cond9|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp14 = 0, $cmp7 = 0, $conv = 0, $conv18 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $lbf = 0, $retval$0 = 0;
 var $tobool = 0, $tobool1 = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $conv = $_c&255;
 HEAP8[$c>>0] = $conv;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $2 = $$pre;
   label = 4;
  } else {
   $retval$0 = -1;
  }
 } else {
  $2 = $0;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $wpos = ((($f)) + 20|0);
   $1 = HEAP32[$wpos>>2]|0;
   $cmp = ($1>>>0)<($2>>>0);
   if ($cmp) {
    $conv5 = $_c & 255;
    $lbf = ((($f)) + 75|0);
    $3 = HEAP8[$lbf>>0]|0;
    $conv6 = $3 << 24 >> 24;
    $cmp7 = ($conv5|0)==($conv6|0);
    if (!($cmp7)) {
     $incdec$ptr = ((($1)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$1>>0] = $conv;
     $retval$0 = $conv5;
     break;
    }
   }
   $write = ((($f)) + 36|0);
   $4 = HEAP32[$write>>2]|0;
   $call13 = (FUNCTION_TABLE_iiii[$4 & 15]($f,$c,1)|0);
   $cmp14 = ($call13|0)==(1);
   if ($cmp14) {
    $5 = HEAP8[$c>>0]|0;
    $conv18 = $5&255;
    $retval$0 = $conv18;
   } else {
    $retval$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $add = 0, $call = 0, $call1 = 0, $call3 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $add = (($call) + 1)|0;
 $call1 = (_malloc($add)|0);
 $tobool = ($call1|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call3 = (_memcpy(($call1|0),($s|0),($add|0))|0);
  $retval$0 = $call3;
 }
 return ($retval$0|0);
}
function _getpid() {
 var $call = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $call = (___syscall20(20,($vararg_buffer|0))|0);
 STACKTOP = sp;return ($call|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($s) + -1)|0;
 $0 = 573920;
 $1 = $0;
 HEAP32[$1>>2] = $sub;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 573920;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = (getTempRet0() | 0);
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = (getTempRet0() | 0);
 $10 = 573920;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = (getTempRet0() | 0);
 return ($14|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call10 = 0, $call28 = 0, $cmp = 0, $cmp15 = 0, $cmp20 = 0, $cmp3 = 0, $cmp5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv12 = 0;
 var $conv14 = 0, $conv2 = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $lbf = 0, $lbf13 = 0, $lock = 0, $retval$0 = 0, $tobool = 0, $wend = 0, $wend19 = 0, $wpos = 0, $wpos18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  label = 3;
 } else {
  $call = (___lockfile($f)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 3;
  } else {
   $conv11 = $c&255;
   $conv12 = $c & 255;
   $lbf13 = ((($f)) + 75|0);
   $4 = HEAP8[$lbf13>>0]|0;
   $conv14 = $4 << 24 >> 24;
   $cmp15 = ($conv12|0)==($conv14|0);
   if ($cmp15) {
    label = 10;
   } else {
    $wpos18 = ((($f)) + 20|0);
    $5 = HEAP32[$wpos18>>2]|0;
    $wend19 = ((($f)) + 16|0);
    $6 = HEAP32[$wend19>>2]|0;
    $cmp20 = ($5>>>0)<($6>>>0);
    if ($cmp20) {
     $incdec$ptr25 = ((($5)) + 1|0);
     HEAP32[$wpos18>>2] = $incdec$ptr25;
     HEAP8[$5>>0] = $conv11;
     $cond30 = $conv12;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $call28 = (___overflow($f,$c)|0);
    $cond30 = $call28;
   }
   ___unlockfile($f);
   $retval$0 = $cond30;
  }
 }
 do {
  if ((label|0) == 3) {
   $conv = $c&255;
   $conv1 = $c & 255;
   $lbf = ((($f)) + 75|0);
   $1 = HEAP8[$lbf>>0]|0;
   $conv2 = $1 << 24 >> 24;
   $cmp3 = ($conv1|0)==($conv2|0);
   if (!($cmp3)) {
    $wpos = ((($f)) + 20|0);
    $2 = HEAP32[$wpos>>2]|0;
    $wend = ((($f)) + 16|0);
    $3 = HEAP32[$wend>>2]|0;
    $cmp5 = ($2>>>0)<($3>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$2>>0] = $conv;
     $retval$0 = $conv1;
     break;
    }
   }
   $call10 = (___overflow($f,$c)|0);
   $retval$0 = $call10;
  }
 } while(0);
 return ($retval$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[10901]|0;
 $call = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _putchar($c) {
 $c = $c|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10901]|0;
 $call = (_fputc($c,$0)|0);
 return ($call|0);
}
function _puts($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call10 = 0, $call10$lobit = 0, $cmp = 0, $cmp2 = 0, $cmp3 = 0, $cmp5 = 0, $cond = 0, $incdec$ptr = 0, $lbf = 0, $lock = 0, $tobool = 0, $wend = 0;
 var $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10901]|0;
 $lock = ((($0)) + 76|0);
 $1 = HEAP32[$lock>>2]|0;
 $cmp = ($1|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($0)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $call1 = (_fputs($s,$0)|0);
 $cmp2 = ($call1|0)<(0);
 do {
  if ($cmp2) {
   $5 = -1;
  } else {
   $lbf = ((($0)) + 75|0);
   $2 = HEAP8[$lbf>>0]|0;
   $cmp3 = ($2<<24>>24)==(10);
   if (!($cmp3)) {
    $wpos = ((($0)) + 20|0);
    $3 = HEAP32[$wpos>>2]|0;
    $wend = ((($0)) + 16|0);
    $4 = HEAP32[$wend>>2]|0;
    $cmp5 = ($3>>>0)<($4>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($3)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$3>>0] = 10;
     $5 = 0;
     break;
    }
   }
   $call10 = (___overflow($0,10)|0);
   $call10$lobit = $call10 >> 31;
   $5 = $call10$lobit;
  }
 } while(0);
 $tobool = ($cond|0)==(0);
 if (!($tobool)) {
  ___unlockfile($0);
 }
 return ($5|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i134 = 0, $$pre$i194 = 0, $$pre$i31$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i195Z2D = 0, $$pre$phi$i32$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$010$i$i = 0;
 var $K305$08$i$i = 0, $K373$015$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i183 = 0, $R$1$i183$be = 0, $R$1$i183$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i188 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0;
 var $RP$1$i182 = 0, $RP$1$i182$be = 0, $RP$1$i182$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i34$i = 0, $T$014$i = 0, $T$07$i$i = 0, $T$09$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i135 = 0, $add$i155 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i141 = 0, $add$ptr$i174 = 0, $add$ptr$i2$i$i = 0;
 var $add$ptr$i35$i = 0, $add$ptr$i43$i = 0, $add$ptr$i57$i = 0, $add$ptr14$i$i = 0, $add$ptr15$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr169 = 0, $add$ptr17$i$i = 0, $add$ptr178 = 0, $add$ptr181$i = 0, $add$ptr182 = 0, $add$ptr189$i = 0, $add$ptr190$i = 0, $add$ptr193 = 0, $add$ptr199 = 0, $add$ptr2$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr225$i = 0;
 var $add$ptr227$i = 0, $add$ptr24$i$i = 0, $add$ptr262$i = 0, $add$ptr269$i = 0, $add$ptr273$i = 0, $add$ptr282$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr369$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i41$i = 0, $add$ptr4$i49$i = 0, $add$ptr441$i = 0, $add$ptr5$i$i = 0, $add$ptr6$i$i = 0, $add$ptr6$i$i$i = 0, $add$ptr6$i53$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0;
 var $add$ptr95 = 0, $add$ptr98 = 0, $add10$i = 0, $add101$i = 0, $add110$i = 0, $add13$i = 0, $add14$i = 0, $add140$i = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i158 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add212$i = 0, $add215$i = 0;
 var $add22$i = 0, $add246$i = 0, $add26$i$i = 0, $add268$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add337$i = 0, $add342$i = 0, $add346$i = 0, $add348$i = 0, $add351$i = 0, $add46$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add54$i = 0, $add58 = 0;
 var $add62 = 0, $add64 = 0, $add74$i$i = 0, $add77$i = 0, $add78$i = 0, $add79$i$i = 0, $add8 = 0, $add82$i = 0, $add83$i$i = 0, $add85$i$i = 0, $add86$i = 0, $add88$i$i = 0, $add9$i = 0, $add90$i = 0, $add92$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i14$i = 0;
 var $and$i152 = 0, $and$i36$i = 0, $and$i44$i = 0, $and100$i = 0, $and103$i = 0, $and104$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and1197$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and194$i191 = 0, $and199$i = 0;
 var $and209$i$i = 0, $and21$i = 0, $and21$i159 = 0, $and227$i$i = 0, $and236$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and29$i = 0, $and292$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i39$i = 0, $and3$i47$i = 0, $and30$i = 0, $and318$i$i = 0, $and3185$i$i = 0;
 var $and32$i = 0, $and32$i$i = 0, $and33$i$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and350$i = 0, $and363$i = 0, $and37$i$i = 0, $and387$i = 0, $and38712$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and42$i = 0, $and43 = 0, $and46 = 0, $and49 = 0, $and49$i = 0, $and49$i$i = 0;
 var $and53 = 0, $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i13$i = 0, $and6$i18$i = 0, $and61 = 0, $and64$i = 0, $and68$i = 0, $and69$i$i = 0, $and7 = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0;
 var $and87$i$i = 0, $and89$i = 0, $and9$i = 0, $and96$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i160 = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx106$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx113$i173 = 0, $arrayidx121$i = 0, $arrayidx121$i$sink = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0;
 var $arrayidx148$i = 0, $arrayidx151$i = 0, $arrayidx151$i$i = 0, $arrayidx151$i$i$sink = 0, $arrayidx154$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i = 0, $arrayidx165$i185 = 0, $arrayidx178$i$i = 0, $arrayidx184$i = 0, $arrayidx184$i$i = 0, $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx212$i = 0, $arrayidx212$i$sink = 0, $arrayidx223$i$i = 0, $arrayidx228$i = 0, $arrayidx23$i = 0;
 var $arrayidx239$i = 0, $arrayidx245$i = 0, $arrayidx256$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx290$i$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx394$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0;
 var $arrayidx94$i = 0, $arrayidx94$i170 = 0, $arrayidx96$i$i = 0, $bk$i = 0, $bk$i$i = 0, $bk$i176 = 0, $bk$i26$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk139$i$i = 0, $bk145$i = 0, $bk158$i$i = 0, $bk161$i$i = 0, $bk18 = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0;
 var $bk311$i = 0, $bk313$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk370$i = 0, $bk407$i = 0, $bk429$i = 0, $bk432$i = 0, $bk55$i$i = 0, $bk56$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk85 = 0, $bk91$i$i = 0, $br$2$ph$i = 0, $call107$i = 0, $call131$i = 0, $call132$i = 0, $call275$i = 0;
 var $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i12$i = 0, $cmp$i133 = 0, $cmp$i149 = 0, $cmp$i15$i = 0, $cmp$i3$i$i = 0, $cmp$i37$i = 0, $cmp$i45$i = 0, $cmp$i55$i = 0, $cmp1 = 0, $cmp1$i = 0;
 var $cmp10 = 0, $cmp100$i$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i = 0, $cmp108$i$i = 0, $cmp114$i = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp119$i = 0, $cmp12$i = 0, $cmp120$i$i = 0, $cmp120$i28$i = 0, $cmp1208$i$i = 0, $cmp123$i = 0, $cmp124$i$i = 0, $cmp126$i = 0;
 var $cmp127$i = 0, $cmp128 = 0, $cmp128$i = 0, $cmp128$i$i = 0, $cmp133$i = 0, $cmp135$i = 0, $cmp137$i = 0, $cmp138$i = 0, $cmp139 = 0, $cmp141$i = 0, $cmp144$i$i = 0, $cmp146 = 0, $cmp147$i = 0, $cmp14799$i = 0, $cmp15$i = 0, $cmp151$i = 0, $cmp152$i = 0, $cmp155$i = 0, $cmp156 = 0, $cmp156$i = 0;
 var $cmp156$i$i = 0, $cmp157$i = 0, $cmp159$i = 0, $cmp162 = 0, $cmp162$i = 0, $cmp162$i184 = 0, $cmp166$i = 0, $cmp168$i$i = 0, $cmp174$i = 0, $cmp180$i = 0, $cmp185$i = 0, $cmp185$i$i = 0, $cmp186 = 0, $cmp186$i = 0, $cmp19$i = 0, $cmp190$i = 0, $cmp191$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0;
 var $cmp203$i = 0, $cmp205$i = 0, $cmp209$i = 0, $cmp21$i = 0, $cmp215$i$i = 0, $cmp217$i = 0, $cmp218$i = 0, $cmp224$i = 0, $cmp228$i = 0, $cmp229$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp246$i = 0, $cmp254$i$i = 0, $cmp257$i = 0, $cmp258$i$i = 0, $cmp26$i = 0, $cmp265$i = 0, $cmp27$i$i = 0, $cmp28$i = 0;
 var $cmp28$i$i = 0, $cmp284$i = 0, $cmp29 = 0, $cmp3$i$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp319$i = 0, $cmp319$i$i = 0, $cmp3196$i$i = 0, $cmp32$i = 0, $cmp32$i138 = 0, $cmp323$i = 0, $cmp327$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp35$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp374$i = 0, $cmp38$i = 0;
 var $cmp38$i$i = 0, $cmp388$i = 0, $cmp38813$i = 0, $cmp396$i = 0, $cmp40$i = 0, $cmp43$i = 0, $cmp45$i = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp55$i = 0, $cmp55$i166 = 0, $cmp57$i = 0, $cmp57$i167 = 0, $cmp59$i$i = 0, $cmp60$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0;
 var $cmp65$i = 0, $cmp66$i = 0, $cmp66$i140 = 0, $cmp69$i = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76$i = 0, $cmp81$i = 0, $cmp85$i = 0, $cmp89$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp97$i = 0, $cmp97$i$i = 0;
 var $cmp9716$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i40$i = 0, $cond$i48$i = 0, $cond1$i$i = 0, $cond115$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond2$i = 0, $cond3$i = 0, $cond315$i$i = 0, $cond383$i = 0, $cond4$i = 0, $fd$i = 0;
 var $fd$i$i = 0, $fd$i177 = 0, $fd103$i$i = 0, $fd123 = 0, $fd140$i$i = 0, $fd146$i = 0, $fd148$i$i = 0, $fd160$i$i = 0, $fd219$i = 0, $fd247$i$i = 0, $fd303$i$i = 0, $fd312$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd371$i = 0, $fd408$i = 0, $fd416$i = 0, $fd431$i = 0, $fd54$i$i = 0;
 var $fd57$i = 0, $fd68$i$i = 0, $fd69 = 0, $fd78$i$i = 0, $fd9 = 0, $fd92$i$i = 0, $head = 0, $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i164 = 0, $head$i22$i = 0, $head$i42$i = 0, $head$i52$i = 0, $head118$i$i = 0, $head1186$i$i = 0, $head168 = 0, $head173 = 0, $head177 = 0, $head179 = 0;
 var $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head195 = 0, $head198 = 0, $head208$i$i = 0, $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head26$i$i = 0, $head265$i = 0, $head268$i = 0, $head271$i = 0, $head274$i = 0, $head279$i = 0, $head281$i = 0, $head29$i = 0, $head29$i$i = 0, $head317$i$i = 0;
 var $head3174$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head386$i = 0, $head38611$i = 0, $head7$i$i = 0, $head7$i$i$i = 0, $head7$i54$i = 0, $head94 = 0, $head97 = 0, $head99$i = 0, $idx$0$i = 0, $index$i = 0, $index$i$i = 0, $index$i189 = 0, $index$i29$i = 0, $index288$i$i = 0, $index356$i = 0, $magic$i$i = 0, $nb$0 = 0;
 var $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i137 = 0, $neg$i190 = 0, $neg103$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg48$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next231$i = 0, $not$cmp141$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i168 = 0, $or$cond1$i = 0, $or$cond1$i165 = 0;
 var $or$cond11$i = 0, $or$cond2$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $or$cond97$i = 0, $or$cond98$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i169 = 0, $or$i51$i = 0, $or101$i$i = 0, $or110 = 0, $or167 = 0, $or172 = 0, $or176 = 0, $or178$i = 0;
 var $or180 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or194 = 0, $or197 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or26 = 0, $or264$i = 0, $or267$i = 0, $or270$i = 0, $or275$i = 0, $or278$i = 0, $or28$i$i = 0, $or280$i = 0;
 var $or297$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or368$i = 0, $or40 = 0, $or44$i$i = 0, $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i175 = 0, $parent$i27$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent162$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0;
 var $parent226$i = 0, $parent240$i = 0, $parent257$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0, $parent369$i = 0, $parent406$i = 0, $parent433$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i162 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$418$i = 0, $rsize$418$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0;
 var $sflags193$i = 0, $sflags235$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i153 = 0, $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl192$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl222$i$i = 0, $shl226$i$i = 0;
 var $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl288$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl344$i = 0, $shl347$i = 0, $shl35 = 0, $shl362$i = 0, $shl37 = 0, $shl384$i = 0, $shl39$i$i = 0, $shl395$i = 0;
 var $shl48$i$i = 0, $shl60$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0, $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i148 = 0, $shr$i25$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i156 = 0, $shr110$i$i = 0;
 var $shr12$i = 0, $shr124$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i157 = 0, $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr318$i = 0;
 var $shr323$i$i = 0, $shr330$i = 0, $shr335$i = 0, $shr340$i = 0, $shr345$i = 0, $shr349$i = 0, $shr378$i = 0, $shr392$i = 0, $shr4$i = 0, $shr42$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i151 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0;
 var $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0, $shr7$i154 = 0, $shr72$i = 0, $shr72$i$i = 0, $shr75$i = 0, $shr76$i = 0, $shr77$i$i = 0, $shr79$i = 0, $shr8$i = 0, $shr80$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr84$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr88$i = 0;
 var $shr91$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size$i$i$le = 0, $size188$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0112$i = 0, $sp$1111$i = 0, $spec$select$i = 0, $spec$select$i171 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select5$i = 0, $spec$select9$i = 0, $spec$select96$i = 0, $ssize$2$ph$i = 0;
 var $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i136 = 0, $sub$i147 = 0, $sub$i16$i = 0, $sub$i38$i = 0, $sub$i46$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i19$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i20$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i21$i = 0, $sub10$i = 0, $sub101$i = 0;
 var $sub112$i = 0, $sub113$i$i = 0, $sub118$i = 0, $sub12$i$i = 0, $sub14$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub262$i$i = 0, $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub313$i$i = 0;
 var $sub329$i = 0, $sub33$i = 0, $sub334$i = 0, $sub339$i = 0, $sub343$i = 0, $sub381$i = 0, $sub4$i = 0, $sub41$i = 0, $sub42 = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i50$i = 0, $sub50$i = 0, $sub6$i = 0, $sub63$i = 0, $sub67$i = 0, $sub67$i$i = 0, $sub70$i = 0, $sub71$i$i = 0;
 var $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub99$i = 0, $t$0$i = 0, $t$0$i161 = 0, $t$2$i = 0, $t$4$i = 0, $t$517$i = 0, $t$517$i$ph = 0, $tbase$795$i = 0, $tobool$i$i = 0, $tobool107 = 0, $tobool195$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool237$i = 0, $tobool293$i = 0, $tobool296$i$i = 0, $tobool30$i = 0;
 var $tobool364$i = 0, $tobool97$i$i = 0, $tsize$2647482$i = 0, $tsize$4$i = 0, $tsize$794$i = 0, $v$0$i = 0, $v$0$i163 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i204 = 0, $v$4$lcssa$i = 0, $v$419$i = 0, $v$419$i$ph = 0, $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $magic$i$i = sp;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   $add2 = (($bytes) + 11)|0;
   $and = $add2 & -8;
   $cond = $cmp1 ? 16 : $and;
   $shr = $cond >>> 3;
   $0 = HEAP32[144125]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = (576540 + ($shl<<2)|0);
    $1 = ((($arrayidx)) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = ((($2)) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($3|0)==($arrayidx|0);
    if ($cmp10) {
     $shl12 = 1 << $add8;
     $neg13 = $shl12 ^ -1;
     $and14 = $0 & $neg13;
     HEAP32[144125] = $and14;
    } else {
     $bk18 = ((($3)) + 12|0);
     HEAP32[$bk18>>2] = $arrayidx;
     HEAP32[$1>>2] = $3;
    }
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = ((($2)) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr = (($2) + ($shl22)|0);
    $head25 = ((($add$ptr)) + 4|0);
    $4 = HEAP32[$head25>>2]|0;
    $or26 = $4 | 1;
    HEAP32[$head25>>2] = $or26;
    $retval$0 = $fd9;
    STACKTOP = sp;return ($retval$0|0);
   }
   $5 = HEAP32[(576508)>>2]|0;
   $cmp29 = ($cond>>>0)>($5>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = (576540 + ($shl65<<2)|0);
     $6 = ((($arrayidx66)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $fd69 = ((($7)) + 8|0);
     $8 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($8|0)==($arrayidx66|0);
     if ($cmp70) {
      $shl72 = 1 << $add64;
      $neg73 = $shl72 ^ -1;
      $and74 = $0 & $neg73;
      HEAP32[144125] = $and74;
      $10 = $and74;
     } else {
      $bk85 = ((($8)) + 12|0);
      HEAP32[$bk85>>2] = $arrayidx66;
      HEAP32[$6>>2] = $8;
      $10 = $0;
     }
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = ((($7)) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($7) + ($cond)|0);
     $or96 = $sub91 | 1;
     $head97 = ((($add$ptr95)) + 4|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($7) + ($shl90)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $cmp99 = ($5|0)==(0);
     if (!($cmp99)) {
      $9 = HEAP32[(576520)>>2]|0;
      $shr101 = $5 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = (576540 + ($shl102<<2)|0);
      $shl105 = 1 << $shr101;
      $and106 = $10 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $10 | $shl105;
       HEAP32[144125] = $or110;
       $$pre = ((($arrayidx103)) + 8|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $11 = ((($arrayidx103)) + 8|0);
       $12 = HEAP32[$11>>2]|0;
       $$pre$phiZ2D = $11;$F104$0 = $12;
      }
      HEAP32[$$pre$phiZ2D>>2] = $9;
      $bk122 = ((($F104$0)) + 12|0);
      HEAP32[$bk122>>2] = $9;
      $fd123 = ((($9)) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = ((($9)) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[(576508)>>2] = $sub91;
     HEAP32[(576520)>>2] = $add$ptr95;
     $retval$0 = $fd69;
     STACKTOP = sp;return ($retval$0|0);
    }
    $13 = HEAP32[(576504)>>2]|0;
    $cmp128 = ($13|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($13))|0;
     $and$i = $13 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = (576804 + ($add20$i<<2)|0);
     $14 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = ((($14)) + 4|0);
     $15 = HEAP32[$head$i>>2]|0;
     $and21$i = $15 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $rsize$0$i = $sub22$i;$t$0$i = $14;$v$0$i = $14;
     while(1) {
      $arrayidx23$i = ((($t$0$i)) + 16|0);
      $16 = HEAP32[$arrayidx23$i>>2]|0;
      $cmp$i = ($16|0)==(0|0);
      if ($cmp$i) {
       $arrayidx27$i = ((($t$0$i)) + 20|0);
       $17 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($17|0)==(0|0);
       if ($cmp28$i) {
        break;
       } else {
        $cond4$i = $17;
       }
      } else {
       $cond4$i = $16;
      }
      $head29$i = ((($cond4$i)) + 4|0);
      $18 = HEAP32[$head29$i>>2]|0;
      $and30$i = $18 & -8;
      $sub31$i = (($and30$i) - ($cond))|0;
      $cmp32$i = ($sub31$i>>>0)<($rsize$0$i>>>0);
      $spec$select$i = $cmp32$i ? $sub31$i : $rsize$0$i;
      $spec$select1$i = $cmp32$i ? $cond4$i : $v$0$i;
      $rsize$0$i = $spec$select$i;$t$0$i = $cond4$i;$v$0$i = $spec$select1$i;
     }
     $add$ptr$i = (($v$0$i) + ($cond)|0);
     $cmp35$i = ($add$ptr$i>>>0)>($v$0$i>>>0);
     if ($cmp35$i) {
      $parent$i = ((($v$0$i)) + 24|0);
      $19 = HEAP32[$parent$i>>2]|0;
      $bk$i = ((($v$0$i)) + 12|0);
      $20 = HEAP32[$bk$i>>2]|0;
      $cmp40$i = ($20|0)==($v$0$i|0);
      do {
       if ($cmp40$i) {
        $arrayidx61$i = ((($v$0$i)) + 20|0);
        $22 = HEAP32[$arrayidx61$i>>2]|0;
        $cmp62$i = ($22|0)==(0|0);
        if ($cmp62$i) {
         $arrayidx65$i = ((($v$0$i)) + 16|0);
         $23 = HEAP32[$arrayidx65$i>>2]|0;
         $cmp66$i = ($23|0)==(0|0);
         if ($cmp66$i) {
          $R$3$i = 0;
          break;
         } else {
          $R$1$i$ph = $23;$RP$1$i$ph = $arrayidx65$i;
         }
        } else {
         $R$1$i$ph = $22;$RP$1$i$ph = $arrayidx61$i;
        }
        $R$1$i = $R$1$i$ph;$RP$1$i = $RP$1$i$ph;
        while(1) {
         $arrayidx71$i = ((($R$1$i)) + 20|0);
         $24 = HEAP32[$arrayidx71$i>>2]|0;
         $cmp72$i = ($24|0)==(0|0);
         if ($cmp72$i) {
          $arrayidx75$i = ((($R$1$i)) + 16|0);
          $25 = HEAP32[$arrayidx75$i>>2]|0;
          $cmp76$i = ($25|0)==(0|0);
          if ($cmp76$i) {
           break;
          } else {
           $R$1$i$be = $25;$RP$1$i$be = $arrayidx75$i;
          }
         } else {
          $R$1$i$be = $24;$RP$1$i$be = $arrayidx71$i;
         }
         $R$1$i = $R$1$i$be;$RP$1$i = $RP$1$i$be;
        }
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
       } else {
        $fd$i = ((($v$0$i)) + 8|0);
        $21 = HEAP32[$fd$i>>2]|0;
        $bk56$i = ((($21)) + 12|0);
        HEAP32[$bk56$i>>2] = $20;
        $fd57$i = ((($20)) + 8|0);
        HEAP32[$fd57$i>>2] = $21;
        $R$3$i = $20;
       }
      } while(0);
      $cmp90$i = ($19|0)==(0|0);
      do {
       if (!($cmp90$i)) {
        $index$i = ((($v$0$i)) + 28|0);
        $26 = HEAP32[$index$i>>2]|0;
        $arrayidx94$i = (576804 + ($26<<2)|0);
        $27 = HEAP32[$arrayidx94$i>>2]|0;
        $cmp95$i = ($v$0$i|0)==($27|0);
        if ($cmp95$i) {
         HEAP32[$arrayidx94$i>>2] = $R$3$i;
         $cond2$i = ($R$3$i|0)==(0|0);
         if ($cond2$i) {
          $shl$i = 1 << $26;
          $neg$i = $shl$i ^ -1;
          $and103$i = $13 & $neg$i;
          HEAP32[(576504)>>2] = $and103$i;
          break;
         }
        } else {
         $arrayidx113$i = ((($19)) + 16|0);
         $28 = HEAP32[$arrayidx113$i>>2]|0;
         $cmp114$i = ($28|0)==($v$0$i|0);
         $arrayidx121$i = ((($19)) + 20|0);
         $arrayidx121$i$sink = $cmp114$i ? $arrayidx113$i : $arrayidx121$i;
         HEAP32[$arrayidx121$i$sink>>2] = $R$3$i;
         $cmp126$i = ($R$3$i|0)==(0|0);
         if ($cmp126$i) {
          break;
         }
        }
        $parent135$i = ((($R$3$i)) + 24|0);
        HEAP32[$parent135$i>>2] = $19;
        $arrayidx137$i = ((($v$0$i)) + 16|0);
        $29 = HEAP32[$arrayidx137$i>>2]|0;
        $cmp138$i = ($29|0)==(0|0);
        if (!($cmp138$i)) {
         $arrayidx148$i = ((($R$3$i)) + 16|0);
         HEAP32[$arrayidx148$i>>2] = $29;
         $parent149$i = ((($29)) + 24|0);
         HEAP32[$parent149$i>>2] = $R$3$i;
        }
        $arrayidx154$i = ((($v$0$i)) + 20|0);
        $30 = HEAP32[$arrayidx154$i>>2]|0;
        $cmp155$i = ($30|0)==(0|0);
        if (!($cmp155$i)) {
         $arrayidx165$i = ((($R$3$i)) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $30;
         $parent166$i = ((($30)) + 24|0);
         HEAP32[$parent166$i>>2] = $R$3$i;
        }
       }
      } while(0);
      $cmp174$i = ($rsize$0$i>>>0)<(16);
      if ($cmp174$i) {
       $add177$i = (($rsize$0$i) + ($cond))|0;
       $or178$i = $add177$i | 3;
       $head179$i = ((($v$0$i)) + 4|0);
       HEAP32[$head179$i>>2] = $or178$i;
       $add$ptr181$i = (($v$0$i) + ($add177$i)|0);
       $head182$i = ((($add$ptr181$i)) + 4|0);
       $31 = HEAP32[$head182$i>>2]|0;
       $or183$i = $31 | 1;
       HEAP32[$head182$i>>2] = $or183$i;
      } else {
       $or186$i = $cond | 3;
       $head187$i = ((($v$0$i)) + 4|0);
       HEAP32[$head187$i>>2] = $or186$i;
       $or188$i = $rsize$0$i | 1;
       $head189$i = ((($add$ptr$i)) + 4|0);
       HEAP32[$head189$i>>2] = $or188$i;
       $add$ptr190$i = (($add$ptr$i) + ($rsize$0$i)|0);
       HEAP32[$add$ptr190$i>>2] = $rsize$0$i;
       $cmp191$i = ($5|0)==(0);
       if (!($cmp191$i)) {
        $32 = HEAP32[(576520)>>2]|0;
        $shr194$i = $5 >>> 3;
        $shl195$i = $shr194$i << 1;
        $arrayidx196$i = (576540 + ($shl195$i<<2)|0);
        $shl198$i = 1 << $shr194$i;
        $and199$i = $shl198$i & $0;
        $tobool200$i = ($and199$i|0)==(0);
        if ($tobool200$i) {
         $or204$i = $shl198$i | $0;
         HEAP32[144125] = $or204$i;
         $$pre$i = ((($arrayidx196$i)) + 8|0);
         $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
        } else {
         $33 = ((($arrayidx196$i)) + 8|0);
         $34 = HEAP32[$33>>2]|0;
         $$pre$phi$iZ2D = $33;$F197$0$i = $34;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $32;
        $bk218$i = ((($F197$0$i)) + 12|0);
        HEAP32[$bk218$i>>2] = $32;
        $fd219$i = ((($32)) + 8|0);
        HEAP32[$fd219$i>>2] = $F197$0$i;
        $bk220$i = ((($32)) + 12|0);
        HEAP32[$bk220$i>>2] = $arrayidx196$i;
       }
       HEAP32[(576508)>>2] = $rsize$0$i;
       HEAP32[(576520)>>2] = $add$ptr$i;
      }
      $add$ptr225$i = ((($v$0$i)) + 8|0);
      $retval$0 = $add$ptr225$i;
      STACKTOP = sp;return ($retval$0|0);
     } else {
      $nb$0 = $cond;
     }
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp139 = ($bytes>>>0)>(4294967231);
   if ($cmp139) {
    $nb$0 = -1;
   } else {
    $add144 = (($bytes) + 11)|0;
    $and145 = $add144 & -8;
    $35 = HEAP32[(576504)>>2]|0;
    $cmp146 = ($35|0)==(0);
    if ($cmp146) {
     $nb$0 = $and145;
    } else {
     $sub$i147 = (0 - ($and145))|0;
     $shr$i148 = $add144 >>> 8;
     $cmp$i149 = ($shr$i148|0)==(0);
     if ($cmp$i149) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and145>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i148) + 1048320)|0;
       $shr5$i151 = $sub4$i >>> 16;
       $and$i152 = $shr5$i151 & 8;
       $shl$i153 = $shr$i148 << $and$i152;
       $sub6$i = (($shl$i153) + 520192)|0;
       $shr7$i154 = $sub6$i >>> 16;
       $and8$i = $shr7$i154 & 4;
       $add$i155 = $and8$i | $and$i152;
       $shl9$i = $shl$i153 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i156 = $sub10$i >>> 16;
       $and12$i = $shr11$i156 & 2;
       $add13$i = $add$i155 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i157 = $shl15$i >>> 15;
       $add17$i158 = (($sub14$i) + ($shr16$i157))|0;
       $shl18$i = $add17$i158 << 1;
       $add19$i = (($add17$i158) + 7)|0;
       $shr20$i = $and145 >>> $add19$i;
       $and21$i159 = $shr20$i & 1;
       $add22$i = $and21$i159 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i160 = (576804 + ($idx$0$i<<2)|0);
     $36 = HEAP32[$arrayidx$i160>>2]|0;
     $cmp24$i = ($36|0)==(0|0);
     L79: do {
      if ($cmp24$i) {
       $rsize$3$i = $sub$i147;$t$2$i = 0;$v$3$i = 0;
       label = 61;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       $shr27$i = $idx$0$i >>> 1;
       $sub30$i = (25 - ($shr27$i))|0;
       $cond$i = $cmp26$i ? 0 : $sub30$i;
       $shl31$i = $and145 << $cond$i;
       $rsize$0$i162 = $sub$i147;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i161 = $36;$v$0$i163 = 0;
       while(1) {
        $head$i164 = ((($t$0$i161)) + 4|0);
        $37 = HEAP32[$head$i164>>2]|0;
        $and32$i = $37 & -8;
        $sub33$i = (($and32$i) - ($and145))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i162>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($sub33$i|0)==(0);
         if ($cmp36$i) {
          $rsize$418$i$ph = 0;$t$517$i$ph = $t$0$i161;$v$419$i$ph = $t$0$i161;
          label = 65;
          break L79;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i161;
         }
        } else {
         $rsize$1$i = $rsize$0$i162;$v$1$i = $v$0$i163;
        }
        $arrayidx40$i = ((($t$0$i161)) + 20|0);
        $38 = HEAP32[$arrayidx40$i>>2]|0;
        $shr42$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = (((($t$0$i161)) + 16|0) + ($shr42$i<<2)|0);
        $39 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i = ($38|0)==(0|0);
        $cmp46$i = ($38|0)==($39|0);
        $or$cond1$i165 = $cmp45$i | $cmp46$i;
        $rst$1$i = $or$cond1$i165 ? $rst$0$i : $38;
        $cmp49$i = ($39|0)==(0|0);
        $spec$select5$i = $sizebits$0$i << 1;
        if ($cmp49$i) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 61;
         break;
        } else {
         $rsize$0$i162 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $spec$select5$i;$t$0$i161 = $39;$v$0$i163 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $cmp55$i166 = ($t$2$i|0)==(0|0);
      $cmp57$i167 = ($v$3$i|0)==(0|0);
      $or$cond$i168 = $cmp55$i166 & $cmp57$i167;
      if ($or$cond$i168) {
       $shl60$i = 2 << $idx$0$i;
       $sub63$i = (0 - ($shl60$i))|0;
       $or$i169 = $shl60$i | $sub63$i;
       $and64$i = $or$i169 & $35;
       $cmp65$i = ($and64$i|0)==(0);
       if ($cmp65$i) {
        $nb$0 = $and145;
        break;
       }
       $sub67$i = (0 - ($and64$i))|0;
       $and68$i = $and64$i & $sub67$i;
       $sub70$i = (($and68$i) + -1)|0;
       $shr72$i = $sub70$i >>> 12;
       $and73$i = $shr72$i & 16;
       $shr75$i = $sub70$i >>> $and73$i;
       $shr76$i = $shr75$i >>> 5;
       $and77$i = $shr76$i & 8;
       $add78$i = $and77$i | $and73$i;
       $shr79$i = $shr75$i >>> $and77$i;
       $shr80$i = $shr79$i >>> 2;
       $and81$i = $shr80$i & 4;
       $add82$i = $add78$i | $and81$i;
       $shr83$i = $shr79$i >>> $and81$i;
       $shr84$i = $shr83$i >>> 1;
       $and85$i = $shr84$i & 2;
       $add86$i = $add82$i | $and85$i;
       $shr87$i = $shr83$i >>> $and85$i;
       $shr88$i = $shr87$i >>> 1;
       $and89$i = $shr88$i & 1;
       $add90$i = $add86$i | $and89$i;
       $shr91$i = $shr87$i >>> $and89$i;
       $add92$i = (($add90$i) + ($shr91$i))|0;
       $arrayidx94$i170 = (576804 + ($add92$i<<2)|0);
       $40 = HEAP32[$arrayidx94$i170>>2]|0;
       $t$4$i = $40;$v$3$i204 = 0;
      } else {
       $t$4$i = $t$2$i;$v$3$i204 = $v$3$i;
      }
      $cmp9716$i = ($t$4$i|0)==(0|0);
      if ($cmp9716$i) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i204;
      } else {
       $rsize$418$i$ph = $rsize$3$i;$t$517$i$ph = $t$4$i;$v$419$i$ph = $v$3$i204;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $rsize$418$i = $rsize$418$i$ph;$t$517$i = $t$517$i$ph;$v$419$i = $v$419$i$ph;
      while(1) {
       $head99$i = ((($t$517$i)) + 4|0);
       $41 = HEAP32[$head99$i>>2]|0;
       $and100$i = $41 & -8;
       $sub101$i = (($and100$i) - ($and145))|0;
       $cmp102$i = ($sub101$i>>>0)<($rsize$418$i>>>0);
       $spec$select$i171 = $cmp102$i ? $sub101$i : $rsize$418$i;
       $spec$select2$i = $cmp102$i ? $t$517$i : $v$419$i;
       $arrayidx106$i = ((($t$517$i)) + 16|0);
       $42 = HEAP32[$arrayidx106$i>>2]|0;
       $cmp107$i = ($42|0)==(0|0);
       if ($cmp107$i) {
        $arrayidx113$i173 = ((($t$517$i)) + 20|0);
        $43 = HEAP32[$arrayidx113$i173>>2]|0;
        $cond115$i = $43;
       } else {
        $cond115$i = $42;
       }
       $cmp97$i = ($cond115$i|0)==(0|0);
       if ($cmp97$i) {
        $rsize$4$lcssa$i = $spec$select$i171;$v$4$lcssa$i = $spec$select2$i;
        break;
       } else {
        $rsize$418$i = $spec$select$i171;$t$517$i = $cond115$i;$v$419$i = $spec$select2$i;
       }
      }
     }
     $cmp116$i = ($v$4$lcssa$i|0)==(0|0);
     if ($cmp116$i) {
      $nb$0 = $and145;
     } else {
      $44 = HEAP32[(576508)>>2]|0;
      $sub118$i = (($44) - ($and145))|0;
      $cmp119$i = ($rsize$4$lcssa$i>>>0)<($sub118$i>>>0);
      if ($cmp119$i) {
       $add$ptr$i174 = (($v$4$lcssa$i) + ($and145)|0);
       $cmp123$i = ($add$ptr$i174>>>0)>($v$4$lcssa$i>>>0);
       if ($cmp123$i) {
        $parent$i175 = ((($v$4$lcssa$i)) + 24|0);
        $45 = HEAP32[$parent$i175>>2]|0;
        $bk$i176 = ((($v$4$lcssa$i)) + 12|0);
        $46 = HEAP32[$bk$i176>>2]|0;
        $cmp128$i = ($46|0)==($v$4$lcssa$i|0);
        do {
         if ($cmp128$i) {
          $arrayidx151$i = ((($v$4$lcssa$i)) + 20|0);
          $48 = HEAP32[$arrayidx151$i>>2]|0;
          $cmp152$i = ($48|0)==(0|0);
          if ($cmp152$i) {
           $arrayidx155$i = ((($v$4$lcssa$i)) + 16|0);
           $49 = HEAP32[$arrayidx155$i>>2]|0;
           $cmp156$i = ($49|0)==(0|0);
           if ($cmp156$i) {
            $R$3$i188 = 0;
            break;
           } else {
            $R$1$i183$ph = $49;$RP$1$i182$ph = $arrayidx155$i;
           }
          } else {
           $R$1$i183$ph = $48;$RP$1$i182$ph = $arrayidx151$i;
          }
          $R$1$i183 = $R$1$i183$ph;$RP$1$i182 = $RP$1$i182$ph;
          while(1) {
           $arrayidx161$i = ((($R$1$i183)) + 20|0);
           $50 = HEAP32[$arrayidx161$i>>2]|0;
           $cmp162$i184 = ($50|0)==(0|0);
           if ($cmp162$i184) {
            $arrayidx165$i185 = ((($R$1$i183)) + 16|0);
            $51 = HEAP32[$arrayidx165$i185>>2]|0;
            $cmp166$i = ($51|0)==(0|0);
            if ($cmp166$i) {
             break;
            } else {
             $R$1$i183$be = $51;$RP$1$i182$be = $arrayidx165$i185;
            }
           } else {
            $R$1$i183$be = $50;$RP$1$i182$be = $arrayidx161$i;
           }
           $R$1$i183 = $R$1$i183$be;$RP$1$i182 = $RP$1$i182$be;
          }
          HEAP32[$RP$1$i182>>2] = 0;
          $R$3$i188 = $R$1$i183;
         } else {
          $fd$i177 = ((($v$4$lcssa$i)) + 8|0);
          $47 = HEAP32[$fd$i177>>2]|0;
          $bk145$i = ((($47)) + 12|0);
          HEAP32[$bk145$i>>2] = $46;
          $fd146$i = ((($46)) + 8|0);
          HEAP32[$fd146$i>>2] = $47;
          $R$3$i188 = $46;
         }
        } while(0);
        $cmp180$i = ($45|0)==(0|0);
        do {
         if ($cmp180$i) {
          $61 = $35;
         } else {
          $index$i189 = ((($v$4$lcssa$i)) + 28|0);
          $52 = HEAP32[$index$i189>>2]|0;
          $arrayidx184$i = (576804 + ($52<<2)|0);
          $53 = HEAP32[$arrayidx184$i>>2]|0;
          $cmp185$i = ($v$4$lcssa$i|0)==($53|0);
          if ($cmp185$i) {
           HEAP32[$arrayidx184$i>>2] = $R$3$i188;
           $cond3$i = ($R$3$i188|0)==(0|0);
           if ($cond3$i) {
            $shl192$i = 1 << $52;
            $neg$i190 = $shl192$i ^ -1;
            $and194$i191 = $35 & $neg$i190;
            HEAP32[(576504)>>2] = $and194$i191;
            $61 = $and194$i191;
            break;
           }
          } else {
           $arrayidx204$i = ((($45)) + 16|0);
           $54 = HEAP32[$arrayidx204$i>>2]|0;
           $cmp205$i = ($54|0)==($v$4$lcssa$i|0);
           $arrayidx212$i = ((($45)) + 20|0);
           $arrayidx212$i$sink = $cmp205$i ? $arrayidx204$i : $arrayidx212$i;
           HEAP32[$arrayidx212$i$sink>>2] = $R$3$i188;
           $cmp217$i = ($R$3$i188|0)==(0|0);
           if ($cmp217$i) {
            $61 = $35;
            break;
           }
          }
          $parent226$i = ((($R$3$i188)) + 24|0);
          HEAP32[$parent226$i>>2] = $45;
          $arrayidx228$i = ((($v$4$lcssa$i)) + 16|0);
          $55 = HEAP32[$arrayidx228$i>>2]|0;
          $cmp229$i = ($55|0)==(0|0);
          if (!($cmp229$i)) {
           $arrayidx239$i = ((($R$3$i188)) + 16|0);
           HEAP32[$arrayidx239$i>>2] = $55;
           $parent240$i = ((($55)) + 24|0);
           HEAP32[$parent240$i>>2] = $R$3$i188;
          }
          $arrayidx245$i = ((($v$4$lcssa$i)) + 20|0);
          $56 = HEAP32[$arrayidx245$i>>2]|0;
          $cmp246$i = ($56|0)==(0|0);
          if ($cmp246$i) {
           $61 = $35;
          } else {
           $arrayidx256$i = ((($R$3$i188)) + 20|0);
           HEAP32[$arrayidx256$i>>2] = $56;
           $parent257$i = ((($56)) + 24|0);
           HEAP32[$parent257$i>>2] = $R$3$i188;
           $61 = $35;
          }
         }
        } while(0);
        $cmp265$i = ($rsize$4$lcssa$i>>>0)<(16);
        L128: do {
         if ($cmp265$i) {
          $add268$i = (($rsize$4$lcssa$i) + ($and145))|0;
          $or270$i = $add268$i | 3;
          $head271$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head271$i>>2] = $or270$i;
          $add$ptr273$i = (($v$4$lcssa$i) + ($add268$i)|0);
          $head274$i = ((($add$ptr273$i)) + 4|0);
          $57 = HEAP32[$head274$i>>2]|0;
          $or275$i = $57 | 1;
          HEAP32[$head274$i>>2] = $or275$i;
         } else {
          $or278$i = $and145 | 3;
          $head279$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head279$i>>2] = $or278$i;
          $or280$i = $rsize$4$lcssa$i | 1;
          $head281$i = ((($add$ptr$i174)) + 4|0);
          HEAP32[$head281$i>>2] = $or280$i;
          $add$ptr282$i = (($add$ptr$i174) + ($rsize$4$lcssa$i)|0);
          HEAP32[$add$ptr282$i>>2] = $rsize$4$lcssa$i;
          $shr283$i = $rsize$4$lcssa$i >>> 3;
          $cmp284$i = ($rsize$4$lcssa$i>>>0)<(256);
          if ($cmp284$i) {
           $shl288$i = $shr283$i << 1;
           $arrayidx289$i = (576540 + ($shl288$i<<2)|0);
           $58 = HEAP32[144125]|0;
           $shl291$i = 1 << $shr283$i;
           $and292$i = $58 & $shl291$i;
           $tobool293$i = ($and292$i|0)==(0);
           if ($tobool293$i) {
            $or297$i = $58 | $shl291$i;
            HEAP32[144125] = $or297$i;
            $$pre$i194 = ((($arrayidx289$i)) + 8|0);
            $$pre$phi$i195Z2D = $$pre$i194;$F290$0$i = $arrayidx289$i;
           } else {
            $59 = ((($arrayidx289$i)) + 8|0);
            $60 = HEAP32[$59>>2]|0;
            $$pre$phi$i195Z2D = $59;$F290$0$i = $60;
           }
           HEAP32[$$pre$phi$i195Z2D>>2] = $add$ptr$i174;
           $bk311$i = ((($F290$0$i)) + 12|0);
           HEAP32[$bk311$i>>2] = $add$ptr$i174;
           $fd312$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd312$i>>2] = $F290$0$i;
           $bk313$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk313$i>>2] = $arrayidx289$i;
           break;
          }
          $shr318$i = $rsize$4$lcssa$i >>> 8;
          $cmp319$i = ($shr318$i|0)==(0);
          if ($cmp319$i) {
           $I316$0$i = 0;
          } else {
           $cmp323$i = ($rsize$4$lcssa$i>>>0)>(16777215);
           if ($cmp323$i) {
            $I316$0$i = 31;
           } else {
            $sub329$i = (($shr318$i) + 1048320)|0;
            $shr330$i = $sub329$i >>> 16;
            $and331$i = $shr330$i & 8;
            $shl333$i = $shr318$i << $and331$i;
            $sub334$i = (($shl333$i) + 520192)|0;
            $shr335$i = $sub334$i >>> 16;
            $and336$i = $shr335$i & 4;
            $add337$i = $and336$i | $and331$i;
            $shl338$i = $shl333$i << $and336$i;
            $sub339$i = (($shl338$i) + 245760)|0;
            $shr340$i = $sub339$i >>> 16;
            $and341$i = $shr340$i & 2;
            $add342$i = $add337$i | $and341$i;
            $sub343$i = (14 - ($add342$i))|0;
            $shl344$i = $shl338$i << $and341$i;
            $shr345$i = $shl344$i >>> 15;
            $add346$i = (($sub343$i) + ($shr345$i))|0;
            $shl347$i = $add346$i << 1;
            $add348$i = (($add346$i) + 7)|0;
            $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
            $and350$i = $shr349$i & 1;
            $add351$i = $and350$i | $shl347$i;
            $I316$0$i = $add351$i;
           }
          }
          $arrayidx355$i = (576804 + ($I316$0$i<<2)|0);
          $index356$i = ((($add$ptr$i174)) + 28|0);
          HEAP32[$index356$i>>2] = $I316$0$i;
          $child357$i = ((($add$ptr$i174)) + 16|0);
          $arrayidx358$i = ((($child357$i)) + 4|0);
          HEAP32[$arrayidx358$i>>2] = 0;
          HEAP32[$child357$i>>2] = 0;
          $shl362$i = 1 << $I316$0$i;
          $and363$i = $61 & $shl362$i;
          $tobool364$i = ($and363$i|0)==(0);
          if ($tobool364$i) {
           $or368$i = $61 | $shl362$i;
           HEAP32[(576504)>>2] = $or368$i;
           HEAP32[$arrayidx355$i>>2] = $add$ptr$i174;
           $parent369$i = ((($add$ptr$i174)) + 24|0);
           HEAP32[$parent369$i>>2] = $arrayidx355$i;
           $bk370$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk370$i>>2] = $add$ptr$i174;
           $fd371$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd371$i>>2] = $add$ptr$i174;
           break;
          }
          $62 = HEAP32[$arrayidx355$i>>2]|0;
          $head38611$i = ((($62)) + 4|0);
          $63 = HEAP32[$head38611$i>>2]|0;
          $and38712$i = $63 & -8;
          $cmp38813$i = ($and38712$i|0)==($rsize$4$lcssa$i|0);
          L145: do {
           if ($cmp38813$i) {
            $T$0$lcssa$i = $62;
           } else {
            $cmp374$i = ($I316$0$i|0)==(31);
            $shr378$i = $I316$0$i >>> 1;
            $sub381$i = (25 - ($shr378$i))|0;
            $cond383$i = $cmp374$i ? 0 : $sub381$i;
            $shl384$i = $rsize$4$lcssa$i << $cond383$i;
            $K373$015$i = $shl384$i;$T$014$i = $62;
            while(1) {
             $shr392$i = $K373$015$i >>> 31;
             $arrayidx394$i = (((($T$014$i)) + 16|0) + ($shr392$i<<2)|0);
             $64 = HEAP32[$arrayidx394$i>>2]|0;
             $cmp396$i = ($64|0)==(0|0);
             if ($cmp396$i) {
              break;
             }
             $shl395$i = $K373$015$i << 1;
             $head386$i = ((($64)) + 4|0);
             $65 = HEAP32[$head386$i>>2]|0;
             $and387$i = $65 & -8;
             $cmp388$i = ($and387$i|0)==($rsize$4$lcssa$i|0);
             if ($cmp388$i) {
              $T$0$lcssa$i = $64;
              break L145;
             } else {
              $K373$015$i = $shl395$i;$T$014$i = $64;
             }
            }
            HEAP32[$arrayidx394$i>>2] = $add$ptr$i174;
            $parent406$i = ((($add$ptr$i174)) + 24|0);
            HEAP32[$parent406$i>>2] = $T$014$i;
            $bk407$i = ((($add$ptr$i174)) + 12|0);
            HEAP32[$bk407$i>>2] = $add$ptr$i174;
            $fd408$i = ((($add$ptr$i174)) + 8|0);
            HEAP32[$fd408$i>>2] = $add$ptr$i174;
            break L128;
           }
          } while(0);
          $fd416$i = ((($T$0$lcssa$i)) + 8|0);
          $66 = HEAP32[$fd416$i>>2]|0;
          $bk429$i = ((($66)) + 12|0);
          HEAP32[$bk429$i>>2] = $add$ptr$i174;
          HEAP32[$fd416$i>>2] = $add$ptr$i174;
          $fd431$i = ((($add$ptr$i174)) + 8|0);
          HEAP32[$fd431$i>>2] = $66;
          $bk432$i = ((($add$ptr$i174)) + 12|0);
          HEAP32[$bk432$i>>2] = $T$0$lcssa$i;
          $parent433$i = ((($add$ptr$i174)) + 24|0);
          HEAP32[$parent433$i>>2] = 0;
         }
        } while(0);
        $add$ptr441$i = ((($v$4$lcssa$i)) + 8|0);
        $retval$0 = $add$ptr441$i;
        STACKTOP = sp;return ($retval$0|0);
       } else {
        $nb$0 = $and145;
       }
      } else {
       $nb$0 = $and145;
      }
     }
    }
   }
  }
 } while(0);
 $67 = HEAP32[(576508)>>2]|0;
 $cmp156 = ($67>>>0)<($nb$0>>>0);
 if (!($cmp156)) {
  $sub160 = (($67) - ($nb$0))|0;
  $68 = HEAP32[(576520)>>2]|0;
  $cmp162 = ($sub160>>>0)>(15);
  if ($cmp162) {
   $add$ptr166 = (($68) + ($nb$0)|0);
   HEAP32[(576520)>>2] = $add$ptr166;
   HEAP32[(576508)>>2] = $sub160;
   $or167 = $sub160 | 1;
   $head168 = ((($add$ptr166)) + 4|0);
   HEAP32[$head168>>2] = $or167;
   $add$ptr169 = (($68) + ($67)|0);
   HEAP32[$add$ptr169>>2] = $sub160;
   $or172 = $nb$0 | 3;
   $head173 = ((($68)) + 4|0);
   HEAP32[$head173>>2] = $or172;
  } else {
   HEAP32[(576508)>>2] = 0;
   HEAP32[(576520)>>2] = 0;
   $or176 = $67 | 3;
   $head177 = ((($68)) + 4|0);
   HEAP32[$head177>>2] = $or176;
   $add$ptr178 = (($68) + ($67)|0);
   $head179 = ((($add$ptr178)) + 4|0);
   $69 = HEAP32[$head179>>2]|0;
   $or180 = $69 | 1;
   HEAP32[$head179>>2] = $or180;
  }
  $add$ptr182 = ((($68)) + 8|0);
  $retval$0 = $add$ptr182;
  STACKTOP = sp;return ($retval$0|0);
 }
 $70 = HEAP32[(576512)>>2]|0;
 $cmp186 = ($70>>>0)>($nb$0>>>0);
 if ($cmp186) {
  $sub190 = (($70) - ($nb$0))|0;
  HEAP32[(576512)>>2] = $sub190;
  $71 = HEAP32[(576524)>>2]|0;
  $add$ptr193 = (($71) + ($nb$0)|0);
  HEAP32[(576524)>>2] = $add$ptr193;
  $or194 = $sub190 | 1;
  $head195 = ((($add$ptr193)) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $or197 = $nb$0 | 3;
  $head198 = ((($71)) + 4|0);
  HEAP32[$head198>>2] = $or197;
  $add$ptr199 = ((($71)) + 8|0);
  $retval$0 = $add$ptr199;
  STACKTOP = sp;return ($retval$0|0);
 }
 $72 = HEAP32[144243]|0;
 $cmp$i133 = ($72|0)==(0);
 if ($cmp$i133) {
  HEAP32[(576980)>>2] = 4096;
  HEAP32[(576976)>>2] = 4096;
  HEAP32[(576984)>>2] = -1;
  HEAP32[(576988)>>2] = -1;
  HEAP32[(576992)>>2] = 0;
  HEAP32[(576944)>>2] = 0;
  $73 = $magic$i$i;
  $xor$i$i = $73 & -16;
  $and6$i$i = $xor$i$i ^ 1431655768;
  HEAP32[144243] = $and6$i$i;
  $74 = 4096;
 } else {
  $$pre$i134 = HEAP32[(576980)>>2]|0;
  $74 = $$pre$i134;
 }
 $add$i135 = (($nb$0) + 48)|0;
 $sub$i136 = (($nb$0) + 47)|0;
 $add9$i = (($74) + ($sub$i136))|0;
 $neg$i137 = (0 - ($74))|0;
 $and11$i = $add9$i & $neg$i137;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $75 = HEAP32[(576940)>>2]|0;
 $cmp15$i = ($75|0)==(0);
 if (!($cmp15$i)) {
  $76 = HEAP32[(576932)>>2]|0;
  $add17$i = (($76) + ($and11$i))|0;
  $cmp19$i = ($add17$i>>>0)<=($76>>>0);
  $cmp21$i = ($add17$i>>>0)>($75>>>0);
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $77 = HEAP32[(576944)>>2]|0;
 $and29$i = $77 & 4;
 $tobool30$i = ($and29$i|0)==(0);
 L178: do {
  if ($tobool30$i) {
   $78 = HEAP32[(576524)>>2]|0;
   $cmp32$i138 = ($78|0)==(0|0);
   L180: do {
    if ($cmp32$i138) {
     label = 128;
    } else {
     $sp$0$i$i = (576948);
     while(1) {
      $79 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i55$i = ($79>>>0)>($78>>>0);
      if (!($cmp$i55$i)) {
       $size$i$i = ((($sp$0$i$i)) + 4|0);
       $80 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i57$i = (($79) + ($80)|0);
       $cmp2$i$i = ($add$ptr$i57$i>>>0)>($78>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = ((($sp$0$i$i)) + 8|0);
      $81 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($81|0)==(0|0);
      if ($cmp3$i$i) {
       label = 128;
       break L180;
      } else {
       $sp$0$i$i = $81;
      }
     }
     $add77$i = (($add9$i) - ($70))|0;
     $and80$i = $add77$i & $neg$i137;
     $cmp81$i = ($and80$i>>>0)<(2147483647);
     if ($cmp81$i) {
      $size$i$i$le = ((($sp$0$i$i)) + 4|0);
      $call83$i = (_sbrk(($and80$i|0))|0);
      $86 = HEAP32[$sp$0$i$i>>2]|0;
      $87 = HEAP32[$size$i$i$le>>2]|0;
      $add$ptr$i141 = (($86) + ($87)|0);
      $cmp85$i = ($call83$i|0)==($add$ptr$i141|0);
      if ($cmp85$i) {
       $cmp89$i = ($call83$i|0)==((-1)|0);
       if ($cmp89$i) {
        $tsize$2647482$i = $and80$i;
       } else {
        $tbase$795$i = $call83$i;$tsize$794$i = $and80$i;
        label = 145;
        break L178;
       }
      } else {
       $br$2$ph$i = $call83$i;$ssize$2$ph$i = $and80$i;
       label = 136;
      }
     } else {
      $tsize$2647482$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $call37$i = (_sbrk(0)|0);
     $cmp38$i = ($call37$i|0)==((-1)|0);
     if ($cmp38$i) {
      $tsize$2647482$i = 0;
     } else {
      $82 = $call37$i;
      $83 = HEAP32[(576976)>>2]|0;
      $sub41$i = (($83) + -1)|0;
      $and42$i = $sub41$i & $82;
      $cmp43$i = ($and42$i|0)==(0);
      $add46$i = (($sub41$i) + ($82))|0;
      $neg48$i = (0 - ($83))|0;
      $and49$i = $add46$i & $neg48$i;
      $sub50$i = (($and49$i) - ($82))|0;
      $add51$i = $cmp43$i ? 0 : $sub50$i;
      $spec$select96$i = (($add51$i) + ($and11$i))|0;
      $84 = HEAP32[(576932)>>2]|0;
      $add54$i = (($spec$select96$i) + ($84))|0;
      $cmp55$i = ($spec$select96$i>>>0)>($nb$0>>>0);
      $cmp57$i = ($spec$select96$i>>>0)<(2147483647);
      $or$cond$i = $cmp55$i & $cmp57$i;
      if ($or$cond$i) {
       $85 = HEAP32[(576940)>>2]|0;
       $cmp60$i = ($85|0)==(0);
       if (!($cmp60$i)) {
        $cmp63$i = ($add54$i>>>0)<=($84>>>0);
        $cmp66$i140 = ($add54$i>>>0)>($85>>>0);
        $or$cond2$i = $cmp63$i | $cmp66$i140;
        if ($or$cond2$i) {
         $tsize$2647482$i = 0;
         break;
        }
       }
       $call68$i = (_sbrk(($spec$select96$i|0))|0);
       $cmp69$i = ($call68$i|0)==($call37$i|0);
       if ($cmp69$i) {
        $tbase$795$i = $call37$i;$tsize$794$i = $spec$select96$i;
        label = 145;
        break L178;
       } else {
        $br$2$ph$i = $call68$i;$ssize$2$ph$i = $spec$select96$i;
        label = 136;
       }
      } else {
       $tsize$2647482$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $sub112$i = (0 - ($ssize$2$ph$i))|0;
     $cmp91$i = ($br$2$ph$i|0)!=((-1)|0);
     $cmp93$i = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond5$i = $cmp93$i & $cmp91$i;
     $cmp96$i = ($add$i135>>>0)>($ssize$2$ph$i>>>0);
     $or$cond7$i = $cmp96$i & $or$cond5$i;
     if (!($or$cond7$i)) {
      $cmp118$i = ($br$2$ph$i|0)==((-1)|0);
      if ($cmp118$i) {
       $tsize$2647482$i = 0;
       break;
      } else {
       $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
       label = 145;
       break L178;
      }
     }
     $88 = HEAP32[(576980)>>2]|0;
     $sub99$i = (($sub$i136) - ($ssize$2$ph$i))|0;
     $add101$i = (($sub99$i) + ($88))|0;
     $neg103$i = (0 - ($88))|0;
     $and104$i = $add101$i & $neg103$i;
     $cmp105$i = ($and104$i>>>0)<(2147483647);
     if (!($cmp105$i)) {
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
      label = 145;
      break L178;
     }
     $call107$i = (_sbrk(($and104$i|0))|0);
     $cmp108$i = ($call107$i|0)==((-1)|0);
     if ($cmp108$i) {
      (_sbrk(($sub112$i|0))|0);
      $tsize$2647482$i = 0;
      break;
     } else {
      $add110$i = (($and104$i) + ($ssize$2$ph$i))|0;
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $add110$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $89 = HEAP32[(576944)>>2]|0;
   $or$i = $89 | 4;
   HEAP32[(576944)>>2] = $or$i;
   $tsize$4$i = $tsize$2647482$i;
   label = 143;
  } else {
   $tsize$4$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $cmp127$i = ($and11$i>>>0)<(2147483647);
  if ($cmp127$i) {
   $call131$i = (_sbrk(($and11$i|0))|0);
   $call132$i = (_sbrk(0)|0);
   $cmp133$i = ($call131$i|0)!=((-1)|0);
   $cmp135$i = ($call132$i|0)!=((-1)|0);
   $or$cond4$i = $cmp133$i & $cmp135$i;
   $cmp137$i = ($call131$i>>>0)<($call132$i>>>0);
   $or$cond8$i = $cmp137$i & $or$cond4$i;
   $sub$ptr$lhs$cast$i = $call132$i;
   $sub$ptr$rhs$cast$i = $call131$i;
   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
   $add140$i = (($nb$0) + 40)|0;
   $cmp141$i = ($sub$ptr$sub$i>>>0)>($add140$i>>>0);
   $spec$select9$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $cmp14799$i = ($call131$i|0)==((-1)|0);
   $not$cmp141$i = $cmp141$i ^ 1;
   $cmp147$i = $cmp14799$i | $not$cmp141$i;
   $or$cond97$i = $cmp147$i | $or$cond8$not$i;
   if (!($or$cond97$i)) {
    $tbase$795$i = $call131$i;$tsize$794$i = $spec$select9$i;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $90 = HEAP32[(576932)>>2]|0;
  $add150$i = (($90) + ($tsize$794$i))|0;
  HEAP32[(576932)>>2] = $add150$i;
  $91 = HEAP32[(576936)>>2]|0;
  $cmp151$i = ($add150$i>>>0)>($91>>>0);
  if ($cmp151$i) {
   HEAP32[(576936)>>2] = $add150$i;
  }
  $92 = HEAP32[(576524)>>2]|0;
  $cmp157$i = ($92|0)==(0|0);
  L215: do {
   if ($cmp157$i) {
    $93 = HEAP32[(576516)>>2]|0;
    $cmp159$i = ($93|0)==(0|0);
    $cmp162$i = ($tbase$795$i>>>0)<($93>>>0);
    $or$cond11$i = $cmp159$i | $cmp162$i;
    if ($or$cond11$i) {
     HEAP32[(576516)>>2] = $tbase$795$i;
    }
    HEAP32[(576948)>>2] = $tbase$795$i;
    HEAP32[(576952)>>2] = $tsize$794$i;
    HEAP32[(576960)>>2] = 0;
    $94 = HEAP32[144243]|0;
    HEAP32[(576536)>>2] = $94;
    HEAP32[(576532)>>2] = -1;
    HEAP32[(576552)>>2] = (576540);
    HEAP32[(576548)>>2] = (576540);
    HEAP32[(576560)>>2] = (576548);
    HEAP32[(576556)>>2] = (576548);
    HEAP32[(576568)>>2] = (576556);
    HEAP32[(576564)>>2] = (576556);
    HEAP32[(576576)>>2] = (576564);
    HEAP32[(576572)>>2] = (576564);
    HEAP32[(576584)>>2] = (576572);
    HEAP32[(576580)>>2] = (576572);
    HEAP32[(576592)>>2] = (576580);
    HEAP32[(576588)>>2] = (576580);
    HEAP32[(576600)>>2] = (576588);
    HEAP32[(576596)>>2] = (576588);
    HEAP32[(576608)>>2] = (576596);
    HEAP32[(576604)>>2] = (576596);
    HEAP32[(576616)>>2] = (576604);
    HEAP32[(576612)>>2] = (576604);
    HEAP32[(576624)>>2] = (576612);
    HEAP32[(576620)>>2] = (576612);
    HEAP32[(576632)>>2] = (576620);
    HEAP32[(576628)>>2] = (576620);
    HEAP32[(576640)>>2] = (576628);
    HEAP32[(576636)>>2] = (576628);
    HEAP32[(576648)>>2] = (576636);
    HEAP32[(576644)>>2] = (576636);
    HEAP32[(576656)>>2] = (576644);
    HEAP32[(576652)>>2] = (576644);
    HEAP32[(576664)>>2] = (576652);
    HEAP32[(576660)>>2] = (576652);
    HEAP32[(576672)>>2] = (576660);
    HEAP32[(576668)>>2] = (576660);
    HEAP32[(576680)>>2] = (576668);
    HEAP32[(576676)>>2] = (576668);
    HEAP32[(576688)>>2] = (576676);
    HEAP32[(576684)>>2] = (576676);
    HEAP32[(576696)>>2] = (576684);
    HEAP32[(576692)>>2] = (576684);
    HEAP32[(576704)>>2] = (576692);
    HEAP32[(576700)>>2] = (576692);
    HEAP32[(576712)>>2] = (576700);
    HEAP32[(576708)>>2] = (576700);
    HEAP32[(576720)>>2] = (576708);
    HEAP32[(576716)>>2] = (576708);
    HEAP32[(576728)>>2] = (576716);
    HEAP32[(576724)>>2] = (576716);
    HEAP32[(576736)>>2] = (576724);
    HEAP32[(576732)>>2] = (576724);
    HEAP32[(576744)>>2] = (576732);
    HEAP32[(576740)>>2] = (576732);
    HEAP32[(576752)>>2] = (576740);
    HEAP32[(576748)>>2] = (576740);
    HEAP32[(576760)>>2] = (576748);
    HEAP32[(576756)>>2] = (576748);
    HEAP32[(576768)>>2] = (576756);
    HEAP32[(576764)>>2] = (576756);
    HEAP32[(576776)>>2] = (576764);
    HEAP32[(576772)>>2] = (576764);
    HEAP32[(576784)>>2] = (576772);
    HEAP32[(576780)>>2] = (576772);
    HEAP32[(576792)>>2] = (576780);
    HEAP32[(576788)>>2] = (576780);
    HEAP32[(576800)>>2] = (576788);
    HEAP32[(576796)>>2] = (576788);
    $sub172$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i43$i = ((($tbase$795$i)) + 8|0);
    $95 = $add$ptr$i43$i;
    $and$i44$i = $95 & 7;
    $cmp$i45$i = ($and$i44$i|0)==(0);
    $sub$i46$i = (0 - ($95))|0;
    $and3$i47$i = $sub$i46$i & 7;
    $cond$i48$i = $cmp$i45$i ? 0 : $and3$i47$i;
    $add$ptr4$i49$i = (($tbase$795$i) + ($cond$i48$i)|0);
    $sub5$i50$i = (($sub172$i) - ($cond$i48$i))|0;
    HEAP32[(576524)>>2] = $add$ptr4$i49$i;
    HEAP32[(576512)>>2] = $sub5$i50$i;
    $or$i51$i = $sub5$i50$i | 1;
    $head$i52$i = ((($add$ptr4$i49$i)) + 4|0);
    HEAP32[$head$i52$i>>2] = $or$i51$i;
    $add$ptr6$i53$i = (($tbase$795$i) + ($sub172$i)|0);
    $head7$i54$i = ((($add$ptr6$i53$i)) + 4|0);
    HEAP32[$head7$i54$i>>2] = 40;
    $96 = HEAP32[(576988)>>2]|0;
    HEAP32[(576528)>>2] = $96;
   } else {
    $sp$0112$i = (576948);
    while(1) {
     $97 = HEAP32[$sp$0112$i>>2]|0;
     $size188$i = ((($sp$0112$i)) + 4|0);
     $98 = HEAP32[$size188$i>>2]|0;
     $add$ptr189$i = (($97) + ($98)|0);
     $cmp190$i = ($tbase$795$i|0)==($add$ptr189$i|0);
     if ($cmp190$i) {
      label = 154;
      break;
     }
     $next$i = ((($sp$0112$i)) + 8|0);
     $99 = HEAP32[$next$i>>2]|0;
     $cmp186$i = ($99|0)==(0|0);
     if ($cmp186$i) {
      break;
     } else {
      $sp$0112$i = $99;
     }
    }
    if ((label|0) == 154) {
     $size188$i$le = ((($sp$0112$i)) + 4|0);
     $sflags193$i = ((($sp$0112$i)) + 12|0);
     $100 = HEAP32[$sflags193$i>>2]|0;
     $and194$i = $100 & 8;
     $tobool195$i = ($and194$i|0)==(0);
     if ($tobool195$i) {
      $cmp203$i = ($97>>>0)<=($92>>>0);
      $cmp209$i = ($tbase$795$i>>>0)>($92>>>0);
      $or$cond98$i = $cmp209$i & $cmp203$i;
      if ($or$cond98$i) {
       $add212$i = (($98) + ($tsize$794$i))|0;
       HEAP32[$size188$i$le>>2] = $add212$i;
       $101 = HEAP32[(576512)>>2]|0;
       $add215$i = (($101) + ($tsize$794$i))|0;
       $add$ptr$i35$i = ((($92)) + 8|0);
       $102 = $add$ptr$i35$i;
       $and$i36$i = $102 & 7;
       $cmp$i37$i = ($and$i36$i|0)==(0);
       $sub$i38$i = (0 - ($102))|0;
       $and3$i39$i = $sub$i38$i & 7;
       $cond$i40$i = $cmp$i37$i ? 0 : $and3$i39$i;
       $add$ptr4$i41$i = (($92) + ($cond$i40$i)|0);
       $sub5$i$i = (($add215$i) - ($cond$i40$i))|0;
       HEAP32[(576524)>>2] = $add$ptr4$i41$i;
       HEAP32[(576512)>>2] = $sub5$i$i;
       $or$i$i = $sub5$i$i | 1;
       $head$i42$i = ((($add$ptr4$i41$i)) + 4|0);
       HEAP32[$head$i42$i>>2] = $or$i$i;
       $add$ptr6$i$i = (($92) + ($add215$i)|0);
       $head7$i$i = ((($add$ptr6$i$i)) + 4|0);
       HEAP32[$head7$i$i>>2] = 40;
       $103 = HEAP32[(576988)>>2]|0;
       HEAP32[(576528)>>2] = $103;
       break;
      }
     }
    }
    $104 = HEAP32[(576516)>>2]|0;
    $cmp218$i = ($tbase$795$i>>>0)<($104>>>0);
    if ($cmp218$i) {
     HEAP32[(576516)>>2] = $tbase$795$i;
    }
    $add$ptr227$i = (($tbase$795$i) + ($tsize$794$i)|0);
    $sp$1111$i = (576948);
    while(1) {
     $105 = HEAP32[$sp$1111$i>>2]|0;
     $cmp228$i = ($105|0)==($add$ptr227$i|0);
     if ($cmp228$i) {
      label = 162;
      break;
     }
     $next231$i = ((($sp$1111$i)) + 8|0);
     $106 = HEAP32[$next231$i>>2]|0;
     $cmp224$i = ($106|0)==(0|0);
     if ($cmp224$i) {
      break;
     } else {
      $sp$1111$i = $106;
     }
    }
    if ((label|0) == 162) {
     $sflags235$i = ((($sp$1111$i)) + 12|0);
     $107 = HEAP32[$sflags235$i>>2]|0;
     $and236$i = $107 & 8;
     $tobool237$i = ($and236$i|0)==(0);
     if ($tobool237$i) {
      HEAP32[$sp$1111$i>>2] = $tbase$795$i;
      $size245$i = ((($sp$1111$i)) + 4|0);
      $108 = HEAP32[$size245$i>>2]|0;
      $add246$i = (($108) + ($tsize$794$i))|0;
      HEAP32[$size245$i>>2] = $add246$i;
      $add$ptr$i$i = ((($tbase$795$i)) + 8|0);
      $109 = $add$ptr$i$i;
      $and$i14$i = $109 & 7;
      $cmp$i15$i = ($and$i14$i|0)==(0);
      $sub$i16$i = (0 - ($109))|0;
      $and3$i$i = $sub$i16$i & 7;
      $cond$i17$i = $cmp$i15$i ? 0 : $and3$i$i;
      $add$ptr4$i$i = (($tbase$795$i) + ($cond$i17$i)|0);
      $add$ptr5$i$i = ((($add$ptr227$i)) + 8|0);
      $110 = $add$ptr5$i$i;
      $and6$i18$i = $110 & 7;
      $cmp7$i$i = ($and6$i18$i|0)==(0);
      $sub12$i$i = (0 - ($110))|0;
      $and13$i$i = $sub12$i$i & 7;
      $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
      $add$ptr16$i$i = (($add$ptr227$i) + ($cond15$i$i)|0);
      $sub$ptr$lhs$cast$i19$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i20$i = $add$ptr4$i$i;
      $sub$ptr$sub$i21$i = (($sub$ptr$lhs$cast$i19$i) - ($sub$ptr$rhs$cast$i20$i))|0;
      $add$ptr17$i$i = (($add$ptr4$i$i) + ($nb$0)|0);
      $sub18$i$i = (($sub$ptr$sub$i21$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $head$i22$i = ((($add$ptr4$i$i)) + 4|0);
      HEAP32[$head$i22$i>>2] = $or19$i$i;
      $cmp20$i$i = ($92|0)==($add$ptr16$i$i|0);
      L238: do {
       if ($cmp20$i$i) {
        $111 = HEAP32[(576512)>>2]|0;
        $add$i$i = (($111) + ($sub18$i$i))|0;
        HEAP32[(576512)>>2] = $add$i$i;
        HEAP32[(576524)>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $head23$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $112 = HEAP32[(576520)>>2]|0;
        $cmp24$i$i = ($112|0)==($add$ptr16$i$i|0);
        if ($cmp24$i$i) {
         $113 = HEAP32[(576508)>>2]|0;
         $add26$i$i = (($113) + ($sub18$i$i))|0;
         HEAP32[(576508)>>2] = $add26$i$i;
         HEAP32[(576520)>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $head29$i$i = ((($add$ptr17$i$i)) + 4|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr30$i$i = (($add$ptr17$i$i) + ($add26$i$i)|0);
         HEAP32[$add$ptr30$i$i>>2] = $add26$i$i;
         break;
        }
        $head32$i$i = ((($add$ptr16$i$i)) + 4|0);
        $114 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $114 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $114 & -8;
         $shr$i25$i = $114 >>> 3;
         $cmp38$i$i = ($114>>>0)<(256);
         L246: do {
          if ($cmp38$i$i) {
           $fd$i$i = ((($add$ptr16$i$i)) + 8|0);
           $115 = HEAP32[$fd$i$i>>2]|0;
           $bk$i26$i = ((($add$ptr16$i$i)) + 12|0);
           $116 = HEAP32[$bk$i26$i>>2]|0;
           $cmp46$i$i = ($116|0)==($115|0);
           if ($cmp46$i$i) {
            $shl48$i$i = 1 << $shr$i25$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $117 = HEAP32[144125]|0;
            $and49$i$i = $117 & $neg$i$i;
            HEAP32[144125] = $and49$i$i;
            break;
           } else {
            $bk67$i$i = ((($115)) + 12|0);
            HEAP32[$bk67$i$i>>2] = $116;
            $fd68$i$i = ((($116)) + 8|0);
            HEAP32[$fd68$i$i>>2] = $115;
            break;
           }
          } else {
           $parent$i27$i = ((($add$ptr16$i$i)) + 24|0);
           $118 = HEAP32[$parent$i27$i>>2]|0;
           $bk74$i$i = ((($add$ptr16$i$i)) + 12|0);
           $119 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($119|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $child$i$i = ((($add$ptr16$i$i)) + 16|0);
             $arrayidx96$i$i = ((($child$i$i)) + 4|0);
             $121 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($121|0)==(0|0);
             if ($cmp97$i$i) {
              $122 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($122|0)==(0|0);
              if ($cmp100$i$i) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i$ph = $122;$RP$1$i$i$ph = $child$i$i;
              }
             } else {
              $R$1$i$i$ph = $121;$RP$1$i$i$ph = $arrayidx96$i$i;
             }
             $R$1$i$i = $R$1$i$i$ph;$RP$1$i$i = $RP$1$i$i$ph;
             while(1) {
              $arrayidx103$i$i = ((($R$1$i$i)) + 20|0);
              $123 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($123|0)==(0|0);
              if ($cmp104$i$i) {
               $arrayidx107$i$i = ((($R$1$i$i)) + 16|0);
               $124 = HEAP32[$arrayidx107$i$i>>2]|0;
               $cmp108$i$i = ($124|0)==(0|0);
               if ($cmp108$i$i) {
                break;
               } else {
                $R$1$i$i$be = $124;$RP$1$i$i$be = $arrayidx107$i$i;
               }
              } else {
               $R$1$i$i$be = $123;$RP$1$i$i$be = $arrayidx103$i$i;
              }
              $R$1$i$i = $R$1$i$i$be;$RP$1$i$i = $RP$1$i$i$be;
             }
             HEAP32[$RP$1$i$i>>2] = 0;
             $R$3$i$i = $R$1$i$i;
            } else {
             $fd78$i$i = ((($add$ptr16$i$i)) + 8|0);
             $120 = HEAP32[$fd78$i$i>>2]|0;
             $bk91$i$i = ((($120)) + 12|0);
             HEAP32[$bk91$i$i>>2] = $119;
             $fd92$i$i = ((($119)) + 8|0);
             HEAP32[$fd92$i$i>>2] = $120;
             $R$3$i$i = $119;
            }
           } while(0);
           $cmp120$i28$i = ($118|0)==(0|0);
           if ($cmp120$i28$i) {
            break;
           }
           $index$i29$i = ((($add$ptr16$i$i)) + 28|0);
           $125 = HEAP32[$index$i29$i>>2]|0;
           $arrayidx123$i$i = (576804 + ($125<<2)|0);
           $126 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($126|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$3$i$i;
             $cond1$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond1$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $125;
             $neg132$i$i = $shl131$i$i ^ -1;
             $127 = HEAP32[(576504)>>2]|0;
             $and133$i$i = $127 & $neg132$i$i;
             HEAP32[(576504)>>2] = $and133$i$i;
             break L246;
            } else {
             $arrayidx143$i$i = ((($118)) + 16|0);
             $128 = HEAP32[$arrayidx143$i$i>>2]|0;
             $cmp144$i$i = ($128|0)==($add$ptr16$i$i|0);
             $arrayidx151$i$i = ((($118)) + 20|0);
             $arrayidx151$i$i$sink = $cmp144$i$i ? $arrayidx143$i$i : $arrayidx151$i$i;
             HEAP32[$arrayidx151$i$i$sink>>2] = $R$3$i$i;
             $cmp156$i$i = ($R$3$i$i|0)==(0|0);
             if ($cmp156$i$i) {
              break L246;
             }
            }
           } while(0);
           $parent165$i$i = ((($R$3$i$i)) + 24|0);
           HEAP32[$parent165$i$i>>2] = $118;
           $child166$i$i = ((($add$ptr16$i$i)) + 16|0);
           $129 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($129|0)==(0|0);
           if (!($cmp168$i$i)) {
            $arrayidx178$i$i = ((($R$3$i$i)) + 16|0);
            HEAP32[$arrayidx178$i$i>>2] = $129;
            $parent179$i$i = ((($129)) + 24|0);
            HEAP32[$parent179$i$i>>2] = $R$3$i$i;
           }
           $arrayidx184$i$i = ((($child166$i$i)) + 4|0);
           $130 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($130|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $arrayidx195$i$i = ((($R$3$i$i)) + 20|0);
           HEAP32[$arrayidx195$i$i>>2] = $130;
           $parent196$i$i = ((($130)) + 24|0);
           HEAP32[$parent196$i$i>>2] = $R$3$i$i;
          }
         } while(0);
         $add$ptr205$i$i = (($add$ptr16$i$i) + ($and37$i$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = ((($oldfirst$0$i$i)) + 4|0);
        $131 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $131 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $head211$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr212$i$i = (($add$ptr17$i$i) + ($qsize$0$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl222$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = (576540 + ($shl222$i$i<<2)|0);
         $132 = HEAP32[144125]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $132 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         if ($tobool228$i$i) {
          $or232$i$i = $132 | $shl226$i$i;
          HEAP32[144125] = $or232$i$i;
          $$pre$i31$i = ((($arrayidx223$i$i)) + 8|0);
          $$pre$phi$i32$iZ2D = $$pre$i31$i;$F224$0$i$i = $arrayidx223$i$i;
         } else {
          $133 = ((($arrayidx223$i$i)) + 8|0);
          $134 = HEAP32[$133>>2]|0;
          $$pre$phi$i32$iZ2D = $133;$F224$0$i$i = $134;
         }
         HEAP32[$$pre$phi$i32$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = ((($F224$0$i$i)) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $fd247$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $bk248$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = (576804 + ($I252$0$i$i<<2)|0);
        $index288$i$i = ((($add$ptr17$i$i)) + 28|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $child289$i$i = ((($add$ptr17$i$i)) + 16|0);
        $arrayidx290$i$i = ((($child289$i$i)) + 4|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $135 = HEAP32[(576504)>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $135 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $135 | $shl294$i$i;
         HEAP32[(576504)>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $parent301$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $bk302$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $fd303$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $136 = HEAP32[$arrayidx287$i$i>>2]|0;
        $head3174$i$i = ((($136)) + 4|0);
        $137 = HEAP32[$head3174$i$i>>2]|0;
        $and3185$i$i = $137 & -8;
        $cmp3196$i$i = ($and3185$i$i|0)==($qsize$0$i$i|0);
        L291: do {
         if ($cmp3196$i$i) {
          $T$0$lcssa$i34$i = $136;
         } else {
          $cmp306$i$i = ($I252$0$i$i|0)==(31);
          $shr310$i$i = $I252$0$i$i >>> 1;
          $sub313$i$i = (25 - ($shr310$i$i))|0;
          $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
          $K305$08$i$i = $shl316$i$i;$T$07$i$i = $136;
          while(1) {
           $shr323$i$i = $K305$08$i$i >>> 31;
           $arrayidx325$i$i = (((($T$07$i$i)) + 16|0) + ($shr323$i$i<<2)|0);
           $138 = HEAP32[$arrayidx325$i$i>>2]|0;
           $cmp327$i$i = ($138|0)==(0|0);
           if ($cmp327$i$i) {
            break;
           }
           $shl326$i$i = $K305$08$i$i << 1;
           $head317$i$i = ((($138)) + 4|0);
           $139 = HEAP32[$head317$i$i>>2]|0;
           $and318$i$i = $139 & -8;
           $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
           if ($cmp319$i$i) {
            $T$0$lcssa$i34$i = $138;
            break L291;
           } else {
            $K305$08$i$i = $shl326$i$i;$T$07$i$i = $138;
           }
          }
          HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
          $parent337$i$i = ((($add$ptr17$i$i)) + 24|0);
          HEAP32[$parent337$i$i>>2] = $T$07$i$i;
          $bk338$i$i = ((($add$ptr17$i$i)) + 12|0);
          HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
          $fd339$i$i = ((($add$ptr17$i$i)) + 8|0);
          HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
          break L238;
         }
        } while(0);
        $fd344$i$i = ((($T$0$lcssa$i34$i)) + 8|0);
        $140 = HEAP32[$fd344$i$i>>2]|0;
        $bk357$i$i = ((($140)) + 12|0);
        HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
        HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
        $fd359$i$i = ((($add$ptr17$i$i)) + 8|0);
        HEAP32[$fd359$i$i>>2] = $140;
        $bk360$i$i = ((($add$ptr17$i$i)) + 12|0);
        HEAP32[$bk360$i$i>>2] = $T$0$lcssa$i34$i;
        $parent361$i$i = ((($add$ptr17$i$i)) + 24|0);
        HEAP32[$parent361$i$i>>2] = 0;
       }
      } while(0);
      $add$ptr369$i$i = ((($add$ptr4$i$i)) + 8|0);
      $retval$0 = $add$ptr369$i$i;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $sp$0$i$i$i = (576948);
    while(1) {
     $141 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($141>>>0)>($92>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = ((($sp$0$i$i$i)) + 4|0);
      $142 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($141) + ($142)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($92>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = ((($sp$0$i$i$i)) + 8|0);
     $143 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $143;
    }
    $add$ptr2$i$i = ((($add$ptr$i$i$i)) + -47|0);
    $add$ptr3$i$i = ((($add$ptr2$i$i)) + 8|0);
    $144 = $add$ptr3$i$i;
    $and$i$i = $144 & 7;
    $cmp$i12$i = ($and$i$i|0)==(0);
    $sub$i$i = (0 - ($144))|0;
    $and6$i13$i = $sub$i$i & 7;
    $cond$i$i = $cmp$i12$i ? 0 : $and6$i13$i;
    $add$ptr7$i$i = (($add$ptr2$i$i) + ($cond$i$i)|0);
    $add$ptr81$i$i = ((($92)) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr81$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $92 : $add$ptr7$i$i;
    $add$ptr14$i$i = ((($cond13$i$i)) + 8|0);
    $add$ptr15$i$i = ((($cond13$i$i)) + 24|0);
    $sub16$i$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i2$i$i = ((($tbase$795$i)) + 8|0);
    $145 = $add$ptr$i2$i$i;
    $and$i$i$i = $145 & 7;
    $cmp$i3$i$i = ($and$i$i$i|0)==(0);
    $sub$i$i$i = (0 - ($145))|0;
    $and3$i$i$i = $sub$i$i$i & 7;
    $cond$i$i$i = $cmp$i3$i$i ? 0 : $and3$i$i$i;
    $add$ptr4$i$i$i = (($tbase$795$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[(576524)>>2] = $add$ptr4$i$i$i;
    HEAP32[(576512)>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $head$i$i$i = ((($add$ptr4$i$i$i)) + 4|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$i$i$i = (($tbase$795$i) + ($sub16$i$i)|0);
    $head7$i$i$i = ((($add$ptr6$i$i$i)) + 4|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $146 = HEAP32[(576988)>>2]|0;
    HEAP32[(576528)>>2] = $146;
    $head$i$i = ((($cond13$i$i)) + 4|0);
    HEAP32[$head$i$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i>>2]=HEAP32[(576948)>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[(576948)+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[(576948)+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[(576948)+12>>2]|0;
    HEAP32[(576948)>>2] = $tbase$795$i;
    HEAP32[(576952)>>2] = $tsize$794$i;
    HEAP32[(576960)>>2] = 0;
    HEAP32[(576956)>>2] = $add$ptr14$i$i;
    $147 = $add$ptr15$i$i;
    while(1) {
     $add$ptr24$i$i = ((($147)) + 4|0);
     HEAP32[$add$ptr24$i$i>>2] = 7;
     $head26$i$i = ((($147)) + 8|0);
     $cmp27$i$i = ($head26$i$i>>>0)<($add$ptr$i$i$i>>>0);
     if ($cmp27$i$i) {
      $147 = $add$ptr24$i$i;
     } else {
      break;
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($92|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $92;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $148 = HEAP32[$head$i$i>>2]|0;
     $and32$i$i = $148 & -2;
     HEAP32[$head$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = ((($92)) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$cond13$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i$i = $shr$i$i << 1;
      $arrayidx$i$i = (576540 + ($shl$i$i<<2)|0);
      $149 = HEAP32[144125]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $149 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      if ($tobool$i$i) {
       $or44$i$i = $149 | $shl39$i$i;
       HEAP32[144125] = $or44$i$i;
       $$pre$i$i = ((($arrayidx$i$i)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i$i;
      } else {
       $150 = ((($arrayidx$i$i)) + 8|0);
       $151 = HEAP32[$150>>2]|0;
       $$pre$phi$i$iZ2D = $150;$F$0$i$i = $151;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $92;
      $bk$i$i = ((($F$0$i$i)) + 12|0);
      HEAP32[$bk$i$i>>2] = $92;
      $fd54$i$i = ((($92)) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = ((($92)) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = (576804 + ($I57$0$i$i<<2)|0);
     $index$i$i = ((($92)) + 28|0);
     HEAP32[$index$i$i>>2] = $I57$0$i$i;
     $arrayidx92$i$i = ((($92)) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     HEAP32[$add$ptr81$i$i>>2] = 0;
     $152 = HEAP32[(576504)>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $152 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $152 | $shl95$i$i;
      HEAP32[(576504)>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $92;
      $parent$i$i = ((($92)) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = ((($92)) + 12|0);
      HEAP32[$bk102$i$i>>2] = $92;
      $fd103$i$i = ((($92)) + 8|0);
      HEAP32[$fd103$i$i>>2] = $92;
      break;
     }
     $153 = HEAP32[$arrayidx91$i$i>>2]|0;
     $head1186$i$i = ((($153)) + 4|0);
     $154 = HEAP32[$head1186$i$i>>2]|0;
     $and1197$i$i = $154 & -8;
     $cmp1208$i$i = ($and1197$i$i|0)==($sub$ptr$sub$i$i|0);
     L325: do {
      if ($cmp1208$i$i) {
       $T$0$lcssa$i$i = $153;
      } else {
       $cmp106$i$i = ($I57$0$i$i|0)==(31);
       $shr110$i$i = $I57$0$i$i >>> 1;
       $sub113$i$i = (25 - ($shr110$i$i))|0;
       $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
       $K105$010$i$i = $shl116$i$i;$T$09$i$i = $153;
       while(1) {
        $shr124$i$i = $K105$010$i$i >>> 31;
        $arrayidx126$i$i = (((($T$09$i$i)) + 16|0) + ($shr124$i$i<<2)|0);
        $155 = HEAP32[$arrayidx126$i$i>>2]|0;
        $cmp128$i$i = ($155|0)==(0|0);
        if ($cmp128$i$i) {
         break;
        }
        $shl127$i$i = $K105$010$i$i << 1;
        $head118$i$i = ((($155)) + 4|0);
        $156 = HEAP32[$head118$i$i>>2]|0;
        $and119$i$i = $156 & -8;
        $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
        if ($cmp120$i$i) {
         $T$0$lcssa$i$i = $155;
         break L325;
        } else {
         $K105$010$i$i = $shl127$i$i;$T$09$i$i = $155;
        }
       }
       HEAP32[$arrayidx126$i$i>>2] = $92;
       $parent138$i$i = ((($92)) + 24|0);
       HEAP32[$parent138$i$i>>2] = $T$09$i$i;
       $bk139$i$i = ((($92)) + 12|0);
       HEAP32[$bk139$i$i>>2] = $92;
       $fd140$i$i = ((($92)) + 8|0);
       HEAP32[$fd140$i$i>>2] = $92;
       break L215;
      }
     } while(0);
     $fd148$i$i = ((($T$0$lcssa$i$i)) + 8|0);
     $157 = HEAP32[$fd148$i$i>>2]|0;
     $bk158$i$i = ((($157)) + 12|0);
     HEAP32[$bk158$i$i>>2] = $92;
     HEAP32[$fd148$i$i>>2] = $92;
     $fd160$i$i = ((($92)) + 8|0);
     HEAP32[$fd160$i$i>>2] = $157;
     $bk161$i$i = ((($92)) + 12|0);
     HEAP32[$bk161$i$i>>2] = $T$0$lcssa$i$i;
     $parent162$i$i = ((($92)) + 24|0);
     HEAP32[$parent162$i$i>>2] = 0;
    }
   }
  } while(0);
  $158 = HEAP32[(576512)>>2]|0;
  $cmp257$i = ($158>>>0)>($nb$0>>>0);
  if ($cmp257$i) {
   $sub260$i = (($158) - ($nb$0))|0;
   HEAP32[(576512)>>2] = $sub260$i;
   $159 = HEAP32[(576524)>>2]|0;
   $add$ptr262$i = (($159) + ($nb$0)|0);
   HEAP32[(576524)>>2] = $add$ptr262$i;
   $or264$i = $sub260$i | 1;
   $head265$i = ((($add$ptr262$i)) + 4|0);
   HEAP32[$head265$i>>2] = $or264$i;
   $or267$i = $nb$0 | 3;
   $head268$i = ((($159)) + 4|0);
   HEAP32[$head268$i>>2] = $or267$i;
   $add$ptr269$i = ((($159)) + 8|0);
   $retval$0 = $add$ptr269$i;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $call275$i = (___errno_location()|0);
 HEAP32[$call275$i>>2] = 12;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0266 = 0;
 var $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0265 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr217 = 0, $add$ptr261 = 0;
 var $add$ptr482 = 0, $add$ptr498 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add550 = 0, $add555 = 0, $add559 = 0, $add561 = 0, $add564 = 0, $and12 = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and232 = 0, $and240 = 0, $and266 = 0, $and301 = 0;
 var $and410 = 0, $and46 = 0, $and495 = 0, $and5 = 0, $and512 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $and563 = 0, $and574 = 0, $and592 = 0, $and592263 = 0, $and8 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx157$sink = 0, $arrayidx182 = 0;
 var $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx427 = 0, $arrayidx427$sink = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx470 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx570 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk = 0, $bk275 = 0, $bk321 = 0;
 var $bk333 = 0, $bk355 = 0, $bk529 = 0, $bk531 = 0, $bk580 = 0, $bk611 = 0, $bk631 = 0, $bk634 = 0, $bk66 = 0, $bk73 = 0, $bk94 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $child569 = 0, $cmp = 0, $cmp$i = 0, $cmp100 = 0, $cmp104 = 0;
 var $cmp109 = 0, $cmp114 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp150 = 0, $cmp162 = 0, $cmp173 = 0, $cmp18 = 0, $cmp189 = 0, $cmp211 = 0, $cmp22 = 0, $cmp228 = 0, $cmp243 = 0, $cmp249 = 0, $cmp25 = 0, $cmp255 = 0, $cmp269 = 0, $cmp296 = 0, $cmp334 = 0;
 var $cmp363 = 0, $cmp368 = 0, $cmp375 = 0, $cmp380 = 0, $cmp395 = 0, $cmp401 = 0, $cmp42 = 0, $cmp420 = 0, $cmp432 = 0, $cmp445 = 0, $cmp461 = 0, $cmp484 = 0, $cmp502 = 0, $cmp536 = 0, $cmp540 = 0, $cmp584 = 0, $cmp593 = 0, $cmp593264 = 0, $cmp601 = 0, $cmp640 = 0;
 var $cmp74 = 0, $cond = 0, $cond254 = 0, $cond255 = 0, $dec = 0, $fd = 0, $fd273 = 0, $fd322 = 0, $fd338 = 0, $fd356 = 0, $fd530 = 0, $fd581 = 0, $fd612 = 0, $fd620 = 0, $fd633 = 0, $fd67 = 0, $fd78 = 0, $fd95 = 0, $head209 = 0, $head216 = 0;
 var $head231 = 0, $head248 = 0, $head260 = 0, $head4 = 0, $head481 = 0, $head497 = 0, $head591 = 0, $head591262 = 0, $idx$neg = 0, $index = 0, $index399 = 0, $index568 = 0, $neg = 0, $neg139 = 0, $neg300 = 0, $neg409 = 0, $next4$i = 0, $or = 0, $or247 = 0, $or259 = 0;
 var $or480 = 0, $or496 = 0, $or516 = 0, $or578 = 0, $p$1 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent331 = 0, $parent442 = 0, $parent455 = 0, $parent471 = 0, $parent579 = 0, $parent610 = 0, $parent635 = 0, $psize$1 = 0, $psize$2 = 0, $shl138 = 0, $shl299 = 0;
 var $shl408 = 0, $shl45 = 0, $shl508 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl557 = 0, $shl560 = 0, $shl573 = 0, $shl590 = 0, $shl600 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $shr544 = 0, $shr548 = 0, $shr553 = 0, $shr558 = 0, $shr562 = 0;
 var $shr586 = 0, $shr597 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub547 = 0, $sub552 = 0, $sub556 = 0, $sub589 = 0, $tobool233 = 0, $tobool241 = 0, $tobool513 = 0, $tobool575 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  return;
 }
 $add$ptr = ((($mem)) + -8|0);
 $0 = HEAP32[(576516)>>2]|0;
 $head4 = ((($mem)) + -4|0);
 $1 = HEAP32[$head4>>2]|0;
 $and5 = $1 & -8;
 $add$ptr6 = (($add$ptr) + ($and5)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $and12 = $1 & 3;
   $cmp13 = ($and12|0)==(0);
   if ($cmp13) {
    return;
   }
   $idx$neg = (0 - ($2))|0;
   $add$ptr16 = (($add$ptr) + ($idx$neg)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    return;
   }
   $3 = HEAP32[(576520)>>2]|0;
   $cmp22 = ($3|0)==($add$ptr16|0);
   if ($cmp22) {
    $head209 = ((($add$ptr6)) + 4|0);
    $20 = HEAP32[$head209>>2]|0;
    $and210 = $20 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $add$ptr217 = (($add$ptr16) + ($add17)|0);
    $head216 = ((($add$ptr16)) + 4|0);
    $or = $add17 | 1;
    $and215 = $20 & -2;
    HEAP32[(576508)>>2] = $add17;
    HEAP32[$head209>>2] = $and215;
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr217>>2] = $add17;
    return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $fd = ((($add$ptr16)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr16)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $6 = HEAP32[144125]|0;
     $and46 = $6 & $neg;
     HEAP32[144125] = $and46;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    } else {
     $bk66 = ((($4)) + 12|0);
     HEAP32[$bk66>>2] = $5;
     $fd67 = ((($5)) + 8|0);
     HEAP32[$fd67>>2] = $4;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
   }
   $parent = ((($add$ptr16)) + 24|0);
   $7 = HEAP32[$parent>>2]|0;
   $bk73 = ((($add$ptr16)) + 12|0);
   $8 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($8|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child = ((($add$ptr16)) + 16|0);
     $arrayidx99 = ((($child)) + 4|0);
     $10 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($10|0)==(0|0);
     if ($cmp100) {
      $11 = HEAP32[$child>>2]|0;
      $cmp104 = ($11|0)==(0|0);
      if ($cmp104) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $11;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $10;$RP$1$ph = $arrayidx99;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx108 = ((($R$1)) + 20|0);
      $12 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($12|0)==(0|0);
      if ($cmp109) {
       $arrayidx113 = ((($R$1)) + 16|0);
       $13 = HEAP32[$arrayidx113>>2]|0;
       $cmp114 = ($13|0)==(0|0);
       if ($cmp114) {
        break;
       } else {
        $R$1$be = $13;$RP$1$be = $arrayidx113;
       }
      } else {
       $R$1$be = $12;$RP$1$be = $arrayidx108;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd78 = ((($add$ptr16)) + 8|0);
     $9 = HEAP32[$fd78>>2]|0;
     $bk94 = ((($9)) + 12|0);
     HEAP32[$bk94>>2] = $8;
     $fd95 = ((($8)) + 8|0);
     HEAP32[$fd95>>2] = $9;
     $R$3 = $8;
    }
   } while(0);
   $cmp127 = ($7|0)==(0|0);
   if ($cmp127) {
    $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
   } else {
    $index = ((($add$ptr16)) + 28|0);
    $14 = HEAP32[$index>>2]|0;
    $arrayidx130 = (576804 + ($14<<2)|0);
    $15 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($15|0)==($add$ptr16|0);
    if ($cmp131) {
     HEAP32[$arrayidx130>>2] = $R$3;
     $cond254 = ($R$3|0)==(0|0);
     if ($cond254) {
      $shl138 = 1 << $14;
      $neg139 = $shl138 ^ -1;
      $16 = HEAP32[(576504)>>2]|0;
      $and140 = $16 & $neg139;
      HEAP32[(576504)>>2] = $and140;
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    } else {
     $arrayidx149 = ((($7)) + 16|0);
     $17 = HEAP32[$arrayidx149>>2]|0;
     $cmp150 = ($17|0)==($add$ptr16|0);
     $arrayidx157 = ((($7)) + 20|0);
     $arrayidx157$sink = $cmp150 ? $arrayidx149 : $arrayidx157;
     HEAP32[$arrayidx157$sink>>2] = $R$3;
     $cmp162 = ($R$3|0)==(0|0);
     if ($cmp162) {
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    }
    $parent170 = ((($R$3)) + 24|0);
    HEAP32[$parent170>>2] = $7;
    $child171 = ((($add$ptr16)) + 16|0);
    $18 = HEAP32[$child171>>2]|0;
    $cmp173 = ($18|0)==(0|0);
    if (!($cmp173)) {
     $arrayidx182 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx182>>2] = $18;
     $parent183 = ((($18)) + 24|0);
     HEAP32[$parent183>>2] = $R$3;
    }
    $arrayidx188 = ((($child171)) + 4|0);
    $19 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($19|0)==(0|0);
    if ($cmp189) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    } else {
     $arrayidx198 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx198>>2] = $19;
     $parent199 = ((($19)) + 24|0);
     HEAP32[$parent199>>2] = $R$3;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    }
   }
  } else {
   $21 = $add$ptr;$p$1 = $add$ptr;$psize$1 = $and5;
  }
 } while(0);
 $cmp228 = ($21>>>0)<($add$ptr6>>>0);
 if (!($cmp228)) {
  return;
 }
 $head231 = ((($add$ptr6)) + 4|0);
 $22 = HEAP32[$head231>>2]|0;
 $and232 = $22 & 1;
 $tobool233 = ($and232|0)==(0);
 if ($tobool233) {
  return;
 }
 $and240 = $22 & 2;
 $tobool241 = ($and240|0)==(0);
 if ($tobool241) {
  $23 = HEAP32[(576524)>>2]|0;
  $cmp243 = ($23|0)==($add$ptr6|0);
  if ($cmp243) {
   $24 = HEAP32[(576512)>>2]|0;
   $add246 = (($24) + ($psize$1))|0;
   HEAP32[(576512)>>2] = $add246;
   HEAP32[(576524)>>2] = $p$1;
   $or247 = $add246 | 1;
   $head248 = ((($p$1)) + 4|0);
   HEAP32[$head248>>2] = $or247;
   $25 = HEAP32[(576520)>>2]|0;
   $cmp249 = ($p$1|0)==($25|0);
   if (!($cmp249)) {
    return;
   }
   HEAP32[(576520)>>2] = 0;
   HEAP32[(576508)>>2] = 0;
   return;
  }
  $26 = HEAP32[(576520)>>2]|0;
  $cmp255 = ($26|0)==($add$ptr6|0);
  if ($cmp255) {
   $27 = HEAP32[(576508)>>2]|0;
   $add258 = (($27) + ($psize$1))|0;
   HEAP32[(576508)>>2] = $add258;
   HEAP32[(576520)>>2] = $21;
   $or259 = $add258 | 1;
   $head260 = ((($p$1)) + 4|0);
   HEAP32[$head260>>2] = $or259;
   $add$ptr261 = (($21) + ($add258)|0);
   HEAP32[$add$ptr261>>2] = $add258;
   return;
  }
  $and266 = $22 & -8;
  $add267 = (($and266) + ($psize$1))|0;
  $shr268 = $22 >>> 3;
  $cmp269 = ($22>>>0)<(256);
  do {
   if ($cmp269) {
    $fd273 = ((($add$ptr6)) + 8|0);
    $28 = HEAP32[$fd273>>2]|0;
    $bk275 = ((($add$ptr6)) + 12|0);
    $29 = HEAP32[$bk275>>2]|0;
    $cmp296 = ($29|0)==($28|0);
    if ($cmp296) {
     $shl299 = 1 << $shr268;
     $neg300 = $shl299 ^ -1;
     $30 = HEAP32[144125]|0;
     $and301 = $30 & $neg300;
     HEAP32[144125] = $and301;
     break;
    } else {
     $bk321 = ((($28)) + 12|0);
     HEAP32[$bk321>>2] = $29;
     $fd322 = ((($29)) + 8|0);
     HEAP32[$fd322>>2] = $28;
     break;
    }
   } else {
    $parent331 = ((($add$ptr6)) + 24|0);
    $31 = HEAP32[$parent331>>2]|0;
    $bk333 = ((($add$ptr6)) + 12|0);
    $32 = HEAP32[$bk333>>2]|0;
    $cmp334 = ($32|0)==($add$ptr6|0);
    do {
     if ($cmp334) {
      $child361 = ((($add$ptr6)) + 16|0);
      $arrayidx362 = ((($child361)) + 4|0);
      $34 = HEAP32[$arrayidx362>>2]|0;
      $cmp363 = ($34|0)==(0|0);
      if ($cmp363) {
       $35 = HEAP32[$child361>>2]|0;
       $cmp368 = ($35|0)==(0|0);
       if ($cmp368) {
        $R332$3 = 0;
        break;
       } else {
        $R332$1$ph = $35;$RP360$1$ph = $child361;
       }
      } else {
       $R332$1$ph = $34;$RP360$1$ph = $arrayidx362;
      }
      $R332$1 = $R332$1$ph;$RP360$1 = $RP360$1$ph;
      while(1) {
       $arrayidx374 = ((($R332$1)) + 20|0);
       $36 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($36|0)==(0|0);
       if ($cmp375) {
        $arrayidx379 = ((($R332$1)) + 16|0);
        $37 = HEAP32[$arrayidx379>>2]|0;
        $cmp380 = ($37|0)==(0|0);
        if ($cmp380) {
         break;
        } else {
         $R332$1$be = $37;$RP360$1$be = $arrayidx379;
        }
       } else {
        $R332$1$be = $36;$RP360$1$be = $arrayidx374;
       }
       $R332$1 = $R332$1$be;$RP360$1 = $RP360$1$be;
      }
      HEAP32[$RP360$1>>2] = 0;
      $R332$3 = $R332$1;
     } else {
      $fd338 = ((($add$ptr6)) + 8|0);
      $33 = HEAP32[$fd338>>2]|0;
      $bk355 = ((($33)) + 12|0);
      HEAP32[$bk355>>2] = $32;
      $fd356 = ((($32)) + 8|0);
      HEAP32[$fd356>>2] = $33;
      $R332$3 = $32;
     }
    } while(0);
    $cmp395 = ($31|0)==(0|0);
    if (!($cmp395)) {
     $index399 = ((($add$ptr6)) + 28|0);
     $38 = HEAP32[$index399>>2]|0;
     $arrayidx400 = (576804 + ($38<<2)|0);
     $39 = HEAP32[$arrayidx400>>2]|0;
     $cmp401 = ($39|0)==($add$ptr6|0);
     if ($cmp401) {
      HEAP32[$arrayidx400>>2] = $R332$3;
      $cond255 = ($R332$3|0)==(0|0);
      if ($cond255) {
       $shl408 = 1 << $38;
       $neg409 = $shl408 ^ -1;
       $40 = HEAP32[(576504)>>2]|0;
       $and410 = $40 & $neg409;
       HEAP32[(576504)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx419 = ((($31)) + 16|0);
      $41 = HEAP32[$arrayidx419>>2]|0;
      $cmp420 = ($41|0)==($add$ptr6|0);
      $arrayidx427 = ((($31)) + 20|0);
      $arrayidx427$sink = $cmp420 ? $arrayidx419 : $arrayidx427;
      HEAP32[$arrayidx427$sink>>2] = $R332$3;
      $cmp432 = ($R332$3|0)==(0|0);
      if ($cmp432) {
       break;
      }
     }
     $parent442 = ((($R332$3)) + 24|0);
     HEAP32[$parent442>>2] = $31;
     $child443 = ((($add$ptr6)) + 16|0);
     $42 = HEAP32[$child443>>2]|0;
     $cmp445 = ($42|0)==(0|0);
     if (!($cmp445)) {
      $arrayidx454 = ((($R332$3)) + 16|0);
      HEAP32[$arrayidx454>>2] = $42;
      $parent455 = ((($42)) + 24|0);
      HEAP32[$parent455>>2] = $R332$3;
     }
     $arrayidx460 = ((($child443)) + 4|0);
     $43 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($43|0)==(0|0);
     if (!($cmp461)) {
      $arrayidx470 = ((($R332$3)) + 20|0);
      HEAP32[$arrayidx470>>2] = $43;
      $parent471 = ((($43)) + 24|0);
      HEAP32[$parent471>>2] = $R332$3;
     }
    }
   }
  } while(0);
  $or480 = $add267 | 1;
  $head481 = ((($p$1)) + 4|0);
  HEAP32[$head481>>2] = $or480;
  $add$ptr482 = (($21) + ($add267)|0);
  HEAP32[$add$ptr482>>2] = $add267;
  $44 = HEAP32[(576520)>>2]|0;
  $cmp484 = ($p$1|0)==($44|0);
  if ($cmp484) {
   HEAP32[(576508)>>2] = $add267;
   return;
  } else {
   $psize$2 = $add267;
  }
 } else {
  $and495 = $22 & -2;
  HEAP32[$head231>>2] = $and495;
  $or496 = $psize$1 | 1;
  $head497 = ((($p$1)) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($21) + ($psize$1)|0);
  HEAP32[$add$ptr498>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 $cmp502 = ($psize$2>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx509 = (576540 + ($shl508<<2)|0);
  $45 = HEAP32[144125]|0;
  $shl511 = 1 << $shr501;
  $and512 = $45 & $shl511;
  $tobool513 = ($and512|0)==(0);
  if ($tobool513) {
   $or516 = $45 | $shl511;
   HEAP32[144125] = $or516;
   $$pre = ((($arrayidx509)) + 8|0);
   $$pre$phiZ2D = $$pre;$F510$0 = $arrayidx509;
  } else {
   $46 = ((($arrayidx509)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $$pre$phiZ2D = $46;$F510$0 = $47;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $bk529 = ((($F510$0)) + 12|0);
  HEAP32[$bk529>>2] = $p$1;
  $fd530 = ((($p$1)) + 8|0);
  HEAP32[$fd530>>2] = $F510$0;
  $bk531 = ((($p$1)) + 12|0);
  HEAP32[$bk531>>2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 $cmp536 = ($shr535|0)==(0);
 if ($cmp536) {
  $I534$0 = 0;
 } else {
  $cmp540 = ($psize$2>>>0)>(16777215);
  if ($cmp540) {
   $I534$0 = 31;
  } else {
   $sub = (($shr535) + 1048320)|0;
   $shr544 = $sub >>> 16;
   $and545 = $shr544 & 8;
   $shl546 = $shr535 << $and545;
   $sub547 = (($shl546) + 520192)|0;
   $shr548 = $sub547 >>> 16;
   $and549 = $shr548 & 4;
   $add550 = $and549 | $and545;
   $shl551 = $shl546 << $and549;
   $sub552 = (($shl551) + 245760)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 2;
   $add555 = $add550 | $and554;
   $sub556 = (14 - ($add555))|0;
   $shl557 = $shl551 << $and554;
   $shr558 = $shl557 >>> 15;
   $add559 = (($sub556) + ($shr558))|0;
   $shl560 = $add559 << 1;
   $add561 = (($add559) + 7)|0;
   $shr562 = $psize$2 >>> $add561;
   $and563 = $shr562 & 1;
   $add564 = $and563 | $shl560;
   $I534$0 = $add564;
  }
 }
 $arrayidx567 = (576804 + ($I534$0<<2)|0);
 $index568 = ((($p$1)) + 28|0);
 HEAP32[$index568>>2] = $I534$0;
 $child569 = ((($p$1)) + 16|0);
 $arrayidx570 = ((($p$1)) + 20|0);
 HEAP32[$arrayidx570>>2] = 0;
 HEAP32[$child569>>2] = 0;
 $48 = HEAP32[(576504)>>2]|0;
 $shl573 = 1 << $I534$0;
 $and574 = $48 & $shl573;
 $tobool575 = ($and574|0)==(0);
 L112: do {
  if ($tobool575) {
   $or578 = $48 | $shl573;
   HEAP32[(576504)>>2] = $or578;
   HEAP32[$arrayidx567>>2] = $p$1;
   $parent579 = ((($p$1)) + 24|0);
   HEAP32[$parent579>>2] = $arrayidx567;
   $bk580 = ((($p$1)) + 12|0);
   HEAP32[$bk580>>2] = $p$1;
   $fd581 = ((($p$1)) + 8|0);
   HEAP32[$fd581>>2] = $p$1;
  } else {
   $49 = HEAP32[$arrayidx567>>2]|0;
   $head591262 = ((($49)) + 4|0);
   $50 = HEAP32[$head591262>>2]|0;
   $and592263 = $50 & -8;
   $cmp593264 = ($and592263|0)==($psize$2|0);
   L115: do {
    if ($cmp593264) {
     $T$0$lcssa = $49;
    } else {
     $cmp584 = ($I534$0|0)==(31);
     $shr586 = $I534$0 >>> 1;
     $sub589 = (25 - ($shr586))|0;
     $cond = $cmp584 ? 0 : $sub589;
     $shl590 = $psize$2 << $cond;
     $K583$0266 = $shl590;$T$0265 = $49;
     while(1) {
      $shr597 = $K583$0266 >>> 31;
      $arrayidx599 = (((($T$0265)) + 16|0) + ($shr597<<2)|0);
      $51 = HEAP32[$arrayidx599>>2]|0;
      $cmp601 = ($51|0)==(0|0);
      if ($cmp601) {
       break;
      }
      $shl600 = $K583$0266 << 1;
      $head591 = ((($51)) + 4|0);
      $52 = HEAP32[$head591>>2]|0;
      $and592 = $52 & -8;
      $cmp593 = ($and592|0)==($psize$2|0);
      if ($cmp593) {
       $T$0$lcssa = $51;
       break L115;
      } else {
       $K583$0266 = $shl600;$T$0265 = $51;
      }
     }
     HEAP32[$arrayidx599>>2] = $p$1;
     $parent610 = ((($p$1)) + 24|0);
     HEAP32[$parent610>>2] = $T$0265;
     $bk611 = ((($p$1)) + 12|0);
     HEAP32[$bk611>>2] = $p$1;
     $fd612 = ((($p$1)) + 8|0);
     HEAP32[$fd612>>2] = $p$1;
     break L112;
    }
   } while(0);
   $fd620 = ((($T$0$lcssa)) + 8|0);
   $53 = HEAP32[$fd620>>2]|0;
   $bk631 = ((($53)) + 12|0);
   HEAP32[$bk631>>2] = $p$1;
   HEAP32[$fd620>>2] = $p$1;
   $fd633 = ((($p$1)) + 8|0);
   HEAP32[$fd633>>2] = $53;
   $bk634 = ((($p$1)) + 12|0);
   HEAP32[$bk634>>2] = $T$0$lcssa;
   $parent635 = ((($p$1)) + 24|0);
   HEAP32[$parent635>>2] = 0;
  }
 } while(0);
 $54 = HEAP32[(576532)>>2]|0;
 $dec = (($54) + -1)|0;
 HEAP32[(576532)>>2] = $dec;
 $cmp640 = ($dec|0)==(0);
 if (!($cmp640)) {
  return;
 }
 $sp$0$in$i = (576956);
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = ((($sp$0$i)) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[(576532)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $0 = 0, $and6 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $cmp7 = 0, $div = 0, $head = 0, $mul = 0, $or = 0, $req$0 = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($n_elements|0)==(0);
 if ($cmp) {
  $req$0 = 0;
 } else {
  $mul = Math_imul($elem_size, $n_elements)|0;
  $or = $elem_size | $n_elements;
  $tobool = ($or>>>0)>(65535);
  if ($tobool) {
   $div = (($mul>>>0) / ($n_elements>>>0))&-1;
   $cmp1 = ($div|0)==($elem_size|0);
   $spec$select = $cmp1 ? $mul : -1;
   $req$0 = $spec$select;
  } else {
   $req$0 = $mul;
  }
 }
 $call = (_malloc($req$0)|0);
 $cmp4 = ($call|0)==(0|0);
 if ($cmp4) {
  return ($call|0);
 }
 $head = ((($call)) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and6 = $0 & 3;
 $cmp7 = ($and6|0)==(0);
 if ($cmp7) {
  return ($call|0);
 }
 (_memset(($call|0),0,($req$0|0))|0);
 return ($call|0);
}
function _pthread_key_create($key,$destructor) {
 $key = $key|0;
 $destructor = $destructor|0;
 var $0 = 0, $arrayidx1 = 0, $call = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($key|0)==(0|0);
 if ($cmp) {
  $retval$0 = 22;
  return ($retval$0|0);
 }
 $call = (_malloc(8)|0);
 HEAP32[$call>>2] = 0;
 $arrayidx1 = ((($call)) + 4|0);
 HEAP32[$arrayidx1>>2] = 38177486;
 $0 = $call;
 HEAP32[$key>>2] = $0;
 $retval$0 = 0;
 return ($retval$0|0);
}
function _pthread_getspecific($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $key;
 $arrayidx = ((($0)) + 4|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $cmp = ($1|0)==(38177486);
 if (!($cmp)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $2 = $key;
 $3 = HEAP32[$2>>2]|0;
 $retval$0 = $3;
 return ($retval$0|0);
}
function _pthread_setspecific($key,$value) {
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $key;
 $arrayidx = ((($0)) + 4|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $cmp = ($1|0)==(38177486);
 if (!($cmp)) {
  $retval$0 = 22;
  return ($retval$0|0);
 }
 $2 = $value;
 HEAP32[$0>>2] = $2;
 $retval$0 = 0;
 return ($retval$0|0);
}
function _pthread_once($once_control,$init_routine) {
 $once_control = $once_control|0;
 $init_routine = $init_routine|0;
 var $0 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$once_control>>2]|0;
 $cmp = ($0|0)==(324508639);
 if ($cmp) {
  return 0;
 }
 FUNCTION_TABLE_v[$init_routine & 3]();
 HEAP32[$once_control>>2] = 324508639;
 return 0;
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  _memcpy(($__s1|0),($__s2|0),($__n|0))|0;
 }
 return ($__s1|0);
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($__s)|0);
 return ($call|0);
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__c2>>0]|0;
 HEAP8[$__c1>>0] = $0;
 return;
}
function __Znwm($size) {
 $size = $size|0;
 var $call = 0, $call$lcssa = 0, $call2 = 0, $cmp = 0, $cmp1 = 0, $spec$store$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($size|0)==(0);
 $spec$store$select = $cmp ? 1 : $size;
 while(1) {
  $call = (_malloc($spec$store$select)|0);
  $cmp1 = ($call|0)==(0|0);
  if (!($cmp1)) {
   $call$lcssa = $call;
   break;
  }
  $call2 = (__ZSt15get_new_handlerv()|0);
  $tobool = ($call2|0)==(0|0);
  if ($tobool) {
   $call$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$call2 & 3]();
 }
 return ($call$lcssa|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($this,$__token) {
 $this = $this|0;
 $__token = $__token|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i3 = 0, $call2 = 0, $call4 = 0, $cmp = 0, $cond$i$i$i = 0, $cond$i$i$i9 = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $__size_$i$i$i$i = ((($__token)) + 11|0);
 $0 = HEAP8[$__size_$i$i$i$i>>0]|0;
 $tobool$i$i$i$i = ($0<<24>>24)<(0);
 $1 = HEAP32[$__token>>2]|0;
 $cond$i$i$i = $tobool$i$i$i$i ? $1 : $__token;
 $call2 = (_open($cond$i$i$i,0,$vararg_buffer)|0);
 HEAP32[$this>>2] = $call2;
 $cmp = ($call2|0)<(0);
 if ($cmp) {
  $call4 = (___errno_location()|0);
  $2 = HEAP32[$call4>>2]|0;
  __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($vararg_buffer,47796,$__token);
  $__size_$i$i$i$i3 = ((($vararg_buffer)) + 11|0);
  $3 = HEAP8[$__size_$i$i$i$i3>>0]|0;
  $tobool$i$i$i$i4 = ($3<<24>>24)<(0);
  $4 = HEAP32[$vararg_buffer>>2]|0;
  $cond$i$i$i9 = $tobool$i$i$i$i4 ? $4 : $vararg_buffer;
  __ZNSt3__220__throw_system_errorEiPKc($2,$cond$i$i$i9);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__213random_deviceD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (_close($0)|0);
 return;
}
function __ZNSt3__213random_deviceclEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $call = 0, $call5 = 0, $call8 = 0, $cmp = 0, $cmp6 = 0, $n$0$ph = 0, $p$0$ph = 0, $r = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $r = sp;
 $n$0$ph = 4;$p$0$ph = $r;
 L1: while(1) {
  $cmp = ($n$0$ph|0)==(0);
  if ($cmp) {
   label = 9;
   break;
  }
  L4: while(1) {
   $0 = HEAP32[$this>>2]|0;
   $call = (_read($0,$p$0$ph,$n$0$ph)|0);
   switch ($call|0) {
   case 0:  {
    label = 5;
    break L1;
    break;
   }
   case -1:  {
    break;
   }
   default: {
    break L4;
   }
   }
   $call5 = (___errno_location()|0);
   $1 = HEAP32[$call5>>2]|0;
   $cmp6 = ($1|0)==(4);
   if (!($cmp6)) {
    label = 7;
    break L1;
   }
  }
  $sub = (($n$0$ph) - ($call))|0;
  $add$ptr = (($p$0$ph) + ($call)|0);
  $n$0$ph = $sub;$p$0$ph = $add$ptr;
 }
 if ((label|0) == 5) {
  __ZNSt3__220__throw_system_errorEiPKc(61,47826);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $call8 = (___errno_location()|0);
  $2 = HEAP32[$call8>>2]|0;
  __ZNSt3__220__throw_system_errorEiPKc($2,47848);
  // unreachable;
 }
 else if ((label|0) == 9) {
  $3 = HEAP32[$r>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $add2 = 0, $add6 = 0, $call = 0, $call3 = 0, $call5 = 0, $cap = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($msg)|0);
 $add2 = (($call) + 13)|0;
 $call3 = (__Znwm($add2)|0);
 HEAP32[$call3>>2] = $call;
 $cap = ((($call3)) + 4|0);
 HEAP32[$cap>>2] = $call;
 $count = ((($call3)) + 8|0);
 HEAP32[$count>>2] = 0;
 $call5 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($call3)|0);
 $add6 = (($call) + 1)|0;
 _memcpy(($call5|0),($msg|0),($add6|0))|0;
 HEAP32[$this>>2] = $call5;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($rep) {
 $rep = $rep|0;
 var $add$ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr2 = ((($rep)) + 12|0);
 return ($add$ptr2|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (43944);
 $__imp_ = ((($this)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($__imp_,$msg);
 return;
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (43964);
 $__imp_ = ((($this)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($__imp_,$msg);
 return;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i = 0, $__size_$i5 = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$this>>2]=0|0;HEAP32[$this+4>>2]=0|0;HEAP32[$this+8>>2]=0|0;
 $__size_$i5 = ((($__str)) + 11|0);
 $0 = HEAP8[$__size_$i5>>0]|0;
 $tobool$i = ($0<<24>>24)<(0);
 if ($tobool$i) {
  $1 = HEAP32[$__str>>2]|0;
  $__size_$i = ((($__str)) + 4|0);
  $2 = HEAP32[$__size_$i>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this,$1,$2);
 } else {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i12 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $cmp = ($__sz>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp2 = ($__sz>>>0)<(11);
 if ($cmp2) {
  $conv$i = $__sz&255;
  $__size_$i = ((($this)) + 11|0);
  HEAP8[$__size_$i>>0] = $conv$i;
  $__p$0 = $this;
 } else {
  $add$i$i = (($__sz) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwm($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i12 = ((($this)) + 4|0);
  HEAP32[$__size_$i12>>2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0,$__s,$__sz)|0);
 $arrayidx = (($__p$0) + ($__sz)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i$i$i = 0, $__size_$i3$i = 0, $cmp = 0, $cond$i = 0, $cond$i$i4 = 0, $conv$i$i = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($this|0)==($__str|0);
 if (!($cmp)) {
  $__size_$i$i$i = ((($__str)) + 11|0);
  $0 = HEAP8[$__size_$i$i$i>>0]|0;
  $tobool$i$i$i = ($0<<24>>24)<(0);
  $1 = HEAP32[$__str>>2]|0;
  $__size_$i3$i = ((($__str)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $0&255;
  $cond$i$i4 = $tobool$i$i$i ? $1 : $__str;
  $cond$i = $tobool$i$i$i ? $2 : $conv$i$i;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this,$cond$i$i4,$cond$i)|0);
 }
 return ($this|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i = 0, $cond$i19 = 0, $cond$i25 = 0, $conv$i$i = 0, $conv$i$i29 = 0, $phitmp$i = 0, $ref$tmp = 0, $sub = 0;
 var $tobool$i$i = 0, $tobool$i$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 $cmp = ($cond$i>>>0)<($__n>>>0);
 do {
  if ($cmp) {
   if ($tobool$i$i) {
    $__size_$i3$i = ((($this)) + 4|0);
    $4 = HEAP32[$__size_$i3$i>>2]|0;
    $cond$i25 = $4;
   } else {
    $conv$i$i = $0&255;
    $cond$i25 = $conv$i$i;
   }
   $sub = (($__n) - ($cond$i))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this,$cond$i,$sub,$cond$i25,0,$cond$i25,$__n,$__s);
  } else {
   if ($tobool$i$i) {
    $2 = HEAP32[$this>>2]|0;
    $cond$i19 = $2;
   } else {
    $cond$i19 = $this;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcm($cond$i19,$__s,$__n)|0);
   $arrayidx = (($cond$i19) + ($__n)|0);
   HEAP8[$ref$tmp>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
   $3 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i28 = ($3<<24>>24)<(0);
   if ($tobool$i$i28) {
    $__size_$i2$i = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i>>2] = $__n;
    break;
   } else {
    $conv$i$i29 = $__n&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i29;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcm($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  _memmove(($__s1|0),($__s2|0),($__n|0))|0;
 }
 return ($__s1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__cap_$i = 0, $__size_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr33 = 0, $add$ptr34 = 0, $add$ptr36 = 0, $add$ptr37 = 0, $add48 = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0;
 var $cmp17 = 0, $cmp23 = 0, $cmp30 = 0, $cmp41 = 0, $cmp5 = 0, $cond$i = 0, $cond40 = 0, $mul = 0, $or$i = 0, $phitmp = 0, $ref$tmp49 = 0, $sub2 = 0, $sub28 = 0, $sub29 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp49 = sp;
 $sub2 = (-18 - ($__old_cap))|0;
 $cmp = ($sub2>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$this>>2]|0;
  $cond$i = $1;
 } else {
  $cond$i = $this;
 }
 $cmp5 = ($__old_cap>>>0)<(2147483623);
 if ($cmp5) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(11);
  $add$i$i = (($$sroa$speculated) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $phitmp = $cmp$i ? 11 : $and$i$i;
  $cond40 = $phitmp;
 } else {
  $cond40 = -17;
 }
 $call$i$i$i = (__Znwm($cond40)|0);
 $cmp17 = ($__n_copy|0)==(0);
 if (!($cmp17)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $cmp23 = ($__n_add|0)==(0);
 if (!($cmp23)) {
  $add$ptr = (($call$i$i$i) + ($__n_copy)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr,$__p_new_stuff,$__n_add)|0);
 }
 $sub28 = (($__old_sz) - ($__n_del))|0;
 $sub29 = (($sub28) - ($__n_copy))|0;
 $cmp30 = ($sub29|0)==(0);
 if (!($cmp30)) {
  $add$ptr33 = (($call$i$i$i) + ($__n_copy)|0);
  $add$ptr34 = (($add$ptr33) + ($__n_add)|0);
  $add$ptr36 = (($cond$i) + ($__n_copy)|0);
  $add$ptr37 = (($add$ptr36) + ($__n_del)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr34,$add$ptr37,$sub29)|0);
 }
 $cmp41 = ($__old_cap|0)==(10);
 if (!($cmp41)) {
  __ZdlPv($cond$i);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $cond40 | -2147483648;
 $__cap_$i = ((($this)) + 8|0);
 HEAP32[$__cap_$i>>2] = $or$i;
 $add48 = (($sub28) + ($__n_add))|0;
 $__size_$i = ((($this)) + 4|0);
 HEAP32[$__size_$i>>2] = $add48;
 $arrayidx = (($call$i$i$i) + ($add48)|0);
 HEAP8[$ref$tmp49>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp49);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$pre = 0, $$pre72 = 0, $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cap_$i = 0, $__cap_$i$i = 0, $__new_data$0466470 = 0, $__new_data$047 = 0, $__now_long$0$off053 = 0, $__p$049 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__size_$i3$i18 = 0, $__size_$i9$pre$phiZZ2D = 0, $add = 0;
 var $add$i$i = 0, $add30 = 0, $add3059 = 0, $add3068 = 0, $add38$pre$phiZ2D = 0, $and$i$i = 0, $and$i$i32 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp6 = 0, $cond$i14 = 0, $cond$i44 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i20 = 0, $conv$i$i2067 = 0, $or$i = 0, $phitmp$i = 0;
 var $phitmp$i33 = 0, $spec$select$i = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__res_arg>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $__size_$i3$i = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i14 = $2;$cond$i44 = $phitmp$i;
 } else {
  $conv$i$i = $0&255;
  $cond$i14 = $conv$i$i;$cond$i44 = 10;
 }
 $cmp$i$i$i = ($cond$i14>>>0)>($__res_arg>>>0);
 $$sroa$speculated = $cmp$i$i$i ? $cond$i14 : $__res_arg;
 $cmp$i = ($$sroa$speculated>>>0)<(11);
 $add$i$i = (($$sroa$speculated) + 16)|0;
 $and$i$i32 = $add$i$i & -16;
 $phitmp$i33 = (($and$i$i32) + -1)|0;
 $spec$select$i = $cmp$i ? 10 : $phitmp$i33;
 $cmp6 = ($spec$select$i|0)==($cond$i44|0);
 do {
  if (!($cmp6)) {
   do {
    if ($cmp$i) {
     $4 = HEAP32[$this>>2]|0;
     if ($tobool$i$i) {
      $__new_data$047 = $this;$__now_long$0$off053 = 0;$__p$049 = $4;
      label = 13;
     } else {
      $conv$i$i2067 = $0&255;
      $add3068 = (($conv$i$i2067) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($this,$4,$add3068)|0);
      __ZdlPv($4);
      label = 16;
     }
    } else {
     $add = (($spec$select$i) + 1)|0;
     $call$i$i$i = (__Znwm($add)|0);
     if ($tobool$i$i) {
      $3 = HEAP32[$this>>2]|0;
      $__new_data$047 = $call$i$i$i;$__now_long$0$off053 = 1;$__p$049 = $3;
      label = 13;
      break;
     } else {
      $conv$i$i20 = $0&255;
      $add30 = (($conv$i$i20) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i,$this,$add30)|0);
      $$pre = ((($this)) + 4|0);
      $__new_data$0466470 = $call$i$i$i;$__size_$i9$pre$phiZZ2D = $$pre;$add38$pre$phiZ2D = $add;
      label = 15;
      break;
     }
    }
   } while(0);
   if ((label|0) == 13) {
    $__size_$i3$i18 = ((($this)) + 4|0);
    $5 = HEAP32[$__size_$i3$i18>>2]|0;
    $add3059 = (($5) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcm($__new_data$047,$__p$049,$add3059)|0);
    __ZdlPv($__p$049);
    if ($__now_long$0$off053) {
     $$pre72 = (($spec$select$i) + 1)|0;
     $__new_data$0466470 = $__new_data$047;$__size_$i9$pre$phiZZ2D = $__size_$i3$i18;$add38$pre$phiZ2D = $$pre72;
     label = 15;
    } else {
     label = 16;
    }
   }
   if ((label|0) == 15) {
    $or$i = $add38$pre$phiZ2D | -2147483648;
    $__cap_$i = ((($this)) + 8|0);
    HEAP32[$__cap_$i>>2] = $or$i;
    HEAP32[$__size_$i9$pre$phiZZ2D>>2] = $cond$i14;
    HEAP32[$this>>2] = $__new_data$0466470;
    break;
   }
   else if ((label|0) == 16) {
    $conv$i = $cond$i14&255;
    HEAP8[$__size_$i$i>>0] = $conv$i;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__cap_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr27 = 0, $add$ptr29 = 0, $add$ptr30 = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp16 = 0, $cmp24 = 0, $cmp34 = 0, $cmp4 = 0;
 var $cond$i = 0, $cond30 = 0, $mul = 0, $or$i = 0, $phitmp = 0, $sub = 0, $sub22 = 0, $sub23 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (-17 - ($__old_cap))|0;
 $cmp = ($sub>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$this>>2]|0;
  $cond$i = $1;
 } else {
  $cond$i = $this;
 }
 $cmp4 = ($__old_cap>>>0)<(2147483623);
 if ($cmp4) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(11);
  $add$i$i = (($$sroa$speculated) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $phitmp = $cmp$i ? 11 : $and$i$i;
  $cond30 = $phitmp;
 } else {
  $cond30 = -17;
 }
 $call$i$i$i = (__Znwm($cond30)|0);
 $cmp16 = ($__n_copy|0)==(0);
 if (!($cmp16)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $sub22 = (($__old_sz) - ($__n_del))|0;
 $sub23 = (($sub22) - ($__n_copy))|0;
 $cmp24 = ($sub23|0)==(0);
 if (!($cmp24)) {
  $add$ptr = (($call$i$i$i) + ($__n_copy)|0);
  $add$ptr27 = (($add$ptr) + ($__n_add)|0);
  $add$ptr29 = (($cond$i) + ($__n_copy)|0);
  $add$ptr30 = (($add$ptr29) + ($__n_del)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr27,$add$ptr30,$sub23)|0);
 }
 $cmp34 = ($__old_cap|0)==(10);
 if (!($cmp34)) {
  __ZdlPv($cond$i);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $cond30 | -2147483648;
 $__cap_$i = ((($this)) + 8|0);
 HEAP32[$__cap_$i>>2] = $or$i;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $add = 0, $add$ptr = 0, $add7 = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i24 = 0, $cond$i30 = 0, $cond$i35 = 0, $conv$i$i = 0, $conv$i$i34 = 0;
 var $phitmp$i = 0, $ref$tmp = 0, $sub = 0, $sub8 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $__size_$i3$i = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i24 = $2;$cond$i35 = $phitmp$i;
 } else {
  $conv$i$i = $0&255;
  $cond$i24 = $conv$i$i;$cond$i35 = 10;
 }
 $sub = (($cond$i35) - ($cond$i24))|0;
 $cmp = ($sub>>>0)<($__n>>>0);
 if ($cmp) {
  $add7 = (($cond$i24) + ($__n))|0;
  $sub8 = (($add7) - ($cond$i35))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this,$cond$i35,$sub8,$cond$i24,$cond$i24,0,$__n,$__s);
 } else {
  $tobool = ($__n|0)==(0);
  if (!($tobool)) {
   if ($tobool$i$i) {
    $3 = HEAP32[$this>>2]|0;
    $cond$i30 = $3;
   } else {
    $cond$i30 = $this;
   }
   $add$ptr = (($cond$i30) + ($cond$i24)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr,$__s,$__n)|0);
   $add = (($cond$i24) + ($__n))|0;
   $4 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i33 = ($4<<24>>24)<(0);
   if ($tobool$i$i33) {
    $__size_$i2$i = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i>>2] = $add;
   } else {
    $conv$i$i34 = $add&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i34;
   }
   $arrayidx = (($cond$i30) + ($add)|0);
   HEAP8[$ref$tmp>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
  }
 }
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__c$addr = 0, $__cap$0 = 0, $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i15 = 0, $__size_$i21 = 0, $__sz$0 = 0, $add = 0, $add16 = 0, $and$i = 0, $call12$pn = 0, $cmp = 0, $conv$i = 0, $conv$i16 = 0;
 var $incdec$ptr = 0, $ref$tmp = 0, $sub = 0, $tobool$i = 0, $tobool$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__c$addr = sp + 1|0;
 $ref$tmp = sp;
 HEAP8[$__c$addr>>0] = $__c;
 $__size_$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i>>0]|0;
 $tobool$i = ($0<<24>>24)<(0);
 if ($tobool$i) {
  $__cap_$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i>>2]|0;
  $and$i = $1 & 2147483647;
  $sub = (($and$i) + -1)|0;
  $__size_$i21 = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i21>>2]|0;
  $__cap$0 = $sub;$__sz$0 = $2;
 } else {
  $conv$i = $0&255;
  $__cap$0 = 10;$__sz$0 = $conv$i;
 }
 $cmp = ($__sz$0|0)==($__cap$0|0);
 if ($cmp) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $3 = HEAP8[$__size_$i>>0]|0;
  $tobool$i20 = ($3<<24>>24)<(0);
  if ($tobool$i20) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($tobool$i) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $add = (($__sz$0) + 1)|0;
  $conv$i16 = $add&255;
  HEAP8[$__size_$i>>0] = $conv$i16;
  $call12$pn = $this;
 }
 else if ((label|0) == 8) {
  $4 = HEAP32[$this>>2]|0;
  $add16 = (($__sz$0) + 1)|0;
  $__size_$i15 = ((($this)) + 4|0);
  HEAP32[$__size_$i15>>2] = $add16;
  $call12$pn = $4;
 }
 $__p$0 = (($call12$pn) + ($__sz$0)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0,$__c$addr);
 $incdec$ptr = ((($__p$0)) + 1|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($incdec$ptr,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($this,$__s,$__sz,$__reserve) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 $__reserve = $__reserve|0;
 var $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i11 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $cmp = ($__reserve>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp2 = ($__reserve>>>0)<(11);
 if ($cmp2) {
  $conv$i = $__sz&255;
  $__size_$i = ((($this)) + 11|0);
  HEAP8[$__size_$i>>0] = $conv$i;
  $__p$0 = $this;
 } else {
  $add$i$i = (($__reserve) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwm($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i11 = ((($this)) + 4|0);
  HEAP32[$__size_$i11>>2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0,$__s,$__sz)|0);
 $arrayidx = (($__p$0) + ($__sz)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__i$0$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add = 0, $arrayidx$i$i = 0, $call = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $call = (__ZNSt3__211char_traitsIcE6lengthEPKc($__lhs)|0);
 $__size_$i$i = ((($__rhs)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__size_$i3$i = ((($__rhs)) + 4|0);
 $1 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $0&255;
 $cond$i = $tobool$i$i ? $1 : $conv$i$i;
 $add = (($cond$i) + ($call))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($agg$result,$__lhs,$call,$add);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__rhs>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__rhs;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($agg$result,$cond$i$i,$cond$i)|0);
 return;
}
function __ZNSt3__220__throw_system_errorEiPKc($ev,$what_arg) {
 $ev = $ev|0;
 $what_arg = $what_arg|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__type_name$i = 0, $add$ptr = 0, $call = 0, $call10 = 0, $call14 = 0, $cond = 0, $exception_class = 0, $primaryException = 0, $thrown_object = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vfn = 0, $vfn13 = 0;
 var $vtable = 0, $vtable12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $call = (___cxa_get_globals_fast()|0);
 $tobool = ($call|0)==(0|0);
 if (!($tobool)) {
  $0 = HEAP32[$call>>2]|0;
  $tobool1 = ($0|0)==(0|0);
  if (!($tobool1)) {
   $add$ptr = ((($0)) + 80|0);
   $exception_class = ((($0)) + 48|0);
   $1 = $exception_class;
   $2 = $1;
   $3 = HEAP32[$2>>2]|0;
   $4 = (($1) + 4)|0;
   $5 = $4;
   $6 = HEAP32[$5>>2]|0;
   $7 = $3 & -256;
   $8 = ($7|0)==(1126902528);
   $9 = ($6|0)==(1129074247);
   $10 = $8 & $9;
   if (!($10)) {
    HEAP32[$vararg_buffer7>>2] = 48022;
    _abort_message(47972,$vararg_buffer7);
    // unreachable;
   }
   $11 = ($3|0)==(1126902529);
   $12 = ($6|0)==(1129074247);
   $13 = $11 & $12;
   if ($13) {
    $primaryException = ((($0)) + 44|0);
    $14 = HEAP32[$primaryException>>2]|0;
    $cond = $14;
   } else {
    $cond = $add$ptr;
   }
   HEAP32[$thrown_object>>2] = $cond;
   $15 = HEAP32[$0>>2]|0;
   $__type_name$i = ((($15)) + 4|0);
   $16 = HEAP32[$__type_name$i>>2]|0;
   $vtable = HEAP32[10798]|0;
   $vfn = ((($vtable)) + 16|0);
   $17 = HEAP32[$vfn>>2]|0;
   $call10 = (FUNCTION_TABLE_iiii[$17 & 15](43192,$15,$thrown_object)|0);
   if ($call10) {
    $18 = HEAP32[$thrown_object>>2]|0;
    $vtable12 = HEAP32[$18>>2]|0;
    $vfn13 = ((($vtable12)) + 8|0);
    $19 = HEAP32[$vfn13>>2]|0;
    $call14 = (FUNCTION_TABLE_ii[$19 & 15]($18)|0);
    HEAP32[$vararg_buffer>>2] = 48022;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $16;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $call14;
    _abort_message(47886,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 48022;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $16;
    _abort_message(47931,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(48010,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $call = 0, $call1 = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $call = (_pthread_once(576996,2)|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  $0 = HEAP32[144250]|0;
  $call1 = (_pthread_getspecific($0)|0);
  STACKTOP = sp;return ($call1|0);
 } else {
  _abort_message(48161,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[10900]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cmp = 0, $cmp4 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, $src2dst_offset = 0, $static_type = 0, $vfn = 0, $vtable = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$thrown_type,0)|0);
 if ($call) {
  $retval$2 = 1;
 } else {
  $0 = ($thrown_type|0)==(0|0);
  if ($0) {
   $retval$2 = 0;
  } else {
   $1 = (___dynamic_cast($thrown_type,43216,43200,0)|0);
   $cmp = ($1|0)==(0|0);
   if ($cmp) {
    $retval$2 = 0;
   } else {
    $2 = ((($info)) + 4|0);
    dest=$2; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $1;
    $static_type = ((($info)) + 8|0);
    HEAP32[$static_type>>2] = $this;
    $src2dst_offset = ((($info)) + 12|0);
    HEAP32[$src2dst_offset>>2] = -1;
    $number_of_dst_type = ((($info)) + 48|0);
    HEAP32[$number_of_dst_type>>2] = 1;
    $vtable = HEAP32[$1>>2]|0;
    $vfn = ((($vtable)) + 28|0);
    $3 = HEAP32[$vfn>>2]|0;
    $4 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$3 & 15]($1,$info,$4,1);
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    $5 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
    $cmp4 = ($5|0)==(1);
    if ($cmp4) {
     $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
     $6 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
     HEAP32[$adjustedPtr>>2] = $6;
     $retval$0 = 1;
    } else {
     $retval$0 = 0;
    }
    $retval$2 = $retval$0;
   }
  }
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp12 = 0, $cmp13 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0;
 var $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   if ($call3) {
    $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
    $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
    $cmp = ($2|0)==($current_ptr|0);
    if (!($cmp)) {
     $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
     $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
     $cmp5 = ($3|0)==($current_ptr|0);
     if (!($cmp5)) {
      $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
      HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
      HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
      $number_to_dst_ptr = ((($info)) + 40|0);
      $4 = HEAP32[$number_to_dst_ptr>>2]|0;
      $add = (($4) + 1)|0;
      HEAP32[$number_to_dst_ptr>>2] = $add;
      $number_to_static_ptr = ((($info)) + 36|0);
      $5 = HEAP32[$number_to_static_ptr>>2]|0;
      $cmp12 = ($5|0)==(1);
      if ($cmp12) {
       $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
       $6 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
       $cmp13 = ($6|0)==(2);
       if ($cmp13) {
        $search_done = ((($info)) + 54|0);
        HEAP8[$search_done>>0] = 1;
       }
      }
      $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
      HEAP32[$is_dst_type_derived_from_static_type>>2] = 4;
      break;
     }
    }
    $cmp7 = ($path_below|0)==(1);
    if ($cmp7) {
     $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($x,$y,$0) {
 $x = $x|0;
 $y = $y|0;
 $0 = $0|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($x|0)==($y|0);
 return ($cmp|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $path_dst_ptr_to_static_ptr6 = 0, $search_done = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 $cmp = ($0|0)==(0|0);
 do {
  if ($cmp) {
   HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $adjustedPtr;
   $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
   HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
   $number_to_static_ptr = ((($info)) + 36|0);
   HEAP32[$number_to_static_ptr>>2] = 1;
  } else {
   $cmp4 = ($0|0)==($adjustedPtr|0);
   if (!($cmp4)) {
    $number_to_static_ptr11 = ((($info)) + 36|0);
    $2 = HEAP32[$number_to_static_ptr11>>2]|0;
    $add = (($2) + 1)|0;
    HEAP32[$number_to_static_ptr11>>2] = $add;
    $path_dst_ptr_to_static_ptr12 = ((($info)) + 24|0);
    HEAP32[$path_dst_ptr_to_static_ptr12>>2] = 2;
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr6 = ((($info)) + 24|0);
   $1 = HEAP32[$path_dst_ptr_to_static_ptr6>>2]|0;
   $cmp7 = ($1|0)==(2);
   if ($cmp7) {
    HEAP32[$path_dst_ptr_to_static_ptr6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this,$info,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cmp2 = 0, $path_dynamic_ptr_to_static_ptr = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 if ($cmp) {
  $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
  $1 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
  $cmp2 = ($1|0)==(1);
  if (!($cmp2)) {
   HEAP32[$path_dynamic_ptr_to_static_ptr>>2] = $path_below;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp18 = 0, $cmp2 = 0, $cmp21 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $number_of_dst_type = 0;
 var $number_of_dst_type17 = 0, $number_to_static_ptr = 0, $number_to_static_ptr26 = 0, $or$cond = 0, $or$cond19 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $search_done = 0, $search_done23 = 0, $search_done27 = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $found_any_static_type = ((($info)) + 53|0);
 HEAP8[$found_any_static_type>>0] = 1;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 do {
  if ($cmp) {
   $found_our_static_ptr = ((($info)) + 52|0);
   HEAP8[$found_our_static_ptr>>0] = 1;
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $1 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp2 = ($1|0)==(0|0);
   if ($cmp2) {
    HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $dst_ptr;
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
    $number_to_static_ptr = ((($info)) + 36|0);
    HEAP32[$number_to_static_ptr>>2] = 1;
    $number_of_dst_type = ((($info)) + 48|0);
    $2 = HEAP32[$number_of_dst_type>>2]|0;
    $cmp5 = ($2|0)==(1);
    $cmp7 = ($path_below|0)==(1);
    $or$cond = $cmp7 & $cmp5;
    if (!($or$cond)) {
     break;
    }
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $cmp10 = ($1|0)==($dst_ptr|0);
   if (!($cmp10)) {
    $number_to_static_ptr26 = ((($info)) + 36|0);
    $6 = HEAP32[$number_to_static_ptr26>>2]|0;
    $add = (($6) + 1)|0;
    HEAP32[$number_to_static_ptr26>>2] = $add;
    $search_done27 = ((($info)) + 54|0);
    HEAP8[$search_done27>>0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr12 = ((($info)) + 24|0);
   $3 = HEAP32[$path_dst_ptr_to_static_ptr12>>2]|0;
   $cmp13 = ($3|0)==(2);
   if ($cmp13) {
    HEAP32[$path_dst_ptr_to_static_ptr12>>2] = $path_below;
    $5 = $path_below;
   } else {
    $5 = $3;
   }
   $number_of_dst_type17 = ((($info)) + 48|0);
   $4 = HEAP32[$number_of_dst_type17>>2]|0;
   $cmp18 = ($4|0)==(1);
   $cmp21 = ($5|0)==(1);
   $or$cond19 = $cmp18 & $cmp21;
   if ($or$cond19) {
    $search_done23 = ((($info)) + 54|0);
    HEAP8[$search_done23>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0;
 var $cmp = 0, $cmp14 = 0, $cmp16 = 0, $cmp19 = 0, $cmp25 = 0, $cmp27 = 0, $cmp30 = 0, $cmp33 = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $or$cond = 0, $or$cond15 = 0, $or$cond16 = 0, $or$cond17 = 0, $path_dst_ptr_to_static_ptr = 0;
 var $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, $spec$select = 0, $spec$select18 = 0, $src2dst_offset5 = 0, $static_ptr3 = 0, $static_type4 = 0, $vfn = 0, $vfn11 = 0, $vtable10 = 0, $vtable7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $arrayidx = ((($0)) + -8|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $add$ptr = (($static_ptr) + ($1)|0);
 $arrayidx1 = ((($0)) + -4|0);
 $2 = HEAP32[$arrayidx1>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $static_ptr3 = ((($info)) + 4|0);
 HEAP32[$static_ptr3>>2] = $static_ptr;
 $static_type4 = ((($info)) + 8|0);
 HEAP32[$static_type4>>2] = $static_type;
 $src2dst_offset5 = ((($info)) + 12|0);
 HEAP32[$src2dst_offset5>>2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
 $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
 $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
 $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
 $number_to_dst_ptr = ((($info)) + 40|0);
 dest=$dst_ptr_leading_to_static_ptr; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$dst_ptr_leading_to_static_ptr+36>>1]=0|0;HEAP8[$dst_ptr_leading_to_static_ptr+38>>0]=0|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($2,$dst_type,0)|0);
 L1: do {
  if ($call) {
   $number_of_dst_type = ((($info)) + 48|0);
   HEAP32[$number_of_dst_type>>2] = 1;
   $vtable7 = HEAP32[$2>>2]|0;
   $vfn = ((($vtable7)) + 20|0);
   $3 = HEAP32[$vfn>>2]|0;
   FUNCTION_TABLE_viiiiii[$3 & 7]($2,$info,$add$ptr,$add$ptr,1,0);
   $4 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp = ($4|0)==(1);
   $spec$select = $cmp ? $add$ptr : 0;
   $dst_ptr$0 = $spec$select;
  } else {
   $number_to_static_ptr = ((($info)) + 36|0);
   $vtable10 = HEAP32[$2>>2]|0;
   $vfn11 = ((($vtable10)) + 24|0);
   $5 = HEAP32[$vfn11>>2]|0;
   FUNCTION_TABLE_viiiii[$5 & 3]($2,$info,$add$ptr,1,0);
   $6 = HEAP32[$number_to_static_ptr>>2]|0;
   switch ($6|0) {
   case 0:  {
    $7 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp14 = ($7|0)==(1);
    $8 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp16 = ($8|0)==(1);
    $or$cond = $cmp14 & $cmp16;
    $9 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp19 = ($9|0)==(1);
    $or$cond15 = $or$cond & $cmp19;
    $10 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $spec$select18 = $or$cond15 ? $10 : 0;
    $dst_ptr$0 = $spec$select18;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp25 = ($11|0)==(1);
   if (!($cmp25)) {
    $12 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp27 = ($12|0)==(0);
    $13 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp30 = ($13|0)==(1);
    $or$cond16 = $cmp27 & $cmp30;
    $14 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp33 = ($14|0)==(1);
    $or$cond17 = $or$cond16 & $cmp33;
    if (!($or$cond17)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $15 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $dst_ptr$0 = $15;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiiiii[$2 & 7]($1,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_type = 0, $__base_type40 = 0, $add = 0, $call = 0, $call3 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp26 = 0, $cmp27 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off032 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, $tobool16 = 0;
 var $tobool19 = 0, $vfn = 0, $vfn42 = 0, $vtable = 0, $vtable41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   if (!($call3)) {
    $__base_type40 = ((($this)) + 8|0);
    $13 = HEAP32[$__base_type40>>2]|0;
    $vtable41 = HEAP32[$13>>2]|0;
    $vfn42 = ((($vtable41)) + 24|0);
    $14 = HEAP32[$vfn42>>2]|0;
    FUNCTION_TABLE_viiiii[$14 & 3]($13,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp = ($2|0)==($current_ptr|0);
   if (!($cmp)) {
    $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $cmp5 = ($3|0)==($current_ptr|0);
    if (!($cmp5)) {
     $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
     $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
     $4 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
     $cmp11 = ($4|0)==(4);
     if ($cmp11) {
      break;
     }
     $found_our_static_ptr = ((($info)) + 52|0);
     HEAP8[$found_our_static_ptr>>0] = 0;
     $found_any_static_type = ((($info)) + 53|0);
     HEAP8[$found_any_static_type>>0] = 0;
     $__base_type = ((($this)) + 8|0);
     $5 = HEAP32[$__base_type>>2]|0;
     $vtable = HEAP32[$5>>2]|0;
     $vfn = ((($vtable)) + 20|0);
     $6 = HEAP32[$vfn>>2]|0;
     FUNCTION_TABLE_viiiiii[$6 & 7]($5,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $7 = HEAP8[$found_any_static_type>>0]|0;
     $tobool16 = ($7<<24>>24)==(0);
     if ($tobool16) {
      $is_dst_type_derived_from_static_type13$0$off032 = 0;
      label = 11;
     } else {
      $8 = HEAP8[$found_our_static_ptr>>0]|0;
      $tobool19 = ($8<<24>>24)==(0);
      if ($tobool19) {
       $is_dst_type_derived_from_static_type13$0$off032 = 1;
       label = 11;
      } else {
       label = 15;
      }
     }
     do {
      if ((label|0) == 11) {
       HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
       $number_to_dst_ptr = ((($info)) + 40|0);
       $9 = HEAP32[$number_to_dst_ptr>>2]|0;
       $add = (($9) + 1)|0;
       HEAP32[$number_to_dst_ptr>>2] = $add;
       $number_to_static_ptr = ((($info)) + 36|0);
       $10 = HEAP32[$number_to_static_ptr>>2]|0;
       $cmp26 = ($10|0)==(1);
       if ($cmp26) {
        $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
        $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
        $cmp27 = ($11|0)==(2);
        if ($cmp27) {
         $search_done = ((($info)) + 54|0);
         HEAP8[$search_done>>0] = 1;
         if ($is_dst_type_derived_from_static_type13$0$off032) {
          label = 15;
          break;
         } else {
          $12 = 4;
          break;
         }
        }
       }
       if ($is_dst_type_derived_from_static_type13$0$off032) {
        label = 15;
       } else {
        $12 = 4;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      $12 = 3;
     }
     HEAP32[$is_dst_type_derived_from_static_type>>2] = $12;
     break;
    }
   }
   $cmp7 = ($path_below|0)==(1);
   if ($cmp7) {
    $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
    HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 28|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiii[$2 & 15]($1,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $call = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $call = (_pthread_key_create(577000,18)|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 } else {
  _abort_message(48210,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $call = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[144250]|0;
 $call = (_pthread_setspecific($0,0)|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 } else {
  _abort_message(48260,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call8 = 0, $exception_class = 0, $terminateHandler = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___cxa_get_globals_fast()|0);
 $tobool = ($call|0)==(0|0);
 if (!($tobool)) {
  $0 = HEAP32[$call>>2]|0;
  $tobool1 = ($0|0)==(0|0);
  if (!($tobool1)) {
   $exception_class = ((($0)) + 48|0);
   $1 = $exception_class;
   $2 = $1;
   $3 = HEAP32[$2>>2]|0;
   $4 = (($1) + 4)|0;
   $5 = $4;
   $6 = HEAP32[$5>>2]|0;
   $7 = $3 & -256;
   $8 = ($7|0)==(1126902528);
   $9 = ($6|0)==(1129074247);
   $10 = $8 & $9;
   if ($10) {
    $terminateHandler = ((($0)) + 12|0);
    $11 = HEAP32[$terminateHandler>>2]|0;
    __ZSt11__terminatePFvvE($11);
    // unreachable;
   }
  }
 }
 $call8 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($call8);
 // unreachable;
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$func & 3]();
 _abort_message(48313,$vararg_buffer);
 // unreachable;
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10963]|0;
 $1 = (($0) + 0)|0;
 HEAP32[10963] = $1;
 $2 = $0;
 return ($2|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (43944);
 $__imp_ = ((($this)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($__imp_);
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $__imp_ = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__imp_ = ((($this)) + 4|0);
 $call = (__ZNKSt3__218__libcpp_refstring5c_strEv($__imp_)|0);
 return ($call|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call2 = 0, $cmp = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this)|0);
 if ($call) {
  $0 = HEAP32[$this>>2]|0;
  $call2 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_846($0)|0);
  $count = ((($call2)) + 8|0);
  $1 = HEAP32[$count>>2]|0;
  $2 = (($1) + -1)|0;
  HEAP32[$count>>2] = $2;
  $3 = (($1) + -1)|0;
  $cmp = ($3|0)<(0);
  if ($cmp) {
   __ZdlPv($call2);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_846($data_) {
 $data_ = $data_|0;
 var $add$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = ((($data_)) + -12|0);
 return ($add$ptr|0);
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (43964);
 $__imp_ = ((($this)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($__imp_);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $__imp_ = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__imp_ = ((($this)) + 4|0);
 $call = (__ZNKSt3__218__libcpp_refstring5c_strEv($__imp_)|0);
 return ($call|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$thrown_type,0)|0);
 return ($call|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__flags = 0, $__flags4 = 0, $__pointee = 0, $__pointee7 = 0, $and = 0, $call = 0, $call12 = 0, $call8 = 0, $cmp = 0, $cmp19 = 0, $cmp26 = 0, $cmp29 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $neg = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$4 = 0, $src2dst_offset = 0;
 var $static_type = 0, $tobool = 0, $vfn = 0, $vtable = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$adjustedPtr>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$adjustedPtr>>2] = $1;
 $call = (__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,0)|0);
 if ($call) {
  $retval$4 = 1;
 } else {
  $2 = ($thrown_type|0)==(0|0);
  if ($2) {
   $retval$4 = 0;
  } else {
   $3 = (___dynamic_cast($thrown_type,43216,43320,0)|0);
   $cmp = ($3|0)==(0|0);
   if ($cmp) {
    $retval$4 = 0;
   } else {
    $__flags = ((($3)) + 8|0);
    $4 = HEAP32[$__flags>>2]|0;
    $__flags4 = ((($this)) + 8|0);
    $5 = HEAP32[$__flags4>>2]|0;
    $neg = $5 ^ -1;
    $and = $4 & $neg;
    $tobool = ($and|0)==(0);
    if ($tobool) {
     $__pointee = ((($this)) + 12|0);
     $6 = HEAP32[$__pointee>>2]|0;
     $__pointee7 = ((($3)) + 12|0);
     $7 = HEAP32[$__pointee7>>2]|0;
     $call8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($6,$7,0)|0);
     if ($call8) {
      $retval$4 = 1;
     } else {
      $8 = HEAP32[$__pointee>>2]|0;
      $call12 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($8,43352,0)|0);
      if ($call12) {
       $retval$4 = 1;
      } else {
       $9 = HEAP32[$__pointee>>2]|0;
       $10 = ($9|0)==(0|0);
       if ($10) {
        $retval$4 = 0;
       } else {
        $11 = (___dynamic_cast($9,43216,43200,0)|0);
        $cmp19 = ($11|0)==(0|0);
        if ($cmp19) {
         $retval$4 = 0;
        } else {
         $12 = HEAP32[$__pointee7>>2]|0;
         $13 = ($12|0)==(0|0);
         if ($13) {
          $retval$4 = 0;
         } else {
          $14 = (___dynamic_cast($12,43216,43200,0)|0);
          $cmp26 = ($14|0)==(0|0);
          if ($cmp26) {
           $retval$4 = 0;
          } else {
           $15 = ((($info)) + 4|0);
           dest=$15; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
           HEAP32[$info>>2] = $14;
           $static_type = ((($info)) + 8|0);
           HEAP32[$static_type>>2] = $11;
           $src2dst_offset = ((($info)) + 12|0);
           HEAP32[$src2dst_offset>>2] = -1;
           $number_of_dst_type = ((($info)) + 48|0);
           HEAP32[$number_of_dst_type>>2] = 1;
           $vtable = HEAP32[$14>>2]|0;
           $vfn = ((($vtable)) + 28|0);
           $16 = HEAP32[$vfn>>2]|0;
           $17 = HEAP32[$adjustedPtr>>2]|0;
           FUNCTION_TABLE_viiii[$16 & 15]($14,$info,$17,1);
           $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
           $18 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
           $cmp29 = ($18|0)==(1);
           if ($cmp29) {
            $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
            $19 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
            HEAP32[$adjustedPtr>>2] = $19;
            $retval$0 = 1;
           } else {
            $retval$0 = 0;
           }
           $retval$4 = $retval$0;
          }
         }
        }
       }
      }
     }
    } else {
     $retval$4 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $call = 0, $call2 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$thrown_type,0)|0);
 if ($call) {
  $retval$0 = 1;
 } else {
  $call2 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($thrown_type,43360,0)|0);
  $retval$0 = $call2;
 }
 return ($retval$0|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__flags = 0, $add$ptr = 0, $and = 0, $and30 = 0, $arraydecay = 0, $call = 0, $cmp = 0, $cmp19 = 0, $cmp40 = 0;
 var $found_any_static_type5 = 0, $found_our_static_ptr2 = 0, $incdec$ptr = 0, $incdec$ptr39 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0, $static_type = 0, $tobool14 = 0, $tobool17 = 0, $tobool22 = 0, $tobool27 = 0, $tobool31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $found_our_static_ptr2 = ((($info)) + 52|0);
  $1 = HEAP8[$found_our_static_ptr2>>0]|0;
  $found_any_static_type5 = ((($info)) + 53|0);
  $2 = HEAP8[$found_any_static_type5>>0]|0;
  $arraydecay = ((($this)) + 16|0);
  $__base_count = ((($this)) + 12|0);
  $3 = HEAP32[$__base_count>>2]|0;
  $add$ptr = (((($this)) + 16|0) + ($3<<3)|0);
  HEAP8[$found_our_static_ptr2>>0] = 0;
  HEAP8[$found_any_static_type5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($arraydecay,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $cmp = ($3|0)>(1);
  L4: do {
   if ($cmp) {
    $incdec$ptr = ((($this)) + 24|0);
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    $__flags = ((($this)) + 8|0);
    $search_done = ((($info)) + 54|0);
    $p$0 = $incdec$ptr;
    while(1) {
     $4 = HEAP8[$search_done>>0]|0;
     $tobool14 = ($4<<24>>24)==(0);
     if (!($tobool14)) {
      break L4;
     }
     $5 = HEAP8[$found_our_static_ptr2>>0]|0;
     $tobool17 = ($5<<24>>24)==(0);
     if ($tobool17) {
      $8 = HEAP8[$found_any_static_type5>>0]|0;
      $tobool27 = ($8<<24>>24)==(0);
      if (!($tobool27)) {
       $9 = HEAP32[$__flags>>2]|0;
       $and30 = $9 & 1;
       $tobool31 = ($and30|0)==(0);
       if ($tobool31) {
        break L4;
       }
      }
     } else {
      $6 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
      $cmp19 = ($6|0)==(1);
      if ($cmp19) {
       break L4;
      }
      $7 = HEAP32[$__flags>>2]|0;
      $and = $7 & 2;
      $tobool22 = ($and|0)==(0);
      if ($tobool22) {
       break L4;
      }
     }
     HEAP8[$found_our_static_ptr2>>0] = 0;
     HEAP8[$found_any_static_type5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $incdec$ptr39 = ((($p$0)) + 8|0);
     $cmp40 = ($incdec$ptr39>>>0)<($add$ptr>>>0);
     if ($cmp40) {
      $p$0 = $incdec$ptr39;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$found_our_static_ptr2>>0] = $1;
  HEAP8[$found_any_static_type5>>0] = $2;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__base_count63 = 0, $__flags34 = 0, $__flags72 = 0, $add = 0, $add$ptr = 0, $add$ptr64 = 0, $and = 0, $and35 = 0, $and73 = 0, $and88 = 0, $arraydecay = 0, $arraydecay62 = 0, $call = 0, $call3 = 0;
 var $cmp = 0, $cmp100 = 0, $cmp106 = 0, $cmp11 = 0, $cmp115 = 0, $cmp121 = 0, $cmp16 = 0, $cmp27 = 0, $cmp44 = 0, $cmp46 = 0, $cmp5 = 0, $cmp7 = 0, $cmp70 = 0, $cmp77 = 0, $cmp85 = 0, $cmp97 = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0;
 var $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr = 0, $incdec$ptr105 = 0, $incdec$ptr120 = 0, $incdec$ptr69 = 0, $incdec$ptr84 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off0 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $is_dst_type_derived_from_static_type13$2$off0 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr76 = 0, $p$0 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr99 = 0;
 var $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $search_done110 = 0, $search_done79 = 0, $search_done92 = 0, $static_type = 0, $tobool111 = 0, $tobool18 = 0, $tobool22 = 0, $tobool25 = 0, $tobool30 = 0, $tobool36 = 0, $tobool74 = 0, $tobool80 = 0, $tobool89 = 0, $tobool93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 L1: do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   if (!($call3)) {
    $arraydecay62 = ((($this)) + 16|0);
    $__base_count63 = ((($this)) + 12|0);
    $16 = HEAP32[$__base_count63>>2]|0;
    $add$ptr64 = (((($this)) + 16|0) + ($16<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($arraydecay62,$info,$current_ptr,$path_below,$use_strcmp);
    $incdec$ptr69 = ((($this)) + 24|0);
    $cmp70 = ($16|0)>(1);
    if (!($cmp70)) {
     break;
    }
    $__flags72 = ((($this)) + 8|0);
    $17 = HEAP32[$__flags72>>2]|0;
    $and73 = $17 & 2;
    $tobool74 = ($and73|0)==(0);
    if ($tobool74) {
     $number_to_static_ptr76 = ((($info)) + 36|0);
     $18 = HEAP32[$number_to_static_ptr76>>2]|0;
     $cmp77 = ($18|0)==(1);
     if (!($cmp77)) {
      $and88 = $17 & 1;
      $tobool89 = ($and88|0)==(0);
      if ($tobool89) {
       $search_done110 = ((($info)) + 54|0);
       $p65$2 = $incdec$ptr69;
       while(1) {
        $23 = HEAP8[$search_done110>>0]|0;
        $tobool111 = ($23<<24>>24)==(0);
        if (!($tobool111)) {
         break L1;
        }
        $24 = HEAP32[$number_to_static_ptr76>>2]|0;
        $cmp115 = ($24|0)==(1);
        if ($cmp115) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2,$info,$current_ptr,$path_below,$use_strcmp);
        $incdec$ptr120 = ((($p65$2)) + 8|0);
        $cmp121 = ($incdec$ptr120>>>0)<($add$ptr64>>>0);
        if ($cmp121) {
         $p65$2 = $incdec$ptr120;
        } else {
         break L1;
        }
       }
      }
      $path_dst_ptr_to_static_ptr99 = ((($info)) + 24|0);
      $search_done92 = ((($info)) + 54|0);
      $p65$1 = $incdec$ptr69;
      while(1) {
       $20 = HEAP8[$search_done92>>0]|0;
       $tobool93 = ($20<<24>>24)==(0);
       if (!($tobool93)) {
        break L1;
       }
       $21 = HEAP32[$number_to_static_ptr76>>2]|0;
       $cmp97 = ($21|0)==(1);
       if ($cmp97) {
        $22 = HEAP32[$path_dst_ptr_to_static_ptr99>>2]|0;
        $cmp100 = ($22|0)==(1);
        if ($cmp100) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1,$info,$current_ptr,$path_below,$use_strcmp);
       $incdec$ptr105 = ((($p65$1)) + 8|0);
       $cmp106 = ($incdec$ptr105>>>0)<($add$ptr64>>>0);
       if ($cmp106) {
        $p65$1 = $incdec$ptr105;
       } else {
        break L1;
       }
      }
     }
    }
    $search_done79 = ((($info)) + 54|0);
    $p65$0 = $incdec$ptr69;
    while(1) {
     $19 = HEAP8[$search_done79>>0]|0;
     $tobool80 = ($19<<24>>24)==(0);
     if (!($tobool80)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0,$info,$current_ptr,$path_below,$use_strcmp);
     $incdec$ptr84 = ((($p65$0)) + 8|0);
     $cmp85 = ($incdec$ptr84>>>0)<($add$ptr64>>>0);
     if ($cmp85) {
      $p65$0 = $incdec$ptr84;
     } else {
      break L1;
     }
    }
   }
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp = ($2|0)==($current_ptr|0);
   if (!($cmp)) {
    $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $cmp5 = ($3|0)==($current_ptr|0);
    if (!($cmp5)) {
     $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
     $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
     $4 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
     $cmp11 = ($4|0)==(4);
     if ($cmp11) {
      break;
     }
     $arraydecay = ((($this)) + 16|0);
     $__base_count = ((($this)) + 12|0);
     $5 = HEAP32[$__base_count>>2]|0;
     $add$ptr = (((($this)) + 16|0) + ($5<<3)|0);
     $found_our_static_ptr = ((($info)) + 52|0);
     $found_any_static_type = ((($info)) + 53|0);
     $search_done = ((($info)) + 54|0);
     $__flags34 = ((($this)) + 8|0);
     $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off0 = 0;$is_dst_type_derived_from_static_type13$0$off0 = 0;$p$0 = $arraydecay;
     L32: while(1) {
      $cmp16 = ($p$0>>>0)<($add$ptr>>>0);
      if (!($cmp16)) {
       $is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$0$off0;
       label = 18;
       break;
      }
      HEAP8[$found_our_static_ptr>>0] = 0;
      HEAP8[$found_any_static_type>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $6 = HEAP8[$search_done>>0]|0;
      $tobool18 = ($6<<24>>24)==(0);
      if (!($tobool18)) {
       $is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$0$off0;
       label = 18;
       break;
      }
      $7 = HEAP8[$found_any_static_type>>0]|0;
      $tobool22 = ($7<<24>>24)==(0);
      do {
       if ($tobool22) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off0;
       } else {
        $8 = HEAP8[$found_our_static_ptr>>0]|0;
        $tobool25 = ($8<<24>>24)==(0);
        if ($tobool25) {
         $11 = HEAP32[$__flags34>>2]|0;
         $and35 = $11 & 1;
         $tobool36 = ($and35|0)==(0);
         if ($tobool36) {
          $is_dst_type_derived_from_static_type13$2$off0 = 1;
          label = 18;
          break L32;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type13$1$off0 = 1;
          break;
         }
        }
        $9 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
        $cmp27 = ($9|0)==(1);
        if ($cmp27) {
         label = 23;
         break L32;
        }
        $10 = HEAP32[$__flags34>>2]|0;
        $and = $10 & 2;
        $tobool30 = ($and|0)==(0);
        if ($tobool30) {
         label = 23;
         break L32;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type13$1$off0 = 1;
        }
       }
      } while(0);
      $incdec$ptr = ((($p$0)) + 8|0);
      $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type13$0$off0 = $is_dst_type_derived_from_static_type13$1$off0;$p$0 = $incdec$ptr;
     }
     do {
      if ((label|0) == 18) {
       if (!($does_dst_type_point_to_our_static_type$0$off0)) {
        HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
        $number_to_dst_ptr = ((($info)) + 40|0);
        $12 = HEAP32[$number_to_dst_ptr>>2]|0;
        $add = (($12) + 1)|0;
        HEAP32[$number_to_dst_ptr>>2] = $add;
        $number_to_static_ptr = ((($info)) + 36|0);
        $13 = HEAP32[$number_to_static_ptr>>2]|0;
        $cmp44 = ($13|0)==(1);
        if ($cmp44) {
         $14 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
         $cmp46 = ($14|0)==(2);
         if ($cmp46) {
          HEAP8[$search_done>>0] = 1;
          if ($is_dst_type_derived_from_static_type13$2$off0) {
           label = 23;
           break;
          } else {
           $15 = 4;
           break;
          }
         }
        }
       }
       if ($is_dst_type_derived_from_static_type13$2$off0) {
        label = 23;
       } else {
        $15 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $15 = 3;
     }
     HEAP32[$is_dst_type_derived_from_static_type>>2] = $15;
     break;
    }
   }
   $cmp7 = ($path_below|0)==(1);
   if ($cmp7) {
    $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
    HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_count = 0, $add$ptr = 0, $arraydecay = 0, $call = 0, $cmp = 0, $cmp7 = 0, $incdec$ptr = 0, $incdec$ptr6 = 0, $p$0 = 0, $search_done = 0, $static_type = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 L1: do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $arraydecay = ((($this)) + 16|0);
   $__base_count = ((($this)) + 12|0);
   $1 = HEAP32[$__base_count>>2]|0;
   $add$ptr = (((($this)) + 16|0) + ($1<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($arraydecay,$info,$adjustedPtr,$path_below);
   $cmp = ($1|0)>(1);
   if ($cmp) {
    $incdec$ptr = ((($this)) + 24|0);
    $search_done = ((($info)) + 54|0);
    $p$0 = $incdec$ptr;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $2 = HEAP8[$search_done>>0]|0;
     $tobool = ($2<<24>>24)==(0);
     if (!($tobool)) {
      break L1;
     }
     $incdec$ptr6 = ((($p$0)) + 8|0);
     $cmp7 = ($incdec$ptr6>>>0)<($add$ptr>>>0);
     if ($cmp7) {
      $p$0 = $incdec$ptr6;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$adjustedPtr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 28|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)==(0);
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiii[$4 & 15]($3,$info,$add$ptr4,$cond);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 20|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($current_ptr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)==(0);
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiiiii[$4 & 7]($3,$info,$dst_ptr,$add$ptr4,$cond,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 24|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($current_ptr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)==(0);
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiiii[$4 & 3]($3,$info,$add$ptr4,$cond,$use_strcmp);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144251]|0;
 $1 = (($0) + 0)|0;
 HEAP32[144251] = $1;
 $2 = $0;
 return ($2|0);
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $conv = 0, $temp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $vtable = HEAP32[$catchType>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_iiii[$1 & 15]($catchType,$excpType,$temp)|0);
 $conv = $call&1;
 if ($call) {
  $2 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $2;
 }
 STACKTOP = sp;return ($conv|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $2 = 0;
 } else {
  $1 = (___dynamic_cast($type,43216,43320,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $2 = $phitmp1;
 }
 return ($2|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (setTempRet0((HEAP32[$rem + 4 >> 2] | 0) | 0), HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0(((high|0) < 0 ? -1 : 0) | 0);
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    totalMemory = _emscripten_get_heap_size()|0;

      oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
      newDynamicTop = oldDynamicTop + increment | 0;

      if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
        | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
        abortOnCannotGrowMemory(newDynamicTop|0)|0;
        ___setErrNo(12);
        return -1;
      }

      if ((newDynamicTop|0) > (totalMemory|0)) {
        if (_emscripten_resize_heap(newDynamicTop|0)|0) {
          // We resized the heap. Start another loop iteration if we need to.
        } else {
          // We failed to resize the heap.
          ___setErrNo(12);
          return -1;
        }
      }

      HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop|0;

    return oldDynamicTop|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&3]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&15](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&1](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&7](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&3]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&31](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&15](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0() {
 ; abort(0);return 0;
}
function b1(p0) {
 p0 = p0|0; abort(1);return 0;
}
function b2(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(2);return 0;
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(3);return 0;
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(4);return 0;
}
function _memset__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; return _memset(p0|0,p1|0,p2|0)|0;
}
function b5(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(5);return 0;
}
function b6(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(6);return 0;
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(7);return 0;
}
function b8() {
 ; abort(8);
}
function b9(p0) {
 p0 = p0|0; abort(9);
}
function b10(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(10);
}
function b11(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(11);
}
function b12(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(12);
}
function b13(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(13);
}
function b14(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(14);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,__ZN10emscripten8internal15raw_constructorI4KeysJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,__ZN10emscripten8internal12operator_newINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEEEPT_DpOT0_,b0];
var FUNCTION_TABLE_ii = [b1,___stdio_close,__ZNKSt11logic_error4whatEv,__ZNKSt13runtime_error4whatEv,__ZN10emscripten8internal7InvokerI4KeysJEE6invokeEPFS2_vE,__ZN4Core12Cryptography8checkKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN10emscripten8internal13getActualTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvPT_,__ZN10emscripten8internal7InvokerIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEE6invokeEPFSC_vE,__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4sizeEv,_fill_segment_thr,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iidiiii = [b2,_fmt_fp];
var FUNCTION_TABLE_iii = [b3,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_EE6invokeEPFS8_S8_EPNS0_11BindingTypeIS8_EUt_E,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJNS2_6vectorIS8_NS6_IS8_EEEEEE6invokeEPFS8_SB_EPSB_,__ZN10emscripten8internal7InvokerI4KeysJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeEPFS2_S9_EPNS0_11BindingTypeIS9_EUt_E,__ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbS8_EPNS0_11BindingTypeIS8_EUt_E,__ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7getWireIS2_EEPNS0_11BindingTypeIS9_EUt_ERKMS2_S9_RKT_,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEmPKSB_JEE6invokeERKSD_SF_,b3];
var FUNCTION_TABLE_iiii = [b4,_memset__wrapper,___stdio_write,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_iEE6invokeEPFS8_S8_iEPNS0_11BindingTypeIS8_EUt_Ei,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_EE6invokeEPFS8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_,__ZN4Core12Cryptography14checkSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmES2_SE_JmEE6invokeEPSG_PSC_m,__ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3setERSB_mRKS9_,b4,b4,b4];
var FUNCTION_TABLE_iiiii = [b5,___stdio_seek,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJNS2_6vectorIS8_NS6_IS8_EEEES8_S8_EE6invokeEPFS8_SB_S8_S8_EPSB_PNS0_11BindingTypeIS8_EUt_ESJ_,__ZN4Core12Cryptography18checkRingSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEESA_,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_iS8_EE6invokeEPFS8_S8_iS8_EPNS0_11BindingTypeIS8_EUt_EiSF_,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_S8_EE6invokeEPFS8_S8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_SF_,__ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_EE6invokeEPFbS8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_SF_,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EbSC_JmSE_EE6invokeEPSG_PSB_mPNS0_11BindingTypeIS9_EUt_E];
var FUNCTION_TABLE_iiiiii = [b6,__ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_NS2_6vectorIS8_NS6_IS8_EEEESB_EE6invokeEPFbS8_S8_SB_SB_EPNS0_11BindingTypeIS8_EUt_ESI_PSB_SJ_];
var FUNCTION_TABLE_iiiiiii = [b7,__ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJS9_S9_SB_S9_iEE6invokeEPFSB_S9_S9_SB_S9_iEPNS0_11BindingTypeIS9_EUt_ESI_PSB_SI_i];
var FUNCTION_TABLE_v = [b8,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b8];
var FUNCTION_TABLE_vi = [b9,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv119__pointer_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__Z12generateKeysv,__ZN10emscripten8internal14raw_destructorI4KeysEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEvPT_,__ZNSt3__213random_deviceD2Ev,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_vii = [b10,_fill_segment_default,__ZN4Core12Cryptography12cn_fast_hashENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography15cn_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography15cn_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography15cn_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography20cn_lite_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography20cn_lite_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography20cn_lite_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography20cn_dark_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography20cn_dark_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography20cn_dark_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography25cn_dark_lite_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography25cn_dark_lite_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography25cn_dark_lite_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography22cn_turtle_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography22cn_turtle_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography22cn_turtle_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography27cn_turtle_lite_slow_hash_v0ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography27cn_turtle_lite_slow_hash_v1ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography27cn_turtle_lite_slow_hash_v2ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography16chukwa_slow_hashENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography9tree_hashENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE,__ZN4Core12Cryptography11tree_branchENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE,__ZN4Core12Cryptography41generatePrivateViewKeyFromPrivateSpendKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__Z35generateViewKeysFromPrivateSpendKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__Z20secretKeyToPublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZN4Core12Cryptography19hashToEllipticCurveENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography10scReduce32ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE
,__ZN4Core12Cryptography12hashToScalarENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9push_backERKS6_,_pop_arg_long_double];
var FUNCTION_TABLE_viii = [b11,_hash_extra_blake,_hash_extra_groestl,_hash_extra_jh,_hash_extra_skein,__Z26cn_soft_shell_slow_hash_v0NSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi,__Z26cn_soft_shell_slow_hash_v1NSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi,__Z26cn_soft_shell_slow_hash_v2NSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi,__Z21generateKeyDerivationNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_,__ZN4Core12Cryptography16generateKeyImageENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_,__ZN4Core12Cryptography13scalarmultKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_,__ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7setWireIS2_EEvRKMS2_S9_RT_PNS0_11BindingTypeIS9_EUt_E,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EvPSB_JSD_EE6invokeERKSF_SG_PNS0_11BindingTypeIS9_EUt_E,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6resizeEmRKS6_,__ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getERKSB_m,b11];
var FUNCTION_TABLE_viiii = [b12,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZN4Core12Cryptography21tree_hash_from_branchENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEES8_S8_,__Z15derivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_,__Z15deriveSecretKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_,__Z17underivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_,__ZN4Core12Cryptography17generateSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EvPSB_JmSD_EE6invokeERKSF_SG_mPNS0_11BindingTypeIS9_EUt_E,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viiiii = [b13,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b14,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__Z22generateRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_NS_6vectorIS5_NS3_IS5_EEEES5_i,b14,b14,b14];

  return { ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, globalCtors: globalCtors, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var globalCtors = Module["globalCtors"] = asm["globalCtors"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;









































































if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    var doBrowserLoad = function() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (Module['calledRun']) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();


    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}





  return TurtleCoinCrypto
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
      module.exports = TurtleCoinCrypto;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return TurtleCoinCrypto; });
    else if (typeof exports === 'object')
      exports["TurtleCoinCrypto"] = TurtleCoinCrypto;
    