
var TurtleCoinCrypto = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  return (
function(TurtleCoinCrypto) {
  TurtleCoinCrypto = TurtleCoinCrypto || {};

// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof TurtleCoinCrypto !== 'undefined' ? TurtleCoinCrypto : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;



// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort();
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}


var Runtime = {
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html





/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}




// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 41360,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5284240,
    DYNAMIC_BASE = 5284240,
    DYNAMICTOP_PTR = 41328;




var TOTAL_STACK = 5242880;

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;






// Endianness check (note: assumes compiler arch was little-endian)

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math.imul || Math.imul(0xffffffff, 5) !== -5) Math.imul = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};


if (!Math.clz32) Math.clz32 = function(x) {
  var n = 32;
  var y = x >> 16; if (y) { n -= 16; x = y; }
  y = x >> 8; if (y) { n -= 8; x = y; }
  y = x >> 4; if (y) { n -= 4; x = y; }
  y = x >> 2; if (y) { n -= 2; x = y; }
  y = x >> 1; if (y) return n - 2;
  return n - x;
};

if (!Math.trunc) Math.trunc = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 41352;
/* global initializers */  __ATINIT__.push({ func: function() { globalCtors() } });


memoryInitializer = "turtlecoin-crypto.js.mem";





/* no memory initializer */
var tempDoublePtr = 41344

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
      }
    }var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var adj = EXCEPTIONS.infos[ptr].adjusted;
          var len = adj.length;
          for (var i = 0; i < len; i++) {
            if (adj[i] === adjusted) {
              return ptr;
            }
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_thread_atexit() {
  return _atexit.apply(null, arguments)
  }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted.push(thrown);
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___gxx_personality_v0() {
    }

  
    

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH_FS={resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(19);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(6);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(5);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(11);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(6);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(5);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(1);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[2];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(39);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(39);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(22);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(12);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(22);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(-e.errno); // syscall errnos are negated, node's are not
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(22);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(-e.errno);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(2);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(1);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(1);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(1);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(1);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(1);
        },readlink:function (node) {
          throw new FS.ErrnoError(1);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(5);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        }}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("random_device"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
          };
          this.setErrno(errno);
          this.message = 'FS error';
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(9);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -20;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -22;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -22;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -22;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -13;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(9);
        return stream;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        return low;
      },getZero:function () {
        SYSCALLS.get();
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // Can't handle 64-bit integers
      if (!(offset_high == -1 && offset_low < 0) &&
          !(offset_high == 0 && offset_low >= 0)) {
        return -75;
      }
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((result)>>2)]=tempI64[0],HEAP32[(((result)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -22;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -22; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(22);
          return -1;
        default: {
          return -22;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  
  var structRegistrations={};
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function __embind_finalize_value_object(structType) {
      var reg = structRegistrations[structType];
      delete structRegistrations[structType];
  
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
      var fieldRecords = reg.fields;
      var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
                concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
      whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
          var fields = {};
          fieldRecords.forEach(function(field, i) {
              var fieldName = field.fieldName;
              var getterReturnType = fieldTypes[i];
              var getter = field.getter;
              var getterContext = field.getterContext;
              var setterArgumentType = fieldTypes[i + fieldRecords.length];
              var setter = field.setter;
              var setterContext = field.setterContext;
              fields[fieldName] = {
                  read: function(ptr) {
                      return getterReturnType['fromWireType'](
                          getter(getterContext, ptr));
                  },
                  write: function(ptr, o) {
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                      runDestructors(destructors);
                  }
              };
          });
  
          return [{
              name: reg.name,
              'fromWireType': function(ptr) {
                  var rv = {};
                  for (var i in fields) {
                      rv[i] = fields[i].read(ptr);
                  }
                  rawDestructor(ptr);
                  return rv;
              },
              'toWireType': function(destructors, o) {
                  // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                  // assume all fields are present without checking.
                  for (var fieldName in fields) {
                      if (!(fieldName in o)) {
                          throw new TypeError('Missing field');
                      }
                  }
                  var ptr = rawConstructor();
                  for (fieldName in fields) {
                      fields[fieldName].write(ptr, o[fieldName]);
                  }
                  if (destructors !== null) {
                      destructors.push(rawDestructor, ptr);
                  }
                  return ptr;
              },
              'argPackAdvance': 8,
              'readValueFromPointer': simpleReadValueFromPointer,
              destructorFunction: rawDestructor,
          }];
      });
    }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  
  var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
              
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
              
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
              
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_value_object(
      rawType,
      name,
      constructorSignature,
      rawConstructor,
      destructorSignature,
      rawDestructor
    ) {
      structRegistrations[rawType] = {
          name: readLatin1String(name),
          rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
          rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
          fields: [],
      };
    }

  function __embind_register_value_object_field(
      structType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      structRegistrations[structType].fields.push({
          fieldName: readLatin1String(fieldName),
          getterReturnType: getterReturnType,
          getter: embind__requireFunction(getterSignature, getter),
          getterContext: getterContext,
          setterArgumentType: setterArgumentType,
          setter: embind__requireFunction(setterSignature, setter),
          setterContext: setterContext,
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }


  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function _abort() {
      Module['abort']();
    }

   

   

   

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }



  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

  
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('OOM');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    } 

  var ___dso_handle=41168;
FS.staticInit();;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var ASSERTIONS = false;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array


var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array }

var asmLibraryArg = {
  "a": abort,
  "b": setTempRet0,
  "c": getTempRet0,
  "d": ClassHandle,
  "e": ClassHandle_clone,
  "f": ClassHandle_delete,
  "g": ClassHandle_deleteLater,
  "h": ClassHandle_isAliasOf,
  "i": ClassHandle_isDeleted,
  "j": RegisteredClass,
  "k": RegisteredPointer,
  "l": RegisteredPointer_deleteObject,
  "m": RegisteredPointer_destructor,
  "n": RegisteredPointer_fromWireType,
  "o": RegisteredPointer_getPointee,
  "p": __ZSt18uncaught_exceptionv,
  "q": ___cxa_allocate_exception,
  "r": ___cxa_begin_catch,
  "s": ___cxa_find_matching_catch,
  "t": ___cxa_free_exception,
  "u": ___cxa_thread_atexit,
  "v": ___cxa_throw,
  "w": ___gxx_personality_v0,
  "x": ___resumeException,
  "y": ___setErrNo,
  "z": ___syscall140,
  "A": ___syscall146,
  "B": ___syscall221,
  "C": ___syscall3,
  "D": ___syscall5,
  "E": ___syscall6,
  "F": __embind_finalize_value_object,
  "G": __embind_register_bool,
  "H": __embind_register_class,
  "I": __embind_register_class_constructor,
  "J": __embind_register_class_function,
  "K": __embind_register_emval,
  "L": __embind_register_float,
  "M": __embind_register_function,
  "N": __embind_register_integer,
  "O": __embind_register_memory_view,
  "P": __embind_register_std_string,
  "Q": __embind_register_std_wstring,
  "R": __embind_register_value_object,
  "S": __embind_register_value_object_field,
  "T": __embind_register_void,
  "U": __emval_decref,
  "V": __emval_incref,
  "W": __emval_register,
  "X": __emval_take_value,
  "Y": _abort,
  "Z": _atexit,
  "_": _embind_repr,
  "$": _emscripten_get_heap_size,
  "aa": _emscripten_memcpy_big,
  "ab": _emscripten_resize_heap,
  "ac": abortOnCannotGrowMemory,
  "ad": constNoSmartPtrRawPointerToWireType,
  "ae": count_emval_handles,
  "af": craftInvokerFunction,
  "ag": createNamedFunction,
  "ah": downcastPointer,
  "ai": embind__requireFunction,
  "aj": embind_init_charCodes,
  "ak": ensureOverloadTable,
  "al": exposePublicSymbol,
  "am": extendError,
  "an": floatReadValueFromPointer,
  "ao": flushPendingDeletes,
  "ap": genericPointerToWireType,
  "aq": getBasestPointer,
  "ar": getInheritedInstance,
  "as": getInheritedInstanceCount,
  "at": getLiveInheritedInstances,
  "au": getShiftFromSize,
  "av": getTypeName,
  "aw": get_first_emval,
  "ax": heap32VectorToArray,
  "ay": init_ClassHandle,
  "az": init_RegisteredPointer,
  "aA": init_embind,
  "aB": init_emval,
  "aC": integerReadValueFromPointer,
  "aD": makeClassHandle,
  "aE": makeLegalFunctionName,
  "aF": new_,
  "aG": nonConstNoSmartPtrRawPointerToWireType,
  "aH": readLatin1String,
  "aI": registerType,
  "aJ": replacePublicSymbol,
  "aK": requireRegisteredType,
  "aL": runDestructor,
  "aM": runDestructors,
  "aN": setDelayFunction,
  "aO": shallowCopyInternalPointer,
  "aP": simpleReadValueFromPointer,
  "aQ": throwBindingError,
  "aR": throwInstanceAlreadyDeleted,
  "aS": throwInternalError,
  "aT": throwUnboundTypeError,
  "aU": upcastPointer,
  "aV": whenDependentTypesAreResolved,
  "aW": tempDoublePtr,
  "aX": DYNAMICTOP_PTR,
  "aY": ___dso_handle
}
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.aW|0,
  DYNAMICTOP_PTR=env.aX|0,
  ___dso_handle=env.aY|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.a,
  setTempRet0=env.b,
  getTempRet0=env.c,
  ClassHandle=env.d,
  ClassHandle_clone=env.e,
  ClassHandle_delete=env.f,
  ClassHandle_deleteLater=env.g,
  ClassHandle_isAliasOf=env.h,
  ClassHandle_isDeleted=env.i,
  RegisteredClass=env.j,
  RegisteredPointer=env.k,
  RegisteredPointer_deleteObject=env.l,
  RegisteredPointer_destructor=env.m,
  RegisteredPointer_fromWireType=env.n,
  RegisteredPointer_getPointee=env.o,
  __ZSt18uncaught_exceptionv=env.p,
  ___cxa_allocate_exception=env.q,
  ___cxa_begin_catch=env.r,
  ___cxa_find_matching_catch=env.s,
  ___cxa_free_exception=env.t,
  ___cxa_thread_atexit=env.u,
  ___cxa_throw=env.v,
  ___gxx_personality_v0=env.w,
  ___resumeException=env.x,
  ___setErrNo=env.y,
  ___syscall140=env.z,
  ___syscall146=env.A,
  ___syscall221=env.B,
  ___syscall3=env.C,
  ___syscall5=env.D,
  ___syscall6=env.E,
  __embind_finalize_value_object=env.F,
  __embind_register_bool=env.G,
  __embind_register_class=env.H,
  __embind_register_class_constructor=env.I,
  __embind_register_class_function=env.J,
  __embind_register_emval=env.K,
  __embind_register_float=env.L,
  __embind_register_function=env.M,
  __embind_register_integer=env.N,
  __embind_register_memory_view=env.O,
  __embind_register_std_string=env.P,
  __embind_register_std_wstring=env.Q,
  __embind_register_value_object=env.R,
  __embind_register_value_object_field=env.S,
  __embind_register_void=env.T,
  __emval_decref=env.U,
  __emval_incref=env.V,
  __emval_register=env.W,
  __emval_take_value=env.X,
  _abort=env.Y,
  _atexit=env.Z,
  _embind_repr=env._,
  _emscripten_get_heap_size=env.$,
  _emscripten_memcpy_big=env.aa,
  _emscripten_resize_heap=env.ab,
  abortOnCannotGrowMemory=env.ac,
  constNoSmartPtrRawPointerToWireType=env.ad,
  count_emval_handles=env.ae,
  craftInvokerFunction=env.af,
  createNamedFunction=env.ag,
  downcastPointer=env.ah,
  embind__requireFunction=env.ai,
  embind_init_charCodes=env.aj,
  ensureOverloadTable=env.ak,
  exposePublicSymbol=env.al,
  extendError=env.am,
  floatReadValueFromPointer=env.an,
  flushPendingDeletes=env.ao,
  genericPointerToWireType=env.ap,
  getBasestPointer=env.aq,
  getInheritedInstance=env.ar,
  getInheritedInstanceCount=env.as,
  getLiveInheritedInstances=env.at,
  getShiftFromSize=env.au,
  getTypeName=env.av,
  get_first_emval=env.aw,
  heap32VectorToArray=env.ax,
  init_ClassHandle=env.ay,
  init_RegisteredPointer=env.az,
  init_embind=env.aA,
  init_emval=env.aB,
  integerReadValueFromPointer=env.aC,
  makeClassHandle=env.aD,
  makeLegalFunctionName=env.aE,
  new_=env.aF,
  nonConstNoSmartPtrRawPointerToWireType=env.aG,
  readLatin1String=env.aH,
  registerType=env.aI,
  replacePublicSymbol=env.aJ,
  requireRegisteredType=env.aK,
  runDestructor=env.aL,
  runDestructors=env.aM,
  setDelayFunction=env.aN,
  shallowCopyInternalPointer=env.aO,
  simpleReadValueFromPointer=env.aP,
  throwBindingError=env.aQ,
  throwInstanceAlreadyDeleted=env.aR,
  throwInternalError=env.aS,
  throwUnboundTypeError=env.aT,
  upcastPointer=env.aU,
  whenDependentTypesAreResolved=env.aV,
  STACKTOP = 41360,
  STACK_MAX = 5284240,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
  function globalCtors() {
    __GLOBAL__sub_I_turtlecoin_crypto_js_cpp();
    __GLOBAL__sub_I_bind_cpp();
  }
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function __Z22generateRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_NS_6vectorIS5_NS3_IS5_EEEES5_i($agg$result,$prefixHash,$keyImage,$publicKeys,$transactionSecretKey,$realOutputIndex) {
 $agg$result = $agg$result|0;
 $prefixHash = $prefixHash|0;
 $keyImage = $keyImage|0;
 $publicKeys = $publicKeys|0;
 $transactionSecretKey = $transactionSecretKey|0;
 $realOutputIndex = $realOutputIndex|0;
 var $$pre$i = 0, $$pre$i$i$i$i36 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__end_$i$i$i = 0, $__end_$i$i$i$i$i$i21 = 0, $__size_$i$i = 0, $__size_$i$i$i$i$i$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i$i$i$i28 = 0, $__size_$i$i13 = 0, $__size_$i$i7 = 0, $__soon_to_be_end$06$i$i$i = 0, $__soon_to_be_end$06$i$i$i$i$i$i25 = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp1 = 0, $agg$tmp2 = 0, $agg$tmp5 = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i$i$i33 = 0, $cmp$i$i$i$i20 = 0, $cmp5$i$i$i = 0;
 var $cmp5$i$i$i$i$i$i22 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i$i$i$i26 = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i$i$i$i29 = 0, $tobool$i$i14 = 0, $tobool$i$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $agg$tmp = sp + 36|0;
 $agg$tmp1 = sp + 24|0;
 $agg$tmp2 = sp + 12|0;
 $agg$tmp5 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$prefixHash);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1,$keyImage);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp2,$publicKeys);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp5,$transactionSecretKey);
 $1 = ($realOutputIndex|0)<(0);
 $2 = $1 << 31 >> 31;
 __ZN4Core12Cryptography22generateRingSignaturesENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEES7_y($0,$agg$tmp,$agg$tmp1,$agg$tmp2,$agg$tmp5,$realOutputIndex,$2);
 $__size_$i$i = ((($agg$tmp5)) + 11|0);
 $3 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i) {
  $4 = HEAP32[$agg$tmp5>>2]|0;
  __ZdlPv($4);
 }
 $5 = HEAP32[$agg$tmp2>>2]|0;
 $cmp$i = ($5|0)==(0|0);
 if (!($cmp$i)) {
  $__end_$i$i$i = ((($agg$tmp2)) + 4|0);
  $6 = HEAP32[$__end_$i$i$i>>2]|0;
  $cmp5$i$i$i = ($6|0)==($5|0);
  if ($cmp5$i$i$i) {
   $9 = $5;
  } else {
   $__soon_to_be_end$06$i$i$i = $6;
   while(1) {
    $incdec$ptr$i$i$i = ((($__soon_to_be_end$06$i$i$i)) + -12|0);
    $__size_$i$i$i$i$i$i$i$i = ((($incdec$ptr$i$i$i)) + 11|0);
    $7 = HEAP8[$__size_$i$i$i$i$i$i$i$i>>0]|0;
    $tobool$i$i$i$i$i$i$i$i = ($7<<24>>24)<(0);
    if ($tobool$i$i$i$i$i$i$i$i) {
     $8 = HEAP32[$incdec$ptr$i$i$i>>2]|0;
     __ZdlPv($8);
    }
    $cmp$i$i$i = ($incdec$ptr$i$i$i|0)==($5|0);
    if ($cmp$i$i$i) {
     break;
    } else {
     $__soon_to_be_end$06$i$i$i = $incdec$ptr$i$i$i;
    }
   }
   $$pre$i = HEAP32[$agg$tmp2>>2]|0;
   $9 = $$pre$i;
  }
  HEAP32[$__end_$i$i$i>>2] = $5;
  __ZdlPv($9);
 }
 $__size_$i$i7 = ((($agg$tmp1)) + 11|0);
 $10 = HEAP8[$__size_$i$i7>>0]|0;
 $tobool$i$i8 = ($10<<24>>24)<(0);
 if ($tobool$i$i8) {
  $11 = HEAP32[$agg$tmp1>>2]|0;
  __ZdlPv($11);
 }
 $__size_$i$i13 = ((($agg$tmp)) + 11|0);
 $12 = HEAP8[$__size_$i$i13>>0]|0;
 $tobool$i$i14 = ($12<<24>>24)<(0);
 if ($tobool$i$i14) {
  $13 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($13);
 }
 $add$ptr$i = ((($0)) + 4|0);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$result,$add$ptr$i);
 $14 = HEAP32[$add$ptr$i>>2]|0;
 $cmp$i$i$i$i20 = ($14|0)==(0|0);
 if ($cmp$i$i$i$i20) {
  STACKTOP = sp;return;
 }
 $__end_$i$i$i$i$i$i21 = ((($0)) + 8|0);
 $15 = HEAP32[$__end_$i$i$i$i$i$i21>>2]|0;
 $cmp5$i$i$i$i$i$i22 = ($15|0)==($14|0);
 if ($cmp5$i$i$i$i$i$i22) {
  $18 = $14;
 } else {
  $__soon_to_be_end$06$i$i$i$i$i$i25 = $15;
  while(1) {
   $incdec$ptr$i$i$i$i$i$i26 = ((($__soon_to_be_end$06$i$i$i$i$i$i25)) + -12|0);
   $__size_$i$i$i$i$i$i$i$i$i$i$i28 = ((($incdec$ptr$i$i$i$i$i$i26)) + 11|0);
   $16 = HEAP8[$__size_$i$i$i$i$i$i$i$i$i$i$i28>>0]|0;
   $tobool$i$i$i$i$i$i$i$i$i$i$i29 = ($16<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i$i$i$i$i29) {
    $17 = HEAP32[$incdec$ptr$i$i$i$i$i$i26>>2]|0;
    __ZdlPv($17);
   }
   $cmp$i$i$i$i$i$i33 = ($incdec$ptr$i$i$i$i$i$i26|0)==($14|0);
   if ($cmp$i$i$i$i$i$i33) {
    break;
   } else {
    $__soon_to_be_end$06$i$i$i$i$i$i25 = $incdec$ptr$i$i$i$i$i$i26;
   }
  }
  $$pre$i$i$i$i36 = HEAP32[$add$ptr$i>>2]|0;
  $18 = $$pre$i$i$i$i36;
 }
 HEAP32[$__end_$i$i$i$i$i$i21>>2] = $14;
 __ZdlPv($18);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__begin1$addr$05$i$i = 0, $__end_$i = 0, $__end_$i10 = 0, $__value_$i$i$i = 0, $add$ptr$i = 0, $call$i$i$i$i15 = 0, $cmp$i$i = 0, $cmp$i11 = 0, $cmp4$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr1$i$i = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $__end_$i = ((($this)) + 4|0);
 HEAP32[$__end_$i>>2] = 0;
 $__value_$i$i$i = ((($this)) + 8|0);
 HEAP32[$__value_$i$i$i>>2] = 0;
 $__end_$i10 = ((($__x)) + 4|0);
 $0 = HEAP32[$__end_$i10>>2]|0;
 $1 = HEAP32[$__x>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $2 = ($sub$ptr$sub$i|0)==(0);
 if ($2) {
  return;
 }
 $cmp$i11 = ($sub$ptr$div$i>>>0)>(357913941);
 if ($cmp$i11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $call$i$i$i$i15 = (__Znwm($sub$ptr$sub$i)|0);
 HEAP32[$__end_$i>>2] = $call$i$i$i$i15;
 HEAP32[$this>>2] = $call$i$i$i$i15;
 $add$ptr$i = (($call$i$i$i$i15) + (($sub$ptr$div$i*12)|0)|0);
 HEAP32[$__value_$i$i$i>>2] = $add$ptr$i;
 $3 = HEAP32[$__x>>2]|0;
 $4 = HEAP32[$__end_$i10>>2]|0;
 $cmp4$i$i = ($3|0)==($4|0);
 if ($cmp4$i$i) {
  return;
 }
 $5 = $call$i$i$i$i15;$__begin1$addr$05$i$i = $3;
 while(1) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($5,$__begin1$addr$05$i$i);
  $incdec$ptr$i$i = ((($__begin1$addr$05$i$i)) + 12|0);
  $6 = HEAP32[$__end_$i>>2]|0;
  $incdec$ptr1$i$i = ((($6)) + 12|0);
  HEAP32[$__end_$i>>2] = $incdec$ptr1$i$i;
  $cmp$i$i = ($incdec$ptr$i$i|0)==($4|0);
  if ($cmp$i$i) {
   break;
  } else {
   $5 = $incdec$ptr1$i$i;$__begin1$addr$05$i$i = $incdec$ptr$i$i;
  }
 }
 return;
}
function __Z35generateViewKeysFromPrivateSpendKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$secretKey) {
 $agg$result = $agg$result|0;
 $secretKey = $secretKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $SecretKey = 0, $__size_$i$i = 0, $__size_$i$i$i$i$i = 0, $__size_$i$i$i2$i$i = 0, $__value_$i$i5 = 0, $agg$tmp = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 16|0;
 $agg$tmp = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$secretKey);
 __ZN4Core12Cryptography35generateViewKeysFromPrivateSpendKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($2);
 }
 $__value_$i$i5 = ((($0)) + 12|0);
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;HEAP32[$agg$result+12>>2]=0|0;HEAP32[$agg$result+16>>2]=0|0;HEAP32[$agg$result+20>>2]=0|0;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($agg$result,$__value_$i$i5)|0);
 $SecretKey = ((($agg$result)) + 12|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($SecretKey,$0)|0);
 $3 = ((($0)) + 12|0);
 $__size_$i$i$i$i$i = ((($3)) + 11|0);
 $4 = HEAP8[$__size_$i$i$i$i$i>>0]|0;
 $tobool$i$i$i$i$i = ($4<<24>>24)<(0);
 if ($tobool$i$i$i$i$i) {
  $5 = HEAP32[$3>>2]|0;
  __ZdlPv($5);
 }
 $__size_$i$i$i2$i$i = ((($0)) + 11|0);
 $6 = HEAP8[$__size_$i$i$i2$i$i>>0]|0;
 $tobool$i$i$i3$i$i = ($6<<24>>24)<(0);
 if (!($tobool$i$i$i3$i$i)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$0>>2]|0;
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __Z12generateKeysv($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $SecretKey = 0, $__size_$i$i$i$i$i = 0, $__size_$i$i$i2$i$i = 0, $__value_$i$i5 = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp;
 __ZN4Core12Cryptography12generateKeysEv($0);
 $__value_$i$i5 = ((($0)) + 12|0);
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;HEAP32[$agg$result+12>>2]=0|0;HEAP32[$agg$result+16>>2]=0|0;HEAP32[$agg$result+20>>2]=0|0;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($agg$result,$__value_$i$i5)|0);
 $SecretKey = ((($agg$result)) + 12|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($SecretKey,$0)|0);
 $1 = ((($0)) + 12|0);
 $__size_$i$i$i$i$i = ((($1)) + 11|0);
 $2 = HEAP8[$__size_$i$i$i$i$i>>0]|0;
 $tobool$i$i$i$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i$i$i$i) {
  $3 = HEAP32[$1>>2]|0;
  __ZdlPv($3);
 }
 $__size_$i$i$i2$i$i = ((($0)) + 11|0);
 $4 = HEAP8[$__size_$i$i$i2$i$i>>0]|0;
 $tobool$i$i$i3$i$i = ($4<<24>>24)<(0);
 if (!($tobool$i$i$i3$i$i)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 __ZdlPv($5);
 STACKTOP = sp;return;
}
function __Z20secretKeyToPublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$secretKey) {
 $agg$result = $agg$result|0;
 $secretKey = $secretKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__size_$i$i = 0, $add$ptr$i = 0, $agg$tmp = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $agg$tmp = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$secretKey);
 __ZN4Core12Cryptography20secretKeyToPublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($2);
 }
 $add$ptr$i = ((($0)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$add$ptr$i);
 $3 = ((($0)) + 15|0);
 $4 = HEAP8[$3>>0]|0;
 $tobool$i$i$i$i$i12 = ($4<<24>>24)<(0);
 if (!($tobool$i$i$i$i$i12)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$add$ptr$i>>2]|0;
 __ZdlPv($5);
 STACKTOP = sp;return;
}
function __Z21generateKeyDerivationNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_($agg$result,$publicKey,$secretKey) {
 $agg$result = $agg$result|0;
 $publicKey = $publicKey|0;
 $secretKey = $secretKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__size_$i$i = 0, $__size_$i$i6 = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp1 = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i18 = 0, $tobool$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 24|0;
 $agg$tmp = sp + 12|0;
 $agg$tmp1 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$publicKey);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1,$secretKey);
 __ZN4Core12Cryptography21generateKeyDerivationENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_($0,$agg$tmp,$agg$tmp1);
 $__size_$i$i = ((($agg$tmp1)) + 11|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i) {
  $2 = HEAP32[$agg$tmp1>>2]|0;
  __ZdlPv($2);
 }
 $__size_$i$i6 = ((($agg$tmp)) + 11|0);
 $3 = HEAP8[$__size_$i$i6>>0]|0;
 $tobool$i$i7 = ($3<<24>>24)<(0);
 if ($tobool$i$i7) {
  $4 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($4);
 }
 $add$ptr$i = ((($0)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$add$ptr$i);
 $5 = ((($0)) + 15|0);
 $6 = HEAP8[$5>>0]|0;
 $tobool$i$i$i$i$i18 = ($6<<24>>24)<(0);
 if (!($tobool$i$i$i$i$i18)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$add$ptr$i>>2]|0;
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __Z15derivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_($agg$result,$derivation,$outputIndex,$publicKey) {
 $agg$result = $agg$result|0;
 $derivation = $derivation|0;
 $outputIndex = $outputIndex|0;
 $publicKey = $publicKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i = 0, $__size_$i$i6 = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp1 = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i18 = 0, $tobool$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 24|0;
 $agg$tmp = sp + 12|0;
 $agg$tmp1 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$derivation);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1,$publicKey);
 $1 = ($outputIndex|0)<(0);
 $2 = $1 << 31 >> 31;
 __ZN4Core12Cryptography15derivePublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_($0,$agg$tmp,$outputIndex,$2,$agg$tmp1);
 $__size_$i$i = ((($agg$tmp1)) + 11|0);
 $3 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i) {
  $4 = HEAP32[$agg$tmp1>>2]|0;
  __ZdlPv($4);
 }
 $__size_$i$i6 = ((($agg$tmp)) + 11|0);
 $5 = HEAP8[$__size_$i$i6>>0]|0;
 $tobool$i$i7 = ($5<<24>>24)<(0);
 if ($tobool$i$i7) {
  $6 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($6);
 }
 $add$ptr$i = ((($0)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$add$ptr$i);
 $7 = ((($0)) + 15|0);
 $8 = HEAP8[$7>>0]|0;
 $tobool$i$i$i$i$i18 = ($8<<24>>24)<(0);
 if (!($tobool$i$i$i$i$i18)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$add$ptr$i>>2]|0;
 __ZdlPv($9);
 STACKTOP = sp;return;
}
function __Z15deriveSecretKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_($agg$result,$derivation,$outputIndex,$secretKey) {
 $agg$result = $agg$result|0;
 $derivation = $derivation|0;
 $outputIndex = $outputIndex|0;
 $secretKey = $secretKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__size_$i$i = 0, $__size_$i$i2 = 0, $agg$tmp = 0, $agg$tmp1 = 0, $tobool$i$i = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $agg$tmp = sp + 12|0;
 $agg$tmp1 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$derivation);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1,$secretKey);
 $0 = ($outputIndex|0)<(0);
 $1 = $0 << 31 >> 31;
 __ZN4Core12Cryptography15deriveSecretKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_($agg$result,$agg$tmp,$outputIndex,$1,$agg$tmp1);
 $__size_$i$i = ((($agg$tmp1)) + 11|0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i) {
  $3 = HEAP32[$agg$tmp1>>2]|0;
  __ZdlPv($3);
 }
 $__size_$i$i2 = ((($agg$tmp)) + 11|0);
 $4 = HEAP8[$__size_$i$i2>>0]|0;
 $tobool$i$i3 = ($4<<24>>24)<(0);
 if (!($tobool$i$i3)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($5);
 STACKTOP = sp;return;
}
function __Z17underivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_($agg$result,$derivation,$outputIndex,$derivedKey) {
 $agg$result = $agg$result|0;
 $derivation = $derivation|0;
 $outputIndex = $outputIndex|0;
 $derivedKey = $derivedKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i = 0, $__size_$i$i6 = 0, $add$ptr$i = 0, $agg$tmp = 0, $agg$tmp1 = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i18 = 0, $tobool$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 24|0;
 $agg$tmp = sp + 12|0;
 $agg$tmp1 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$derivation);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp1,$derivedKey);
 $1 = ($outputIndex|0)<(0);
 $2 = $1 << 31 >> 31;
 __ZN4Core12Cryptography17underivePublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_($0,$agg$tmp,$outputIndex,$2,$agg$tmp1);
 $__size_$i$i = ((($agg$tmp1)) + 11|0);
 $3 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i) {
  $4 = HEAP32[$agg$tmp1>>2]|0;
  __ZdlPv($4);
 }
 $__size_$i$i6 = ((($agg$tmp)) + 11|0);
 $5 = HEAP8[$__size_$i$i6>>0]|0;
 $tobool$i$i7 = ($5<<24>>24)<(0);
 if ($tobool$i$i7) {
  $6 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($6);
 }
 $add$ptr$i = ((($0)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$add$ptr$i);
 $7 = ((($0)) + 15|0);
 $8 = HEAP8[$7>>0]|0;
 $tobool$i$i$i$i$i18 = ($8<<24>>24)<(0);
 if (!($tobool$i$i$i$i$i18)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$add$ptr$i>>2]|0;
 __ZdlPv($9);
 STACKTOP = sp;return;
}
function __ZN39EmscriptenBindingInitializer_signaturesC2Ev($this) {
 $this = $this|0;
 var $call$i$i2 = 0, $call$i$i6 = 0, $call$i5$i1 = 0, $call$i5$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function((34700|0),2,(34120|0),(35239|0),(1|0),(1|0));
 __embind_register_function((34713|0),2,(34128|0),(35239|0),(2|0),(2|0));
 __embind_register_function((34723|0),2,(34128|0),(35239|0),(2|0),(3|0));
 __embind_register_function((34735|0),4,(16|0),(35460|0),(2|0),(4|0));
 __embind_register_function((34757|0),6,(32|0),(35466|0),(1|0),(4|0));
 __embind_register_function((34780|0),5,(64|0),(35474|0),(1|0),(3|0));
 __embind_register_function((34799|0),2,(34120|0),(35239|0),(1|0),(4|0));
 __embind_register_function((34841|0),2,(34136|0),(35239|0),(3|0),(5|0));
 __embind_register_function((34877|0),1,(34144|0),(35487|0),(4|0),(14|0));
 __embind_register_function((34890|0),2,(34148|0),(35239|0),(4|0),(5|0));
 __embind_register_function((34899|0),2,(34120|0),(35239|0),(1|0),(6|0));
 __embind_register_function((34920|0),3,(34156|0),(35490|0),(5|0),(1|0));
 __embind_register_function((34942|0),4,(96|0),(35460|0),(4|0),(5|0));
 __embind_register_function((34958|0),4,(96|0),(35460|0),(4|0),(6|0));
 __embind_register_function((34974|0),4,(96|0),(35460|0),(4|0),(7|0));
 __embind_register_function((34992|0),4,(112|0),(35460|0),(5|0),(8|0));
 __embind_register_function((35010|0),4,(128|0),(35460|0),(6|0),(6|0));
 __embind_register_function((35025|0),3,(34156|0),(35490|0),(5|0),(2|0));
 __embind_register_function((35042|0),3,(34156|0),(35490|0),(5|0),(3|0));
 __embind_register_function((35056|0),2,(34120|0),(35239|0),(1|0),(7|0));
 __embind_register_function((35076|0),2,(34120|0),(35239|0),(1|0),(8|0));
 __embind_register_function((35087|0),2,(34120|0),(35239|0),(1|0),(9|0));
 __ZN10emscripten15register_vectorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEENS_6class_INS1_6vectorIT_NS5_ISA_EEEENS_8internal11NoBaseClassEEEPKc(35100);
 __embind_register_value_object((33496|0),(35113|0),(35735|0),(1|0),(35702|0),(15|0));
 $call$i5$i1 = (__Znwm(4)|0);
 HEAP32[$call$i5$i1>>2] = 12;
 $call$i$i2 = (__Znwm(4)|0);
 HEAP32[$call$i$i2>>2] = 12;
 __embind_register_value_object_field((33496|0),(35118|0),(33416|0),(35239|0),(5|0),($call$i5$i1|0),(33416|0),(35705|0),(4|0),($call$i$i2|0));
 $call$i5$i4 = (__Znwm(4)|0);
 HEAP32[$call$i5$i4>>2] = 0;
 $call$i$i6 = (__Znwm(4)|0);
 HEAP32[$call$i$i6>>2] = 0;
 __embind_register_value_object_field((33496|0),(35128|0),(33416|0),(35239|0),(5|0),($call$i5$i4|0),(33416|0),(35705|0),(4|0),($call$i$i6|0));
 __embind_finalize_value_object((33496|0));
 return;
}
function __ZN10emscripten15register_vectorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEENS_6class_INS1_6vectorIT_NS5_ISA_EEEENS_8internal11NoBaseClassEEEPKc($name) {
 $name = $name|0;
 var $$repack4$i$i = 0, $$repack4$i$i29 = 0, $$repack4$i$i37 = 0, $call$i$i = 0, $call$i$i27 = 0, $call$i$i35 = 0, $call$i$i38 = 0, $call$i$i39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_class((33472|0),(33504|0),(33520|0),(0|0),(35487|0),(6|0),(35700|0),(0|0),(35700|0),(0|0),($name|0),(35702|0),(16|0));
 __embind_register_class_constructor((33472|0),1,(34168|0),(35487|0),(7|0),(2|0));
 $call$i$i = (__Znwm(8)|0);
 HEAP32[$call$i$i>>2] = (10);
 $$repack4$i$i = ((($call$i$i)) + 4|0);
 HEAP32[$$repack4$i$i>>2] = 0;
 __embind_register_class_function((33472|0),(35495|0),3,(34172|0),(35705|0),(5|0),($call$i$i|0),0);
 $call$i$i27 = (__Znwm(8)|0);
 HEAP32[$call$i$i27>>2] = (6);
 $$repack4$i$i29 = ((($call$i$i27)) + 4|0);
 HEAP32[$$repack4$i$i29>>2] = 0;
 __embind_register_class_function((33472|0),(35505|0),4,(144|0),(35710|0),(9|0),($call$i$i27|0),0);
 $call$i$i35 = (__Znwm(8)|0);
 HEAP32[$call$i$i35>>2] = (8);
 $$repack4$i$i37 = ((($call$i$i35)) + 4|0);
 HEAP32[$$repack4$i$i37>>2] = 0;
 __embind_register_class_function((33472|0),(35512|0),2,(34184|0),(35239|0),(6|0),($call$i$i35|0),0);
 $call$i$i38 = (__Znwm(4)|0);
 HEAP32[$call$i$i38>>2] = (7);
 __embind_register_class_function((33472|0),(35517|0),3,(34192|0),(35490|0),(7|0),($call$i$i38|0),0);
 $call$i$i39 = (__Znwm(4)|0);
 HEAP32[$call$i$i39>>2] = (8);
 __embind_register_class_function((33472|0),(35521|0),4,(160|0),(35460|0),(7|0),($call$i$i39|0),0);
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $__end_ = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = ((($this)) + 4|0);
 $0 = HEAP32[$__end_>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
 return ($sub$ptr$div|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_EE6invokeEPFS8_S8_EPNS0_11BindingTypeIS8_EUt_E($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i1 = 0, $__size_$i$i6 = 0, $__size_$i12$i$i$i = 0, $__size_$i3$i$i$i = 0, $add$i = 0, $add$i$i$i$i$i = 0, $add31$i = 0, $agg$tmp = 0, $and$i$i$i$i$i = 0;
 var $arraydecay$i = 0, $arrayidx$i$i$i = 0, $call$i$i$i$i$i$i = 0, $call1$i = 0, $call132$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i3 = 0, $data3739$i = 0, $data3739$i23 = 0, $or$i$i$i$i = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ref$tmp = sp + 12|0;
 $agg$tmp = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 FUNCTION_TABLE_vii[$fn & 15]($ref$tmp,$agg$tmp);
 $__size_$i$i$i$i1 = ((($ref$tmp)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i$i1>>0]|0;
 $tobool$i$i$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $2 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($2) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $2;
  $3 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i23 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i23|0),($3|0),($2|0))|0;
  __ZdlPv($3);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i3 = $1&255;
  $add$i = (($conv$i$i$i$i3) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i3;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i3|0))|0;
  $$in = $call1$i;
 }
 $__size_$i$i6 = ((($agg$tmp)) + 11|0);
 $4 = HEAP8[$__size_$i$i6>>0]|0;
 $tobool$i$i7 = ($4<<24>>24)<(0);
 if (!($tobool$i$i7)) {
  STACKTOP = sp;return ($$in|0);
 }
 $5 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($5);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJNS2_6vectorIS8_NS6_IS8_EEEEEE6invokeEPFS8_SB_EPSB_($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $$in = 0, $$pre$i19 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__end_$i$i$i4 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i11 = 0, $__size_$i3$i$i$i = 0, $__soon_to_be_end$06$i$i$i8 = 0, $add$i = 0, $add31$i = 0, $agg$tmp = 0, $call1$i = 0, $call132$i = 0;
 var $cmp$i$i$i16 = 0, $cmp$i3 = 0, $cmp5$i$i$i5 = 0, $conv$i$i$i$i = 0, $data3739$i = 0, $data3739$i29 = 0, $incdec$ptr$i$i$i9 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ref$tmp = sp + 12|0;
 $agg$tmp = sp;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp,$args);
 FUNCTION_TABLE_vii[$fn & 15]($ref$tmp,$agg$tmp);
 $__size_$i$i$i$i = ((($ref$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i$i$i>>0]|0;
 $tobool$i$i$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $1 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($1) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $1;
  $2 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i29 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i29|0),($2|0),($1|0))|0;
  __ZdlPv($2);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i = $0&255;
  $add$i = (($conv$i$i$i$i) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i|0))|0;
  $$in = $call1$i;
 }
 $3 = HEAP32[$agg$tmp>>2]|0;
 $cmp$i3 = ($3|0)==(0|0);
 if ($cmp$i3) {
  STACKTOP = sp;return ($$in|0);
 }
 $__end_$i$i$i4 = ((($agg$tmp)) + 4|0);
 $4 = HEAP32[$__end_$i$i$i4>>2]|0;
 $cmp5$i$i$i5 = ($4|0)==($3|0);
 if ($cmp5$i$i$i5) {
  $7 = $3;
 } else {
  $__soon_to_be_end$06$i$i$i8 = $4;
  while(1) {
   $incdec$ptr$i$i$i9 = ((($__soon_to_be_end$06$i$i$i8)) + -12|0);
   $__size_$i$i$i$i$i$i$i$i11 = ((($incdec$ptr$i$i$i9)) + 11|0);
   $5 = HEAP8[$__size_$i$i$i$i$i$i$i$i11>>0]|0;
   $tobool$i$i$i$i$i$i$i$i12 = ($5<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i$i12) {
    $6 = HEAP32[$incdec$ptr$i$i$i9>>2]|0;
    __ZdlPv($6);
   }
   $cmp$i$i$i16 = ($incdec$ptr$i$i$i9|0)==($3|0);
   if ($cmp$i$i$i16) {
    break;
   } else {
    $__soon_to_be_end$06$i$i$i8 = $incdec$ptr$i$i$i9;
   }
  }
  $$pre$i19 = HEAP32[$agg$tmp>>2]|0;
  $7 = $$pre$i19;
 }
 HEAP32[$__end_$i$i$i4>>2] = $3;
 __ZdlPv($7);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJNS2_6vectorIS8_NS6_IS8_EEEES8_S8_EE6invokeEPFS8_SB_S8_S8_EPSB_PNS0_11BindingTypeIS8_EUt_ESJ_($fn,$args,$args1,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $$in = 0, $$pre$i63 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i13 = 0, $__end_$i$i$i48 = 0, $__p$015$i$i$i = 0;
 var $__p$015$i$i$i21 = 0, $__p$016$i$i$i = 0, $__p$016$i$i$i23 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i55 = 0, $__size_$i$i$i$i14 = 0, $__size_$i$i$i$i29 = 0, $__size_$i$i35 = 0, $__size_$i$i41 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i18 = 0, $__size_$i3$i$i$i = 0, $__soon_to_be_end$06$i$i$i52 = 0, $add$i = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i9 = 0, $add31$i = 0, $agg$tmp = 0, $agg$tmp5 = 0, $agg$tmp6 = 0;
 var $and$i$i$i$i$i = 0, $and$i$i$i$i$i10 = 0, $arraydecay$i = 0, $arraydecay$i3 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i24 = 0, $call$i$i$i$i$i$i2 = 0, $call$i$i$i$i$i$i27 = 0, $call1$i = 0, $call132$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i19 = 0, $cmp$i$i$i1 = 0, $cmp$i$i$i5 = 0, $cmp$i$i$i60 = 0, $cmp$i47 = 0, $cmp2$i$i$i = 0, $cmp2$i$i$i7 = 0, $cmp5$i$i$i49 = 0, $conv$i$i$i$i = 0;
 var $conv$i$i$i$i16 = 0, $conv$i$i$i$i31 = 0, $data3739$i = 0, $data3739$i85 = 0, $incdec$ptr$i$i$i53 = 0, $or$i$i$i$i = 0, $or$i$i$i$i12 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i56 = 0, $tobool$i$i36 = 0, $tobool$i$i42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $ref$tmp = sp + 36|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp5 = sp + 12|0;
 $agg$tmp6 = sp;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp,$args);
 $arraydecay$i = ((($args1)) + 4|0);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp5>>2]=0|0;HEAP32[$agg$tmp5+4>>2]=0|0;HEAP32[$agg$tmp5+8>>2]=0|0;
 $cmp$i$i$i1 = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i1) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp5);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp5)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp5;
  } else {
   $__p$015$i$i$i = $agg$tmp5;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i2 = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp5>>2] = $call$i$i$i$i$i$i2;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp5)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp5)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i2;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i3 = ((($args3)) + 4|0);
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp6>>2]=0|0;HEAP32[$agg$tmp6+4>>2]=0|0;HEAP32[$agg$tmp6+8>>2]=0|0;
 $cmp$i$i$i5 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i5) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp6);
  // unreachable;
 }
 $cmp2$i$i$i7 = ($1>>>0)<(11);
 if ($cmp2$i$i$i7) {
  $conv$i$i$i$i16 = $1&255;
  $__size_$i12$i$i$i18 = ((($agg$tmp6)) + 11|0);
  HEAP8[$__size_$i12$i$i$i18>>0] = $conv$i$i$i$i16;
  $cmp$i$i$i$i19 = ($1|0)==(0);
  if ($cmp$i$i$i$i19) {
   $__p$016$i$i$i23 = $agg$tmp6;
  } else {
   $__p$015$i$i$i21 = $agg$tmp6;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i9 = (($1) + 16)|0;
  $and$i$i$i$i$i10 = $add$i$i$i$i$i9 & -16;
  $call$i$i$i$i$i$i27 = (__Znwm($and$i$i$i$i$i10)|0);
  HEAP32[$agg$tmp6>>2] = $call$i$i$i$i$i$i27;
  $or$i$i$i$i12 = $and$i$i$i$i$i10 | -2147483648;
  $__cap_$i$i$i$i13 = ((($agg$tmp6)) + 8|0);
  HEAP32[$__cap_$i$i$i$i13>>2] = $or$i$i$i$i12;
  $__size_$i$i$i$i14 = ((($agg$tmp6)) + 4|0);
  HEAP32[$__size_$i$i$i$i14>>2] = $1;
  $__p$015$i$i$i21 = $call$i$i$i$i$i$i27;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i21|0),($arraydecay$i3|0),($1|0))|0;
  $__p$016$i$i$i23 = $__p$015$i$i$i21;
 }
 $arrayidx$i$i$i24 = (($__p$016$i$i$i23) + ($1)|0);
 HEAP8[$arrayidx$i$i$i24>>0] = 0;
 FUNCTION_TABLE_viiii[$fn & 15]($ref$tmp,$agg$tmp,$agg$tmp5,$agg$tmp6);
 $__size_$i$i$i$i29 = ((($ref$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i$i$i29>>0]|0;
 $tobool$i$i$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $3 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($3) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $3;
  $4 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i85 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i85|0),($4|0),($3|0))|0;
  __ZdlPv($4);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i31 = $2&255;
  $add$i = (($conv$i$i$i$i31) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i31;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i31|0))|0;
  $$in = $call1$i;
 }
 $__size_$i$i35 = ((($agg$tmp6)) + 11|0);
 $5 = HEAP8[$__size_$i$i35>>0]|0;
 $tobool$i$i36 = ($5<<24>>24)<(0);
 if ($tobool$i$i36) {
  $6 = HEAP32[$agg$tmp6>>2]|0;
  __ZdlPv($6);
 }
 $__size_$i$i41 = ((($agg$tmp5)) + 11|0);
 $7 = HEAP8[$__size_$i$i41>>0]|0;
 $tobool$i$i42 = ($7<<24>>24)<(0);
 if ($tobool$i$i42) {
  $8 = HEAP32[$agg$tmp5>>2]|0;
  __ZdlPv($8);
 }
 $9 = HEAP32[$agg$tmp>>2]|0;
 $cmp$i47 = ($9|0)==(0|0);
 if ($cmp$i47) {
  STACKTOP = sp;return ($$in|0);
 }
 $__end_$i$i$i48 = ((($agg$tmp)) + 4|0);
 $10 = HEAP32[$__end_$i$i$i48>>2]|0;
 $cmp5$i$i$i49 = ($10|0)==($9|0);
 if ($cmp5$i$i$i49) {
  $13 = $9;
 } else {
  $__soon_to_be_end$06$i$i$i52 = $10;
  while(1) {
   $incdec$ptr$i$i$i53 = ((($__soon_to_be_end$06$i$i$i52)) + -12|0);
   $__size_$i$i$i$i$i$i$i$i55 = ((($incdec$ptr$i$i$i53)) + 11|0);
   $11 = HEAP8[$__size_$i$i$i$i$i$i$i$i55>>0]|0;
   $tobool$i$i$i$i$i$i$i$i56 = ($11<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i$i56) {
    $12 = HEAP32[$incdec$ptr$i$i$i53>>2]|0;
    __ZdlPv($12);
   }
   $cmp$i$i$i60 = ($incdec$ptr$i$i$i53|0)==($9|0);
   if ($cmp$i$i$i60) {
    break;
   } else {
    $__soon_to_be_end$06$i$i$i52 = $incdec$ptr$i$i$i53;
   }
  }
  $$pre$i63 = HEAP32[$agg$tmp>>2]|0;
  $13 = $$pre$i63;
 }
 HEAP32[$__end_$i$i$i48>>2] = $9;
 __ZdlPv($13);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJS9_S9_SB_S9_iEE6invokeEPFSB_S9_S9_SB_S9_iEPNS0_11BindingTypeIS9_EUt_ESI_PSB_SI_i($fn,$args,$args1,$args3,$args5,$args7) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $$pre$i73 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i12 = 0;
 var $__cap_$i$i$i$i37 = 0, $__end_$i$i = 0, $__end_$i$i$i = 0, $__end_$i$i$i58 = 0, $__p$015$i$i$i = 0, $__p$015$i$i$i20 = 0, $__p$015$i$i$i45 = 0, $__p$016$i$i$i = 0, $__p$016$i$i$i22 = 0, $__p$016$i$i$i47 = 0, $__size_$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i65 = 0, $__size_$i$i$i$i13 = 0, $__size_$i$i$i$i38 = 0, $__size_$i$i78 = 0, $__size_$i$i84 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i17 = 0, $__size_$i12$i$i$i42 = 0;
 var $__soon_to_be_end$06$i$i$i62 = 0, $__value_$i$i$i8$i$i = 0, $__value_$i$i$i9$i$i = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i32 = 0, $add$i$i$i$i$i7 = 0, $agg$tmp = 0, $agg$tmp10 = 0, $agg$tmp14 = 0, $agg$tmp9 = 0, $and$i$i$i$i$i = 0, $and$i$i$i$i$i33 = 0, $and$i$i$i$i$i8 = 0, $arraydecay$i = 0, $arraydecay$i1 = 0, $arraydecay$i26 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i23 = 0, $arrayidx$i$i$i48 = 0, $call$i$i$i$i$i$i = 0;
 var $call$i$i$i$i$i$i3450 = 0, $call$i$i$i$i$i$i924 = 0, $call$i52 = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i$i43 = 0, $cmp$i$i$i28 = 0, $cmp$i$i$i3 = 0, $cmp$i$i$i70 = 0, $cmp$i57 = 0, $cmp2$i$i$i = 0, $cmp2$i$i$i30 = 0, $cmp2$i$i$i5 = 0, $cmp5$i$i$i59 = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i15 = 0, $conv$i$i$i$i40 = 0, $incdec$ptr$i$i$i63 = 0, $or$i$i$i$i = 0;
 var $or$i$i$i$i11 = 0, $or$i$i$i$i36 = 0, $ref$tmp = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i$i$i$i66 = 0, $tobool$i$i79 = 0, $tobool$i$i85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $ref$tmp = sp + 48|0;
 $agg$tmp = sp + 36|0;
 $agg$tmp9 = sp + 24|0;
 $agg$tmp10 = sp + 12|0;
 $agg$tmp14 = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i1 = ((($args1)) + 4|0);
 $1 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp9>>2]=0|0;HEAP32[$agg$tmp9+4>>2]=0|0;HEAP32[$agg$tmp9+8>>2]=0|0;
 $cmp$i$i$i3 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp9);
  // unreachable;
 }
 $cmp2$i$i$i5 = ($1>>>0)<(11);
 if ($cmp2$i$i$i5) {
  $conv$i$i$i$i15 = $1&255;
  $__size_$i12$i$i$i17 = ((($agg$tmp9)) + 11|0);
  HEAP8[$__size_$i12$i$i$i17>>0] = $conv$i$i$i$i15;
  $cmp$i$i$i$i18 = ($1|0)==(0);
  if ($cmp$i$i$i$i18) {
   $__p$016$i$i$i22 = $agg$tmp9;
  } else {
   $__p$015$i$i$i20 = $agg$tmp9;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i7 = (($1) + 16)|0;
  $and$i$i$i$i$i8 = $add$i$i$i$i$i7 & -16;
  $call$i$i$i$i$i$i924 = (__Znwm($and$i$i$i$i$i8)|0);
  HEAP32[$agg$tmp9>>2] = $call$i$i$i$i$i$i924;
  $or$i$i$i$i11 = $and$i$i$i$i$i8 | -2147483648;
  $__cap_$i$i$i$i12 = ((($agg$tmp9)) + 8|0);
  HEAP32[$__cap_$i$i$i$i12>>2] = $or$i$i$i$i11;
  $__size_$i$i$i$i13 = ((($agg$tmp9)) + 4|0);
  HEAP32[$__size_$i$i$i$i13>>2] = $1;
  $__p$015$i$i$i20 = $call$i$i$i$i$i$i924;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i20|0),($arraydecay$i1|0),($1|0))|0;
  $__p$016$i$i$i22 = $__p$015$i$i$i20;
 }
 $arrayidx$i$i$i23 = (($__p$016$i$i$i22) + ($1)|0);
 HEAP8[$arrayidx$i$i$i23>>0] = 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp10,$args3);
 $arraydecay$i26 = ((($args5)) + 4|0);
 $2 = HEAP32[$args5>>2]|0;
 ;HEAP32[$agg$tmp14>>2]=0|0;HEAP32[$agg$tmp14+4>>2]=0|0;HEAP32[$agg$tmp14+8>>2]=0|0;
 $cmp$i$i$i28 = ($2>>>0)>(4294967279);
 if ($cmp$i$i$i28) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp14);
  // unreachable;
 }
 $cmp2$i$i$i30 = ($2>>>0)<(11);
 if ($cmp2$i$i$i30) {
  $conv$i$i$i$i40 = $2&255;
  $__size_$i12$i$i$i42 = ((($agg$tmp14)) + 11|0);
  HEAP8[$__size_$i12$i$i$i42>>0] = $conv$i$i$i$i40;
  $cmp$i$i$i$i43 = ($2|0)==(0);
  if ($cmp$i$i$i$i43) {
   $__p$016$i$i$i47 = $agg$tmp14;
  } else {
   $__p$015$i$i$i45 = $agg$tmp14;
   label = 18;
  }
 } else {
  $add$i$i$i$i$i32 = (($2) + 16)|0;
  $and$i$i$i$i$i33 = $add$i$i$i$i$i32 & -16;
  $call$i$i$i$i$i$i3450 = (__Znwm($and$i$i$i$i$i33)|0);
  HEAP32[$agg$tmp14>>2] = $call$i$i$i$i$i$i3450;
  $or$i$i$i$i36 = $and$i$i$i$i$i33 | -2147483648;
  $__cap_$i$i$i$i37 = ((($agg$tmp14)) + 8|0);
  HEAP32[$__cap_$i$i$i$i37>>2] = $or$i$i$i$i36;
  $__size_$i$i$i$i38 = ((($agg$tmp14)) + 4|0);
  HEAP32[$__size_$i$i$i$i38>>2] = $2;
  $__p$015$i$i$i45 = $call$i$i$i$i$i$i3450;
  label = 18;
 }
 if ((label|0) == 18) {
  _memcpy(($__p$015$i$i$i45|0),($arraydecay$i26|0),($2|0))|0;
  $__p$016$i$i$i47 = $__p$015$i$i$i45;
 }
 $arrayidx$i$i$i48 = (($__p$016$i$i$i47) + ($2)|0);
 HEAP8[$arrayidx$i$i$i48>>0] = 0;
 FUNCTION_TABLE_viiiiii[$fn & 7]($ref$tmp,$agg$tmp,$agg$tmp9,$agg$tmp10,$agg$tmp14,$args7);
 $call$i52 = (__Znwm(12)|0);
 $__end_$i$i$i = ((($call$i52)) + 4|0);
 $__value_$i$i$i9$i$i = ((($call$i52)) + 8|0);
 $3 = HEAP32[$ref$tmp>>2]|0;
 HEAP32[$call$i52>>2] = $3;
 $__end_$i$i = ((($ref$tmp)) + 4|0);
 $4 = HEAP32[$__end_$i$i>>2]|0;
 HEAP32[$__end_$i$i$i>>2] = $4;
 $__value_$i$i$i8$i$i = ((($ref$tmp)) + 8|0);
 $5 = HEAP32[$__value_$i$i$i8$i$i>>2]|0;
 HEAP32[$__value_$i$i$i9$i$i>>2] = $5;
 HEAP32[$__value_$i$i$i8$i$i>>2] = 0;
 HEAP32[$__end_$i$i>>2] = 0;
 HEAP32[$ref$tmp>>2] = 0;
 $__size_$i$i = ((($agg$tmp14)) + 11|0);
 $6 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($6<<24>>24)<(0);
 if ($tobool$i$i) {
  $7 = HEAP32[$agg$tmp14>>2]|0;
  __ZdlPv($7);
 }
 $8 = HEAP32[$agg$tmp10>>2]|0;
 $cmp$i57 = ($8|0)==(0|0);
 if (!($cmp$i57)) {
  $__end_$i$i$i58 = ((($agg$tmp10)) + 4|0);
  $9 = HEAP32[$__end_$i$i$i58>>2]|0;
  $cmp5$i$i$i59 = ($9|0)==($8|0);
  if ($cmp5$i$i$i59) {
   $12 = $8;
  } else {
   $__soon_to_be_end$06$i$i$i62 = $9;
   while(1) {
    $incdec$ptr$i$i$i63 = ((($__soon_to_be_end$06$i$i$i62)) + -12|0);
    $__size_$i$i$i$i$i$i$i$i65 = ((($incdec$ptr$i$i$i63)) + 11|0);
    $10 = HEAP8[$__size_$i$i$i$i$i$i$i$i65>>0]|0;
    $tobool$i$i$i$i$i$i$i$i66 = ($10<<24>>24)<(0);
    if ($tobool$i$i$i$i$i$i$i$i66) {
     $11 = HEAP32[$incdec$ptr$i$i$i63>>2]|0;
     __ZdlPv($11);
    }
    $cmp$i$i$i70 = ($incdec$ptr$i$i$i63|0)==($8|0);
    if ($cmp$i$i$i70) {
     break;
    } else {
     $__soon_to_be_end$06$i$i$i62 = $incdec$ptr$i$i$i63;
    }
   }
   $$pre$i73 = HEAP32[$agg$tmp10>>2]|0;
   $12 = $$pre$i73;
  }
  HEAP32[$__end_$i$i$i58>>2] = $8;
  __ZdlPv($12);
 }
 $__size_$i$i78 = ((($agg$tmp9)) + 11|0);
 $13 = HEAP8[$__size_$i$i78>>0]|0;
 $tobool$i$i79 = ($13<<24>>24)<(0);
 if ($tobool$i$i79) {
  $14 = HEAP32[$agg$tmp9>>2]|0;
  __ZdlPv($14);
 }
 $__size_$i$i84 = ((($agg$tmp)) + 11|0);
 $15 = HEAP8[$__size_$i$i84>>0]|0;
 $tobool$i$i85 = ($15<<24>>24)<(0);
 if (!($tobool$i$i85)) {
  STACKTOP = sp;return ($call$i52|0);
 }
 $16 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($16);
 STACKTOP = sp;return ($call$i52|0);
}
function __ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_NS2_6vectorIS8_NS6_IS8_EEEESB_EE6invokeEPFbS8_S8_SB_SB_EPNS0_11BindingTypeIS8_EUt_ESI_PSB_SJ_($fn,$args,$args1,$args3,$args5) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 var $$pre$i = 0, $$pre$i45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i12 = 0;
 var $__end_$i$i$i = 0, $__end_$i$i$i30 = 0, $__p$015$i$i$i = 0, $__p$015$i$i$i20 = 0, $__p$016$i$i$i = 0, $__p$016$i$i$i22 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i37 = 0, $__size_$i$i$i$i13 = 0, $__size_$i$i50 = 0, $__size_$i$i56 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i17 = 0, $__soon_to_be_end$06$i$i$i = 0, $__soon_to_be_end$06$i$i$i34 = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i7 = 0, $agg$tmp = 0, $agg$tmp12 = 0;
 var $agg$tmp7 = 0, $agg$tmp8 = 0, $and$i$i$i$i$i = 0, $and$i$i$i$i$i8 = 0, $arraydecay$i = 0, $arraydecay$i1 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i23 = 0, $call$i$i$i$i$i$i = 0, $call$i$i$i$i$i$i924 = 0, $call19 = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i27 = 0, $cmp$i$i$i3 = 0, $cmp$i$i$i42 = 0, $cmp$i29 = 0, $cmp2$i$i$i = 0;
 var $cmp2$i$i$i5 = 0, $cmp5$i$i$i = 0, $cmp5$i$i$i31 = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i15 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i35 = 0, $or$i$i$i$i = 0, $or$i$i$i$i11 = 0, $tobool$i$i$i$i$i$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i38 = 0, $tobool$i$i51 = 0, $tobool$i$i57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $agg$tmp = sp + 36|0;
 $agg$tmp7 = sp + 24|0;
 $agg$tmp8 = sp + 12|0;
 $agg$tmp12 = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i1 = ((($args1)) + 4|0);
 $1 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp7>>2]=0|0;HEAP32[$agg$tmp7+4>>2]=0|0;HEAP32[$agg$tmp7+8>>2]=0|0;
 $cmp$i$i$i3 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp7);
  // unreachable;
 }
 $cmp2$i$i$i5 = ($1>>>0)<(11);
 if ($cmp2$i$i$i5) {
  $conv$i$i$i$i15 = $1&255;
  $__size_$i12$i$i$i17 = ((($agg$tmp7)) + 11|0);
  HEAP8[$__size_$i12$i$i$i17>>0] = $conv$i$i$i$i15;
  $cmp$i$i$i$i18 = ($1|0)==(0);
  if ($cmp$i$i$i$i18) {
   $__p$016$i$i$i22 = $agg$tmp7;
  } else {
   $__p$015$i$i$i20 = $agg$tmp7;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i7 = (($1) + 16)|0;
  $and$i$i$i$i$i8 = $add$i$i$i$i$i7 & -16;
  $call$i$i$i$i$i$i924 = (__Znwm($and$i$i$i$i$i8)|0);
  HEAP32[$agg$tmp7>>2] = $call$i$i$i$i$i$i924;
  $or$i$i$i$i11 = $and$i$i$i$i$i8 | -2147483648;
  $__cap_$i$i$i$i12 = ((($agg$tmp7)) + 8|0);
  HEAP32[$__cap_$i$i$i$i12>>2] = $or$i$i$i$i11;
  $__size_$i$i$i$i13 = ((($agg$tmp7)) + 4|0);
  HEAP32[$__size_$i$i$i$i13>>2] = $1;
  $__p$015$i$i$i20 = $call$i$i$i$i$i$i924;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i20|0),($arraydecay$i1|0),($1|0))|0;
  $__p$016$i$i$i22 = $__p$015$i$i$i20;
 }
 $arrayidx$i$i$i23 = (($__p$016$i$i$i22) + ($1)|0);
 HEAP8[$arrayidx$i$i$i23>>0] = 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp8,$args3);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($agg$tmp12,$args5);
 $call19 = (FUNCTION_TABLE_iiiii[$fn & 7]($agg$tmp,$agg$tmp7,$agg$tmp8,$agg$tmp12)|0);
 $2 = HEAP32[$agg$tmp12>>2]|0;
 $cmp$i = ($2|0)==(0|0);
 if (!($cmp$i)) {
  $__end_$i$i$i = ((($agg$tmp12)) + 4|0);
  $3 = HEAP32[$__end_$i$i$i>>2]|0;
  $cmp5$i$i$i = ($3|0)==($2|0);
  if ($cmp5$i$i$i) {
   $6 = $2;
  } else {
   $__soon_to_be_end$06$i$i$i = $3;
   while(1) {
    $incdec$ptr$i$i$i = ((($__soon_to_be_end$06$i$i$i)) + -12|0);
    $__size_$i$i$i$i$i$i$i$i = ((($incdec$ptr$i$i$i)) + 11|0);
    $4 = HEAP8[$__size_$i$i$i$i$i$i$i$i>>0]|0;
    $tobool$i$i$i$i$i$i$i$i = ($4<<24>>24)<(0);
    if ($tobool$i$i$i$i$i$i$i$i) {
     $5 = HEAP32[$incdec$ptr$i$i$i>>2]|0;
     __ZdlPv($5);
    }
    $cmp$i$i$i27 = ($incdec$ptr$i$i$i|0)==($2|0);
    if ($cmp$i$i$i27) {
     break;
    } else {
     $__soon_to_be_end$06$i$i$i = $incdec$ptr$i$i$i;
    }
   }
   $$pre$i = HEAP32[$agg$tmp12>>2]|0;
   $6 = $$pre$i;
  }
  HEAP32[$__end_$i$i$i>>2] = $2;
  __ZdlPv($6);
 }
 $7 = HEAP32[$agg$tmp8>>2]|0;
 $cmp$i29 = ($7|0)==(0|0);
 if (!($cmp$i29)) {
  $__end_$i$i$i30 = ((($agg$tmp8)) + 4|0);
  $8 = HEAP32[$__end_$i$i$i30>>2]|0;
  $cmp5$i$i$i31 = ($8|0)==($7|0);
  if ($cmp5$i$i$i31) {
   $11 = $7;
  } else {
   $__soon_to_be_end$06$i$i$i34 = $8;
   while(1) {
    $incdec$ptr$i$i$i35 = ((($__soon_to_be_end$06$i$i$i34)) + -12|0);
    $__size_$i$i$i$i$i$i$i$i37 = ((($incdec$ptr$i$i$i35)) + 11|0);
    $9 = HEAP8[$__size_$i$i$i$i$i$i$i$i37>>0]|0;
    $tobool$i$i$i$i$i$i$i$i38 = ($9<<24>>24)<(0);
    if ($tobool$i$i$i$i$i$i$i$i38) {
     $10 = HEAP32[$incdec$ptr$i$i$i35>>2]|0;
     __ZdlPv($10);
    }
    $cmp$i$i$i42 = ($incdec$ptr$i$i$i35|0)==($7|0);
    if ($cmp$i$i$i42) {
     break;
    } else {
     $__soon_to_be_end$06$i$i$i34 = $incdec$ptr$i$i$i35;
    }
   }
   $$pre$i45 = HEAP32[$agg$tmp8>>2]|0;
   $11 = $$pre$i45;
  }
  HEAP32[$__end_$i$i$i30>>2] = $7;
  __ZdlPv($11);
 }
 $__size_$i$i50 = ((($agg$tmp7)) + 11|0);
 $12 = HEAP8[$__size_$i$i50>>0]|0;
 $tobool$i$i51 = ($12<<24>>24)<(0);
 if ($tobool$i$i51) {
  $13 = HEAP32[$agg$tmp7>>2]|0;
  __ZdlPv($13);
 }
 $__size_$i$i56 = ((($agg$tmp)) + 11|0);
 $14 = HEAP8[$__size_$i$i56>>0]|0;
 $tobool$i$i57 = ($14<<24>>24)<(0);
 if (!($tobool$i$i57)) {
  STACKTOP = sp;return ($call19|0);
 }
 $15 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($15);
 STACKTOP = sp;return ($call19|0);
}
function __ZN10emscripten8internal7InvokerI4KeysJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeEPFS2_S9_EPNS0_11BindingTypeIS9_EUt_E($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $$pre = 0, $0 = 0, $1 = 0, $SecretKey$i$i = 0, $SecretKey3$i$i = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i$phi$trans$insert = 0, $__size_$i12$i$i$i = 0, $add$i$i$i$i$i = 0, $agg$tmp = 0, $and$i$i$i$i$i = 0, $arraydecay$i = 0, $arrayidx$i$i$i = 0, $call$i$i$i$i$i$i = 0, $call$i1 = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0;
 var $cmp2$i$i$i = 0, $conv$i$i$i$i = 0, $or$i$i$i$i = 0, $phitmp = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $ref$tmp = sp + 16|0;
 $agg$tmp = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 FUNCTION_TABLE_vii[$fn & 15]($ref$tmp,$agg$tmp);
 $call$i1 = (__Znwm(24)|0);
 ;HEAP32[$call$i1>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$call$i1+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$call$i1+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
 ;HEAP32[$ref$tmp>>2]=0|0;HEAP32[$ref$tmp+4>>2]=0|0;HEAP32[$ref$tmp+8>>2]=0|0;
 $SecretKey$i$i = ((($call$i1)) + 12|0);
 $SecretKey3$i$i = ((($ref$tmp)) + 12|0);
 ;HEAP32[$SecretKey$i$i>>2]=HEAP32[$SecretKey3$i$i>>2]|0;HEAP32[$SecretKey$i$i+4>>2]=HEAP32[$SecretKey3$i$i+4>>2]|0;HEAP32[$SecretKey$i$i+8>>2]=HEAP32[$SecretKey3$i$i+8>>2]|0;
 ;HEAP32[$SecretKey3$i$i>>2]=0|0;HEAP32[$SecretKey3$i$i+4>>2]=0|0;HEAP32[$SecretKey3$i$i+8>>2]=0|0;
 $__size_$i$i$phi$trans$insert = ((($agg$tmp)) + 11|0);
 $$pre = HEAP8[$__size_$i$i$phi$trans$insert>>0]|0;
 $phitmp = ($$pre<<24>>24)<(0);
 if (!($phitmp)) {
  STACKTOP = sp;return ($call$i1|0);
 }
 $1 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($1);
 STACKTOP = sp;return ($call$i1|0);
}
function __ZN10emscripten8internal7InvokerI4KeysJEE6invokeEPFS2_vE($fn) {
 $fn = $fn|0;
 var $SecretKey$i$i = 0, $SecretKey3$i$i = 0, $call$i1 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ref$tmp = sp;
 FUNCTION_TABLE_vi[$fn & 31]($ref$tmp);
 $call$i1 = (__Znwm(24)|0);
 ;HEAP32[$call$i1>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$call$i1+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$call$i1+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
 ;HEAP32[$ref$tmp>>2]=0|0;HEAP32[$ref$tmp+4>>2]=0|0;HEAP32[$ref$tmp+8>>2]=0|0;
 $SecretKey$i$i = ((($call$i1)) + 12|0);
 $SecretKey3$i$i = ((($ref$tmp)) + 12|0);
 ;HEAP32[$SecretKey$i$i>>2]=HEAP32[$SecretKey3$i$i>>2]|0;HEAP32[$SecretKey$i$i+4>>2]=HEAP32[$SecretKey3$i$i+4>>2]|0;HEAP32[$SecretKey$i$i+8>>2]=HEAP32[$SecretKey3$i$i+8>>2]|0;
 STACKTOP = sp;return ($call$i1|0);
}
function __ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbS8_EPNS0_11BindingTypeIS8_EUt_E($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i12$i$i$i = 0, $add$i$i$i$i$i = 0, $agg$tmp = 0, $and$i$i$i$i$i = 0, $arraydecay$i = 0, $arrayidx$i$i$i = 0, $call = 0, $call$i$i$i$i$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0;
 var $or$i$i$i$i = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $agg$tmp = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $call = (FUNCTION_TABLE_ii[$fn & 15]($agg$tmp)|0);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $1 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($1<<24>>24)<(0);
 if (!($tobool$i$i)) {
  STACKTOP = sp;return ($call|0);
 }
 $2 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($2);
 STACKTOP = sp;return ($call|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_EE6invokeEPFS8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i12 = 0, $__p$015$i$i$i = 0, $__p$015$i$i$i20 = 0, $__p$016$i$i$i = 0, $__p$016$i$i$i22 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i13 = 0, $__size_$i$i$i$i26 = 0, $__size_$i$i31 = 0;
 var $__size_$i$i37 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i17 = 0, $__size_$i3$i$i$i = 0, $add$i = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i7 = 0, $add31$i = 0, $agg$tmp = 0, $agg$tmp3 = 0, $and$i$i$i$i$i = 0, $and$i$i$i$i$i8 = 0, $arraydecay$i = 0, $arraydecay$i1 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i23 = 0, $call$i$i$i$i$i$i = 0, $call$i$i$i$i$i$i924 = 0, $call1$i = 0, $call132$i = 0;
 var $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i3 = 0, $cmp2$i$i$i = 0, $cmp2$i$i$i5 = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i15 = 0, $conv$i$i$i$i28 = 0, $data3739$i = 0, $data3739$i60 = 0, $or$i$i$i$i = 0, $or$i$i$i$i11 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i32 = 0, $tobool$i$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $ref$tmp = sp + 24|0;
 $agg$tmp = sp + 12|0;
 $agg$tmp3 = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i1 = ((($args1)) + 4|0);
 $1 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp3>>2]=0|0;HEAP32[$agg$tmp3+4>>2]=0|0;HEAP32[$agg$tmp3+8>>2]=0|0;
 $cmp$i$i$i3 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp3);
  // unreachable;
 }
 $cmp2$i$i$i5 = ($1>>>0)<(11);
 if ($cmp2$i$i$i5) {
  $conv$i$i$i$i15 = $1&255;
  $__size_$i12$i$i$i17 = ((($agg$tmp3)) + 11|0);
  HEAP8[$__size_$i12$i$i$i17>>0] = $conv$i$i$i$i15;
  $cmp$i$i$i$i18 = ($1|0)==(0);
  if ($cmp$i$i$i$i18) {
   $__p$016$i$i$i22 = $agg$tmp3;
  } else {
   $__p$015$i$i$i20 = $agg$tmp3;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i7 = (($1) + 16)|0;
  $and$i$i$i$i$i8 = $add$i$i$i$i$i7 & -16;
  $call$i$i$i$i$i$i924 = (__Znwm($and$i$i$i$i$i8)|0);
  HEAP32[$agg$tmp3>>2] = $call$i$i$i$i$i$i924;
  $or$i$i$i$i11 = $and$i$i$i$i$i8 | -2147483648;
  $__cap_$i$i$i$i12 = ((($agg$tmp3)) + 8|0);
  HEAP32[$__cap_$i$i$i$i12>>2] = $or$i$i$i$i11;
  $__size_$i$i$i$i13 = ((($agg$tmp3)) + 4|0);
  HEAP32[$__size_$i$i$i$i13>>2] = $1;
  $__p$015$i$i$i20 = $call$i$i$i$i$i$i924;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i20|0),($arraydecay$i1|0),($1|0))|0;
  $__p$016$i$i$i22 = $__p$015$i$i$i20;
 }
 $arrayidx$i$i$i23 = (($__p$016$i$i$i22) + ($1)|0);
 HEAP8[$arrayidx$i$i$i23>>0] = 0;
 FUNCTION_TABLE_viii[$fn & 7]($ref$tmp,$agg$tmp,$agg$tmp3);
 $__size_$i$i$i$i26 = ((($ref$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i$i$i26>>0]|0;
 $tobool$i$i$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $3 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($3) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $3;
  $4 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i60 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i60|0),($4|0),($3|0))|0;
  __ZdlPv($4);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i28 = $2&255;
  $add$i = (($conv$i$i$i$i28) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i28;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i28|0))|0;
  $$in = $call1$i;
 }
 $__size_$i$i31 = ((($agg$tmp3)) + 11|0);
 $5 = HEAP8[$__size_$i$i31>>0]|0;
 $tobool$i$i32 = ($5<<24>>24)<(0);
 if ($tobool$i$i32) {
  $6 = HEAP32[$agg$tmp3>>2]|0;
  __ZdlPv($6);
 }
 $__size_$i$i37 = ((($agg$tmp)) + 11|0);
 $7 = HEAP8[$__size_$i$i37>>0]|0;
 $tobool$i$i38 = ($7<<24>>24)<(0);
 if (!($tobool$i$i38)) {
  STACKTOP = sp;return ($$in|0);
 }
 $8 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_iS8_EE6invokeEPFS8_S8_iS8_EPNS0_11BindingTypeIS8_EUt_EiSF_($fn,$args,$args1,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i12 = 0, $__p$015$i$i$i = 0, $__p$015$i$i$i20 = 0, $__p$016$i$i$i = 0, $__p$016$i$i$i22 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i13 = 0, $__size_$i$i$i$i26 = 0, $__size_$i$i31 = 0;
 var $__size_$i$i37 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i17 = 0, $__size_$i3$i$i$i = 0, $add$i = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i7 = 0, $add31$i = 0, $agg$tmp = 0, $agg$tmp5 = 0, $and$i$i$i$i$i = 0, $and$i$i$i$i$i8 = 0, $arraydecay$i = 0, $arraydecay$i1 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i23 = 0, $call$i$i$i$i$i$i = 0, $call$i$i$i$i$i$i924 = 0, $call1$i = 0, $call132$i = 0;
 var $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i3 = 0, $cmp2$i$i$i = 0, $cmp2$i$i$i5 = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i15 = 0, $conv$i$i$i$i28 = 0, $data3739$i = 0, $data3739$i60 = 0, $or$i$i$i$i = 0, $or$i$i$i$i11 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i32 = 0, $tobool$i$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $ref$tmp = sp + 24|0;
 $agg$tmp = sp + 12|0;
 $agg$tmp5 = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i1 = ((($args3)) + 4|0);
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp5>>2]=0|0;HEAP32[$agg$tmp5+4>>2]=0|0;HEAP32[$agg$tmp5+8>>2]=0|0;
 $cmp$i$i$i3 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp5);
  // unreachable;
 }
 $cmp2$i$i$i5 = ($1>>>0)<(11);
 if ($cmp2$i$i$i5) {
  $conv$i$i$i$i15 = $1&255;
  $__size_$i12$i$i$i17 = ((($agg$tmp5)) + 11|0);
  HEAP8[$__size_$i12$i$i$i17>>0] = $conv$i$i$i$i15;
  $cmp$i$i$i$i18 = ($1|0)==(0);
  if ($cmp$i$i$i$i18) {
   $__p$016$i$i$i22 = $agg$tmp5;
  } else {
   $__p$015$i$i$i20 = $agg$tmp5;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i7 = (($1) + 16)|0;
  $and$i$i$i$i$i8 = $add$i$i$i$i$i7 & -16;
  $call$i$i$i$i$i$i924 = (__Znwm($and$i$i$i$i$i8)|0);
  HEAP32[$agg$tmp5>>2] = $call$i$i$i$i$i$i924;
  $or$i$i$i$i11 = $and$i$i$i$i$i8 | -2147483648;
  $__cap_$i$i$i$i12 = ((($agg$tmp5)) + 8|0);
  HEAP32[$__cap_$i$i$i$i12>>2] = $or$i$i$i$i11;
  $__size_$i$i$i$i13 = ((($agg$tmp5)) + 4|0);
  HEAP32[$__size_$i$i$i$i13>>2] = $1;
  $__p$015$i$i$i20 = $call$i$i$i$i$i$i924;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i20|0),($arraydecay$i1|0),($1|0))|0;
  $__p$016$i$i$i22 = $__p$015$i$i$i20;
 }
 $arrayidx$i$i$i23 = (($__p$016$i$i$i22) + ($1)|0);
 HEAP8[$arrayidx$i$i$i23>>0] = 0;
 FUNCTION_TABLE_viiii[$fn & 15]($ref$tmp,$agg$tmp,$args1,$agg$tmp5);
 $__size_$i$i$i$i26 = ((($ref$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i$i$i26>>0]|0;
 $tobool$i$i$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $3 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($3) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $3;
  $4 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i60 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i60|0),($4|0),($3|0))|0;
  __ZdlPv($4);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i28 = $2&255;
  $add$i = (($conv$i$i$i$i28) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i28;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i28|0))|0;
  $$in = $call1$i;
 }
 $__size_$i$i31 = ((($agg$tmp5)) + 11|0);
 $5 = HEAP8[$__size_$i$i31>>0]|0;
 $tobool$i$i32 = ($5<<24>>24)<(0);
 if ($tobool$i$i32) {
  $6 = HEAP32[$agg$tmp5>>2]|0;
  __ZdlPv($6);
 }
 $__size_$i$i37 = ((($agg$tmp)) + 11|0);
 $7 = HEAP8[$__size_$i$i37>>0]|0;
 $tobool$i$i38 = ($7<<24>>24)<(0);
 if (!($tobool$i$i38)) {
  STACKTOP = sp;return ($$in|0);
 }
 $8 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_S8_EE6invokeEPFS8_S8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_SF_($fn,$args,$args1,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i12 = 0, $__cap_$i$i$i$i37 = 0, $__p$015$i$i$i = 0, $__p$015$i$i$i20 = 0, $__p$015$i$i$i45 = 0, $__p$016$i$i$i = 0;
 var $__p$016$i$i$i22 = 0, $__p$016$i$i$i47 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i13 = 0, $__size_$i$i$i$i38 = 0, $__size_$i$i$i$i52 = 0, $__size_$i$i57 = 0, $__size_$i$i63 = 0, $__size_$i$i69 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i17 = 0, $__size_$i12$i$i$i42 = 0, $__size_$i3$i$i$i = 0, $add$i = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i32 = 0, $add$i$i$i$i$i7 = 0, $add31$i = 0, $agg$tmp = 0, $agg$tmp5 = 0;
 var $agg$tmp6 = 0, $and$i$i$i$i$i = 0, $and$i$i$i$i$i33 = 0, $and$i$i$i$i$i8 = 0, $arraydecay$i = 0, $arraydecay$i1 = 0, $arraydecay$i26 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i23 = 0, $arrayidx$i$i$i48 = 0, $call$i$i$i$i$i$i = 0, $call$i$i$i$i$i$i3450 = 0, $call$i$i$i$i$i$i924 = 0, $call1$i = 0, $call132$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i$i43 = 0, $cmp$i$i$i28 = 0;
 var $cmp$i$i$i3 = 0, $cmp2$i$i$i = 0, $cmp2$i$i$i30 = 0, $cmp2$i$i$i5 = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i15 = 0, $conv$i$i$i$i40 = 0, $conv$i$i$i$i54 = 0, $data3739$i = 0, $data3739$i98 = 0, $or$i$i$i$i = 0, $or$i$i$i$i11 = 0, $or$i$i$i$i36 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i58 = 0, $tobool$i$i64 = 0, $tobool$i$i70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $ref$tmp = sp + 36|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp5 = sp + 12|0;
 $agg$tmp6 = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i1 = ((($args1)) + 4|0);
 $1 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp5>>2]=0|0;HEAP32[$agg$tmp5+4>>2]=0|0;HEAP32[$agg$tmp5+8>>2]=0|0;
 $cmp$i$i$i3 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp5);
  // unreachable;
 }
 $cmp2$i$i$i5 = ($1>>>0)<(11);
 if ($cmp2$i$i$i5) {
  $conv$i$i$i$i15 = $1&255;
  $__size_$i12$i$i$i17 = ((($agg$tmp5)) + 11|0);
  HEAP8[$__size_$i12$i$i$i17>>0] = $conv$i$i$i$i15;
  $cmp$i$i$i$i18 = ($1|0)==(0);
  if ($cmp$i$i$i$i18) {
   $__p$016$i$i$i22 = $agg$tmp5;
  } else {
   $__p$015$i$i$i20 = $agg$tmp5;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i7 = (($1) + 16)|0;
  $and$i$i$i$i$i8 = $add$i$i$i$i$i7 & -16;
  $call$i$i$i$i$i$i924 = (__Znwm($and$i$i$i$i$i8)|0);
  HEAP32[$agg$tmp5>>2] = $call$i$i$i$i$i$i924;
  $or$i$i$i$i11 = $and$i$i$i$i$i8 | -2147483648;
  $__cap_$i$i$i$i12 = ((($agg$tmp5)) + 8|0);
  HEAP32[$__cap_$i$i$i$i12>>2] = $or$i$i$i$i11;
  $__size_$i$i$i$i13 = ((($agg$tmp5)) + 4|0);
  HEAP32[$__size_$i$i$i$i13>>2] = $1;
  $__p$015$i$i$i20 = $call$i$i$i$i$i$i924;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i20|0),($arraydecay$i1|0),($1|0))|0;
  $__p$016$i$i$i22 = $__p$015$i$i$i20;
 }
 $arrayidx$i$i$i23 = (($__p$016$i$i$i22) + ($1)|0);
 HEAP8[$arrayidx$i$i$i23>>0] = 0;
 $arraydecay$i26 = ((($args3)) + 4|0);
 $2 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp6>>2]=0|0;HEAP32[$agg$tmp6+4>>2]=0|0;HEAP32[$agg$tmp6+8>>2]=0|0;
 $cmp$i$i$i28 = ($2>>>0)>(4294967279);
 if ($cmp$i$i$i28) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp6);
  // unreachable;
 }
 $cmp2$i$i$i30 = ($2>>>0)<(11);
 if ($cmp2$i$i$i30) {
  $conv$i$i$i$i40 = $2&255;
  $__size_$i12$i$i$i42 = ((($agg$tmp6)) + 11|0);
  HEAP8[$__size_$i12$i$i$i42>>0] = $conv$i$i$i$i40;
  $cmp$i$i$i$i43 = ($2|0)==(0);
  if ($cmp$i$i$i$i43) {
   $__p$016$i$i$i47 = $agg$tmp6;
  } else {
   $__p$015$i$i$i45 = $agg$tmp6;
   label = 18;
  }
 } else {
  $add$i$i$i$i$i32 = (($2) + 16)|0;
  $and$i$i$i$i$i33 = $add$i$i$i$i$i32 & -16;
  $call$i$i$i$i$i$i3450 = (__Znwm($and$i$i$i$i$i33)|0);
  HEAP32[$agg$tmp6>>2] = $call$i$i$i$i$i$i3450;
  $or$i$i$i$i36 = $and$i$i$i$i$i33 | -2147483648;
  $__cap_$i$i$i$i37 = ((($agg$tmp6)) + 8|0);
  HEAP32[$__cap_$i$i$i$i37>>2] = $or$i$i$i$i36;
  $__size_$i$i$i$i38 = ((($agg$tmp6)) + 4|0);
  HEAP32[$__size_$i$i$i$i38>>2] = $2;
  $__p$015$i$i$i45 = $call$i$i$i$i$i$i3450;
  label = 18;
 }
 if ((label|0) == 18) {
  _memcpy(($__p$015$i$i$i45|0),($arraydecay$i26|0),($2|0))|0;
  $__p$016$i$i$i47 = $__p$015$i$i$i45;
 }
 $arrayidx$i$i$i48 = (($__p$016$i$i$i47) + ($2)|0);
 HEAP8[$arrayidx$i$i$i48>>0] = 0;
 FUNCTION_TABLE_viiii[$fn & 15]($ref$tmp,$agg$tmp,$agg$tmp5,$agg$tmp6);
 $__size_$i$i$i$i52 = ((($ref$tmp)) + 11|0);
 $3 = HEAP8[$__size_$i$i$i$i52>>0]|0;
 $tobool$i$i$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($ref$tmp)) + 4|0);
  $4 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($4) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $4;
  $5 = HEAP32[$ref$tmp>>2]|0;
  $data3739$i98 = ((($call132$i)) + 4|0);
  _memcpy(($data3739$i98|0),($5|0),($4|0))|0;
  __ZdlPv($5);
  $$in = $call132$i;
 } else {
  $conv$i$i$i$i54 = $3&255;
  $add$i = (($conv$i$i$i$i54) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i54;
  $data3739$i = ((($call1$i)) + 4|0);
  _memcpy(($data3739$i|0),($ref$tmp|0),($conv$i$i$i$i54|0))|0;
  $$in = $call1$i;
 }
 $__size_$i$i57 = ((($agg$tmp6)) + 11|0);
 $6 = HEAP8[$__size_$i$i57>>0]|0;
 $tobool$i$i58 = ($6<<24>>24)<(0);
 if ($tobool$i$i58) {
  $7 = HEAP32[$agg$tmp6>>2]|0;
  __ZdlPv($7);
 }
 $__size_$i$i63 = ((($agg$tmp5)) + 11|0);
 $8 = HEAP8[$__size_$i$i63>>0]|0;
 $tobool$i$i64 = ($8<<24>>24)<(0);
 if ($tobool$i$i64) {
  $9 = HEAP32[$agg$tmp5>>2]|0;
  __ZdlPv($9);
 }
 $__size_$i$i69 = ((($agg$tmp)) + 11|0);
 $10 = HEAP8[$__size_$i$i69>>0]|0;
 $tobool$i$i70 = ($10<<24>>24)<(0);
 if (!($tobool$i$i70)) {
  STACKTOP = sp;return ($$in|0);
 }
 $11 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($11);
 STACKTOP = sp;return ($$in|0);
}
function __ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_EE6invokeEPFbS8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_SF_($fn,$args,$args1,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i12 = 0, $__cap_$i$i$i$i37 = 0, $__p$015$i$i$i = 0, $__p$015$i$i$i20 = 0, $__p$015$i$i$i45 = 0, $__p$016$i$i$i = 0, $__p$016$i$i$i22 = 0, $__p$016$i$i$i47 = 0, $__size_$i$i = 0, $__size_$i$i$i$i = 0;
 var $__size_$i$i$i$i13 = 0, $__size_$i$i$i$i38 = 0, $__size_$i$i53 = 0, $__size_$i$i59 = 0, $__size_$i12$i$i$i = 0, $__size_$i12$i$i$i17 = 0, $__size_$i12$i$i$i42 = 0, $add$i$i$i$i$i = 0, $add$i$i$i$i$i32 = 0, $add$i$i$i$i$i7 = 0, $agg$tmp = 0, $agg$tmp5 = 0, $agg$tmp6 = 0, $and$i$i$i$i$i = 0, $and$i$i$i$i$i33 = 0, $and$i$i$i$i$i8 = 0, $arraydecay$i = 0, $arraydecay$i1 = 0, $arraydecay$i26 = 0, $arrayidx$i$i$i = 0;
 var $arrayidx$i$i$i23 = 0, $arrayidx$i$i$i48 = 0, $call = 0, $call$i$i$i$i$i$i = 0, $call$i$i$i$i$i$i3450 = 0, $call$i$i$i$i$i$i924 = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i18 = 0, $cmp$i$i$i$i43 = 0, $cmp$i$i$i28 = 0, $cmp$i$i$i3 = 0, $cmp2$i$i$i = 0, $cmp2$i$i$i30 = 0, $cmp2$i$i$i5 = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i15 = 0, $conv$i$i$i$i40 = 0, $or$i$i$i$i = 0, $or$i$i$i$i11 = 0;
 var $or$i$i$i$i36 = 0, $tobool$i$i = 0, $tobool$i$i54 = 0, $tobool$i$i60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp5 = sp + 12|0;
 $agg$tmp6 = sp;
 $arraydecay$i = ((($args)) + 4|0);
 $0 = HEAP32[$args>>2]|0;
 ;HEAP32[$agg$tmp>>2]=0|0;HEAP32[$agg$tmp+4>>2]=0|0;HEAP32[$agg$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($agg$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $agg$tmp;
  } else {
   $__p$015$i$i$i = $agg$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($agg$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($agg$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $arraydecay$i1 = ((($args1)) + 4|0);
 $1 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp5>>2]=0|0;HEAP32[$agg$tmp5+4>>2]=0|0;HEAP32[$agg$tmp5+8>>2]=0|0;
 $cmp$i$i$i3 = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp5);
  // unreachable;
 }
 $cmp2$i$i$i5 = ($1>>>0)<(11);
 if ($cmp2$i$i$i5) {
  $conv$i$i$i$i15 = $1&255;
  $__size_$i12$i$i$i17 = ((($agg$tmp5)) + 11|0);
  HEAP8[$__size_$i12$i$i$i17>>0] = $conv$i$i$i$i15;
  $cmp$i$i$i$i18 = ($1|0)==(0);
  if ($cmp$i$i$i$i18) {
   $__p$016$i$i$i22 = $agg$tmp5;
  } else {
   $__p$015$i$i$i20 = $agg$tmp5;
   label = 12;
  }
 } else {
  $add$i$i$i$i$i7 = (($1) + 16)|0;
  $and$i$i$i$i$i8 = $add$i$i$i$i$i7 & -16;
  $call$i$i$i$i$i$i924 = (__Znwm($and$i$i$i$i$i8)|0);
  HEAP32[$agg$tmp5>>2] = $call$i$i$i$i$i$i924;
  $or$i$i$i$i11 = $and$i$i$i$i$i8 | -2147483648;
  $__cap_$i$i$i$i12 = ((($agg$tmp5)) + 8|0);
  HEAP32[$__cap_$i$i$i$i12>>2] = $or$i$i$i$i11;
  $__size_$i$i$i$i13 = ((($agg$tmp5)) + 4|0);
  HEAP32[$__size_$i$i$i$i13>>2] = $1;
  $__p$015$i$i$i20 = $call$i$i$i$i$i$i924;
  label = 12;
 }
 if ((label|0) == 12) {
  _memcpy(($__p$015$i$i$i20|0),($arraydecay$i1|0),($1|0))|0;
  $__p$016$i$i$i22 = $__p$015$i$i$i20;
 }
 $arrayidx$i$i$i23 = (($__p$016$i$i$i22) + ($1)|0);
 HEAP8[$arrayidx$i$i$i23>>0] = 0;
 $arraydecay$i26 = ((($args3)) + 4|0);
 $2 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp6>>2]=0|0;HEAP32[$agg$tmp6+4>>2]=0|0;HEAP32[$agg$tmp6+8>>2]=0|0;
 $cmp$i$i$i28 = ($2>>>0)>(4294967279);
 if ($cmp$i$i$i28) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp6);
  // unreachable;
 }
 $cmp2$i$i$i30 = ($2>>>0)<(11);
 if ($cmp2$i$i$i30) {
  $conv$i$i$i$i40 = $2&255;
  $__size_$i12$i$i$i42 = ((($agg$tmp6)) + 11|0);
  HEAP8[$__size_$i12$i$i$i42>>0] = $conv$i$i$i$i40;
  $cmp$i$i$i$i43 = ($2|0)==(0);
  if ($cmp$i$i$i$i43) {
   $__p$016$i$i$i47 = $agg$tmp6;
  } else {
   $__p$015$i$i$i45 = $agg$tmp6;
   label = 18;
  }
 } else {
  $add$i$i$i$i$i32 = (($2) + 16)|0;
  $and$i$i$i$i$i33 = $add$i$i$i$i$i32 & -16;
  $call$i$i$i$i$i$i3450 = (__Znwm($and$i$i$i$i$i33)|0);
  HEAP32[$agg$tmp6>>2] = $call$i$i$i$i$i$i3450;
  $or$i$i$i$i36 = $and$i$i$i$i$i33 | -2147483648;
  $__cap_$i$i$i$i37 = ((($agg$tmp6)) + 8|0);
  HEAP32[$__cap_$i$i$i$i37>>2] = $or$i$i$i$i36;
  $__size_$i$i$i$i38 = ((($agg$tmp6)) + 4|0);
  HEAP32[$__size_$i$i$i$i38>>2] = $2;
  $__p$015$i$i$i45 = $call$i$i$i$i$i$i3450;
  label = 18;
 }
 if ((label|0) == 18) {
  _memcpy(($__p$015$i$i$i45|0),($arraydecay$i26|0),($2|0))|0;
  $__p$016$i$i$i47 = $__p$015$i$i$i45;
 }
 $arrayidx$i$i$i48 = (($__p$016$i$i$i47) + ($2)|0);
 HEAP8[$arrayidx$i$i$i48>>0] = 0;
 $call = (FUNCTION_TABLE_iiii[$fn & 15]($agg$tmp,$agg$tmp5,$agg$tmp6)|0);
 $__size_$i$i = ((($agg$tmp6)) + 11|0);
 $3 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i) {
  $4 = HEAP32[$agg$tmp6>>2]|0;
  __ZdlPv($4);
 }
 $__size_$i$i53 = ((($agg$tmp5)) + 11|0);
 $5 = HEAP8[$__size_$i$i53>>0]|0;
 $tobool$i$i54 = ($5<<24>>24)<(0);
 if ($tobool$i$i54) {
  $6 = HEAP32[$agg$tmp5>>2]|0;
  __ZdlPv($6);
 }
 $__size_$i$i59 = ((($agg$tmp)) + 11|0);
 $7 = HEAP8[$__size_$i$i59>>0]|0;
 $tobool$i$i60 = ($7<<24>>24)<(0);
 if (!($tobool$i$i60)) {
  STACKTOP = sp;return ($call|0);
 }
 $8 = HEAP32[$agg$tmp>>2]|0;
 __ZdlPv($8);
 STACKTOP = sp;return ($call|0);
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9push_backERKS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_ = 0, $__value_$i$i$i = 0, $cmp = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_ = ((($this)) + 4|0);
 $0 = HEAP32[$__end_>>2]|0;
 $__value_$i$i$i = ((($this)) + 8|0);
 $1 = HEAP32[$__value_$i$i$i>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($this,$__x);
  return;
 } else {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$__x);
  $2 = HEAP32[$__end_>>2]|0;
  $incdec$ptr = ((($2)) + 12|0);
  HEAP32[$__end_>>2] = $incdec$ptr;
  return;
 }
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6resizeEmRKS6_($this,$__sz,$__x) {
 $this = $this|0;
 $__sz = $__sz|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i$i$i$i$i$i = 0, $__soon_to_be_end$06$i$i = 0, $add$ptr = 0, $cmp = 0, $cmp$i$i = 0, $cmp2 = 0, $cmp5$i$i = 0, $incdec$ptr$i$i = 0, $sub = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tobool$i$i$i$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $cmp = ($sub$ptr$div$i>>>0)<($__sz>>>0);
 $2 = $1;
 $3 = $0;
 if ($cmp) {
  $sub = (($__sz) - ($sub$ptr$div$i))|0;
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8__appendEmRKS6_($this,$sub,$__x);
  return;
 }
 $cmp2 = ($sub$ptr$div$i>>>0)>($__sz>>>0);
 if (!($cmp2)) {
  return;
 }
 $add$ptr = (($2) + (($__sz*12)|0)|0);
 $cmp5$i$i = ($add$ptr|0)==($3|0);
 if (!($cmp5$i$i)) {
  $__soon_to_be_end$06$i$i = $3;
  while(1) {
   $incdec$ptr$i$i = ((($__soon_to_be_end$06$i$i)) + -12|0);
   $__size_$i$i$i$i$i$i$i = ((($incdec$ptr$i$i)) + 11|0);
   $4 = HEAP8[$__size_$i$i$i$i$i$i$i>>0]|0;
   $tobool$i$i$i$i$i$i$i = ($4<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i) {
    $5 = HEAP32[$incdec$ptr$i$i>>2]|0;
    __ZdlPv($5);
   }
   $cmp$i$i = ($incdec$ptr$i$i|0)==($add$ptr|0);
   if ($cmp$i$i) {
    break;
   } else {
    $__soon_to_be_end$06$i$i = $incdec$ptr$i$i;
   }
  }
 }
 HEAP32[$__end_$i>>2] = $add$ptr;
 return;
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getERKSB_m($agg$result,$v,$index) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $index = $index|0;
 var $$in$i$i$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i$i$i$i$i$i = 0, $__size_$i3$i$i$i$i$i$i = 0, $add$i$i$i$i = 0, $add31$i$i$i$i = 0, $argv$i = 0, $arrayidx$i = 0, $call1$i$i$i$i = 0, $call132$i$i$i$i = 0, $call4$i = 0, $cmp = 0, $cond$i$i14$i$i$i$i = 0, $cond$i$i2141$i$i$i$i = 0;
 var $conv$i$i$i$i$i$i$i = 0, $data3739$i$i$i$i = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tobool$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $argv$i = sp;
 $__end_$i = ((($v)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$v>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $cmp = ($sub$ptr$div$i>>>0)>($index>>>0);
 $2 = $1;
 if (!($cmp)) {
  HEAP32[$agg$result>>2] = (1);
  STACKTOP = sp;return;
 }
 $arrayidx$i = (($2) + (($index*12)|0)|0);
 $__size_$i$i$i$i$i$i$i = ((($arrayidx$i)) + 11|0);
 $3 = HEAP8[$__size_$i$i$i$i$i$i$i>>0]|0;
 $tobool$i$i$i$i$i$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i$i$i$i$i$i) {
  $__size_$i3$i$i$i$i$i$i = (((($2) + (($index*12)|0)|0)) + 4|0);
  $4 = HEAP32[$__size_$i3$i$i$i$i$i$i>>2]|0;
  $add31$i$i$i$i = (($4) + 4)|0;
  $call132$i$i$i$i = (_malloc($add31$i$i$i$i)|0);
  HEAP32[$call132$i$i$i$i>>2] = $4;
  $5 = HEAP32[$arrayidx$i>>2]|0;
  $$in$i$i$i$i = $call132$i$i$i$i;$cond$i$i14$i$i$i$i = $4;$cond$i$i2141$i$i$i$i = $5;
 } else {
  $conv$i$i$i$i$i$i$i = $3&255;
  $add$i$i$i$i = (($conv$i$i$i$i$i$i$i) + 4)|0;
  $call1$i$i$i$i = (_malloc($add$i$i$i$i)|0);
  HEAP32[$call1$i$i$i$i>>2] = $conv$i$i$i$i$i$i$i;
  $$in$i$i$i$i = $call1$i$i$i$i;$cond$i$i14$i$i$i$i = $conv$i$i$i$i$i$i$i;$cond$i$i2141$i$i$i$i = $arrayidx$i;
 }
 $data3739$i$i$i$i = ((($$in$i$i$i$i)) + 4|0);
 _memcpy(($data3739$i$i$i$i|0),($cond$i$i2141$i$i$i$i|0),($cond$i$i14$i$i$i$i|0))|0;
 HEAP32[$argv$i>>2] = $$in$i$i$i$i;
 $call4$i = (__emval_take_value((33416|0),($argv$i|0))|0);
 HEAP32[$agg$result>>2] = $call4$i;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3setERSB_mRKS9_($v,$index,$value) {
 $v = $v|0;
 $index = $index|0;
 $value = $value|0;
 var $0 = 0, $arrayidx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$v>>2]|0;
 $arrayidx$i = (($0) + (($index*12)|0)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($arrayidx$i,$value)|0);
 return 1;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$in = 0, $$pre = 0, $$pre$i = 0, $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__end1$addr$04$i$i = 0, $__end_$i = 0, $__size_$i$i$i$i$i$i$i$i$i15 = 0, $__value_$i$i$i$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr5$i = 0, $call$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i21 = 0, $cmp$i$i$i$i5 = 0, $cmp$i28 = 0, $cmp1$i$i$i$i11 = 0, $cmp3$i = 0, $cmp3$i$i = 0, $cond$i = 0;
 var $exception$i$i$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i$i13 = 0, $mul$i = 0, $mul$i$i$i = 0, $spec$select$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i$i16 = 0, $tobool$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $add = (($sub$ptr$div$i) + 1)|0;
 $cmp$i = ($add>>>0)>(357913941);
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__value_$i$i$i$i$i$i = ((($this)) + 8|0);
 $2 = HEAP32[$__value_$i$i$i$i$i$i>>2]|0;
 $sub$ptr$sub$i$i$i = (($2) - ($1))|0;
 $sub$ptr$div$i$i$i = (($sub$ptr$sub$i$i$i|0) / 12)&-1;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(178956970);
 $mul$i = $sub$ptr$div$i$i$i << 1;
 $cmp$i$i$i$i5 = ($mul$i>>>0)<($add>>>0);
 $$sroa$speculated$i = $cmp$i$i$i$i5 ? $add : $mul$i;
 $spec$select$i = $cmp3$i ? $$sroa$speculated$i : 357913941;
 $cmp$i28 = ($spec$select$i|0)==(0);
 do {
  if ($cmp$i28) {
   $cond$i = 0;
  } else {
   $cmp$i$i$i = ($spec$select$i>>>0)>(357913941);
   if ($cmp$i$i$i) {
    $exception$i$i$i$i = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($exception$i$i$i$i,35737);
    HEAP32[$exception$i$i$i$i>>2] = (34592);
    ___cxa_throw(($exception$i$i$i$i|0),(33928|0),(6|0));
    // unreachable;
   } else {
    $mul$i$i$i = ($spec$select$i*12)|0;
    $call$i$i$i$i = (__Znwm($mul$i$i$i)|0);
    $cond$i = $call$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$ptr$i = (($cond$i) + (($sub$ptr$div$i*12)|0)|0);
 $add$ptr5$i = (($cond$i) + (($spec$select$i*12)|0)|0);
 $3 = $add$ptr5$i;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($add$ptr$i,$__x);
 $incdec$ptr = ((($add$ptr$i)) + 12|0);
 $4 = $incdec$ptr;
 $5 = HEAP32[$this>>2]|0;
 $6 = HEAP32[$__end_$i>>2]|0;
 $cmp3$i$i = ($6|0)==($5|0);
 if ($cmp3$i$i) {
  $7 = $5;
  $$in = $add$ptr$i;$10 = $7;$12 = $5;
 } else {
  $8 = $add$ptr$i;$__end1$addr$04$i$i = $6;
  while(1) {
   $add$ptr$i$i = ((($8)) + -12|0);
   $incdec$ptr$i$i = ((($__end1$addr$04$i$i)) + -12|0);
   ;HEAP32[$add$ptr$i$i>>2]=HEAP32[$incdec$ptr$i$i>>2]|0;HEAP32[$add$ptr$i$i+4>>2]=HEAP32[$incdec$ptr$i$i+4>>2]|0;HEAP32[$add$ptr$i$i+8>>2]=HEAP32[$incdec$ptr$i$i+8>>2]|0;
   ;HEAP32[$incdec$ptr$i$i>>2]=0|0;HEAP32[$incdec$ptr$i$i+4>>2]=0|0;HEAP32[$incdec$ptr$i$i+8>>2]=0|0;
   $cmp$i$i = ($incdec$ptr$i$i|0)==($5|0);
   if ($cmp$i$i) {
    break;
   } else {
    $8 = $add$ptr$i$i;$__end1$addr$04$i$i = $incdec$ptr$i$i;
   }
  }
  $$pre$i = HEAP32[$this>>2]|0;
  $$pre = HEAP32[$__end_$i>>2]|0;
  $$in = $add$ptr$i$i;$10 = $$pre$i;$12 = $$pre;
 }
 $9 = $$in;
 HEAP32[$this>>2] = $9;
 HEAP32[$__end_$i>>2] = $4;
 HEAP32[$__value_$i$i$i$i$i$i>>2] = $3;
 $11 = $10;
 $cmp1$i$i$i$i11 = ($12|0)==($11|0);
 if (!($cmp1$i$i$i$i11)) {
  $13 = $12;
  while(1) {
   $incdec$ptr$i$i$i$i13 = ((($13)) + -12|0);
   $__size_$i$i$i$i$i$i$i$i$i15 = ((($incdec$ptr$i$i$i$i13)) + 11|0);
   $14 = HEAP8[$__size_$i$i$i$i$i$i$i$i$i15>>0]|0;
   $tobool$i$i$i$i$i$i$i$i$i16 = ($14<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i$i$i16) {
    $15 = HEAP32[$incdec$ptr$i$i$i$i13>>2]|0;
    __ZdlPv($15);
   }
   $cmp$i$i$i$i21 = ($incdec$ptr$i$i$i$i13|0)==($11|0);
   if ($cmp$i$i$i$i21) {
    break;
   } else {
    $13 = $incdec$ptr$i$i$i$i13;
   }
  }
 }
 $tobool$i24 = ($10|0)==(0);
 if ($tobool$i24) {
  return;
 }
 $16 = $10;
 __ZdlPv($16);
 return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8__appendEmRKS6_($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $$pre = 0, $$pre$i47 = 0, $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end1$addr$04$i$i = 0, $__end_ = 0, $__n$addr$0$i = 0, $__n$addr$0$i40 = 0, $__size_$i$i$i$i$i$i$i$i$i14 = 0, $__v$sroa$16$0 = 0, $__value_$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr5$i = 0, $call$i$i$i$i = 0;
 var $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i20 = 0, $cmp$i$i$i$i29 = 0, $cmp$i27 = 0, $cmp$i34 = 0, $cmp$i43 = 0, $cmp1$i$i$i$i10 = 0, $cmp3$i = 0, $cmp3$i$i = 0, $cond$i = 0, $dec$i = 0, $dec$i42 = 0, $exception$i$i$i$i = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i$i12 = 0, $incdec$ptr$i41 = 0;
 var $mul$i = 0, $mul$i$i$i = 0, $spec$select$i = 0, $sub$ptr$div = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i$i15 = 0, $tobool$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__value_$i$i$i = ((($this)) + 8|0);
 $0 = HEAP32[$__value_$i$i$i>>2]|0;
 $__end_ = ((($this)) + 4|0);
 $1 = HEAP32[$__end_>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 12)&-1;
 $cmp = ($sub$ptr$div>>>0)<($__n>>>0);
 if (!($cmp)) {
  $2 = $1;
  $3 = $2;$__n$addr$0$i = $__n;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$__x);
   $4 = HEAP32[$__end_>>2]|0;
   $incdec$ptr$i = ((($4)) + 12|0);
   HEAP32[$__end_>>2] = $incdec$ptr$i;
   $dec$i = (($__n$addr$0$i) + -1)|0;
   $cmp$i = ($dec$i|0)==(0);
   if ($cmp$i) {
    break;
   } else {
    $3 = $incdec$ptr$i;$__n$addr$0$i = $dec$i;
   }
  }
  return;
 }
 $5 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($1) - ($5))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $add = (($sub$ptr$div$i) + ($__n))|0;
 $cmp$i27 = ($add>>>0)>(357913941);
 if ($cmp$i27) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $sub$ptr$sub$i$i$i = (($0) - ($5))|0;
 $sub$ptr$div$i$i$i = (($sub$ptr$sub$i$i$i|0) / 12)&-1;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(178956970);
 $mul$i = $sub$ptr$div$i$i$i << 1;
 $cmp$i$i$i$i29 = ($mul$i>>>0)<($add>>>0);
 $$sroa$speculated$i = $cmp$i$i$i$i29 ? $add : $mul$i;
 $spec$select$i = $cmp3$i ? $$sroa$speculated$i : 357913941;
 $cmp$i34 = ($spec$select$i|0)==(0);
 do {
  if ($cmp$i34) {
   $cond$i = 0;
  } else {
   $cmp$i$i$i = ($spec$select$i>>>0)>(357913941);
   if ($cmp$i$i$i) {
    $exception$i$i$i$i = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($exception$i$i$i$i,35737);
    HEAP32[$exception$i$i$i$i>>2] = (34592);
    ___cxa_throw(($exception$i$i$i$i|0),(33928|0),(6|0));
    // unreachable;
   } else {
    $mul$i$i$i = ($spec$select$i*12)|0;
    $call$i$i$i$i = (__Znwm($mul$i$i$i)|0);
    $cond$i = $call$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$ptr$i = (($cond$i) + (($sub$ptr$div$i*12)|0)|0);
 $6 = $add$ptr$i;
 $add$ptr5$i = (($cond$i) + (($spec$select$i*12)|0)|0);
 $7 = $add$ptr5$i;
 $8 = $add$ptr$i;$__n$addr$0$i40 = $__n;$__v$sroa$16$0 = $6;
 while(1) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($8,$__x);
  $9 = $__v$sroa$16$0;
  $incdec$ptr$i41 = ((($9)) + 12|0);
  $10 = $incdec$ptr$i41;
  $dec$i42 = (($__n$addr$0$i40) + -1)|0;
  $cmp$i43 = ($dec$i42|0)==(0);
  if ($cmp$i43) {
   break;
  } else {
   $8 = $incdec$ptr$i41;$__n$addr$0$i40 = $dec$i42;$__v$sroa$16$0 = $10;
  }
 }
 $11 = $incdec$ptr$i41;
 $12 = HEAP32[$this>>2]|0;
 $13 = HEAP32[$__end_>>2]|0;
 $cmp3$i$i = ($13|0)==($12|0);
 if ($cmp3$i$i) {
  $14 = $12;
  $17 = $6;$18 = $14;$20 = $12;
 } else {
  $15 = $add$ptr$i;$__end1$addr$04$i$i = $13;
  while(1) {
   $add$ptr$i$i = ((($15)) + -12|0);
   $incdec$ptr$i$i = ((($__end1$addr$04$i$i)) + -12|0);
   ;HEAP32[$add$ptr$i$i>>2]=HEAP32[$incdec$ptr$i$i>>2]|0;HEAP32[$add$ptr$i$i+4>>2]=HEAP32[$incdec$ptr$i$i+4>>2]|0;HEAP32[$add$ptr$i$i+8>>2]=HEAP32[$incdec$ptr$i$i+8>>2]|0;
   ;HEAP32[$incdec$ptr$i$i>>2]=0|0;HEAP32[$incdec$ptr$i$i+4>>2]=0|0;HEAP32[$incdec$ptr$i$i+8>>2]=0|0;
   $cmp$i$i = ($incdec$ptr$i$i|0)==($12|0);
   if ($cmp$i$i) {
    break;
   } else {
    $15 = $add$ptr$i$i;$__end1$addr$04$i$i = $incdec$ptr$i$i;
   }
  }
  $16 = $add$ptr$i$i;
  $$pre$i47 = HEAP32[$this>>2]|0;
  $$pre = HEAP32[$__end_>>2]|0;
  $17 = $16;$18 = $$pre$i47;$20 = $$pre;
 }
 HEAP32[$this>>2] = $17;
 HEAP32[$__end_>>2] = $11;
 HEAP32[$__value_$i$i$i>>2] = $7;
 $19 = $18;
 $cmp1$i$i$i$i10 = ($20|0)==($19|0);
 if (!($cmp1$i$i$i$i10)) {
  $21 = $20;
  while(1) {
   $incdec$ptr$i$i$i$i12 = ((($21)) + -12|0);
   $__size_$i$i$i$i$i$i$i$i$i14 = ((($incdec$ptr$i$i$i$i12)) + 11|0);
   $22 = HEAP8[$__size_$i$i$i$i$i$i$i$i$i14>>0]|0;
   $tobool$i$i$i$i$i$i$i$i$i15 = ($22<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i$i$i15) {
    $23 = HEAP32[$incdec$ptr$i$i$i$i12>>2]|0;
    __ZdlPv($23);
   }
   $cmp$i$i$i$i20 = ($incdec$ptr$i$i$i$i12|0)==($19|0);
   if ($cmp$i$i$i$i20) {
    break;
   } else {
    $21 = $incdec$ptr$i$i$i$i12;
   }
  }
 }
 $tobool$i23 = ($18|0)==(0);
 if ($tobool$i23) {
  return;
 }
 $24 = $18;
 __ZdlPv($24);
 return;
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (33472|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__end_$i$i$i = 0, $__size_$i$i$i$i$i$i$i$i = 0, $__soon_to_be_end$06$i$i$i = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp5$i$i$i = 0, $incdec$ptr$i$i$i = 0, $isnull = 0, $tobool$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isnull = ($ptr|0)==(0|0);
 if ($isnull) {
  return;
 }
 $0 = HEAP32[$ptr>>2]|0;
 $cmp$i = ($0|0)==(0|0);
 if (!($cmp$i)) {
  $__end_$i$i$i = ((($ptr)) + 4|0);
  $1 = HEAP32[$__end_$i$i$i>>2]|0;
  $cmp5$i$i$i = ($1|0)==($0|0);
  if ($cmp5$i$i$i) {
   $4 = $0;
  } else {
   $__soon_to_be_end$06$i$i$i = $1;
   while(1) {
    $incdec$ptr$i$i$i = ((($__soon_to_be_end$06$i$i$i)) + -12|0);
    $__size_$i$i$i$i$i$i$i$i = ((($incdec$ptr$i$i$i)) + 11|0);
    $2 = HEAP8[$__size_$i$i$i$i$i$i$i$i>>0]|0;
    $tobool$i$i$i$i$i$i$i$i = ($2<<24>>24)<(0);
    if ($tobool$i$i$i$i$i$i$i$i) {
     $3 = HEAP32[$incdec$ptr$i$i$i>>2]|0;
     __ZdlPv($3);
    }
    $cmp$i$i$i = ($incdec$ptr$i$i$i|0)==($0|0);
    if ($cmp$i$i$i) {
     break;
    } else {
     $__soon_to_be_end$06$i$i$i = $incdec$ptr$i$i$i;
    }
   }
   $$pre$i = HEAP32[$ptr>>2]|0;
   $4 = $$pre$i;
  }
  HEAP32[$__end_$i$i$i>>2] = $0;
  __ZdlPv($4);
 }
 __ZdlPv($ptr);
 return;
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEEEPT_DpOT0_() {
 var $__end_$i$i = 0, $__value_$i$i$i$i = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__Znwm(12)|0);
 HEAP32[$call>>2] = 0;
 $__end_$i$i = ((($call)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($call)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 return ($call|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEE6invokeEPFSC_vE($fn) {
 $fn = $fn|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (FUNCTION_TABLE_i[$fn & 3]()|0);
 return ($call|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EvPSB_JSD_EE6invokeERKSF_SG_PNS0_11BindingTypeIS9_EUt_E($method,$wireThis,$args) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i4 = 0, $__size_$i12$i$i$i = 0, $add$i$i$i$i$i = 0, $and$i$i$i$i$i = 0, $arraydecay$i = 0, $arrayidx$i$i$i = 0;
 var $call$i$i$i$i$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $or$i$i$i$i = 0, $ref$tmp = 0, $tobool$i$i5 = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $$unpack = HEAP32[$method>>2]|0;
 $$elt1 = ((($method)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $memptr$adj$shifted = $$unpack2 >> 1;
 $0 = (($wireThis) + ($memptr$adj$shifted)|0);
 $1 = $$unpack2 & 1;
 $memptr$isvirtual = ($1|0)==(0);
 if ($memptr$isvirtual) {
  $memptr$nonvirtualfn = $$unpack;
  $4 = $memptr$nonvirtualfn;
 } else {
  $vtable = HEAP32[$0>>2]|0;
  $2 = (($vtable) + ($$unpack)|0);
  $memptr$virtualfn = HEAP32[$2>>2]|0;
  $4 = $memptr$virtualfn;
 }
 $arraydecay$i = ((($args)) + 4|0);
 $3 = HEAP32[$args>>2]|0;
 ;HEAP32[$ref$tmp>>2]=0|0;HEAP32[$ref$tmp+4>>2]=0|0;HEAP32[$ref$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($3>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($3>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $3&255;
  $__size_$i12$i$i$i = ((($ref$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($3|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $ref$tmp;
  } else {
   $__p$015$i$i$i = $ref$tmp;
   label = 9;
  }
 } else {
  $add$i$i$i$i$i = (($3) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$ref$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($ref$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($ref$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $3;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 9;
 }
 if ((label|0) == 9) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($3|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($3)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 FUNCTION_TABLE_vii[$4 & 15]($0,$ref$tmp);
 $__size_$i$i4 = ((($ref$tmp)) + 11|0);
 $5 = HEAP8[$__size_$i$i4>>0]|0;
 $tobool$i$i5 = ($5<<24>>24)<(0);
 if (!($tobool$i$i5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$ref$tmp>>2]|0;
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EvPSB_JmSD_EE6invokeERKSF_SG_mPNS0_11BindingTypeIS9_EUt_E($method,$wireThis,$args,$args1) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i4 = 0, $__size_$i12$i$i$i = 0, $add$i$i$i$i$i = 0, $and$i$i$i$i$i = 0, $arraydecay$i = 0, $arrayidx$i$i$i = 0;
 var $call$i$i$i$i$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $or$i$i$i$i = 0, $ref$tmp = 0, $tobool$i$i5 = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $$unpack = HEAP32[$method>>2]|0;
 $$elt1 = ((($method)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $memptr$adj$shifted = $$unpack2 >> 1;
 $0 = (($wireThis) + ($memptr$adj$shifted)|0);
 $1 = $$unpack2 & 1;
 $memptr$isvirtual = ($1|0)==(0);
 if ($memptr$isvirtual) {
  $memptr$nonvirtualfn = $$unpack;
  $4 = $memptr$nonvirtualfn;
 } else {
  $vtable = HEAP32[$0>>2]|0;
  $2 = (($vtable) + ($$unpack)|0);
  $memptr$virtualfn = HEAP32[$2>>2]|0;
  $4 = $memptr$virtualfn;
 }
 $arraydecay$i = ((($args1)) + 4|0);
 $3 = HEAP32[$args1>>2]|0;
 ;HEAP32[$ref$tmp>>2]=0|0;HEAP32[$ref$tmp+4>>2]=0|0;HEAP32[$ref$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($3>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($3>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $3&255;
  $__size_$i12$i$i$i = ((($ref$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($3|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $ref$tmp;
  } else {
   $__p$015$i$i$i = $ref$tmp;
   label = 9;
  }
 } else {
  $add$i$i$i$i$i = (($3) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$ref$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($ref$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($ref$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $3;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 9;
 }
 if ((label|0) == 9) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($3|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($3)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 FUNCTION_TABLE_viii[$4 & 7]($0,$args,$ref$tmp);
 $__size_$i$i4 = ((($ref$tmp)) + 11|0);
 $5 = HEAP8[$__size_$i$i4>>0]|0;
 $tobool$i$i5 = ($5<<24>>24)<(0);
 if (!($tobool$i$i5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$ref$tmp>>2]|0;
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEmPKSB_JEE6invokeERKSD_SF_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call1 = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$method>>2]|0;
 $$elt1 = ((($method)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $memptr$adj$shifted = $$unpack2 >> 1;
 $0 = (($wireThis) + ($memptr$adj$shifted)|0);
 $1 = $$unpack2 & 1;
 $memptr$isvirtual = ($1|0)==(0);
 if ($memptr$isvirtual) {
  $memptr$nonvirtualfn = $$unpack;
  $3 = $memptr$nonvirtualfn;
  $call1 = (FUNCTION_TABLE_ii[$3 & 15]($0)|0);
  return ($call1|0);
 } else {
  $vtable = HEAP32[$0>>2]|0;
  $2 = (($vtable) + ($$unpack)|0);
  $memptr$virtualfn = HEAP32[$2>>2]|0;
  $3 = $memptr$virtualfn;
  $call1 = (FUNCTION_TABLE_ii[$3 & 15]($0)|0);
  return ($call1|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmES2_SE_JmEE6invokeEPSG_PSC_m($function,$wireThis,$args) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $0 = HEAP32[$function>>2]|0;
 FUNCTION_TABLE_viii[$0 & 7]($ref$tmp,$wireThis,$args);
 $1 = HEAP32[$ref$tmp>>2]|0;
 __emval_incref(($1|0));
 $2 = HEAP32[$ref$tmp>>2]|0;
 __emval_decref(($2|0));
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EbSC_JmSE_EE6invokeEPSG_PSB_mPNS0_11BindingTypeIS9_EUt_E($function,$wireThis,$args,$args1) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i$i2 = 0, $__size_$i12$i$i$i = 0, $add$i$i$i$i$i = 0, $and$i$i$i$i$i = 0, $arraydecay$i = 0, $arrayidx$i$i$i = 0, $call$i$i$i$i$i$i = 0, $call4 = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0;
 var $or$i$i$i$i = 0, $ref$tmp = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $0 = HEAP32[$function>>2]|0;
 $arraydecay$i = ((($args1)) + 4|0);
 $1 = HEAP32[$args1>>2]|0;
 ;HEAP32[$ref$tmp>>2]=0|0;HEAP32[$ref$tmp+4>>2]=0|0;HEAP32[$ref$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($1>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($1>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $1&255;
  $__size_$i12$i$i$i = ((($ref$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($1|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $ref$tmp;
  } else {
   $__p$015$i$i$i = $ref$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($1) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$ref$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($ref$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($ref$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $1;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($1|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($1)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $call4 = (FUNCTION_TABLE_iiii[$0 & 15]($wireThis,$args,$ref$tmp)|0);
 $__size_$i$i2 = ((($ref$tmp)) + 11|0);
 $2 = HEAP8[$__size_$i$i2>>0]|0;
 $tobool$i$i3 = ($2<<24>>24)<(0);
 if (!($tobool$i$i3)) {
  STACKTOP = sp;return ($call4|0);
 }
 $3 = HEAP32[$ref$tmp>>2]|0;
 __ZdlPv($3);
 STACKTOP = sp;return ($call4|0);
}
function __ZN10emscripten8internal15raw_constructorI4KeysJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__Znwm(24)|0);
 ;HEAP32[$call>>2]=0|0;HEAP32[$call+4>>2]=0|0;HEAP32[$call+8>>2]=0|0;HEAP32[$call+12>>2]=0|0;HEAP32[$call+16>>2]=0|0;HEAP32[$call+20>>2]=0|0;
 return ($call|0);
}
function __ZN10emscripten8internal14raw_destructorI4KeysEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $SecretKey$i = 0, $__size_$i$i$i = 0, $__size_$i$i2$i = 0, $isnull = 0, $tobool$i$i$i = 0, $tobool$i$i3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isnull = ($ptr|0)==(0|0);
 if ($isnull) {
  return;
 }
 $SecretKey$i = ((($ptr)) + 12|0);
 $__size_$i$i$i = ((($SecretKey$i)) + 11|0);
 $0 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i$i) {
  $1 = HEAP32[$SecretKey$i>>2]|0;
  __ZdlPv($1);
 }
 $__size_$i$i2$i = ((($ptr)) + 11|0);
 $2 = HEAP8[$__size_$i$i2$i>>0]|0;
 $tobool$i$i3$i = ($2<<24>>24)<(0);
 if ($tobool$i$i3$i) {
  $3 = HEAP32[$ptr>>2]|0;
  __ZdlPv($3);
 }
 __ZdlPv($ptr);
 return;
}
function __ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7getWireIS2_EEPNS0_11BindingTypeIS9_EUt_ERKMS2_S9_RKT_($field,$ptr) {
 $field = $field|0;
 $ptr = $ptr|0;
 var $$in$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__size_$i3$i$i$i = 0, $add$i = 0, $add31$i = 0, $call1$i = 0, $call132$i = 0, $cond$i$i14$i = 0, $cond$i$i2141$i = 0, $conv$i$i$i$i = 0, $data3739$i = 0, $memptr$offset = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$field>>2]|0;
 $memptr$offset = (($ptr) + ($0)|0);
 $1 = ((($memptr$offset)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $tobool$i$i$i$i = ($2<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $__size_$i3$i$i$i = ((($memptr$offset)) + 4|0);
  $3 = HEAP32[$__size_$i3$i$i$i>>2]|0;
  $add31$i = (($3) + 4)|0;
  $call132$i = (_malloc($add31$i)|0);
  HEAP32[$call132$i>>2] = $3;
  $4 = HEAP32[$memptr$offset>>2]|0;
  $$in$i = $call132$i;$cond$i$i14$i = $3;$cond$i$i2141$i = $4;
  $data3739$i = ((($$in$i)) + 4|0);
  _memcpy(($data3739$i|0),($cond$i$i2141$i|0),($cond$i$i14$i|0))|0;
  return ($$in$i|0);
 } else {
  $conv$i$i$i$i = $2&255;
  $add$i = (($conv$i$i$i$i) + 4)|0;
  $call1$i = (_malloc($add$i)|0);
  HEAP32[$call1$i>>2] = $conv$i$i$i$i;
  $$in$i = $call1$i;$cond$i$i14$i = $conv$i$i$i$i;$cond$i$i2141$i = $memptr$offset;
  $data3739$i = ((($$in$i)) + 4|0);
  _memcpy(($data3739$i|0),($cond$i$i2141$i|0),($cond$i$i14$i|0))|0;
  return ($$in$i|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7setWireIS2_EEvRKMS2_S9_RT_PNS0_11BindingTypeIS9_EUt_E($field,$ptr,$value) {
 $field = $field|0;
 $ptr = $ptr|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i$i$i = 0, $__p$015$i$i$i = 0, $__p$016$i$i$i = 0, $__size_$i$i$i$i = 0, $__size_$i1$i$i$i = 0, $__size_$i12$i$i$i = 0, $add$i$i$i$i$i = 0, $and$i$i$i$i$i = 0, $arraydecay$i = 0, $arrayidx$i$i$i = 0, $call$i$i$i$i$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp2$i$i$i = 0, $conv$i$i$i$i = 0;
 var $memptr$offset = 0, $or$i$i$i$i = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $arraydecay$i = ((($value)) + 4|0);
 $0 = HEAP32[$value>>2]|0;
 ;HEAP32[$ref$tmp>>2]=0|0;HEAP32[$ref$tmp+4>>2]=0|0;HEAP32[$ref$tmp+8>>2]=0|0;
 $cmp$i$i$i = ($0>>>0)>(4294967279);
 if ($cmp$i$i$i) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
  // unreachable;
 }
 $cmp2$i$i$i = ($0>>>0)<(11);
 if ($cmp2$i$i$i) {
  $conv$i$i$i$i = $0&255;
  $__size_$i12$i$i$i = ((($ref$tmp)) + 11|0);
  HEAP8[$__size_$i12$i$i$i>>0] = $conv$i$i$i$i;
  $cmp$i$i$i$i = ($0|0)==(0);
  if ($cmp$i$i$i$i) {
   $__p$016$i$i$i = $ref$tmp;
  } else {
   $__p$015$i$i$i = $ref$tmp;
   label = 6;
  }
 } else {
  $add$i$i$i$i$i = (($0) + 16)|0;
  $and$i$i$i$i$i = $add$i$i$i$i$i & -16;
  $call$i$i$i$i$i$i = (__Znwm($and$i$i$i$i$i)|0);
  HEAP32[$ref$tmp>>2] = $call$i$i$i$i$i$i;
  $or$i$i$i$i = $and$i$i$i$i$i | -2147483648;
  $__cap_$i$i$i$i = ((($ref$tmp)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $__size_$i$i$i$i = ((($ref$tmp)) + 4|0);
  HEAP32[$__size_$i$i$i$i>>2] = $0;
  $__p$015$i$i$i = $call$i$i$i$i$i$i;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($__p$015$i$i$i|0),($arraydecay$i|0),($0|0))|0;
  $__p$016$i$i$i = $__p$015$i$i$i;
 }
 $arrayidx$i$i$i = (($__p$016$i$i$i) + ($0)|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 $1 = HEAP32[$field>>2]|0;
 $memptr$offset = (($ptr) + ($1)|0);
 $2 = ((($memptr$offset)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $tobool$i$i$i$i = ($3<<24>>24)<(0);
 if ($tobool$i$i$i$i) {
  $4 = HEAP32[$memptr$offset>>2]|0;
  HEAP8[$4>>0] = 0;
  $__size_$i1$i$i$i = ((($memptr$offset)) + 4|0);
  HEAP32[$__size_$i1$i$i$i>>2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($memptr$offset,0);
  ;HEAP32[$memptr$offset>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$memptr$offset+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$memptr$offset+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  HEAP8[$memptr$offset>>0] = 0;
  HEAP8[$2>>0] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($memptr$offset,0);
  ;HEAP32[$memptr$offset>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$memptr$offset+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$memptr$offset+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
  STACKTOP = sp;return;
 }
}
function __GLOBAL__sub_I_turtlecoin_crypto_js_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN39EmscriptenBindingInitializer_signaturesC2Ev(0);
 return;
}
function __ZN4Core12Cryptography12cn_fast_hashENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$input) {
 $agg$result = $agg$result|0;
 $input = $input|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $agg$tmp = 0, $cmp$i10 = 0, $data = 0, $hash = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hash = sp + 24|0;
 $data = sp + 12|0;
 $agg$tmp = sp;
 dest=$hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$input);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($data,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$data>>2]|0;
 $__end_$i = ((($data)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 _cn_fast_hash($2,$sub$ptr$sub$i,$hash);
 __ZN6Common5toHexEPKvy($agg$result,$hash,32,0);
 $4 = HEAP32[$data>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography9tree_hashENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE($agg$result,$hashes) {
 $agg$result = $agg$result|0;
 $hashes = $hashes|0;
 var $$cast = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre38 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$sroa$0$037 = 0, $__end_$i = 0, $__end_$i$i = 0, $__size_$i$i13 = 0, $__value_$i$i$i$i = 0, $cmp$i$i = 0;
 var $cmp$i$i36 = 0, $cmp$i21 = 0, $cmp$i6 = 0, $hash = 0, $incdec$ptr$i = 0, $incdec$ptr$i22 = 0, $outSize$i = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tempHash = 0, $tobool$i$i14 = 0, $treeHashes = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $outSize$i = sp;
 $treeHashes = sp + 44|0;
 $hash = sp + 32|0;
 $tempHash = sp + 56|0;
 HEAP32[$treeHashes>>2] = 0;
 $__end_$i$i = ((($treeHashes)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($treeHashes)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $0 = HEAP32[$hashes>>2]|0;
 $__end_$i = ((($hashes)) + 4|0);
 $1 = HEAP32[$__end_$i>>2]|0;
 $cmp$i$i36 = ($0|0)==($1|0);
 if ($cmp$i$i36) {
  $$pre$phiZ2D = $__end_$i$i;$2 = 0;$3 = 0;
 } else {
  $__size_$i$i13 = ((($hash)) + 11|0);
  $__begin$sroa$0$037 = $0;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($hash,$__begin$sroa$0$037);
   dest=$tempHash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($hash,$tempHash,32,0,$outSize$i)|0);
   $5 = HEAP32[$__end_$i$i>>2]|0;
   $6 = HEAP32[$__value_$i$i$i$i>>2]|0;
   $cmp$i21 = ($5|0)==($6|0);
   if ($cmp$i21) {
    __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($treeHashes,$tempHash);
   } else {
    dest=$5; src=$tempHash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $incdec$ptr$i22 = ((($5)) + 32|0);
    HEAP32[$__end_$i$i>>2] = $incdec$ptr$i22;
   }
   $7 = HEAP8[$__size_$i$i13>>0]|0;
   $tobool$i$i14 = ($7<<24>>24)<(0);
   if ($tobool$i$i14) {
    $8 = HEAP32[$hash>>2]|0;
    __ZdlPv($8);
   }
   $incdec$ptr$i = ((($__begin$sroa$0$037)) + 12|0);
   $cmp$i$i = ($incdec$ptr$i|0)==($1|0);
   if ($cmp$i$i) {
    break;
   } else {
    $__begin$sroa$0$037 = $incdec$ptr$i;
   }
  }
  $$pre = HEAP32[$treeHashes>>2]|0;
  $$pre38 = HEAP32[$__end_$i$i>>2]|0;
  $$pre$phiZ2D = $__end_$i$i;$2 = $$pre;$3 = $$pre38;
 }
 dest=$outSize$i; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 _tree_hash($2,$sub$ptr$div$i,$outSize$i);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i,32,0);
 $4 = HEAP32[$treeHashes>>2]|0;
 $cmp$i6 = ($4|0)==(0|0);
 if ($cmp$i6) {
  STACKTOP = sp;return;
 }
 $9 = $4;
 HEAP32[$$pre$phiZ2D>>2] = $9;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__end_$i = 0, $__value_$i$i$i$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $call$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i22 = 0, $cmp3$i = 0;
 var $cond$i = 0, $exception$i$i$i$i = 0, $incdec$ptr = 0, $mul$i = 0, $mul$i$i$i = 0, $spec$select$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $tobool$i13 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $add = (($sub$ptr$div$i) + 1)|0;
 $cmp$i = ($add>>>0)>(134217727);
 $2 = $1;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__value_$i$i$i$i$i$i = ((($this)) + 8|0);
 $3 = HEAP32[$__value_$i$i$i$i$i$i>>2]|0;
 $sub$ptr$sub$i$i$i = (($3) - ($1))|0;
 $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 5;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(67108863);
 $mul$i = $sub$ptr$sub$i$i$i >> 4;
 $cmp$i$i$i$i = ($mul$i>>>0)<($add>>>0);
 $$sroa$speculated$i = $cmp$i$i$i$i ? $add : $mul$i;
 $spec$select$i = $cmp3$i ? $$sroa$speculated$i : 134217727;
 $cmp$i22 = ($spec$select$i|0)==(0);
 do {
  if ($cmp$i22) {
   $cond$i = 0;
  } else {
   $cmp$i$i$i = ($spec$select$i>>>0)>(134217727);
   if ($cmp$i$i$i) {
    $exception$i$i$i$i = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($exception$i$i$i$i,35737);
    HEAP32[$exception$i$i$i$i>>2] = (34592);
    ___cxa_throw(($exception$i$i$i$i|0),(33928|0),(6|0));
    // unreachable;
   } else {
    $mul$i$i$i = $spec$select$i << 5;
    $call$i$i$i$i = (__Znwm($mul$i$i$i)|0);
    $cond$i = $call$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$ptr$i = (($cond$i) + ($sub$ptr$div$i<<5)|0);
 $add$ptr5$i = (($cond$i) + ($spec$select$i<<5)|0);
 $4 = $add$ptr5$i;
 dest=$add$ptr$i; src=$__x; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $incdec$ptr = ((($add$ptr$i)) + 32|0);
 $5 = $incdec$ptr;
 $6 = $cond$i;
 $cmp$i$i = ($sub$ptr$sub$i|0)>(0);
 if ($cmp$i$i) {
  _memcpy(($cond$i|0),($2|0),($sub$ptr$sub$i|0))|0;
 }
 HEAP32[$this>>2] = $6;
 HEAP32[$__end_$i>>2] = $5;
 HEAP32[$__value_$i$i$i$i$i$i>>2] = $4;
 $tobool$i13 = ($1|0)==(0);
 if ($tobool$i13) {
  return;
 }
 __ZdlPv($2);
 return;
}
function __ZN4Core12Cryptography11tree_branchENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE($agg$result,$hashes) {
 $agg$result = $agg$result|0;
 $hashes = $hashes|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$sroa$0$065 = 0, $__end_$i = 0, $__end_$i$i = 0, $__size_$i$i = 0, $__value_$i$i$i$i = 0, $_hashes = 0, $call$i$i$i$i7$i = 0, $cmp$i$i = 0, $cmp$i$i64 = 0;
 var $cmp$i11 = 0, $cmp$i29 = 0, $hash = 0, $incdec$ptr$i = 0, $incdec$ptr$i33 = 0, $outSize$i = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tempHash = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $outSize$i = sp;
 $_hashes = sp + 20|0;
 $hash = sp + 8|0;
 $tempHash = sp + 32|0;
 HEAP32[$_hashes>>2] = 0;
 $__end_$i$i = ((($_hashes)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($_hashes)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $0 = HEAP32[$hashes>>2]|0;
 $__end_$i = ((($hashes)) + 4|0);
 $1 = HEAP32[$__end_$i>>2]|0;
 $cmp$i$i64 = ($0|0)==($1|0);
 if (!($cmp$i$i64)) {
  $__size_$i$i = ((($hash)) + 11|0);
  $__begin$sroa$0$065 = $0;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($hash,$__begin$sroa$0$065);
   dest=$tempHash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($hash,$tempHash,32,0,$outSize$i)|0);
   $5 = HEAP32[$__end_$i$i>>2]|0;
   $6 = HEAP32[$__value_$i$i$i$i>>2]|0;
   $cmp$i29 = ($5|0)==($6|0);
   if ($cmp$i29) {
    __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($_hashes,$tempHash);
   } else {
    dest=$5; src=$tempHash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $incdec$ptr$i = ((($5)) + 32|0);
    HEAP32[$__end_$i$i>>2] = $incdec$ptr$i;
   }
   $7 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($7<<24>>24)<(0);
   if ($tobool$i$i) {
    $8 = HEAP32[$hash>>2]|0;
    __ZdlPv($8);
   }
   $incdec$ptr$i33 = ((($__begin$sroa$0$065)) + 12|0);
   $cmp$i$i = ($incdec$ptr$i33|0)==($1|0);
   if ($cmp$i$i) {
    break;
   } else {
    $__begin$sroa$0$065 = $incdec$ptr$i33;
   }
  }
 }
 $call$i$i$i$i7$i = (__Znwm(32)|0);
 dest=$call$i$i$i$i7$i; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = HEAP32[$_hashes>>2]|0;
 $3 = HEAP32[$__end_$i$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 _tree_branch($2,$sub$ptr$div$i,$call$i$i$i$i7$i);
 __ZN6Common5toHexEPKvy($agg$result,$call$i$i$i$i7$i,32,0);
 __ZdlPv($call$i$i$i$i7$i);
 $4 = HEAP32[$_hashes>>2]|0;
 $cmp$i11 = ($4|0)==(0|0);
 if ($cmp$i11) {
  STACKTOP = sp;return;
 }
 $9 = $4;
 HEAP32[$__end_$i$i>>2] = $9;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography21tree_hash_from_branchENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEES8_S8_($agg$result,$branches,$leaf,$path) {
 $agg$result = $agg$result|0;
 $branches = $branches|0;
 $leaf = $leaf|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$sroa$0$044 = 0, $__end_$i = 0, $__end_$i$i = 0, $__size_$i$i = 0, $__value_$i$i$i$i = 0, $_branch = 0, $_branches = 0, $branch = 0, $cmp$i$i = 0;
 var $cmp$i$i43 = 0, $cmp$i24 = 0, $cmp$i6 = 0, $incdec$ptr$i = 0, $incdec$ptr$i28 = 0, $outSize$i18 = 0, $sub$ptr$div$i = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $outSize$i18 = sp;
 $_branches = sp + 64|0;
 $branch = sp + 32|0;
 $_branch = sp + 80|0;
 HEAP32[$_branches>>2] = 0;
 $__end_$i$i = ((($_branches)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($_branches)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $0 = HEAP32[$branches>>2]|0;
 $__end_$i = ((($branches)) + 4|0);
 $1 = HEAP32[$__end_$i>>2]|0;
 $cmp$i$i43 = ($0|0)==($1|0);
 if (!($cmp$i$i43)) {
  $__size_$i$i = ((($branch)) + 11|0);
  $__begin$sroa$0$044 = $0;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($branch,$__begin$sroa$0$044);
   dest=$_branch; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($branch,$_branch,32,0,$outSize$i18)|0);
   $6 = HEAP32[$__end_$i$i>>2]|0;
   $7 = HEAP32[$__value_$i$i$i$i>>2]|0;
   $cmp$i24 = ($6|0)==($7|0);
   if ($cmp$i24) {
    __ZNSt3__26vectorIN6Crypto4HashENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($_branches,$_branch);
   } else {
    dest=$6; src=$_branch; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $incdec$ptr$i = ((($6)) + 32|0);
    HEAP32[$__end_$i$i>>2] = $incdec$ptr$i;
   }
   $8 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($8<<24>>24)<(0);
   if ($tobool$i$i) {
    $9 = HEAP32[$branch>>2]|0;
    __ZdlPv($9);
   }
   $incdec$ptr$i28 = ((($__begin$sroa$0$044)) + 12|0);
   $cmp$i$i = ($incdec$ptr$i28|0)==($1|0);
   if ($cmp$i$i) {
    break;
   } else {
    $__begin$sroa$0$044 = $incdec$ptr$i28;
   }
  }
 }
 dest=$branch; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($leaf,$branch,32,0,$outSize$i18)|0);
 dest=$_branch; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($path,$_branch,32,0,$outSize$i18)|0);
 dest=$outSize$i18; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = HEAP32[$_branches>>2]|0;
 $3 = HEAP32[$__end_$i>>2]|0;
 $4 = HEAP32[$branches>>2]|0;
 $sub$ptr$sub$i = (($3) - ($4))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 _tree_hash_from_branch($2,$sub$ptr$div$i,$branch,$_branch,$outSize$i18);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i18,32,0);
 $5 = HEAP32[$_branches>>2]|0;
 $cmp$i6 = ($5|0)==(0|0);
 if ($cmp$i6) {
  STACKTOP = sp;return;
 }
 $10 = $5;
 HEAP32[$__end_$i$i>>2] = $10;
 __ZdlPv($5);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography22generateRingSignaturesENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEES7_y($agg$result,$prefixHash,$keyImage,$publicKeys,$transactionSecretKey,$0,$1) {
 $agg$result = $agg$result|0;
 $prefixHash = $prefixHash|0;
 $keyImage = $keyImage|0;
 $publicKeys = $publicKeys|0;
 $transactionSecretKey = $transactionSecretKey|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$i53 = 0, $$pre142 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$sroa$0$0141 = 0, $__begin31$sroa$0$0139 = 0, $__end_$i = 0, $__end_$i$i = 0, $__end_$i$i$i$i$i$i29 = 0, $__end_$i$i88 = 0, $__end_$i105 = 0;
 var $__end_$i13$i = 0, $__size_$i$i = 0, $__size_$i$i$i$i$i$i$i$i45 = 0, $__size_$i$i100 = 0, $__soon_to_be_end$06$i$i$i42 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i75 = 0, $__value_$i$i$i$i89 = 0, $_keyImage = 0, $_prefixHash = 0, $_publicKeys = 0, $_transactionSecretKey = 0, $_transactionSecretKey$byval_copy = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp20 = 0, $agg$tmp20$byval_copy = 0;
 var $agg$tmp21 = 0, $call$i$i$i$i11$i = 0, $cmp$i$i = 0, $cmp$i$i$i$i28 = 0, $cmp$i$i$i50 = 0, $cmp$i$i$i79 = 0, $cmp$i$i115 = 0, $cmp$i$i115138 = 0, $cmp$i$i140 = 0, $cmp$i108 = 0, $cmp$i23 = 0, $cmp$i37 = 0, $cmp$i63 = 0, $cmp$i76 = 0, $cmp$i8$i = 0, $cmp$i82 = 0, $cmp5$i$i$i39 = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i$i43 = 0, $incdec$ptr$i109 = 0;
 var $incdec$ptr$i67 = 0, $incdec$ptr$i98 = 0, $sub$ptr$div$i$i = 0, $sub$ptr$div6$i$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i$i$i$i46 = 0, $tobool$i$i101 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $_transactionSecretKey$byval_copy = sp;
 $agg$tmp20$byval_copy = sp + 104|0;
 $agg$tmp$byval_copy = sp + 72|0;
 $_prefixHash = sp + 296|0;
 $_keyImage = sp + 264|0;
 $_publicKeys = sp + 60|0;
 $_transactionSecretKey = sp + 168|0;
 $2 = sp + 32|0;
 $agg$tmp = sp + 232|0;
 $agg$tmp20 = sp + 200|0;
 $agg$tmp21 = sp + 48|0;
 dest=$_prefixHash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($prefixHash,$_prefixHash,32,0,$_transactionSecretKey$byval_copy)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($keyImage,$_keyImage,32,0,$_transactionSecretKey$byval_copy)|0);
 HEAP32[$_publicKeys>>2] = 0;
 $__end_$i$i = ((($_publicKeys)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($_publicKeys)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $3 = HEAP32[$publicKeys>>2]|0;
 $__end_$i = ((($publicKeys)) + 4|0);
 $4 = HEAP32[$__end_$i>>2]|0;
 $cmp$i$i140 = ($3|0)==($4|0);
 if (!($cmp$i$i140)) {
  $__size_$i$i = ((($agg$tmp20$byval_copy)) + 11|0);
  $__begin$sroa$0$0141 = $3;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp20$byval_copy,$__begin$sroa$0$0141);
   (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($agg$tmp20$byval_copy,$agg$tmp$byval_copy,32,0,$_transactionSecretKey$byval_copy)|0);
   $8 = HEAP32[$__end_$i$i>>2]|0;
   $9 = HEAP32[$__value_$i$i$i$i>>2]|0;
   $cmp$i63 = ($8|0)==($9|0);
   if ($cmp$i63) {
    __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($_publicKeys,$agg$tmp$byval_copy);
   } else {
    dest=$8; src=$agg$tmp$byval_copy; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $incdec$ptr$i = ((($8)) + 32|0);
    HEAP32[$__end_$i$i>>2] = $incdec$ptr$i;
   }
   $10 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($10<<24>>24)<(0);
   if ($tobool$i$i) {
    $11 = HEAP32[$agg$tmp20$byval_copy>>2]|0;
    __ZdlPv($11);
   }
   $incdec$ptr$i67 = ((($__begin$sroa$0$0141)) + 12|0);
   $cmp$i$i = ($incdec$ptr$i67|0)==($4|0);
   if ($cmp$i$i) {
    break;
   } else {
    $__begin$sroa$0$0141 = $incdec$ptr$i67;
   }
  }
 }
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($transactionSecretKey,$_transactionSecretKey,32,0,$_transactionSecretKey$byval_copy)|0);
 dest=$agg$tmp; src=$_prefixHash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 dest=$agg$tmp20; src=$_keyImage; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$agg$tmp21>>2] = 0;
 $__end_$i13$i = ((($agg$tmp21)) + 4|0);
 HEAP32[$__end_$i13$i>>2] = 0;
 $__value_$i$i$i$i75 = ((($agg$tmp21)) + 8|0);
 HEAP32[$__value_$i$i$i$i75>>2] = 0;
 $5 = HEAP32[$__end_$i$i>>2]|0;
 $6 = HEAP32[$_publicKeys>>2]|0;
 $sub$ptr$sub$i$i = (($5) - ($6))|0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 5;
 $cmp$i76 = ($sub$ptr$sub$i$i|0)==(0);
 $7 = $6;
 if (!($cmp$i76)) {
  $cmp$i8$i = ($sub$ptr$div$i$i>>>0)>(134217727);
  if ($cmp$i8$i) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($agg$tmp21);
   // unreachable;
  }
  $call$i$i$i$i11$i = (__Znwm($sub$ptr$sub$i$i)|0);
  HEAP32[$__end_$i13$i>>2] = $call$i$i$i$i11$i;
  HEAP32[$agg$tmp21>>2] = $call$i$i$i$i11$i;
  $add$ptr$i$i = (($call$i$i$i$i11$i) + ($sub$ptr$div$i$i<<5)|0);
  HEAP32[$__value_$i$i$i$i75>>2] = $add$ptr$i$i;
  $cmp$i$i$i79 = ($sub$ptr$sub$i$i|0)>(0);
  if ($cmp$i$i$i79) {
   $sub$ptr$div6$i$i$i = $sub$ptr$sub$i$i >>> 5;
   $add$ptr$i$i$i = (($call$i$i$i$i11$i) + ($sub$ptr$div6$i$i$i<<5)|0);
   _memcpy(($call$i$i$i$i11$i|0),($7|0),($sub$ptr$sub$i$i|0))|0;
   HEAP32[$__end_$i13$i>>2] = $add$ptr$i$i$i;
  }
 }
 dest=$agg$tmp$byval_copy; src=$agg$tmp; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 dest=$agg$tmp20$byval_copy; src=$agg$tmp20; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 dest=$_transactionSecretKey$byval_copy; src=$_transactionSecretKey; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 __ZN6Crypto10crypto_ops22generateRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEENS_9SecretKeyEy($2,$agg$tmp$byval_copy,$agg$tmp20$byval_copy,$agg$tmp21,$_transactionSecretKey$byval_copy,$0,$1);
 $12 = HEAP32[$agg$tmp21>>2]|0;
 $cmp$i82 = ($12|0)==(0|0);
 if (!($cmp$i82)) {
  $13 = $12;
  HEAP32[$__end_$i13$i>>2] = $13;
  __ZdlPv($12);
 }
 $add$ptr$i = ((($2)) + 4|0);
 HEAP32[$_transactionSecretKey$byval_copy>>2] = 0;
 $__end_$i$i88 = ((($_transactionSecretKey$byval_copy)) + 4|0);
 HEAP32[$__end_$i$i88>>2] = 0;
 $__value_$i$i$i$i89 = ((($_transactionSecretKey$byval_copy)) + 8|0);
 HEAP32[$__value_$i$i$i$i89>>2] = 0;
 $14 = HEAP8[$2>>0]|0;
 $tobool = ($14<<24>>24)==(0);
 if ($tobool) {
  $21 = 0;
 } else {
  $15 = HEAP32[$add$ptr$i>>2]|0;
  $__end_$i105 = ((($2)) + 8|0);
  $16 = HEAP32[$__end_$i105>>2]|0;
  $cmp$i$i115138 = ($15|0)==($16|0);
  if ($cmp$i$i115138) {
   $21 = 1;
  } else {
   $__size_$i$i100 = ((($agg$tmp$byval_copy)) + 11|0);
   $__begin31$sroa$0$0139 = $15;
   while(1) {
    dest=$agg$tmp20$byval_copy; src=$__begin31$sroa$0$0139; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    __ZN6Common5toHexEPKvy($agg$tmp$byval_copy,$agg$tmp20$byval_copy,64,0);
    $17 = HEAP32[$__end_$i$i88>>2]|0;
    $18 = HEAP32[$__value_$i$i$i$i89>>2]|0;
    $cmp$i108 = ($17>>>0)<($18>>>0);
    if ($cmp$i108) {
     ;HEAP32[$17>>2]=HEAP32[$agg$tmp$byval_copy>>2]|0;HEAP32[$17+4>>2]=HEAP32[$agg$tmp$byval_copy+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$agg$tmp$byval_copy+8>>2]|0;
     ;HEAP32[$agg$tmp$byval_copy>>2]=0|0;HEAP32[$agg$tmp$byval_copy+4>>2]=0|0;HEAP32[$agg$tmp$byval_copy+8>>2]=0|0;
     $19 = HEAP32[$__end_$i$i88>>2]|0;
     $incdec$ptr$i109 = ((($19)) + 12|0);
     HEAP32[$__end_$i$i88>>2] = $incdec$ptr$i109;
    } else {
     __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($_transactionSecretKey$byval_copy,$agg$tmp$byval_copy);
     $$pre = HEAP8[$__size_$i$i100>>0]|0;
     $tobool$i$i101 = ($$pre<<24>>24)<(0);
     if ($tobool$i$i101) {
      $20 = HEAP32[$agg$tmp$byval_copy>>2]|0;
      __ZdlPv($20);
     }
    }
    $incdec$ptr$i98 = ((($__begin31$sroa$0$0139)) + 64|0);
    $cmp$i$i115 = ($incdec$ptr$i98|0)==($16|0);
    if ($cmp$i$i115) {
     break;
    } else {
     $__begin31$sroa$0$0139 = $incdec$ptr$i98;
    }
   }
   $$pre142 = HEAP8[$2>>0]|0;
   $21 = $$pre142;
  }
 }
 HEAP8[$agg$result>>0] = $21;
 $22 = ((($agg$result)) + 4|0);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($22,$_transactionSecretKey$byval_copy);
 $23 = HEAP32[$_transactionSecretKey$byval_copy>>2]|0;
 $cmp$i37 = ($23|0)==(0|0);
 if (!($cmp$i37)) {
  $24 = HEAP32[$__end_$i$i88>>2]|0;
  $cmp5$i$i$i39 = ($24|0)==($23|0);
  if ($cmp5$i$i$i39) {
   $27 = $23;
  } else {
   $__soon_to_be_end$06$i$i$i42 = $24;
   while(1) {
    $incdec$ptr$i$i$i43 = ((($__soon_to_be_end$06$i$i$i42)) + -12|0);
    $__size_$i$i$i$i$i$i$i$i45 = ((($incdec$ptr$i$i$i43)) + 11|0);
    $25 = HEAP8[$__size_$i$i$i$i$i$i$i$i45>>0]|0;
    $tobool$i$i$i$i$i$i$i$i46 = ($25<<24>>24)<(0);
    if ($tobool$i$i$i$i$i$i$i$i46) {
     $26 = HEAP32[$incdec$ptr$i$i$i43>>2]|0;
     __ZdlPv($26);
    }
    $cmp$i$i$i50 = ($incdec$ptr$i$i$i43|0)==($23|0);
    if ($cmp$i$i$i50) {
     break;
    } else {
     $__soon_to_be_end$06$i$i$i42 = $incdec$ptr$i$i$i43;
    }
   }
   $$pre$i53 = HEAP32[$_transactionSecretKey$byval_copy>>2]|0;
   $27 = $$pre$i53;
  }
  HEAP32[$__end_$i$i88>>2] = $23;
  __ZdlPv($27);
 }
 $28 = HEAP32[$add$ptr$i>>2]|0;
 $cmp$i$i$i$i28 = ($28|0)==(0|0);
 if (!($cmp$i$i$i$i28)) {
  $29 = $28;
  $__end_$i$i$i$i$i$i29 = ((($2)) + 8|0);
  HEAP32[$__end_$i$i$i$i$i$i29>>2] = $29;
  __ZdlPv($28);
 }
 $30 = HEAP32[$_publicKeys>>2]|0;
 $cmp$i23 = ($30|0)==(0|0);
 if ($cmp$i23) {
  STACKTOP = sp;return;
 }
 $31 = $30;
 HEAP32[$__end_$i$i>>2] = $31;
 __ZdlPv($30);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__end_$i = 0, $__value_$i$i$i$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $call$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i22 = 0, $cmp3$i = 0;
 var $cond$i = 0, $exception$i$i$i$i = 0, $incdec$ptr = 0, $mul$i = 0, $mul$i$i$i = 0, $spec$select$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $tobool$i13 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 $add = (($sub$ptr$div$i) + 1)|0;
 $cmp$i = ($add>>>0)>(134217727);
 $2 = $1;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__value_$i$i$i$i$i$i = ((($this)) + 8|0);
 $3 = HEAP32[$__value_$i$i$i$i$i$i>>2]|0;
 $sub$ptr$sub$i$i$i = (($3) - ($1))|0;
 $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 5;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(67108863);
 $mul$i = $sub$ptr$sub$i$i$i >> 4;
 $cmp$i$i$i$i = ($mul$i>>>0)<($add>>>0);
 $$sroa$speculated$i = $cmp$i$i$i$i ? $add : $mul$i;
 $spec$select$i = $cmp3$i ? $$sroa$speculated$i : 134217727;
 $cmp$i22 = ($spec$select$i|0)==(0);
 do {
  if ($cmp$i22) {
   $cond$i = 0;
  } else {
   $cmp$i$i$i = ($spec$select$i>>>0)>(134217727);
   if ($cmp$i$i$i) {
    $exception$i$i$i$i = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($exception$i$i$i$i,35737);
    HEAP32[$exception$i$i$i$i>>2] = (34592);
    ___cxa_throw(($exception$i$i$i$i|0),(33928|0),(6|0));
    // unreachable;
   } else {
    $mul$i$i$i = $spec$select$i << 5;
    $call$i$i$i$i = (__Znwm($mul$i$i$i)|0);
    $cond$i = $call$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$ptr$i = (($cond$i) + ($sub$ptr$div$i<<5)|0);
 $add$ptr5$i = (($cond$i) + ($spec$select$i<<5)|0);
 $4 = $add$ptr5$i;
 dest=$add$ptr$i; src=$__x; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $incdec$ptr = ((($add$ptr$i)) + 32|0);
 $5 = $incdec$ptr;
 $6 = $cond$i;
 $cmp$i$i = ($sub$ptr$sub$i|0)>(0);
 if ($cmp$i$i) {
  _memcpy(($cond$i|0),($2|0),($sub$ptr$sub$i|0))|0;
 }
 HEAP32[$this>>2] = $6;
 HEAP32[$__end_$i>>2] = $5;
 HEAP32[$__value_$i$i$i$i$i$i>>2] = $4;
 $tobool$i13 = ($1|0)==(0);
 if ($tobool$i13) {
  return;
 }
 __ZdlPv($2);
 return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$in = 0, $$pre = 0, $$pre$i = 0, $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__end1$addr$04$i$i = 0, $__end_$i = 0, $__size_$i$i$i$i$i$i$i$i$i15 = 0, $__value_$i$i$i$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr5$i = 0, $call$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i21 = 0, $cmp$i$i$i$i5 = 0, $cmp$i28 = 0, $cmp1$i$i$i$i11 = 0, $cmp3$i = 0, $cmp3$i$i = 0, $cond$i = 0;
 var $exception$i$i$i$i = 0, $incdec$ptr = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i$i$i13 = 0, $mul$i = 0, $mul$i$i$i = 0, $spec$select$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $tobool$i$i$i$i$i$i$i$i$i16 = 0, $tobool$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 12)&-1;
 $add = (($sub$ptr$div$i) + 1)|0;
 $cmp$i = ($add>>>0)>(357913941);
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__value_$i$i$i$i$i$i = ((($this)) + 8|0);
 $2 = HEAP32[$__value_$i$i$i$i$i$i>>2]|0;
 $sub$ptr$sub$i$i$i = (($2) - ($1))|0;
 $sub$ptr$div$i$i$i = (($sub$ptr$sub$i$i$i|0) / 12)&-1;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(178956970);
 $mul$i = $sub$ptr$div$i$i$i << 1;
 $cmp$i$i$i$i5 = ($mul$i>>>0)<($add>>>0);
 $$sroa$speculated$i = $cmp$i$i$i$i5 ? $add : $mul$i;
 $spec$select$i = $cmp3$i ? $$sroa$speculated$i : 357913941;
 $cmp$i28 = ($spec$select$i|0)==(0);
 do {
  if ($cmp$i28) {
   $cond$i = 0;
  } else {
   $cmp$i$i$i = ($spec$select$i>>>0)>(357913941);
   if ($cmp$i$i$i) {
    $exception$i$i$i$i = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($exception$i$i$i$i,35737);
    HEAP32[$exception$i$i$i$i>>2] = (34592);
    ___cxa_throw(($exception$i$i$i$i|0),(33928|0),(6|0));
    // unreachable;
   } else {
    $mul$i$i$i = ($spec$select$i*12)|0;
    $call$i$i$i$i = (__Znwm($mul$i$i$i)|0);
    $cond$i = $call$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$ptr$i = (($cond$i) + (($sub$ptr$div$i*12)|0)|0);
 $add$ptr5$i = (($cond$i) + (($spec$select$i*12)|0)|0);
 $3 = $add$ptr5$i;
 ;HEAP32[$add$ptr$i>>2]=HEAP32[$__x>>2]|0;HEAP32[$add$ptr$i+4>>2]=HEAP32[$__x+4>>2]|0;HEAP32[$add$ptr$i+8>>2]=HEAP32[$__x+8>>2]|0;
 ;HEAP32[$__x>>2]=0|0;HEAP32[$__x+4>>2]=0|0;HEAP32[$__x+8>>2]=0|0;
 $incdec$ptr = ((($add$ptr$i)) + 12|0);
 $4 = $incdec$ptr;
 $5 = HEAP32[$this>>2]|0;
 $6 = HEAP32[$__end_$i>>2]|0;
 $cmp3$i$i = ($6|0)==($5|0);
 if ($cmp3$i$i) {
  $7 = $5;
  $$in = $add$ptr$i;$10 = $7;$12 = $5;
 } else {
  $8 = $add$ptr$i;$__end1$addr$04$i$i = $6;
  while(1) {
   $add$ptr$i$i = ((($8)) + -12|0);
   $incdec$ptr$i$i = ((($__end1$addr$04$i$i)) + -12|0);
   ;HEAP32[$add$ptr$i$i>>2]=HEAP32[$incdec$ptr$i$i>>2]|0;HEAP32[$add$ptr$i$i+4>>2]=HEAP32[$incdec$ptr$i$i+4>>2]|0;HEAP32[$add$ptr$i$i+8>>2]=HEAP32[$incdec$ptr$i$i+8>>2]|0;
   ;HEAP32[$incdec$ptr$i$i>>2]=0|0;HEAP32[$incdec$ptr$i$i+4>>2]=0|0;HEAP32[$incdec$ptr$i$i+8>>2]=0|0;
   $cmp$i$i = ($incdec$ptr$i$i|0)==($5|0);
   if ($cmp$i$i) {
    break;
   } else {
    $8 = $add$ptr$i$i;$__end1$addr$04$i$i = $incdec$ptr$i$i;
   }
  }
  $$pre$i = HEAP32[$this>>2]|0;
  $$pre = HEAP32[$__end_$i>>2]|0;
  $$in = $add$ptr$i$i;$10 = $$pre$i;$12 = $$pre;
 }
 $9 = $$in;
 HEAP32[$this>>2] = $9;
 HEAP32[$__end_$i>>2] = $4;
 HEAP32[$__value_$i$i$i$i$i$i>>2] = $3;
 $11 = $10;
 $cmp1$i$i$i$i11 = ($12|0)==($11|0);
 if (!($cmp1$i$i$i$i11)) {
  $13 = $12;
  while(1) {
   $incdec$ptr$i$i$i$i13 = ((($13)) + -12|0);
   $__size_$i$i$i$i$i$i$i$i$i15 = ((($incdec$ptr$i$i$i$i13)) + 11|0);
   $14 = HEAP8[$__size_$i$i$i$i$i$i$i$i$i15>>0]|0;
   $tobool$i$i$i$i$i$i$i$i$i16 = ($14<<24>>24)<(0);
   if ($tobool$i$i$i$i$i$i$i$i$i16) {
    $15 = HEAP32[$incdec$ptr$i$i$i$i13>>2]|0;
    __ZdlPv($15);
   }
   $cmp$i$i$i$i21 = ($incdec$ptr$i$i$i$i13|0)==($11|0);
   if ($cmp$i$i$i$i21) {
    break;
   } else {
    $13 = $incdec$ptr$i$i$i$i13;
   }
  }
 }
 $tobool$i24 = ($10|0)==(0);
 if ($tobool$i24) {
  return;
 }
 $16 = $10;
 __ZdlPv($16);
 return;
}
function __ZN4Core12Cryptography18checkRingSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEESA_($prefixHash,$keyImage,$publicKeys,$signatures) {
 $prefixHash = $prefixHash|0;
 $keyImage = $keyImage|0;
 $publicKeys = $publicKeys|0;
 $signatures = $signatures|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin$sroa$0$0147 = 0, $__begin17$sroa$0$0145 = 0, $__end_$i = 0, $__end_$i$i = 0, $__end_$i$i32 = 0, $__end_$i13$i = 0, $__end_$i13$i83 = 0, $__end_$i45 = 0, $__size_$i$i = 0, $__size_$i$i120 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i33 = 0, $__value_$i$i$i$i51 = 0, $__value_$i$i$i$i84 = 0;
 var $_keyImage = 0, $_prefixHash = 0, $_publicKey = 0, $_publicKeys = 0, $_signature = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i$i$i101 = 0, $add$ptr$i$i94 = 0, $agg$tmp = 0, $agg$tmp46 = 0, $call$i$i$i$i11$i = 0, $call$i$i$i$i11$i93 = 0, $call51 = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i98 = 0, $cmp$i$i146 = 0, $cmp$i$i75 = 0, $cmp$i$i75144 = 0;
 var $cmp$i114 = 0, $cmp$i27 = 0, $cmp$i35 = 0, $cmp$i41 = 0, $cmp$i47 = 0, $cmp$i52 = 0, $cmp$i62 = 0, $cmp$i8$i = 0, $cmp$i8$i89 = 0, $cmp$i88 = 0, $incdec$ptr$i = 0, $incdec$ptr$i115 = 0, $incdec$ptr$i126 = 0, $incdec$ptr$i66 = 0, $outSize$i108 = 0, $publicKey = 0, $sub$ptr$div$i$i = 0, $sub$ptr$div$i$i87 = 0, $sub$ptr$div6$i$i$i = 0, $sub$ptr$div6$i$i$i100 = 0;
 var $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i$i86 = 0, $tobool$i$i = 0, $tobool$i$i121 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $outSize$i108 = sp;
 $_prefixHash = sp + 184|0;
 $_keyImage = sp + 152|0;
 $_publicKeys = sp + 76|0;
 $publicKey = sp + 64|0;
 $_publicKey = sp + 8|0;
 $_signature = sp + 88|0;
 $agg$tmp = sp + 52|0;
 $agg$tmp46 = sp + 40|0;
 dest=$_prefixHash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($prefixHash,$_prefixHash,32,0,$outSize$i108)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($keyImage,$_keyImage,32,0,$outSize$i108)|0);
 HEAP32[$_publicKeys>>2] = 0;
 $__end_$i$i = ((($_publicKeys)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($_publicKeys)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $0 = HEAP32[$publicKeys>>2]|0;
 $__end_$i = ((($publicKeys)) + 4|0);
 $1 = HEAP32[$__end_$i>>2]|0;
 $cmp$i$i146 = ($0|0)==($1|0);
 if (!($cmp$i$i146)) {
  $__size_$i$i = ((($publicKey)) + 11|0);
  $__begin$sroa$0$0147 = $0;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($publicKey,$__begin$sroa$0$0147);
   (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i108)|0);
   $4 = HEAP32[$__end_$i$i>>2]|0;
   $5 = HEAP32[$__value_$i$i$i$i>>2]|0;
   $cmp$i62 = ($4|0)==($5|0);
   if ($cmp$i62) {
    __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($_publicKeys,$_publicKey);
   } else {
    dest=$4; src=$_publicKey; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $incdec$ptr$i = ((($4)) + 32|0);
    HEAP32[$__end_$i$i>>2] = $incdec$ptr$i;
   }
   $6 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i = ($6<<24>>24)<(0);
   if ($tobool$i$i) {
    $7 = HEAP32[$publicKey>>2]|0;
    __ZdlPv($7);
   }
   $incdec$ptr$i66 = ((($__begin$sroa$0$0147)) + 12|0);
   $cmp$i$i = ($incdec$ptr$i66|0)==($1|0);
   if ($cmp$i$i) {
    break;
   } else {
    $__begin$sroa$0$0147 = $incdec$ptr$i66;
   }
  }
 }
 HEAP32[$publicKey>>2] = 0;
 $__end_$i$i32 = ((($publicKey)) + 4|0);
 HEAP32[$__end_$i$i32>>2] = 0;
 $__value_$i$i$i$i33 = ((($publicKey)) + 8|0);
 HEAP32[$__value_$i$i$i$i33>>2] = 0;
 $2 = HEAP32[$signatures>>2]|0;
 $__end_$i45 = ((($signatures)) + 4|0);
 $3 = HEAP32[$__end_$i45>>2]|0;
 $cmp$i$i75144 = ($2|0)==($3|0);
 if (!($cmp$i$i75144)) {
  $__size_$i$i120 = ((($_publicKey)) + 11|0);
  $__begin17$sroa$0$0145 = $2;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($_publicKey,$__begin17$sroa$0$0145);
   (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($_publicKey,$_signature,64,0,$outSize$i108)|0);
   $11 = HEAP32[$__end_$i$i32>>2]|0;
   $12 = HEAP32[$__value_$i$i$i$i33>>2]|0;
   $cmp$i114 = ($11|0)==($12|0);
   if ($cmp$i114) {
    __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($publicKey,$_signature);
   } else {
    dest=$11; src=$_signature; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $incdec$ptr$i115 = ((($11)) + 64|0);
    HEAP32[$__end_$i$i32>>2] = $incdec$ptr$i115;
   }
   $13 = HEAP8[$__size_$i$i120>>0]|0;
   $tobool$i$i121 = ($13<<24>>24)<(0);
   if ($tobool$i$i121) {
    $14 = HEAP32[$_publicKey>>2]|0;
    __ZdlPv($14);
   }
   $incdec$ptr$i126 = ((($__begin17$sroa$0$0145)) + 12|0);
   $cmp$i$i75 = ($incdec$ptr$i126|0)==($3|0);
   if ($cmp$i$i75) {
    break;
   } else {
    $__begin17$sroa$0$0145 = $incdec$ptr$i126;
   }
  }
 }
 HEAP32[$agg$tmp>>2] = 0;
 $__end_$i13$i83 = ((($agg$tmp)) + 4|0);
 HEAP32[$__end_$i13$i83>>2] = 0;
 $__value_$i$i$i$i84 = ((($agg$tmp)) + 8|0);
 HEAP32[$__value_$i$i$i$i84>>2] = 0;
 $8 = HEAP32[$__end_$i$i>>2]|0;
 $9 = HEAP32[$_publicKeys>>2]|0;
 $sub$ptr$sub$i$i86 = (($8) - ($9))|0;
 $sub$ptr$div$i$i87 = $sub$ptr$sub$i$i86 >> 5;
 $cmp$i88 = ($sub$ptr$sub$i$i86|0)==(0);
 $10 = $9;
 if (!($cmp$i88)) {
  $cmp$i8$i89 = ($sub$ptr$div$i$i87>>>0)>(134217727);
  if ($cmp$i8$i89) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($agg$tmp);
   // unreachable;
  }
  $call$i$i$i$i11$i93 = (__Znwm($sub$ptr$sub$i$i86)|0);
  HEAP32[$__end_$i13$i83>>2] = $call$i$i$i$i11$i93;
  HEAP32[$agg$tmp>>2] = $call$i$i$i$i11$i93;
  $add$ptr$i$i94 = (($call$i$i$i$i11$i93) + ($sub$ptr$div$i$i87<<5)|0);
  HEAP32[$__value_$i$i$i$i84>>2] = $add$ptr$i$i94;
  $cmp$i$i$i98 = ($sub$ptr$sub$i$i86|0)>(0);
  if ($cmp$i$i$i98) {
   $sub$ptr$div6$i$i$i100 = $sub$ptr$sub$i$i86 >>> 5;
   $add$ptr$i$i$i101 = (($call$i$i$i$i11$i93) + ($sub$ptr$div6$i$i$i100<<5)|0);
   _memcpy(($call$i$i$i$i11$i93|0),($10|0),($sub$ptr$sub$i$i86|0))|0;
   HEAP32[$__end_$i13$i83>>2] = $add$ptr$i$i$i101;
  }
 }
 HEAP32[$agg$tmp46>>2] = 0;
 $__end_$i13$i = ((($agg$tmp46)) + 4|0);
 HEAP32[$__end_$i13$i>>2] = 0;
 $__value_$i$i$i$i51 = ((($agg$tmp46)) + 8|0);
 HEAP32[$__value_$i$i$i$i51>>2] = 0;
 $15 = HEAP32[$__end_$i$i32>>2]|0;
 $16 = HEAP32[$publicKey>>2]|0;
 $sub$ptr$sub$i$i = (($15) - ($16))|0;
 $sub$ptr$div$i$i = $sub$ptr$sub$i$i >> 6;
 $cmp$i52 = ($sub$ptr$sub$i$i|0)==(0);
 $17 = $16;
 if (!($cmp$i52)) {
  $cmp$i8$i = ($sub$ptr$div$i$i>>>0)>(67108863);
  if ($cmp$i8$i) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($agg$tmp46);
   // unreachable;
  }
  $call$i$i$i$i11$i = (__Znwm($sub$ptr$sub$i$i)|0);
  HEAP32[$__end_$i13$i>>2] = $call$i$i$i$i11$i;
  HEAP32[$agg$tmp46>>2] = $call$i$i$i$i11$i;
  $add$ptr$i$i = (($call$i$i$i$i11$i) + ($sub$ptr$div$i$i<<6)|0);
  HEAP32[$__value_$i$i$i$i51>>2] = $add$ptr$i$i;
  $cmp$i$i$i = ($sub$ptr$sub$i$i|0)>(0);
  if ($cmp$i$i$i) {
   $sub$ptr$div6$i$i$i = $sub$ptr$sub$i$i >>> 6;
   $add$ptr$i$i$i = (($call$i$i$i$i11$i) + ($sub$ptr$div6$i$i$i<<6)|0);
   _memcpy(($call$i$i$i$i11$i|0),($17|0),($sub$ptr$sub$i$i|0))|0;
   HEAP32[$__end_$i13$i>>2] = $add$ptr$i$i$i;
  }
 }
 $call51 = (__ZN6Crypto10crypto_ops18checkRingSignatureERKNS_4HashERKNS_8KeyImageENSt3__26vectorINS_9PublicKeyENS7_9allocatorIS9_EEEENS8_INS_9SignatureENSA_ISD_EEEE($_prefixHash,$_keyImage,$agg$tmp,$agg$tmp46)|0);
 $18 = HEAP32[$agg$tmp46>>2]|0;
 $cmp$i47 = ($18|0)==(0|0);
 if (!($cmp$i47)) {
  $19 = $18;
  HEAP32[$__end_$i13$i>>2] = $19;
  __ZdlPv($18);
 }
 $20 = HEAP32[$agg$tmp>>2]|0;
 $cmp$i41 = ($20|0)==(0|0);
 if (!($cmp$i41)) {
  $21 = $20;
  HEAP32[$__end_$i13$i83>>2] = $21;
  __ZdlPv($20);
 }
 $22 = HEAP32[$publicKey>>2]|0;
 $cmp$i35 = ($22|0)==(0|0);
 if (!($cmp$i35)) {
  $23 = $22;
  HEAP32[$__end_$i$i32>>2] = $23;
  __ZdlPv($22);
 }
 $24 = HEAP32[$_publicKeys>>2]|0;
 $cmp$i27 = ($24|0)==(0|0);
 if ($cmp$i27) {
  STACKTOP = sp;return ($call51|0);
 }
 $25 = $24;
 HEAP32[$__end_$i$i>>2] = $25;
 __ZdlPv($24);
 STACKTOP = sp;return ($call51|0);
}
function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$sroa$speculated$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__end_$i = 0, $__value_$i$i$i$i$i$i = 0, $add = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $call$i$i$i$i = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i$i$i$i = 0, $cmp$i22 = 0, $cmp3$i = 0;
 var $cond$i = 0, $exception$i$i$i$i = 0, $incdec$ptr = 0, $mul$i = 0, $mul$i$i$i = 0, $spec$select$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0, $tobool$i13 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $__end_$i = ((($this)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 6;
 $add = (($sub$ptr$div$i) + 1)|0;
 $cmp$i = ($add>>>0)>(67108863);
 $2 = $1;
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__value_$i$i$i$i$i$i = ((($this)) + 8|0);
 $3 = HEAP32[$__value_$i$i$i$i$i$i>>2]|0;
 $sub$ptr$sub$i$i$i = (($3) - ($1))|0;
 $sub$ptr$div$i$i$i = $sub$ptr$sub$i$i$i >> 6;
 $cmp3$i = ($sub$ptr$div$i$i$i>>>0)<(33554431);
 $mul$i = $sub$ptr$sub$i$i$i >> 5;
 $cmp$i$i$i$i = ($mul$i>>>0)<($add>>>0);
 $$sroa$speculated$i = $cmp$i$i$i$i ? $add : $mul$i;
 $spec$select$i = $cmp3$i ? $$sroa$speculated$i : 67108863;
 $cmp$i22 = ($spec$select$i|0)==(0);
 do {
  if ($cmp$i22) {
   $cond$i = 0;
  } else {
   $cmp$i$i$i = ($spec$select$i>>>0)>(67108863);
   if ($cmp$i$i$i) {
    $exception$i$i$i$i = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($exception$i$i$i$i,35737);
    HEAP32[$exception$i$i$i$i>>2] = (34592);
    ___cxa_throw(($exception$i$i$i$i|0),(33928|0),(6|0));
    // unreachable;
   } else {
    $mul$i$i$i = $spec$select$i << 6;
    $call$i$i$i$i = (__Znwm($mul$i$i$i)|0);
    $cond$i = $call$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$ptr$i = (($cond$i) + ($sub$ptr$div$i<<6)|0);
 $add$ptr5$i = (($cond$i) + ($spec$select$i<<6)|0);
 $4 = $add$ptr5$i;
 dest=$add$ptr$i; src=$__x; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $incdec$ptr = ((($add$ptr$i)) + 64|0);
 $5 = $incdec$ptr;
 $6 = $cond$i;
 $cmp$i$i = ($sub$ptr$sub$i|0)>(0);
 if ($cmp$i$i) {
  _memcpy(($cond$i|0),($2|0),($sub$ptr$sub$i|0))|0;
 }
 HEAP32[$this>>2] = $6;
 HEAP32[$__end_$i>>2] = $5;
 HEAP32[$__value_$i$i$i$i$i$i>>2] = $4;
 $tobool$i13 = ($1|0)==(0);
 if ($tobool$i13) {
  return;
 }
 __ZdlPv($2);
 return;
}
function __ZN4Core12Cryptography41generatePrivateViewKeyFromPrivateSpendKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$privateSpendKey) {
 $agg$result = $agg$result|0;
 $privateSpendKey = $privateSpendKey|0;
 var $_privateSpendKey = 0, $outSize$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $outSize$i = sp;
 $_privateSpendKey = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateSpendKey,$_privateSpendKey,32,0,$outSize$i)|0);
 __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_($_privateSpendKey,$outSize$i);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i,32,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography35generateViewKeysFromPrivateSpendKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$privateSpendKey) {
 $agg$result = $agg$result|0;
 $privateSpendKey = $privateSpendKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__size_$i$i14 = 0, $__size_$i$i8 = 0, $__value_$i1$i$i = 0, $_privateSpendKey = 0, $_publicViewKey = 0, $outSize$i = 0, $privateViewKey = 0, $publicViewKey = 0, $tobool$i$i15 = 0, $tobool$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $outSize$i = sp;
 $_privateSpendKey = sp + 88|0;
 $_publicViewKey = sp + 56|0;
 $privateViewKey = sp + 44|0;
 $publicViewKey = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateSpendKey,$_privateSpendKey,32,0,$outSize$i)|0);
 __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_RNS_9PublicKeyE($_privateSpendKey,$outSize$i,$_publicViewKey);
 __ZN6Common5toHexEPKvy($privateViewKey,$outSize$i,32,0);
 __ZN6Common5toHexEPKvy($publicViewKey,$_publicViewKey,32,0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$privateViewKey);
 $__value_$i1$i$i = ((($agg$result)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($__value_$i1$i$i,$publicViewKey);
 $__size_$i$i14 = ((($publicViewKey)) + 11|0);
 $0 = HEAP8[$__size_$i$i14>>0]|0;
 $tobool$i$i15 = ($0<<24>>24)<(0);
 if ($tobool$i$i15) {
  $1 = HEAP32[$publicViewKey>>2]|0;
  __ZdlPv($1);
 }
 $__size_$i$i8 = ((($privateViewKey)) + 11|0);
 $2 = HEAP8[$__size_$i$i8>>0]|0;
 $tobool$i$i9 = ($2<<24>>24)<(0);
 if (!($tobool$i$i9)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$privateViewKey>>2]|0;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography12generateKeysEv($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__size_$i$i14 = 0, $__size_$i$i8 = 0, $__value_$i1$i$i = 0, $_privateKey = 0, $_publicKey = 0, $privateKey = 0, $publicKey = 0, $tobool$i$i15 = 0, $tobool$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $_privateKey = sp + 56|0;
 $_publicKey = sp + 24|0;
 $privateKey = sp + 12|0;
 $publicKey = sp;
 __ZN6Crypto10crypto_ops13generate_keysERNS_9PublicKeyERNS_9SecretKeyE($_publicKey,$_privateKey);
 __ZN6Common5toHexEPKvy($privateKey,$_privateKey,32,0);
 __ZN6Common5toHexEPKvy($publicKey,$_publicKey,32,0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$privateKey);
 $__value_$i1$i$i = ((($agg$result)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($__value_$i1$i$i,$publicKey);
 $__size_$i$i8 = ((($publicKey)) + 11|0);
 $0 = HEAP8[$__size_$i$i8>>0]|0;
 $tobool$i$i9 = ($0<<24>>24)<(0);
 if ($tobool$i$i9) {
  $1 = HEAP32[$publicKey>>2]|0;
  __ZdlPv($1);
 }
 $__size_$i$i14 = ((($privateKey)) + 11|0);
 $2 = HEAP8[$__size_$i$i14>>0]|0;
 $tobool$i$i15 = ($2<<24>>24)<(0);
 if (!($tobool$i$i15)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$privateKey>>2]|0;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography8checkKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($publicKey) {
 $publicKey = $publicKey|0;
 var $_publicKey = 0, $call$i = 0, $outSize$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $outSize$i = sp;
 $_publicKey = sp + 8|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i)|0);
 $call$i = (__ZN6Crypto10crypto_ops9check_keyERKNS_9PublicKeyE($_publicKey)|0);
 STACKTOP = sp;return ($call$i|0);
}
function __ZN4Core12Cryptography20secretKeyToPublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$privateKey) {
 $agg$result = $agg$result|0;
 $privateKey = $privateKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__size_$i$i2 = 0, $__size_$i1$i$i$i = 0, $__size_$i2$i$i$i = 0, $_privateKey = 0, $call$i7 = 0, $frombool = 0, $outSize$i = 0, $publicKey = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $outSize$i = sp;
 $_privateKey = sp + 56|0;
 $publicKey = sp + 44|0;
 $ref$tmp = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateKey,$_privateKey,32,0,$outSize$i)|0);
 $call$i7 = (__ZN6Crypto10crypto_ops24secret_key_to_public_keyERKNS_9SecretKeyERNS_9PublicKeyE($_privateKey,$outSize$i)|0);
 $frombool = $call$i7&1;
 ;HEAP32[$publicKey>>2]=0|0;HEAP32[$publicKey+4>>2]=0|0;HEAP32[$publicKey+8>>2]=0|0;
 if ($call$i7) {
  __ZN6Common5toHexEPKvy($ref$tmp,$outSize$i,32,0);
  $__size_$i2$i$i$i = ((($publicKey)) + 11|0);
  $0 = HEAP8[$__size_$i2$i$i$i>>0]|0;
  $tobool$i$i$i$i = ($0<<24>>24)<(0);
  if ($tobool$i$i$i$i) {
   $1 = HEAP32[$publicKey>>2]|0;
   HEAP8[$1>>0] = 0;
   $__size_$i1$i$i$i = ((($publicKey)) + 4|0);
   HEAP32[$__size_$i1$i$i$i>>2] = 0;
  } else {
   HEAP8[$publicKey>>0] = 0;
   HEAP8[$__size_$i2$i$i$i>>0] = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($publicKey,0);
  ;HEAP32[$publicKey>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$publicKey+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$publicKey+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
 }
 HEAP8[$agg$result>>0] = $frombool;
 $2 = ((($agg$result)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2,$publicKey);
 $__size_$i$i2 = ((($publicKey)) + 11|0);
 $3 = HEAP8[$__size_$i$i2>>0]|0;
 $tobool$i$i3 = ($3<<24>>24)<(0);
 if (!($tobool$i$i3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$publicKey>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography21generateKeyDerivationENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_($agg$result,$publicKey,$privateKey) {
 $agg$result = $agg$result|0;
 $publicKey = $publicKey|0;
 $privateKey = $privateKey|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__size_$i$i2 = 0, $__size_$i1$i$i$i = 0, $__size_$i2$i$i$i = 0, $_privateKey = 0, $_publicKey = 0, $call$i10 = 0, $derivation = 0, $frombool = 0, $outSize$i7 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $outSize$i7 = sp;
 $_publicKey = sp + 88|0;
 $_privateKey = sp + 56|0;
 $derivation = sp + 44|0;
 $ref$tmp = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i7)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateKey,$_privateKey,32,0,$outSize$i7)|0);
 $call$i10 = (__ZN6Crypto10crypto_ops23generate_key_derivationERKNS_9PublicKeyERKNS_9SecretKeyERNS_13KeyDerivationE($_publicKey,$_privateKey,$outSize$i7)|0);
 $frombool = $call$i10&1;
 ;HEAP32[$derivation>>2]=0|0;HEAP32[$derivation+4>>2]=0|0;HEAP32[$derivation+8>>2]=0|0;
 if ($call$i10) {
  __ZN6Common5toHexEPKvy($ref$tmp,$outSize$i7,32,0);
  $__size_$i2$i$i$i = ((($derivation)) + 11|0);
  $0 = HEAP8[$__size_$i2$i$i$i>>0]|0;
  $tobool$i$i$i$i = ($0<<24>>24)<(0);
  if ($tobool$i$i$i$i) {
   $1 = HEAP32[$derivation>>2]|0;
   HEAP8[$1>>0] = 0;
   $__size_$i1$i$i$i = ((($derivation)) + 4|0);
   HEAP32[$__size_$i1$i$i$i>>2] = 0;
  } else {
   HEAP8[$derivation>>0] = 0;
   HEAP8[$__size_$i2$i$i$i>>0] = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($derivation,0);
  ;HEAP32[$derivation>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$derivation+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$derivation+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
 }
 HEAP8[$agg$result>>0] = $frombool;
 $2 = ((($agg$result)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2,$derivation);
 $__size_$i$i2 = ((($derivation)) + 11|0);
 $3 = HEAP8[$__size_$i$i2>>0]|0;
 $tobool$i$i3 = ($3<<24>>24)<(0);
 if (!($tobool$i$i3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$derivation>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography15derivePublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_($agg$result,$derivation,$0,$1,$publicKey) {
 $agg$result = $agg$result|0;
 $derivation = $derivation|0;
 $0 = $0|0;
 $1 = $1|0;
 $publicKey = $publicKey|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__size_$i$i2 = 0, $__size_$i1$i$i$i = 0, $__size_$i2$i$i$i = 0, $_derivation = 0, $_publicKey = 0, $call$i10 = 0, $derivedKey = 0, $frombool = 0, $outSize$i7 = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $outSize$i7 = sp;
 $_derivation = sp + 88|0;
 $_publicKey = sp + 56|0;
 $derivedKey = sp + 44|0;
 $ref$tmp = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($derivation,$_derivation,32,0,$outSize$i7)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i7)|0);
 $call$i10 = (__ZN6Crypto10crypto_ops17derive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($_derivation,$0,$_publicKey,$outSize$i7)|0);
 $frombool = $call$i10&1;
 ;HEAP32[$derivedKey>>2]=0|0;HEAP32[$derivedKey+4>>2]=0|0;HEAP32[$derivedKey+8>>2]=0|0;
 if ($call$i10) {
  __ZN6Common5toHexEPKvy($ref$tmp,$outSize$i7,32,0);
  $__size_$i2$i$i$i = ((($derivedKey)) + 11|0);
  $2 = HEAP8[$__size_$i2$i$i$i>>0]|0;
  $tobool$i$i$i$i = ($2<<24>>24)<(0);
  if ($tobool$i$i$i$i) {
   $3 = HEAP32[$derivedKey>>2]|0;
   HEAP8[$3>>0] = 0;
   $__size_$i1$i$i$i = ((($derivedKey)) + 4|0);
   HEAP32[$__size_$i1$i$i$i>>2] = 0;
  } else {
   HEAP8[$derivedKey>>0] = 0;
   HEAP8[$__size_$i2$i$i$i>>0] = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($derivedKey,0);
  ;HEAP32[$derivedKey>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$derivedKey+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$derivedKey+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
 }
 HEAP8[$agg$result>>0] = $frombool;
 $4 = ((($agg$result)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4,$derivedKey);
 $__size_$i$i2 = ((($derivedKey)) + 11|0);
 $5 = HEAP8[$__size_$i$i2>>0]|0;
 $tobool$i$i3 = ($5<<24>>24)<(0);
 if (!($tobool$i$i3)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$derivedKey>>2]|0;
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography15deriveSecretKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_($agg$result,$derivation,$0,$1,$privateKey) {
 $agg$result = $agg$result|0;
 $derivation = $derivation|0;
 $0 = $0|0;
 $1 = $1|0;
 $privateKey = $privateKey|0;
 var $_derivation = 0, $_privateKey = 0, $outSize$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $outSize$i1 = sp;
 $_derivation = sp + 64|0;
 $_privateKey = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($derivation,$_derivation,32,0,$outSize$i1)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateKey,$_privateKey,32,0,$outSize$i1)|0);
 __ZN6Crypto10crypto_ops17derive_secret_keyERKNS_13KeyDerivationEmRKNS_9SecretKeyERS4_($_derivation,$0,$_privateKey,$outSize$i1);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i1,32,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography17underivePublicKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyS7_($agg$result,$derivation,$0,$1,$derivedKey) {
 $agg$result = $agg$result|0;
 $derivation = $derivation|0;
 $0 = $0|0;
 $1 = $1|0;
 $derivedKey = $derivedKey|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__size_$i$i2 = 0, $__size_$i1$i$i$i = 0, $__size_$i2$i$i$i = 0, $_derivation = 0, $_derivedKey = 0, $call$i10 = 0, $frombool = 0, $outSize$i7 = 0, $publicKey = 0, $ref$tmp = 0, $tobool$i$i$i$i = 0, $tobool$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $outSize$i7 = sp;
 $_derivation = sp + 88|0;
 $_derivedKey = sp + 56|0;
 $publicKey = sp + 44|0;
 $ref$tmp = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($derivation,$_derivation,32,0,$outSize$i7)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($derivedKey,$_derivedKey,32,0,$outSize$i7)|0);
 $call$i10 = (__ZN6Crypto10crypto_ops19underive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($_derivation,$0,$_derivedKey,$outSize$i7)|0);
 $frombool = $call$i10&1;
 ;HEAP32[$publicKey>>2]=0|0;HEAP32[$publicKey+4>>2]=0|0;HEAP32[$publicKey+8>>2]=0|0;
 if ($call$i10) {
  __ZN6Common5toHexEPKvy($ref$tmp,$outSize$i7,32,0);
  $__size_$i2$i$i$i = ((($publicKey)) + 11|0);
  $2 = HEAP8[$__size_$i2$i$i$i>>0]|0;
  $tobool$i$i$i$i = ($2<<24>>24)<(0);
  if ($tobool$i$i$i$i) {
   $3 = HEAP32[$publicKey>>2]|0;
   HEAP8[$3>>0] = 0;
   $__size_$i1$i$i$i = ((($publicKey)) + 4|0);
   HEAP32[$__size_$i1$i$i$i>>2] = 0;
  } else {
   HEAP8[$publicKey>>0] = 0;
   HEAP8[$__size_$i2$i$i$i>>0] = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($publicKey,0);
  ;HEAP32[$publicKey>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$publicKey+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$publicKey+8>>2]=HEAP32[$ref$tmp+8>>2]|0;
 }
 HEAP8[$agg$result>>0] = $frombool;
 $4 = ((($agg$result)) + 4|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4,$publicKey);
 $__size_$i$i2 = ((($publicKey)) + 11|0);
 $5 = HEAP8[$__size_$i$i2>>0]|0;
 $tobool$i$i3 = ($5<<24>>24)<(0);
 if (!($tobool$i$i3)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$publicKey>>2]|0;
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography17generateSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_($agg$result,$prefixHash,$publicKey,$privateKey) {
 $agg$result = $agg$result|0;
 $prefixHash = $prefixHash|0;
 $publicKey = $publicKey|0;
 $privateKey = $privateKey|0;
 var $_prefixHash = 0, $_privateKey = 0, $_publicKey = 0, $outSize$i4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $outSize$i4 = sp;
 $_prefixHash = sp + 128|0;
 $_publicKey = sp + 96|0;
 $_privateKey = sp + 64|0;
 dest=$_prefixHash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($prefixHash,$_prefixHash,32,0,$outSize$i4)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i4)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateKey,$_privateKey,32,0,$outSize$i4)|0);
 __ZN6Crypto10crypto_ops18generate_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SecretKeyERNS_9SignatureE($_prefixHash,$_publicKey,$_privateKey,$outSize$i4);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i4,64,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography14checkSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_($prefixHash,$publicKey,$signature) {
 $prefixHash = $prefixHash|0;
 $publicKey = $publicKey|0;
 $signature = $signature|0;
 var $_prefixHash = 0, $_publicKey = 0, $_signature = 0, $call$i1 = 0, $outSize$i5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $outSize$i5 = sp;
 $_prefixHash = sp + 104|0;
 $_publicKey = sp + 72|0;
 $_signature = sp + 8|0;
 dest=$_prefixHash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($prefixHash,$_prefixHash,32,0,$outSize$i5)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i5)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($signature,$_signature,64,0,$outSize$i5)|0);
 $call$i1 = (__ZN6Crypto10crypto_ops15check_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SignatureE($_prefixHash,$_publicKey,$_signature)|0);
 STACKTOP = sp;return ($call$i1|0);
}
function __ZN4Core12Cryptography16generateKeyImageENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_($agg$result,$publicKey,$privateKey) {
 $agg$result = $agg$result|0;
 $publicKey = $publicKey|0;
 $privateKey = $privateKey|0;
 var $_privateKey = 0, $_publicKey = 0, $outSize$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $outSize$i1 = sp;
 $_publicKey = sp + 64|0;
 $_privateKey = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($publicKey,$_publicKey,32,0,$outSize$i1)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($privateKey,$_privateKey,32,0,$outSize$i1)|0);
 __ZN6Crypto10crypto_ops18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($_publicKey,$_privateKey,$outSize$i1);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i1,32,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography13scalarmultKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_($agg$result,$keyImageA,$keyImageB) {
 $agg$result = $agg$result|0;
 $keyImageA = $keyImageA|0;
 $keyImageB = $keyImageB|0;
 var $_keyImageA = 0, $_keyImageB = 0, $outSize$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $outSize$i1 = sp;
 $_keyImageA = sp + 64|0;
 $_keyImageB = sp + 32|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($keyImageA,$_keyImageA,32,0,$outSize$i1)|0);
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($keyImageB,$_keyImageB,32,0,$outSize$i1)|0);
 __ZN6Crypto10crypto_ops13scalarmultKeyERKNS_8KeyImageES3_($outSize$i1,$_keyImageA,$_keyImageB);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i1,32,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography19hashToEllipticCurveENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$hash) {
 $agg$result = $agg$result|0;
 $hash = $hash|0;
 var $_hash = 0, $outSize$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $outSize$i = sp;
 $_hash = sp + 32|0;
 dest=$_hash; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($hash,$_hash,32,0,$outSize$i)|0);
 __ZN6Crypto10crypto_ops15hash_data_to_ecEPKhmRNS_9PublicKeyE($_hash,32,$outSize$i);
 __ZN6Common5toHexEPKvy($agg$result,$outSize$i,32,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography10scReduce32ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$data) {
 $agg$result = $agg$result|0;
 $data = $data|0;
 var $_scalar = 0, $outSize$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $outSize$i = sp;
 $_scalar = sp + 8|0;
 (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($data,$_scalar,32,0,$outSize$i)|0);
 __ZN6Crypto10crypto_ops10scReduce32ERNS_19EllipticCurveScalarE($_scalar);
 __ZN6Common5toHexEPKvy($agg$result,$_scalar,32,0);
 STACKTOP = sp;return;
}
function __ZN4Core12Cryptography12hashToScalarENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$hash) {
 $agg$result = $agg$result|0;
 $hash = $hash|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $__size_$i$i = 0, $_hash = 0, $_scalar = 0, $agg$tmp = 0, $cmp$i10 = 0, $sub$ptr$sub$i = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $_hash = sp + 12|0;
 $agg$tmp = sp;
 $_scalar = sp + 24|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$tmp,$hash);
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($_hash,$agg$tmp);
 $__size_$i$i = ((($agg$tmp)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$agg$tmp>>2]|0;
  __ZdlPv($1);
 }
 $2 = HEAP32[$_hash>>2]|0;
 $__end_$i = ((($_hash)) + 4|0);
 $3 = HEAP32[$__end_$i>>2]|0;
 $$cast = $2;
 $sub$ptr$sub$i = (($3) - ($$cast))|0;
 __ZN6Crypto10crypto_ops12hashToScalarEPKvmRNS_19EllipticCurveScalarE($2,$sub$ptr$sub$i,$_scalar);
 __ZN6Common5toHexEPKvy($agg$result,$_scalar,32,0);
 $4 = HEAP32[$_hash>>2]|0;
 $cmp$i10 = ($4|0)==(0|0);
 if ($cmp$i10) {
  STACKTOP = sp;return;
 }
 $5 = $4;
 HEAP32[$__end_$i>>2] = $5;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops10scReduce32ERNS_19EllipticCurveScalarE($scalar) {
 $scalar = $scalar|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sc_reduce32($scalar);
 return;
}
function __ZN6Crypto10crypto_ops12hashToScalarEPKvmRNS_19EllipticCurveScalarE($data,$length,$res) {
 $data = $data|0;
 $length = $length|0;
 $res = $res|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cn_fast_hash($data,$length,$res);
 _sc_reduce32($res);
 return;
}
function __ZN6Crypto10crypto_ops13generate_keysERNS_9PublicKeyERNS_9SecretKeyE($pub,$sec) {
 $pub = $pub|0;
 $sec = $sec|0;
 var $arrayidx$i$i = 0, $call$i$i$i = 0, $conv$i$i = 0, $exitcond$i$i = 0, $i$05$i$i = 0, $inc$i$i = 0, $point = 0, $tmp$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $tmp$i = sp;
 $point = sp + 64|0;
 $i$05$i$i = 0;
 while(1) {
  ___tls_init();
  $call$i$i$i = (__ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE(34204,38032,34204)|0);
  $conv$i$i = $call$i$i$i&255;
  $arrayidx$i$i = (($tmp$i) + ($i$05$i$i)|0);
  HEAP8[$arrayidx$i$i>>0] = $conv$i$i;
  $inc$i$i = (($i$05$i$i) + 1)|0;
  $exitcond$i$i = ($inc$i$i|0)==(64);
  if ($exitcond$i$i) {
   break;
  } else {
   $i$05$i$i = $inc$i$i;
  }
 }
 _sc_reduce($tmp$i);
 dest=$sec; src=$tmp$i; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _ge_scalarmult_base($point,$sec);
 _ge_p3_tobytes($pub,$point);
 STACKTOP = sp;return;
}
function ___tls_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__cap_$i$i$i$i = 0, $__i$07$i$i$i = 0, $__size_$i$i$i = 0, $__size_$i$i$i$i = 0, $add$i$i$i = 0, $arrayidx$i$i$i = 0, $arrayidx8$i$i$i = 0, $call$i = 0, $call$i$i$i$i$i$i = 0, $exitcond$i$i$i = 0, $guard$uninitialized = 0, $inc$i$i$i = 0, $mul$i$i$i = 0, $ref$tmp$i = 0, $shr$i$i$i$i = 0, $tobool$i$i$i = 0;
 var $xor$i$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp$i = sp;
 $0 = HEAP8[41112]|0;
 $guard$uninitialized = ($0<<24>>24)==(0);
 if (!($guard$uninitialized)) {
  STACKTOP = sp;return;
 }
 HEAP8[41112] = 1;
 $call$i$i$i$i$i$i = (__Znwm(16)|0);
 HEAP32[$ref$tmp$i>>2] = $call$i$i$i$i$i$i;
 $__cap_$i$i$i$i = ((($ref$tmp$i)) + 8|0);
 HEAP32[$__cap_$i$i$i$i>>2] = -2147483632;
 $__size_$i$i$i$i = ((($ref$tmp$i)) + 4|0);
 HEAP32[$__size_$i$i$i$i>>2] = 12;
 dest=$call$i$i$i$i$i$i; src=35805; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $arrayidx$i$i$i = ((($call$i$i$i$i$i$i)) + 12|0);
 HEAP8[$arrayidx$i$i$i>>0] = 0;
 __ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(40532,$ref$tmp$i);
 $__size_$i$i$i = ((($ref$tmp$i)) + 11|0);
 $1 = HEAP8[$__size_$i$i$i>>0]|0;
 $tobool$i$i$i = ($1<<24>>24)<(0);
 if ($tobool$i$i$i) {
  $2 = HEAP32[$ref$tmp$i>>2]|0;
  __ZdlPv($2);
 }
 (___cxa_thread_atexit((17|0),(40532|0),(___dso_handle|0))|0);
 ___tls_init();
 $call$i = (__ZNSt3__213random_deviceclEv(40532)|0);
 HEAP32[9508] = $call$i;
 $3 = $call$i;$__i$07$i$i$i = 1;
 while(1) {
  $shr$i$i$i$i = $3 >>> 30;
  $xor$i$i$i = $shr$i$i$i$i ^ $3;
  $mul$i$i$i = Math_imul($xor$i$i$i, 1812433253)|0;
  $add$i$i$i = (($mul$i$i$i) + ($__i$07$i$i$i))|0;
  $arrayidx8$i$i$i = (38032 + ($__i$07$i$i$i<<2)|0);
  HEAP32[$arrayidx8$i$i$i>>2] = $add$i$i$i;
  $inc$i$i$i = (($__i$07$i$i$i) + 1)|0;
  $exitcond$i$i$i = ($inc$i$i$i|0)==(624);
  if ($exitcond$i$i$i) {
   break;
  } else {
   $3 = $add$i$i$i;$__i$07$i$i$i = $inc$i$i$i;
  }
 }
 HEAP32[(40528)>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE($this,$__g,$__p) {
 $this = $this|0;
 $__g = $__g|0;
 $__p = $__p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__b_$i = 0, $__i_$i$i$i = 0, $__i_$i$i$i$promoted = 0, $__i_$i$i$i17 = 0, $add = 0, $add$i = 0, $add$i$i$i = 0;
 var $add$i$i$i18 = 0, $add19 = 0, $add7$i$i$i = 0, $add7$i$i$i25 = 0, $and = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i$i$i21 = 0, $and11$i$i$i = 0, $and11$i$i$i29 = 0, $and26$i$i$i = 0, $and26$i$i$i36 = 0, $and29$i$i$i = 0, $and29$i$i$i39 = 0, $and5$i$i$i = 0, $and5$i$i$i23 = 0, $arrayidx$i$i$i = 0, $arrayidx$i$i$i20 = 0, $arrayidx10$i$i$i = 0, $arrayidx10$i$i$i27 = 0;
 var $arrayidx4$i$i$i = 0, $arrayidx4$i$i$i22 = 0, $cmp = 0, $cmp$i = 0, $cmp13 = 0, $cmp17 = 0, $cmp4 = 0, $cmp43$i = 0, $cond$i = 0, $conv$i = 0, $div$i = 0, $div6$i = 0, $mul$i$i$i = 0, $mul$i$i$i30 = 0, $or$i$i$i = 0, $or$i$i$i24 = 0, $rem$i = 0, $rem$i$i$i = 0, $rem$i$i$i19 = 0, $rem$i$i$i65 = 0;
 var $rem8$i$i$i = 0, $rem8$i$i$i26 = 0, $retval$1 = 0, $shl$i$i$i$i = 0, $shl$i$i$i$i38 = 0, $shl$i14$i$i$i = 0, $shl$i14$i$i$i35 = 0, $shr = 0, $shr$i$i$i$i = 0, $shr$i$i$i$i28 = 0, $shr$i13$i$i$i = 0, $shr$i13$i$i$i41 = 0, $shr$i15$i$i$i = 0, $shr$i15$i$i$i33 = 0, $shr46$i = 0, $spec$select = 0, $sub = 0, $sub10 = 0, $sub12 = 0, $sub45$i = 0;
 var $sub9 = 0, $xor$i$i$i = 0, $xor$i$i$i31 = 0, $xor12$i$i$i = 0, $xor12$i$i$i32 = 0, $xor23$i$i$i = 0, $xor23$i$i$i34 = 0, $xor27$i$i$i = 0, $xor27$i$i$i37 = 0, $xor30$i$i$i = 0, $xor30$i$i$i40 = 0, $xor32$i$i$i = 0, $xor32$i$i$i42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__b_$i = ((($__p)) + 4|0);
 $0 = HEAP32[$__b_$i>>2]|0;
 $1 = HEAP32[$__p>>2]|0;
 $sub = (($0) - ($1))|0;
 $add = (($sub) + 1)|0;
 $cmp = ($sub|0)==(0);
 if ($cmp) {
  $retval$1 = $1;
  return ($retval$1|0);
 }
 $cmp4 = ($add|0)==(0);
 if ($cmp4) {
  $__i_$i$i$i17 = ((($__g)) + 2496|0);
  $2 = HEAP32[$__i_$i$i$i17>>2]|0;
  $add$i$i$i18 = (($2) + 1)|0;
  $rem$i$i$i19 = (($add$i$i$i18>>>0) % 624)&-1;
  $arrayidx$i$i$i20 = (($__g) + ($2<<2)|0);
  $3 = HEAP32[$arrayidx$i$i$i20>>2]|0;
  $and$i$i$i21 = $3 & -2147483648;
  $arrayidx4$i$i$i22 = (($__g) + ($rem$i$i$i19<<2)|0);
  $4 = HEAP32[$arrayidx4$i$i$i22>>2]|0;
  $and5$i$i$i23 = $4 & 2147483646;
  $or$i$i$i24 = $and5$i$i$i23 | $and$i$i$i21;
  $add7$i$i$i25 = (($2) + 397)|0;
  $rem8$i$i$i26 = (($add7$i$i$i25>>>0) % 624)&-1;
  $arrayidx10$i$i$i27 = (($__g) + ($rem8$i$i$i26<<2)|0);
  $5 = HEAP32[$arrayidx10$i$i$i27>>2]|0;
  $shr$i$i$i$i28 = $or$i$i$i24 >>> 1;
  $and11$i$i$i29 = $4 & 1;
  $6 = (0 - ($and11$i$i$i29))|0;
  $mul$i$i$i30 = $6 & -1727483681;
  $xor$i$i$i31 = $mul$i$i$i30 ^ $5;
  $xor12$i$i$i32 = $xor$i$i$i31 ^ $shr$i$i$i$i28;
  HEAP32[$arrayidx$i$i$i20>>2] = $xor12$i$i$i32;
  $shr$i15$i$i$i33 = $xor12$i$i$i32 >>> 11;
  $xor23$i$i$i34 = $shr$i15$i$i$i33 ^ $xor12$i$i$i32;
  HEAP32[$__i_$i$i$i17>>2] = $rem$i$i$i19;
  $shl$i14$i$i$i35 = $xor23$i$i$i34 << 7;
  $and26$i$i$i36 = $shl$i14$i$i$i35 & -1658038656;
  $xor27$i$i$i37 = $and26$i$i$i36 ^ $xor23$i$i$i34;
  $shl$i$i$i$i38 = $xor27$i$i$i37 << 15;
  $and29$i$i$i39 = $shl$i$i$i$i38 & -272236544;
  $xor30$i$i$i40 = $and29$i$i$i39 ^ $xor27$i$i$i37;
  $shr$i13$i$i$i41 = $xor30$i$i$i40 >>> 18;
  $xor32$i$i$i42 = $shr$i13$i$i$i41 ^ $xor30$i$i$i40;
  $retval$1 = $xor32$i$i$i42;
  return ($retval$1|0);
 }
 $7 = (Math_clz32(($add|0))|0);
 $sub9 = (32 - ($7))|0;
 $sub12 = (33 - ($sub9))|0;
 $shr = -1 >>> $sub12;
 $and = $shr & $add;
 $cmp13 = ($and|0)==(0);
 $sub10 = $cmp13 << 31 >> 31;
 $spec$select = (($sub9) + ($sub10))|0;
 $div$i = $spec$select >>> 5;
 $rem$i = $spec$select & 31;
 $cmp$i = ($rem$i|0)!=(0);
 $conv$i = $cmp$i&1;
 $add$i = (($div$i) + ($conv$i))|0;
 $div6$i = (($spec$select>>>0) / ($add$i>>>0))&-1;
 $cmp43$i = ($add$i>>>0)>($spec$select>>>0);
 $sub45$i = (32 - ($div6$i))|0;
 $shr46$i = -1 >>> $sub45$i;
 $cond$i = $cmp43$i ? 0 : $shr46$i;
 $__i_$i$i$i = ((($__g)) + 2496|0);
 $__i_$i$i$i$promoted = HEAP32[$__i_$i$i$i>>2]|0;
 $rem$i$i$i65 = $__i_$i$i$i$promoted;
 while(1) {
  $add$i$i$i = (($rem$i$i$i65) + 1)|0;
  $rem$i$i$i = (($add$i$i$i>>>0) % 624)&-1;
  $arrayidx$i$i$i = (($__g) + ($rem$i$i$i65<<2)|0);
  $8 = HEAP32[$arrayidx$i$i$i>>2]|0;
  $and$i$i$i = $8 & -2147483648;
  $arrayidx4$i$i$i = (($__g) + ($rem$i$i$i<<2)|0);
  $9 = HEAP32[$arrayidx4$i$i$i>>2]|0;
  $and5$i$i$i = $9 & 2147483646;
  $or$i$i$i = $and5$i$i$i | $and$i$i$i;
  $add7$i$i$i = (($rem$i$i$i65) + 397)|0;
  $rem8$i$i$i = (($add7$i$i$i>>>0) % 624)&-1;
  $arrayidx10$i$i$i = (($__g) + ($rem8$i$i$i<<2)|0);
  $10 = HEAP32[$arrayidx10$i$i$i>>2]|0;
  $shr$i$i$i$i = $or$i$i$i >>> 1;
  $and11$i$i$i = $9 & 1;
  $11 = (0 - ($and11$i$i$i))|0;
  $mul$i$i$i = $11 & -1727483681;
  $xor$i$i$i = $mul$i$i$i ^ $10;
  $xor12$i$i$i = $xor$i$i$i ^ $shr$i$i$i$i;
  HEAP32[$arrayidx$i$i$i>>2] = $xor12$i$i$i;
  $shr$i15$i$i$i = $xor12$i$i$i >>> 11;
  $xor23$i$i$i = $shr$i15$i$i$i ^ $xor12$i$i$i;
  $shl$i14$i$i$i = $xor23$i$i$i << 7;
  $and26$i$i$i = $shl$i14$i$i$i & -1658038656;
  $xor27$i$i$i = $and26$i$i$i ^ $xor23$i$i$i;
  $shl$i$i$i$i = $xor27$i$i$i << 15;
  $and29$i$i$i = $shl$i$i$i$i & -272236544;
  $xor30$i$i$i = $and29$i$i$i ^ $xor27$i$i$i;
  $shr$i13$i$i$i = $xor30$i$i$i >>> 18;
  $xor32$i$i$i = $shr$i13$i$i$i ^ $xor30$i$i$i;
  $and$i$i = $xor32$i$i$i & $cond$i;
  $cmp17 = ($and$i$i>>>0)<($add>>>0);
  if ($cmp17) {
   break;
  } else {
   $rem$i$i$i65 = $rem$i$i$i;
  }
 }
 HEAP32[$__i_$i$i$i>>2] = $rem$i$i$i;
 $12 = HEAP32[$__p>>2]|0;
 $add19 = (($12) + ($and$i$i))|0;
 $retval$1 = $add19;
 return ($retval$1|0);
}
function __ZN6Crypto10crypto_ops9check_keyERKNS_9PublicKeyE($key) {
 $key = $key|0;
 var $call = 0, $cmp = 0, $point = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $point = sp;
 $call = (_ge_frombytes_vartime($point,$key)|0);
 $cmp = ($call|0)==(0);
 STACKTOP = sp;return ($cmp|0);
}
function __ZN6Crypto10crypto_ops24secret_key_to_public_keyERKNS_9SecretKeyERNS_9PublicKeyE($sec,$pub) {
 $sec = $sec|0;
 $pub = $pub|0;
 var $call = 0, $cmp = 0, $point = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $point = sp;
 $call = (_sc_check($sec)|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  _ge_scalarmult_base($point,$sec);
  _ge_p3_tobytes($pub,$point);
  $retval$0 = 1;
 } else {
  $retval$0 = 0;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN6Crypto10crypto_ops23generate_key_derivationERKNS_9PublicKeyERKNS_9SecretKeyERNS_13KeyDerivationE($key1,$key2,$derivation) {
 $key1 = $key1|0;
 $key2 = $key2|0;
 $derivation = $derivation|0;
 var $call = 0, $cmp = 0, $point = 0, $point2 = 0, $point3 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $point = sp + 280|0;
 $point2 = sp + 160|0;
 $point3 = sp;
 $call = (_ge_frombytes_vartime($point,$key1)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 _ge_scalarmult($point2,$key2,$point);
 _ge_mul8($point3,$point2);
 _ge_p1p1_to_p2($point2,$point3);
 _ge_tobytes($derivation,$point2);
 $retval$0 = 1;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN6Crypto10crypto_ops17derive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($derivation,$output_index,$base,$derived_key) {
 $derivation = $derivation|0;
 $output_index = $output_index|0;
 $base = $base|0;
 $derived_key = $derived_key|0;
 var $0 = 0, $arraydecay$i = 0, $buf$i = 0, $call = 0, $cmp = 0, $cmp$i$i = 0, $cmp4$i$i = 0, $conv$i$i = 0, $conv2$i$i = 0, $end$sroa$0$0$in$i = 0, $end$sroa$0$1$ptr$i = 0, $i$addr$0$lcssa$i$i = 0, $i$addr$05$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr4$i$i = 0, $or$i$i = 0, $point1 = 0, $point2 = 0, $point3 = 0, $point4 = 0;
 var $point5 = 0, $retval$0 = 0, $scalar = 0, $shr$i$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0;
 $buf$i = sp + 792|0;
 $scalar = sp + 760|0;
 $point1 = sp + 600|0;
 $point2 = sp + 440|0;
 $point3 = sp + 280|0;
 $point4 = sp + 120|0;
 $point5 = sp;
 $call = (_ge_frombytes_vartime($point1,$base)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arraydecay$i = ((($buf$i)) + 32|0);
 dest=$buf$i; src=$derivation; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $cmp4$i$i = ($output_index>>>0)>(127);
 if ($cmp4$i$i) {
  $end$sroa$0$0$in$i = $arraydecay$i;$i$addr$05$i$i = $output_index;
  while(1) {
   $or$i$i = $i$addr$05$i$i | 128;
   $conv2$i$i = $or$i$i&255;
   $incdec$ptr$i$i = ((($end$sroa$0$0$in$i)) + 1|0);
   HEAP8[$end$sroa$0$0$in$i>>0] = $conv2$i$i;
   $shr$i$i = $i$addr$05$i$i >>> 7;
   $cmp$i$i = ($i$addr$05$i$i>>>0)>(16383);
   if ($cmp$i$i) {
    $end$sroa$0$0$in$i = $incdec$ptr$i$i;$i$addr$05$i$i = $shr$i$i;
   } else {
    $end$sroa$0$1$ptr$i = $incdec$ptr$i$i;$i$addr$0$lcssa$i$i = $shr$i$i;
    break;
   }
  }
 } else {
  $end$sroa$0$1$ptr$i = $arraydecay$i;$i$addr$0$lcssa$i$i = $output_index;
 }
 $conv$i$i = $i$addr$0$lcssa$i$i&255;
 $incdec$ptr4$i$i = ((($end$sroa$0$1$ptr$i)) + 1|0);
 $0 = $incdec$ptr4$i$i;
 HEAP8[$end$sroa$0$1$ptr$i>>0] = $conv$i$i;
 $sub$ptr$rhs$cast$i = $buf$i;
 $sub$ptr$sub$i = (($0) - ($sub$ptr$rhs$cast$i))|0;
 _cn_fast_hash($buf$i,$sub$ptr$sub$i,$scalar);
 _sc_reduce32($scalar);
 _ge_scalarmult_base($point2,$scalar);
 _ge_p3_to_cached($point3,$point2);
 _ge_add($point4,$point1,$point3);
 _ge_p1p1_to_p2($point5,$point4);
 _ge_tobytes($derived_key,$point5);
 $retval$0 = 1;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN6Crypto10crypto_ops17derive_secret_keyERKNS_13KeyDerivationEmRKNS_9SecretKeyERS4_($derivation,$output_index,$base,$derived_key) {
 $derivation = $derivation|0;
 $output_index = $output_index|0;
 $base = $base|0;
 $derived_key = $derived_key|0;
 var $0 = 0, $arraydecay$i = 0, $buf$i = 0, $cmp$i$i = 0, $cmp4$i$i = 0, $conv$i$i = 0, $conv2$i$i = 0, $end$sroa$0$0$in$i = 0, $end$sroa$0$1$ptr$i = 0, $i$addr$0$lcssa$i$i = 0, $i$addr$05$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr4$i$i = 0, $or$i$i = 0, $scalar = 0, $shr$i$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $buf$i = sp + 32|0;
 $scalar = sp;
 $arraydecay$i = ((($buf$i)) + 32|0);
 dest=$buf$i; src=$derivation; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $cmp4$i$i = ($output_index>>>0)>(127);
 if ($cmp4$i$i) {
  $end$sroa$0$0$in$i = $arraydecay$i;$i$addr$05$i$i = $output_index;
  while(1) {
   $or$i$i = $i$addr$05$i$i | 128;
   $conv2$i$i = $or$i$i&255;
   $incdec$ptr$i$i = ((($end$sroa$0$0$in$i)) + 1|0);
   HEAP8[$end$sroa$0$0$in$i>>0] = $conv2$i$i;
   $shr$i$i = $i$addr$05$i$i >>> 7;
   $cmp$i$i = ($i$addr$05$i$i>>>0)>(16383);
   if ($cmp$i$i) {
    $end$sroa$0$0$in$i = $incdec$ptr$i$i;$i$addr$05$i$i = $shr$i$i;
   } else {
    $end$sroa$0$1$ptr$i = $incdec$ptr$i$i;$i$addr$0$lcssa$i$i = $shr$i$i;
    break;
   }
  }
 } else {
  $end$sroa$0$1$ptr$i = $arraydecay$i;$i$addr$0$lcssa$i$i = $output_index;
 }
 $conv$i$i = $i$addr$0$lcssa$i$i&255;
 $incdec$ptr4$i$i = ((($end$sroa$0$1$ptr$i)) + 1|0);
 $0 = $incdec$ptr4$i$i;
 HEAP8[$end$sroa$0$1$ptr$i>>0] = $conv$i$i;
 $sub$ptr$rhs$cast$i = $buf$i;
 $sub$ptr$sub$i = (($0) - ($sub$ptr$rhs$cast$i))|0;
 _cn_fast_hash($buf$i,$sub$ptr$sub$i,$scalar);
 _sc_reduce32($scalar);
 _sc_add($derived_key,$base,$scalar);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops19underive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($derivation,$output_index,$derived_key,$base) {
 $derivation = $derivation|0;
 $output_index = $output_index|0;
 $derived_key = $derived_key|0;
 $base = $base|0;
 var $0 = 0, $arraydecay$i = 0, $buf$i = 0, $call = 0, $cmp = 0, $cmp$i$i = 0, $cmp4$i$i = 0, $conv$i$i = 0, $conv2$i$i = 0, $end$sroa$0$0$in$i = 0, $end$sroa$0$1$ptr$i = 0, $i$addr$0$lcssa$i$i = 0, $i$addr$05$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr4$i$i = 0, $or$i$i = 0, $point1 = 0, $point2 = 0, $point3 = 0, $point4 = 0;
 var $point5 = 0, $retval$0 = 0, $scalar = 0, $shr$i$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0;
 $buf$i = sp + 792|0;
 $scalar = sp + 760|0;
 $point1 = sp + 600|0;
 $point2 = sp + 440|0;
 $point3 = sp + 280|0;
 $point4 = sp + 120|0;
 $point5 = sp;
 $call = (_ge_frombytes_vartime($point1,$derived_key)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $arraydecay$i = ((($buf$i)) + 32|0);
 dest=$buf$i; src=$derivation; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $cmp4$i$i = ($output_index>>>0)>(127);
 if ($cmp4$i$i) {
  $end$sroa$0$0$in$i = $arraydecay$i;$i$addr$05$i$i = $output_index;
  while(1) {
   $or$i$i = $i$addr$05$i$i | 128;
   $conv2$i$i = $or$i$i&255;
   $incdec$ptr$i$i = ((($end$sroa$0$0$in$i)) + 1|0);
   HEAP8[$end$sroa$0$0$in$i>>0] = $conv2$i$i;
   $shr$i$i = $i$addr$05$i$i >>> 7;
   $cmp$i$i = ($i$addr$05$i$i>>>0)>(16383);
   if ($cmp$i$i) {
    $end$sroa$0$0$in$i = $incdec$ptr$i$i;$i$addr$05$i$i = $shr$i$i;
   } else {
    $end$sroa$0$1$ptr$i = $incdec$ptr$i$i;$i$addr$0$lcssa$i$i = $shr$i$i;
    break;
   }
  }
 } else {
  $end$sroa$0$1$ptr$i = $arraydecay$i;$i$addr$0$lcssa$i$i = $output_index;
 }
 $conv$i$i = $i$addr$0$lcssa$i$i&255;
 $incdec$ptr4$i$i = ((($end$sroa$0$1$ptr$i)) + 1|0);
 $0 = $incdec$ptr4$i$i;
 HEAP8[$end$sroa$0$1$ptr$i>>0] = $conv$i$i;
 $sub$ptr$rhs$cast$i = $buf$i;
 $sub$ptr$sub$i = (($0) - ($sub$ptr$rhs$cast$i))|0;
 _cn_fast_hash($buf$i,$sub$ptr$sub$i,$scalar);
 _sc_reduce32($scalar);
 _ge_scalarmult_base($point2,$scalar);
 _ge_p3_to_cached($point3,$point2);
 _ge_sub($point4,$point1,$point3);
 _ge_p1p1_to_p2($point5,$point4);
 _ge_tobytes($base,$point5);
 $retval$0 = 1;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN6Crypto10crypto_ops18generate_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SecretKeyERNS_9SignatureE($prefix_hash,$pub,$sec,$sig) {
 $prefix_hash = $prefix_hash|0;
 $pub = $pub|0;
 $sec = $sec|0;
 $sig = $sig|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx$i$i = 0, $buf = 0, $call$i$i$i = 0, $conv$i$i = 0, $exitcond$i$i = 0, $i$05$i$i = 0, $inc$i$i = 0, $k = 0, $tmp$i = 0, $tmp3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $tmp$i = sp;
 $tmp3 = sp + 64|0;
 $k = sp + 320|0;
 $buf = sp + 224|0;
 dest=$buf; src=$prefix_hash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $0 = ((($buf)) + 32|0);
 dest=$0; src=$pub; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i$05$i$i = 0;
 while(1) {
  ___tls_init();
  $call$i$i$i = (__ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE(34204,38032,34204)|0);
  $conv$i$i = $call$i$i$i&255;
  $arrayidx$i$i = (($tmp$i) + ($i$05$i$i)|0);
  HEAP8[$arrayidx$i$i>>0] = $conv$i$i;
  $inc$i$i = (($i$05$i$i) + 1)|0;
  $exitcond$i$i = ($inc$i$i|0)==(64);
  if ($exitcond$i$i) {
   break;
  } else {
   $i$05$i$i = $inc$i$i;
  }
 }
 _sc_reduce($tmp$i);
 dest=$k; src=$tmp$i; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _ge_scalarmult_base($tmp3,$k);
 $1 = ((($buf)) + 64|0);
 _ge_p3_tobytes($1,$tmp3);
 _cn_fast_hash($buf,96,$sig);
 _sc_reduce32($sig);
 $add$ptr = ((($sig)) + 32|0);
 _sc_mulsub($add$ptr,$sig,$sec,$k);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops15check_signatureERKNS_4HashERKNS_9PublicKeyERKNS_9SignatureE($prefix_hash,$pub,$sig) {
 $prefix_hash = $prefix_hash|0;
 $pub = $pub|0;
 $sig = $sig|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $buf = 0, $c = 0, $call = 0, $call1 = 0, $call3 = 0, $call8 = 0, $cmp = 0, $cmp2 = 0, $cmp4 = 0, $cmp9 = 0, $retval$0 = 0, $tmp2 = 0, $tmp3 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $tmp2 = sp + 160|0;
 $tmp3 = sp;
 $c = sp + 376|0;
 $buf = sp + 280|0;
 dest=$buf; src=$prefix_hash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $0 = ((($buf)) + 32|0);
 dest=$0; src=$pub; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $call = (_ge_frombytes_vartime($tmp3,$pub)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $call1 = (_sc_check($sig)|0);
 $cmp2 = ($call1|0)==(0);
 if (!($cmp2)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $add$ptr = ((($sig)) + 32|0);
 $call3 = (_sc_check($add$ptr)|0);
 $cmp4 = ($call3|0)==(0);
 if (!($cmp4)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 _ge_double_scalarmult_base_vartime($tmp2,$sig,$tmp3,$add$ptr);
 $1 = ((($buf)) + 64|0);
 _ge_tobytes($1,$tmp2);
 _cn_fast_hash($buf,96,$c);
 _sc_reduce32($c);
 _sc_sub($c,$c,$sig);
 $call8 = (_sc_isnonzero($c)|0);
 $cmp9 = ($call8|0)==(0);
 $retval$0 = $cmp9;
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN6Crypto10crypto_ops13scalarmultKeyERKNS_8KeyImageES3_($agg$result,$P,$a) {
 $agg$result = $agg$result|0;
 $P = $P|0;
 $a = $a|0;
 var $A = 0, $R = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $A = sp + 120|0;
 $R = sp;
 (_ge_frombytes_vartime($A,$P)|0);
 _ge_scalarmult($R,$a,$A);
 _ge_tobytes($agg$result,$R);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops15hash_data_to_ecEPKhmRNS_9PublicKeyE($data,$len,$key) {
 $data = $data|0;
 $len = $len|0;
 $key = $key|0;
 var $h = 0, $point = 0, $point2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $h = sp + 280|0;
 $point = sp + 160|0;
 $point2 = sp;
 _cn_fast_hash($data,$len,$h);
 _ge_fromfe_frombytes_vartime($point,$h);
 _ge_mul8($point2,$point);
 _ge_p1p1_to_p2($point,$point2);
 _ge_tobytes($key,$point);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($pub,$sec,$image) {
 $pub = $pub|0;
 $sec = $sec|0;
 $image = $image|0;
 var $h$i = 0, $point = 0, $point$i = 0, $point2 = 0, $point2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $h$i = sp + 560|0;
 $point$i = sp + 440|0;
 $point2$i = sp + 280|0;
 $point = sp + 120|0;
 $point2 = sp;
 _cn_fast_hash($pub,32,$h$i);
 _ge_fromfe_frombytes_vartime($point$i,$h$i);
 _ge_mul8($point2$i,$point$i);
 _ge_p1p1_to_p3($point,$point2$i);
 _ge_scalarmult($point2,$sec,$point);
 _ge_tobytes($image,$point2);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops22generateRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEENS_9SecretKeyEy($agg$result,$prefixHash,$keyImage,$publicKeys,$transactionSecretKey,$0,$1) {
 $agg$result = $agg$result|0;
 $prefixHash = $prefixHash|0;
 $keyImage = $keyImage|0;
 $publicKeys = $publicKeys|0;
 $transactionSecretKey = $transactionSecretKey|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__end_$i$i = 0, $__end_$i13$i$i$i$i = 0, $__end_$i13$i$i$i$i143 = 0, $__end_$i13$i$i$i$i81 = 0, $__value_$i$i$i$i = 0, $__value_$i$i$i$i$i$i$i = 0, $__value_$i$i$i$i$i$i$i144 = 0, $__value_$i$i$i$i$i$i$i82 = 0, $ab = 0, $add$i = 0, $add$ptr = 0;
 var $add$ptr$i$i = 0, $add$ptr$i$i$i$i$i = 0, $add$ptr$i$i$i$i$i$i = 0, $add$ptr$i$i$i$i$i$i100 = 0, $add$ptr$i$i$i$i$i$i162 = 0, $add$ptr$i$i$i$i$i155 = 0, $add$ptr$i$i$i$i$i93 = 0, $add$ptr45 = 0, $add$ptr56 = 0, $add$ptr85 = 0, $arrayidx$i$i = 0, $arrayidx$i$i52 = 0, $arrayidx$i$i67 = 0, $call$i$i$i$i11$i$i$i$i = 0, $call$i$i$i$i11$i$i$i$i153 = 0, $call$i$i$i$i11$i$i$i$i91 = 0, $call$i$i$i$i7$i = 0, $call$i$i$i40 = 0, $call$i$i$i59 = 0, $call$i$i$i74 = 0;
 var $call34 = 0, $call4 = 0, $cmp = 0, $cmp$i$i$i$i = 0, $cmp$i$i$i$i$i$i = 0, $cmp$i$i$i$i$i$i159 = 0, $cmp$i$i$i$i$i$i97 = 0, $cmp$i$i$i$i148 = 0, $cmp$i$i$i$i86 = 0, $cmp$i171 = 0, $cmp$i32 = 0, $cmp$i4$i = 0, $cmp$i8$i$i$i$i = 0, $cmp$i8$i$i$i$i149 = 0, $cmp$i8$i$i$i$i87 = 0, $cmp11 = 0, $cmp11193 = 0, $cmp35 = 0, $conv$i$i = 0, $conv$i$i51 = 0;
 var $conv$i$i66 = 0, $exitcond$i$i = 0, $exitcond$i$i54 = 0, $exitcond$i$i69 = 0, $h = 0, $h$i114 = 0, $i$0194 = 0, $i$05$i$i = 0, $i$05$i$i50 = 0, $i$05$i$i65 = 0, $image_pre = 0, $image_unp = 0, $inc = 0, $inc$i$i = 0, $inc$i$i53 = 0, $inc$i$i68 = 0, $k = 0, $mul$i$i$i$i = 0, $mul$i$pre$phiZZ2D = 0, $phitmp = 0;
 var $phitmp197 = 0, $point$i115 = 0, $point2$i116 = 0, $signatures = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i$i$i = 0, $sub$ptr$div$i$i$i$i$i147 = 0, $sub$ptr$div$i$i$i$i$i85 = 0, $sub$ptr$div$i39 = 0, $sub$ptr$div6$i$i$i$i$i$i = 0, $sub$ptr$div6$i$i$i$i$i$i161 = 0, $sub$ptr$div6$i$i$i$i$i$i99 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i$i$i = 0, $sub$ptr$sub$i$i$i$i$i146 = 0, $sub$ptr$sub$i$i$i$i$i84 = 0, $sub$ptr$sub$i129$pre$phiZZZZ2D = 0, $sub$ptr$sub$i38 = 0, $sum31 = 0, $tmp2 = 0;
 var $tmp3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2176|0;
 $h$i114 = sp + 1280|0;
 $point$i115 = sp + 1960|0;
 $point2$i116 = sp + 1800|0;
 $signatures = sp + 1784|0;
 $image_unp = sp + 1624|0;
 $image_pre = sp;
 $sum31 = sp + 2144|0;
 $k = sp + 2112|0;
 $h = sp + 2080|0;
 $tmp2 = sp + 1504|0;
 $tmp3 = sp + 1344|0;
 $__end_$i = ((($publicKeys)) + 4|0);
 $2 = HEAP32[$__end_$i>>2]|0;
 $3 = HEAP32[$publicKeys>>2]|0;
 $sub$ptr$sub$i = (($2) - ($3))|0;
 $sub$ptr$div$i = $sub$ptr$sub$i >> 5;
 HEAP32[$signatures>>2] = 0;
 $__end_$i$i = ((($signatures)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($signatures)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $cmp$i32 = ($sub$ptr$sub$i|0)==(0);
 do {
  if ($cmp$i32) {
   $mul$i$pre$phiZZ2D = 0;
  } else {
   $cmp$i4$i = ($sub$ptr$div$i>>>0)>(67108863);
   if ($cmp$i4$i) {
    __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($signatures);
    // unreachable;
   } else {
    $mul$i$i$i$i = $sub$ptr$sub$i << 1;
    $call$i$i$i$i7$i = (__Znwm($mul$i$i$i$i)|0);
    HEAP32[$signatures>>2] = $call$i$i$i$i7$i;
    $add$ptr$i$i = (($call$i$i$i$i7$i) + ($sub$ptr$div$i<<6)|0);
    HEAP32[$__value_$i$i$i$i>>2] = $add$ptr$i$i;
    HEAP32[$__end_$i$i>>2] = $add$ptr$i$i;
    $mul$i$pre$phiZZ2D = $mul$i$i$i$i;
    break;
   }
  }
 } while(0);
 $add$i = $mul$i$pre$phiZZ2D | 32;
 $$alloca_mul = $add$i;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $call4 = (_ge_frombytes_vartime($image_unp,$keyImage)|0);
 $cmp = ($call4|0)==(0);
 L7: do {
  if ($cmp) {
   _ge_dsm_precomp($image_pre,$image_unp);
   _sc_0($sum31);
   dest=$4; src=$prefixHash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $9 = HEAP32[$__end_$i>>2]|0;
   $10 = HEAP32[$publicKeys>>2]|0;
   $cmp11193 = ($9|0)==($10|0);
   do {
    if ($cmp11193) {
     $sub$ptr$sub$i129$pre$phiZZZZ2D = 32;
    } else {
     $ab = ((($4)) + 32|0);
     $i$0194 = 0;
     while(1) {
      $11 = ($i$0194|0)==($0|0);
      $12 = (0)==($1|0);
      $13 = $11 & $12;
      if ($13) {
       $i$05$i$i = 0;
       while(1) {
        ___tls_init();
        $call$i$i$i40 = (__ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE(34204,38032,34204)|0);
        $conv$i$i = $call$i$i$i40&255;
        $arrayidx$i$i = (($h$i114) + ($i$05$i$i)|0);
        HEAP8[$arrayidx$i$i>>0] = $conv$i$i;
        $inc$i$i = (($i$05$i$i) + 1)|0;
        $exitcond$i$i = ($inc$i$i|0)==(64);
        if ($exitcond$i$i) {
         break;
        } else {
         $i$05$i$i = $inc$i$i;
        }
       }
       _sc_reduce($h$i114);
       dest=$k; src=$h$i114; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       _ge_scalarmult_base($tmp3,$k);
       $14 = (($ab) + ($i$0194<<6)|0);
       _ge_p3_tobytes($14,$tmp3);
       $15 = HEAP32[$publicKeys>>2]|0;
       $16 = (($15) + ($i$0194<<5)|0);
       _cn_fast_hash($16,32,$h$i114);
       _ge_fromfe_frombytes_vartime($point$i115,$h$i114);
       _ge_mul8($point2$i116,$point$i115);
       _ge_p1p1_to_p3($tmp3,$point2$i116);
       _ge_scalarmult($tmp2,$k,$tmp3);
       $17 = (((($ab) + ($i$0194<<6)|0)) + 32|0);
       _ge_tobytes($17,$tmp2);
      } else {
       $18 = HEAP32[$signatures>>2]|0;
       $i$05$i$i50 = 0;
       while(1) {
        ___tls_init();
        $call$i$i$i59 = (__ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE(34204,38032,34204)|0);
        $conv$i$i51 = $call$i$i$i59&255;
        $arrayidx$i$i52 = (($h$i114) + ($i$05$i$i50)|0);
        HEAP8[$arrayidx$i$i52>>0] = $conv$i$i51;
        $inc$i$i53 = (($i$05$i$i50) + 1)|0;
        $exitcond$i$i54 = ($inc$i$i53|0)==(64);
        if ($exitcond$i$i54) {
         break;
        } else {
         $i$05$i$i50 = $inc$i$i53;
        }
       }
       _sc_reduce($h$i114);
       $19 = (($18) + ($i$0194<<6)|0);
       dest=$19; src=$h$i114; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       $20 = HEAP32[$signatures>>2]|0;
       $add$ptr = (((($20) + ($i$0194<<6)|0)) + 32|0);
       $i$05$i$i65 = 0;
       while(1) {
        ___tls_init();
        $call$i$i$i74 = (__ZNSt3__224uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEEiRT_RKNS1_10param_typeE(34204,38032,34204)|0);
        $conv$i$i66 = $call$i$i$i74&255;
        $arrayidx$i$i67 = (($h$i114) + ($i$05$i$i65)|0);
        HEAP8[$arrayidx$i$i67>>0] = $conv$i$i66;
        $inc$i$i68 = (($i$05$i$i65) + 1)|0;
        $exitcond$i$i69 = ($inc$i$i68|0)==(64);
        if ($exitcond$i$i69) {
         break;
        } else {
         $i$05$i$i65 = $inc$i$i68;
        }
       }
       _sc_reduce($h$i114);
       dest=$add$ptr; src=$h$i114; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       $21 = HEAP32[$publicKeys>>2]|0;
       $22 = (($21) + ($i$0194<<5)|0);
       $call34 = (_ge_frombytes_vartime($tmp3,$22)|0);
       $cmp35 = ($call34|0)==(0);
       if (!($cmp35)) {
        break;
       }
       $27 = HEAP32[$signatures>>2]|0;
       $28 = (($27) + ($i$0194<<6)|0);
       $add$ptr45 = (((($27) + ($i$0194<<6)|0)) + 32|0);
       _ge_double_scalarmult_base_vartime($tmp2,$28,$tmp3,$add$ptr45);
       $29 = (($ab) + ($i$0194<<6)|0);
       _ge_tobytes($29,$tmp2);
       $30 = HEAP32[$publicKeys>>2]|0;
       $31 = (($30) + ($i$0194<<5)|0);
       _cn_fast_hash($31,32,$h$i114);
       _ge_fromfe_frombytes_vartime($point$i115,$h$i114);
       _ge_mul8($point2$i116,$point$i115);
       _ge_p1p1_to_p3($tmp3,$point2$i116);
       $32 = HEAP32[$signatures>>2]|0;
       $add$ptr56 = (((($32) + ($i$0194<<6)|0)) + 32|0);
       $33 = (($32) + ($i$0194<<6)|0);
       _ge_double_scalarmult_precomp_vartime($tmp2,$add$ptr56,$tmp3,$33,$image_pre);
       $34 = (((($ab) + ($i$0194<<6)|0)) + 32|0);
       _ge_tobytes($34,$tmp2);
       $35 = HEAP32[$signatures>>2]|0;
       $36 = (($35) + ($i$0194<<6)|0);
       _sc_add($sum31,$sum31,$36);
      }
      $inc = (($i$0194) + 1)|0;
      $37 = HEAP32[$__end_$i>>2]|0;
      $38 = HEAP32[$publicKeys>>2]|0;
      $sub$ptr$sub$i38 = (($37) - ($38))|0;
      $sub$ptr$div$i39 = $sub$ptr$sub$i38 >> 5;
      $cmp11 = ($inc>>>0)<($sub$ptr$div$i39>>>0);
      if ($cmp11) {
       $i$0194 = $inc;
      } else {
       label = 30;
       break;
      }
     }
     if ((label|0) == 30) {
      $phitmp = $sub$ptr$sub$i38 << 1;
      $phitmp197 = $phitmp | 32;
      $sub$ptr$sub$i129$pre$phiZZZZ2D = $phitmp197;
      break;
     }
     HEAP8[$agg$result>>0] = 0;
     $23 = ((($agg$result)) + 4|0);
     HEAP32[$23>>2] = 0;
     $__end_$i13$i$i$i$i81 = ((($agg$result)) + 8|0);
     HEAP32[$__end_$i13$i$i$i$i81>>2] = 0;
     $__value_$i$i$i$i$i$i$i82 = ((($agg$result)) + 12|0);
     HEAP32[$__value_$i$i$i$i$i$i$i82>>2] = 0;
     $24 = HEAP32[$__end_$i$i>>2]|0;
     $25 = HEAP32[$signatures>>2]|0;
     $sub$ptr$sub$i$i$i$i$i84 = (($24) - ($25))|0;
     $sub$ptr$div$i$i$i$i$i85 = $sub$ptr$sub$i$i$i$i$i84 >> 6;
     $cmp$i$i$i$i86 = ($sub$ptr$sub$i$i$i$i$i84|0)==(0);
     $26 = $25;
     if (!($cmp$i$i$i$i86)) {
      $cmp$i8$i$i$i$i87 = ($sub$ptr$div$i$i$i$i$i85>>>0)>(67108863);
      if ($cmp$i8$i$i$i$i87) {
       __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($23);
       // unreachable;
      }
      $call$i$i$i$i11$i$i$i$i91 = (__Znwm($sub$ptr$sub$i$i$i$i$i84)|0);
      HEAP32[$__end_$i13$i$i$i$i81>>2] = $call$i$i$i$i11$i$i$i$i91;
      HEAP32[$23>>2] = $call$i$i$i$i11$i$i$i$i91;
      $add$ptr$i$i$i$i$i93 = (($call$i$i$i$i11$i$i$i$i91) + ($sub$ptr$div$i$i$i$i$i85<<6)|0);
      HEAP32[$__value_$i$i$i$i$i$i$i82>>2] = $add$ptr$i$i$i$i$i93;
      $cmp$i$i$i$i$i$i97 = ($sub$ptr$sub$i$i$i$i$i84|0)>(0);
      if ($cmp$i$i$i$i$i$i97) {
       $sub$ptr$div6$i$i$i$i$i$i99 = $sub$ptr$sub$i$i$i$i$i84 >>> 6;
       $add$ptr$i$i$i$i$i$i100 = (($call$i$i$i$i11$i$i$i$i91) + ($sub$ptr$div6$i$i$i$i$i$i99<<6)|0);
       _memcpy(($call$i$i$i$i11$i$i$i$i91|0),($26|0),($sub$ptr$sub$i$i$i$i$i84|0))|0;
       HEAP32[$__end_$i13$i$i$i$i81>>2] = $add$ptr$i$i$i$i$i$i100;
      }
     }
     $47 = $26;
     break L7;
    }
   } while(0);
   _cn_fast_hash($4,$sub$ptr$sub$i129$pre$phiZZZZ2D,$h);
   _sc_reduce32($h);
   $39 = HEAP32[$signatures>>2]|0;
   $40 = (($39) + ($0<<6)|0);
   _sc_sub($40,$h,$sum31);
   $41 = HEAP32[$signatures>>2]|0;
   $add$ptr85 = (((($41) + ($0<<6)|0)) + 32|0);
   $42 = (($41) + ($0<<6)|0);
   _sc_mulsub($add$ptr85,$42,$transactionSecretKey,$k);
   HEAP8[$agg$result>>0] = 1;
   $43 = ((($agg$result)) + 4|0);
   HEAP32[$43>>2] = 0;
   $__end_$i13$i$i$i$i143 = ((($agg$result)) + 8|0);
   HEAP32[$__end_$i13$i$i$i$i143>>2] = 0;
   $__value_$i$i$i$i$i$i$i144 = ((($agg$result)) + 12|0);
   HEAP32[$__value_$i$i$i$i$i$i$i144>>2] = 0;
   $44 = HEAP32[$__end_$i$i>>2]|0;
   $45 = HEAP32[$signatures>>2]|0;
   $sub$ptr$sub$i$i$i$i$i146 = (($44) - ($45))|0;
   $sub$ptr$div$i$i$i$i$i147 = $sub$ptr$sub$i$i$i$i$i146 >> 6;
   $cmp$i$i$i$i148 = ($sub$ptr$sub$i$i$i$i$i146|0)==(0);
   $46 = $45;
   if ($cmp$i$i$i$i148) {
    $47 = $46;
   } else {
    $cmp$i8$i$i$i$i149 = ($sub$ptr$div$i$i$i$i$i147>>>0)>(67108863);
    if ($cmp$i8$i$i$i$i149) {
     __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($43);
     // unreachable;
    }
    $call$i$i$i$i11$i$i$i$i153 = (__Znwm($sub$ptr$sub$i$i$i$i$i146)|0);
    HEAP32[$__end_$i13$i$i$i$i143>>2] = $call$i$i$i$i11$i$i$i$i153;
    HEAP32[$43>>2] = $call$i$i$i$i11$i$i$i$i153;
    $add$ptr$i$i$i$i$i155 = (($call$i$i$i$i11$i$i$i$i153) + ($sub$ptr$div$i$i$i$i$i147<<6)|0);
    HEAP32[$__value_$i$i$i$i$i$i$i144>>2] = $add$ptr$i$i$i$i$i155;
    $cmp$i$i$i$i$i$i159 = ($sub$ptr$sub$i$i$i$i$i146|0)>(0);
    if ($cmp$i$i$i$i$i$i159) {
     $sub$ptr$div6$i$i$i$i$i$i161 = $sub$ptr$sub$i$i$i$i$i146 >>> 6;
     $add$ptr$i$i$i$i$i$i162 = (($call$i$i$i$i11$i$i$i$i153) + ($sub$ptr$div6$i$i$i$i$i$i161<<6)|0);
     _memcpy(($call$i$i$i$i11$i$i$i$i153|0),($46|0),($sub$ptr$sub$i$i$i$i$i146|0))|0;
     HEAP32[$__end_$i13$i$i$i$i143>>2] = $add$ptr$i$i$i$i$i$i162;
     $47 = $46;
    } else {
     $47 = $46;
    }
   }
  } else {
   HEAP8[$agg$result>>0] = 0;
   $5 = ((($agg$result)) + 4|0);
   HEAP32[$5>>2] = 0;
   $__end_$i13$i$i$i$i = ((($agg$result)) + 8|0);
   HEAP32[$__end_$i13$i$i$i$i>>2] = 0;
   $__value_$i$i$i$i$i$i$i = ((($agg$result)) + 12|0);
   HEAP32[$__value_$i$i$i$i$i$i$i>>2] = 0;
   $6 = HEAP32[$__end_$i$i>>2]|0;
   $7 = HEAP32[$signatures>>2]|0;
   $sub$ptr$sub$i$i$i$i$i = (($6) - ($7))|0;
   $sub$ptr$div$i$i$i$i$i = $sub$ptr$sub$i$i$i$i$i >> 6;
   $cmp$i$i$i$i = ($sub$ptr$sub$i$i$i$i$i|0)==(0);
   $8 = $7;
   if ($cmp$i$i$i$i) {
    $47 = $8;
   } else {
    $cmp$i8$i$i$i$i = ($sub$ptr$div$i$i$i$i$i>>>0)>(67108863);
    if ($cmp$i8$i$i$i$i) {
     __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($5);
     // unreachable;
    }
    $call$i$i$i$i11$i$i$i$i = (__Znwm($sub$ptr$sub$i$i$i$i$i)|0);
    HEAP32[$__end_$i13$i$i$i$i>>2] = $call$i$i$i$i11$i$i$i$i;
    HEAP32[$5>>2] = $call$i$i$i$i11$i$i$i$i;
    $add$ptr$i$i$i$i$i = (($call$i$i$i$i11$i$i$i$i) + ($sub$ptr$div$i$i$i$i$i<<6)|0);
    HEAP32[$__value_$i$i$i$i$i$i$i>>2] = $add$ptr$i$i$i$i$i;
    $cmp$i$i$i$i$i$i = ($sub$ptr$sub$i$i$i$i$i|0)>(0);
    if ($cmp$i$i$i$i$i$i) {
     $sub$ptr$div6$i$i$i$i$i$i = $sub$ptr$sub$i$i$i$i$i >>> 6;
     $add$ptr$i$i$i$i$i$i = (($call$i$i$i$i11$i$i$i$i) + ($sub$ptr$div6$i$i$i$i$i$i<<6)|0);
     _memcpy(($call$i$i$i$i11$i$i$i$i|0),($8|0),($sub$ptr$sub$i$i$i$i$i|0))|0;
     HEAP32[$__end_$i13$i$i$i$i>>2] = $add$ptr$i$i$i$i$i$i;
     $47 = $8;
    } else {
     $47 = $8;
    }
   }
  }
 } while(0);
 $cmp$i171 = ($47|0)==(0|0);
 if ($cmp$i171) {
  STACKTOP = sp;return;
 }
 $48 = $47;
 HEAP32[$__end_$i$i>>2] = $48;
 __ZdlPv($47);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops18checkRingSignatureERKNS_4HashERKNS_8KeyImageENSt3__26vectorINS_9PublicKeyENS7_9allocatorIS9_EEEENS8_INS_9SignatureENSA_ISD_EEEE($prefix_hash,$image,$pubs,$signatures) {
 $prefix_hash = $prefix_hash|0;
 $image = $image|0;
 $pubs = $pubs|0;
 $signatures = $signatures|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $ab = 0, $add$i = 0, $add$ptr = 0, $add$ptr26 = 0, $add$ptr29 = 0, $call12 = 0, $call15 = 0, $call2 = 0, $call20 = 0, $call4 = 0, $call40 = 0, $cmp = 0, $cmp10 = 0, $cmp1050 = 0, $cmp13 = 0, $cmp16 = 0;
 var $cmp21 = 0, $cmp41 = 0, $cmp5 = 0, $h = 0, $h$i = 0, $i$051 = 0, $image_pre = 0, $image_unp = 0, $inc = 0, $mul$i = 0, $phitmp = 0, $phitmp52 = 0, $point$i = 0, $point2$i = 0, $retval$3 = 0, $sub$ptr$div$i23 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i22 = 0, $sub$ptr$sub$i27$pre$phiZZZZ2D = 0, $sum20 = 0;
 var $tmp2 = 0, $tmp3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0;
 $h$i = sp + 2064|0;
 $point$i = sp + 1880|0;
 $point2$i = sp + 1720|0;
 $image_unp = sp + 1560|0;
 $image_pre = sp;
 $sum20 = sp + 2032|0;
 $h = sp + 2000|0;
 $tmp2 = sp + 1440|0;
 $tmp3 = sp + 1280|0;
 $__end_$i = ((($pubs)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$pubs>>2]|0;
 $sub$ptr$sub$i = (($0) - ($1))|0;
 $mul$i = $sub$ptr$sub$i << 1;
 $add$i = $mul$i | 32;
 $$alloca_mul = $add$i;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $call2 = (_ge_frombytes_vartime($image_unp,$image)|0);
 $cmp = ($call2|0)==(0);
 if (!($cmp)) {
  $retval$3 = 0;
  STACKTOP = sp;return ($retval$3|0);
 }
 _ge_dsm_precomp($image_pre,$image_unp);
 $call4 = (_ge_check_subgroup_precomp_vartime($image_pre)|0);
 $cmp5 = ($call4|0)==(0);
 if (!($cmp5)) {
  $retval$3 = 0;
  STACKTOP = sp;return ($retval$3|0);
 }
 _sc_0($sum20);
 dest=$2; src=$prefix_hash; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = HEAP32[$__end_$i>>2]|0;
 $4 = HEAP32[$pubs>>2]|0;
 $cmp1050 = ($3|0)==($4|0);
 do {
  if ($cmp1050) {
   $sub$ptr$sub$i27$pre$phiZZZZ2D = 32;
  } else {
   $ab = ((($2)) + 32|0);
   $i$051 = 0;
   while(1) {
    $5 = HEAP32[$signatures>>2]|0;
    $6 = (($5) + ($i$051<<6)|0);
    $call12 = (_sc_check($6)|0);
    $cmp13 = ($call12|0)==(0);
    if (!($cmp13)) {
     break;
    }
    $7 = HEAP32[$signatures>>2]|0;
    $add$ptr = (((($7) + ($i$051<<6)|0)) + 32|0);
    $call15 = (_sc_check($add$ptr)|0);
    $cmp16 = ($call15|0)==(0);
    if (!($cmp16)) {
     break;
    }
    $8 = HEAP32[$pubs>>2]|0;
    $9 = (($8) + ($i$051<<5)|0);
    $call20 = (_ge_frombytes_vartime($tmp3,$9)|0);
    $cmp21 = ($call20|0)==(0);
    if (!($cmp21)) {
     break;
    }
    $10 = HEAP32[$signatures>>2]|0;
    $11 = (($10) + ($i$051<<6)|0);
    $add$ptr26 = (((($10) + ($i$051<<6)|0)) + 32|0);
    _ge_double_scalarmult_base_vartime($tmp2,$11,$tmp3,$add$ptr26);
    $12 = (($ab) + ($i$051<<6)|0);
    _ge_tobytes($12,$tmp2);
    $13 = HEAP32[$pubs>>2]|0;
    $14 = (($13) + ($i$051<<5)|0);
    _cn_fast_hash($14,32,$h$i);
    _ge_fromfe_frombytes_vartime($point$i,$h$i);
    _ge_mul8($point2$i,$point$i);
    _ge_p1p1_to_p3($tmp3,$point2$i);
    $15 = HEAP32[$signatures>>2]|0;
    $add$ptr29 = (((($15) + ($i$051<<6)|0)) + 32|0);
    $16 = (($15) + ($i$051<<6)|0);
    _ge_double_scalarmult_precomp_vartime($tmp2,$add$ptr29,$tmp3,$16,$image_pre);
    $17 = (((($ab) + ($i$051<<6)|0)) + 32|0);
    _ge_tobytes($17,$tmp2);
    $18 = HEAP32[$signatures>>2]|0;
    $19 = (($18) + ($i$051<<6)|0);
    _sc_add($sum20,$sum20,$19);
    $inc = (($i$051) + 1)|0;
    $20 = HEAP32[$__end_$i>>2]|0;
    $21 = HEAP32[$pubs>>2]|0;
    $sub$ptr$sub$i22 = (($20) - ($21))|0;
    $sub$ptr$div$i23 = $sub$ptr$sub$i22 >> 5;
    $cmp10 = ($inc>>>0)<($sub$ptr$div$i23>>>0);
    if ($cmp10) {
     $i$051 = $inc;
    } else {
     label = 10;
     break;
    }
   }
   if ((label|0) == 10) {
    $phitmp = $sub$ptr$sub$i22 << 1;
    $phitmp52 = $phitmp | 32;
    $sub$ptr$sub$i27$pre$phiZZZZ2D = $phitmp52;
    break;
   }
   $retval$3 = 0;
   STACKTOP = sp;return ($retval$3|0);
  }
 } while(0);
 _cn_fast_hash($2,$sub$ptr$sub$i27$pre$phiZZZZ2D,$h);
 _sc_reduce32($h);
 _sc_sub($h,$h,$sum20);
 $call40 = (_sc_isnonzero($h)|0);
 $cmp41 = ($call40|0)==(0);
 $retval$3 = $cmp41;
 STACKTOP = sp;return ($retval$3|0);
}
function __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_($spend,$viewSecret) {
 $spend = $spend|0;
 $viewSecret = $viewSecret|0;
 var $point$i$i$i = 0, $unused_dummy_variable = 0, $viewKeySeed$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $point$i$i$i = sp;
 $viewKeySeed$i = sp + 192|0;
 $unused_dummy_variable = sp + 160|0;
 (_keccak($spend,32,$viewKeySeed$i,32)|0);
 dest=$viewSecret; src=$viewKeySeed$i; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _sc_reduce32($viewSecret);
 _ge_scalarmult_base($point$i$i$i,$viewSecret);
 _ge_p3_tobytes($unused_dummy_variable,$point$i$i$i);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops21generateViewFromSpendERKNS_9SecretKeyERS1_RNS_9PublicKeyE($spend,$viewSecret,$viewPublic) {
 $spend = $spend|0;
 $viewSecret = $viewSecret|0;
 $viewPublic = $viewPublic|0;
 var $point$i$i = 0, $viewKeySeed = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $point$i$i = sp;
 $viewKeySeed = sp + 160|0;
 (_keccak($spend,32,$viewKeySeed,32)|0);
 dest=$viewSecret; src=$viewKeySeed; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _sc_reduce32($viewSecret);
 _ge_scalarmult_base($point$i$i,$viewSecret);
 _ge_p3_tobytes($viewPublic,$point$i$i);
 STACKTOP = sp;return;
}
function _ge_add($r,$p,$q) {
 $r = $r|0;
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $add$i = 0, $add$i110 = 0, $add$i184 = 0, $add$i73 = 0, $add20$i = 0, $add20$i111 = 0, $add20$i185 = 0, $add20$i74 = 0, $add21$i = 0, $add21$i112 = 0, $add21$i186 = 0, $add21$i75 = 0, $add22$i = 0, $add22$i113 = 0, $add22$i187 = 0, $add22$i76 = 0, $add23$i = 0, $add23$i114 = 0, $add23$i188 = 0, $add23$i77 = 0;
 var $add24$i = 0, $add24$i115 = 0, $add24$i189 = 0, $add24$i78 = 0, $add25$i = 0, $add25$i116 = 0, $add25$i190 = 0, $add25$i79 = 0, $add26$i = 0, $add26$i117 = 0, $add26$i191 = 0, $add26$i80 = 0, $add27$i = 0, $add27$i118 = 0, $add27$i192 = 0, $add27$i81 = 0, $add28$i = 0, $add28$i119 = 0, $add28$i193 = 0, $add28$i82 = 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay18 = 0, $arraydecay19 = 0, $arraydecay20 = 0, $arraydecay22 = 0, $arraydecay26 = 0, $arraydecay28 = 0, $arraydecay5 = 0, $arrayidx1$i = 0, $arrayidx1$i129 = 0, $arrayidx11$i = 0, $arrayidx11$i64 = 0, $arrayidx12$i = 0, $arrayidx12$i65 = 0, $arrayidx13$i = 0, $arrayidx13$i66 = 0, $arrayidx14$i = 0, $arrayidx14$i67 = 0, $arrayidx15$i = 0;
 var $arrayidx15$i68 = 0, $arrayidx16$i = 0, $arrayidx16$i69 = 0, $arrayidx17$i = 0, $arrayidx17$i70 = 0, $arrayidx18$i = 0, $arrayidx18$i71 = 0, $arrayidx19$i = 0, $arrayidx19$i72 = 0, $arrayidx2$i = 0, $arrayidx2$i130 = 0, $arrayidx3$i = 0, $arrayidx3$i131 = 0, $arrayidx30$i = 0, $arrayidx30$i231 = 0, $arrayidx31$i = 0, $arrayidx31$i232 = 0, $arrayidx32$i = 0, $arrayidx32$i233 = 0, $arrayidx33$i = 0;
 var $arrayidx33$i234 = 0, $arrayidx34$i = 0, $arrayidx34$i235 = 0, $arrayidx35$i = 0, $arrayidx35$i236 = 0, $arrayidx36$i = 0, $arrayidx36$i237 = 0, $arrayidx37$i = 0, $arrayidx37$i238 = 0, $arrayidx38$i = 0, $arrayidx38$i239 = 0, $arrayidx4$i = 0, $arrayidx4$i132 = 0, $arrayidx5$i = 0, $arrayidx5$i133 = 0, $arrayidx6$i = 0, $arrayidx6$i134 = 0, $arrayidx7$i = 0, $arrayidx7$i135 = 0, $arrayidx8$i = 0;
 var $arrayidx8$i136 = 0, $arrayidx9$i = 0, $arrayidx9$i137 = 0, $sub$i = 0, $sub$i147 = 0, $sub$i221 = 0, $sub20$i = 0, $sub20$i148 = 0, $sub20$i222 = 0, $sub21$i = 0, $sub21$i149 = 0, $sub21$i223 = 0, $sub22$i = 0, $sub22$i150 = 0, $sub22$i224 = 0, $sub23$i = 0, $sub23$i151 = 0, $sub23$i225 = 0, $sub24$i = 0, $sub24$i152 = 0;
 var $sub24$i226 = 0, $sub25$i = 0, $sub25$i153 = 0, $sub25$i227 = 0, $sub26$i = 0, $sub26$i154 = 0, $sub26$i228 = 0, $sub27$i = 0, $sub27$i155 = 0, $sub27$i229 = 0, $sub28$i = 0, $sub28$i156 = 0, $sub28$i230 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay1 = ((($p)) + 40|0);
 $0 = HEAP32[$arraydecay1>>2]|0;
 $arrayidx1$i = ((($p)) + 44|0);
 $1 = HEAP32[$arrayidx1$i>>2]|0;
 $arrayidx2$i = ((($p)) + 48|0);
 $2 = HEAP32[$arrayidx2$i>>2]|0;
 $arrayidx3$i = ((($p)) + 52|0);
 $3 = HEAP32[$arrayidx3$i>>2]|0;
 $arrayidx4$i = ((($p)) + 56|0);
 $4 = HEAP32[$arrayidx4$i>>2]|0;
 $arrayidx5$i = ((($p)) + 60|0);
 $5 = HEAP32[$arrayidx5$i>>2]|0;
 $arrayidx6$i = ((($p)) + 64|0);
 $6 = HEAP32[$arrayidx6$i>>2]|0;
 $arrayidx7$i = ((($p)) + 68|0);
 $7 = HEAP32[$arrayidx7$i>>2]|0;
 $arrayidx8$i = ((($p)) + 72|0);
 $8 = HEAP32[$arrayidx8$i>>2]|0;
 $arrayidx9$i = ((($p)) + 76|0);
 $9 = HEAP32[$arrayidx9$i>>2]|0;
 $10 = HEAP32[$p>>2]|0;
 $arrayidx11$i = ((($p)) + 4|0);
 $11 = HEAP32[$arrayidx11$i>>2]|0;
 $arrayidx12$i = ((($p)) + 8|0);
 $12 = HEAP32[$arrayidx12$i>>2]|0;
 $arrayidx13$i = ((($p)) + 12|0);
 $13 = HEAP32[$arrayidx13$i>>2]|0;
 $arrayidx14$i = ((($p)) + 16|0);
 $14 = HEAP32[$arrayidx14$i>>2]|0;
 $arrayidx15$i = ((($p)) + 20|0);
 $15 = HEAP32[$arrayidx15$i>>2]|0;
 $arrayidx16$i = ((($p)) + 24|0);
 $16 = HEAP32[$arrayidx16$i>>2]|0;
 $arrayidx17$i = ((($p)) + 28|0);
 $17 = HEAP32[$arrayidx17$i>>2]|0;
 $arrayidx18$i = ((($p)) + 32|0);
 $18 = HEAP32[$arrayidx18$i>>2]|0;
 $arrayidx19$i = ((($p)) + 36|0);
 $19 = HEAP32[$arrayidx19$i>>2]|0;
 $add$i = (($10) + ($0))|0;
 $add20$i = (($11) + ($1))|0;
 $add21$i = (($12) + ($2))|0;
 $add22$i = (($13) + ($3))|0;
 $add23$i = (($14) + ($4))|0;
 $add24$i = (($15) + ($5))|0;
 $add25$i = (($16) + ($6))|0;
 $add26$i = (($17) + ($7))|0;
 $add27$i = (($18) + ($8))|0;
 $add28$i = (($19) + ($9))|0;
 HEAP32[$r>>2] = $add$i;
 $arrayidx30$i = ((($r)) + 4|0);
 HEAP32[$arrayidx30$i>>2] = $add20$i;
 $arrayidx31$i = ((($r)) + 8|0);
 HEAP32[$arrayidx31$i>>2] = $add21$i;
 $arrayidx32$i = ((($r)) + 12|0);
 HEAP32[$arrayidx32$i>>2] = $add22$i;
 $arrayidx33$i = ((($r)) + 16|0);
 HEAP32[$arrayidx33$i>>2] = $add23$i;
 $arrayidx34$i = ((($r)) + 20|0);
 HEAP32[$arrayidx34$i>>2] = $add24$i;
 $arrayidx35$i = ((($r)) + 24|0);
 HEAP32[$arrayidx35$i>>2] = $add25$i;
 $arrayidx36$i = ((($r)) + 28|0);
 HEAP32[$arrayidx36$i>>2] = $add26$i;
 $arrayidx37$i = ((($r)) + 32|0);
 HEAP32[$arrayidx37$i>>2] = $add27$i;
 $arrayidx38$i = ((($r)) + 36|0);
 HEAP32[$arrayidx38$i>>2] = $add28$i;
 $arraydecay5 = ((($r)) + 40|0);
 $20 = HEAP32[$arraydecay1>>2]|0;
 $21 = HEAP32[$arrayidx1$i>>2]|0;
 $22 = HEAP32[$arrayidx2$i>>2]|0;
 $23 = HEAP32[$arrayidx3$i>>2]|0;
 $24 = HEAP32[$arrayidx4$i>>2]|0;
 $25 = HEAP32[$arrayidx5$i>>2]|0;
 $26 = HEAP32[$arrayidx6$i>>2]|0;
 $27 = HEAP32[$arrayidx7$i>>2]|0;
 $28 = HEAP32[$arrayidx8$i>>2]|0;
 $29 = HEAP32[$arrayidx9$i>>2]|0;
 $30 = HEAP32[$p>>2]|0;
 $31 = HEAP32[$arrayidx11$i>>2]|0;
 $32 = HEAP32[$arrayidx12$i>>2]|0;
 $33 = HEAP32[$arrayidx13$i>>2]|0;
 $34 = HEAP32[$arrayidx14$i>>2]|0;
 $35 = HEAP32[$arrayidx15$i>>2]|0;
 $36 = HEAP32[$arrayidx16$i>>2]|0;
 $37 = HEAP32[$arrayidx17$i>>2]|0;
 $38 = HEAP32[$arrayidx18$i>>2]|0;
 $39 = HEAP32[$arrayidx19$i>>2]|0;
 $sub$i221 = (($20) - ($30))|0;
 $sub20$i222 = (($21) - ($31))|0;
 $sub21$i223 = (($22) - ($32))|0;
 $sub22$i224 = (($23) - ($33))|0;
 $sub23$i225 = (($24) - ($34))|0;
 $sub24$i226 = (($25) - ($35))|0;
 $sub25$i227 = (($26) - ($36))|0;
 $sub26$i228 = (($27) - ($37))|0;
 $sub27$i229 = (($28) - ($38))|0;
 $sub28$i230 = (($29) - ($39))|0;
 HEAP32[$arraydecay5>>2] = $sub$i221;
 $arrayidx30$i231 = ((($r)) + 44|0);
 HEAP32[$arrayidx30$i231>>2] = $sub20$i222;
 $arrayidx31$i232 = ((($r)) + 48|0);
 HEAP32[$arrayidx31$i232>>2] = $sub21$i223;
 $arrayidx32$i233 = ((($r)) + 52|0);
 HEAP32[$arrayidx32$i233>>2] = $sub22$i224;
 $arrayidx33$i234 = ((($r)) + 56|0);
 HEAP32[$arrayidx33$i234>>2] = $sub23$i225;
 $arrayidx34$i235 = ((($r)) + 60|0);
 HEAP32[$arrayidx34$i235>>2] = $sub24$i226;
 $arrayidx35$i236 = ((($r)) + 64|0);
 HEAP32[$arrayidx35$i236>>2] = $sub25$i227;
 $arrayidx36$i237 = ((($r)) + 68|0);
 HEAP32[$arrayidx36$i237>>2] = $sub26$i228;
 $arrayidx37$i238 = ((($r)) + 72|0);
 HEAP32[$arrayidx37$i238>>2] = $sub27$i229;
 $arrayidx38$i239 = ((($r)) + 76|0);
 HEAP32[$arrayidx38$i239>>2] = $sub28$i230;
 $arraydecay10 = ((($r)) + 80|0);
 _fe_mul($arraydecay10,$r,$q);
 $arraydecay18 = ((($q)) + 40|0);
 _fe_mul($arraydecay5,$arraydecay5,$arraydecay18);
 $arraydecay19 = ((($r)) + 120|0);
 $arraydecay20 = ((($q)) + 120|0);
 $arraydecay22 = ((($p)) + 120|0);
 _fe_mul($arraydecay19,$arraydecay20,$arraydecay22);
 $arraydecay26 = ((($p)) + 80|0);
 $arraydecay28 = ((($q)) + 80|0);
 _fe_mul($r,$arraydecay26,$arraydecay28);
 $40 = HEAP32[$r>>2]|0;
 $41 = HEAP32[$arrayidx30$i>>2]|0;
 $42 = HEAP32[$arrayidx31$i>>2]|0;
 $43 = HEAP32[$arrayidx32$i>>2]|0;
 $44 = HEAP32[$arrayidx33$i>>2]|0;
 $45 = HEAP32[$arrayidx34$i>>2]|0;
 $46 = HEAP32[$arrayidx35$i>>2]|0;
 $47 = HEAP32[$arrayidx36$i>>2]|0;
 $48 = HEAP32[$arrayidx37$i>>2]|0;
 $49 = HEAP32[$arrayidx38$i>>2]|0;
 $add$i184 = $40 << 1;
 $add20$i185 = $41 << 1;
 $add21$i186 = $42 << 1;
 $add22$i187 = $43 << 1;
 $add23$i188 = $44 << 1;
 $add24$i189 = $45 << 1;
 $add25$i190 = $46 << 1;
 $add26$i191 = $47 << 1;
 $add27$i192 = $48 << 1;
 $add28$i193 = $49 << 1;
 $50 = HEAP32[$arraydecay10>>2]|0;
 $arrayidx1$i129 = ((($r)) + 84|0);
 $51 = HEAP32[$arrayidx1$i129>>2]|0;
 $arrayidx2$i130 = ((($r)) + 88|0);
 $52 = HEAP32[$arrayidx2$i130>>2]|0;
 $arrayidx3$i131 = ((($r)) + 92|0);
 $53 = HEAP32[$arrayidx3$i131>>2]|0;
 $arrayidx4$i132 = ((($r)) + 96|0);
 $54 = HEAP32[$arrayidx4$i132>>2]|0;
 $arrayidx5$i133 = ((($r)) + 100|0);
 $55 = HEAP32[$arrayidx5$i133>>2]|0;
 $arrayidx6$i134 = ((($r)) + 104|0);
 $56 = HEAP32[$arrayidx6$i134>>2]|0;
 $arrayidx7$i135 = ((($r)) + 108|0);
 $57 = HEAP32[$arrayidx7$i135>>2]|0;
 $arrayidx8$i136 = ((($r)) + 112|0);
 $58 = HEAP32[$arrayidx8$i136>>2]|0;
 $arrayidx9$i137 = ((($r)) + 116|0);
 $59 = HEAP32[$arrayidx9$i137>>2]|0;
 $60 = HEAP32[$arraydecay5>>2]|0;
 $61 = HEAP32[$arrayidx30$i231>>2]|0;
 $62 = HEAP32[$arrayidx31$i232>>2]|0;
 $63 = HEAP32[$arrayidx32$i233>>2]|0;
 $64 = HEAP32[$arrayidx33$i234>>2]|0;
 $65 = HEAP32[$arrayidx34$i235>>2]|0;
 $66 = HEAP32[$arrayidx35$i236>>2]|0;
 $67 = HEAP32[$arrayidx36$i237>>2]|0;
 $68 = HEAP32[$arrayidx37$i238>>2]|0;
 $69 = HEAP32[$arrayidx38$i239>>2]|0;
 $sub$i147 = (($50) - ($60))|0;
 $sub20$i148 = (($51) - ($61))|0;
 $sub21$i149 = (($52) - ($62))|0;
 $sub22$i150 = (($53) - ($63))|0;
 $sub23$i151 = (($54) - ($64))|0;
 $sub24$i152 = (($55) - ($65))|0;
 $sub25$i153 = (($56) - ($66))|0;
 $sub26$i154 = (($57) - ($67))|0;
 $sub27$i155 = (($58) - ($68))|0;
 $sub28$i156 = (($59) - ($69))|0;
 HEAP32[$r>>2] = $sub$i147;
 HEAP32[$arrayidx30$i>>2] = $sub20$i148;
 HEAP32[$arrayidx31$i>>2] = $sub21$i149;
 HEAP32[$arrayidx32$i>>2] = $sub22$i150;
 HEAP32[$arrayidx33$i>>2] = $sub23$i151;
 HEAP32[$arrayidx34$i>>2] = $sub24$i152;
 HEAP32[$arrayidx35$i>>2] = $sub25$i153;
 HEAP32[$arrayidx36$i>>2] = $sub26$i154;
 HEAP32[$arrayidx37$i>>2] = $sub27$i155;
 HEAP32[$arrayidx38$i>>2] = $sub28$i156;
 $add$i110 = (($60) + ($50))|0;
 $add20$i111 = (($61) + ($51))|0;
 $add21$i112 = (($62) + ($52))|0;
 $add22$i113 = (($63) + ($53))|0;
 $add23$i114 = (($64) + ($54))|0;
 $add24$i115 = (($65) + ($55))|0;
 $add25$i116 = (($66) + ($56))|0;
 $add26$i117 = (($67) + ($57))|0;
 $add27$i118 = (($68) + ($58))|0;
 $add28$i119 = (($69) + ($59))|0;
 HEAP32[$arraydecay5>>2] = $add$i110;
 HEAP32[$arrayidx30$i231>>2] = $add20$i111;
 HEAP32[$arrayidx31$i232>>2] = $add21$i112;
 HEAP32[$arrayidx32$i233>>2] = $add22$i113;
 HEAP32[$arrayidx33$i234>>2] = $add23$i114;
 HEAP32[$arrayidx34$i235>>2] = $add24$i115;
 HEAP32[$arrayidx35$i236>>2] = $add25$i116;
 HEAP32[$arrayidx36$i237>>2] = $add26$i117;
 HEAP32[$arrayidx37$i238>>2] = $add27$i118;
 HEAP32[$arrayidx38$i239>>2] = $add28$i119;
 $70 = HEAP32[$arraydecay19>>2]|0;
 $arrayidx11$i64 = ((($r)) + 124|0);
 $71 = HEAP32[$arrayidx11$i64>>2]|0;
 $arrayidx12$i65 = ((($r)) + 128|0);
 $72 = HEAP32[$arrayidx12$i65>>2]|0;
 $arrayidx13$i66 = ((($r)) + 132|0);
 $73 = HEAP32[$arrayidx13$i66>>2]|0;
 $arrayidx14$i67 = ((($r)) + 136|0);
 $74 = HEAP32[$arrayidx14$i67>>2]|0;
 $arrayidx15$i68 = ((($r)) + 140|0);
 $75 = HEAP32[$arrayidx15$i68>>2]|0;
 $arrayidx16$i69 = ((($r)) + 144|0);
 $76 = HEAP32[$arrayidx16$i69>>2]|0;
 $arrayidx17$i70 = ((($r)) + 148|0);
 $77 = HEAP32[$arrayidx17$i70>>2]|0;
 $arrayidx18$i71 = ((($r)) + 152|0);
 $78 = HEAP32[$arrayidx18$i71>>2]|0;
 $arrayidx19$i72 = ((($r)) + 156|0);
 $79 = HEAP32[$arrayidx19$i72>>2]|0;
 $add$i73 = (($70) + ($add$i184))|0;
 $add20$i74 = (($71) + ($add20$i185))|0;
 $add21$i75 = (($72) + ($add21$i186))|0;
 $add22$i76 = (($73) + ($add22$i187))|0;
 $add23$i77 = (($74) + ($add23$i188))|0;
 $add24$i78 = (($75) + ($add24$i189))|0;
 $add25$i79 = (($76) + ($add25$i190))|0;
 $add26$i80 = (($77) + ($add26$i191))|0;
 $add27$i81 = (($78) + ($add27$i192))|0;
 $add28$i82 = (($79) + ($add28$i193))|0;
 HEAP32[$arraydecay10>>2] = $add$i73;
 HEAP32[$arrayidx1$i129>>2] = $add20$i74;
 HEAP32[$arrayidx2$i130>>2] = $add21$i75;
 HEAP32[$arrayidx3$i131>>2] = $add22$i76;
 HEAP32[$arrayidx4$i132>>2] = $add23$i77;
 HEAP32[$arrayidx5$i133>>2] = $add24$i78;
 HEAP32[$arrayidx6$i134>>2] = $add25$i79;
 HEAP32[$arrayidx7$i135>>2] = $add26$i80;
 HEAP32[$arrayidx8$i136>>2] = $add27$i81;
 HEAP32[$arrayidx9$i137>>2] = $add28$i82;
 $sub$i = (($add$i184) - ($70))|0;
 $sub20$i = (($add20$i185) - ($71))|0;
 $sub21$i = (($add21$i186) - ($72))|0;
 $sub22$i = (($add22$i187) - ($73))|0;
 $sub23$i = (($add23$i188) - ($74))|0;
 $sub24$i = (($add24$i189) - ($75))|0;
 $sub25$i = (($add25$i190) - ($76))|0;
 $sub26$i = (($add26$i191) - ($77))|0;
 $sub27$i = (($add27$i192) - ($78))|0;
 $sub28$i = (($add28$i193) - ($79))|0;
 HEAP32[$arraydecay19>>2] = $sub$i;
 HEAP32[$arrayidx11$i64>>2] = $sub20$i;
 HEAP32[$arrayidx12$i65>>2] = $sub21$i;
 HEAP32[$arrayidx13$i66>>2] = $sub22$i;
 HEAP32[$arrayidx14$i67>>2] = $sub23$i;
 HEAP32[$arrayidx15$i68>>2] = $sub24$i;
 HEAP32[$arrayidx16$i69>>2] = $sub25$i;
 HEAP32[$arrayidx17$i70>>2] = $sub26$i;
 HEAP32[$arrayidx18$i71>>2] = $sub27$i;
 HEAP32[$arrayidx19$i72>>2] = $sub28$i;
 return;
}
function _fe_mul($h,$f,$g) {
 $h = $h|0;
 $f = $f|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx1 = 0, $arrayidx11 = 0;
 var $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx14 = 0, $arrayidx15 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx18 = 0, $arrayidx19 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx482 = 0, $arrayidx484 = 0, $arrayidx486 = 0, $arrayidx488 = 0, $arrayidx490 = 0, $arrayidx492 = 0, $arrayidx494 = 0, $arrayidx496 = 0, $arrayidx498 = 0;
 var $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $mul = 0, $mul20 = 0, $mul21 = 0, $mul22 = 0, $mul23 = 0, $mul24 = 0, $mul25 = 0, $mul26 = 0, $mul27 = 0, $mul28 = 0, $mul29 = 0, $mul30 = 0, $mul31 = 0, $mul32 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $arrayidx1 = ((($f)) + 4|0);
 $1 = HEAP32[$arrayidx1>>2]|0;
 $arrayidx2 = ((($f)) + 8|0);
 $2 = HEAP32[$arrayidx2>>2]|0;
 $arrayidx3 = ((($f)) + 12|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $arrayidx4 = ((($f)) + 16|0);
 $4 = HEAP32[$arrayidx4>>2]|0;
 $arrayidx5 = ((($f)) + 20|0);
 $5 = HEAP32[$arrayidx5>>2]|0;
 $arrayidx6 = ((($f)) + 24|0);
 $6 = HEAP32[$arrayidx6>>2]|0;
 $arrayidx7 = ((($f)) + 28|0);
 $7 = HEAP32[$arrayidx7>>2]|0;
 $arrayidx8 = ((($f)) + 32|0);
 $8 = HEAP32[$arrayidx8>>2]|0;
 $arrayidx9 = ((($f)) + 36|0);
 $9 = HEAP32[$arrayidx9>>2]|0;
 $10 = HEAP32[$g>>2]|0;
 $arrayidx11 = ((($g)) + 4|0);
 $11 = HEAP32[$arrayidx11>>2]|0;
 $arrayidx12 = ((($g)) + 8|0);
 $12 = HEAP32[$arrayidx12>>2]|0;
 $arrayidx13 = ((($g)) + 12|0);
 $13 = HEAP32[$arrayidx13>>2]|0;
 $arrayidx14 = ((($g)) + 16|0);
 $14 = HEAP32[$arrayidx14>>2]|0;
 $arrayidx15 = ((($g)) + 20|0);
 $15 = HEAP32[$arrayidx15>>2]|0;
 $arrayidx16 = ((($g)) + 24|0);
 $16 = HEAP32[$arrayidx16>>2]|0;
 $arrayidx17 = ((($g)) + 28|0);
 $17 = HEAP32[$arrayidx17>>2]|0;
 $arrayidx18 = ((($g)) + 32|0);
 $18 = HEAP32[$arrayidx18>>2]|0;
 $arrayidx19 = ((($g)) + 36|0);
 $19 = HEAP32[$arrayidx19>>2]|0;
 $mul = ($11*19)|0;
 $mul20 = ($12*19)|0;
 $mul21 = ($13*19)|0;
 $mul22 = ($14*19)|0;
 $mul23 = ($15*19)|0;
 $mul24 = ($16*19)|0;
 $mul25 = ($17*19)|0;
 $mul26 = ($18*19)|0;
 $mul27 = ($19*19)|0;
 $mul28 = $1 << 1;
 $mul29 = $3 << 1;
 $mul30 = $5 << 1;
 $mul31 = $7 << 1;
 $mul32 = $9 << 1;
 $20 = ($0|0)<(0);
 $21 = $20 << 31 >> 31;
 $22 = ($10|0)<(0);
 $23 = $22 << 31 >> 31;
 $24 = (___muldi3(($10|0),($23|0),($0|0),($21|0))|0);
 $25 = (getTempRet0() | 0);
 $26 = ($11|0)<(0);
 $27 = $26 << 31 >> 31;
 $28 = (___muldi3(($11|0),($27|0),($0|0),($21|0))|0);
 $29 = (getTempRet0() | 0);
 $30 = ($12|0)<(0);
 $31 = $30 << 31 >> 31;
 $32 = (___muldi3(($12|0),($31|0),($0|0),($21|0))|0);
 $33 = (getTempRet0() | 0);
 $34 = ($13|0)<(0);
 $35 = $34 << 31 >> 31;
 $36 = (___muldi3(($13|0),($35|0),($0|0),($21|0))|0);
 $37 = (getTempRet0() | 0);
 $38 = ($14|0)<(0);
 $39 = $38 << 31 >> 31;
 $40 = (___muldi3(($14|0),($39|0),($0|0),($21|0))|0);
 $41 = (getTempRet0() | 0);
 $42 = ($15|0)<(0);
 $43 = $42 << 31 >> 31;
 $44 = (___muldi3(($15|0),($43|0),($0|0),($21|0))|0);
 $45 = (getTempRet0() | 0);
 $46 = ($16|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (___muldi3(($16|0),($47|0),($0|0),($21|0))|0);
 $49 = (getTempRet0() | 0);
 $50 = ($17|0)<(0);
 $51 = $50 << 31 >> 31;
 $52 = (___muldi3(($17|0),($51|0),($0|0),($21|0))|0);
 $53 = (getTempRet0() | 0);
 $54 = ($18|0)<(0);
 $55 = $54 << 31 >> 31;
 $56 = (___muldi3(($18|0),($55|0),($0|0),($21|0))|0);
 $57 = (getTempRet0() | 0);
 $58 = ($19|0)<(0);
 $59 = $58 << 31 >> 31;
 $60 = (___muldi3(($19|0),($59|0),($0|0),($21|0))|0);
 $61 = (getTempRet0() | 0);
 $62 = ($1|0)<(0);
 $63 = $62 << 31 >> 31;
 $64 = (___muldi3(($10|0),($23|0),($1|0),($63|0))|0);
 $65 = (getTempRet0() | 0);
 $66 = ($mul28|0)<(0);
 $67 = $66 << 31 >> 31;
 $68 = (___muldi3(($11|0),($27|0),($mul28|0),($67|0))|0);
 $69 = (getTempRet0() | 0);
 $70 = (___muldi3(($12|0),($31|0),($1|0),($63|0))|0);
 $71 = (getTempRet0() | 0);
 $72 = (___muldi3(($13|0),($35|0),($mul28|0),($67|0))|0);
 $73 = (getTempRet0() | 0);
 $74 = (___muldi3(($14|0),($39|0),($1|0),($63|0))|0);
 $75 = (getTempRet0() | 0);
 $76 = (___muldi3(($15|0),($43|0),($mul28|0),($67|0))|0);
 $77 = (getTempRet0() | 0);
 $78 = (___muldi3(($16|0),($47|0),($1|0),($63|0))|0);
 $79 = (getTempRet0() | 0);
 $80 = (___muldi3(($17|0),($51|0),($mul28|0),($67|0))|0);
 $81 = (getTempRet0() | 0);
 $82 = (___muldi3(($18|0),($55|0),($1|0),($63|0))|0);
 $83 = (getTempRet0() | 0);
 $84 = ($mul27|0)<(0);
 $85 = $84 << 31 >> 31;
 $86 = (___muldi3(($mul27|0),($85|0),($mul28|0),($67|0))|0);
 $87 = (getTempRet0() | 0);
 $88 = ($2|0)<(0);
 $89 = $88 << 31 >> 31;
 $90 = (___muldi3(($10|0),($23|0),($2|0),($89|0))|0);
 $91 = (getTempRet0() | 0);
 $92 = (___muldi3(($11|0),($27|0),($2|0),($89|0))|0);
 $93 = (getTempRet0() | 0);
 $94 = (___muldi3(($12|0),($31|0),($2|0),($89|0))|0);
 $95 = (getTempRet0() | 0);
 $96 = (___muldi3(($13|0),($35|0),($2|0),($89|0))|0);
 $97 = (getTempRet0() | 0);
 $98 = (___muldi3(($14|0),($39|0),($2|0),($89|0))|0);
 $99 = (getTempRet0() | 0);
 $100 = (___muldi3(($15|0),($43|0),($2|0),($89|0))|0);
 $101 = (getTempRet0() | 0);
 $102 = (___muldi3(($16|0),($47|0),($2|0),($89|0))|0);
 $103 = (getTempRet0() | 0);
 $104 = (___muldi3(($17|0),($51|0),($2|0),($89|0))|0);
 $105 = (getTempRet0() | 0);
 $106 = ($mul26|0)<(0);
 $107 = $106 << 31 >> 31;
 $108 = (___muldi3(($mul26|0),($107|0),($2|0),($89|0))|0);
 $109 = (getTempRet0() | 0);
 $110 = (___muldi3(($mul27|0),($85|0),($2|0),($89|0))|0);
 $111 = (getTempRet0() | 0);
 $112 = ($3|0)<(0);
 $113 = $112 << 31 >> 31;
 $114 = (___muldi3(($10|0),($23|0),($3|0),($113|0))|0);
 $115 = (getTempRet0() | 0);
 $116 = ($mul29|0)<(0);
 $117 = $116 << 31 >> 31;
 $118 = (___muldi3(($11|0),($27|0),($mul29|0),($117|0))|0);
 $119 = (getTempRet0() | 0);
 $120 = (___muldi3(($12|0),($31|0),($3|0),($113|0))|0);
 $121 = (getTempRet0() | 0);
 $122 = (___muldi3(($13|0),($35|0),($mul29|0),($117|0))|0);
 $123 = (getTempRet0() | 0);
 $124 = (___muldi3(($14|0),($39|0),($3|0),($113|0))|0);
 $125 = (getTempRet0() | 0);
 $126 = (___muldi3(($15|0),($43|0),($mul29|0),($117|0))|0);
 $127 = (getTempRet0() | 0);
 $128 = (___muldi3(($16|0),($47|0),($3|0),($113|0))|0);
 $129 = (getTempRet0() | 0);
 $130 = ($mul25|0)<(0);
 $131 = $130 << 31 >> 31;
 $132 = (___muldi3(($mul25|0),($131|0),($mul29|0),($117|0))|0);
 $133 = (getTempRet0() | 0);
 $134 = (___muldi3(($mul26|0),($107|0),($3|0),($113|0))|0);
 $135 = (getTempRet0() | 0);
 $136 = (___muldi3(($mul27|0),($85|0),($mul29|0),($117|0))|0);
 $137 = (getTempRet0() | 0);
 $138 = ($4|0)<(0);
 $139 = $138 << 31 >> 31;
 $140 = (___muldi3(($10|0),($23|0),($4|0),($139|0))|0);
 $141 = (getTempRet0() | 0);
 $142 = (___muldi3(($11|0),($27|0),($4|0),($139|0))|0);
 $143 = (getTempRet0() | 0);
 $144 = (___muldi3(($12|0),($31|0),($4|0),($139|0))|0);
 $145 = (getTempRet0() | 0);
 $146 = (___muldi3(($13|0),($35|0),($4|0),($139|0))|0);
 $147 = (getTempRet0() | 0);
 $148 = (___muldi3(($14|0),($39|0),($4|0),($139|0))|0);
 $149 = (getTempRet0() | 0);
 $150 = (___muldi3(($15|0),($43|0),($4|0),($139|0))|0);
 $151 = (getTempRet0() | 0);
 $152 = ($mul24|0)<(0);
 $153 = $152 << 31 >> 31;
 $154 = (___muldi3(($mul24|0),($153|0),($4|0),($139|0))|0);
 $155 = (getTempRet0() | 0);
 $156 = (___muldi3(($mul25|0),($131|0),($4|0),($139|0))|0);
 $157 = (getTempRet0() | 0);
 $158 = (___muldi3(($mul26|0),($107|0),($4|0),($139|0))|0);
 $159 = (getTempRet0() | 0);
 $160 = (___muldi3(($mul27|0),($85|0),($4|0),($139|0))|0);
 $161 = (getTempRet0() | 0);
 $162 = ($5|0)<(0);
 $163 = $162 << 31 >> 31;
 $164 = (___muldi3(($10|0),($23|0),($5|0),($163|0))|0);
 $165 = (getTempRet0() | 0);
 $166 = ($mul30|0)<(0);
 $167 = $166 << 31 >> 31;
 $168 = (___muldi3(($11|0),($27|0),($mul30|0),($167|0))|0);
 $169 = (getTempRet0() | 0);
 $170 = (___muldi3(($12|0),($31|0),($5|0),($163|0))|0);
 $171 = (getTempRet0() | 0);
 $172 = (___muldi3(($13|0),($35|0),($mul30|0),($167|0))|0);
 $173 = (getTempRet0() | 0);
 $174 = (___muldi3(($14|0),($39|0),($5|0),($163|0))|0);
 $175 = (getTempRet0() | 0);
 $176 = ($mul23|0)<(0);
 $177 = $176 << 31 >> 31;
 $178 = (___muldi3(($mul23|0),($177|0),($mul30|0),($167|0))|0);
 $179 = (getTempRet0() | 0);
 $180 = (___muldi3(($mul24|0),($153|0),($5|0),($163|0))|0);
 $181 = (getTempRet0() | 0);
 $182 = (___muldi3(($mul25|0),($131|0),($mul30|0),($167|0))|0);
 $183 = (getTempRet0() | 0);
 $184 = (___muldi3(($mul26|0),($107|0),($5|0),($163|0))|0);
 $185 = (getTempRet0() | 0);
 $186 = (___muldi3(($mul27|0),($85|0),($mul30|0),($167|0))|0);
 $187 = (getTempRet0() | 0);
 $188 = ($6|0)<(0);
 $189 = $188 << 31 >> 31;
 $190 = (___muldi3(($10|0),($23|0),($6|0),($189|0))|0);
 $191 = (getTempRet0() | 0);
 $192 = (___muldi3(($11|0),($27|0),($6|0),($189|0))|0);
 $193 = (getTempRet0() | 0);
 $194 = (___muldi3(($12|0),($31|0),($6|0),($189|0))|0);
 $195 = (getTempRet0() | 0);
 $196 = (___muldi3(($13|0),($35|0),($6|0),($189|0))|0);
 $197 = (getTempRet0() | 0);
 $198 = ($mul22|0)<(0);
 $199 = $198 << 31 >> 31;
 $200 = (___muldi3(($mul22|0),($199|0),($6|0),($189|0))|0);
 $201 = (getTempRet0() | 0);
 $202 = (___muldi3(($mul23|0),($177|0),($6|0),($189|0))|0);
 $203 = (getTempRet0() | 0);
 $204 = (___muldi3(($mul24|0),($153|0),($6|0),($189|0))|0);
 $205 = (getTempRet0() | 0);
 $206 = (___muldi3(($mul25|0),($131|0),($6|0),($189|0))|0);
 $207 = (getTempRet0() | 0);
 $208 = (___muldi3(($mul26|0),($107|0),($6|0),($189|0))|0);
 $209 = (getTempRet0() | 0);
 $210 = (___muldi3(($mul27|0),($85|0),($6|0),($189|0))|0);
 $211 = (getTempRet0() | 0);
 $212 = ($7|0)<(0);
 $213 = $212 << 31 >> 31;
 $214 = (___muldi3(($10|0),($23|0),($7|0),($213|0))|0);
 $215 = (getTempRet0() | 0);
 $216 = ($mul31|0)<(0);
 $217 = $216 << 31 >> 31;
 $218 = (___muldi3(($11|0),($27|0),($mul31|0),($217|0))|0);
 $219 = (getTempRet0() | 0);
 $220 = (___muldi3(($12|0),($31|0),($7|0),($213|0))|0);
 $221 = (getTempRet0() | 0);
 $222 = ($mul21|0)<(0);
 $223 = $222 << 31 >> 31;
 $224 = (___muldi3(($mul21|0),($223|0),($mul31|0),($217|0))|0);
 $225 = (getTempRet0() | 0);
 $226 = (___muldi3(($mul22|0),($199|0),($7|0),($213|0))|0);
 $227 = (getTempRet0() | 0);
 $228 = (___muldi3(($mul23|0),($177|0),($mul31|0),($217|0))|0);
 $229 = (getTempRet0() | 0);
 $230 = (___muldi3(($mul24|0),($153|0),($7|0),($213|0))|0);
 $231 = (getTempRet0() | 0);
 $232 = (___muldi3(($mul25|0),($131|0),($mul31|0),($217|0))|0);
 $233 = (getTempRet0() | 0);
 $234 = (___muldi3(($mul26|0),($107|0),($7|0),($213|0))|0);
 $235 = (getTempRet0() | 0);
 $236 = (___muldi3(($mul27|0),($85|0),($mul31|0),($217|0))|0);
 $237 = (getTempRet0() | 0);
 $238 = ($8|0)<(0);
 $239 = $238 << 31 >> 31;
 $240 = (___muldi3(($10|0),($23|0),($8|0),($239|0))|0);
 $241 = (getTempRet0() | 0);
 $242 = (___muldi3(($11|0),($27|0),($8|0),($239|0))|0);
 $243 = (getTempRet0() | 0);
 $244 = ($mul20|0)<(0);
 $245 = $244 << 31 >> 31;
 $246 = (___muldi3(($mul20|0),($245|0),($8|0),($239|0))|0);
 $247 = (getTempRet0() | 0);
 $248 = (___muldi3(($mul21|0),($223|0),($8|0),($239|0))|0);
 $249 = (getTempRet0() | 0);
 $250 = (___muldi3(($mul22|0),($199|0),($8|0),($239|0))|0);
 $251 = (getTempRet0() | 0);
 $252 = (___muldi3(($mul23|0),($177|0),($8|0),($239|0))|0);
 $253 = (getTempRet0() | 0);
 $254 = (___muldi3(($mul24|0),($153|0),($8|0),($239|0))|0);
 $255 = (getTempRet0() | 0);
 $256 = (___muldi3(($mul25|0),($131|0),($8|0),($239|0))|0);
 $257 = (getTempRet0() | 0);
 $258 = (___muldi3(($mul26|0),($107|0),($8|0),($239|0))|0);
 $259 = (getTempRet0() | 0);
 $260 = (___muldi3(($mul27|0),($85|0),($8|0),($239|0))|0);
 $261 = (getTempRet0() | 0);
 $262 = ($9|0)<(0);
 $263 = $262 << 31 >> 31;
 $264 = (___muldi3(($10|0),($23|0),($9|0),($263|0))|0);
 $265 = (getTempRet0() | 0);
 $266 = ($mul32|0)<(0);
 $267 = $266 << 31 >> 31;
 $268 = ($mul|0)<(0);
 $269 = $268 << 31 >> 31;
 $270 = (___muldi3(($mul|0),($269|0),($mul32|0),($267|0))|0);
 $271 = (getTempRet0() | 0);
 $272 = (___muldi3(($mul20|0),($245|0),($9|0),($263|0))|0);
 $273 = (getTempRet0() | 0);
 $274 = (___muldi3(($mul21|0),($223|0),($mul32|0),($267|0))|0);
 $275 = (getTempRet0() | 0);
 $276 = (___muldi3(($mul22|0),($199|0),($9|0),($263|0))|0);
 $277 = (getTempRet0() | 0);
 $278 = (___muldi3(($mul23|0),($177|0),($mul32|0),($267|0))|0);
 $279 = (getTempRet0() | 0);
 $280 = (___muldi3(($mul24|0),($153|0),($9|0),($263|0))|0);
 $281 = (getTempRet0() | 0);
 $282 = (___muldi3(($mul25|0),($131|0),($mul32|0),($267|0))|0);
 $283 = (getTempRet0() | 0);
 $284 = (___muldi3(($mul26|0),($107|0),($9|0),($263|0))|0);
 $285 = (getTempRet0() | 0);
 $286 = (___muldi3(($mul27|0),($85|0),($mul32|0),($267|0))|0);
 $287 = (getTempRet0() | 0);
 $288 = (_i64Add(($270|0),($271|0),($24|0),($25|0))|0);
 $289 = (getTempRet0() | 0);
 $290 = (_i64Add(($288|0),($289|0),($246|0),($247|0))|0);
 $291 = (getTempRet0() | 0);
 $292 = (_i64Add(($290|0),($291|0),($224|0),($225|0))|0);
 $293 = (getTempRet0() | 0);
 $294 = (_i64Add(($292|0),($293|0),($200|0),($201|0))|0);
 $295 = (getTempRet0() | 0);
 $296 = (_i64Add(($294|0),($295|0),($178|0),($179|0))|0);
 $297 = (getTempRet0() | 0);
 $298 = (_i64Add(($296|0),($297|0),($154|0),($155|0))|0);
 $299 = (getTempRet0() | 0);
 $300 = (_i64Add(($298|0),($299|0),($132|0),($133|0))|0);
 $301 = (getTempRet0() | 0);
 $302 = (_i64Add(($300|0),($301|0),($108|0),($109|0))|0);
 $303 = (getTempRet0() | 0);
 $304 = (_i64Add(($302|0),($303|0),($86|0),($87|0))|0);
 $305 = (getTempRet0() | 0);
 $306 = (_i64Add(($28|0),($29|0),($64|0),($65|0))|0);
 $307 = (getTempRet0() | 0);
 $308 = (_i64Add(($118|0),($119|0),($140|0),($141|0))|0);
 $309 = (getTempRet0() | 0);
 $310 = (_i64Add(($308|0),($309|0),($94|0),($95|0))|0);
 $311 = (getTempRet0() | 0);
 $312 = (_i64Add(($310|0),($311|0),($72|0),($73|0))|0);
 $313 = (getTempRet0() | 0);
 $314 = (_i64Add(($312|0),($313|0),($40|0),($41|0))|0);
 $315 = (getTempRet0() | 0);
 $316 = (_i64Add(($314|0),($315|0),($278|0),($279|0))|0);
 $317 = (getTempRet0() | 0);
 $318 = (_i64Add(($316|0),($317|0),($254|0),($255|0))|0);
 $319 = (getTempRet0() | 0);
 $320 = (_i64Add(($318|0),($319|0),($232|0),($233|0))|0);
 $321 = (getTempRet0() | 0);
 $322 = (_i64Add(($320|0),($321|0),($208|0),($209|0))|0);
 $323 = (getTempRet0() | 0);
 $324 = (_i64Add(($322|0),($323|0),($186|0),($187|0))|0);
 $325 = (getTempRet0() | 0);
 $326 = (_i64Add(($304|0),($305|0),33554432,0)|0);
 $327 = (getTempRet0() | 0);
 $328 = (_bitshift64Ashr(($326|0),($327|0),26)|0);
 $329 = (getTempRet0() | 0);
 $330 = (_i64Add(($306|0),($307|0),($272|0),($273|0))|0);
 $331 = (getTempRet0() | 0);
 $332 = (_i64Add(($330|0),($331|0),($248|0),($249|0))|0);
 $333 = (getTempRet0() | 0);
 $334 = (_i64Add(($332|0),($333|0),($226|0),($227|0))|0);
 $335 = (getTempRet0() | 0);
 $336 = (_i64Add(($334|0),($335|0),($202|0),($203|0))|0);
 $337 = (getTempRet0() | 0);
 $338 = (_i64Add(($336|0),($337|0),($180|0),($181|0))|0);
 $339 = (getTempRet0() | 0);
 $340 = (_i64Add(($338|0),($339|0),($156|0),($157|0))|0);
 $341 = (getTempRet0() | 0);
 $342 = (_i64Add(($340|0),($341|0),($134|0),($135|0))|0);
 $343 = (getTempRet0() | 0);
 $344 = (_i64Add(($342|0),($343|0),($110|0),($111|0))|0);
 $345 = (getTempRet0() | 0);
 $346 = (_i64Add(($344|0),($345|0),($328|0),($329|0))|0);
 $347 = (getTempRet0() | 0);
 $348 = $326 & -67108864;
 $349 = (_i64Subtract(($304|0),($305|0),($348|0),($327|0))|0);
 $350 = (getTempRet0() | 0);
 $351 = (_i64Add(($324|0),($325|0),33554432,0)|0);
 $352 = (getTempRet0() | 0);
 $353 = (_bitshift64Ashr(($351|0),($352|0),26)|0);
 $354 = (getTempRet0() | 0);
 $355 = (_i64Add(($142|0),($143|0),($164|0),($165|0))|0);
 $356 = (getTempRet0() | 0);
 $357 = (_i64Add(($355|0),($356|0),($120|0),($121|0))|0);
 $358 = (getTempRet0() | 0);
 $359 = (_i64Add(($357|0),($358|0),($96|0),($97|0))|0);
 $360 = (getTempRet0() | 0);
 $361 = (_i64Add(($359|0),($360|0),($74|0),($75|0))|0);
 $362 = (getTempRet0() | 0);
 $363 = (_i64Add(($361|0),($362|0),($44|0),($45|0))|0);
 $364 = (getTempRet0() | 0);
 $365 = (_i64Add(($363|0),($364|0),($280|0),($281|0))|0);
 $366 = (getTempRet0() | 0);
 $367 = (_i64Add(($365|0),($366|0),($256|0),($257|0))|0);
 $368 = (getTempRet0() | 0);
 $369 = (_i64Add(($367|0),($368|0),($234|0),($235|0))|0);
 $370 = (getTempRet0() | 0);
 $371 = (_i64Add(($369|0),($370|0),($210|0),($211|0))|0);
 $372 = (getTempRet0() | 0);
 $373 = (_i64Add(($371|0),($372|0),($353|0),($354|0))|0);
 $374 = (getTempRet0() | 0);
 $375 = $351 & -67108864;
 $376 = (_i64Subtract(($324|0),($325|0),($375|0),($352|0))|0);
 $377 = (getTempRet0() | 0);
 $378 = (_i64Add(($346|0),($347|0),16777216,0)|0);
 $379 = (getTempRet0() | 0);
 $380 = (_bitshift64Ashr(($378|0),($379|0),25)|0);
 $381 = (getTempRet0() | 0);
 $382 = (_i64Add(($68|0),($69|0),($90|0),($91|0))|0);
 $383 = (getTempRet0() | 0);
 $384 = (_i64Add(($382|0),($383|0),($32|0),($33|0))|0);
 $385 = (getTempRet0() | 0);
 $386 = (_i64Add(($384|0),($385|0),($274|0),($275|0))|0);
 $387 = (getTempRet0() | 0);
 $388 = (_i64Add(($386|0),($387|0),($250|0),($251|0))|0);
 $389 = (getTempRet0() | 0);
 $390 = (_i64Add(($388|0),($389|0),($228|0),($229|0))|0);
 $391 = (getTempRet0() | 0);
 $392 = (_i64Add(($390|0),($391|0),($204|0),($205|0))|0);
 $393 = (getTempRet0() | 0);
 $394 = (_i64Add(($392|0),($393|0),($182|0),($183|0))|0);
 $395 = (getTempRet0() | 0);
 $396 = (_i64Add(($394|0),($395|0),($158|0),($159|0))|0);
 $397 = (getTempRet0() | 0);
 $398 = (_i64Add(($396|0),($397|0),($136|0),($137|0))|0);
 $399 = (getTempRet0() | 0);
 $400 = (_i64Add(($398|0),($399|0),($380|0),($381|0))|0);
 $401 = (getTempRet0() | 0);
 $402 = $378 & -33554432;
 $403 = (_i64Subtract(($346|0),($347|0),($402|0),0)|0);
 $404 = (getTempRet0() | 0);
 $405 = (_i64Add(($373|0),($374|0),16777216,0)|0);
 $406 = (getTempRet0() | 0);
 $407 = (_bitshift64Ashr(($405|0),($406|0),25)|0);
 $408 = (getTempRet0() | 0);
 $409 = (_i64Add(($168|0),($169|0),($190|0),($191|0))|0);
 $410 = (getTempRet0() | 0);
 $411 = (_i64Add(($409|0),($410|0),($144|0),($145|0))|0);
 $412 = (getTempRet0() | 0);
 $413 = (_i64Add(($411|0),($412|0),($122|0),($123|0))|0);
 $414 = (getTempRet0() | 0);
 $415 = (_i64Add(($413|0),($414|0),($98|0),($99|0))|0);
 $416 = (getTempRet0() | 0);
 $417 = (_i64Add(($415|0),($416|0),($76|0),($77|0))|0);
 $418 = (getTempRet0() | 0);
 $419 = (_i64Add(($417|0),($418|0),($48|0),($49|0))|0);
 $420 = (getTempRet0() | 0);
 $421 = (_i64Add(($419|0),($420|0),($282|0),($283|0))|0);
 $422 = (getTempRet0() | 0);
 $423 = (_i64Add(($421|0),($422|0),($258|0),($259|0))|0);
 $424 = (getTempRet0() | 0);
 $425 = (_i64Add(($423|0),($424|0),($236|0),($237|0))|0);
 $426 = (getTempRet0() | 0);
 $427 = (_i64Add(($425|0),($426|0),($407|0),($408|0))|0);
 $428 = (getTempRet0() | 0);
 $429 = $405 & -33554432;
 $430 = (_i64Subtract(($373|0),($374|0),($429|0),0)|0);
 $431 = (getTempRet0() | 0);
 $432 = (_i64Add(($400|0),($401|0),33554432,0)|0);
 $433 = (getTempRet0() | 0);
 $434 = (_bitshift64Ashr(($432|0),($433|0),26)|0);
 $435 = (getTempRet0() | 0);
 $436 = (_i64Add(($92|0),($93|0),($114|0),($115|0))|0);
 $437 = (getTempRet0() | 0);
 $438 = (_i64Add(($436|0),($437|0),($70|0),($71|0))|0);
 $439 = (getTempRet0() | 0);
 $440 = (_i64Add(($438|0),($439|0),($36|0),($37|0))|0);
 $441 = (getTempRet0() | 0);
 $442 = (_i64Add(($440|0),($441|0),($276|0),($277|0))|0);
 $443 = (getTempRet0() | 0);
 $444 = (_i64Add(($442|0),($443|0),($252|0),($253|0))|0);
 $445 = (getTempRet0() | 0);
 $446 = (_i64Add(($444|0),($445|0),($230|0),($231|0))|0);
 $447 = (getTempRet0() | 0);
 $448 = (_i64Add(($446|0),($447|0),($206|0),($207|0))|0);
 $449 = (getTempRet0() | 0);
 $450 = (_i64Add(($448|0),($449|0),($184|0),($185|0))|0);
 $451 = (getTempRet0() | 0);
 $452 = (_i64Add(($450|0),($451|0),($160|0),($161|0))|0);
 $453 = (getTempRet0() | 0);
 $454 = (_i64Add(($452|0),($453|0),($434|0),($435|0))|0);
 $455 = (getTempRet0() | 0);
 $456 = $432 & -67108864;
 $457 = (_i64Subtract(($400|0),($401|0),($456|0),0)|0);
 $458 = (getTempRet0() | 0);
 $459 = (_i64Add(($427|0),($428|0),33554432,0)|0);
 $460 = (getTempRet0() | 0);
 $461 = (_bitshift64Ashr(($459|0),($460|0),26)|0);
 $462 = (getTempRet0() | 0);
 $463 = (_i64Add(($192|0),($193|0),($214|0),($215|0))|0);
 $464 = (getTempRet0() | 0);
 $465 = (_i64Add(($463|0),($464|0),($170|0),($171|0))|0);
 $466 = (getTempRet0() | 0);
 $467 = (_i64Add(($465|0),($466|0),($146|0),($147|0))|0);
 $468 = (getTempRet0() | 0);
 $469 = (_i64Add(($467|0),($468|0),($124|0),($125|0))|0);
 $470 = (getTempRet0() | 0);
 $471 = (_i64Add(($469|0),($470|0),($100|0),($101|0))|0);
 $472 = (getTempRet0() | 0);
 $473 = (_i64Add(($471|0),($472|0),($78|0),($79|0))|0);
 $474 = (getTempRet0() | 0);
 $475 = (_i64Add(($473|0),($474|0),($52|0),($53|0))|0);
 $476 = (getTempRet0() | 0);
 $477 = (_i64Add(($475|0),($476|0),($284|0),($285|0))|0);
 $478 = (getTempRet0() | 0);
 $479 = (_i64Add(($477|0),($478|0),($260|0),($261|0))|0);
 $480 = (getTempRet0() | 0);
 $481 = (_i64Add(($479|0),($480|0),($461|0),($462|0))|0);
 $482 = (getTempRet0() | 0);
 $483 = $459 & -67108864;
 $484 = (_i64Subtract(($427|0),($428|0),($483|0),0)|0);
 $485 = (getTempRet0() | 0);
 $486 = (_i64Add(($454|0),($455|0),16777216,0)|0);
 $487 = (getTempRet0() | 0);
 $488 = (_bitshift64Ashr(($486|0),($487|0),25)|0);
 $489 = (getTempRet0() | 0);
 $490 = (_i64Add(($488|0),($489|0),($376|0),($377|0))|0);
 $491 = (getTempRet0() | 0);
 $492 = $486 & -33554432;
 $493 = (_i64Subtract(($454|0),($455|0),($492|0),0)|0);
 $494 = (getTempRet0() | 0);
 $495 = (_i64Add(($481|0),($482|0),16777216,0)|0);
 $496 = (getTempRet0() | 0);
 $497 = (_bitshift64Ashr(($495|0),($496|0),25)|0);
 $498 = (getTempRet0() | 0);
 $499 = (_i64Add(($218|0),($219|0),($240|0),($241|0))|0);
 $500 = (getTempRet0() | 0);
 $501 = (_i64Add(($499|0),($500|0),($194|0),($195|0))|0);
 $502 = (getTempRet0() | 0);
 $503 = (_i64Add(($501|0),($502|0),($172|0),($173|0))|0);
 $504 = (getTempRet0() | 0);
 $505 = (_i64Add(($503|0),($504|0),($148|0),($149|0))|0);
 $506 = (getTempRet0() | 0);
 $507 = (_i64Add(($505|0),($506|0),($126|0),($127|0))|0);
 $508 = (getTempRet0() | 0);
 $509 = (_i64Add(($507|0),($508|0),($102|0),($103|0))|0);
 $510 = (getTempRet0() | 0);
 $511 = (_i64Add(($509|0),($510|0),($80|0),($81|0))|0);
 $512 = (getTempRet0() | 0);
 $513 = (_i64Add(($511|0),($512|0),($56|0),($57|0))|0);
 $514 = (getTempRet0() | 0);
 $515 = (_i64Add(($513|0),($514|0),($286|0),($287|0))|0);
 $516 = (getTempRet0() | 0);
 $517 = (_i64Add(($515|0),($516|0),($497|0),($498|0))|0);
 $518 = (getTempRet0() | 0);
 $519 = $495 & -33554432;
 $520 = (_i64Subtract(($481|0),($482|0),($519|0),0)|0);
 $521 = (getTempRet0() | 0);
 $522 = (_i64Add(($490|0),($491|0),33554432,0)|0);
 $523 = (getTempRet0() | 0);
 $524 = (_bitshift64Lshr(($522|0),($523|0),26)|0);
 $525 = (getTempRet0() | 0);
 $526 = (_i64Add(($430|0),($431|0),($524|0),($525|0))|0);
 $527 = (getTempRet0() | 0);
 $528 = $522 & -67108864;
 $529 = (_i64Subtract(($490|0),($491|0),($528|0),0)|0);
 $530 = (getTempRet0() | 0);
 $531 = (_i64Add(($517|0),($518|0),33554432,0)|0);
 $532 = (getTempRet0() | 0);
 $533 = (_bitshift64Ashr(($531|0),($532|0),26)|0);
 $534 = (getTempRet0() | 0);
 $535 = (_i64Add(($242|0),($243|0),($264|0),($265|0))|0);
 $536 = (getTempRet0() | 0);
 $537 = (_i64Add(($535|0),($536|0),($220|0),($221|0))|0);
 $538 = (getTempRet0() | 0);
 $539 = (_i64Add(($537|0),($538|0),($196|0),($197|0))|0);
 $540 = (getTempRet0() | 0);
 $541 = (_i64Add(($539|0),($540|0),($174|0),($175|0))|0);
 $542 = (getTempRet0() | 0);
 $543 = (_i64Add(($541|0),($542|0),($150|0),($151|0))|0);
 $544 = (getTempRet0() | 0);
 $545 = (_i64Add(($543|0),($544|0),($128|0),($129|0))|0);
 $546 = (getTempRet0() | 0);
 $547 = (_i64Add(($545|0),($546|0),($104|0),($105|0))|0);
 $548 = (getTempRet0() | 0);
 $549 = (_i64Add(($547|0),($548|0),($82|0),($83|0))|0);
 $550 = (getTempRet0() | 0);
 $551 = (_i64Add(($549|0),($550|0),($60|0),($61|0))|0);
 $552 = (getTempRet0() | 0);
 $553 = (_i64Add(($551|0),($552|0),($533|0),($534|0))|0);
 $554 = (getTempRet0() | 0);
 $555 = $531 & -67108864;
 $556 = (_i64Subtract(($517|0),($518|0),($555|0),0)|0);
 $557 = (getTempRet0() | 0);
 $558 = (_i64Add(($553|0),($554|0),16777216,0)|0);
 $559 = (getTempRet0() | 0);
 $560 = (_bitshift64Ashr(($558|0),($559|0),25)|0);
 $561 = (getTempRet0() | 0);
 $562 = (___muldi3(($560|0),($561|0),19,0)|0);
 $563 = (getTempRet0() | 0);
 $564 = (_i64Add(($562|0),($563|0),($349|0),($350|0))|0);
 $565 = (getTempRet0() | 0);
 $566 = $558 & -33554432;
 $567 = (_i64Subtract(($553|0),($554|0),($566|0),0)|0);
 $568 = (getTempRet0() | 0);
 $569 = (_i64Add(($564|0),($565|0),33554432,0)|0);
 $570 = (getTempRet0() | 0);
 $571 = (_bitshift64Lshr(($569|0),($570|0),26)|0);
 $572 = (getTempRet0() | 0);
 $573 = (_i64Add(($403|0),($404|0),($571|0),($572|0))|0);
 $574 = (getTempRet0() | 0);
 $575 = $569 & -67108864;
 $576 = (_i64Subtract(($564|0),($565|0),($575|0),0)|0);
 $577 = (getTempRet0() | 0);
 HEAP32[$h>>2] = $576;
 $arrayidx482 = ((($h)) + 4|0);
 HEAP32[$arrayidx482>>2] = $573;
 $arrayidx484 = ((($h)) + 8|0);
 HEAP32[$arrayidx484>>2] = $457;
 $arrayidx486 = ((($h)) + 12|0);
 HEAP32[$arrayidx486>>2] = $493;
 $arrayidx488 = ((($h)) + 16|0);
 HEAP32[$arrayidx488>>2] = $529;
 $arrayidx490 = ((($h)) + 20|0);
 HEAP32[$arrayidx490>>2] = $526;
 $arrayidx492 = ((($h)) + 24|0);
 HEAP32[$arrayidx492>>2] = $484;
 $arrayidx494 = ((($h)) + 28|0);
 HEAP32[$arrayidx494>>2] = $520;
 $arrayidx496 = ((($h)) + 32|0);
 HEAP32[$arrayidx496>>2] = $556;
 $arrayidx498 = ((($h)) + 36|0);
 HEAP32[$arrayidx498>>2] = $567;
 return;
}
function _ge_dsm_precomp($r,$s) {
 $r = $r|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arraydecay15$i = 0, $arraydecay15$i23 = 0, $arraydecay3$i = 0, $arraydecay3$i$i = 0, $arraydecay4$i = 0, $arraydecay4$i19 = 0, $arraydecay5$i$i = 0, $arraydecay6$i = 0, $arraydecay6$i$i = 0, $arraydecay7$i = 0;
 var $arraydecay8$i$i = 0, $arraydecay9$i = 0, $arraydecay9$i22 = 0, $arrayidx1$i$i$i = 0, $arrayidx1$i23$i$i = 0, $arrayidx1$i5$i$i = 0, $arrayidx10 = 0, $arrayidx11$i$i$i = 0, $arrayidx11$i14$i$i = 0, $arrayidx11$i32$i$i = 0, $arrayidx12 = 0, $arrayidx12$i$i$i = 0, $arrayidx12$i15$i$i = 0, $arrayidx12$i33$i$i = 0, $arrayidx13$i$i$i = 0, $arrayidx13$i16$i$i = 0, $arrayidx13$i34$i$i = 0, $arrayidx14 = 0, $arrayidx14$i$i$i = 0, $arrayidx14$i17$i$i = 0;
 var $arrayidx14$i35$i$i = 0, $arrayidx15$i$i$i = 0, $arrayidx15$i18$i$i = 0, $arrayidx15$i36$i$i = 0, $arrayidx16$i$i$i = 0, $arrayidx16$i19$i$i = 0, $arrayidx16$i37$i$i = 0, $arrayidx17$i$i$i = 0, $arrayidx17$i20$i$i = 0, $arrayidx17$i38$i$i = 0, $arrayidx18$i$i$i = 0, $arrayidx18$i21$i$i = 0, $arrayidx18$i39$i$i = 0, $arrayidx19$i$i$i = 0, $arrayidx19$i22$i$i = 0, $arrayidx19$i40$i$i = 0, $arrayidx2 = 0, $arrayidx2$i$i$i = 0, $arrayidx2$i24$i$i = 0, $arrayidx2$i6$i$i = 0;
 var $arrayidx3$i$i$i = 0, $arrayidx3$i25$i$i = 0, $arrayidx3$i7$i$i = 0, $arrayidx4 = 0, $arrayidx4$i$i$i = 0, $arrayidx4$i26$i$i = 0, $arrayidx4$i8$i$i = 0, $arrayidx5$i$i$i = 0, $arrayidx5$i27$i$i = 0, $arrayidx5$i9$i$i = 0, $arrayidx6 = 0, $arrayidx6$i$i$i = 0, $arrayidx6$i10$i$i = 0, $arrayidx6$i28$i$i = 0, $arrayidx7$i$i$i = 0, $arrayidx7$i11$i$i = 0, $arrayidx7$i29$i$i = 0, $arrayidx8 = 0, $arrayidx8$i$i$i = 0, $arrayidx8$i12$i$i = 0;
 var $arrayidx8$i30$i$i = 0, $arrayidx9$i$i$i = 0, $arrayidx9$i13$i$i = 0, $arrayidx9$i31$i$i = 0, $q$i = 0, $s2 = 0, $t = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0;
 $q$i = sp + 480|0;
 $t = sp + 320|0;
 $s2 = sp + 160|0;
 $u = sp;
 _ge_p3_to_cached($r,$s);
 $0 = HEAP32[$s>>2]|0;
 $arrayidx1$i$i$i = ((($s)) + 4|0);
 $1 = HEAP32[$arrayidx1$i$i$i>>2]|0;
 $arrayidx2$i$i$i = ((($s)) + 8|0);
 $2 = HEAP32[$arrayidx2$i$i$i>>2]|0;
 $arrayidx3$i$i$i = ((($s)) + 12|0);
 $3 = HEAP32[$arrayidx3$i$i$i>>2]|0;
 $arrayidx4$i$i$i = ((($s)) + 16|0);
 $4 = HEAP32[$arrayidx4$i$i$i>>2]|0;
 $arrayidx5$i$i$i = ((($s)) + 20|0);
 $5 = HEAP32[$arrayidx5$i$i$i>>2]|0;
 $arrayidx6$i$i$i = ((($s)) + 24|0);
 $6 = HEAP32[$arrayidx6$i$i$i>>2]|0;
 $arrayidx7$i$i$i = ((($s)) + 28|0);
 $7 = HEAP32[$arrayidx7$i$i$i>>2]|0;
 $arrayidx8$i$i$i = ((($s)) + 32|0);
 $8 = HEAP32[$arrayidx8$i$i$i>>2]|0;
 $arrayidx9$i$i$i = ((($s)) + 36|0);
 $9 = HEAP32[$arrayidx9$i$i$i>>2]|0;
 HEAP32[$q$i>>2] = $0;
 $arrayidx11$i$i$i = ((($q$i)) + 4|0);
 HEAP32[$arrayidx11$i$i$i>>2] = $1;
 $arrayidx12$i$i$i = ((($q$i)) + 8|0);
 HEAP32[$arrayidx12$i$i$i>>2] = $2;
 $arrayidx13$i$i$i = ((($q$i)) + 12|0);
 HEAP32[$arrayidx13$i$i$i>>2] = $3;
 $arrayidx14$i$i$i = ((($q$i)) + 16|0);
 HEAP32[$arrayidx14$i$i$i>>2] = $4;
 $arrayidx15$i$i$i = ((($q$i)) + 20|0);
 HEAP32[$arrayidx15$i$i$i>>2] = $5;
 $arrayidx16$i$i$i = ((($q$i)) + 24|0);
 HEAP32[$arrayidx16$i$i$i>>2] = $6;
 $arrayidx17$i$i$i = ((($q$i)) + 28|0);
 HEAP32[$arrayidx17$i$i$i>>2] = $7;
 $arrayidx18$i$i$i = ((($q$i)) + 32|0);
 HEAP32[$arrayidx18$i$i$i>>2] = $8;
 $arrayidx19$i$i$i = ((($q$i)) + 36|0);
 HEAP32[$arrayidx19$i$i$i>>2] = $9;
 $arraydecay3$i$i = ((($q$i)) + 40|0);
 $arraydecay5$i$i = ((($s)) + 40|0);
 $10 = HEAP32[$arraydecay5$i$i>>2]|0;
 $arrayidx1$i23$i$i = ((($s)) + 44|0);
 $11 = HEAP32[$arrayidx1$i23$i$i>>2]|0;
 $arrayidx2$i24$i$i = ((($s)) + 48|0);
 $12 = HEAP32[$arrayidx2$i24$i$i>>2]|0;
 $arrayidx3$i25$i$i = ((($s)) + 52|0);
 $13 = HEAP32[$arrayidx3$i25$i$i>>2]|0;
 $arrayidx4$i26$i$i = ((($s)) + 56|0);
 $14 = HEAP32[$arrayidx4$i26$i$i>>2]|0;
 $arrayidx5$i27$i$i = ((($s)) + 60|0);
 $15 = HEAP32[$arrayidx5$i27$i$i>>2]|0;
 $arrayidx6$i28$i$i = ((($s)) + 64|0);
 $16 = HEAP32[$arrayidx6$i28$i$i>>2]|0;
 $arrayidx7$i29$i$i = ((($s)) + 68|0);
 $17 = HEAP32[$arrayidx7$i29$i$i>>2]|0;
 $arrayidx8$i30$i$i = ((($s)) + 72|0);
 $18 = HEAP32[$arrayidx8$i30$i$i>>2]|0;
 $arrayidx9$i31$i$i = ((($s)) + 76|0);
 $19 = HEAP32[$arrayidx9$i31$i$i>>2]|0;
 HEAP32[$arraydecay3$i$i>>2] = $10;
 $arrayidx11$i32$i$i = ((($q$i)) + 44|0);
 HEAP32[$arrayidx11$i32$i$i>>2] = $11;
 $arrayidx12$i33$i$i = ((($q$i)) + 48|0);
 HEAP32[$arrayidx12$i33$i$i>>2] = $12;
 $arrayidx13$i34$i$i = ((($q$i)) + 52|0);
 HEAP32[$arrayidx13$i34$i$i>>2] = $13;
 $arrayidx14$i35$i$i = ((($q$i)) + 56|0);
 HEAP32[$arrayidx14$i35$i$i>>2] = $14;
 $arrayidx15$i36$i$i = ((($q$i)) + 60|0);
 HEAP32[$arrayidx15$i36$i$i>>2] = $15;
 $arrayidx16$i37$i$i = ((($q$i)) + 64|0);
 HEAP32[$arrayidx16$i37$i$i>>2] = $16;
 $arrayidx17$i38$i$i = ((($q$i)) + 68|0);
 HEAP32[$arrayidx17$i38$i$i>>2] = $17;
 $arrayidx18$i39$i$i = ((($q$i)) + 72|0);
 HEAP32[$arrayidx18$i39$i$i>>2] = $18;
 $arrayidx19$i40$i$i = ((($q$i)) + 76|0);
 HEAP32[$arrayidx19$i40$i$i>>2] = $19;
 $arraydecay6$i$i = ((($q$i)) + 80|0);
 $arraydecay8$i$i = ((($s)) + 80|0);
 $20 = HEAP32[$arraydecay8$i$i>>2]|0;
 $arrayidx1$i5$i$i = ((($s)) + 84|0);
 $21 = HEAP32[$arrayidx1$i5$i$i>>2]|0;
 $arrayidx2$i6$i$i = ((($s)) + 88|0);
 $22 = HEAP32[$arrayidx2$i6$i$i>>2]|0;
 $arrayidx3$i7$i$i = ((($s)) + 92|0);
 $23 = HEAP32[$arrayidx3$i7$i$i>>2]|0;
 $arrayidx4$i8$i$i = ((($s)) + 96|0);
 $24 = HEAP32[$arrayidx4$i8$i$i>>2]|0;
 $arrayidx5$i9$i$i = ((($s)) + 100|0);
 $25 = HEAP32[$arrayidx5$i9$i$i>>2]|0;
 $arrayidx6$i10$i$i = ((($s)) + 104|0);
 $26 = HEAP32[$arrayidx6$i10$i$i>>2]|0;
 $arrayidx7$i11$i$i = ((($s)) + 108|0);
 $27 = HEAP32[$arrayidx7$i11$i$i>>2]|0;
 $arrayidx8$i12$i$i = ((($s)) + 112|0);
 $28 = HEAP32[$arrayidx8$i12$i$i>>2]|0;
 $arrayidx9$i13$i$i = ((($s)) + 116|0);
 $29 = HEAP32[$arrayidx9$i13$i$i>>2]|0;
 HEAP32[$arraydecay6$i$i>>2] = $20;
 $arrayidx11$i14$i$i = ((($q$i)) + 84|0);
 HEAP32[$arrayidx11$i14$i$i>>2] = $21;
 $arrayidx12$i15$i$i = ((($q$i)) + 88|0);
 HEAP32[$arrayidx12$i15$i$i>>2] = $22;
 $arrayidx13$i16$i$i = ((($q$i)) + 92|0);
 HEAP32[$arrayidx13$i16$i$i>>2] = $23;
 $arrayidx14$i17$i$i = ((($q$i)) + 96|0);
 HEAP32[$arrayidx14$i17$i$i>>2] = $24;
 $arrayidx15$i18$i$i = ((($q$i)) + 100|0);
 HEAP32[$arrayidx15$i18$i$i>>2] = $25;
 $arrayidx16$i19$i$i = ((($q$i)) + 104|0);
 HEAP32[$arrayidx16$i19$i$i>>2] = $26;
 $arrayidx17$i20$i$i = ((($q$i)) + 108|0);
 HEAP32[$arrayidx17$i20$i$i>>2] = $27;
 $arrayidx18$i21$i$i = ((($q$i)) + 112|0);
 HEAP32[$arrayidx18$i21$i$i>>2] = $28;
 $arrayidx19$i22$i$i = ((($q$i)) + 116|0);
 HEAP32[$arrayidx19$i22$i$i>>2] = $29;
 _ge_p2_dbl($t,$q$i);
 $arraydecay3$i = ((($t)) + 120|0);
 _fe_mul($s2,$t,$arraydecay3$i);
 $arraydecay4$i = ((($s2)) + 40|0);
 $arraydecay6$i = ((($t)) + 40|0);
 $arraydecay7$i = ((($t)) + 80|0);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 $arraydecay9$i = ((($s2)) + 80|0);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 $arraydecay15$i = ((($s2)) + 120|0);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s2,$r);
 _fe_mul($u,$t,$arraydecay3$i);
 $arraydecay4$i19 = ((($u)) + 40|0);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 $arraydecay9$i22 = ((($u)) + 80|0);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 $arraydecay15$i23 = ((($u)) + 120|0);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx2 = ((($r)) + 160|0);
 _ge_p3_to_cached($arrayidx2,$u);
 _ge_add($t,$s2,$arrayidx2);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx4 = ((($r)) + 320|0);
 _ge_p3_to_cached($arrayidx4,$u);
 _ge_add($t,$s2,$arrayidx4);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx6 = ((($r)) + 480|0);
 _ge_p3_to_cached($arrayidx6,$u);
 _ge_add($t,$s2,$arrayidx6);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx8 = ((($r)) + 640|0);
 _ge_p3_to_cached($arrayidx8,$u);
 _ge_add($t,$s2,$arrayidx8);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx10 = ((($r)) + 800|0);
 _ge_p3_to_cached($arrayidx10,$u);
 _ge_add($t,$s2,$arrayidx10);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx12 = ((($r)) + 960|0);
 _ge_p3_to_cached($arrayidx12,$u);
 _ge_add($t,$s2,$arrayidx12);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i19,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i22,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i23,$t,$arraydecay6$i);
 $arrayidx14 = ((($r)) + 1120|0);
 _ge_p3_to_cached($arrayidx14,$u);
 STACKTOP = sp;return;
}
function _ge_p3_to_cached($r,$p) {
 $r = $r|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add20$i = 0, $add21$i = 0, $add22$i = 0, $add23$i = 0, $add24$i = 0, $add25$i = 0, $add26$i = 0, $add27$i = 0, $add28$i = 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay11 = 0, $arraydecay12 = 0, $arraydecay3 = 0, $arraydecay8 = 0, $arrayidx1$i = 0, $arrayidx1$i36 = 0, $arrayidx11$i = 0, $arrayidx11$i45 = 0, $arrayidx12$i = 0, $arrayidx12$i46 = 0, $arrayidx13$i = 0, $arrayidx13$i47 = 0, $arrayidx14$i = 0, $arrayidx14$i48 = 0, $arrayidx15$i = 0, $arrayidx15$i49 = 0, $arrayidx16$i = 0, $arrayidx16$i50 = 0;
 var $arrayidx17$i = 0, $arrayidx17$i51 = 0, $arrayidx18$i = 0, $arrayidx18$i52 = 0, $arrayidx19$i = 0, $arrayidx19$i53 = 0, $arrayidx2$i = 0, $arrayidx2$i37 = 0, $arrayidx3$i = 0, $arrayidx3$i38 = 0, $arrayidx30$i = 0, $arrayidx30$i27 = 0, $arrayidx31$i = 0, $arrayidx31$i28 = 0, $arrayidx32$i = 0, $arrayidx32$i29 = 0, $arrayidx33$i = 0, $arrayidx33$i30 = 0, $arrayidx34$i = 0, $arrayidx34$i31 = 0;
 var $arrayidx35$i = 0, $arrayidx35$i32 = 0, $arrayidx36$i = 0, $arrayidx36$i33 = 0, $arrayidx37$i = 0, $arrayidx37$i34 = 0, $arrayidx38$i = 0, $arrayidx38$i35 = 0, $arrayidx4$i = 0, $arrayidx4$i39 = 0, $arrayidx5$i = 0, $arrayidx5$i40 = 0, $arrayidx6$i = 0, $arrayidx6$i41 = 0, $arrayidx7$i = 0, $arrayidx7$i42 = 0, $arrayidx8$i = 0, $arrayidx8$i43 = 0, $arrayidx9$i = 0, $arrayidx9$i44 = 0;
 var $sub$i = 0, $sub20$i = 0, $sub21$i = 0, $sub22$i = 0, $sub23$i = 0, $sub24$i = 0, $sub25$i = 0, $sub26$i = 0, $sub27$i = 0, $sub28$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay1 = ((($p)) + 40|0);
 $0 = HEAP32[$arraydecay1>>2]|0;
 $arrayidx1$i = ((($p)) + 44|0);
 $1 = HEAP32[$arrayidx1$i>>2]|0;
 $arrayidx2$i = ((($p)) + 48|0);
 $2 = HEAP32[$arrayidx2$i>>2]|0;
 $arrayidx3$i = ((($p)) + 52|0);
 $3 = HEAP32[$arrayidx3$i>>2]|0;
 $arrayidx4$i = ((($p)) + 56|0);
 $4 = HEAP32[$arrayidx4$i>>2]|0;
 $arrayidx5$i = ((($p)) + 60|0);
 $5 = HEAP32[$arrayidx5$i>>2]|0;
 $arrayidx6$i = ((($p)) + 64|0);
 $6 = HEAP32[$arrayidx6$i>>2]|0;
 $arrayidx7$i = ((($p)) + 68|0);
 $7 = HEAP32[$arrayidx7$i>>2]|0;
 $arrayidx8$i = ((($p)) + 72|0);
 $8 = HEAP32[$arrayidx8$i>>2]|0;
 $arrayidx9$i = ((($p)) + 76|0);
 $9 = HEAP32[$arrayidx9$i>>2]|0;
 $10 = HEAP32[$p>>2]|0;
 $arrayidx11$i = ((($p)) + 4|0);
 $11 = HEAP32[$arrayidx11$i>>2]|0;
 $arrayidx12$i = ((($p)) + 8|0);
 $12 = HEAP32[$arrayidx12$i>>2]|0;
 $arrayidx13$i = ((($p)) + 12|0);
 $13 = HEAP32[$arrayidx13$i>>2]|0;
 $arrayidx14$i = ((($p)) + 16|0);
 $14 = HEAP32[$arrayidx14$i>>2]|0;
 $arrayidx15$i = ((($p)) + 20|0);
 $15 = HEAP32[$arrayidx15$i>>2]|0;
 $arrayidx16$i = ((($p)) + 24|0);
 $16 = HEAP32[$arrayidx16$i>>2]|0;
 $arrayidx17$i = ((($p)) + 28|0);
 $17 = HEAP32[$arrayidx17$i>>2]|0;
 $arrayidx18$i = ((($p)) + 32|0);
 $18 = HEAP32[$arrayidx18$i>>2]|0;
 $arrayidx19$i = ((($p)) + 36|0);
 $19 = HEAP32[$arrayidx19$i>>2]|0;
 $add$i = (($10) + ($0))|0;
 $add20$i = (($11) + ($1))|0;
 $add21$i = (($12) + ($2))|0;
 $add22$i = (($13) + ($3))|0;
 $add23$i = (($14) + ($4))|0;
 $add24$i = (($15) + ($5))|0;
 $add25$i = (($16) + ($6))|0;
 $add26$i = (($17) + ($7))|0;
 $add27$i = (($18) + ($8))|0;
 $add28$i = (($19) + ($9))|0;
 HEAP32[$r>>2] = $add$i;
 $arrayidx30$i = ((($r)) + 4|0);
 HEAP32[$arrayidx30$i>>2] = $add20$i;
 $arrayidx31$i = ((($r)) + 8|0);
 HEAP32[$arrayidx31$i>>2] = $add21$i;
 $arrayidx32$i = ((($r)) + 12|0);
 HEAP32[$arrayidx32$i>>2] = $add22$i;
 $arrayidx33$i = ((($r)) + 16|0);
 HEAP32[$arrayidx33$i>>2] = $add23$i;
 $arrayidx34$i = ((($r)) + 20|0);
 HEAP32[$arrayidx34$i>>2] = $add24$i;
 $arrayidx35$i = ((($r)) + 24|0);
 HEAP32[$arrayidx35$i>>2] = $add25$i;
 $arrayidx36$i = ((($r)) + 28|0);
 HEAP32[$arrayidx36$i>>2] = $add26$i;
 $arrayidx37$i = ((($r)) + 32|0);
 HEAP32[$arrayidx37$i>>2] = $add27$i;
 $arrayidx38$i = ((($r)) + 36|0);
 HEAP32[$arrayidx38$i>>2] = $add28$i;
 $arraydecay3 = ((($r)) + 40|0);
 $20 = HEAP32[$arraydecay1>>2]|0;
 $21 = HEAP32[$arrayidx1$i>>2]|0;
 $22 = HEAP32[$arrayidx2$i>>2]|0;
 $23 = HEAP32[$arrayidx3$i>>2]|0;
 $24 = HEAP32[$arrayidx4$i>>2]|0;
 $25 = HEAP32[$arrayidx5$i>>2]|0;
 $26 = HEAP32[$arrayidx6$i>>2]|0;
 $27 = HEAP32[$arrayidx7$i>>2]|0;
 $28 = HEAP32[$arrayidx8$i>>2]|0;
 $29 = HEAP32[$arrayidx9$i>>2]|0;
 $30 = HEAP32[$p>>2]|0;
 $31 = HEAP32[$arrayidx11$i>>2]|0;
 $32 = HEAP32[$arrayidx12$i>>2]|0;
 $33 = HEAP32[$arrayidx13$i>>2]|0;
 $34 = HEAP32[$arrayidx14$i>>2]|0;
 $35 = HEAP32[$arrayidx15$i>>2]|0;
 $36 = HEAP32[$arrayidx16$i>>2]|0;
 $37 = HEAP32[$arrayidx17$i>>2]|0;
 $38 = HEAP32[$arrayidx18$i>>2]|0;
 $39 = HEAP32[$arrayidx19$i>>2]|0;
 $sub$i = (($20) - ($30))|0;
 $sub20$i = (($21) - ($31))|0;
 $sub21$i = (($22) - ($32))|0;
 $sub22$i = (($23) - ($33))|0;
 $sub23$i = (($24) - ($34))|0;
 $sub24$i = (($25) - ($35))|0;
 $sub25$i = (($26) - ($36))|0;
 $sub26$i = (($27) - ($37))|0;
 $sub27$i = (($28) - ($38))|0;
 $sub28$i = (($29) - ($39))|0;
 HEAP32[$arraydecay3>>2] = $sub$i;
 $arrayidx30$i27 = ((($r)) + 44|0);
 HEAP32[$arrayidx30$i27>>2] = $sub20$i;
 $arrayidx31$i28 = ((($r)) + 48|0);
 HEAP32[$arrayidx31$i28>>2] = $sub21$i;
 $arrayidx32$i29 = ((($r)) + 52|0);
 HEAP32[$arrayidx32$i29>>2] = $sub22$i;
 $arrayidx33$i30 = ((($r)) + 56|0);
 HEAP32[$arrayidx33$i30>>2] = $sub23$i;
 $arrayidx34$i31 = ((($r)) + 60|0);
 HEAP32[$arrayidx34$i31>>2] = $sub24$i;
 $arrayidx35$i32 = ((($r)) + 64|0);
 HEAP32[$arrayidx35$i32>>2] = $sub25$i;
 $arrayidx36$i33 = ((($r)) + 68|0);
 HEAP32[$arrayidx36$i33>>2] = $sub26$i;
 $arrayidx37$i34 = ((($r)) + 72|0);
 HEAP32[$arrayidx37$i34>>2] = $sub27$i;
 $arrayidx38$i35 = ((($r)) + 76|0);
 HEAP32[$arrayidx38$i35>>2] = $sub28$i;
 $arraydecay8 = ((($r)) + 80|0);
 $arraydecay10 = ((($p)) + 80|0);
 $40 = HEAP32[$arraydecay10>>2]|0;
 $arrayidx1$i36 = ((($p)) + 84|0);
 $41 = HEAP32[$arrayidx1$i36>>2]|0;
 $arrayidx2$i37 = ((($p)) + 88|0);
 $42 = HEAP32[$arrayidx2$i37>>2]|0;
 $arrayidx3$i38 = ((($p)) + 92|0);
 $43 = HEAP32[$arrayidx3$i38>>2]|0;
 $arrayidx4$i39 = ((($p)) + 96|0);
 $44 = HEAP32[$arrayidx4$i39>>2]|0;
 $arrayidx5$i40 = ((($p)) + 100|0);
 $45 = HEAP32[$arrayidx5$i40>>2]|0;
 $arrayidx6$i41 = ((($p)) + 104|0);
 $46 = HEAP32[$arrayidx6$i41>>2]|0;
 $arrayidx7$i42 = ((($p)) + 108|0);
 $47 = HEAP32[$arrayidx7$i42>>2]|0;
 $arrayidx8$i43 = ((($p)) + 112|0);
 $48 = HEAP32[$arrayidx8$i43>>2]|0;
 $arrayidx9$i44 = ((($p)) + 116|0);
 $49 = HEAP32[$arrayidx9$i44>>2]|0;
 HEAP32[$arraydecay8>>2] = $40;
 $arrayidx11$i45 = ((($r)) + 84|0);
 HEAP32[$arrayidx11$i45>>2] = $41;
 $arrayidx12$i46 = ((($r)) + 88|0);
 HEAP32[$arrayidx12$i46>>2] = $42;
 $arrayidx13$i47 = ((($r)) + 92|0);
 HEAP32[$arrayidx13$i47>>2] = $43;
 $arrayidx14$i48 = ((($r)) + 96|0);
 HEAP32[$arrayidx14$i48>>2] = $44;
 $arrayidx15$i49 = ((($r)) + 100|0);
 HEAP32[$arrayidx15$i49>>2] = $45;
 $arrayidx16$i50 = ((($r)) + 104|0);
 HEAP32[$arrayidx16$i50>>2] = $46;
 $arrayidx17$i51 = ((($r)) + 108|0);
 HEAP32[$arrayidx17$i51>>2] = $47;
 $arrayidx18$i52 = ((($r)) + 112|0);
 HEAP32[$arrayidx18$i52>>2] = $48;
 $arrayidx19$i53 = ((($r)) + 116|0);
 HEAP32[$arrayidx19$i53>>2] = $49;
 $arraydecay11 = ((($r)) + 120|0);
 $arraydecay12 = ((($p)) + 120|0);
 _fe_mul($arraydecay11,$arraydecay12,272);
 return;
}
function _ge_p2_dbl($r,$p) {
 $r = $r|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add$i = 0, $add$i139 = 0, $add20$i = 0, $add20$i140 = 0, $add21$i = 0, $add21$i141 = 0, $add22$i = 0, $add22$i142 = 0, $add23$i = 0, $add23$i143 = 0, $add24$i = 0, $add24$i144 = 0, $add25$i = 0, $add25$i145 = 0, $add26$i = 0, $add26$i146 = 0, $add27$i = 0, $add27$i147 = 0, $add28$i = 0, $add28$i148 = 0;
 var $arraydecay3 = 0, $arraydecay4 = 0, $arraydecay5 = 0, $arraydecay7 = 0, $arraydecay9 = 0, $arrayidx1$i = 0, $arrayidx1$i121 = 0, $arrayidx1$i20 = 0, $arrayidx1$i47 = 0, $arrayidx11$i = 0, $arrayidx11$i130 = 0, $arrayidx12$i = 0, $arrayidx12$i131 = 0, $arrayidx13$i = 0, $arrayidx13$i132 = 0, $arrayidx14$i = 0, $arrayidx14$i133 = 0, $arrayidx15$i = 0, $arrayidx15$i134 = 0, $arrayidx16$i = 0;
 var $arrayidx16$i135 = 0, $arrayidx17$i = 0, $arrayidx17$i136 = 0, $arrayidx18$i = 0, $arrayidx18$i137 = 0, $arrayidx19$i = 0, $arrayidx19$i138 = 0, $arrayidx2$i = 0, $arrayidx2$i122 = 0, $arrayidx2$i21 = 0, $arrayidx2$i48 = 0, $arrayidx3$i = 0, $arrayidx3$i123 = 0, $arrayidx3$i22 = 0, $arrayidx3$i49 = 0, $arrayidx30$i = 0, $arrayidx31$i = 0, $arrayidx32$i = 0, $arrayidx33$i = 0, $arrayidx34$i = 0;
 var $arrayidx35$i = 0, $arrayidx36$i = 0, $arrayidx37$i = 0, $arrayidx38$i = 0, $arrayidx4$i = 0, $arrayidx4$i124 = 0, $arrayidx4$i23 = 0, $arrayidx4$i50 = 0, $arrayidx5$i = 0, $arrayidx5$i125 = 0, $arrayidx5$i24 = 0, $arrayidx5$i51 = 0, $arrayidx6$i = 0, $arrayidx6$i126 = 0, $arrayidx6$i25 = 0, $arrayidx6$i52 = 0, $arrayidx7$i = 0, $arrayidx7$i127 = 0, $arrayidx7$i26 = 0, $arrayidx7$i53 = 0;
 var $arrayidx8$i = 0, $arrayidx8$i128 = 0, $arrayidx8$i27 = 0, $arrayidx8$i54 = 0, $arrayidx9$i = 0, $arrayidx9$i129 = 0, $arrayidx9$i28 = 0, $arrayidx9$i55 = 0, $sub$i = 0, $sub$i102 = 0, $sub$i65 = 0, $sub20$i = 0, $sub20$i103 = 0, $sub20$i66 = 0, $sub21$i = 0, $sub21$i104 = 0, $sub21$i67 = 0, $sub22$i = 0, $sub22$i105 = 0, $sub22$i68 = 0;
 var $sub23$i = 0, $sub23$i106 = 0, $sub23$i69 = 0, $sub24$i = 0, $sub24$i107 = 0, $sub24$i70 = 0, $sub25$i = 0, $sub25$i108 = 0, $sub25$i71 = 0, $sub26$i = 0, $sub26$i109 = 0, $sub26$i72 = 0, $sub27$i = 0, $sub27$i110 = 0, $sub27$i73 = 0, $sub28$i = 0, $sub28$i111 = 0, $sub28$i74 = 0, $t0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $t0 = sp;
 _fe_sq($r,$p);
 $arraydecay3 = ((($r)) + 80|0);
 $arraydecay4 = ((($p)) + 40|0);
 _fe_sq($arraydecay3,$arraydecay4);
 $arraydecay5 = ((($r)) + 120|0);
 $arraydecay7 = ((($p)) + 80|0);
 _fe_sq2($arraydecay5,$arraydecay7);
 $arraydecay9 = ((($r)) + 40|0);
 $0 = HEAP32[$p>>2]|0;
 $arrayidx1$i = ((($p)) + 4|0);
 $1 = HEAP32[$arrayidx1$i>>2]|0;
 $arrayidx2$i = ((($p)) + 8|0);
 $2 = HEAP32[$arrayidx2$i>>2]|0;
 $arrayidx3$i = ((($p)) + 12|0);
 $3 = HEAP32[$arrayidx3$i>>2]|0;
 $arrayidx4$i = ((($p)) + 16|0);
 $4 = HEAP32[$arrayidx4$i>>2]|0;
 $arrayidx5$i = ((($p)) + 20|0);
 $5 = HEAP32[$arrayidx5$i>>2]|0;
 $arrayidx6$i = ((($p)) + 24|0);
 $6 = HEAP32[$arrayidx6$i>>2]|0;
 $arrayidx7$i = ((($p)) + 28|0);
 $7 = HEAP32[$arrayidx7$i>>2]|0;
 $arrayidx8$i = ((($p)) + 32|0);
 $8 = HEAP32[$arrayidx8$i>>2]|0;
 $arrayidx9$i = ((($p)) + 36|0);
 $9 = HEAP32[$arrayidx9$i>>2]|0;
 $10 = HEAP32[$arraydecay4>>2]|0;
 $arrayidx11$i = ((($p)) + 44|0);
 $11 = HEAP32[$arrayidx11$i>>2]|0;
 $arrayidx12$i = ((($p)) + 48|0);
 $12 = HEAP32[$arrayidx12$i>>2]|0;
 $arrayidx13$i = ((($p)) + 52|0);
 $13 = HEAP32[$arrayidx13$i>>2]|0;
 $arrayidx14$i = ((($p)) + 56|0);
 $14 = HEAP32[$arrayidx14$i>>2]|0;
 $arrayidx15$i = ((($p)) + 60|0);
 $15 = HEAP32[$arrayidx15$i>>2]|0;
 $arrayidx16$i = ((($p)) + 64|0);
 $16 = HEAP32[$arrayidx16$i>>2]|0;
 $arrayidx17$i = ((($p)) + 68|0);
 $17 = HEAP32[$arrayidx17$i>>2]|0;
 $arrayidx18$i = ((($p)) + 72|0);
 $18 = HEAP32[$arrayidx18$i>>2]|0;
 $arrayidx19$i = ((($p)) + 76|0);
 $19 = HEAP32[$arrayidx19$i>>2]|0;
 $add$i = (($10) + ($0))|0;
 $add20$i = (($11) + ($1))|0;
 $add21$i = (($12) + ($2))|0;
 $add22$i = (($13) + ($3))|0;
 $add23$i = (($14) + ($4))|0;
 $add24$i = (($15) + ($5))|0;
 $add25$i = (($16) + ($6))|0;
 $add26$i = (($17) + ($7))|0;
 $add27$i = (($18) + ($8))|0;
 $add28$i = (($19) + ($9))|0;
 HEAP32[$arraydecay9>>2] = $add$i;
 $arrayidx30$i = ((($r)) + 44|0);
 HEAP32[$arrayidx30$i>>2] = $add20$i;
 $arrayidx31$i = ((($r)) + 48|0);
 HEAP32[$arrayidx31$i>>2] = $add21$i;
 $arrayidx32$i = ((($r)) + 52|0);
 HEAP32[$arrayidx32$i>>2] = $add22$i;
 $arrayidx33$i = ((($r)) + 56|0);
 HEAP32[$arrayidx33$i>>2] = $add23$i;
 $arrayidx34$i = ((($r)) + 60|0);
 HEAP32[$arrayidx34$i>>2] = $add24$i;
 $arrayidx35$i = ((($r)) + 64|0);
 HEAP32[$arrayidx35$i>>2] = $add25$i;
 $arrayidx36$i = ((($r)) + 68|0);
 HEAP32[$arrayidx36$i>>2] = $add26$i;
 $arrayidx37$i = ((($r)) + 72|0);
 HEAP32[$arrayidx37$i>>2] = $add27$i;
 $arrayidx38$i = ((($r)) + 76|0);
 HEAP32[$arrayidx38$i>>2] = $add28$i;
 _fe_sq($t0,$arraydecay9);
 $20 = HEAP32[$arraydecay3>>2]|0;
 $arrayidx1$i121 = ((($r)) + 84|0);
 $21 = HEAP32[$arrayidx1$i121>>2]|0;
 $arrayidx2$i122 = ((($r)) + 88|0);
 $22 = HEAP32[$arrayidx2$i122>>2]|0;
 $arrayidx3$i123 = ((($r)) + 92|0);
 $23 = HEAP32[$arrayidx3$i123>>2]|0;
 $arrayidx4$i124 = ((($r)) + 96|0);
 $24 = HEAP32[$arrayidx4$i124>>2]|0;
 $arrayidx5$i125 = ((($r)) + 100|0);
 $25 = HEAP32[$arrayidx5$i125>>2]|0;
 $arrayidx6$i126 = ((($r)) + 104|0);
 $26 = HEAP32[$arrayidx6$i126>>2]|0;
 $arrayidx7$i127 = ((($r)) + 108|0);
 $27 = HEAP32[$arrayidx7$i127>>2]|0;
 $arrayidx8$i128 = ((($r)) + 112|0);
 $28 = HEAP32[$arrayidx8$i128>>2]|0;
 $arrayidx9$i129 = ((($r)) + 116|0);
 $29 = HEAP32[$arrayidx9$i129>>2]|0;
 $30 = HEAP32[$r>>2]|0;
 $arrayidx11$i130 = ((($r)) + 4|0);
 $31 = HEAP32[$arrayidx11$i130>>2]|0;
 $arrayidx12$i131 = ((($r)) + 8|0);
 $32 = HEAP32[$arrayidx12$i131>>2]|0;
 $arrayidx13$i132 = ((($r)) + 12|0);
 $33 = HEAP32[$arrayidx13$i132>>2]|0;
 $arrayidx14$i133 = ((($r)) + 16|0);
 $34 = HEAP32[$arrayidx14$i133>>2]|0;
 $arrayidx15$i134 = ((($r)) + 20|0);
 $35 = HEAP32[$arrayidx15$i134>>2]|0;
 $arrayidx16$i135 = ((($r)) + 24|0);
 $36 = HEAP32[$arrayidx16$i135>>2]|0;
 $arrayidx17$i136 = ((($r)) + 28|0);
 $37 = HEAP32[$arrayidx17$i136>>2]|0;
 $arrayidx18$i137 = ((($r)) + 32|0);
 $38 = HEAP32[$arrayidx18$i137>>2]|0;
 $arrayidx19$i138 = ((($r)) + 36|0);
 $39 = HEAP32[$arrayidx19$i138>>2]|0;
 $add$i139 = (($30) + ($20))|0;
 $add20$i140 = (($31) + ($21))|0;
 $add21$i141 = (($32) + ($22))|0;
 $add22$i142 = (($33) + ($23))|0;
 $add23$i143 = (($34) + ($24))|0;
 $add24$i144 = (($35) + ($25))|0;
 $add25$i145 = (($36) + ($26))|0;
 $add26$i146 = (($37) + ($27))|0;
 $add27$i147 = (($38) + ($28))|0;
 $add28$i148 = (($39) + ($29))|0;
 HEAP32[$arraydecay9>>2] = $add$i139;
 HEAP32[$arrayidx30$i>>2] = $add20$i140;
 HEAP32[$arrayidx31$i>>2] = $add21$i141;
 HEAP32[$arrayidx32$i>>2] = $add22$i142;
 HEAP32[$arrayidx33$i>>2] = $add23$i143;
 HEAP32[$arrayidx34$i>>2] = $add24$i144;
 HEAP32[$arrayidx35$i>>2] = $add25$i145;
 HEAP32[$arrayidx36$i>>2] = $add26$i146;
 HEAP32[$arrayidx37$i>>2] = $add27$i147;
 HEAP32[$arrayidx38$i>>2] = $add28$i148;
 $sub$i102 = (($20) - ($30))|0;
 $sub20$i103 = (($21) - ($31))|0;
 $sub21$i104 = (($22) - ($32))|0;
 $sub22$i105 = (($23) - ($33))|0;
 $sub23$i106 = (($24) - ($34))|0;
 $sub24$i107 = (($25) - ($35))|0;
 $sub25$i108 = (($26) - ($36))|0;
 $sub26$i109 = (($27) - ($37))|0;
 $sub27$i110 = (($28) - ($38))|0;
 $sub28$i111 = (($29) - ($39))|0;
 HEAP32[$arraydecay3>>2] = $sub$i102;
 HEAP32[$arrayidx1$i121>>2] = $sub20$i103;
 HEAP32[$arrayidx2$i122>>2] = $sub21$i104;
 HEAP32[$arrayidx3$i123>>2] = $sub22$i105;
 HEAP32[$arrayidx4$i124>>2] = $sub23$i106;
 HEAP32[$arrayidx5$i125>>2] = $sub24$i107;
 HEAP32[$arrayidx6$i126>>2] = $sub25$i108;
 HEAP32[$arrayidx7$i127>>2] = $sub26$i109;
 HEAP32[$arrayidx8$i128>>2] = $sub27$i110;
 HEAP32[$arrayidx9$i129>>2] = $sub28$i111;
 $40 = HEAP32[$t0>>2]|0;
 $arrayidx1$i47 = ((($t0)) + 4|0);
 $41 = HEAP32[$arrayidx1$i47>>2]|0;
 $arrayidx2$i48 = ((($t0)) + 8|0);
 $42 = HEAP32[$arrayidx2$i48>>2]|0;
 $arrayidx3$i49 = ((($t0)) + 12|0);
 $43 = HEAP32[$arrayidx3$i49>>2]|0;
 $arrayidx4$i50 = ((($t0)) + 16|0);
 $44 = HEAP32[$arrayidx4$i50>>2]|0;
 $arrayidx5$i51 = ((($t0)) + 20|0);
 $45 = HEAP32[$arrayidx5$i51>>2]|0;
 $arrayidx6$i52 = ((($t0)) + 24|0);
 $46 = HEAP32[$arrayidx6$i52>>2]|0;
 $arrayidx7$i53 = ((($t0)) + 28|0);
 $47 = HEAP32[$arrayidx7$i53>>2]|0;
 $arrayidx8$i54 = ((($t0)) + 32|0);
 $48 = HEAP32[$arrayidx8$i54>>2]|0;
 $arrayidx9$i55 = ((($t0)) + 36|0);
 $49 = HEAP32[$arrayidx9$i55>>2]|0;
 $sub$i65 = (($40) - ($add$i139))|0;
 $sub20$i66 = (($41) - ($add20$i140))|0;
 $sub21$i67 = (($42) - ($add21$i141))|0;
 $sub22$i68 = (($43) - ($add22$i142))|0;
 $sub23$i69 = (($44) - ($add23$i143))|0;
 $sub24$i70 = (($45) - ($add24$i144))|0;
 $sub25$i71 = (($46) - ($add25$i145))|0;
 $sub26$i72 = (($47) - ($add26$i146))|0;
 $sub27$i73 = (($48) - ($add27$i147))|0;
 $sub28$i74 = (($49) - ($add28$i148))|0;
 HEAP32[$r>>2] = $sub$i65;
 HEAP32[$arrayidx11$i130>>2] = $sub20$i66;
 HEAP32[$arrayidx12$i131>>2] = $sub21$i67;
 HEAP32[$arrayidx13$i132>>2] = $sub22$i68;
 HEAP32[$arrayidx14$i133>>2] = $sub23$i69;
 HEAP32[$arrayidx15$i134>>2] = $sub24$i70;
 HEAP32[$arrayidx16$i135>>2] = $sub25$i71;
 HEAP32[$arrayidx17$i136>>2] = $sub26$i72;
 HEAP32[$arrayidx18$i137>>2] = $sub27$i73;
 HEAP32[$arrayidx19$i138>>2] = $sub28$i74;
 $50 = HEAP32[$arraydecay5>>2]|0;
 $arrayidx1$i20 = ((($r)) + 124|0);
 $51 = HEAP32[$arrayidx1$i20>>2]|0;
 $arrayidx2$i21 = ((($r)) + 128|0);
 $52 = HEAP32[$arrayidx2$i21>>2]|0;
 $arrayidx3$i22 = ((($r)) + 132|0);
 $53 = HEAP32[$arrayidx3$i22>>2]|0;
 $arrayidx4$i23 = ((($r)) + 136|0);
 $54 = HEAP32[$arrayidx4$i23>>2]|0;
 $arrayidx5$i24 = ((($r)) + 140|0);
 $55 = HEAP32[$arrayidx5$i24>>2]|0;
 $arrayidx6$i25 = ((($r)) + 144|0);
 $56 = HEAP32[$arrayidx6$i25>>2]|0;
 $arrayidx7$i26 = ((($r)) + 148|0);
 $57 = HEAP32[$arrayidx7$i26>>2]|0;
 $arrayidx8$i27 = ((($r)) + 152|0);
 $58 = HEAP32[$arrayidx8$i27>>2]|0;
 $arrayidx9$i28 = ((($r)) + 156|0);
 $59 = HEAP32[$arrayidx9$i28>>2]|0;
 $sub$i = (($50) - ($sub$i102))|0;
 $sub20$i = (($51) - ($sub20$i103))|0;
 $sub21$i = (($52) - ($sub21$i104))|0;
 $sub22$i = (($53) - ($sub22$i105))|0;
 $sub23$i = (($54) - ($sub23$i106))|0;
 $sub24$i = (($55) - ($sub24$i107))|0;
 $sub25$i = (($56) - ($sub25$i108))|0;
 $sub26$i = (($57) - ($sub26$i109))|0;
 $sub27$i = (($58) - ($sub27$i110))|0;
 $sub28$i = (($59) - ($sub28$i111))|0;
 HEAP32[$arraydecay5>>2] = $sub$i;
 HEAP32[$arrayidx1$i20>>2] = $sub20$i;
 HEAP32[$arrayidx2$i21>>2] = $sub21$i;
 HEAP32[$arrayidx3$i22>>2] = $sub22$i;
 HEAP32[$arrayidx4$i23>>2] = $sub23$i;
 HEAP32[$arrayidx5$i24>>2] = $sub24$i;
 HEAP32[$arrayidx6$i25>>2] = $sub25$i;
 HEAP32[$arrayidx7$i26>>2] = $sub26$i;
 HEAP32[$arrayidx8$i27>>2] = $sub27$i;
 HEAP32[$arrayidx9$i28>>2] = $sub28$i;
 STACKTOP = sp;return;
}
function _fe_sq($h,$f) {
 $h = $h|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx291 = 0, $arrayidx293 = 0, $arrayidx295 = 0, $arrayidx297 = 0, $arrayidx299 = 0, $arrayidx3 = 0, $arrayidx301 = 0, $arrayidx303 = 0, $arrayidx305 = 0, $arrayidx307 = 0, $arrayidx4 = 0, $arrayidx5 = 0;
 var $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $mul = 0, $mul10 = 0, $mul11 = 0, $mul12 = 0, $mul13 = 0, $mul14 = 0, $mul15 = 0, $mul16 = 0, $mul17 = 0, $mul18 = 0, $mul19 = 0, $mul20 = 0, $mul21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $arrayidx1 = ((($f)) + 4|0);
 $1 = HEAP32[$arrayidx1>>2]|0;
 $arrayidx2 = ((($f)) + 8|0);
 $2 = HEAP32[$arrayidx2>>2]|0;
 $arrayidx3 = ((($f)) + 12|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $arrayidx4 = ((($f)) + 16|0);
 $4 = HEAP32[$arrayidx4>>2]|0;
 $arrayidx5 = ((($f)) + 20|0);
 $5 = HEAP32[$arrayidx5>>2]|0;
 $arrayidx6 = ((($f)) + 24|0);
 $6 = HEAP32[$arrayidx6>>2]|0;
 $arrayidx7 = ((($f)) + 28|0);
 $7 = HEAP32[$arrayidx7>>2]|0;
 $arrayidx8 = ((($f)) + 32|0);
 $8 = HEAP32[$arrayidx8>>2]|0;
 $arrayidx9 = ((($f)) + 36|0);
 $9 = HEAP32[$arrayidx9>>2]|0;
 $mul = $0 << 1;
 $mul10 = $1 << 1;
 $mul11 = $2 << 1;
 $mul12 = $3 << 1;
 $mul13 = $4 << 1;
 $mul14 = $5 << 1;
 $mul15 = $6 << 1;
 $mul16 = $7 << 1;
 $mul17 = ($5*38)|0;
 $mul18 = ($6*19)|0;
 $mul19 = ($7*38)|0;
 $mul20 = ($8*19)|0;
 $mul21 = ($9*38)|0;
 $10 = ($0|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = (___muldi3(($0|0),($11|0),($0|0),($11|0))|0);
 $13 = (getTempRet0() | 0);
 $14 = ($mul|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = ($1|0)<(0);
 $17 = $16 << 31 >> 31;
 $18 = (___muldi3(($mul|0),($15|0),($1|0),($17|0))|0);
 $19 = (getTempRet0() | 0);
 $20 = ($2|0)<(0);
 $21 = $20 << 31 >> 31;
 $22 = (___muldi3(($2|0),($21|0),($mul|0),($15|0))|0);
 $23 = (getTempRet0() | 0);
 $24 = ($3|0)<(0);
 $25 = $24 << 31 >> 31;
 $26 = (___muldi3(($3|0),($25|0),($mul|0),($15|0))|0);
 $27 = (getTempRet0() | 0);
 $28 = ($4|0)<(0);
 $29 = $28 << 31 >> 31;
 $30 = (___muldi3(($4|0),($29|0),($mul|0),($15|0))|0);
 $31 = (getTempRet0() | 0);
 $32 = ($5|0)<(0);
 $33 = $32 << 31 >> 31;
 $34 = (___muldi3(($5|0),($33|0),($mul|0),($15|0))|0);
 $35 = (getTempRet0() | 0);
 $36 = ($6|0)<(0);
 $37 = $36 << 31 >> 31;
 $38 = (___muldi3(($6|0),($37|0),($mul|0),($15|0))|0);
 $39 = (getTempRet0() | 0);
 $40 = ($7|0)<(0);
 $41 = $40 << 31 >> 31;
 $42 = (___muldi3(($7|0),($41|0),($mul|0),($15|0))|0);
 $43 = (getTempRet0() | 0);
 $44 = ($8|0)<(0);
 $45 = $44 << 31 >> 31;
 $46 = (___muldi3(($8|0),($45|0),($mul|0),($15|0))|0);
 $47 = (getTempRet0() | 0);
 $48 = ($9|0)<(0);
 $49 = $48 << 31 >> 31;
 $50 = (___muldi3(($9|0),($49|0),($mul|0),($15|0))|0);
 $51 = (getTempRet0() | 0);
 $52 = ($mul10|0)<(0);
 $53 = $52 << 31 >> 31;
 $54 = (___muldi3(($mul10|0),($53|0),($1|0),($17|0))|0);
 $55 = (getTempRet0() | 0);
 $56 = (___muldi3(($mul10|0),($53|0),($2|0),($21|0))|0);
 $57 = (getTempRet0() | 0);
 $58 = ($mul12|0)<(0);
 $59 = $58 << 31 >> 31;
 $60 = (___muldi3(($mul12|0),($59|0),($mul10|0),($53|0))|0);
 $61 = (getTempRet0() | 0);
 $62 = (___muldi3(($4|0),($29|0),($mul10|0),($53|0))|0);
 $63 = (getTempRet0() | 0);
 $64 = ($mul14|0)<(0);
 $65 = $64 << 31 >> 31;
 $66 = (___muldi3(($mul14|0),($65|0),($mul10|0),($53|0))|0);
 $67 = (getTempRet0() | 0);
 $68 = (___muldi3(($6|0),($37|0),($mul10|0),($53|0))|0);
 $69 = (getTempRet0() | 0);
 $70 = ($mul16|0)<(0);
 $71 = $70 << 31 >> 31;
 $72 = (___muldi3(($mul16|0),($71|0),($mul10|0),($53|0))|0);
 $73 = (getTempRet0() | 0);
 $74 = (___muldi3(($8|0),($45|0),($mul10|0),($53|0))|0);
 $75 = (getTempRet0() | 0);
 $76 = ($mul21|0)<(0);
 $77 = $76 << 31 >> 31;
 $78 = (___muldi3(($mul21|0),($77|0),($mul10|0),($53|0))|0);
 $79 = (getTempRet0() | 0);
 $80 = (___muldi3(($2|0),($21|0),($2|0),($21|0))|0);
 $81 = (getTempRet0() | 0);
 $82 = ($mul11|0)<(0);
 $83 = $82 << 31 >> 31;
 $84 = (___muldi3(($mul11|0),($83|0),($3|0),($25|0))|0);
 $85 = (getTempRet0() | 0);
 $86 = (___muldi3(($4|0),($29|0),($mul11|0),($83|0))|0);
 $87 = (getTempRet0() | 0);
 $88 = (___muldi3(($5|0),($33|0),($mul11|0),($83|0))|0);
 $89 = (getTempRet0() | 0);
 $90 = (___muldi3(($6|0),($37|0),($mul11|0),($83|0))|0);
 $91 = (getTempRet0() | 0);
 $92 = (___muldi3(($7|0),($41|0),($mul11|0),($83|0))|0);
 $93 = (getTempRet0() | 0);
 $94 = ($mul20|0)<(0);
 $95 = $94 << 31 >> 31;
 $96 = (___muldi3(($mul20|0),($95|0),($mul11|0),($83|0))|0);
 $97 = (getTempRet0() | 0);
 $98 = (___muldi3(($mul21|0),($77|0),($2|0),($21|0))|0);
 $99 = (getTempRet0() | 0);
 $100 = (___muldi3(($mul12|0),($59|0),($3|0),($25|0))|0);
 $101 = (getTempRet0() | 0);
 $102 = (___muldi3(($mul12|0),($59|0),($4|0),($29|0))|0);
 $103 = (getTempRet0() | 0);
 $104 = (___muldi3(($mul14|0),($65|0),($mul12|0),($59|0))|0);
 $105 = (getTempRet0() | 0);
 $106 = (___muldi3(($6|0),($37|0),($mul12|0),($59|0))|0);
 $107 = (getTempRet0() | 0);
 $108 = ($mul19|0)<(0);
 $109 = $108 << 31 >> 31;
 $110 = (___muldi3(($mul19|0),($109|0),($mul12|0),($59|0))|0);
 $111 = (getTempRet0() | 0);
 $112 = (___muldi3(($mul20|0),($95|0),($mul12|0),($59|0))|0);
 $113 = (getTempRet0() | 0);
 $114 = (___muldi3(($mul21|0),($77|0),($mul12|0),($59|0))|0);
 $115 = (getTempRet0() | 0);
 $116 = (___muldi3(($4|0),($29|0),($4|0),($29|0))|0);
 $117 = (getTempRet0() | 0);
 $118 = ($mul13|0)<(0);
 $119 = $118 << 31 >> 31;
 $120 = (___muldi3(($mul13|0),($119|0),($5|0),($33|0))|0);
 $121 = (getTempRet0() | 0);
 $122 = ($mul18|0)<(0);
 $123 = $122 << 31 >> 31;
 $124 = (___muldi3(($mul18|0),($123|0),($mul13|0),($119|0))|0);
 $125 = (getTempRet0() | 0);
 $126 = (___muldi3(($mul19|0),($109|0),($4|0),($29|0))|0);
 $127 = (getTempRet0() | 0);
 $128 = (___muldi3(($mul20|0),($95|0),($mul13|0),($119|0))|0);
 $129 = (getTempRet0() | 0);
 $130 = (___muldi3(($mul21|0),($77|0),($4|0),($29|0))|0);
 $131 = (getTempRet0() | 0);
 $132 = ($mul17|0)<(0);
 $133 = $132 << 31 >> 31;
 $134 = (___muldi3(($mul17|0),($133|0),($5|0),($33|0))|0);
 $135 = (getTempRet0() | 0);
 $136 = (___muldi3(($mul18|0),($123|0),($mul14|0),($65|0))|0);
 $137 = (getTempRet0() | 0);
 $138 = (___muldi3(($mul19|0),($109|0),($mul14|0),($65|0))|0);
 $139 = (getTempRet0() | 0);
 $140 = (___muldi3(($mul20|0),($95|0),($mul14|0),($65|0))|0);
 $141 = (getTempRet0() | 0);
 $142 = (___muldi3(($mul21|0),($77|0),($mul14|0),($65|0))|0);
 $143 = (getTempRet0() | 0);
 $144 = (___muldi3(($mul18|0),($123|0),($6|0),($37|0))|0);
 $145 = (getTempRet0() | 0);
 $146 = (___muldi3(($mul19|0),($109|0),($6|0),($37|0))|0);
 $147 = (getTempRet0() | 0);
 $148 = ($mul15|0)<(0);
 $149 = $148 << 31 >> 31;
 $150 = (___muldi3(($mul20|0),($95|0),($mul15|0),($149|0))|0);
 $151 = (getTempRet0() | 0);
 $152 = (___muldi3(($mul21|0),($77|0),($6|0),($37|0))|0);
 $153 = (getTempRet0() | 0);
 $154 = (___muldi3(($mul19|0),($109|0),($7|0),($41|0))|0);
 $155 = (getTempRet0() | 0);
 $156 = (___muldi3(($mul20|0),($95|0),($mul16|0),($71|0))|0);
 $157 = (getTempRet0() | 0);
 $158 = (___muldi3(($mul21|0),($77|0),($mul16|0),($71|0))|0);
 $159 = (getTempRet0() | 0);
 $160 = (___muldi3(($mul20|0),($95|0),($8|0),($45|0))|0);
 $161 = (getTempRet0() | 0);
 $162 = (___muldi3(($mul21|0),($77|0),($8|0),($45|0))|0);
 $163 = (getTempRet0() | 0);
 $164 = (___muldi3(($mul21|0),($77|0),($9|0),($49|0))|0);
 $165 = (getTempRet0() | 0);
 $166 = (_i64Add(($134|0),($135|0),($12|0),($13|0))|0);
 $167 = (getTempRet0() | 0);
 $168 = (_i64Add(($166|0),($167|0),($124|0),($125|0))|0);
 $169 = (getTempRet0() | 0);
 $170 = (_i64Add(($168|0),($169|0),($110|0),($111|0))|0);
 $171 = (getTempRet0() | 0);
 $172 = (_i64Add(($170|0),($171|0),($96|0),($97|0))|0);
 $173 = (getTempRet0() | 0);
 $174 = (_i64Add(($172|0),($173|0),($78|0),($79|0))|0);
 $175 = (getTempRet0() | 0);
 $176 = (_i64Add(($22|0),($23|0),($54|0),($55|0))|0);
 $177 = (getTempRet0() | 0);
 $178 = (_i64Add(($26|0),($27|0),($56|0),($57|0))|0);
 $179 = (getTempRet0() | 0);
 $180 = (_i64Add(($60|0),($61|0),($80|0),($81|0))|0);
 $181 = (getTempRet0() | 0);
 $182 = (_i64Add(($180|0),($181|0),($30|0),($31|0))|0);
 $183 = (getTempRet0() | 0);
 $184 = (_i64Add(($182|0),($183|0),($154|0),($155|0))|0);
 $185 = (getTempRet0() | 0);
 $186 = (_i64Add(($184|0),($185|0),($150|0),($151|0))|0);
 $187 = (getTempRet0() | 0);
 $188 = (_i64Add(($186|0),($187|0),($142|0),($143|0))|0);
 $189 = (getTempRet0() | 0);
 $190 = (_i64Add(($174|0),($175|0),33554432,0)|0);
 $191 = (getTempRet0() | 0);
 $192 = (_bitshift64Ashr(($190|0),($191|0),26)|0);
 $193 = (getTempRet0() | 0);
 $194 = (_i64Add(($136|0),($137|0),($18|0),($19|0))|0);
 $195 = (getTempRet0() | 0);
 $196 = (_i64Add(($194|0),($195|0),($126|0),($127|0))|0);
 $197 = (getTempRet0() | 0);
 $198 = (_i64Add(($196|0),($197|0),($112|0),($113|0))|0);
 $199 = (getTempRet0() | 0);
 $200 = (_i64Add(($198|0),($199|0),($98|0),($99|0))|0);
 $201 = (getTempRet0() | 0);
 $202 = (_i64Add(($200|0),($201|0),($192|0),($193|0))|0);
 $203 = (getTempRet0() | 0);
 $204 = $190 & -67108864;
 $205 = (_i64Subtract(($174|0),($175|0),($204|0),($191|0))|0);
 $206 = (getTempRet0() | 0);
 $207 = (_i64Add(($188|0),($189|0),33554432,0)|0);
 $208 = (getTempRet0() | 0);
 $209 = (_bitshift64Ashr(($207|0),($208|0),26)|0);
 $210 = (getTempRet0() | 0);
 $211 = (_i64Add(($62|0),($63|0),($84|0),($85|0))|0);
 $212 = (getTempRet0() | 0);
 $213 = (_i64Add(($211|0),($212|0),($34|0),($35|0))|0);
 $214 = (getTempRet0() | 0);
 $215 = (_i64Add(($213|0),($214|0),($156|0),($157|0))|0);
 $216 = (getTempRet0() | 0);
 $217 = (_i64Add(($215|0),($216|0),($152|0),($153|0))|0);
 $218 = (getTempRet0() | 0);
 $219 = (_i64Add(($217|0),($218|0),($209|0),($210|0))|0);
 $220 = (getTempRet0() | 0);
 $221 = $207 & -67108864;
 $222 = (_i64Subtract(($188|0),($189|0),($221|0),($208|0))|0);
 $223 = (getTempRet0() | 0);
 $224 = (_i64Add(($202|0),($203|0),16777216,0)|0);
 $225 = (getTempRet0() | 0);
 $226 = (_bitshift64Ashr(($224|0),($225|0),25)|0);
 $227 = (getTempRet0() | 0);
 $228 = (_i64Add(($176|0),($177|0),($144|0),($145|0))|0);
 $229 = (getTempRet0() | 0);
 $230 = (_i64Add(($228|0),($229|0),($138|0),($139|0))|0);
 $231 = (getTempRet0() | 0);
 $232 = (_i64Add(($230|0),($231|0),($128|0),($129|0))|0);
 $233 = (getTempRet0() | 0);
 $234 = (_i64Add(($232|0),($233|0),($114|0),($115|0))|0);
 $235 = (getTempRet0() | 0);
 $236 = (_i64Add(($234|0),($235|0),($226|0),($227|0))|0);
 $237 = (getTempRet0() | 0);
 $238 = $224 & -33554432;
 $239 = (_i64Subtract(($202|0),($203|0),($238|0),0)|0);
 $240 = (getTempRet0() | 0);
 $241 = (_i64Add(($219|0),($220|0),16777216,0)|0);
 $242 = (getTempRet0() | 0);
 $243 = (_bitshift64Ashr(($241|0),($242|0),25)|0);
 $244 = (getTempRet0() | 0);
 $245 = (_i64Add(($100|0),($101|0),($86|0),($87|0))|0);
 $246 = (getTempRet0() | 0);
 $247 = (_i64Add(($245|0),($246|0),($66|0),($67|0))|0);
 $248 = (getTempRet0() | 0);
 $249 = (_i64Add(($247|0),($248|0),($38|0),($39|0))|0);
 $250 = (getTempRet0() | 0);
 $251 = (_i64Add(($249|0),($250|0),($160|0),($161|0))|0);
 $252 = (getTempRet0() | 0);
 $253 = (_i64Add(($251|0),($252|0),($158|0),($159|0))|0);
 $254 = (getTempRet0() | 0);
 $255 = (_i64Add(($253|0),($254|0),($243|0),($244|0))|0);
 $256 = (getTempRet0() | 0);
 $257 = $241 & -33554432;
 $258 = (_i64Subtract(($219|0),($220|0),($257|0),0)|0);
 $259 = (getTempRet0() | 0);
 $260 = (_i64Add(($236|0),($237|0),33554432,0)|0);
 $261 = (getTempRet0() | 0);
 $262 = (_bitshift64Ashr(($260|0),($261|0),26)|0);
 $263 = (getTempRet0() | 0);
 $264 = (_i64Add(($178|0),($179|0),($146|0),($147|0))|0);
 $265 = (getTempRet0() | 0);
 $266 = (_i64Add(($264|0),($265|0),($140|0),($141|0))|0);
 $267 = (getTempRet0() | 0);
 $268 = (_i64Add(($266|0),($267|0),($130|0),($131|0))|0);
 $269 = (getTempRet0() | 0);
 $270 = (_i64Add(($268|0),($269|0),($262|0),($263|0))|0);
 $271 = (getTempRet0() | 0);
 $272 = $260 & -67108864;
 $273 = (_i64Subtract(($236|0),($237|0),($272|0),0)|0);
 $274 = (getTempRet0() | 0);
 $275 = (_i64Add(($255|0),($256|0),33554432,0)|0);
 $276 = (getTempRet0() | 0);
 $277 = (_bitshift64Ashr(($275|0),($276|0),26)|0);
 $278 = (getTempRet0() | 0);
 $279 = (_i64Add(($88|0),($89|0),($102|0),($103|0))|0);
 $280 = (getTempRet0() | 0);
 $281 = (_i64Add(($279|0),($280|0),($68|0),($69|0))|0);
 $282 = (getTempRet0() | 0);
 $283 = (_i64Add(($281|0),($282|0),($42|0),($43|0))|0);
 $284 = (getTempRet0() | 0);
 $285 = (_i64Add(($283|0),($284|0),($162|0),($163|0))|0);
 $286 = (getTempRet0() | 0);
 $287 = (_i64Add(($285|0),($286|0),($277|0),($278|0))|0);
 $288 = (getTempRet0() | 0);
 $289 = $275 & -67108864;
 $290 = (_i64Subtract(($255|0),($256|0),($289|0),0)|0);
 $291 = (getTempRet0() | 0);
 $292 = (_i64Add(($270|0),($271|0),16777216,0)|0);
 $293 = (getTempRet0() | 0);
 $294 = (_bitshift64Ashr(($292|0),($293|0),25)|0);
 $295 = (getTempRet0() | 0);
 $296 = (_i64Add(($294|0),($295|0),($222|0),($223|0))|0);
 $297 = (getTempRet0() | 0);
 $298 = $292 & -33554432;
 $299 = (_i64Subtract(($270|0),($271|0),($298|0),0)|0);
 $300 = (getTempRet0() | 0);
 $301 = (_i64Add(($287|0),($288|0),16777216,0)|0);
 $302 = (getTempRet0() | 0);
 $303 = (_bitshift64Ashr(($301|0),($302|0),25)|0);
 $304 = (getTempRet0() | 0);
 $305 = (_i64Add(($90|0),($91|0),($116|0),($117|0))|0);
 $306 = (getTempRet0() | 0);
 $307 = (_i64Add(($305|0),($306|0),($104|0),($105|0))|0);
 $308 = (getTempRet0() | 0);
 $309 = (_i64Add(($307|0),($308|0),($72|0),($73|0))|0);
 $310 = (getTempRet0() | 0);
 $311 = (_i64Add(($309|0),($310|0),($46|0),($47|0))|0);
 $312 = (getTempRet0() | 0);
 $313 = (_i64Add(($311|0),($312|0),($164|0),($165|0))|0);
 $314 = (getTempRet0() | 0);
 $315 = (_i64Add(($313|0),($314|0),($303|0),($304|0))|0);
 $316 = (getTempRet0() | 0);
 $317 = $301 & -33554432;
 $318 = (_i64Subtract(($287|0),($288|0),($317|0),0)|0);
 $319 = (getTempRet0() | 0);
 $320 = (_i64Add(($296|0),($297|0),33554432,0)|0);
 $321 = (getTempRet0() | 0);
 $322 = (_bitshift64Lshr(($320|0),($321|0),26)|0);
 $323 = (getTempRet0() | 0);
 $324 = (_i64Add(($258|0),($259|0),($322|0),($323|0))|0);
 $325 = (getTempRet0() | 0);
 $326 = $320 & -67108864;
 $327 = (_i64Subtract(($296|0),($297|0),($326|0),0)|0);
 $328 = (getTempRet0() | 0);
 $329 = (_i64Add(($315|0),($316|0),33554432,0)|0);
 $330 = (getTempRet0() | 0);
 $331 = (_bitshift64Ashr(($329|0),($330|0),26)|0);
 $332 = (getTempRet0() | 0);
 $333 = (_i64Add(($106|0),($107|0),($120|0),($121|0))|0);
 $334 = (getTempRet0() | 0);
 $335 = (_i64Add(($333|0),($334|0),($92|0),($93|0))|0);
 $336 = (getTempRet0() | 0);
 $337 = (_i64Add(($335|0),($336|0),($74|0),($75|0))|0);
 $338 = (getTempRet0() | 0);
 $339 = (_i64Add(($337|0),($338|0),($50|0),($51|0))|0);
 $340 = (getTempRet0() | 0);
 $341 = (_i64Add(($339|0),($340|0),($331|0),($332|0))|0);
 $342 = (getTempRet0() | 0);
 $343 = $329 & -67108864;
 $344 = (_i64Subtract(($315|0),($316|0),($343|0),0)|0);
 $345 = (getTempRet0() | 0);
 $346 = (_i64Add(($341|0),($342|0),16777216,0)|0);
 $347 = (getTempRet0() | 0);
 $348 = (_bitshift64Ashr(($346|0),($347|0),25)|0);
 $349 = (getTempRet0() | 0);
 $350 = (___muldi3(($348|0),($349|0),19,0)|0);
 $351 = (getTempRet0() | 0);
 $352 = (_i64Add(($350|0),($351|0),($205|0),($206|0))|0);
 $353 = (getTempRet0() | 0);
 $354 = $346 & -33554432;
 $355 = (_i64Subtract(($341|0),($342|0),($354|0),0)|0);
 $356 = (getTempRet0() | 0);
 $357 = (_i64Add(($352|0),($353|0),33554432,0)|0);
 $358 = (getTempRet0() | 0);
 $359 = (_bitshift64Lshr(($357|0),($358|0),26)|0);
 $360 = (getTempRet0() | 0);
 $361 = (_i64Add(($239|0),($240|0),($359|0),($360|0))|0);
 $362 = (getTempRet0() | 0);
 $363 = $357 & -67108864;
 $364 = (_i64Subtract(($352|0),($353|0),($363|0),0)|0);
 $365 = (getTempRet0() | 0);
 HEAP32[$h>>2] = $364;
 $arrayidx291 = ((($h)) + 4|0);
 HEAP32[$arrayidx291>>2] = $361;
 $arrayidx293 = ((($h)) + 8|0);
 HEAP32[$arrayidx293>>2] = $273;
 $arrayidx295 = ((($h)) + 12|0);
 HEAP32[$arrayidx295>>2] = $299;
 $arrayidx297 = ((($h)) + 16|0);
 HEAP32[$arrayidx297>>2] = $327;
 $arrayidx299 = ((($h)) + 20|0);
 HEAP32[$arrayidx299>>2] = $324;
 $arrayidx301 = ((($h)) + 24|0);
 HEAP32[$arrayidx301>>2] = $290;
 $arrayidx303 = ((($h)) + 28|0);
 HEAP32[$arrayidx303>>2] = $318;
 $arrayidx305 = ((($h)) + 32|0);
 HEAP32[$arrayidx305>>2] = $344;
 $arrayidx307 = ((($h)) + 36|0);
 HEAP32[$arrayidx307>>2] = $355;
 return;
}
function _fe_sq2($h,$f) {
 $h = $h|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx301 = 0, $arrayidx303 = 0, $arrayidx305 = 0, $arrayidx307 = 0, $arrayidx309 = 0, $arrayidx311 = 0, $arrayidx313 = 0, $arrayidx315 = 0, $arrayidx317 = 0, $arrayidx4 = 0, $arrayidx5 = 0;
 var $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $arrayidx9 = 0, $mul = 0, $mul10 = 0, $mul11 = 0, $mul12 = 0, $mul13 = 0, $mul14 = 0, $mul15 = 0, $mul16 = 0, $mul17 = 0, $mul18 = 0, $mul19 = 0, $mul20 = 0, $mul21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $arrayidx1 = ((($f)) + 4|0);
 $1 = HEAP32[$arrayidx1>>2]|0;
 $arrayidx2 = ((($f)) + 8|0);
 $2 = HEAP32[$arrayidx2>>2]|0;
 $arrayidx3 = ((($f)) + 12|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $arrayidx4 = ((($f)) + 16|0);
 $4 = HEAP32[$arrayidx4>>2]|0;
 $arrayidx5 = ((($f)) + 20|0);
 $5 = HEAP32[$arrayidx5>>2]|0;
 $arrayidx6 = ((($f)) + 24|0);
 $6 = HEAP32[$arrayidx6>>2]|0;
 $arrayidx7 = ((($f)) + 28|0);
 $7 = HEAP32[$arrayidx7>>2]|0;
 $arrayidx8 = ((($f)) + 32|0);
 $8 = HEAP32[$arrayidx8>>2]|0;
 $arrayidx9 = ((($f)) + 36|0);
 $9 = HEAP32[$arrayidx9>>2]|0;
 $mul = $0 << 1;
 $mul10 = $1 << 1;
 $mul11 = $2 << 1;
 $mul12 = $3 << 1;
 $mul13 = $4 << 1;
 $mul14 = $5 << 1;
 $mul15 = $6 << 1;
 $mul16 = $7 << 1;
 $mul17 = ($5*38)|0;
 $mul18 = ($6*19)|0;
 $mul19 = ($7*38)|0;
 $mul20 = ($8*19)|0;
 $mul21 = ($9*38)|0;
 $10 = ($0|0)<(0);
 $11 = $10 << 31 >> 31;
 $12 = (___muldi3(($0|0),($11|0),($0|0),($11|0))|0);
 $13 = (getTempRet0() | 0);
 $14 = ($mul|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = ($1|0)<(0);
 $17 = $16 << 31 >> 31;
 $18 = (___muldi3(($mul|0),($15|0),($1|0),($17|0))|0);
 $19 = (getTempRet0() | 0);
 $20 = ($2|0)<(0);
 $21 = $20 << 31 >> 31;
 $22 = (___muldi3(($2|0),($21|0),($mul|0),($15|0))|0);
 $23 = (getTempRet0() | 0);
 $24 = ($3|0)<(0);
 $25 = $24 << 31 >> 31;
 $26 = (___muldi3(($3|0),($25|0),($mul|0),($15|0))|0);
 $27 = (getTempRet0() | 0);
 $28 = ($4|0)<(0);
 $29 = $28 << 31 >> 31;
 $30 = (___muldi3(($4|0),($29|0),($mul|0),($15|0))|0);
 $31 = (getTempRet0() | 0);
 $32 = ($5|0)<(0);
 $33 = $32 << 31 >> 31;
 $34 = (___muldi3(($5|0),($33|0),($mul|0),($15|0))|0);
 $35 = (getTempRet0() | 0);
 $36 = ($6|0)<(0);
 $37 = $36 << 31 >> 31;
 $38 = (___muldi3(($6|0),($37|0),($mul|0),($15|0))|0);
 $39 = (getTempRet0() | 0);
 $40 = ($7|0)<(0);
 $41 = $40 << 31 >> 31;
 $42 = (___muldi3(($7|0),($41|0),($mul|0),($15|0))|0);
 $43 = (getTempRet0() | 0);
 $44 = ($8|0)<(0);
 $45 = $44 << 31 >> 31;
 $46 = (___muldi3(($8|0),($45|0),($mul|0),($15|0))|0);
 $47 = (getTempRet0() | 0);
 $48 = ($9|0)<(0);
 $49 = $48 << 31 >> 31;
 $50 = (___muldi3(($9|0),($49|0),($mul|0),($15|0))|0);
 $51 = (getTempRet0() | 0);
 $52 = ($mul10|0)<(0);
 $53 = $52 << 31 >> 31;
 $54 = (___muldi3(($mul10|0),($53|0),($1|0),($17|0))|0);
 $55 = (getTempRet0() | 0);
 $56 = (___muldi3(($mul10|0),($53|0),($2|0),($21|0))|0);
 $57 = (getTempRet0() | 0);
 $58 = ($mul12|0)<(0);
 $59 = $58 << 31 >> 31;
 $60 = (___muldi3(($mul12|0),($59|0),($mul10|0),($53|0))|0);
 $61 = (getTempRet0() | 0);
 $62 = (___muldi3(($4|0),($29|0),($mul10|0),($53|0))|0);
 $63 = (getTempRet0() | 0);
 $64 = ($mul14|0)<(0);
 $65 = $64 << 31 >> 31;
 $66 = (___muldi3(($mul14|0),($65|0),($mul10|0),($53|0))|0);
 $67 = (getTempRet0() | 0);
 $68 = (___muldi3(($6|0),($37|0),($mul10|0),($53|0))|0);
 $69 = (getTempRet0() | 0);
 $70 = ($mul16|0)<(0);
 $71 = $70 << 31 >> 31;
 $72 = (___muldi3(($mul16|0),($71|0),($mul10|0),($53|0))|0);
 $73 = (getTempRet0() | 0);
 $74 = (___muldi3(($8|0),($45|0),($mul10|0),($53|0))|0);
 $75 = (getTempRet0() | 0);
 $76 = ($mul21|0)<(0);
 $77 = $76 << 31 >> 31;
 $78 = (___muldi3(($mul21|0),($77|0),($mul10|0),($53|0))|0);
 $79 = (getTempRet0() | 0);
 $80 = (___muldi3(($2|0),($21|0),($2|0),($21|0))|0);
 $81 = (getTempRet0() | 0);
 $82 = ($mul11|0)<(0);
 $83 = $82 << 31 >> 31;
 $84 = (___muldi3(($mul11|0),($83|0),($3|0),($25|0))|0);
 $85 = (getTempRet0() | 0);
 $86 = (___muldi3(($4|0),($29|0),($mul11|0),($83|0))|0);
 $87 = (getTempRet0() | 0);
 $88 = (___muldi3(($5|0),($33|0),($mul11|0),($83|0))|0);
 $89 = (getTempRet0() | 0);
 $90 = (___muldi3(($6|0),($37|0),($mul11|0),($83|0))|0);
 $91 = (getTempRet0() | 0);
 $92 = (___muldi3(($7|0),($41|0),($mul11|0),($83|0))|0);
 $93 = (getTempRet0() | 0);
 $94 = ($mul20|0)<(0);
 $95 = $94 << 31 >> 31;
 $96 = (___muldi3(($mul20|0),($95|0),($mul11|0),($83|0))|0);
 $97 = (getTempRet0() | 0);
 $98 = (___muldi3(($mul21|0),($77|0),($2|0),($21|0))|0);
 $99 = (getTempRet0() | 0);
 $100 = (___muldi3(($mul12|0),($59|0),($3|0),($25|0))|0);
 $101 = (getTempRet0() | 0);
 $102 = (___muldi3(($mul12|0),($59|0),($4|0),($29|0))|0);
 $103 = (getTempRet0() | 0);
 $104 = (___muldi3(($mul14|0),($65|0),($mul12|0),($59|0))|0);
 $105 = (getTempRet0() | 0);
 $106 = (___muldi3(($6|0),($37|0),($mul12|0),($59|0))|0);
 $107 = (getTempRet0() | 0);
 $108 = ($mul19|0)<(0);
 $109 = $108 << 31 >> 31;
 $110 = (___muldi3(($mul19|0),($109|0),($mul12|0),($59|0))|0);
 $111 = (getTempRet0() | 0);
 $112 = (___muldi3(($mul20|0),($95|0),($mul12|0),($59|0))|0);
 $113 = (getTempRet0() | 0);
 $114 = (___muldi3(($mul21|0),($77|0),($mul12|0),($59|0))|0);
 $115 = (getTempRet0() | 0);
 $116 = (___muldi3(($4|0),($29|0),($4|0),($29|0))|0);
 $117 = (getTempRet0() | 0);
 $118 = ($mul13|0)<(0);
 $119 = $118 << 31 >> 31;
 $120 = (___muldi3(($mul13|0),($119|0),($5|0),($33|0))|0);
 $121 = (getTempRet0() | 0);
 $122 = ($mul18|0)<(0);
 $123 = $122 << 31 >> 31;
 $124 = (___muldi3(($mul18|0),($123|0),($mul13|0),($119|0))|0);
 $125 = (getTempRet0() | 0);
 $126 = (___muldi3(($mul19|0),($109|0),($4|0),($29|0))|0);
 $127 = (getTempRet0() | 0);
 $128 = (___muldi3(($mul20|0),($95|0),($mul13|0),($119|0))|0);
 $129 = (getTempRet0() | 0);
 $130 = (___muldi3(($mul21|0),($77|0),($4|0),($29|0))|0);
 $131 = (getTempRet0() | 0);
 $132 = ($mul17|0)<(0);
 $133 = $132 << 31 >> 31;
 $134 = (___muldi3(($mul17|0),($133|0),($5|0),($33|0))|0);
 $135 = (getTempRet0() | 0);
 $136 = (___muldi3(($mul18|0),($123|0),($mul14|0),($65|0))|0);
 $137 = (getTempRet0() | 0);
 $138 = (___muldi3(($mul19|0),($109|0),($mul14|0),($65|0))|0);
 $139 = (getTempRet0() | 0);
 $140 = (___muldi3(($mul20|0),($95|0),($mul14|0),($65|0))|0);
 $141 = (getTempRet0() | 0);
 $142 = (___muldi3(($mul21|0),($77|0),($mul14|0),($65|0))|0);
 $143 = (getTempRet0() | 0);
 $144 = (___muldi3(($mul18|0),($123|0),($6|0),($37|0))|0);
 $145 = (getTempRet0() | 0);
 $146 = (___muldi3(($mul19|0),($109|0),($6|0),($37|0))|0);
 $147 = (getTempRet0() | 0);
 $148 = ($mul15|0)<(0);
 $149 = $148 << 31 >> 31;
 $150 = (___muldi3(($mul20|0),($95|0),($mul15|0),($149|0))|0);
 $151 = (getTempRet0() | 0);
 $152 = (___muldi3(($mul21|0),($77|0),($6|0),($37|0))|0);
 $153 = (getTempRet0() | 0);
 $154 = (___muldi3(($mul19|0),($109|0),($7|0),($41|0))|0);
 $155 = (getTempRet0() | 0);
 $156 = (___muldi3(($mul20|0),($95|0),($mul16|0),($71|0))|0);
 $157 = (getTempRet0() | 0);
 $158 = (___muldi3(($mul21|0),($77|0),($mul16|0),($71|0))|0);
 $159 = (getTempRet0() | 0);
 $160 = (___muldi3(($mul20|0),($95|0),($8|0),($45|0))|0);
 $161 = (getTempRet0() | 0);
 $162 = (___muldi3(($mul21|0),($77|0),($8|0),($45|0))|0);
 $163 = (getTempRet0() | 0);
 $164 = (___muldi3(($mul21|0),($77|0),($9|0),($49|0))|0);
 $165 = (getTempRet0() | 0);
 $166 = (_i64Add(($134|0),($135|0),($12|0),($13|0))|0);
 $167 = (getTempRet0() | 0);
 $168 = (_i64Add(($166|0),($167|0),($124|0),($125|0))|0);
 $169 = (getTempRet0() | 0);
 $170 = (_i64Add(($168|0),($169|0),($110|0),($111|0))|0);
 $171 = (getTempRet0() | 0);
 $172 = (_i64Add(($170|0),($171|0),($96|0),($97|0))|0);
 $173 = (getTempRet0() | 0);
 $174 = (_i64Add(($172|0),($173|0),($78|0),($79|0))|0);
 $175 = (getTempRet0() | 0);
 $176 = (_i64Add(($136|0),($137|0),($18|0),($19|0))|0);
 $177 = (getTempRet0() | 0);
 $178 = (_i64Add(($176|0),($177|0),($126|0),($127|0))|0);
 $179 = (getTempRet0() | 0);
 $180 = (_i64Add(($178|0),($179|0),($112|0),($113|0))|0);
 $181 = (getTempRet0() | 0);
 $182 = (_i64Add(($180|0),($181|0),($98|0),($99|0))|0);
 $183 = (getTempRet0() | 0);
 $184 = (_i64Add(($22|0),($23|0),($54|0),($55|0))|0);
 $185 = (getTempRet0() | 0);
 $186 = (_i64Add(($184|0),($185|0),($144|0),($145|0))|0);
 $187 = (getTempRet0() | 0);
 $188 = (_i64Add(($186|0),($187|0),($138|0),($139|0))|0);
 $189 = (getTempRet0() | 0);
 $190 = (_i64Add(($188|0),($189|0),($128|0),($129|0))|0);
 $191 = (getTempRet0() | 0);
 $192 = (_i64Add(($190|0),($191|0),($114|0),($115|0))|0);
 $193 = (getTempRet0() | 0);
 $194 = (_i64Add(($26|0),($27|0),($56|0),($57|0))|0);
 $195 = (getTempRet0() | 0);
 $196 = (_i64Add(($194|0),($195|0),($146|0),($147|0))|0);
 $197 = (getTempRet0() | 0);
 $198 = (_i64Add(($196|0),($197|0),($140|0),($141|0))|0);
 $199 = (getTempRet0() | 0);
 $200 = (_i64Add(($198|0),($199|0),($130|0),($131|0))|0);
 $201 = (getTempRet0() | 0);
 $202 = (_i64Add(($60|0),($61|0),($80|0),($81|0))|0);
 $203 = (getTempRet0() | 0);
 $204 = (_i64Add(($202|0),($203|0),($30|0),($31|0))|0);
 $205 = (getTempRet0() | 0);
 $206 = (_i64Add(($204|0),($205|0),($154|0),($155|0))|0);
 $207 = (getTempRet0() | 0);
 $208 = (_i64Add(($206|0),($207|0),($150|0),($151|0))|0);
 $209 = (getTempRet0() | 0);
 $210 = (_i64Add(($208|0),($209|0),($142|0),($143|0))|0);
 $211 = (getTempRet0() | 0);
 $212 = (_i64Add(($62|0),($63|0),($84|0),($85|0))|0);
 $213 = (getTempRet0() | 0);
 $214 = (_i64Add(($212|0),($213|0),($34|0),($35|0))|0);
 $215 = (getTempRet0() | 0);
 $216 = (_i64Add(($214|0),($215|0),($156|0),($157|0))|0);
 $217 = (getTempRet0() | 0);
 $218 = (_i64Add(($216|0),($217|0),($152|0),($153|0))|0);
 $219 = (getTempRet0() | 0);
 $220 = (_i64Add(($100|0),($101|0),($86|0),($87|0))|0);
 $221 = (getTempRet0() | 0);
 $222 = (_i64Add(($220|0),($221|0),($66|0),($67|0))|0);
 $223 = (getTempRet0() | 0);
 $224 = (_i64Add(($222|0),($223|0),($38|0),($39|0))|0);
 $225 = (getTempRet0() | 0);
 $226 = (_i64Add(($224|0),($225|0),($160|0),($161|0))|0);
 $227 = (getTempRet0() | 0);
 $228 = (_i64Add(($226|0),($227|0),($158|0),($159|0))|0);
 $229 = (getTempRet0() | 0);
 $230 = (_i64Add(($88|0),($89|0),($102|0),($103|0))|0);
 $231 = (getTempRet0() | 0);
 $232 = (_i64Add(($230|0),($231|0),($68|0),($69|0))|0);
 $233 = (getTempRet0() | 0);
 $234 = (_i64Add(($232|0),($233|0),($42|0),($43|0))|0);
 $235 = (getTempRet0() | 0);
 $236 = (_i64Add(($234|0),($235|0),($162|0),($163|0))|0);
 $237 = (getTempRet0() | 0);
 $238 = (_i64Add(($90|0),($91|0),($116|0),($117|0))|0);
 $239 = (getTempRet0() | 0);
 $240 = (_i64Add(($238|0),($239|0),($104|0),($105|0))|0);
 $241 = (getTempRet0() | 0);
 $242 = (_i64Add(($240|0),($241|0),($72|0),($73|0))|0);
 $243 = (getTempRet0() | 0);
 $244 = (_i64Add(($242|0),($243|0),($46|0),($47|0))|0);
 $245 = (getTempRet0() | 0);
 $246 = (_i64Add(($244|0),($245|0),($164|0),($165|0))|0);
 $247 = (getTempRet0() | 0);
 $248 = (_i64Add(($106|0),($107|0),($120|0),($121|0))|0);
 $249 = (getTempRet0() | 0);
 $250 = (_i64Add(($248|0),($249|0),($92|0),($93|0))|0);
 $251 = (getTempRet0() | 0);
 $252 = (_i64Add(($250|0),($251|0),($74|0),($75|0))|0);
 $253 = (getTempRet0() | 0);
 $254 = (_i64Add(($252|0),($253|0),($50|0),($51|0))|0);
 $255 = (getTempRet0() | 0);
 $256 = (_bitshift64Shl(($174|0),($175|0),1)|0);
 $257 = (getTempRet0() | 0);
 $258 = (_bitshift64Shl(($182|0),($183|0),1)|0);
 $259 = (getTempRet0() | 0);
 $260 = (_bitshift64Shl(($192|0),($193|0),1)|0);
 $261 = (getTempRet0() | 0);
 $262 = (_bitshift64Shl(($200|0),($201|0),1)|0);
 $263 = (getTempRet0() | 0);
 $264 = (_bitshift64Shl(($210|0),($211|0),1)|0);
 $265 = (getTempRet0() | 0);
 $266 = (_bitshift64Shl(($218|0),($219|0),1)|0);
 $267 = (getTempRet0() | 0);
 $268 = (_bitshift64Shl(($228|0),($229|0),1)|0);
 $269 = (getTempRet0() | 0);
 $270 = (_bitshift64Shl(($236|0),($237|0),1)|0);
 $271 = (getTempRet0() | 0);
 $272 = (_bitshift64Shl(($246|0),($247|0),1)|0);
 $273 = (getTempRet0() | 0);
 $274 = (_bitshift64Shl(($254|0),($255|0),1)|0);
 $275 = (getTempRet0() | 0);
 $276 = (_i64Add(($256|0),($257|0),33554432,0)|0);
 $277 = (getTempRet0() | 0);
 $278 = (_bitshift64Ashr(($276|0),($277|0),26)|0);
 $279 = (getTempRet0() | 0);
 $280 = (_i64Add(($278|0),($279|0),($258|0),($259|0))|0);
 $281 = (getTempRet0() | 0);
 $282 = $276 & -67108864;
 $283 = (_i64Subtract(($256|0),($257|0),($282|0),($277|0))|0);
 $284 = (getTempRet0() | 0);
 $285 = (_i64Add(($264|0),($265|0),33554432,0)|0);
 $286 = (getTempRet0() | 0);
 $287 = (_bitshift64Ashr(($285|0),($286|0),26)|0);
 $288 = (getTempRet0() | 0);
 $289 = (_i64Add(($287|0),($288|0),($266|0),($267|0))|0);
 $290 = (getTempRet0() | 0);
 $291 = $285 & -67108864;
 $292 = (_i64Subtract(($264|0),($265|0),($291|0),($286|0))|0);
 $293 = (getTempRet0() | 0);
 $294 = (_i64Add(($280|0),($281|0),16777216,0)|0);
 $295 = (getTempRet0() | 0);
 $296 = (_bitshift64Ashr(($294|0),($295|0),25)|0);
 $297 = (getTempRet0() | 0);
 $298 = (_i64Add(($296|0),($297|0),($260|0),($261|0))|0);
 $299 = (getTempRet0() | 0);
 $300 = $294 & -33554432;
 $301 = (_i64Subtract(($280|0),($281|0),($300|0),0)|0);
 $302 = (getTempRet0() | 0);
 $303 = (_i64Add(($289|0),($290|0),16777216,0)|0);
 $304 = (getTempRet0() | 0);
 $305 = (_bitshift64Ashr(($303|0),($304|0),25)|0);
 $306 = (getTempRet0() | 0);
 $307 = (_i64Add(($305|0),($306|0),($268|0),($269|0))|0);
 $308 = (getTempRet0() | 0);
 $309 = $303 & -33554432;
 $310 = (_i64Subtract(($289|0),($290|0),($309|0),0)|0);
 $311 = (getTempRet0() | 0);
 $312 = (_i64Add(($298|0),($299|0),33554432,0)|0);
 $313 = (getTempRet0() | 0);
 $314 = (_bitshift64Ashr(($312|0),($313|0),26)|0);
 $315 = (getTempRet0() | 0);
 $316 = (_i64Add(($314|0),($315|0),($262|0),($263|0))|0);
 $317 = (getTempRet0() | 0);
 $318 = $312 & -67108864;
 $319 = (_i64Subtract(($298|0),($299|0),($318|0),0)|0);
 $320 = (getTempRet0() | 0);
 $321 = (_i64Add(($307|0),($308|0),33554432,0)|0);
 $322 = (getTempRet0() | 0);
 $323 = (_bitshift64Ashr(($321|0),($322|0),26)|0);
 $324 = (getTempRet0() | 0);
 $325 = (_i64Add(($323|0),($324|0),($270|0),($271|0))|0);
 $326 = (getTempRet0() | 0);
 $327 = $321 & -67108864;
 $328 = (_i64Subtract(($307|0),($308|0),($327|0),0)|0);
 $329 = (getTempRet0() | 0);
 $330 = (_i64Add(($316|0),($317|0),16777216,0)|0);
 $331 = (getTempRet0() | 0);
 $332 = (_bitshift64Ashr(($330|0),($331|0),25)|0);
 $333 = (getTempRet0() | 0);
 $334 = (_i64Add(($332|0),($333|0),($292|0),($293|0))|0);
 $335 = (getTempRet0() | 0);
 $336 = $330 & -33554432;
 $337 = (_i64Subtract(($316|0),($317|0),($336|0),0)|0);
 $338 = (getTempRet0() | 0);
 $339 = (_i64Add(($325|0),($326|0),16777216,0)|0);
 $340 = (getTempRet0() | 0);
 $341 = (_bitshift64Ashr(($339|0),($340|0),25)|0);
 $342 = (getTempRet0() | 0);
 $343 = (_i64Add(($341|0),($342|0),($272|0),($273|0))|0);
 $344 = (getTempRet0() | 0);
 $345 = $339 & -33554432;
 $346 = (_i64Subtract(($325|0),($326|0),($345|0),0)|0);
 $347 = (getTempRet0() | 0);
 $348 = (_i64Add(($334|0),($335|0),33554432,0)|0);
 $349 = (getTempRet0() | 0);
 $350 = (_bitshift64Lshr(($348|0),($349|0),26)|0);
 $351 = (getTempRet0() | 0);
 $352 = (_i64Add(($310|0),($311|0),($350|0),($351|0))|0);
 $353 = (getTempRet0() | 0);
 $354 = $348 & -67108864;
 $355 = (_i64Subtract(($334|0),($335|0),($354|0),0)|0);
 $356 = (getTempRet0() | 0);
 $357 = (_i64Add(($343|0),($344|0),33554432,0)|0);
 $358 = (getTempRet0() | 0);
 $359 = (_bitshift64Ashr(($357|0),($358|0),26)|0);
 $360 = (getTempRet0() | 0);
 $361 = (_i64Add(($359|0),($360|0),($274|0),($275|0))|0);
 $362 = (getTempRet0() | 0);
 $363 = $357 & -67108864;
 $364 = (_i64Subtract(($343|0),($344|0),($363|0),0)|0);
 $365 = (getTempRet0() | 0);
 $366 = (_i64Add(($361|0),($362|0),16777216,0)|0);
 $367 = (getTempRet0() | 0);
 $368 = (_bitshift64Ashr(($366|0),($367|0),25)|0);
 $369 = (getTempRet0() | 0);
 $370 = (___muldi3(($368|0),($369|0),19,0)|0);
 $371 = (getTempRet0() | 0);
 $372 = (_i64Add(($370|0),($371|0),($283|0),($284|0))|0);
 $373 = (getTempRet0() | 0);
 $374 = $366 & -33554432;
 $375 = (_i64Subtract(($361|0),($362|0),($374|0),0)|0);
 $376 = (getTempRet0() | 0);
 $377 = (_i64Add(($372|0),($373|0),33554432,0)|0);
 $378 = (getTempRet0() | 0);
 $379 = (_bitshift64Lshr(($377|0),($378|0),26)|0);
 $380 = (getTempRet0() | 0);
 $381 = (_i64Add(($301|0),($302|0),($379|0),($380|0))|0);
 $382 = (getTempRet0() | 0);
 $383 = $377 & -67108864;
 $384 = (_i64Subtract(($372|0),($373|0),($383|0),0)|0);
 $385 = (getTempRet0() | 0);
 HEAP32[$h>>2] = $384;
 $arrayidx301 = ((($h)) + 4|0);
 HEAP32[$arrayidx301>>2] = $381;
 $arrayidx303 = ((($h)) + 8|0);
 HEAP32[$arrayidx303>>2] = $319;
 $arrayidx305 = ((($h)) + 12|0);
 HEAP32[$arrayidx305>>2] = $337;
 $arrayidx307 = ((($h)) + 16|0);
 HEAP32[$arrayidx307>>2] = $355;
 $arrayidx309 = ((($h)) + 20|0);
 HEAP32[$arrayidx309>>2] = $352;
 $arrayidx311 = ((($h)) + 24|0);
 HEAP32[$arrayidx311>>2] = $328;
 $arrayidx313 = ((($h)) + 28|0);
 HEAP32[$arrayidx313>>2] = $346;
 $arrayidx315 = ((($h)) + 32|0);
 HEAP32[$arrayidx315>>2] = $364;
 $arrayidx317 = ((($h)) + 36|0);
 HEAP32[$arrayidx317>>2] = $375;
 return;
}
function _ge_p1p1_to_p3($r,$p) {
 $r = $r|0;
 $p = $p|0;
 var $arraydecay15 = 0, $arraydecay3 = 0, $arraydecay4 = 0, $arraydecay6 = 0, $arraydecay7 = 0, $arraydecay9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay3 = ((($p)) + 120|0);
 _fe_mul($r,$p,$arraydecay3);
 $arraydecay4 = ((($r)) + 40|0);
 $arraydecay6 = ((($p)) + 40|0);
 $arraydecay7 = ((($p)) + 80|0);
 _fe_mul($arraydecay4,$arraydecay6,$arraydecay7);
 $arraydecay9 = ((($r)) + 80|0);
 _fe_mul($arraydecay9,$arraydecay7,$arraydecay3);
 $arraydecay15 = ((($r)) + 120|0);
 _fe_mul($arraydecay15,$p,$arraydecay6);
 return;
}
function _ge_double_scalarmult_base_vartime($r,$a,$A,$b) {
 $r = $r|0;
 $a = $a|0;
 $A = $A|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $Ai = 0, $add$i$i = 0, $add$i107$i = 0, $add$i181$i = 0, $add$i43$i = 0, $add20$i$i = 0, $add20$i108$i = 0, $add20$i182$i = 0, $add20$i44$i = 0, $add21$i$i = 0;
 var $add21$i109$i = 0, $add21$i183$i = 0, $add21$i45$i = 0, $add22$i$i = 0, $add22$i110$i = 0, $add22$i184$i = 0, $add22$i46$i = 0, $add23$i$i = 0, $add23$i111$i = 0, $add23$i185$i = 0, $add23$i47$i = 0, $add24$i$i = 0, $add24$i112$i = 0, $add24$i186$i = 0, $add24$i48$i = 0, $add25$i$i = 0, $add25$i113$i = 0, $add25$i187$i = 0, $add25$i49$i = 0, $add26$i$i = 0;
 var $add26$i114$i = 0, $add26$i188$i = 0, $add26$i50$i = 0, $add27$i$i = 0, $add27$i115$i = 0, $add27$i189$i = 0, $add27$i51$i = 0, $add28$i$i = 0, $add28$i116$i = 0, $add28$i190$i = 0, $add28$i52$i = 0, $arraydecay1$i = 0, $arraydecay13$i = 0, $arraydecay15$i = 0, $arraydecay18$i = 0, $arraydecay2$i = 0, $arraydecay20$i = 0, $arraydecay3$i20 = 0, $arraydecay4$i21 = 0, $arraydecay6$i22 = 0;
 var $arraydecay7$i23 = 0, $arraydecay9$i24 = 0, $arrayidx = 0, $arrayidx1$i$i = 0, $arrayidx1$i$i52 = 0, $arrayidx1$i126$i = 0, $arrayidx1$i163$i = 0, $arrayidx1$i3$i = 0, $arrayidx10 = 0, $arrayidx11$i$i = 0, $arrayidx11$i71$i = 0, $arrayidx12$i$i = 0, $arrayidx12$i72$i = 0, $arrayidx13$i$i = 0, $arrayidx13$i73$i = 0, $arrayidx14$i$i = 0, $arrayidx14$i74$i = 0, $arrayidx15$i$i = 0, $arrayidx15$i75$i = 0, $arrayidx16$i$i = 0;
 var $arrayidx16$i76$i = 0, $arrayidx17 = 0, $arrayidx17$i$i = 0, $arrayidx17$i77$i = 0, $arrayidx18$i$i = 0, $arrayidx18$i78$i = 0, $arrayidx19$i$i = 0, $arrayidx19$i79$i = 0, $arrayidx2$i$i = 0, $arrayidx2$i127$i = 0, $arrayidx2$i164$i = 0, $arrayidx26 = 0, $arrayidx29 = 0, $arrayidx3 = 0, $arrayidx3$i$i = 0, $arrayidx3$i128$i = 0, $arrayidx3$i165$i = 0, $arrayidx30$i$i = 0, $arrayidx30$i228$i = 0, $arrayidx31$i$i = 0;
 var $arrayidx31$i229$i = 0, $arrayidx32$i$i = 0, $arrayidx32$i230$i = 0, $arrayidx33$i$i = 0, $arrayidx33$i231$i = 0, $arrayidx34$i$i = 0, $arrayidx34$i232$i = 0, $arrayidx35$i$i = 0, $arrayidx35$i233$i = 0, $arrayidx36$i$i = 0, $arrayidx36$i234$i = 0, $arrayidx37 = 0, $arrayidx37$i$i = 0, $arrayidx37$i235$i = 0, $arrayidx38$i$i = 0, $arrayidx38$i236$i = 0, $arrayidx4$i$i = 0, $arrayidx4$i129$i = 0, $arrayidx4$i166$i = 0, $arrayidx5$i$i = 0;
 var $arrayidx5$i130$i = 0, $arrayidx5$i167$i = 0, $arrayidx6$i$i = 0, $arrayidx6$i131$i = 0, $arrayidx6$i168$i = 0, $arrayidx7$i$i = 0, $arrayidx7$i132$i = 0, $arrayidx7$i169$i = 0, $arrayidx8$i$i = 0, $arrayidx8$i133$i = 0, $arrayidx8$i170$i = 0, $arrayidx9$i$i = 0, $arrayidx9$i134$i = 0, $arrayidx9$i171$i = 0, $aslide = 0, $bslide = 0, $cmp = 0, $cmp12 = 0, $cmp20 = 0, $cmp31 = 0;
 var $cmp41 = 0, $cmp7 = 0, $cmp753 = 0, $dec = 0, $dec52 = 0, $div25 = 0, $div47 = 0, $i$055 = 0, $i$154 = 0, $sub$i$i = 0, $sub$i144$i = 0, $sub$i218$i = 0, $sub20$i$i = 0, $sub20$i145$i = 0, $sub20$i219$i = 0, $sub21$i$i = 0, $sub21$i146$i = 0, $sub21$i220$i = 0, $sub22$i$i = 0, $sub22$i147$i = 0;
 var $sub22$i221$i = 0, $sub23$i$i = 0, $sub23$i148$i = 0, $sub23$i222$i = 0, $sub24$i$i = 0, $sub24$i149$i = 0, $sub24$i223$i = 0, $sub25$i$i = 0, $sub25$i150$i = 0, $sub25$i224$i = 0, $sub26$i$i = 0, $sub26$i151$i = 0, $sub26$i225$i = 0, $sub27$i$i = 0, $sub27$i152$i = 0, $sub27$i226$i = 0, $sub28$i$i = 0, $sub28$i153$i = 0, $sub28$i227$i = 0, $t = 0;
 var $tobool = 0, $tobool5 = 0, $u = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0;
 $aslide = sp + 1536|0;
 $bslide = sp + 1280|0;
 $Ai = sp;
 $t = sp + 1952|0;
 $u = sp + 1792|0;
 _slide($aslide,$a);
 _slide($bslide,$b);
 _ge_dsm_precomp($Ai,$A);
 dest=$r; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay1$i = ((($r)) + 40|0);
 HEAP32[$arraydecay1$i>>2] = 1;
 $arrayidx1$i3$i = ((($r)) + 44|0);
 dest=$arrayidx1$i3$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay2$i = ((($r)) + 80|0);
 HEAP32[$arraydecay2$i>>2] = 1;
 $arrayidx1$i$i = ((($r)) + 84|0);
 dest=$arrayidx1$i$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i$055 = 255;
 while(1) {
  $arrayidx = (($aslide) + ($i$055)|0);
  $0 = HEAP8[$arrayidx>>0]|0;
  $tobool = ($0<<24>>24)==(0);
  if (!($tobool)) {
   break;
  }
  $arrayidx3 = (($bslide) + ($i$055)|0);
  $1 = HEAP8[$arrayidx3>>0]|0;
  $tobool5 = ($1<<24>>24)==(0);
  if (!($tobool5)) {
   break;
  }
  $dec = (($i$055) + -1)|0;
  $cmp = ($i$055|0)==(0);
  if ($cmp) {
   label = 16;
   break;
  } else {
   $i$055 = $dec;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
 $cmp753 = ($i$055|0)>(-1);
 if (!($cmp753)) {
  STACKTOP = sp;return;
 }
 $arraydecay3$i20 = ((($t)) + 120|0);
 $arraydecay4$i21 = ((($u)) + 40|0);
 $arraydecay6$i22 = ((($t)) + 40|0);
 $arraydecay7$i23 = ((($t)) + 80|0);
 $arraydecay9$i24 = ((($u)) + 80|0);
 $arraydecay15$i = ((($u)) + 120|0);
 $arrayidx1$i$i52 = ((($u)) + 44|0);
 $arrayidx2$i$i = ((($u)) + 48|0);
 $arrayidx3$i$i = ((($u)) + 52|0);
 $arrayidx4$i$i = ((($u)) + 56|0);
 $arrayidx5$i$i = ((($u)) + 60|0);
 $arrayidx6$i$i = ((($u)) + 64|0);
 $arrayidx7$i$i = ((($u)) + 68|0);
 $arrayidx8$i$i = ((($u)) + 72|0);
 $arrayidx9$i$i = ((($u)) + 76|0);
 $arrayidx11$i$i = ((($u)) + 4|0);
 $arrayidx12$i$i = ((($u)) + 8|0);
 $arrayidx13$i$i = ((($u)) + 12|0);
 $arrayidx14$i$i = ((($u)) + 16|0);
 $arrayidx15$i$i = ((($u)) + 20|0);
 $arrayidx16$i$i = ((($u)) + 24|0);
 $arrayidx17$i$i = ((($u)) + 28|0);
 $arrayidx18$i$i = ((($u)) + 32|0);
 $arrayidx19$i$i = ((($u)) + 36|0);
 $arrayidx30$i$i = ((($t)) + 4|0);
 $arrayidx31$i$i = ((($t)) + 8|0);
 $arrayidx32$i$i = ((($t)) + 12|0);
 $arrayidx33$i$i = ((($t)) + 16|0);
 $arrayidx34$i$i = ((($t)) + 20|0);
 $arrayidx35$i$i = ((($t)) + 24|0);
 $arrayidx36$i$i = ((($t)) + 28|0);
 $arrayidx37$i$i = ((($t)) + 32|0);
 $arrayidx38$i$i = ((($t)) + 36|0);
 $arrayidx30$i228$i = ((($t)) + 44|0);
 $arrayidx31$i229$i = ((($t)) + 48|0);
 $arrayidx32$i230$i = ((($t)) + 52|0);
 $arrayidx33$i231$i = ((($t)) + 56|0);
 $arrayidx34$i232$i = ((($t)) + 60|0);
 $arrayidx35$i233$i = ((($t)) + 64|0);
 $arrayidx36$i234$i = ((($t)) + 68|0);
 $arrayidx37$i235$i = ((($t)) + 72|0);
 $arrayidx38$i236$i = ((($t)) + 76|0);
 $arrayidx1$i163$i = ((($u)) + 84|0);
 $arrayidx2$i164$i = ((($u)) + 88|0);
 $arrayidx3$i165$i = ((($u)) + 92|0);
 $arrayidx4$i166$i = ((($u)) + 96|0);
 $arrayidx5$i167$i = ((($u)) + 100|0);
 $arrayidx6$i168$i = ((($u)) + 104|0);
 $arrayidx7$i169$i = ((($u)) + 108|0);
 $arrayidx8$i170$i = ((($u)) + 112|0);
 $arrayidx9$i171$i = ((($u)) + 116|0);
 $arrayidx1$i126$i = ((($t)) + 84|0);
 $arrayidx2$i127$i = ((($t)) + 88|0);
 $arrayidx3$i128$i = ((($t)) + 92|0);
 $arrayidx4$i129$i = ((($t)) + 96|0);
 $arrayidx5$i130$i = ((($t)) + 100|0);
 $arrayidx6$i131$i = ((($t)) + 104|0);
 $arrayidx7$i132$i = ((($t)) + 108|0);
 $arrayidx8$i133$i = ((($t)) + 112|0);
 $arrayidx9$i134$i = ((($t)) + 116|0);
 $arrayidx11$i71$i = ((($t)) + 124|0);
 $arrayidx12$i72$i = ((($t)) + 128|0);
 $arrayidx13$i73$i = ((($t)) + 132|0);
 $arrayidx14$i74$i = ((($t)) + 136|0);
 $arrayidx15$i75$i = ((($t)) + 140|0);
 $arrayidx16$i76$i = ((($t)) + 144|0);
 $arrayidx17$i77$i = ((($t)) + 148|0);
 $arrayidx18$i78$i = ((($t)) + 152|0);
 $arrayidx19$i79$i = ((($t)) + 156|0);
 $i$154 = $i$055;
 while(1) {
  _ge_p2_dbl($t,$r);
  $arrayidx10 = (($aslide) + ($i$154)|0);
  $2 = HEAP8[$arrayidx10>>0]|0;
  $cmp12 = ($2<<24>>24)>(0);
  if ($cmp12) {
   _fe_mul($u,$t,$arraydecay3$i20);
   _fe_mul($arraydecay4$i21,$arraydecay6$i22,$arraydecay7$i23);
   _fe_mul($arraydecay9$i24,$arraydecay7$i23,$arraydecay3$i20);
   _fe_mul($arraydecay15$i,$t,$arraydecay6$i22);
   $3 = ($2&255) >>> 1;
   $4 = $3&255;
   $arrayidx17 = (($Ai) + (($4*160)|0)|0);
   _ge_add($t,$u,$arrayidx17);
  } else {
   $cmp20 = ($2<<24>>24)<(0);
   if ($cmp20) {
    _fe_mul($u,$t,$arraydecay3$i20);
    _fe_mul($arraydecay4$i21,$arraydecay6$i22,$arraydecay7$i23);
    _fe_mul($arraydecay9$i24,$arraydecay7$i23,$arraydecay3$i20);
    _fe_mul($arraydecay15$i,$t,$arraydecay6$i22);
    $5 = (($2<<24>>24) / -2)&-1;
    $div25 = $5 << 24 >> 24;
    $arrayidx26 = (($Ai) + (($div25*160)|0)|0);
    _ge_sub($t,$u,$arrayidx26);
   }
  }
  $arrayidx29 = (($bslide) + ($i$154)|0);
  $6 = HEAP8[$arrayidx29>>0]|0;
  $cmp31 = ($6<<24>>24)>(0);
  if ($cmp31) {
   _fe_mul($u,$t,$arraydecay3$i20);
   _fe_mul($arraydecay4$i21,$arraydecay6$i22,$arraydecay7$i23);
   _fe_mul($arraydecay9$i24,$arraydecay7$i23,$arraydecay3$i20);
   _fe_mul($arraydecay15$i,$t,$arraydecay6$i22);
   $7 = ($6&255) >>> 1;
   $8 = $7&255;
   $arrayidx37 = (31040 + (($8*120)|0)|0);
   _ge_madd($t,$u,$arrayidx37);
  } else {
   $cmp41 = ($6<<24>>24)<(0);
   if ($cmp41) {
    _fe_mul($u,$t,$arraydecay3$i20);
    _fe_mul($arraydecay4$i21,$arraydecay6$i22,$arraydecay7$i23);
    _fe_mul($arraydecay9$i24,$arraydecay7$i23,$arraydecay3$i20);
    _fe_mul($arraydecay15$i,$t,$arraydecay6$i22);
    $9 = (($6<<24>>24) / -2)&-1;
    $div47 = $9 << 24 >> 24;
    $10 = HEAP32[$arraydecay4$i21>>2]|0;
    $11 = HEAP32[$arrayidx1$i$i52>>2]|0;
    $12 = HEAP32[$arrayidx2$i$i>>2]|0;
    $13 = HEAP32[$arrayidx3$i$i>>2]|0;
    $14 = HEAP32[$arrayidx4$i$i>>2]|0;
    $15 = HEAP32[$arrayidx5$i$i>>2]|0;
    $16 = HEAP32[$arrayidx6$i$i>>2]|0;
    $17 = HEAP32[$arrayidx7$i$i>>2]|0;
    $18 = HEAP32[$arrayidx8$i$i>>2]|0;
    $19 = HEAP32[$arrayidx9$i$i>>2]|0;
    $20 = HEAP32[$u>>2]|0;
    $21 = HEAP32[$arrayidx11$i$i>>2]|0;
    $22 = HEAP32[$arrayidx12$i$i>>2]|0;
    $23 = HEAP32[$arrayidx13$i$i>>2]|0;
    $24 = HEAP32[$arrayidx14$i$i>>2]|0;
    $25 = HEAP32[$arrayidx15$i$i>>2]|0;
    $26 = HEAP32[$arrayidx16$i$i>>2]|0;
    $27 = HEAP32[$arrayidx17$i$i>>2]|0;
    $28 = HEAP32[$arrayidx18$i$i>>2]|0;
    $29 = HEAP32[$arrayidx19$i$i>>2]|0;
    $add$i$i = (($20) + ($10))|0;
    $add20$i$i = (($21) + ($11))|0;
    $add21$i$i = (($22) + ($12))|0;
    $add22$i$i = (($23) + ($13))|0;
    $add23$i$i = (($24) + ($14))|0;
    $add24$i$i = (($25) + ($15))|0;
    $add25$i$i = (($26) + ($16))|0;
    $add26$i$i = (($27) + ($17))|0;
    $add27$i$i = (($28) + ($18))|0;
    $add28$i$i = (($29) + ($19))|0;
    HEAP32[$t>>2] = $add$i$i;
    HEAP32[$arrayidx30$i$i>>2] = $add20$i$i;
    HEAP32[$arrayidx31$i$i>>2] = $add21$i$i;
    HEAP32[$arrayidx32$i$i>>2] = $add22$i$i;
    HEAP32[$arrayidx33$i$i>>2] = $add23$i$i;
    HEAP32[$arrayidx34$i$i>>2] = $add24$i$i;
    HEAP32[$arrayidx35$i$i>>2] = $add25$i$i;
    HEAP32[$arrayidx36$i$i>>2] = $add26$i$i;
    HEAP32[$arrayidx37$i$i>>2] = $add27$i$i;
    HEAP32[$arrayidx38$i$i>>2] = $add28$i$i;
    $sub$i218$i = (($10) - ($20))|0;
    $sub20$i219$i = (($11) - ($21))|0;
    $sub21$i220$i = (($12) - ($22))|0;
    $sub22$i221$i = (($13) - ($23))|0;
    $sub23$i222$i = (($14) - ($24))|0;
    $sub24$i223$i = (($15) - ($25))|0;
    $sub25$i224$i = (($16) - ($26))|0;
    $sub26$i225$i = (($17) - ($27))|0;
    $sub27$i226$i = (($18) - ($28))|0;
    $sub28$i227$i = (($19) - ($29))|0;
    HEAP32[$arraydecay6$i22>>2] = $sub$i218$i;
    HEAP32[$arrayidx30$i228$i>>2] = $sub20$i219$i;
    HEAP32[$arrayidx31$i229$i>>2] = $sub21$i220$i;
    HEAP32[$arrayidx32$i230$i>>2] = $sub22$i221$i;
    HEAP32[$arrayidx33$i231$i>>2] = $sub23$i222$i;
    HEAP32[$arrayidx34$i232$i>>2] = $sub24$i223$i;
    HEAP32[$arrayidx35$i233$i>>2] = $sub25$i224$i;
    HEAP32[$arrayidx36$i234$i>>2] = $sub26$i225$i;
    HEAP32[$arrayidx37$i235$i>>2] = $sub27$i226$i;
    HEAP32[$arrayidx38$i236$i>>2] = $sub28$i227$i;
    $arraydecay13$i = (((31040 + (($div47*120)|0)|0)) + 40|0);
    _fe_mul($arraydecay7$i23,$t,$arraydecay13$i);
    $arraydecay18$i = (31040 + (($div47*120)|0)|0);
    _fe_mul($arraydecay6$i22,$arraydecay6$i22,$arraydecay18$i);
    $arraydecay20$i = (((31040 + (($div47*120)|0)|0)) + 80|0);
    _fe_mul($arraydecay3$i20,$arraydecay20$i,$arraydecay15$i);
    $30 = HEAP32[$arraydecay9$i24>>2]|0;
    $31 = HEAP32[$arrayidx1$i163$i>>2]|0;
    $32 = HEAP32[$arrayidx2$i164$i>>2]|0;
    $33 = HEAP32[$arrayidx3$i165$i>>2]|0;
    $34 = HEAP32[$arrayidx4$i166$i>>2]|0;
    $35 = HEAP32[$arrayidx5$i167$i>>2]|0;
    $36 = HEAP32[$arrayidx6$i168$i>>2]|0;
    $37 = HEAP32[$arrayidx7$i169$i>>2]|0;
    $38 = HEAP32[$arrayidx8$i170$i>>2]|0;
    $39 = HEAP32[$arrayidx9$i171$i>>2]|0;
    $add$i181$i = $30 << 1;
    $add20$i182$i = $31 << 1;
    $add21$i183$i = $32 << 1;
    $add22$i184$i = $33 << 1;
    $add23$i185$i = $34 << 1;
    $add24$i186$i = $35 << 1;
    $add25$i187$i = $36 << 1;
    $add26$i188$i = $37 << 1;
    $add27$i189$i = $38 << 1;
    $add28$i190$i = $39 << 1;
    $40 = HEAP32[$arraydecay7$i23>>2]|0;
    $41 = HEAP32[$arrayidx1$i126$i>>2]|0;
    $42 = HEAP32[$arrayidx2$i127$i>>2]|0;
    $43 = HEAP32[$arrayidx3$i128$i>>2]|0;
    $44 = HEAP32[$arrayidx4$i129$i>>2]|0;
    $45 = HEAP32[$arrayidx5$i130$i>>2]|0;
    $46 = HEAP32[$arrayidx6$i131$i>>2]|0;
    $47 = HEAP32[$arrayidx7$i132$i>>2]|0;
    $48 = HEAP32[$arrayidx8$i133$i>>2]|0;
    $49 = HEAP32[$arrayidx9$i134$i>>2]|0;
    $50 = HEAP32[$arraydecay6$i22>>2]|0;
    $51 = HEAP32[$arrayidx30$i228$i>>2]|0;
    $52 = HEAP32[$arrayidx31$i229$i>>2]|0;
    $53 = HEAP32[$arrayidx32$i230$i>>2]|0;
    $54 = HEAP32[$arrayidx33$i231$i>>2]|0;
    $55 = HEAP32[$arrayidx34$i232$i>>2]|0;
    $56 = HEAP32[$arrayidx35$i233$i>>2]|0;
    $57 = HEAP32[$arrayidx36$i234$i>>2]|0;
    $58 = HEAP32[$arrayidx37$i235$i>>2]|0;
    $59 = HEAP32[$arrayidx38$i236$i>>2]|0;
    $sub$i144$i = (($40) - ($50))|0;
    $sub20$i145$i = (($41) - ($51))|0;
    $sub21$i146$i = (($42) - ($52))|0;
    $sub22$i147$i = (($43) - ($53))|0;
    $sub23$i148$i = (($44) - ($54))|0;
    $sub24$i149$i = (($45) - ($55))|0;
    $sub25$i150$i = (($46) - ($56))|0;
    $sub26$i151$i = (($47) - ($57))|0;
    $sub27$i152$i = (($48) - ($58))|0;
    $sub28$i153$i = (($49) - ($59))|0;
    HEAP32[$t>>2] = $sub$i144$i;
    HEAP32[$arrayidx30$i$i>>2] = $sub20$i145$i;
    HEAP32[$arrayidx31$i$i>>2] = $sub21$i146$i;
    HEAP32[$arrayidx32$i$i>>2] = $sub22$i147$i;
    HEAP32[$arrayidx33$i$i>>2] = $sub23$i148$i;
    HEAP32[$arrayidx34$i$i>>2] = $sub24$i149$i;
    HEAP32[$arrayidx35$i$i>>2] = $sub25$i150$i;
    HEAP32[$arrayidx36$i$i>>2] = $sub26$i151$i;
    HEAP32[$arrayidx37$i$i>>2] = $sub27$i152$i;
    HEAP32[$arrayidx38$i$i>>2] = $sub28$i153$i;
    $add$i107$i = (($50) + ($40))|0;
    $add20$i108$i = (($51) + ($41))|0;
    $add21$i109$i = (($52) + ($42))|0;
    $add22$i110$i = (($53) + ($43))|0;
    $add23$i111$i = (($54) + ($44))|0;
    $add24$i112$i = (($55) + ($45))|0;
    $add25$i113$i = (($56) + ($46))|0;
    $add26$i114$i = (($57) + ($47))|0;
    $add27$i115$i = (($58) + ($48))|0;
    $add28$i116$i = (($59) + ($49))|0;
    HEAP32[$arraydecay6$i22>>2] = $add$i107$i;
    HEAP32[$arrayidx30$i228$i>>2] = $add20$i108$i;
    HEAP32[$arrayidx31$i229$i>>2] = $add21$i109$i;
    HEAP32[$arrayidx32$i230$i>>2] = $add22$i110$i;
    HEAP32[$arrayidx33$i231$i>>2] = $add23$i111$i;
    HEAP32[$arrayidx34$i232$i>>2] = $add24$i112$i;
    HEAP32[$arrayidx35$i233$i>>2] = $add25$i113$i;
    HEAP32[$arrayidx36$i234$i>>2] = $add26$i114$i;
    HEAP32[$arrayidx37$i235$i>>2] = $add27$i115$i;
    HEAP32[$arrayidx38$i236$i>>2] = $add28$i116$i;
    $60 = HEAP32[$arraydecay3$i20>>2]|0;
    $61 = HEAP32[$arrayidx11$i71$i>>2]|0;
    $62 = HEAP32[$arrayidx12$i72$i>>2]|0;
    $63 = HEAP32[$arrayidx13$i73$i>>2]|0;
    $64 = HEAP32[$arrayidx14$i74$i>>2]|0;
    $65 = HEAP32[$arrayidx15$i75$i>>2]|0;
    $66 = HEAP32[$arrayidx16$i76$i>>2]|0;
    $67 = HEAP32[$arrayidx17$i77$i>>2]|0;
    $68 = HEAP32[$arrayidx18$i78$i>>2]|0;
    $69 = HEAP32[$arrayidx19$i79$i>>2]|0;
    $sub$i$i = (($add$i181$i) - ($60))|0;
    $sub20$i$i = (($add20$i182$i) - ($61))|0;
    $sub21$i$i = (($add21$i183$i) - ($62))|0;
    $sub22$i$i = (($add22$i184$i) - ($63))|0;
    $sub23$i$i = (($add23$i185$i) - ($64))|0;
    $sub24$i$i = (($add24$i186$i) - ($65))|0;
    $sub25$i$i = (($add25$i187$i) - ($66))|0;
    $sub26$i$i = (($add26$i188$i) - ($67))|0;
    $sub27$i$i = (($add27$i189$i) - ($68))|0;
    $sub28$i$i = (($add28$i190$i) - ($69))|0;
    HEAP32[$arraydecay7$i23>>2] = $sub$i$i;
    HEAP32[$arrayidx1$i126$i>>2] = $sub20$i$i;
    HEAP32[$arrayidx2$i127$i>>2] = $sub21$i$i;
    HEAP32[$arrayidx3$i128$i>>2] = $sub22$i$i;
    HEAP32[$arrayidx4$i129$i>>2] = $sub23$i$i;
    HEAP32[$arrayidx5$i130$i>>2] = $sub24$i$i;
    HEAP32[$arrayidx6$i131$i>>2] = $sub25$i$i;
    HEAP32[$arrayidx7$i132$i>>2] = $sub26$i$i;
    HEAP32[$arrayidx8$i133$i>>2] = $sub27$i$i;
    HEAP32[$arrayidx9$i134$i>>2] = $sub28$i$i;
    $add$i43$i = (($60) + ($add$i181$i))|0;
    $add20$i44$i = (($61) + ($add20$i182$i))|0;
    $add21$i45$i = (($62) + ($add21$i183$i))|0;
    $add22$i46$i = (($63) + ($add22$i184$i))|0;
    $add23$i47$i = (($64) + ($add23$i185$i))|0;
    $add24$i48$i = (($65) + ($add24$i186$i))|0;
    $add25$i49$i = (($66) + ($add25$i187$i))|0;
    $add26$i50$i = (($67) + ($add26$i188$i))|0;
    $add27$i51$i = (($68) + ($add27$i189$i))|0;
    $add28$i52$i = (($69) + ($add28$i190$i))|0;
    HEAP32[$arraydecay3$i20>>2] = $add$i43$i;
    HEAP32[$arrayidx11$i71$i>>2] = $add20$i44$i;
    HEAP32[$arrayidx12$i72$i>>2] = $add21$i45$i;
    HEAP32[$arrayidx13$i73$i>>2] = $add22$i46$i;
    HEAP32[$arrayidx14$i74$i>>2] = $add23$i47$i;
    HEAP32[$arrayidx15$i75$i>>2] = $add24$i48$i;
    HEAP32[$arrayidx16$i76$i>>2] = $add25$i49$i;
    HEAP32[$arrayidx17$i77$i>>2] = $add26$i50$i;
    HEAP32[$arrayidx18$i78$i>>2] = $add27$i51$i;
    HEAP32[$arrayidx19$i79$i>>2] = $add28$i52$i;
   }
  }
  _fe_mul($r,$t,$arraydecay3$i20);
  _fe_mul($arraydecay1$i,$arraydecay6$i22,$arraydecay7$i23);
  _fe_mul($arraydecay2$i,$arraydecay7$i23,$arraydecay3$i20);
  $dec52 = (($i$154) + -1)|0;
  $cmp7 = ($i$154|0)>(0);
  if ($cmp7) {
   $i$154 = $dec52;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _slide($r,$a) {
 $r = $r|0;
 $a = $a|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add$5 = 0, $add25 = 0, $add25$1 = 0, $add25$2 = 0, $add25$3 = 0, $add25$4 = 0, $add25$5 = 0, $and = 0, $and2 = 0, $arrayidx = 0, $arrayidx17 = 0, $arrayidx17$1 = 0, $arrayidx17$2 = 0, $arrayidx17$3 = 0, $arrayidx17$4 = 0;
 var $arrayidx17$5 = 0, $arrayidx4 = 0, $arrayidx61 = 0, $arrayidx61$1 = 0, $arrayidx61$2 = 0, $arrayidx61$3 = 0, $arrayidx61$4 = 0, $arrayidx61$5 = 0, $arrayidx9 = 0, $cmp13 = 0, $cmp13$1 = 0, $cmp13$2 = 0, $cmp13$3 = 0, $cmp13$4 = 0, $cmp13$5 = 0, $cmp26 = 0, $cmp26$1 = 0, $cmp26$2 = 0, $cmp26$3 = 0, $cmp26$4 = 0;
 var $cmp26$5 = 0, $cmp45 = 0, $cmp45$1 = 0, $cmp45$2 = 0, $cmp45$3 = 0, $cmp45$4 = 0, $cmp45$5 = 0, $cmp58 = 0, $cmp58$1 = 0, $cmp58$2 = 0, $cmp58$3 = 0, $cmp58$4 = 0, $cmp58$5 = 0, $conv = 0, $conv21 = 0, $conv21$1 = 0, $conv21$2 = 0, $conv21$3 = 0, $conv21$4 = 0, $conv21$5 = 0;
 var $conv24 = 0, $conv24$1 = 0, $conv24$2 = 0, $conv24$3 = 0, $conv24$4 = 0, $conv24$5 = 0, $conv3 = 0, $conv36 = 0, $conv36$1 = 0, $conv36$2 = 0, $conv36$3 = 0, $conv36$4 = 0, $conv36$5 = 0, $conv55 = 0, $conv55$1 = 0, $conv55$2 = 0, $conv55$3 = 0, $conv55$4 = 0, $conv55$5 = 0, $exitcond = 0;
 var $exitcond58 = 0, $i$056 = 0, $i$153 = 0, $inc = 0, $inc67 = 0, $inc67$1 = 0, $inc67$2 = 0, $inc67$3 = 0, $inc67$4 = 0, $inc67$5 = 0, $k$051 = 0, $k$051$1 = 0, $k$051$2 = 0, $k$051$3 = 0, $k$051$4 = 0, $k$051$5 = 0, $or$cond = 0, $shl = 0, $shl$1 = 0, $shl$2 = 0;
 var $shl$3 = 0, $shl$4 = 0, $shl$5 = 0, $shr1 = 0, $sub = 0, $sub$1 = 0, $sub$2 = 0, $sub$3 = 0, $sub$4 = 0, $sub$5 = 0, $tobool = 0, $tobool18 = 0, $tobool18$1 = 0, $tobool18$2 = 0, $tobool18$3 = 0, $tobool18$4 = 0, $tobool18$5 = 0, $tobool62 = 0, $tobool62$1 = 0, $tobool62$2 = 0;
 var $tobool62$3 = 0, $tobool62$4 = 0, $tobool62$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$056 = 0;
 while(1) {
  $0 = $i$056 >>> 3;
  $arrayidx = (($a) + ($0)|0);
  $1 = HEAP8[$arrayidx>>0]|0;
  $conv = $1&255;
  $and = $i$056 & 7;
  $shr1 = $conv >>> $and;
  $and2 = $shr1 & 1;
  $conv3 = $and2&255;
  $arrayidx4 = (($r) + ($i$056)|0);
  HEAP8[$arrayidx4>>0] = $conv3;
  $inc = (($i$056) + 1)|0;
  $exitcond58 = ($inc|0)==(256);
  if ($exitcond58) {
   break;
  } else {
   $i$056 = $inc;
  }
 }
 $i$153 = 0;
 while(1) {
  $arrayidx9 = (($r) + ($i$153)|0);
  $2 = HEAP8[$arrayidx9>>0]|0;
  $tobool = ($2<<24>>24)!=(0);
  $$pre = (($i$153) + 1)|0;
  $cmp13 = ($$pre>>>0)<(256);
  $or$cond = $tobool & $cmp13;
  L6: do {
   if ($or$cond) {
    $arrayidx17 = (($r) + ($$pre)|0);
    $3 = HEAP8[$arrayidx17>>0]|0;
    $tobool18 = ($3<<24>>24)==(0);
    L8: do {
     if (!($tobool18)) {
      $conv21 = $2 << 24 >> 24;
      $conv24 = $3 << 24 >> 24;
      $shl = $conv24 << 1;
      $add25 = (($shl) + ($conv21))|0;
      $cmp26 = ($add25|0)<(16);
      if ($cmp26) {
       $conv36 = $add25&255;
       HEAP8[$arrayidx9>>0] = $conv36;
       HEAP8[$arrayidx17>>0] = 0;
       break;
      }
      $sub = (($conv21) - ($shl))|0;
      $cmp45 = ($sub|0)>(-16);
      if (!($cmp45)) {
       break L6;
      }
      $conv55 = $sub&255;
      HEAP8[$arrayidx9>>0] = $conv55;
      $k$051 = $$pre;
      while(1) {
       $arrayidx61 = (($r) + ($k$051)|0);
       $4 = HEAP8[$arrayidx61>>0]|0;
       $tobool62 = ($4<<24>>24)==(0);
       if ($tobool62) {
        break;
       }
       HEAP8[$arrayidx61>>0] = 0;
       $inc67 = (($k$051) + 1)|0;
       $cmp58 = ($k$051>>>0)<(255);
       if ($cmp58) {
        $k$051 = $inc67;
       } else {
        break L8;
       }
      }
      HEAP8[$arrayidx61>>0] = 1;
     }
    } while(0);
    $add$1 = (($i$153) + 2)|0;
    $cmp13$1 = ($add$1>>>0)<(256);
    if ($cmp13$1) {
     $arrayidx17$1 = (($r) + ($add$1)|0);
     $5 = HEAP8[$arrayidx17$1>>0]|0;
     $tobool18$1 = ($5<<24>>24)==(0);
     L20: do {
      if (!($tobool18$1)) {
       $6 = HEAP8[$arrayidx9>>0]|0;
       $conv21$1 = $6 << 24 >> 24;
       $conv24$1 = $5 << 24 >> 24;
       $shl$1 = $conv24$1 << 2;
       $add25$1 = (($shl$1) + ($conv21$1))|0;
       $cmp26$1 = ($add25$1|0)<(16);
       if ($cmp26$1) {
        $conv36$1 = $add25$1&255;
        HEAP8[$arrayidx9>>0] = $conv36$1;
        HEAP8[$arrayidx17$1>>0] = 0;
        break;
       }
       $sub$1 = (($conv21$1) - ($shl$1))|0;
       $cmp45$1 = ($sub$1|0)>(-16);
       if (!($cmp45$1)) {
        break L6;
       }
       $conv55$1 = $sub$1&255;
       HEAP8[$arrayidx9>>0] = $conv55$1;
       $k$051$1 = $add$1;
       while(1) {
        $arrayidx61$1 = (($r) + ($k$051$1)|0);
        $7 = HEAP8[$arrayidx61$1>>0]|0;
        $tobool62$1 = ($7<<24>>24)==(0);
        if ($tobool62$1) {
         break;
        }
        HEAP8[$arrayidx61$1>>0] = 0;
        $inc67$1 = (($k$051$1) + 1)|0;
        $cmp58$1 = ($k$051$1>>>0)<(255);
        if ($cmp58$1) {
         $k$051$1 = $inc67$1;
        } else {
         break L20;
        }
       }
       HEAP8[$arrayidx61$1>>0] = 1;
      }
     } while(0);
     $add$2 = (($i$153) + 3)|0;
     $cmp13$2 = ($add$2>>>0)<(256);
     if ($cmp13$2) {
      $arrayidx17$2 = (($r) + ($add$2)|0);
      $8 = HEAP8[$arrayidx17$2>>0]|0;
      $tobool18$2 = ($8<<24>>24)==(0);
      L32: do {
       if (!($tobool18$2)) {
        $9 = HEAP8[$arrayidx9>>0]|0;
        $conv21$2 = $9 << 24 >> 24;
        $conv24$2 = $8 << 24 >> 24;
        $shl$2 = $conv24$2 << 3;
        $add25$2 = (($shl$2) + ($conv21$2))|0;
        $cmp26$2 = ($add25$2|0)<(16);
        if ($cmp26$2) {
         $conv36$2 = $add25$2&255;
         HEAP8[$arrayidx9>>0] = $conv36$2;
         HEAP8[$arrayidx17$2>>0] = 0;
         break;
        }
        $sub$2 = (($conv21$2) - ($shl$2))|0;
        $cmp45$2 = ($sub$2|0)>(-16);
        if (!($cmp45$2)) {
         break L6;
        }
        $conv55$2 = $sub$2&255;
        HEAP8[$arrayidx9>>0] = $conv55$2;
        $k$051$2 = $add$2;
        while(1) {
         $arrayidx61$2 = (($r) + ($k$051$2)|0);
         $10 = HEAP8[$arrayidx61$2>>0]|0;
         $tobool62$2 = ($10<<24>>24)==(0);
         if ($tobool62$2) {
          break;
         }
         HEAP8[$arrayidx61$2>>0] = 0;
         $inc67$2 = (($k$051$2) + 1)|0;
         $cmp58$2 = ($k$051$2>>>0)<(255);
         if ($cmp58$2) {
          $k$051$2 = $inc67$2;
         } else {
          break L32;
         }
        }
        HEAP8[$arrayidx61$2>>0] = 1;
       }
      } while(0);
      $add$3 = (($i$153) + 4)|0;
      $cmp13$3 = ($add$3>>>0)<(256);
      if ($cmp13$3) {
       $arrayidx17$3 = (($r) + ($add$3)|0);
       $11 = HEAP8[$arrayidx17$3>>0]|0;
       $tobool18$3 = ($11<<24>>24)==(0);
       L44: do {
        if (!($tobool18$3)) {
         $12 = HEAP8[$arrayidx9>>0]|0;
         $conv21$3 = $12 << 24 >> 24;
         $conv24$3 = $11 << 24 >> 24;
         $shl$3 = $conv24$3 << 4;
         $add25$3 = (($shl$3) + ($conv21$3))|0;
         $cmp26$3 = ($add25$3|0)<(16);
         if ($cmp26$3) {
          $conv36$3 = $add25$3&255;
          HEAP8[$arrayidx9>>0] = $conv36$3;
          HEAP8[$arrayidx17$3>>0] = 0;
          break;
         }
         $sub$3 = (($conv21$3) - ($shl$3))|0;
         $cmp45$3 = ($sub$3|0)>(-16);
         if (!($cmp45$3)) {
          break L6;
         }
         $conv55$3 = $sub$3&255;
         HEAP8[$arrayidx9>>0] = $conv55$3;
         $k$051$3 = $add$3;
         while(1) {
          $arrayidx61$3 = (($r) + ($k$051$3)|0);
          $13 = HEAP8[$arrayidx61$3>>0]|0;
          $tobool62$3 = ($13<<24>>24)==(0);
          if ($tobool62$3) {
           break;
          }
          HEAP8[$arrayidx61$3>>0] = 0;
          $inc67$3 = (($k$051$3) + 1)|0;
          $cmp58$3 = ($k$051$3>>>0)<(255);
          if ($cmp58$3) {
           $k$051$3 = $inc67$3;
          } else {
           break L44;
          }
         }
         HEAP8[$arrayidx61$3>>0] = 1;
        }
       } while(0);
       $add$4 = (($i$153) + 5)|0;
       $cmp13$4 = ($add$4>>>0)<(256);
       if ($cmp13$4) {
        $arrayidx17$4 = (($r) + ($add$4)|0);
        $14 = HEAP8[$arrayidx17$4>>0]|0;
        $tobool18$4 = ($14<<24>>24)==(0);
        L56: do {
         if (!($tobool18$4)) {
          $15 = HEAP8[$arrayidx9>>0]|0;
          $conv21$4 = $15 << 24 >> 24;
          $conv24$4 = $14 << 24 >> 24;
          $shl$4 = $conv24$4 << 5;
          $add25$4 = (($shl$4) + ($conv21$4))|0;
          $cmp26$4 = ($add25$4|0)<(16);
          if ($cmp26$4) {
           $conv36$4 = $add25$4&255;
           HEAP8[$arrayidx9>>0] = $conv36$4;
           HEAP8[$arrayidx17$4>>0] = 0;
           break;
          }
          $sub$4 = (($conv21$4) - ($shl$4))|0;
          $cmp45$4 = ($sub$4|0)>(-16);
          if (!($cmp45$4)) {
           break L6;
          }
          $conv55$4 = $sub$4&255;
          HEAP8[$arrayidx9>>0] = $conv55$4;
          $k$051$4 = $add$4;
          while(1) {
           $arrayidx61$4 = (($r) + ($k$051$4)|0);
           $16 = HEAP8[$arrayidx61$4>>0]|0;
           $tobool62$4 = ($16<<24>>24)==(0);
           if ($tobool62$4) {
            break;
           }
           HEAP8[$arrayidx61$4>>0] = 0;
           $inc67$4 = (($k$051$4) + 1)|0;
           $cmp58$4 = ($k$051$4>>>0)<(255);
           if ($cmp58$4) {
            $k$051$4 = $inc67$4;
           } else {
            break L56;
           }
          }
          HEAP8[$arrayidx61$4>>0] = 1;
         }
        } while(0);
        $add$5 = (($i$153) + 6)|0;
        $cmp13$5 = ($add$5>>>0)<(256);
        if ($cmp13$5) {
         $arrayidx17$5 = (($r) + ($add$5)|0);
         $17 = HEAP8[$arrayidx17$5>>0]|0;
         $tobool18$5 = ($17<<24>>24)==(0);
         if (!($tobool18$5)) {
          $18 = HEAP8[$arrayidx9>>0]|0;
          $conv21$5 = $18 << 24 >> 24;
          $conv24$5 = $17 << 24 >> 24;
          $shl$5 = $conv24$5 << 6;
          $add25$5 = (($shl$5) + ($conv21$5))|0;
          $cmp26$5 = ($add25$5|0)<(16);
          if ($cmp26$5) {
           $conv36$5 = $add25$5&255;
           HEAP8[$arrayidx9>>0] = $conv36$5;
           HEAP8[$arrayidx17$5>>0] = 0;
           break;
          }
          $sub$5 = (($conv21$5) - ($shl$5))|0;
          $cmp45$5 = ($sub$5|0)>(-16);
          if ($cmp45$5) {
           $conv55$5 = $sub$5&255;
           HEAP8[$arrayidx9>>0] = $conv55$5;
           $k$051$5 = $add$5;
           while(1) {
            $arrayidx61$5 = (($r) + ($k$051$5)|0);
            $19 = HEAP8[$arrayidx61$5>>0]|0;
            $tobool62$5 = ($19<<24>>24)==(0);
            if ($tobool62$5) {
             break;
            }
            HEAP8[$arrayidx61$5>>0] = 0;
            $inc67$5 = (($k$051$5) + 1)|0;
            $cmp58$5 = ($k$051$5>>>0)<(255);
            if ($cmp58$5) {
             $k$051$5 = $inc67$5;
            } else {
             break L6;
            }
           }
           HEAP8[$arrayidx61$5>>0] = 1;
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  $exitcond = ($$pre|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i$153 = $$pre;
  }
 }
 return;
}
function _ge_sub($r,$p,$q) {
 $r = $r|0;
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $add$i = 0, $add$i110 = 0, $add$i184 = 0, $add$i46 = 0, $add20$i = 0, $add20$i111 = 0, $add20$i185 = 0, $add20$i47 = 0, $add21$i = 0, $add21$i112 = 0, $add21$i186 = 0, $add21$i48 = 0, $add22$i = 0, $add22$i113 = 0, $add22$i187 = 0, $add22$i49 = 0, $add23$i = 0, $add23$i114 = 0, $add23$i188 = 0, $add23$i50 = 0;
 var $add24$i = 0, $add24$i115 = 0, $add24$i189 = 0, $add24$i51 = 0, $add25$i = 0, $add25$i116 = 0, $add25$i190 = 0, $add25$i52 = 0, $add26$i = 0, $add26$i117 = 0, $add26$i191 = 0, $add26$i53 = 0, $add27$i = 0, $add27$i118 = 0, $add27$i192 = 0, $add27$i54 = 0, $add28$i = 0, $add28$i119 = 0, $add28$i193 = 0, $add28$i55 = 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay13 = 0, $arraydecay19 = 0, $arraydecay20 = 0, $arraydecay22 = 0, $arraydecay26 = 0, $arraydecay28 = 0, $arraydecay5 = 0, $arrayidx1$i = 0, $arrayidx1$i129 = 0, $arrayidx11$i = 0, $arrayidx11$i74 = 0, $arrayidx12$i = 0, $arrayidx12$i75 = 0, $arrayidx13$i = 0, $arrayidx13$i76 = 0, $arrayidx14$i = 0, $arrayidx14$i77 = 0, $arrayidx15$i = 0;
 var $arrayidx15$i78 = 0, $arrayidx16$i = 0, $arrayidx16$i79 = 0, $arrayidx17$i = 0, $arrayidx17$i80 = 0, $arrayidx18$i = 0, $arrayidx18$i81 = 0, $arrayidx19$i = 0, $arrayidx19$i82 = 0, $arrayidx2$i = 0, $arrayidx2$i130 = 0, $arrayidx3$i = 0, $arrayidx3$i131 = 0, $arrayidx30$i = 0, $arrayidx30$i231 = 0, $arrayidx31$i = 0, $arrayidx31$i232 = 0, $arrayidx32$i = 0, $arrayidx32$i233 = 0, $arrayidx33$i = 0;
 var $arrayidx33$i234 = 0, $arrayidx34$i = 0, $arrayidx34$i235 = 0, $arrayidx35$i = 0, $arrayidx35$i236 = 0, $arrayidx36$i = 0, $arrayidx36$i237 = 0, $arrayidx37$i = 0, $arrayidx37$i238 = 0, $arrayidx38$i = 0, $arrayidx38$i239 = 0, $arrayidx4$i = 0, $arrayidx4$i132 = 0, $arrayidx5$i = 0, $arrayidx5$i133 = 0, $arrayidx6$i = 0, $arrayidx6$i134 = 0, $arrayidx7$i = 0, $arrayidx7$i135 = 0, $arrayidx8$i = 0;
 var $arrayidx8$i136 = 0, $arrayidx9$i = 0, $arrayidx9$i137 = 0, $sub$i = 0, $sub$i147 = 0, $sub$i221 = 0, $sub20$i = 0, $sub20$i148 = 0, $sub20$i222 = 0, $sub21$i = 0, $sub21$i149 = 0, $sub21$i223 = 0, $sub22$i = 0, $sub22$i150 = 0, $sub22$i224 = 0, $sub23$i = 0, $sub23$i151 = 0, $sub23$i225 = 0, $sub24$i = 0, $sub24$i152 = 0;
 var $sub24$i226 = 0, $sub25$i = 0, $sub25$i153 = 0, $sub25$i227 = 0, $sub26$i = 0, $sub26$i154 = 0, $sub26$i228 = 0, $sub27$i = 0, $sub27$i155 = 0, $sub27$i229 = 0, $sub28$i = 0, $sub28$i156 = 0, $sub28$i230 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay1 = ((($p)) + 40|0);
 $0 = HEAP32[$arraydecay1>>2]|0;
 $arrayidx1$i = ((($p)) + 44|0);
 $1 = HEAP32[$arrayidx1$i>>2]|0;
 $arrayidx2$i = ((($p)) + 48|0);
 $2 = HEAP32[$arrayidx2$i>>2]|0;
 $arrayidx3$i = ((($p)) + 52|0);
 $3 = HEAP32[$arrayidx3$i>>2]|0;
 $arrayidx4$i = ((($p)) + 56|0);
 $4 = HEAP32[$arrayidx4$i>>2]|0;
 $arrayidx5$i = ((($p)) + 60|0);
 $5 = HEAP32[$arrayidx5$i>>2]|0;
 $arrayidx6$i = ((($p)) + 64|0);
 $6 = HEAP32[$arrayidx6$i>>2]|0;
 $arrayidx7$i = ((($p)) + 68|0);
 $7 = HEAP32[$arrayidx7$i>>2]|0;
 $arrayidx8$i = ((($p)) + 72|0);
 $8 = HEAP32[$arrayidx8$i>>2]|0;
 $arrayidx9$i = ((($p)) + 76|0);
 $9 = HEAP32[$arrayidx9$i>>2]|0;
 $10 = HEAP32[$p>>2]|0;
 $arrayidx11$i = ((($p)) + 4|0);
 $11 = HEAP32[$arrayidx11$i>>2]|0;
 $arrayidx12$i = ((($p)) + 8|0);
 $12 = HEAP32[$arrayidx12$i>>2]|0;
 $arrayidx13$i = ((($p)) + 12|0);
 $13 = HEAP32[$arrayidx13$i>>2]|0;
 $arrayidx14$i = ((($p)) + 16|0);
 $14 = HEAP32[$arrayidx14$i>>2]|0;
 $arrayidx15$i = ((($p)) + 20|0);
 $15 = HEAP32[$arrayidx15$i>>2]|0;
 $arrayidx16$i = ((($p)) + 24|0);
 $16 = HEAP32[$arrayidx16$i>>2]|0;
 $arrayidx17$i = ((($p)) + 28|0);
 $17 = HEAP32[$arrayidx17$i>>2]|0;
 $arrayidx18$i = ((($p)) + 32|0);
 $18 = HEAP32[$arrayidx18$i>>2]|0;
 $arrayidx19$i = ((($p)) + 36|0);
 $19 = HEAP32[$arrayidx19$i>>2]|0;
 $add$i = (($10) + ($0))|0;
 $add20$i = (($11) + ($1))|0;
 $add21$i = (($12) + ($2))|0;
 $add22$i = (($13) + ($3))|0;
 $add23$i = (($14) + ($4))|0;
 $add24$i = (($15) + ($5))|0;
 $add25$i = (($16) + ($6))|0;
 $add26$i = (($17) + ($7))|0;
 $add27$i = (($18) + ($8))|0;
 $add28$i = (($19) + ($9))|0;
 HEAP32[$r>>2] = $add$i;
 $arrayidx30$i = ((($r)) + 4|0);
 HEAP32[$arrayidx30$i>>2] = $add20$i;
 $arrayidx31$i = ((($r)) + 8|0);
 HEAP32[$arrayidx31$i>>2] = $add21$i;
 $arrayidx32$i = ((($r)) + 12|0);
 HEAP32[$arrayidx32$i>>2] = $add22$i;
 $arrayidx33$i = ((($r)) + 16|0);
 HEAP32[$arrayidx33$i>>2] = $add23$i;
 $arrayidx34$i = ((($r)) + 20|0);
 HEAP32[$arrayidx34$i>>2] = $add24$i;
 $arrayidx35$i = ((($r)) + 24|0);
 HEAP32[$arrayidx35$i>>2] = $add25$i;
 $arrayidx36$i = ((($r)) + 28|0);
 HEAP32[$arrayidx36$i>>2] = $add26$i;
 $arrayidx37$i = ((($r)) + 32|0);
 HEAP32[$arrayidx37$i>>2] = $add27$i;
 $arrayidx38$i = ((($r)) + 36|0);
 HEAP32[$arrayidx38$i>>2] = $add28$i;
 $arraydecay5 = ((($r)) + 40|0);
 $20 = HEAP32[$arraydecay1>>2]|0;
 $21 = HEAP32[$arrayidx1$i>>2]|0;
 $22 = HEAP32[$arrayidx2$i>>2]|0;
 $23 = HEAP32[$arrayidx3$i>>2]|0;
 $24 = HEAP32[$arrayidx4$i>>2]|0;
 $25 = HEAP32[$arrayidx5$i>>2]|0;
 $26 = HEAP32[$arrayidx6$i>>2]|0;
 $27 = HEAP32[$arrayidx7$i>>2]|0;
 $28 = HEAP32[$arrayidx8$i>>2]|0;
 $29 = HEAP32[$arrayidx9$i>>2]|0;
 $30 = HEAP32[$p>>2]|0;
 $31 = HEAP32[$arrayidx11$i>>2]|0;
 $32 = HEAP32[$arrayidx12$i>>2]|0;
 $33 = HEAP32[$arrayidx13$i>>2]|0;
 $34 = HEAP32[$arrayidx14$i>>2]|0;
 $35 = HEAP32[$arrayidx15$i>>2]|0;
 $36 = HEAP32[$arrayidx16$i>>2]|0;
 $37 = HEAP32[$arrayidx17$i>>2]|0;
 $38 = HEAP32[$arrayidx18$i>>2]|0;
 $39 = HEAP32[$arrayidx19$i>>2]|0;
 $sub$i221 = (($20) - ($30))|0;
 $sub20$i222 = (($21) - ($31))|0;
 $sub21$i223 = (($22) - ($32))|0;
 $sub22$i224 = (($23) - ($33))|0;
 $sub23$i225 = (($24) - ($34))|0;
 $sub24$i226 = (($25) - ($35))|0;
 $sub25$i227 = (($26) - ($36))|0;
 $sub26$i228 = (($27) - ($37))|0;
 $sub27$i229 = (($28) - ($38))|0;
 $sub28$i230 = (($29) - ($39))|0;
 HEAP32[$arraydecay5>>2] = $sub$i221;
 $arrayidx30$i231 = ((($r)) + 44|0);
 HEAP32[$arrayidx30$i231>>2] = $sub20$i222;
 $arrayidx31$i232 = ((($r)) + 48|0);
 HEAP32[$arrayidx31$i232>>2] = $sub21$i223;
 $arrayidx32$i233 = ((($r)) + 52|0);
 HEAP32[$arrayidx32$i233>>2] = $sub22$i224;
 $arrayidx33$i234 = ((($r)) + 56|0);
 HEAP32[$arrayidx33$i234>>2] = $sub23$i225;
 $arrayidx34$i235 = ((($r)) + 60|0);
 HEAP32[$arrayidx34$i235>>2] = $sub24$i226;
 $arrayidx35$i236 = ((($r)) + 64|0);
 HEAP32[$arrayidx35$i236>>2] = $sub25$i227;
 $arrayidx36$i237 = ((($r)) + 68|0);
 HEAP32[$arrayidx36$i237>>2] = $sub26$i228;
 $arrayidx37$i238 = ((($r)) + 72|0);
 HEAP32[$arrayidx37$i238>>2] = $sub27$i229;
 $arrayidx38$i239 = ((($r)) + 76|0);
 HEAP32[$arrayidx38$i239>>2] = $sub28$i230;
 $arraydecay10 = ((($r)) + 80|0);
 $arraydecay13 = ((($q)) + 40|0);
 _fe_mul($arraydecay10,$r,$arraydecay13);
 _fe_mul($arraydecay5,$arraydecay5,$q);
 $arraydecay19 = ((($r)) + 120|0);
 $arraydecay20 = ((($q)) + 120|0);
 $arraydecay22 = ((($p)) + 120|0);
 _fe_mul($arraydecay19,$arraydecay20,$arraydecay22);
 $arraydecay26 = ((($p)) + 80|0);
 $arraydecay28 = ((($q)) + 80|0);
 _fe_mul($r,$arraydecay26,$arraydecay28);
 $40 = HEAP32[$r>>2]|0;
 $41 = HEAP32[$arrayidx30$i>>2]|0;
 $42 = HEAP32[$arrayidx31$i>>2]|0;
 $43 = HEAP32[$arrayidx32$i>>2]|0;
 $44 = HEAP32[$arrayidx33$i>>2]|0;
 $45 = HEAP32[$arrayidx34$i>>2]|0;
 $46 = HEAP32[$arrayidx35$i>>2]|0;
 $47 = HEAP32[$arrayidx36$i>>2]|0;
 $48 = HEAP32[$arrayidx37$i>>2]|0;
 $49 = HEAP32[$arrayidx38$i>>2]|0;
 $add$i184 = $40 << 1;
 $add20$i185 = $41 << 1;
 $add21$i186 = $42 << 1;
 $add22$i187 = $43 << 1;
 $add23$i188 = $44 << 1;
 $add24$i189 = $45 << 1;
 $add25$i190 = $46 << 1;
 $add26$i191 = $47 << 1;
 $add27$i192 = $48 << 1;
 $add28$i193 = $49 << 1;
 $50 = HEAP32[$arraydecay10>>2]|0;
 $arrayidx1$i129 = ((($r)) + 84|0);
 $51 = HEAP32[$arrayidx1$i129>>2]|0;
 $arrayidx2$i130 = ((($r)) + 88|0);
 $52 = HEAP32[$arrayidx2$i130>>2]|0;
 $arrayidx3$i131 = ((($r)) + 92|0);
 $53 = HEAP32[$arrayidx3$i131>>2]|0;
 $arrayidx4$i132 = ((($r)) + 96|0);
 $54 = HEAP32[$arrayidx4$i132>>2]|0;
 $arrayidx5$i133 = ((($r)) + 100|0);
 $55 = HEAP32[$arrayidx5$i133>>2]|0;
 $arrayidx6$i134 = ((($r)) + 104|0);
 $56 = HEAP32[$arrayidx6$i134>>2]|0;
 $arrayidx7$i135 = ((($r)) + 108|0);
 $57 = HEAP32[$arrayidx7$i135>>2]|0;
 $arrayidx8$i136 = ((($r)) + 112|0);
 $58 = HEAP32[$arrayidx8$i136>>2]|0;
 $arrayidx9$i137 = ((($r)) + 116|0);
 $59 = HEAP32[$arrayidx9$i137>>2]|0;
 $60 = HEAP32[$arraydecay5>>2]|0;
 $61 = HEAP32[$arrayidx30$i231>>2]|0;
 $62 = HEAP32[$arrayidx31$i232>>2]|0;
 $63 = HEAP32[$arrayidx32$i233>>2]|0;
 $64 = HEAP32[$arrayidx33$i234>>2]|0;
 $65 = HEAP32[$arrayidx34$i235>>2]|0;
 $66 = HEAP32[$arrayidx35$i236>>2]|0;
 $67 = HEAP32[$arrayidx36$i237>>2]|0;
 $68 = HEAP32[$arrayidx37$i238>>2]|0;
 $69 = HEAP32[$arrayidx38$i239>>2]|0;
 $sub$i147 = (($50) - ($60))|0;
 $sub20$i148 = (($51) - ($61))|0;
 $sub21$i149 = (($52) - ($62))|0;
 $sub22$i150 = (($53) - ($63))|0;
 $sub23$i151 = (($54) - ($64))|0;
 $sub24$i152 = (($55) - ($65))|0;
 $sub25$i153 = (($56) - ($66))|0;
 $sub26$i154 = (($57) - ($67))|0;
 $sub27$i155 = (($58) - ($68))|0;
 $sub28$i156 = (($59) - ($69))|0;
 HEAP32[$r>>2] = $sub$i147;
 HEAP32[$arrayidx30$i>>2] = $sub20$i148;
 HEAP32[$arrayidx31$i>>2] = $sub21$i149;
 HEAP32[$arrayidx32$i>>2] = $sub22$i150;
 HEAP32[$arrayidx33$i>>2] = $sub23$i151;
 HEAP32[$arrayidx34$i>>2] = $sub24$i152;
 HEAP32[$arrayidx35$i>>2] = $sub25$i153;
 HEAP32[$arrayidx36$i>>2] = $sub26$i154;
 HEAP32[$arrayidx37$i>>2] = $sub27$i155;
 HEAP32[$arrayidx38$i>>2] = $sub28$i156;
 $add$i110 = (($60) + ($50))|0;
 $add20$i111 = (($61) + ($51))|0;
 $add21$i112 = (($62) + ($52))|0;
 $add22$i113 = (($63) + ($53))|0;
 $add23$i114 = (($64) + ($54))|0;
 $add24$i115 = (($65) + ($55))|0;
 $add25$i116 = (($66) + ($56))|0;
 $add26$i117 = (($67) + ($57))|0;
 $add27$i118 = (($68) + ($58))|0;
 $add28$i119 = (($69) + ($59))|0;
 HEAP32[$arraydecay5>>2] = $add$i110;
 HEAP32[$arrayidx30$i231>>2] = $add20$i111;
 HEAP32[$arrayidx31$i232>>2] = $add21$i112;
 HEAP32[$arrayidx32$i233>>2] = $add22$i113;
 HEAP32[$arrayidx33$i234>>2] = $add23$i114;
 HEAP32[$arrayidx34$i235>>2] = $add24$i115;
 HEAP32[$arrayidx35$i236>>2] = $add25$i116;
 HEAP32[$arrayidx36$i237>>2] = $add26$i117;
 HEAP32[$arrayidx37$i238>>2] = $add27$i118;
 HEAP32[$arrayidx38$i239>>2] = $add28$i119;
 $70 = HEAP32[$arraydecay19>>2]|0;
 $arrayidx11$i74 = ((($r)) + 124|0);
 $71 = HEAP32[$arrayidx11$i74>>2]|0;
 $arrayidx12$i75 = ((($r)) + 128|0);
 $72 = HEAP32[$arrayidx12$i75>>2]|0;
 $arrayidx13$i76 = ((($r)) + 132|0);
 $73 = HEAP32[$arrayidx13$i76>>2]|0;
 $arrayidx14$i77 = ((($r)) + 136|0);
 $74 = HEAP32[$arrayidx14$i77>>2]|0;
 $arrayidx15$i78 = ((($r)) + 140|0);
 $75 = HEAP32[$arrayidx15$i78>>2]|0;
 $arrayidx16$i79 = ((($r)) + 144|0);
 $76 = HEAP32[$arrayidx16$i79>>2]|0;
 $arrayidx17$i80 = ((($r)) + 148|0);
 $77 = HEAP32[$arrayidx17$i80>>2]|0;
 $arrayidx18$i81 = ((($r)) + 152|0);
 $78 = HEAP32[$arrayidx18$i81>>2]|0;
 $arrayidx19$i82 = ((($r)) + 156|0);
 $79 = HEAP32[$arrayidx19$i82>>2]|0;
 $sub$i = (($add$i184) - ($70))|0;
 $sub20$i = (($add20$i185) - ($71))|0;
 $sub21$i = (($add21$i186) - ($72))|0;
 $sub22$i = (($add22$i187) - ($73))|0;
 $sub23$i = (($add23$i188) - ($74))|0;
 $sub24$i = (($add24$i189) - ($75))|0;
 $sub25$i = (($add25$i190) - ($76))|0;
 $sub26$i = (($add26$i191) - ($77))|0;
 $sub27$i = (($add27$i192) - ($78))|0;
 $sub28$i = (($add28$i193) - ($79))|0;
 HEAP32[$arraydecay10>>2] = $sub$i;
 HEAP32[$arrayidx1$i129>>2] = $sub20$i;
 HEAP32[$arrayidx2$i130>>2] = $sub21$i;
 HEAP32[$arrayidx3$i131>>2] = $sub22$i;
 HEAP32[$arrayidx4$i132>>2] = $sub23$i;
 HEAP32[$arrayidx5$i133>>2] = $sub24$i;
 HEAP32[$arrayidx6$i134>>2] = $sub25$i;
 HEAP32[$arrayidx7$i135>>2] = $sub26$i;
 HEAP32[$arrayidx8$i136>>2] = $sub27$i;
 HEAP32[$arrayidx9$i137>>2] = $sub28$i;
 $add$i46 = (($70) + ($add$i184))|0;
 $add20$i47 = (($71) + ($add20$i185))|0;
 $add21$i48 = (($72) + ($add21$i186))|0;
 $add22$i49 = (($73) + ($add22$i187))|0;
 $add23$i50 = (($74) + ($add23$i188))|0;
 $add24$i51 = (($75) + ($add24$i189))|0;
 $add25$i52 = (($76) + ($add25$i190))|0;
 $add26$i53 = (($77) + ($add26$i191))|0;
 $add27$i54 = (($78) + ($add27$i192))|0;
 $add28$i55 = (($79) + ($add28$i193))|0;
 HEAP32[$arraydecay19>>2] = $add$i46;
 HEAP32[$arrayidx11$i74>>2] = $add20$i47;
 HEAP32[$arrayidx12$i75>>2] = $add21$i48;
 HEAP32[$arrayidx13$i76>>2] = $add22$i49;
 HEAP32[$arrayidx14$i77>>2] = $add23$i50;
 HEAP32[$arrayidx15$i78>>2] = $add24$i51;
 HEAP32[$arrayidx16$i79>>2] = $add25$i52;
 HEAP32[$arrayidx17$i80>>2] = $add26$i53;
 HEAP32[$arrayidx18$i81>>2] = $add27$i54;
 HEAP32[$arrayidx19$i82>>2] = $add28$i55;
 return;
}
function _ge_madd($r,$p,$q) {
 $r = $r|0;
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $add$i = 0, $add$i107 = 0, $add$i181 = 0, $add$i70 = 0, $add20$i = 0, $add20$i108 = 0, $add20$i182 = 0, $add20$i71 = 0, $add21$i = 0, $add21$i109 = 0, $add21$i183 = 0, $add21$i72 = 0, $add22$i = 0, $add22$i110 = 0, $add22$i184 = 0, $add22$i73 = 0, $add23$i = 0, $add23$i111 = 0, $add23$i185 = 0, $add23$i74 = 0;
 var $add24$i = 0, $add24$i112 = 0, $add24$i186 = 0, $add24$i75 = 0, $add25$i = 0, $add25$i113 = 0, $add25$i187 = 0, $add25$i76 = 0, $add26$i = 0, $add26$i114 = 0, $add26$i188 = 0, $add26$i77 = 0, $add27$i = 0, $add27$i115 = 0, $add27$i189 = 0, $add27$i78 = 0, $add28$i = 0, $add28$i116 = 0, $add28$i190 = 0, $add28$i79 = 0;
 var $arraydecay1 = 0, $arraydecay10 = 0, $arraydecay18 = 0, $arraydecay19 = 0, $arraydecay20 = 0, $arraydecay22 = 0, $arraydecay25 = 0, $arraydecay5 = 0, $arrayidx1$i = 0, $arrayidx1$i126 = 0, $arrayidx1$i163 = 0, $arrayidx11$i = 0, $arrayidx11$i61 = 0, $arrayidx12$i = 0, $arrayidx12$i62 = 0, $arrayidx13$i = 0, $arrayidx13$i63 = 0, $arrayidx14$i = 0, $arrayidx14$i64 = 0, $arrayidx15$i = 0;
 var $arrayidx15$i65 = 0, $arrayidx16$i = 0, $arrayidx16$i66 = 0, $arrayidx17$i = 0, $arrayidx17$i67 = 0, $arrayidx18$i = 0, $arrayidx18$i68 = 0, $arrayidx19$i = 0, $arrayidx19$i69 = 0, $arrayidx2$i = 0, $arrayidx2$i127 = 0, $arrayidx2$i164 = 0, $arrayidx3$i = 0, $arrayidx3$i128 = 0, $arrayidx3$i165 = 0, $arrayidx30$i = 0, $arrayidx30$i228 = 0, $arrayidx31$i = 0, $arrayidx31$i229 = 0, $arrayidx32$i = 0;
 var $arrayidx32$i230 = 0, $arrayidx33$i = 0, $arrayidx33$i231 = 0, $arrayidx34$i = 0, $arrayidx34$i232 = 0, $arrayidx35$i = 0, $arrayidx35$i233 = 0, $arrayidx36$i = 0, $arrayidx36$i234 = 0, $arrayidx37$i = 0, $arrayidx37$i235 = 0, $arrayidx38$i = 0, $arrayidx38$i236 = 0, $arrayidx4$i = 0, $arrayidx4$i129 = 0, $arrayidx4$i166 = 0, $arrayidx5$i = 0, $arrayidx5$i130 = 0, $arrayidx5$i167 = 0, $arrayidx6$i = 0;
 var $arrayidx6$i131 = 0, $arrayidx6$i168 = 0, $arrayidx7$i = 0, $arrayidx7$i132 = 0, $arrayidx7$i169 = 0, $arrayidx8$i = 0, $arrayidx8$i133 = 0, $arrayidx8$i170 = 0, $arrayidx9$i = 0, $arrayidx9$i134 = 0, $arrayidx9$i171 = 0, $sub$i = 0, $sub$i144 = 0, $sub$i218 = 0, $sub20$i = 0, $sub20$i145 = 0, $sub20$i219 = 0, $sub21$i = 0, $sub21$i146 = 0, $sub21$i220 = 0;
 var $sub22$i = 0, $sub22$i147 = 0, $sub22$i221 = 0, $sub23$i = 0, $sub23$i148 = 0, $sub23$i222 = 0, $sub24$i = 0, $sub24$i149 = 0, $sub24$i223 = 0, $sub25$i = 0, $sub25$i150 = 0, $sub25$i224 = 0, $sub26$i = 0, $sub26$i151 = 0, $sub26$i225 = 0, $sub27$i = 0, $sub27$i152 = 0, $sub27$i226 = 0, $sub28$i = 0, $sub28$i153 = 0;
 var $sub28$i227 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay1 = ((($p)) + 40|0);
 $0 = HEAP32[$arraydecay1>>2]|0;
 $arrayidx1$i = ((($p)) + 44|0);
 $1 = HEAP32[$arrayidx1$i>>2]|0;
 $arrayidx2$i = ((($p)) + 48|0);
 $2 = HEAP32[$arrayidx2$i>>2]|0;
 $arrayidx3$i = ((($p)) + 52|0);
 $3 = HEAP32[$arrayidx3$i>>2]|0;
 $arrayidx4$i = ((($p)) + 56|0);
 $4 = HEAP32[$arrayidx4$i>>2]|0;
 $arrayidx5$i = ((($p)) + 60|0);
 $5 = HEAP32[$arrayidx5$i>>2]|0;
 $arrayidx6$i = ((($p)) + 64|0);
 $6 = HEAP32[$arrayidx6$i>>2]|0;
 $arrayidx7$i = ((($p)) + 68|0);
 $7 = HEAP32[$arrayidx7$i>>2]|0;
 $arrayidx8$i = ((($p)) + 72|0);
 $8 = HEAP32[$arrayidx8$i>>2]|0;
 $arrayidx9$i = ((($p)) + 76|0);
 $9 = HEAP32[$arrayidx9$i>>2]|0;
 $10 = HEAP32[$p>>2]|0;
 $arrayidx11$i = ((($p)) + 4|0);
 $11 = HEAP32[$arrayidx11$i>>2]|0;
 $arrayidx12$i = ((($p)) + 8|0);
 $12 = HEAP32[$arrayidx12$i>>2]|0;
 $arrayidx13$i = ((($p)) + 12|0);
 $13 = HEAP32[$arrayidx13$i>>2]|0;
 $arrayidx14$i = ((($p)) + 16|0);
 $14 = HEAP32[$arrayidx14$i>>2]|0;
 $arrayidx15$i = ((($p)) + 20|0);
 $15 = HEAP32[$arrayidx15$i>>2]|0;
 $arrayidx16$i = ((($p)) + 24|0);
 $16 = HEAP32[$arrayidx16$i>>2]|0;
 $arrayidx17$i = ((($p)) + 28|0);
 $17 = HEAP32[$arrayidx17$i>>2]|0;
 $arrayidx18$i = ((($p)) + 32|0);
 $18 = HEAP32[$arrayidx18$i>>2]|0;
 $arrayidx19$i = ((($p)) + 36|0);
 $19 = HEAP32[$arrayidx19$i>>2]|0;
 $add$i = (($10) + ($0))|0;
 $add20$i = (($11) + ($1))|0;
 $add21$i = (($12) + ($2))|0;
 $add22$i = (($13) + ($3))|0;
 $add23$i = (($14) + ($4))|0;
 $add24$i = (($15) + ($5))|0;
 $add25$i = (($16) + ($6))|0;
 $add26$i = (($17) + ($7))|0;
 $add27$i = (($18) + ($8))|0;
 $add28$i = (($19) + ($9))|0;
 HEAP32[$r>>2] = $add$i;
 $arrayidx30$i = ((($r)) + 4|0);
 HEAP32[$arrayidx30$i>>2] = $add20$i;
 $arrayidx31$i = ((($r)) + 8|0);
 HEAP32[$arrayidx31$i>>2] = $add21$i;
 $arrayidx32$i = ((($r)) + 12|0);
 HEAP32[$arrayidx32$i>>2] = $add22$i;
 $arrayidx33$i = ((($r)) + 16|0);
 HEAP32[$arrayidx33$i>>2] = $add23$i;
 $arrayidx34$i = ((($r)) + 20|0);
 HEAP32[$arrayidx34$i>>2] = $add24$i;
 $arrayidx35$i = ((($r)) + 24|0);
 HEAP32[$arrayidx35$i>>2] = $add25$i;
 $arrayidx36$i = ((($r)) + 28|0);
 HEAP32[$arrayidx36$i>>2] = $add26$i;
 $arrayidx37$i = ((($r)) + 32|0);
 HEAP32[$arrayidx37$i>>2] = $add27$i;
 $arrayidx38$i = ((($r)) + 36|0);
 HEAP32[$arrayidx38$i>>2] = $add28$i;
 $arraydecay5 = ((($r)) + 40|0);
 $20 = HEAP32[$arraydecay1>>2]|0;
 $21 = HEAP32[$arrayidx1$i>>2]|0;
 $22 = HEAP32[$arrayidx2$i>>2]|0;
 $23 = HEAP32[$arrayidx3$i>>2]|0;
 $24 = HEAP32[$arrayidx4$i>>2]|0;
 $25 = HEAP32[$arrayidx5$i>>2]|0;
 $26 = HEAP32[$arrayidx6$i>>2]|0;
 $27 = HEAP32[$arrayidx7$i>>2]|0;
 $28 = HEAP32[$arrayidx8$i>>2]|0;
 $29 = HEAP32[$arrayidx9$i>>2]|0;
 $30 = HEAP32[$p>>2]|0;
 $31 = HEAP32[$arrayidx11$i>>2]|0;
 $32 = HEAP32[$arrayidx12$i>>2]|0;
 $33 = HEAP32[$arrayidx13$i>>2]|0;
 $34 = HEAP32[$arrayidx14$i>>2]|0;
 $35 = HEAP32[$arrayidx15$i>>2]|0;
 $36 = HEAP32[$arrayidx16$i>>2]|0;
 $37 = HEAP32[$arrayidx17$i>>2]|0;
 $38 = HEAP32[$arrayidx18$i>>2]|0;
 $39 = HEAP32[$arrayidx19$i>>2]|0;
 $sub$i218 = (($20) - ($30))|0;
 $sub20$i219 = (($21) - ($31))|0;
 $sub21$i220 = (($22) - ($32))|0;
 $sub22$i221 = (($23) - ($33))|0;
 $sub23$i222 = (($24) - ($34))|0;
 $sub24$i223 = (($25) - ($35))|0;
 $sub25$i224 = (($26) - ($36))|0;
 $sub26$i225 = (($27) - ($37))|0;
 $sub27$i226 = (($28) - ($38))|0;
 $sub28$i227 = (($29) - ($39))|0;
 HEAP32[$arraydecay5>>2] = $sub$i218;
 $arrayidx30$i228 = ((($r)) + 44|0);
 HEAP32[$arrayidx30$i228>>2] = $sub20$i219;
 $arrayidx31$i229 = ((($r)) + 48|0);
 HEAP32[$arrayidx31$i229>>2] = $sub21$i220;
 $arrayidx32$i230 = ((($r)) + 52|0);
 HEAP32[$arrayidx32$i230>>2] = $sub22$i221;
 $arrayidx33$i231 = ((($r)) + 56|0);
 HEAP32[$arrayidx33$i231>>2] = $sub23$i222;
 $arrayidx34$i232 = ((($r)) + 60|0);
 HEAP32[$arrayidx34$i232>>2] = $sub24$i223;
 $arrayidx35$i233 = ((($r)) + 64|0);
 HEAP32[$arrayidx35$i233>>2] = $sub25$i224;
 $arrayidx36$i234 = ((($r)) + 68|0);
 HEAP32[$arrayidx36$i234>>2] = $sub26$i225;
 $arrayidx37$i235 = ((($r)) + 72|0);
 HEAP32[$arrayidx37$i235>>2] = $sub27$i226;
 $arrayidx38$i236 = ((($r)) + 76|0);
 HEAP32[$arrayidx38$i236>>2] = $sub28$i227;
 $arraydecay10 = ((($r)) + 80|0);
 _fe_mul($arraydecay10,$r,$q);
 $arraydecay18 = ((($q)) + 40|0);
 _fe_mul($arraydecay5,$arraydecay5,$arraydecay18);
 $arraydecay19 = ((($r)) + 120|0);
 $arraydecay20 = ((($q)) + 80|0);
 $arraydecay22 = ((($p)) + 120|0);
 _fe_mul($arraydecay19,$arraydecay20,$arraydecay22);
 $arraydecay25 = ((($p)) + 80|0);
 $40 = HEAP32[$arraydecay25>>2]|0;
 $arrayidx1$i163 = ((($p)) + 84|0);
 $41 = HEAP32[$arrayidx1$i163>>2]|0;
 $arrayidx2$i164 = ((($p)) + 88|0);
 $42 = HEAP32[$arrayidx2$i164>>2]|0;
 $arrayidx3$i165 = ((($p)) + 92|0);
 $43 = HEAP32[$arrayidx3$i165>>2]|0;
 $arrayidx4$i166 = ((($p)) + 96|0);
 $44 = HEAP32[$arrayidx4$i166>>2]|0;
 $arrayidx5$i167 = ((($p)) + 100|0);
 $45 = HEAP32[$arrayidx5$i167>>2]|0;
 $arrayidx6$i168 = ((($p)) + 104|0);
 $46 = HEAP32[$arrayidx6$i168>>2]|0;
 $arrayidx7$i169 = ((($p)) + 108|0);
 $47 = HEAP32[$arrayidx7$i169>>2]|0;
 $arrayidx8$i170 = ((($p)) + 112|0);
 $48 = HEAP32[$arrayidx8$i170>>2]|0;
 $arrayidx9$i171 = ((($p)) + 116|0);
 $49 = HEAP32[$arrayidx9$i171>>2]|0;
 $add$i181 = $40 << 1;
 $add20$i182 = $41 << 1;
 $add21$i183 = $42 << 1;
 $add22$i184 = $43 << 1;
 $add23$i185 = $44 << 1;
 $add24$i186 = $45 << 1;
 $add25$i187 = $46 << 1;
 $add26$i188 = $47 << 1;
 $add27$i189 = $48 << 1;
 $add28$i190 = $49 << 1;
 $50 = HEAP32[$arraydecay10>>2]|0;
 $arrayidx1$i126 = ((($r)) + 84|0);
 $51 = HEAP32[$arrayidx1$i126>>2]|0;
 $arrayidx2$i127 = ((($r)) + 88|0);
 $52 = HEAP32[$arrayidx2$i127>>2]|0;
 $arrayidx3$i128 = ((($r)) + 92|0);
 $53 = HEAP32[$arrayidx3$i128>>2]|0;
 $arrayidx4$i129 = ((($r)) + 96|0);
 $54 = HEAP32[$arrayidx4$i129>>2]|0;
 $arrayidx5$i130 = ((($r)) + 100|0);
 $55 = HEAP32[$arrayidx5$i130>>2]|0;
 $arrayidx6$i131 = ((($r)) + 104|0);
 $56 = HEAP32[$arrayidx6$i131>>2]|0;
 $arrayidx7$i132 = ((($r)) + 108|0);
 $57 = HEAP32[$arrayidx7$i132>>2]|0;
 $arrayidx8$i133 = ((($r)) + 112|0);
 $58 = HEAP32[$arrayidx8$i133>>2]|0;
 $arrayidx9$i134 = ((($r)) + 116|0);
 $59 = HEAP32[$arrayidx9$i134>>2]|0;
 $60 = HEAP32[$arraydecay5>>2]|0;
 $61 = HEAP32[$arrayidx30$i228>>2]|0;
 $62 = HEAP32[$arrayidx31$i229>>2]|0;
 $63 = HEAP32[$arrayidx32$i230>>2]|0;
 $64 = HEAP32[$arrayidx33$i231>>2]|0;
 $65 = HEAP32[$arrayidx34$i232>>2]|0;
 $66 = HEAP32[$arrayidx35$i233>>2]|0;
 $67 = HEAP32[$arrayidx36$i234>>2]|0;
 $68 = HEAP32[$arrayidx37$i235>>2]|0;
 $69 = HEAP32[$arrayidx38$i236>>2]|0;
 $sub$i144 = (($50) - ($60))|0;
 $sub20$i145 = (($51) - ($61))|0;
 $sub21$i146 = (($52) - ($62))|0;
 $sub22$i147 = (($53) - ($63))|0;
 $sub23$i148 = (($54) - ($64))|0;
 $sub24$i149 = (($55) - ($65))|0;
 $sub25$i150 = (($56) - ($66))|0;
 $sub26$i151 = (($57) - ($67))|0;
 $sub27$i152 = (($58) - ($68))|0;
 $sub28$i153 = (($59) - ($69))|0;
 HEAP32[$r>>2] = $sub$i144;
 HEAP32[$arrayidx30$i>>2] = $sub20$i145;
 HEAP32[$arrayidx31$i>>2] = $sub21$i146;
 HEAP32[$arrayidx32$i>>2] = $sub22$i147;
 HEAP32[$arrayidx33$i>>2] = $sub23$i148;
 HEAP32[$arrayidx34$i>>2] = $sub24$i149;
 HEAP32[$arrayidx35$i>>2] = $sub25$i150;
 HEAP32[$arrayidx36$i>>2] = $sub26$i151;
 HEAP32[$arrayidx37$i>>2] = $sub27$i152;
 HEAP32[$arrayidx38$i>>2] = $sub28$i153;
 $add$i107 = (($60) + ($50))|0;
 $add20$i108 = (($61) + ($51))|0;
 $add21$i109 = (($62) + ($52))|0;
 $add22$i110 = (($63) + ($53))|0;
 $add23$i111 = (($64) + ($54))|0;
 $add24$i112 = (($65) + ($55))|0;
 $add25$i113 = (($66) + ($56))|0;
 $add26$i114 = (($67) + ($57))|0;
 $add27$i115 = (($68) + ($58))|0;
 $add28$i116 = (($69) + ($59))|0;
 HEAP32[$arraydecay5>>2] = $add$i107;
 HEAP32[$arrayidx30$i228>>2] = $add20$i108;
 HEAP32[$arrayidx31$i229>>2] = $add21$i109;
 HEAP32[$arrayidx32$i230>>2] = $add22$i110;
 HEAP32[$arrayidx33$i231>>2] = $add23$i111;
 HEAP32[$arrayidx34$i232>>2] = $add24$i112;
 HEAP32[$arrayidx35$i233>>2] = $add25$i113;
 HEAP32[$arrayidx36$i234>>2] = $add26$i114;
 HEAP32[$arrayidx37$i235>>2] = $add27$i115;
 HEAP32[$arrayidx38$i236>>2] = $add28$i116;
 $70 = HEAP32[$arraydecay19>>2]|0;
 $arrayidx11$i61 = ((($r)) + 124|0);
 $71 = HEAP32[$arrayidx11$i61>>2]|0;
 $arrayidx12$i62 = ((($r)) + 128|0);
 $72 = HEAP32[$arrayidx12$i62>>2]|0;
 $arrayidx13$i63 = ((($r)) + 132|0);
 $73 = HEAP32[$arrayidx13$i63>>2]|0;
 $arrayidx14$i64 = ((($r)) + 136|0);
 $74 = HEAP32[$arrayidx14$i64>>2]|0;
 $arrayidx15$i65 = ((($r)) + 140|0);
 $75 = HEAP32[$arrayidx15$i65>>2]|0;
 $arrayidx16$i66 = ((($r)) + 144|0);
 $76 = HEAP32[$arrayidx16$i66>>2]|0;
 $arrayidx17$i67 = ((($r)) + 148|0);
 $77 = HEAP32[$arrayidx17$i67>>2]|0;
 $arrayidx18$i68 = ((($r)) + 152|0);
 $78 = HEAP32[$arrayidx18$i68>>2]|0;
 $arrayidx19$i69 = ((($r)) + 156|0);
 $79 = HEAP32[$arrayidx19$i69>>2]|0;
 $add$i70 = (($70) + ($add$i181))|0;
 $add20$i71 = (($71) + ($add20$i182))|0;
 $add21$i72 = (($72) + ($add21$i183))|0;
 $add22$i73 = (($73) + ($add22$i184))|0;
 $add23$i74 = (($74) + ($add23$i185))|0;
 $add24$i75 = (($75) + ($add24$i186))|0;
 $add25$i76 = (($76) + ($add25$i187))|0;
 $add26$i77 = (($77) + ($add26$i188))|0;
 $add27$i78 = (($78) + ($add27$i189))|0;
 $add28$i79 = (($79) + ($add28$i190))|0;
 HEAP32[$arraydecay10>>2] = $add$i70;
 HEAP32[$arrayidx1$i126>>2] = $add20$i71;
 HEAP32[$arrayidx2$i127>>2] = $add21$i72;
 HEAP32[$arrayidx3$i128>>2] = $add22$i73;
 HEAP32[$arrayidx4$i129>>2] = $add23$i74;
 HEAP32[$arrayidx5$i130>>2] = $add24$i75;
 HEAP32[$arrayidx6$i131>>2] = $add25$i76;
 HEAP32[$arrayidx7$i132>>2] = $add26$i77;
 HEAP32[$arrayidx8$i133>>2] = $add27$i78;
 HEAP32[$arrayidx9$i134>>2] = $add28$i79;
 $sub$i = (($add$i181) - ($70))|0;
 $sub20$i = (($add20$i182) - ($71))|0;
 $sub21$i = (($add21$i183) - ($72))|0;
 $sub22$i = (($add22$i184) - ($73))|0;
 $sub23$i = (($add23$i185) - ($74))|0;
 $sub24$i = (($add24$i186) - ($75))|0;
 $sub25$i = (($add25$i187) - ($76))|0;
 $sub26$i = (($add26$i188) - ($77))|0;
 $sub27$i = (($add27$i189) - ($78))|0;
 $sub28$i = (($add28$i190) - ($79))|0;
 HEAP32[$arraydecay19>>2] = $sub$i;
 HEAP32[$arrayidx11$i61>>2] = $sub20$i;
 HEAP32[$arrayidx12$i62>>2] = $sub21$i;
 HEAP32[$arrayidx13$i63>>2] = $sub22$i;
 HEAP32[$arrayidx14$i64>>2] = $sub23$i;
 HEAP32[$arrayidx15$i65>>2] = $sub24$i;
 HEAP32[$arrayidx16$i66>>2] = $sub25$i;
 HEAP32[$arrayidx17$i67>>2] = $sub26$i;
 HEAP32[$arrayidx18$i68>>2] = $sub27$i;
 HEAP32[$arrayidx19$i69>>2] = $sub28$i;
 return;
}
function _ge_p1p1_to_p2($r,$p) {
 $r = $r|0;
 $p = $p|0;
 var $arraydecay3 = 0, $arraydecay4 = 0, $arraydecay6 = 0, $arraydecay7 = 0, $arraydecay9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay3 = ((($p)) + 120|0);
 _fe_mul($r,$p,$arraydecay3);
 $arraydecay4 = ((($r)) + 40|0);
 $arraydecay6 = ((($p)) + 40|0);
 $arraydecay7 = ((($p)) + 80|0);
 _fe_mul($arraydecay4,$arraydecay6,$arraydecay7);
 $arraydecay9 = ((($r)) + 80|0);
 _fe_mul($arraydecay9,$arraydecay7,$arraydecay3);
 return;
}
function _ge_frombytes_vartime($h,$s) {
 $h = $h|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$i253 = 0, $add$i398 = 0, $add$ptr = 0, $add$ptr$idx = 0, $add$ptr$idx$val = 0, $add$ptr$idx120 = 0, $add$ptr$idx120$val = 0, $add$ptr$val = 0, $add$ptr11 = 0, $add$ptr13 = 0;
 var $add$ptr13$idx = 0, $add$ptr13$idx$val = 0, $add$ptr13$idx116 = 0, $add$ptr13$idx116$val = 0, $add$ptr13$val = 0, $add$ptr16 = 0, $add$ptr16$idx = 0, $add$ptr16$idx$val = 0, $add$ptr16$idx115 = 0, $add$ptr16$idx115$val = 0, $add$ptr16$val = 0, $add$ptr19 = 0, $add$ptr19$idx = 0, $add$ptr19$idx$val = 0, $add$ptr19$idx114 = 0, $add$ptr19$idx114$val = 0, $add$ptr19$val = 0, $add$ptr2 = 0, $add$ptr2$idx = 0, $add$ptr2$idx$val = 0;
 var $add$ptr2$idx119 = 0, $add$ptr2$idx119$val = 0, $add$ptr2$val = 0, $add$ptr22 = 0, $add$ptr22$idx = 0, $add$ptr22$idx$val = 0, $add$ptr22$idx113 = 0, $add$ptr22$idx113$val = 0, $add$ptr22$val = 0, $add$ptr5 = 0, $add$ptr5$idx = 0, $add$ptr5$idx$val = 0, $add$ptr5$idx118 = 0, $add$ptr5$idx118$val = 0, $add$ptr5$val = 0, $add$ptr8 = 0, $add$ptr8$idx = 0, $add$ptr8$idx$val = 0, $add$ptr8$idx117 = 0, $add$ptr8$idx117$val = 0;
 var $add$ptr8$val = 0, $add20$i = 0, $add20$i399 = 0, $add21$i = 0, $add21$i400 = 0, $add22$i = 0, $add22$i401 = 0, $add23$i = 0, $add23$i402 = 0, $add24$i = 0, $add24$i403 = 0, $add25$i = 0, $add25$i404 = 0, $add26$i = 0, $add26$i405 = 0, $add27$i = 0, $add27$i406 = 0, $add28$i = 0, $add28$i407 = 0, $and$i = 0;
 var $arraydecay = 0, $arraydecay177 = 0, $arrayidx = 0, $arrayidx1$i = 0, $arrayidx1$i128 = 0, $arrayidx1$i229 = 0, $arrayidx1$i258 = 0, $arrayidx1$i331 = 0, $arrayidx1$i380 = 0, $arrayidx1$i417 = 0, $arrayidx1$i454 = 0, $arrayidx100 = 0, $arrayidx103 = 0, $arrayidx106 = 0, $arrayidx109 = 0, $arrayidx112 = 0, $arrayidx115 = 0, $arrayidx12$i266 = 0, $arrayidx12$i427 = 0, $arrayidx13$i428 = 0;
 var $arrayidx14$i429 = 0, $arrayidx15$i268 = 0, $arrayidx15$i430 = 0, $arrayidx16$i431 = 0, $arrayidx17$i432 = 0, $arrayidx18$i270 = 0, $arrayidx18$i433 = 0, $arrayidx19$i434 = 0, $arrayidx2$i = 0, $arrayidx2$i332 = 0, $arrayidx2$i381 = 0, $arrayidx2$i418 = 0, $arrayidx21$i272 = 0, $arrayidx24$i274 = 0, $arrayidx27$i276 = 0, $arrayidx3$i = 0, $arrayidx3$i129 = 0, $arrayidx3$i233 = 0, $arrayidx3$i260 = 0, $arrayidx3$i333 = 0;
 var $arrayidx3$i382 = 0, $arrayidx3$i419 = 0, $arrayidx30$i278 = 0, $arrayidx30$i350 = 0, $arrayidx31$i351 = 0, $arrayidx32$i352 = 0, $arrayidx33$i280 = 0, $arrayidx33$i353 = 0, $arrayidx34$i354 = 0, $arrayidx35$i355 = 0, $arrayidx36$i282 = 0, $arrayidx36$i356 = 0, $arrayidx37$i357 = 0, $arrayidx38$i358 = 0, $arrayidx39$i284 = 0, $arrayidx4$i = 0, $arrayidx4$i334 = 0, $arrayidx4$i383 = 0, $arrayidx4$i420 = 0, $arrayidx42$i286 = 0;
 var $arrayidx45$i288 = 0, $arrayidx48$i290 = 0, $arrayidx5$i = 0, $arrayidx5$i335 = 0, $arrayidx5$i384 = 0, $arrayidx5$i421 = 0, $arrayidx51$i292 = 0, $arrayidx54$i294 = 0, $arrayidx57$i296 = 0, $arrayidx6$i = 0, $arrayidx6$i262 = 0, $arrayidx6$i336 = 0, $arrayidx6$i385 = 0, $arrayidx6$i422 = 0, $arrayidx60$i298 = 0, $arrayidx63$i300 = 0, $arrayidx66$i302 = 0, $arrayidx69$i304 = 0, $arrayidx7$i = 0, $arrayidx7$i130 = 0;
 var $arrayidx7$i237 = 0, $arrayidx7$i337 = 0, $arrayidx7$i386 = 0, $arrayidx7$i423 = 0, $arrayidx72$i306 = 0, $arrayidx75$i308 = 0, $arrayidx78$i310 = 0, $arrayidx8$i = 0, $arrayidx8$i338 = 0, $arrayidx8$i387 = 0, $arrayidx8$i424 = 0, $arrayidx81$i312 = 0, $arrayidx84$i314 = 0, $arrayidx87$i316 = 0, $arrayidx9$i = 0, $arrayidx9$i264 = 0, $arrayidx9$i339 = 0, $arrayidx9$i388 = 0, $arrayidx9$i425 = 0, $arrayidx90$i318 = 0;
 var $arrayidx91 = 0, $arrayidx94 = 0, $arrayidx97 = 0, $check = 0, $cmp163 = 0, $conv161 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $or1$i = 0, $or1$i163 = 0, $or1$i259 = 0, $or115$i = 0, $or115$i169 = 0;
 var $or115$i265 = 0, $or146$i = 0, $or146$i171 = 0, $or146$i267 = 0, $or177$i = 0, $or177$i173 = 0, $or177$i269 = 0, $or208$i = 0, $or208$i175 = 0, $or208$i271 = 0, $or239$i = 0, $or239$i177 = 0, $or239$i273 = 0, $or2610$i = 0, $or2610$i179 = 0, $or2610$i275 = 0, $or2911$i = 0, $or2911$i181 = 0, $or2911$i277 = 0, $or3212$i = 0;
 var $or3212$i183 = 0, $or3212$i279 = 0, $or3513$i = 0, $or3513$i185 = 0, $or3513$i281 = 0, $or3814$i = 0, $or3814$i187 = 0, $or3814$i283 = 0, $or4115$i = 0, $or4115$i189 = 0, $or4115$i285 = 0, $or4416$i = 0, $or4416$i191 = 0, $or4416$i287 = 0, $or4717$i = 0, $or4717$i193 = 0, $or4717$i289 = 0, $or5018$i = 0, $or5018$i195 = 0, $or5018$i291 = 0;
 var $or52$i = 0, $or52$i165 = 0, $or52$i261 = 0, $or5319$i = 0, $or5319$i197 = 0, $or5319$i293 = 0, $or5620$i = 0, $or5620$i199 = 0, $or5620$i295 = 0, $or5921$i = 0, $or5921$i201 = 0, $or5921$i297 = 0, $or6222$i = 0, $or6222$i203 = 0, $or6222$i299 = 0, $or6523$i = 0, $or6523$i205 = 0, $or6523$i301 = 0, $or6824$i = 0, $or6824$i207 = 0;
 var $or6824$i303 = 0, $or7125$i = 0, $or7125$i209 = 0, $or7125$i305 = 0, $or7426$i = 0, $or7426$i211 = 0, $or7426$i307 = 0, $or7727$i = 0, $or7727$i213 = 0, $or7727$i309 = 0, $or8028$i = 0, $or8028$i215 = 0, $or8028$i311 = 0, $or8329$i = 0, $or8329$i217 = 0, $or8329$i313 = 0, $or84$i = 0, $or84$i167 = 0, $or84$i263 = 0, $or8630$i = 0;
 var $or8630$i219 = 0, $or8630$i315 = 0, $or8931$i = 0, $or8931$i221 = 0, $or8931$i317 = 0, $or92$i = 0, $or92$i224 = 0, $or92$i320 = 0, $or9232$i = 0, $or9232$i223 = 0, $or9232$i319 = 0, $retval$0 = 0, $s$i = 0, $sub$i = 0, $sub$i138 = 0, $sub$i225 = 0, $sub$i321 = 0, $sub$i349 = 0, $sub$i435 = 0, $sub10$i = 0;
 var $sub11$i = 0, $sub12$i = 0, $sub13$i = 0, $sub14$i = 0, $sub15$i = 0, $sub16$i = 0, $sub17$i = 0, $sub18$i = 0, $sub20$i = 0, $sub20$i436 = 0, $sub21$i = 0, $sub21$i437 = 0, $sub22$i = 0, $sub22$i438 = 0, $sub23$i = 0, $sub23$i439 = 0, $sub24$i = 0, $sub24$i440 = 0, $sub25$i = 0, $sub25$i441 = 0;
 var $sub26$i = 0, $sub26$i442 = 0, $sub27$i = 0, $sub27$i443 = 0, $sub28$i = 0, $sub28$i444 = 0, $tobool = 0, $tobool149 = 0, $tobool169 = 0, $u = 0, $v = 0, $vxx = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $s$i = sp + 192|0;
 $u = sp + 144|0;
 $v = sp + 96|0;
 $vxx = sp + 48|0;
 $check = sp;
 $0 = HEAP8[$s>>0]|0;
 $1 = $0&255;
 $arrayidx1$i = ((($s)) + 1|0);
 $2 = HEAP8[$arrayidx1$i>>0]|0;
 $3 = $2&255;
 $4 = (_bitshift64Shl(($3|0),0,8)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4 | $1;
 $arrayidx3$i = ((($s)) + 2|0);
 $7 = HEAP8[$arrayidx3$i>>0]|0;
 $8 = $7&255;
 $9 = (_bitshift64Shl(($8|0),0,16)|0);
 $10 = (getTempRet0() | 0);
 $11 = $6 | $9;
 $12 = $5 | $10;
 $arrayidx7$i = ((($s)) + 3|0);
 $13 = HEAP8[$arrayidx7$i>>0]|0;
 $14 = $13&255;
 $15 = (_bitshift64Shl(($14|0),0,24)|0);
 $16 = (getTempRet0() | 0);
 $17 = $11 | $15;
 $18 = $12 | $16;
 $add$ptr = ((($s)) + 4|0);
 $add$ptr$val = HEAP8[$add$ptr>>0]|0;
 $add$ptr$idx = ((($s)) + 5|0);
 $add$ptr$idx$val = HEAP8[$add$ptr$idx>>0]|0;
 $add$ptr$idx120 = ((($s)) + 6|0);
 $add$ptr$idx120$val = HEAP8[$add$ptr$idx120>>0]|0;
 $19 = $add$ptr$val&255;
 $20 = $add$ptr$idx$val&255;
 $21 = (_bitshift64Shl(($20|0),0,8)|0);
 $22 = (getTempRet0() | 0);
 $23 = $21 | $19;
 $24 = $add$ptr$idx120$val&255;
 $25 = (_bitshift64Shl(($24|0),0,16)|0);
 $26 = (getTempRet0() | 0);
 $27 = $23 | $25;
 $28 = $22 | $26;
 $29 = (_bitshift64Shl(($27|0),($28|0),6)|0);
 $30 = (getTempRet0() | 0);
 $add$ptr2 = ((($s)) + 7|0);
 $add$ptr2$val = HEAP8[$add$ptr2>>0]|0;
 $add$ptr2$idx = ((($s)) + 8|0);
 $add$ptr2$idx$val = HEAP8[$add$ptr2$idx>>0]|0;
 $add$ptr2$idx119 = ((($s)) + 9|0);
 $add$ptr2$idx119$val = HEAP8[$add$ptr2$idx119>>0]|0;
 $31 = $add$ptr2$val&255;
 $32 = $add$ptr2$idx$val&255;
 $33 = (_bitshift64Shl(($32|0),0,8)|0);
 $34 = (getTempRet0() | 0);
 $35 = $33 | $31;
 $36 = $add$ptr2$idx119$val&255;
 $37 = (_bitshift64Shl(($36|0),0,16)|0);
 $38 = (getTempRet0() | 0);
 $39 = $35 | $37;
 $40 = $34 | $38;
 $add$ptr5 = ((($s)) + 10|0);
 $add$ptr5$val = HEAP8[$add$ptr5>>0]|0;
 $add$ptr5$idx = ((($s)) + 11|0);
 $add$ptr5$idx$val = HEAP8[$add$ptr5$idx>>0]|0;
 $add$ptr5$idx118 = ((($s)) + 12|0);
 $add$ptr5$idx118$val = HEAP8[$add$ptr5$idx118>>0]|0;
 $41 = $add$ptr5$val&255;
 $42 = $add$ptr5$idx$val&255;
 $43 = (_bitshift64Shl(($42|0),0,8)|0);
 $44 = (getTempRet0() | 0);
 $45 = $43 | $41;
 $46 = $add$ptr5$idx118$val&255;
 $47 = (_bitshift64Shl(($46|0),0,16)|0);
 $48 = (getTempRet0() | 0);
 $49 = $45 | $47;
 $50 = $44 | $48;
 $51 = (_bitshift64Shl(($49|0),($50|0),3)|0);
 $52 = (getTempRet0() | 0);
 $add$ptr8 = ((($s)) + 13|0);
 $add$ptr8$val = HEAP8[$add$ptr8>>0]|0;
 $add$ptr8$idx = ((($s)) + 14|0);
 $add$ptr8$idx$val = HEAP8[$add$ptr8$idx>>0]|0;
 $add$ptr8$idx117 = ((($s)) + 15|0);
 $add$ptr8$idx117$val = HEAP8[$add$ptr8$idx117>>0]|0;
 $53 = $add$ptr8$val&255;
 $54 = $add$ptr8$idx$val&255;
 $55 = (_bitshift64Shl(($54|0),0,8)|0);
 $56 = (getTempRet0() | 0);
 $57 = $55 | $53;
 $58 = $add$ptr8$idx117$val&255;
 $59 = (_bitshift64Shl(($58|0),0,16)|0);
 $60 = (getTempRet0() | 0);
 $61 = $57 | $59;
 $62 = $56 | $60;
 $add$ptr11 = ((($s)) + 16|0);
 $63 = HEAP8[$add$ptr11>>0]|0;
 $64 = $63&255;
 $arrayidx1$i229 = ((($s)) + 17|0);
 $65 = HEAP8[$arrayidx1$i229>>0]|0;
 $66 = $65&255;
 $67 = (_bitshift64Shl(($66|0),0,8)|0);
 $68 = (getTempRet0() | 0);
 $69 = $67 | $64;
 $arrayidx3$i233 = ((($s)) + 18|0);
 $70 = HEAP8[$arrayidx3$i233>>0]|0;
 $71 = $70&255;
 $72 = (_bitshift64Shl(($71|0),0,16)|0);
 $73 = (getTempRet0() | 0);
 $74 = $69 | $72;
 $75 = $68 | $73;
 $arrayidx7$i237 = ((($s)) + 19|0);
 $76 = HEAP8[$arrayidx7$i237>>0]|0;
 $77 = $76&255;
 $78 = (_bitshift64Shl(($77|0),0,24)|0);
 $79 = (getTempRet0() | 0);
 $80 = $74 | $78;
 $81 = $75 | $79;
 $add$ptr13 = ((($s)) + 20|0);
 $add$ptr13$val = HEAP8[$add$ptr13>>0]|0;
 $add$ptr13$idx = ((($s)) + 21|0);
 $add$ptr13$idx$val = HEAP8[$add$ptr13$idx>>0]|0;
 $add$ptr13$idx116 = ((($s)) + 22|0);
 $add$ptr13$idx116$val = HEAP8[$add$ptr13$idx116>>0]|0;
 $82 = $add$ptr13$val&255;
 $83 = $add$ptr13$idx$val&255;
 $84 = (_bitshift64Shl(($83|0),0,8)|0);
 $85 = (getTempRet0() | 0);
 $86 = $84 | $82;
 $87 = $add$ptr13$idx116$val&255;
 $88 = (_bitshift64Shl(($87|0),0,16)|0);
 $89 = (getTempRet0() | 0);
 $90 = $86 | $88;
 $91 = $85 | $89;
 $add$ptr16 = ((($s)) + 23|0);
 $add$ptr16$val = HEAP8[$add$ptr16>>0]|0;
 $add$ptr16$idx = ((($s)) + 24|0);
 $add$ptr16$idx$val = HEAP8[$add$ptr16$idx>>0]|0;
 $add$ptr16$idx115 = ((($s)) + 25|0);
 $add$ptr16$idx115$val = HEAP8[$add$ptr16$idx115>>0]|0;
 $92 = $add$ptr16$val&255;
 $93 = $add$ptr16$idx$val&255;
 $94 = (_bitshift64Shl(($93|0),0,8)|0);
 $95 = (getTempRet0() | 0);
 $96 = $94 | $92;
 $97 = $add$ptr16$idx115$val&255;
 $98 = (_bitshift64Shl(($97|0),0,16)|0);
 $99 = (getTempRet0() | 0);
 $100 = $96 | $98;
 $101 = $95 | $99;
 $102 = (_bitshift64Shl(($100|0),($101|0),5)|0);
 $103 = (getTempRet0() | 0);
 $add$ptr19 = ((($s)) + 26|0);
 $add$ptr19$val = HEAP8[$add$ptr19>>0]|0;
 $add$ptr19$idx = ((($s)) + 27|0);
 $add$ptr19$idx$val = HEAP8[$add$ptr19$idx>>0]|0;
 $add$ptr19$idx114 = ((($s)) + 28|0);
 $add$ptr19$idx114$val = HEAP8[$add$ptr19$idx114>>0]|0;
 $104 = $add$ptr19$val&255;
 $105 = $add$ptr19$idx$val&255;
 $106 = (_bitshift64Shl(($105|0),0,8)|0);
 $107 = (getTempRet0() | 0);
 $108 = $106 | $104;
 $109 = $add$ptr19$idx114$val&255;
 $110 = (_bitshift64Shl(($109|0),0,16)|0);
 $111 = (getTempRet0() | 0);
 $112 = $108 | $110;
 $113 = $107 | $111;
 $add$ptr22 = ((($s)) + 29|0);
 $add$ptr22$val = HEAP8[$add$ptr22>>0]|0;
 $add$ptr22$idx = ((($s)) + 30|0);
 $add$ptr22$idx$val = HEAP8[$add$ptr22$idx>>0]|0;
 $add$ptr22$idx113 = ((($s)) + 31|0);
 $add$ptr22$idx113$val = HEAP8[$add$ptr22$idx113>>0]|0;
 $114 = $add$ptr22$val&255;
 $115 = $add$ptr22$idx$val&255;
 $116 = (_bitshift64Shl(($115|0),0,8)|0);
 $117 = (getTempRet0() | 0);
 $118 = $116 | $114;
 $119 = $add$ptr22$idx113$val&255;
 $120 = (_bitshift64Shl(($119|0),0,16)|0);
 $121 = (getTempRet0() | 0);
 $122 = $118 | $120;
 $123 = $117 | $121;
 $124 = (_bitshift64Shl(($122|0),($123|0),2)|0);
 $125 = (getTempRet0() | 0);
 $126 = $124 & 33554428;
 $127 = ($126|0)==(33554428);
 $128 = (0)==(0);
 $129 = $127 & $128;
 $130 = ($112|0)==(16777215);
 $131 = ($113|0)==(0);
 $132 = $130 & $131;
 $or$cond = $132 & $129;
 $133 = ($100|0)==(16777215);
 $134 = ($101|0)==(0);
 $135 = $133 & $134;
 $or$cond1 = $135 & $or$cond;
 $136 = ($90|0)==(16777215);
 $137 = ($91|0)==(0);
 $138 = $136 & $137;
 $or$cond2 = $138 & $or$cond1;
 $139 = ($80|0)==(-1);
 $140 = ($81|0)==(0);
 $141 = $139 & $140;
 $or$cond3 = $141 & $or$cond2;
 $142 = ($61|0)==(16777215);
 $143 = ($62|0)==(0);
 $144 = $142 & $143;
 $or$cond4 = $144 & $or$cond3;
 $145 = ($49|0)==(16777215);
 $146 = ($50|0)==(0);
 $147 = $145 & $146;
 $or$cond5 = $147 & $or$cond4;
 $148 = ($39|0)==(16777215);
 $149 = ($40|0)==(0);
 $150 = $148 & $149;
 $or$cond6 = $150 & $or$cond5;
 $151 = ($27|0)==(16777215);
 $152 = ($28|0)==(0);
 $153 = $151 & $152;
 $or$cond7 = $153 & $or$cond6;
 $154 = ($18>>>0)>(0);
 $155 = ($17>>>0)>(4294967276);
 $156 = ($18|0)==(0);
 $157 = $156 & $155;
 $158 = $154 | $157;
 $or$cond8 = $158 & $or$cond7;
 if ($or$cond8) {
  $retval$0 = -1;
  STACKTOP = sp;return ($retval$0|0);
 }
 $159 = (_bitshift64Shl(($39|0),($40|0),5)|0);
 $160 = (getTempRet0() | 0);
 $161 = (_bitshift64Shl(($61|0),($62|0),2)|0);
 $162 = (getTempRet0() | 0);
 $163 = (_bitshift64Shl(($90|0),($91|0),7)|0);
 $164 = (getTempRet0() | 0);
 $165 = (_bitshift64Shl(($112|0),($113|0),4)|0);
 $166 = (getTempRet0() | 0);
 $167 = (_i64Add(($126|0),0,16777216,0)|0);
 $168 = (getTempRet0() | 0);
 $169 = (_bitshift64Lshr(($167|0),($168|0),25)|0);
 $170 = (getTempRet0() | 0);
 $171 = (_i64Subtract(0,0,($169|0),($170|0))|0);
 $172 = (getTempRet0() | 0);
 $173 = $171 & 19;
 $174 = (_i64Add(($173|0),0,($17|0),($18|0))|0);
 $175 = (getTempRet0() | 0);
 $176 = $167 & 33554432;
 $177 = (_i64Add(($29|0),($30|0),16777216,0)|0);
 $178 = (getTempRet0() | 0);
 $179 = (_bitshift64Lshr(($177|0),($178|0),25)|0);
 $180 = (getTempRet0() | 0);
 $181 = (_i64Add(($159|0),($160|0),($179|0),($180|0))|0);
 $182 = (getTempRet0() | 0);
 $183 = $177 & -33554432;
 $184 = (_i64Subtract(($29|0),($30|0),($183|0),0)|0);
 $185 = (getTempRet0() | 0);
 $186 = (_i64Add(($51|0),($52|0),16777216,0)|0);
 $187 = (getTempRet0() | 0);
 $188 = (_bitshift64Lshr(($186|0),($187|0),25)|0);
 $189 = (getTempRet0() | 0);
 $190 = (_i64Add(($161|0),($162|0),($188|0),($189|0))|0);
 $191 = (getTempRet0() | 0);
 $192 = $186 & -33554432;
 $193 = (_i64Add(($80|0),($81|0),16777216,0)|0);
 $194 = (getTempRet0() | 0);
 $195 = (_bitshift64Lshr(($193|0),($194|0),25)|0);
 $196 = (getTempRet0() | 0);
 $197 = (_i64Add(($163|0),($164|0),($195|0),($196|0))|0);
 $198 = (getTempRet0() | 0);
 $199 = $193 & -33554432;
 $200 = (_i64Add(($102|0),($103|0),16777216,0)|0);
 $201 = (getTempRet0() | 0);
 $202 = (_bitshift64Lshr(($200|0),($201|0),25)|0);
 $203 = (getTempRet0() | 0);
 $204 = (_i64Add(($165|0),($166|0),($202|0),($203|0))|0);
 $205 = (getTempRet0() | 0);
 $206 = $200 & -33554432;
 $207 = (_i64Add(($174|0),($175|0),33554432,0)|0);
 $208 = (getTempRet0() | 0);
 $209 = (_bitshift64Lshr(($207|0),($208|0),26)|0);
 $210 = (getTempRet0() | 0);
 $211 = (_i64Add(($184|0),($185|0),($209|0),($210|0))|0);
 $212 = (getTempRet0() | 0);
 $213 = $207 & -67108864;
 $214 = (_i64Subtract(($174|0),($175|0),($213|0),0)|0);
 $215 = (getTempRet0() | 0);
 $216 = (_i64Add(($181|0),($182|0),33554432,0)|0);
 $217 = (getTempRet0() | 0);
 $218 = (_bitshift64Lshr(($216|0),($217|0),26)|0);
 $219 = (getTempRet0() | 0);
 $220 = (_i64Add(($218|0),($219|0),($51|0),($52|0))|0);
 $221 = (getTempRet0() | 0);
 $222 = (_i64Subtract(($220|0),($221|0),($192|0),0)|0);
 $223 = (getTempRet0() | 0);
 $224 = $216 & -67108864;
 $225 = (_i64Subtract(($181|0),($182|0),($224|0),0)|0);
 $226 = (getTempRet0() | 0);
 $227 = (_i64Add(($190|0),($191|0),33554432,0)|0);
 $228 = (getTempRet0() | 0);
 $229 = (_bitshift64Lshr(($227|0),($228|0),26)|0);
 $230 = (getTempRet0() | 0);
 $231 = (_i64Add(($229|0),($230|0),($80|0),($81|0))|0);
 $232 = (getTempRet0() | 0);
 $233 = (_i64Subtract(($231|0),($232|0),($199|0),0)|0);
 $234 = (getTempRet0() | 0);
 $235 = $227 & -67108864;
 $236 = (_i64Subtract(($190|0),($191|0),($235|0),0)|0);
 $237 = (getTempRet0() | 0);
 $238 = (_i64Add(($197|0),($198|0),33554432,0)|0);
 $239 = (getTempRet0() | 0);
 $240 = (_bitshift64Lshr(($238|0),($239|0),26)|0);
 $241 = (getTempRet0() | 0);
 $242 = (_i64Add(($240|0),($241|0),($102|0),($103|0))|0);
 $243 = (getTempRet0() | 0);
 $244 = (_i64Subtract(($242|0),($243|0),($206|0),0)|0);
 $245 = (getTempRet0() | 0);
 $246 = $238 & -67108864;
 $247 = (_i64Subtract(($197|0),($198|0),($246|0),0)|0);
 $248 = (getTempRet0() | 0);
 $249 = (_i64Add(($204|0),($205|0),33554432,0)|0);
 $250 = (getTempRet0() | 0);
 $251 = (_bitshift64Lshr(($249|0),($250|0),26)|0);
 $252 = (getTempRet0() | 0);
 $253 = (_i64Add(($126|0),0,($251|0),($252|0))|0);
 $254 = (getTempRet0() | 0);
 $255 = (_i64Subtract(($253|0),($254|0),($176|0),0)|0);
 $256 = (getTempRet0() | 0);
 $257 = $249 & -67108864;
 $258 = (_i64Subtract(($204|0),($205|0),($257|0),0)|0);
 $259 = (getTempRet0() | 0);
 $arrayidx = ((($h)) + 40|0);
 HEAP32[$arrayidx>>2] = $214;
 $arrayidx91 = ((($h)) + 44|0);
 HEAP32[$arrayidx91>>2] = $211;
 $arrayidx94 = ((($h)) + 48|0);
 HEAP32[$arrayidx94>>2] = $225;
 $arrayidx97 = ((($h)) + 52|0);
 HEAP32[$arrayidx97>>2] = $222;
 $arrayidx100 = ((($h)) + 56|0);
 HEAP32[$arrayidx100>>2] = $236;
 $arrayidx103 = ((($h)) + 60|0);
 HEAP32[$arrayidx103>>2] = $233;
 $arrayidx106 = ((($h)) + 64|0);
 HEAP32[$arrayidx106>>2] = $247;
 $arrayidx109 = ((($h)) + 68|0);
 HEAP32[$arrayidx109>>2] = $244;
 $arrayidx112 = ((($h)) + 72|0);
 HEAP32[$arrayidx112>>2] = $258;
 $arrayidx115 = ((($h)) + 76|0);
 HEAP32[$arrayidx115>>2] = $255;
 $arraydecay = ((($h)) + 80|0);
 HEAP32[$arraydecay>>2] = 1;
 $arrayidx1$i454 = ((($h)) + 84|0);
 dest=$arrayidx1$i454; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _fe_sq($u,$arrayidx);
 _fe_mul($v,$u,176);
 $260 = HEAP32[$u>>2]|0;
 $arrayidx1$i417 = ((($u)) + 4|0);
 $261 = HEAP32[$arrayidx1$i417>>2]|0;
 $arrayidx2$i418 = ((($u)) + 8|0);
 $262 = HEAP32[$arrayidx2$i418>>2]|0;
 $arrayidx3$i419 = ((($u)) + 12|0);
 $263 = HEAP32[$arrayidx3$i419>>2]|0;
 $arrayidx4$i420 = ((($u)) + 16|0);
 $264 = HEAP32[$arrayidx4$i420>>2]|0;
 $arrayidx5$i421 = ((($u)) + 20|0);
 $265 = HEAP32[$arrayidx5$i421>>2]|0;
 $arrayidx6$i422 = ((($u)) + 24|0);
 $266 = HEAP32[$arrayidx6$i422>>2]|0;
 $arrayidx7$i423 = ((($u)) + 28|0);
 $267 = HEAP32[$arrayidx7$i423>>2]|0;
 $arrayidx8$i424 = ((($u)) + 32|0);
 $268 = HEAP32[$arrayidx8$i424>>2]|0;
 $arrayidx9$i425 = ((($u)) + 36|0);
 $269 = HEAP32[$arrayidx9$i425>>2]|0;
 $270 = HEAP32[$arraydecay>>2]|0;
 $271 = HEAP32[$arrayidx1$i454>>2]|0;
 $arrayidx12$i427 = ((($h)) + 88|0);
 $272 = HEAP32[$arrayidx12$i427>>2]|0;
 $arrayidx13$i428 = ((($h)) + 92|0);
 $273 = HEAP32[$arrayidx13$i428>>2]|0;
 $arrayidx14$i429 = ((($h)) + 96|0);
 $274 = HEAP32[$arrayidx14$i429>>2]|0;
 $arrayidx15$i430 = ((($h)) + 100|0);
 $275 = HEAP32[$arrayidx15$i430>>2]|0;
 $arrayidx16$i431 = ((($h)) + 104|0);
 $276 = HEAP32[$arrayidx16$i431>>2]|0;
 $arrayidx17$i432 = ((($h)) + 108|0);
 $277 = HEAP32[$arrayidx17$i432>>2]|0;
 $arrayidx18$i433 = ((($h)) + 112|0);
 $278 = HEAP32[$arrayidx18$i433>>2]|0;
 $arrayidx19$i434 = ((($h)) + 116|0);
 $279 = HEAP32[$arrayidx19$i434>>2]|0;
 $sub$i435 = (($260) - ($270))|0;
 $sub20$i436 = (($261) - ($271))|0;
 $sub21$i437 = (($262) - ($272))|0;
 $sub22$i438 = (($263) - ($273))|0;
 $sub23$i439 = (($264) - ($274))|0;
 $sub24$i440 = (($265) - ($275))|0;
 $sub25$i441 = (($266) - ($276))|0;
 $sub26$i442 = (($267) - ($277))|0;
 $sub27$i443 = (($268) - ($278))|0;
 $sub28$i444 = (($269) - ($279))|0;
 HEAP32[$u>>2] = $sub$i435;
 HEAP32[$arrayidx1$i417>>2] = $sub20$i436;
 HEAP32[$arrayidx2$i418>>2] = $sub21$i437;
 HEAP32[$arrayidx3$i419>>2] = $sub22$i438;
 HEAP32[$arrayidx4$i420>>2] = $sub23$i439;
 HEAP32[$arrayidx5$i421>>2] = $sub24$i440;
 HEAP32[$arrayidx6$i422>>2] = $sub25$i441;
 HEAP32[$arrayidx7$i423>>2] = $sub26$i442;
 HEAP32[$arrayidx8$i424>>2] = $sub27$i443;
 HEAP32[$arrayidx9$i425>>2] = $sub28$i444;
 $280 = HEAP32[$v>>2]|0;
 $arrayidx1$i380 = ((($v)) + 4|0);
 $281 = HEAP32[$arrayidx1$i380>>2]|0;
 $arrayidx2$i381 = ((($v)) + 8|0);
 $282 = HEAP32[$arrayidx2$i381>>2]|0;
 $arrayidx3$i382 = ((($v)) + 12|0);
 $283 = HEAP32[$arrayidx3$i382>>2]|0;
 $arrayidx4$i383 = ((($v)) + 16|0);
 $284 = HEAP32[$arrayidx4$i383>>2]|0;
 $arrayidx5$i384 = ((($v)) + 20|0);
 $285 = HEAP32[$arrayidx5$i384>>2]|0;
 $arrayidx6$i385 = ((($v)) + 24|0);
 $286 = HEAP32[$arrayidx6$i385>>2]|0;
 $arrayidx7$i386 = ((($v)) + 28|0);
 $287 = HEAP32[$arrayidx7$i386>>2]|0;
 $arrayidx8$i387 = ((($v)) + 32|0);
 $288 = HEAP32[$arrayidx8$i387>>2]|0;
 $arrayidx9$i388 = ((($v)) + 36|0);
 $289 = HEAP32[$arrayidx9$i388>>2]|0;
 $add$i398 = (($280) + ($270))|0;
 $add20$i399 = (($281) + ($271))|0;
 $add21$i400 = (($282) + ($272))|0;
 $add22$i401 = (($283) + ($273))|0;
 $add23$i402 = (($284) + ($274))|0;
 $add24$i403 = (($285) + ($275))|0;
 $add25$i404 = (($286) + ($276))|0;
 $add26$i405 = (($287) + ($277))|0;
 $add27$i406 = (($288) + ($278))|0;
 $add28$i407 = (($289) + ($279))|0;
 HEAP32[$v>>2] = $add$i398;
 HEAP32[$arrayidx1$i380>>2] = $add20$i399;
 HEAP32[$arrayidx2$i381>>2] = $add21$i400;
 HEAP32[$arrayidx3$i382>>2] = $add22$i401;
 HEAP32[$arrayidx4$i383>>2] = $add23$i402;
 HEAP32[$arrayidx5$i384>>2] = $add24$i403;
 HEAP32[$arrayidx6$i385>>2] = $add25$i404;
 HEAP32[$arrayidx7$i386>>2] = $add26$i405;
 HEAP32[$arrayidx8$i387>>2] = $add27$i406;
 HEAP32[$arrayidx9$i388>>2] = $add28$i407;
 _fe_divpowm1($h,$u,$v);
 _fe_sq($vxx,$h);
 _fe_mul($vxx,$vxx,$v);
 $290 = HEAP32[$vxx>>2]|0;
 $arrayidx1$i331 = ((($vxx)) + 4|0);
 $291 = HEAP32[$arrayidx1$i331>>2]|0;
 $arrayidx2$i332 = ((($vxx)) + 8|0);
 $292 = HEAP32[$arrayidx2$i332>>2]|0;
 $arrayidx3$i333 = ((($vxx)) + 12|0);
 $293 = HEAP32[$arrayidx3$i333>>2]|0;
 $arrayidx4$i334 = ((($vxx)) + 16|0);
 $294 = HEAP32[$arrayidx4$i334>>2]|0;
 $arrayidx5$i335 = ((($vxx)) + 20|0);
 $295 = HEAP32[$arrayidx5$i335>>2]|0;
 $arrayidx6$i336 = ((($vxx)) + 24|0);
 $296 = HEAP32[$arrayidx6$i336>>2]|0;
 $arrayidx7$i337 = ((($vxx)) + 28|0);
 $297 = HEAP32[$arrayidx7$i337>>2]|0;
 $arrayidx8$i338 = ((($vxx)) + 32|0);
 $298 = HEAP32[$arrayidx8$i338>>2]|0;
 $arrayidx9$i339 = ((($vxx)) + 36|0);
 $299 = HEAP32[$arrayidx9$i339>>2]|0;
 $sub$i349 = (($290) - ($sub$i435))|0;
 $sub20$i = (($291) - ($sub20$i436))|0;
 $sub21$i = (($292) - ($sub21$i437))|0;
 $sub22$i = (($293) - ($sub22$i438))|0;
 $sub23$i = (($294) - ($sub23$i439))|0;
 $sub24$i = (($295) - ($sub24$i440))|0;
 $sub25$i = (($296) - ($sub25$i441))|0;
 $sub26$i = (($297) - ($sub26$i442))|0;
 $sub27$i = (($298) - ($sub27$i443))|0;
 $sub28$i = (($299) - ($sub28$i444))|0;
 HEAP32[$check>>2] = $sub$i349;
 $arrayidx30$i350 = ((($check)) + 4|0);
 HEAP32[$arrayidx30$i350>>2] = $sub20$i;
 $arrayidx31$i351 = ((($check)) + 8|0);
 HEAP32[$arrayidx31$i351>>2] = $sub21$i;
 $arrayidx32$i352 = ((($check)) + 12|0);
 HEAP32[$arrayidx32$i352>>2] = $sub22$i;
 $arrayidx33$i353 = ((($check)) + 16|0);
 HEAP32[$arrayidx33$i353>>2] = $sub23$i;
 $arrayidx34$i354 = ((($check)) + 20|0);
 HEAP32[$arrayidx34$i354>>2] = $sub24$i;
 $arrayidx35$i355 = ((($check)) + 24|0);
 HEAP32[$arrayidx35$i355>>2] = $sub25$i;
 $arrayidx36$i356 = ((($check)) + 28|0);
 HEAP32[$arrayidx36$i356>>2] = $sub26$i;
 $arrayidx37$i357 = ((($check)) + 32|0);
 HEAP32[$arrayidx37$i357>>2] = $sub27$i;
 $arrayidx38$i358 = ((($check)) + 36|0);
 HEAP32[$arrayidx38$i358>>2] = $sub28$i;
 _fe_tobytes($s$i,$check);
 $300 = HEAP8[$s$i>>0]|0;
 $arrayidx1$i258 = ((($s$i)) + 1|0);
 $301 = HEAP8[$arrayidx1$i258>>0]|0;
 $or1$i259 = $301 | $300;
 $arrayidx3$i260 = ((($s$i)) + 2|0);
 $302 = HEAP8[$arrayidx3$i260>>0]|0;
 $or52$i261 = $or1$i259 | $302;
 $arrayidx6$i262 = ((($s$i)) + 3|0);
 $303 = HEAP8[$arrayidx6$i262>>0]|0;
 $or84$i263 = $or52$i261 | $303;
 $arrayidx9$i264 = ((($s$i)) + 4|0);
 $304 = HEAP8[$arrayidx9$i264>>0]|0;
 $or115$i265 = $or84$i263 | $304;
 $arrayidx12$i266 = ((($s$i)) + 5|0);
 $305 = HEAP8[$arrayidx12$i266>>0]|0;
 $or146$i267 = $or115$i265 | $305;
 $arrayidx15$i268 = ((($s$i)) + 6|0);
 $306 = HEAP8[$arrayidx15$i268>>0]|0;
 $or177$i269 = $or146$i267 | $306;
 $arrayidx18$i270 = ((($s$i)) + 7|0);
 $307 = HEAP8[$arrayidx18$i270>>0]|0;
 $or208$i271 = $or177$i269 | $307;
 $arrayidx21$i272 = ((($s$i)) + 8|0);
 $308 = HEAP8[$arrayidx21$i272>>0]|0;
 $or239$i273 = $or208$i271 | $308;
 $arrayidx24$i274 = ((($s$i)) + 9|0);
 $309 = HEAP8[$arrayidx24$i274>>0]|0;
 $or2610$i275 = $or239$i273 | $309;
 $arrayidx27$i276 = ((($s$i)) + 10|0);
 $310 = HEAP8[$arrayidx27$i276>>0]|0;
 $or2911$i277 = $or2610$i275 | $310;
 $arrayidx30$i278 = ((($s$i)) + 11|0);
 $311 = HEAP8[$arrayidx30$i278>>0]|0;
 $or3212$i279 = $or2911$i277 | $311;
 $arrayidx33$i280 = ((($s$i)) + 12|0);
 $312 = HEAP8[$arrayidx33$i280>>0]|0;
 $or3513$i281 = $or3212$i279 | $312;
 $arrayidx36$i282 = ((($s$i)) + 13|0);
 $313 = HEAP8[$arrayidx36$i282>>0]|0;
 $or3814$i283 = $or3513$i281 | $313;
 $arrayidx39$i284 = ((($s$i)) + 14|0);
 $314 = HEAP8[$arrayidx39$i284>>0]|0;
 $or4115$i285 = $or3814$i283 | $314;
 $arrayidx42$i286 = ((($s$i)) + 15|0);
 $315 = HEAP8[$arrayidx42$i286>>0]|0;
 $or4416$i287 = $or4115$i285 | $315;
 $arrayidx45$i288 = ((($s$i)) + 16|0);
 $316 = HEAP8[$arrayidx45$i288>>0]|0;
 $or4717$i289 = $or4416$i287 | $316;
 $arrayidx48$i290 = ((($s$i)) + 17|0);
 $317 = HEAP8[$arrayidx48$i290>>0]|0;
 $or5018$i291 = $or4717$i289 | $317;
 $arrayidx51$i292 = ((($s$i)) + 18|0);
 $318 = HEAP8[$arrayidx51$i292>>0]|0;
 $or5319$i293 = $or5018$i291 | $318;
 $arrayidx54$i294 = ((($s$i)) + 19|0);
 $319 = HEAP8[$arrayidx54$i294>>0]|0;
 $or5620$i295 = $or5319$i293 | $319;
 $arrayidx57$i296 = ((($s$i)) + 20|0);
 $320 = HEAP8[$arrayidx57$i296>>0]|0;
 $or5921$i297 = $or5620$i295 | $320;
 $arrayidx60$i298 = ((($s$i)) + 21|0);
 $321 = HEAP8[$arrayidx60$i298>>0]|0;
 $or6222$i299 = $or5921$i297 | $321;
 $arrayidx63$i300 = ((($s$i)) + 22|0);
 $322 = HEAP8[$arrayidx63$i300>>0]|0;
 $or6523$i301 = $or6222$i299 | $322;
 $arrayidx66$i302 = ((($s$i)) + 23|0);
 $323 = HEAP8[$arrayidx66$i302>>0]|0;
 $or6824$i303 = $or6523$i301 | $323;
 $arrayidx69$i304 = ((($s$i)) + 24|0);
 $324 = HEAP8[$arrayidx69$i304>>0]|0;
 $or7125$i305 = $or6824$i303 | $324;
 $arrayidx72$i306 = ((($s$i)) + 25|0);
 $325 = HEAP8[$arrayidx72$i306>>0]|0;
 $or7426$i307 = $or7125$i305 | $325;
 $arrayidx75$i308 = ((($s$i)) + 26|0);
 $326 = HEAP8[$arrayidx75$i308>>0]|0;
 $or7727$i309 = $or7426$i307 | $326;
 $arrayidx78$i310 = ((($s$i)) + 27|0);
 $327 = HEAP8[$arrayidx78$i310>>0]|0;
 $or8028$i311 = $or7727$i309 | $327;
 $arrayidx81$i312 = ((($s$i)) + 28|0);
 $328 = HEAP8[$arrayidx81$i312>>0]|0;
 $or8329$i313 = $or8028$i311 | $328;
 $arrayidx84$i314 = ((($s$i)) + 29|0);
 $329 = HEAP8[$arrayidx84$i314>>0]|0;
 $or8630$i315 = $or8329$i313 | $329;
 $arrayidx87$i316 = ((($s$i)) + 30|0);
 $330 = HEAP8[$arrayidx87$i316>>0]|0;
 $or8931$i317 = $or8630$i315 | $330;
 $arrayidx90$i318 = ((($s$i)) + 31|0);
 $331 = HEAP8[$arrayidx90$i318>>0]|0;
 $or9232$i319 = $or8931$i317 | $331;
 $or92$i320 = $or9232$i319&255;
 $sub$i321 = (($or92$i320) + -1)|0;
 $tobool = ($sub$i321>>>0)>(4294967039);
 do {
  if (!($tobool)) {
   $332 = HEAP32[$vxx>>2]|0;
   $333 = HEAP32[$arrayidx1$i331>>2]|0;
   $334 = HEAP32[$arrayidx2$i332>>2]|0;
   $335 = HEAP32[$arrayidx3$i333>>2]|0;
   $336 = HEAP32[$arrayidx4$i334>>2]|0;
   $337 = HEAP32[$arrayidx5$i335>>2]|0;
   $338 = HEAP32[$arrayidx6$i336>>2]|0;
   $339 = HEAP32[$arrayidx7$i337>>2]|0;
   $340 = HEAP32[$arrayidx8$i338>>2]|0;
   $341 = HEAP32[$arrayidx9$i339>>2]|0;
   $342 = HEAP32[$u>>2]|0;
   $343 = HEAP32[$arrayidx1$i417>>2]|0;
   $344 = HEAP32[$arrayidx2$i418>>2]|0;
   $345 = HEAP32[$arrayidx3$i419>>2]|0;
   $346 = HEAP32[$arrayidx4$i420>>2]|0;
   $347 = HEAP32[$arrayidx5$i421>>2]|0;
   $348 = HEAP32[$arrayidx6$i422>>2]|0;
   $349 = HEAP32[$arrayidx7$i423>>2]|0;
   $350 = HEAP32[$arrayidx8$i424>>2]|0;
   $351 = HEAP32[$arrayidx9$i425>>2]|0;
   $add$i253 = (($342) + ($332))|0;
   $add20$i = (($343) + ($333))|0;
   $add21$i = (($344) + ($334))|0;
   $add22$i = (($345) + ($335))|0;
   $add23$i = (($346) + ($336))|0;
   $add24$i = (($347) + ($337))|0;
   $add25$i = (($348) + ($338))|0;
   $add26$i = (($349) + ($339))|0;
   $add27$i = (($350) + ($340))|0;
   $add28$i = (($351) + ($341))|0;
   HEAP32[$check>>2] = $add$i253;
   HEAP32[$arrayidx30$i350>>2] = $add20$i;
   HEAP32[$arrayidx31$i351>>2] = $add21$i;
   HEAP32[$arrayidx32$i352>>2] = $add22$i;
   HEAP32[$arrayidx33$i353>>2] = $add23$i;
   HEAP32[$arrayidx34$i354>>2] = $add24$i;
   HEAP32[$arrayidx35$i355>>2] = $add25$i;
   HEAP32[$arrayidx36$i356>>2] = $add26$i;
   HEAP32[$arrayidx37$i357>>2] = $add27$i;
   HEAP32[$arrayidx38$i358>>2] = $add28$i;
   _fe_tobytes($s$i,$check);
   $352 = HEAP8[$s$i>>0]|0;
   $353 = HEAP8[$arrayidx1$i258>>0]|0;
   $or1$i163 = $353 | $352;
   $354 = HEAP8[$arrayidx3$i260>>0]|0;
   $or52$i165 = $or1$i163 | $354;
   $355 = HEAP8[$arrayidx6$i262>>0]|0;
   $or84$i167 = $or52$i165 | $355;
   $356 = HEAP8[$arrayidx9$i264>>0]|0;
   $or115$i169 = $or84$i167 | $356;
   $357 = HEAP8[$arrayidx12$i266>>0]|0;
   $or146$i171 = $or115$i169 | $357;
   $358 = HEAP8[$arrayidx15$i268>>0]|0;
   $or177$i173 = $or146$i171 | $358;
   $359 = HEAP8[$arrayidx18$i270>>0]|0;
   $or208$i175 = $or177$i173 | $359;
   $360 = HEAP8[$arrayidx21$i272>>0]|0;
   $or239$i177 = $or208$i175 | $360;
   $361 = HEAP8[$arrayidx24$i274>>0]|0;
   $or2610$i179 = $or239$i177 | $361;
   $362 = HEAP8[$arrayidx27$i276>>0]|0;
   $or2911$i181 = $or2610$i179 | $362;
   $363 = HEAP8[$arrayidx30$i278>>0]|0;
   $or3212$i183 = $or2911$i181 | $363;
   $364 = HEAP8[$arrayidx33$i280>>0]|0;
   $or3513$i185 = $or3212$i183 | $364;
   $365 = HEAP8[$arrayidx36$i282>>0]|0;
   $or3814$i187 = $or3513$i185 | $365;
   $366 = HEAP8[$arrayidx39$i284>>0]|0;
   $or4115$i189 = $or3814$i187 | $366;
   $367 = HEAP8[$arrayidx42$i286>>0]|0;
   $or4416$i191 = $or4115$i189 | $367;
   $368 = HEAP8[$arrayidx45$i288>>0]|0;
   $or4717$i193 = $or4416$i191 | $368;
   $369 = HEAP8[$arrayidx48$i290>>0]|0;
   $or5018$i195 = $or4717$i193 | $369;
   $370 = HEAP8[$arrayidx51$i292>>0]|0;
   $or5319$i197 = $or5018$i195 | $370;
   $371 = HEAP8[$arrayidx54$i294>>0]|0;
   $or5620$i199 = $or5319$i197 | $371;
   $372 = HEAP8[$arrayidx57$i296>>0]|0;
   $or5921$i201 = $or5620$i199 | $372;
   $373 = HEAP8[$arrayidx60$i298>>0]|0;
   $or6222$i203 = $or5921$i201 | $373;
   $374 = HEAP8[$arrayidx63$i300>>0]|0;
   $or6523$i205 = $or6222$i203 | $374;
   $375 = HEAP8[$arrayidx66$i302>>0]|0;
   $or6824$i207 = $or6523$i205 | $375;
   $376 = HEAP8[$arrayidx69$i304>>0]|0;
   $or7125$i209 = $or6824$i207 | $376;
   $377 = HEAP8[$arrayidx72$i306>>0]|0;
   $or7426$i211 = $or7125$i209 | $377;
   $378 = HEAP8[$arrayidx75$i308>>0]|0;
   $or7727$i213 = $or7426$i211 | $378;
   $379 = HEAP8[$arrayidx78$i310>>0]|0;
   $or8028$i215 = $or7727$i213 | $379;
   $380 = HEAP8[$arrayidx81$i312>>0]|0;
   $or8329$i217 = $or8028$i215 | $380;
   $381 = HEAP8[$arrayidx84$i314>>0]|0;
   $or8630$i219 = $or8329$i217 | $381;
   $382 = HEAP8[$arrayidx87$i316>>0]|0;
   $or8931$i221 = $or8630$i219 | $382;
   $383 = HEAP8[$arrayidx90$i318>>0]|0;
   $or9232$i223 = $or8931$i221 | $383;
   $or92$i224 = $or9232$i223&255;
   $sub$i225 = (($or92$i224) + -1)|0;
   $tobool149 = ($sub$i225>>>0)>(4294967039);
   if ($tobool149) {
    _fe_mul($h,$h,224);
    break;
   } else {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   }
  }
 } while(0);
 _fe_tobytes($s$i,$h);
 $384 = HEAP8[$s$i>>0]|0;
 $385 = $384 & 1;
 $and$i = $385&255;
 $386 = HEAP8[$add$ptr22$idx113>>0]|0;
 $conv161 = $386&255;
 $387 = $conv161 >>> 7;
 $cmp163 = ($387|0)==($and$i|0);
 do {
  if (!($cmp163)) {
   _fe_tobytes($s$i,$h);
   $388 = HEAP8[$s$i>>0]|0;
   $389 = HEAP8[$arrayidx1$i258>>0]|0;
   $or1$i = $389 | $388;
   $390 = HEAP8[$arrayidx3$i260>>0]|0;
   $or52$i = $or1$i | $390;
   $391 = HEAP8[$arrayidx6$i262>>0]|0;
   $or84$i = $or52$i | $391;
   $392 = HEAP8[$arrayidx9$i264>>0]|0;
   $or115$i = $or84$i | $392;
   $393 = HEAP8[$arrayidx12$i266>>0]|0;
   $or146$i = $or115$i | $393;
   $394 = HEAP8[$arrayidx15$i268>>0]|0;
   $or177$i = $or146$i | $394;
   $395 = HEAP8[$arrayidx18$i270>>0]|0;
   $or208$i = $or177$i | $395;
   $396 = HEAP8[$arrayidx21$i272>>0]|0;
   $or239$i = $or208$i | $396;
   $397 = HEAP8[$arrayidx24$i274>>0]|0;
   $or2610$i = $or239$i | $397;
   $398 = HEAP8[$arrayidx27$i276>>0]|0;
   $or2911$i = $or2610$i | $398;
   $399 = HEAP8[$arrayidx30$i278>>0]|0;
   $or3212$i = $or2911$i | $399;
   $400 = HEAP8[$arrayidx33$i280>>0]|0;
   $or3513$i = $or3212$i | $400;
   $401 = HEAP8[$arrayidx36$i282>>0]|0;
   $or3814$i = $or3513$i | $401;
   $402 = HEAP8[$arrayidx39$i284>>0]|0;
   $or4115$i = $or3814$i | $402;
   $403 = HEAP8[$arrayidx42$i286>>0]|0;
   $or4416$i = $or4115$i | $403;
   $404 = HEAP8[$arrayidx45$i288>>0]|0;
   $or4717$i = $or4416$i | $404;
   $405 = HEAP8[$arrayidx48$i290>>0]|0;
   $or5018$i = $or4717$i | $405;
   $406 = HEAP8[$arrayidx51$i292>>0]|0;
   $or5319$i = $or5018$i | $406;
   $407 = HEAP8[$arrayidx54$i294>>0]|0;
   $or5620$i = $or5319$i | $407;
   $408 = HEAP8[$arrayidx57$i296>>0]|0;
   $or5921$i = $or5620$i | $408;
   $409 = HEAP8[$arrayidx60$i298>>0]|0;
   $or6222$i = $or5921$i | $409;
   $410 = HEAP8[$arrayidx63$i300>>0]|0;
   $or6523$i = $or6222$i | $410;
   $411 = HEAP8[$arrayidx66$i302>>0]|0;
   $or6824$i = $or6523$i | $411;
   $412 = HEAP8[$arrayidx69$i304>>0]|0;
   $or7125$i = $or6824$i | $412;
   $413 = HEAP8[$arrayidx72$i306>>0]|0;
   $or7426$i = $or7125$i | $413;
   $414 = HEAP8[$arrayidx75$i308>>0]|0;
   $or7727$i = $or7426$i | $414;
   $415 = HEAP8[$arrayidx78$i310>>0]|0;
   $or8028$i = $or7727$i | $415;
   $416 = HEAP8[$arrayidx81$i312>>0]|0;
   $or8329$i = $or8028$i | $416;
   $417 = HEAP8[$arrayidx84$i314>>0]|0;
   $or8630$i = $or8329$i | $417;
   $418 = HEAP8[$arrayidx87$i316>>0]|0;
   $or8931$i = $or8630$i | $418;
   $419 = HEAP8[$arrayidx90$i318>>0]|0;
   $or9232$i = $or8931$i | $419;
   $or92$i = $or9232$i&255;
   $sub$i138 = (($or92$i) + -1)|0;
   $tobool169 = ($sub$i138>>>0)>(4294967039);
   if ($tobool169) {
    $retval$0 = -1;
    STACKTOP = sp;return ($retval$0|0);
   } else {
    $420 = HEAP32[$h>>2]|0;
    $arrayidx1$i128 = ((($h)) + 4|0);
    $421 = HEAP32[$arrayidx1$i128>>2]|0;
    $arrayidx2$i = ((($h)) + 8|0);
    $422 = HEAP32[$arrayidx2$i>>2]|0;
    $arrayidx3$i129 = ((($h)) + 12|0);
    $423 = HEAP32[$arrayidx3$i129>>2]|0;
    $arrayidx4$i = ((($h)) + 16|0);
    $424 = HEAP32[$arrayidx4$i>>2]|0;
    $arrayidx5$i = ((($h)) + 20|0);
    $425 = HEAP32[$arrayidx5$i>>2]|0;
    $arrayidx6$i = ((($h)) + 24|0);
    $426 = HEAP32[$arrayidx6$i>>2]|0;
    $arrayidx7$i130 = ((($h)) + 28|0);
    $427 = HEAP32[$arrayidx7$i130>>2]|0;
    $arrayidx8$i = ((($h)) + 32|0);
    $428 = HEAP32[$arrayidx8$i>>2]|0;
    $arrayidx9$i = ((($h)) + 36|0);
    $429 = HEAP32[$arrayidx9$i>>2]|0;
    $sub$i = (0 - ($420))|0;
    $sub10$i = (0 - ($421))|0;
    $sub11$i = (0 - ($422))|0;
    $sub12$i = (0 - ($423))|0;
    $sub13$i = (0 - ($424))|0;
    $sub14$i = (0 - ($425))|0;
    $sub15$i = (0 - ($426))|0;
    $sub16$i = (0 - ($427))|0;
    $sub17$i = (0 - ($428))|0;
    $sub18$i = (0 - ($429))|0;
    HEAP32[$h>>2] = $sub$i;
    HEAP32[$arrayidx1$i128>>2] = $sub10$i;
    HEAP32[$arrayidx2$i>>2] = $sub11$i;
    HEAP32[$arrayidx3$i129>>2] = $sub12$i;
    HEAP32[$arrayidx4$i>>2] = $sub13$i;
    HEAP32[$arrayidx5$i>>2] = $sub14$i;
    HEAP32[$arrayidx6$i>>2] = $sub15$i;
    HEAP32[$arrayidx7$i130>>2] = $sub16$i;
    HEAP32[$arrayidx8$i>>2] = $sub17$i;
    HEAP32[$arrayidx9$i>>2] = $sub18$i;
    break;
   }
  }
 } while(0);
 $arraydecay177 = ((($h)) + 120|0);
 _fe_mul($arraydecay177,$h,$arrayidx);
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _fe_divpowm1($r,$u,$v) {
 $r = $r|0;
 $u = $u|0;
 $v = $v|0;
 var $exitcond = 0, $i$519 = 0, $inc91 = 0, $t0 = 0, $t1 = 0, $t2 = 0, $uv7 = 0, $v3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $v3 = sp + 192|0;
 $uv7 = sp + 144|0;
 $t0 = sp + 96|0;
 $t1 = sp + 48|0;
 $t2 = sp;
 _fe_sq($v3,$v);
 _fe_mul($v3,$v3,$v);
 _fe_sq($uv7,$v3);
 _fe_mul($uv7,$uv7,$v);
 _fe_mul($uv7,$uv7,$u);
 _fe_sq($t0,$uv7);
 _fe_sq($t1,$t0);
 _fe_sq($t1,$t1);
 _fe_mul($t1,$uv7,$t1);
 _fe_mul($t0,$t0,$t1);
 _fe_sq($t0,$t0);
 _fe_mul($t0,$t1,$t0);
 _fe_sq($t1,$t0);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_mul($t0,$t1,$t0);
 _fe_sq($t1,$t0);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_mul($t1,$t1,$t0);
 _fe_sq($t2,$t1);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_mul($t1,$t2,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_mul($t0,$t1,$t0);
 _fe_sq($t1,$t0);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_mul($t1,$t1,$t0);
 _fe_sq($t2,$t1);
 $i$519 = 0;
 while(1) {
  _fe_sq($t2,$t2);
  $inc91 = (($i$519) + 1)|0;
  $exitcond = ($inc91|0)==(99);
  if ($exitcond) {
   break;
  } else {
   $i$519 = $inc91;
  }
 }
 _fe_mul($t1,$t2,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_mul($t0,$t1,$t0);
 _fe_sq($t0,$t0);
 _fe_sq($t0,$t0);
 _fe_mul($t0,$t0,$uv7);
 _fe_mul($t0,$t0,$v3);
 _fe_mul($r,$t0,$u);
 STACKTOP = sp;return;
}
function _fe_tobytes($s,$h) {
 $s = $s|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add10 = 0, $add12 = 0, $add14 = 0, $add16 = 0, $add18 = 0, $add20 = 0, $add22 = 0, $add24 = 0, $add26 = 0, $add28 = 0, $add31 = 0, $add33 = 0, $add35 = 0, $add39 = 0, $add43 = 0, $add47 = 0, $add51 = 0, $add55 = 0, $add59 = 0, $add63 = 0;
 var $arrayidx1 = 0, $arrayidx102 = 0, $arrayidx105 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx131 = 0, $arrayidx136 = 0, $arrayidx139 = 0, $arrayidx142 = 0, $arrayidx147 = 0, $arrayidx150 = 0, $arrayidx153 = 0, $arrayidx158 = 0, $arrayidx161 = 0, $arrayidx164 = 0;
 var $arrayidx169 = 0, $arrayidx172 = 0, $arrayidx175 = 0, $arrayidx178 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx5 = 0, $arrayidx6 = 0, $arrayidx7 = 0, $arrayidx73 = 0, $arrayidx76 = 0, $arrayidx8 = 0, $arrayidx80 = 0, $arrayidx83 = 0, $arrayidx86 = 0, $arrayidx9 = 0, $arrayidx91 = 0, $arrayidx94 = 0, $arrayidx97 = 0;
 var $conv = 0, $conv101 = 0, $conv104 = 0, $conv107 = 0, $conv112 = 0, $conv115 = 0, $conv118 = 0, $conv121 = 0, $conv124 = 0, $conv127 = 0, $conv130 = 0, $conv135 = 0, $conv138 = 0, $conv141 = 0, $conv146 = 0, $conv149 = 0, $conv152 = 0, $conv157 = 0, $conv160 = 0, $conv163 = 0;
 var $conv168 = 0, $conv171 = 0, $conv174 = 0, $conv177 = 0, $conv72 = 0, $conv75 = 0, $conv79 = 0, $conv82 = 0, $conv85 = 0, $conv90 = 0, $conv93 = 0, $conv96 = 0, $mul = 0, $mul30 = 0, $or = 0, $or100 = 0, $or111 = 0, $or134 = 0, $or145 = 0, $or156 = 0;
 var $or167 = 0, $or89 = 0, $shl110 = 0, $shl133 = 0, $shl144 = 0, $shl155 = 0, $shl166 = 0, $shl78 = 0, $shl88 = 0, $shl99 = 0, $shr = 0, $shr11 = 0, $shr13 = 0, $shr15 = 0, $shr17 = 0, $shr19 = 0, $shr21 = 0, $shr23 = 0, $shr25 = 0, $shr27 = 0;
 var $shr29 = 0, $shr32 = 0, $shr34 = 0, $shr38 = 0, $shr42 = 0, $shr46 = 0, $shr50 = 0, $shr54 = 0, $shr58 = 0, $shr62 = 0, $sub = 0, $sub37 = 0, $sub41 = 0, $sub45 = 0, $sub49 = 0, $sub53 = 0, $sub57 = 0, $sub61 = 0, $sub65 = 0, $sub68 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$h>>2]|0;
 $arrayidx1 = ((($h)) + 4|0);
 $1 = HEAP32[$arrayidx1>>2]|0;
 $arrayidx2 = ((($h)) + 8|0);
 $2 = HEAP32[$arrayidx2>>2]|0;
 $arrayidx3 = ((($h)) + 12|0);
 $3 = HEAP32[$arrayidx3>>2]|0;
 $arrayidx4 = ((($h)) + 16|0);
 $4 = HEAP32[$arrayidx4>>2]|0;
 $arrayidx5 = ((($h)) + 20|0);
 $5 = HEAP32[$arrayidx5>>2]|0;
 $arrayidx6 = ((($h)) + 24|0);
 $6 = HEAP32[$arrayidx6>>2]|0;
 $arrayidx7 = ((($h)) + 28|0);
 $7 = HEAP32[$arrayidx7>>2]|0;
 $arrayidx8 = ((($h)) + 32|0);
 $8 = HEAP32[$arrayidx8>>2]|0;
 $arrayidx9 = ((($h)) + 36|0);
 $9 = HEAP32[$arrayidx9>>2]|0;
 $mul = ($9*19)|0;
 $add = (($mul) + 16777216)|0;
 $shr = $add >> 25;
 $add10 = (($shr) + ($0))|0;
 $shr11 = $add10 >> 26;
 $add12 = (($shr11) + ($1))|0;
 $shr13 = $add12 >> 25;
 $add14 = (($shr13) + ($2))|0;
 $shr15 = $add14 >> 26;
 $add16 = (($shr15) + ($3))|0;
 $shr17 = $add16 >> 25;
 $add18 = (($shr17) + ($4))|0;
 $shr19 = $add18 >> 26;
 $add20 = (($shr19) + ($5))|0;
 $shr21 = $add20 >> 25;
 $add22 = (($shr21) + ($6))|0;
 $shr23 = $add22 >> 26;
 $add24 = (($shr23) + ($7))|0;
 $shr25 = $add24 >> 25;
 $add26 = (($shr25) + ($8))|0;
 $shr27 = $add26 >> 26;
 $add28 = (($shr27) + ($9))|0;
 $shr29 = $add28 >> 25;
 $mul30 = ($shr29*19)|0;
 $add31 = (($mul30) + ($0))|0;
 $shr32 = $add31 >> 26;
 $add33 = (($shr32) + ($1))|0;
 $shr34 = $add33 >> 25;
 $add35 = (($shr34) + ($2))|0;
 $sub37 = $add33 & 33554431;
 $shr38 = $add35 >> 26;
 $add39 = (($shr38) + ($3))|0;
 $sub41 = $add35 & 67108863;
 $shr42 = $add39 >> 25;
 $add43 = (($shr42) + ($4))|0;
 $sub45 = $add39 & 33554431;
 $shr46 = $add43 >> 26;
 $add47 = (($shr46) + ($5))|0;
 $shr50 = $add47 >> 25;
 $add51 = (($shr50) + ($6))|0;
 $shr54 = $add51 >> 26;
 $add55 = (($shr54) + ($7))|0;
 $sub57 = $add51 & 67108863;
 $shr58 = $add55 >> 25;
 $add59 = (($shr58) + ($8))|0;
 $sub61 = $add55 & 33554431;
 $shr62 = $add59 >> 26;
 $add63 = (($shr62) + ($9))|0;
 $sub65 = $add59 & 67108863;
 $sub68 = $add63 & 33554431;
 $conv = $add31&255;
 HEAP8[$s>>0] = $conv;
 $10 = $add31 >>> 8;
 $conv72 = $10&255;
 $arrayidx73 = ((($s)) + 1|0);
 HEAP8[$arrayidx73>>0] = $conv72;
 $11 = $add31 >>> 16;
 $conv75 = $11&255;
 $arrayidx76 = ((($s)) + 2|0);
 HEAP8[$arrayidx76>>0] = $conv75;
 $sub = $add31 >>> 24;
 $12 = $sub & 3;
 $shl78 = $sub37 << 2;
 $or = $shl78 | $12;
 $conv79 = $or&255;
 $arrayidx80 = ((($s)) + 3|0);
 HEAP8[$arrayidx80>>0] = $conv79;
 $13 = $add33 >>> 6;
 $conv82 = $13&255;
 $arrayidx83 = ((($s)) + 4|0);
 HEAP8[$arrayidx83>>0] = $conv82;
 $14 = $add33 >>> 14;
 $conv85 = $14&255;
 $arrayidx86 = ((($s)) + 5|0);
 HEAP8[$arrayidx86>>0] = $conv85;
 $15 = $sub37 >>> 22;
 $shl88 = $sub41 << 3;
 $or89 = $shl88 | $15;
 $conv90 = $or89&255;
 $arrayidx91 = ((($s)) + 6|0);
 HEAP8[$arrayidx91>>0] = $conv90;
 $16 = $add35 >>> 5;
 $conv93 = $16&255;
 $arrayidx94 = ((($s)) + 7|0);
 HEAP8[$arrayidx94>>0] = $conv93;
 $17 = $add35 >>> 13;
 $conv96 = $17&255;
 $arrayidx97 = ((($s)) + 8|0);
 HEAP8[$arrayidx97>>0] = $conv96;
 $18 = $sub41 >>> 21;
 $shl99 = $sub45 << 5;
 $or100 = $shl99 | $18;
 $conv101 = $or100&255;
 $arrayidx102 = ((($s)) + 9|0);
 HEAP8[$arrayidx102>>0] = $conv101;
 $19 = $add39 >>> 3;
 $conv104 = $19&255;
 $arrayidx105 = ((($s)) + 10|0);
 HEAP8[$arrayidx105>>0] = $conv104;
 $20 = $add39 >>> 11;
 $conv107 = $20&255;
 $arrayidx108 = ((($s)) + 11|0);
 HEAP8[$arrayidx108>>0] = $conv107;
 $21 = $sub45 >>> 19;
 $shl110 = $add43 << 6;
 $or111 = $shl110 | $21;
 $conv112 = $or111&255;
 $arrayidx113 = ((($s)) + 12|0);
 HEAP8[$arrayidx113>>0] = $conv112;
 $22 = $add43 >>> 2;
 $conv115 = $22&255;
 $arrayidx116 = ((($s)) + 13|0);
 HEAP8[$arrayidx116>>0] = $conv115;
 $23 = $add43 >>> 10;
 $conv118 = $23&255;
 $arrayidx119 = ((($s)) + 14|0);
 HEAP8[$arrayidx119>>0] = $conv118;
 $sub49 = $add43 >>> 18;
 $conv121 = $sub49&255;
 $arrayidx122 = ((($s)) + 15|0);
 HEAP8[$arrayidx122>>0] = $conv121;
 $conv124 = $add47&255;
 $arrayidx125 = ((($s)) + 16|0);
 HEAP8[$arrayidx125>>0] = $conv124;
 $24 = $add47 >>> 8;
 $conv127 = $24&255;
 $arrayidx128 = ((($s)) + 17|0);
 HEAP8[$arrayidx128>>0] = $conv127;
 $25 = $add47 >>> 16;
 $conv130 = $25&255;
 $arrayidx131 = ((($s)) + 18|0);
 HEAP8[$arrayidx131>>0] = $conv130;
 $sub53 = $add47 >>> 24;
 $26 = $sub53 & 1;
 $shl133 = $sub57 << 1;
 $or134 = $shl133 | $26;
 $conv135 = $or134&255;
 $arrayidx136 = ((($s)) + 19|0);
 HEAP8[$arrayidx136>>0] = $conv135;
 $27 = $add51 >>> 7;
 $conv138 = $27&255;
 $arrayidx139 = ((($s)) + 20|0);
 HEAP8[$arrayidx139>>0] = $conv138;
 $28 = $add51 >>> 15;
 $conv141 = $28&255;
 $arrayidx142 = ((($s)) + 21|0);
 HEAP8[$arrayidx142>>0] = $conv141;
 $29 = $sub57 >>> 23;
 $shl144 = $sub61 << 3;
 $or145 = $shl144 | $29;
 $conv146 = $or145&255;
 $arrayidx147 = ((($s)) + 22|0);
 HEAP8[$arrayidx147>>0] = $conv146;
 $30 = $add55 >>> 5;
 $conv149 = $30&255;
 $arrayidx150 = ((($s)) + 23|0);
 HEAP8[$arrayidx150>>0] = $conv149;
 $31 = $add55 >>> 13;
 $conv152 = $31&255;
 $arrayidx153 = ((($s)) + 24|0);
 HEAP8[$arrayidx153>>0] = $conv152;
 $32 = $sub61 >>> 21;
 $shl155 = $sub65 << 4;
 $or156 = $shl155 | $32;
 $conv157 = $or156&255;
 $arrayidx158 = ((($s)) + 25|0);
 HEAP8[$arrayidx158>>0] = $conv157;
 $33 = $add59 >>> 4;
 $conv160 = $33&255;
 $arrayidx161 = ((($s)) + 26|0);
 HEAP8[$arrayidx161>>0] = $conv160;
 $34 = $add59 >>> 12;
 $conv163 = $34&255;
 $arrayidx164 = ((($s)) + 27|0);
 HEAP8[$arrayidx164>>0] = $conv163;
 $35 = $sub65 >>> 20;
 $shl166 = $sub68 << 6;
 $or167 = $shl166 | $35;
 $conv168 = $or167&255;
 $arrayidx169 = ((($s)) + 28|0);
 HEAP8[$arrayidx169>>0] = $conv168;
 $36 = $add63 >>> 2;
 $conv171 = $36&255;
 $arrayidx172 = ((($s)) + 29|0);
 HEAP8[$arrayidx172>>0] = $conv171;
 $37 = $add63 >>> 10;
 $conv174 = $37&255;
 $arrayidx175 = ((($s)) + 30|0);
 HEAP8[$arrayidx175>>0] = $conv174;
 $38 = $sub68 >>> 18;
 $conv177 = $38&255;
 $arrayidx178 = ((($s)) + 31|0);
 HEAP8[$arrayidx178>>0] = $conv177;
 return;
}
function _ge_p3_tobytes($s,$h) {
 $s = $s|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $arraydecay1 = 0, $arraydecay6 = 0, $arrayidx = 0, $recip = 0, $s$i = 0, $x = 0, $xor4 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $s$i = sp + 144|0;
 $recip = sp + 96|0;
 $x = sp + 48|0;
 $y = sp;
 $arraydecay1 = ((($h)) + 80|0);
 _fe_invert($recip,$arraydecay1);
 _fe_mul($x,$h,$recip);
 $arraydecay6 = ((($h)) + 40|0);
 _fe_mul($y,$arraydecay6,$recip);
 _fe_tobytes($s,$y);
 _fe_tobytes($s$i,$x);
 $0 = HEAP8[$s$i>>0]|0;
 $1 = ($0 << 7)&255;
 $arrayidx = ((($s)) + 31|0);
 $2 = HEAP8[$arrayidx>>0]|0;
 $xor4 = $2 ^ $1;
 HEAP8[$arrayidx>>0] = $xor4;
 STACKTOP = sp;return;
}
function _fe_invert($out,$z) {
 $out = $out|0;
 $z = $z|0;
 var $exitcond = 0, $i$520 = 0, $inc82 = 0, $t0 = 0, $t1 = 0, $t2 = 0, $t3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $t0 = sp + 144|0;
 $t1 = sp + 96|0;
 $t2 = sp + 48|0;
 $t3 = sp;
 _fe_sq($t0,$z);
 _fe_sq($t1,$t0);
 _fe_sq($t1,$t1);
 _fe_mul($t1,$z,$t1);
 _fe_mul($t0,$t0,$t1);
 _fe_sq($t2,$t0);
 _fe_mul($t1,$t1,$t2);
 _fe_sq($t2,$t1);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_mul($t1,$t2,$t1);
 _fe_sq($t2,$t1);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_mul($t2,$t2,$t1);
 _fe_sq($t3,$t2);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_sq($t3,$t3);
 _fe_mul($t2,$t3,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_mul($t1,$t2,$t1);
 _fe_sq($t2,$t1);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_mul($t2,$t2,$t1);
 _fe_sq($t3,$t2);
 $i$520 = 0;
 while(1) {
  _fe_sq($t3,$t3);
  $inc82 = (($i$520) + 1)|0;
  $exitcond = ($inc82|0)==(99);
  if ($exitcond) {
   break;
  } else {
   $i$520 = $inc82;
  }
 }
 _fe_mul($t2,$t3,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_sq($t2,$t2);
 _fe_mul($t1,$t2,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_sq($t1,$t1);
 _fe_mul($out,$t1,$t0);
 STACKTOP = sp;return;
}
function _ge_scalarmult_base($h,$a) {
 $h = $h|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add18 = 0, $add37 = 0, $add45 = 0, $add54 = 0, $arraydecay1$i = 0, $arraydecay15$i40 = 0, $arraydecay2$i = 0, $arraydecay3$i$i = 0, $arraydecay3$i35 = 0, $arraydecay4$i44 = 0;
 var $arraydecay6$i$i = 0, $arraydecay6$i37 = 0, $arraydecay7$i38 = 0, $arraydecay9$i47 = 0, $arrayidx$1 = 0, $arrayidx$10 = 0, $arrayidx$11 = 0, $arrayidx$12 = 0, $arrayidx$13 = 0, $arrayidx$14 = 0, $arrayidx$15 = 0, $arrayidx$16 = 0, $arrayidx$17 = 0, $arrayidx$18 = 0, $arrayidx$19 = 0, $arrayidx$2 = 0, $arrayidx$20 = 0, $arrayidx$21 = 0, $arrayidx$22 = 0, $arrayidx$23 = 0;
 var $arrayidx$24 = 0, $arrayidx$25 = 0, $arrayidx$26 = 0, $arrayidx$27 = 0, $arrayidx$28 = 0, $arrayidx$29 = 0, $arrayidx$3 = 0, $arrayidx$30 = 0, $arrayidx$31 = 0, $arrayidx$4 = 0, $arrayidx$5 = 0, $arrayidx$6 = 0, $arrayidx$7 = 0, $arrayidx$8 = 0, $arrayidx$9 = 0, $arrayidx1$i$i = 0, $arrayidx1$i$i$i = 0, $arrayidx1$i4$i = 0, $arrayidx10 = 0, $arrayidx10$1 = 0;
 var $arrayidx10$10 = 0, $arrayidx10$11 = 0, $arrayidx10$12 = 0, $arrayidx10$13 = 0, $arrayidx10$14 = 0, $arrayidx10$15 = 0, $arrayidx10$16 = 0, $arrayidx10$17 = 0, $arrayidx10$18 = 0, $arrayidx10$19 = 0, $arrayidx10$2 = 0, $arrayidx10$20 = 0, $arrayidx10$21 = 0, $arrayidx10$22 = 0, $arrayidx10$23 = 0, $arrayidx10$24 = 0, $arrayidx10$25 = 0, $arrayidx10$26 = 0, $arrayidx10$27 = 0, $arrayidx10$28 = 0;
 var $arrayidx10$29 = 0, $arrayidx10$3 = 0, $arrayidx10$30 = 0, $arrayidx10$31 = 0, $arrayidx10$4 = 0, $arrayidx10$5 = 0, $arrayidx10$6 = 0, $arrayidx10$7 = 0, $arrayidx10$8 = 0, $arrayidx10$9 = 0, $arrayidx11$i$i$i = 0, $arrayidx11$i14$i$i = 0, $arrayidx11$i32$i$i = 0, $arrayidx12$i$i$i = 0, $arrayidx12$i15$i$i = 0, $arrayidx12$i33$i$i = 0, $arrayidx13$i$i$i = 0, $arrayidx13$i16$i$i = 0, $arrayidx13$i34$i$i = 0, $arrayidx14$i$i$i = 0;
 var $arrayidx14$i17$i$i = 0, $arrayidx14$i35$i$i = 0, $arrayidx15$i$i$i = 0, $arrayidx15$i18$i$i = 0, $arrayidx15$i36$i$i = 0, $arrayidx16 = 0, $arrayidx16$i$i$i = 0, $arrayidx16$i19$i$i = 0, $arrayidx16$i37$i$i = 0, $arrayidx17$i$i$i = 0, $arrayidx17$i20$i$i = 0, $arrayidx17$i38$i$i = 0, $arrayidx18$i$i$i = 0, $arrayidx18$i21$i$i = 0, $arrayidx18$i39$i$i = 0, $arrayidx19$i$i$i = 0, $arrayidx19$i22$i$i = 0, $arrayidx19$i40$i$i = 0, $arrayidx2$1 = 0, $arrayidx2$10 = 0;
 var $arrayidx2$11 = 0, $arrayidx2$12 = 0, $arrayidx2$13 = 0, $arrayidx2$14 = 0, $arrayidx2$15 = 0, $arrayidx2$16 = 0, $arrayidx2$17 = 0, $arrayidx2$18 = 0, $arrayidx2$19 = 0, $arrayidx2$2 = 0, $arrayidx2$20 = 0, $arrayidx2$21 = 0, $arrayidx2$22 = 0, $arrayidx2$23 = 0, $arrayidx2$24 = 0, $arrayidx2$25 = 0, $arrayidx2$26 = 0, $arrayidx2$27 = 0, $arrayidx2$28 = 0, $arrayidx2$29 = 0;
 var $arrayidx2$3 = 0, $arrayidx2$30 = 0, $arrayidx2$31 = 0, $arrayidx2$4 = 0, $arrayidx2$5 = 0, $arrayidx2$6 = 0, $arrayidx2$7 = 0, $arrayidx2$8 = 0, $arrayidx2$9 = 0, $arrayidx2$i$i$i = 0, $arrayidx2$i24$i$i = 0, $arrayidx2$i6$i$i = 0, $arrayidx3$i$i$i = 0, $arrayidx3$i25$i$i = 0, $arrayidx3$i7$i$i = 0, $arrayidx4$i$i$i = 0, $arrayidx4$i26$i$i = 0, $arrayidx4$i8$i$i = 0, $arrayidx43 = 0, $arrayidx5$i$i$i = 0;
 var $arrayidx5$i27$i$i = 0, $arrayidx5$i9$i$i = 0, $arrayidx52 = 0, $arrayidx6$i$i$i = 0, $arrayidx6$i10$i$i = 0, $arrayidx6$i28$i$i = 0, $arrayidx7$i$i$i = 0, $arrayidx7$i11$i$i = 0, $arrayidx7$i29$i$i = 0, $arrayidx8$i$i$i = 0, $arrayidx8$i12$i$i = 0, $arrayidx8$i30$i$i = 0, $arrayidx9$i$i$i = 0, $arrayidx9$i13$i$i = 0, $arrayidx9$i31$i$i = 0, $carry$072 = 0, $cmp40 = 0, $cmp48 = 0, $conv1730 = 0, $conv30 = 0;
 var $conv3629 = 0, $conv38 = 0, $div = 0, $div51 = 0, $e = 0, $exitcond = 0, $i$173 = 0, $i$271 = 0, $i$370 = 0, $inc32 = 0, $q$i = 0, $r = 0, $s = 0, $sext = 0, $sext31 = 0, $shl = 0, $shr25 = 0, $sub = 0, $t = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $q$i = sp + 464|0;
 $e = sp;
 $r = sp + 304|0;
 $s = sp + 184|0;
 $t = sp + 64|0;
 $0 = HEAP8[$a>>0]|0;
 $1 = $0 & 15;
 HEAP8[$e>>0] = $1;
 $2 = ($0&255) >>> 4;
 $arrayidx10 = ((($e)) + 1|0);
 HEAP8[$arrayidx10>>0] = $2;
 $arrayidx$1 = ((($a)) + 1|0);
 $3 = HEAP8[$arrayidx$1>>0]|0;
 $4 = $3 & 15;
 $arrayidx2$1 = ((($e)) + 2|0);
 HEAP8[$arrayidx2$1>>0] = $4;
 $5 = ($3&255) >>> 4;
 $arrayidx10$1 = ((($e)) + 3|0);
 HEAP8[$arrayidx10$1>>0] = $5;
 $arrayidx$2 = ((($a)) + 2|0);
 $6 = HEAP8[$arrayidx$2>>0]|0;
 $7 = $6 & 15;
 $arrayidx2$2 = ((($e)) + 4|0);
 HEAP8[$arrayidx2$2>>0] = $7;
 $8 = ($6&255) >>> 4;
 $arrayidx10$2 = ((($e)) + 5|0);
 HEAP8[$arrayidx10$2>>0] = $8;
 $arrayidx$3 = ((($a)) + 3|0);
 $9 = HEAP8[$arrayidx$3>>0]|0;
 $10 = $9 & 15;
 $arrayidx2$3 = ((($e)) + 6|0);
 HEAP8[$arrayidx2$3>>0] = $10;
 $11 = ($9&255) >>> 4;
 $arrayidx10$3 = ((($e)) + 7|0);
 HEAP8[$arrayidx10$3>>0] = $11;
 $arrayidx$4 = ((($a)) + 4|0);
 $12 = HEAP8[$arrayidx$4>>0]|0;
 $13 = $12 & 15;
 $arrayidx2$4 = ((($e)) + 8|0);
 HEAP8[$arrayidx2$4>>0] = $13;
 $14 = ($12&255) >>> 4;
 $arrayidx10$4 = ((($e)) + 9|0);
 HEAP8[$arrayidx10$4>>0] = $14;
 $arrayidx$5 = ((($a)) + 5|0);
 $15 = HEAP8[$arrayidx$5>>0]|0;
 $16 = $15 & 15;
 $arrayidx2$5 = ((($e)) + 10|0);
 HEAP8[$arrayidx2$5>>0] = $16;
 $17 = ($15&255) >>> 4;
 $arrayidx10$5 = ((($e)) + 11|0);
 HEAP8[$arrayidx10$5>>0] = $17;
 $arrayidx$6 = ((($a)) + 6|0);
 $18 = HEAP8[$arrayidx$6>>0]|0;
 $19 = $18 & 15;
 $arrayidx2$6 = ((($e)) + 12|0);
 HEAP8[$arrayidx2$6>>0] = $19;
 $20 = ($18&255) >>> 4;
 $arrayidx10$6 = ((($e)) + 13|0);
 HEAP8[$arrayidx10$6>>0] = $20;
 $arrayidx$7 = ((($a)) + 7|0);
 $21 = HEAP8[$arrayidx$7>>0]|0;
 $22 = $21 & 15;
 $arrayidx2$7 = ((($e)) + 14|0);
 HEAP8[$arrayidx2$7>>0] = $22;
 $23 = ($21&255) >>> 4;
 $arrayidx10$7 = ((($e)) + 15|0);
 HEAP8[$arrayidx10$7>>0] = $23;
 $arrayidx$8 = ((($a)) + 8|0);
 $24 = HEAP8[$arrayidx$8>>0]|0;
 $25 = $24 & 15;
 $arrayidx2$8 = ((($e)) + 16|0);
 HEAP8[$arrayidx2$8>>0] = $25;
 $26 = ($24&255) >>> 4;
 $arrayidx10$8 = ((($e)) + 17|0);
 HEAP8[$arrayidx10$8>>0] = $26;
 $arrayidx$9 = ((($a)) + 9|0);
 $27 = HEAP8[$arrayidx$9>>0]|0;
 $28 = $27 & 15;
 $arrayidx2$9 = ((($e)) + 18|0);
 HEAP8[$arrayidx2$9>>0] = $28;
 $29 = ($27&255) >>> 4;
 $arrayidx10$9 = ((($e)) + 19|0);
 HEAP8[$arrayidx10$9>>0] = $29;
 $arrayidx$10 = ((($a)) + 10|0);
 $30 = HEAP8[$arrayidx$10>>0]|0;
 $31 = $30 & 15;
 $arrayidx2$10 = ((($e)) + 20|0);
 HEAP8[$arrayidx2$10>>0] = $31;
 $32 = ($30&255) >>> 4;
 $arrayidx10$10 = ((($e)) + 21|0);
 HEAP8[$arrayidx10$10>>0] = $32;
 $arrayidx$11 = ((($a)) + 11|0);
 $33 = HEAP8[$arrayidx$11>>0]|0;
 $34 = $33 & 15;
 $arrayidx2$11 = ((($e)) + 22|0);
 HEAP8[$arrayidx2$11>>0] = $34;
 $35 = ($33&255) >>> 4;
 $arrayidx10$11 = ((($e)) + 23|0);
 HEAP8[$arrayidx10$11>>0] = $35;
 $arrayidx$12 = ((($a)) + 12|0);
 $36 = HEAP8[$arrayidx$12>>0]|0;
 $37 = $36 & 15;
 $arrayidx2$12 = ((($e)) + 24|0);
 HEAP8[$arrayidx2$12>>0] = $37;
 $38 = ($36&255) >>> 4;
 $arrayidx10$12 = ((($e)) + 25|0);
 HEAP8[$arrayidx10$12>>0] = $38;
 $arrayidx$13 = ((($a)) + 13|0);
 $39 = HEAP8[$arrayidx$13>>0]|0;
 $40 = $39 & 15;
 $arrayidx2$13 = ((($e)) + 26|0);
 HEAP8[$arrayidx2$13>>0] = $40;
 $41 = ($39&255) >>> 4;
 $arrayidx10$13 = ((($e)) + 27|0);
 HEAP8[$arrayidx10$13>>0] = $41;
 $arrayidx$14 = ((($a)) + 14|0);
 $42 = HEAP8[$arrayidx$14>>0]|0;
 $43 = $42 & 15;
 $arrayidx2$14 = ((($e)) + 28|0);
 HEAP8[$arrayidx2$14>>0] = $43;
 $44 = ($42&255) >>> 4;
 $arrayidx10$14 = ((($e)) + 29|0);
 HEAP8[$arrayidx10$14>>0] = $44;
 $arrayidx$15 = ((($a)) + 15|0);
 $45 = HEAP8[$arrayidx$15>>0]|0;
 $46 = $45 & 15;
 $arrayidx2$15 = ((($e)) + 30|0);
 HEAP8[$arrayidx2$15>>0] = $46;
 $47 = ($45&255) >>> 4;
 $arrayidx10$15 = ((($e)) + 31|0);
 HEAP8[$arrayidx10$15>>0] = $47;
 $arrayidx$16 = ((($a)) + 16|0);
 $48 = HEAP8[$arrayidx$16>>0]|0;
 $49 = $48 & 15;
 $arrayidx2$16 = ((($e)) + 32|0);
 HEAP8[$arrayidx2$16>>0] = $49;
 $50 = ($48&255) >>> 4;
 $arrayidx10$16 = ((($e)) + 33|0);
 HEAP8[$arrayidx10$16>>0] = $50;
 $arrayidx$17 = ((($a)) + 17|0);
 $51 = HEAP8[$arrayidx$17>>0]|0;
 $52 = $51 & 15;
 $arrayidx2$17 = ((($e)) + 34|0);
 HEAP8[$arrayidx2$17>>0] = $52;
 $53 = ($51&255) >>> 4;
 $arrayidx10$17 = ((($e)) + 35|0);
 HEAP8[$arrayidx10$17>>0] = $53;
 $arrayidx$18 = ((($a)) + 18|0);
 $54 = HEAP8[$arrayidx$18>>0]|0;
 $55 = $54 & 15;
 $arrayidx2$18 = ((($e)) + 36|0);
 HEAP8[$arrayidx2$18>>0] = $55;
 $56 = ($54&255) >>> 4;
 $arrayidx10$18 = ((($e)) + 37|0);
 HEAP8[$arrayidx10$18>>0] = $56;
 $arrayidx$19 = ((($a)) + 19|0);
 $57 = HEAP8[$arrayidx$19>>0]|0;
 $58 = $57 & 15;
 $arrayidx2$19 = ((($e)) + 38|0);
 HEAP8[$arrayidx2$19>>0] = $58;
 $59 = ($57&255) >>> 4;
 $arrayidx10$19 = ((($e)) + 39|0);
 HEAP8[$arrayidx10$19>>0] = $59;
 $arrayidx$20 = ((($a)) + 20|0);
 $60 = HEAP8[$arrayidx$20>>0]|0;
 $61 = $60 & 15;
 $arrayidx2$20 = ((($e)) + 40|0);
 HEAP8[$arrayidx2$20>>0] = $61;
 $62 = ($60&255) >>> 4;
 $arrayidx10$20 = ((($e)) + 41|0);
 HEAP8[$arrayidx10$20>>0] = $62;
 $arrayidx$21 = ((($a)) + 21|0);
 $63 = HEAP8[$arrayidx$21>>0]|0;
 $64 = $63 & 15;
 $arrayidx2$21 = ((($e)) + 42|0);
 HEAP8[$arrayidx2$21>>0] = $64;
 $65 = ($63&255) >>> 4;
 $arrayidx10$21 = ((($e)) + 43|0);
 HEAP8[$arrayidx10$21>>0] = $65;
 $arrayidx$22 = ((($a)) + 22|0);
 $66 = HEAP8[$arrayidx$22>>0]|0;
 $67 = $66 & 15;
 $arrayidx2$22 = ((($e)) + 44|0);
 HEAP8[$arrayidx2$22>>0] = $67;
 $68 = ($66&255) >>> 4;
 $arrayidx10$22 = ((($e)) + 45|0);
 HEAP8[$arrayidx10$22>>0] = $68;
 $arrayidx$23 = ((($a)) + 23|0);
 $69 = HEAP8[$arrayidx$23>>0]|0;
 $70 = $69 & 15;
 $arrayidx2$23 = ((($e)) + 46|0);
 HEAP8[$arrayidx2$23>>0] = $70;
 $71 = ($69&255) >>> 4;
 $arrayidx10$23 = ((($e)) + 47|0);
 HEAP8[$arrayidx10$23>>0] = $71;
 $arrayidx$24 = ((($a)) + 24|0);
 $72 = HEAP8[$arrayidx$24>>0]|0;
 $73 = $72 & 15;
 $arrayidx2$24 = ((($e)) + 48|0);
 HEAP8[$arrayidx2$24>>0] = $73;
 $74 = ($72&255) >>> 4;
 $arrayidx10$24 = ((($e)) + 49|0);
 HEAP8[$arrayidx10$24>>0] = $74;
 $arrayidx$25 = ((($a)) + 25|0);
 $75 = HEAP8[$arrayidx$25>>0]|0;
 $76 = $75 & 15;
 $arrayidx2$25 = ((($e)) + 50|0);
 HEAP8[$arrayidx2$25>>0] = $76;
 $77 = ($75&255) >>> 4;
 $arrayidx10$25 = ((($e)) + 51|0);
 HEAP8[$arrayidx10$25>>0] = $77;
 $arrayidx$26 = ((($a)) + 26|0);
 $78 = HEAP8[$arrayidx$26>>0]|0;
 $79 = $78 & 15;
 $arrayidx2$26 = ((($e)) + 52|0);
 HEAP8[$arrayidx2$26>>0] = $79;
 $80 = ($78&255) >>> 4;
 $arrayidx10$26 = ((($e)) + 53|0);
 HEAP8[$arrayidx10$26>>0] = $80;
 $arrayidx$27 = ((($a)) + 27|0);
 $81 = HEAP8[$arrayidx$27>>0]|0;
 $82 = $81 & 15;
 $arrayidx2$27 = ((($e)) + 54|0);
 HEAP8[$arrayidx2$27>>0] = $82;
 $83 = ($81&255) >>> 4;
 $arrayidx10$27 = ((($e)) + 55|0);
 HEAP8[$arrayidx10$27>>0] = $83;
 $arrayidx$28 = ((($a)) + 28|0);
 $84 = HEAP8[$arrayidx$28>>0]|0;
 $85 = $84 & 15;
 $arrayidx2$28 = ((($e)) + 56|0);
 HEAP8[$arrayidx2$28>>0] = $85;
 $86 = ($84&255) >>> 4;
 $arrayidx10$28 = ((($e)) + 57|0);
 HEAP8[$arrayidx10$28>>0] = $86;
 $arrayidx$29 = ((($a)) + 29|0);
 $87 = HEAP8[$arrayidx$29>>0]|0;
 $88 = $87 & 15;
 $arrayidx2$29 = ((($e)) + 58|0);
 HEAP8[$arrayidx2$29>>0] = $88;
 $89 = ($87&255) >>> 4;
 $arrayidx10$29 = ((($e)) + 59|0);
 HEAP8[$arrayidx10$29>>0] = $89;
 $arrayidx$30 = ((($a)) + 30|0);
 $90 = HEAP8[$arrayidx$30>>0]|0;
 $91 = $90 & 15;
 $arrayidx2$30 = ((($e)) + 60|0);
 HEAP8[$arrayidx2$30>>0] = $91;
 $92 = ($90&255) >>> 4;
 $arrayidx10$30 = ((($e)) + 61|0);
 HEAP8[$arrayidx10$30>>0] = $92;
 $arrayidx$31 = ((($a)) + 31|0);
 $93 = HEAP8[$arrayidx$31>>0]|0;
 $94 = $93 & 15;
 $arrayidx2$31 = ((($e)) + 62|0);
 HEAP8[$arrayidx2$31>>0] = $94;
 $95 = ($93&255) >>> 4;
 $arrayidx10$31 = ((($e)) + 63|0);
 HEAP8[$arrayidx10$31>>0] = $95;
 $carry$072 = 0;$i$173 = 0;
 while(1) {
  $arrayidx16 = (($e) + ($i$173)|0);
  $96 = HEAP8[$arrayidx16>>0]|0;
  $conv1730 = $96&255;
  $add18 = (($carry$072) + ($conv1730))|0;
  $sext = $add18 << 24;
  $sext31 = (($sext) + 134217728)|0;
  $shr25 = $sext31 >> 28;
  $shl = $shr25 << 4;
  $sub = (($add18) - ($shl))|0;
  $conv30 = $sub&255;
  HEAP8[$arrayidx16>>0] = $conv30;
  $inc32 = (($i$173) + 1)|0;
  $exitcond = ($inc32|0)==(63);
  if ($exitcond) {
   break;
  } else {
   $carry$072 = $shr25;$i$173 = $inc32;
  }
 }
 $97 = HEAP8[$arrayidx10$31>>0]|0;
 $conv3629 = $97&255;
 $add37 = (($shr25) + ($conv3629))|0;
 $conv38 = $add37&255;
 HEAP8[$arrayidx10$31>>0] = $conv38;
 dest=$h; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay1$i = ((($h)) + 40|0);
 HEAP32[$arraydecay1$i>>2] = 1;
 $arrayidx1$i4$i = ((($h)) + 44|0);
 dest=$arrayidx1$i4$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay2$i = ((($h)) + 80|0);
 HEAP32[$arraydecay2$i>>2] = 1;
 $arrayidx1$i$i = ((($h)) + 84|0);
 dest=$arrayidx1$i$i; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay3$i35 = ((($r)) + 120|0);
 $arraydecay6$i37 = ((($r)) + 40|0);
 $arraydecay7$i38 = ((($r)) + 80|0);
 $arraydecay15$i40 = ((($h)) + 120|0);
 $i$271 = 1;
 while(1) {
  $div = $i$271 >>> 1;
  $arrayidx43 = (($e) + ($i$271)|0);
  $98 = HEAP8[$arrayidx43>>0]|0;
  _select_434($t,$div,$98);
  _ge_madd($r,$h,$t);
  _fe_mul($h,$r,$arraydecay3$i35);
  _fe_mul($arraydecay1$i,$arraydecay6$i37,$arraydecay7$i38);
  _fe_mul($arraydecay2$i,$arraydecay7$i38,$arraydecay3$i35);
  _fe_mul($arraydecay15$i40,$r,$arraydecay6$i37);
  $add45 = (($i$271) + 2)|0;
  $cmp40 = ($add45>>>0)<(64);
  if ($cmp40) {
   $i$271 = $add45;
  } else {
   break;
  }
 }
 $99 = HEAP32[$h>>2]|0;
 $arrayidx1$i$i$i = ((($h)) + 4|0);
 $100 = HEAP32[$arrayidx1$i$i$i>>2]|0;
 $arrayidx2$i$i$i = ((($h)) + 8|0);
 $101 = HEAP32[$arrayidx2$i$i$i>>2]|0;
 $arrayidx3$i$i$i = ((($h)) + 12|0);
 $102 = HEAP32[$arrayidx3$i$i$i>>2]|0;
 $arrayidx4$i$i$i = ((($h)) + 16|0);
 $103 = HEAP32[$arrayidx4$i$i$i>>2]|0;
 $arrayidx5$i$i$i = ((($h)) + 20|0);
 $104 = HEAP32[$arrayidx5$i$i$i>>2]|0;
 $arrayidx6$i$i$i = ((($h)) + 24|0);
 $105 = HEAP32[$arrayidx6$i$i$i>>2]|0;
 $arrayidx7$i$i$i = ((($h)) + 28|0);
 $106 = HEAP32[$arrayidx7$i$i$i>>2]|0;
 $arrayidx8$i$i$i = ((($h)) + 32|0);
 $107 = HEAP32[$arrayidx8$i$i$i>>2]|0;
 $arrayidx9$i$i$i = ((($h)) + 36|0);
 $108 = HEAP32[$arrayidx9$i$i$i>>2]|0;
 HEAP32[$q$i>>2] = $99;
 $arrayidx11$i$i$i = ((($q$i)) + 4|0);
 HEAP32[$arrayidx11$i$i$i>>2] = $100;
 $arrayidx12$i$i$i = ((($q$i)) + 8|0);
 HEAP32[$arrayidx12$i$i$i>>2] = $101;
 $arrayidx13$i$i$i = ((($q$i)) + 12|0);
 HEAP32[$arrayidx13$i$i$i>>2] = $102;
 $arrayidx14$i$i$i = ((($q$i)) + 16|0);
 HEAP32[$arrayidx14$i$i$i>>2] = $103;
 $arrayidx15$i$i$i = ((($q$i)) + 20|0);
 HEAP32[$arrayidx15$i$i$i>>2] = $104;
 $arrayidx16$i$i$i = ((($q$i)) + 24|0);
 HEAP32[$arrayidx16$i$i$i>>2] = $105;
 $arrayidx17$i$i$i = ((($q$i)) + 28|0);
 HEAP32[$arrayidx17$i$i$i>>2] = $106;
 $arrayidx18$i$i$i = ((($q$i)) + 32|0);
 HEAP32[$arrayidx18$i$i$i>>2] = $107;
 $arrayidx19$i$i$i = ((($q$i)) + 36|0);
 HEAP32[$arrayidx19$i$i$i>>2] = $108;
 $arraydecay3$i$i = ((($q$i)) + 40|0);
 $109 = HEAP32[$arraydecay1$i>>2]|0;
 $110 = HEAP32[$arrayidx1$i4$i>>2]|0;
 $arrayidx2$i24$i$i = ((($h)) + 48|0);
 $111 = HEAP32[$arrayidx2$i24$i$i>>2]|0;
 $arrayidx3$i25$i$i = ((($h)) + 52|0);
 $112 = HEAP32[$arrayidx3$i25$i$i>>2]|0;
 $arrayidx4$i26$i$i = ((($h)) + 56|0);
 $113 = HEAP32[$arrayidx4$i26$i$i>>2]|0;
 $arrayidx5$i27$i$i = ((($h)) + 60|0);
 $114 = HEAP32[$arrayidx5$i27$i$i>>2]|0;
 $arrayidx6$i28$i$i = ((($h)) + 64|0);
 $115 = HEAP32[$arrayidx6$i28$i$i>>2]|0;
 $arrayidx7$i29$i$i = ((($h)) + 68|0);
 $116 = HEAP32[$arrayidx7$i29$i$i>>2]|0;
 $arrayidx8$i30$i$i = ((($h)) + 72|0);
 $117 = HEAP32[$arrayidx8$i30$i$i>>2]|0;
 $arrayidx9$i31$i$i = ((($h)) + 76|0);
 $118 = HEAP32[$arrayidx9$i31$i$i>>2]|0;
 HEAP32[$arraydecay3$i$i>>2] = $109;
 $arrayidx11$i32$i$i = ((($q$i)) + 44|0);
 HEAP32[$arrayidx11$i32$i$i>>2] = $110;
 $arrayidx12$i33$i$i = ((($q$i)) + 48|0);
 HEAP32[$arrayidx12$i33$i$i>>2] = $111;
 $arrayidx13$i34$i$i = ((($q$i)) + 52|0);
 HEAP32[$arrayidx13$i34$i$i>>2] = $112;
 $arrayidx14$i35$i$i = ((($q$i)) + 56|0);
 HEAP32[$arrayidx14$i35$i$i>>2] = $113;
 $arrayidx15$i36$i$i = ((($q$i)) + 60|0);
 HEAP32[$arrayidx15$i36$i$i>>2] = $114;
 $arrayidx16$i37$i$i = ((($q$i)) + 64|0);
 HEAP32[$arrayidx16$i37$i$i>>2] = $115;
 $arrayidx17$i38$i$i = ((($q$i)) + 68|0);
 HEAP32[$arrayidx17$i38$i$i>>2] = $116;
 $arrayidx18$i39$i$i = ((($q$i)) + 72|0);
 HEAP32[$arrayidx18$i39$i$i>>2] = $117;
 $arrayidx19$i40$i$i = ((($q$i)) + 76|0);
 HEAP32[$arrayidx19$i40$i$i>>2] = $118;
 $arraydecay6$i$i = ((($q$i)) + 80|0);
 $119 = HEAP32[$arraydecay2$i>>2]|0;
 $120 = HEAP32[$arrayidx1$i$i>>2]|0;
 $arrayidx2$i6$i$i = ((($h)) + 88|0);
 $121 = HEAP32[$arrayidx2$i6$i$i>>2]|0;
 $arrayidx3$i7$i$i = ((($h)) + 92|0);
 $122 = HEAP32[$arrayidx3$i7$i$i>>2]|0;
 $arrayidx4$i8$i$i = ((($h)) + 96|0);
 $123 = HEAP32[$arrayidx4$i8$i$i>>2]|0;
 $arrayidx5$i9$i$i = ((($h)) + 100|0);
 $124 = HEAP32[$arrayidx5$i9$i$i>>2]|0;
 $arrayidx6$i10$i$i = ((($h)) + 104|0);
 $125 = HEAP32[$arrayidx6$i10$i$i>>2]|0;
 $arrayidx7$i11$i$i = ((($h)) + 108|0);
 $126 = HEAP32[$arrayidx7$i11$i$i>>2]|0;
 $arrayidx8$i12$i$i = ((($h)) + 112|0);
 $127 = HEAP32[$arrayidx8$i12$i$i>>2]|0;
 $arrayidx9$i13$i$i = ((($h)) + 116|0);
 $128 = HEAP32[$arrayidx9$i13$i$i>>2]|0;
 HEAP32[$arraydecay6$i$i>>2] = $119;
 $arrayidx11$i14$i$i = ((($q$i)) + 84|0);
 HEAP32[$arrayidx11$i14$i$i>>2] = $120;
 $arrayidx12$i15$i$i = ((($q$i)) + 88|0);
 HEAP32[$arrayidx12$i15$i$i>>2] = $121;
 $arrayidx13$i16$i$i = ((($q$i)) + 92|0);
 HEAP32[$arrayidx13$i16$i$i>>2] = $122;
 $arrayidx14$i17$i$i = ((($q$i)) + 96|0);
 HEAP32[$arrayidx14$i17$i$i>>2] = $123;
 $arrayidx15$i18$i$i = ((($q$i)) + 100|0);
 HEAP32[$arrayidx15$i18$i$i>>2] = $124;
 $arrayidx16$i19$i$i = ((($q$i)) + 104|0);
 HEAP32[$arrayidx16$i19$i$i>>2] = $125;
 $arrayidx17$i20$i$i = ((($q$i)) + 108|0);
 HEAP32[$arrayidx17$i20$i$i>>2] = $126;
 $arrayidx18$i21$i$i = ((($q$i)) + 112|0);
 HEAP32[$arrayidx18$i21$i$i>>2] = $127;
 $arrayidx19$i22$i$i = ((($q$i)) + 116|0);
 HEAP32[$arrayidx19$i22$i$i>>2] = $128;
 _ge_p2_dbl($r,$q$i);
 _fe_mul($s,$r,$arraydecay3$i35);
 $arraydecay4$i44 = ((($s)) + 40|0);
 _fe_mul($arraydecay4$i44,$arraydecay6$i37,$arraydecay7$i38);
 $arraydecay9$i47 = ((($s)) + 80|0);
 _fe_mul($arraydecay9$i47,$arraydecay7$i38,$arraydecay3$i35);
 _ge_p2_dbl($r,$s);
 _fe_mul($s,$r,$arraydecay3$i35);
 _fe_mul($arraydecay4$i44,$arraydecay6$i37,$arraydecay7$i38);
 _fe_mul($arraydecay9$i47,$arraydecay7$i38,$arraydecay3$i35);
 _ge_p2_dbl($r,$s);
 _fe_mul($s,$r,$arraydecay3$i35);
 _fe_mul($arraydecay4$i44,$arraydecay6$i37,$arraydecay7$i38);
 _fe_mul($arraydecay9$i47,$arraydecay7$i38,$arraydecay3$i35);
 _ge_p2_dbl($r,$s);
 _fe_mul($h,$r,$arraydecay3$i35);
 _fe_mul($arraydecay1$i,$arraydecay6$i37,$arraydecay7$i38);
 _fe_mul($arraydecay2$i,$arraydecay7$i38,$arraydecay3$i35);
 _fe_mul($arraydecay15$i40,$r,$arraydecay6$i37);
 $i$370 = 0;
 while(1) {
  $div51 = $i$370 >>> 1;
  $arrayidx52 = (($e) + ($i$370)|0);
  $129 = HEAP8[$arrayidx52>>0]|0;
  _select_434($t,$div51,$129);
  _ge_madd($r,$h,$t);
  _fe_mul($h,$r,$arraydecay3$i35);
  _fe_mul($arraydecay1$i,$arraydecay6$i37,$arraydecay7$i38);
  _fe_mul($arraydecay2$i,$arraydecay7$i38,$arraydecay3$i35);
  _fe_mul($arraydecay15$i40,$r,$arraydecay6$i37);
  $add54 = (($i$370) + 2)|0;
  $cmp48 = ($add54>>>0)<(64);
  if ($cmp48) {
   $i$370 = $add54;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _select_434($t,$pos,$b) {
 $t = $t|0;
 $pos = $pos|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $and = 0, $and$i$i = 0, $and$i$i1107 = 0, $and$i$i1266 = 0, $and$i$i157 = 0, $and$i$i312 = 0, $and$i$i471 = 0, $and$i$i630 = 0, $and$i$i789 = 0, $and$i$i948 = 0, $and$i1001 = 0, $and$i1050 = 0, $and$i1160 = 0, $and$i1209 = 0, $and$i1319 = 0, $and$i1368 = 0, $and$i210 = 0, $and$i259 = 0, $and$i365 = 0;
 var $and$i414 = 0, $and$i524 = 0, $and$i573 = 0, $and$i59 = 0, $and$i683 = 0, $and$i732 = 0, $and$i842 = 0, $and$i891 = 0, $and29$i = 0, $and29$i$i = 0, $and29$i$i1108 = 0, $and29$i$i1267 = 0, $and29$i$i158 = 0, $and29$i$i313 = 0, $and29$i$i472 = 0, $and29$i$i631 = 0, $and29$i$i790 = 0, $and29$i$i949 = 0, $and29$i1002 = 0, $and29$i1051 = 0;
 var $and29$i1161 = 0, $and29$i1210 = 0, $and29$i1320 = 0, $and29$i1369 = 0, $and29$i211 = 0, $and29$i260 = 0, $and29$i366 = 0, $and29$i415 = 0, $and29$i525 = 0, $and29$i574 = 0, $and29$i60 = 0, $and29$i684 = 0, $and29$i733 = 0, $and29$i843 = 0, $and29$i892 = 0, $and30$i = 0, $and30$i$i = 0, $and30$i$i1109 = 0, $and30$i$i1268 = 0, $and30$i$i159 = 0;
 var $and30$i$i314 = 0, $and30$i$i473 = 0, $and30$i$i632 = 0, $and30$i$i791 = 0, $and30$i$i950 = 0, $and30$i1003 = 0, $and30$i1052 = 0, $and30$i1162 = 0, $and30$i1211 = 0, $and30$i1321 = 0, $and30$i1370 = 0, $and30$i212 = 0, $and30$i261 = 0, $and30$i367 = 0, $and30$i416 = 0, $and30$i526 = 0, $and30$i575 = 0, $and30$i61 = 0, $and30$i685 = 0, $and30$i734 = 0;
 var $and30$i844 = 0, $and30$i893 = 0, $and31$i = 0, $and31$i$i = 0, $and31$i$i1110 = 0, $and31$i$i1269 = 0, $and31$i$i160 = 0, $and31$i$i315 = 0, $and31$i$i474 = 0, $and31$i$i633 = 0, $and31$i$i792 = 0, $and31$i$i951 = 0, $and31$i1004 = 0, $and31$i1053 = 0, $and31$i1163 = 0, $and31$i1212 = 0, $and31$i1322 = 0, $and31$i1371 = 0, $and31$i213 = 0, $and31$i262 = 0;
 var $and31$i368 = 0, $and31$i417 = 0, $and31$i527 = 0, $and31$i576 = 0, $and31$i62 = 0, $and31$i686 = 0, $and31$i735 = 0, $and31$i845 = 0, $and31$i894 = 0, $and32$i = 0, $and32$i$i = 0, $and32$i$i1111 = 0, $and32$i$i1270 = 0, $and32$i$i161 = 0, $and32$i$i316 = 0, $and32$i$i475 = 0, $and32$i$i634 = 0, $and32$i$i793 = 0, $and32$i$i952 = 0, $and32$i1005 = 0;
 var $and32$i1054 = 0, $and32$i1164 = 0, $and32$i1213 = 0, $and32$i1323 = 0, $and32$i1372 = 0, $and32$i214 = 0, $and32$i263 = 0, $and32$i369 = 0, $and32$i418 = 0, $and32$i528 = 0, $and32$i577 = 0, $and32$i63 = 0, $and32$i687 = 0, $and32$i736 = 0, $and32$i846 = 0, $and32$i895 = 0, $and33$i = 0, $and33$i$i = 0, $and33$i$i1112 = 0, $and33$i$i1271 = 0;
 var $and33$i$i162 = 0, $and33$i$i317 = 0, $and33$i$i476 = 0, $and33$i$i635 = 0, $and33$i$i794 = 0, $and33$i$i953 = 0, $and33$i1006 = 0, $and33$i1055 = 0, $and33$i1165 = 0, $and33$i1214 = 0, $and33$i1324 = 0, $and33$i1373 = 0, $and33$i215 = 0, $and33$i264 = 0, $and33$i370 = 0, $and33$i419 = 0, $and33$i529 = 0, $and33$i578 = 0, $and33$i64 = 0, $and33$i688 = 0;
 var $and33$i737 = 0, $and33$i847 = 0, $and33$i896 = 0, $and34$i = 0, $and34$i$i = 0, $and34$i$i1113 = 0, $and34$i$i1272 = 0, $and34$i$i163 = 0, $and34$i$i318 = 0, $and34$i$i477 = 0, $and34$i$i636 = 0, $and34$i$i795 = 0, $and34$i$i954 = 0, $and34$i1007 = 0, $and34$i1056 = 0, $and34$i1166 = 0, $and34$i1215 = 0, $and34$i1325 = 0, $and34$i1374 = 0, $and34$i216 = 0;
 var $and34$i265 = 0, $and34$i371 = 0, $and34$i420 = 0, $and34$i530 = 0, $and34$i579 = 0, $and34$i65 = 0, $and34$i689 = 0, $and34$i738 = 0, $and34$i848 = 0, $and34$i897 = 0, $and35$i = 0, $and35$i$i = 0, $and35$i$i1114 = 0, $and35$i$i1273 = 0, $and35$i$i164 = 0, $and35$i$i319 = 0, $and35$i$i478 = 0, $and35$i$i637 = 0, $and35$i$i796 = 0, $and35$i$i955 = 0;
 var $and35$i1008 = 0, $and35$i1057 = 0, $and35$i1167 = 0, $and35$i1216 = 0, $and35$i1326 = 0, $and35$i1375 = 0, $and35$i217 = 0, $and35$i266 = 0, $and35$i372 = 0, $and35$i421 = 0, $and35$i531 = 0, $and35$i580 = 0, $and35$i66 = 0, $and35$i690 = 0, $and35$i739 = 0, $and35$i849 = 0, $and35$i898 = 0, $and36$i = 0, $and36$i$i = 0, $and36$i$i1115 = 0;
 var $and36$i$i1274 = 0, $and36$i$i165 = 0, $and36$i$i320 = 0, $and36$i$i479 = 0, $and36$i$i638 = 0, $and36$i$i797 = 0, $and36$i$i956 = 0, $and36$i1009 = 0, $and36$i1058 = 0, $and36$i1168 = 0, $and36$i1217 = 0, $and36$i1327 = 0, $and36$i1376 = 0, $and36$i218 = 0, $and36$i267 = 0, $and36$i373 = 0, $and36$i422 = 0, $and36$i532 = 0, $and36$i581 = 0, $and36$i67 = 0;
 var $and36$i691 = 0, $and36$i740 = 0, $and36$i850 = 0, $and36$i899 = 0, $and37$i = 0, $and37$i$i = 0, $and37$i$i1116 = 0, $and37$i$i1275 = 0, $and37$i$i166 = 0, $and37$i$i321 = 0, $and37$i$i480 = 0, $and37$i$i639 = 0, $and37$i$i798 = 0, $and37$i$i957 = 0, $and37$i1010 = 0, $and37$i1059 = 0, $and37$i1169 = 0, $and37$i1218 = 0, $and37$i1328 = 0, $and37$i1377 = 0;
 var $and37$i219 = 0, $and37$i268 = 0, $and37$i374 = 0, $and37$i423 = 0, $and37$i533 = 0, $and37$i582 = 0, $and37$i68 = 0, $and37$i692 = 0, $and37$i741 = 0, $and37$i851 = 0, $and37$i900 = 0, $arraydecay1$i = 0, $arraydecay2$i1076 = 0, $arraydecay2$i1235 = 0, $arraydecay2$i126 = 0, $arraydecay2$i281 = 0, $arraydecay2$i440 = 0, $arraydecay2$i599 = 0, $arraydecay2$i758 = 0, $arraydecay2$i917 = 0;
 var $arraydecay5$i1128 = 0, $arraydecay5$i1287 = 0, $arraydecay5$i178 = 0, $arraydecay5$i333 = 0, $arraydecay5$i492 = 0, $arraydecay5$i651 = 0, $arraydecay5$i810 = 0, $arraydecay5$i969 = 0, $arraydecay7$i1288 = 0, $arraydecay9$i1130 = 0, $arraydecay9$i1289 = 0, $arraydecay9$i180 = 0, $arraydecay9$i335 = 0, $arraydecay9$i494 = 0, $arraydecay9$i653 = 0, $arraydecay9$i812 = 0, $arraydecay9$i971 = 0, $arrayidx1$i$i1394 = 0, $arrayidx1$i1339 = 0, $arrayidx1$i3$i = 0;
 var $arrayidx11$i$i1087 = 0, $arrayidx11$i$i1246 = 0, $arrayidx11$i$i137 = 0, $arrayidx11$i$i292 = 0, $arrayidx11$i$i451 = 0, $arrayidx11$i$i610 = 0, $arrayidx11$i$i769 = 0, $arrayidx11$i$i928 = 0, $arrayidx11$i1030 = 0, $arrayidx11$i1140 = 0, $arrayidx11$i1189 = 0, $arrayidx11$i1299 = 0, $arrayidx11$i1348 = 0, $arrayidx11$i190 = 0, $arrayidx11$i239 = 0, $arrayidx11$i345 = 0, $arrayidx11$i394 = 0, $arrayidx11$i504 = 0, $arrayidx11$i553 = 0, $arrayidx11$i663 = 0;
 var $arrayidx11$i712 = 0, $arrayidx11$i822 = 0, $arrayidx11$i871 = 0, $arrayidx11$i981 = 0, $arrayidx12$i$i1088 = 0, $arrayidx12$i$i1247 = 0, $arrayidx12$i$i138 = 0, $arrayidx12$i$i293 = 0, $arrayidx12$i$i452 = 0, $arrayidx12$i$i611 = 0, $arrayidx12$i$i770 = 0, $arrayidx12$i$i929 = 0, $arrayidx12$i1031 = 0, $arrayidx12$i1141 = 0, $arrayidx12$i1190 = 0, $arrayidx12$i1300 = 0, $arrayidx12$i1349 = 0, $arrayidx12$i191 = 0, $arrayidx12$i240 = 0, $arrayidx12$i346 = 0;
 var $arrayidx12$i395 = 0, $arrayidx12$i505 = 0, $arrayidx12$i554 = 0, $arrayidx12$i664 = 0, $arrayidx12$i713 = 0, $arrayidx12$i823 = 0, $arrayidx12$i872 = 0, $arrayidx12$i982 = 0, $arrayidx13$i$i1089 = 0, $arrayidx13$i$i1248 = 0, $arrayidx13$i$i139 = 0, $arrayidx13$i$i294 = 0, $arrayidx13$i$i453 = 0, $arrayidx13$i$i612 = 0, $arrayidx13$i$i771 = 0, $arrayidx13$i$i930 = 0, $arrayidx13$i1032 = 0, $arrayidx13$i1142 = 0, $arrayidx13$i1191 = 0, $arrayidx13$i1301 = 0;
 var $arrayidx13$i1350 = 0, $arrayidx13$i192 = 0, $arrayidx13$i241 = 0, $arrayidx13$i347 = 0, $arrayidx13$i396 = 0, $arrayidx13$i506 = 0, $arrayidx13$i555 = 0, $arrayidx13$i665 = 0, $arrayidx13$i714 = 0, $arrayidx13$i824 = 0, $arrayidx13$i873 = 0, $arrayidx13$i983 = 0, $arrayidx14$i$i1090 = 0, $arrayidx14$i$i1249 = 0, $arrayidx14$i$i140 = 0, $arrayidx14$i$i295 = 0, $arrayidx14$i$i454 = 0, $arrayidx14$i$i613 = 0, $arrayidx14$i$i772 = 0, $arrayidx14$i$i931 = 0;
 var $arrayidx14$i1033 = 0, $arrayidx14$i1143 = 0, $arrayidx14$i1192 = 0, $arrayidx14$i1302 = 0, $arrayidx14$i1351 = 0, $arrayidx14$i193 = 0, $arrayidx14$i242 = 0, $arrayidx14$i348 = 0, $arrayidx14$i397 = 0, $arrayidx14$i507 = 0, $arrayidx14$i556 = 0, $arrayidx14$i666 = 0, $arrayidx14$i715 = 0, $arrayidx14$i825 = 0, $arrayidx14$i874 = 0, $arrayidx14$i984 = 0, $arrayidx15$i$i1091 = 0, $arrayidx15$i$i1250 = 0, $arrayidx15$i$i141 = 0, $arrayidx15$i$i296 = 0;
 var $arrayidx15$i$i455 = 0, $arrayidx15$i$i614 = 0, $arrayidx15$i$i773 = 0, $arrayidx15$i$i932 = 0, $arrayidx15$i1034 = 0, $arrayidx15$i1144 = 0, $arrayidx15$i1193 = 0, $arrayidx15$i1303 = 0, $arrayidx15$i1352 = 0, $arrayidx15$i194 = 0, $arrayidx15$i243 = 0, $arrayidx15$i349 = 0, $arrayidx15$i398 = 0, $arrayidx15$i508 = 0, $arrayidx15$i557 = 0, $arrayidx15$i667 = 0, $arrayidx15$i716 = 0, $arrayidx15$i826 = 0, $arrayidx15$i875 = 0, $arrayidx15$i985 = 0;
 var $arrayidx16$i$i1092 = 0, $arrayidx16$i$i1251 = 0, $arrayidx16$i$i142 = 0, $arrayidx16$i$i297 = 0, $arrayidx16$i$i456 = 0, $arrayidx16$i$i615 = 0, $arrayidx16$i$i774 = 0, $arrayidx16$i$i933 = 0, $arrayidx16$i1035 = 0, $arrayidx16$i1145 = 0, $arrayidx16$i1194 = 0, $arrayidx16$i1304 = 0, $arrayidx16$i1353 = 0, $arrayidx16$i195 = 0, $arrayidx16$i244 = 0, $arrayidx16$i350 = 0, $arrayidx16$i399 = 0, $arrayidx16$i509 = 0, $arrayidx16$i558 = 0, $arrayidx16$i668 = 0;
 var $arrayidx16$i717 = 0, $arrayidx16$i827 = 0, $arrayidx16$i876 = 0, $arrayidx16$i986 = 0, $arrayidx17$i$i1093 = 0, $arrayidx17$i$i1252 = 0, $arrayidx17$i$i143 = 0, $arrayidx17$i$i298 = 0, $arrayidx17$i$i457 = 0, $arrayidx17$i$i616 = 0, $arrayidx17$i$i775 = 0, $arrayidx17$i$i934 = 0, $arrayidx17$i1036 = 0, $arrayidx17$i1146 = 0, $arrayidx17$i1195 = 0, $arrayidx17$i1305 = 0, $arrayidx17$i1354 = 0, $arrayidx17$i196 = 0, $arrayidx17$i245 = 0, $arrayidx17$i351 = 0;
 var $arrayidx17$i400 = 0, $arrayidx17$i510 = 0, $arrayidx17$i559 = 0, $arrayidx17$i669 = 0, $arrayidx17$i718 = 0, $arrayidx17$i828 = 0, $arrayidx17$i877 = 0, $arrayidx17$i987 = 0, $arrayidx18$i$i1094 = 0, $arrayidx18$i$i1253 = 0, $arrayidx18$i$i144 = 0, $arrayidx18$i$i299 = 0, $arrayidx18$i$i458 = 0, $arrayidx18$i$i617 = 0, $arrayidx18$i$i776 = 0, $arrayidx18$i$i935 = 0, $arrayidx18$i1037 = 0, $arrayidx18$i1147 = 0, $arrayidx18$i1196 = 0, $arrayidx18$i1306 = 0;
 var $arrayidx18$i1355 = 0, $arrayidx18$i197 = 0, $arrayidx18$i246 = 0, $arrayidx18$i352 = 0, $arrayidx18$i401 = 0, $arrayidx18$i511 = 0, $arrayidx18$i560 = 0, $arrayidx18$i670 = 0, $arrayidx18$i719 = 0, $arrayidx18$i829 = 0, $arrayidx18$i878 = 0, $arrayidx18$i988 = 0, $arrayidx19$i$i1095 = 0, $arrayidx19$i$i1254 = 0, $arrayidx19$i$i145 = 0, $arrayidx19$i$i300 = 0, $arrayidx19$i$i459 = 0, $arrayidx19$i$i618 = 0, $arrayidx19$i$i777 = 0, $arrayidx19$i$i936 = 0;
 var $arrayidx19$i1038 = 0, $arrayidx19$i1148 = 0, $arrayidx19$i1197 = 0, $arrayidx19$i1307 = 0, $arrayidx19$i1356 = 0, $arrayidx19$i198 = 0, $arrayidx19$i247 = 0, $arrayidx19$i353 = 0, $arrayidx19$i402 = 0, $arrayidx19$i512 = 0, $arrayidx19$i561 = 0, $arrayidx19$i671 = 0, $arrayidx19$i720 = 0, $arrayidx19$i830 = 0, $arrayidx19$i879 = 0, $arrayidx19$i989 = 0, $arrayidx2$i$i1238 = 0, $arrayidx2$i1291 = 0, $arrayidx2$i1340 = 0, $arrayidx3$i$i1239 = 0;
 var $arrayidx3$i1292 = 0, $arrayidx3$i1341 = 0, $arrayidx4$i$i1240 = 0, $arrayidx4$i1293 = 0, $arrayidx4$i1342 = 0, $arrayidx5$i$i1241 = 0, $arrayidx5$i1294 = 0, $arrayidx5$i1343 = 0, $arrayidx6$i$i1242 = 0, $arrayidx6$i1295 = 0, $arrayidx6$i1344 = 0, $arrayidx7$i$i1243 = 0, $arrayidx7$i1296 = 0, $arrayidx7$i1345 = 0, $arrayidx8$i$i1244 = 0, $arrayidx8$i1297 = 0, $arrayidx8$i1346 = 0, $arrayidx9$i$i1245 = 0, $arrayidx9$i1298 = 0, $arrayidx9$i1347 = 0;
 var $conv = 0, $conv1 = 0, $conv3$i = 0, $conv3$i1071 = 0, $conv3$i1230 = 0, $conv3$i1389 = 0, $conv3$i435 = 0, $conv3$i594 = 0, $conv3$i753 = 0, $conv3$i912 = 0, $shl = 0, $sub = 0, $sub$i$i1106 = 0, $sub$i$i1265 = 0, $sub$i$i156 = 0, $sub$i$i311 = 0, $sub$i$i470 = 0, $sub$i$i629 = 0, $sub$i$i788 = 0, $sub$i$i947 = 0;
 var $sub$i1072 = 0, $sub$i1231 = 0, $sub$i1390 = 0, $sub$i279 = 0, $sub$i436 = 0, $sub$i595 = 0, $sub$i754 = 0, $sub$i88 = 0, $sub$i913 = 0, $sub10$i = 0, $sub11$i = 0, $sub12$i = 0, $sub13$i = 0, $sub14$i = 0, $sub15$i = 0, $sub16$i = 0, $sub17$i = 0, $sub18$i = 0, $sub3 = 0, $xor$i$i = 0;
 var $xor$i$i1096 = 0, $xor$i$i1255 = 0, $xor$i$i146 = 0, $xor$i$i301 = 0, $xor$i$i460 = 0, $xor$i$i619 = 0, $xor$i$i778 = 0, $xor$i$i937 = 0, $xor$i1039 = 0, $xor$i1149 = 0, $xor$i1198 = 0, $xor$i1308 = 0, $xor$i1357 = 0, $xor$i199 = 0, $xor$i248 = 0, $xor$i354 = 0, $xor$i403 = 0, $xor$i48 = 0, $xor$i513 = 0, $xor$i562 = 0;
 var $xor$i672 = 0, $xor$i721 = 0, $xor$i831 = 0, $xor$i880 = 0, $xor$i990 = 0, $xor20$i = 0, $xor20$i$i = 0, $xor20$i$i1097 = 0, $xor20$i$i147 = 0, $xor20$i$i302 = 0, $xor20$i$i461 = 0, $xor20$i$i620 = 0, $xor20$i$i779 = 0, $xor20$i$i938 = 0, $xor20$i1040 = 0, $xor20$i1150 = 0, $xor20$i1199 = 0, $xor20$i1358 = 0, $xor20$i200 = 0, $xor20$i249 = 0;
 var $xor20$i355 = 0, $xor20$i404 = 0, $xor20$i49 = 0, $xor20$i514 = 0, $xor20$i563 = 0, $xor20$i673 = 0, $xor20$i722 = 0, $xor20$i832 = 0, $xor20$i881 = 0, $xor20$i991 = 0, $xor21$i = 0, $xor21$i$i = 0, $xor21$i$i1098 = 0, $xor21$i$i148 = 0, $xor21$i$i303 = 0, $xor21$i$i462 = 0, $xor21$i$i621 = 0, $xor21$i$i780 = 0, $xor21$i$i939 = 0, $xor21$i1041 = 0;
 var $xor21$i1151 = 0, $xor21$i1200 = 0, $xor21$i1359 = 0, $xor21$i201 = 0, $xor21$i250 = 0, $xor21$i356 = 0, $xor21$i405 = 0, $xor21$i50 = 0, $xor21$i515 = 0, $xor21$i564 = 0, $xor21$i674 = 0, $xor21$i723 = 0, $xor21$i833 = 0, $xor21$i882 = 0, $xor21$i992 = 0, $xor22$i = 0, $xor22$i$i = 0, $xor22$i$i1099 = 0, $xor22$i$i149 = 0, $xor22$i$i304 = 0;
 var $xor22$i$i463 = 0, $xor22$i$i622 = 0, $xor22$i$i781 = 0, $xor22$i$i940 = 0, $xor22$i1042 = 0, $xor22$i1152 = 0, $xor22$i1201 = 0, $xor22$i1360 = 0, $xor22$i202 = 0, $xor22$i251 = 0, $xor22$i357 = 0, $xor22$i406 = 0, $xor22$i51 = 0, $xor22$i516 = 0, $xor22$i565 = 0, $xor22$i675 = 0, $xor22$i724 = 0, $xor22$i834 = 0, $xor22$i883 = 0, $xor22$i993 = 0;
 var $xor23$i = 0, $xor23$i$i = 0, $xor23$i$i1100 = 0, $xor23$i$i150 = 0, $xor23$i$i305 = 0, $xor23$i$i464 = 0, $xor23$i$i623 = 0, $xor23$i$i782 = 0, $xor23$i$i941 = 0, $xor23$i1043 = 0, $xor23$i1153 = 0, $xor23$i1202 = 0, $xor23$i1361 = 0, $xor23$i203 = 0, $xor23$i252 = 0, $xor23$i358 = 0, $xor23$i407 = 0, $xor23$i517 = 0, $xor23$i52 = 0, $xor23$i566 = 0;
 var $xor23$i676 = 0, $xor23$i725 = 0, $xor23$i835 = 0, $xor23$i884 = 0, $xor23$i994 = 0, $xor24$i = 0, $xor24$i$i = 0, $xor24$i$i1101 = 0, $xor24$i$i151 = 0, $xor24$i$i306 = 0, $xor24$i$i465 = 0, $xor24$i$i624 = 0, $xor24$i$i783 = 0, $xor24$i$i942 = 0, $xor24$i1044 = 0, $xor24$i1154 = 0, $xor24$i1203 = 0, $xor24$i1362 = 0, $xor24$i204 = 0, $xor24$i253 = 0;
 var $xor24$i359 = 0, $xor24$i408 = 0, $xor24$i518 = 0, $xor24$i53 = 0, $xor24$i567 = 0, $xor24$i677 = 0, $xor24$i726 = 0, $xor24$i836 = 0, $xor24$i885 = 0, $xor24$i995 = 0, $xor25$i = 0, $xor25$i$i = 0, $xor25$i$i1102 = 0, $xor25$i$i152 = 0, $xor25$i$i307 = 0, $xor25$i$i466 = 0, $xor25$i$i625 = 0, $xor25$i$i784 = 0, $xor25$i$i943 = 0, $xor25$i1045 = 0;
 var $xor25$i1155 = 0, $xor25$i1204 = 0, $xor25$i1363 = 0, $xor25$i205 = 0, $xor25$i254 = 0, $xor25$i360 = 0, $xor25$i409 = 0, $xor25$i519 = 0, $xor25$i54 = 0, $xor25$i568 = 0, $xor25$i678 = 0, $xor25$i727 = 0, $xor25$i837 = 0, $xor25$i886 = 0, $xor25$i996 = 0, $xor26$i = 0, $xor26$i$i = 0, $xor26$i$i1103 = 0, $xor26$i$i153 = 0, $xor26$i$i308 = 0;
 var $xor26$i$i467 = 0, $xor26$i$i626 = 0, $xor26$i$i785 = 0, $xor26$i$i944 = 0, $xor26$i1046 = 0, $xor26$i1156 = 0, $xor26$i1205 = 0, $xor26$i1364 = 0, $xor26$i206 = 0, $xor26$i255 = 0, $xor26$i361 = 0, $xor26$i410 = 0, $xor26$i520 = 0, $xor26$i55 = 0, $xor26$i569 = 0, $xor26$i679 = 0, $xor26$i728 = 0, $xor26$i838 = 0, $xor26$i887 = 0, $xor26$i997 = 0;
 var $xor27$i = 0, $xor27$i$i = 0, $xor27$i$i1104 = 0, $xor27$i$i154 = 0, $xor27$i$i309 = 0, $xor27$i$i468 = 0, $xor27$i$i627 = 0, $xor27$i$i786 = 0, $xor27$i$i945 = 0, $xor27$i1047 = 0, $xor27$i1157 = 0, $xor27$i1206 = 0, $xor27$i1365 = 0, $xor27$i207 = 0, $xor27$i256 = 0, $xor27$i362 = 0, $xor27$i411 = 0, $xor27$i521 = 0, $xor27$i56 = 0, $xor27$i570 = 0;
 var $xor27$i680 = 0, $xor27$i729 = 0, $xor27$i839 = 0, $xor27$i888 = 0, $xor27$i998 = 0, $xor28$i = 0, $xor28$i$i = 0, $xor28$i$i1105 = 0, $xor28$i$i155 = 0, $xor28$i$i310 = 0, $xor28$i$i469 = 0, $xor28$i$i628 = 0, $xor28$i$i787 = 0, $xor28$i$i946 = 0, $xor28$i1048 = 0, $xor28$i1158 = 0, $xor28$i1207 = 0, $xor28$i1366 = 0, $xor28$i208 = 0, $xor28$i257 = 0;
 var $xor28$i363 = 0, $xor28$i412 = 0, $xor28$i522 = 0, $xor28$i57 = 0, $xor28$i571 = 0, $xor28$i681 = 0, $xor28$i730 = 0, $xor28$i840 = 0, $xor28$i889 = 0, $xor28$i999 = 0, $xor38$i = 0, $xor38$i$i = 0, $xor38$i$i1117 = 0, $xor38$i$i1276 = 0, $xor38$i$i167 = 0, $xor38$i$i322 = 0, $xor38$i$i481 = 0, $xor38$i$i640 = 0, $xor38$i$i799 = 0, $xor38$i$i958 = 0;
 var $xor38$i1011 = 0, $xor38$i1060 = 0, $xor38$i1170 = 0, $xor38$i1219 = 0, $xor38$i1329 = 0, $xor38$i1378 = 0, $xor38$i220 = 0, $xor38$i269 = 0, $xor38$i375 = 0, $xor38$i424 = 0, $xor38$i534 = 0, $xor38$i583 = 0, $xor38$i69 = 0, $xor38$i693 = 0, $xor38$i742 = 0, $xor38$i852 = 0, $xor38$i901 = 0, $xor4$i1388 = 0, $xor40$i = 0, $xor40$i$i = 0;
 var $xor40$i$i1118 = 0, $xor40$i$i168 = 0, $xor40$i$i323 = 0, $xor40$i$i482 = 0, $xor40$i$i641 = 0, $xor40$i$i800 = 0, $xor40$i$i959 = 0, $xor40$i1012 = 0, $xor40$i1061 = 0, $xor40$i1171 = 0, $xor40$i1220 = 0, $xor40$i1379 = 0, $xor40$i221 = 0, $xor40$i270 = 0, $xor40$i376 = 0, $xor40$i425 = 0, $xor40$i535 = 0, $xor40$i584 = 0, $xor40$i694 = 0, $xor40$i70 = 0;
 var $xor40$i743 = 0, $xor40$i853 = 0, $xor40$i902 = 0, $xor42$i = 0, $xor42$i$i = 0, $xor42$i$i1119 = 0, $xor42$i$i169 = 0, $xor42$i$i324 = 0, $xor42$i$i483 = 0, $xor42$i$i642 = 0, $xor42$i$i801 = 0, $xor42$i$i960 = 0, $xor42$i1013 = 0, $xor42$i1062 = 0, $xor42$i1172 = 0, $xor42$i1221 = 0, $xor42$i1380 = 0, $xor42$i222 = 0, $xor42$i271 = 0, $xor42$i377 = 0;
 var $xor42$i426 = 0, $xor42$i536 = 0, $xor42$i585 = 0, $xor42$i695 = 0, $xor42$i71 = 0, $xor42$i744 = 0, $xor42$i854 = 0, $xor42$i903 = 0, $xor44$i = 0, $xor44$i$i = 0, $xor44$i$i1120 = 0, $xor44$i$i170 = 0, $xor44$i$i325 = 0, $xor44$i$i484 = 0, $xor44$i$i643 = 0, $xor44$i$i802 = 0, $xor44$i$i961 = 0, $xor44$i1014 = 0, $xor44$i1063 = 0, $xor44$i1173 = 0;
 var $xor44$i1222 = 0, $xor44$i1381 = 0, $xor44$i223 = 0, $xor44$i272 = 0, $xor44$i378 = 0, $xor44$i427 = 0, $xor44$i537 = 0, $xor44$i586 = 0, $xor44$i696 = 0, $xor44$i72 = 0, $xor44$i745 = 0, $xor44$i855 = 0, $xor44$i904 = 0, $xor46$i = 0, $xor46$i$i = 0, $xor46$i$i1121 = 0, $xor46$i$i171 = 0, $xor46$i$i326 = 0, $xor46$i$i485 = 0, $xor46$i$i644 = 0;
 var $xor46$i$i803 = 0, $xor46$i$i962 = 0, $xor46$i1015 = 0, $xor46$i1064 = 0, $xor46$i1174 = 0, $xor46$i1223 = 0, $xor46$i1382 = 0, $xor46$i224 = 0, $xor46$i273 = 0, $xor46$i379 = 0, $xor46$i428 = 0, $xor46$i538 = 0, $xor46$i587 = 0, $xor46$i697 = 0, $xor46$i73 = 0, $xor46$i746 = 0, $xor46$i856 = 0, $xor46$i905 = 0, $xor48$i = 0, $xor48$i$i = 0;
 var $xor48$i$i1122 = 0, $xor48$i$i172 = 0, $xor48$i$i327 = 0, $xor48$i$i486 = 0, $xor48$i$i645 = 0, $xor48$i$i804 = 0, $xor48$i$i963 = 0, $xor48$i1016 = 0, $xor48$i1065 = 0, $xor48$i1175 = 0, $xor48$i1224 = 0, $xor48$i1383 = 0, $xor48$i225 = 0, $xor48$i274 = 0, $xor48$i380 = 0, $xor48$i429 = 0, $xor48$i539 = 0, $xor48$i588 = 0, $xor48$i698 = 0, $xor48$i74 = 0;
 var $xor48$i747 = 0, $xor48$i857 = 0, $xor48$i906 = 0, $xor50$i = 0, $xor50$i$i = 0, $xor50$i$i1123 = 0, $xor50$i$i173 = 0, $xor50$i$i328 = 0, $xor50$i$i487 = 0, $xor50$i$i646 = 0, $xor50$i$i805 = 0, $xor50$i$i964 = 0, $xor50$i1017 = 0, $xor50$i1066 = 0, $xor50$i1176 = 0, $xor50$i1225 = 0, $xor50$i1384 = 0, $xor50$i226 = 0, $xor50$i275 = 0, $xor50$i381 = 0;
 var $xor50$i430 = 0, $xor50$i540 = 0, $xor50$i589 = 0, $xor50$i699 = 0, $xor50$i748 = 0, $xor50$i75 = 0, $xor50$i858 = 0, $xor50$i907 = 0, $xor52$i = 0, $xor52$i$i = 0, $xor52$i$i1124 = 0, $xor52$i$i174 = 0, $xor52$i$i329 = 0, $xor52$i$i488 = 0, $xor52$i$i647 = 0, $xor52$i$i806 = 0, $xor52$i$i965 = 0, $xor52$i1018 = 0, $xor52$i1067 = 0, $xor52$i1177 = 0;
 var $xor52$i1226 = 0, $xor52$i1385 = 0, $xor52$i227 = 0, $xor52$i276 = 0, $xor52$i382 = 0, $xor52$i431 = 0, $xor52$i541 = 0, $xor52$i590 = 0, $xor52$i700 = 0, $xor52$i749 = 0, $xor52$i76 = 0, $xor52$i859 = 0, $xor52$i908 = 0, $xor54$i = 0, $xor54$i$i = 0, $xor54$i$i1125 = 0, $xor54$i$i175 = 0, $xor54$i$i330 = 0, $xor54$i$i489 = 0, $xor54$i$i648 = 0;
 var $xor54$i$i807 = 0, $xor54$i$i966 = 0, $xor54$i1019 = 0, $xor54$i1068 = 0, $xor54$i1178 = 0, $xor54$i1227 = 0, $xor54$i1386 = 0, $xor54$i228 = 0, $xor54$i277 = 0, $xor54$i383 = 0, $xor54$i432 = 0, $xor54$i542 = 0, $xor54$i591 = 0, $xor54$i701 = 0, $xor54$i750 = 0, $xor54$i77 = 0, $xor54$i860 = 0, $xor54$i909 = 0, $xor56$i = 0, $xor56$i$i = 0;
 var $xor56$i$i1126 = 0, $xor56$i$i176 = 0, $xor56$i$i331 = 0, $xor56$i$i490 = 0, $xor56$i$i649 = 0, $xor56$i$i808 = 0, $xor56$i$i967 = 0, $xor56$i1020 = 0, $xor56$i1069 = 0, $xor56$i1179 = 0, $xor56$i1228 = 0, $xor56$i1387 = 0, $xor56$i229 = 0, $xor56$i278 = 0, $xor56$i384 = 0, $xor56$i433 = 0, $xor56$i543 = 0, $xor56$i592 = 0, $xor56$i702 = 0, $xor56$i751 = 0;
 var $xor56$i78 = 0, $xor56$i861 = 0, $xor56$i910 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($b&255) >>> 7;
 $conv = $b << 24 >> 24;
 $conv1 = $0&255;
 $sub = (0 - ($conv1))|0;
 $and = $sub & $conv;
 $shl = $and << 1;
 $sub3 = (($conv) - ($shl))|0;
 $arrayidx1$i$i1394 = ((($t)) + 4|0);
 $arraydecay1$i = ((($t)) + 40|0);
 $arrayidx1$i3$i = ((($t)) + 44|0);
 $1 = ((($t)) + 60|0);
 dest=$1; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $xor4$i1388 = $sub3 & 255;
 $conv3$i1389 = $xor4$i1388 ^ 1;
 $sub$i1390 = (($conv3$i1389) + -1)|0;
 $arraydecay2$i1235 = (320 + (($pos*960)|0)|0);
 $arrayidx2$i$i1238 = ((($t)) + 8|0);
 $arrayidx3$i$i1239 = ((($t)) + 12|0);
 $arrayidx4$i$i1240 = ((($t)) + 16|0);
 $arrayidx5$i$i1241 = ((($t)) + 20|0);
 $arrayidx6$i$i1242 = ((($t)) + 24|0);
 $arrayidx7$i$i1243 = ((($t)) + 28|0);
 $arrayidx8$i$i1244 = ((($t)) + 32|0);
 $arrayidx9$i$i1245 = ((($t)) + 36|0);
 $2 = HEAP32[$arraydecay2$i1235>>2]|0;
 $arrayidx11$i$i1246 = (((320 + (($pos*960)|0)|0)) + 4|0);
 $3 = HEAP32[$arrayidx11$i$i1246>>2]|0;
 $arrayidx12$i$i1247 = (((320 + (($pos*960)|0)|0)) + 8|0);
 $4 = HEAP32[$arrayidx12$i$i1247>>2]|0;
 $arrayidx13$i$i1248 = (((320 + (($pos*960)|0)|0)) + 12|0);
 $5 = HEAP32[$arrayidx13$i$i1248>>2]|0;
 $arrayidx14$i$i1249 = (((320 + (($pos*960)|0)|0)) + 16|0);
 $6 = HEAP32[$arrayidx14$i$i1249>>2]|0;
 $arrayidx15$i$i1250 = (((320 + (($pos*960)|0)|0)) + 20|0);
 $7 = HEAP32[$arrayidx15$i$i1250>>2]|0;
 $arrayidx16$i$i1251 = (((320 + (($pos*960)|0)|0)) + 24|0);
 $8 = HEAP32[$arrayidx16$i$i1251>>2]|0;
 $arrayidx17$i$i1252 = (((320 + (($pos*960)|0)|0)) + 28|0);
 $9 = HEAP32[$arrayidx17$i$i1252>>2]|0;
 $arrayidx18$i$i1253 = (((320 + (($pos*960)|0)|0)) + 32|0);
 $10 = HEAP32[$arrayidx18$i$i1253>>2]|0;
 $arrayidx19$i$i1254 = (((320 + (($pos*960)|0)|0)) + 36|0);
 $11 = HEAP32[$arrayidx19$i$i1254>>2]|0;
 $xor$i$i1255 = $2 ^ 1;
 $sub$i$i1265 = $sub$i1390 >> 31;
 $and$i$i1266 = $xor$i$i1255 & $sub$i$i1265;
 $and29$i$i1267 = $3 & $sub$i$i1265;
 $and30$i$i1268 = $4 & $sub$i$i1265;
 $and31$i$i1269 = $5 & $sub$i$i1265;
 $and32$i$i1270 = $6 & $sub$i$i1265;
 $and33$i$i1271 = $7 & $sub$i$i1265;
 $and34$i$i1272 = $8 & $sub$i$i1265;
 $and35$i$i1273 = $9 & $sub$i$i1265;
 $and36$i$i1274 = $10 & $sub$i$i1265;
 $and37$i$i1275 = $11 & $sub$i$i1265;
 $xor38$i$i1276 = $and$i$i1266 ^ 1;
 HEAP32[$t>>2] = $xor38$i$i1276;
 HEAP32[$arrayidx1$i$i1394>>2] = $and29$i$i1267;
 HEAP32[$arrayidx2$i$i1238>>2] = $and30$i$i1268;
 HEAP32[$arrayidx3$i$i1239>>2] = $and31$i$i1269;
 HEAP32[$arrayidx4$i$i1240>>2] = $and32$i$i1270;
 HEAP32[$arrayidx5$i$i1241>>2] = $and33$i$i1271;
 HEAP32[$arrayidx6$i$i1242>>2] = $and34$i$i1272;
 HEAP32[$arrayidx7$i$i1243>>2] = $and35$i$i1273;
 HEAP32[$arrayidx8$i$i1244>>2] = $and36$i$i1274;
 HEAP32[$arrayidx9$i$i1245>>2] = $and37$i$i1275;
 $arraydecay5$i1287 = (((320 + (($pos*960)|0)|0)) + 40|0);
 $arrayidx2$i1291 = ((($t)) + 48|0);
 $arrayidx3$i1292 = ((($t)) + 52|0);
 $arrayidx4$i1293 = ((($t)) + 56|0);
 $arrayidx5$i1294 = ((($t)) + 60|0);
 $arrayidx6$i1295 = ((($t)) + 64|0);
 $arrayidx7$i1296 = ((($t)) + 68|0);
 $arrayidx8$i1297 = ((($t)) + 72|0);
 $arrayidx9$i1298 = ((($t)) + 76|0);
 $12 = HEAP32[$arraydecay5$i1287>>2]|0;
 $arrayidx11$i1299 = (((320 + (($pos*960)|0)|0)) + 44|0);
 $13 = HEAP32[$arrayidx11$i1299>>2]|0;
 $arrayidx12$i1300 = (((320 + (($pos*960)|0)|0)) + 48|0);
 $14 = HEAP32[$arrayidx12$i1300>>2]|0;
 $arrayidx13$i1301 = (((320 + (($pos*960)|0)|0)) + 52|0);
 $15 = HEAP32[$arrayidx13$i1301>>2]|0;
 $arrayidx14$i1302 = (((320 + (($pos*960)|0)|0)) + 56|0);
 $16 = HEAP32[$arrayidx14$i1302>>2]|0;
 $arrayidx15$i1303 = (((320 + (($pos*960)|0)|0)) + 60|0);
 $17 = HEAP32[$arrayidx15$i1303>>2]|0;
 $arrayidx16$i1304 = (((320 + (($pos*960)|0)|0)) + 64|0);
 $18 = HEAP32[$arrayidx16$i1304>>2]|0;
 $arrayidx17$i1305 = (((320 + (($pos*960)|0)|0)) + 68|0);
 $19 = HEAP32[$arrayidx17$i1305>>2]|0;
 $arrayidx18$i1306 = (((320 + (($pos*960)|0)|0)) + 72|0);
 $20 = HEAP32[$arrayidx18$i1306>>2]|0;
 $arrayidx19$i1307 = (((320 + (($pos*960)|0)|0)) + 76|0);
 $21 = HEAP32[$arrayidx19$i1307>>2]|0;
 $xor$i1308 = $12 ^ 1;
 $and$i1319 = $xor$i1308 & $sub$i$i1265;
 $and29$i1320 = $13 & $sub$i$i1265;
 $and30$i1321 = $14 & $sub$i$i1265;
 $and31$i1322 = $15 & $sub$i$i1265;
 $and32$i1323 = $16 & $sub$i$i1265;
 $and33$i1324 = $17 & $sub$i$i1265;
 $and34$i1325 = $18 & $sub$i$i1265;
 $and35$i1326 = $19 & $sub$i$i1265;
 $and36$i1327 = $20 & $sub$i$i1265;
 $and37$i1328 = $21 & $sub$i$i1265;
 $xor38$i1329 = $and$i1319 ^ 1;
 HEAP32[$arraydecay1$i>>2] = $xor38$i1329;
 HEAP32[$arrayidx1$i3$i>>2] = $and29$i1320;
 HEAP32[$arrayidx2$i1291>>2] = $and30$i1321;
 HEAP32[$arrayidx3$i1292>>2] = $and31$i1322;
 HEAP32[$arrayidx4$i1293>>2] = $and32$i1323;
 HEAP32[$arrayidx5$i1294>>2] = $and33$i1324;
 HEAP32[$arrayidx6$i1295>>2] = $and34$i1325;
 HEAP32[$arrayidx7$i1296>>2] = $and35$i1326;
 HEAP32[$arrayidx8$i1297>>2] = $and36$i1327;
 HEAP32[$arrayidx9$i1298>>2] = $and37$i1328;
 $arraydecay7$i1288 = ((($t)) + 80|0);
 $arraydecay9$i1289 = (((320 + (($pos*960)|0)|0)) + 80|0);
 $22 = HEAP32[$arraydecay7$i1288>>2]|0;
 $arrayidx1$i1339 = ((($t)) + 84|0);
 $23 = HEAP32[$arrayidx1$i1339>>2]|0;
 $arrayidx2$i1340 = ((($t)) + 88|0);
 $24 = HEAP32[$arrayidx2$i1340>>2]|0;
 $arrayidx3$i1341 = ((($t)) + 92|0);
 $25 = HEAP32[$arrayidx3$i1341>>2]|0;
 $arrayidx4$i1342 = ((($t)) + 96|0);
 $26 = HEAP32[$arrayidx4$i1342>>2]|0;
 $arrayidx5$i1343 = ((($t)) + 100|0);
 $27 = HEAP32[$arrayidx5$i1343>>2]|0;
 $arrayidx6$i1344 = ((($t)) + 104|0);
 $28 = HEAP32[$arrayidx6$i1344>>2]|0;
 $arrayidx7$i1345 = ((($t)) + 108|0);
 $29 = HEAP32[$arrayidx7$i1345>>2]|0;
 $arrayidx8$i1346 = ((($t)) + 112|0);
 $30 = HEAP32[$arrayidx8$i1346>>2]|0;
 $arrayidx9$i1347 = ((($t)) + 116|0);
 $31 = HEAP32[$arrayidx9$i1347>>2]|0;
 $32 = HEAP32[$arraydecay9$i1289>>2]|0;
 $arrayidx11$i1348 = (((320 + (($pos*960)|0)|0)) + 84|0);
 $33 = HEAP32[$arrayidx11$i1348>>2]|0;
 $arrayidx12$i1349 = (((320 + (($pos*960)|0)|0)) + 88|0);
 $34 = HEAP32[$arrayidx12$i1349>>2]|0;
 $arrayidx13$i1350 = (((320 + (($pos*960)|0)|0)) + 92|0);
 $35 = HEAP32[$arrayidx13$i1350>>2]|0;
 $arrayidx14$i1351 = (((320 + (($pos*960)|0)|0)) + 96|0);
 $36 = HEAP32[$arrayidx14$i1351>>2]|0;
 $arrayidx15$i1352 = (((320 + (($pos*960)|0)|0)) + 100|0);
 $37 = HEAP32[$arrayidx15$i1352>>2]|0;
 $arrayidx16$i1353 = (((320 + (($pos*960)|0)|0)) + 104|0);
 $38 = HEAP32[$arrayidx16$i1353>>2]|0;
 $arrayidx17$i1354 = (((320 + (($pos*960)|0)|0)) + 108|0);
 $39 = HEAP32[$arrayidx17$i1354>>2]|0;
 $arrayidx18$i1355 = (((320 + (($pos*960)|0)|0)) + 112|0);
 $40 = HEAP32[$arrayidx18$i1355>>2]|0;
 $arrayidx19$i1356 = (((320 + (($pos*960)|0)|0)) + 116|0);
 $41 = HEAP32[$arrayidx19$i1356>>2]|0;
 $xor$i1357 = $32 ^ $22;
 $xor20$i1358 = $33 ^ $23;
 $xor21$i1359 = $34 ^ $24;
 $xor22$i1360 = $35 ^ $25;
 $xor23$i1361 = $36 ^ $26;
 $xor24$i1362 = $37 ^ $27;
 $xor25$i1363 = $38 ^ $28;
 $xor26$i1364 = $39 ^ $29;
 $xor27$i1365 = $40 ^ $30;
 $xor28$i1366 = $41 ^ $31;
 $and$i1368 = $xor$i1357 & $sub$i$i1265;
 $and29$i1369 = $xor20$i1358 & $sub$i$i1265;
 $and30$i1370 = $xor21$i1359 & $sub$i$i1265;
 $and31$i1371 = $xor22$i1360 & $sub$i$i1265;
 $and32$i1372 = $xor23$i1361 & $sub$i$i1265;
 $and33$i1373 = $xor24$i1362 & $sub$i$i1265;
 $and34$i1374 = $xor25$i1363 & $sub$i$i1265;
 $and35$i1375 = $xor26$i1364 & $sub$i$i1265;
 $and36$i1376 = $xor27$i1365 & $sub$i$i1265;
 $and37$i1377 = $xor28$i1366 & $sub$i$i1265;
 $xor38$i1378 = $and$i1368 ^ $22;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i1378;
 $xor40$i1379 = $and29$i1369 ^ $23;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i1379;
 $xor42$i1380 = $and30$i1370 ^ $24;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i1380;
 $xor44$i1381 = $and31$i1371 ^ $25;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i1381;
 $xor46$i1382 = $and32$i1372 ^ $26;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i1382;
 $xor48$i1383 = $and33$i1373 ^ $27;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i1383;
 $xor50$i1384 = $and34$i1374 ^ $28;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i1384;
 $xor52$i1385 = $and35$i1375 ^ $29;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i1385;
 $xor54$i1386 = $and36$i1376 ^ $30;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i1386;
 $xor56$i1387 = $and37$i1377 ^ $31;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i1387;
 $conv3$i1230 = $xor4$i1388 ^ 2;
 $sub$i1231 = (($conv3$i1230) + -1)|0;
 $arraydecay2$i1076 = (((320 + (($pos*960)|0)|0)) + 120|0);
 $42 = HEAP32[$arraydecay2$i1076>>2]|0;
 $arrayidx11$i$i1087 = (((320 + (($pos*960)|0)|0)) + 124|0);
 $43 = HEAP32[$arrayidx11$i$i1087>>2]|0;
 $arrayidx12$i$i1088 = (((320 + (($pos*960)|0)|0)) + 128|0);
 $44 = HEAP32[$arrayidx12$i$i1088>>2]|0;
 $arrayidx13$i$i1089 = (((320 + (($pos*960)|0)|0)) + 132|0);
 $45 = HEAP32[$arrayidx13$i$i1089>>2]|0;
 $arrayidx14$i$i1090 = (((320 + (($pos*960)|0)|0)) + 136|0);
 $46 = HEAP32[$arrayidx14$i$i1090>>2]|0;
 $arrayidx15$i$i1091 = (((320 + (($pos*960)|0)|0)) + 140|0);
 $47 = HEAP32[$arrayidx15$i$i1091>>2]|0;
 $arrayidx16$i$i1092 = (((320 + (($pos*960)|0)|0)) + 144|0);
 $48 = HEAP32[$arrayidx16$i$i1092>>2]|0;
 $arrayidx17$i$i1093 = (((320 + (($pos*960)|0)|0)) + 148|0);
 $49 = HEAP32[$arrayidx17$i$i1093>>2]|0;
 $arrayidx18$i$i1094 = (((320 + (($pos*960)|0)|0)) + 152|0);
 $50 = HEAP32[$arrayidx18$i$i1094>>2]|0;
 $arrayidx19$i$i1095 = (((320 + (($pos*960)|0)|0)) + 156|0);
 $51 = HEAP32[$arrayidx19$i$i1095>>2]|0;
 $xor$i$i1096 = $42 ^ $xor38$i$i1276;
 $xor20$i$i1097 = $43 ^ $and29$i$i1267;
 $xor21$i$i1098 = $44 ^ $and30$i$i1268;
 $xor22$i$i1099 = $45 ^ $and31$i$i1269;
 $xor23$i$i1100 = $46 ^ $and32$i$i1270;
 $xor24$i$i1101 = $47 ^ $and33$i$i1271;
 $xor25$i$i1102 = $48 ^ $and34$i$i1272;
 $xor26$i$i1103 = $49 ^ $and35$i$i1273;
 $xor27$i$i1104 = $50 ^ $and36$i$i1274;
 $xor28$i$i1105 = $51 ^ $and37$i$i1275;
 $sub$i$i1106 = $sub$i1231 >> 31;
 $and$i$i1107 = $xor$i$i1096 & $sub$i$i1106;
 $and29$i$i1108 = $xor20$i$i1097 & $sub$i$i1106;
 $and30$i$i1109 = $xor21$i$i1098 & $sub$i$i1106;
 $and31$i$i1110 = $xor22$i$i1099 & $sub$i$i1106;
 $and32$i$i1111 = $xor23$i$i1100 & $sub$i$i1106;
 $and33$i$i1112 = $xor24$i$i1101 & $sub$i$i1106;
 $and34$i$i1113 = $xor25$i$i1102 & $sub$i$i1106;
 $and35$i$i1114 = $xor26$i$i1103 & $sub$i$i1106;
 $and36$i$i1115 = $xor27$i$i1104 & $sub$i$i1106;
 $and37$i$i1116 = $xor28$i$i1105 & $sub$i$i1106;
 $xor38$i$i1117 = $and$i$i1107 ^ $xor38$i$i1276;
 HEAP32[$t>>2] = $xor38$i$i1117;
 $xor40$i$i1118 = $and29$i$i1108 ^ $and29$i$i1267;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i1118;
 $xor42$i$i1119 = $and30$i$i1109 ^ $and30$i$i1268;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i1119;
 $xor44$i$i1120 = $and31$i$i1110 ^ $and31$i$i1269;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i1120;
 $xor46$i$i1121 = $and32$i$i1111 ^ $and32$i$i1270;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i1121;
 $xor48$i$i1122 = $and33$i$i1112 ^ $and33$i$i1271;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i1122;
 $xor50$i$i1123 = $and34$i$i1113 ^ $and34$i$i1272;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i1123;
 $xor52$i$i1124 = $and35$i$i1114 ^ $and35$i$i1273;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i1124;
 $xor54$i$i1125 = $and36$i$i1115 ^ $and36$i$i1274;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i1125;
 $xor56$i$i1126 = $and37$i$i1116 ^ $and37$i$i1275;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i1126;
 $arraydecay5$i1128 = (((320 + (($pos*960)|0)|0)) + 160|0);
 $52 = HEAP32[$arraydecay5$i1128>>2]|0;
 $arrayidx11$i1140 = (((320 + (($pos*960)|0)|0)) + 164|0);
 $53 = HEAP32[$arrayidx11$i1140>>2]|0;
 $arrayidx12$i1141 = (((320 + (($pos*960)|0)|0)) + 168|0);
 $54 = HEAP32[$arrayidx12$i1141>>2]|0;
 $arrayidx13$i1142 = (((320 + (($pos*960)|0)|0)) + 172|0);
 $55 = HEAP32[$arrayidx13$i1142>>2]|0;
 $arrayidx14$i1143 = (((320 + (($pos*960)|0)|0)) + 176|0);
 $56 = HEAP32[$arrayidx14$i1143>>2]|0;
 $arrayidx15$i1144 = (((320 + (($pos*960)|0)|0)) + 180|0);
 $57 = HEAP32[$arrayidx15$i1144>>2]|0;
 $arrayidx16$i1145 = (((320 + (($pos*960)|0)|0)) + 184|0);
 $58 = HEAP32[$arrayidx16$i1145>>2]|0;
 $arrayidx17$i1146 = (((320 + (($pos*960)|0)|0)) + 188|0);
 $59 = HEAP32[$arrayidx17$i1146>>2]|0;
 $arrayidx18$i1147 = (((320 + (($pos*960)|0)|0)) + 192|0);
 $60 = HEAP32[$arrayidx18$i1147>>2]|0;
 $arrayidx19$i1148 = (((320 + (($pos*960)|0)|0)) + 196|0);
 $61 = HEAP32[$arrayidx19$i1148>>2]|0;
 $xor$i1149 = $52 ^ $xor38$i1329;
 $xor20$i1150 = $53 ^ $and29$i1320;
 $xor21$i1151 = $54 ^ $and30$i1321;
 $xor22$i1152 = $55 ^ $and31$i1322;
 $xor23$i1153 = $56 ^ $and32$i1323;
 $xor24$i1154 = $57 ^ $and33$i1324;
 $xor25$i1155 = $58 ^ $and34$i1325;
 $xor26$i1156 = $59 ^ $and35$i1326;
 $xor27$i1157 = $60 ^ $and36$i1327;
 $xor28$i1158 = $61 ^ $and37$i1328;
 $and$i1160 = $xor$i1149 & $sub$i$i1106;
 $and29$i1161 = $xor20$i1150 & $sub$i$i1106;
 $and30$i1162 = $xor21$i1151 & $sub$i$i1106;
 $and31$i1163 = $xor22$i1152 & $sub$i$i1106;
 $and32$i1164 = $xor23$i1153 & $sub$i$i1106;
 $and33$i1165 = $xor24$i1154 & $sub$i$i1106;
 $and34$i1166 = $xor25$i1155 & $sub$i$i1106;
 $and35$i1167 = $xor26$i1156 & $sub$i$i1106;
 $and36$i1168 = $xor27$i1157 & $sub$i$i1106;
 $and37$i1169 = $xor28$i1158 & $sub$i$i1106;
 $xor38$i1170 = $and$i1160 ^ $xor38$i1329;
 HEAP32[$arraydecay1$i>>2] = $xor38$i1170;
 $xor40$i1171 = $and29$i1161 ^ $and29$i1320;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i1171;
 $xor42$i1172 = $and30$i1162 ^ $and30$i1321;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i1172;
 $xor44$i1173 = $and31$i1163 ^ $and31$i1322;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i1173;
 $xor46$i1174 = $and32$i1164 ^ $and32$i1323;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i1174;
 $xor48$i1175 = $and33$i1165 ^ $and33$i1324;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i1175;
 $xor50$i1176 = $and34$i1166 ^ $and34$i1325;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i1176;
 $xor52$i1177 = $and35$i1167 ^ $and35$i1326;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i1177;
 $xor54$i1178 = $and36$i1168 ^ $and36$i1327;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i1178;
 $xor56$i1179 = $and37$i1169 ^ $and37$i1328;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i1179;
 $arraydecay9$i1130 = (((320 + (($pos*960)|0)|0)) + 200|0);
 $62 = HEAP32[$arraydecay9$i1130>>2]|0;
 $arrayidx11$i1189 = (((320 + (($pos*960)|0)|0)) + 204|0);
 $63 = HEAP32[$arrayidx11$i1189>>2]|0;
 $arrayidx12$i1190 = (((320 + (($pos*960)|0)|0)) + 208|0);
 $64 = HEAP32[$arrayidx12$i1190>>2]|0;
 $arrayidx13$i1191 = (((320 + (($pos*960)|0)|0)) + 212|0);
 $65 = HEAP32[$arrayidx13$i1191>>2]|0;
 $arrayidx14$i1192 = (((320 + (($pos*960)|0)|0)) + 216|0);
 $66 = HEAP32[$arrayidx14$i1192>>2]|0;
 $arrayidx15$i1193 = (((320 + (($pos*960)|0)|0)) + 220|0);
 $67 = HEAP32[$arrayidx15$i1193>>2]|0;
 $arrayidx16$i1194 = (((320 + (($pos*960)|0)|0)) + 224|0);
 $68 = HEAP32[$arrayidx16$i1194>>2]|0;
 $arrayidx17$i1195 = (((320 + (($pos*960)|0)|0)) + 228|0);
 $69 = HEAP32[$arrayidx17$i1195>>2]|0;
 $arrayidx18$i1196 = (((320 + (($pos*960)|0)|0)) + 232|0);
 $70 = HEAP32[$arrayidx18$i1196>>2]|0;
 $arrayidx19$i1197 = (((320 + (($pos*960)|0)|0)) + 236|0);
 $71 = HEAP32[$arrayidx19$i1197>>2]|0;
 $xor$i1198 = $62 ^ $xor38$i1378;
 $xor20$i1199 = $63 ^ $xor40$i1379;
 $xor21$i1200 = $64 ^ $xor42$i1380;
 $xor22$i1201 = $65 ^ $xor44$i1381;
 $xor23$i1202 = $66 ^ $xor46$i1382;
 $xor24$i1203 = $67 ^ $xor48$i1383;
 $xor25$i1204 = $68 ^ $xor50$i1384;
 $xor26$i1205 = $69 ^ $xor52$i1385;
 $xor27$i1206 = $70 ^ $xor54$i1386;
 $xor28$i1207 = $71 ^ $xor56$i1387;
 $and$i1209 = $xor$i1198 & $sub$i$i1106;
 $and29$i1210 = $xor20$i1199 & $sub$i$i1106;
 $and30$i1211 = $xor21$i1200 & $sub$i$i1106;
 $and31$i1212 = $xor22$i1201 & $sub$i$i1106;
 $and32$i1213 = $xor23$i1202 & $sub$i$i1106;
 $and33$i1214 = $xor24$i1203 & $sub$i$i1106;
 $and34$i1215 = $xor25$i1204 & $sub$i$i1106;
 $and35$i1216 = $xor26$i1205 & $sub$i$i1106;
 $and36$i1217 = $xor27$i1206 & $sub$i$i1106;
 $and37$i1218 = $xor28$i1207 & $sub$i$i1106;
 $xor38$i1219 = $and$i1209 ^ $xor38$i1378;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i1219;
 $xor40$i1220 = $and29$i1210 ^ $xor40$i1379;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i1220;
 $xor42$i1221 = $and30$i1211 ^ $xor42$i1380;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i1221;
 $xor44$i1222 = $and31$i1212 ^ $xor44$i1381;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i1222;
 $xor46$i1223 = $and32$i1213 ^ $xor46$i1382;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i1223;
 $xor48$i1224 = $and33$i1214 ^ $xor48$i1383;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i1224;
 $xor50$i1225 = $and34$i1215 ^ $xor50$i1384;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i1225;
 $xor52$i1226 = $and35$i1216 ^ $xor52$i1385;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i1226;
 $xor54$i1227 = $and36$i1217 ^ $xor54$i1386;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i1227;
 $xor56$i1228 = $and37$i1218 ^ $xor56$i1387;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i1228;
 $conv3$i1071 = $xor4$i1388 ^ 3;
 $sub$i1072 = (($conv3$i1071) + -1)|0;
 $arraydecay2$i917 = (((320 + (($pos*960)|0)|0)) + 240|0);
 $72 = HEAP32[$arraydecay2$i917>>2]|0;
 $arrayidx11$i$i928 = (((320 + (($pos*960)|0)|0)) + 244|0);
 $73 = HEAP32[$arrayidx11$i$i928>>2]|0;
 $arrayidx12$i$i929 = (((320 + (($pos*960)|0)|0)) + 248|0);
 $74 = HEAP32[$arrayidx12$i$i929>>2]|0;
 $arrayidx13$i$i930 = (((320 + (($pos*960)|0)|0)) + 252|0);
 $75 = HEAP32[$arrayidx13$i$i930>>2]|0;
 $arrayidx14$i$i931 = (((320 + (($pos*960)|0)|0)) + 256|0);
 $76 = HEAP32[$arrayidx14$i$i931>>2]|0;
 $arrayidx15$i$i932 = (((320 + (($pos*960)|0)|0)) + 260|0);
 $77 = HEAP32[$arrayidx15$i$i932>>2]|0;
 $arrayidx16$i$i933 = (((320 + (($pos*960)|0)|0)) + 264|0);
 $78 = HEAP32[$arrayidx16$i$i933>>2]|0;
 $arrayidx17$i$i934 = (((320 + (($pos*960)|0)|0)) + 268|0);
 $79 = HEAP32[$arrayidx17$i$i934>>2]|0;
 $arrayidx18$i$i935 = (((320 + (($pos*960)|0)|0)) + 272|0);
 $80 = HEAP32[$arrayidx18$i$i935>>2]|0;
 $arrayidx19$i$i936 = (((320 + (($pos*960)|0)|0)) + 276|0);
 $81 = HEAP32[$arrayidx19$i$i936>>2]|0;
 $xor$i$i937 = $72 ^ $xor38$i$i1117;
 $xor20$i$i938 = $73 ^ $xor40$i$i1118;
 $xor21$i$i939 = $74 ^ $xor42$i$i1119;
 $xor22$i$i940 = $75 ^ $xor44$i$i1120;
 $xor23$i$i941 = $76 ^ $xor46$i$i1121;
 $xor24$i$i942 = $77 ^ $xor48$i$i1122;
 $xor25$i$i943 = $78 ^ $xor50$i$i1123;
 $xor26$i$i944 = $79 ^ $xor52$i$i1124;
 $xor27$i$i945 = $80 ^ $xor54$i$i1125;
 $xor28$i$i946 = $81 ^ $xor56$i$i1126;
 $sub$i$i947 = $sub$i1072 >> 31;
 $and$i$i948 = $xor$i$i937 & $sub$i$i947;
 $and29$i$i949 = $xor20$i$i938 & $sub$i$i947;
 $and30$i$i950 = $xor21$i$i939 & $sub$i$i947;
 $and31$i$i951 = $xor22$i$i940 & $sub$i$i947;
 $and32$i$i952 = $xor23$i$i941 & $sub$i$i947;
 $and33$i$i953 = $xor24$i$i942 & $sub$i$i947;
 $and34$i$i954 = $xor25$i$i943 & $sub$i$i947;
 $and35$i$i955 = $xor26$i$i944 & $sub$i$i947;
 $and36$i$i956 = $xor27$i$i945 & $sub$i$i947;
 $and37$i$i957 = $xor28$i$i946 & $sub$i$i947;
 $xor38$i$i958 = $and$i$i948 ^ $xor38$i$i1117;
 HEAP32[$t>>2] = $xor38$i$i958;
 $xor40$i$i959 = $and29$i$i949 ^ $xor40$i$i1118;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i959;
 $xor42$i$i960 = $and30$i$i950 ^ $xor42$i$i1119;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i960;
 $xor44$i$i961 = $and31$i$i951 ^ $xor44$i$i1120;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i961;
 $xor46$i$i962 = $and32$i$i952 ^ $xor46$i$i1121;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i962;
 $xor48$i$i963 = $and33$i$i953 ^ $xor48$i$i1122;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i963;
 $xor50$i$i964 = $and34$i$i954 ^ $xor50$i$i1123;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i964;
 $xor52$i$i965 = $and35$i$i955 ^ $xor52$i$i1124;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i965;
 $xor54$i$i966 = $and36$i$i956 ^ $xor54$i$i1125;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i966;
 $xor56$i$i967 = $and37$i$i957 ^ $xor56$i$i1126;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i967;
 $arraydecay5$i969 = (((320 + (($pos*960)|0)|0)) + 280|0);
 $82 = HEAP32[$arraydecay5$i969>>2]|0;
 $arrayidx11$i981 = (((320 + (($pos*960)|0)|0)) + 284|0);
 $83 = HEAP32[$arrayidx11$i981>>2]|0;
 $arrayidx12$i982 = (((320 + (($pos*960)|0)|0)) + 288|0);
 $84 = HEAP32[$arrayidx12$i982>>2]|0;
 $arrayidx13$i983 = (((320 + (($pos*960)|0)|0)) + 292|0);
 $85 = HEAP32[$arrayidx13$i983>>2]|0;
 $arrayidx14$i984 = (((320 + (($pos*960)|0)|0)) + 296|0);
 $86 = HEAP32[$arrayidx14$i984>>2]|0;
 $arrayidx15$i985 = (((320 + (($pos*960)|0)|0)) + 300|0);
 $87 = HEAP32[$arrayidx15$i985>>2]|0;
 $arrayidx16$i986 = (((320 + (($pos*960)|0)|0)) + 304|0);
 $88 = HEAP32[$arrayidx16$i986>>2]|0;
 $arrayidx17$i987 = (((320 + (($pos*960)|0)|0)) + 308|0);
 $89 = HEAP32[$arrayidx17$i987>>2]|0;
 $arrayidx18$i988 = (((320 + (($pos*960)|0)|0)) + 312|0);
 $90 = HEAP32[$arrayidx18$i988>>2]|0;
 $arrayidx19$i989 = (((320 + (($pos*960)|0)|0)) + 316|0);
 $91 = HEAP32[$arrayidx19$i989>>2]|0;
 $xor$i990 = $82 ^ $xor38$i1170;
 $xor20$i991 = $83 ^ $xor40$i1171;
 $xor21$i992 = $84 ^ $xor42$i1172;
 $xor22$i993 = $85 ^ $xor44$i1173;
 $xor23$i994 = $86 ^ $xor46$i1174;
 $xor24$i995 = $87 ^ $xor48$i1175;
 $xor25$i996 = $88 ^ $xor50$i1176;
 $xor26$i997 = $89 ^ $xor52$i1177;
 $xor27$i998 = $90 ^ $xor54$i1178;
 $xor28$i999 = $91 ^ $xor56$i1179;
 $and$i1001 = $xor$i990 & $sub$i$i947;
 $and29$i1002 = $xor20$i991 & $sub$i$i947;
 $and30$i1003 = $xor21$i992 & $sub$i$i947;
 $and31$i1004 = $xor22$i993 & $sub$i$i947;
 $and32$i1005 = $xor23$i994 & $sub$i$i947;
 $and33$i1006 = $xor24$i995 & $sub$i$i947;
 $and34$i1007 = $xor25$i996 & $sub$i$i947;
 $and35$i1008 = $xor26$i997 & $sub$i$i947;
 $and36$i1009 = $xor27$i998 & $sub$i$i947;
 $and37$i1010 = $xor28$i999 & $sub$i$i947;
 $xor38$i1011 = $and$i1001 ^ $xor38$i1170;
 HEAP32[$arraydecay1$i>>2] = $xor38$i1011;
 $xor40$i1012 = $and29$i1002 ^ $xor40$i1171;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i1012;
 $xor42$i1013 = $and30$i1003 ^ $xor42$i1172;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i1013;
 $xor44$i1014 = $and31$i1004 ^ $xor44$i1173;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i1014;
 $xor46$i1015 = $and32$i1005 ^ $xor46$i1174;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i1015;
 $xor48$i1016 = $and33$i1006 ^ $xor48$i1175;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i1016;
 $xor50$i1017 = $and34$i1007 ^ $xor50$i1176;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i1017;
 $xor52$i1018 = $and35$i1008 ^ $xor52$i1177;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i1018;
 $xor54$i1019 = $and36$i1009 ^ $xor54$i1178;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i1019;
 $xor56$i1020 = $and37$i1010 ^ $xor56$i1179;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i1020;
 $arraydecay9$i971 = (((320 + (($pos*960)|0)|0)) + 320|0);
 $92 = HEAP32[$arraydecay9$i971>>2]|0;
 $arrayidx11$i1030 = (((320 + (($pos*960)|0)|0)) + 324|0);
 $93 = HEAP32[$arrayidx11$i1030>>2]|0;
 $arrayidx12$i1031 = (((320 + (($pos*960)|0)|0)) + 328|0);
 $94 = HEAP32[$arrayidx12$i1031>>2]|0;
 $arrayidx13$i1032 = (((320 + (($pos*960)|0)|0)) + 332|0);
 $95 = HEAP32[$arrayidx13$i1032>>2]|0;
 $arrayidx14$i1033 = (((320 + (($pos*960)|0)|0)) + 336|0);
 $96 = HEAP32[$arrayidx14$i1033>>2]|0;
 $arrayidx15$i1034 = (((320 + (($pos*960)|0)|0)) + 340|0);
 $97 = HEAP32[$arrayidx15$i1034>>2]|0;
 $arrayidx16$i1035 = (((320 + (($pos*960)|0)|0)) + 344|0);
 $98 = HEAP32[$arrayidx16$i1035>>2]|0;
 $arrayidx17$i1036 = (((320 + (($pos*960)|0)|0)) + 348|0);
 $99 = HEAP32[$arrayidx17$i1036>>2]|0;
 $arrayidx18$i1037 = (((320 + (($pos*960)|0)|0)) + 352|0);
 $100 = HEAP32[$arrayidx18$i1037>>2]|0;
 $arrayidx19$i1038 = (((320 + (($pos*960)|0)|0)) + 356|0);
 $101 = HEAP32[$arrayidx19$i1038>>2]|0;
 $xor$i1039 = $92 ^ $xor38$i1219;
 $xor20$i1040 = $93 ^ $xor40$i1220;
 $xor21$i1041 = $94 ^ $xor42$i1221;
 $xor22$i1042 = $95 ^ $xor44$i1222;
 $xor23$i1043 = $96 ^ $xor46$i1223;
 $xor24$i1044 = $97 ^ $xor48$i1224;
 $xor25$i1045 = $98 ^ $xor50$i1225;
 $xor26$i1046 = $99 ^ $xor52$i1226;
 $xor27$i1047 = $100 ^ $xor54$i1227;
 $xor28$i1048 = $101 ^ $xor56$i1228;
 $and$i1050 = $xor$i1039 & $sub$i$i947;
 $and29$i1051 = $xor20$i1040 & $sub$i$i947;
 $and30$i1052 = $xor21$i1041 & $sub$i$i947;
 $and31$i1053 = $xor22$i1042 & $sub$i$i947;
 $and32$i1054 = $xor23$i1043 & $sub$i$i947;
 $and33$i1055 = $xor24$i1044 & $sub$i$i947;
 $and34$i1056 = $xor25$i1045 & $sub$i$i947;
 $and35$i1057 = $xor26$i1046 & $sub$i$i947;
 $and36$i1058 = $xor27$i1047 & $sub$i$i947;
 $and37$i1059 = $xor28$i1048 & $sub$i$i947;
 $xor38$i1060 = $and$i1050 ^ $xor38$i1219;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i1060;
 $xor40$i1061 = $and29$i1051 ^ $xor40$i1220;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i1061;
 $xor42$i1062 = $and30$i1052 ^ $xor42$i1221;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i1062;
 $xor44$i1063 = $and31$i1053 ^ $xor44$i1222;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i1063;
 $xor46$i1064 = $and32$i1054 ^ $xor46$i1223;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i1064;
 $xor48$i1065 = $and33$i1055 ^ $xor48$i1224;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i1065;
 $xor50$i1066 = $and34$i1056 ^ $xor50$i1225;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i1066;
 $xor52$i1067 = $and35$i1057 ^ $xor52$i1226;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i1067;
 $xor54$i1068 = $and36$i1058 ^ $xor54$i1227;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i1068;
 $xor56$i1069 = $and37$i1059 ^ $xor56$i1228;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i1069;
 $conv3$i912 = $xor4$i1388 ^ 4;
 $sub$i913 = (($conv3$i912) + -1)|0;
 $arraydecay2$i758 = (((320 + (($pos*960)|0)|0)) + 360|0);
 $102 = HEAP32[$arraydecay2$i758>>2]|0;
 $arrayidx11$i$i769 = (((320 + (($pos*960)|0)|0)) + 364|0);
 $103 = HEAP32[$arrayidx11$i$i769>>2]|0;
 $arrayidx12$i$i770 = (((320 + (($pos*960)|0)|0)) + 368|0);
 $104 = HEAP32[$arrayidx12$i$i770>>2]|0;
 $arrayidx13$i$i771 = (((320 + (($pos*960)|0)|0)) + 372|0);
 $105 = HEAP32[$arrayidx13$i$i771>>2]|0;
 $arrayidx14$i$i772 = (((320 + (($pos*960)|0)|0)) + 376|0);
 $106 = HEAP32[$arrayidx14$i$i772>>2]|0;
 $arrayidx15$i$i773 = (((320 + (($pos*960)|0)|0)) + 380|0);
 $107 = HEAP32[$arrayidx15$i$i773>>2]|0;
 $arrayidx16$i$i774 = (((320 + (($pos*960)|0)|0)) + 384|0);
 $108 = HEAP32[$arrayidx16$i$i774>>2]|0;
 $arrayidx17$i$i775 = (((320 + (($pos*960)|0)|0)) + 388|0);
 $109 = HEAP32[$arrayidx17$i$i775>>2]|0;
 $arrayidx18$i$i776 = (((320 + (($pos*960)|0)|0)) + 392|0);
 $110 = HEAP32[$arrayidx18$i$i776>>2]|0;
 $arrayidx19$i$i777 = (((320 + (($pos*960)|0)|0)) + 396|0);
 $111 = HEAP32[$arrayidx19$i$i777>>2]|0;
 $xor$i$i778 = $102 ^ $xor38$i$i958;
 $xor20$i$i779 = $103 ^ $xor40$i$i959;
 $xor21$i$i780 = $104 ^ $xor42$i$i960;
 $xor22$i$i781 = $105 ^ $xor44$i$i961;
 $xor23$i$i782 = $106 ^ $xor46$i$i962;
 $xor24$i$i783 = $107 ^ $xor48$i$i963;
 $xor25$i$i784 = $108 ^ $xor50$i$i964;
 $xor26$i$i785 = $109 ^ $xor52$i$i965;
 $xor27$i$i786 = $110 ^ $xor54$i$i966;
 $xor28$i$i787 = $111 ^ $xor56$i$i967;
 $sub$i$i788 = $sub$i913 >> 31;
 $and$i$i789 = $xor$i$i778 & $sub$i$i788;
 $and29$i$i790 = $xor20$i$i779 & $sub$i$i788;
 $and30$i$i791 = $xor21$i$i780 & $sub$i$i788;
 $and31$i$i792 = $xor22$i$i781 & $sub$i$i788;
 $and32$i$i793 = $xor23$i$i782 & $sub$i$i788;
 $and33$i$i794 = $xor24$i$i783 & $sub$i$i788;
 $and34$i$i795 = $xor25$i$i784 & $sub$i$i788;
 $and35$i$i796 = $xor26$i$i785 & $sub$i$i788;
 $and36$i$i797 = $xor27$i$i786 & $sub$i$i788;
 $and37$i$i798 = $xor28$i$i787 & $sub$i$i788;
 $xor38$i$i799 = $and$i$i789 ^ $xor38$i$i958;
 HEAP32[$t>>2] = $xor38$i$i799;
 $xor40$i$i800 = $and29$i$i790 ^ $xor40$i$i959;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i800;
 $xor42$i$i801 = $and30$i$i791 ^ $xor42$i$i960;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i801;
 $xor44$i$i802 = $and31$i$i792 ^ $xor44$i$i961;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i802;
 $xor46$i$i803 = $and32$i$i793 ^ $xor46$i$i962;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i803;
 $xor48$i$i804 = $and33$i$i794 ^ $xor48$i$i963;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i804;
 $xor50$i$i805 = $and34$i$i795 ^ $xor50$i$i964;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i805;
 $xor52$i$i806 = $and35$i$i796 ^ $xor52$i$i965;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i806;
 $xor54$i$i807 = $and36$i$i797 ^ $xor54$i$i966;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i807;
 $xor56$i$i808 = $and37$i$i798 ^ $xor56$i$i967;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i808;
 $arraydecay5$i810 = (((320 + (($pos*960)|0)|0)) + 400|0);
 $112 = HEAP32[$arraydecay5$i810>>2]|0;
 $arrayidx11$i822 = (((320 + (($pos*960)|0)|0)) + 404|0);
 $113 = HEAP32[$arrayidx11$i822>>2]|0;
 $arrayidx12$i823 = (((320 + (($pos*960)|0)|0)) + 408|0);
 $114 = HEAP32[$arrayidx12$i823>>2]|0;
 $arrayidx13$i824 = (((320 + (($pos*960)|0)|0)) + 412|0);
 $115 = HEAP32[$arrayidx13$i824>>2]|0;
 $arrayidx14$i825 = (((320 + (($pos*960)|0)|0)) + 416|0);
 $116 = HEAP32[$arrayidx14$i825>>2]|0;
 $arrayidx15$i826 = (((320 + (($pos*960)|0)|0)) + 420|0);
 $117 = HEAP32[$arrayidx15$i826>>2]|0;
 $arrayidx16$i827 = (((320 + (($pos*960)|0)|0)) + 424|0);
 $118 = HEAP32[$arrayidx16$i827>>2]|0;
 $arrayidx17$i828 = (((320 + (($pos*960)|0)|0)) + 428|0);
 $119 = HEAP32[$arrayidx17$i828>>2]|0;
 $arrayidx18$i829 = (((320 + (($pos*960)|0)|0)) + 432|0);
 $120 = HEAP32[$arrayidx18$i829>>2]|0;
 $arrayidx19$i830 = (((320 + (($pos*960)|0)|0)) + 436|0);
 $121 = HEAP32[$arrayidx19$i830>>2]|0;
 $xor$i831 = $112 ^ $xor38$i1011;
 $xor20$i832 = $113 ^ $xor40$i1012;
 $xor21$i833 = $114 ^ $xor42$i1013;
 $xor22$i834 = $115 ^ $xor44$i1014;
 $xor23$i835 = $116 ^ $xor46$i1015;
 $xor24$i836 = $117 ^ $xor48$i1016;
 $xor25$i837 = $118 ^ $xor50$i1017;
 $xor26$i838 = $119 ^ $xor52$i1018;
 $xor27$i839 = $120 ^ $xor54$i1019;
 $xor28$i840 = $121 ^ $xor56$i1020;
 $and$i842 = $xor$i831 & $sub$i$i788;
 $and29$i843 = $xor20$i832 & $sub$i$i788;
 $and30$i844 = $xor21$i833 & $sub$i$i788;
 $and31$i845 = $xor22$i834 & $sub$i$i788;
 $and32$i846 = $xor23$i835 & $sub$i$i788;
 $and33$i847 = $xor24$i836 & $sub$i$i788;
 $and34$i848 = $xor25$i837 & $sub$i$i788;
 $and35$i849 = $xor26$i838 & $sub$i$i788;
 $and36$i850 = $xor27$i839 & $sub$i$i788;
 $and37$i851 = $xor28$i840 & $sub$i$i788;
 $xor38$i852 = $and$i842 ^ $xor38$i1011;
 HEAP32[$arraydecay1$i>>2] = $xor38$i852;
 $xor40$i853 = $and29$i843 ^ $xor40$i1012;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i853;
 $xor42$i854 = $and30$i844 ^ $xor42$i1013;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i854;
 $xor44$i855 = $and31$i845 ^ $xor44$i1014;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i855;
 $xor46$i856 = $and32$i846 ^ $xor46$i1015;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i856;
 $xor48$i857 = $and33$i847 ^ $xor48$i1016;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i857;
 $xor50$i858 = $and34$i848 ^ $xor50$i1017;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i858;
 $xor52$i859 = $and35$i849 ^ $xor52$i1018;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i859;
 $xor54$i860 = $and36$i850 ^ $xor54$i1019;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i860;
 $xor56$i861 = $and37$i851 ^ $xor56$i1020;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i861;
 $arraydecay9$i812 = (((320 + (($pos*960)|0)|0)) + 440|0);
 $122 = HEAP32[$arraydecay9$i812>>2]|0;
 $arrayidx11$i871 = (((320 + (($pos*960)|0)|0)) + 444|0);
 $123 = HEAP32[$arrayidx11$i871>>2]|0;
 $arrayidx12$i872 = (((320 + (($pos*960)|0)|0)) + 448|0);
 $124 = HEAP32[$arrayidx12$i872>>2]|0;
 $arrayidx13$i873 = (((320 + (($pos*960)|0)|0)) + 452|0);
 $125 = HEAP32[$arrayidx13$i873>>2]|0;
 $arrayidx14$i874 = (((320 + (($pos*960)|0)|0)) + 456|0);
 $126 = HEAP32[$arrayidx14$i874>>2]|0;
 $arrayidx15$i875 = (((320 + (($pos*960)|0)|0)) + 460|0);
 $127 = HEAP32[$arrayidx15$i875>>2]|0;
 $arrayidx16$i876 = (((320 + (($pos*960)|0)|0)) + 464|0);
 $128 = HEAP32[$arrayidx16$i876>>2]|0;
 $arrayidx17$i877 = (((320 + (($pos*960)|0)|0)) + 468|0);
 $129 = HEAP32[$arrayidx17$i877>>2]|0;
 $arrayidx18$i878 = (((320 + (($pos*960)|0)|0)) + 472|0);
 $130 = HEAP32[$arrayidx18$i878>>2]|0;
 $arrayidx19$i879 = (((320 + (($pos*960)|0)|0)) + 476|0);
 $131 = HEAP32[$arrayidx19$i879>>2]|0;
 $xor$i880 = $122 ^ $xor38$i1060;
 $xor20$i881 = $123 ^ $xor40$i1061;
 $xor21$i882 = $124 ^ $xor42$i1062;
 $xor22$i883 = $125 ^ $xor44$i1063;
 $xor23$i884 = $126 ^ $xor46$i1064;
 $xor24$i885 = $127 ^ $xor48$i1065;
 $xor25$i886 = $128 ^ $xor50$i1066;
 $xor26$i887 = $129 ^ $xor52$i1067;
 $xor27$i888 = $130 ^ $xor54$i1068;
 $xor28$i889 = $131 ^ $xor56$i1069;
 $and$i891 = $xor$i880 & $sub$i$i788;
 $and29$i892 = $xor20$i881 & $sub$i$i788;
 $and30$i893 = $xor21$i882 & $sub$i$i788;
 $and31$i894 = $xor22$i883 & $sub$i$i788;
 $and32$i895 = $xor23$i884 & $sub$i$i788;
 $and33$i896 = $xor24$i885 & $sub$i$i788;
 $and34$i897 = $xor25$i886 & $sub$i$i788;
 $and35$i898 = $xor26$i887 & $sub$i$i788;
 $and36$i899 = $xor27$i888 & $sub$i$i788;
 $and37$i900 = $xor28$i889 & $sub$i$i788;
 $xor38$i901 = $and$i891 ^ $xor38$i1060;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i901;
 $xor40$i902 = $and29$i892 ^ $xor40$i1061;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i902;
 $xor42$i903 = $and30$i893 ^ $xor42$i1062;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i903;
 $xor44$i904 = $and31$i894 ^ $xor44$i1063;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i904;
 $xor46$i905 = $and32$i895 ^ $xor46$i1064;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i905;
 $xor48$i906 = $and33$i896 ^ $xor48$i1065;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i906;
 $xor50$i907 = $and34$i897 ^ $xor50$i1066;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i907;
 $xor52$i908 = $and35$i898 ^ $xor52$i1067;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i908;
 $xor54$i909 = $and36$i899 ^ $xor54$i1068;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i909;
 $xor56$i910 = $and37$i900 ^ $xor56$i1069;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i910;
 $conv3$i753 = $xor4$i1388 ^ 5;
 $sub$i754 = (($conv3$i753) + -1)|0;
 $arraydecay2$i599 = (((320 + (($pos*960)|0)|0)) + 480|0);
 $132 = HEAP32[$arraydecay2$i599>>2]|0;
 $arrayidx11$i$i610 = (((320 + (($pos*960)|0)|0)) + 484|0);
 $133 = HEAP32[$arrayidx11$i$i610>>2]|0;
 $arrayidx12$i$i611 = (((320 + (($pos*960)|0)|0)) + 488|0);
 $134 = HEAP32[$arrayidx12$i$i611>>2]|0;
 $arrayidx13$i$i612 = (((320 + (($pos*960)|0)|0)) + 492|0);
 $135 = HEAP32[$arrayidx13$i$i612>>2]|0;
 $arrayidx14$i$i613 = (((320 + (($pos*960)|0)|0)) + 496|0);
 $136 = HEAP32[$arrayidx14$i$i613>>2]|0;
 $arrayidx15$i$i614 = (((320 + (($pos*960)|0)|0)) + 500|0);
 $137 = HEAP32[$arrayidx15$i$i614>>2]|0;
 $arrayidx16$i$i615 = (((320 + (($pos*960)|0)|0)) + 504|0);
 $138 = HEAP32[$arrayidx16$i$i615>>2]|0;
 $arrayidx17$i$i616 = (((320 + (($pos*960)|0)|0)) + 508|0);
 $139 = HEAP32[$arrayidx17$i$i616>>2]|0;
 $arrayidx18$i$i617 = (((320 + (($pos*960)|0)|0)) + 512|0);
 $140 = HEAP32[$arrayidx18$i$i617>>2]|0;
 $arrayidx19$i$i618 = (((320 + (($pos*960)|0)|0)) + 516|0);
 $141 = HEAP32[$arrayidx19$i$i618>>2]|0;
 $xor$i$i619 = $132 ^ $xor38$i$i799;
 $xor20$i$i620 = $133 ^ $xor40$i$i800;
 $xor21$i$i621 = $134 ^ $xor42$i$i801;
 $xor22$i$i622 = $135 ^ $xor44$i$i802;
 $xor23$i$i623 = $136 ^ $xor46$i$i803;
 $xor24$i$i624 = $137 ^ $xor48$i$i804;
 $xor25$i$i625 = $138 ^ $xor50$i$i805;
 $xor26$i$i626 = $139 ^ $xor52$i$i806;
 $xor27$i$i627 = $140 ^ $xor54$i$i807;
 $xor28$i$i628 = $141 ^ $xor56$i$i808;
 $sub$i$i629 = $sub$i754 >> 31;
 $and$i$i630 = $xor$i$i619 & $sub$i$i629;
 $and29$i$i631 = $xor20$i$i620 & $sub$i$i629;
 $and30$i$i632 = $xor21$i$i621 & $sub$i$i629;
 $and31$i$i633 = $xor22$i$i622 & $sub$i$i629;
 $and32$i$i634 = $xor23$i$i623 & $sub$i$i629;
 $and33$i$i635 = $xor24$i$i624 & $sub$i$i629;
 $and34$i$i636 = $xor25$i$i625 & $sub$i$i629;
 $and35$i$i637 = $xor26$i$i626 & $sub$i$i629;
 $and36$i$i638 = $xor27$i$i627 & $sub$i$i629;
 $and37$i$i639 = $xor28$i$i628 & $sub$i$i629;
 $xor38$i$i640 = $and$i$i630 ^ $xor38$i$i799;
 HEAP32[$t>>2] = $xor38$i$i640;
 $xor40$i$i641 = $and29$i$i631 ^ $xor40$i$i800;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i641;
 $xor42$i$i642 = $and30$i$i632 ^ $xor42$i$i801;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i642;
 $xor44$i$i643 = $and31$i$i633 ^ $xor44$i$i802;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i643;
 $xor46$i$i644 = $and32$i$i634 ^ $xor46$i$i803;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i644;
 $xor48$i$i645 = $and33$i$i635 ^ $xor48$i$i804;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i645;
 $xor50$i$i646 = $and34$i$i636 ^ $xor50$i$i805;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i646;
 $xor52$i$i647 = $and35$i$i637 ^ $xor52$i$i806;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i647;
 $xor54$i$i648 = $and36$i$i638 ^ $xor54$i$i807;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i648;
 $xor56$i$i649 = $and37$i$i639 ^ $xor56$i$i808;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i649;
 $arraydecay5$i651 = (((320 + (($pos*960)|0)|0)) + 520|0);
 $142 = HEAP32[$arraydecay5$i651>>2]|0;
 $arrayidx11$i663 = (((320 + (($pos*960)|0)|0)) + 524|0);
 $143 = HEAP32[$arrayidx11$i663>>2]|0;
 $arrayidx12$i664 = (((320 + (($pos*960)|0)|0)) + 528|0);
 $144 = HEAP32[$arrayidx12$i664>>2]|0;
 $arrayidx13$i665 = (((320 + (($pos*960)|0)|0)) + 532|0);
 $145 = HEAP32[$arrayidx13$i665>>2]|0;
 $arrayidx14$i666 = (((320 + (($pos*960)|0)|0)) + 536|0);
 $146 = HEAP32[$arrayidx14$i666>>2]|0;
 $arrayidx15$i667 = (((320 + (($pos*960)|0)|0)) + 540|0);
 $147 = HEAP32[$arrayidx15$i667>>2]|0;
 $arrayidx16$i668 = (((320 + (($pos*960)|0)|0)) + 544|0);
 $148 = HEAP32[$arrayidx16$i668>>2]|0;
 $arrayidx17$i669 = (((320 + (($pos*960)|0)|0)) + 548|0);
 $149 = HEAP32[$arrayidx17$i669>>2]|0;
 $arrayidx18$i670 = (((320 + (($pos*960)|0)|0)) + 552|0);
 $150 = HEAP32[$arrayidx18$i670>>2]|0;
 $arrayidx19$i671 = (((320 + (($pos*960)|0)|0)) + 556|0);
 $151 = HEAP32[$arrayidx19$i671>>2]|0;
 $xor$i672 = $142 ^ $xor38$i852;
 $xor20$i673 = $143 ^ $xor40$i853;
 $xor21$i674 = $144 ^ $xor42$i854;
 $xor22$i675 = $145 ^ $xor44$i855;
 $xor23$i676 = $146 ^ $xor46$i856;
 $xor24$i677 = $147 ^ $xor48$i857;
 $xor25$i678 = $148 ^ $xor50$i858;
 $xor26$i679 = $149 ^ $xor52$i859;
 $xor27$i680 = $150 ^ $xor54$i860;
 $xor28$i681 = $151 ^ $xor56$i861;
 $and$i683 = $xor$i672 & $sub$i$i629;
 $and29$i684 = $xor20$i673 & $sub$i$i629;
 $and30$i685 = $xor21$i674 & $sub$i$i629;
 $and31$i686 = $xor22$i675 & $sub$i$i629;
 $and32$i687 = $xor23$i676 & $sub$i$i629;
 $and33$i688 = $xor24$i677 & $sub$i$i629;
 $and34$i689 = $xor25$i678 & $sub$i$i629;
 $and35$i690 = $xor26$i679 & $sub$i$i629;
 $and36$i691 = $xor27$i680 & $sub$i$i629;
 $and37$i692 = $xor28$i681 & $sub$i$i629;
 $xor38$i693 = $and$i683 ^ $xor38$i852;
 HEAP32[$arraydecay1$i>>2] = $xor38$i693;
 $xor40$i694 = $and29$i684 ^ $xor40$i853;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i694;
 $xor42$i695 = $and30$i685 ^ $xor42$i854;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i695;
 $xor44$i696 = $and31$i686 ^ $xor44$i855;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i696;
 $xor46$i697 = $and32$i687 ^ $xor46$i856;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i697;
 $xor48$i698 = $and33$i688 ^ $xor48$i857;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i698;
 $xor50$i699 = $and34$i689 ^ $xor50$i858;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i699;
 $xor52$i700 = $and35$i690 ^ $xor52$i859;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i700;
 $xor54$i701 = $and36$i691 ^ $xor54$i860;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i701;
 $xor56$i702 = $and37$i692 ^ $xor56$i861;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i702;
 $arraydecay9$i653 = (((320 + (($pos*960)|0)|0)) + 560|0);
 $152 = HEAP32[$arraydecay9$i653>>2]|0;
 $arrayidx11$i712 = (((320 + (($pos*960)|0)|0)) + 564|0);
 $153 = HEAP32[$arrayidx11$i712>>2]|0;
 $arrayidx12$i713 = (((320 + (($pos*960)|0)|0)) + 568|0);
 $154 = HEAP32[$arrayidx12$i713>>2]|0;
 $arrayidx13$i714 = (((320 + (($pos*960)|0)|0)) + 572|0);
 $155 = HEAP32[$arrayidx13$i714>>2]|0;
 $arrayidx14$i715 = (((320 + (($pos*960)|0)|0)) + 576|0);
 $156 = HEAP32[$arrayidx14$i715>>2]|0;
 $arrayidx15$i716 = (((320 + (($pos*960)|0)|0)) + 580|0);
 $157 = HEAP32[$arrayidx15$i716>>2]|0;
 $arrayidx16$i717 = (((320 + (($pos*960)|0)|0)) + 584|0);
 $158 = HEAP32[$arrayidx16$i717>>2]|0;
 $arrayidx17$i718 = (((320 + (($pos*960)|0)|0)) + 588|0);
 $159 = HEAP32[$arrayidx17$i718>>2]|0;
 $arrayidx18$i719 = (((320 + (($pos*960)|0)|0)) + 592|0);
 $160 = HEAP32[$arrayidx18$i719>>2]|0;
 $arrayidx19$i720 = (((320 + (($pos*960)|0)|0)) + 596|0);
 $161 = HEAP32[$arrayidx19$i720>>2]|0;
 $xor$i721 = $152 ^ $xor38$i901;
 $xor20$i722 = $153 ^ $xor40$i902;
 $xor21$i723 = $154 ^ $xor42$i903;
 $xor22$i724 = $155 ^ $xor44$i904;
 $xor23$i725 = $156 ^ $xor46$i905;
 $xor24$i726 = $157 ^ $xor48$i906;
 $xor25$i727 = $158 ^ $xor50$i907;
 $xor26$i728 = $159 ^ $xor52$i908;
 $xor27$i729 = $160 ^ $xor54$i909;
 $xor28$i730 = $161 ^ $xor56$i910;
 $and$i732 = $xor$i721 & $sub$i$i629;
 $and29$i733 = $xor20$i722 & $sub$i$i629;
 $and30$i734 = $xor21$i723 & $sub$i$i629;
 $and31$i735 = $xor22$i724 & $sub$i$i629;
 $and32$i736 = $xor23$i725 & $sub$i$i629;
 $and33$i737 = $xor24$i726 & $sub$i$i629;
 $and34$i738 = $xor25$i727 & $sub$i$i629;
 $and35$i739 = $xor26$i728 & $sub$i$i629;
 $and36$i740 = $xor27$i729 & $sub$i$i629;
 $and37$i741 = $xor28$i730 & $sub$i$i629;
 $xor38$i742 = $and$i732 ^ $xor38$i901;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i742;
 $xor40$i743 = $and29$i733 ^ $xor40$i902;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i743;
 $xor42$i744 = $and30$i734 ^ $xor42$i903;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i744;
 $xor44$i745 = $and31$i735 ^ $xor44$i904;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i745;
 $xor46$i746 = $and32$i736 ^ $xor46$i905;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i746;
 $xor48$i747 = $and33$i737 ^ $xor48$i906;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i747;
 $xor50$i748 = $and34$i738 ^ $xor50$i907;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i748;
 $xor52$i749 = $and35$i739 ^ $xor52$i908;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i749;
 $xor54$i750 = $and36$i740 ^ $xor54$i909;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i750;
 $xor56$i751 = $and37$i741 ^ $xor56$i910;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i751;
 $conv3$i594 = $xor4$i1388 ^ 6;
 $sub$i595 = (($conv3$i594) + -1)|0;
 $arraydecay2$i440 = (((320 + (($pos*960)|0)|0)) + 600|0);
 $162 = HEAP32[$arraydecay2$i440>>2]|0;
 $arrayidx11$i$i451 = (((320 + (($pos*960)|0)|0)) + 604|0);
 $163 = HEAP32[$arrayidx11$i$i451>>2]|0;
 $arrayidx12$i$i452 = (((320 + (($pos*960)|0)|0)) + 608|0);
 $164 = HEAP32[$arrayidx12$i$i452>>2]|0;
 $arrayidx13$i$i453 = (((320 + (($pos*960)|0)|0)) + 612|0);
 $165 = HEAP32[$arrayidx13$i$i453>>2]|0;
 $arrayidx14$i$i454 = (((320 + (($pos*960)|0)|0)) + 616|0);
 $166 = HEAP32[$arrayidx14$i$i454>>2]|0;
 $arrayidx15$i$i455 = (((320 + (($pos*960)|0)|0)) + 620|0);
 $167 = HEAP32[$arrayidx15$i$i455>>2]|0;
 $arrayidx16$i$i456 = (((320 + (($pos*960)|0)|0)) + 624|0);
 $168 = HEAP32[$arrayidx16$i$i456>>2]|0;
 $arrayidx17$i$i457 = (((320 + (($pos*960)|0)|0)) + 628|0);
 $169 = HEAP32[$arrayidx17$i$i457>>2]|0;
 $arrayidx18$i$i458 = (((320 + (($pos*960)|0)|0)) + 632|0);
 $170 = HEAP32[$arrayidx18$i$i458>>2]|0;
 $arrayidx19$i$i459 = (((320 + (($pos*960)|0)|0)) + 636|0);
 $171 = HEAP32[$arrayidx19$i$i459>>2]|0;
 $xor$i$i460 = $162 ^ $xor38$i$i640;
 $xor20$i$i461 = $163 ^ $xor40$i$i641;
 $xor21$i$i462 = $164 ^ $xor42$i$i642;
 $xor22$i$i463 = $165 ^ $xor44$i$i643;
 $xor23$i$i464 = $166 ^ $xor46$i$i644;
 $xor24$i$i465 = $167 ^ $xor48$i$i645;
 $xor25$i$i466 = $168 ^ $xor50$i$i646;
 $xor26$i$i467 = $169 ^ $xor52$i$i647;
 $xor27$i$i468 = $170 ^ $xor54$i$i648;
 $xor28$i$i469 = $171 ^ $xor56$i$i649;
 $sub$i$i470 = $sub$i595 >> 31;
 $and$i$i471 = $xor$i$i460 & $sub$i$i470;
 $and29$i$i472 = $xor20$i$i461 & $sub$i$i470;
 $and30$i$i473 = $xor21$i$i462 & $sub$i$i470;
 $and31$i$i474 = $xor22$i$i463 & $sub$i$i470;
 $and32$i$i475 = $xor23$i$i464 & $sub$i$i470;
 $and33$i$i476 = $xor24$i$i465 & $sub$i$i470;
 $and34$i$i477 = $xor25$i$i466 & $sub$i$i470;
 $and35$i$i478 = $xor26$i$i467 & $sub$i$i470;
 $and36$i$i479 = $xor27$i$i468 & $sub$i$i470;
 $and37$i$i480 = $xor28$i$i469 & $sub$i$i470;
 $xor38$i$i481 = $and$i$i471 ^ $xor38$i$i640;
 HEAP32[$t>>2] = $xor38$i$i481;
 $xor40$i$i482 = $and29$i$i472 ^ $xor40$i$i641;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i482;
 $xor42$i$i483 = $and30$i$i473 ^ $xor42$i$i642;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i483;
 $xor44$i$i484 = $and31$i$i474 ^ $xor44$i$i643;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i484;
 $xor46$i$i485 = $and32$i$i475 ^ $xor46$i$i644;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i485;
 $xor48$i$i486 = $and33$i$i476 ^ $xor48$i$i645;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i486;
 $xor50$i$i487 = $and34$i$i477 ^ $xor50$i$i646;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i487;
 $xor52$i$i488 = $and35$i$i478 ^ $xor52$i$i647;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i488;
 $xor54$i$i489 = $and36$i$i479 ^ $xor54$i$i648;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i489;
 $xor56$i$i490 = $and37$i$i480 ^ $xor56$i$i649;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i490;
 $arraydecay5$i492 = (((320 + (($pos*960)|0)|0)) + 640|0);
 $172 = HEAP32[$arraydecay5$i492>>2]|0;
 $arrayidx11$i504 = (((320 + (($pos*960)|0)|0)) + 644|0);
 $173 = HEAP32[$arrayidx11$i504>>2]|0;
 $arrayidx12$i505 = (((320 + (($pos*960)|0)|0)) + 648|0);
 $174 = HEAP32[$arrayidx12$i505>>2]|0;
 $arrayidx13$i506 = (((320 + (($pos*960)|0)|0)) + 652|0);
 $175 = HEAP32[$arrayidx13$i506>>2]|0;
 $arrayidx14$i507 = (((320 + (($pos*960)|0)|0)) + 656|0);
 $176 = HEAP32[$arrayidx14$i507>>2]|0;
 $arrayidx15$i508 = (((320 + (($pos*960)|0)|0)) + 660|0);
 $177 = HEAP32[$arrayidx15$i508>>2]|0;
 $arrayidx16$i509 = (((320 + (($pos*960)|0)|0)) + 664|0);
 $178 = HEAP32[$arrayidx16$i509>>2]|0;
 $arrayidx17$i510 = (((320 + (($pos*960)|0)|0)) + 668|0);
 $179 = HEAP32[$arrayidx17$i510>>2]|0;
 $arrayidx18$i511 = (((320 + (($pos*960)|0)|0)) + 672|0);
 $180 = HEAP32[$arrayidx18$i511>>2]|0;
 $arrayidx19$i512 = (((320 + (($pos*960)|0)|0)) + 676|0);
 $181 = HEAP32[$arrayidx19$i512>>2]|0;
 $xor$i513 = $172 ^ $xor38$i693;
 $xor20$i514 = $173 ^ $xor40$i694;
 $xor21$i515 = $174 ^ $xor42$i695;
 $xor22$i516 = $175 ^ $xor44$i696;
 $xor23$i517 = $176 ^ $xor46$i697;
 $xor24$i518 = $177 ^ $xor48$i698;
 $xor25$i519 = $178 ^ $xor50$i699;
 $xor26$i520 = $179 ^ $xor52$i700;
 $xor27$i521 = $180 ^ $xor54$i701;
 $xor28$i522 = $181 ^ $xor56$i702;
 $and$i524 = $xor$i513 & $sub$i$i470;
 $and29$i525 = $xor20$i514 & $sub$i$i470;
 $and30$i526 = $xor21$i515 & $sub$i$i470;
 $and31$i527 = $xor22$i516 & $sub$i$i470;
 $and32$i528 = $xor23$i517 & $sub$i$i470;
 $and33$i529 = $xor24$i518 & $sub$i$i470;
 $and34$i530 = $xor25$i519 & $sub$i$i470;
 $and35$i531 = $xor26$i520 & $sub$i$i470;
 $and36$i532 = $xor27$i521 & $sub$i$i470;
 $and37$i533 = $xor28$i522 & $sub$i$i470;
 $xor38$i534 = $and$i524 ^ $xor38$i693;
 HEAP32[$arraydecay1$i>>2] = $xor38$i534;
 $xor40$i535 = $and29$i525 ^ $xor40$i694;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i535;
 $xor42$i536 = $and30$i526 ^ $xor42$i695;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i536;
 $xor44$i537 = $and31$i527 ^ $xor44$i696;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i537;
 $xor46$i538 = $and32$i528 ^ $xor46$i697;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i538;
 $xor48$i539 = $and33$i529 ^ $xor48$i698;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i539;
 $xor50$i540 = $and34$i530 ^ $xor50$i699;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i540;
 $xor52$i541 = $and35$i531 ^ $xor52$i700;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i541;
 $xor54$i542 = $and36$i532 ^ $xor54$i701;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i542;
 $xor56$i543 = $and37$i533 ^ $xor56$i702;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i543;
 $arraydecay9$i494 = (((320 + (($pos*960)|0)|0)) + 680|0);
 $182 = HEAP32[$arraydecay9$i494>>2]|0;
 $arrayidx11$i553 = (((320 + (($pos*960)|0)|0)) + 684|0);
 $183 = HEAP32[$arrayidx11$i553>>2]|0;
 $arrayidx12$i554 = (((320 + (($pos*960)|0)|0)) + 688|0);
 $184 = HEAP32[$arrayidx12$i554>>2]|0;
 $arrayidx13$i555 = (((320 + (($pos*960)|0)|0)) + 692|0);
 $185 = HEAP32[$arrayidx13$i555>>2]|0;
 $arrayidx14$i556 = (((320 + (($pos*960)|0)|0)) + 696|0);
 $186 = HEAP32[$arrayidx14$i556>>2]|0;
 $arrayidx15$i557 = (((320 + (($pos*960)|0)|0)) + 700|0);
 $187 = HEAP32[$arrayidx15$i557>>2]|0;
 $arrayidx16$i558 = (((320 + (($pos*960)|0)|0)) + 704|0);
 $188 = HEAP32[$arrayidx16$i558>>2]|0;
 $arrayidx17$i559 = (((320 + (($pos*960)|0)|0)) + 708|0);
 $189 = HEAP32[$arrayidx17$i559>>2]|0;
 $arrayidx18$i560 = (((320 + (($pos*960)|0)|0)) + 712|0);
 $190 = HEAP32[$arrayidx18$i560>>2]|0;
 $arrayidx19$i561 = (((320 + (($pos*960)|0)|0)) + 716|0);
 $191 = HEAP32[$arrayidx19$i561>>2]|0;
 $xor$i562 = $182 ^ $xor38$i742;
 $xor20$i563 = $183 ^ $xor40$i743;
 $xor21$i564 = $184 ^ $xor42$i744;
 $xor22$i565 = $185 ^ $xor44$i745;
 $xor23$i566 = $186 ^ $xor46$i746;
 $xor24$i567 = $187 ^ $xor48$i747;
 $xor25$i568 = $188 ^ $xor50$i748;
 $xor26$i569 = $189 ^ $xor52$i749;
 $xor27$i570 = $190 ^ $xor54$i750;
 $xor28$i571 = $191 ^ $xor56$i751;
 $and$i573 = $xor$i562 & $sub$i$i470;
 $and29$i574 = $xor20$i563 & $sub$i$i470;
 $and30$i575 = $xor21$i564 & $sub$i$i470;
 $and31$i576 = $xor22$i565 & $sub$i$i470;
 $and32$i577 = $xor23$i566 & $sub$i$i470;
 $and33$i578 = $xor24$i567 & $sub$i$i470;
 $and34$i579 = $xor25$i568 & $sub$i$i470;
 $and35$i580 = $xor26$i569 & $sub$i$i470;
 $and36$i581 = $xor27$i570 & $sub$i$i470;
 $and37$i582 = $xor28$i571 & $sub$i$i470;
 $xor38$i583 = $and$i573 ^ $xor38$i742;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i583;
 $xor40$i584 = $and29$i574 ^ $xor40$i743;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i584;
 $xor42$i585 = $and30$i575 ^ $xor42$i744;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i585;
 $xor44$i586 = $and31$i576 ^ $xor44$i745;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i586;
 $xor46$i587 = $and32$i577 ^ $xor46$i746;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i587;
 $xor48$i588 = $and33$i578 ^ $xor48$i747;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i588;
 $xor50$i589 = $and34$i579 ^ $xor50$i748;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i589;
 $xor52$i590 = $and35$i580 ^ $xor52$i749;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i590;
 $xor54$i591 = $and36$i581 ^ $xor54$i750;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i591;
 $xor56$i592 = $and37$i582 ^ $xor56$i751;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i592;
 $conv3$i435 = $xor4$i1388 ^ 7;
 $sub$i436 = (($conv3$i435) + -1)|0;
 $arraydecay2$i281 = (((320 + (($pos*960)|0)|0)) + 720|0);
 $192 = HEAP32[$arraydecay2$i281>>2]|0;
 $arrayidx11$i$i292 = (((320 + (($pos*960)|0)|0)) + 724|0);
 $193 = HEAP32[$arrayidx11$i$i292>>2]|0;
 $arrayidx12$i$i293 = (((320 + (($pos*960)|0)|0)) + 728|0);
 $194 = HEAP32[$arrayidx12$i$i293>>2]|0;
 $arrayidx13$i$i294 = (((320 + (($pos*960)|0)|0)) + 732|0);
 $195 = HEAP32[$arrayidx13$i$i294>>2]|0;
 $arrayidx14$i$i295 = (((320 + (($pos*960)|0)|0)) + 736|0);
 $196 = HEAP32[$arrayidx14$i$i295>>2]|0;
 $arrayidx15$i$i296 = (((320 + (($pos*960)|0)|0)) + 740|0);
 $197 = HEAP32[$arrayidx15$i$i296>>2]|0;
 $arrayidx16$i$i297 = (((320 + (($pos*960)|0)|0)) + 744|0);
 $198 = HEAP32[$arrayidx16$i$i297>>2]|0;
 $arrayidx17$i$i298 = (((320 + (($pos*960)|0)|0)) + 748|0);
 $199 = HEAP32[$arrayidx17$i$i298>>2]|0;
 $arrayidx18$i$i299 = (((320 + (($pos*960)|0)|0)) + 752|0);
 $200 = HEAP32[$arrayidx18$i$i299>>2]|0;
 $arrayidx19$i$i300 = (((320 + (($pos*960)|0)|0)) + 756|0);
 $201 = HEAP32[$arrayidx19$i$i300>>2]|0;
 $xor$i$i301 = $192 ^ $xor38$i$i481;
 $xor20$i$i302 = $193 ^ $xor40$i$i482;
 $xor21$i$i303 = $194 ^ $xor42$i$i483;
 $xor22$i$i304 = $195 ^ $xor44$i$i484;
 $xor23$i$i305 = $196 ^ $xor46$i$i485;
 $xor24$i$i306 = $197 ^ $xor48$i$i486;
 $xor25$i$i307 = $198 ^ $xor50$i$i487;
 $xor26$i$i308 = $199 ^ $xor52$i$i488;
 $xor27$i$i309 = $200 ^ $xor54$i$i489;
 $xor28$i$i310 = $201 ^ $xor56$i$i490;
 $sub$i$i311 = $sub$i436 >> 31;
 $and$i$i312 = $xor$i$i301 & $sub$i$i311;
 $and29$i$i313 = $xor20$i$i302 & $sub$i$i311;
 $and30$i$i314 = $xor21$i$i303 & $sub$i$i311;
 $and31$i$i315 = $xor22$i$i304 & $sub$i$i311;
 $and32$i$i316 = $xor23$i$i305 & $sub$i$i311;
 $and33$i$i317 = $xor24$i$i306 & $sub$i$i311;
 $and34$i$i318 = $xor25$i$i307 & $sub$i$i311;
 $and35$i$i319 = $xor26$i$i308 & $sub$i$i311;
 $and36$i$i320 = $xor27$i$i309 & $sub$i$i311;
 $and37$i$i321 = $xor28$i$i310 & $sub$i$i311;
 $xor38$i$i322 = $and$i$i312 ^ $xor38$i$i481;
 HEAP32[$t>>2] = $xor38$i$i322;
 $xor40$i$i323 = $and29$i$i313 ^ $xor40$i$i482;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i323;
 $xor42$i$i324 = $and30$i$i314 ^ $xor42$i$i483;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i324;
 $xor44$i$i325 = $and31$i$i315 ^ $xor44$i$i484;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i325;
 $xor46$i$i326 = $and32$i$i316 ^ $xor46$i$i485;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i326;
 $xor48$i$i327 = $and33$i$i317 ^ $xor48$i$i486;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i327;
 $xor50$i$i328 = $and34$i$i318 ^ $xor50$i$i487;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i328;
 $xor52$i$i329 = $and35$i$i319 ^ $xor52$i$i488;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i329;
 $xor54$i$i330 = $and36$i$i320 ^ $xor54$i$i489;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i330;
 $xor56$i$i331 = $and37$i$i321 ^ $xor56$i$i490;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i331;
 $arraydecay5$i333 = (((320 + (($pos*960)|0)|0)) + 760|0);
 $202 = HEAP32[$arraydecay5$i333>>2]|0;
 $arrayidx11$i345 = (((320 + (($pos*960)|0)|0)) + 764|0);
 $203 = HEAP32[$arrayidx11$i345>>2]|0;
 $arrayidx12$i346 = (((320 + (($pos*960)|0)|0)) + 768|0);
 $204 = HEAP32[$arrayidx12$i346>>2]|0;
 $arrayidx13$i347 = (((320 + (($pos*960)|0)|0)) + 772|0);
 $205 = HEAP32[$arrayidx13$i347>>2]|0;
 $arrayidx14$i348 = (((320 + (($pos*960)|0)|0)) + 776|0);
 $206 = HEAP32[$arrayidx14$i348>>2]|0;
 $arrayidx15$i349 = (((320 + (($pos*960)|0)|0)) + 780|0);
 $207 = HEAP32[$arrayidx15$i349>>2]|0;
 $arrayidx16$i350 = (((320 + (($pos*960)|0)|0)) + 784|0);
 $208 = HEAP32[$arrayidx16$i350>>2]|0;
 $arrayidx17$i351 = (((320 + (($pos*960)|0)|0)) + 788|0);
 $209 = HEAP32[$arrayidx17$i351>>2]|0;
 $arrayidx18$i352 = (((320 + (($pos*960)|0)|0)) + 792|0);
 $210 = HEAP32[$arrayidx18$i352>>2]|0;
 $arrayidx19$i353 = (((320 + (($pos*960)|0)|0)) + 796|0);
 $211 = HEAP32[$arrayidx19$i353>>2]|0;
 $xor$i354 = $202 ^ $xor38$i534;
 $xor20$i355 = $203 ^ $xor40$i535;
 $xor21$i356 = $204 ^ $xor42$i536;
 $xor22$i357 = $205 ^ $xor44$i537;
 $xor23$i358 = $206 ^ $xor46$i538;
 $xor24$i359 = $207 ^ $xor48$i539;
 $xor25$i360 = $208 ^ $xor50$i540;
 $xor26$i361 = $209 ^ $xor52$i541;
 $xor27$i362 = $210 ^ $xor54$i542;
 $xor28$i363 = $211 ^ $xor56$i543;
 $and$i365 = $xor$i354 & $sub$i$i311;
 $and29$i366 = $xor20$i355 & $sub$i$i311;
 $and30$i367 = $xor21$i356 & $sub$i$i311;
 $and31$i368 = $xor22$i357 & $sub$i$i311;
 $and32$i369 = $xor23$i358 & $sub$i$i311;
 $and33$i370 = $xor24$i359 & $sub$i$i311;
 $and34$i371 = $xor25$i360 & $sub$i$i311;
 $and35$i372 = $xor26$i361 & $sub$i$i311;
 $and36$i373 = $xor27$i362 & $sub$i$i311;
 $and37$i374 = $xor28$i363 & $sub$i$i311;
 $xor38$i375 = $and$i365 ^ $xor38$i534;
 HEAP32[$arraydecay1$i>>2] = $xor38$i375;
 $xor40$i376 = $and29$i366 ^ $xor40$i535;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i376;
 $xor42$i377 = $and30$i367 ^ $xor42$i536;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i377;
 $xor44$i378 = $and31$i368 ^ $xor44$i537;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i378;
 $xor46$i379 = $and32$i369 ^ $xor46$i538;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i379;
 $xor48$i380 = $and33$i370 ^ $xor48$i539;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i380;
 $xor50$i381 = $and34$i371 ^ $xor50$i540;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i381;
 $xor52$i382 = $and35$i372 ^ $xor52$i541;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i382;
 $xor54$i383 = $and36$i373 ^ $xor54$i542;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i383;
 $xor56$i384 = $and37$i374 ^ $xor56$i543;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i384;
 $arraydecay9$i335 = (((320 + (($pos*960)|0)|0)) + 800|0);
 $212 = HEAP32[$arraydecay9$i335>>2]|0;
 $arrayidx11$i394 = (((320 + (($pos*960)|0)|0)) + 804|0);
 $213 = HEAP32[$arrayidx11$i394>>2]|0;
 $arrayidx12$i395 = (((320 + (($pos*960)|0)|0)) + 808|0);
 $214 = HEAP32[$arrayidx12$i395>>2]|0;
 $arrayidx13$i396 = (((320 + (($pos*960)|0)|0)) + 812|0);
 $215 = HEAP32[$arrayidx13$i396>>2]|0;
 $arrayidx14$i397 = (((320 + (($pos*960)|0)|0)) + 816|0);
 $216 = HEAP32[$arrayidx14$i397>>2]|0;
 $arrayidx15$i398 = (((320 + (($pos*960)|0)|0)) + 820|0);
 $217 = HEAP32[$arrayidx15$i398>>2]|0;
 $arrayidx16$i399 = (((320 + (($pos*960)|0)|0)) + 824|0);
 $218 = HEAP32[$arrayidx16$i399>>2]|0;
 $arrayidx17$i400 = (((320 + (($pos*960)|0)|0)) + 828|0);
 $219 = HEAP32[$arrayidx17$i400>>2]|0;
 $arrayidx18$i401 = (((320 + (($pos*960)|0)|0)) + 832|0);
 $220 = HEAP32[$arrayidx18$i401>>2]|0;
 $arrayidx19$i402 = (((320 + (($pos*960)|0)|0)) + 836|0);
 $221 = HEAP32[$arrayidx19$i402>>2]|0;
 $xor$i403 = $212 ^ $xor38$i583;
 $xor20$i404 = $213 ^ $xor40$i584;
 $xor21$i405 = $214 ^ $xor42$i585;
 $xor22$i406 = $215 ^ $xor44$i586;
 $xor23$i407 = $216 ^ $xor46$i587;
 $xor24$i408 = $217 ^ $xor48$i588;
 $xor25$i409 = $218 ^ $xor50$i589;
 $xor26$i410 = $219 ^ $xor52$i590;
 $xor27$i411 = $220 ^ $xor54$i591;
 $xor28$i412 = $221 ^ $xor56$i592;
 $and$i414 = $xor$i403 & $sub$i$i311;
 $and29$i415 = $xor20$i404 & $sub$i$i311;
 $and30$i416 = $xor21$i405 & $sub$i$i311;
 $and31$i417 = $xor22$i406 & $sub$i$i311;
 $and32$i418 = $xor23$i407 & $sub$i$i311;
 $and33$i419 = $xor24$i408 & $sub$i$i311;
 $and34$i420 = $xor25$i409 & $sub$i$i311;
 $and35$i421 = $xor26$i410 & $sub$i$i311;
 $and36$i422 = $xor27$i411 & $sub$i$i311;
 $and37$i423 = $xor28$i412 & $sub$i$i311;
 $xor38$i424 = $and$i414 ^ $xor38$i583;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i424;
 $xor40$i425 = $and29$i415 ^ $xor40$i584;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i425;
 $xor42$i426 = $and30$i416 ^ $xor42$i585;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i426;
 $xor44$i427 = $and31$i417 ^ $xor44$i586;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i427;
 $xor46$i428 = $and32$i418 ^ $xor46$i587;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i428;
 $xor48$i429 = $and33$i419 ^ $xor48$i588;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i429;
 $xor50$i430 = $and34$i420 ^ $xor50$i589;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i430;
 $xor52$i431 = $and35$i421 ^ $xor52$i590;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i431;
 $xor54$i432 = $and36$i422 ^ $xor54$i591;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i432;
 $xor56$i433 = $and37$i423 ^ $xor56$i592;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i433;
 $conv3$i = $xor4$i1388 ^ 8;
 $sub$i279 = (($conv3$i) + -1)|0;
 $arraydecay2$i126 = (((320 + (($pos*960)|0)|0)) + 840|0);
 $222 = HEAP32[$arraydecay2$i126>>2]|0;
 $arrayidx11$i$i137 = (((320 + (($pos*960)|0)|0)) + 844|0);
 $223 = HEAP32[$arrayidx11$i$i137>>2]|0;
 $arrayidx12$i$i138 = (((320 + (($pos*960)|0)|0)) + 848|0);
 $224 = HEAP32[$arrayidx12$i$i138>>2]|0;
 $arrayidx13$i$i139 = (((320 + (($pos*960)|0)|0)) + 852|0);
 $225 = HEAP32[$arrayidx13$i$i139>>2]|0;
 $arrayidx14$i$i140 = (((320 + (($pos*960)|0)|0)) + 856|0);
 $226 = HEAP32[$arrayidx14$i$i140>>2]|0;
 $arrayidx15$i$i141 = (((320 + (($pos*960)|0)|0)) + 860|0);
 $227 = HEAP32[$arrayidx15$i$i141>>2]|0;
 $arrayidx16$i$i142 = (((320 + (($pos*960)|0)|0)) + 864|0);
 $228 = HEAP32[$arrayidx16$i$i142>>2]|0;
 $arrayidx17$i$i143 = (((320 + (($pos*960)|0)|0)) + 868|0);
 $229 = HEAP32[$arrayidx17$i$i143>>2]|0;
 $arrayidx18$i$i144 = (((320 + (($pos*960)|0)|0)) + 872|0);
 $230 = HEAP32[$arrayidx18$i$i144>>2]|0;
 $arrayidx19$i$i145 = (((320 + (($pos*960)|0)|0)) + 876|0);
 $231 = HEAP32[$arrayidx19$i$i145>>2]|0;
 $xor$i$i146 = $222 ^ $xor38$i$i322;
 $xor20$i$i147 = $223 ^ $xor40$i$i323;
 $xor21$i$i148 = $224 ^ $xor42$i$i324;
 $xor22$i$i149 = $225 ^ $xor44$i$i325;
 $xor23$i$i150 = $226 ^ $xor46$i$i326;
 $xor24$i$i151 = $227 ^ $xor48$i$i327;
 $xor25$i$i152 = $228 ^ $xor50$i$i328;
 $xor26$i$i153 = $229 ^ $xor52$i$i329;
 $xor27$i$i154 = $230 ^ $xor54$i$i330;
 $xor28$i$i155 = $231 ^ $xor56$i$i331;
 $sub$i$i156 = $sub$i279 >> 31;
 $and$i$i157 = $xor$i$i146 & $sub$i$i156;
 $and29$i$i158 = $xor20$i$i147 & $sub$i$i156;
 $and30$i$i159 = $xor21$i$i148 & $sub$i$i156;
 $and31$i$i160 = $xor22$i$i149 & $sub$i$i156;
 $and32$i$i161 = $xor23$i$i150 & $sub$i$i156;
 $and33$i$i162 = $xor24$i$i151 & $sub$i$i156;
 $and34$i$i163 = $xor25$i$i152 & $sub$i$i156;
 $and35$i$i164 = $xor26$i$i153 & $sub$i$i156;
 $and36$i$i165 = $xor27$i$i154 & $sub$i$i156;
 $and37$i$i166 = $xor28$i$i155 & $sub$i$i156;
 $xor38$i$i167 = $and$i$i157 ^ $xor38$i$i322;
 HEAP32[$t>>2] = $xor38$i$i167;
 $xor40$i$i168 = $and29$i$i158 ^ $xor40$i$i323;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i168;
 $xor42$i$i169 = $and30$i$i159 ^ $xor42$i$i324;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i169;
 $xor44$i$i170 = $and31$i$i160 ^ $xor44$i$i325;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i170;
 $xor46$i$i171 = $and32$i$i161 ^ $xor46$i$i326;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i171;
 $xor48$i$i172 = $and33$i$i162 ^ $xor48$i$i327;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i172;
 $xor50$i$i173 = $and34$i$i163 ^ $xor50$i$i328;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i173;
 $xor52$i$i174 = $and35$i$i164 ^ $xor52$i$i329;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i174;
 $xor54$i$i175 = $and36$i$i165 ^ $xor54$i$i330;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i175;
 $xor56$i$i176 = $and37$i$i166 ^ $xor56$i$i331;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i176;
 $arraydecay5$i178 = (((320 + (($pos*960)|0)|0)) + 880|0);
 $232 = HEAP32[$arraydecay5$i178>>2]|0;
 $arrayidx11$i190 = (((320 + (($pos*960)|0)|0)) + 884|0);
 $233 = HEAP32[$arrayidx11$i190>>2]|0;
 $arrayidx12$i191 = (((320 + (($pos*960)|0)|0)) + 888|0);
 $234 = HEAP32[$arrayidx12$i191>>2]|0;
 $arrayidx13$i192 = (((320 + (($pos*960)|0)|0)) + 892|0);
 $235 = HEAP32[$arrayidx13$i192>>2]|0;
 $arrayidx14$i193 = (((320 + (($pos*960)|0)|0)) + 896|0);
 $236 = HEAP32[$arrayidx14$i193>>2]|0;
 $arrayidx15$i194 = (((320 + (($pos*960)|0)|0)) + 900|0);
 $237 = HEAP32[$arrayidx15$i194>>2]|0;
 $arrayidx16$i195 = (((320 + (($pos*960)|0)|0)) + 904|0);
 $238 = HEAP32[$arrayidx16$i195>>2]|0;
 $arrayidx17$i196 = (((320 + (($pos*960)|0)|0)) + 908|0);
 $239 = HEAP32[$arrayidx17$i196>>2]|0;
 $arrayidx18$i197 = (((320 + (($pos*960)|0)|0)) + 912|0);
 $240 = HEAP32[$arrayidx18$i197>>2]|0;
 $arrayidx19$i198 = (((320 + (($pos*960)|0)|0)) + 916|0);
 $241 = HEAP32[$arrayidx19$i198>>2]|0;
 $xor$i199 = $232 ^ $xor38$i375;
 $xor20$i200 = $233 ^ $xor40$i376;
 $xor21$i201 = $234 ^ $xor42$i377;
 $xor22$i202 = $235 ^ $xor44$i378;
 $xor23$i203 = $236 ^ $xor46$i379;
 $xor24$i204 = $237 ^ $xor48$i380;
 $xor25$i205 = $238 ^ $xor50$i381;
 $xor26$i206 = $239 ^ $xor52$i382;
 $xor27$i207 = $240 ^ $xor54$i383;
 $xor28$i208 = $241 ^ $xor56$i384;
 $and$i210 = $xor$i199 & $sub$i$i156;
 $and29$i211 = $xor20$i200 & $sub$i$i156;
 $and30$i212 = $xor21$i201 & $sub$i$i156;
 $and31$i213 = $xor22$i202 & $sub$i$i156;
 $and32$i214 = $xor23$i203 & $sub$i$i156;
 $and33$i215 = $xor24$i204 & $sub$i$i156;
 $and34$i216 = $xor25$i205 & $sub$i$i156;
 $and35$i217 = $xor26$i206 & $sub$i$i156;
 $and36$i218 = $xor27$i207 & $sub$i$i156;
 $and37$i219 = $xor28$i208 & $sub$i$i156;
 $xor38$i220 = $and$i210 ^ $xor38$i375;
 HEAP32[$arraydecay1$i>>2] = $xor38$i220;
 $xor40$i221 = $and29$i211 ^ $xor40$i376;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i221;
 $xor42$i222 = $and30$i212 ^ $xor42$i377;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i222;
 $xor44$i223 = $and31$i213 ^ $xor44$i378;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i223;
 $xor46$i224 = $and32$i214 ^ $xor46$i379;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i224;
 $xor48$i225 = $and33$i215 ^ $xor48$i380;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i225;
 $xor50$i226 = $and34$i216 ^ $xor50$i381;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i226;
 $xor52$i227 = $and35$i217 ^ $xor52$i382;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i227;
 $xor54$i228 = $and36$i218 ^ $xor54$i383;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i228;
 $xor56$i229 = $and37$i219 ^ $xor56$i384;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i229;
 $arraydecay9$i180 = (((320 + (($pos*960)|0)|0)) + 920|0);
 $242 = HEAP32[$arraydecay9$i180>>2]|0;
 $arrayidx11$i239 = (((320 + (($pos*960)|0)|0)) + 924|0);
 $243 = HEAP32[$arrayidx11$i239>>2]|0;
 $arrayidx12$i240 = (((320 + (($pos*960)|0)|0)) + 928|0);
 $244 = HEAP32[$arrayidx12$i240>>2]|0;
 $arrayidx13$i241 = (((320 + (($pos*960)|0)|0)) + 932|0);
 $245 = HEAP32[$arrayidx13$i241>>2]|0;
 $arrayidx14$i242 = (((320 + (($pos*960)|0)|0)) + 936|0);
 $246 = HEAP32[$arrayidx14$i242>>2]|0;
 $arrayidx15$i243 = (((320 + (($pos*960)|0)|0)) + 940|0);
 $247 = HEAP32[$arrayidx15$i243>>2]|0;
 $arrayidx16$i244 = (((320 + (($pos*960)|0)|0)) + 944|0);
 $248 = HEAP32[$arrayidx16$i244>>2]|0;
 $arrayidx17$i245 = (((320 + (($pos*960)|0)|0)) + 948|0);
 $249 = HEAP32[$arrayidx17$i245>>2]|0;
 $arrayidx18$i246 = (((320 + (($pos*960)|0)|0)) + 952|0);
 $250 = HEAP32[$arrayidx18$i246>>2]|0;
 $arrayidx19$i247 = (((320 + (($pos*960)|0)|0)) + 956|0);
 $251 = HEAP32[$arrayidx19$i247>>2]|0;
 $xor$i248 = $242 ^ $xor38$i424;
 $xor20$i249 = $243 ^ $xor40$i425;
 $xor21$i250 = $244 ^ $xor42$i426;
 $xor22$i251 = $245 ^ $xor44$i427;
 $xor23$i252 = $246 ^ $xor46$i428;
 $xor24$i253 = $247 ^ $xor48$i429;
 $xor25$i254 = $248 ^ $xor50$i430;
 $xor26$i255 = $249 ^ $xor52$i431;
 $xor27$i256 = $250 ^ $xor54$i432;
 $xor28$i257 = $251 ^ $xor56$i433;
 $and$i259 = $xor$i248 & $sub$i$i156;
 $and29$i260 = $xor20$i249 & $sub$i$i156;
 $and30$i261 = $xor21$i250 & $sub$i$i156;
 $and31$i262 = $xor22$i251 & $sub$i$i156;
 $and32$i263 = $xor23$i252 & $sub$i$i156;
 $and33$i264 = $xor24$i253 & $sub$i$i156;
 $and34$i265 = $xor25$i254 & $sub$i$i156;
 $and35$i266 = $xor26$i255 & $sub$i$i156;
 $and36$i267 = $xor27$i256 & $sub$i$i156;
 $and37$i268 = $xor28$i257 & $sub$i$i156;
 $xor38$i269 = $and$i259 ^ $xor38$i424;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i269;
 $xor40$i270 = $and29$i260 ^ $xor40$i425;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i270;
 $xor42$i271 = $and30$i261 ^ $xor42$i426;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i271;
 $xor44$i272 = $and31$i262 ^ $xor44$i427;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i272;
 $xor46$i273 = $and32$i263 ^ $xor46$i428;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i273;
 $xor48$i274 = $and33$i264 ^ $xor48$i429;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i274;
 $xor50$i275 = $and34$i265 ^ $xor50$i430;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i275;
 $xor52$i276 = $and35$i266 ^ $xor52$i431;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i276;
 $xor54$i277 = $and36$i267 ^ $xor54$i432;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i277;
 $xor56$i278 = $and37$i268 ^ $xor56$i433;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i278;
 $252 = HEAP32[$arrayidx1$i$i1394>>2]|0;
 $253 = HEAP32[$arrayidx2$i$i1238>>2]|0;
 $254 = HEAP32[$arrayidx3$i$i1239>>2]|0;
 $255 = HEAP32[$arrayidx4$i$i1240>>2]|0;
 $256 = HEAP32[$arrayidx5$i$i1241>>2]|0;
 $257 = HEAP32[$arrayidx6$i$i1242>>2]|0;
 $258 = HEAP32[$arrayidx7$i$i1243>>2]|0;
 $259 = HEAP32[$arrayidx8$i$i1244>>2]|0;
 $260 = HEAP32[$arrayidx9$i$i1245>>2]|0;
 $sub$i88 = (0 - ($xor38$i269))|0;
 $sub10$i = (0 - ($xor40$i270))|0;
 $sub11$i = (0 - ($xor42$i271))|0;
 $sub12$i = (0 - ($xor44$i272))|0;
 $sub13$i = (0 - ($xor46$i273))|0;
 $sub14$i = (0 - ($xor48$i274))|0;
 $sub15$i = (0 - ($xor50$i275))|0;
 $sub16$i = (0 - ($xor52$i276))|0;
 $sub17$i = (0 - ($xor54$i277))|0;
 $sub18$i = (0 - ($xor56$i278))|0;
 $xor$i$i = $xor38$i220 ^ $xor38$i$i167;
 $xor20$i$i = $xor40$i221 ^ $xor40$i$i168;
 $xor21$i$i = $xor42$i222 ^ $xor42$i$i169;
 $xor22$i$i = $xor44$i223 ^ $xor44$i$i170;
 $xor23$i$i = $xor46$i224 ^ $xor46$i$i171;
 $xor24$i$i = $xor48$i225 ^ $xor48$i$i172;
 $xor25$i$i = $xor50$i226 ^ $xor50$i$i173;
 $xor26$i$i = $xor52$i227 ^ $xor52$i$i174;
 $xor27$i$i = $xor54$i228 ^ $xor54$i$i175;
 $xor28$i$i = $xor56$i229 ^ $xor56$i$i176;
 $and$i$i = $xor$i$i & $sub;
 $and29$i$i = $xor20$i$i & $sub;
 $and30$i$i = $xor21$i$i & $sub;
 $and31$i$i = $xor22$i$i & $sub;
 $and32$i$i = $xor23$i$i & $sub;
 $and33$i$i = $xor24$i$i & $sub;
 $and34$i$i = $xor25$i$i & $sub;
 $and35$i$i = $xor26$i$i & $sub;
 $and36$i$i = $xor27$i$i & $sub;
 $and37$i$i = $xor28$i$i & $sub;
 $xor38$i$i = $and$i$i ^ $xor38$i$i167;
 HEAP32[$t>>2] = $xor38$i$i;
 $xor40$i$i = $and29$i$i ^ $xor40$i$i168;
 HEAP32[$arrayidx1$i$i1394>>2] = $xor40$i$i;
 $xor42$i$i = $and30$i$i ^ $xor42$i$i169;
 HEAP32[$arrayidx2$i$i1238>>2] = $xor42$i$i;
 $xor44$i$i = $and31$i$i ^ $xor44$i$i170;
 HEAP32[$arrayidx3$i$i1239>>2] = $xor44$i$i;
 $xor46$i$i = $and32$i$i ^ $xor46$i$i171;
 HEAP32[$arrayidx4$i$i1240>>2] = $xor46$i$i;
 $xor48$i$i = $and33$i$i ^ $xor48$i$i172;
 HEAP32[$arrayidx5$i$i1241>>2] = $xor48$i$i;
 $xor50$i$i = $and34$i$i ^ $xor50$i$i173;
 HEAP32[$arrayidx6$i$i1242>>2] = $xor50$i$i;
 $xor52$i$i = $and35$i$i ^ $xor52$i$i174;
 HEAP32[$arrayidx7$i$i1243>>2] = $xor52$i$i;
 $xor54$i$i = $and36$i$i ^ $xor54$i$i175;
 HEAP32[$arrayidx8$i$i1244>>2] = $xor54$i$i;
 $xor56$i$i = $and37$i$i ^ $xor56$i$i176;
 HEAP32[$arrayidx9$i$i1245>>2] = $xor56$i$i;
 $xor20$i = $252 ^ $xor40$i221;
 $xor21$i = $253 ^ $xor42$i222;
 $xor22$i = $254 ^ $xor44$i223;
 $xor23$i = $255 ^ $xor46$i224;
 $xor24$i = $256 ^ $xor48$i225;
 $xor25$i = $257 ^ $xor50$i226;
 $xor26$i = $258 ^ $xor52$i227;
 $xor27$i = $259 ^ $xor54$i228;
 $xor28$i = $260 ^ $xor56$i229;
 $and29$i = $xor20$i & $sub;
 $and30$i = $xor21$i & $sub;
 $and31$i = $xor22$i & $sub;
 $and32$i = $xor23$i & $sub;
 $and33$i = $xor24$i & $sub;
 $and34$i = $xor25$i & $sub;
 $and35$i = $xor26$i & $sub;
 $and36$i = $xor27$i & $sub;
 $and37$i = $xor28$i & $sub;
 $xor38$i = $and$i$i ^ $xor38$i220;
 HEAP32[$arraydecay1$i>>2] = $xor38$i;
 $xor40$i = $and29$i ^ $xor40$i221;
 HEAP32[$arrayidx1$i3$i>>2] = $xor40$i;
 $xor42$i = $and30$i ^ $xor42$i222;
 HEAP32[$arrayidx2$i1291>>2] = $xor42$i;
 $xor44$i = $and31$i ^ $xor44$i223;
 HEAP32[$arrayidx3$i1292>>2] = $xor44$i;
 $xor46$i = $and32$i ^ $xor46$i224;
 HEAP32[$arrayidx4$i1293>>2] = $xor46$i;
 $xor48$i = $and33$i ^ $xor48$i225;
 HEAP32[$arrayidx5$i1294>>2] = $xor48$i;
 $xor50$i = $and34$i ^ $xor50$i226;
 HEAP32[$arrayidx6$i1295>>2] = $xor50$i;
 $xor52$i = $and35$i ^ $xor52$i227;
 HEAP32[$arrayidx7$i1296>>2] = $xor52$i;
 $xor54$i = $and36$i ^ $xor54$i228;
 HEAP32[$arrayidx8$i1297>>2] = $xor54$i;
 $xor56$i = $and37$i ^ $xor56$i229;
 HEAP32[$arrayidx9$i1298>>2] = $xor56$i;
 $xor$i48 = $xor38$i269 ^ $sub$i88;
 $xor20$i49 = $xor40$i270 ^ $sub10$i;
 $xor21$i50 = $xor42$i271 ^ $sub11$i;
 $xor22$i51 = $xor44$i272 ^ $sub12$i;
 $xor23$i52 = $xor46$i273 ^ $sub13$i;
 $xor24$i53 = $xor48$i274 ^ $sub14$i;
 $xor25$i54 = $xor50$i275 ^ $sub15$i;
 $xor26$i55 = $xor52$i276 ^ $sub16$i;
 $xor27$i56 = $xor54$i277 ^ $sub17$i;
 $xor28$i57 = $xor56$i278 ^ $sub18$i;
 $and$i59 = $xor$i48 & $sub;
 $and29$i60 = $xor20$i49 & $sub;
 $and30$i61 = $xor21$i50 & $sub;
 $and31$i62 = $xor22$i51 & $sub;
 $and32$i63 = $xor23$i52 & $sub;
 $and33$i64 = $xor24$i53 & $sub;
 $and34$i65 = $xor25$i54 & $sub;
 $and35$i66 = $xor26$i55 & $sub;
 $and36$i67 = $xor27$i56 & $sub;
 $and37$i68 = $xor28$i57 & $sub;
 $xor38$i69 = $and$i59 ^ $xor38$i269;
 HEAP32[$arraydecay7$i1288>>2] = $xor38$i69;
 $xor40$i70 = $and29$i60 ^ $xor40$i270;
 HEAP32[$arrayidx1$i1339>>2] = $xor40$i70;
 $xor42$i71 = $and30$i61 ^ $xor42$i271;
 HEAP32[$arrayidx2$i1340>>2] = $xor42$i71;
 $xor44$i72 = $and31$i62 ^ $xor44$i272;
 HEAP32[$arrayidx3$i1341>>2] = $xor44$i72;
 $xor46$i73 = $and32$i63 ^ $xor46$i273;
 HEAP32[$arrayidx4$i1342>>2] = $xor46$i73;
 $xor48$i74 = $and33$i64 ^ $xor48$i274;
 HEAP32[$arrayidx5$i1343>>2] = $xor48$i74;
 $xor50$i75 = $and34$i65 ^ $xor50$i275;
 HEAP32[$arrayidx6$i1344>>2] = $xor50$i75;
 $xor52$i76 = $and35$i66 ^ $xor52$i276;
 HEAP32[$arrayidx7$i1345>>2] = $xor52$i76;
 $xor54$i77 = $and36$i67 ^ $xor54$i277;
 HEAP32[$arrayidx8$i1346>>2] = $xor54$i77;
 $xor56$i78 = $and37$i68 ^ $xor56$i278;
 HEAP32[$arrayidx9$i1347>>2] = $xor56$i78;
 return;
}
function _ge_tobytes($s,$h) {
 $s = $s|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $arraydecay1 = 0, $arraydecay6 = 0, $arrayidx = 0, $recip = 0, $s$i = 0, $x = 0, $xor4 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $s$i = sp + 144|0;
 $recip = sp + 96|0;
 $x = sp + 48|0;
 $y = sp;
 $arraydecay1 = ((($h)) + 80|0);
 _fe_invert($recip,$arraydecay1);
 _fe_mul($x,$h,$recip);
 $arraydecay6 = ((($h)) + 40|0);
 _fe_mul($y,$arraydecay6,$recip);
 _fe_tobytes($s,$y);
 _fe_tobytes($s$i,$x);
 $0 = HEAP8[$s$i>>0]|0;
 $1 = ($0 << 7)&255;
 $arrayidx = ((($s)) + 31|0);
 $2 = HEAP8[$arrayidx>>0]|0;
 $xor4 = $2 ^ $1;
 HEAP8[$arrayidx>>0] = $xor4;
 STACKTOP = sp;return;
}
function _sc_reduce($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $add$ptr15$idx = 0;
 var $add$ptr15$idx$val = 0, $add$ptr15$idx504 = 0, $add$ptr15$idx504$val = 0, $add$ptr23$idx = 0, $add$ptr23$idx$val = 0, $add$ptr23$idx503 = 0, $add$ptr23$idx503$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx502 = 0, $add$ptr27$idx502$val = 0, $add$ptr27$val = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx505 = 0, $add$ptr3$idx505$val = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx501 = 0;
 var $add$ptr34$idx501$val = 0, $add$ptr46$idx = 0, $add$ptr46$idx$val = 0, $add$ptr46$idx500 = 0, $add$ptr46$idx500$val = 0, $add$ptr54$idx = 0, $add$ptr54$idx$val = 0, $add$ptr54$idx499 = 0, $add$ptr54$idx499$val = 0, $add$ptr58 = 0, $add$ptr58$idx = 0, $add$ptr58$idx$val = 0, $add$ptr58$idx498 = 0, $add$ptr58$idx498$val = 0, $add$ptr58$val = 0, $add$ptr65$idx = 0, $add$ptr65$idx$val = 0, $add$ptr65$idx497 = 0, $add$ptr65$idx497$val = 0, $add$ptr77$idx = 0;
 var $add$ptr77$idx$val = 0, $add$ptr77$idx496 = 0, $add$ptr77$idx496$val = 0, $arrayidx1$i = 0, $arrayidx1$i515 = 0, $arrayidx1$i535 = 0, $arrayidx1$i548 = 0, $arrayidx1$i568 = 0, $arrayidx1$i595 = 0, $arrayidx1$i615 = 0, $arrayidx1$i628 = 0, $arrayidx1$i648 = 0, $arrayidx1$i675 = 0, $arrayidx1$i695 = 0, $arrayidx1$i708 = 0, $arrayidx1$i728 = 0, $arrayidx3$i = 0, $arrayidx3$i519 = 0, $arrayidx3$i539 = 0, $arrayidx3$i552 = 0;
 var $arrayidx3$i572 = 0, $arrayidx3$i599 = 0, $arrayidx3$i619 = 0, $arrayidx3$i632 = 0, $arrayidx3$i652 = 0, $arrayidx3$i679 = 0, $arrayidx3$i699 = 0, $arrayidx3$i712 = 0, $arrayidx3$i732 = 0, $arrayidx7$i = 0, $arrayidx7$i523 = 0, $arrayidx7$i543 = 0, $arrayidx7$i556 = 0, $arrayidx7$i576 = 0, $arrayidx7$i603 = 0, $arrayidx7$i623 = 0, $arrayidx7$i636 = 0, $arrayidx7$i656 = 0, $arrayidx7$i683 = 0, $arrayidx7$i703 = 0;
 var $arrayidx7$i716 = 0, $arrayidx7$i736 = 0, $s$idx = 0, $s$idx$val = 0, $s$idx506 = 0, $s$idx506$val = 0, $s$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$val = HEAP8[$s>>0]|0;
 $s$idx = ((($s)) + 1|0);
 $s$idx$val = HEAP8[$s$idx>>0]|0;
 $s$idx506 = ((($s)) + 2|0);
 $s$idx506$val = HEAP8[$s$idx506>>0]|0;
 $0 = $s$val&255;
 $1 = $s$idx$val&255;
 $2 = (_bitshift64Shl(($1|0),0,8)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2 | $0;
 $5 = $s$idx506$val&255;
 $6 = (_bitshift64Shl(($5|0),0,16)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2031616;
 $9 = $4 | $8;
 $arrayidx1$i728 = ((($s)) + 3|0);
 $10 = HEAP8[$arrayidx1$i728>>0]|0;
 $11 = $10&255;
 $12 = (_bitshift64Shl(($11|0),0,8)|0);
 $13 = (getTempRet0() | 0);
 $14 = $12 | $5;
 $arrayidx3$i732 = ((($s)) + 4|0);
 $15 = HEAP8[$arrayidx3$i732>>0]|0;
 $16 = $15&255;
 $17 = (_bitshift64Shl(($16|0),0,16)|0);
 $18 = (getTempRet0() | 0);
 $19 = $14 | $17;
 $20 = $13 | $18;
 $arrayidx7$i736 = ((($s)) + 5|0);
 $21 = HEAP8[$arrayidx7$i736>>0]|0;
 $22 = $21&255;
 $23 = (_bitshift64Shl(($22|0),0,24)|0);
 $24 = (getTempRet0() | 0);
 $25 = $19 | $23;
 $26 = $20 | $24;
 $27 = (_bitshift64Lshr(($25|0),($26|0),5)|0);
 $28 = (getTempRet0() | 0);
 $29 = $27 & 2097151;
 $add$ptr3$idx = ((($s)) + 6|0);
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx>>0]|0;
 $add$ptr3$idx505 = ((($s)) + 7|0);
 $add$ptr3$idx505$val = HEAP8[$add$ptr3$idx505>>0]|0;
 $30 = $add$ptr3$idx$val&255;
 $31 = (_bitshift64Shl(($30|0),0,8)|0);
 $32 = (getTempRet0() | 0);
 $33 = $31 | $22;
 $34 = $add$ptr3$idx505$val&255;
 $35 = (_bitshift64Shl(($34|0),0,16)|0);
 $36 = (getTempRet0() | 0);
 $37 = $33 | $35;
 $38 = $32 | $36;
 $39 = (_bitshift64Lshr(($37|0),($38|0),2)|0);
 $40 = (getTempRet0() | 0);
 $41 = $39 & 2097151;
 $arrayidx1$i708 = ((($s)) + 8|0);
 $42 = HEAP8[$arrayidx1$i708>>0]|0;
 $43 = $42&255;
 $44 = (_bitshift64Shl(($43|0),0,8)|0);
 $45 = (getTempRet0() | 0);
 $46 = $44 | $34;
 $arrayidx3$i712 = ((($s)) + 9|0);
 $47 = HEAP8[$arrayidx3$i712>>0]|0;
 $48 = $47&255;
 $49 = (_bitshift64Shl(($48|0),0,16)|0);
 $50 = (getTempRet0() | 0);
 $51 = $46 | $49;
 $52 = $45 | $50;
 $arrayidx7$i716 = ((($s)) + 10|0);
 $53 = HEAP8[$arrayidx7$i716>>0]|0;
 $54 = $53&255;
 $55 = (_bitshift64Shl(($54|0),0,24)|0);
 $56 = (getTempRet0() | 0);
 $57 = $51 | $55;
 $58 = $52 | $56;
 $59 = (_bitshift64Lshr(($57|0),($58|0),7)|0);
 $60 = (getTempRet0() | 0);
 $61 = $59 & 2097151;
 $arrayidx1$i695 = ((($s)) + 11|0);
 $62 = HEAP8[$arrayidx1$i695>>0]|0;
 $63 = $62&255;
 $64 = (_bitshift64Shl(($63|0),0,8)|0);
 $65 = (getTempRet0() | 0);
 $66 = $64 | $54;
 $arrayidx3$i699 = ((($s)) + 12|0);
 $67 = HEAP8[$arrayidx3$i699>>0]|0;
 $68 = $67&255;
 $69 = (_bitshift64Shl(($68|0),0,16)|0);
 $70 = (getTempRet0() | 0);
 $71 = $66 | $69;
 $72 = $65 | $70;
 $arrayidx7$i703 = ((($s)) + 13|0);
 $73 = HEAP8[$arrayidx7$i703>>0]|0;
 $74 = $73&255;
 $75 = (_bitshift64Shl(($74|0),0,24)|0);
 $76 = (getTempRet0() | 0);
 $77 = $71 | $75;
 $78 = $72 | $76;
 $79 = (_bitshift64Lshr(($77|0),($78|0),4)|0);
 $80 = (getTempRet0() | 0);
 $81 = $79 & 2097151;
 $add$ptr15$idx = ((($s)) + 14|0);
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx>>0]|0;
 $add$ptr15$idx504 = ((($s)) + 15|0);
 $add$ptr15$idx504$val = HEAP8[$add$ptr15$idx504>>0]|0;
 $82 = $add$ptr15$idx$val&255;
 $83 = (_bitshift64Shl(($82|0),0,8)|0);
 $84 = (getTempRet0() | 0);
 $85 = $83 | $74;
 $86 = $add$ptr15$idx504$val&255;
 $87 = (_bitshift64Shl(($86|0),0,16)|0);
 $88 = (getTempRet0() | 0);
 $89 = $85 | $87;
 $90 = $84 | $88;
 $91 = (_bitshift64Lshr(($89|0),($90|0),1)|0);
 $92 = (getTempRet0() | 0);
 $93 = $91 & 2097151;
 $arrayidx1$i675 = ((($s)) + 16|0);
 $94 = HEAP8[$arrayidx1$i675>>0]|0;
 $95 = $94&255;
 $96 = (_bitshift64Shl(($95|0),0,8)|0);
 $97 = (getTempRet0() | 0);
 $98 = $96 | $86;
 $arrayidx3$i679 = ((($s)) + 17|0);
 $99 = HEAP8[$arrayidx3$i679>>0]|0;
 $100 = $99&255;
 $101 = (_bitshift64Shl(($100|0),0,16)|0);
 $102 = (getTempRet0() | 0);
 $103 = $98 | $101;
 $104 = $97 | $102;
 $arrayidx7$i683 = ((($s)) + 18|0);
 $105 = HEAP8[$arrayidx7$i683>>0]|0;
 $106 = $105&255;
 $107 = (_bitshift64Shl(($106|0),0,24)|0);
 $108 = (getTempRet0() | 0);
 $109 = $103 | $107;
 $110 = $104 | $108;
 $111 = (_bitshift64Lshr(($109|0),($110|0),6)|0);
 $112 = (getTempRet0() | 0);
 $113 = $111 & 2097151;
 $add$ptr23$idx = ((($s)) + 19|0);
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx>>0]|0;
 $add$ptr23$idx503 = ((($s)) + 20|0);
 $add$ptr23$idx503$val = HEAP8[$add$ptr23$idx503>>0]|0;
 $114 = $add$ptr23$idx$val&255;
 $115 = (_bitshift64Shl(($114|0),0,8)|0);
 $116 = (getTempRet0() | 0);
 $117 = $115 | $106;
 $118 = $add$ptr23$idx503$val&255;
 $119 = (_bitshift64Shl(($118|0),0,16)|0);
 $120 = (getTempRet0() | 0);
 $121 = $117 | $119;
 $122 = $116 | $120;
 $123 = (_bitshift64Lshr(($121|0),($122|0),3)|0);
 $124 = (getTempRet0() | 0);
 $add$ptr27 = ((($s)) + 21|0);
 $add$ptr27$val = HEAP8[$add$ptr27>>0]|0;
 $add$ptr27$idx = ((($s)) + 22|0);
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx>>0]|0;
 $add$ptr27$idx502 = ((($s)) + 23|0);
 $add$ptr27$idx502$val = HEAP8[$add$ptr27$idx502>>0]|0;
 $125 = $add$ptr27$val&255;
 $126 = $add$ptr27$idx$val&255;
 $127 = (_bitshift64Shl(($126|0),0,8)|0);
 $128 = (getTempRet0() | 0);
 $129 = $127 | $125;
 $130 = $add$ptr27$idx502$val&255;
 $131 = (_bitshift64Shl(($130|0),0,16)|0);
 $132 = (getTempRet0() | 0);
 $133 = $131 & 2031616;
 $134 = $129 | $133;
 $arrayidx1$i648 = ((($s)) + 24|0);
 $135 = HEAP8[$arrayidx1$i648>>0]|0;
 $136 = $135&255;
 $137 = (_bitshift64Shl(($136|0),0,8)|0);
 $138 = (getTempRet0() | 0);
 $139 = $137 | $130;
 $arrayidx3$i652 = ((($s)) + 25|0);
 $140 = HEAP8[$arrayidx3$i652>>0]|0;
 $141 = $140&255;
 $142 = (_bitshift64Shl(($141|0),0,16)|0);
 $143 = (getTempRet0() | 0);
 $144 = $139 | $142;
 $145 = $138 | $143;
 $arrayidx7$i656 = ((($s)) + 26|0);
 $146 = HEAP8[$arrayidx7$i656>>0]|0;
 $147 = $146&255;
 $148 = (_bitshift64Shl(($147|0),0,24)|0);
 $149 = (getTempRet0() | 0);
 $150 = $144 | $148;
 $151 = $145 | $149;
 $152 = (_bitshift64Lshr(($150|0),($151|0),5)|0);
 $153 = (getTempRet0() | 0);
 $154 = $152 & 2097151;
 $add$ptr34$idx = ((($s)) + 27|0);
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx>>0]|0;
 $add$ptr34$idx501 = ((($s)) + 28|0);
 $add$ptr34$idx501$val = HEAP8[$add$ptr34$idx501>>0]|0;
 $155 = $add$ptr34$idx$val&255;
 $156 = (_bitshift64Shl(($155|0),0,8)|0);
 $157 = (getTempRet0() | 0);
 $158 = $156 | $147;
 $159 = $add$ptr34$idx501$val&255;
 $160 = (_bitshift64Shl(($159|0),0,16)|0);
 $161 = (getTempRet0() | 0);
 $162 = $158 | $160;
 $163 = $157 | $161;
 $164 = (_bitshift64Lshr(($162|0),($163|0),2)|0);
 $165 = (getTempRet0() | 0);
 $166 = $164 & 2097151;
 $arrayidx1$i628 = ((($s)) + 29|0);
 $167 = HEAP8[$arrayidx1$i628>>0]|0;
 $168 = $167&255;
 $169 = (_bitshift64Shl(($168|0),0,8)|0);
 $170 = (getTempRet0() | 0);
 $171 = $169 | $159;
 $arrayidx3$i632 = ((($s)) + 30|0);
 $172 = HEAP8[$arrayidx3$i632>>0]|0;
 $173 = $172&255;
 $174 = (_bitshift64Shl(($173|0),0,16)|0);
 $175 = (getTempRet0() | 0);
 $176 = $171 | $174;
 $177 = $170 | $175;
 $arrayidx7$i636 = ((($s)) + 31|0);
 $178 = HEAP8[$arrayidx7$i636>>0]|0;
 $179 = $178&255;
 $180 = (_bitshift64Shl(($179|0),0,24)|0);
 $181 = (getTempRet0() | 0);
 $182 = $176 | $180;
 $183 = $177 | $181;
 $184 = (_bitshift64Lshr(($182|0),($183|0),7)|0);
 $185 = (getTempRet0() | 0);
 $186 = $184 & 2097151;
 $arrayidx1$i615 = ((($s)) + 32|0);
 $187 = HEAP8[$arrayidx1$i615>>0]|0;
 $188 = $187&255;
 $189 = (_bitshift64Shl(($188|0),0,8)|0);
 $190 = (getTempRet0() | 0);
 $191 = $189 | $179;
 $arrayidx3$i619 = ((($s)) + 33|0);
 $192 = HEAP8[$arrayidx3$i619>>0]|0;
 $193 = $192&255;
 $194 = (_bitshift64Shl(($193|0),0,16)|0);
 $195 = (getTempRet0() | 0);
 $196 = $191 | $194;
 $197 = $190 | $195;
 $arrayidx7$i623 = ((($s)) + 34|0);
 $198 = HEAP8[$arrayidx7$i623>>0]|0;
 $199 = $198&255;
 $200 = (_bitshift64Shl(($199|0),0,24)|0);
 $201 = (getTempRet0() | 0);
 $202 = $196 | $200;
 $203 = $197 | $201;
 $204 = (_bitshift64Lshr(($202|0),($203|0),4)|0);
 $205 = (getTempRet0() | 0);
 $206 = $204 & 2097151;
 $add$ptr46$idx = ((($s)) + 35|0);
 $add$ptr46$idx$val = HEAP8[$add$ptr46$idx>>0]|0;
 $add$ptr46$idx500 = ((($s)) + 36|0);
 $add$ptr46$idx500$val = HEAP8[$add$ptr46$idx500>>0]|0;
 $207 = $add$ptr46$idx$val&255;
 $208 = (_bitshift64Shl(($207|0),0,8)|0);
 $209 = (getTempRet0() | 0);
 $210 = $208 | $199;
 $211 = $add$ptr46$idx500$val&255;
 $212 = (_bitshift64Shl(($211|0),0,16)|0);
 $213 = (getTempRet0() | 0);
 $214 = $210 | $212;
 $215 = $209 | $213;
 $216 = (_bitshift64Lshr(($214|0),($215|0),1)|0);
 $217 = (getTempRet0() | 0);
 $218 = $216 & 2097151;
 $arrayidx1$i595 = ((($s)) + 37|0);
 $219 = HEAP8[$arrayidx1$i595>>0]|0;
 $220 = $219&255;
 $221 = (_bitshift64Shl(($220|0),0,8)|0);
 $222 = (getTempRet0() | 0);
 $223 = $221 | $211;
 $arrayidx3$i599 = ((($s)) + 38|0);
 $224 = HEAP8[$arrayidx3$i599>>0]|0;
 $225 = $224&255;
 $226 = (_bitshift64Shl(($225|0),0,16)|0);
 $227 = (getTempRet0() | 0);
 $228 = $223 | $226;
 $229 = $222 | $227;
 $arrayidx7$i603 = ((($s)) + 39|0);
 $230 = HEAP8[$arrayidx7$i603>>0]|0;
 $231 = $230&255;
 $232 = (_bitshift64Shl(($231|0),0,24)|0);
 $233 = (getTempRet0() | 0);
 $234 = $228 | $232;
 $235 = $229 | $233;
 $236 = (_bitshift64Lshr(($234|0),($235|0),6)|0);
 $237 = (getTempRet0() | 0);
 $238 = $236 & 2097151;
 $add$ptr54$idx = ((($s)) + 40|0);
 $add$ptr54$idx$val = HEAP8[$add$ptr54$idx>>0]|0;
 $add$ptr54$idx499 = ((($s)) + 41|0);
 $add$ptr54$idx499$val = HEAP8[$add$ptr54$idx499>>0]|0;
 $239 = $add$ptr54$idx$val&255;
 $240 = (_bitshift64Shl(($239|0),0,8)|0);
 $241 = (getTempRet0() | 0);
 $242 = $240 | $231;
 $243 = $add$ptr54$idx499$val&255;
 $244 = (_bitshift64Shl(($243|0),0,16)|0);
 $245 = (getTempRet0() | 0);
 $246 = $242 | $244;
 $247 = $241 | $245;
 $248 = (_bitshift64Lshr(($246|0),($247|0),3)|0);
 $249 = (getTempRet0() | 0);
 $add$ptr58 = ((($s)) + 42|0);
 $add$ptr58$val = HEAP8[$add$ptr58>>0]|0;
 $add$ptr58$idx = ((($s)) + 43|0);
 $add$ptr58$idx$val = HEAP8[$add$ptr58$idx>>0]|0;
 $add$ptr58$idx498 = ((($s)) + 44|0);
 $add$ptr58$idx498$val = HEAP8[$add$ptr58$idx498>>0]|0;
 $250 = $add$ptr58$val&255;
 $251 = $add$ptr58$idx$val&255;
 $252 = (_bitshift64Shl(($251|0),0,8)|0);
 $253 = (getTempRet0() | 0);
 $254 = $252 | $250;
 $255 = $add$ptr58$idx498$val&255;
 $256 = (_bitshift64Shl(($255|0),0,16)|0);
 $257 = (getTempRet0() | 0);
 $258 = $256 & 2031616;
 $259 = $254 | $258;
 $arrayidx1$i568 = ((($s)) + 45|0);
 $260 = HEAP8[$arrayidx1$i568>>0]|0;
 $261 = $260&255;
 $262 = (_bitshift64Shl(($261|0),0,8)|0);
 $263 = (getTempRet0() | 0);
 $264 = $262 | $255;
 $arrayidx3$i572 = ((($s)) + 46|0);
 $265 = HEAP8[$arrayidx3$i572>>0]|0;
 $266 = $265&255;
 $267 = (_bitshift64Shl(($266|0),0,16)|0);
 $268 = (getTempRet0() | 0);
 $269 = $264 | $267;
 $270 = $263 | $268;
 $arrayidx7$i576 = ((($s)) + 47|0);
 $271 = HEAP8[$arrayidx7$i576>>0]|0;
 $272 = $271&255;
 $273 = (_bitshift64Shl(($272|0),0,24)|0);
 $274 = (getTempRet0() | 0);
 $275 = $269 | $273;
 $276 = $270 | $274;
 $277 = (_bitshift64Lshr(($275|0),($276|0),5)|0);
 $278 = (getTempRet0() | 0);
 $279 = $277 & 2097151;
 $add$ptr65$idx = ((($s)) + 48|0);
 $add$ptr65$idx$val = HEAP8[$add$ptr65$idx>>0]|0;
 $add$ptr65$idx497 = ((($s)) + 49|0);
 $add$ptr65$idx497$val = HEAP8[$add$ptr65$idx497>>0]|0;
 $280 = $add$ptr65$idx$val&255;
 $281 = (_bitshift64Shl(($280|0),0,8)|0);
 $282 = (getTempRet0() | 0);
 $283 = $281 | $272;
 $284 = $add$ptr65$idx497$val&255;
 $285 = (_bitshift64Shl(($284|0),0,16)|0);
 $286 = (getTempRet0() | 0);
 $287 = $283 | $285;
 $288 = $282 | $286;
 $289 = (_bitshift64Lshr(($287|0),($288|0),2)|0);
 $290 = (getTempRet0() | 0);
 $291 = $289 & 2097151;
 $arrayidx1$i548 = ((($s)) + 50|0);
 $292 = HEAP8[$arrayidx1$i548>>0]|0;
 $293 = $292&255;
 $294 = (_bitshift64Shl(($293|0),0,8)|0);
 $295 = (getTempRet0() | 0);
 $296 = $294 | $284;
 $arrayidx3$i552 = ((($s)) + 51|0);
 $297 = HEAP8[$arrayidx3$i552>>0]|0;
 $298 = $297&255;
 $299 = (_bitshift64Shl(($298|0),0,16)|0);
 $300 = (getTempRet0() | 0);
 $301 = $296 | $299;
 $302 = $295 | $300;
 $arrayidx7$i556 = ((($s)) + 52|0);
 $303 = HEAP8[$arrayidx7$i556>>0]|0;
 $304 = $303&255;
 $305 = (_bitshift64Shl(($304|0),0,24)|0);
 $306 = (getTempRet0() | 0);
 $307 = $301 | $305;
 $308 = $302 | $306;
 $309 = (_bitshift64Lshr(($307|0),($308|0),7)|0);
 $310 = (getTempRet0() | 0);
 $311 = $309 & 2097151;
 $arrayidx1$i535 = ((($s)) + 53|0);
 $312 = HEAP8[$arrayidx1$i535>>0]|0;
 $313 = $312&255;
 $314 = (_bitshift64Shl(($313|0),0,8)|0);
 $315 = (getTempRet0() | 0);
 $316 = $314 | $304;
 $arrayidx3$i539 = ((($s)) + 54|0);
 $317 = HEAP8[$arrayidx3$i539>>0]|0;
 $318 = $317&255;
 $319 = (_bitshift64Shl(($318|0),0,16)|0);
 $320 = (getTempRet0() | 0);
 $321 = $316 | $319;
 $322 = $315 | $320;
 $arrayidx7$i543 = ((($s)) + 55|0);
 $323 = HEAP8[$arrayidx7$i543>>0]|0;
 $324 = $323&255;
 $325 = (_bitshift64Shl(($324|0),0,24)|0);
 $326 = (getTempRet0() | 0);
 $327 = $321 | $325;
 $328 = $322 | $326;
 $329 = (_bitshift64Lshr(($327|0),($328|0),4)|0);
 $330 = (getTempRet0() | 0);
 $331 = $329 & 2097151;
 $add$ptr77$idx = ((($s)) + 56|0);
 $add$ptr77$idx$val = HEAP8[$add$ptr77$idx>>0]|0;
 $add$ptr77$idx496 = ((($s)) + 57|0);
 $add$ptr77$idx496$val = HEAP8[$add$ptr77$idx496>>0]|0;
 $332 = $add$ptr77$idx$val&255;
 $333 = (_bitshift64Shl(($332|0),0,8)|0);
 $334 = (getTempRet0() | 0);
 $335 = $333 | $324;
 $336 = $add$ptr77$idx496$val&255;
 $337 = (_bitshift64Shl(($336|0),0,16)|0);
 $338 = (getTempRet0() | 0);
 $339 = $335 | $337;
 $340 = $334 | $338;
 $341 = (_bitshift64Lshr(($339|0),($340|0),1)|0);
 $342 = (getTempRet0() | 0);
 $343 = $341 & 2097151;
 $arrayidx1$i515 = ((($s)) + 58|0);
 $344 = HEAP8[$arrayidx1$i515>>0]|0;
 $345 = $344&255;
 $346 = (_bitshift64Shl(($345|0),0,8)|0);
 $347 = (getTempRet0() | 0);
 $348 = $346 | $336;
 $arrayidx3$i519 = ((($s)) + 59|0);
 $349 = HEAP8[$arrayidx3$i519>>0]|0;
 $350 = $349&255;
 $351 = (_bitshift64Shl(($350|0),0,16)|0);
 $352 = (getTempRet0() | 0);
 $353 = $348 | $351;
 $354 = $347 | $352;
 $arrayidx7$i523 = ((($s)) + 60|0);
 $355 = HEAP8[$arrayidx7$i523>>0]|0;
 $356 = $355&255;
 $357 = (_bitshift64Shl(($356|0),0,24)|0);
 $358 = (getTempRet0() | 0);
 $359 = $353 | $357;
 $360 = $354 | $358;
 $361 = (_bitshift64Lshr(($359|0),($360|0),6)|0);
 $362 = (getTempRet0() | 0);
 $363 = $361 & 2097151;
 $arrayidx1$i = ((($s)) + 61|0);
 $364 = HEAP8[$arrayidx1$i>>0]|0;
 $365 = $364&255;
 $366 = (_bitshift64Shl(($365|0),0,8)|0);
 $367 = (getTempRet0() | 0);
 $368 = $366 | $356;
 $arrayidx3$i = ((($s)) + 62|0);
 $369 = HEAP8[$arrayidx3$i>>0]|0;
 $370 = $369&255;
 $371 = (_bitshift64Shl(($370|0),0,16)|0);
 $372 = (getTempRet0() | 0);
 $373 = $368 | $371;
 $374 = $367 | $372;
 $arrayidx7$i = ((($s)) + 63|0);
 $375 = HEAP8[$arrayidx7$i>>0]|0;
 $376 = $375&255;
 $377 = (_bitshift64Shl(($376|0),0,24)|0);
 $378 = (getTempRet0() | 0);
 $379 = $373 | $377;
 $380 = $374 | $378;
 $381 = (_bitshift64Lshr(($379|0),($380|0),3)|0);
 $382 = (getTempRet0() | 0);
 $383 = (___muldi3(($381|0),($382|0),666643,0)|0);
 $384 = (getTempRet0() | 0);
 $385 = (___muldi3(($381|0),($382|0),470296,0)|0);
 $386 = (getTempRet0() | 0);
 $387 = (___muldi3(($381|0),($382|0),654183,0)|0);
 $388 = (getTempRet0() | 0);
 $389 = (___muldi3(($381|0),($382|0),-997805,-1)|0);
 $390 = (getTempRet0() | 0);
 $391 = (___muldi3(($381|0),($382|0),136657,0)|0);
 $392 = (getTempRet0() | 0);
 $393 = (___muldi3(($381|0),($382|0),-683901,-1)|0);
 $394 = (getTempRet0() | 0);
 $395 = (_i64Add(($393|0),($394|0),($259|0),($253|0))|0);
 $396 = (getTempRet0() | 0);
 $397 = (___muldi3(($363|0),0,666643,0)|0);
 $398 = (getTempRet0() | 0);
 $399 = (___muldi3(($363|0),0,470296,0)|0);
 $400 = (getTempRet0() | 0);
 $401 = (___muldi3(($363|0),0,654183,0)|0);
 $402 = (getTempRet0() | 0);
 $403 = (___muldi3(($363|0),0,-997805,-1)|0);
 $404 = (getTempRet0() | 0);
 $405 = (___muldi3(($363|0),0,136657,0)|0);
 $406 = (getTempRet0() | 0);
 $407 = (___muldi3(($363|0),0,-683901,-1)|0);
 $408 = (getTempRet0() | 0);
 $409 = (___muldi3(($343|0),0,666643,0)|0);
 $410 = (getTempRet0() | 0);
 $411 = (___muldi3(($343|0),0,470296,0)|0);
 $412 = (getTempRet0() | 0);
 $413 = (___muldi3(($343|0),0,654183,0)|0);
 $414 = (getTempRet0() | 0);
 $415 = (___muldi3(($343|0),0,-997805,-1)|0);
 $416 = (getTempRet0() | 0);
 $417 = (___muldi3(($343|0),0,136657,0)|0);
 $418 = (getTempRet0() | 0);
 $419 = (___muldi3(($343|0),0,-683901,-1)|0);
 $420 = (getTempRet0() | 0);
 $421 = (_i64Add(($419|0),($420|0),($238|0),0)|0);
 $422 = (getTempRet0() | 0);
 $423 = (_i64Add(($421|0),($422|0),($405|0),($406|0))|0);
 $424 = (getTempRet0() | 0);
 $425 = (_i64Add(($423|0),($424|0),($389|0),($390|0))|0);
 $426 = (getTempRet0() | 0);
 $427 = (___muldi3(($331|0),0,666643,0)|0);
 $428 = (getTempRet0() | 0);
 $429 = (___muldi3(($331|0),0,470296,0)|0);
 $430 = (getTempRet0() | 0);
 $431 = (___muldi3(($331|0),0,654183,0)|0);
 $432 = (getTempRet0() | 0);
 $433 = (___muldi3(($331|0),0,-997805,-1)|0);
 $434 = (getTempRet0() | 0);
 $435 = (___muldi3(($331|0),0,136657,0)|0);
 $436 = (getTempRet0() | 0);
 $437 = (___muldi3(($331|0),0,-683901,-1)|0);
 $438 = (getTempRet0() | 0);
 $439 = (___muldi3(($311|0),0,666643,0)|0);
 $440 = (getTempRet0() | 0);
 $441 = (___muldi3(($311|0),0,470296,0)|0);
 $442 = (getTempRet0() | 0);
 $443 = (___muldi3(($311|0),0,654183,0)|0);
 $444 = (getTempRet0() | 0);
 $445 = (___muldi3(($311|0),0,-997805,-1)|0);
 $446 = (getTempRet0() | 0);
 $447 = (___muldi3(($311|0),0,136657,0)|0);
 $448 = (getTempRet0() | 0);
 $449 = (___muldi3(($311|0),0,-683901,-1)|0);
 $450 = (getTempRet0() | 0);
 $451 = (_i64Add(($449|0),($450|0),($206|0),0)|0);
 $452 = (getTempRet0() | 0);
 $453 = (_i64Add(($451|0),($452|0),($435|0),($436|0))|0);
 $454 = (getTempRet0() | 0);
 $455 = (_i64Add(($453|0),($454|0),($415|0),($416|0))|0);
 $456 = (getTempRet0() | 0);
 $457 = (_i64Add(($455|0),($456|0),($401|0),($402|0))|0);
 $458 = (getTempRet0() | 0);
 $459 = (_i64Add(($457|0),($458|0),($385|0),($386|0))|0);
 $460 = (getTempRet0() | 0);
 $461 = (___muldi3(($291|0),0,666643,0)|0);
 $462 = (getTempRet0() | 0);
 $463 = (_i64Add(($461|0),($462|0),($113|0),0)|0);
 $464 = (getTempRet0() | 0);
 $465 = (___muldi3(($291|0),0,470296,0)|0);
 $466 = (getTempRet0() | 0);
 $467 = (___muldi3(($291|0),0,654183,0)|0);
 $468 = (getTempRet0() | 0);
 $469 = (_i64Add(($467|0),($468|0),($134|0),($128|0))|0);
 $470 = (getTempRet0() | 0);
 $471 = (_i64Add(($469|0),($470|0),($441|0),($442|0))|0);
 $472 = (getTempRet0() | 0);
 $473 = (_i64Add(($471|0),($472|0),($427|0),($428|0))|0);
 $474 = (getTempRet0() | 0);
 $475 = (___muldi3(($291|0),0,-997805,-1)|0);
 $476 = (getTempRet0() | 0);
 $477 = (___muldi3(($291|0),0,136657,0)|0);
 $478 = (getTempRet0() | 0);
 $479 = (_i64Add(($477|0),($478|0),($166|0),0)|0);
 $480 = (getTempRet0() | 0);
 $481 = (_i64Add(($479|0),($480|0),($445|0),($446|0))|0);
 $482 = (getTempRet0() | 0);
 $483 = (_i64Add(($481|0),($482|0),($431|0),($432|0))|0);
 $484 = (getTempRet0() | 0);
 $485 = (_i64Add(($483|0),($484|0),($411|0),($412|0))|0);
 $486 = (getTempRet0() | 0);
 $487 = (_i64Add(($485|0),($486|0),($397|0),($398|0))|0);
 $488 = (getTempRet0() | 0);
 $489 = (___muldi3(($291|0),0,-683901,-1)|0);
 $490 = (getTempRet0() | 0);
 $491 = (_i64Add(($463|0),($464|0),1048576,0)|0);
 $492 = (getTempRet0() | 0);
 $493 = (_bitshift64Lshr(($491|0),($492|0),21)|0);
 $494 = (getTempRet0() | 0);
 $495 = (_i64Add(($465|0),($466|0),($123|0),($124|0))|0);
 $496 = (getTempRet0() | 0);
 $497 = (_i64Add(($495|0),($496|0),($493|0),($494|0))|0);
 $498 = (getTempRet0() | 0);
 $499 = (_i64Add(($497|0),($498|0),($439|0),($440|0))|0);
 $500 = (getTempRet0() | 0);
 $501 = $491 & -2097152;
 $502 = $492 & 2047;
 $503 = (_i64Subtract(($463|0),($464|0),($501|0),($502|0))|0);
 $504 = (getTempRet0() | 0);
 $505 = (_i64Add(($473|0),($474|0),1048576,0)|0);
 $506 = (getTempRet0() | 0);
 $507 = (_bitshift64Lshr(($505|0),($506|0),21)|0);
 $508 = (getTempRet0() | 0);
 $509 = (_i64Add(($475|0),($476|0),($154|0),0)|0);
 $510 = (getTempRet0() | 0);
 $511 = (_i64Add(($509|0),($510|0),($443|0),($444|0))|0);
 $512 = (getTempRet0() | 0);
 $513 = (_i64Add(($511|0),($512|0),($429|0),($430|0))|0);
 $514 = (getTempRet0() | 0);
 $515 = (_i64Add(($513|0),($514|0),($409|0),($410|0))|0);
 $516 = (getTempRet0() | 0);
 $517 = (_i64Add(($515|0),($516|0),($507|0),($508|0))|0);
 $518 = (getTempRet0() | 0);
 $519 = $505 & -2097152;
 $520 = (_i64Add(($487|0),($488|0),1048576,0)|0);
 $521 = (getTempRet0() | 0);
 $522 = (_bitshift64Ashr(($520|0),($521|0),21)|0);
 $523 = (getTempRet0() | 0);
 $524 = (_i64Add(($489|0),($490|0),($186|0),0)|0);
 $525 = (getTempRet0() | 0);
 $526 = (_i64Add(($524|0),($525|0),($447|0),($448|0))|0);
 $527 = (getTempRet0() | 0);
 $528 = (_i64Add(($526|0),($527|0),($433|0),($434|0))|0);
 $529 = (getTempRet0() | 0);
 $530 = (_i64Add(($528|0),($529|0),($413|0),($414|0))|0);
 $531 = (getTempRet0() | 0);
 $532 = (_i64Add(($530|0),($531|0),($399|0),($400|0))|0);
 $533 = (getTempRet0() | 0);
 $534 = (_i64Add(($532|0),($533|0),($383|0),($384|0))|0);
 $535 = (getTempRet0() | 0);
 $536 = (_i64Add(($534|0),($535|0),($522|0),($523|0))|0);
 $537 = (getTempRet0() | 0);
 $538 = $520 & -2097152;
 $539 = (_i64Add(($459|0),($460|0),1048576,0)|0);
 $540 = (getTempRet0() | 0);
 $541 = (_bitshift64Ashr(($539|0),($540|0),21)|0);
 $542 = (getTempRet0() | 0);
 $543 = (_i64Add(($437|0),($438|0),($218|0),0)|0);
 $544 = (getTempRet0() | 0);
 $545 = (_i64Add(($543|0),($544|0),($417|0),($418|0))|0);
 $546 = (getTempRet0() | 0);
 $547 = (_i64Add(($545|0),($546|0),($403|0),($404|0))|0);
 $548 = (getTempRet0() | 0);
 $549 = (_i64Add(($547|0),($548|0),($387|0),($388|0))|0);
 $550 = (getTempRet0() | 0);
 $551 = (_i64Add(($549|0),($550|0),($541|0),($542|0))|0);
 $552 = (getTempRet0() | 0);
 $553 = $539 & -2097152;
 $554 = (_i64Subtract(($459|0),($460|0),($553|0),($540|0))|0);
 $555 = (getTempRet0() | 0);
 $556 = (_i64Add(($425|0),($426|0),1048576,0)|0);
 $557 = (getTempRet0() | 0);
 $558 = (_bitshift64Ashr(($556|0),($557|0),21)|0);
 $559 = (getTempRet0() | 0);
 $560 = (_i64Add(($407|0),($408|0),($248|0),($249|0))|0);
 $561 = (getTempRet0() | 0);
 $562 = (_i64Add(($560|0),($561|0),($391|0),($392|0))|0);
 $563 = (getTempRet0() | 0);
 $564 = (_i64Add(($562|0),($563|0),($558|0),($559|0))|0);
 $565 = (getTempRet0() | 0);
 $566 = $556 & -2097152;
 $567 = (_i64Subtract(($425|0),($426|0),($566|0),($557|0))|0);
 $568 = (getTempRet0() | 0);
 $569 = (_i64Add(($395|0),($396|0),1048576,0)|0);
 $570 = (getTempRet0() | 0);
 $571 = (_bitshift64Ashr(($569|0),($570|0),21)|0);
 $572 = (getTempRet0() | 0);
 $573 = (_i64Add(($571|0),($572|0),($279|0),0)|0);
 $574 = (getTempRet0() | 0);
 $575 = $569 & -2097152;
 $576 = (_i64Subtract(($395|0),($396|0),($575|0),($570|0))|0);
 $577 = (getTempRet0() | 0);
 $578 = (_i64Add(($499|0),($500|0),1048576,0)|0);
 $579 = (getTempRet0() | 0);
 $580 = (_bitshift64Lshr(($578|0),($579|0),21)|0);
 $581 = (getTempRet0() | 0);
 $582 = $578 & -2097152;
 $583 = (_i64Subtract(($499|0),($500|0),($582|0),($579|0))|0);
 $584 = (getTempRet0() | 0);
 $585 = (_i64Add(($517|0),($518|0),1048576,0)|0);
 $586 = (getTempRet0() | 0);
 $587 = (_bitshift64Ashr(($585|0),($586|0),21)|0);
 $588 = (getTempRet0() | 0);
 $589 = $585 & -2097152;
 $590 = (_i64Subtract(($517|0),($518|0),($589|0),($586|0))|0);
 $591 = (getTempRet0() | 0);
 $592 = (_i64Add(($536|0),($537|0),1048576,0)|0);
 $593 = (getTempRet0() | 0);
 $594 = (_bitshift64Ashr(($592|0),($593|0),21)|0);
 $595 = (getTempRet0() | 0);
 $596 = (_i64Add(($594|0),($595|0),($554|0),($555|0))|0);
 $597 = (getTempRet0() | 0);
 $598 = $592 & -2097152;
 $599 = (_i64Subtract(($536|0),($537|0),($598|0),($593|0))|0);
 $600 = (getTempRet0() | 0);
 $601 = (_i64Add(($551|0),($552|0),1048576,0)|0);
 $602 = (getTempRet0() | 0);
 $603 = (_bitshift64Ashr(($601|0),($602|0),21)|0);
 $604 = (getTempRet0() | 0);
 $605 = (_i64Add(($603|0),($604|0),($567|0),($568|0))|0);
 $606 = (getTempRet0() | 0);
 $607 = $601 & -2097152;
 $608 = (_i64Subtract(($551|0),($552|0),($607|0),($602|0))|0);
 $609 = (getTempRet0() | 0);
 $610 = (_i64Add(($564|0),($565|0),1048576,0)|0);
 $611 = (getTempRet0() | 0);
 $612 = (_bitshift64Ashr(($610|0),($611|0),21)|0);
 $613 = (getTempRet0() | 0);
 $614 = (_i64Add(($612|0),($613|0),($576|0),($577|0))|0);
 $615 = (getTempRet0() | 0);
 $616 = $610 & -2097152;
 $617 = (_i64Subtract(($564|0),($565|0),($616|0),($611|0))|0);
 $618 = (getTempRet0() | 0);
 $619 = (___muldi3(($573|0),($574|0),666643,0)|0);
 $620 = (getTempRet0() | 0);
 $621 = (_i64Add(($619|0),($620|0),($93|0),0)|0);
 $622 = (getTempRet0() | 0);
 $623 = (___muldi3(($573|0),($574|0),470296,0)|0);
 $624 = (getTempRet0() | 0);
 $625 = (_i64Add(($503|0),($504|0),($623|0),($624|0))|0);
 $626 = (getTempRet0() | 0);
 $627 = (___muldi3(($573|0),($574|0),654183,0)|0);
 $628 = (getTempRet0() | 0);
 $629 = (_i64Add(($583|0),($584|0),($627|0),($628|0))|0);
 $630 = (getTempRet0() | 0);
 $631 = (___muldi3(($573|0),($574|0),-997805,-1)|0);
 $632 = (getTempRet0() | 0);
 $633 = (___muldi3(($573|0),($574|0),136657,0)|0);
 $634 = (getTempRet0() | 0);
 $635 = (_i64Add(($590|0),($591|0),($633|0),($634|0))|0);
 $636 = (getTempRet0() | 0);
 $637 = (___muldi3(($573|0),($574|0),-683901,-1)|0);
 $638 = (getTempRet0() | 0);
 $639 = (_i64Add(($487|0),($488|0),($587|0),($588|0))|0);
 $640 = (getTempRet0() | 0);
 $641 = (_i64Subtract(($639|0),($640|0),($538|0),($521|0))|0);
 $642 = (getTempRet0() | 0);
 $643 = (_i64Add(($641|0),($642|0),($637|0),($638|0))|0);
 $644 = (getTempRet0() | 0);
 $645 = (___muldi3(($614|0),($615|0),666643,0)|0);
 $646 = (getTempRet0() | 0);
 $647 = (_i64Add(($645|0),($646|0),($81|0),0)|0);
 $648 = (getTempRet0() | 0);
 $649 = (___muldi3(($614|0),($615|0),470296,0)|0);
 $650 = (getTempRet0() | 0);
 $651 = (_i64Add(($621|0),($622|0),($649|0),($650|0))|0);
 $652 = (getTempRet0() | 0);
 $653 = (___muldi3(($614|0),($615|0),654183,0)|0);
 $654 = (getTempRet0() | 0);
 $655 = (_i64Add(($625|0),($626|0),($653|0),($654|0))|0);
 $656 = (getTempRet0() | 0);
 $657 = (___muldi3(($614|0),($615|0),-997805,-1)|0);
 $658 = (getTempRet0() | 0);
 $659 = (_i64Add(($629|0),($630|0),($657|0),($658|0))|0);
 $660 = (getTempRet0() | 0);
 $661 = (___muldi3(($614|0),($615|0),136657,0)|0);
 $662 = (getTempRet0() | 0);
 $663 = (___muldi3(($614|0),($615|0),-683901,-1)|0);
 $664 = (getTempRet0() | 0);
 $665 = (_i64Add(($635|0),($636|0),($663|0),($664|0))|0);
 $666 = (getTempRet0() | 0);
 $667 = (___muldi3(($617|0),($618|0),666643,0)|0);
 $668 = (getTempRet0() | 0);
 $669 = (_i64Add(($667|0),($668|0),($61|0),0)|0);
 $670 = (getTempRet0() | 0);
 $671 = (___muldi3(($617|0),($618|0),470296,0)|0);
 $672 = (getTempRet0() | 0);
 $673 = (_i64Add(($647|0),($648|0),($671|0),($672|0))|0);
 $674 = (getTempRet0() | 0);
 $675 = (___muldi3(($617|0),($618|0),654183,0)|0);
 $676 = (getTempRet0() | 0);
 $677 = (_i64Add(($651|0),($652|0),($675|0),($676|0))|0);
 $678 = (getTempRet0() | 0);
 $679 = (___muldi3(($617|0),($618|0),-997805,-1)|0);
 $680 = (getTempRet0() | 0);
 $681 = (_i64Add(($655|0),($656|0),($679|0),($680|0))|0);
 $682 = (getTempRet0() | 0);
 $683 = (___muldi3(($617|0),($618|0),136657,0)|0);
 $684 = (getTempRet0() | 0);
 $685 = (_i64Add(($659|0),($660|0),($683|0),($684|0))|0);
 $686 = (getTempRet0() | 0);
 $687 = (___muldi3(($617|0),($618|0),-683901,-1)|0);
 $688 = (getTempRet0() | 0);
 $689 = (_i64Add(($473|0),($474|0),($580|0),($581|0))|0);
 $690 = (getTempRet0() | 0);
 $691 = (_i64Subtract(($689|0),($690|0),($519|0),($506|0))|0);
 $692 = (getTempRet0() | 0);
 $693 = (_i64Add(($691|0),($692|0),($631|0),($632|0))|0);
 $694 = (getTempRet0() | 0);
 $695 = (_i64Add(($693|0),($694|0),($661|0),($662|0))|0);
 $696 = (getTempRet0() | 0);
 $697 = (_i64Add(($695|0),($696|0),($687|0),($688|0))|0);
 $698 = (getTempRet0() | 0);
 $699 = (___muldi3(($605|0),($606|0),666643,0)|0);
 $700 = (getTempRet0() | 0);
 $701 = (___muldi3(($605|0),($606|0),470296,0)|0);
 $702 = (getTempRet0() | 0);
 $703 = (___muldi3(($605|0),($606|0),654183,0)|0);
 $704 = (getTempRet0() | 0);
 $705 = (___muldi3(($605|0),($606|0),-997805,-1)|0);
 $706 = (getTempRet0() | 0);
 $707 = (___muldi3(($605|0),($606|0),136657,0)|0);
 $708 = (getTempRet0() | 0);
 $709 = (_i64Add(($681|0),($682|0),($707|0),($708|0))|0);
 $710 = (getTempRet0() | 0);
 $711 = (___muldi3(($605|0),($606|0),-683901,-1)|0);
 $712 = (getTempRet0() | 0);
 $713 = (_i64Add(($685|0),($686|0),($711|0),($712|0))|0);
 $714 = (getTempRet0() | 0);
 $715 = (___muldi3(($608|0),($609|0),666643,0)|0);
 $716 = (getTempRet0() | 0);
 $717 = (___muldi3(($608|0),($609|0),470296,0)|0);
 $718 = (getTempRet0() | 0);
 $719 = (___muldi3(($608|0),($609|0),654183,0)|0);
 $720 = (getTempRet0() | 0);
 $721 = (___muldi3(($608|0),($609|0),-997805,-1)|0);
 $722 = (getTempRet0() | 0);
 $723 = (___muldi3(($608|0),($609|0),136657,0)|0);
 $724 = (getTempRet0() | 0);
 $725 = (___muldi3(($608|0),($609|0),-683901,-1)|0);
 $726 = (getTempRet0() | 0);
 $727 = (_i64Add(($709|0),($710|0),($725|0),($726|0))|0);
 $728 = (getTempRet0() | 0);
 $729 = (___muldi3(($596|0),($597|0),666643,0)|0);
 $730 = (getTempRet0() | 0);
 $731 = (_i64Add(($729|0),($730|0),($9|0),($3|0))|0);
 $732 = (getTempRet0() | 0);
 $733 = (___muldi3(($596|0),($597|0),470296,0)|0);
 $734 = (getTempRet0() | 0);
 $735 = (___muldi3(($596|0),($597|0),654183,0)|0);
 $736 = (getTempRet0() | 0);
 $737 = (_i64Add(($735|0),($736|0),($41|0),0)|0);
 $738 = (getTempRet0() | 0);
 $739 = (_i64Add(($737|0),($738|0),($699|0),($700|0))|0);
 $740 = (getTempRet0() | 0);
 $741 = (_i64Add(($739|0),($740|0),($717|0),($718|0))|0);
 $742 = (getTempRet0() | 0);
 $743 = (___muldi3(($596|0),($597|0),-997805,-1)|0);
 $744 = (getTempRet0() | 0);
 $745 = (___muldi3(($596|0),($597|0),136657,0)|0);
 $746 = (getTempRet0() | 0);
 $747 = (_i64Add(($673|0),($674|0),($745|0),($746|0))|0);
 $748 = (getTempRet0() | 0);
 $749 = (_i64Add(($747|0),($748|0),($703|0),($704|0))|0);
 $750 = (getTempRet0() | 0);
 $751 = (_i64Add(($749|0),($750|0),($721|0),($722|0))|0);
 $752 = (getTempRet0() | 0);
 $753 = (___muldi3(($596|0),($597|0),-683901,-1)|0);
 $754 = (getTempRet0() | 0);
 $755 = (_i64Add(($731|0),($732|0),1048576,0)|0);
 $756 = (getTempRet0() | 0);
 $757 = (_bitshift64Ashr(($755|0),($756|0),21)|0);
 $758 = (getTempRet0() | 0);
 $759 = (_i64Add(($733|0),($734|0),($29|0),0)|0);
 $760 = (getTempRet0() | 0);
 $761 = (_i64Add(($759|0),($760|0),($715|0),($716|0))|0);
 $762 = (getTempRet0() | 0);
 $763 = (_i64Add(($761|0),($762|0),($757|0),($758|0))|0);
 $764 = (getTempRet0() | 0);
 $765 = $755 & -2097152;
 $766 = (_i64Subtract(($731|0),($732|0),($765|0),($756|0))|0);
 $767 = (getTempRet0() | 0);
 $768 = (_i64Add(($741|0),($742|0),1048576,0)|0);
 $769 = (getTempRet0() | 0);
 $770 = (_bitshift64Ashr(($768|0),($769|0),21)|0);
 $771 = (getTempRet0() | 0);
 $772 = (_i64Add(($669|0),($670|0),($743|0),($744|0))|0);
 $773 = (getTempRet0() | 0);
 $774 = (_i64Add(($772|0),($773|0),($701|0),($702|0))|0);
 $775 = (getTempRet0() | 0);
 $776 = (_i64Add(($774|0),($775|0),($719|0),($720|0))|0);
 $777 = (getTempRet0() | 0);
 $778 = (_i64Add(($776|0),($777|0),($770|0),($771|0))|0);
 $779 = (getTempRet0() | 0);
 $780 = $768 & -2097152;
 $781 = (_i64Add(($751|0),($752|0),1048576,0)|0);
 $782 = (getTempRet0() | 0);
 $783 = (_bitshift64Ashr(($781|0),($782|0),21)|0);
 $784 = (getTempRet0() | 0);
 $785 = (_i64Add(($677|0),($678|0),($753|0),($754|0))|0);
 $786 = (getTempRet0() | 0);
 $787 = (_i64Add(($785|0),($786|0),($705|0),($706|0))|0);
 $788 = (getTempRet0() | 0);
 $789 = (_i64Add(($787|0),($788|0),($723|0),($724|0))|0);
 $790 = (getTempRet0() | 0);
 $791 = (_i64Add(($789|0),($790|0),($783|0),($784|0))|0);
 $792 = (getTempRet0() | 0);
 $793 = $781 & -2097152;
 $794 = (_i64Add(($727|0),($728|0),1048576,0)|0);
 $795 = (getTempRet0() | 0);
 $796 = (_bitshift64Ashr(($794|0),($795|0),21)|0);
 $797 = (getTempRet0() | 0);
 $798 = (_i64Add(($713|0),($714|0),($796|0),($797|0))|0);
 $799 = (getTempRet0() | 0);
 $800 = $794 & -2097152;
 $801 = (_i64Subtract(($727|0),($728|0),($800|0),($795|0))|0);
 $802 = (getTempRet0() | 0);
 $803 = (_i64Add(($697|0),($698|0),1048576,0)|0);
 $804 = (getTempRet0() | 0);
 $805 = (_bitshift64Ashr(($803|0),($804|0),21)|0);
 $806 = (getTempRet0() | 0);
 $807 = (_i64Add(($665|0),($666|0),($805|0),($806|0))|0);
 $808 = (getTempRet0() | 0);
 $809 = $803 & -2097152;
 $810 = (_i64Subtract(($697|0),($698|0),($809|0),($804|0))|0);
 $811 = (getTempRet0() | 0);
 $812 = (_i64Add(($643|0),($644|0),1048576,0)|0);
 $813 = (getTempRet0() | 0);
 $814 = (_bitshift64Ashr(($812|0),($813|0),21)|0);
 $815 = (getTempRet0() | 0);
 $816 = (_i64Add(($599|0),($600|0),($814|0),($815|0))|0);
 $817 = (getTempRet0() | 0);
 $818 = $812 & -2097152;
 $819 = (_i64Subtract(($643|0),($644|0),($818|0),($813|0))|0);
 $820 = (getTempRet0() | 0);
 $821 = (_i64Add(($763|0),($764|0),1048576,0)|0);
 $822 = (getTempRet0() | 0);
 $823 = (_bitshift64Ashr(($821|0),($822|0),21)|0);
 $824 = (getTempRet0() | 0);
 $825 = $821 & -2097152;
 $826 = (_i64Add(($778|0),($779|0),1048576,0)|0);
 $827 = (getTempRet0() | 0);
 $828 = (_bitshift64Ashr(($826|0),($827|0),21)|0);
 $829 = (getTempRet0() | 0);
 $830 = $826 & -2097152;
 $831 = (_i64Add(($791|0),($792|0),1048576,0)|0);
 $832 = (getTempRet0() | 0);
 $833 = (_bitshift64Ashr(($831|0),($832|0),21)|0);
 $834 = (getTempRet0() | 0);
 $835 = (_i64Add(($801|0),($802|0),($833|0),($834|0))|0);
 $836 = (getTempRet0() | 0);
 $837 = $831 & -2097152;
 $838 = (_i64Add(($798|0),($799|0),1048576,0)|0);
 $839 = (getTempRet0() | 0);
 $840 = (_bitshift64Ashr(($838|0),($839|0),21)|0);
 $841 = (getTempRet0() | 0);
 $842 = (_i64Add(($810|0),($811|0),($840|0),($841|0))|0);
 $843 = (getTempRet0() | 0);
 $844 = $838 & -2097152;
 $845 = (_i64Subtract(($798|0),($799|0),($844|0),($839|0))|0);
 $846 = (getTempRet0() | 0);
 $847 = (_i64Add(($807|0),($808|0),1048576,0)|0);
 $848 = (getTempRet0() | 0);
 $849 = (_bitshift64Ashr(($847|0),($848|0),21)|0);
 $850 = (getTempRet0() | 0);
 $851 = (_i64Add(($819|0),($820|0),($849|0),($850|0))|0);
 $852 = (getTempRet0() | 0);
 $853 = $847 & -2097152;
 $854 = (_i64Subtract(($807|0),($808|0),($853|0),($848|0))|0);
 $855 = (getTempRet0() | 0);
 $856 = (_i64Add(($816|0),($817|0),1048576,0)|0);
 $857 = (getTempRet0() | 0);
 $858 = (_bitshift64Ashr(($856|0),($857|0),21)|0);
 $859 = (getTempRet0() | 0);
 $860 = $856 & -2097152;
 $861 = (_i64Subtract(($816|0),($817|0),($860|0),($857|0))|0);
 $862 = (getTempRet0() | 0);
 $863 = (___muldi3(($858|0),($859|0),666643,0)|0);
 $864 = (getTempRet0() | 0);
 $865 = (_i64Add(($766|0),($767|0),($863|0),($864|0))|0);
 $866 = (getTempRet0() | 0);
 $867 = (___muldi3(($858|0),($859|0),470296,0)|0);
 $868 = (getTempRet0() | 0);
 $869 = (___muldi3(($858|0),($859|0),654183,0)|0);
 $870 = (getTempRet0() | 0);
 $871 = (___muldi3(($858|0),($859|0),-997805,-1)|0);
 $872 = (getTempRet0() | 0);
 $873 = (___muldi3(($858|0),($859|0),136657,0)|0);
 $874 = (getTempRet0() | 0);
 $875 = (___muldi3(($858|0),($859|0),-683901,-1)|0);
 $876 = (getTempRet0() | 0);
 $877 = (_bitshift64Ashr(($865|0),($866|0),21)|0);
 $878 = (getTempRet0() | 0);
 $879 = (_i64Add(($763|0),($764|0),($867|0),($868|0))|0);
 $880 = (getTempRet0() | 0);
 $881 = (_i64Subtract(($879|0),($880|0),($825|0),($822|0))|0);
 $882 = (getTempRet0() | 0);
 $883 = (_i64Add(($881|0),($882|0),($877|0),($878|0))|0);
 $884 = (getTempRet0() | 0);
 $885 = $865 & 2097151;
 $886 = (_bitshift64Ashr(($883|0),($884|0),21)|0);
 $887 = (getTempRet0() | 0);
 $888 = (_i64Add(($741|0),($742|0),($869|0),($870|0))|0);
 $889 = (getTempRet0() | 0);
 $890 = (_i64Subtract(($888|0),($889|0),($780|0),($769|0))|0);
 $891 = (getTempRet0() | 0);
 $892 = (_i64Add(($890|0),($891|0),($823|0),($824|0))|0);
 $893 = (getTempRet0() | 0);
 $894 = (_i64Add(($892|0),($893|0),($886|0),($887|0))|0);
 $895 = (getTempRet0() | 0);
 $896 = $883 & 2097151;
 $897 = (_bitshift64Ashr(($894|0),($895|0),21)|0);
 $898 = (getTempRet0() | 0);
 $899 = (_i64Add(($778|0),($779|0),($871|0),($872|0))|0);
 $900 = (getTempRet0() | 0);
 $901 = (_i64Subtract(($899|0),($900|0),($830|0),($827|0))|0);
 $902 = (getTempRet0() | 0);
 $903 = (_i64Add(($901|0),($902|0),($897|0),($898|0))|0);
 $904 = (getTempRet0() | 0);
 $905 = $894 & 2097151;
 $906 = (_bitshift64Ashr(($903|0),($904|0),21)|0);
 $907 = (getTempRet0() | 0);
 $908 = (_i64Add(($751|0),($752|0),($873|0),($874|0))|0);
 $909 = (getTempRet0() | 0);
 $910 = (_i64Subtract(($908|0),($909|0),($793|0),($782|0))|0);
 $911 = (getTempRet0() | 0);
 $912 = (_i64Add(($910|0),($911|0),($828|0),($829|0))|0);
 $913 = (getTempRet0() | 0);
 $914 = (_i64Add(($912|0),($913|0),($906|0),($907|0))|0);
 $915 = (getTempRet0() | 0);
 $916 = $903 & 2097151;
 $917 = (_bitshift64Ashr(($914|0),($915|0),21)|0);
 $918 = (getTempRet0() | 0);
 $919 = (_i64Add(($791|0),($792|0),($875|0),($876|0))|0);
 $920 = (getTempRet0() | 0);
 $921 = (_i64Subtract(($919|0),($920|0),($837|0),($832|0))|0);
 $922 = (getTempRet0() | 0);
 $923 = (_i64Add(($921|0),($922|0),($917|0),($918|0))|0);
 $924 = (getTempRet0() | 0);
 $925 = $914 & 2097151;
 $926 = (_bitshift64Ashr(($923|0),($924|0),21)|0);
 $927 = (getTempRet0() | 0);
 $928 = (_i64Add(($835|0),($836|0),($926|0),($927|0))|0);
 $929 = (getTempRet0() | 0);
 $930 = $923 & 2097151;
 $931 = (_bitshift64Ashr(($928|0),($929|0),21)|0);
 $932 = (getTempRet0() | 0);
 $933 = (_i64Add(($931|0),($932|0),($845|0),($846|0))|0);
 $934 = (getTempRet0() | 0);
 $935 = $928 & 2097151;
 $936 = (_bitshift64Ashr(($933|0),($934|0),21)|0);
 $937 = (getTempRet0() | 0);
 $938 = (_i64Add(($842|0),($843|0),($936|0),($937|0))|0);
 $939 = (getTempRet0() | 0);
 $940 = $933 & 2097151;
 $941 = (_bitshift64Ashr(($938|0),($939|0),21)|0);
 $942 = (getTempRet0() | 0);
 $943 = (_i64Add(($941|0),($942|0),($854|0),($855|0))|0);
 $944 = (getTempRet0() | 0);
 $945 = $938 & 2097151;
 $946 = (_bitshift64Ashr(($943|0),($944|0),21)|0);
 $947 = (getTempRet0() | 0);
 $948 = (_i64Add(($851|0),($852|0),($946|0),($947|0))|0);
 $949 = (getTempRet0() | 0);
 $950 = $943 & 2097151;
 $951 = (_bitshift64Ashr(($948|0),($949|0),21)|0);
 $952 = (getTempRet0() | 0);
 $953 = (_i64Add(($951|0),($952|0),($861|0),($862|0))|0);
 $954 = (getTempRet0() | 0);
 $955 = $948 & 2097151;
 $956 = (_bitshift64Ashr(($953|0),($954|0),21)|0);
 $957 = (getTempRet0() | 0);
 $958 = $953 & 2097151;
 $959 = (___muldi3(($956|0),($957|0),666643,0)|0);
 $960 = (getTempRet0() | 0);
 $961 = (_i64Add(($959|0),($960|0),($885|0),0)|0);
 $962 = (getTempRet0() | 0);
 $963 = (___muldi3(($956|0),($957|0),470296,0)|0);
 $964 = (getTempRet0() | 0);
 $965 = (_i64Add(($963|0),($964|0),($896|0),0)|0);
 $966 = (getTempRet0() | 0);
 $967 = (___muldi3(($956|0),($957|0),654183,0)|0);
 $968 = (getTempRet0() | 0);
 $969 = (_i64Add(($967|0),($968|0),($905|0),0)|0);
 $970 = (getTempRet0() | 0);
 $971 = (___muldi3(($956|0),($957|0),-997805,-1)|0);
 $972 = (getTempRet0() | 0);
 $973 = (_i64Add(($971|0),($972|0),($916|0),0)|0);
 $974 = (getTempRet0() | 0);
 $975 = (___muldi3(($956|0),($957|0),136657,0)|0);
 $976 = (getTempRet0() | 0);
 $977 = (_i64Add(($975|0),($976|0),($925|0),0)|0);
 $978 = (getTempRet0() | 0);
 $979 = (___muldi3(($956|0),($957|0),-683901,-1)|0);
 $980 = (getTempRet0() | 0);
 $981 = (_i64Add(($979|0),($980|0),($930|0),0)|0);
 $982 = (getTempRet0() | 0);
 $983 = (_bitshift64Ashr(($961|0),($962|0),21)|0);
 $984 = (getTempRet0() | 0);
 $985 = (_i64Add(($965|0),($966|0),($983|0),($984|0))|0);
 $986 = (getTempRet0() | 0);
 $987 = (_bitshift64Ashr(($985|0),($986|0),21)|0);
 $988 = (getTempRet0() | 0);
 $989 = (_i64Add(($969|0),($970|0),($987|0),($988|0))|0);
 $990 = (getTempRet0() | 0);
 $991 = $985 & 2097151;
 $992 = (_bitshift64Ashr(($989|0),($990|0),21)|0);
 $993 = (getTempRet0() | 0);
 $994 = (_i64Add(($973|0),($974|0),($992|0),($993|0))|0);
 $995 = (getTempRet0() | 0);
 $996 = $989 & 2097151;
 $997 = (_bitshift64Ashr(($994|0),($995|0),21)|0);
 $998 = (getTempRet0() | 0);
 $999 = (_i64Add(($977|0),($978|0),($997|0),($998|0))|0);
 $1000 = (getTempRet0() | 0);
 $1001 = $994 & 2097151;
 $1002 = (_bitshift64Ashr(($999|0),($1000|0),21)|0);
 $1003 = (getTempRet0() | 0);
 $1004 = (_i64Add(($981|0),($982|0),($1002|0),($1003|0))|0);
 $1005 = (getTempRet0() | 0);
 $1006 = $999 & 2097151;
 $1007 = (_bitshift64Ashr(($1004|0),($1005|0),21)|0);
 $1008 = (getTempRet0() | 0);
 $1009 = (_i64Add(($1007|0),($1008|0),($935|0),0)|0);
 $1010 = (getTempRet0() | 0);
 $1011 = $1004 & 2097151;
 $1012 = (_bitshift64Ashr(($1009|0),($1010|0),21)|0);
 $1013 = (getTempRet0() | 0);
 $1014 = (_i64Add(($1012|0),($1013|0),($940|0),0)|0);
 $1015 = (getTempRet0() | 0);
 $1016 = $1009 & 2097151;
 $1017 = (_bitshift64Ashr(($1014|0),($1015|0),21)|0);
 $1018 = (getTempRet0() | 0);
 $1019 = (_i64Add(($1017|0),($1018|0),($945|0),0)|0);
 $1020 = (getTempRet0() | 0);
 $1021 = (_bitshift64Ashr(($1019|0),($1020|0),21)|0);
 $1022 = (getTempRet0() | 0);
 $1023 = (_i64Add(($1021|0),($1022|0),($950|0),0)|0);
 $1024 = (getTempRet0() | 0);
 $1025 = (_bitshift64Ashr(($1023|0),($1024|0),21)|0);
 $1026 = (getTempRet0() | 0);
 $1027 = (_i64Add(($1025|0),($1026|0),($955|0),0)|0);
 $1028 = (getTempRet0() | 0);
 $1029 = $1023 & 2097151;
 $1030 = (_bitshift64Ashr(($1027|0),($1028|0),21)|0);
 $1031 = (getTempRet0() | 0);
 $1032 = (_i64Add(($1030|0),($1031|0),($958|0),0)|0);
 $1033 = (getTempRet0() | 0);
 $1034 = $1027 & 2097151;
 $1035 = $961&255;
 HEAP8[$s>>0] = $1035;
 $1036 = (_bitshift64Lshr(($961|0),($962|0),8)|0);
 $1037 = (getTempRet0() | 0);
 $1038 = $1036&255;
 HEAP8[$s$idx>>0] = $1038;
 $1039 = (_bitshift64Lshr(($961|0),($962|0),16)|0);
 $1040 = (getTempRet0() | 0);
 $1041 = $1039 & 31;
 $1042 = (_bitshift64Shl(($991|0),0,5)|0);
 $1043 = (getTempRet0() | 0);
 $1044 = $1042 | $1041;
 $1045 = $1044&255;
 HEAP8[$s$idx506>>0] = $1045;
 $1046 = (_bitshift64Lshr(($985|0),($986|0),3)|0);
 $1047 = (getTempRet0() | 0);
 $1048 = $1046&255;
 HEAP8[$arrayidx1$i728>>0] = $1048;
 $1049 = (_bitshift64Lshr(($985|0),($986|0),11)|0);
 $1050 = (getTempRet0() | 0);
 $1051 = $1049&255;
 HEAP8[$arrayidx3$i732>>0] = $1051;
 $1052 = (_bitshift64Lshr(($991|0),0,19)|0);
 $1053 = (getTempRet0() | 0);
 $1054 = (_bitshift64Shl(($996|0),0,2)|0);
 $1055 = (getTempRet0() | 0);
 $1056 = $1054 | $1052;
 $1055 | $1053;
 $1057 = $1056&255;
 HEAP8[$arrayidx7$i736>>0] = $1057;
 $1058 = (_bitshift64Lshr(($989|0),($990|0),6)|0);
 $1059 = (getTempRet0() | 0);
 $1060 = $1058&255;
 HEAP8[$add$ptr3$idx>>0] = $1060;
 $1061 = (_bitshift64Lshr(($996|0),0,14)|0);
 $1062 = (getTempRet0() | 0);
 $1063 = (_bitshift64Shl(($1001|0),0,7)|0);
 $1064 = (getTempRet0() | 0);
 $1065 = $1063 | $1061;
 $1064 | $1062;
 $1066 = $1065&255;
 HEAP8[$add$ptr3$idx505>>0] = $1066;
 $1067 = (_bitshift64Lshr(($994|0),($995|0),1)|0);
 $1068 = (getTempRet0() | 0);
 $1069 = $1067&255;
 HEAP8[$arrayidx1$i708>>0] = $1069;
 $1070 = (_bitshift64Lshr(($994|0),($995|0),9)|0);
 $1071 = (getTempRet0() | 0);
 $1072 = $1070&255;
 HEAP8[$arrayidx3$i712>>0] = $1072;
 $1073 = (_bitshift64Lshr(($1001|0),0,17)|0);
 $1074 = (getTempRet0() | 0);
 $1075 = (_bitshift64Shl(($1006|0),0,4)|0);
 $1076 = (getTempRet0() | 0);
 $1077 = $1075 | $1073;
 $1076 | $1074;
 $1078 = $1077&255;
 HEAP8[$arrayidx7$i716>>0] = $1078;
 $1079 = (_bitshift64Lshr(($999|0),($1000|0),4)|0);
 $1080 = (getTempRet0() | 0);
 $1081 = $1079&255;
 HEAP8[$arrayidx1$i695>>0] = $1081;
 $1082 = (_bitshift64Lshr(($999|0),($1000|0),12)|0);
 $1083 = (getTempRet0() | 0);
 $1084 = $1082&255;
 HEAP8[$arrayidx3$i699>>0] = $1084;
 $1085 = (_bitshift64Lshr(($1006|0),0,20)|0);
 $1086 = (getTempRet0() | 0);
 $1087 = (_bitshift64Shl(($1011|0),0,1)|0);
 $1088 = (getTempRet0() | 0);
 $1089 = $1087 | $1085;
 $1088 | $1086;
 $1090 = $1089&255;
 HEAP8[$arrayidx7$i703>>0] = $1090;
 $1091 = (_bitshift64Lshr(($1004|0),($1005|0),7)|0);
 $1092 = (getTempRet0() | 0);
 $1093 = $1091&255;
 HEAP8[$add$ptr15$idx>>0] = $1093;
 $1094 = (_bitshift64Lshr(($1011|0),0,15)|0);
 $1095 = (getTempRet0() | 0);
 $1096 = (_bitshift64Shl(($1016|0),0,6)|0);
 $1097 = (getTempRet0() | 0);
 $1098 = $1096 | $1094;
 $1097 | $1095;
 $1099 = $1098&255;
 HEAP8[$add$ptr15$idx504>>0] = $1099;
 $1100 = (_bitshift64Lshr(($1009|0),($1010|0),2)|0);
 $1101 = (getTempRet0() | 0);
 $1102 = $1100&255;
 HEAP8[$arrayidx1$i675>>0] = $1102;
 $1103 = (_bitshift64Lshr(($1009|0),($1010|0),10)|0);
 $1104 = (getTempRet0() | 0);
 $1105 = $1103&255;
 HEAP8[$arrayidx3$i679>>0] = $1105;
 $1106 = (_bitshift64Lshr(($1016|0),0,18)|0);
 $1107 = (getTempRet0() | 0);
 $1108 = (_bitshift64Shl(($1014|0),($1015|0),3)|0);
 $1109 = (getTempRet0() | 0);
 $1110 = $1108 | $1106;
 $1109 | $1107;
 $1111 = $1110&255;
 HEAP8[$arrayidx7$i683>>0] = $1111;
 $1112 = (_bitshift64Lshr(($1014|0),($1015|0),5)|0);
 $1113 = (getTempRet0() | 0);
 $1114 = $1112&255;
 HEAP8[$add$ptr23$idx>>0] = $1114;
 $1115 = (_bitshift64Lshr(($1014|0),($1015|0),13)|0);
 $1116 = (getTempRet0() | 0);
 $1117 = $1115&255;
 HEAP8[$add$ptr23$idx503>>0] = $1117;
 $1118 = $1019&255;
 HEAP8[$add$ptr27>>0] = $1118;
 $1119 = (_bitshift64Lshr(($1019|0),($1020|0),8)|0);
 $1120 = (getTempRet0() | 0);
 $1121 = $1119&255;
 HEAP8[$add$ptr27$idx>>0] = $1121;
 $1122 = (_bitshift64Lshr(($1019|0),($1020|0),16)|0);
 $1123 = (getTempRet0() | 0);
 $1124 = $1122 & 31;
 $1125 = (_bitshift64Shl(($1029|0),0,5)|0);
 $1126 = (getTempRet0() | 0);
 $1127 = $1125 | $1124;
 $1128 = $1127&255;
 HEAP8[$add$ptr27$idx502>>0] = $1128;
 $1129 = (_bitshift64Lshr(($1023|0),($1024|0),3)|0);
 $1130 = (getTempRet0() | 0);
 $1131 = $1129&255;
 HEAP8[$arrayidx1$i648>>0] = $1131;
 $1132 = (_bitshift64Lshr(($1023|0),($1024|0),11)|0);
 $1133 = (getTempRet0() | 0);
 $1134 = $1132&255;
 HEAP8[$arrayidx3$i652>>0] = $1134;
 $1135 = (_bitshift64Lshr(($1029|0),0,19)|0);
 $1136 = (getTempRet0() | 0);
 $1137 = (_bitshift64Shl(($1034|0),0,2)|0);
 $1138 = (getTempRet0() | 0);
 $1139 = $1137 | $1135;
 $1138 | $1136;
 $1140 = $1139&255;
 HEAP8[$arrayidx7$i656>>0] = $1140;
 $1141 = (_bitshift64Lshr(($1027|0),($1028|0),6)|0);
 $1142 = (getTempRet0() | 0);
 $1143 = $1141&255;
 HEAP8[$add$ptr34$idx>>0] = $1143;
 $1144 = (_bitshift64Lshr(($1034|0),0,14)|0);
 $1145 = (getTempRet0() | 0);
 $1146 = (_bitshift64Shl(($1032|0),($1033|0),7)|0);
 $1147 = (getTempRet0() | 0);
 $1148 = $1146 | $1144;
 $1147 | $1145;
 $1149 = $1148&255;
 HEAP8[$add$ptr34$idx501>>0] = $1149;
 $1150 = (_bitshift64Lshr(($1032|0),($1033|0),1)|0);
 $1151 = (getTempRet0() | 0);
 $1152 = $1150&255;
 HEAP8[$arrayidx1$i628>>0] = $1152;
 $1153 = (_bitshift64Lshr(($1032|0),($1033|0),9)|0);
 $1154 = (getTempRet0() | 0);
 $1155 = $1153&255;
 HEAP8[$arrayidx3$i632>>0] = $1155;
 $1156 = (_bitshift64Ashr(($1032|0),($1033|0),17)|0);
 $1157 = (getTempRet0() | 0);
 $1158 = $1156&255;
 HEAP8[$arrayidx7$i636>>0] = $1158;
 return;
}
function _ge_scalarmult($r,$a,$A) {
 $r = $r|0;
 $a = $a|0;
 $A = $A|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Ai = 0, $add = 0, $add1 = 0, $add10 = 0;
 var $add14 = 0, $add15 = 0, $add4 = 0, $and = 0, $and$i = 0, $and$i1002 = 0, $and$i1051 = 0, $and$i1121 = 0, $and$i113 = 0, $and$i1170 = 0, $and$i1219 = 0, $and$i1268 = 0, $and$i1331 = 0, $and$i1380 = 0, $and$i1429 = 0, $and$i1478 = 0, $and$i1536 = 0, $and$i162 = 0, $and$i1683 = 0, $and$i1805 = 0;
 var $and$i1854 = 0, $and$i1903 = 0, $and$i1952 = 0, $and$i211 = 0, $and$i274 = 0, $and$i323 = 0, $and$i372 = 0, $and$i421 = 0, $and$i484 = 0, $and$i533 = 0, $and$i582 = 0, $and$i631 = 0, $and$i694 = 0, $and$i743 = 0, $and$i792 = 0, $and$i841 = 0, $and$i904 = 0, $and$i953 = 0, $and29$i = 0, $and29$i1003 = 0;
 var $and29$i1052 = 0, $and29$i1122 = 0, $and29$i114 = 0, $and29$i1171 = 0, $and29$i1220 = 0, $and29$i1269 = 0, $and29$i1332 = 0, $and29$i1381 = 0, $and29$i1430 = 0, $and29$i1479 = 0, $and29$i1537 = 0, $and29$i163 = 0, $and29$i1684 = 0, $and29$i1806 = 0, $and29$i1855 = 0, $and29$i1904 = 0, $and29$i1953 = 0, $and29$i212 = 0, $and29$i275 = 0, $and29$i324 = 0;
 var $and29$i373 = 0, $and29$i422 = 0, $and29$i485 = 0, $and29$i534 = 0, $and29$i583 = 0, $and29$i632 = 0, $and29$i695 = 0, $and29$i744 = 0, $and29$i793 = 0, $and29$i842 = 0, $and29$i905 = 0, $and29$i954 = 0, $and30$i = 0, $and30$i1004 = 0, $and30$i1053 = 0, $and30$i1123 = 0, $and30$i115 = 0, $and30$i1172 = 0, $and30$i1221 = 0, $and30$i1270 = 0;
 var $and30$i1333 = 0, $and30$i1382 = 0, $and30$i1431 = 0, $and30$i1480 = 0, $and30$i1538 = 0, $and30$i164 = 0, $and30$i1685 = 0, $and30$i1807 = 0, $and30$i1856 = 0, $and30$i1905 = 0, $and30$i1954 = 0, $and30$i213 = 0, $and30$i276 = 0, $and30$i325 = 0, $and30$i374 = 0, $and30$i423 = 0, $and30$i486 = 0, $and30$i535 = 0, $and30$i584 = 0, $and30$i633 = 0;
 var $and30$i696 = 0, $and30$i745 = 0, $and30$i794 = 0, $and30$i843 = 0, $and30$i906 = 0, $and30$i955 = 0, $and31$i = 0, $and31$i1005 = 0, $and31$i1054 = 0, $and31$i1124 = 0, $and31$i116 = 0, $and31$i1173 = 0, $and31$i1222 = 0, $and31$i1271 = 0, $and31$i1334 = 0, $and31$i1383 = 0, $and31$i1432 = 0, $and31$i1481 = 0, $and31$i1539 = 0, $and31$i165 = 0;
 var $and31$i1686 = 0, $and31$i1808 = 0, $and31$i1857 = 0, $and31$i1906 = 0, $and31$i1955 = 0, $and31$i214 = 0, $and31$i277 = 0, $and31$i326 = 0, $and31$i375 = 0, $and31$i424 = 0, $and31$i487 = 0, $and31$i536 = 0, $and31$i585 = 0, $and31$i634 = 0, $and31$i697 = 0, $and31$i746 = 0, $and31$i795 = 0, $and31$i844 = 0, $and31$i907 = 0, $and31$i956 = 0;
 var $and32$i = 0, $and32$i1006 = 0, $and32$i1055 = 0, $and32$i1125 = 0, $and32$i117 = 0, $and32$i1174 = 0, $and32$i1223 = 0, $and32$i1272 = 0, $and32$i1335 = 0, $and32$i1384 = 0, $and32$i1433 = 0, $and32$i1482 = 0, $and32$i1540 = 0, $and32$i166 = 0, $and32$i1687 = 0, $and32$i1809 = 0, $and32$i1858 = 0, $and32$i1907 = 0, $and32$i1956 = 0, $and32$i215 = 0;
 var $and32$i278 = 0, $and32$i327 = 0, $and32$i376 = 0, $and32$i425 = 0, $and32$i488 = 0, $and32$i537 = 0, $and32$i586 = 0, $and32$i635 = 0, $and32$i698 = 0, $and32$i747 = 0, $and32$i796 = 0, $and32$i845 = 0, $and32$i908 = 0, $and32$i957 = 0, $and33$i = 0, $and33$i1007 = 0, $and33$i1056 = 0, $and33$i1126 = 0, $and33$i1175 = 0, $and33$i118 = 0;
 var $and33$i1224 = 0, $and33$i1273 = 0, $and33$i1336 = 0, $and33$i1385 = 0, $and33$i1434 = 0, $and33$i1483 = 0, $and33$i1541 = 0, $and33$i167 = 0, $and33$i1688 = 0, $and33$i1810 = 0, $and33$i1859 = 0, $and33$i1908 = 0, $and33$i1957 = 0, $and33$i216 = 0, $and33$i279 = 0, $and33$i328 = 0, $and33$i377 = 0, $and33$i426 = 0, $and33$i489 = 0, $and33$i538 = 0;
 var $and33$i587 = 0, $and33$i636 = 0, $and33$i699 = 0, $and33$i748 = 0, $and33$i797 = 0, $and33$i846 = 0, $and33$i909 = 0, $and33$i958 = 0, $and34$i = 0, $and34$i1008 = 0, $and34$i1057 = 0, $and34$i1127 = 0, $and34$i1176 = 0, $and34$i119 = 0, $and34$i1225 = 0, $and34$i1274 = 0, $and34$i1337 = 0, $and34$i1386 = 0, $and34$i1435 = 0, $and34$i1484 = 0;
 var $and34$i1542 = 0, $and34$i168 = 0, $and34$i1689 = 0, $and34$i1811 = 0, $and34$i1860 = 0, $and34$i1909 = 0, $and34$i1958 = 0, $and34$i217 = 0, $and34$i280 = 0, $and34$i329 = 0, $and34$i378 = 0, $and34$i427 = 0, $and34$i490 = 0, $and34$i539 = 0, $and34$i588 = 0, $and34$i637 = 0, $and34$i700 = 0, $and34$i749 = 0, $and34$i798 = 0, $and34$i847 = 0;
 var $and34$i910 = 0, $and34$i959 = 0, $and35$i = 0, $and35$i1009 = 0, $and35$i1058 = 0, $and35$i1128 = 0, $and35$i1177 = 0, $and35$i120 = 0, $and35$i1226 = 0, $and35$i1275 = 0, $and35$i1338 = 0, $and35$i1387 = 0, $and35$i1436 = 0, $and35$i1485 = 0, $and35$i1543 = 0, $and35$i169 = 0, $and35$i1690 = 0, $and35$i1812 = 0, $and35$i1861 = 0, $and35$i1910 = 0;
 var $and35$i1959 = 0, $and35$i218 = 0, $and35$i281 = 0, $and35$i330 = 0, $and35$i379 = 0, $and35$i428 = 0, $and35$i491 = 0, $and35$i540 = 0, $and35$i589 = 0, $and35$i638 = 0, $and35$i701 = 0, $and35$i750 = 0, $and35$i799 = 0, $and35$i848 = 0, $and35$i911 = 0, $and35$i960 = 0, $and36$i = 0, $and36$i1010 = 0, $and36$i1059 = 0, $and36$i1129 = 0;
 var $and36$i1178 = 0, $and36$i121 = 0, $and36$i1227 = 0, $and36$i1276 = 0, $and36$i1339 = 0, $and36$i1388 = 0, $and36$i1437 = 0, $and36$i1486 = 0, $and36$i1544 = 0, $and36$i1691 = 0, $and36$i170 = 0, $and36$i1813 = 0, $and36$i1862 = 0, $and36$i1911 = 0, $and36$i1960 = 0, $and36$i219 = 0, $and36$i282 = 0, $and36$i331 = 0, $and36$i380 = 0, $and36$i429 = 0;
 var $and36$i492 = 0, $and36$i541 = 0, $and36$i590 = 0, $and36$i639 = 0, $and36$i702 = 0, $and36$i751 = 0, $and36$i800 = 0, $and36$i849 = 0, $and36$i912 = 0, $and36$i961 = 0, $and37$i = 0, $and37$i1011 = 0, $and37$i1060 = 0, $and37$i1130 = 0, $and37$i1179 = 0, $and37$i122 = 0, $and37$i1228 = 0, $and37$i1277 = 0, $and37$i1340 = 0, $and37$i1389 = 0;
 var $and37$i1438 = 0, $and37$i1487 = 0, $and37$i1545 = 0, $and37$i1692 = 0, $and37$i171 = 0, $and37$i1814 = 0, $and37$i1863 = 0, $and37$i1912 = 0, $and37$i1961 = 0, $and37$i220 = 0, $and37$i283 = 0, $and37$i332 = 0, $and37$i381 = 0, $and37$i430 = 0, $and37$i493 = 0, $and37$i542 = 0, $and37$i591 = 0, $and37$i640 = 0, $and37$i703 = 0, $and37$i752 = 0;
 var $and37$i801 = 0, $and37$i850 = 0, $and37$i913 = 0, $and37$i962 = 0, $arraydecay1$i = 0, $arraydecay1$i76 = 0, $arraydecay11$i = 0, $arraydecay13$i = 0, $arraydecay13$i1091 = 0, $arraydecay13$i1301 = 0, $arraydecay13$i1775 = 0, $arraydecay13$i244 = 0, $arraydecay13$i454 = 0, $arraydecay13$i664 = 0, $arraydecay13$i874 = 0, $arraydecay15$i = 0, $arraydecay2$i1084 = 0, $arraydecay2$i1294 = 0, $arraydecay2$i1768 = 0, $arraydecay2$i237 = 0;
 var $arraydecay2$i44 = 0, $arraydecay2$i447 = 0, $arraydecay2$i657 = 0, $arraydecay2$i77 = 0, $arraydecay2$i867 = 0, $arraydecay3$i = 0, $arraydecay4$i = 0, $arraydecay5$i = 0, $arraydecay5$i1087 = 0, $arraydecay5$i1297 = 0, $arraydecay5$i1771 = 0, $arraydecay5$i240 = 0, $arraydecay5$i450 = 0, $arraydecay5$i660 = 0, $arraydecay5$i870 = 0, $arraydecay6$i = 0, $arraydecay7$i = 0, $arraydecay9$i = 0, $arraydecay9$i1089 = 0, $arraydecay9$i1299 = 0;
 var $arraydecay9$i1773 = 0, $arraydecay9$i242 = 0, $arraydecay9$i452 = 0, $arraydecay9$i662 = 0, $arraydecay9$i82 = 0, $arraydecay9$i872 = 0, $arrayidx = 0, $arrayidx1$i = 0, $arrayidx1$i$i = 0, $arrayidx1$i$i75 = 0, $arrayidx1$i3$i = 0, $arrayidx1$i4$i = 0, $arrayidx1$i5$i = 0, $arrayidx11 = 0, $arrayidx11$i = 0, $arrayidx11$i1031 = 0, $arrayidx11$i1101 = 0, $arrayidx11$i1150 = 0, $arrayidx11$i1199 = 0, $arrayidx11$i1248 = 0;
 var $arrayidx11$i1311 = 0, $arrayidx11$i1360 = 0, $arrayidx11$i1409 = 0, $arrayidx11$i142 = 0, $arrayidx11$i1458 = 0, $arrayidx11$i1785 = 0, $arrayidx11$i1834 = 0, $arrayidx11$i1883 = 0, $arrayidx11$i191 = 0, $arrayidx11$i1932 = 0, $arrayidx11$i254 = 0, $arrayidx11$i303 = 0, $arrayidx11$i352 = 0, $arrayidx11$i401 = 0, $arrayidx11$i464 = 0, $arrayidx11$i513 = 0, $arrayidx11$i562 = 0, $arrayidx11$i611 = 0, $arrayidx11$i674 = 0, $arrayidx11$i723 = 0;
 var $arrayidx11$i772 = 0, $arrayidx11$i821 = 0, $arrayidx11$i884 = 0, $arrayidx11$i93 = 0, $arrayidx11$i933 = 0, $arrayidx11$i982 = 0, $arrayidx12 = 0, $arrayidx12$i = 0, $arrayidx12$i1032 = 0, $arrayidx12$i1102 = 0, $arrayidx12$i1151 = 0, $arrayidx12$i1200 = 0, $arrayidx12$i1249 = 0, $arrayidx12$i1312 = 0, $arrayidx12$i1361 = 0, $arrayidx12$i1410 = 0, $arrayidx12$i143 = 0, $arrayidx12$i1459 = 0, $arrayidx12$i1786 = 0, $arrayidx12$i1835 = 0;
 var $arrayidx12$i1884 = 0, $arrayidx12$i192 = 0, $arrayidx12$i1933 = 0, $arrayidx12$i255 = 0, $arrayidx12$i304 = 0, $arrayidx12$i353 = 0, $arrayidx12$i402 = 0, $arrayidx12$i465 = 0, $arrayidx12$i514 = 0, $arrayidx12$i563 = 0, $arrayidx12$i612 = 0, $arrayidx12$i675 = 0, $arrayidx12$i724 = 0, $arrayidx12$i773 = 0, $arrayidx12$i822 = 0, $arrayidx12$i885 = 0, $arrayidx12$i934 = 0, $arrayidx12$i94 = 0, $arrayidx12$i983 = 0, $arrayidx13$i = 0;
 var $arrayidx13$i1033 = 0, $arrayidx13$i1103 = 0, $arrayidx13$i1152 = 0, $arrayidx13$i1201 = 0, $arrayidx13$i1250 = 0, $arrayidx13$i1313 = 0, $arrayidx13$i1362 = 0, $arrayidx13$i1411 = 0, $arrayidx13$i144 = 0, $arrayidx13$i1460 = 0, $arrayidx13$i1787 = 0, $arrayidx13$i1836 = 0, $arrayidx13$i1885 = 0, $arrayidx13$i193 = 0, $arrayidx13$i1934 = 0, $arrayidx13$i256 = 0, $arrayidx13$i305 = 0, $arrayidx13$i354 = 0, $arrayidx13$i403 = 0, $arrayidx13$i466 = 0;
 var $arrayidx13$i515 = 0, $arrayidx13$i564 = 0, $arrayidx13$i613 = 0, $arrayidx13$i676 = 0, $arrayidx13$i725 = 0, $arrayidx13$i774 = 0, $arrayidx13$i823 = 0, $arrayidx13$i886 = 0, $arrayidx13$i935 = 0, $arrayidx13$i95 = 0, $arrayidx13$i984 = 0, $arrayidx14$i = 0, $arrayidx14$i1034 = 0, $arrayidx14$i1104 = 0, $arrayidx14$i1153 = 0, $arrayidx14$i1202 = 0, $arrayidx14$i1251 = 0, $arrayidx14$i1314 = 0, $arrayidx14$i1363 = 0, $arrayidx14$i1412 = 0;
 var $arrayidx14$i145 = 0, $arrayidx14$i1461 = 0, $arrayidx14$i1788 = 0, $arrayidx14$i1837 = 0, $arrayidx14$i1886 = 0, $arrayidx14$i1935 = 0, $arrayidx14$i194 = 0, $arrayidx14$i257 = 0, $arrayidx14$i306 = 0, $arrayidx14$i355 = 0, $arrayidx14$i404 = 0, $arrayidx14$i467 = 0, $arrayidx14$i516 = 0, $arrayidx14$i565 = 0, $arrayidx14$i614 = 0, $arrayidx14$i677 = 0, $arrayidx14$i726 = 0, $arrayidx14$i775 = 0, $arrayidx14$i824 = 0, $arrayidx14$i887 = 0;
 var $arrayidx14$i936 = 0, $arrayidx14$i96 = 0, $arrayidx14$i985 = 0, $arrayidx15$i = 0, $arrayidx15$i1035 = 0, $arrayidx15$i1105 = 0, $arrayidx15$i1154 = 0, $arrayidx15$i1203 = 0, $arrayidx15$i1252 = 0, $arrayidx15$i1315 = 0, $arrayidx15$i1364 = 0, $arrayidx15$i1413 = 0, $arrayidx15$i146 = 0, $arrayidx15$i1462 = 0, $arrayidx15$i1789 = 0, $arrayidx15$i1838 = 0, $arrayidx15$i1887 = 0, $arrayidx15$i1936 = 0, $arrayidx15$i195 = 0, $arrayidx15$i258 = 0;
 var $arrayidx15$i307 = 0, $arrayidx15$i356 = 0, $arrayidx15$i405 = 0, $arrayidx15$i468 = 0, $arrayidx15$i517 = 0, $arrayidx15$i566 = 0, $arrayidx15$i615 = 0, $arrayidx15$i678 = 0, $arrayidx15$i727 = 0, $arrayidx15$i776 = 0, $arrayidx15$i825 = 0, $arrayidx15$i888 = 0, $arrayidx15$i937 = 0, $arrayidx15$i97 = 0, $arrayidx15$i986 = 0, $arrayidx16$i = 0, $arrayidx16$i1036 = 0, $arrayidx16$i1106 = 0, $arrayidx16$i1155 = 0, $arrayidx16$i1204 = 0;
 var $arrayidx16$i1253 = 0, $arrayidx16$i1316 = 0, $arrayidx16$i1365 = 0, $arrayidx16$i1414 = 0, $arrayidx16$i1463 = 0, $arrayidx16$i147 = 0, $arrayidx16$i1790 = 0, $arrayidx16$i1839 = 0, $arrayidx16$i1888 = 0, $arrayidx16$i1937 = 0, $arrayidx16$i196 = 0, $arrayidx16$i259 = 0, $arrayidx16$i308 = 0, $arrayidx16$i357 = 0, $arrayidx16$i406 = 0, $arrayidx16$i469 = 0, $arrayidx16$i518 = 0, $arrayidx16$i567 = 0, $arrayidx16$i616 = 0, $arrayidx16$i679 = 0;
 var $arrayidx16$i728 = 0, $arrayidx16$i777 = 0, $arrayidx16$i826 = 0, $arrayidx16$i889 = 0, $arrayidx16$i938 = 0, $arrayidx16$i98 = 0, $arrayidx16$i987 = 0, $arrayidx17$i = 0, $arrayidx17$i1037 = 0, $arrayidx17$i1107 = 0, $arrayidx17$i1156 = 0, $arrayidx17$i1205 = 0, $arrayidx17$i1254 = 0, $arrayidx17$i1317 = 0, $arrayidx17$i1366 = 0, $arrayidx17$i1415 = 0, $arrayidx17$i1464 = 0, $arrayidx17$i148 = 0, $arrayidx17$i1791 = 0, $arrayidx17$i1840 = 0;
 var $arrayidx17$i1889 = 0, $arrayidx17$i1938 = 0, $arrayidx17$i197 = 0, $arrayidx17$i260 = 0, $arrayidx17$i309 = 0, $arrayidx17$i358 = 0, $arrayidx17$i407 = 0, $arrayidx17$i470 = 0, $arrayidx17$i519 = 0, $arrayidx17$i568 = 0, $arrayidx17$i617 = 0, $arrayidx17$i680 = 0, $arrayidx17$i729 = 0, $arrayidx17$i778 = 0, $arrayidx17$i827 = 0, $arrayidx17$i890 = 0, $arrayidx17$i939 = 0, $arrayidx17$i988 = 0, $arrayidx17$i99 = 0, $arrayidx18$i = 0;
 var $arrayidx18$i100 = 0, $arrayidx18$i1038 = 0, $arrayidx18$i1108 = 0, $arrayidx18$i1157 = 0, $arrayidx18$i1206 = 0, $arrayidx18$i1255 = 0, $arrayidx18$i1318 = 0, $arrayidx18$i1367 = 0, $arrayidx18$i1416 = 0, $arrayidx18$i1465 = 0, $arrayidx18$i149 = 0, $arrayidx18$i1792 = 0, $arrayidx18$i1841 = 0, $arrayidx18$i1890 = 0, $arrayidx18$i1939 = 0, $arrayidx18$i198 = 0, $arrayidx18$i261 = 0, $arrayidx18$i310 = 0, $arrayidx18$i359 = 0, $arrayidx18$i408 = 0;
 var $arrayidx18$i471 = 0, $arrayidx18$i520 = 0, $arrayidx18$i569 = 0, $arrayidx18$i618 = 0, $arrayidx18$i681 = 0, $arrayidx18$i730 = 0, $arrayidx18$i779 = 0, $arrayidx18$i828 = 0, $arrayidx18$i891 = 0, $arrayidx18$i940 = 0, $arrayidx18$i989 = 0, $arrayidx19$i = 0, $arrayidx19$i101 = 0, $arrayidx19$i1039 = 0, $arrayidx19$i1109 = 0, $arrayidx19$i1158 = 0, $arrayidx19$i1207 = 0, $arrayidx19$i1256 = 0, $arrayidx19$i1319 = 0, $arrayidx19$i1368 = 0;
 var $arrayidx19$i1417 = 0, $arrayidx19$i1466 = 0, $arrayidx19$i150 = 0, $arrayidx19$i1793 = 0, $arrayidx19$i1842 = 0, $arrayidx19$i1891 = 0, $arrayidx19$i1940 = 0, $arrayidx19$i199 = 0, $arrayidx19$i262 = 0, $arrayidx19$i311 = 0, $arrayidx19$i360 = 0, $arrayidx19$i409 = 0, $arrayidx19$i472 = 0, $arrayidx19$i521 = 0, $arrayidx19$i570 = 0, $arrayidx19$i619 = 0, $arrayidx19$i682 = 0, $arrayidx19$i731 = 0, $arrayidx19$i780 = 0, $arrayidx19$i829 = 0;
 var $arrayidx19$i892 = 0, $arrayidx19$i941 = 0, $arrayidx19$i990 = 0, $arrayidx2$i = 0, $arrayidx2$i134 = 0, $arrayidx2$i183 = 0, $arrayidx2$i85 = 0, $arrayidx20 = 0, $arrayidx22 = 0, $arrayidx3 = 0, $arrayidx3$i = 0, $arrayidx3$i135 = 0, $arrayidx3$i184 = 0, $arrayidx3$i86 = 0, $arrayidx30 = 0, $arrayidx30$1 = 0, $arrayidx30$2 = 0, $arrayidx30$3 = 0, $arrayidx30$4 = 0, $arrayidx30$5 = 0;
 var $arrayidx30$6 = 0, $arrayidx38 = 0, $arrayidx4$i = 0, $arrayidx4$i136 = 0, $arrayidx4$i185 = 0, $arrayidx4$i87 = 0, $arrayidx5$i = 0, $arrayidx5$i137 = 0, $arrayidx5$i186 = 0, $arrayidx5$i88 = 0, $arrayidx6$i = 0, $arrayidx6$i138 = 0, $arrayidx6$i187 = 0, $arrayidx6$i89 = 0, $arrayidx7$i = 0, $arrayidx7$i139 = 0, $arrayidx7$i188 = 0, $arrayidx7$i90 = 0, $arrayidx8$i = 0, $arrayidx8$i140 = 0;
 var $arrayidx8$i189 = 0, $arrayidx8$i91 = 0, $arrayidx9$i = 0, $arrayidx9$i141 = 0, $arrayidx9$i190 = 0, $arrayidx9$i92 = 0, $carry$02020 = 0, $cmp35 = 0, $conv = 0, $conv13 = 0, $conv19 = 0, $conv2 = 0, $conv21 = 0, $conv3$i = 0, $conv3$i1079 = 0, $conv3$i1289 = 0, $conv3$i1973 = 0, $conv3$i232 = 0, $conv3$i442 = 0, $conv3$i652 = 0;
 var $conv3$i862 = 0, $conv39 = 0, $conv40 = 0, $conv8 = 0, $cur = 0, $dec = 0, $e = 0, $exitcond = 0, $i$02019 = 0, $i$22017 = 0, $inc = 0, $mul = 0, $shl = 0, $shl17 = 0, $shl43 = 0, $shl6 = 0, $shr = 0, $shr5 = 0, $sub = 0, $sub$i = 0;
 var $sub$i1050 = 0, $sub$i1080 = 0, $sub$i1267 = 0, $sub$i1290 = 0, $sub$i1477 = 0, $sub$i1712 = 0, $sub$i1951 = 0, $sub$i1974 = 0, $sub$i210 = 0, $sub$i233 = 0, $sub$i420 = 0, $sub$i443 = 0, $sub$i630 = 0, $sub$i653 = 0, $sub$i840 = 0, $sub$i863 = 0, $sub10$i = 0, $sub11$i = 0, $sub12$i = 0, $sub13$i = 0;
 var $sub14$i = 0, $sub15$i = 0, $sub16$i = 0, $sub17$i = 0, $sub18 = 0, $sub18$i = 0, $sub41 = 0, $sub44 = 0, $sub7 = 0, $t = 0, $u = 0, $xor$i = 0, $xor$i102 = 0, $xor$i1040 = 0, $xor$i1110 = 0, $xor$i1159 = 0, $xor$i1208 = 0, $xor$i1257 = 0, $xor$i1320 = 0, $xor$i1369 = 0;
 var $xor$i1418 = 0, $xor$i1467 = 0, $xor$i151 = 0, $xor$i1525 = 0, $xor$i1672 = 0, $xor$i1794 = 0, $xor$i1843 = 0, $xor$i1892 = 0, $xor$i1941 = 0, $xor$i200 = 0, $xor$i263 = 0, $xor$i312 = 0, $xor$i361 = 0, $xor$i410 = 0, $xor$i473 = 0, $xor$i522 = 0, $xor$i571 = 0, $xor$i620 = 0, $xor$i683 = 0, $xor$i732 = 0;
 var $xor$i781 = 0, $xor$i830 = 0, $xor$i893 = 0, $xor$i942 = 0, $xor$i991 = 0, $xor20$i = 0, $xor20$i1041 = 0, $xor20$i1111 = 0, $xor20$i1160 = 0, $xor20$i1209 = 0, $xor20$i1258 = 0, $xor20$i1321 = 0, $xor20$i1370 = 0, $xor20$i1419 = 0, $xor20$i1468 = 0, $xor20$i1526 = 0, $xor20$i1673 = 0, $xor20$i1795 = 0, $xor20$i1844 = 0, $xor20$i1893 = 0;
 var $xor20$i1942 = 0, $xor20$i264 = 0, $xor20$i313 = 0, $xor20$i362 = 0, $xor20$i411 = 0, $xor20$i474 = 0, $xor20$i523 = 0, $xor20$i572 = 0, $xor20$i621 = 0, $xor20$i684 = 0, $xor20$i733 = 0, $xor20$i782 = 0, $xor20$i831 = 0, $xor20$i894 = 0, $xor20$i943 = 0, $xor20$i992 = 0, $xor21$i = 0, $xor21$i1042 = 0, $xor21$i1112 = 0, $xor21$i1161 = 0;
 var $xor21$i1210 = 0, $xor21$i1259 = 0, $xor21$i1322 = 0, $xor21$i1371 = 0, $xor21$i1420 = 0, $xor21$i1469 = 0, $xor21$i1527 = 0, $xor21$i1674 = 0, $xor21$i1796 = 0, $xor21$i1845 = 0, $xor21$i1894 = 0, $xor21$i1943 = 0, $xor21$i265 = 0, $xor21$i314 = 0, $xor21$i363 = 0, $xor21$i412 = 0, $xor21$i475 = 0, $xor21$i524 = 0, $xor21$i573 = 0, $xor21$i622 = 0;
 var $xor21$i685 = 0, $xor21$i734 = 0, $xor21$i783 = 0, $xor21$i832 = 0, $xor21$i895 = 0, $xor21$i944 = 0, $xor21$i993 = 0, $xor22$i = 0, $xor22$i1043 = 0, $xor22$i1113 = 0, $xor22$i1162 = 0, $xor22$i1211 = 0, $xor22$i1260 = 0, $xor22$i1323 = 0, $xor22$i1372 = 0, $xor22$i1421 = 0, $xor22$i1470 = 0, $xor22$i1528 = 0, $xor22$i1675 = 0, $xor22$i1797 = 0;
 var $xor22$i1846 = 0, $xor22$i1895 = 0, $xor22$i1944 = 0, $xor22$i266 = 0, $xor22$i315 = 0, $xor22$i364 = 0, $xor22$i413 = 0, $xor22$i476 = 0, $xor22$i525 = 0, $xor22$i574 = 0, $xor22$i623 = 0, $xor22$i686 = 0, $xor22$i735 = 0, $xor22$i784 = 0, $xor22$i833 = 0, $xor22$i896 = 0, $xor22$i945 = 0, $xor22$i994 = 0, $xor23$i = 0, $xor23$i1044 = 0;
 var $xor23$i1114 = 0, $xor23$i1163 = 0, $xor23$i1212 = 0, $xor23$i1261 = 0, $xor23$i1324 = 0, $xor23$i1373 = 0, $xor23$i1422 = 0, $xor23$i1471 = 0, $xor23$i1529 = 0, $xor23$i1676 = 0, $xor23$i1798 = 0, $xor23$i1847 = 0, $xor23$i1896 = 0, $xor23$i1945 = 0, $xor23$i267 = 0, $xor23$i316 = 0, $xor23$i365 = 0, $xor23$i414 = 0, $xor23$i477 = 0, $xor23$i526 = 0;
 var $xor23$i575 = 0, $xor23$i624 = 0, $xor23$i687 = 0, $xor23$i736 = 0, $xor23$i785 = 0, $xor23$i834 = 0, $xor23$i897 = 0, $xor23$i946 = 0, $xor23$i995 = 0, $xor24$i = 0, $xor24$i1045 = 0, $xor24$i1115 = 0, $xor24$i1164 = 0, $xor24$i1213 = 0, $xor24$i1262 = 0, $xor24$i1325 = 0, $xor24$i1374 = 0, $xor24$i1423 = 0, $xor24$i1472 = 0, $xor24$i1530 = 0;
 var $xor24$i1677 = 0, $xor24$i1799 = 0, $xor24$i1848 = 0, $xor24$i1897 = 0, $xor24$i1946 = 0, $xor24$i268 = 0, $xor24$i317 = 0, $xor24$i366 = 0, $xor24$i415 = 0, $xor24$i478 = 0, $xor24$i527 = 0, $xor24$i576 = 0, $xor24$i625 = 0, $xor24$i688 = 0, $xor24$i737 = 0, $xor24$i786 = 0, $xor24$i835 = 0, $xor24$i898 = 0, $xor24$i947 = 0, $xor24$i996 = 0;
 var $xor25$i = 0, $xor25$i1046 = 0, $xor25$i1116 = 0, $xor25$i1165 = 0, $xor25$i1214 = 0, $xor25$i1263 = 0, $xor25$i1326 = 0, $xor25$i1375 = 0, $xor25$i1424 = 0, $xor25$i1473 = 0, $xor25$i1531 = 0, $xor25$i1678 = 0, $xor25$i1800 = 0, $xor25$i1849 = 0, $xor25$i1898 = 0, $xor25$i1947 = 0, $xor25$i269 = 0, $xor25$i318 = 0, $xor25$i367 = 0, $xor25$i416 = 0;
 var $xor25$i479 = 0, $xor25$i528 = 0, $xor25$i577 = 0, $xor25$i626 = 0, $xor25$i689 = 0, $xor25$i738 = 0, $xor25$i787 = 0, $xor25$i836 = 0, $xor25$i899 = 0, $xor25$i948 = 0, $xor25$i997 = 0, $xor26$i = 0, $xor26$i1047 = 0, $xor26$i1117 = 0, $xor26$i1166 = 0, $xor26$i1215 = 0, $xor26$i1264 = 0, $xor26$i1327 = 0, $xor26$i1376 = 0, $xor26$i1425 = 0;
 var $xor26$i1474 = 0, $xor26$i1532 = 0, $xor26$i1679 = 0, $xor26$i1801 = 0, $xor26$i1850 = 0, $xor26$i1899 = 0, $xor26$i1948 = 0, $xor26$i270 = 0, $xor26$i319 = 0, $xor26$i368 = 0, $xor26$i417 = 0, $xor26$i480 = 0, $xor26$i529 = 0, $xor26$i578 = 0, $xor26$i627 = 0, $xor26$i690 = 0, $xor26$i739 = 0, $xor26$i788 = 0, $xor26$i837 = 0, $xor26$i900 = 0;
 var $xor26$i949 = 0, $xor26$i998 = 0, $xor27$i = 0, $xor27$i1048 = 0, $xor27$i1118 = 0, $xor27$i1167 = 0, $xor27$i1216 = 0, $xor27$i1265 = 0, $xor27$i1328 = 0, $xor27$i1377 = 0, $xor27$i1426 = 0, $xor27$i1475 = 0, $xor27$i1533 = 0, $xor27$i1680 = 0, $xor27$i1802 = 0, $xor27$i1851 = 0, $xor27$i1900 = 0, $xor27$i1949 = 0, $xor27$i271 = 0, $xor27$i320 = 0;
 var $xor27$i369 = 0, $xor27$i418 = 0, $xor27$i481 = 0, $xor27$i530 = 0, $xor27$i579 = 0, $xor27$i628 = 0, $xor27$i691 = 0, $xor27$i740 = 0, $xor27$i789 = 0, $xor27$i838 = 0, $xor27$i901 = 0, $xor27$i950 = 0, $xor27$i999 = 0, $xor28$i = 0, $xor28$i1000 = 0, $xor28$i1049 = 0, $xor28$i1119 = 0, $xor28$i1168 = 0, $xor28$i1217 = 0, $xor28$i1266 = 0;
 var $xor28$i1329 = 0, $xor28$i1378 = 0, $xor28$i1427 = 0, $xor28$i1476 = 0, $xor28$i1534 = 0, $xor28$i1681 = 0, $xor28$i1803 = 0, $xor28$i1852 = 0, $xor28$i1901 = 0, $xor28$i1950 = 0, $xor28$i272 = 0, $xor28$i321 = 0, $xor28$i370 = 0, $xor28$i419 = 0, $xor28$i482 = 0, $xor28$i531 = 0, $xor28$i580 = 0, $xor28$i629 = 0, $xor28$i692 = 0, $xor28$i741 = 0;
 var $xor28$i790 = 0, $xor28$i839 = 0, $xor28$i902 = 0, $xor28$i951 = 0, $xor38$i = 0, $xor38$i1012 = 0, $xor38$i1061 = 0, $xor38$i1131 = 0, $xor38$i1180 = 0, $xor38$i1229 = 0, $xor38$i123 = 0, $xor38$i1278 = 0, $xor38$i1341 = 0, $xor38$i1390 = 0, $xor38$i1439 = 0, $xor38$i1488 = 0, $xor38$i1546 = 0, $xor38$i1644 = 0, $xor38$i1693 = 0, $xor38$i172 = 0;
 var $xor38$i1815 = 0, $xor38$i1864 = 0, $xor38$i1913 = 0, $xor38$i1962 = 0, $xor38$i221 = 0, $xor38$i284 = 0, $xor38$i333 = 0, $xor38$i382 = 0, $xor38$i431 = 0, $xor38$i494 = 0, $xor38$i543 = 0, $xor38$i592 = 0, $xor38$i641 = 0, $xor38$i704 = 0, $xor38$i753 = 0, $xor38$i802 = 0, $xor38$i851 = 0, $xor38$i914 = 0, $xor38$i963 = 0, $xor4$i = 0;
 var $xor40$i = 0, $xor40$i1013 = 0, $xor40$i1062 = 0, $xor40$i1132 = 0, $xor40$i1181 = 0, $xor40$i1230 = 0, $xor40$i1279 = 0, $xor40$i1342 = 0, $xor40$i1391 = 0, $xor40$i1440 = 0, $xor40$i1489 = 0, $xor40$i1547 = 0, $xor40$i1645 = 0, $xor40$i1694 = 0, $xor40$i1816 = 0, $xor40$i1865 = 0, $xor40$i1914 = 0, $xor40$i1963 = 0, $xor40$i285 = 0, $xor40$i334 = 0;
 var $xor40$i383 = 0, $xor40$i432 = 0, $xor40$i495 = 0, $xor40$i544 = 0, $xor40$i593 = 0, $xor40$i642 = 0, $xor40$i705 = 0, $xor40$i754 = 0, $xor40$i803 = 0, $xor40$i852 = 0, $xor40$i915 = 0, $xor40$i964 = 0, $xor42$i = 0, $xor42$i1014 = 0, $xor42$i1063 = 0, $xor42$i1133 = 0, $xor42$i1182 = 0, $xor42$i1231 = 0, $xor42$i1280 = 0, $xor42$i1343 = 0;
 var $xor42$i1392 = 0, $xor42$i1441 = 0, $xor42$i1490 = 0, $xor42$i1548 = 0, $xor42$i1646 = 0, $xor42$i1695 = 0, $xor42$i1817 = 0, $xor42$i1866 = 0, $xor42$i1915 = 0, $xor42$i1964 = 0, $xor42$i286 = 0, $xor42$i335 = 0, $xor42$i384 = 0, $xor42$i433 = 0, $xor42$i496 = 0, $xor42$i545 = 0, $xor42$i594 = 0, $xor42$i643 = 0, $xor42$i706 = 0, $xor42$i755 = 0;
 var $xor42$i804 = 0, $xor42$i853 = 0, $xor42$i916 = 0, $xor42$i965 = 0, $xor44$i = 0, $xor44$i1015 = 0, $xor44$i1064 = 0, $xor44$i1134 = 0, $xor44$i1183 = 0, $xor44$i1232 = 0, $xor44$i1281 = 0, $xor44$i1344 = 0, $xor44$i1393 = 0, $xor44$i1442 = 0, $xor44$i1491 = 0, $xor44$i1549 = 0, $xor44$i1647 = 0, $xor44$i1696 = 0, $xor44$i1818 = 0, $xor44$i1867 = 0;
 var $xor44$i1916 = 0, $xor44$i1965 = 0, $xor44$i287 = 0, $xor44$i336 = 0, $xor44$i385 = 0, $xor44$i434 = 0, $xor44$i497 = 0, $xor44$i546 = 0, $xor44$i595 = 0, $xor44$i644 = 0, $xor44$i707 = 0, $xor44$i756 = 0, $xor44$i805 = 0, $xor44$i854 = 0, $xor44$i917 = 0, $xor44$i966 = 0, $xor46$i = 0, $xor46$i1016 = 0, $xor46$i1065 = 0, $xor46$i1135 = 0;
 var $xor46$i1184 = 0, $xor46$i1233 = 0, $xor46$i1282 = 0, $xor46$i1345 = 0, $xor46$i1394 = 0, $xor46$i1443 = 0, $xor46$i1492 = 0, $xor46$i1550 = 0, $xor46$i1648 = 0, $xor46$i1697 = 0, $xor46$i1819 = 0, $xor46$i1868 = 0, $xor46$i1917 = 0, $xor46$i1966 = 0, $xor46$i288 = 0, $xor46$i337 = 0, $xor46$i386 = 0, $xor46$i435 = 0, $xor46$i498 = 0, $xor46$i547 = 0;
 var $xor46$i596 = 0, $xor46$i645 = 0, $xor46$i708 = 0, $xor46$i757 = 0, $xor46$i806 = 0, $xor46$i855 = 0, $xor46$i918 = 0, $xor46$i967 = 0, $xor48$i = 0, $xor48$i1017 = 0, $xor48$i1066 = 0, $xor48$i1136 = 0, $xor48$i1185 = 0, $xor48$i1234 = 0, $xor48$i1283 = 0, $xor48$i1346 = 0, $xor48$i1395 = 0, $xor48$i1444 = 0, $xor48$i1493 = 0, $xor48$i1551 = 0;
 var $xor48$i1649 = 0, $xor48$i1698 = 0, $xor48$i1820 = 0, $xor48$i1869 = 0, $xor48$i1918 = 0, $xor48$i1967 = 0, $xor48$i289 = 0, $xor48$i338 = 0, $xor48$i387 = 0, $xor48$i436 = 0, $xor48$i499 = 0, $xor48$i548 = 0, $xor48$i597 = 0, $xor48$i646 = 0, $xor48$i709 = 0, $xor48$i758 = 0, $xor48$i807 = 0, $xor48$i856 = 0, $xor48$i919 = 0, $xor48$i968 = 0;
 var $xor50$i = 0, $xor50$i1018 = 0, $xor50$i1067 = 0, $xor50$i1137 = 0, $xor50$i1186 = 0, $xor50$i1235 = 0, $xor50$i1284 = 0, $xor50$i1347 = 0, $xor50$i1396 = 0, $xor50$i1445 = 0, $xor50$i1494 = 0, $xor50$i1552 = 0, $xor50$i1650 = 0, $xor50$i1699 = 0, $xor50$i1821 = 0, $xor50$i1870 = 0, $xor50$i1919 = 0, $xor50$i1968 = 0, $xor50$i290 = 0, $xor50$i339 = 0;
 var $xor50$i388 = 0, $xor50$i437 = 0, $xor50$i500 = 0, $xor50$i549 = 0, $xor50$i598 = 0, $xor50$i647 = 0, $xor50$i710 = 0, $xor50$i759 = 0, $xor50$i808 = 0, $xor50$i857 = 0, $xor50$i920 = 0, $xor50$i969 = 0, $xor52$i = 0, $xor52$i1019 = 0, $xor52$i1068 = 0, $xor52$i1138 = 0, $xor52$i1187 = 0, $xor52$i1236 = 0, $xor52$i1285 = 0, $xor52$i1348 = 0;
 var $xor52$i1397 = 0, $xor52$i1446 = 0, $xor52$i1495 = 0, $xor52$i1553 = 0, $xor52$i1651 = 0, $xor52$i1700 = 0, $xor52$i1822 = 0, $xor52$i1871 = 0, $xor52$i1920 = 0, $xor52$i1969 = 0, $xor52$i291 = 0, $xor52$i340 = 0, $xor52$i389 = 0, $xor52$i438 = 0, $xor52$i501 = 0, $xor52$i550 = 0, $xor52$i599 = 0, $xor52$i648 = 0, $xor52$i711 = 0, $xor52$i760 = 0;
 var $xor52$i809 = 0, $xor52$i858 = 0, $xor52$i921 = 0, $xor52$i970 = 0, $xor54$i = 0, $xor54$i1020 = 0, $xor54$i1069 = 0, $xor54$i1139 = 0, $xor54$i1188 = 0, $xor54$i1237 = 0, $xor54$i1286 = 0, $xor54$i1349 = 0, $xor54$i1398 = 0, $xor54$i1447 = 0, $xor54$i1496 = 0, $xor54$i1554 = 0, $xor54$i1652 = 0, $xor54$i1701 = 0, $xor54$i1823 = 0, $xor54$i1872 = 0;
 var $xor54$i1921 = 0, $xor54$i1970 = 0, $xor54$i292 = 0, $xor54$i341 = 0, $xor54$i390 = 0, $xor54$i439 = 0, $xor54$i502 = 0, $xor54$i551 = 0, $xor54$i600 = 0, $xor54$i649 = 0, $xor54$i712 = 0, $xor54$i761 = 0, $xor54$i810 = 0, $xor54$i859 = 0, $xor54$i922 = 0, $xor54$i971 = 0, $xor56$i = 0, $xor56$i1021 = 0, $xor56$i1070 = 0, $xor56$i1140 = 0;
 var $xor56$i1189 = 0, $xor56$i1238 = 0, $xor56$i1287 = 0, $xor56$i1350 = 0, $xor56$i1399 = 0, $xor56$i1448 = 0, $xor56$i1497 = 0, $xor56$i1555 = 0, $xor56$i1653 = 0, $xor56$i1702 = 0, $xor56$i1824 = 0, $xor56$i1873 = 0, $xor56$i1922 = 0, $xor56$i1971 = 0, $xor56$i293 = 0, $xor56$i342 = 0, $xor56$i391 = 0, $xor56$i440 = 0, $xor56$i503 = 0, $xor56$i552 = 0;
 var $xor56$i601 = 0, $xor56$i650 = 0, $xor56$i713 = 0, $xor56$i762 = 0, $xor56$i811 = 0, $xor56$i860 = 0, $xor56$i923 = 0, $xor56$i972 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1824|0;
 $e = sp + 1280|0;
 $Ai = sp;
 $t = sp + 1664|0;
 $u = sp + 1504|0;
 $cur = sp + 1344|0;
 $carry$02020 = 0;$i$02019 = 0;
 while(1) {
  $arrayidx = (($a) + ($i$02019)|0);
  $0 = HEAP8[$arrayidx>>0]|0;
  $conv = $0&255;
  $add = (($carry$02020) + ($conv))|0;
  $add1 = (($add) + 8)|0;
  $shr = $add1 >> 4;
  $shl = $add1 & 240;
  $sub = (($add) - ($shl))|0;
  $conv2 = $sub&255;
  $mul = $i$02019 << 1;
  $arrayidx3 = (($e) + ($mul)|0);
  HEAP8[$arrayidx3>>0] = $conv2;
  $add4 = (($shr) + 8)|0;
  $shr5 = $add4 >> 4;
  $shl6 = $add4 & 240;
  $sub7 = (($shr) - ($shl6))|0;
  $conv8 = $sub7&255;
  $add10 = $mul | 1;
  $arrayidx11 = (($e) + ($add10)|0);
  HEAP8[$arrayidx11>>0] = $conv8;
  $inc = (($i$02019) + 1)|0;
  $exitcond = ($inc|0)==(31);
  if ($exitcond) {
   break;
  } else {
   $carry$02020 = $shr5;$i$02019 = $inc;
  }
 }
 $arrayidx12 = ((($a)) + 31|0);
 $1 = HEAP8[$arrayidx12>>0]|0;
 $conv13 = $1&255;
 $add14 = (($shr5) + ($conv13))|0;
 $add15 = (($add14) + 8)|0;
 $2 = $add15 >>> 4;
 $shl17 = $add15 & 240;
 $sub18 = (($add14) - ($shl17))|0;
 $conv19 = $sub18&255;
 $arrayidx20 = ((($e)) + 62|0);
 HEAP8[$arrayidx20>>0] = $conv19;
 $conv21 = $2&255;
 $arrayidx22 = ((($e)) + 63|0);
 HEAP8[$arrayidx22>>0] = $conv21;
 _ge_p3_to_cached($Ai,$A);
 $arraydecay3$i = ((($t)) + 120|0);
 $arraydecay4$i = ((($u)) + 40|0);
 $arraydecay6$i = ((($t)) + 40|0);
 $arraydecay7$i = ((($t)) + 80|0);
 $arraydecay9$i = ((($u)) + 80|0);
 $arraydecay15$i = ((($u)) + 120|0);
 _ge_add($t,$A,$Ai);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30 = ((($Ai)) + 160|0);
 _ge_p3_to_cached($arrayidx30,$u);
 _ge_add($t,$A,$arrayidx30);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30$1 = ((($Ai)) + 320|0);
 _ge_p3_to_cached($arrayidx30$1,$u);
 _ge_add($t,$A,$arrayidx30$1);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30$2 = ((($Ai)) + 480|0);
 _ge_p3_to_cached($arrayidx30$2,$u);
 _ge_add($t,$A,$arrayidx30$2);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30$3 = ((($Ai)) + 640|0);
 _ge_p3_to_cached($arrayidx30$3,$u);
 _ge_add($t,$A,$arrayidx30$3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30$4 = ((($Ai)) + 800|0);
 _ge_p3_to_cached($arrayidx30$4,$u);
 _ge_add($t,$A,$arrayidx30$4);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30$5 = ((($Ai)) + 960|0);
 _ge_p3_to_cached($arrayidx30$5,$u);
 _ge_add($t,$A,$arrayidx30$5);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $arrayidx30$6 = ((($Ai)) + 1120|0);
 _ge_p3_to_cached($arrayidx30$6,$u);
 dest=$r; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay1$i = ((($r)) + 40|0);
 HEAP32[$arraydecay1$i>>2] = 1;
 $arrayidx1$i3$i = ((($r)) + 44|0);
 dest=$arrayidx1$i3$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay2$i44 = ((($r)) + 80|0);
 HEAP32[$arraydecay2$i44>>2] = 1;
 $arrayidx1$i$i = ((($r)) + 84|0);
 dest=$arrayidx1$i$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arrayidx1$i$i75 = ((($cur)) + 4|0);
 $arraydecay1$i76 = ((($cur)) + 40|0);
 $arrayidx1$i5$i = ((($cur)) + 44|0);
 $arraydecay2$i77 = ((($cur)) + 80|0);
 $arrayidx1$i4$i = ((($cur)) + 84|0);
 $arrayidx2$i183 = ((($cur)) + 8|0);
 $arrayidx3$i184 = ((($cur)) + 12|0);
 $arrayidx4$i185 = ((($cur)) + 16|0);
 $arrayidx5$i186 = ((($cur)) + 20|0);
 $arrayidx6$i187 = ((($cur)) + 24|0);
 $arrayidx7$i188 = ((($cur)) + 28|0);
 $arrayidx8$i189 = ((($cur)) + 32|0);
 $arrayidx9$i190 = ((($cur)) + 36|0);
 $arrayidx11$i191 = ((($Ai)) + 4|0);
 $arrayidx12$i192 = ((($Ai)) + 8|0);
 $arrayidx13$i193 = ((($Ai)) + 12|0);
 $arrayidx14$i194 = ((($Ai)) + 16|0);
 $arrayidx15$i195 = ((($Ai)) + 20|0);
 $arrayidx16$i196 = ((($Ai)) + 24|0);
 $arrayidx17$i197 = ((($Ai)) + 28|0);
 $arrayidx18$i198 = ((($Ai)) + 32|0);
 $arrayidx19$i199 = ((($Ai)) + 36|0);
 $arraydecay5$i = ((($Ai)) + 40|0);
 $arrayidx2$i134 = ((($cur)) + 48|0);
 $arrayidx3$i135 = ((($cur)) + 52|0);
 $arrayidx4$i136 = ((($cur)) + 56|0);
 $arrayidx5$i137 = ((($cur)) + 60|0);
 $arrayidx6$i138 = ((($cur)) + 64|0);
 $arrayidx7$i139 = ((($cur)) + 68|0);
 $arrayidx8$i140 = ((($cur)) + 72|0);
 $arrayidx9$i141 = ((($cur)) + 76|0);
 $arrayidx11$i142 = ((($Ai)) + 44|0);
 $arrayidx12$i143 = ((($Ai)) + 48|0);
 $arrayidx13$i144 = ((($Ai)) + 52|0);
 $arrayidx14$i145 = ((($Ai)) + 56|0);
 $arrayidx15$i146 = ((($Ai)) + 60|0);
 $arrayidx16$i147 = ((($Ai)) + 64|0);
 $arrayidx17$i148 = ((($Ai)) + 68|0);
 $arrayidx18$i149 = ((($Ai)) + 72|0);
 $arrayidx19$i150 = ((($Ai)) + 76|0);
 $arraydecay9$i82 = ((($Ai)) + 80|0);
 $arrayidx2$i85 = ((($cur)) + 88|0);
 $arrayidx3$i86 = ((($cur)) + 92|0);
 $arrayidx4$i87 = ((($cur)) + 96|0);
 $arrayidx5$i88 = ((($cur)) + 100|0);
 $arrayidx6$i89 = ((($cur)) + 104|0);
 $arrayidx7$i90 = ((($cur)) + 108|0);
 $arrayidx8$i91 = ((($cur)) + 112|0);
 $arrayidx9$i92 = ((($cur)) + 116|0);
 $arrayidx11$i93 = ((($Ai)) + 84|0);
 $arrayidx12$i94 = ((($Ai)) + 88|0);
 $arrayidx13$i95 = ((($Ai)) + 92|0);
 $arrayidx14$i96 = ((($Ai)) + 96|0);
 $arrayidx15$i97 = ((($Ai)) + 100|0);
 $arrayidx16$i98 = ((($Ai)) + 104|0);
 $arrayidx17$i99 = ((($Ai)) + 108|0);
 $arrayidx18$i100 = ((($Ai)) + 112|0);
 $arrayidx19$i101 = ((($Ai)) + 116|0);
 $arraydecay11$i = ((($cur)) + 120|0);
 $arraydecay13$i = ((($Ai)) + 120|0);
 $arrayidx1$i = ((($cur)) + 124|0);
 $arrayidx2$i = ((($cur)) + 128|0);
 $arrayidx3$i = ((($cur)) + 132|0);
 $arrayidx4$i = ((($cur)) + 136|0);
 $arrayidx5$i = ((($cur)) + 140|0);
 $arrayidx6$i = ((($cur)) + 144|0);
 $arrayidx7$i = ((($cur)) + 148|0);
 $arrayidx8$i = ((($cur)) + 152|0);
 $arrayidx9$i = ((($cur)) + 156|0);
 $arrayidx11$i = ((($Ai)) + 124|0);
 $arrayidx12$i = ((($Ai)) + 128|0);
 $arrayidx13$i = ((($Ai)) + 132|0);
 $arrayidx14$i = ((($Ai)) + 136|0);
 $arrayidx15$i = ((($Ai)) + 140|0);
 $arrayidx16$i = ((($Ai)) + 144|0);
 $arrayidx17$i = ((($Ai)) + 148|0);
 $arrayidx18$i = ((($Ai)) + 152|0);
 $arrayidx19$i = ((($Ai)) + 156|0);
 $arraydecay2$i237 = ((($Ai)) + 160|0);
 $arrayidx11$i401 = ((($Ai)) + 164|0);
 $arrayidx12$i402 = ((($Ai)) + 168|0);
 $arrayidx13$i403 = ((($Ai)) + 172|0);
 $arrayidx14$i404 = ((($Ai)) + 176|0);
 $arrayidx15$i405 = ((($Ai)) + 180|0);
 $arrayidx16$i406 = ((($Ai)) + 184|0);
 $arrayidx17$i407 = ((($Ai)) + 188|0);
 $arrayidx18$i408 = ((($Ai)) + 192|0);
 $arrayidx19$i409 = ((($Ai)) + 196|0);
 $arraydecay5$i240 = ((($Ai)) + 200|0);
 $arrayidx11$i352 = ((($Ai)) + 204|0);
 $arrayidx12$i353 = ((($Ai)) + 208|0);
 $arrayidx13$i354 = ((($Ai)) + 212|0);
 $arrayidx14$i355 = ((($Ai)) + 216|0);
 $arrayidx15$i356 = ((($Ai)) + 220|0);
 $arrayidx16$i357 = ((($Ai)) + 224|0);
 $arrayidx17$i358 = ((($Ai)) + 228|0);
 $arrayidx18$i359 = ((($Ai)) + 232|0);
 $arrayidx19$i360 = ((($Ai)) + 236|0);
 $arraydecay9$i242 = ((($Ai)) + 240|0);
 $arrayidx11$i303 = ((($Ai)) + 244|0);
 $arrayidx12$i304 = ((($Ai)) + 248|0);
 $arrayidx13$i305 = ((($Ai)) + 252|0);
 $arrayidx14$i306 = ((($Ai)) + 256|0);
 $arrayidx15$i307 = ((($Ai)) + 260|0);
 $arrayidx16$i308 = ((($Ai)) + 264|0);
 $arrayidx17$i309 = ((($Ai)) + 268|0);
 $arrayidx18$i310 = ((($Ai)) + 272|0);
 $arrayidx19$i311 = ((($Ai)) + 276|0);
 $arraydecay13$i244 = ((($Ai)) + 280|0);
 $arrayidx11$i254 = ((($Ai)) + 284|0);
 $arrayidx12$i255 = ((($Ai)) + 288|0);
 $arrayidx13$i256 = ((($Ai)) + 292|0);
 $arrayidx14$i257 = ((($Ai)) + 296|0);
 $arrayidx15$i258 = ((($Ai)) + 300|0);
 $arrayidx16$i259 = ((($Ai)) + 304|0);
 $arrayidx17$i260 = ((($Ai)) + 308|0);
 $arrayidx18$i261 = ((($Ai)) + 312|0);
 $arrayidx19$i262 = ((($Ai)) + 316|0);
 $arraydecay2$i447 = ((($Ai)) + 320|0);
 $arrayidx11$i611 = ((($Ai)) + 324|0);
 $arrayidx12$i612 = ((($Ai)) + 328|0);
 $arrayidx13$i613 = ((($Ai)) + 332|0);
 $arrayidx14$i614 = ((($Ai)) + 336|0);
 $arrayidx15$i615 = ((($Ai)) + 340|0);
 $arrayidx16$i616 = ((($Ai)) + 344|0);
 $arrayidx17$i617 = ((($Ai)) + 348|0);
 $arrayidx18$i618 = ((($Ai)) + 352|0);
 $arrayidx19$i619 = ((($Ai)) + 356|0);
 $arraydecay5$i450 = ((($Ai)) + 360|0);
 $arrayidx11$i562 = ((($Ai)) + 364|0);
 $arrayidx12$i563 = ((($Ai)) + 368|0);
 $arrayidx13$i564 = ((($Ai)) + 372|0);
 $arrayidx14$i565 = ((($Ai)) + 376|0);
 $arrayidx15$i566 = ((($Ai)) + 380|0);
 $arrayidx16$i567 = ((($Ai)) + 384|0);
 $arrayidx17$i568 = ((($Ai)) + 388|0);
 $arrayidx18$i569 = ((($Ai)) + 392|0);
 $arrayidx19$i570 = ((($Ai)) + 396|0);
 $arraydecay9$i452 = ((($Ai)) + 400|0);
 $arrayidx11$i513 = ((($Ai)) + 404|0);
 $arrayidx12$i514 = ((($Ai)) + 408|0);
 $arrayidx13$i515 = ((($Ai)) + 412|0);
 $arrayidx14$i516 = ((($Ai)) + 416|0);
 $arrayidx15$i517 = ((($Ai)) + 420|0);
 $arrayidx16$i518 = ((($Ai)) + 424|0);
 $arrayidx17$i519 = ((($Ai)) + 428|0);
 $arrayidx18$i520 = ((($Ai)) + 432|0);
 $arrayidx19$i521 = ((($Ai)) + 436|0);
 $arraydecay13$i454 = ((($Ai)) + 440|0);
 $arrayidx11$i464 = ((($Ai)) + 444|0);
 $arrayidx12$i465 = ((($Ai)) + 448|0);
 $arrayidx13$i466 = ((($Ai)) + 452|0);
 $arrayidx14$i467 = ((($Ai)) + 456|0);
 $arrayidx15$i468 = ((($Ai)) + 460|0);
 $arrayidx16$i469 = ((($Ai)) + 464|0);
 $arrayidx17$i470 = ((($Ai)) + 468|0);
 $arrayidx18$i471 = ((($Ai)) + 472|0);
 $arrayidx19$i472 = ((($Ai)) + 476|0);
 $arraydecay2$i657 = ((($Ai)) + 480|0);
 $arrayidx11$i821 = ((($Ai)) + 484|0);
 $arrayidx12$i822 = ((($Ai)) + 488|0);
 $arrayidx13$i823 = ((($Ai)) + 492|0);
 $arrayidx14$i824 = ((($Ai)) + 496|0);
 $arrayidx15$i825 = ((($Ai)) + 500|0);
 $arrayidx16$i826 = ((($Ai)) + 504|0);
 $arrayidx17$i827 = ((($Ai)) + 508|0);
 $arrayidx18$i828 = ((($Ai)) + 512|0);
 $arrayidx19$i829 = ((($Ai)) + 516|0);
 $arraydecay5$i660 = ((($Ai)) + 520|0);
 $arrayidx11$i772 = ((($Ai)) + 524|0);
 $arrayidx12$i773 = ((($Ai)) + 528|0);
 $arrayidx13$i774 = ((($Ai)) + 532|0);
 $arrayidx14$i775 = ((($Ai)) + 536|0);
 $arrayidx15$i776 = ((($Ai)) + 540|0);
 $arrayidx16$i777 = ((($Ai)) + 544|0);
 $arrayidx17$i778 = ((($Ai)) + 548|0);
 $arrayidx18$i779 = ((($Ai)) + 552|0);
 $arrayidx19$i780 = ((($Ai)) + 556|0);
 $arraydecay9$i662 = ((($Ai)) + 560|0);
 $arrayidx11$i723 = ((($Ai)) + 564|0);
 $arrayidx12$i724 = ((($Ai)) + 568|0);
 $arrayidx13$i725 = ((($Ai)) + 572|0);
 $arrayidx14$i726 = ((($Ai)) + 576|0);
 $arrayidx15$i727 = ((($Ai)) + 580|0);
 $arrayidx16$i728 = ((($Ai)) + 584|0);
 $arrayidx17$i729 = ((($Ai)) + 588|0);
 $arrayidx18$i730 = ((($Ai)) + 592|0);
 $arrayidx19$i731 = ((($Ai)) + 596|0);
 $arraydecay13$i664 = ((($Ai)) + 600|0);
 $arrayidx11$i674 = ((($Ai)) + 604|0);
 $arrayidx12$i675 = ((($Ai)) + 608|0);
 $arrayidx13$i676 = ((($Ai)) + 612|0);
 $arrayidx14$i677 = ((($Ai)) + 616|0);
 $arrayidx15$i678 = ((($Ai)) + 620|0);
 $arrayidx16$i679 = ((($Ai)) + 624|0);
 $arrayidx17$i680 = ((($Ai)) + 628|0);
 $arrayidx18$i681 = ((($Ai)) + 632|0);
 $arrayidx19$i682 = ((($Ai)) + 636|0);
 $arraydecay2$i867 = ((($Ai)) + 640|0);
 $arrayidx11$i1031 = ((($Ai)) + 644|0);
 $arrayidx12$i1032 = ((($Ai)) + 648|0);
 $arrayidx13$i1033 = ((($Ai)) + 652|0);
 $arrayidx14$i1034 = ((($Ai)) + 656|0);
 $arrayidx15$i1035 = ((($Ai)) + 660|0);
 $arrayidx16$i1036 = ((($Ai)) + 664|0);
 $arrayidx17$i1037 = ((($Ai)) + 668|0);
 $arrayidx18$i1038 = ((($Ai)) + 672|0);
 $arrayidx19$i1039 = ((($Ai)) + 676|0);
 $arraydecay5$i870 = ((($Ai)) + 680|0);
 $arrayidx11$i982 = ((($Ai)) + 684|0);
 $arrayidx12$i983 = ((($Ai)) + 688|0);
 $arrayidx13$i984 = ((($Ai)) + 692|0);
 $arrayidx14$i985 = ((($Ai)) + 696|0);
 $arrayidx15$i986 = ((($Ai)) + 700|0);
 $arrayidx16$i987 = ((($Ai)) + 704|0);
 $arrayidx17$i988 = ((($Ai)) + 708|0);
 $arrayidx18$i989 = ((($Ai)) + 712|0);
 $arrayidx19$i990 = ((($Ai)) + 716|0);
 $arraydecay9$i872 = ((($Ai)) + 720|0);
 $arrayidx11$i933 = ((($Ai)) + 724|0);
 $arrayidx12$i934 = ((($Ai)) + 728|0);
 $arrayidx13$i935 = ((($Ai)) + 732|0);
 $arrayidx14$i936 = ((($Ai)) + 736|0);
 $arrayidx15$i937 = ((($Ai)) + 740|0);
 $arrayidx16$i938 = ((($Ai)) + 744|0);
 $arrayidx17$i939 = ((($Ai)) + 748|0);
 $arrayidx18$i940 = ((($Ai)) + 752|0);
 $arrayidx19$i941 = ((($Ai)) + 756|0);
 $arraydecay13$i874 = ((($Ai)) + 760|0);
 $arrayidx11$i884 = ((($Ai)) + 764|0);
 $arrayidx12$i885 = ((($Ai)) + 768|0);
 $arrayidx13$i886 = ((($Ai)) + 772|0);
 $arrayidx14$i887 = ((($Ai)) + 776|0);
 $arrayidx15$i888 = ((($Ai)) + 780|0);
 $arrayidx16$i889 = ((($Ai)) + 784|0);
 $arrayidx17$i890 = ((($Ai)) + 788|0);
 $arrayidx18$i891 = ((($Ai)) + 792|0);
 $arrayidx19$i892 = ((($Ai)) + 796|0);
 $arraydecay2$i1084 = ((($Ai)) + 800|0);
 $arrayidx11$i1248 = ((($Ai)) + 804|0);
 $arrayidx12$i1249 = ((($Ai)) + 808|0);
 $arrayidx13$i1250 = ((($Ai)) + 812|0);
 $arrayidx14$i1251 = ((($Ai)) + 816|0);
 $arrayidx15$i1252 = ((($Ai)) + 820|0);
 $arrayidx16$i1253 = ((($Ai)) + 824|0);
 $arrayidx17$i1254 = ((($Ai)) + 828|0);
 $arrayidx18$i1255 = ((($Ai)) + 832|0);
 $arrayidx19$i1256 = ((($Ai)) + 836|0);
 $arraydecay5$i1087 = ((($Ai)) + 840|0);
 $arrayidx11$i1199 = ((($Ai)) + 844|0);
 $arrayidx12$i1200 = ((($Ai)) + 848|0);
 $arrayidx13$i1201 = ((($Ai)) + 852|0);
 $arrayidx14$i1202 = ((($Ai)) + 856|0);
 $arrayidx15$i1203 = ((($Ai)) + 860|0);
 $arrayidx16$i1204 = ((($Ai)) + 864|0);
 $arrayidx17$i1205 = ((($Ai)) + 868|0);
 $arrayidx18$i1206 = ((($Ai)) + 872|0);
 $arrayidx19$i1207 = ((($Ai)) + 876|0);
 $arraydecay9$i1089 = ((($Ai)) + 880|0);
 $arrayidx11$i1150 = ((($Ai)) + 884|0);
 $arrayidx12$i1151 = ((($Ai)) + 888|0);
 $arrayidx13$i1152 = ((($Ai)) + 892|0);
 $arrayidx14$i1153 = ((($Ai)) + 896|0);
 $arrayidx15$i1154 = ((($Ai)) + 900|0);
 $arrayidx16$i1155 = ((($Ai)) + 904|0);
 $arrayidx17$i1156 = ((($Ai)) + 908|0);
 $arrayidx18$i1157 = ((($Ai)) + 912|0);
 $arrayidx19$i1158 = ((($Ai)) + 916|0);
 $arraydecay13$i1091 = ((($Ai)) + 920|0);
 $arrayidx11$i1101 = ((($Ai)) + 924|0);
 $arrayidx12$i1102 = ((($Ai)) + 928|0);
 $arrayidx13$i1103 = ((($Ai)) + 932|0);
 $arrayidx14$i1104 = ((($Ai)) + 936|0);
 $arrayidx15$i1105 = ((($Ai)) + 940|0);
 $arrayidx16$i1106 = ((($Ai)) + 944|0);
 $arrayidx17$i1107 = ((($Ai)) + 948|0);
 $arrayidx18$i1108 = ((($Ai)) + 952|0);
 $arrayidx19$i1109 = ((($Ai)) + 956|0);
 $arraydecay2$i1294 = ((($Ai)) + 960|0);
 $arrayidx11$i1458 = ((($Ai)) + 964|0);
 $arrayidx12$i1459 = ((($Ai)) + 968|0);
 $arrayidx13$i1460 = ((($Ai)) + 972|0);
 $arrayidx14$i1461 = ((($Ai)) + 976|0);
 $arrayidx15$i1462 = ((($Ai)) + 980|0);
 $arrayidx16$i1463 = ((($Ai)) + 984|0);
 $arrayidx17$i1464 = ((($Ai)) + 988|0);
 $arrayidx18$i1465 = ((($Ai)) + 992|0);
 $arrayidx19$i1466 = ((($Ai)) + 996|0);
 $arraydecay5$i1297 = ((($Ai)) + 1000|0);
 $arrayidx11$i1409 = ((($Ai)) + 1004|0);
 $arrayidx12$i1410 = ((($Ai)) + 1008|0);
 $arrayidx13$i1411 = ((($Ai)) + 1012|0);
 $arrayidx14$i1412 = ((($Ai)) + 1016|0);
 $arrayidx15$i1413 = ((($Ai)) + 1020|0);
 $arrayidx16$i1414 = ((($Ai)) + 1024|0);
 $arrayidx17$i1415 = ((($Ai)) + 1028|0);
 $arrayidx18$i1416 = ((($Ai)) + 1032|0);
 $arrayidx19$i1417 = ((($Ai)) + 1036|0);
 $arraydecay9$i1299 = ((($Ai)) + 1040|0);
 $arrayidx11$i1360 = ((($Ai)) + 1044|0);
 $arrayidx12$i1361 = ((($Ai)) + 1048|0);
 $arrayidx13$i1362 = ((($Ai)) + 1052|0);
 $arrayidx14$i1363 = ((($Ai)) + 1056|0);
 $arrayidx15$i1364 = ((($Ai)) + 1060|0);
 $arrayidx16$i1365 = ((($Ai)) + 1064|0);
 $arrayidx17$i1366 = ((($Ai)) + 1068|0);
 $arrayidx18$i1367 = ((($Ai)) + 1072|0);
 $arrayidx19$i1368 = ((($Ai)) + 1076|0);
 $arraydecay13$i1301 = ((($Ai)) + 1080|0);
 $arrayidx11$i1311 = ((($Ai)) + 1084|0);
 $arrayidx12$i1312 = ((($Ai)) + 1088|0);
 $arrayidx13$i1313 = ((($Ai)) + 1092|0);
 $arrayidx14$i1314 = ((($Ai)) + 1096|0);
 $arrayidx15$i1315 = ((($Ai)) + 1100|0);
 $arrayidx16$i1316 = ((($Ai)) + 1104|0);
 $arrayidx17$i1317 = ((($Ai)) + 1108|0);
 $arrayidx18$i1318 = ((($Ai)) + 1112|0);
 $arrayidx19$i1319 = ((($Ai)) + 1116|0);
 $arraydecay2$i1768 = ((($Ai)) + 1120|0);
 $arrayidx11$i1932 = ((($Ai)) + 1124|0);
 $arrayidx12$i1933 = ((($Ai)) + 1128|0);
 $arrayidx13$i1934 = ((($Ai)) + 1132|0);
 $arrayidx14$i1935 = ((($Ai)) + 1136|0);
 $arrayidx15$i1936 = ((($Ai)) + 1140|0);
 $arrayidx16$i1937 = ((($Ai)) + 1144|0);
 $arrayidx17$i1938 = ((($Ai)) + 1148|0);
 $arrayidx18$i1939 = ((($Ai)) + 1152|0);
 $arrayidx19$i1940 = ((($Ai)) + 1156|0);
 $arraydecay5$i1771 = ((($Ai)) + 1160|0);
 $arrayidx11$i1883 = ((($Ai)) + 1164|0);
 $arrayidx12$i1884 = ((($Ai)) + 1168|0);
 $arrayidx13$i1885 = ((($Ai)) + 1172|0);
 $arrayidx14$i1886 = ((($Ai)) + 1176|0);
 $arrayidx15$i1887 = ((($Ai)) + 1180|0);
 $arrayidx16$i1888 = ((($Ai)) + 1184|0);
 $arrayidx17$i1889 = ((($Ai)) + 1188|0);
 $arrayidx18$i1890 = ((($Ai)) + 1192|0);
 $arrayidx19$i1891 = ((($Ai)) + 1196|0);
 $arraydecay9$i1773 = ((($Ai)) + 1200|0);
 $arrayidx11$i1834 = ((($Ai)) + 1204|0);
 $arrayidx12$i1835 = ((($Ai)) + 1208|0);
 $arrayidx13$i1836 = ((($Ai)) + 1212|0);
 $arrayidx14$i1837 = ((($Ai)) + 1216|0);
 $arrayidx15$i1838 = ((($Ai)) + 1220|0);
 $arrayidx16$i1839 = ((($Ai)) + 1224|0);
 $arrayidx17$i1840 = ((($Ai)) + 1228|0);
 $arrayidx18$i1841 = ((($Ai)) + 1232|0);
 $arrayidx19$i1842 = ((($Ai)) + 1236|0);
 $arraydecay13$i1775 = ((($Ai)) + 1240|0);
 $arrayidx11$i1785 = ((($Ai)) + 1244|0);
 $arrayidx12$i1786 = ((($Ai)) + 1248|0);
 $arrayidx13$i1787 = ((($Ai)) + 1252|0);
 $arrayidx14$i1788 = ((($Ai)) + 1256|0);
 $arrayidx15$i1789 = ((($Ai)) + 1260|0);
 $arrayidx16$i1790 = ((($Ai)) + 1264|0);
 $arrayidx17$i1791 = ((($Ai)) + 1268|0);
 $arrayidx18$i1792 = ((($Ai)) + 1272|0);
 $arrayidx19$i1793 = ((($Ai)) + 1276|0);
 $3 = ((($cur)) + 116|0);
 $i$22017 = 63;
 while(1) {
  $arrayidx38 = (($e) + ($i$22017)|0);
  $4 = HEAP8[$arrayidx38>>0]|0;
  $5 = ($4&255) >>> 7;
  $conv39 = $4 << 24 >> 24;
  $conv40 = $5&255;
  $sub41 = (0 - ($conv40))|0;
  $and = $sub41 & $conv39;
  $shl43 = $and << 1;
  $sub44 = (($conv39) - ($shl43))|0;
  _ge_p2_dbl($t,$r);
  _fe_mul($r,$t,$arraydecay3$i);
  _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
  _fe_mul($arraydecay2$i44,$arraydecay7$i,$arraydecay3$i);
  _ge_p2_dbl($t,$r);
  _fe_mul($r,$t,$arraydecay3$i);
  _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
  _fe_mul($arraydecay2$i44,$arraydecay7$i,$arraydecay3$i);
  _ge_p2_dbl($t,$r);
  _fe_mul($r,$t,$arraydecay3$i);
  _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
  _fe_mul($arraydecay2$i44,$arraydecay7$i,$arraydecay3$i);
  _ge_p2_dbl($t,$r);
  _fe_mul($u,$t,$arraydecay3$i);
  _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
  _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
  _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
  dest=$3; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $xor4$i = $sub44 & 255;
  $conv3$i = $xor4$i ^ 1;
  $sub$i = (($conv3$i) + -1)|0;
  $6 = HEAP32[$Ai>>2]|0;
  $7 = HEAP32[$arrayidx11$i191>>2]|0;
  $8 = HEAP32[$arrayidx12$i192>>2]|0;
  $9 = HEAP32[$arrayidx13$i193>>2]|0;
  $10 = HEAP32[$arrayidx14$i194>>2]|0;
  $11 = HEAP32[$arrayidx15$i195>>2]|0;
  $12 = HEAP32[$arrayidx16$i196>>2]|0;
  $13 = HEAP32[$arrayidx17$i197>>2]|0;
  $14 = HEAP32[$arrayidx18$i198>>2]|0;
  $15 = HEAP32[$arrayidx19$i199>>2]|0;
  $xor$i200 = $6 ^ 1;
  $sub$i210 = $sub$i >> 31;
  $and$i211 = $xor$i200 & $sub$i210;
  $and29$i212 = $7 & $sub$i210;
  $and30$i213 = $8 & $sub$i210;
  $and31$i214 = $9 & $sub$i210;
  $and32$i215 = $10 & $sub$i210;
  $and33$i216 = $11 & $sub$i210;
  $and34$i217 = $12 & $sub$i210;
  $and35$i218 = $13 & $sub$i210;
  $and36$i219 = $14 & $sub$i210;
  $and37$i220 = $15 & $sub$i210;
  $xor38$i221 = $and$i211 ^ 1;
  HEAP32[$cur>>2] = $xor38$i221;
  HEAP32[$arrayidx1$i$i75>>2] = $and29$i212;
  HEAP32[$arrayidx2$i183>>2] = $and30$i213;
  HEAP32[$arrayidx3$i184>>2] = $and31$i214;
  HEAP32[$arrayidx4$i185>>2] = $and32$i215;
  HEAP32[$arrayidx5$i186>>2] = $and33$i216;
  HEAP32[$arrayidx6$i187>>2] = $and34$i217;
  HEAP32[$arrayidx7$i188>>2] = $and35$i218;
  HEAP32[$arrayidx8$i189>>2] = $and36$i219;
  HEAP32[$arrayidx9$i190>>2] = $and37$i220;
  $16 = HEAP32[$arraydecay5$i>>2]|0;
  $17 = HEAP32[$arrayidx11$i142>>2]|0;
  $18 = HEAP32[$arrayidx12$i143>>2]|0;
  $19 = HEAP32[$arrayidx13$i144>>2]|0;
  $20 = HEAP32[$arrayidx14$i145>>2]|0;
  $21 = HEAP32[$arrayidx15$i146>>2]|0;
  $22 = HEAP32[$arrayidx16$i147>>2]|0;
  $23 = HEAP32[$arrayidx17$i148>>2]|0;
  $24 = HEAP32[$arrayidx18$i149>>2]|0;
  $25 = HEAP32[$arrayidx19$i150>>2]|0;
  $xor$i151 = $16 ^ 1;
  $and$i162 = $xor$i151 & $sub$i210;
  $and29$i163 = $17 & $sub$i210;
  $and30$i164 = $18 & $sub$i210;
  $and31$i165 = $19 & $sub$i210;
  $and32$i166 = $20 & $sub$i210;
  $and33$i167 = $21 & $sub$i210;
  $and34$i168 = $22 & $sub$i210;
  $and35$i169 = $23 & $sub$i210;
  $and36$i170 = $24 & $sub$i210;
  $and37$i171 = $25 & $sub$i210;
  $xor38$i172 = $and$i162 ^ 1;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i172;
  HEAP32[$arrayidx1$i5$i>>2] = $and29$i163;
  HEAP32[$arrayidx2$i134>>2] = $and30$i164;
  HEAP32[$arrayidx3$i135>>2] = $and31$i165;
  HEAP32[$arrayidx4$i136>>2] = $and32$i166;
  HEAP32[$arrayidx5$i137>>2] = $and33$i167;
  HEAP32[$arrayidx6$i138>>2] = $and34$i168;
  HEAP32[$arrayidx7$i139>>2] = $and35$i169;
  HEAP32[$arrayidx8$i140>>2] = $and36$i170;
  HEAP32[$arrayidx9$i141>>2] = $and37$i171;
  $26 = HEAP32[$arraydecay9$i82>>2]|0;
  $27 = HEAP32[$arrayidx11$i93>>2]|0;
  $28 = HEAP32[$arrayidx12$i94>>2]|0;
  $29 = HEAP32[$arrayidx13$i95>>2]|0;
  $30 = HEAP32[$arrayidx14$i96>>2]|0;
  $31 = HEAP32[$arrayidx15$i97>>2]|0;
  $32 = HEAP32[$arrayidx16$i98>>2]|0;
  $33 = HEAP32[$arrayidx17$i99>>2]|0;
  $34 = HEAP32[$arrayidx18$i100>>2]|0;
  $35 = HEAP32[$arrayidx19$i101>>2]|0;
  $xor$i102 = $26 ^ 1;
  $and$i113 = $xor$i102 & $sub$i210;
  $and29$i114 = $27 & $sub$i210;
  $and30$i115 = $28 & $sub$i210;
  $and31$i116 = $29 & $sub$i210;
  $and32$i117 = $30 & $sub$i210;
  $and33$i118 = $31 & $sub$i210;
  $and34$i119 = $32 & $sub$i210;
  $and35$i120 = $33 & $sub$i210;
  $and36$i121 = $34 & $sub$i210;
  $and37$i122 = $35 & $sub$i210;
  $xor38$i123 = $and$i113 ^ 1;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i123;
  HEAP32[$arrayidx1$i4$i>>2] = $and29$i114;
  HEAP32[$arrayidx2$i85>>2] = $and30$i115;
  HEAP32[$arrayidx3$i86>>2] = $and31$i116;
  HEAP32[$arrayidx4$i87>>2] = $and32$i117;
  HEAP32[$arrayidx5$i88>>2] = $and33$i118;
  HEAP32[$arrayidx6$i89>>2] = $and34$i119;
  HEAP32[$arrayidx7$i90>>2] = $and35$i120;
  HEAP32[$arrayidx8$i91>>2] = $and36$i121;
  HEAP32[$arrayidx9$i92>>2] = $and37$i122;
  $36 = HEAP32[$arraydecay11$i>>2]|0;
  $37 = HEAP32[$arrayidx1$i>>2]|0;
  $38 = HEAP32[$arrayidx2$i>>2]|0;
  $39 = HEAP32[$arrayidx3$i>>2]|0;
  $40 = HEAP32[$arrayidx4$i>>2]|0;
  $41 = HEAP32[$arrayidx5$i>>2]|0;
  $42 = HEAP32[$arrayidx6$i>>2]|0;
  $43 = HEAP32[$arrayidx7$i>>2]|0;
  $44 = HEAP32[$arrayidx8$i>>2]|0;
  $45 = HEAP32[$arrayidx9$i>>2]|0;
  $46 = HEAP32[$arraydecay13$i>>2]|0;
  $47 = HEAP32[$arrayidx11$i>>2]|0;
  $48 = HEAP32[$arrayidx12$i>>2]|0;
  $49 = HEAP32[$arrayidx13$i>>2]|0;
  $50 = HEAP32[$arrayidx14$i>>2]|0;
  $51 = HEAP32[$arrayidx15$i>>2]|0;
  $52 = HEAP32[$arrayidx16$i>>2]|0;
  $53 = HEAP32[$arrayidx17$i>>2]|0;
  $54 = HEAP32[$arrayidx18$i>>2]|0;
  $55 = HEAP32[$arrayidx19$i>>2]|0;
  $xor$i = $46 ^ $36;
  $xor20$i = $47 ^ $37;
  $xor21$i = $48 ^ $38;
  $xor22$i = $49 ^ $39;
  $xor23$i = $50 ^ $40;
  $xor24$i = $51 ^ $41;
  $xor25$i = $52 ^ $42;
  $xor26$i = $53 ^ $43;
  $xor27$i = $54 ^ $44;
  $xor28$i = $55 ^ $45;
  $and$i = $xor$i & $sub$i210;
  $and29$i = $xor20$i & $sub$i210;
  $and30$i = $xor21$i & $sub$i210;
  $and31$i = $xor22$i & $sub$i210;
  $and32$i = $xor23$i & $sub$i210;
  $and33$i = $xor24$i & $sub$i210;
  $and34$i = $xor25$i & $sub$i210;
  $and35$i = $xor26$i & $sub$i210;
  $and36$i = $xor27$i & $sub$i210;
  $and37$i = $xor28$i & $sub$i210;
  $xor38$i = $and$i ^ $36;
  HEAP32[$arraydecay11$i>>2] = $xor38$i;
  $xor40$i = $and29$i ^ $37;
  HEAP32[$arrayidx1$i>>2] = $xor40$i;
  $xor42$i = $and30$i ^ $38;
  HEAP32[$arrayidx2$i>>2] = $xor42$i;
  $xor44$i = $and31$i ^ $39;
  HEAP32[$arrayidx3$i>>2] = $xor44$i;
  $xor46$i = $and32$i ^ $40;
  HEAP32[$arrayidx4$i>>2] = $xor46$i;
  $xor48$i = $and33$i ^ $41;
  HEAP32[$arrayidx5$i>>2] = $xor48$i;
  $xor50$i = $and34$i ^ $42;
  HEAP32[$arrayidx6$i>>2] = $xor50$i;
  $xor52$i = $and35$i ^ $43;
  HEAP32[$arrayidx7$i>>2] = $xor52$i;
  $xor54$i = $and36$i ^ $44;
  HEAP32[$arrayidx8$i>>2] = $xor54$i;
  $xor56$i = $and37$i ^ $45;
  HEAP32[$arrayidx9$i>>2] = $xor56$i;
  $conv3$i232 = $xor4$i ^ 2;
  $sub$i233 = (($conv3$i232) + -1)|0;
  $56 = HEAP32[$arraydecay2$i237>>2]|0;
  $57 = HEAP32[$arrayidx11$i401>>2]|0;
  $58 = HEAP32[$arrayidx12$i402>>2]|0;
  $59 = HEAP32[$arrayidx13$i403>>2]|0;
  $60 = HEAP32[$arrayidx14$i404>>2]|0;
  $61 = HEAP32[$arrayidx15$i405>>2]|0;
  $62 = HEAP32[$arrayidx16$i406>>2]|0;
  $63 = HEAP32[$arrayidx17$i407>>2]|0;
  $64 = HEAP32[$arrayidx18$i408>>2]|0;
  $65 = HEAP32[$arrayidx19$i409>>2]|0;
  $xor$i410 = $56 ^ $xor38$i221;
  $xor20$i411 = $57 ^ $and29$i212;
  $xor21$i412 = $58 ^ $and30$i213;
  $xor22$i413 = $59 ^ $and31$i214;
  $xor23$i414 = $60 ^ $and32$i215;
  $xor24$i415 = $61 ^ $and33$i216;
  $xor25$i416 = $62 ^ $and34$i217;
  $xor26$i417 = $63 ^ $and35$i218;
  $xor27$i418 = $64 ^ $and36$i219;
  $xor28$i419 = $65 ^ $and37$i220;
  $sub$i420 = $sub$i233 >> 31;
  $and$i421 = $xor$i410 & $sub$i420;
  $and29$i422 = $xor20$i411 & $sub$i420;
  $and30$i423 = $xor21$i412 & $sub$i420;
  $and31$i424 = $xor22$i413 & $sub$i420;
  $and32$i425 = $xor23$i414 & $sub$i420;
  $and33$i426 = $xor24$i415 & $sub$i420;
  $and34$i427 = $xor25$i416 & $sub$i420;
  $and35$i428 = $xor26$i417 & $sub$i420;
  $and36$i429 = $xor27$i418 & $sub$i420;
  $and37$i430 = $xor28$i419 & $sub$i420;
  $xor38$i431 = $and$i421 ^ $xor38$i221;
  HEAP32[$cur>>2] = $xor38$i431;
  $xor40$i432 = $and29$i422 ^ $and29$i212;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i432;
  $xor42$i433 = $and30$i423 ^ $and30$i213;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i433;
  $xor44$i434 = $and31$i424 ^ $and31$i214;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i434;
  $xor46$i435 = $and32$i425 ^ $and32$i215;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i435;
  $xor48$i436 = $and33$i426 ^ $and33$i216;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i436;
  $xor50$i437 = $and34$i427 ^ $and34$i217;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i437;
  $xor52$i438 = $and35$i428 ^ $and35$i218;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i438;
  $xor54$i439 = $and36$i429 ^ $and36$i219;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i439;
  $xor56$i440 = $and37$i430 ^ $and37$i220;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i440;
  $66 = HEAP32[$arraydecay5$i240>>2]|0;
  $67 = HEAP32[$arrayidx11$i352>>2]|0;
  $68 = HEAP32[$arrayidx12$i353>>2]|0;
  $69 = HEAP32[$arrayidx13$i354>>2]|0;
  $70 = HEAP32[$arrayidx14$i355>>2]|0;
  $71 = HEAP32[$arrayidx15$i356>>2]|0;
  $72 = HEAP32[$arrayidx16$i357>>2]|0;
  $73 = HEAP32[$arrayidx17$i358>>2]|0;
  $74 = HEAP32[$arrayidx18$i359>>2]|0;
  $75 = HEAP32[$arrayidx19$i360>>2]|0;
  $xor$i361 = $66 ^ $xor38$i172;
  $xor20$i362 = $67 ^ $and29$i163;
  $xor21$i363 = $68 ^ $and30$i164;
  $xor22$i364 = $69 ^ $and31$i165;
  $xor23$i365 = $70 ^ $and32$i166;
  $xor24$i366 = $71 ^ $and33$i167;
  $xor25$i367 = $72 ^ $and34$i168;
  $xor26$i368 = $73 ^ $and35$i169;
  $xor27$i369 = $74 ^ $and36$i170;
  $xor28$i370 = $75 ^ $and37$i171;
  $and$i372 = $xor$i361 & $sub$i420;
  $and29$i373 = $xor20$i362 & $sub$i420;
  $and30$i374 = $xor21$i363 & $sub$i420;
  $and31$i375 = $xor22$i364 & $sub$i420;
  $and32$i376 = $xor23$i365 & $sub$i420;
  $and33$i377 = $xor24$i366 & $sub$i420;
  $and34$i378 = $xor25$i367 & $sub$i420;
  $and35$i379 = $xor26$i368 & $sub$i420;
  $and36$i380 = $xor27$i369 & $sub$i420;
  $and37$i381 = $xor28$i370 & $sub$i420;
  $xor38$i382 = $and$i372 ^ $xor38$i172;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i382;
  $xor40$i383 = $and29$i373 ^ $and29$i163;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i383;
  $xor42$i384 = $and30$i374 ^ $and30$i164;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i384;
  $xor44$i385 = $and31$i375 ^ $and31$i165;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i385;
  $xor46$i386 = $and32$i376 ^ $and32$i166;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i386;
  $xor48$i387 = $and33$i377 ^ $and33$i167;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i387;
  $xor50$i388 = $and34$i378 ^ $and34$i168;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i388;
  $xor52$i389 = $and35$i379 ^ $and35$i169;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i389;
  $xor54$i390 = $and36$i380 ^ $and36$i170;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i390;
  $xor56$i391 = $and37$i381 ^ $and37$i171;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i391;
  $76 = HEAP32[$arraydecay9$i242>>2]|0;
  $77 = HEAP32[$arrayidx11$i303>>2]|0;
  $78 = HEAP32[$arrayidx12$i304>>2]|0;
  $79 = HEAP32[$arrayidx13$i305>>2]|0;
  $80 = HEAP32[$arrayidx14$i306>>2]|0;
  $81 = HEAP32[$arrayidx15$i307>>2]|0;
  $82 = HEAP32[$arrayidx16$i308>>2]|0;
  $83 = HEAP32[$arrayidx17$i309>>2]|0;
  $84 = HEAP32[$arrayidx18$i310>>2]|0;
  $85 = HEAP32[$arrayidx19$i311>>2]|0;
  $xor$i312 = $76 ^ $xor38$i123;
  $xor20$i313 = $77 ^ $and29$i114;
  $xor21$i314 = $78 ^ $and30$i115;
  $xor22$i315 = $79 ^ $and31$i116;
  $xor23$i316 = $80 ^ $and32$i117;
  $xor24$i317 = $81 ^ $and33$i118;
  $xor25$i318 = $82 ^ $and34$i119;
  $xor26$i319 = $83 ^ $and35$i120;
  $xor27$i320 = $84 ^ $and36$i121;
  $xor28$i321 = $85 ^ $and37$i122;
  $and$i323 = $xor$i312 & $sub$i420;
  $and29$i324 = $xor20$i313 & $sub$i420;
  $and30$i325 = $xor21$i314 & $sub$i420;
  $and31$i326 = $xor22$i315 & $sub$i420;
  $and32$i327 = $xor23$i316 & $sub$i420;
  $and33$i328 = $xor24$i317 & $sub$i420;
  $and34$i329 = $xor25$i318 & $sub$i420;
  $and35$i330 = $xor26$i319 & $sub$i420;
  $and36$i331 = $xor27$i320 & $sub$i420;
  $and37$i332 = $xor28$i321 & $sub$i420;
  $xor38$i333 = $and$i323 ^ $xor38$i123;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i333;
  $xor40$i334 = $and29$i324 ^ $and29$i114;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i334;
  $xor42$i335 = $and30$i325 ^ $and30$i115;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i335;
  $xor44$i336 = $and31$i326 ^ $and31$i116;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i336;
  $xor46$i337 = $and32$i327 ^ $and32$i117;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i337;
  $xor48$i338 = $and33$i328 ^ $and33$i118;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i338;
  $xor50$i339 = $and34$i329 ^ $and34$i119;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i339;
  $xor52$i340 = $and35$i330 ^ $and35$i120;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i340;
  $xor54$i341 = $and36$i331 ^ $and36$i121;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i341;
  $xor56$i342 = $and37$i332 ^ $and37$i122;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i342;
  $86 = HEAP32[$arraydecay13$i244>>2]|0;
  $87 = HEAP32[$arrayidx11$i254>>2]|0;
  $88 = HEAP32[$arrayidx12$i255>>2]|0;
  $89 = HEAP32[$arrayidx13$i256>>2]|0;
  $90 = HEAP32[$arrayidx14$i257>>2]|0;
  $91 = HEAP32[$arrayidx15$i258>>2]|0;
  $92 = HEAP32[$arrayidx16$i259>>2]|0;
  $93 = HEAP32[$arrayidx17$i260>>2]|0;
  $94 = HEAP32[$arrayidx18$i261>>2]|0;
  $95 = HEAP32[$arrayidx19$i262>>2]|0;
  $xor$i263 = $86 ^ $xor38$i;
  $xor20$i264 = $87 ^ $xor40$i;
  $xor21$i265 = $88 ^ $xor42$i;
  $xor22$i266 = $89 ^ $xor44$i;
  $xor23$i267 = $90 ^ $xor46$i;
  $xor24$i268 = $91 ^ $xor48$i;
  $xor25$i269 = $92 ^ $xor50$i;
  $xor26$i270 = $93 ^ $xor52$i;
  $xor27$i271 = $94 ^ $xor54$i;
  $xor28$i272 = $95 ^ $xor56$i;
  $and$i274 = $xor$i263 & $sub$i420;
  $and29$i275 = $xor20$i264 & $sub$i420;
  $and30$i276 = $xor21$i265 & $sub$i420;
  $and31$i277 = $xor22$i266 & $sub$i420;
  $and32$i278 = $xor23$i267 & $sub$i420;
  $and33$i279 = $xor24$i268 & $sub$i420;
  $and34$i280 = $xor25$i269 & $sub$i420;
  $and35$i281 = $xor26$i270 & $sub$i420;
  $and36$i282 = $xor27$i271 & $sub$i420;
  $and37$i283 = $xor28$i272 & $sub$i420;
  $xor38$i284 = $and$i274 ^ $xor38$i;
  HEAP32[$arraydecay11$i>>2] = $xor38$i284;
  $xor40$i285 = $and29$i275 ^ $xor40$i;
  HEAP32[$arrayidx1$i>>2] = $xor40$i285;
  $xor42$i286 = $and30$i276 ^ $xor42$i;
  HEAP32[$arrayidx2$i>>2] = $xor42$i286;
  $xor44$i287 = $and31$i277 ^ $xor44$i;
  HEAP32[$arrayidx3$i>>2] = $xor44$i287;
  $xor46$i288 = $and32$i278 ^ $xor46$i;
  HEAP32[$arrayidx4$i>>2] = $xor46$i288;
  $xor48$i289 = $and33$i279 ^ $xor48$i;
  HEAP32[$arrayidx5$i>>2] = $xor48$i289;
  $xor50$i290 = $and34$i280 ^ $xor50$i;
  HEAP32[$arrayidx6$i>>2] = $xor50$i290;
  $xor52$i291 = $and35$i281 ^ $xor52$i;
  HEAP32[$arrayidx7$i>>2] = $xor52$i291;
  $xor54$i292 = $and36$i282 ^ $xor54$i;
  HEAP32[$arrayidx8$i>>2] = $xor54$i292;
  $xor56$i293 = $and37$i283 ^ $xor56$i;
  HEAP32[$arrayidx9$i>>2] = $xor56$i293;
  $conv3$i442 = $xor4$i ^ 3;
  $sub$i443 = (($conv3$i442) + -1)|0;
  $96 = HEAP32[$arraydecay2$i447>>2]|0;
  $97 = HEAP32[$arrayidx11$i611>>2]|0;
  $98 = HEAP32[$arrayidx12$i612>>2]|0;
  $99 = HEAP32[$arrayidx13$i613>>2]|0;
  $100 = HEAP32[$arrayidx14$i614>>2]|0;
  $101 = HEAP32[$arrayidx15$i615>>2]|0;
  $102 = HEAP32[$arrayidx16$i616>>2]|0;
  $103 = HEAP32[$arrayidx17$i617>>2]|0;
  $104 = HEAP32[$arrayidx18$i618>>2]|0;
  $105 = HEAP32[$arrayidx19$i619>>2]|0;
  $xor$i620 = $96 ^ $xor38$i431;
  $xor20$i621 = $97 ^ $xor40$i432;
  $xor21$i622 = $98 ^ $xor42$i433;
  $xor22$i623 = $99 ^ $xor44$i434;
  $xor23$i624 = $100 ^ $xor46$i435;
  $xor24$i625 = $101 ^ $xor48$i436;
  $xor25$i626 = $102 ^ $xor50$i437;
  $xor26$i627 = $103 ^ $xor52$i438;
  $xor27$i628 = $104 ^ $xor54$i439;
  $xor28$i629 = $105 ^ $xor56$i440;
  $sub$i630 = $sub$i443 >> 31;
  $and$i631 = $xor$i620 & $sub$i630;
  $and29$i632 = $xor20$i621 & $sub$i630;
  $and30$i633 = $xor21$i622 & $sub$i630;
  $and31$i634 = $xor22$i623 & $sub$i630;
  $and32$i635 = $xor23$i624 & $sub$i630;
  $and33$i636 = $xor24$i625 & $sub$i630;
  $and34$i637 = $xor25$i626 & $sub$i630;
  $and35$i638 = $xor26$i627 & $sub$i630;
  $and36$i639 = $xor27$i628 & $sub$i630;
  $and37$i640 = $xor28$i629 & $sub$i630;
  $xor38$i641 = $and$i631 ^ $xor38$i431;
  HEAP32[$cur>>2] = $xor38$i641;
  $xor40$i642 = $and29$i632 ^ $xor40$i432;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i642;
  $xor42$i643 = $and30$i633 ^ $xor42$i433;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i643;
  $xor44$i644 = $and31$i634 ^ $xor44$i434;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i644;
  $xor46$i645 = $and32$i635 ^ $xor46$i435;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i645;
  $xor48$i646 = $and33$i636 ^ $xor48$i436;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i646;
  $xor50$i647 = $and34$i637 ^ $xor50$i437;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i647;
  $xor52$i648 = $and35$i638 ^ $xor52$i438;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i648;
  $xor54$i649 = $and36$i639 ^ $xor54$i439;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i649;
  $xor56$i650 = $and37$i640 ^ $xor56$i440;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i650;
  $106 = HEAP32[$arraydecay5$i450>>2]|0;
  $107 = HEAP32[$arrayidx11$i562>>2]|0;
  $108 = HEAP32[$arrayidx12$i563>>2]|0;
  $109 = HEAP32[$arrayidx13$i564>>2]|0;
  $110 = HEAP32[$arrayidx14$i565>>2]|0;
  $111 = HEAP32[$arrayidx15$i566>>2]|0;
  $112 = HEAP32[$arrayidx16$i567>>2]|0;
  $113 = HEAP32[$arrayidx17$i568>>2]|0;
  $114 = HEAP32[$arrayidx18$i569>>2]|0;
  $115 = HEAP32[$arrayidx19$i570>>2]|0;
  $xor$i571 = $106 ^ $xor38$i382;
  $xor20$i572 = $107 ^ $xor40$i383;
  $xor21$i573 = $108 ^ $xor42$i384;
  $xor22$i574 = $109 ^ $xor44$i385;
  $xor23$i575 = $110 ^ $xor46$i386;
  $xor24$i576 = $111 ^ $xor48$i387;
  $xor25$i577 = $112 ^ $xor50$i388;
  $xor26$i578 = $113 ^ $xor52$i389;
  $xor27$i579 = $114 ^ $xor54$i390;
  $xor28$i580 = $115 ^ $xor56$i391;
  $and$i582 = $xor$i571 & $sub$i630;
  $and29$i583 = $xor20$i572 & $sub$i630;
  $and30$i584 = $xor21$i573 & $sub$i630;
  $and31$i585 = $xor22$i574 & $sub$i630;
  $and32$i586 = $xor23$i575 & $sub$i630;
  $and33$i587 = $xor24$i576 & $sub$i630;
  $and34$i588 = $xor25$i577 & $sub$i630;
  $and35$i589 = $xor26$i578 & $sub$i630;
  $and36$i590 = $xor27$i579 & $sub$i630;
  $and37$i591 = $xor28$i580 & $sub$i630;
  $xor38$i592 = $and$i582 ^ $xor38$i382;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i592;
  $xor40$i593 = $and29$i583 ^ $xor40$i383;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i593;
  $xor42$i594 = $and30$i584 ^ $xor42$i384;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i594;
  $xor44$i595 = $and31$i585 ^ $xor44$i385;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i595;
  $xor46$i596 = $and32$i586 ^ $xor46$i386;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i596;
  $xor48$i597 = $and33$i587 ^ $xor48$i387;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i597;
  $xor50$i598 = $and34$i588 ^ $xor50$i388;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i598;
  $xor52$i599 = $and35$i589 ^ $xor52$i389;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i599;
  $xor54$i600 = $and36$i590 ^ $xor54$i390;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i600;
  $xor56$i601 = $and37$i591 ^ $xor56$i391;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i601;
  $116 = HEAP32[$arraydecay9$i452>>2]|0;
  $117 = HEAP32[$arrayidx11$i513>>2]|0;
  $118 = HEAP32[$arrayidx12$i514>>2]|0;
  $119 = HEAP32[$arrayidx13$i515>>2]|0;
  $120 = HEAP32[$arrayidx14$i516>>2]|0;
  $121 = HEAP32[$arrayidx15$i517>>2]|0;
  $122 = HEAP32[$arrayidx16$i518>>2]|0;
  $123 = HEAP32[$arrayidx17$i519>>2]|0;
  $124 = HEAP32[$arrayidx18$i520>>2]|0;
  $125 = HEAP32[$arrayidx19$i521>>2]|0;
  $xor$i522 = $116 ^ $xor38$i333;
  $xor20$i523 = $117 ^ $xor40$i334;
  $xor21$i524 = $118 ^ $xor42$i335;
  $xor22$i525 = $119 ^ $xor44$i336;
  $xor23$i526 = $120 ^ $xor46$i337;
  $xor24$i527 = $121 ^ $xor48$i338;
  $xor25$i528 = $122 ^ $xor50$i339;
  $xor26$i529 = $123 ^ $xor52$i340;
  $xor27$i530 = $124 ^ $xor54$i341;
  $xor28$i531 = $125 ^ $xor56$i342;
  $and$i533 = $xor$i522 & $sub$i630;
  $and29$i534 = $xor20$i523 & $sub$i630;
  $and30$i535 = $xor21$i524 & $sub$i630;
  $and31$i536 = $xor22$i525 & $sub$i630;
  $and32$i537 = $xor23$i526 & $sub$i630;
  $and33$i538 = $xor24$i527 & $sub$i630;
  $and34$i539 = $xor25$i528 & $sub$i630;
  $and35$i540 = $xor26$i529 & $sub$i630;
  $and36$i541 = $xor27$i530 & $sub$i630;
  $and37$i542 = $xor28$i531 & $sub$i630;
  $xor38$i543 = $and$i533 ^ $xor38$i333;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i543;
  $xor40$i544 = $and29$i534 ^ $xor40$i334;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i544;
  $xor42$i545 = $and30$i535 ^ $xor42$i335;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i545;
  $xor44$i546 = $and31$i536 ^ $xor44$i336;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i546;
  $xor46$i547 = $and32$i537 ^ $xor46$i337;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i547;
  $xor48$i548 = $and33$i538 ^ $xor48$i338;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i548;
  $xor50$i549 = $and34$i539 ^ $xor50$i339;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i549;
  $xor52$i550 = $and35$i540 ^ $xor52$i340;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i550;
  $xor54$i551 = $and36$i541 ^ $xor54$i341;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i551;
  $xor56$i552 = $and37$i542 ^ $xor56$i342;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i552;
  $126 = HEAP32[$arraydecay13$i454>>2]|0;
  $127 = HEAP32[$arrayidx11$i464>>2]|0;
  $128 = HEAP32[$arrayidx12$i465>>2]|0;
  $129 = HEAP32[$arrayidx13$i466>>2]|0;
  $130 = HEAP32[$arrayidx14$i467>>2]|0;
  $131 = HEAP32[$arrayidx15$i468>>2]|0;
  $132 = HEAP32[$arrayidx16$i469>>2]|0;
  $133 = HEAP32[$arrayidx17$i470>>2]|0;
  $134 = HEAP32[$arrayidx18$i471>>2]|0;
  $135 = HEAP32[$arrayidx19$i472>>2]|0;
  $xor$i473 = $126 ^ $xor38$i284;
  $xor20$i474 = $127 ^ $xor40$i285;
  $xor21$i475 = $128 ^ $xor42$i286;
  $xor22$i476 = $129 ^ $xor44$i287;
  $xor23$i477 = $130 ^ $xor46$i288;
  $xor24$i478 = $131 ^ $xor48$i289;
  $xor25$i479 = $132 ^ $xor50$i290;
  $xor26$i480 = $133 ^ $xor52$i291;
  $xor27$i481 = $134 ^ $xor54$i292;
  $xor28$i482 = $135 ^ $xor56$i293;
  $and$i484 = $xor$i473 & $sub$i630;
  $and29$i485 = $xor20$i474 & $sub$i630;
  $and30$i486 = $xor21$i475 & $sub$i630;
  $and31$i487 = $xor22$i476 & $sub$i630;
  $and32$i488 = $xor23$i477 & $sub$i630;
  $and33$i489 = $xor24$i478 & $sub$i630;
  $and34$i490 = $xor25$i479 & $sub$i630;
  $and35$i491 = $xor26$i480 & $sub$i630;
  $and36$i492 = $xor27$i481 & $sub$i630;
  $and37$i493 = $xor28$i482 & $sub$i630;
  $xor38$i494 = $and$i484 ^ $xor38$i284;
  HEAP32[$arraydecay11$i>>2] = $xor38$i494;
  $xor40$i495 = $and29$i485 ^ $xor40$i285;
  HEAP32[$arrayidx1$i>>2] = $xor40$i495;
  $xor42$i496 = $and30$i486 ^ $xor42$i286;
  HEAP32[$arrayidx2$i>>2] = $xor42$i496;
  $xor44$i497 = $and31$i487 ^ $xor44$i287;
  HEAP32[$arrayidx3$i>>2] = $xor44$i497;
  $xor46$i498 = $and32$i488 ^ $xor46$i288;
  HEAP32[$arrayidx4$i>>2] = $xor46$i498;
  $xor48$i499 = $and33$i489 ^ $xor48$i289;
  HEAP32[$arrayidx5$i>>2] = $xor48$i499;
  $xor50$i500 = $and34$i490 ^ $xor50$i290;
  HEAP32[$arrayidx6$i>>2] = $xor50$i500;
  $xor52$i501 = $and35$i491 ^ $xor52$i291;
  HEAP32[$arrayidx7$i>>2] = $xor52$i501;
  $xor54$i502 = $and36$i492 ^ $xor54$i292;
  HEAP32[$arrayidx8$i>>2] = $xor54$i502;
  $xor56$i503 = $and37$i493 ^ $xor56$i293;
  HEAP32[$arrayidx9$i>>2] = $xor56$i503;
  $conv3$i652 = $xor4$i ^ 4;
  $sub$i653 = (($conv3$i652) + -1)|0;
  $136 = HEAP32[$arraydecay2$i657>>2]|0;
  $137 = HEAP32[$arrayidx11$i821>>2]|0;
  $138 = HEAP32[$arrayidx12$i822>>2]|0;
  $139 = HEAP32[$arrayidx13$i823>>2]|0;
  $140 = HEAP32[$arrayidx14$i824>>2]|0;
  $141 = HEAP32[$arrayidx15$i825>>2]|0;
  $142 = HEAP32[$arrayidx16$i826>>2]|0;
  $143 = HEAP32[$arrayidx17$i827>>2]|0;
  $144 = HEAP32[$arrayidx18$i828>>2]|0;
  $145 = HEAP32[$arrayidx19$i829>>2]|0;
  $xor$i830 = $136 ^ $xor38$i641;
  $xor20$i831 = $137 ^ $xor40$i642;
  $xor21$i832 = $138 ^ $xor42$i643;
  $xor22$i833 = $139 ^ $xor44$i644;
  $xor23$i834 = $140 ^ $xor46$i645;
  $xor24$i835 = $141 ^ $xor48$i646;
  $xor25$i836 = $142 ^ $xor50$i647;
  $xor26$i837 = $143 ^ $xor52$i648;
  $xor27$i838 = $144 ^ $xor54$i649;
  $xor28$i839 = $145 ^ $xor56$i650;
  $sub$i840 = $sub$i653 >> 31;
  $and$i841 = $xor$i830 & $sub$i840;
  $and29$i842 = $xor20$i831 & $sub$i840;
  $and30$i843 = $xor21$i832 & $sub$i840;
  $and31$i844 = $xor22$i833 & $sub$i840;
  $and32$i845 = $xor23$i834 & $sub$i840;
  $and33$i846 = $xor24$i835 & $sub$i840;
  $and34$i847 = $xor25$i836 & $sub$i840;
  $and35$i848 = $xor26$i837 & $sub$i840;
  $and36$i849 = $xor27$i838 & $sub$i840;
  $and37$i850 = $xor28$i839 & $sub$i840;
  $xor38$i851 = $and$i841 ^ $xor38$i641;
  HEAP32[$cur>>2] = $xor38$i851;
  $xor40$i852 = $and29$i842 ^ $xor40$i642;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i852;
  $xor42$i853 = $and30$i843 ^ $xor42$i643;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i853;
  $xor44$i854 = $and31$i844 ^ $xor44$i644;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i854;
  $xor46$i855 = $and32$i845 ^ $xor46$i645;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i855;
  $xor48$i856 = $and33$i846 ^ $xor48$i646;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i856;
  $xor50$i857 = $and34$i847 ^ $xor50$i647;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i857;
  $xor52$i858 = $and35$i848 ^ $xor52$i648;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i858;
  $xor54$i859 = $and36$i849 ^ $xor54$i649;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i859;
  $xor56$i860 = $and37$i850 ^ $xor56$i650;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i860;
  $146 = HEAP32[$arraydecay5$i660>>2]|0;
  $147 = HEAP32[$arrayidx11$i772>>2]|0;
  $148 = HEAP32[$arrayidx12$i773>>2]|0;
  $149 = HEAP32[$arrayidx13$i774>>2]|0;
  $150 = HEAP32[$arrayidx14$i775>>2]|0;
  $151 = HEAP32[$arrayidx15$i776>>2]|0;
  $152 = HEAP32[$arrayidx16$i777>>2]|0;
  $153 = HEAP32[$arrayidx17$i778>>2]|0;
  $154 = HEAP32[$arrayidx18$i779>>2]|0;
  $155 = HEAP32[$arrayidx19$i780>>2]|0;
  $xor$i781 = $146 ^ $xor38$i592;
  $xor20$i782 = $147 ^ $xor40$i593;
  $xor21$i783 = $148 ^ $xor42$i594;
  $xor22$i784 = $149 ^ $xor44$i595;
  $xor23$i785 = $150 ^ $xor46$i596;
  $xor24$i786 = $151 ^ $xor48$i597;
  $xor25$i787 = $152 ^ $xor50$i598;
  $xor26$i788 = $153 ^ $xor52$i599;
  $xor27$i789 = $154 ^ $xor54$i600;
  $xor28$i790 = $155 ^ $xor56$i601;
  $and$i792 = $xor$i781 & $sub$i840;
  $and29$i793 = $xor20$i782 & $sub$i840;
  $and30$i794 = $xor21$i783 & $sub$i840;
  $and31$i795 = $xor22$i784 & $sub$i840;
  $and32$i796 = $xor23$i785 & $sub$i840;
  $and33$i797 = $xor24$i786 & $sub$i840;
  $and34$i798 = $xor25$i787 & $sub$i840;
  $and35$i799 = $xor26$i788 & $sub$i840;
  $and36$i800 = $xor27$i789 & $sub$i840;
  $and37$i801 = $xor28$i790 & $sub$i840;
  $xor38$i802 = $and$i792 ^ $xor38$i592;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i802;
  $xor40$i803 = $and29$i793 ^ $xor40$i593;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i803;
  $xor42$i804 = $and30$i794 ^ $xor42$i594;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i804;
  $xor44$i805 = $and31$i795 ^ $xor44$i595;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i805;
  $xor46$i806 = $and32$i796 ^ $xor46$i596;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i806;
  $xor48$i807 = $and33$i797 ^ $xor48$i597;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i807;
  $xor50$i808 = $and34$i798 ^ $xor50$i598;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i808;
  $xor52$i809 = $and35$i799 ^ $xor52$i599;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i809;
  $xor54$i810 = $and36$i800 ^ $xor54$i600;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i810;
  $xor56$i811 = $and37$i801 ^ $xor56$i601;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i811;
  $156 = HEAP32[$arraydecay9$i662>>2]|0;
  $157 = HEAP32[$arrayidx11$i723>>2]|0;
  $158 = HEAP32[$arrayidx12$i724>>2]|0;
  $159 = HEAP32[$arrayidx13$i725>>2]|0;
  $160 = HEAP32[$arrayidx14$i726>>2]|0;
  $161 = HEAP32[$arrayidx15$i727>>2]|0;
  $162 = HEAP32[$arrayidx16$i728>>2]|0;
  $163 = HEAP32[$arrayidx17$i729>>2]|0;
  $164 = HEAP32[$arrayidx18$i730>>2]|0;
  $165 = HEAP32[$arrayidx19$i731>>2]|0;
  $xor$i732 = $156 ^ $xor38$i543;
  $xor20$i733 = $157 ^ $xor40$i544;
  $xor21$i734 = $158 ^ $xor42$i545;
  $xor22$i735 = $159 ^ $xor44$i546;
  $xor23$i736 = $160 ^ $xor46$i547;
  $xor24$i737 = $161 ^ $xor48$i548;
  $xor25$i738 = $162 ^ $xor50$i549;
  $xor26$i739 = $163 ^ $xor52$i550;
  $xor27$i740 = $164 ^ $xor54$i551;
  $xor28$i741 = $165 ^ $xor56$i552;
  $and$i743 = $xor$i732 & $sub$i840;
  $and29$i744 = $xor20$i733 & $sub$i840;
  $and30$i745 = $xor21$i734 & $sub$i840;
  $and31$i746 = $xor22$i735 & $sub$i840;
  $and32$i747 = $xor23$i736 & $sub$i840;
  $and33$i748 = $xor24$i737 & $sub$i840;
  $and34$i749 = $xor25$i738 & $sub$i840;
  $and35$i750 = $xor26$i739 & $sub$i840;
  $and36$i751 = $xor27$i740 & $sub$i840;
  $and37$i752 = $xor28$i741 & $sub$i840;
  $xor38$i753 = $and$i743 ^ $xor38$i543;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i753;
  $xor40$i754 = $and29$i744 ^ $xor40$i544;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i754;
  $xor42$i755 = $and30$i745 ^ $xor42$i545;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i755;
  $xor44$i756 = $and31$i746 ^ $xor44$i546;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i756;
  $xor46$i757 = $and32$i747 ^ $xor46$i547;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i757;
  $xor48$i758 = $and33$i748 ^ $xor48$i548;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i758;
  $xor50$i759 = $and34$i749 ^ $xor50$i549;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i759;
  $xor52$i760 = $and35$i750 ^ $xor52$i550;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i760;
  $xor54$i761 = $and36$i751 ^ $xor54$i551;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i761;
  $xor56$i762 = $and37$i752 ^ $xor56$i552;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i762;
  $166 = HEAP32[$arraydecay13$i664>>2]|0;
  $167 = HEAP32[$arrayidx11$i674>>2]|0;
  $168 = HEAP32[$arrayidx12$i675>>2]|0;
  $169 = HEAP32[$arrayidx13$i676>>2]|0;
  $170 = HEAP32[$arrayidx14$i677>>2]|0;
  $171 = HEAP32[$arrayidx15$i678>>2]|0;
  $172 = HEAP32[$arrayidx16$i679>>2]|0;
  $173 = HEAP32[$arrayidx17$i680>>2]|0;
  $174 = HEAP32[$arrayidx18$i681>>2]|0;
  $175 = HEAP32[$arrayidx19$i682>>2]|0;
  $xor$i683 = $166 ^ $xor38$i494;
  $xor20$i684 = $167 ^ $xor40$i495;
  $xor21$i685 = $168 ^ $xor42$i496;
  $xor22$i686 = $169 ^ $xor44$i497;
  $xor23$i687 = $170 ^ $xor46$i498;
  $xor24$i688 = $171 ^ $xor48$i499;
  $xor25$i689 = $172 ^ $xor50$i500;
  $xor26$i690 = $173 ^ $xor52$i501;
  $xor27$i691 = $174 ^ $xor54$i502;
  $xor28$i692 = $175 ^ $xor56$i503;
  $and$i694 = $xor$i683 & $sub$i840;
  $and29$i695 = $xor20$i684 & $sub$i840;
  $and30$i696 = $xor21$i685 & $sub$i840;
  $and31$i697 = $xor22$i686 & $sub$i840;
  $and32$i698 = $xor23$i687 & $sub$i840;
  $and33$i699 = $xor24$i688 & $sub$i840;
  $and34$i700 = $xor25$i689 & $sub$i840;
  $and35$i701 = $xor26$i690 & $sub$i840;
  $and36$i702 = $xor27$i691 & $sub$i840;
  $and37$i703 = $xor28$i692 & $sub$i840;
  $xor38$i704 = $and$i694 ^ $xor38$i494;
  HEAP32[$arraydecay11$i>>2] = $xor38$i704;
  $xor40$i705 = $and29$i695 ^ $xor40$i495;
  HEAP32[$arrayidx1$i>>2] = $xor40$i705;
  $xor42$i706 = $and30$i696 ^ $xor42$i496;
  HEAP32[$arrayidx2$i>>2] = $xor42$i706;
  $xor44$i707 = $and31$i697 ^ $xor44$i497;
  HEAP32[$arrayidx3$i>>2] = $xor44$i707;
  $xor46$i708 = $and32$i698 ^ $xor46$i498;
  HEAP32[$arrayidx4$i>>2] = $xor46$i708;
  $xor48$i709 = $and33$i699 ^ $xor48$i499;
  HEAP32[$arrayidx5$i>>2] = $xor48$i709;
  $xor50$i710 = $and34$i700 ^ $xor50$i500;
  HEAP32[$arrayidx6$i>>2] = $xor50$i710;
  $xor52$i711 = $and35$i701 ^ $xor52$i501;
  HEAP32[$arrayidx7$i>>2] = $xor52$i711;
  $xor54$i712 = $and36$i702 ^ $xor54$i502;
  HEAP32[$arrayidx8$i>>2] = $xor54$i712;
  $xor56$i713 = $and37$i703 ^ $xor56$i503;
  HEAP32[$arrayidx9$i>>2] = $xor56$i713;
  $conv3$i862 = $xor4$i ^ 5;
  $sub$i863 = (($conv3$i862) + -1)|0;
  $176 = HEAP32[$arraydecay2$i867>>2]|0;
  $177 = HEAP32[$arrayidx11$i1031>>2]|0;
  $178 = HEAP32[$arrayidx12$i1032>>2]|0;
  $179 = HEAP32[$arrayidx13$i1033>>2]|0;
  $180 = HEAP32[$arrayidx14$i1034>>2]|0;
  $181 = HEAP32[$arrayidx15$i1035>>2]|0;
  $182 = HEAP32[$arrayidx16$i1036>>2]|0;
  $183 = HEAP32[$arrayidx17$i1037>>2]|0;
  $184 = HEAP32[$arrayidx18$i1038>>2]|0;
  $185 = HEAP32[$arrayidx19$i1039>>2]|0;
  $xor$i1040 = $176 ^ $xor38$i851;
  $xor20$i1041 = $177 ^ $xor40$i852;
  $xor21$i1042 = $178 ^ $xor42$i853;
  $xor22$i1043 = $179 ^ $xor44$i854;
  $xor23$i1044 = $180 ^ $xor46$i855;
  $xor24$i1045 = $181 ^ $xor48$i856;
  $xor25$i1046 = $182 ^ $xor50$i857;
  $xor26$i1047 = $183 ^ $xor52$i858;
  $xor27$i1048 = $184 ^ $xor54$i859;
  $xor28$i1049 = $185 ^ $xor56$i860;
  $sub$i1050 = $sub$i863 >> 31;
  $and$i1051 = $xor$i1040 & $sub$i1050;
  $and29$i1052 = $xor20$i1041 & $sub$i1050;
  $and30$i1053 = $xor21$i1042 & $sub$i1050;
  $and31$i1054 = $xor22$i1043 & $sub$i1050;
  $and32$i1055 = $xor23$i1044 & $sub$i1050;
  $and33$i1056 = $xor24$i1045 & $sub$i1050;
  $and34$i1057 = $xor25$i1046 & $sub$i1050;
  $and35$i1058 = $xor26$i1047 & $sub$i1050;
  $and36$i1059 = $xor27$i1048 & $sub$i1050;
  $and37$i1060 = $xor28$i1049 & $sub$i1050;
  $xor38$i1061 = $and$i1051 ^ $xor38$i851;
  HEAP32[$cur>>2] = $xor38$i1061;
  $xor40$i1062 = $and29$i1052 ^ $xor40$i852;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i1062;
  $xor42$i1063 = $and30$i1053 ^ $xor42$i853;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i1063;
  $xor44$i1064 = $and31$i1054 ^ $xor44$i854;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i1064;
  $xor46$i1065 = $and32$i1055 ^ $xor46$i855;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i1065;
  $xor48$i1066 = $and33$i1056 ^ $xor48$i856;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i1066;
  $xor50$i1067 = $and34$i1057 ^ $xor50$i857;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i1067;
  $xor52$i1068 = $and35$i1058 ^ $xor52$i858;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i1068;
  $xor54$i1069 = $and36$i1059 ^ $xor54$i859;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i1069;
  $xor56$i1070 = $and37$i1060 ^ $xor56$i860;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i1070;
  $186 = HEAP32[$arraydecay5$i870>>2]|0;
  $187 = HEAP32[$arrayidx11$i982>>2]|0;
  $188 = HEAP32[$arrayidx12$i983>>2]|0;
  $189 = HEAP32[$arrayidx13$i984>>2]|0;
  $190 = HEAP32[$arrayidx14$i985>>2]|0;
  $191 = HEAP32[$arrayidx15$i986>>2]|0;
  $192 = HEAP32[$arrayidx16$i987>>2]|0;
  $193 = HEAP32[$arrayidx17$i988>>2]|0;
  $194 = HEAP32[$arrayidx18$i989>>2]|0;
  $195 = HEAP32[$arrayidx19$i990>>2]|0;
  $xor$i991 = $186 ^ $xor38$i802;
  $xor20$i992 = $187 ^ $xor40$i803;
  $xor21$i993 = $188 ^ $xor42$i804;
  $xor22$i994 = $189 ^ $xor44$i805;
  $xor23$i995 = $190 ^ $xor46$i806;
  $xor24$i996 = $191 ^ $xor48$i807;
  $xor25$i997 = $192 ^ $xor50$i808;
  $xor26$i998 = $193 ^ $xor52$i809;
  $xor27$i999 = $194 ^ $xor54$i810;
  $xor28$i1000 = $195 ^ $xor56$i811;
  $and$i1002 = $xor$i991 & $sub$i1050;
  $and29$i1003 = $xor20$i992 & $sub$i1050;
  $and30$i1004 = $xor21$i993 & $sub$i1050;
  $and31$i1005 = $xor22$i994 & $sub$i1050;
  $and32$i1006 = $xor23$i995 & $sub$i1050;
  $and33$i1007 = $xor24$i996 & $sub$i1050;
  $and34$i1008 = $xor25$i997 & $sub$i1050;
  $and35$i1009 = $xor26$i998 & $sub$i1050;
  $and36$i1010 = $xor27$i999 & $sub$i1050;
  $and37$i1011 = $xor28$i1000 & $sub$i1050;
  $xor38$i1012 = $and$i1002 ^ $xor38$i802;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i1012;
  $xor40$i1013 = $and29$i1003 ^ $xor40$i803;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i1013;
  $xor42$i1014 = $and30$i1004 ^ $xor42$i804;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i1014;
  $xor44$i1015 = $and31$i1005 ^ $xor44$i805;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i1015;
  $xor46$i1016 = $and32$i1006 ^ $xor46$i806;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i1016;
  $xor48$i1017 = $and33$i1007 ^ $xor48$i807;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i1017;
  $xor50$i1018 = $and34$i1008 ^ $xor50$i808;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i1018;
  $xor52$i1019 = $and35$i1009 ^ $xor52$i809;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i1019;
  $xor54$i1020 = $and36$i1010 ^ $xor54$i810;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i1020;
  $xor56$i1021 = $and37$i1011 ^ $xor56$i811;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i1021;
  $196 = HEAP32[$arraydecay9$i872>>2]|0;
  $197 = HEAP32[$arrayidx11$i933>>2]|0;
  $198 = HEAP32[$arrayidx12$i934>>2]|0;
  $199 = HEAP32[$arrayidx13$i935>>2]|0;
  $200 = HEAP32[$arrayidx14$i936>>2]|0;
  $201 = HEAP32[$arrayidx15$i937>>2]|0;
  $202 = HEAP32[$arrayidx16$i938>>2]|0;
  $203 = HEAP32[$arrayidx17$i939>>2]|0;
  $204 = HEAP32[$arrayidx18$i940>>2]|0;
  $205 = HEAP32[$arrayidx19$i941>>2]|0;
  $xor$i942 = $196 ^ $xor38$i753;
  $xor20$i943 = $197 ^ $xor40$i754;
  $xor21$i944 = $198 ^ $xor42$i755;
  $xor22$i945 = $199 ^ $xor44$i756;
  $xor23$i946 = $200 ^ $xor46$i757;
  $xor24$i947 = $201 ^ $xor48$i758;
  $xor25$i948 = $202 ^ $xor50$i759;
  $xor26$i949 = $203 ^ $xor52$i760;
  $xor27$i950 = $204 ^ $xor54$i761;
  $xor28$i951 = $205 ^ $xor56$i762;
  $and$i953 = $xor$i942 & $sub$i1050;
  $and29$i954 = $xor20$i943 & $sub$i1050;
  $and30$i955 = $xor21$i944 & $sub$i1050;
  $and31$i956 = $xor22$i945 & $sub$i1050;
  $and32$i957 = $xor23$i946 & $sub$i1050;
  $and33$i958 = $xor24$i947 & $sub$i1050;
  $and34$i959 = $xor25$i948 & $sub$i1050;
  $and35$i960 = $xor26$i949 & $sub$i1050;
  $and36$i961 = $xor27$i950 & $sub$i1050;
  $and37$i962 = $xor28$i951 & $sub$i1050;
  $xor38$i963 = $and$i953 ^ $xor38$i753;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i963;
  $xor40$i964 = $and29$i954 ^ $xor40$i754;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i964;
  $xor42$i965 = $and30$i955 ^ $xor42$i755;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i965;
  $xor44$i966 = $and31$i956 ^ $xor44$i756;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i966;
  $xor46$i967 = $and32$i957 ^ $xor46$i757;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i967;
  $xor48$i968 = $and33$i958 ^ $xor48$i758;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i968;
  $xor50$i969 = $and34$i959 ^ $xor50$i759;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i969;
  $xor52$i970 = $and35$i960 ^ $xor52$i760;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i970;
  $xor54$i971 = $and36$i961 ^ $xor54$i761;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i971;
  $xor56$i972 = $and37$i962 ^ $xor56$i762;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i972;
  $206 = HEAP32[$arraydecay13$i874>>2]|0;
  $207 = HEAP32[$arrayidx11$i884>>2]|0;
  $208 = HEAP32[$arrayidx12$i885>>2]|0;
  $209 = HEAP32[$arrayidx13$i886>>2]|0;
  $210 = HEAP32[$arrayidx14$i887>>2]|0;
  $211 = HEAP32[$arrayidx15$i888>>2]|0;
  $212 = HEAP32[$arrayidx16$i889>>2]|0;
  $213 = HEAP32[$arrayidx17$i890>>2]|0;
  $214 = HEAP32[$arrayidx18$i891>>2]|0;
  $215 = HEAP32[$arrayidx19$i892>>2]|0;
  $xor$i893 = $206 ^ $xor38$i704;
  $xor20$i894 = $207 ^ $xor40$i705;
  $xor21$i895 = $208 ^ $xor42$i706;
  $xor22$i896 = $209 ^ $xor44$i707;
  $xor23$i897 = $210 ^ $xor46$i708;
  $xor24$i898 = $211 ^ $xor48$i709;
  $xor25$i899 = $212 ^ $xor50$i710;
  $xor26$i900 = $213 ^ $xor52$i711;
  $xor27$i901 = $214 ^ $xor54$i712;
  $xor28$i902 = $215 ^ $xor56$i713;
  $and$i904 = $xor$i893 & $sub$i1050;
  $and29$i905 = $xor20$i894 & $sub$i1050;
  $and30$i906 = $xor21$i895 & $sub$i1050;
  $and31$i907 = $xor22$i896 & $sub$i1050;
  $and32$i908 = $xor23$i897 & $sub$i1050;
  $and33$i909 = $xor24$i898 & $sub$i1050;
  $and34$i910 = $xor25$i899 & $sub$i1050;
  $and35$i911 = $xor26$i900 & $sub$i1050;
  $and36$i912 = $xor27$i901 & $sub$i1050;
  $and37$i913 = $xor28$i902 & $sub$i1050;
  $xor38$i914 = $and$i904 ^ $xor38$i704;
  HEAP32[$arraydecay11$i>>2] = $xor38$i914;
  $xor40$i915 = $and29$i905 ^ $xor40$i705;
  HEAP32[$arrayidx1$i>>2] = $xor40$i915;
  $xor42$i916 = $and30$i906 ^ $xor42$i706;
  HEAP32[$arrayidx2$i>>2] = $xor42$i916;
  $xor44$i917 = $and31$i907 ^ $xor44$i707;
  HEAP32[$arrayidx3$i>>2] = $xor44$i917;
  $xor46$i918 = $and32$i908 ^ $xor46$i708;
  HEAP32[$arrayidx4$i>>2] = $xor46$i918;
  $xor48$i919 = $and33$i909 ^ $xor48$i709;
  HEAP32[$arrayidx5$i>>2] = $xor48$i919;
  $xor50$i920 = $and34$i910 ^ $xor50$i710;
  HEAP32[$arrayidx6$i>>2] = $xor50$i920;
  $xor52$i921 = $and35$i911 ^ $xor52$i711;
  HEAP32[$arrayidx7$i>>2] = $xor52$i921;
  $xor54$i922 = $and36$i912 ^ $xor54$i712;
  HEAP32[$arrayidx8$i>>2] = $xor54$i922;
  $xor56$i923 = $and37$i913 ^ $xor56$i713;
  HEAP32[$arrayidx9$i>>2] = $xor56$i923;
  $conv3$i1079 = $xor4$i ^ 6;
  $sub$i1080 = (($conv3$i1079) + -1)|0;
  $216 = HEAP32[$arraydecay2$i1084>>2]|0;
  $217 = HEAP32[$arrayidx11$i1248>>2]|0;
  $218 = HEAP32[$arrayidx12$i1249>>2]|0;
  $219 = HEAP32[$arrayidx13$i1250>>2]|0;
  $220 = HEAP32[$arrayidx14$i1251>>2]|0;
  $221 = HEAP32[$arrayidx15$i1252>>2]|0;
  $222 = HEAP32[$arrayidx16$i1253>>2]|0;
  $223 = HEAP32[$arrayidx17$i1254>>2]|0;
  $224 = HEAP32[$arrayidx18$i1255>>2]|0;
  $225 = HEAP32[$arrayidx19$i1256>>2]|0;
  $xor$i1257 = $216 ^ $xor38$i1061;
  $xor20$i1258 = $217 ^ $xor40$i1062;
  $xor21$i1259 = $218 ^ $xor42$i1063;
  $xor22$i1260 = $219 ^ $xor44$i1064;
  $xor23$i1261 = $220 ^ $xor46$i1065;
  $xor24$i1262 = $221 ^ $xor48$i1066;
  $xor25$i1263 = $222 ^ $xor50$i1067;
  $xor26$i1264 = $223 ^ $xor52$i1068;
  $xor27$i1265 = $224 ^ $xor54$i1069;
  $xor28$i1266 = $225 ^ $xor56$i1070;
  $sub$i1267 = $sub$i1080 >> 31;
  $and$i1268 = $xor$i1257 & $sub$i1267;
  $and29$i1269 = $xor20$i1258 & $sub$i1267;
  $and30$i1270 = $xor21$i1259 & $sub$i1267;
  $and31$i1271 = $xor22$i1260 & $sub$i1267;
  $and32$i1272 = $xor23$i1261 & $sub$i1267;
  $and33$i1273 = $xor24$i1262 & $sub$i1267;
  $and34$i1274 = $xor25$i1263 & $sub$i1267;
  $and35$i1275 = $xor26$i1264 & $sub$i1267;
  $and36$i1276 = $xor27$i1265 & $sub$i1267;
  $and37$i1277 = $xor28$i1266 & $sub$i1267;
  $xor38$i1278 = $and$i1268 ^ $xor38$i1061;
  HEAP32[$cur>>2] = $xor38$i1278;
  $xor40$i1279 = $and29$i1269 ^ $xor40$i1062;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i1279;
  $xor42$i1280 = $and30$i1270 ^ $xor42$i1063;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i1280;
  $xor44$i1281 = $and31$i1271 ^ $xor44$i1064;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i1281;
  $xor46$i1282 = $and32$i1272 ^ $xor46$i1065;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i1282;
  $xor48$i1283 = $and33$i1273 ^ $xor48$i1066;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i1283;
  $xor50$i1284 = $and34$i1274 ^ $xor50$i1067;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i1284;
  $xor52$i1285 = $and35$i1275 ^ $xor52$i1068;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i1285;
  $xor54$i1286 = $and36$i1276 ^ $xor54$i1069;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i1286;
  $xor56$i1287 = $and37$i1277 ^ $xor56$i1070;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i1287;
  $226 = HEAP32[$arraydecay5$i1087>>2]|0;
  $227 = HEAP32[$arrayidx11$i1199>>2]|0;
  $228 = HEAP32[$arrayidx12$i1200>>2]|0;
  $229 = HEAP32[$arrayidx13$i1201>>2]|0;
  $230 = HEAP32[$arrayidx14$i1202>>2]|0;
  $231 = HEAP32[$arrayidx15$i1203>>2]|0;
  $232 = HEAP32[$arrayidx16$i1204>>2]|0;
  $233 = HEAP32[$arrayidx17$i1205>>2]|0;
  $234 = HEAP32[$arrayidx18$i1206>>2]|0;
  $235 = HEAP32[$arrayidx19$i1207>>2]|0;
  $xor$i1208 = $226 ^ $xor38$i1012;
  $xor20$i1209 = $227 ^ $xor40$i1013;
  $xor21$i1210 = $228 ^ $xor42$i1014;
  $xor22$i1211 = $229 ^ $xor44$i1015;
  $xor23$i1212 = $230 ^ $xor46$i1016;
  $xor24$i1213 = $231 ^ $xor48$i1017;
  $xor25$i1214 = $232 ^ $xor50$i1018;
  $xor26$i1215 = $233 ^ $xor52$i1019;
  $xor27$i1216 = $234 ^ $xor54$i1020;
  $xor28$i1217 = $235 ^ $xor56$i1021;
  $and$i1219 = $xor$i1208 & $sub$i1267;
  $and29$i1220 = $xor20$i1209 & $sub$i1267;
  $and30$i1221 = $xor21$i1210 & $sub$i1267;
  $and31$i1222 = $xor22$i1211 & $sub$i1267;
  $and32$i1223 = $xor23$i1212 & $sub$i1267;
  $and33$i1224 = $xor24$i1213 & $sub$i1267;
  $and34$i1225 = $xor25$i1214 & $sub$i1267;
  $and35$i1226 = $xor26$i1215 & $sub$i1267;
  $and36$i1227 = $xor27$i1216 & $sub$i1267;
  $and37$i1228 = $xor28$i1217 & $sub$i1267;
  $xor38$i1229 = $and$i1219 ^ $xor38$i1012;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i1229;
  $xor40$i1230 = $and29$i1220 ^ $xor40$i1013;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i1230;
  $xor42$i1231 = $and30$i1221 ^ $xor42$i1014;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i1231;
  $xor44$i1232 = $and31$i1222 ^ $xor44$i1015;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i1232;
  $xor46$i1233 = $and32$i1223 ^ $xor46$i1016;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i1233;
  $xor48$i1234 = $and33$i1224 ^ $xor48$i1017;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i1234;
  $xor50$i1235 = $and34$i1225 ^ $xor50$i1018;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i1235;
  $xor52$i1236 = $and35$i1226 ^ $xor52$i1019;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i1236;
  $xor54$i1237 = $and36$i1227 ^ $xor54$i1020;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i1237;
  $xor56$i1238 = $and37$i1228 ^ $xor56$i1021;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i1238;
  $236 = HEAP32[$arraydecay9$i1089>>2]|0;
  $237 = HEAP32[$arrayidx11$i1150>>2]|0;
  $238 = HEAP32[$arrayidx12$i1151>>2]|0;
  $239 = HEAP32[$arrayidx13$i1152>>2]|0;
  $240 = HEAP32[$arrayidx14$i1153>>2]|0;
  $241 = HEAP32[$arrayidx15$i1154>>2]|0;
  $242 = HEAP32[$arrayidx16$i1155>>2]|0;
  $243 = HEAP32[$arrayidx17$i1156>>2]|0;
  $244 = HEAP32[$arrayidx18$i1157>>2]|0;
  $245 = HEAP32[$arrayidx19$i1158>>2]|0;
  $xor$i1159 = $236 ^ $xor38$i963;
  $xor20$i1160 = $237 ^ $xor40$i964;
  $xor21$i1161 = $238 ^ $xor42$i965;
  $xor22$i1162 = $239 ^ $xor44$i966;
  $xor23$i1163 = $240 ^ $xor46$i967;
  $xor24$i1164 = $241 ^ $xor48$i968;
  $xor25$i1165 = $242 ^ $xor50$i969;
  $xor26$i1166 = $243 ^ $xor52$i970;
  $xor27$i1167 = $244 ^ $xor54$i971;
  $xor28$i1168 = $245 ^ $xor56$i972;
  $and$i1170 = $xor$i1159 & $sub$i1267;
  $and29$i1171 = $xor20$i1160 & $sub$i1267;
  $and30$i1172 = $xor21$i1161 & $sub$i1267;
  $and31$i1173 = $xor22$i1162 & $sub$i1267;
  $and32$i1174 = $xor23$i1163 & $sub$i1267;
  $and33$i1175 = $xor24$i1164 & $sub$i1267;
  $and34$i1176 = $xor25$i1165 & $sub$i1267;
  $and35$i1177 = $xor26$i1166 & $sub$i1267;
  $and36$i1178 = $xor27$i1167 & $sub$i1267;
  $and37$i1179 = $xor28$i1168 & $sub$i1267;
  $xor38$i1180 = $and$i1170 ^ $xor38$i963;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i1180;
  $xor40$i1181 = $and29$i1171 ^ $xor40$i964;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i1181;
  $xor42$i1182 = $and30$i1172 ^ $xor42$i965;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i1182;
  $xor44$i1183 = $and31$i1173 ^ $xor44$i966;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i1183;
  $xor46$i1184 = $and32$i1174 ^ $xor46$i967;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i1184;
  $xor48$i1185 = $and33$i1175 ^ $xor48$i968;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i1185;
  $xor50$i1186 = $and34$i1176 ^ $xor50$i969;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i1186;
  $xor52$i1187 = $and35$i1177 ^ $xor52$i970;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i1187;
  $xor54$i1188 = $and36$i1178 ^ $xor54$i971;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i1188;
  $xor56$i1189 = $and37$i1179 ^ $xor56$i972;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i1189;
  $246 = HEAP32[$arraydecay13$i1091>>2]|0;
  $247 = HEAP32[$arrayidx11$i1101>>2]|0;
  $248 = HEAP32[$arrayidx12$i1102>>2]|0;
  $249 = HEAP32[$arrayidx13$i1103>>2]|0;
  $250 = HEAP32[$arrayidx14$i1104>>2]|0;
  $251 = HEAP32[$arrayidx15$i1105>>2]|0;
  $252 = HEAP32[$arrayidx16$i1106>>2]|0;
  $253 = HEAP32[$arrayidx17$i1107>>2]|0;
  $254 = HEAP32[$arrayidx18$i1108>>2]|0;
  $255 = HEAP32[$arrayidx19$i1109>>2]|0;
  $xor$i1110 = $246 ^ $xor38$i914;
  $xor20$i1111 = $247 ^ $xor40$i915;
  $xor21$i1112 = $248 ^ $xor42$i916;
  $xor22$i1113 = $249 ^ $xor44$i917;
  $xor23$i1114 = $250 ^ $xor46$i918;
  $xor24$i1115 = $251 ^ $xor48$i919;
  $xor25$i1116 = $252 ^ $xor50$i920;
  $xor26$i1117 = $253 ^ $xor52$i921;
  $xor27$i1118 = $254 ^ $xor54$i922;
  $xor28$i1119 = $255 ^ $xor56$i923;
  $and$i1121 = $xor$i1110 & $sub$i1267;
  $and29$i1122 = $xor20$i1111 & $sub$i1267;
  $and30$i1123 = $xor21$i1112 & $sub$i1267;
  $and31$i1124 = $xor22$i1113 & $sub$i1267;
  $and32$i1125 = $xor23$i1114 & $sub$i1267;
  $and33$i1126 = $xor24$i1115 & $sub$i1267;
  $and34$i1127 = $xor25$i1116 & $sub$i1267;
  $and35$i1128 = $xor26$i1117 & $sub$i1267;
  $and36$i1129 = $xor27$i1118 & $sub$i1267;
  $and37$i1130 = $xor28$i1119 & $sub$i1267;
  $xor38$i1131 = $and$i1121 ^ $xor38$i914;
  HEAP32[$arraydecay11$i>>2] = $xor38$i1131;
  $xor40$i1132 = $and29$i1122 ^ $xor40$i915;
  HEAP32[$arrayidx1$i>>2] = $xor40$i1132;
  $xor42$i1133 = $and30$i1123 ^ $xor42$i916;
  HEAP32[$arrayidx2$i>>2] = $xor42$i1133;
  $xor44$i1134 = $and31$i1124 ^ $xor44$i917;
  HEAP32[$arrayidx3$i>>2] = $xor44$i1134;
  $xor46$i1135 = $and32$i1125 ^ $xor46$i918;
  HEAP32[$arrayidx4$i>>2] = $xor46$i1135;
  $xor48$i1136 = $and33$i1126 ^ $xor48$i919;
  HEAP32[$arrayidx5$i>>2] = $xor48$i1136;
  $xor50$i1137 = $and34$i1127 ^ $xor50$i920;
  HEAP32[$arrayidx6$i>>2] = $xor50$i1137;
  $xor52$i1138 = $and35$i1128 ^ $xor52$i921;
  HEAP32[$arrayidx7$i>>2] = $xor52$i1138;
  $xor54$i1139 = $and36$i1129 ^ $xor54$i922;
  HEAP32[$arrayidx8$i>>2] = $xor54$i1139;
  $xor56$i1140 = $and37$i1130 ^ $xor56$i923;
  HEAP32[$arrayidx9$i>>2] = $xor56$i1140;
  $conv3$i1289 = $xor4$i ^ 7;
  $sub$i1290 = (($conv3$i1289) + -1)|0;
  $256 = HEAP32[$arraydecay2$i1294>>2]|0;
  $257 = HEAP32[$arrayidx11$i1458>>2]|0;
  $258 = HEAP32[$arrayidx12$i1459>>2]|0;
  $259 = HEAP32[$arrayidx13$i1460>>2]|0;
  $260 = HEAP32[$arrayidx14$i1461>>2]|0;
  $261 = HEAP32[$arrayidx15$i1462>>2]|0;
  $262 = HEAP32[$arrayidx16$i1463>>2]|0;
  $263 = HEAP32[$arrayidx17$i1464>>2]|0;
  $264 = HEAP32[$arrayidx18$i1465>>2]|0;
  $265 = HEAP32[$arrayidx19$i1466>>2]|0;
  $xor$i1467 = $256 ^ $xor38$i1278;
  $xor20$i1468 = $257 ^ $xor40$i1279;
  $xor21$i1469 = $258 ^ $xor42$i1280;
  $xor22$i1470 = $259 ^ $xor44$i1281;
  $xor23$i1471 = $260 ^ $xor46$i1282;
  $xor24$i1472 = $261 ^ $xor48$i1283;
  $xor25$i1473 = $262 ^ $xor50$i1284;
  $xor26$i1474 = $263 ^ $xor52$i1285;
  $xor27$i1475 = $264 ^ $xor54$i1286;
  $xor28$i1476 = $265 ^ $xor56$i1287;
  $sub$i1477 = $sub$i1290 >> 31;
  $and$i1478 = $xor$i1467 & $sub$i1477;
  $and29$i1479 = $xor20$i1468 & $sub$i1477;
  $and30$i1480 = $xor21$i1469 & $sub$i1477;
  $and31$i1481 = $xor22$i1470 & $sub$i1477;
  $and32$i1482 = $xor23$i1471 & $sub$i1477;
  $and33$i1483 = $xor24$i1472 & $sub$i1477;
  $and34$i1484 = $xor25$i1473 & $sub$i1477;
  $and35$i1485 = $xor26$i1474 & $sub$i1477;
  $and36$i1486 = $xor27$i1475 & $sub$i1477;
  $and37$i1487 = $xor28$i1476 & $sub$i1477;
  $xor38$i1488 = $and$i1478 ^ $xor38$i1278;
  HEAP32[$cur>>2] = $xor38$i1488;
  $xor40$i1489 = $and29$i1479 ^ $xor40$i1279;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i1489;
  $xor42$i1490 = $and30$i1480 ^ $xor42$i1280;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i1490;
  $xor44$i1491 = $and31$i1481 ^ $xor44$i1281;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i1491;
  $xor46$i1492 = $and32$i1482 ^ $xor46$i1282;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i1492;
  $xor48$i1493 = $and33$i1483 ^ $xor48$i1283;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i1493;
  $xor50$i1494 = $and34$i1484 ^ $xor50$i1284;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i1494;
  $xor52$i1495 = $and35$i1485 ^ $xor52$i1285;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i1495;
  $xor54$i1496 = $and36$i1486 ^ $xor54$i1286;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i1496;
  $xor56$i1497 = $and37$i1487 ^ $xor56$i1287;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i1497;
  $266 = HEAP32[$arraydecay5$i1297>>2]|0;
  $267 = HEAP32[$arrayidx11$i1409>>2]|0;
  $268 = HEAP32[$arrayidx12$i1410>>2]|0;
  $269 = HEAP32[$arrayidx13$i1411>>2]|0;
  $270 = HEAP32[$arrayidx14$i1412>>2]|0;
  $271 = HEAP32[$arrayidx15$i1413>>2]|0;
  $272 = HEAP32[$arrayidx16$i1414>>2]|0;
  $273 = HEAP32[$arrayidx17$i1415>>2]|0;
  $274 = HEAP32[$arrayidx18$i1416>>2]|0;
  $275 = HEAP32[$arrayidx19$i1417>>2]|0;
  $xor$i1418 = $266 ^ $xor38$i1229;
  $xor20$i1419 = $267 ^ $xor40$i1230;
  $xor21$i1420 = $268 ^ $xor42$i1231;
  $xor22$i1421 = $269 ^ $xor44$i1232;
  $xor23$i1422 = $270 ^ $xor46$i1233;
  $xor24$i1423 = $271 ^ $xor48$i1234;
  $xor25$i1424 = $272 ^ $xor50$i1235;
  $xor26$i1425 = $273 ^ $xor52$i1236;
  $xor27$i1426 = $274 ^ $xor54$i1237;
  $xor28$i1427 = $275 ^ $xor56$i1238;
  $and$i1429 = $xor$i1418 & $sub$i1477;
  $and29$i1430 = $xor20$i1419 & $sub$i1477;
  $and30$i1431 = $xor21$i1420 & $sub$i1477;
  $and31$i1432 = $xor22$i1421 & $sub$i1477;
  $and32$i1433 = $xor23$i1422 & $sub$i1477;
  $and33$i1434 = $xor24$i1423 & $sub$i1477;
  $and34$i1435 = $xor25$i1424 & $sub$i1477;
  $and35$i1436 = $xor26$i1425 & $sub$i1477;
  $and36$i1437 = $xor27$i1426 & $sub$i1477;
  $and37$i1438 = $xor28$i1427 & $sub$i1477;
  $xor38$i1439 = $and$i1429 ^ $xor38$i1229;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i1439;
  $xor40$i1440 = $and29$i1430 ^ $xor40$i1230;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i1440;
  $xor42$i1441 = $and30$i1431 ^ $xor42$i1231;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i1441;
  $xor44$i1442 = $and31$i1432 ^ $xor44$i1232;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i1442;
  $xor46$i1443 = $and32$i1433 ^ $xor46$i1233;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i1443;
  $xor48$i1444 = $and33$i1434 ^ $xor48$i1234;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i1444;
  $xor50$i1445 = $and34$i1435 ^ $xor50$i1235;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i1445;
  $xor52$i1446 = $and35$i1436 ^ $xor52$i1236;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i1446;
  $xor54$i1447 = $and36$i1437 ^ $xor54$i1237;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i1447;
  $xor56$i1448 = $and37$i1438 ^ $xor56$i1238;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i1448;
  $276 = HEAP32[$arraydecay9$i1299>>2]|0;
  $277 = HEAP32[$arrayidx11$i1360>>2]|0;
  $278 = HEAP32[$arrayidx12$i1361>>2]|0;
  $279 = HEAP32[$arrayidx13$i1362>>2]|0;
  $280 = HEAP32[$arrayidx14$i1363>>2]|0;
  $281 = HEAP32[$arrayidx15$i1364>>2]|0;
  $282 = HEAP32[$arrayidx16$i1365>>2]|0;
  $283 = HEAP32[$arrayidx17$i1366>>2]|0;
  $284 = HEAP32[$arrayidx18$i1367>>2]|0;
  $285 = HEAP32[$arrayidx19$i1368>>2]|0;
  $xor$i1369 = $276 ^ $xor38$i1180;
  $xor20$i1370 = $277 ^ $xor40$i1181;
  $xor21$i1371 = $278 ^ $xor42$i1182;
  $xor22$i1372 = $279 ^ $xor44$i1183;
  $xor23$i1373 = $280 ^ $xor46$i1184;
  $xor24$i1374 = $281 ^ $xor48$i1185;
  $xor25$i1375 = $282 ^ $xor50$i1186;
  $xor26$i1376 = $283 ^ $xor52$i1187;
  $xor27$i1377 = $284 ^ $xor54$i1188;
  $xor28$i1378 = $285 ^ $xor56$i1189;
  $and$i1380 = $xor$i1369 & $sub$i1477;
  $and29$i1381 = $xor20$i1370 & $sub$i1477;
  $and30$i1382 = $xor21$i1371 & $sub$i1477;
  $and31$i1383 = $xor22$i1372 & $sub$i1477;
  $and32$i1384 = $xor23$i1373 & $sub$i1477;
  $and33$i1385 = $xor24$i1374 & $sub$i1477;
  $and34$i1386 = $xor25$i1375 & $sub$i1477;
  $and35$i1387 = $xor26$i1376 & $sub$i1477;
  $and36$i1388 = $xor27$i1377 & $sub$i1477;
  $and37$i1389 = $xor28$i1378 & $sub$i1477;
  $xor38$i1390 = $and$i1380 ^ $xor38$i1180;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i1390;
  $xor40$i1391 = $and29$i1381 ^ $xor40$i1181;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i1391;
  $xor42$i1392 = $and30$i1382 ^ $xor42$i1182;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i1392;
  $xor44$i1393 = $and31$i1383 ^ $xor44$i1183;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i1393;
  $xor46$i1394 = $and32$i1384 ^ $xor46$i1184;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i1394;
  $xor48$i1395 = $and33$i1385 ^ $xor48$i1185;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i1395;
  $xor50$i1396 = $and34$i1386 ^ $xor50$i1186;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i1396;
  $xor52$i1397 = $and35$i1387 ^ $xor52$i1187;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i1397;
  $xor54$i1398 = $and36$i1388 ^ $xor54$i1188;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i1398;
  $xor56$i1399 = $and37$i1389 ^ $xor56$i1189;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i1399;
  $286 = HEAP32[$arraydecay13$i1301>>2]|0;
  $287 = HEAP32[$arrayidx11$i1311>>2]|0;
  $288 = HEAP32[$arrayidx12$i1312>>2]|0;
  $289 = HEAP32[$arrayidx13$i1313>>2]|0;
  $290 = HEAP32[$arrayidx14$i1314>>2]|0;
  $291 = HEAP32[$arrayidx15$i1315>>2]|0;
  $292 = HEAP32[$arrayidx16$i1316>>2]|0;
  $293 = HEAP32[$arrayidx17$i1317>>2]|0;
  $294 = HEAP32[$arrayidx18$i1318>>2]|0;
  $295 = HEAP32[$arrayidx19$i1319>>2]|0;
  $xor$i1320 = $286 ^ $xor38$i1131;
  $xor20$i1321 = $287 ^ $xor40$i1132;
  $xor21$i1322 = $288 ^ $xor42$i1133;
  $xor22$i1323 = $289 ^ $xor44$i1134;
  $xor23$i1324 = $290 ^ $xor46$i1135;
  $xor24$i1325 = $291 ^ $xor48$i1136;
  $xor25$i1326 = $292 ^ $xor50$i1137;
  $xor26$i1327 = $293 ^ $xor52$i1138;
  $xor27$i1328 = $294 ^ $xor54$i1139;
  $xor28$i1329 = $295 ^ $xor56$i1140;
  $and$i1331 = $xor$i1320 & $sub$i1477;
  $and29$i1332 = $xor20$i1321 & $sub$i1477;
  $and30$i1333 = $xor21$i1322 & $sub$i1477;
  $and31$i1334 = $xor22$i1323 & $sub$i1477;
  $and32$i1335 = $xor23$i1324 & $sub$i1477;
  $and33$i1336 = $xor24$i1325 & $sub$i1477;
  $and34$i1337 = $xor25$i1326 & $sub$i1477;
  $and35$i1338 = $xor26$i1327 & $sub$i1477;
  $and36$i1339 = $xor27$i1328 & $sub$i1477;
  $and37$i1340 = $xor28$i1329 & $sub$i1477;
  $xor38$i1341 = $and$i1331 ^ $xor38$i1131;
  HEAP32[$arraydecay11$i>>2] = $xor38$i1341;
  $xor40$i1342 = $and29$i1332 ^ $xor40$i1132;
  HEAP32[$arrayidx1$i>>2] = $xor40$i1342;
  $xor42$i1343 = $and30$i1333 ^ $xor42$i1133;
  HEAP32[$arrayidx2$i>>2] = $xor42$i1343;
  $xor44$i1344 = $and31$i1334 ^ $xor44$i1134;
  HEAP32[$arrayidx3$i>>2] = $xor44$i1344;
  $xor46$i1345 = $and32$i1335 ^ $xor46$i1135;
  HEAP32[$arrayidx4$i>>2] = $xor46$i1345;
  $xor48$i1346 = $and33$i1336 ^ $xor48$i1136;
  HEAP32[$arrayidx5$i>>2] = $xor48$i1346;
  $xor50$i1347 = $and34$i1337 ^ $xor50$i1137;
  HEAP32[$arrayidx6$i>>2] = $xor50$i1347;
  $xor52$i1348 = $and35$i1338 ^ $xor52$i1138;
  HEAP32[$arrayidx7$i>>2] = $xor52$i1348;
  $xor54$i1349 = $and36$i1339 ^ $xor54$i1139;
  HEAP32[$arrayidx8$i>>2] = $xor54$i1349;
  $xor56$i1350 = $and37$i1340 ^ $xor56$i1140;
  HEAP32[$arrayidx9$i>>2] = $xor56$i1350;
  $conv3$i1973 = $xor4$i ^ 8;
  $sub$i1974 = (($conv3$i1973) + -1)|0;
  $296 = HEAP32[$arraydecay2$i1768>>2]|0;
  $297 = HEAP32[$arrayidx11$i1932>>2]|0;
  $298 = HEAP32[$arrayidx12$i1933>>2]|0;
  $299 = HEAP32[$arrayidx13$i1934>>2]|0;
  $300 = HEAP32[$arrayidx14$i1935>>2]|0;
  $301 = HEAP32[$arrayidx15$i1936>>2]|0;
  $302 = HEAP32[$arrayidx16$i1937>>2]|0;
  $303 = HEAP32[$arrayidx17$i1938>>2]|0;
  $304 = HEAP32[$arrayidx18$i1939>>2]|0;
  $305 = HEAP32[$arrayidx19$i1940>>2]|0;
  $xor$i1941 = $296 ^ $xor38$i1488;
  $xor20$i1942 = $297 ^ $xor40$i1489;
  $xor21$i1943 = $298 ^ $xor42$i1490;
  $xor22$i1944 = $299 ^ $xor44$i1491;
  $xor23$i1945 = $300 ^ $xor46$i1492;
  $xor24$i1946 = $301 ^ $xor48$i1493;
  $xor25$i1947 = $302 ^ $xor50$i1494;
  $xor26$i1948 = $303 ^ $xor52$i1495;
  $xor27$i1949 = $304 ^ $xor54$i1496;
  $xor28$i1950 = $305 ^ $xor56$i1497;
  $sub$i1951 = $sub$i1974 >> 31;
  $and$i1952 = $xor$i1941 & $sub$i1951;
  $and29$i1953 = $xor20$i1942 & $sub$i1951;
  $and30$i1954 = $xor21$i1943 & $sub$i1951;
  $and31$i1955 = $xor22$i1944 & $sub$i1951;
  $and32$i1956 = $xor23$i1945 & $sub$i1951;
  $and33$i1957 = $xor24$i1946 & $sub$i1951;
  $and34$i1958 = $xor25$i1947 & $sub$i1951;
  $and35$i1959 = $xor26$i1948 & $sub$i1951;
  $and36$i1960 = $xor27$i1949 & $sub$i1951;
  $and37$i1961 = $xor28$i1950 & $sub$i1951;
  $xor38$i1962 = $and$i1952 ^ $xor38$i1488;
  HEAP32[$cur>>2] = $xor38$i1962;
  $xor40$i1963 = $and29$i1953 ^ $xor40$i1489;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i1963;
  $xor42$i1964 = $and30$i1954 ^ $xor42$i1490;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i1964;
  $xor44$i1965 = $and31$i1955 ^ $xor44$i1491;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i1965;
  $xor46$i1966 = $and32$i1956 ^ $xor46$i1492;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i1966;
  $xor48$i1967 = $and33$i1957 ^ $xor48$i1493;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i1967;
  $xor50$i1968 = $and34$i1958 ^ $xor50$i1494;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i1968;
  $xor52$i1969 = $and35$i1959 ^ $xor52$i1495;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i1969;
  $xor54$i1970 = $and36$i1960 ^ $xor54$i1496;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i1970;
  $xor56$i1971 = $and37$i1961 ^ $xor56$i1497;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i1971;
  $306 = HEAP32[$arraydecay5$i1771>>2]|0;
  $307 = HEAP32[$arrayidx11$i1883>>2]|0;
  $308 = HEAP32[$arrayidx12$i1884>>2]|0;
  $309 = HEAP32[$arrayidx13$i1885>>2]|0;
  $310 = HEAP32[$arrayidx14$i1886>>2]|0;
  $311 = HEAP32[$arrayidx15$i1887>>2]|0;
  $312 = HEAP32[$arrayidx16$i1888>>2]|0;
  $313 = HEAP32[$arrayidx17$i1889>>2]|0;
  $314 = HEAP32[$arrayidx18$i1890>>2]|0;
  $315 = HEAP32[$arrayidx19$i1891>>2]|0;
  $xor$i1892 = $306 ^ $xor38$i1439;
  $xor20$i1893 = $307 ^ $xor40$i1440;
  $xor21$i1894 = $308 ^ $xor42$i1441;
  $xor22$i1895 = $309 ^ $xor44$i1442;
  $xor23$i1896 = $310 ^ $xor46$i1443;
  $xor24$i1897 = $311 ^ $xor48$i1444;
  $xor25$i1898 = $312 ^ $xor50$i1445;
  $xor26$i1899 = $313 ^ $xor52$i1446;
  $xor27$i1900 = $314 ^ $xor54$i1447;
  $xor28$i1901 = $315 ^ $xor56$i1448;
  $and$i1903 = $xor$i1892 & $sub$i1951;
  $and29$i1904 = $xor20$i1893 & $sub$i1951;
  $and30$i1905 = $xor21$i1894 & $sub$i1951;
  $and31$i1906 = $xor22$i1895 & $sub$i1951;
  $and32$i1907 = $xor23$i1896 & $sub$i1951;
  $and33$i1908 = $xor24$i1897 & $sub$i1951;
  $and34$i1909 = $xor25$i1898 & $sub$i1951;
  $and35$i1910 = $xor26$i1899 & $sub$i1951;
  $and36$i1911 = $xor27$i1900 & $sub$i1951;
  $and37$i1912 = $xor28$i1901 & $sub$i1951;
  $xor38$i1913 = $and$i1903 ^ $xor38$i1439;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i1913;
  $xor40$i1914 = $and29$i1904 ^ $xor40$i1440;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i1914;
  $xor42$i1915 = $and30$i1905 ^ $xor42$i1441;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i1915;
  $xor44$i1916 = $and31$i1906 ^ $xor44$i1442;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i1916;
  $xor46$i1917 = $and32$i1907 ^ $xor46$i1443;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i1917;
  $xor48$i1918 = $and33$i1908 ^ $xor48$i1444;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i1918;
  $xor50$i1919 = $and34$i1909 ^ $xor50$i1445;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i1919;
  $xor52$i1920 = $and35$i1910 ^ $xor52$i1446;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i1920;
  $xor54$i1921 = $and36$i1911 ^ $xor54$i1447;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i1921;
  $xor56$i1922 = $and37$i1912 ^ $xor56$i1448;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i1922;
  $316 = HEAP32[$arraydecay9$i1773>>2]|0;
  $317 = HEAP32[$arrayidx11$i1834>>2]|0;
  $318 = HEAP32[$arrayidx12$i1835>>2]|0;
  $319 = HEAP32[$arrayidx13$i1836>>2]|0;
  $320 = HEAP32[$arrayidx14$i1837>>2]|0;
  $321 = HEAP32[$arrayidx15$i1838>>2]|0;
  $322 = HEAP32[$arrayidx16$i1839>>2]|0;
  $323 = HEAP32[$arrayidx17$i1840>>2]|0;
  $324 = HEAP32[$arrayidx18$i1841>>2]|0;
  $325 = HEAP32[$arrayidx19$i1842>>2]|0;
  $xor$i1843 = $316 ^ $xor38$i1390;
  $xor20$i1844 = $317 ^ $xor40$i1391;
  $xor21$i1845 = $318 ^ $xor42$i1392;
  $xor22$i1846 = $319 ^ $xor44$i1393;
  $xor23$i1847 = $320 ^ $xor46$i1394;
  $xor24$i1848 = $321 ^ $xor48$i1395;
  $xor25$i1849 = $322 ^ $xor50$i1396;
  $xor26$i1850 = $323 ^ $xor52$i1397;
  $xor27$i1851 = $324 ^ $xor54$i1398;
  $xor28$i1852 = $325 ^ $xor56$i1399;
  $and$i1854 = $xor$i1843 & $sub$i1951;
  $and29$i1855 = $xor20$i1844 & $sub$i1951;
  $and30$i1856 = $xor21$i1845 & $sub$i1951;
  $and31$i1857 = $xor22$i1846 & $sub$i1951;
  $and32$i1858 = $xor23$i1847 & $sub$i1951;
  $and33$i1859 = $xor24$i1848 & $sub$i1951;
  $and34$i1860 = $xor25$i1849 & $sub$i1951;
  $and35$i1861 = $xor26$i1850 & $sub$i1951;
  $and36$i1862 = $xor27$i1851 & $sub$i1951;
  $and37$i1863 = $xor28$i1852 & $sub$i1951;
  $xor38$i1864 = $and$i1854 ^ $xor38$i1390;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i1864;
  $xor40$i1865 = $and29$i1855 ^ $xor40$i1391;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i1865;
  $xor42$i1866 = $and30$i1856 ^ $xor42$i1392;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i1866;
  $xor44$i1867 = $and31$i1857 ^ $xor44$i1393;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i1867;
  $xor46$i1868 = $and32$i1858 ^ $xor46$i1394;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i1868;
  $xor48$i1869 = $and33$i1859 ^ $xor48$i1395;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i1869;
  $xor50$i1870 = $and34$i1860 ^ $xor50$i1396;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i1870;
  $xor52$i1871 = $and35$i1861 ^ $xor52$i1397;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i1871;
  $xor54$i1872 = $and36$i1862 ^ $xor54$i1398;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i1872;
  $xor56$i1873 = $and37$i1863 ^ $xor56$i1399;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i1873;
  $326 = HEAP32[$arraydecay13$i1775>>2]|0;
  $327 = HEAP32[$arrayidx11$i1785>>2]|0;
  $328 = HEAP32[$arrayidx12$i1786>>2]|0;
  $329 = HEAP32[$arrayidx13$i1787>>2]|0;
  $330 = HEAP32[$arrayidx14$i1788>>2]|0;
  $331 = HEAP32[$arrayidx15$i1789>>2]|0;
  $332 = HEAP32[$arrayidx16$i1790>>2]|0;
  $333 = HEAP32[$arrayidx17$i1791>>2]|0;
  $334 = HEAP32[$arrayidx18$i1792>>2]|0;
  $335 = HEAP32[$arrayidx19$i1793>>2]|0;
  $xor$i1794 = $326 ^ $xor38$i1341;
  $xor20$i1795 = $327 ^ $xor40$i1342;
  $xor21$i1796 = $328 ^ $xor42$i1343;
  $xor22$i1797 = $329 ^ $xor44$i1344;
  $xor23$i1798 = $330 ^ $xor46$i1345;
  $xor24$i1799 = $331 ^ $xor48$i1346;
  $xor25$i1800 = $332 ^ $xor50$i1347;
  $xor26$i1801 = $333 ^ $xor52$i1348;
  $xor27$i1802 = $334 ^ $xor54$i1349;
  $xor28$i1803 = $335 ^ $xor56$i1350;
  $and$i1805 = $xor$i1794 & $sub$i1951;
  $and29$i1806 = $xor20$i1795 & $sub$i1951;
  $and30$i1807 = $xor21$i1796 & $sub$i1951;
  $and31$i1808 = $xor22$i1797 & $sub$i1951;
  $and32$i1809 = $xor23$i1798 & $sub$i1951;
  $and33$i1810 = $xor24$i1799 & $sub$i1951;
  $and34$i1811 = $xor25$i1800 & $sub$i1951;
  $and35$i1812 = $xor26$i1801 & $sub$i1951;
  $and36$i1813 = $xor27$i1802 & $sub$i1951;
  $and37$i1814 = $xor28$i1803 & $sub$i1951;
  $xor38$i1815 = $and$i1805 ^ $xor38$i1341;
  HEAP32[$arraydecay11$i>>2] = $xor38$i1815;
  $xor40$i1816 = $and29$i1806 ^ $xor40$i1342;
  HEAP32[$arrayidx1$i>>2] = $xor40$i1816;
  $xor42$i1817 = $and30$i1807 ^ $xor42$i1343;
  HEAP32[$arrayidx2$i>>2] = $xor42$i1817;
  $xor44$i1818 = $and31$i1808 ^ $xor44$i1344;
  HEAP32[$arrayidx3$i>>2] = $xor44$i1818;
  $xor46$i1819 = $and32$i1809 ^ $xor46$i1345;
  HEAP32[$arrayidx4$i>>2] = $xor46$i1819;
  $xor48$i1820 = $and33$i1810 ^ $xor48$i1346;
  HEAP32[$arrayidx5$i>>2] = $xor48$i1820;
  $xor50$i1821 = $and34$i1811 ^ $xor50$i1347;
  HEAP32[$arrayidx6$i>>2] = $xor50$i1821;
  $xor52$i1822 = $and35$i1812 ^ $xor52$i1348;
  HEAP32[$arrayidx7$i>>2] = $xor52$i1822;
  $xor54$i1823 = $and36$i1813 ^ $xor54$i1349;
  HEAP32[$arrayidx8$i>>2] = $xor54$i1823;
  $xor56$i1824 = $and37$i1814 ^ $xor56$i1350;
  HEAP32[$arrayidx9$i>>2] = $xor56$i1824;
  $sub$i1712 = (0 - ($xor38$i1815))|0;
  $sub10$i = (0 - ($xor40$i1816))|0;
  $sub11$i = (0 - ($xor42$i1817))|0;
  $sub12$i = (0 - ($xor44$i1818))|0;
  $sub13$i = (0 - ($xor46$i1819))|0;
  $sub14$i = (0 - ($xor48$i1820))|0;
  $sub15$i = (0 - ($xor50$i1821))|0;
  $sub16$i = (0 - ($xor52$i1822))|0;
  $sub17$i = (0 - ($xor54$i1823))|0;
  $sub18$i = (0 - ($xor56$i1824))|0;
  $xor$i1672 = $xor38$i1913 ^ $xor38$i1962;
  $xor20$i1673 = $xor40$i1914 ^ $xor40$i1963;
  $xor21$i1674 = $xor42$i1915 ^ $xor42$i1964;
  $xor22$i1675 = $xor44$i1916 ^ $xor44$i1965;
  $xor23$i1676 = $xor46$i1917 ^ $xor46$i1966;
  $xor24$i1677 = $xor48$i1918 ^ $xor48$i1967;
  $xor25$i1678 = $xor50$i1919 ^ $xor50$i1968;
  $xor26$i1679 = $xor52$i1920 ^ $xor52$i1969;
  $xor27$i1680 = $xor54$i1921 ^ $xor54$i1970;
  $xor28$i1681 = $xor56$i1922 ^ $xor56$i1971;
  $and$i1683 = $xor$i1672 & $sub41;
  $and29$i1684 = $xor20$i1673 & $sub41;
  $and30$i1685 = $xor21$i1674 & $sub41;
  $and31$i1686 = $xor22$i1675 & $sub41;
  $and32$i1687 = $xor23$i1676 & $sub41;
  $and33$i1688 = $xor24$i1677 & $sub41;
  $and34$i1689 = $xor25$i1678 & $sub41;
  $and35$i1690 = $xor26$i1679 & $sub41;
  $and36$i1691 = $xor27$i1680 & $sub41;
  $and37$i1692 = $xor28$i1681 & $sub41;
  $xor38$i1693 = $and$i1683 ^ $xor38$i1962;
  HEAP32[$cur>>2] = $xor38$i1693;
  $xor40$i1694 = $and29$i1684 ^ $xor40$i1963;
  HEAP32[$arrayidx1$i$i75>>2] = $xor40$i1694;
  $xor42$i1695 = $and30$i1685 ^ $xor42$i1964;
  HEAP32[$arrayidx2$i183>>2] = $xor42$i1695;
  $xor44$i1696 = $and31$i1686 ^ $xor44$i1965;
  HEAP32[$arrayidx3$i184>>2] = $xor44$i1696;
  $xor46$i1697 = $and32$i1687 ^ $xor46$i1966;
  HEAP32[$arrayidx4$i185>>2] = $xor46$i1697;
  $xor48$i1698 = $and33$i1688 ^ $xor48$i1967;
  HEAP32[$arrayidx5$i186>>2] = $xor48$i1698;
  $xor50$i1699 = $and34$i1689 ^ $xor50$i1968;
  HEAP32[$arrayidx6$i187>>2] = $xor50$i1699;
  $xor52$i1700 = $and35$i1690 ^ $xor52$i1969;
  HEAP32[$arrayidx7$i188>>2] = $xor52$i1700;
  $xor54$i1701 = $and36$i1691 ^ $xor54$i1970;
  HEAP32[$arrayidx8$i189>>2] = $xor54$i1701;
  $xor56$i1702 = $and37$i1692 ^ $xor56$i1971;
  HEAP32[$arrayidx9$i190>>2] = $xor56$i1702;
  $xor38$i1644 = $and$i1683 ^ $xor38$i1913;
  HEAP32[$arraydecay1$i76>>2] = $xor38$i1644;
  $xor40$i1645 = $and29$i1684 ^ $xor40$i1914;
  HEAP32[$arrayidx1$i5$i>>2] = $xor40$i1645;
  $xor42$i1646 = $and30$i1685 ^ $xor42$i1915;
  HEAP32[$arrayidx2$i134>>2] = $xor42$i1646;
  $xor44$i1647 = $and31$i1686 ^ $xor44$i1916;
  HEAP32[$arrayidx3$i135>>2] = $xor44$i1647;
  $xor46$i1648 = $and32$i1687 ^ $xor46$i1917;
  HEAP32[$arrayidx4$i136>>2] = $xor46$i1648;
  $xor48$i1649 = $and33$i1688 ^ $xor48$i1918;
  HEAP32[$arrayidx5$i137>>2] = $xor48$i1649;
  $xor50$i1650 = $and34$i1689 ^ $xor50$i1919;
  HEAP32[$arrayidx6$i138>>2] = $xor50$i1650;
  $xor52$i1651 = $and35$i1690 ^ $xor52$i1920;
  HEAP32[$arrayidx7$i139>>2] = $xor52$i1651;
  $xor54$i1652 = $and36$i1691 ^ $xor54$i1921;
  HEAP32[$arrayidx8$i140>>2] = $xor54$i1652;
  $xor56$i1653 = $and37$i1692 ^ $xor56$i1922;
  HEAP32[$arrayidx9$i141>>2] = $xor56$i1653;
  HEAP32[$arraydecay2$i77>>2] = $xor38$i1864;
  HEAP32[$arrayidx1$i4$i>>2] = $xor40$i1865;
  HEAP32[$arrayidx2$i85>>2] = $xor42$i1866;
  HEAP32[$arrayidx3$i86>>2] = $xor44$i1867;
  HEAP32[$arrayidx4$i87>>2] = $xor46$i1868;
  HEAP32[$arrayidx5$i88>>2] = $xor48$i1869;
  HEAP32[$arrayidx6$i89>>2] = $xor50$i1870;
  HEAP32[$arrayidx7$i90>>2] = $xor52$i1871;
  HEAP32[$arrayidx8$i91>>2] = $xor54$i1872;
  HEAP32[$arrayidx9$i92>>2] = $xor56$i1873;
  $xor$i1525 = $xor38$i1815 ^ $sub$i1712;
  $xor20$i1526 = $xor40$i1816 ^ $sub10$i;
  $xor21$i1527 = $xor42$i1817 ^ $sub11$i;
  $xor22$i1528 = $xor44$i1818 ^ $sub12$i;
  $xor23$i1529 = $xor46$i1819 ^ $sub13$i;
  $xor24$i1530 = $xor48$i1820 ^ $sub14$i;
  $xor25$i1531 = $xor50$i1821 ^ $sub15$i;
  $xor26$i1532 = $xor52$i1822 ^ $sub16$i;
  $xor27$i1533 = $xor54$i1823 ^ $sub17$i;
  $xor28$i1534 = $xor56$i1824 ^ $sub18$i;
  $and$i1536 = $xor$i1525 & $sub41;
  $and29$i1537 = $xor20$i1526 & $sub41;
  $and30$i1538 = $xor21$i1527 & $sub41;
  $and31$i1539 = $xor22$i1528 & $sub41;
  $and32$i1540 = $xor23$i1529 & $sub41;
  $and33$i1541 = $xor24$i1530 & $sub41;
  $and34$i1542 = $xor25$i1531 & $sub41;
  $and35$i1543 = $xor26$i1532 & $sub41;
  $and36$i1544 = $xor27$i1533 & $sub41;
  $and37$i1545 = $xor28$i1534 & $sub41;
  $xor38$i1546 = $and$i1536 ^ $xor38$i1815;
  HEAP32[$arraydecay11$i>>2] = $xor38$i1546;
  $xor40$i1547 = $and29$i1537 ^ $xor40$i1816;
  HEAP32[$arrayidx1$i>>2] = $xor40$i1547;
  $xor42$i1548 = $and30$i1538 ^ $xor42$i1817;
  HEAP32[$arrayidx2$i>>2] = $xor42$i1548;
  $xor44$i1549 = $and31$i1539 ^ $xor44$i1818;
  HEAP32[$arrayidx3$i>>2] = $xor44$i1549;
  $xor46$i1550 = $and32$i1540 ^ $xor46$i1819;
  HEAP32[$arrayidx4$i>>2] = $xor46$i1550;
  $xor48$i1551 = $and33$i1541 ^ $xor48$i1820;
  HEAP32[$arrayidx5$i>>2] = $xor48$i1551;
  $xor50$i1552 = $and34$i1542 ^ $xor50$i1821;
  HEAP32[$arrayidx6$i>>2] = $xor50$i1552;
  $xor52$i1553 = $and35$i1543 ^ $xor52$i1822;
  HEAP32[$arrayidx7$i>>2] = $xor52$i1553;
  $xor54$i1554 = $and36$i1544 ^ $xor54$i1823;
  HEAP32[$arrayidx8$i>>2] = $xor54$i1554;
  $xor56$i1555 = $and37$i1545 ^ $xor56$i1824;
  HEAP32[$arrayidx9$i>>2] = $xor56$i1555;
  _ge_add($t,$u,$cur);
  _fe_mul($r,$t,$arraydecay3$i);
  _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
  _fe_mul($arraydecay2$i44,$arraydecay7$i,$arraydecay3$i);
  $dec = (($i$22017) + -1)|0;
  $cmp35 = ($i$22017|0)==(0);
  if ($cmp35) {
   break;
  } else {
   $i$22017 = $dec;
  }
 }
 STACKTOP = sp;return;
}
function _ge_double_scalarmult_precomp_vartime($r,$a,$A,$b,$Bi) {
 $r = $r|0;
 $a = $a|0;
 $A = $A|0;
 $b = $b|0;
 $Bi = $Bi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Ai = 0, $arraydecay1$i = 0, $arraydecay15$i = 0, $arraydecay2$i = 0, $arraydecay3$i21 = 0, $arraydecay4$i22 = 0, $arraydecay6$i23 = 0, $arraydecay7$i24 = 0, $arraydecay9$i25 = 0, $arrayidx = 0;
 var $arrayidx1$i$i = 0, $arrayidx1$i3$i = 0, $arrayidx10 = 0, $arrayidx17 = 0, $arrayidx26 = 0, $arrayidx29 = 0, $arrayidx3 = 0, $arrayidx37 = 0, $arrayidx48 = 0, $aslide = 0, $bslide = 0, $cmp = 0, $cmp12 = 0, $cmp20 = 0, $cmp31 = 0, $cmp41 = 0, $cmp7 = 0, $cmp750 = 0, $dec = 0, $dec52 = 0;
 var $div25 = 0, $div47 = 0, $i$052 = 0, $i$151 = 0, $t = 0, $tobool = 0, $tobool5 = 0, $u = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0;
 $aslide = sp + 1536|0;
 $bslide = sp + 1280|0;
 $Ai = sp;
 $t = sp + 1952|0;
 $u = sp + 1792|0;
 _slide($aslide,$a);
 _slide($bslide,$b);
 _ge_dsm_precomp($Ai,$A);
 dest=$r; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay1$i = ((($r)) + 40|0);
 HEAP32[$arraydecay1$i>>2] = 1;
 $arrayidx1$i3$i = ((($r)) + 44|0);
 dest=$arrayidx1$i3$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay2$i = ((($r)) + 80|0);
 HEAP32[$arraydecay2$i>>2] = 1;
 $arrayidx1$i$i = ((($r)) + 84|0);
 dest=$arrayidx1$i$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i$052 = 255;
 while(1) {
  $arrayidx = (($aslide) + ($i$052)|0);
  $0 = HEAP8[$arrayidx>>0]|0;
  $tobool = ($0<<24>>24)==(0);
  if (!($tobool)) {
   break;
  }
  $arrayidx3 = (($bslide) + ($i$052)|0);
  $1 = HEAP8[$arrayidx3>>0]|0;
  $tobool5 = ($1<<24>>24)==(0);
  if (!($tobool5)) {
   break;
  }
  $dec = (($i$052) + -1)|0;
  $cmp = ($i$052|0)==(0);
  if ($cmp) {
   label = 16;
   break;
  } else {
   $i$052 = $dec;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
 $cmp750 = ($i$052|0)>(-1);
 if (!($cmp750)) {
  STACKTOP = sp;return;
 }
 $arraydecay3$i21 = ((($t)) + 120|0);
 $arraydecay4$i22 = ((($u)) + 40|0);
 $arraydecay6$i23 = ((($t)) + 40|0);
 $arraydecay7$i24 = ((($t)) + 80|0);
 $arraydecay9$i25 = ((($u)) + 80|0);
 $arraydecay15$i = ((($u)) + 120|0);
 $i$151 = $i$052;
 while(1) {
  _ge_p2_dbl($t,$r);
  $arrayidx10 = (($aslide) + ($i$151)|0);
  $2 = HEAP8[$arrayidx10>>0]|0;
  $cmp12 = ($2<<24>>24)>(0);
  if ($cmp12) {
   _fe_mul($u,$t,$arraydecay3$i21);
   _fe_mul($arraydecay4$i22,$arraydecay6$i23,$arraydecay7$i24);
   _fe_mul($arraydecay9$i25,$arraydecay7$i24,$arraydecay3$i21);
   _fe_mul($arraydecay15$i,$t,$arraydecay6$i23);
   $3 = ($2&255) >>> 1;
   $4 = $3&255;
   $arrayidx17 = (($Ai) + (($4*160)|0)|0);
   _ge_add($t,$u,$arrayidx17);
  } else {
   $cmp20 = ($2<<24>>24)<(0);
   if ($cmp20) {
    _fe_mul($u,$t,$arraydecay3$i21);
    _fe_mul($arraydecay4$i22,$arraydecay6$i23,$arraydecay7$i24);
    _fe_mul($arraydecay9$i25,$arraydecay7$i24,$arraydecay3$i21);
    _fe_mul($arraydecay15$i,$t,$arraydecay6$i23);
    $5 = (($2<<24>>24) / -2)&-1;
    $div25 = $5 << 24 >> 24;
    $arrayidx26 = (($Ai) + (($div25*160)|0)|0);
    _ge_sub($t,$u,$arrayidx26);
   }
  }
  $arrayidx29 = (($bslide) + ($i$151)|0);
  $6 = HEAP8[$arrayidx29>>0]|0;
  $cmp31 = ($6<<24>>24)>(0);
  if ($cmp31) {
   _fe_mul($u,$t,$arraydecay3$i21);
   _fe_mul($arraydecay4$i22,$arraydecay6$i23,$arraydecay7$i24);
   _fe_mul($arraydecay9$i25,$arraydecay7$i24,$arraydecay3$i21);
   _fe_mul($arraydecay15$i,$t,$arraydecay6$i23);
   $7 = ($6&255) >>> 1;
   $8 = $7&255;
   $arrayidx37 = (($Bi) + (($8*160)|0)|0);
   _ge_add($t,$u,$arrayidx37);
  } else {
   $cmp41 = ($6<<24>>24)<(0);
   if ($cmp41) {
    _fe_mul($u,$t,$arraydecay3$i21);
    _fe_mul($arraydecay4$i22,$arraydecay6$i23,$arraydecay7$i24);
    _fe_mul($arraydecay9$i25,$arraydecay7$i24,$arraydecay3$i21);
    _fe_mul($arraydecay15$i,$t,$arraydecay6$i23);
    $9 = (($6<<24>>24) / -2)&-1;
    $div47 = $9 << 24 >> 24;
    $arrayidx48 = (($Bi) + (($div47*160)|0)|0);
    _ge_sub($t,$u,$arrayidx48);
   }
  }
  _fe_mul($r,$t,$arraydecay3$i21);
  _fe_mul($arraydecay1$i,$arraydecay6$i23,$arraydecay7$i24);
  _fe_mul($arraydecay2$i,$arraydecay7$i24,$arraydecay3$i21);
  $dec52 = (($i$151) + -1)|0;
  $cmp7 = ($i$151|0)>(0);
  if ($cmp7) {
   $i$151 = $dec52;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _ge_check_subgroup_precomp_vartime($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add$ptr = 0, $add$ptr1 = 0, $add$ptr10 = 0, $add$ptr2 = 0, $add$ptr3 = 0, $add$ptr4 = 0, $add$ptr7 = 0;
 var $arraydecay1$i = 0, $arraydecay15$i = 0, $arraydecay2$i = 0, $arraydecay3$i = 0, $arraydecay4$i28 = 0, $arraydecay6$i = 0, $arraydecay7$i = 0, $arraydecay9$i31 = 0, $arrayidx1$i = 0, $arrayidx1$i$i = 0, $arrayidx1$i1937 = 0, $arrayidx1$i4$i = 0, $arrayidx11$i = 0, $arrayidx12$i = 0, $arrayidx12$i1941 = 0, $arrayidx13$i = 0, $arrayidx14$i = 0, $arrayidx15$i = 0, $arrayidx15$i1942 = 0, $arrayidx16$i = 0;
 var $arrayidx17$i = 0, $arrayidx18$i = 0, $arrayidx18$i1943 = 0, $arrayidx19$i = 0, $arrayidx2$i = 0, $arrayidx21$i = 0, $arrayidx24$i = 0, $arrayidx27$i = 0, $arrayidx3$i = 0, $arrayidx3$i1938 = 0, $arrayidx30$i = 0, $arrayidx33$i = 0, $arrayidx36$i = 0, $arrayidx39$i = 0, $arrayidx4$i = 0, $arrayidx42$i = 0, $arrayidx45$i = 0, $arrayidx48$i = 0, $arrayidx5$i = 0, $arrayidx51$i = 0;
 var $arrayidx54$i = 0, $arrayidx57$i = 0, $arrayidx6$i = 0, $arrayidx6$i1939 = 0, $arrayidx60$i = 0, $arrayidx63$i = 0, $arrayidx66$i = 0, $arrayidx69$i = 0, $arrayidx7$i = 0, $arrayidx72$i = 0, $arrayidx75$i = 0, $arrayidx78$i = 0, $arrayidx8$i = 0, $arrayidx81$i = 0, $arrayidx84$i = 0, $arrayidx87$i = 0, $arrayidx9$i = 0, $arrayidx9$i1940 = 0, $arrayidx90$i = 0, $or1$i = 0;
 var $or115$i = 0, $or146$i = 0, $or177$i = 0, $or208$i = 0, $or239$i = 0, $or2610$i = 0, $or2911$i = 0, $or3212$i = 0, $or3513$i = 0, $or3814$i = 0, $or4115$i = 0, $or4416$i = 0, $or4717$i = 0, $or5018$i = 0, $or52$i = 0, $or5319$i = 0, $or5620$i = 0, $or5921$i = 0, $or6222$i = 0, $or6523$i = 0;
 var $or6824$i = 0, $or7125$i = 0, $or7426$i = 0, $or7727$i = 0, $or8028$i = 0, $or8329$i = 0, $or84$i = 0, $or8630$i = 0, $or8931$i = 0, $or92$i = 0, $or9232$i = 0, $s = 0, $s$i = 0, $shr$i = 0, $sub$i = 0, $sub$i1944 = 0, $sub20$i = 0, $sub21$i = 0, $sub22$i = 0, $sub23$i = 0;
 var $sub24$i = 0, $sub25$i = 0, $sub26$i = 0, $sub27$i = 0, $sub28$i = 0, $t = 0, $u = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $s$i = sp;
 $s = sp + 312|0;
 $t = sp + 152|0;
 $u = sp + 32|0;
 dest=$s; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay1$i = ((($s)) + 40|0);
 HEAP32[$arraydecay1$i>>2] = 1;
 $arrayidx1$i4$i = ((($s)) + 44|0);
 dest=$arrayidx1$i4$i; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $arraydecay2$i = ((($s)) + 80|0);
 HEAP32[$arraydecay2$i>>2] = 1;
 $arrayidx1$i$i = ((($s)) + 84|0);
 dest=$arrayidx1$i$i; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $add$ptr = ((($p)) + 1120|0);
 _ge_add($t,$s,$add$ptr);
 $arraydecay3$i = ((($t)) + 120|0);
 _fe_mul($s,$t,$arraydecay3$i);
 $arraydecay6$i = ((($t)) + 40|0);
 $arraydecay7$i = ((($t)) + 80|0);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 $arraydecay15$i = ((($s)) + 120|0);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$p);
 _fe_mul($u,$t,$arraydecay3$i);
 $arraydecay4$i28 = ((($u)) + 40|0);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 $arraydecay9$i31 = ((($u)) + 80|0);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $add$ptr1 = ((($p)) + 320|0);
 _ge_add($t,$s,$add$ptr1);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $add$ptr2 = ((($p)) + 480|0);
 _ge_add($t,$s,$add$ptr2);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$p);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $add$ptr3 = ((($p)) + 160|0);
 _ge_sub($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$p);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $add$ptr4 = ((($p)) + 800|0);
 _ge_sub($t,$s,$add$ptr4);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$p);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $add$ptr7 = ((($p)) + 960|0);
 _ge_sub($t,$s,$add$ptr7);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr4);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr4);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 $add$ptr10 = ((($p)) + 640|0);
 _ge_add($t,$s,$add$ptr10);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr7);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$add$ptr3);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$add$ptr1);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$add$ptr4);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_sub($t,$s,$add$ptr1);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($u,$t,$arraydecay3$i);
 _fe_mul($arraydecay4$i28,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i31,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($t,$u);
 _fe_mul($s,$t,$arraydecay3$i);
 _fe_mul($arraydecay1$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay2$i,$arraydecay7$i,$arraydecay3$i);
 _fe_mul($arraydecay15$i,$t,$arraydecay6$i);
 _ge_add($t,$s,$p);
 $0 = HEAP32[$arraydecay6$i>>2]|0;
 $arrayidx1$i1937 = ((($t)) + 44|0);
 $1 = HEAP32[$arrayidx1$i1937>>2]|0;
 $arrayidx2$i = ((($t)) + 48|0);
 $2 = HEAP32[$arrayidx2$i>>2]|0;
 $arrayidx3$i1938 = ((($t)) + 52|0);
 $3 = HEAP32[$arrayidx3$i1938>>2]|0;
 $arrayidx4$i = ((($t)) + 56|0);
 $4 = HEAP32[$arrayidx4$i>>2]|0;
 $arrayidx5$i = ((($t)) + 60|0);
 $5 = HEAP32[$arrayidx5$i>>2]|0;
 $arrayidx6$i1939 = ((($t)) + 64|0);
 $6 = HEAP32[$arrayidx6$i1939>>2]|0;
 $arrayidx7$i = ((($t)) + 68|0);
 $7 = HEAP32[$arrayidx7$i>>2]|0;
 $arrayidx8$i = ((($t)) + 72|0);
 $8 = HEAP32[$arrayidx8$i>>2]|0;
 $arrayidx9$i1940 = ((($t)) + 76|0);
 $9 = HEAP32[$arrayidx9$i1940>>2]|0;
 $10 = HEAP32[$arraydecay3$i>>2]|0;
 $arrayidx11$i = ((($t)) + 124|0);
 $11 = HEAP32[$arrayidx11$i>>2]|0;
 $arrayidx12$i1941 = ((($t)) + 128|0);
 $12 = HEAP32[$arrayidx12$i1941>>2]|0;
 $arrayidx13$i = ((($t)) + 132|0);
 $13 = HEAP32[$arrayidx13$i>>2]|0;
 $arrayidx14$i = ((($t)) + 136|0);
 $14 = HEAP32[$arrayidx14$i>>2]|0;
 $arrayidx15$i1942 = ((($t)) + 140|0);
 $15 = HEAP32[$arrayidx15$i1942>>2]|0;
 $arrayidx16$i = ((($t)) + 144|0);
 $16 = HEAP32[$arrayidx16$i>>2]|0;
 $arrayidx17$i = ((($t)) + 148|0);
 $17 = HEAP32[$arrayidx17$i>>2]|0;
 $arrayidx18$i1943 = ((($t)) + 152|0);
 $18 = HEAP32[$arrayidx18$i1943>>2]|0;
 $arrayidx19$i = ((($t)) + 156|0);
 $19 = HEAP32[$arrayidx19$i>>2]|0;
 $sub$i1944 = (($0) - ($10))|0;
 $sub20$i = (($1) - ($11))|0;
 $sub21$i = (($2) - ($12))|0;
 $sub22$i = (($3) - ($13))|0;
 $sub23$i = (($4) - ($14))|0;
 $sub24$i = (($5) - ($15))|0;
 $sub25$i = (($6) - ($16))|0;
 $sub26$i = (($7) - ($17))|0;
 $sub27$i = (($8) - ($18))|0;
 $sub28$i = (($9) - ($19))|0;
 HEAP32[$arraydecay6$i>>2] = $sub$i1944;
 HEAP32[$arrayidx1$i1937>>2] = $sub20$i;
 HEAP32[$arrayidx2$i>>2] = $sub21$i;
 HEAP32[$arrayidx3$i1938>>2] = $sub22$i;
 HEAP32[$arrayidx4$i>>2] = $sub23$i;
 HEAP32[$arrayidx5$i>>2] = $sub24$i;
 HEAP32[$arrayidx6$i1939>>2] = $sub25$i;
 HEAP32[$arrayidx7$i>>2] = $sub26$i;
 HEAP32[$arrayidx8$i>>2] = $sub27$i;
 HEAP32[$arrayidx9$i1940>>2] = $sub28$i;
 _fe_tobytes($s$i,$arraydecay6$i);
 $20 = HEAP8[$s$i>>0]|0;
 $arrayidx1$i = ((($s$i)) + 1|0);
 $21 = HEAP8[$arrayidx1$i>>0]|0;
 $or1$i = $21 | $20;
 $arrayidx3$i = ((($s$i)) + 2|0);
 $22 = HEAP8[$arrayidx3$i>>0]|0;
 $or52$i = $or1$i | $22;
 $arrayidx6$i = ((($s$i)) + 3|0);
 $23 = HEAP8[$arrayidx6$i>>0]|0;
 $or84$i = $or52$i | $23;
 $arrayidx9$i = ((($s$i)) + 4|0);
 $24 = HEAP8[$arrayidx9$i>>0]|0;
 $or115$i = $or84$i | $24;
 $arrayidx12$i = ((($s$i)) + 5|0);
 $25 = HEAP8[$arrayidx12$i>>0]|0;
 $or146$i = $or115$i | $25;
 $arrayidx15$i = ((($s$i)) + 6|0);
 $26 = HEAP8[$arrayidx15$i>>0]|0;
 $or177$i = $or146$i | $26;
 $arrayidx18$i = ((($s$i)) + 7|0);
 $27 = HEAP8[$arrayidx18$i>>0]|0;
 $or208$i = $or177$i | $27;
 $arrayidx21$i = ((($s$i)) + 8|0);
 $28 = HEAP8[$arrayidx21$i>>0]|0;
 $or239$i = $or208$i | $28;
 $arrayidx24$i = ((($s$i)) + 9|0);
 $29 = HEAP8[$arrayidx24$i>>0]|0;
 $or2610$i = $or239$i | $29;
 $arrayidx27$i = ((($s$i)) + 10|0);
 $30 = HEAP8[$arrayidx27$i>>0]|0;
 $or2911$i = $or2610$i | $30;
 $arrayidx30$i = ((($s$i)) + 11|0);
 $31 = HEAP8[$arrayidx30$i>>0]|0;
 $or3212$i = $or2911$i | $31;
 $arrayidx33$i = ((($s$i)) + 12|0);
 $32 = HEAP8[$arrayidx33$i>>0]|0;
 $or3513$i = $or3212$i | $32;
 $arrayidx36$i = ((($s$i)) + 13|0);
 $33 = HEAP8[$arrayidx36$i>>0]|0;
 $or3814$i = $or3513$i | $33;
 $arrayidx39$i = ((($s$i)) + 14|0);
 $34 = HEAP8[$arrayidx39$i>>0]|0;
 $or4115$i = $or3814$i | $34;
 $arrayidx42$i = ((($s$i)) + 15|0);
 $35 = HEAP8[$arrayidx42$i>>0]|0;
 $or4416$i = $or4115$i | $35;
 $arrayidx45$i = ((($s$i)) + 16|0);
 $36 = HEAP8[$arrayidx45$i>>0]|0;
 $or4717$i = $or4416$i | $36;
 $arrayidx48$i = ((($s$i)) + 17|0);
 $37 = HEAP8[$arrayidx48$i>>0]|0;
 $or5018$i = $or4717$i | $37;
 $arrayidx51$i = ((($s$i)) + 18|0);
 $38 = HEAP8[$arrayidx51$i>>0]|0;
 $or5319$i = $or5018$i | $38;
 $arrayidx54$i = ((($s$i)) + 19|0);
 $39 = HEAP8[$arrayidx54$i>>0]|0;
 $or5620$i = $or5319$i | $39;
 $arrayidx57$i = ((($s$i)) + 20|0);
 $40 = HEAP8[$arrayidx57$i>>0]|0;
 $or5921$i = $or5620$i | $40;
 $arrayidx60$i = ((($s$i)) + 21|0);
 $41 = HEAP8[$arrayidx60$i>>0]|0;
 $or6222$i = $or5921$i | $41;
 $arrayidx63$i = ((($s$i)) + 22|0);
 $42 = HEAP8[$arrayidx63$i>>0]|0;
 $or6523$i = $or6222$i | $42;
 $arrayidx66$i = ((($s$i)) + 23|0);
 $43 = HEAP8[$arrayidx66$i>>0]|0;
 $or6824$i = $or6523$i | $43;
 $arrayidx69$i = ((($s$i)) + 24|0);
 $44 = HEAP8[$arrayidx69$i>>0]|0;
 $or7125$i = $or6824$i | $44;
 $arrayidx72$i = ((($s$i)) + 25|0);
 $45 = HEAP8[$arrayidx72$i>>0]|0;
 $or7426$i = $or7125$i | $45;
 $arrayidx75$i = ((($s$i)) + 26|0);
 $46 = HEAP8[$arrayidx75$i>>0]|0;
 $or7727$i = $or7426$i | $46;
 $arrayidx78$i = ((($s$i)) + 27|0);
 $47 = HEAP8[$arrayidx78$i>>0]|0;
 $or8028$i = $or7727$i | $47;
 $arrayidx81$i = ((($s$i)) + 28|0);
 $48 = HEAP8[$arrayidx81$i>>0]|0;
 $or8329$i = $or8028$i | $48;
 $arrayidx84$i = ((($s$i)) + 29|0);
 $49 = HEAP8[$arrayidx84$i>>0]|0;
 $or8630$i = $or8329$i | $49;
 $arrayidx87$i = ((($s$i)) + 30|0);
 $50 = HEAP8[$arrayidx87$i>>0]|0;
 $or8931$i = $or8630$i | $50;
 $arrayidx90$i = ((($s$i)) + 31|0);
 $51 = HEAP8[$arrayidx90$i>>0]|0;
 $or9232$i = $or8931$i | $51;
 $or92$i = $or9232$i&255;
 $sub$i = (($or92$i) + -1)|0;
 $shr$i = $sub$i >> 8;
 $add$i = (($shr$i) + 1)|0;
 STACKTOP = sp;return ($add$i|0);
}
function _ge_mul8($r,$t) {
 $r = $r|0;
 $t = $t|0;
 var $arraydecay3$i = 0, $arraydecay4$i = 0, $arraydecay6$i = 0, $arraydecay7$i = 0, $arraydecay9$i = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $u = sp;
 _ge_p2_dbl($r,$t);
 $arraydecay3$i = ((($r)) + 120|0);
 _fe_mul($u,$r,$arraydecay3$i);
 $arraydecay4$i = ((($u)) + 40|0);
 $arraydecay6$i = ((($r)) + 40|0);
 $arraydecay7$i = ((($r)) + 80|0);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 $arraydecay9$i = ((($u)) + 80|0);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($r,$u);
 _fe_mul($u,$r,$arraydecay3$i);
 _fe_mul($arraydecay4$i,$arraydecay6$i,$arraydecay7$i);
 _fe_mul($arraydecay9$i,$arraydecay7$i,$arraydecay3$i);
 _ge_p2_dbl($r,$u);
 STACKTOP = sp;return;
}
function _ge_fromfe_frombytes_vartime($r,$s) {
 $r = $r|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$i = 0, $add$i343 = 0, $add$i380 = 0, $add$i484 = 0, $add$ptr = 0, $add$ptr$idx = 0, $add$ptr$idx$val = 0, $add$ptr$idx94 = 0, $add$ptr$idx94$val = 0, $add$ptr$val = 0, $add$ptr11 = 0, $add$ptr13 = 0, $add$ptr13$idx = 0, $add$ptr13$idx$val = 0, $add$ptr13$idx90 = 0, $add$ptr13$idx90$val = 0;
 var $add$ptr13$val = 0, $add$ptr16 = 0, $add$ptr16$idx = 0, $add$ptr16$idx$val = 0, $add$ptr16$idx89 = 0, $add$ptr16$idx89$val = 0, $add$ptr16$val = 0, $add$ptr19 = 0, $add$ptr19$idx = 0, $add$ptr19$idx$val = 0, $add$ptr19$idx88 = 0, $add$ptr19$idx88$val = 0, $add$ptr19$val = 0, $add$ptr2 = 0, $add$ptr2$idx = 0, $add$ptr2$idx$val = 0, $add$ptr2$idx93 = 0, $add$ptr2$idx93$val = 0, $add$ptr2$val = 0, $add$ptr22 = 0;
 var $add$ptr22$idx = 0, $add$ptr22$idx$val = 0, $add$ptr22$idx87 = 0, $add$ptr22$idx87$val = 0, $add$ptr22$val = 0, $add$ptr5 = 0, $add$ptr5$idx = 0, $add$ptr5$idx$val = 0, $add$ptr5$idx92 = 0, $add$ptr5$idx92$val = 0, $add$ptr5$val = 0, $add$ptr8 = 0, $add$ptr8$idx = 0, $add$ptr8$idx$val = 0, $add$ptr8$idx91 = 0, $add$ptr8$idx91$val = 0, $add$ptr8$val = 0, $add20$i = 0, $add20$i381 = 0, $add20$i485 = 0;
 var $add21$i = 0, $add21$i382 = 0, $add21$i486 = 0, $add22$i = 0, $add22$i383 = 0, $add22$i487 = 0, $add23$i = 0, $add23$i384 = 0, $add23$i488 = 0, $add24$i = 0, $add24$i385 = 0, $add24$i489 = 0, $add25$i = 0, $add25$i386 = 0, $add25$i490 = 0, $add26$i = 0, $add26$i387 = 0, $add26$i491 = 0, $add27$i = 0, $add27$i388 = 0;
 var $add27$i492 = 0, $add28$i = 0, $add28$i389 = 0, $add28$i493 = 0, $and$i = 0, $arraydecay172 = 0, $arraydecay175 = 0, $arrayidx1$i = 0, $arrayidx1$i132 = 0, $arrayidx1$i180 = 0, $arrayidx1$i257 = 0, $arrayidx1$i325 = 0, $arrayidx1$i400 = 0, $arrayidx1$i466 = 0, $arrayidx11$i475 = 0, $arrayidx11$i503 = 0, $arrayidx12$i335 = 0, $arrayidx12$i408 = 0, $arrayidx12$i476 = 0, $arrayidx12$i504 = 0;
 var $arrayidx13$i336 = 0, $arrayidx13$i477 = 0, $arrayidx13$i505 = 0, $arrayidx14$i337 = 0, $arrayidx14$i478 = 0, $arrayidx14$i506 = 0, $arrayidx15$i338 = 0, $arrayidx15$i410 = 0, $arrayidx15$i479 = 0, $arrayidx15$i507 = 0, $arrayidx16$i339 = 0, $arrayidx16$i480 = 0, $arrayidx16$i508 = 0, $arrayidx17$i340 = 0, $arrayidx17$i481 = 0, $arrayidx17$i509 = 0, $arrayidx18$i341 = 0, $arrayidx18$i412 = 0, $arrayidx18$i482 = 0, $arrayidx18$i510 = 0;
 var $arrayidx19$i342 = 0, $arrayidx19$i483 = 0, $arrayidx19$i511 = 0, $arrayidx2$i133 = 0, $arrayidx2$i326 = 0, $arrayidx2$i467 = 0, $arrayidx21$i414 = 0, $arrayidx24$i416 = 0, $arrayidx27$i418 = 0, $arrayidx3$i = 0, $arrayidx3$i134 = 0, $arrayidx3$i184 = 0, $arrayidx3$i327 = 0, $arrayidx3$i402 = 0, $arrayidx3$i468 = 0, $arrayidx30$i = 0, $arrayidx30$i123 = 0, $arrayidx30$i420 = 0, $arrayidx31$i = 0, $arrayidx31$i124 = 0;
 var $arrayidx32$i = 0, $arrayidx32$i125 = 0, $arrayidx33$i = 0, $arrayidx33$i126 = 0, $arrayidx33$i422 = 0, $arrayidx34$i = 0, $arrayidx34$i127 = 0, $arrayidx35$i = 0, $arrayidx35$i128 = 0, $arrayidx36$i = 0, $arrayidx36$i129 = 0, $arrayidx36$i424 = 0, $arrayidx37$i = 0, $arrayidx37$i130 = 0, $arrayidx38$i = 0, $arrayidx38$i131 = 0, $arrayidx39$i426 = 0, $arrayidx4$i135 = 0, $arrayidx4$i328 = 0, $arrayidx4$i469 = 0;
 var $arrayidx42$i428 = 0, $arrayidx45$i430 = 0, $arrayidx48$i432 = 0, $arrayidx5$i136 = 0, $arrayidx5$i329 = 0, $arrayidx5$i470 = 0, $arrayidx51$i434 = 0, $arrayidx54$i436 = 0, $arrayidx57$i438 = 0, $arrayidx6$i137 = 0, $arrayidx6$i330 = 0, $arrayidx6$i404 = 0, $arrayidx6$i471 = 0, $arrayidx60$i440 = 0, $arrayidx63$i442 = 0, $arrayidx66$i444 = 0, $arrayidx69$i446 = 0, $arrayidx7$i = 0, $arrayidx7$i138 = 0, $arrayidx7$i188 = 0;
 var $arrayidx7$i331 = 0, $arrayidx7$i472 = 0, $arrayidx72$i448 = 0, $arrayidx73 = 0, $arrayidx75 = 0, $arrayidx75$i450 = 0, $arrayidx77 = 0, $arrayidx78$i452 = 0, $arrayidx79 = 0, $arrayidx8$i139 = 0, $arrayidx8$i332 = 0, $arrayidx8$i473 = 0, $arrayidx81 = 0, $arrayidx81$i454 = 0, $arrayidx83 = 0, $arrayidx84$i456 = 0, $arrayidx85 = 0, $arrayidx87 = 0, $arrayidx87$i458 = 0, $arrayidx89 = 0;
 var $arrayidx9$i140 = 0, $arrayidx9$i333 = 0, $arrayidx9$i406 = 0, $arrayidx9$i474 = 0, $arrayidx90$i460 = 0, $cmp = 0, $or1$i = 0, $or1$i260 = 0, $or1$i401 = 0, $or115$i = 0, $or115$i266 = 0, $or115$i407 = 0, $or146$i = 0, $or146$i268 = 0, $or146$i409 = 0, $or177$i = 0, $or177$i270 = 0, $or177$i411 = 0, $or208$i = 0, $or208$i272 = 0;
 var $or208$i413 = 0, $or239$i = 0, $or239$i274 = 0, $or239$i415 = 0, $or2610$i = 0, $or2610$i276 = 0, $or2610$i417 = 0, $or2911$i = 0, $or2911$i278 = 0, $or2911$i419 = 0, $or3212$i = 0, $or3212$i280 = 0, $or3212$i421 = 0, $or3513$i = 0, $or3513$i282 = 0, $or3513$i423 = 0, $or3814$i = 0, $or3814$i284 = 0, $or3814$i425 = 0, $or4115$i = 0;
 var $or4115$i286 = 0, $or4115$i427 = 0, $or4416$i = 0, $or4416$i288 = 0, $or4416$i429 = 0, $or4717$i = 0, $or4717$i290 = 0, $or4717$i431 = 0, $or5018$i = 0, $or5018$i292 = 0, $or5018$i433 = 0, $or52$i = 0, $or52$i262 = 0, $or52$i403 = 0, $or5319$i = 0, $or5319$i294 = 0, $or5319$i435 = 0, $or5620$i = 0, $or5620$i296 = 0, $or5620$i437 = 0;
 var $or5921$i = 0, $or5921$i298 = 0, $or5921$i439 = 0, $or6222$i = 0, $or6222$i300 = 0, $or6222$i441 = 0, $or6523$i = 0, $or6523$i302 = 0, $or6523$i443 = 0, $or6824$i = 0, $or6824$i304 = 0, $or6824$i445 = 0, $or7125$i = 0, $or7125$i306 = 0, $or7125$i447 = 0, $or7426$i = 0, $or7426$i308 = 0, $or7426$i449 = 0, $or7727$i = 0, $or7727$i310 = 0;
 var $or7727$i451 = 0, $or8028$i = 0, $or8028$i312 = 0, $or8028$i453 = 0, $or8329$i = 0, $or8329$i314 = 0, $or8329$i455 = 0, $or84$i = 0, $or84$i264 = 0, $or84$i405 = 0, $or8630$i = 0, $or8630$i316 = 0, $or8630$i457 = 0, $or8931$i = 0, $or8931$i318 = 0, $or8931$i459 = 0, $or92$i = 0, $or92$i321 = 0, $or92$i462 = 0, $or9232$i = 0;
 var $or9232$i320 = 0, $or9232$i461 = 0, $s$i = 0, $sign$0 = 0, $sub$i = 0, $sub$i141 = 0, $sub$i177 = 0, $sub$i210 = 0, $sub$i322 = 0, $sub$i463 = 0, $sub$i530 = 0, $sub10$i = 0, $sub11$i = 0, $sub12$i = 0, $sub13$i = 0, $sub14$i = 0, $sub15$i = 0, $sub16$i = 0, $sub17$i = 0, $sub18$i = 0;
 var $sub20$i = 0, $sub20$i211 = 0, $sub20$i531 = 0, $sub21$i = 0, $sub21$i212 = 0, $sub21$i532 = 0, $sub22$i = 0, $sub22$i213 = 0, $sub22$i533 = 0, $sub23$i = 0, $sub23$i214 = 0, $sub23$i534 = 0, $sub24$i = 0, $sub24$i215 = 0, $sub24$i535 = 0, $sub25$i = 0, $sub25$i216 = 0, $sub25$i536 = 0, $sub26$i = 0, $sub26$i217 = 0;
 var $sub26$i537 = 0, $sub27$i = 0, $sub27$i218 = 0, $sub27$i538 = 0, $sub28$i = 0, $sub28$i219 = 0, $sub28$i539 = 0, $tobool = 0, $tobool122 = 0, $tobool149 = 0, $u = 0, $v = 0, $w = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $s$i = sp + 288|0;
 $u = sp + 240|0;
 $v = sp + 192|0;
 $w = sp + 144|0;
 $x = sp + 96|0;
 $y = sp + 48|0;
 $z = sp;
 $0 = HEAP8[$s>>0]|0;
 $1 = $0&255;
 $arrayidx1$i = ((($s)) + 1|0);
 $2 = HEAP8[$arrayidx1$i>>0]|0;
 $3 = $2&255;
 $4 = (_bitshift64Shl(($3|0),0,8)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4 | $1;
 $arrayidx3$i = ((($s)) + 2|0);
 $7 = HEAP8[$arrayidx3$i>>0]|0;
 $8 = $7&255;
 $9 = (_bitshift64Shl(($8|0),0,16)|0);
 $10 = (getTempRet0() | 0);
 $11 = $6 | $9;
 $12 = $5 | $10;
 $arrayidx7$i = ((($s)) + 3|0);
 $13 = HEAP8[$arrayidx7$i>>0]|0;
 $14 = $13&255;
 $15 = (_bitshift64Shl(($14|0),0,24)|0);
 $16 = (getTempRet0() | 0);
 $17 = $11 | $15;
 $18 = $12 | $16;
 $add$ptr = ((($s)) + 4|0);
 $add$ptr$val = HEAP8[$add$ptr>>0]|0;
 $add$ptr$idx = ((($s)) + 5|0);
 $add$ptr$idx$val = HEAP8[$add$ptr$idx>>0]|0;
 $add$ptr$idx94 = ((($s)) + 6|0);
 $add$ptr$idx94$val = HEAP8[$add$ptr$idx94>>0]|0;
 $19 = $add$ptr$val&255;
 $20 = $add$ptr$idx$val&255;
 $21 = (_bitshift64Shl(($20|0),0,8)|0);
 $22 = (getTempRet0() | 0);
 $23 = $21 | $19;
 $24 = $add$ptr$idx94$val&255;
 $25 = (_bitshift64Shl(($24|0),0,16)|0);
 $26 = (getTempRet0() | 0);
 $27 = $23 | $25;
 $28 = $22 | $26;
 $29 = (_bitshift64Shl(($27|0),($28|0),6)|0);
 $30 = (getTempRet0() | 0);
 $add$ptr2 = ((($s)) + 7|0);
 $add$ptr2$val = HEAP8[$add$ptr2>>0]|0;
 $add$ptr2$idx = ((($s)) + 8|0);
 $add$ptr2$idx$val = HEAP8[$add$ptr2$idx>>0]|0;
 $add$ptr2$idx93 = ((($s)) + 9|0);
 $add$ptr2$idx93$val = HEAP8[$add$ptr2$idx93>>0]|0;
 $31 = $add$ptr2$val&255;
 $32 = $add$ptr2$idx$val&255;
 $33 = (_bitshift64Shl(($32|0),0,8)|0);
 $34 = (getTempRet0() | 0);
 $35 = $33 | $31;
 $36 = $add$ptr2$idx93$val&255;
 $37 = (_bitshift64Shl(($36|0),0,16)|0);
 $38 = (getTempRet0() | 0);
 $39 = $35 | $37;
 $40 = $34 | $38;
 $41 = (_bitshift64Shl(($39|0),($40|0),5)|0);
 $42 = (getTempRet0() | 0);
 $add$ptr5 = ((($s)) + 10|0);
 $add$ptr5$val = HEAP8[$add$ptr5>>0]|0;
 $add$ptr5$idx = ((($s)) + 11|0);
 $add$ptr5$idx$val = HEAP8[$add$ptr5$idx>>0]|0;
 $add$ptr5$idx92 = ((($s)) + 12|0);
 $add$ptr5$idx92$val = HEAP8[$add$ptr5$idx92>>0]|0;
 $43 = $add$ptr5$val&255;
 $44 = $add$ptr5$idx$val&255;
 $45 = (_bitshift64Shl(($44|0),0,8)|0);
 $46 = (getTempRet0() | 0);
 $47 = $45 | $43;
 $48 = $add$ptr5$idx92$val&255;
 $49 = (_bitshift64Shl(($48|0),0,16)|0);
 $50 = (getTempRet0() | 0);
 $51 = $47 | $49;
 $52 = $46 | $50;
 $53 = (_bitshift64Shl(($51|0),($52|0),3)|0);
 $54 = (getTempRet0() | 0);
 $add$ptr8 = ((($s)) + 13|0);
 $add$ptr8$val = HEAP8[$add$ptr8>>0]|0;
 $add$ptr8$idx = ((($s)) + 14|0);
 $add$ptr8$idx$val = HEAP8[$add$ptr8$idx>>0]|0;
 $add$ptr8$idx91 = ((($s)) + 15|0);
 $add$ptr8$idx91$val = HEAP8[$add$ptr8$idx91>>0]|0;
 $55 = $add$ptr8$val&255;
 $56 = $add$ptr8$idx$val&255;
 $57 = (_bitshift64Shl(($56|0),0,8)|0);
 $58 = (getTempRet0() | 0);
 $59 = $57 | $55;
 $60 = $add$ptr8$idx91$val&255;
 $61 = (_bitshift64Shl(($60|0),0,16)|0);
 $62 = (getTempRet0() | 0);
 $63 = $59 | $61;
 $64 = $58 | $62;
 $65 = (_bitshift64Shl(($63|0),($64|0),2)|0);
 $66 = (getTempRet0() | 0);
 $add$ptr11 = ((($s)) + 16|0);
 $67 = HEAP8[$add$ptr11>>0]|0;
 $68 = $67&255;
 $arrayidx1$i180 = ((($s)) + 17|0);
 $69 = HEAP8[$arrayidx1$i180>>0]|0;
 $70 = $69&255;
 $71 = (_bitshift64Shl(($70|0),0,8)|0);
 $72 = (getTempRet0() | 0);
 $73 = $71 | $68;
 $arrayidx3$i184 = ((($s)) + 18|0);
 $74 = HEAP8[$arrayidx3$i184>>0]|0;
 $75 = $74&255;
 $76 = (_bitshift64Shl(($75|0),0,16)|0);
 $77 = (getTempRet0() | 0);
 $78 = $73 | $76;
 $79 = $72 | $77;
 $arrayidx7$i188 = ((($s)) + 19|0);
 $80 = HEAP8[$arrayidx7$i188>>0]|0;
 $81 = $80&255;
 $82 = (_bitshift64Shl(($81|0),0,24)|0);
 $83 = (getTempRet0() | 0);
 $84 = $78 | $82;
 $85 = $79 | $83;
 $add$ptr13 = ((($s)) + 20|0);
 $add$ptr13$val = HEAP8[$add$ptr13>>0]|0;
 $add$ptr13$idx = ((($s)) + 21|0);
 $add$ptr13$idx$val = HEAP8[$add$ptr13$idx>>0]|0;
 $add$ptr13$idx90 = ((($s)) + 22|0);
 $add$ptr13$idx90$val = HEAP8[$add$ptr13$idx90>>0]|0;
 $86 = $add$ptr13$val&255;
 $87 = $add$ptr13$idx$val&255;
 $88 = (_bitshift64Shl(($87|0),0,8)|0);
 $89 = (getTempRet0() | 0);
 $90 = $88 | $86;
 $91 = $add$ptr13$idx90$val&255;
 $92 = (_bitshift64Shl(($91|0),0,16)|0);
 $93 = (getTempRet0() | 0);
 $94 = $90 | $92;
 $95 = $89 | $93;
 $96 = (_bitshift64Shl(($94|0),($95|0),7)|0);
 $97 = (getTempRet0() | 0);
 $add$ptr16 = ((($s)) + 23|0);
 $add$ptr16$val = HEAP8[$add$ptr16>>0]|0;
 $add$ptr16$idx = ((($s)) + 24|0);
 $add$ptr16$idx$val = HEAP8[$add$ptr16$idx>>0]|0;
 $add$ptr16$idx89 = ((($s)) + 25|0);
 $add$ptr16$idx89$val = HEAP8[$add$ptr16$idx89>>0]|0;
 $98 = $add$ptr16$val&255;
 $99 = $add$ptr16$idx$val&255;
 $100 = (_bitshift64Shl(($99|0),0,8)|0);
 $101 = (getTempRet0() | 0);
 $102 = $100 | $98;
 $103 = $add$ptr16$idx89$val&255;
 $104 = (_bitshift64Shl(($103|0),0,16)|0);
 $105 = (getTempRet0() | 0);
 $106 = $102 | $104;
 $107 = $101 | $105;
 $108 = (_bitshift64Shl(($106|0),($107|0),5)|0);
 $109 = (getTempRet0() | 0);
 $add$ptr19 = ((($s)) + 26|0);
 $add$ptr19$val = HEAP8[$add$ptr19>>0]|0;
 $add$ptr19$idx = ((($s)) + 27|0);
 $add$ptr19$idx$val = HEAP8[$add$ptr19$idx>>0]|0;
 $add$ptr19$idx88 = ((($s)) + 28|0);
 $add$ptr19$idx88$val = HEAP8[$add$ptr19$idx88>>0]|0;
 $110 = $add$ptr19$val&255;
 $111 = $add$ptr19$idx$val&255;
 $112 = (_bitshift64Shl(($111|0),0,8)|0);
 $113 = (getTempRet0() | 0);
 $114 = $112 | $110;
 $115 = $add$ptr19$idx88$val&255;
 $116 = (_bitshift64Shl(($115|0),0,16)|0);
 $117 = (getTempRet0() | 0);
 $118 = $114 | $116;
 $119 = $113 | $117;
 $120 = (_bitshift64Shl(($118|0),($119|0),4)|0);
 $121 = (getTempRet0() | 0);
 $add$ptr22 = ((($s)) + 29|0);
 $add$ptr22$val = HEAP8[$add$ptr22>>0]|0;
 $add$ptr22$idx = ((($s)) + 30|0);
 $add$ptr22$idx$val = HEAP8[$add$ptr22$idx>>0]|0;
 $add$ptr22$idx87 = ((($s)) + 31|0);
 $add$ptr22$idx87$val = HEAP8[$add$ptr22$idx87>>0]|0;
 $122 = $add$ptr22$val&255;
 $123 = $add$ptr22$idx$val&255;
 $124 = (_bitshift64Shl(($123|0),0,8)|0);
 $125 = (getTempRet0() | 0);
 $126 = $124 | $122;
 $127 = $add$ptr22$idx87$val&255;
 $128 = (_bitshift64Shl(($127|0),0,16)|0);
 $129 = (getTempRet0() | 0);
 $130 = $126 | $128;
 $131 = $125 | $129;
 $132 = (_bitshift64Shl(($130|0),($131|0),2)|0);
 $133 = (getTempRet0() | 0);
 $134 = (_i64Add(($132|0),($133|0),16777216,0)|0);
 $135 = (getTempRet0() | 0);
 $136 = (_bitshift64Lshr(($134|0),($135|0),25)|0);
 $137 = (getTempRet0() | 0);
 $138 = (___muldi3(($136|0),($137|0),19,0)|0);
 $139 = (getTempRet0() | 0);
 $140 = (_i64Add(($138|0),($139|0),($17|0),($18|0))|0);
 $141 = (getTempRet0() | 0);
 $142 = $134 & -33554432;
 $143 = (_i64Add(($29|0),($30|0),16777216,0)|0);
 $144 = (getTempRet0() | 0);
 $145 = (_bitshift64Lshr(($143|0),($144|0),25)|0);
 $146 = (getTempRet0() | 0);
 $147 = (_i64Add(($41|0),($42|0),($145|0),($146|0))|0);
 $148 = (getTempRet0() | 0);
 $149 = $143 & -33554432;
 $150 = (_i64Subtract(($29|0),($30|0),($149|0),0)|0);
 $151 = (getTempRet0() | 0);
 $152 = (_i64Add(($53|0),($54|0),16777216,0)|0);
 $153 = (getTempRet0() | 0);
 $154 = (_bitshift64Lshr(($152|0),($153|0),25)|0);
 $155 = (getTempRet0() | 0);
 $156 = (_i64Add(($65|0),($66|0),($154|0),($155|0))|0);
 $157 = (getTempRet0() | 0);
 $158 = $152 & -33554432;
 $159 = (_i64Add(($84|0),($85|0),16777216,0)|0);
 $160 = (getTempRet0() | 0);
 $161 = (_bitshift64Lshr(($159|0),($160|0),25)|0);
 $162 = (getTempRet0() | 0);
 $163 = (_i64Add(($96|0),($97|0),($161|0),($162|0))|0);
 $164 = (getTempRet0() | 0);
 $165 = $159 & -33554432;
 $166 = (_i64Add(($108|0),($109|0),16777216,0)|0);
 $167 = (getTempRet0() | 0);
 $168 = (_bitshift64Lshr(($166|0),($167|0),25)|0);
 $169 = (getTempRet0() | 0);
 $170 = (_i64Add(($120|0),($121|0),($168|0),($169|0))|0);
 $171 = (getTempRet0() | 0);
 $172 = $166 & -33554432;
 $173 = (_i64Add(($140|0),($141|0),33554432,0)|0);
 $174 = (getTempRet0() | 0);
 $175 = (_bitshift64Lshr(($173|0),($174|0),26)|0);
 $176 = (getTempRet0() | 0);
 $177 = (_i64Add(($150|0),($151|0),($175|0),($176|0))|0);
 $178 = (getTempRet0() | 0);
 $179 = $173 & -67108864;
 $180 = (_i64Subtract(($140|0),($141|0),($179|0),0)|0);
 $181 = (getTempRet0() | 0);
 $182 = (_i64Add(($147|0),($148|0),33554432,0)|0);
 $183 = (getTempRet0() | 0);
 $184 = (_bitshift64Lshr(($182|0),($183|0),26)|0);
 $185 = (getTempRet0() | 0);
 $186 = (_i64Add(($184|0),($185|0),($53|0),($54|0))|0);
 $187 = (getTempRet0() | 0);
 $188 = (_i64Subtract(($186|0),($187|0),($158|0),0)|0);
 $189 = (getTempRet0() | 0);
 $190 = $182 & -67108864;
 $191 = (_i64Subtract(($147|0),($148|0),($190|0),0)|0);
 $192 = (getTempRet0() | 0);
 $193 = (_i64Add(($156|0),($157|0),33554432,0)|0);
 $194 = (getTempRet0() | 0);
 $195 = (_bitshift64Lshr(($193|0),($194|0),26)|0);
 $196 = (getTempRet0() | 0);
 $197 = (_i64Add(($195|0),($196|0),($84|0),($85|0))|0);
 $198 = (getTempRet0() | 0);
 $199 = (_i64Subtract(($197|0),($198|0),($165|0),0)|0);
 $200 = (getTempRet0() | 0);
 $201 = $193 & -67108864;
 $202 = (_i64Subtract(($156|0),($157|0),($201|0),0)|0);
 $203 = (getTempRet0() | 0);
 $204 = (_i64Add(($163|0),($164|0),33554432,0)|0);
 $205 = (getTempRet0() | 0);
 $206 = (_bitshift64Lshr(($204|0),($205|0),26)|0);
 $207 = (getTempRet0() | 0);
 $208 = (_i64Add(($206|0),($207|0),($108|0),($109|0))|0);
 $209 = (getTempRet0() | 0);
 $210 = (_i64Subtract(($208|0),($209|0),($172|0),0)|0);
 $211 = (getTempRet0() | 0);
 $212 = $204 & -67108864;
 $213 = (_i64Subtract(($163|0),($164|0),($212|0),0)|0);
 $214 = (getTempRet0() | 0);
 $215 = (_i64Add(($170|0),($171|0),33554432,0)|0);
 $216 = (getTempRet0() | 0);
 $217 = (_bitshift64Lshr(($215|0),($216|0),26)|0);
 $218 = (getTempRet0() | 0);
 $219 = (_i64Add(($217|0),($218|0),($132|0),($133|0))|0);
 $220 = (getTempRet0() | 0);
 $221 = (_i64Subtract(($219|0),($220|0),($142|0),0)|0);
 $222 = (getTempRet0() | 0);
 $223 = $215 & -67108864;
 $224 = (_i64Subtract(($170|0),($171|0),($223|0),0)|0);
 $225 = (getTempRet0() | 0);
 HEAP32[$u>>2] = $180;
 $arrayidx73 = ((($u)) + 4|0);
 HEAP32[$arrayidx73>>2] = $177;
 $arrayidx75 = ((($u)) + 8|0);
 HEAP32[$arrayidx75>>2] = $191;
 $arrayidx77 = ((($u)) + 12|0);
 HEAP32[$arrayidx77>>2] = $188;
 $arrayidx79 = ((($u)) + 16|0);
 HEAP32[$arrayidx79>>2] = $202;
 $arrayidx81 = ((($u)) + 20|0);
 HEAP32[$arrayidx81>>2] = $199;
 $arrayidx83 = ((($u)) + 24|0);
 HEAP32[$arrayidx83>>2] = $213;
 $arrayidx85 = ((($u)) + 28|0);
 HEAP32[$arrayidx85>>2] = $210;
 $arrayidx87 = ((($u)) + 32|0);
 HEAP32[$arrayidx87>>2] = $224;
 $arrayidx89 = ((($u)) + 36|0);
 HEAP32[$arrayidx89>>2] = $221;
 _fe_sq2($v,$u);
 $arrayidx1$i257 = ((($w)) + 4|0);
 $226 = HEAP32[$v>>2]|0;
 $arrayidx1$i325 = ((($v)) + 4|0);
 $227 = HEAP32[$arrayidx1$i325>>2]|0;
 $arrayidx2$i326 = ((($v)) + 8|0);
 $228 = HEAP32[$arrayidx2$i326>>2]|0;
 $arrayidx3$i327 = ((($v)) + 12|0);
 $229 = HEAP32[$arrayidx3$i327>>2]|0;
 $arrayidx4$i328 = ((($v)) + 16|0);
 $230 = HEAP32[$arrayidx4$i328>>2]|0;
 $arrayidx5$i329 = ((($v)) + 20|0);
 $231 = HEAP32[$arrayidx5$i329>>2]|0;
 $arrayidx6$i330 = ((($v)) + 24|0);
 $232 = HEAP32[$arrayidx6$i330>>2]|0;
 $arrayidx7$i331 = ((($v)) + 28|0);
 $233 = HEAP32[$arrayidx7$i331>>2]|0;
 $arrayidx8$i332 = ((($v)) + 32|0);
 $234 = HEAP32[$arrayidx8$i332>>2]|0;
 $arrayidx9$i333 = ((($v)) + 36|0);
 $235 = HEAP32[$arrayidx9$i333>>2]|0;
 $arrayidx12$i335 = ((($w)) + 8|0);
 $arrayidx13$i336 = ((($w)) + 12|0);
 $arrayidx14$i337 = ((($w)) + 16|0);
 $arrayidx15$i338 = ((($w)) + 20|0);
 $arrayidx16$i339 = ((($w)) + 24|0);
 $arrayidx17$i340 = ((($w)) + 28|0);
 $arrayidx18$i341 = ((($w)) + 32|0);
 $arrayidx19$i342 = ((($w)) + 36|0);
 $add$i343 = (($226) + 1)|0;
 HEAP32[$w>>2] = $add$i343;
 HEAP32[$arrayidx1$i257>>2] = $227;
 HEAP32[$arrayidx12$i335>>2] = $228;
 HEAP32[$arrayidx13$i336>>2] = $229;
 HEAP32[$arrayidx14$i337>>2] = $230;
 HEAP32[$arrayidx15$i338>>2] = $231;
 HEAP32[$arrayidx16$i339>>2] = $232;
 HEAP32[$arrayidx17$i340>>2] = $233;
 HEAP32[$arrayidx18$i341>>2] = $234;
 HEAP32[$arrayidx19$i342>>2] = $235;
 _fe_sq($x,$w);
 _fe_mul($y,32000,$v);
 $236 = HEAP32[$x>>2]|0;
 $arrayidx1$i466 = ((($x)) + 4|0);
 $237 = HEAP32[$arrayidx1$i466>>2]|0;
 $arrayidx2$i467 = ((($x)) + 8|0);
 $238 = HEAP32[$arrayidx2$i467>>2]|0;
 $arrayidx3$i468 = ((($x)) + 12|0);
 $239 = HEAP32[$arrayidx3$i468>>2]|0;
 $arrayidx4$i469 = ((($x)) + 16|0);
 $240 = HEAP32[$arrayidx4$i469>>2]|0;
 $arrayidx5$i470 = ((($x)) + 20|0);
 $241 = HEAP32[$arrayidx5$i470>>2]|0;
 $arrayidx6$i471 = ((($x)) + 24|0);
 $242 = HEAP32[$arrayidx6$i471>>2]|0;
 $arrayidx7$i472 = ((($x)) + 28|0);
 $243 = HEAP32[$arrayidx7$i472>>2]|0;
 $arrayidx8$i473 = ((($x)) + 32|0);
 $244 = HEAP32[$arrayidx8$i473>>2]|0;
 $arrayidx9$i474 = ((($x)) + 36|0);
 $245 = HEAP32[$arrayidx9$i474>>2]|0;
 $246 = HEAP32[$y>>2]|0;
 $arrayidx11$i475 = ((($y)) + 4|0);
 $247 = HEAP32[$arrayidx11$i475>>2]|0;
 $arrayidx12$i476 = ((($y)) + 8|0);
 $248 = HEAP32[$arrayidx12$i476>>2]|0;
 $arrayidx13$i477 = ((($y)) + 12|0);
 $249 = HEAP32[$arrayidx13$i477>>2]|0;
 $arrayidx14$i478 = ((($y)) + 16|0);
 $250 = HEAP32[$arrayidx14$i478>>2]|0;
 $arrayidx15$i479 = ((($y)) + 20|0);
 $251 = HEAP32[$arrayidx15$i479>>2]|0;
 $arrayidx16$i480 = ((($y)) + 24|0);
 $252 = HEAP32[$arrayidx16$i480>>2]|0;
 $arrayidx17$i481 = ((($y)) + 28|0);
 $253 = HEAP32[$arrayidx17$i481>>2]|0;
 $arrayidx18$i482 = ((($y)) + 32|0);
 $254 = HEAP32[$arrayidx18$i482>>2]|0;
 $arrayidx19$i483 = ((($y)) + 36|0);
 $255 = HEAP32[$arrayidx19$i483>>2]|0;
 $add$i484 = (($246) + ($236))|0;
 $add20$i485 = (($247) + ($237))|0;
 $add21$i486 = (($248) + ($238))|0;
 $add22$i487 = (($249) + ($239))|0;
 $add23$i488 = (($250) + ($240))|0;
 $add24$i489 = (($251) + ($241))|0;
 $add25$i490 = (($252) + ($242))|0;
 $add26$i491 = (($253) + ($243))|0;
 $add27$i492 = (($254) + ($244))|0;
 $add28$i493 = (($255) + ($245))|0;
 HEAP32[$x>>2] = $add$i484;
 HEAP32[$arrayidx1$i466>>2] = $add20$i485;
 HEAP32[$arrayidx2$i467>>2] = $add21$i486;
 HEAP32[$arrayidx3$i468>>2] = $add22$i487;
 HEAP32[$arrayidx4$i469>>2] = $add23$i488;
 HEAP32[$arrayidx5$i470>>2] = $add24$i489;
 HEAP32[$arrayidx6$i471>>2] = $add25$i490;
 HEAP32[$arrayidx7$i472>>2] = $add26$i491;
 HEAP32[$arrayidx8$i473>>2] = $add27$i492;
 HEAP32[$arrayidx9$i474>>2] = $add28$i493;
 _fe_divpowm1($r,$w,$x);
 _fe_sq($y,$r);
 _fe_mul($x,$y,$x);
 $256 = HEAP32[$x>>2]|0;
 $257 = HEAP32[$arrayidx1$i466>>2]|0;
 $258 = HEAP32[$arrayidx2$i467>>2]|0;
 $259 = HEAP32[$arrayidx3$i468>>2]|0;
 $260 = HEAP32[$arrayidx4$i469>>2]|0;
 $261 = HEAP32[$arrayidx5$i470>>2]|0;
 $262 = HEAP32[$arrayidx6$i471>>2]|0;
 $263 = HEAP32[$arrayidx7$i472>>2]|0;
 $264 = HEAP32[$arrayidx8$i473>>2]|0;
 $265 = HEAP32[$arrayidx9$i474>>2]|0;
 $sub$i530 = (($add$i343) - ($256))|0;
 $sub20$i531 = (($227) - ($257))|0;
 $sub21$i532 = (($228) - ($258))|0;
 $sub22$i533 = (($229) - ($259))|0;
 $sub23$i534 = (($230) - ($260))|0;
 $sub24$i535 = (($231) - ($261))|0;
 $sub25$i536 = (($232) - ($262))|0;
 $sub26$i537 = (($233) - ($263))|0;
 $sub27$i538 = (($234) - ($264))|0;
 $sub28$i539 = (($235) - ($265))|0;
 HEAP32[$y>>2] = $sub$i530;
 HEAP32[$arrayidx11$i475>>2] = $sub20$i531;
 HEAP32[$arrayidx12$i476>>2] = $sub21$i532;
 HEAP32[$arrayidx13$i477>>2] = $sub22$i533;
 HEAP32[$arrayidx14$i478>>2] = $sub23$i534;
 HEAP32[$arrayidx15$i479>>2] = $sub24$i535;
 HEAP32[$arrayidx16$i480>>2] = $sub25$i536;
 HEAP32[$arrayidx17$i481>>2] = $sub26$i537;
 HEAP32[$arrayidx18$i482>>2] = $sub27$i538;
 HEAP32[$arrayidx19$i483>>2] = $sub28$i539;
 $266 = HEAP32[8012]|0;
 $267 = HEAP32[(32052)>>2]|0;
 $268 = HEAP32[(32056)>>2]|0;
 $269 = HEAP32[(32060)>>2]|0;
 $270 = HEAP32[(32064)>>2]|0;
 $271 = HEAP32[(32068)>>2]|0;
 $272 = HEAP32[(32072)>>2]|0;
 $273 = HEAP32[(32076)>>2]|0;
 $274 = HEAP32[(32080)>>2]|0;
 $275 = HEAP32[(32084)>>2]|0;
 HEAP32[$z>>2] = $266;
 $arrayidx11$i503 = ((($z)) + 4|0);
 HEAP32[$arrayidx11$i503>>2] = $267;
 $arrayidx12$i504 = ((($z)) + 8|0);
 HEAP32[$arrayidx12$i504>>2] = $268;
 $arrayidx13$i505 = ((($z)) + 12|0);
 HEAP32[$arrayidx13$i505>>2] = $269;
 $arrayidx14$i506 = ((($z)) + 16|0);
 HEAP32[$arrayidx14$i506>>2] = $270;
 $arrayidx15$i507 = ((($z)) + 20|0);
 HEAP32[$arrayidx15$i507>>2] = $271;
 $arrayidx16$i508 = ((($z)) + 24|0);
 HEAP32[$arrayidx16$i508>>2] = $272;
 $arrayidx17$i509 = ((($z)) + 28|0);
 HEAP32[$arrayidx17$i509>>2] = $273;
 $arrayidx18$i510 = ((($z)) + 32|0);
 HEAP32[$arrayidx18$i510>>2] = $274;
 $arrayidx19$i511 = ((($z)) + 36|0);
 HEAP32[$arrayidx19$i511>>2] = $275;
 _fe_tobytes($s$i,$y);
 $276 = HEAP8[$s$i>>0]|0;
 $arrayidx1$i400 = ((($s$i)) + 1|0);
 $277 = HEAP8[$arrayidx1$i400>>0]|0;
 $or1$i401 = $277 | $276;
 $arrayidx3$i402 = ((($s$i)) + 2|0);
 $278 = HEAP8[$arrayidx3$i402>>0]|0;
 $or52$i403 = $or1$i401 | $278;
 $arrayidx6$i404 = ((($s$i)) + 3|0);
 $279 = HEAP8[$arrayidx6$i404>>0]|0;
 $or84$i405 = $or52$i403 | $279;
 $arrayidx9$i406 = ((($s$i)) + 4|0);
 $280 = HEAP8[$arrayidx9$i406>>0]|0;
 $or115$i407 = $or84$i405 | $280;
 $arrayidx12$i408 = ((($s$i)) + 5|0);
 $281 = HEAP8[$arrayidx12$i408>>0]|0;
 $or146$i409 = $or115$i407 | $281;
 $arrayidx15$i410 = ((($s$i)) + 6|0);
 $282 = HEAP8[$arrayidx15$i410>>0]|0;
 $or177$i411 = $or146$i409 | $282;
 $arrayidx18$i412 = ((($s$i)) + 7|0);
 $283 = HEAP8[$arrayidx18$i412>>0]|0;
 $or208$i413 = $or177$i411 | $283;
 $arrayidx21$i414 = ((($s$i)) + 8|0);
 $284 = HEAP8[$arrayidx21$i414>>0]|0;
 $or239$i415 = $or208$i413 | $284;
 $arrayidx24$i416 = ((($s$i)) + 9|0);
 $285 = HEAP8[$arrayidx24$i416>>0]|0;
 $or2610$i417 = $or239$i415 | $285;
 $arrayidx27$i418 = ((($s$i)) + 10|0);
 $286 = HEAP8[$arrayidx27$i418>>0]|0;
 $or2911$i419 = $or2610$i417 | $286;
 $arrayidx30$i420 = ((($s$i)) + 11|0);
 $287 = HEAP8[$arrayidx30$i420>>0]|0;
 $or3212$i421 = $or2911$i419 | $287;
 $arrayidx33$i422 = ((($s$i)) + 12|0);
 $288 = HEAP8[$arrayidx33$i422>>0]|0;
 $or3513$i423 = $or3212$i421 | $288;
 $arrayidx36$i424 = ((($s$i)) + 13|0);
 $289 = HEAP8[$arrayidx36$i424>>0]|0;
 $or3814$i425 = $or3513$i423 | $289;
 $arrayidx39$i426 = ((($s$i)) + 14|0);
 $290 = HEAP8[$arrayidx39$i426>>0]|0;
 $or4115$i427 = $or3814$i425 | $290;
 $arrayidx42$i428 = ((($s$i)) + 15|0);
 $291 = HEAP8[$arrayidx42$i428>>0]|0;
 $or4416$i429 = $or4115$i427 | $291;
 $arrayidx45$i430 = ((($s$i)) + 16|0);
 $292 = HEAP8[$arrayidx45$i430>>0]|0;
 $or4717$i431 = $or4416$i429 | $292;
 $arrayidx48$i432 = ((($s$i)) + 17|0);
 $293 = HEAP8[$arrayidx48$i432>>0]|0;
 $or5018$i433 = $or4717$i431 | $293;
 $arrayidx51$i434 = ((($s$i)) + 18|0);
 $294 = HEAP8[$arrayidx51$i434>>0]|0;
 $or5319$i435 = $or5018$i433 | $294;
 $arrayidx54$i436 = ((($s$i)) + 19|0);
 $295 = HEAP8[$arrayidx54$i436>>0]|0;
 $or5620$i437 = $or5319$i435 | $295;
 $arrayidx57$i438 = ((($s$i)) + 20|0);
 $296 = HEAP8[$arrayidx57$i438>>0]|0;
 $or5921$i439 = $or5620$i437 | $296;
 $arrayidx60$i440 = ((($s$i)) + 21|0);
 $297 = HEAP8[$arrayidx60$i440>>0]|0;
 $or6222$i441 = $or5921$i439 | $297;
 $arrayidx63$i442 = ((($s$i)) + 22|0);
 $298 = HEAP8[$arrayidx63$i442>>0]|0;
 $or6523$i443 = $or6222$i441 | $298;
 $arrayidx66$i444 = ((($s$i)) + 23|0);
 $299 = HEAP8[$arrayidx66$i444>>0]|0;
 $or6824$i445 = $or6523$i443 | $299;
 $arrayidx69$i446 = ((($s$i)) + 24|0);
 $300 = HEAP8[$arrayidx69$i446>>0]|0;
 $or7125$i447 = $or6824$i445 | $300;
 $arrayidx72$i448 = ((($s$i)) + 25|0);
 $301 = HEAP8[$arrayidx72$i448>>0]|0;
 $or7426$i449 = $or7125$i447 | $301;
 $arrayidx75$i450 = ((($s$i)) + 26|0);
 $302 = HEAP8[$arrayidx75$i450>>0]|0;
 $or7727$i451 = $or7426$i449 | $302;
 $arrayidx78$i452 = ((($s$i)) + 27|0);
 $303 = HEAP8[$arrayidx78$i452>>0]|0;
 $or8028$i453 = $or7727$i451 | $303;
 $arrayidx81$i454 = ((($s$i)) + 28|0);
 $304 = HEAP8[$arrayidx81$i454>>0]|0;
 $or8329$i455 = $or8028$i453 | $304;
 $arrayidx84$i456 = ((($s$i)) + 29|0);
 $305 = HEAP8[$arrayidx84$i456>>0]|0;
 $or8630$i457 = $or8329$i455 | $305;
 $arrayidx87$i458 = ((($s$i)) + 30|0);
 $306 = HEAP8[$arrayidx87$i458>>0]|0;
 $or8931$i459 = $or8630$i457 | $306;
 $arrayidx90$i460 = ((($s$i)) + 31|0);
 $307 = HEAP8[$arrayidx90$i460>>0]|0;
 $or9232$i461 = $or8931$i459 | $307;
 $or92$i462 = $or9232$i461&255;
 $sub$i463 = (($or92$i462) + -1)|0;
 $tobool = ($sub$i463>>>0)>(4294967039);
 do {
  if ($tobool) {
   _fe_mul($r,$r,32144);
   label = 5;
  } else {
   $308 = HEAP32[$w>>2]|0;
   $309 = HEAP32[$arrayidx1$i257>>2]|0;
   $310 = HEAP32[$arrayidx12$i335>>2]|0;
   $311 = HEAP32[$arrayidx13$i336>>2]|0;
   $312 = HEAP32[$arrayidx14$i337>>2]|0;
   $313 = HEAP32[$arrayidx15$i338>>2]|0;
   $314 = HEAP32[$arrayidx16$i339>>2]|0;
   $315 = HEAP32[$arrayidx17$i340>>2]|0;
   $316 = HEAP32[$arrayidx18$i341>>2]|0;
   $317 = HEAP32[$arrayidx19$i342>>2]|0;
   $318 = HEAP32[$x>>2]|0;
   $319 = HEAP32[$arrayidx1$i466>>2]|0;
   $320 = HEAP32[$arrayidx2$i467>>2]|0;
   $321 = HEAP32[$arrayidx3$i468>>2]|0;
   $322 = HEAP32[$arrayidx4$i469>>2]|0;
   $323 = HEAP32[$arrayidx5$i470>>2]|0;
   $324 = HEAP32[$arrayidx6$i471>>2]|0;
   $325 = HEAP32[$arrayidx7$i472>>2]|0;
   $326 = HEAP32[$arrayidx8$i473>>2]|0;
   $327 = HEAP32[$arrayidx9$i474>>2]|0;
   $add$i380 = (($318) + ($308))|0;
   $add20$i381 = (($319) + ($309))|0;
   $add21$i382 = (($320) + ($310))|0;
   $add22$i383 = (($321) + ($311))|0;
   $add23$i384 = (($322) + ($312))|0;
   $add24$i385 = (($323) + ($313))|0;
   $add25$i386 = (($324) + ($314))|0;
   $add26$i387 = (($325) + ($315))|0;
   $add27$i388 = (($326) + ($316))|0;
   $add28$i389 = (($327) + ($317))|0;
   HEAP32[$y>>2] = $add$i380;
   HEAP32[$arrayidx11$i475>>2] = $add20$i381;
   HEAP32[$arrayidx12$i476>>2] = $add21$i382;
   HEAP32[$arrayidx13$i477>>2] = $add22$i383;
   HEAP32[$arrayidx14$i478>>2] = $add23$i384;
   HEAP32[$arrayidx15$i479>>2] = $add24$i385;
   HEAP32[$arrayidx16$i480>>2] = $add25$i386;
   HEAP32[$arrayidx17$i481>>2] = $add26$i387;
   HEAP32[$arrayidx18$i482>>2] = $add27$i388;
   HEAP32[$arrayidx19$i483>>2] = $add28$i389;
   _fe_tobytes($s$i,$y);
   $328 = HEAP8[$s$i>>0]|0;
   $329 = HEAP8[$arrayidx1$i400>>0]|0;
   $or1$i260 = $329 | $328;
   $330 = HEAP8[$arrayidx3$i402>>0]|0;
   $or52$i262 = $or1$i260 | $330;
   $331 = HEAP8[$arrayidx6$i404>>0]|0;
   $or84$i264 = $or52$i262 | $331;
   $332 = HEAP8[$arrayidx9$i406>>0]|0;
   $or115$i266 = $or84$i264 | $332;
   $333 = HEAP8[$arrayidx12$i408>>0]|0;
   $or146$i268 = $or115$i266 | $333;
   $334 = HEAP8[$arrayidx15$i410>>0]|0;
   $or177$i270 = $or146$i268 | $334;
   $335 = HEAP8[$arrayidx18$i412>>0]|0;
   $or208$i272 = $or177$i270 | $335;
   $336 = HEAP8[$arrayidx21$i414>>0]|0;
   $or239$i274 = $or208$i272 | $336;
   $337 = HEAP8[$arrayidx24$i416>>0]|0;
   $or2610$i276 = $or239$i274 | $337;
   $338 = HEAP8[$arrayidx27$i418>>0]|0;
   $or2911$i278 = $or2610$i276 | $338;
   $339 = HEAP8[$arrayidx30$i420>>0]|0;
   $or3212$i280 = $or2911$i278 | $339;
   $340 = HEAP8[$arrayidx33$i422>>0]|0;
   $or3513$i282 = $or3212$i280 | $340;
   $341 = HEAP8[$arrayidx36$i424>>0]|0;
   $or3814$i284 = $or3513$i282 | $341;
   $342 = HEAP8[$arrayidx39$i426>>0]|0;
   $or4115$i286 = $or3814$i284 | $342;
   $343 = HEAP8[$arrayidx42$i428>>0]|0;
   $or4416$i288 = $or4115$i286 | $343;
   $344 = HEAP8[$arrayidx45$i430>>0]|0;
   $or4717$i290 = $or4416$i288 | $344;
   $345 = HEAP8[$arrayidx48$i432>>0]|0;
   $or5018$i292 = $or4717$i290 | $345;
   $346 = HEAP8[$arrayidx51$i434>>0]|0;
   $or5319$i294 = $or5018$i292 | $346;
   $347 = HEAP8[$arrayidx54$i436>>0]|0;
   $or5620$i296 = $or5319$i294 | $347;
   $348 = HEAP8[$arrayidx57$i438>>0]|0;
   $or5921$i298 = $or5620$i296 | $348;
   $349 = HEAP8[$arrayidx60$i440>>0]|0;
   $or6222$i300 = $or5921$i298 | $349;
   $350 = HEAP8[$arrayidx63$i442>>0]|0;
   $or6523$i302 = $or6222$i300 | $350;
   $351 = HEAP8[$arrayidx66$i444>>0]|0;
   $or6824$i304 = $or6523$i302 | $351;
   $352 = HEAP8[$arrayidx69$i446>>0]|0;
   $or7125$i306 = $or6824$i304 | $352;
   $353 = HEAP8[$arrayidx72$i448>>0]|0;
   $or7426$i308 = $or7125$i306 | $353;
   $354 = HEAP8[$arrayidx75$i450>>0]|0;
   $or7727$i310 = $or7426$i308 | $354;
   $355 = HEAP8[$arrayidx78$i452>>0]|0;
   $or8028$i312 = $or7727$i310 | $355;
   $356 = HEAP8[$arrayidx81$i454>>0]|0;
   $or8329$i314 = $or8028$i312 | $356;
   $357 = HEAP8[$arrayidx84$i456>>0]|0;
   $or8630$i316 = $or8329$i314 | $357;
   $358 = HEAP8[$arrayidx87$i458>>0]|0;
   $or8931$i318 = $or8630$i316 | $358;
   $359 = HEAP8[$arrayidx90$i460>>0]|0;
   $or9232$i320 = $or8931$i318 | $359;
   $or92$i321 = $or9232$i320&255;
   $sub$i322 = (($or92$i321) + -1)|0;
   $tobool122 = ($sub$i322>>>0)>(4294967039);
   if ($tobool122) {
    _fe_mul($r,$r,32096);
    label = 5;
    break;
   }
   _fe_mul($x,$x,224);
   $360 = HEAP32[$w>>2]|0;
   $361 = HEAP32[$arrayidx1$i257>>2]|0;
   $362 = HEAP32[$arrayidx12$i335>>2]|0;
   $363 = HEAP32[$arrayidx13$i336>>2]|0;
   $364 = HEAP32[$arrayidx14$i337>>2]|0;
   $365 = HEAP32[$arrayidx15$i338>>2]|0;
   $366 = HEAP32[$arrayidx16$i339>>2]|0;
   $367 = HEAP32[$arrayidx17$i340>>2]|0;
   $368 = HEAP32[$arrayidx18$i341>>2]|0;
   $369 = HEAP32[$arrayidx19$i342>>2]|0;
   $370 = HEAP32[$x>>2]|0;
   $371 = HEAP32[$arrayidx1$i466>>2]|0;
   $372 = HEAP32[$arrayidx2$i467>>2]|0;
   $373 = HEAP32[$arrayidx3$i468>>2]|0;
   $374 = HEAP32[$arrayidx4$i469>>2]|0;
   $375 = HEAP32[$arrayidx5$i470>>2]|0;
   $376 = HEAP32[$arrayidx6$i471>>2]|0;
   $377 = HEAP32[$arrayidx7$i472>>2]|0;
   $378 = HEAP32[$arrayidx8$i473>>2]|0;
   $379 = HEAP32[$arrayidx9$i474>>2]|0;
   $sub$i210 = (($360) - ($370))|0;
   $sub20$i211 = (($361) - ($371))|0;
   $sub21$i212 = (($362) - ($372))|0;
   $sub22$i213 = (($363) - ($373))|0;
   $sub23$i214 = (($364) - ($374))|0;
   $sub24$i215 = (($365) - ($375))|0;
   $sub25$i216 = (($366) - ($376))|0;
   $sub26$i217 = (($367) - ($377))|0;
   $sub27$i218 = (($368) - ($378))|0;
   $sub28$i219 = (($369) - ($379))|0;
   HEAP32[$y>>2] = $sub$i210;
   HEAP32[$arrayidx11$i475>>2] = $sub20$i211;
   HEAP32[$arrayidx12$i476>>2] = $sub21$i212;
   HEAP32[$arrayidx13$i477>>2] = $sub22$i213;
   HEAP32[$arrayidx14$i478>>2] = $sub23$i214;
   HEAP32[$arrayidx15$i479>>2] = $sub24$i215;
   HEAP32[$arrayidx16$i480>>2] = $sub25$i216;
   HEAP32[$arrayidx17$i481>>2] = $sub26$i217;
   HEAP32[$arrayidx18$i482>>2] = $sub27$i218;
   HEAP32[$arrayidx19$i483>>2] = $sub28$i219;
   _fe_tobytes($s$i,$y);
   $380 = HEAP8[$s$i>>0]|0;
   $381 = HEAP8[$arrayidx1$i400>>0]|0;
   $or1$i = $381 | $380;
   $382 = HEAP8[$arrayidx3$i402>>0]|0;
   $or52$i = $or1$i | $382;
   $383 = HEAP8[$arrayidx6$i404>>0]|0;
   $or84$i = $or52$i | $383;
   $384 = HEAP8[$arrayidx9$i406>>0]|0;
   $or115$i = $or84$i | $384;
   $385 = HEAP8[$arrayidx12$i408>>0]|0;
   $or146$i = $or115$i | $385;
   $386 = HEAP8[$arrayidx15$i410>>0]|0;
   $or177$i = $or146$i | $386;
   $387 = HEAP8[$arrayidx18$i412>>0]|0;
   $or208$i = $or177$i | $387;
   $388 = HEAP8[$arrayidx21$i414>>0]|0;
   $or239$i = $or208$i | $388;
   $389 = HEAP8[$arrayidx24$i416>>0]|0;
   $or2610$i = $or239$i | $389;
   $390 = HEAP8[$arrayidx27$i418>>0]|0;
   $or2911$i = $or2610$i | $390;
   $391 = HEAP8[$arrayidx30$i420>>0]|0;
   $or3212$i = $or2911$i | $391;
   $392 = HEAP8[$arrayidx33$i422>>0]|0;
   $or3513$i = $or3212$i | $392;
   $393 = HEAP8[$arrayidx36$i424>>0]|0;
   $or3814$i = $or3513$i | $393;
   $394 = HEAP8[$arrayidx39$i426>>0]|0;
   $or4115$i = $or3814$i | $394;
   $395 = HEAP8[$arrayidx42$i428>>0]|0;
   $or4416$i = $or4115$i | $395;
   $396 = HEAP8[$arrayidx45$i430>>0]|0;
   $or4717$i = $or4416$i | $396;
   $397 = HEAP8[$arrayidx48$i432>>0]|0;
   $or5018$i = $or4717$i | $397;
   $398 = HEAP8[$arrayidx51$i434>>0]|0;
   $or5319$i = $or5018$i | $398;
   $399 = HEAP8[$arrayidx54$i436>>0]|0;
   $or5620$i = $or5319$i | $399;
   $400 = HEAP8[$arrayidx57$i438>>0]|0;
   $or5921$i = $or5620$i | $400;
   $401 = HEAP8[$arrayidx60$i440>>0]|0;
   $or6222$i = $or5921$i | $401;
   $402 = HEAP8[$arrayidx63$i442>>0]|0;
   $or6523$i = $or6222$i | $402;
   $403 = HEAP8[$arrayidx66$i444>>0]|0;
   $or6824$i = $or6523$i | $403;
   $404 = HEAP8[$arrayidx69$i446>>0]|0;
   $or7125$i = $or6824$i | $404;
   $405 = HEAP8[$arrayidx72$i448>>0]|0;
   $or7426$i = $or7125$i | $405;
   $406 = HEAP8[$arrayidx75$i450>>0]|0;
   $or7727$i = $or7426$i | $406;
   $407 = HEAP8[$arrayidx78$i452>>0]|0;
   $or8028$i = $or7727$i | $407;
   $408 = HEAP8[$arrayidx81$i454>>0]|0;
   $or8329$i = $or8028$i | $408;
   $409 = HEAP8[$arrayidx84$i456>>0]|0;
   $or8630$i = $or8329$i | $409;
   $410 = HEAP8[$arrayidx87$i458>>0]|0;
   $or8931$i = $or8630$i | $410;
   $411 = HEAP8[$arrayidx90$i460>>0]|0;
   $or9232$i = $or8931$i | $411;
   $or92$i = $or9232$i&255;
   $sub$i177 = (($or92$i) + -1)|0;
   $tobool149 = ($sub$i177>>>0)>(4294967039);
   if ($tobool149) {
    _fe_mul($r,$r,32240);
    $sign$0 = 1;
    break;
   } else {
    _fe_mul($r,$r,32192);
    $sign$0 = 1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  _fe_mul($r,$r,$u);
  _fe_mul($z,$z,$v);
  $sign$0 = 0;
 }
 _fe_tobytes($s$i,$r);
 $412 = HEAP8[$s$i>>0]|0;
 $413 = $412 & 1;
 $and$i = $413&255;
 $cmp = ($sign$0|0)==($and$i|0);
 if ($cmp) {
  $arraydecay172 = ((($r)) + 80|0);
  $424 = HEAP32[$z>>2]|0;
  $425 = HEAP32[$arrayidx11$i503>>2]|0;
  $426 = HEAP32[$arrayidx12$i504>>2]|0;
  $427 = HEAP32[$arrayidx13$i505>>2]|0;
  $428 = HEAP32[$arrayidx14$i506>>2]|0;
  $429 = HEAP32[$arrayidx15$i507>>2]|0;
  $430 = HEAP32[$arrayidx16$i508>>2]|0;
  $431 = HEAP32[$arrayidx17$i509>>2]|0;
  $432 = HEAP32[$arrayidx18$i510>>2]|0;
  $433 = HEAP32[$arrayidx19$i511>>2]|0;
  $434 = HEAP32[$w>>2]|0;
  $435 = HEAP32[$arrayidx1$i257>>2]|0;
  $436 = HEAP32[$arrayidx12$i335>>2]|0;
  $437 = HEAP32[$arrayidx13$i336>>2]|0;
  $438 = HEAP32[$arrayidx14$i337>>2]|0;
  $439 = HEAP32[$arrayidx15$i338>>2]|0;
  $440 = HEAP32[$arrayidx16$i339>>2]|0;
  $441 = HEAP32[$arrayidx17$i340>>2]|0;
  $442 = HEAP32[$arrayidx18$i341>>2]|0;
  $443 = HEAP32[$arrayidx19$i342>>2]|0;
  $add$i = (($434) + ($424))|0;
  $add20$i = (($435) + ($425))|0;
  $add21$i = (($436) + ($426))|0;
  $add22$i = (($437) + ($427))|0;
  $add23$i = (($438) + ($428))|0;
  $add24$i = (($439) + ($429))|0;
  $add25$i = (($440) + ($430))|0;
  $add26$i = (($441) + ($431))|0;
  $add27$i = (($442) + ($432))|0;
  $add28$i = (($443) + ($433))|0;
  HEAP32[$arraydecay172>>2] = $add$i;
  $arrayidx30$i123 = ((($r)) + 84|0);
  HEAP32[$arrayidx30$i123>>2] = $add20$i;
  $arrayidx31$i124 = ((($r)) + 88|0);
  HEAP32[$arrayidx31$i124>>2] = $add21$i;
  $arrayidx32$i125 = ((($r)) + 92|0);
  HEAP32[$arrayidx32$i125>>2] = $add22$i;
  $arrayidx33$i126 = ((($r)) + 96|0);
  HEAP32[$arrayidx33$i126>>2] = $add23$i;
  $arrayidx34$i127 = ((($r)) + 100|0);
  HEAP32[$arrayidx34$i127>>2] = $add24$i;
  $arrayidx35$i128 = ((($r)) + 104|0);
  HEAP32[$arrayidx35$i128>>2] = $add25$i;
  $arrayidx36$i129 = ((($r)) + 108|0);
  HEAP32[$arrayidx36$i129>>2] = $add26$i;
  $arrayidx37$i130 = ((($r)) + 112|0);
  HEAP32[$arrayidx37$i130>>2] = $add27$i;
  $arrayidx38$i131 = ((($r)) + 116|0);
  HEAP32[$arrayidx38$i131>>2] = $add28$i;
  $arraydecay175 = ((($r)) + 40|0);
  $sub$i = (($424) - ($434))|0;
  $sub20$i = (($425) - ($435))|0;
  $sub21$i = (($426) - ($436))|0;
  $sub22$i = (($427) - ($437))|0;
  $sub23$i = (($428) - ($438))|0;
  $sub24$i = (($429) - ($439))|0;
  $sub25$i = (($430) - ($440))|0;
  $sub26$i = (($431) - ($441))|0;
  $sub27$i = (($432) - ($442))|0;
  $sub28$i = (($433) - ($443))|0;
  HEAP32[$arraydecay175>>2] = $sub$i;
  $arrayidx30$i = ((($r)) + 44|0);
  HEAP32[$arrayidx30$i>>2] = $sub20$i;
  $arrayidx31$i = ((($r)) + 48|0);
  HEAP32[$arrayidx31$i>>2] = $sub21$i;
  $arrayidx32$i = ((($r)) + 52|0);
  HEAP32[$arrayidx32$i>>2] = $sub22$i;
  $arrayidx33$i = ((($r)) + 56|0);
  HEAP32[$arrayidx33$i>>2] = $sub23$i;
  $arrayidx34$i = ((($r)) + 60|0);
  HEAP32[$arrayidx34$i>>2] = $sub24$i;
  $arrayidx35$i = ((($r)) + 64|0);
  HEAP32[$arrayidx35$i>>2] = $sub25$i;
  $arrayidx36$i = ((($r)) + 68|0);
  HEAP32[$arrayidx36$i>>2] = $sub26$i;
  $arrayidx37$i = ((($r)) + 72|0);
  HEAP32[$arrayidx37$i>>2] = $sub27$i;
  $arrayidx38$i = ((($r)) + 76|0);
  HEAP32[$arrayidx38$i>>2] = $sub28$i;
  _fe_mul($r,$r,$arraydecay172);
  STACKTOP = sp;return;
 }
 $414 = HEAP32[$r>>2]|0;
 $arrayidx1$i132 = ((($r)) + 4|0);
 $415 = HEAP32[$arrayidx1$i132>>2]|0;
 $arrayidx2$i133 = ((($r)) + 8|0);
 $416 = HEAP32[$arrayidx2$i133>>2]|0;
 $arrayidx3$i134 = ((($r)) + 12|0);
 $417 = HEAP32[$arrayidx3$i134>>2]|0;
 $arrayidx4$i135 = ((($r)) + 16|0);
 $418 = HEAP32[$arrayidx4$i135>>2]|0;
 $arrayidx5$i136 = ((($r)) + 20|0);
 $419 = HEAP32[$arrayidx5$i136>>2]|0;
 $arrayidx6$i137 = ((($r)) + 24|0);
 $420 = HEAP32[$arrayidx6$i137>>2]|0;
 $arrayidx7$i138 = ((($r)) + 28|0);
 $421 = HEAP32[$arrayidx7$i138>>2]|0;
 $arrayidx8$i139 = ((($r)) + 32|0);
 $422 = HEAP32[$arrayidx8$i139>>2]|0;
 $arrayidx9$i140 = ((($r)) + 36|0);
 $423 = HEAP32[$arrayidx9$i140>>2]|0;
 $sub$i141 = (0 - ($414))|0;
 $sub10$i = (0 - ($415))|0;
 $sub11$i = (0 - ($416))|0;
 $sub12$i = (0 - ($417))|0;
 $sub13$i = (0 - ($418))|0;
 $sub14$i = (0 - ($419))|0;
 $sub15$i = (0 - ($420))|0;
 $sub16$i = (0 - ($421))|0;
 $sub17$i = (0 - ($422))|0;
 $sub18$i = (0 - ($423))|0;
 HEAP32[$r>>2] = $sub$i141;
 HEAP32[$arrayidx1$i132>>2] = $sub10$i;
 HEAP32[$arrayidx2$i133>>2] = $sub11$i;
 HEAP32[$arrayidx3$i134>>2] = $sub12$i;
 HEAP32[$arrayidx4$i135>>2] = $sub13$i;
 HEAP32[$arrayidx5$i136>>2] = $sub14$i;
 HEAP32[$arrayidx6$i137>>2] = $sub15$i;
 HEAP32[$arrayidx7$i138>>2] = $sub16$i;
 HEAP32[$arrayidx8$i139>>2] = $sub17$i;
 HEAP32[$arrayidx9$i140>>2] = $sub18$i;
 $arraydecay172 = ((($r)) + 80|0);
 $424 = HEAP32[$z>>2]|0;
 $425 = HEAP32[$arrayidx11$i503>>2]|0;
 $426 = HEAP32[$arrayidx12$i504>>2]|0;
 $427 = HEAP32[$arrayidx13$i505>>2]|0;
 $428 = HEAP32[$arrayidx14$i506>>2]|0;
 $429 = HEAP32[$arrayidx15$i507>>2]|0;
 $430 = HEAP32[$arrayidx16$i508>>2]|0;
 $431 = HEAP32[$arrayidx17$i509>>2]|0;
 $432 = HEAP32[$arrayidx18$i510>>2]|0;
 $433 = HEAP32[$arrayidx19$i511>>2]|0;
 $434 = HEAP32[$w>>2]|0;
 $435 = HEAP32[$arrayidx1$i257>>2]|0;
 $436 = HEAP32[$arrayidx12$i335>>2]|0;
 $437 = HEAP32[$arrayidx13$i336>>2]|0;
 $438 = HEAP32[$arrayidx14$i337>>2]|0;
 $439 = HEAP32[$arrayidx15$i338>>2]|0;
 $440 = HEAP32[$arrayidx16$i339>>2]|0;
 $441 = HEAP32[$arrayidx17$i340>>2]|0;
 $442 = HEAP32[$arrayidx18$i341>>2]|0;
 $443 = HEAP32[$arrayidx19$i342>>2]|0;
 $add$i = (($434) + ($424))|0;
 $add20$i = (($435) + ($425))|0;
 $add21$i = (($436) + ($426))|0;
 $add22$i = (($437) + ($427))|0;
 $add23$i = (($438) + ($428))|0;
 $add24$i = (($439) + ($429))|0;
 $add25$i = (($440) + ($430))|0;
 $add26$i = (($441) + ($431))|0;
 $add27$i = (($442) + ($432))|0;
 $add28$i = (($443) + ($433))|0;
 HEAP32[$arraydecay172>>2] = $add$i;
 $arrayidx30$i123 = ((($r)) + 84|0);
 HEAP32[$arrayidx30$i123>>2] = $add20$i;
 $arrayidx31$i124 = ((($r)) + 88|0);
 HEAP32[$arrayidx31$i124>>2] = $add21$i;
 $arrayidx32$i125 = ((($r)) + 92|0);
 HEAP32[$arrayidx32$i125>>2] = $add22$i;
 $arrayidx33$i126 = ((($r)) + 96|0);
 HEAP32[$arrayidx33$i126>>2] = $add23$i;
 $arrayidx34$i127 = ((($r)) + 100|0);
 HEAP32[$arrayidx34$i127>>2] = $add24$i;
 $arrayidx35$i128 = ((($r)) + 104|0);
 HEAP32[$arrayidx35$i128>>2] = $add25$i;
 $arrayidx36$i129 = ((($r)) + 108|0);
 HEAP32[$arrayidx36$i129>>2] = $add26$i;
 $arrayidx37$i130 = ((($r)) + 112|0);
 HEAP32[$arrayidx37$i130>>2] = $add27$i;
 $arrayidx38$i131 = ((($r)) + 116|0);
 HEAP32[$arrayidx38$i131>>2] = $add28$i;
 $arraydecay175 = ((($r)) + 40|0);
 $sub$i = (($424) - ($434))|0;
 $sub20$i = (($425) - ($435))|0;
 $sub21$i = (($426) - ($436))|0;
 $sub22$i = (($427) - ($437))|0;
 $sub23$i = (($428) - ($438))|0;
 $sub24$i = (($429) - ($439))|0;
 $sub25$i = (($430) - ($440))|0;
 $sub26$i = (($431) - ($441))|0;
 $sub27$i = (($432) - ($442))|0;
 $sub28$i = (($433) - ($443))|0;
 HEAP32[$arraydecay175>>2] = $sub$i;
 $arrayidx30$i = ((($r)) + 44|0);
 HEAP32[$arrayidx30$i>>2] = $sub20$i;
 $arrayidx31$i = ((($r)) + 48|0);
 HEAP32[$arrayidx31$i>>2] = $sub21$i;
 $arrayidx32$i = ((($r)) + 52|0);
 HEAP32[$arrayidx32$i>>2] = $sub22$i;
 $arrayidx33$i = ((($r)) + 56|0);
 HEAP32[$arrayidx33$i>>2] = $sub23$i;
 $arrayidx34$i = ((($r)) + 60|0);
 HEAP32[$arrayidx34$i>>2] = $sub24$i;
 $arrayidx35$i = ((($r)) + 64|0);
 HEAP32[$arrayidx35$i>>2] = $sub25$i;
 $arrayidx36$i = ((($r)) + 68|0);
 HEAP32[$arrayidx36$i>>2] = $sub26$i;
 $arrayidx37$i = ((($r)) + 72|0);
 HEAP32[$arrayidx37$i>>2] = $sub27$i;
 $arrayidx38$i = ((($r)) + 76|0);
 HEAP32[$arrayidx38$i>>2] = $sub28$i;
 _fe_mul($r,$r,$arraydecay172);
 STACKTOP = sp;return;
}
function _sc_0($s) {
 $s = $s|0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$s; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 return;
}
function _sc_reduce32($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx288 = 0, $add$ptr15$idx288$val = 0, $add$ptr23$idx = 0;
 var $add$ptr23$idx$val = 0, $add$ptr23$idx287 = 0, $add$ptr23$idx287$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx286 = 0, $add$ptr27$idx286$val = 0, $add$ptr27$val = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx289 = 0, $add$ptr3$idx289$val = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx285 = 0, $add$ptr34$idx285$val = 0, $arrayidx1$i = 0, $arrayidx1$i306 = 0, $arrayidx1$i333 = 0;
 var $arrayidx1$i353 = 0, $arrayidx1$i366 = 0, $arrayidx1$i386 = 0, $arrayidx3$i = 0, $arrayidx3$i310 = 0, $arrayidx3$i337 = 0, $arrayidx3$i357 = 0, $arrayidx3$i370 = 0, $arrayidx3$i390 = 0, $arrayidx7$i = 0, $arrayidx7$i314 = 0, $arrayidx7$i341 = 0, $arrayidx7$i361 = 0, $arrayidx7$i374 = 0, $arrayidx7$i394 = 0, $s$idx = 0, $s$idx$val = 0, $s$idx290 = 0, $s$idx290$val = 0, $s$val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $s$val = HEAP8[$s>>0]|0;
 $s$idx = ((($s)) + 1|0);
 $s$idx$val = HEAP8[$s$idx>>0]|0;
 $s$idx290 = ((($s)) + 2|0);
 $s$idx290$val = HEAP8[$s$idx290>>0]|0;
 $0 = $s$val&255;
 $1 = $s$idx$val&255;
 $2 = (_bitshift64Shl(($1|0),0,8)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2 | $0;
 $5 = $s$idx290$val&255;
 $6 = (_bitshift64Shl(($5|0),0,16)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2031616;
 $9 = $4 | $8;
 $arrayidx1$i386 = ((($s)) + 3|0);
 $10 = HEAP8[$arrayidx1$i386>>0]|0;
 $11 = $10&255;
 $12 = (_bitshift64Shl(($11|0),0,8)|0);
 $13 = (getTempRet0() | 0);
 $14 = $12 | $5;
 $arrayidx3$i390 = ((($s)) + 4|0);
 $15 = HEAP8[$arrayidx3$i390>>0]|0;
 $16 = $15&255;
 $17 = (_bitshift64Shl(($16|0),0,16)|0);
 $18 = (getTempRet0() | 0);
 $19 = $14 | $17;
 $20 = $13 | $18;
 $arrayidx7$i394 = ((($s)) + 5|0);
 $21 = HEAP8[$arrayidx7$i394>>0]|0;
 $22 = $21&255;
 $23 = (_bitshift64Shl(($22|0),0,24)|0);
 $24 = (getTempRet0() | 0);
 $25 = $19 | $23;
 $26 = $20 | $24;
 $27 = (_bitshift64Lshr(($25|0),($26|0),5)|0);
 $28 = (getTempRet0() | 0);
 $29 = $27 & 2097151;
 $add$ptr3$idx = ((($s)) + 6|0);
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx>>0]|0;
 $add$ptr3$idx289 = ((($s)) + 7|0);
 $add$ptr3$idx289$val = HEAP8[$add$ptr3$idx289>>0]|0;
 $30 = $add$ptr3$idx$val&255;
 $31 = (_bitshift64Shl(($30|0),0,8)|0);
 $32 = (getTempRet0() | 0);
 $33 = $31 | $22;
 $34 = $add$ptr3$idx289$val&255;
 $35 = (_bitshift64Shl(($34|0),0,16)|0);
 $36 = (getTempRet0() | 0);
 $37 = $33 | $35;
 $38 = $32 | $36;
 $39 = (_bitshift64Lshr(($37|0),($38|0),2)|0);
 $40 = (getTempRet0() | 0);
 $41 = $39 & 2097151;
 $arrayidx1$i366 = ((($s)) + 8|0);
 $42 = HEAP8[$arrayidx1$i366>>0]|0;
 $43 = $42&255;
 $44 = (_bitshift64Shl(($43|0),0,8)|0);
 $45 = (getTempRet0() | 0);
 $46 = $44 | $34;
 $arrayidx3$i370 = ((($s)) + 9|0);
 $47 = HEAP8[$arrayidx3$i370>>0]|0;
 $48 = $47&255;
 $49 = (_bitshift64Shl(($48|0),0,16)|0);
 $50 = (getTempRet0() | 0);
 $51 = $46 | $49;
 $52 = $45 | $50;
 $arrayidx7$i374 = ((($s)) + 10|0);
 $53 = HEAP8[$arrayidx7$i374>>0]|0;
 $54 = $53&255;
 $55 = (_bitshift64Shl(($54|0),0,24)|0);
 $56 = (getTempRet0() | 0);
 $57 = $51 | $55;
 $58 = $52 | $56;
 $59 = (_bitshift64Lshr(($57|0),($58|0),7)|0);
 $60 = (getTempRet0() | 0);
 $61 = $59 & 2097151;
 $arrayidx1$i353 = ((($s)) + 11|0);
 $62 = HEAP8[$arrayidx1$i353>>0]|0;
 $63 = $62&255;
 $64 = (_bitshift64Shl(($63|0),0,8)|0);
 $65 = (getTempRet0() | 0);
 $66 = $64 | $54;
 $arrayidx3$i357 = ((($s)) + 12|0);
 $67 = HEAP8[$arrayidx3$i357>>0]|0;
 $68 = $67&255;
 $69 = (_bitshift64Shl(($68|0),0,16)|0);
 $70 = (getTempRet0() | 0);
 $71 = $66 | $69;
 $72 = $65 | $70;
 $arrayidx7$i361 = ((($s)) + 13|0);
 $73 = HEAP8[$arrayidx7$i361>>0]|0;
 $74 = $73&255;
 $75 = (_bitshift64Shl(($74|0),0,24)|0);
 $76 = (getTempRet0() | 0);
 $77 = $71 | $75;
 $78 = $72 | $76;
 $79 = (_bitshift64Lshr(($77|0),($78|0),4)|0);
 $80 = (getTempRet0() | 0);
 $81 = $79 & 2097151;
 $add$ptr15$idx = ((($s)) + 14|0);
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx>>0]|0;
 $add$ptr15$idx288 = ((($s)) + 15|0);
 $add$ptr15$idx288$val = HEAP8[$add$ptr15$idx288>>0]|0;
 $82 = $add$ptr15$idx$val&255;
 $83 = (_bitshift64Shl(($82|0),0,8)|0);
 $84 = (getTempRet0() | 0);
 $85 = $83 | $74;
 $86 = $add$ptr15$idx288$val&255;
 $87 = (_bitshift64Shl(($86|0),0,16)|0);
 $88 = (getTempRet0() | 0);
 $89 = $85 | $87;
 $90 = $84 | $88;
 $91 = (_bitshift64Lshr(($89|0),($90|0),1)|0);
 $92 = (getTempRet0() | 0);
 $93 = $91 & 2097151;
 $arrayidx1$i333 = ((($s)) + 16|0);
 $94 = HEAP8[$arrayidx1$i333>>0]|0;
 $95 = $94&255;
 $96 = (_bitshift64Shl(($95|0),0,8)|0);
 $97 = (getTempRet0() | 0);
 $98 = $96 | $86;
 $arrayidx3$i337 = ((($s)) + 17|0);
 $99 = HEAP8[$arrayidx3$i337>>0]|0;
 $100 = $99&255;
 $101 = (_bitshift64Shl(($100|0),0,16)|0);
 $102 = (getTempRet0() | 0);
 $103 = $98 | $101;
 $104 = $97 | $102;
 $arrayidx7$i341 = ((($s)) + 18|0);
 $105 = HEAP8[$arrayidx7$i341>>0]|0;
 $106 = $105&255;
 $107 = (_bitshift64Shl(($106|0),0,24)|0);
 $108 = (getTempRet0() | 0);
 $109 = $103 | $107;
 $110 = $104 | $108;
 $111 = (_bitshift64Lshr(($109|0),($110|0),6)|0);
 $112 = (getTempRet0() | 0);
 $113 = $111 & 2097151;
 $add$ptr23$idx = ((($s)) + 19|0);
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx>>0]|0;
 $add$ptr23$idx287 = ((($s)) + 20|0);
 $add$ptr23$idx287$val = HEAP8[$add$ptr23$idx287>>0]|0;
 $114 = $add$ptr23$idx$val&255;
 $115 = (_bitshift64Shl(($114|0),0,8)|0);
 $116 = (getTempRet0() | 0);
 $117 = $115 | $106;
 $118 = $add$ptr23$idx287$val&255;
 $119 = (_bitshift64Shl(($118|0),0,16)|0);
 $120 = (getTempRet0() | 0);
 $121 = $117 | $119;
 $122 = $116 | $120;
 $123 = (_bitshift64Lshr(($121|0),($122|0),3)|0);
 $124 = (getTempRet0() | 0);
 $add$ptr27 = ((($s)) + 21|0);
 $add$ptr27$val = HEAP8[$add$ptr27>>0]|0;
 $add$ptr27$idx = ((($s)) + 22|0);
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx>>0]|0;
 $add$ptr27$idx286 = ((($s)) + 23|0);
 $add$ptr27$idx286$val = HEAP8[$add$ptr27$idx286>>0]|0;
 $125 = $add$ptr27$val&255;
 $126 = $add$ptr27$idx$val&255;
 $127 = (_bitshift64Shl(($126|0),0,8)|0);
 $128 = (getTempRet0() | 0);
 $129 = $127 | $125;
 $130 = $add$ptr27$idx286$val&255;
 $131 = (_bitshift64Shl(($130|0),0,16)|0);
 $132 = (getTempRet0() | 0);
 $133 = $131 & 2031616;
 $134 = $129 | $133;
 $arrayidx1$i306 = ((($s)) + 24|0);
 $135 = HEAP8[$arrayidx1$i306>>0]|0;
 $136 = $135&255;
 $137 = (_bitshift64Shl(($136|0),0,8)|0);
 $138 = (getTempRet0() | 0);
 $139 = $137 | $130;
 $arrayidx3$i310 = ((($s)) + 25|0);
 $140 = HEAP8[$arrayidx3$i310>>0]|0;
 $141 = $140&255;
 $142 = (_bitshift64Shl(($141|0),0,16)|0);
 $143 = (getTempRet0() | 0);
 $144 = $139 | $142;
 $145 = $138 | $143;
 $arrayidx7$i314 = ((($s)) + 26|0);
 $146 = HEAP8[$arrayidx7$i314>>0]|0;
 $147 = $146&255;
 $148 = (_bitshift64Shl(($147|0),0,24)|0);
 $149 = (getTempRet0() | 0);
 $150 = $144 | $148;
 $151 = $145 | $149;
 $152 = (_bitshift64Lshr(($150|0),($151|0),5)|0);
 $153 = (getTempRet0() | 0);
 $154 = $152 & 2097151;
 $add$ptr34$idx = ((($s)) + 27|0);
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx>>0]|0;
 $add$ptr34$idx285 = ((($s)) + 28|0);
 $add$ptr34$idx285$val = HEAP8[$add$ptr34$idx285>>0]|0;
 $155 = $add$ptr34$idx$val&255;
 $156 = (_bitshift64Shl(($155|0),0,8)|0);
 $157 = (getTempRet0() | 0);
 $158 = $156 | $147;
 $159 = $add$ptr34$idx285$val&255;
 $160 = (_bitshift64Shl(($159|0),0,16)|0);
 $161 = (getTempRet0() | 0);
 $162 = $158 | $160;
 $163 = $157 | $161;
 $164 = (_bitshift64Lshr(($162|0),($163|0),2)|0);
 $165 = (getTempRet0() | 0);
 $166 = $164 & 2097151;
 $arrayidx1$i = ((($s)) + 29|0);
 $167 = HEAP8[$arrayidx1$i>>0]|0;
 $168 = $167&255;
 $169 = (_bitshift64Shl(($168|0),0,8)|0);
 $170 = (getTempRet0() | 0);
 $171 = $169 | $159;
 $arrayidx3$i = ((($s)) + 30|0);
 $172 = HEAP8[$arrayidx3$i>>0]|0;
 $173 = $172&255;
 $174 = (_bitshift64Shl(($173|0),0,16)|0);
 $175 = (getTempRet0() | 0);
 $176 = $171 | $174;
 $177 = $170 | $175;
 $arrayidx7$i = ((($s)) + 31|0);
 $178 = HEAP8[$arrayidx7$i>>0]|0;
 $179 = $178&255;
 $180 = (_bitshift64Shl(($179|0),0,24)|0);
 $181 = (getTempRet0() | 0);
 $182 = $176 | $180;
 $183 = $177 | $181;
 $184 = (_bitshift64Lshr(($182|0),($183|0),7)|0);
 $185 = (getTempRet0() | 0);
 $186 = (_i64Add(($9|0),($3|0),1048576,0)|0);
 $187 = (getTempRet0() | 0);
 $188 = (_bitshift64Lshr(($186|0),($187|0),21)|0);
 $189 = (getTempRet0() | 0);
 $190 = (_i64Add(($29|0),0,($188|0),($189|0))|0);
 $191 = (getTempRet0() | 0);
 $192 = $186 & 2097152;
 $193 = (_i64Subtract(($9|0),($3|0),($192|0),0)|0);
 $194 = (getTempRet0() | 0);
 $195 = (_i64Add(($41|0),0,1048576,0)|0);
 $196 = (getTempRet0() | 0);
 $197 = (_bitshift64Lshr(($195|0),($196|0),21)|0);
 $198 = (getTempRet0() | 0);
 $199 = (_i64Add(($61|0),0,($197|0),($198|0))|0);
 $200 = (getTempRet0() | 0);
 $201 = $195 & 2097152;
 $202 = (_i64Add(($81|0),0,1048576,0)|0);
 $203 = (getTempRet0() | 0);
 $204 = (_bitshift64Lshr(($202|0),($203|0),21)|0);
 $205 = (getTempRet0() | 0);
 $206 = (_i64Add(($93|0),0,($204|0),($205|0))|0);
 $207 = (getTempRet0() | 0);
 $208 = $202 & 2097152;
 $209 = (_i64Add(($113|0),0,1048576,0)|0);
 $210 = (getTempRet0() | 0);
 $211 = (_bitshift64Lshr(($209|0),($210|0),21)|0);
 $212 = (getTempRet0() | 0);
 $213 = (_i64Add(($123|0),($124|0),($211|0),($212|0))|0);
 $214 = (getTempRet0() | 0);
 $215 = $209 & 2097152;
 $216 = (_i64Add(($134|0),($128|0),1048576,0)|0);
 $217 = (getTempRet0() | 0);
 $218 = (_bitshift64Lshr(($216|0),($217|0),21)|0);
 $219 = (getTempRet0() | 0);
 $220 = (_i64Add(($154|0),0,($218|0),($219|0))|0);
 $221 = (getTempRet0() | 0);
 $222 = $216 & 2097152;
 $223 = (_i64Add(($166|0),0,1048576,0)|0);
 $224 = (getTempRet0() | 0);
 $225 = (_bitshift64Lshr(($223|0),($224|0),21)|0);
 $226 = (getTempRet0() | 0);
 $227 = (_i64Add(($184|0),($185|0),($225|0),($226|0))|0);
 $228 = (getTempRet0() | 0);
 $229 = $223 & 2097152;
 $230 = (_i64Add(($190|0),($191|0),1048576,0)|0);
 $231 = (getTempRet0() | 0);
 $232 = (_bitshift64Lshr(($230|0),($231|0),21)|0);
 $233 = (getTempRet0() | 0);
 $234 = $230 & 6291456;
 $235 = (_i64Subtract(($190|0),($191|0),($234|0),0)|0);
 $236 = (getTempRet0() | 0);
 $237 = (_i64Add(($199|0),($200|0),1048576,0)|0);
 $238 = (getTempRet0() | 0);
 $239 = (_bitshift64Lshr(($237|0),($238|0),21)|0);
 $240 = (getTempRet0() | 0);
 $241 = $237 & 6291456;
 $242 = (_i64Subtract(($199|0),($200|0),($241|0),0)|0);
 $243 = (getTempRet0() | 0);
 $244 = (_i64Add(($206|0),($207|0),1048576,0)|0);
 $245 = (getTempRet0() | 0);
 $246 = (_bitshift64Lshr(($244|0),($245|0),21)|0);
 $247 = (getTempRet0() | 0);
 $248 = $244 & 6291456;
 $249 = (_i64Subtract(($206|0),($207|0),($248|0),0)|0);
 $250 = (getTempRet0() | 0);
 $251 = (_i64Add(($213|0),($214|0),1048576,0)|0);
 $252 = (getTempRet0() | 0);
 $253 = (_bitshift64Lshr(($251|0),($252|0),21)|0);
 $254 = (getTempRet0() | 0);
 $255 = $251 & 6291456;
 $256 = (_i64Subtract(($213|0),($214|0),($255|0),0)|0);
 $257 = (getTempRet0() | 0);
 $258 = (_i64Add(($220|0),($221|0),1048576,0)|0);
 $259 = (getTempRet0() | 0);
 $260 = (_bitshift64Lshr(($258|0),($259|0),21)|0);
 $261 = (getTempRet0() | 0);
 $262 = $258 & 6291456;
 $263 = (_i64Subtract(($220|0),($221|0),($262|0),0)|0);
 $264 = (getTempRet0() | 0);
 $265 = (_i64Add(($227|0),($228|0),1048576,0)|0);
 $266 = (getTempRet0() | 0);
 $267 = (_bitshift64Lshr(($265|0),($266|0),21)|0);
 $268 = (getTempRet0() | 0);
 $269 = $265 & -2097152;
 $270 = $266 & 134217727;
 $271 = (_i64Subtract(($227|0),($228|0),($269|0),($270|0))|0);
 $272 = (getTempRet0() | 0);
 $273 = (___muldi3(($267|0),($268|0),666643,0)|0);
 $274 = (getTempRet0() | 0);
 $275 = (_i64Add(($273|0),($274|0),($193|0),($194|0))|0);
 $276 = (getTempRet0() | 0);
 $277 = (___muldi3(($267|0),($268|0),470296,0)|0);
 $278 = (getTempRet0() | 0);
 $279 = (_i64Add(($235|0),($236|0),($277|0),($278|0))|0);
 $280 = (getTempRet0() | 0);
 $281 = (___muldi3(($267|0),($268|0),654183,0)|0);
 $282 = (getTempRet0() | 0);
 $283 = (___muldi3(($267|0),($268|0),-997805,-1)|0);
 $284 = (getTempRet0() | 0);
 $285 = (_i64Add(($242|0),($243|0),($283|0),($284|0))|0);
 $286 = (getTempRet0() | 0);
 $287 = (___muldi3(($267|0),($268|0),136657,0)|0);
 $288 = (getTempRet0() | 0);
 $289 = (___muldi3(($267|0),($268|0),-683901,-1)|0);
 $290 = (getTempRet0() | 0);
 $291 = (_i64Add(($249|0),($250|0),($289|0),($290|0))|0);
 $292 = (getTempRet0() | 0);
 $293 = (_bitshift64Ashr(($275|0),($276|0),21)|0);
 $294 = (getTempRet0() | 0);
 $295 = (_i64Add(($279|0),($280|0),($293|0),($294|0))|0);
 $296 = (getTempRet0() | 0);
 $297 = $275 & 2097151;
 $298 = (_bitshift64Ashr(($295|0),($296|0),21)|0);
 $299 = (getTempRet0() | 0);
 $300 = (_i64Add(($232|0),($233|0),($41|0),0)|0);
 $301 = (getTempRet0() | 0);
 $302 = (_i64Subtract(($300|0),($301|0),($201|0),0)|0);
 $303 = (getTempRet0() | 0);
 $304 = (_i64Add(($302|0),($303|0),($281|0),($282|0))|0);
 $305 = (getTempRet0() | 0);
 $306 = (_i64Add(($304|0),($305|0),($298|0),($299|0))|0);
 $307 = (getTempRet0() | 0);
 $308 = $295 & 2097151;
 $309 = (_bitshift64Ashr(($306|0),($307|0),21)|0);
 $310 = (getTempRet0() | 0);
 $311 = (_i64Add(($285|0),($286|0),($309|0),($310|0))|0);
 $312 = (getTempRet0() | 0);
 $313 = $306 & 2097151;
 $314 = (_bitshift64Ashr(($311|0),($312|0),21)|0);
 $315 = (getTempRet0() | 0);
 $316 = (_i64Add(($81|0),0,($239|0),($240|0))|0);
 $317 = (getTempRet0() | 0);
 $318 = (_i64Subtract(($316|0),($317|0),($208|0),0)|0);
 $319 = (getTempRet0() | 0);
 $320 = (_i64Add(($318|0),($319|0),($287|0),($288|0))|0);
 $321 = (getTempRet0() | 0);
 $322 = (_i64Add(($320|0),($321|0),($314|0),($315|0))|0);
 $323 = (getTempRet0() | 0);
 $324 = $311 & 2097151;
 $325 = (_bitshift64Ashr(($322|0),($323|0),21)|0);
 $326 = (getTempRet0() | 0);
 $327 = (_i64Add(($291|0),($292|0),($325|0),($326|0))|0);
 $328 = (getTempRet0() | 0);
 $329 = $322 & 2097151;
 $330 = (_bitshift64Ashr(($327|0),($328|0),21)|0);
 $331 = (getTempRet0() | 0);
 $332 = (_i64Add(($113|0),0,($246|0),($247|0))|0);
 $333 = (getTempRet0() | 0);
 $334 = (_i64Subtract(($332|0),($333|0),($215|0),0)|0);
 $335 = (getTempRet0() | 0);
 $336 = (_i64Add(($334|0),($335|0),($330|0),($331|0))|0);
 $337 = (getTempRet0() | 0);
 $338 = $327 & 2097151;
 $339 = (_bitshift64Ashr(($336|0),($337|0),21)|0);
 $340 = (getTempRet0() | 0);
 $341 = (_i64Add(($339|0),($340|0),($256|0),($257|0))|0);
 $342 = (getTempRet0() | 0);
 $343 = $336 & 2097151;
 $344 = (_bitshift64Ashr(($341|0),($342|0),21)|0);
 $345 = (getTempRet0() | 0);
 $346 = (_i64Add(($253|0),($254|0),($134|0),($128|0))|0);
 $347 = (getTempRet0() | 0);
 $348 = (_i64Subtract(($346|0),($347|0),($222|0),0)|0);
 $349 = (getTempRet0() | 0);
 $350 = (_i64Add(($348|0),($349|0),($344|0),($345|0))|0);
 $351 = (getTempRet0() | 0);
 $352 = $341 & 2097151;
 $353 = (_bitshift64Ashr(($350|0),($351|0),21)|0);
 $354 = (getTempRet0() | 0);
 $355 = (_i64Add(($353|0),($354|0),($263|0),($264|0))|0);
 $356 = (getTempRet0() | 0);
 $357 = $350 & 2097151;
 $358 = (_bitshift64Ashr(($355|0),($356|0),21)|0);
 $359 = (getTempRet0() | 0);
 $360 = (_i64Add(($260|0),($261|0),($166|0),0)|0);
 $361 = (getTempRet0() | 0);
 $362 = (_i64Subtract(($360|0),($361|0),($229|0),0)|0);
 $363 = (getTempRet0() | 0);
 $364 = (_i64Add(($362|0),($363|0),($358|0),($359|0))|0);
 $365 = (getTempRet0() | 0);
 $366 = $355 & 2097151;
 $367 = (_bitshift64Ashr(($364|0),($365|0),21)|0);
 $368 = (getTempRet0() | 0);
 $369 = (_i64Add(($367|0),($368|0),($271|0),($272|0))|0);
 $370 = (getTempRet0() | 0);
 $371 = $364 & 2097151;
 $372 = (_bitshift64Ashr(($369|0),($370|0),21)|0);
 $373 = (getTempRet0() | 0);
 $374 = $369 & 2097151;
 $375 = (___muldi3(($372|0),($373|0),666643,0)|0);
 $376 = (getTempRet0() | 0);
 $377 = (_i64Add(($375|0),($376|0),($297|0),0)|0);
 $378 = (getTempRet0() | 0);
 $379 = (___muldi3(($372|0),($373|0),470296,0)|0);
 $380 = (getTempRet0() | 0);
 $381 = (_i64Add(($379|0),($380|0),($308|0),0)|0);
 $382 = (getTempRet0() | 0);
 $383 = (___muldi3(($372|0),($373|0),654183,0)|0);
 $384 = (getTempRet0() | 0);
 $385 = (_i64Add(($383|0),($384|0),($313|0),0)|0);
 $386 = (getTempRet0() | 0);
 $387 = (___muldi3(($372|0),($373|0),-997805,-1)|0);
 $388 = (getTempRet0() | 0);
 $389 = (_i64Add(($387|0),($388|0),($324|0),0)|0);
 $390 = (getTempRet0() | 0);
 $391 = (___muldi3(($372|0),($373|0),136657,0)|0);
 $392 = (getTempRet0() | 0);
 $393 = (_i64Add(($391|0),($392|0),($329|0),0)|0);
 $394 = (getTempRet0() | 0);
 $395 = (___muldi3(($372|0),($373|0),-683901,-1)|0);
 $396 = (getTempRet0() | 0);
 $397 = (_i64Add(($395|0),($396|0),($338|0),0)|0);
 $398 = (getTempRet0() | 0);
 $399 = (_bitshift64Ashr(($377|0),($378|0),21)|0);
 $400 = (getTempRet0() | 0);
 $401 = (_i64Add(($381|0),($382|0),($399|0),($400|0))|0);
 $402 = (getTempRet0() | 0);
 $403 = (_bitshift64Ashr(($401|0),($402|0),21)|0);
 $404 = (getTempRet0() | 0);
 $405 = (_i64Add(($385|0),($386|0),($403|0),($404|0))|0);
 $406 = (getTempRet0() | 0);
 $407 = $401 & 2097151;
 $408 = (_bitshift64Ashr(($405|0),($406|0),21)|0);
 $409 = (getTempRet0() | 0);
 $410 = (_i64Add(($389|0),($390|0),($408|0),($409|0))|0);
 $411 = (getTempRet0() | 0);
 $412 = $405 & 2097151;
 $413 = (_bitshift64Ashr(($410|0),($411|0),21)|0);
 $414 = (getTempRet0() | 0);
 $415 = (_i64Add(($393|0),($394|0),($413|0),($414|0))|0);
 $416 = (getTempRet0() | 0);
 $417 = $410 & 2097151;
 $418 = (_bitshift64Ashr(($415|0),($416|0),21)|0);
 $419 = (getTempRet0() | 0);
 $420 = (_i64Add(($397|0),($398|0),($418|0),($419|0))|0);
 $421 = (getTempRet0() | 0);
 $422 = $415 & 2097151;
 $423 = (_bitshift64Ashr(($420|0),($421|0),21)|0);
 $424 = (getTempRet0() | 0);
 $425 = (_i64Add(($423|0),($424|0),($343|0),0)|0);
 $426 = (getTempRet0() | 0);
 $427 = $420 & 2097151;
 $428 = (_bitshift64Ashr(($425|0),($426|0),21)|0);
 $429 = (getTempRet0() | 0);
 $430 = (_i64Add(($428|0),($429|0),($352|0),0)|0);
 $431 = (getTempRet0() | 0);
 $432 = $425 & 2097151;
 $433 = (_bitshift64Ashr(($430|0),($431|0),21)|0);
 $434 = (getTempRet0() | 0);
 $435 = (_i64Add(($433|0),($434|0),($357|0),0)|0);
 $436 = (getTempRet0() | 0);
 $437 = (_bitshift64Ashr(($435|0),($436|0),21)|0);
 $438 = (getTempRet0() | 0);
 $439 = (_i64Add(($437|0),($438|0),($366|0),0)|0);
 $440 = (getTempRet0() | 0);
 $441 = (_bitshift64Ashr(($439|0),($440|0),21)|0);
 $442 = (getTempRet0() | 0);
 $443 = (_i64Add(($441|0),($442|0),($371|0),0)|0);
 $444 = (getTempRet0() | 0);
 $445 = $439 & 2097151;
 $446 = (_bitshift64Ashr(($443|0),($444|0),21)|0);
 $447 = (getTempRet0() | 0);
 $448 = (_i64Add(($446|0),($447|0),($374|0),0)|0);
 $449 = (getTempRet0() | 0);
 $450 = $443 & 2097151;
 $451 = $377&255;
 HEAP8[$s>>0] = $451;
 $452 = (_bitshift64Lshr(($377|0),($378|0),8)|0);
 $453 = (getTempRet0() | 0);
 $454 = $452&255;
 HEAP8[$s$idx>>0] = $454;
 $455 = (_bitshift64Lshr(($377|0),($378|0),16)|0);
 $456 = (getTempRet0() | 0);
 $457 = $455 & 31;
 $458 = (_bitshift64Shl(($407|0),0,5)|0);
 $459 = (getTempRet0() | 0);
 $460 = $458 | $457;
 $461 = $460&255;
 HEAP8[$s$idx290>>0] = $461;
 $462 = (_bitshift64Lshr(($401|0),($402|0),3)|0);
 $463 = (getTempRet0() | 0);
 $464 = $462&255;
 HEAP8[$arrayidx1$i386>>0] = $464;
 $465 = (_bitshift64Lshr(($401|0),($402|0),11)|0);
 $466 = (getTempRet0() | 0);
 $467 = $465&255;
 HEAP8[$arrayidx3$i390>>0] = $467;
 $468 = (_bitshift64Lshr(($407|0),0,19)|0);
 $469 = (getTempRet0() | 0);
 $470 = (_bitshift64Shl(($412|0),0,2)|0);
 $471 = (getTempRet0() | 0);
 $472 = $470 | $468;
 $471 | $469;
 $473 = $472&255;
 HEAP8[$arrayidx7$i394>>0] = $473;
 $474 = (_bitshift64Lshr(($405|0),($406|0),6)|0);
 $475 = (getTempRet0() | 0);
 $476 = $474&255;
 HEAP8[$add$ptr3$idx>>0] = $476;
 $477 = (_bitshift64Lshr(($412|0),0,14)|0);
 $478 = (getTempRet0() | 0);
 $479 = (_bitshift64Shl(($417|0),0,7)|0);
 $480 = (getTempRet0() | 0);
 $481 = $479 | $477;
 $480 | $478;
 $482 = $481&255;
 HEAP8[$add$ptr3$idx289>>0] = $482;
 $483 = (_bitshift64Lshr(($410|0),($411|0),1)|0);
 $484 = (getTempRet0() | 0);
 $485 = $483&255;
 HEAP8[$arrayidx1$i366>>0] = $485;
 $486 = (_bitshift64Lshr(($410|0),($411|0),9)|0);
 $487 = (getTempRet0() | 0);
 $488 = $486&255;
 HEAP8[$arrayidx3$i370>>0] = $488;
 $489 = (_bitshift64Lshr(($417|0),0,17)|0);
 $490 = (getTempRet0() | 0);
 $491 = (_bitshift64Shl(($422|0),0,4)|0);
 $492 = (getTempRet0() | 0);
 $493 = $491 | $489;
 $492 | $490;
 $494 = $493&255;
 HEAP8[$arrayidx7$i374>>0] = $494;
 $495 = (_bitshift64Lshr(($415|0),($416|0),4)|0);
 $496 = (getTempRet0() | 0);
 $497 = $495&255;
 HEAP8[$arrayidx1$i353>>0] = $497;
 $498 = (_bitshift64Lshr(($415|0),($416|0),12)|0);
 $499 = (getTempRet0() | 0);
 $500 = $498&255;
 HEAP8[$arrayidx3$i357>>0] = $500;
 $501 = (_bitshift64Lshr(($422|0),0,20)|0);
 $502 = (getTempRet0() | 0);
 $503 = (_bitshift64Shl(($427|0),0,1)|0);
 $504 = (getTempRet0() | 0);
 $505 = $503 | $501;
 $504 | $502;
 $506 = $505&255;
 HEAP8[$arrayidx7$i361>>0] = $506;
 $507 = (_bitshift64Lshr(($420|0),($421|0),7)|0);
 $508 = (getTempRet0() | 0);
 $509 = $507&255;
 HEAP8[$add$ptr15$idx>>0] = $509;
 $510 = (_bitshift64Lshr(($427|0),0,15)|0);
 $511 = (getTempRet0() | 0);
 $512 = (_bitshift64Shl(($432|0),0,6)|0);
 $513 = (getTempRet0() | 0);
 $514 = $512 | $510;
 $513 | $511;
 $515 = $514&255;
 HEAP8[$add$ptr15$idx288>>0] = $515;
 $516 = (_bitshift64Lshr(($425|0),($426|0),2)|0);
 $517 = (getTempRet0() | 0);
 $518 = $516&255;
 HEAP8[$arrayidx1$i333>>0] = $518;
 $519 = (_bitshift64Lshr(($425|0),($426|0),10)|0);
 $520 = (getTempRet0() | 0);
 $521 = $519&255;
 HEAP8[$arrayidx3$i337>>0] = $521;
 $522 = (_bitshift64Lshr(($432|0),0,18)|0);
 $523 = (getTempRet0() | 0);
 $524 = (_bitshift64Shl(($430|0),($431|0),3)|0);
 $525 = (getTempRet0() | 0);
 $526 = $524 | $522;
 $525 | $523;
 $527 = $526&255;
 HEAP8[$arrayidx7$i341>>0] = $527;
 $528 = (_bitshift64Lshr(($430|0),($431|0),5)|0);
 $529 = (getTempRet0() | 0);
 $530 = $528&255;
 HEAP8[$add$ptr23$idx>>0] = $530;
 $531 = (_bitshift64Lshr(($430|0),($431|0),13)|0);
 $532 = (getTempRet0() | 0);
 $533 = $531&255;
 HEAP8[$add$ptr23$idx287>>0] = $533;
 $534 = $435&255;
 HEAP8[$add$ptr27>>0] = $534;
 $535 = (_bitshift64Lshr(($435|0),($436|0),8)|0);
 $536 = (getTempRet0() | 0);
 $537 = $535&255;
 HEAP8[$add$ptr27$idx>>0] = $537;
 $538 = (_bitshift64Lshr(($435|0),($436|0),16)|0);
 $539 = (getTempRet0() | 0);
 $540 = $538 & 31;
 $541 = (_bitshift64Shl(($445|0),0,5)|0);
 $542 = (getTempRet0() | 0);
 $543 = $541 | $540;
 $544 = $543&255;
 HEAP8[$add$ptr27$idx286>>0] = $544;
 $545 = (_bitshift64Lshr(($439|0),($440|0),3)|0);
 $546 = (getTempRet0() | 0);
 $547 = $545&255;
 HEAP8[$arrayidx1$i306>>0] = $547;
 $548 = (_bitshift64Lshr(($439|0),($440|0),11)|0);
 $549 = (getTempRet0() | 0);
 $550 = $548&255;
 HEAP8[$arrayidx3$i310>>0] = $550;
 $551 = (_bitshift64Lshr(($445|0),0,19)|0);
 $552 = (getTempRet0() | 0);
 $553 = (_bitshift64Shl(($450|0),0,2)|0);
 $554 = (getTempRet0() | 0);
 $555 = $553 | $551;
 $554 | $552;
 $556 = $555&255;
 HEAP8[$arrayidx7$i314>>0] = $556;
 $557 = (_bitshift64Lshr(($443|0),($444|0),6)|0);
 $558 = (getTempRet0() | 0);
 $559 = $557&255;
 HEAP8[$add$ptr34$idx>>0] = $559;
 $560 = (_bitshift64Lshr(($450|0),0,14)|0);
 $561 = (getTempRet0() | 0);
 $562 = (_bitshift64Shl(($448|0),($449|0),7)|0);
 $563 = (getTempRet0() | 0);
 $564 = $562 | $560;
 $563 | $561;
 $565 = $564&255;
 HEAP8[$add$ptr34$idx285>>0] = $565;
 $566 = (_bitshift64Lshr(($448|0),($449|0),1)|0);
 $567 = (getTempRet0() | 0);
 $568 = $566&255;
 HEAP8[$arrayidx1$i>>0] = $568;
 $569 = (_bitshift64Lshr(($448|0),($449|0),9)|0);
 $570 = (getTempRet0() | 0);
 $571 = $569&255;
 HEAP8[$arrayidx3$i>>0] = $571;
 $572 = (_bitshift64Ashr(($448|0),($449|0),17)|0);
 $573 = (getTempRet0() | 0);
 $574 = $572&255;
 HEAP8[$arrayidx7$i>>0] = $574;
 return;
}
function _sc_add($s,$a,$b) {
 $s = $s|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$idx = 0, $a$idx$val = 0, $a$idx330 = 0, $a$idx330$val = 0, $a$val = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx328 = 0, $add$ptr15$idx328$val = 0, $add$ptr23$idx = 0;
 var $add$ptr23$idx$val = 0, $add$ptr23$idx327 = 0, $add$ptr23$idx327$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx326 = 0, $add$ptr27$idx326$val = 0, $add$ptr27$val = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx329 = 0, $add$ptr3$idx329$val = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx325 = 0, $add$ptr34$idx325$val = 0, $add$ptr47$idx = 0, $add$ptr47$idx$val = 0, $add$ptr47$idx323 = 0;
 var $add$ptr47$idx323$val = 0, $add$ptr59$idx = 0, $add$ptr59$idx$val = 0, $add$ptr59$idx322 = 0, $add$ptr59$idx322$val = 0, $add$ptr67$idx = 0, $add$ptr67$idx$val = 0, $add$ptr67$idx321 = 0, $add$ptr67$idx321$val = 0, $add$ptr71 = 0, $add$ptr71$idx = 0, $add$ptr71$idx$val = 0, $add$ptr71$idx320 = 0, $add$ptr71$idx320$val = 0, $add$ptr71$val = 0, $add$ptr78$idx = 0, $add$ptr78$idx$val = 0, $add$ptr78$idx319 = 0, $add$ptr78$idx319$val = 0, $arrayidx1$i = 0;
 var $arrayidx1$i346 = 0, $arrayidx1$i373 = 0, $arrayidx1$i393 = 0, $arrayidx1$i406 = 0, $arrayidx1$i426 = 0, $arrayidx1$i446 = 0, $arrayidx1$i466 = 0, $arrayidx1$i493 = 0, $arrayidx1$i513 = 0, $arrayidx1$i526 = 0, $arrayidx1$i546 = 0, $arrayidx272 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx282 = 0, $arrayidx287 = 0, $arrayidx290 = 0, $arrayidx295 = 0, $arrayidx298 = 0, $arrayidx3$i = 0;
 var $arrayidx3$i350 = 0, $arrayidx3$i377 = 0, $arrayidx3$i397 = 0, $arrayidx3$i410 = 0, $arrayidx3$i430 = 0, $arrayidx3$i450 = 0, $arrayidx3$i470 = 0, $arrayidx3$i497 = 0, $arrayidx3$i517 = 0, $arrayidx3$i530 = 0, $arrayidx3$i550 = 0, $arrayidx301 = 0, $arrayidx306 = 0, $arrayidx309 = 0, $arrayidx312 = 0, $arrayidx317 = 0, $arrayidx320 = 0, $arrayidx325 = 0, $arrayidx328 = 0, $arrayidx331 = 0;
 var $arrayidx336 = 0, $arrayidx339 = 0, $arrayidx342 = 0, $arrayidx345 = 0, $arrayidx348 = 0, $arrayidx353 = 0, $arrayidx356 = 0, $arrayidx359 = 0, $arrayidx364 = 0, $arrayidx367 = 0, $arrayidx372 = 0, $arrayidx375 = 0, $arrayidx378 = 0, $arrayidx381 = 0, $arrayidx7$i = 0, $arrayidx7$i354 = 0, $arrayidx7$i381 = 0, $arrayidx7$i401 = 0, $arrayidx7$i414 = 0, $arrayidx7$i434 = 0;
 var $arrayidx7$i454 = 0, $arrayidx7$i474 = 0, $arrayidx7$i501 = 0, $arrayidx7$i521 = 0, $arrayidx7$i534 = 0, $arrayidx7$i554 = 0, $b$idx = 0, $b$idx$val = 0, $b$idx324 = 0, $b$idx324$val = 0, $b$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $a$val = HEAP8[$a>>0]|0;
 $a$idx = ((($a)) + 1|0);
 $a$idx$val = HEAP8[$a$idx>>0]|0;
 $a$idx330 = ((($a)) + 2|0);
 $a$idx330$val = HEAP8[$a$idx330>>0]|0;
 $0 = $a$val&255;
 $1 = $a$idx$val&255;
 $2 = (_bitshift64Shl(($1|0),0,8)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2 | $0;
 $5 = $a$idx330$val&255;
 $6 = (_bitshift64Shl(($5|0),0,16)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2031616;
 $9 = $4 | $8;
 $arrayidx1$i546 = ((($a)) + 3|0);
 $10 = HEAP8[$arrayidx1$i546>>0]|0;
 $11 = $10&255;
 $12 = (_bitshift64Shl(($11|0),0,8)|0);
 $13 = (getTempRet0() | 0);
 $14 = $12 | $5;
 $arrayidx3$i550 = ((($a)) + 4|0);
 $15 = HEAP8[$arrayidx3$i550>>0]|0;
 $16 = $15&255;
 $17 = (_bitshift64Shl(($16|0),0,16)|0);
 $18 = (getTempRet0() | 0);
 $19 = $14 | $17;
 $20 = $13 | $18;
 $arrayidx7$i554 = ((($a)) + 5|0);
 $21 = HEAP8[$arrayidx7$i554>>0]|0;
 $22 = $21&255;
 $23 = (_bitshift64Shl(($22|0),0,24)|0);
 $24 = (getTempRet0() | 0);
 $25 = $19 | $23;
 $26 = $20 | $24;
 $27 = (_bitshift64Lshr(($25|0),($26|0),5)|0);
 $28 = (getTempRet0() | 0);
 $29 = $27 & 2097151;
 $add$ptr3$idx = ((($a)) + 6|0);
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx>>0]|0;
 $add$ptr3$idx329 = ((($a)) + 7|0);
 $add$ptr3$idx329$val = HEAP8[$add$ptr3$idx329>>0]|0;
 $30 = $add$ptr3$idx$val&255;
 $31 = (_bitshift64Shl(($30|0),0,8)|0);
 $32 = (getTempRet0() | 0);
 $33 = $31 | $22;
 $34 = $add$ptr3$idx329$val&255;
 $35 = (_bitshift64Shl(($34|0),0,16)|0);
 $36 = (getTempRet0() | 0);
 $37 = $33 | $35;
 $38 = $32 | $36;
 $39 = (_bitshift64Lshr(($37|0),($38|0),2)|0);
 $40 = (getTempRet0() | 0);
 $41 = $39 & 2097151;
 $arrayidx1$i526 = ((($a)) + 8|0);
 $42 = HEAP8[$arrayidx1$i526>>0]|0;
 $43 = $42&255;
 $44 = (_bitshift64Shl(($43|0),0,8)|0);
 $45 = (getTempRet0() | 0);
 $46 = $44 | $34;
 $arrayidx3$i530 = ((($a)) + 9|0);
 $47 = HEAP8[$arrayidx3$i530>>0]|0;
 $48 = $47&255;
 $49 = (_bitshift64Shl(($48|0),0,16)|0);
 $50 = (getTempRet0() | 0);
 $51 = $46 | $49;
 $52 = $45 | $50;
 $arrayidx7$i534 = ((($a)) + 10|0);
 $53 = HEAP8[$arrayidx7$i534>>0]|0;
 $54 = $53&255;
 $55 = (_bitshift64Shl(($54|0),0,24)|0);
 $56 = (getTempRet0() | 0);
 $57 = $51 | $55;
 $58 = $52 | $56;
 $59 = (_bitshift64Lshr(($57|0),($58|0),7)|0);
 $60 = (getTempRet0() | 0);
 $61 = $59 & 2097151;
 $arrayidx1$i513 = ((($a)) + 11|0);
 $62 = HEAP8[$arrayidx1$i513>>0]|0;
 $63 = $62&255;
 $64 = (_bitshift64Shl(($63|0),0,8)|0);
 $65 = (getTempRet0() | 0);
 $66 = $64 | $54;
 $arrayidx3$i517 = ((($a)) + 12|0);
 $67 = HEAP8[$arrayidx3$i517>>0]|0;
 $68 = $67&255;
 $69 = (_bitshift64Shl(($68|0),0,16)|0);
 $70 = (getTempRet0() | 0);
 $71 = $66 | $69;
 $72 = $65 | $70;
 $arrayidx7$i521 = ((($a)) + 13|0);
 $73 = HEAP8[$arrayidx7$i521>>0]|0;
 $74 = $73&255;
 $75 = (_bitshift64Shl(($74|0),0,24)|0);
 $76 = (getTempRet0() | 0);
 $77 = $71 | $75;
 $78 = $72 | $76;
 $79 = (_bitshift64Lshr(($77|0),($78|0),4)|0);
 $80 = (getTempRet0() | 0);
 $81 = $79 & 2097151;
 $add$ptr15$idx = ((($a)) + 14|0);
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx>>0]|0;
 $add$ptr15$idx328 = ((($a)) + 15|0);
 $add$ptr15$idx328$val = HEAP8[$add$ptr15$idx328>>0]|0;
 $82 = $add$ptr15$idx$val&255;
 $83 = (_bitshift64Shl(($82|0),0,8)|0);
 $84 = (getTempRet0() | 0);
 $85 = $83 | $74;
 $86 = $add$ptr15$idx328$val&255;
 $87 = (_bitshift64Shl(($86|0),0,16)|0);
 $88 = (getTempRet0() | 0);
 $89 = $85 | $87;
 $90 = $84 | $88;
 $91 = (_bitshift64Lshr(($89|0),($90|0),1)|0);
 $92 = (getTempRet0() | 0);
 $93 = $91 & 2097151;
 $arrayidx1$i493 = ((($a)) + 16|0);
 $94 = HEAP8[$arrayidx1$i493>>0]|0;
 $95 = $94&255;
 $96 = (_bitshift64Shl(($95|0),0,8)|0);
 $97 = (getTempRet0() | 0);
 $98 = $96 | $86;
 $arrayidx3$i497 = ((($a)) + 17|0);
 $99 = HEAP8[$arrayidx3$i497>>0]|0;
 $100 = $99&255;
 $101 = (_bitshift64Shl(($100|0),0,16)|0);
 $102 = (getTempRet0() | 0);
 $103 = $98 | $101;
 $104 = $97 | $102;
 $arrayidx7$i501 = ((($a)) + 18|0);
 $105 = HEAP8[$arrayidx7$i501>>0]|0;
 $106 = $105&255;
 $107 = (_bitshift64Shl(($106|0),0,24)|0);
 $108 = (getTempRet0() | 0);
 $109 = $103 | $107;
 $110 = $104 | $108;
 $111 = (_bitshift64Lshr(($109|0),($110|0),6)|0);
 $112 = (getTempRet0() | 0);
 $113 = $111 & 2097151;
 $add$ptr23$idx = ((($a)) + 19|0);
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx>>0]|0;
 $add$ptr23$idx327 = ((($a)) + 20|0);
 $add$ptr23$idx327$val = HEAP8[$add$ptr23$idx327>>0]|0;
 $114 = $add$ptr23$idx$val&255;
 $115 = (_bitshift64Shl(($114|0),0,8)|0);
 $116 = (getTempRet0() | 0);
 $117 = $115 | $106;
 $118 = $add$ptr23$idx327$val&255;
 $119 = (_bitshift64Shl(($118|0),0,16)|0);
 $120 = (getTempRet0() | 0);
 $121 = $117 | $119;
 $122 = $116 | $120;
 $123 = (_bitshift64Lshr(($121|0),($122|0),3)|0);
 $124 = (getTempRet0() | 0);
 $add$ptr27 = ((($a)) + 21|0);
 $add$ptr27$val = HEAP8[$add$ptr27>>0]|0;
 $add$ptr27$idx = ((($a)) + 22|0);
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx>>0]|0;
 $add$ptr27$idx326 = ((($a)) + 23|0);
 $add$ptr27$idx326$val = HEAP8[$add$ptr27$idx326>>0]|0;
 $125 = $add$ptr27$val&255;
 $126 = $add$ptr27$idx$val&255;
 $127 = (_bitshift64Shl(($126|0),0,8)|0);
 $128 = (getTempRet0() | 0);
 $129 = $127 | $125;
 $130 = $add$ptr27$idx326$val&255;
 $131 = (_bitshift64Shl(($130|0),0,16)|0);
 $132 = (getTempRet0() | 0);
 $133 = $131 & 2031616;
 $134 = $129 | $133;
 $arrayidx1$i466 = ((($a)) + 24|0);
 $135 = HEAP8[$arrayidx1$i466>>0]|0;
 $136 = $135&255;
 $137 = (_bitshift64Shl(($136|0),0,8)|0);
 $138 = (getTempRet0() | 0);
 $139 = $137 | $130;
 $arrayidx3$i470 = ((($a)) + 25|0);
 $140 = HEAP8[$arrayidx3$i470>>0]|0;
 $141 = $140&255;
 $142 = (_bitshift64Shl(($141|0),0,16)|0);
 $143 = (getTempRet0() | 0);
 $144 = $139 | $142;
 $145 = $138 | $143;
 $arrayidx7$i474 = ((($a)) + 26|0);
 $146 = HEAP8[$arrayidx7$i474>>0]|0;
 $147 = $146&255;
 $148 = (_bitshift64Shl(($147|0),0,24)|0);
 $149 = (getTempRet0() | 0);
 $150 = $144 | $148;
 $151 = $145 | $149;
 $152 = (_bitshift64Lshr(($150|0),($151|0),5)|0);
 $153 = (getTempRet0() | 0);
 $154 = $152 & 2097151;
 $add$ptr34$idx = ((($a)) + 27|0);
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx>>0]|0;
 $add$ptr34$idx325 = ((($a)) + 28|0);
 $add$ptr34$idx325$val = HEAP8[$add$ptr34$idx325>>0]|0;
 $155 = $add$ptr34$idx$val&255;
 $156 = (_bitshift64Shl(($155|0),0,8)|0);
 $157 = (getTempRet0() | 0);
 $158 = $156 | $147;
 $159 = $add$ptr34$idx325$val&255;
 $160 = (_bitshift64Shl(($159|0),0,16)|0);
 $161 = (getTempRet0() | 0);
 $162 = $158 | $160;
 $163 = $157 | $161;
 $164 = (_bitshift64Lshr(($162|0),($163|0),2)|0);
 $165 = (getTempRet0() | 0);
 $166 = $164 & 2097151;
 $arrayidx1$i446 = ((($a)) + 29|0);
 $167 = HEAP8[$arrayidx1$i446>>0]|0;
 $168 = $167&255;
 $169 = (_bitshift64Shl(($168|0),0,8)|0);
 $170 = (getTempRet0() | 0);
 $171 = $169 | $159;
 $arrayidx3$i450 = ((($a)) + 30|0);
 $172 = HEAP8[$arrayidx3$i450>>0]|0;
 $173 = $172&255;
 $174 = (_bitshift64Shl(($173|0),0,16)|0);
 $175 = (getTempRet0() | 0);
 $176 = $171 | $174;
 $177 = $170 | $175;
 $arrayidx7$i454 = ((($a)) + 31|0);
 $178 = HEAP8[$arrayidx7$i454>>0]|0;
 $179 = $178&255;
 $180 = (_bitshift64Shl(($179|0),0,24)|0);
 $181 = (getTempRet0() | 0);
 $182 = $176 | $180;
 $183 = $177 | $181;
 $184 = (_bitshift64Lshr(($182|0),($183|0),7)|0);
 $185 = (getTempRet0() | 0);
 $b$val = HEAP8[$b>>0]|0;
 $b$idx = ((($b)) + 1|0);
 $b$idx$val = HEAP8[$b$idx>>0]|0;
 $b$idx324 = ((($b)) + 2|0);
 $b$idx324$val = HEAP8[$b$idx324>>0]|0;
 $186 = $b$val&255;
 $187 = $b$idx$val&255;
 $188 = (_bitshift64Shl(($187|0),0,8)|0);
 $189 = (getTempRet0() | 0);
 $190 = $188 | $186;
 $191 = $b$idx324$val&255;
 $192 = (_bitshift64Shl(($191|0),0,16)|0);
 $193 = (getTempRet0() | 0);
 $194 = $192 & 2031616;
 $195 = $190 | $194;
 $arrayidx1$i426 = ((($b)) + 3|0);
 $196 = HEAP8[$arrayidx1$i426>>0]|0;
 $197 = $196&255;
 $198 = (_bitshift64Shl(($197|0),0,8)|0);
 $199 = (getTempRet0() | 0);
 $200 = $198 | $191;
 $arrayidx3$i430 = ((($b)) + 4|0);
 $201 = HEAP8[$arrayidx3$i430>>0]|0;
 $202 = $201&255;
 $203 = (_bitshift64Shl(($202|0),0,16)|0);
 $204 = (getTempRet0() | 0);
 $205 = $200 | $203;
 $206 = $199 | $204;
 $arrayidx7$i434 = ((($b)) + 5|0);
 $207 = HEAP8[$arrayidx7$i434>>0]|0;
 $208 = $207&255;
 $209 = (_bitshift64Shl(($208|0),0,24)|0);
 $210 = (getTempRet0() | 0);
 $211 = $205 | $209;
 $212 = $206 | $210;
 $213 = (_bitshift64Lshr(($211|0),($212|0),5)|0);
 $214 = (getTempRet0() | 0);
 $215 = $213 & 2097151;
 $add$ptr47$idx = ((($b)) + 6|0);
 $add$ptr47$idx$val = HEAP8[$add$ptr47$idx>>0]|0;
 $add$ptr47$idx323 = ((($b)) + 7|0);
 $add$ptr47$idx323$val = HEAP8[$add$ptr47$idx323>>0]|0;
 $216 = $add$ptr47$idx$val&255;
 $217 = (_bitshift64Shl(($216|0),0,8)|0);
 $218 = (getTempRet0() | 0);
 $219 = $217 | $208;
 $220 = $add$ptr47$idx323$val&255;
 $221 = (_bitshift64Shl(($220|0),0,16)|0);
 $222 = (getTempRet0() | 0);
 $223 = $219 | $221;
 $224 = $218 | $222;
 $225 = (_bitshift64Lshr(($223|0),($224|0),2)|0);
 $226 = (getTempRet0() | 0);
 $227 = $225 & 2097151;
 $arrayidx1$i406 = ((($b)) + 8|0);
 $228 = HEAP8[$arrayidx1$i406>>0]|0;
 $229 = $228&255;
 $230 = (_bitshift64Shl(($229|0),0,8)|0);
 $231 = (getTempRet0() | 0);
 $232 = $230 | $220;
 $arrayidx3$i410 = ((($b)) + 9|0);
 $233 = HEAP8[$arrayidx3$i410>>0]|0;
 $234 = $233&255;
 $235 = (_bitshift64Shl(($234|0),0,16)|0);
 $236 = (getTempRet0() | 0);
 $237 = $232 | $235;
 $238 = $231 | $236;
 $arrayidx7$i414 = ((($b)) + 10|0);
 $239 = HEAP8[$arrayidx7$i414>>0]|0;
 $240 = $239&255;
 $241 = (_bitshift64Shl(($240|0),0,24)|0);
 $242 = (getTempRet0() | 0);
 $243 = $237 | $241;
 $244 = $238 | $242;
 $245 = (_bitshift64Lshr(($243|0),($244|0),7)|0);
 $246 = (getTempRet0() | 0);
 $247 = $245 & 2097151;
 $arrayidx1$i393 = ((($b)) + 11|0);
 $248 = HEAP8[$arrayidx1$i393>>0]|0;
 $249 = $248&255;
 $250 = (_bitshift64Shl(($249|0),0,8)|0);
 $251 = (getTempRet0() | 0);
 $252 = $250 | $240;
 $arrayidx3$i397 = ((($b)) + 12|0);
 $253 = HEAP8[$arrayidx3$i397>>0]|0;
 $254 = $253&255;
 $255 = (_bitshift64Shl(($254|0),0,16)|0);
 $256 = (getTempRet0() | 0);
 $257 = $252 | $255;
 $258 = $251 | $256;
 $arrayidx7$i401 = ((($b)) + 13|0);
 $259 = HEAP8[$arrayidx7$i401>>0]|0;
 $260 = $259&255;
 $261 = (_bitshift64Shl(($260|0),0,24)|0);
 $262 = (getTempRet0() | 0);
 $263 = $257 | $261;
 $264 = $258 | $262;
 $265 = (_bitshift64Lshr(($263|0),($264|0),4)|0);
 $266 = (getTempRet0() | 0);
 $267 = $265 & 2097151;
 $add$ptr59$idx = ((($b)) + 14|0);
 $add$ptr59$idx$val = HEAP8[$add$ptr59$idx>>0]|0;
 $add$ptr59$idx322 = ((($b)) + 15|0);
 $add$ptr59$idx322$val = HEAP8[$add$ptr59$idx322>>0]|0;
 $268 = $add$ptr59$idx$val&255;
 $269 = (_bitshift64Shl(($268|0),0,8)|0);
 $270 = (getTempRet0() | 0);
 $271 = $269 | $260;
 $272 = $add$ptr59$idx322$val&255;
 $273 = (_bitshift64Shl(($272|0),0,16)|0);
 $274 = (getTempRet0() | 0);
 $275 = $271 | $273;
 $276 = $270 | $274;
 $277 = (_bitshift64Lshr(($275|0),($276|0),1)|0);
 $278 = (getTempRet0() | 0);
 $279 = $277 & 2097151;
 $arrayidx1$i373 = ((($b)) + 16|0);
 $280 = HEAP8[$arrayidx1$i373>>0]|0;
 $281 = $280&255;
 $282 = (_bitshift64Shl(($281|0),0,8)|0);
 $283 = (getTempRet0() | 0);
 $284 = $282 | $272;
 $arrayidx3$i377 = ((($b)) + 17|0);
 $285 = HEAP8[$arrayidx3$i377>>0]|0;
 $286 = $285&255;
 $287 = (_bitshift64Shl(($286|0),0,16)|0);
 $288 = (getTempRet0() | 0);
 $289 = $284 | $287;
 $290 = $283 | $288;
 $arrayidx7$i381 = ((($b)) + 18|0);
 $291 = HEAP8[$arrayidx7$i381>>0]|0;
 $292 = $291&255;
 $293 = (_bitshift64Shl(($292|0),0,24)|0);
 $294 = (getTempRet0() | 0);
 $295 = $289 | $293;
 $296 = $290 | $294;
 $297 = (_bitshift64Lshr(($295|0),($296|0),6)|0);
 $298 = (getTempRet0() | 0);
 $299 = $297 & 2097151;
 $add$ptr67$idx = ((($b)) + 19|0);
 $add$ptr67$idx$val = HEAP8[$add$ptr67$idx>>0]|0;
 $add$ptr67$idx321 = ((($b)) + 20|0);
 $add$ptr67$idx321$val = HEAP8[$add$ptr67$idx321>>0]|0;
 $300 = $add$ptr67$idx$val&255;
 $301 = (_bitshift64Shl(($300|0),0,8)|0);
 $302 = (getTempRet0() | 0);
 $303 = $301 | $292;
 $304 = $add$ptr67$idx321$val&255;
 $305 = (_bitshift64Shl(($304|0),0,16)|0);
 $306 = (getTempRet0() | 0);
 $307 = $303 | $305;
 $308 = $302 | $306;
 $309 = (_bitshift64Lshr(($307|0),($308|0),3)|0);
 $310 = (getTempRet0() | 0);
 $add$ptr71 = ((($b)) + 21|0);
 $add$ptr71$val = HEAP8[$add$ptr71>>0]|0;
 $add$ptr71$idx = ((($b)) + 22|0);
 $add$ptr71$idx$val = HEAP8[$add$ptr71$idx>>0]|0;
 $add$ptr71$idx320 = ((($b)) + 23|0);
 $add$ptr71$idx320$val = HEAP8[$add$ptr71$idx320>>0]|0;
 $311 = $add$ptr71$val&255;
 $312 = $add$ptr71$idx$val&255;
 $313 = (_bitshift64Shl(($312|0),0,8)|0);
 $314 = (getTempRet0() | 0);
 $315 = $313 | $311;
 $316 = $add$ptr71$idx320$val&255;
 $317 = (_bitshift64Shl(($316|0),0,16)|0);
 $318 = (getTempRet0() | 0);
 $319 = $317 & 2031616;
 $320 = $315 | $319;
 $arrayidx1$i346 = ((($b)) + 24|0);
 $321 = HEAP8[$arrayidx1$i346>>0]|0;
 $322 = $321&255;
 $323 = (_bitshift64Shl(($322|0),0,8)|0);
 $324 = (getTempRet0() | 0);
 $325 = $323 | $316;
 $arrayidx3$i350 = ((($b)) + 25|0);
 $326 = HEAP8[$arrayidx3$i350>>0]|0;
 $327 = $326&255;
 $328 = (_bitshift64Shl(($327|0),0,16)|0);
 $329 = (getTempRet0() | 0);
 $330 = $325 | $328;
 $331 = $324 | $329;
 $arrayidx7$i354 = ((($b)) + 26|0);
 $332 = HEAP8[$arrayidx7$i354>>0]|0;
 $333 = $332&255;
 $334 = (_bitshift64Shl(($333|0),0,24)|0);
 $335 = (getTempRet0() | 0);
 $336 = $330 | $334;
 $337 = $331 | $335;
 $338 = (_bitshift64Lshr(($336|0),($337|0),5)|0);
 $339 = (getTempRet0() | 0);
 $340 = $338 & 2097151;
 $add$ptr78$idx = ((($b)) + 27|0);
 $add$ptr78$idx$val = HEAP8[$add$ptr78$idx>>0]|0;
 $add$ptr78$idx319 = ((($b)) + 28|0);
 $add$ptr78$idx319$val = HEAP8[$add$ptr78$idx319>>0]|0;
 $341 = $add$ptr78$idx$val&255;
 $342 = (_bitshift64Shl(($341|0),0,8)|0);
 $343 = (getTempRet0() | 0);
 $344 = $342 | $333;
 $345 = $add$ptr78$idx319$val&255;
 $346 = (_bitshift64Shl(($345|0),0,16)|0);
 $347 = (getTempRet0() | 0);
 $348 = $344 | $346;
 $349 = $343 | $347;
 $350 = (_bitshift64Lshr(($348|0),($349|0),2)|0);
 $351 = (getTempRet0() | 0);
 $352 = $350 & 2097151;
 $arrayidx1$i = ((($b)) + 29|0);
 $353 = HEAP8[$arrayidx1$i>>0]|0;
 $354 = $353&255;
 $355 = (_bitshift64Shl(($354|0),0,8)|0);
 $356 = (getTempRet0() | 0);
 $357 = $355 | $345;
 $arrayidx3$i = ((($b)) + 30|0);
 $358 = HEAP8[$arrayidx3$i>>0]|0;
 $359 = $358&255;
 $360 = (_bitshift64Shl(($359|0),0,16)|0);
 $361 = (getTempRet0() | 0);
 $362 = $357 | $360;
 $363 = $356 | $361;
 $arrayidx7$i = ((($b)) + 31|0);
 $364 = HEAP8[$arrayidx7$i>>0]|0;
 $365 = $364&255;
 $366 = (_bitshift64Shl(($365|0),0,24)|0);
 $367 = (getTempRet0() | 0);
 $368 = $362 | $366;
 $369 = $363 | $367;
 $370 = (_bitshift64Lshr(($368|0),($369|0),7)|0);
 $371 = (getTempRet0() | 0);
 $372 = (_i64Add(($195|0),($189|0),($9|0),($3|0))|0);
 $373 = (getTempRet0() | 0);
 $374 = (_i64Add(($227|0),0,($41|0),0)|0);
 $375 = (getTempRet0() | 0);
 $376 = (_i64Add(($267|0),0,($81|0),0)|0);
 $377 = (getTempRet0() | 0);
 $378 = (_i64Add(($279|0),0,($93|0),0)|0);
 $379 = (getTempRet0() | 0);
 $380 = (_i64Add(($299|0),0,($113|0),0)|0);
 $381 = (getTempRet0() | 0);
 $382 = (_i64Add(($309|0),($310|0),($123|0),($124|0))|0);
 $383 = (getTempRet0() | 0);
 $384 = (_i64Add(($320|0),($314|0),($134|0),($128|0))|0);
 $385 = (getTempRet0() | 0);
 $386 = (_i64Add(($352|0),0,($166|0),0)|0);
 $387 = (getTempRet0() | 0);
 $388 = (_i64Add(($370|0),($371|0),($184|0),($185|0))|0);
 $389 = (getTempRet0() | 0);
 $390 = (_i64Add(($372|0),($373|0),1048576,0)|0);
 $391 = (getTempRet0() | 0);
 $392 = (_bitshift64Lshr(($390|0),($391|0),21)|0);
 $393 = (getTempRet0() | 0);
 $394 = (_i64Add(($392|0),($393|0),($29|0),0)|0);
 $395 = (getTempRet0() | 0);
 $396 = (_i64Add(($394|0),($395|0),($215|0),0)|0);
 $397 = (getTempRet0() | 0);
 $398 = $390 & 6291456;
 $399 = (_i64Subtract(($372|0),($373|0),($398|0),0)|0);
 $400 = (getTempRet0() | 0);
 $401 = (_i64Add(($374|0),($375|0),1048576,0)|0);
 $402 = (getTempRet0() | 0);
 $403 = (_bitshift64Lshr(($401|0),($402|0),21)|0);
 $404 = (getTempRet0() | 0);
 $405 = (_i64Add(($403|0),($404|0),($61|0),0)|0);
 $406 = (getTempRet0() | 0);
 $407 = (_i64Add(($405|0),($406|0),($247|0),0)|0);
 $408 = (getTempRet0() | 0);
 $409 = $401 & 6291456;
 $410 = (_i64Add(($376|0),($377|0),1048576,0)|0);
 $411 = (getTempRet0() | 0);
 $412 = (_bitshift64Lshr(($410|0),($411|0),21)|0);
 $413 = (getTempRet0() | 0);
 $414 = (_i64Add(($378|0),($379|0),($412|0),($413|0))|0);
 $415 = (getTempRet0() | 0);
 $416 = $410 & 6291456;
 $417 = (_i64Add(($380|0),($381|0),1048576,0)|0);
 $418 = (getTempRet0() | 0);
 $419 = (_bitshift64Lshr(($417|0),($418|0),21)|0);
 $420 = (getTempRet0() | 0);
 $421 = (_i64Add(($382|0),($383|0),($419|0),($420|0))|0);
 $422 = (getTempRet0() | 0);
 $423 = $417 & 6291456;
 $424 = (_i64Add(($384|0),($385|0),1048576,0)|0);
 $425 = (getTempRet0() | 0);
 $426 = (_bitshift64Lshr(($424|0),($425|0),21)|0);
 $427 = (getTempRet0() | 0);
 $428 = (_i64Add(($426|0),($427|0),($154|0),0)|0);
 $429 = (getTempRet0() | 0);
 $430 = (_i64Add(($428|0),($429|0),($340|0),0)|0);
 $431 = (getTempRet0() | 0);
 $432 = $424 & 6291456;
 $433 = (_i64Add(($386|0),($387|0),1048576,0)|0);
 $434 = (getTempRet0() | 0);
 $435 = (_bitshift64Lshr(($433|0),($434|0),21)|0);
 $436 = (getTempRet0() | 0);
 $437 = (_i64Add(($388|0),($389|0),($435|0),($436|0))|0);
 $438 = (getTempRet0() | 0);
 $439 = $433 & 6291456;
 $440 = (_i64Add(($396|0),($397|0),1048576,0)|0);
 $441 = (getTempRet0() | 0);
 $442 = (_bitshift64Lshr(($440|0),($441|0),21)|0);
 $443 = (getTempRet0() | 0);
 $444 = $440 & -2097152;
 $445 = $441 & 8191;
 $446 = (_i64Subtract(($396|0),($397|0),($444|0),($445|0))|0);
 $447 = (getTempRet0() | 0);
 $448 = (_i64Add(($407|0),($408|0),1048576,0)|0);
 $449 = (getTempRet0() | 0);
 $450 = (_bitshift64Lshr(($448|0),($449|0),21)|0);
 $451 = (getTempRet0() | 0);
 $452 = $448 & -2097152;
 $453 = $449 & 8191;
 $454 = (_i64Subtract(($407|0),($408|0),($452|0),($453|0))|0);
 $455 = (getTempRet0() | 0);
 $456 = (_i64Add(($414|0),($415|0),1048576,0)|0);
 $457 = (getTempRet0() | 0);
 $458 = (_bitshift64Lshr(($456|0),($457|0),21)|0);
 $459 = (getTempRet0() | 0);
 $460 = $456 & -2097152;
 $461 = $457 & 8191;
 $462 = (_i64Subtract(($414|0),($415|0),($460|0),($461|0))|0);
 $463 = (getTempRet0() | 0);
 $464 = (_i64Add(($421|0),($422|0),1048576,0)|0);
 $465 = (getTempRet0() | 0);
 $466 = (_bitshift64Lshr(($464|0),($465|0),21)|0);
 $467 = (getTempRet0() | 0);
 $468 = $464 & -2097152;
 $469 = $465 & 8191;
 $470 = (_i64Subtract(($421|0),($422|0),($468|0),($469|0))|0);
 $471 = (getTempRet0() | 0);
 $472 = (_i64Add(($430|0),($431|0),1048576,0)|0);
 $473 = (getTempRet0() | 0);
 $474 = (_bitshift64Lshr(($472|0),($473|0),21)|0);
 $475 = (getTempRet0() | 0);
 $476 = $472 & -2097152;
 $477 = $473 & 8191;
 $478 = (_i64Subtract(($430|0),($431|0),($476|0),($477|0))|0);
 $479 = (getTempRet0() | 0);
 $480 = (_i64Add(($437|0),($438|0),1048576,0)|0);
 $481 = (getTempRet0() | 0);
 $482 = (_bitshift64Lshr(($480|0),($481|0),21)|0);
 $483 = (getTempRet0() | 0);
 $484 = $480 & -2097152;
 $485 = $481 & 268435455;
 $486 = (_i64Subtract(($437|0),($438|0),($484|0),($485|0))|0);
 $487 = (getTempRet0() | 0);
 $488 = (___muldi3(($482|0),($483|0),666643,0)|0);
 $489 = (getTempRet0() | 0);
 $490 = (_i64Add(($488|0),($489|0),($399|0),($400|0))|0);
 $491 = (getTempRet0() | 0);
 $492 = (___muldi3(($482|0),($483|0),470296,0)|0);
 $493 = (getTempRet0() | 0);
 $494 = (_i64Add(($446|0),($447|0),($492|0),($493|0))|0);
 $495 = (getTempRet0() | 0);
 $496 = (___muldi3(($482|0),($483|0),654183,0)|0);
 $497 = (getTempRet0() | 0);
 $498 = (___muldi3(($482|0),($483|0),-997805,-1)|0);
 $499 = (getTempRet0() | 0);
 $500 = (_i64Add(($454|0),($455|0),($498|0),($499|0))|0);
 $501 = (getTempRet0() | 0);
 $502 = (___muldi3(($482|0),($483|0),136657,0)|0);
 $503 = (getTempRet0() | 0);
 $504 = (___muldi3(($482|0),($483|0),-683901,-1)|0);
 $505 = (getTempRet0() | 0);
 $506 = (_i64Add(($462|0),($463|0),($504|0),($505|0))|0);
 $507 = (getTempRet0() | 0);
 $508 = (_bitshift64Ashr(($490|0),($491|0),21)|0);
 $509 = (getTempRet0() | 0);
 $510 = (_i64Add(($494|0),($495|0),($508|0),($509|0))|0);
 $511 = (getTempRet0() | 0);
 $512 = $490 & 2097151;
 $513 = (_bitshift64Ashr(($510|0),($511|0),21)|0);
 $514 = (getTempRet0() | 0);
 $515 = (_i64Add(($442|0),($443|0),($374|0),($375|0))|0);
 $516 = (getTempRet0() | 0);
 $517 = (_i64Subtract(($515|0),($516|0),($409|0),0)|0);
 $518 = (getTempRet0() | 0);
 $519 = (_i64Add(($517|0),($518|0),($496|0),($497|0))|0);
 $520 = (getTempRet0() | 0);
 $521 = (_i64Add(($519|0),($520|0),($513|0),($514|0))|0);
 $522 = (getTempRet0() | 0);
 $523 = $510 & 2097151;
 $524 = (_bitshift64Ashr(($521|0),($522|0),21)|0);
 $525 = (getTempRet0() | 0);
 $526 = (_i64Add(($500|0),($501|0),($524|0),($525|0))|0);
 $527 = (getTempRet0() | 0);
 $528 = $521 & 2097151;
 $529 = (_bitshift64Ashr(($526|0),($527|0),21)|0);
 $530 = (getTempRet0() | 0);
 $531 = (_i64Add(($376|0),($377|0),($450|0),($451|0))|0);
 $532 = (getTempRet0() | 0);
 $533 = (_i64Subtract(($531|0),($532|0),($416|0),0)|0);
 $534 = (getTempRet0() | 0);
 $535 = (_i64Add(($533|0),($534|0),($502|0),($503|0))|0);
 $536 = (getTempRet0() | 0);
 $537 = (_i64Add(($535|0),($536|0),($529|0),($530|0))|0);
 $538 = (getTempRet0() | 0);
 $539 = $526 & 2097151;
 $540 = (_bitshift64Ashr(($537|0),($538|0),21)|0);
 $541 = (getTempRet0() | 0);
 $542 = (_i64Add(($506|0),($507|0),($540|0),($541|0))|0);
 $543 = (getTempRet0() | 0);
 $544 = $537 & 2097151;
 $545 = (_bitshift64Ashr(($542|0),($543|0),21)|0);
 $546 = (getTempRet0() | 0);
 $547 = (_i64Add(($380|0),($381|0),($458|0),($459|0))|0);
 $548 = (getTempRet0() | 0);
 $549 = (_i64Subtract(($547|0),($548|0),($423|0),0)|0);
 $550 = (getTempRet0() | 0);
 $551 = (_i64Add(($549|0),($550|0),($545|0),($546|0))|0);
 $552 = (getTempRet0() | 0);
 $553 = $542 & 2097151;
 $554 = (_bitshift64Ashr(($551|0),($552|0),21)|0);
 $555 = (getTempRet0() | 0);
 $556 = (_i64Add(($554|0),($555|0),($470|0),($471|0))|0);
 $557 = (getTempRet0() | 0);
 $558 = $551 & 2097151;
 $559 = (_bitshift64Ashr(($556|0),($557|0),21)|0);
 $560 = (getTempRet0() | 0);
 $561 = (_i64Add(($466|0),($467|0),($384|0),($385|0))|0);
 $562 = (getTempRet0() | 0);
 $563 = (_i64Subtract(($561|0),($562|0),($432|0),0)|0);
 $564 = (getTempRet0() | 0);
 $565 = (_i64Add(($563|0),($564|0),($559|0),($560|0))|0);
 $566 = (getTempRet0() | 0);
 $567 = $556 & 2097151;
 $568 = (_bitshift64Ashr(($565|0),($566|0),21)|0);
 $569 = (getTempRet0() | 0);
 $570 = (_i64Add(($568|0),($569|0),($478|0),($479|0))|0);
 $571 = (getTempRet0() | 0);
 $572 = $565 & 2097151;
 $573 = (_bitshift64Ashr(($570|0),($571|0),21)|0);
 $574 = (getTempRet0() | 0);
 $575 = (_i64Add(($474|0),($475|0),($386|0),($387|0))|0);
 $576 = (getTempRet0() | 0);
 $577 = (_i64Subtract(($575|0),($576|0),($439|0),0)|0);
 $578 = (getTempRet0() | 0);
 $579 = (_i64Add(($577|0),($578|0),($573|0),($574|0))|0);
 $580 = (getTempRet0() | 0);
 $581 = $570 & 2097151;
 $582 = (_bitshift64Ashr(($579|0),($580|0),21)|0);
 $583 = (getTempRet0() | 0);
 $584 = (_i64Add(($582|0),($583|0),($486|0),($487|0))|0);
 $585 = (getTempRet0() | 0);
 $586 = $579 & 2097151;
 $587 = (_bitshift64Ashr(($584|0),($585|0),21)|0);
 $588 = (getTempRet0() | 0);
 $589 = $584 & 2097151;
 $590 = (___muldi3(($587|0),($588|0),666643,0)|0);
 $591 = (getTempRet0() | 0);
 $592 = (_i64Add(($590|0),($591|0),($512|0),0)|0);
 $593 = (getTempRet0() | 0);
 $594 = (___muldi3(($587|0),($588|0),470296,0)|0);
 $595 = (getTempRet0() | 0);
 $596 = (_i64Add(($594|0),($595|0),($523|0),0)|0);
 $597 = (getTempRet0() | 0);
 $598 = (___muldi3(($587|0),($588|0),654183,0)|0);
 $599 = (getTempRet0() | 0);
 $600 = (_i64Add(($598|0),($599|0),($528|0),0)|0);
 $601 = (getTempRet0() | 0);
 $602 = (___muldi3(($587|0),($588|0),-997805,-1)|0);
 $603 = (getTempRet0() | 0);
 $604 = (_i64Add(($602|0),($603|0),($539|0),0)|0);
 $605 = (getTempRet0() | 0);
 $606 = (___muldi3(($587|0),($588|0),136657,0)|0);
 $607 = (getTempRet0() | 0);
 $608 = (_i64Add(($606|0),($607|0),($544|0),0)|0);
 $609 = (getTempRet0() | 0);
 $610 = (___muldi3(($587|0),($588|0),-683901,-1)|0);
 $611 = (getTempRet0() | 0);
 $612 = (_i64Add(($610|0),($611|0),($553|0),0)|0);
 $613 = (getTempRet0() | 0);
 $614 = (_bitshift64Ashr(($592|0),($593|0),21)|0);
 $615 = (getTempRet0() | 0);
 $616 = (_i64Add(($596|0),($597|0),($614|0),($615|0))|0);
 $617 = (getTempRet0() | 0);
 $618 = (_bitshift64Ashr(($616|0),($617|0),21)|0);
 $619 = (getTempRet0() | 0);
 $620 = (_i64Add(($600|0),($601|0),($618|0),($619|0))|0);
 $621 = (getTempRet0() | 0);
 $622 = $616 & 2097151;
 $623 = (_bitshift64Ashr(($620|0),($621|0),21)|0);
 $624 = (getTempRet0() | 0);
 $625 = (_i64Add(($604|0),($605|0),($623|0),($624|0))|0);
 $626 = (getTempRet0() | 0);
 $627 = $620 & 2097151;
 $628 = (_bitshift64Ashr(($625|0),($626|0),21)|0);
 $629 = (getTempRet0() | 0);
 $630 = (_i64Add(($608|0),($609|0),($628|0),($629|0))|0);
 $631 = (getTempRet0() | 0);
 $632 = $625 & 2097151;
 $633 = (_bitshift64Ashr(($630|0),($631|0),21)|0);
 $634 = (getTempRet0() | 0);
 $635 = (_i64Add(($612|0),($613|0),($633|0),($634|0))|0);
 $636 = (getTempRet0() | 0);
 $637 = $630 & 2097151;
 $638 = (_bitshift64Ashr(($635|0),($636|0),21)|0);
 $639 = (getTempRet0() | 0);
 $640 = (_i64Add(($638|0),($639|0),($558|0),0)|0);
 $641 = (getTempRet0() | 0);
 $642 = $635 & 2097151;
 $643 = (_bitshift64Ashr(($640|0),($641|0),21)|0);
 $644 = (getTempRet0() | 0);
 $645 = (_i64Add(($643|0),($644|0),($567|0),0)|0);
 $646 = (getTempRet0() | 0);
 $647 = $640 & 2097151;
 $648 = (_bitshift64Ashr(($645|0),($646|0),21)|0);
 $649 = (getTempRet0() | 0);
 $650 = (_i64Add(($648|0),($649|0),($572|0),0)|0);
 $651 = (getTempRet0() | 0);
 $652 = (_bitshift64Ashr(($650|0),($651|0),21)|0);
 $653 = (getTempRet0() | 0);
 $654 = (_i64Add(($652|0),($653|0),($581|0),0)|0);
 $655 = (getTempRet0() | 0);
 $656 = (_bitshift64Ashr(($654|0),($655|0),21)|0);
 $657 = (getTempRet0() | 0);
 $658 = (_i64Add(($656|0),($657|0),($586|0),0)|0);
 $659 = (getTempRet0() | 0);
 $660 = $654 & 2097151;
 $661 = (_bitshift64Ashr(($658|0),($659|0),21)|0);
 $662 = (getTempRet0() | 0);
 $663 = (_i64Add(($661|0),($662|0),($589|0),0)|0);
 $664 = (getTempRet0() | 0);
 $665 = $658 & 2097151;
 $666 = $592&255;
 HEAP8[$s>>0] = $666;
 $667 = (_bitshift64Lshr(($592|0),($593|0),8)|0);
 $668 = (getTempRet0() | 0);
 $669 = $667&255;
 $arrayidx272 = ((($s)) + 1|0);
 HEAP8[$arrayidx272>>0] = $669;
 $670 = (_bitshift64Lshr(($592|0),($593|0),16)|0);
 $671 = (getTempRet0() | 0);
 $672 = $670 & 31;
 $673 = (_bitshift64Shl(($622|0),0,5)|0);
 $674 = (getTempRet0() | 0);
 $675 = $673 | $672;
 $676 = $675&255;
 $arrayidx276 = ((($s)) + 2|0);
 HEAP8[$arrayidx276>>0] = $676;
 $677 = (_bitshift64Lshr(($616|0),($617|0),3)|0);
 $678 = (getTempRet0() | 0);
 $679 = $677&255;
 $arrayidx279 = ((($s)) + 3|0);
 HEAP8[$arrayidx279>>0] = $679;
 $680 = (_bitshift64Lshr(($616|0),($617|0),11)|0);
 $681 = (getTempRet0() | 0);
 $682 = $680&255;
 $arrayidx282 = ((($s)) + 4|0);
 HEAP8[$arrayidx282>>0] = $682;
 $683 = (_bitshift64Lshr(($622|0),0,19)|0);
 $684 = (getTempRet0() | 0);
 $685 = (_bitshift64Shl(($627|0),0,2)|0);
 $686 = (getTempRet0() | 0);
 $687 = $685 | $683;
 $686 | $684;
 $688 = $687&255;
 $arrayidx287 = ((($s)) + 5|0);
 HEAP8[$arrayidx287>>0] = $688;
 $689 = (_bitshift64Lshr(($620|0),($621|0),6)|0);
 $690 = (getTempRet0() | 0);
 $691 = $689&255;
 $arrayidx290 = ((($s)) + 6|0);
 HEAP8[$arrayidx290>>0] = $691;
 $692 = (_bitshift64Lshr(($627|0),0,14)|0);
 $693 = (getTempRet0() | 0);
 $694 = (_bitshift64Shl(($632|0),0,7)|0);
 $695 = (getTempRet0() | 0);
 $696 = $694 | $692;
 $695 | $693;
 $697 = $696&255;
 $arrayidx295 = ((($s)) + 7|0);
 HEAP8[$arrayidx295>>0] = $697;
 $698 = (_bitshift64Lshr(($625|0),($626|0),1)|0);
 $699 = (getTempRet0() | 0);
 $700 = $698&255;
 $arrayidx298 = ((($s)) + 8|0);
 HEAP8[$arrayidx298>>0] = $700;
 $701 = (_bitshift64Lshr(($625|0),($626|0),9)|0);
 $702 = (getTempRet0() | 0);
 $703 = $701&255;
 $arrayidx301 = ((($s)) + 9|0);
 HEAP8[$arrayidx301>>0] = $703;
 $704 = (_bitshift64Lshr(($632|0),0,17)|0);
 $705 = (getTempRet0() | 0);
 $706 = (_bitshift64Shl(($637|0),0,4)|0);
 $707 = (getTempRet0() | 0);
 $708 = $706 | $704;
 $707 | $705;
 $709 = $708&255;
 $arrayidx306 = ((($s)) + 10|0);
 HEAP8[$arrayidx306>>0] = $709;
 $710 = (_bitshift64Lshr(($630|0),($631|0),4)|0);
 $711 = (getTempRet0() | 0);
 $712 = $710&255;
 $arrayidx309 = ((($s)) + 11|0);
 HEAP8[$arrayidx309>>0] = $712;
 $713 = (_bitshift64Lshr(($630|0),($631|0),12)|0);
 $714 = (getTempRet0() | 0);
 $715 = $713&255;
 $arrayidx312 = ((($s)) + 12|0);
 HEAP8[$arrayidx312>>0] = $715;
 $716 = (_bitshift64Lshr(($637|0),0,20)|0);
 $717 = (getTempRet0() | 0);
 $718 = (_bitshift64Shl(($642|0),0,1)|0);
 $719 = (getTempRet0() | 0);
 $720 = $718 | $716;
 $719 | $717;
 $721 = $720&255;
 $arrayidx317 = ((($s)) + 13|0);
 HEAP8[$arrayidx317>>0] = $721;
 $722 = (_bitshift64Lshr(($635|0),($636|0),7)|0);
 $723 = (getTempRet0() | 0);
 $724 = $722&255;
 $arrayidx320 = ((($s)) + 14|0);
 HEAP8[$arrayidx320>>0] = $724;
 $725 = (_bitshift64Lshr(($642|0),0,15)|0);
 $726 = (getTempRet0() | 0);
 $727 = (_bitshift64Shl(($647|0),0,6)|0);
 $728 = (getTempRet0() | 0);
 $729 = $727 | $725;
 $728 | $726;
 $730 = $729&255;
 $arrayidx325 = ((($s)) + 15|0);
 HEAP8[$arrayidx325>>0] = $730;
 $731 = (_bitshift64Lshr(($640|0),($641|0),2)|0);
 $732 = (getTempRet0() | 0);
 $733 = $731&255;
 $arrayidx328 = ((($s)) + 16|0);
 HEAP8[$arrayidx328>>0] = $733;
 $734 = (_bitshift64Lshr(($640|0),($641|0),10)|0);
 $735 = (getTempRet0() | 0);
 $736 = $734&255;
 $arrayidx331 = ((($s)) + 17|0);
 HEAP8[$arrayidx331>>0] = $736;
 $737 = (_bitshift64Lshr(($647|0),0,18)|0);
 $738 = (getTempRet0() | 0);
 $739 = (_bitshift64Shl(($645|0),($646|0),3)|0);
 $740 = (getTempRet0() | 0);
 $741 = $739 | $737;
 $740 | $738;
 $742 = $741&255;
 $arrayidx336 = ((($s)) + 18|0);
 HEAP8[$arrayidx336>>0] = $742;
 $743 = (_bitshift64Lshr(($645|0),($646|0),5)|0);
 $744 = (getTempRet0() | 0);
 $745 = $743&255;
 $arrayidx339 = ((($s)) + 19|0);
 HEAP8[$arrayidx339>>0] = $745;
 $746 = (_bitshift64Lshr(($645|0),($646|0),13)|0);
 $747 = (getTempRet0() | 0);
 $748 = $746&255;
 $arrayidx342 = ((($s)) + 20|0);
 HEAP8[$arrayidx342>>0] = $748;
 $749 = $650&255;
 $arrayidx345 = ((($s)) + 21|0);
 HEAP8[$arrayidx345>>0] = $749;
 $750 = (_bitshift64Lshr(($650|0),($651|0),8)|0);
 $751 = (getTempRet0() | 0);
 $752 = $750&255;
 $arrayidx348 = ((($s)) + 22|0);
 HEAP8[$arrayidx348>>0] = $752;
 $753 = (_bitshift64Lshr(($650|0),($651|0),16)|0);
 $754 = (getTempRet0() | 0);
 $755 = $753 & 31;
 $756 = (_bitshift64Shl(($660|0),0,5)|0);
 $757 = (getTempRet0() | 0);
 $758 = $756 | $755;
 $759 = $758&255;
 $arrayidx353 = ((($s)) + 23|0);
 HEAP8[$arrayidx353>>0] = $759;
 $760 = (_bitshift64Lshr(($654|0),($655|0),3)|0);
 $761 = (getTempRet0() | 0);
 $762 = $760&255;
 $arrayidx356 = ((($s)) + 24|0);
 HEAP8[$arrayidx356>>0] = $762;
 $763 = (_bitshift64Lshr(($654|0),($655|0),11)|0);
 $764 = (getTempRet0() | 0);
 $765 = $763&255;
 $arrayidx359 = ((($s)) + 25|0);
 HEAP8[$arrayidx359>>0] = $765;
 $766 = (_bitshift64Lshr(($660|0),0,19)|0);
 $767 = (getTempRet0() | 0);
 $768 = (_bitshift64Shl(($665|0),0,2)|0);
 $769 = (getTempRet0() | 0);
 $770 = $768 | $766;
 $769 | $767;
 $771 = $770&255;
 $arrayidx364 = ((($s)) + 26|0);
 HEAP8[$arrayidx364>>0] = $771;
 $772 = (_bitshift64Lshr(($658|0),($659|0),6)|0);
 $773 = (getTempRet0() | 0);
 $774 = $772&255;
 $arrayidx367 = ((($s)) + 27|0);
 HEAP8[$arrayidx367>>0] = $774;
 $775 = (_bitshift64Lshr(($665|0),0,14)|0);
 $776 = (getTempRet0() | 0);
 $777 = (_bitshift64Shl(($663|0),($664|0),7)|0);
 $778 = (getTempRet0() | 0);
 $779 = $777 | $775;
 $778 | $776;
 $780 = $779&255;
 $arrayidx372 = ((($s)) + 28|0);
 HEAP8[$arrayidx372>>0] = $780;
 $781 = (_bitshift64Lshr(($663|0),($664|0),1)|0);
 $782 = (getTempRet0() | 0);
 $783 = $781&255;
 $arrayidx375 = ((($s)) + 29|0);
 HEAP8[$arrayidx375>>0] = $783;
 $784 = (_bitshift64Lshr(($663|0),($664|0),9)|0);
 $785 = (getTempRet0() | 0);
 $786 = $784&255;
 $arrayidx378 = ((($s)) + 30|0);
 HEAP8[$arrayidx378>>0] = $786;
 $787 = (_bitshift64Ashr(($663|0),($664|0),17)|0);
 $788 = (getTempRet0() | 0);
 $789 = $787&255;
 $arrayidx381 = ((($s)) + 31|0);
 HEAP8[$arrayidx381>>0] = $789;
 return;
}
function _sc_sub($s,$a,$b) {
 $s = $s|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$idx = 0, $a$idx$val = 0, $a$idx330 = 0, $a$idx330$val = 0, $a$val = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx328 = 0, $add$ptr15$idx328$val = 0, $add$ptr23$idx = 0, $add$ptr23$idx$val = 0, $add$ptr23$idx327 = 0, $add$ptr23$idx327$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0;
 var $add$ptr27$idx326 = 0, $add$ptr27$idx326$val = 0, $add$ptr27$val = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx329 = 0, $add$ptr3$idx329$val = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx325 = 0, $add$ptr34$idx325$val = 0, $add$ptr47$idx = 0, $add$ptr47$idx$val = 0, $add$ptr47$idx323 = 0, $add$ptr47$idx323$val = 0, $add$ptr59$idx = 0, $add$ptr59$idx$val = 0, $add$ptr59$idx322 = 0, $add$ptr59$idx322$val = 0, $add$ptr67$idx = 0;
 var $add$ptr67$idx$val = 0, $add$ptr67$idx321 = 0, $add$ptr67$idx321$val = 0, $add$ptr71 = 0, $add$ptr71$idx = 0, $add$ptr71$idx$val = 0, $add$ptr71$idx320 = 0, $add$ptr71$idx320$val = 0, $add$ptr71$val = 0, $add$ptr78$idx = 0, $add$ptr78$idx$val = 0, $add$ptr78$idx319 = 0, $add$ptr78$idx319$val = 0, $arrayidx1$i = 0, $arrayidx1$i346 = 0, $arrayidx1$i373 = 0, $arrayidx1$i393 = 0, $arrayidx1$i406 = 0, $arrayidx1$i426 = 0, $arrayidx1$i446 = 0;
 var $arrayidx1$i466 = 0, $arrayidx1$i493 = 0, $arrayidx1$i513 = 0, $arrayidx1$i526 = 0, $arrayidx1$i546 = 0, $arrayidx272 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx282 = 0, $arrayidx287 = 0, $arrayidx290 = 0, $arrayidx295 = 0, $arrayidx298 = 0, $arrayidx3$i = 0, $arrayidx3$i350 = 0, $arrayidx3$i377 = 0, $arrayidx3$i397 = 0, $arrayidx3$i410 = 0, $arrayidx3$i430 = 0, $arrayidx3$i450 = 0;
 var $arrayidx3$i470 = 0, $arrayidx3$i497 = 0, $arrayidx3$i517 = 0, $arrayidx3$i530 = 0, $arrayidx3$i550 = 0, $arrayidx301 = 0, $arrayidx306 = 0, $arrayidx309 = 0, $arrayidx312 = 0, $arrayidx317 = 0, $arrayidx320 = 0, $arrayidx325 = 0, $arrayidx328 = 0, $arrayidx331 = 0, $arrayidx336 = 0, $arrayidx339 = 0, $arrayidx342 = 0, $arrayidx345 = 0, $arrayidx348 = 0, $arrayidx353 = 0;
 var $arrayidx356 = 0, $arrayidx359 = 0, $arrayidx364 = 0, $arrayidx367 = 0, $arrayidx372 = 0, $arrayidx375 = 0, $arrayidx378 = 0, $arrayidx381 = 0, $arrayidx7$i = 0, $arrayidx7$i354 = 0, $arrayidx7$i381 = 0, $arrayidx7$i401 = 0, $arrayidx7$i414 = 0, $arrayidx7$i434 = 0, $arrayidx7$i454 = 0, $arrayidx7$i474 = 0, $arrayidx7$i501 = 0, $arrayidx7$i521 = 0, $arrayidx7$i534 = 0, $arrayidx7$i554 = 0;
 var $b$idx = 0, $b$idx$val = 0, $b$idx324 = 0, $b$idx324$val = 0, $b$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $a$val = HEAP8[$a>>0]|0;
 $a$idx = ((($a)) + 1|0);
 $a$idx$val = HEAP8[$a$idx>>0]|0;
 $a$idx330 = ((($a)) + 2|0);
 $a$idx330$val = HEAP8[$a$idx330>>0]|0;
 $0 = $a$val&255;
 $1 = $a$idx$val&255;
 $2 = (_bitshift64Shl(($1|0),0,8)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2 | $0;
 $5 = $a$idx330$val&255;
 $6 = (_bitshift64Shl(($5|0),0,16)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2031616;
 $9 = $4 | $8;
 $arrayidx1$i546 = ((($a)) + 3|0);
 $10 = HEAP8[$arrayidx1$i546>>0]|0;
 $11 = $10&255;
 $12 = (_bitshift64Shl(($11|0),0,8)|0);
 $13 = (getTempRet0() | 0);
 $14 = $12 | $5;
 $arrayidx3$i550 = ((($a)) + 4|0);
 $15 = HEAP8[$arrayidx3$i550>>0]|0;
 $16 = $15&255;
 $17 = (_bitshift64Shl(($16|0),0,16)|0);
 $18 = (getTempRet0() | 0);
 $19 = $14 | $17;
 $20 = $13 | $18;
 $arrayidx7$i554 = ((($a)) + 5|0);
 $21 = HEAP8[$arrayidx7$i554>>0]|0;
 $22 = $21&255;
 $23 = (_bitshift64Shl(($22|0),0,24)|0);
 $24 = (getTempRet0() | 0);
 $25 = $19 | $23;
 $26 = $20 | $24;
 $27 = (_bitshift64Lshr(($25|0),($26|0),5)|0);
 $28 = (getTempRet0() | 0);
 $29 = $27 & 2097151;
 $add$ptr3$idx = ((($a)) + 6|0);
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx>>0]|0;
 $add$ptr3$idx329 = ((($a)) + 7|0);
 $add$ptr3$idx329$val = HEAP8[$add$ptr3$idx329>>0]|0;
 $30 = $add$ptr3$idx$val&255;
 $31 = (_bitshift64Shl(($30|0),0,8)|0);
 $32 = (getTempRet0() | 0);
 $33 = $31 | $22;
 $34 = $add$ptr3$idx329$val&255;
 $35 = (_bitshift64Shl(($34|0),0,16)|0);
 $36 = (getTempRet0() | 0);
 $37 = $33 | $35;
 $38 = $32 | $36;
 $39 = (_bitshift64Lshr(($37|0),($38|0),2)|0);
 $40 = (getTempRet0() | 0);
 $41 = $39 & 2097151;
 $arrayidx1$i526 = ((($a)) + 8|0);
 $42 = HEAP8[$arrayidx1$i526>>0]|0;
 $43 = $42&255;
 $44 = (_bitshift64Shl(($43|0),0,8)|0);
 $45 = (getTempRet0() | 0);
 $46 = $44 | $34;
 $arrayidx3$i530 = ((($a)) + 9|0);
 $47 = HEAP8[$arrayidx3$i530>>0]|0;
 $48 = $47&255;
 $49 = (_bitshift64Shl(($48|0),0,16)|0);
 $50 = (getTempRet0() | 0);
 $51 = $46 | $49;
 $52 = $45 | $50;
 $arrayidx7$i534 = ((($a)) + 10|0);
 $53 = HEAP8[$arrayidx7$i534>>0]|0;
 $54 = $53&255;
 $55 = (_bitshift64Shl(($54|0),0,24)|0);
 $56 = (getTempRet0() | 0);
 $57 = $51 | $55;
 $58 = $52 | $56;
 $59 = (_bitshift64Lshr(($57|0),($58|0),7)|0);
 $60 = (getTempRet0() | 0);
 $61 = $59 & 2097151;
 $arrayidx1$i513 = ((($a)) + 11|0);
 $62 = HEAP8[$arrayidx1$i513>>0]|0;
 $63 = $62&255;
 $64 = (_bitshift64Shl(($63|0),0,8)|0);
 $65 = (getTempRet0() | 0);
 $66 = $64 | $54;
 $arrayidx3$i517 = ((($a)) + 12|0);
 $67 = HEAP8[$arrayidx3$i517>>0]|0;
 $68 = $67&255;
 $69 = (_bitshift64Shl(($68|0),0,16)|0);
 $70 = (getTempRet0() | 0);
 $71 = $66 | $69;
 $72 = $65 | $70;
 $arrayidx7$i521 = ((($a)) + 13|0);
 $73 = HEAP8[$arrayidx7$i521>>0]|0;
 $74 = $73&255;
 $75 = (_bitshift64Shl(($74|0),0,24)|0);
 $76 = (getTempRet0() | 0);
 $77 = $71 | $75;
 $78 = $72 | $76;
 $79 = (_bitshift64Lshr(($77|0),($78|0),4)|0);
 $80 = (getTempRet0() | 0);
 $81 = $79 & 2097151;
 $add$ptr15$idx = ((($a)) + 14|0);
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx>>0]|0;
 $add$ptr15$idx328 = ((($a)) + 15|0);
 $add$ptr15$idx328$val = HEAP8[$add$ptr15$idx328>>0]|0;
 $82 = $add$ptr15$idx$val&255;
 $83 = (_bitshift64Shl(($82|0),0,8)|0);
 $84 = (getTempRet0() | 0);
 $85 = $83 | $74;
 $86 = $add$ptr15$idx328$val&255;
 $87 = (_bitshift64Shl(($86|0),0,16)|0);
 $88 = (getTempRet0() | 0);
 $89 = $85 | $87;
 $90 = $84 | $88;
 $91 = (_bitshift64Lshr(($89|0),($90|0),1)|0);
 $92 = (getTempRet0() | 0);
 $93 = $91 & 2097151;
 $arrayidx1$i493 = ((($a)) + 16|0);
 $94 = HEAP8[$arrayidx1$i493>>0]|0;
 $95 = $94&255;
 $96 = (_bitshift64Shl(($95|0),0,8)|0);
 $97 = (getTempRet0() | 0);
 $98 = $96 | $86;
 $arrayidx3$i497 = ((($a)) + 17|0);
 $99 = HEAP8[$arrayidx3$i497>>0]|0;
 $100 = $99&255;
 $101 = (_bitshift64Shl(($100|0),0,16)|0);
 $102 = (getTempRet0() | 0);
 $103 = $98 | $101;
 $104 = $97 | $102;
 $arrayidx7$i501 = ((($a)) + 18|0);
 $105 = HEAP8[$arrayidx7$i501>>0]|0;
 $106 = $105&255;
 $107 = (_bitshift64Shl(($106|0),0,24)|0);
 $108 = (getTempRet0() | 0);
 $109 = $103 | $107;
 $110 = $104 | $108;
 $111 = (_bitshift64Lshr(($109|0),($110|0),6)|0);
 $112 = (getTempRet0() | 0);
 $113 = $111 & 2097151;
 $add$ptr23$idx = ((($a)) + 19|0);
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx>>0]|0;
 $add$ptr23$idx327 = ((($a)) + 20|0);
 $add$ptr23$idx327$val = HEAP8[$add$ptr23$idx327>>0]|0;
 $114 = $add$ptr23$idx$val&255;
 $115 = (_bitshift64Shl(($114|0),0,8)|0);
 $116 = (getTempRet0() | 0);
 $117 = $115 | $106;
 $118 = $add$ptr23$idx327$val&255;
 $119 = (_bitshift64Shl(($118|0),0,16)|0);
 $120 = (getTempRet0() | 0);
 $121 = $117 | $119;
 $122 = $116 | $120;
 $123 = (_bitshift64Lshr(($121|0),($122|0),3)|0);
 $124 = (getTempRet0() | 0);
 $add$ptr27 = ((($a)) + 21|0);
 $add$ptr27$val = HEAP8[$add$ptr27>>0]|0;
 $add$ptr27$idx = ((($a)) + 22|0);
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx>>0]|0;
 $add$ptr27$idx326 = ((($a)) + 23|0);
 $add$ptr27$idx326$val = HEAP8[$add$ptr27$idx326>>0]|0;
 $125 = $add$ptr27$val&255;
 $126 = $add$ptr27$idx$val&255;
 $127 = (_bitshift64Shl(($126|0),0,8)|0);
 $128 = (getTempRet0() | 0);
 $129 = $127 | $125;
 $130 = $add$ptr27$idx326$val&255;
 $131 = (_bitshift64Shl(($130|0),0,16)|0);
 $132 = (getTempRet0() | 0);
 $133 = $131 & 2031616;
 $134 = $129 | $133;
 $arrayidx1$i466 = ((($a)) + 24|0);
 $135 = HEAP8[$arrayidx1$i466>>0]|0;
 $136 = $135&255;
 $137 = (_bitshift64Shl(($136|0),0,8)|0);
 $138 = (getTempRet0() | 0);
 $139 = $137 | $130;
 $arrayidx3$i470 = ((($a)) + 25|0);
 $140 = HEAP8[$arrayidx3$i470>>0]|0;
 $141 = $140&255;
 $142 = (_bitshift64Shl(($141|0),0,16)|0);
 $143 = (getTempRet0() | 0);
 $144 = $139 | $142;
 $145 = $138 | $143;
 $arrayidx7$i474 = ((($a)) + 26|0);
 $146 = HEAP8[$arrayidx7$i474>>0]|0;
 $147 = $146&255;
 $148 = (_bitshift64Shl(($147|0),0,24)|0);
 $149 = (getTempRet0() | 0);
 $150 = $144 | $148;
 $151 = $145 | $149;
 $152 = (_bitshift64Lshr(($150|0),($151|0),5)|0);
 $153 = (getTempRet0() | 0);
 $154 = $152 & 2097151;
 $add$ptr34$idx = ((($a)) + 27|0);
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx>>0]|0;
 $add$ptr34$idx325 = ((($a)) + 28|0);
 $add$ptr34$idx325$val = HEAP8[$add$ptr34$idx325>>0]|0;
 $155 = $add$ptr34$idx$val&255;
 $156 = (_bitshift64Shl(($155|0),0,8)|0);
 $157 = (getTempRet0() | 0);
 $158 = $156 | $147;
 $159 = $add$ptr34$idx325$val&255;
 $160 = (_bitshift64Shl(($159|0),0,16)|0);
 $161 = (getTempRet0() | 0);
 $162 = $158 | $160;
 $163 = $157 | $161;
 $164 = (_bitshift64Lshr(($162|0),($163|0),2)|0);
 $165 = (getTempRet0() | 0);
 $166 = $164 & 2097151;
 $arrayidx1$i446 = ((($a)) + 29|0);
 $167 = HEAP8[$arrayidx1$i446>>0]|0;
 $168 = $167&255;
 $169 = (_bitshift64Shl(($168|0),0,8)|0);
 $170 = (getTempRet0() | 0);
 $171 = $169 | $159;
 $arrayidx3$i450 = ((($a)) + 30|0);
 $172 = HEAP8[$arrayidx3$i450>>0]|0;
 $173 = $172&255;
 $174 = (_bitshift64Shl(($173|0),0,16)|0);
 $175 = (getTempRet0() | 0);
 $176 = $171 | $174;
 $177 = $170 | $175;
 $arrayidx7$i454 = ((($a)) + 31|0);
 $178 = HEAP8[$arrayidx7$i454>>0]|0;
 $179 = $178&255;
 $180 = (_bitshift64Shl(($179|0),0,24)|0);
 $181 = (getTempRet0() | 0);
 $182 = $176 | $180;
 $183 = $177 | $181;
 $184 = (_bitshift64Lshr(($182|0),($183|0),7)|0);
 $185 = (getTempRet0() | 0);
 $b$val = HEAP8[$b>>0]|0;
 $b$idx = ((($b)) + 1|0);
 $b$idx$val = HEAP8[$b$idx>>0]|0;
 $b$idx324 = ((($b)) + 2|0);
 $b$idx324$val = HEAP8[$b$idx324>>0]|0;
 $186 = $b$val&255;
 $187 = $b$idx$val&255;
 $188 = (_bitshift64Shl(($187|0),0,8)|0);
 $189 = (getTempRet0() | 0);
 $190 = $188 | $186;
 $191 = $b$idx324$val&255;
 $192 = (_bitshift64Shl(($191|0),0,16)|0);
 $193 = (getTempRet0() | 0);
 $194 = $192 & 2031616;
 $195 = $190 | $194;
 $arrayidx1$i426 = ((($b)) + 3|0);
 $196 = HEAP8[$arrayidx1$i426>>0]|0;
 $197 = $196&255;
 $198 = (_bitshift64Shl(($197|0),0,8)|0);
 $199 = (getTempRet0() | 0);
 $200 = $198 | $191;
 $arrayidx3$i430 = ((($b)) + 4|0);
 $201 = HEAP8[$arrayidx3$i430>>0]|0;
 $202 = $201&255;
 $203 = (_bitshift64Shl(($202|0),0,16)|0);
 $204 = (getTempRet0() | 0);
 $205 = $200 | $203;
 $206 = $199 | $204;
 $arrayidx7$i434 = ((($b)) + 5|0);
 $207 = HEAP8[$arrayidx7$i434>>0]|0;
 $208 = $207&255;
 $209 = (_bitshift64Shl(($208|0),0,24)|0);
 $210 = (getTempRet0() | 0);
 $211 = $205 | $209;
 $212 = $206 | $210;
 $213 = (_bitshift64Lshr(($211|0),($212|0),5)|0);
 $214 = (getTempRet0() | 0);
 $215 = $213 & 2097151;
 $add$ptr47$idx = ((($b)) + 6|0);
 $add$ptr47$idx$val = HEAP8[$add$ptr47$idx>>0]|0;
 $add$ptr47$idx323 = ((($b)) + 7|0);
 $add$ptr47$idx323$val = HEAP8[$add$ptr47$idx323>>0]|0;
 $216 = $add$ptr47$idx$val&255;
 $217 = (_bitshift64Shl(($216|0),0,8)|0);
 $218 = (getTempRet0() | 0);
 $219 = $217 | $208;
 $220 = $add$ptr47$idx323$val&255;
 $221 = (_bitshift64Shl(($220|0),0,16)|0);
 $222 = (getTempRet0() | 0);
 $223 = $219 | $221;
 $224 = $218 | $222;
 $225 = (_bitshift64Lshr(($223|0),($224|0),2)|0);
 $226 = (getTempRet0() | 0);
 $227 = $225 & 2097151;
 $arrayidx1$i406 = ((($b)) + 8|0);
 $228 = HEAP8[$arrayidx1$i406>>0]|0;
 $229 = $228&255;
 $230 = (_bitshift64Shl(($229|0),0,8)|0);
 $231 = (getTempRet0() | 0);
 $232 = $230 | $220;
 $arrayidx3$i410 = ((($b)) + 9|0);
 $233 = HEAP8[$arrayidx3$i410>>0]|0;
 $234 = $233&255;
 $235 = (_bitshift64Shl(($234|0),0,16)|0);
 $236 = (getTempRet0() | 0);
 $237 = $232 | $235;
 $238 = $231 | $236;
 $arrayidx7$i414 = ((($b)) + 10|0);
 $239 = HEAP8[$arrayidx7$i414>>0]|0;
 $240 = $239&255;
 $241 = (_bitshift64Shl(($240|0),0,24)|0);
 $242 = (getTempRet0() | 0);
 $243 = $237 | $241;
 $244 = $238 | $242;
 $245 = (_bitshift64Lshr(($243|0),($244|0),7)|0);
 $246 = (getTempRet0() | 0);
 $247 = $245 & 2097151;
 $arrayidx1$i393 = ((($b)) + 11|0);
 $248 = HEAP8[$arrayidx1$i393>>0]|0;
 $249 = $248&255;
 $250 = (_bitshift64Shl(($249|0),0,8)|0);
 $251 = (getTempRet0() | 0);
 $252 = $250 | $240;
 $arrayidx3$i397 = ((($b)) + 12|0);
 $253 = HEAP8[$arrayidx3$i397>>0]|0;
 $254 = $253&255;
 $255 = (_bitshift64Shl(($254|0),0,16)|0);
 $256 = (getTempRet0() | 0);
 $257 = $252 | $255;
 $258 = $251 | $256;
 $arrayidx7$i401 = ((($b)) + 13|0);
 $259 = HEAP8[$arrayidx7$i401>>0]|0;
 $260 = $259&255;
 $261 = (_bitshift64Shl(($260|0),0,24)|0);
 $262 = (getTempRet0() | 0);
 $263 = $257 | $261;
 $264 = $258 | $262;
 $265 = (_bitshift64Lshr(($263|0),($264|0),4)|0);
 $266 = (getTempRet0() | 0);
 $267 = $265 & 2097151;
 $add$ptr59$idx = ((($b)) + 14|0);
 $add$ptr59$idx$val = HEAP8[$add$ptr59$idx>>0]|0;
 $add$ptr59$idx322 = ((($b)) + 15|0);
 $add$ptr59$idx322$val = HEAP8[$add$ptr59$idx322>>0]|0;
 $268 = $add$ptr59$idx$val&255;
 $269 = (_bitshift64Shl(($268|0),0,8)|0);
 $270 = (getTempRet0() | 0);
 $271 = $269 | $260;
 $272 = $add$ptr59$idx322$val&255;
 $273 = (_bitshift64Shl(($272|0),0,16)|0);
 $274 = (getTempRet0() | 0);
 $275 = $271 | $273;
 $276 = $270 | $274;
 $277 = (_bitshift64Lshr(($275|0),($276|0),1)|0);
 $278 = (getTempRet0() | 0);
 $279 = $277 & 2097151;
 $arrayidx1$i373 = ((($b)) + 16|0);
 $280 = HEAP8[$arrayidx1$i373>>0]|0;
 $281 = $280&255;
 $282 = (_bitshift64Shl(($281|0),0,8)|0);
 $283 = (getTempRet0() | 0);
 $284 = $282 | $272;
 $arrayidx3$i377 = ((($b)) + 17|0);
 $285 = HEAP8[$arrayidx3$i377>>0]|0;
 $286 = $285&255;
 $287 = (_bitshift64Shl(($286|0),0,16)|0);
 $288 = (getTempRet0() | 0);
 $289 = $284 | $287;
 $290 = $283 | $288;
 $arrayidx7$i381 = ((($b)) + 18|0);
 $291 = HEAP8[$arrayidx7$i381>>0]|0;
 $292 = $291&255;
 $293 = (_bitshift64Shl(($292|0),0,24)|0);
 $294 = (getTempRet0() | 0);
 $295 = $289 | $293;
 $296 = $290 | $294;
 $297 = (_bitshift64Lshr(($295|0),($296|0),6)|0);
 $298 = (getTempRet0() | 0);
 $299 = $297 & 2097151;
 $add$ptr67$idx = ((($b)) + 19|0);
 $add$ptr67$idx$val = HEAP8[$add$ptr67$idx>>0]|0;
 $add$ptr67$idx321 = ((($b)) + 20|0);
 $add$ptr67$idx321$val = HEAP8[$add$ptr67$idx321>>0]|0;
 $300 = $add$ptr67$idx$val&255;
 $301 = (_bitshift64Shl(($300|0),0,8)|0);
 $302 = (getTempRet0() | 0);
 $303 = $301 | $292;
 $304 = $add$ptr67$idx321$val&255;
 $305 = (_bitshift64Shl(($304|0),0,16)|0);
 $306 = (getTempRet0() | 0);
 $307 = $303 | $305;
 $308 = $302 | $306;
 $309 = (_bitshift64Lshr(($307|0),($308|0),3)|0);
 $310 = (getTempRet0() | 0);
 $add$ptr71 = ((($b)) + 21|0);
 $add$ptr71$val = HEAP8[$add$ptr71>>0]|0;
 $add$ptr71$idx = ((($b)) + 22|0);
 $add$ptr71$idx$val = HEAP8[$add$ptr71$idx>>0]|0;
 $add$ptr71$idx320 = ((($b)) + 23|0);
 $add$ptr71$idx320$val = HEAP8[$add$ptr71$idx320>>0]|0;
 $311 = $add$ptr71$val&255;
 $312 = $add$ptr71$idx$val&255;
 $313 = (_bitshift64Shl(($312|0),0,8)|0);
 $314 = (getTempRet0() | 0);
 $315 = $313 | $311;
 $316 = $add$ptr71$idx320$val&255;
 $317 = (_bitshift64Shl(($316|0),0,16)|0);
 $318 = (getTempRet0() | 0);
 $319 = $317 & 2031616;
 $320 = $315 | $319;
 $arrayidx1$i346 = ((($b)) + 24|0);
 $321 = HEAP8[$arrayidx1$i346>>0]|0;
 $322 = $321&255;
 $323 = (_bitshift64Shl(($322|0),0,8)|0);
 $324 = (getTempRet0() | 0);
 $325 = $323 | $316;
 $arrayidx3$i350 = ((($b)) + 25|0);
 $326 = HEAP8[$arrayidx3$i350>>0]|0;
 $327 = $326&255;
 $328 = (_bitshift64Shl(($327|0),0,16)|0);
 $329 = (getTempRet0() | 0);
 $330 = $325 | $328;
 $331 = $324 | $329;
 $arrayidx7$i354 = ((($b)) + 26|0);
 $332 = HEAP8[$arrayidx7$i354>>0]|0;
 $333 = $332&255;
 $334 = (_bitshift64Shl(($333|0),0,24)|0);
 $335 = (getTempRet0() | 0);
 $336 = $330 | $334;
 $337 = $331 | $335;
 $338 = (_bitshift64Lshr(($336|0),($337|0),5)|0);
 $339 = (getTempRet0() | 0);
 $340 = $338 & 2097151;
 $add$ptr78$idx = ((($b)) + 27|0);
 $add$ptr78$idx$val = HEAP8[$add$ptr78$idx>>0]|0;
 $add$ptr78$idx319 = ((($b)) + 28|0);
 $add$ptr78$idx319$val = HEAP8[$add$ptr78$idx319>>0]|0;
 $341 = $add$ptr78$idx$val&255;
 $342 = (_bitshift64Shl(($341|0),0,8)|0);
 $343 = (getTempRet0() | 0);
 $344 = $342 | $333;
 $345 = $add$ptr78$idx319$val&255;
 $346 = (_bitshift64Shl(($345|0),0,16)|0);
 $347 = (getTempRet0() | 0);
 $348 = $344 | $346;
 $349 = $343 | $347;
 $350 = (_bitshift64Lshr(($348|0),($349|0),2)|0);
 $351 = (getTempRet0() | 0);
 $352 = $350 & 2097151;
 $arrayidx1$i = ((($b)) + 29|0);
 $353 = HEAP8[$arrayidx1$i>>0]|0;
 $354 = $353&255;
 $355 = (_bitshift64Shl(($354|0),0,8)|0);
 $356 = (getTempRet0() | 0);
 $357 = $355 | $345;
 $arrayidx3$i = ((($b)) + 30|0);
 $358 = HEAP8[$arrayidx3$i>>0]|0;
 $359 = $358&255;
 $360 = (_bitshift64Shl(($359|0),0,16)|0);
 $361 = (getTempRet0() | 0);
 $362 = $357 | $360;
 $363 = $356 | $361;
 $arrayidx7$i = ((($b)) + 31|0);
 $364 = HEAP8[$arrayidx7$i>>0]|0;
 $365 = $364&255;
 $366 = (_bitshift64Shl(($365|0),0,24)|0);
 $367 = (getTempRet0() | 0);
 $368 = $362 | $366;
 $369 = $363 | $367;
 $370 = (_bitshift64Lshr(($368|0),($369|0),7)|0);
 $371 = (getTempRet0() | 0);
 $372 = (_i64Subtract(($9|0),($3|0),($195|0),($189|0))|0);
 $373 = (getTempRet0() | 0);
 $374 = (_i64Subtract(($29|0),0,($215|0),0)|0);
 $375 = (getTempRet0() | 0);
 $376 = (_i64Subtract(($41|0),0,($227|0),0)|0);
 $377 = (getTempRet0() | 0);
 $378 = (_i64Subtract(($61|0),0,($247|0),0)|0);
 $379 = (getTempRet0() | 0);
 $380 = (_i64Subtract(($81|0),0,($267|0),0)|0);
 $381 = (getTempRet0() | 0);
 $382 = (_i64Subtract(($93|0),0,($279|0),0)|0);
 $383 = (getTempRet0() | 0);
 $384 = (_i64Subtract(($113|0),0,($299|0),0)|0);
 $385 = (getTempRet0() | 0);
 $386 = (_i64Subtract(($123|0),($124|0),($309|0),($310|0))|0);
 $387 = (getTempRet0() | 0);
 $388 = (_i64Subtract(($134|0),($128|0),($320|0),($314|0))|0);
 $389 = (getTempRet0() | 0);
 $390 = (_i64Subtract(($154|0),0,($340|0),0)|0);
 $391 = (getTempRet0() | 0);
 $392 = (_i64Subtract(($166|0),0,($352|0),0)|0);
 $393 = (getTempRet0() | 0);
 $394 = (_i64Subtract(($184|0),($185|0),($370|0),($371|0))|0);
 $395 = (getTempRet0() | 0);
 $396 = (_i64Add(($372|0),($373|0),1048576,0)|0);
 $397 = (getTempRet0() | 0);
 $398 = (_bitshift64Ashr(($396|0),($397|0),21)|0);
 $399 = (getTempRet0() | 0);
 $400 = (_i64Add(($374|0),($375|0),($398|0),($399|0))|0);
 $401 = (getTempRet0() | 0);
 $402 = $396 & -2097152;
 $403 = (_i64Subtract(($372|0),($373|0),($402|0),($397|0))|0);
 $404 = (getTempRet0() | 0);
 $405 = (_i64Add(($376|0),($377|0),1048576,0)|0);
 $406 = (getTempRet0() | 0);
 $407 = (_bitshift64Ashr(($405|0),($406|0),21)|0);
 $408 = (getTempRet0() | 0);
 $409 = (_i64Add(($378|0),($379|0),($407|0),($408|0))|0);
 $410 = (getTempRet0() | 0);
 $411 = $405 & -2097152;
 $412 = (_i64Add(($380|0),($381|0),1048576,0)|0);
 $413 = (getTempRet0() | 0);
 $414 = (_bitshift64Ashr(($412|0),($413|0),21)|0);
 $415 = (getTempRet0() | 0);
 $416 = (_i64Add(($382|0),($383|0),($414|0),($415|0))|0);
 $417 = (getTempRet0() | 0);
 $418 = $412 & -2097152;
 $419 = (_i64Add(($384|0),($385|0),1048576,0)|0);
 $420 = (getTempRet0() | 0);
 $421 = (_bitshift64Ashr(($419|0),($420|0),21)|0);
 $422 = (getTempRet0() | 0);
 $423 = (_i64Add(($386|0),($387|0),($421|0),($422|0))|0);
 $424 = (getTempRet0() | 0);
 $425 = $419 & -2097152;
 $426 = (_i64Add(($388|0),($389|0),1048576,0)|0);
 $427 = (getTempRet0() | 0);
 $428 = (_bitshift64Ashr(($426|0),($427|0),21)|0);
 $429 = (getTempRet0() | 0);
 $430 = (_i64Add(($390|0),($391|0),($428|0),($429|0))|0);
 $431 = (getTempRet0() | 0);
 $432 = $426 & -2097152;
 $433 = (_i64Add(($392|0),($393|0),1048576,0)|0);
 $434 = (getTempRet0() | 0);
 $435 = (_bitshift64Ashr(($433|0),($434|0),21)|0);
 $436 = (getTempRet0() | 0);
 $437 = (_i64Add(($394|0),($395|0),($435|0),($436|0))|0);
 $438 = (getTempRet0() | 0);
 $439 = $433 & -2097152;
 $440 = (_i64Add(($400|0),($401|0),1048576,0)|0);
 $441 = (getTempRet0() | 0);
 $442 = (_bitshift64Ashr(($440|0),($441|0),21)|0);
 $443 = (getTempRet0() | 0);
 $444 = $440 & -2097152;
 $445 = (_i64Subtract(($400|0),($401|0),($444|0),($441|0))|0);
 $446 = (getTempRet0() | 0);
 $447 = (_i64Add(($409|0),($410|0),1048576,0)|0);
 $448 = (getTempRet0() | 0);
 $449 = (_bitshift64Ashr(($447|0),($448|0),21)|0);
 $450 = (getTempRet0() | 0);
 $451 = $447 & -2097152;
 $452 = (_i64Subtract(($409|0),($410|0),($451|0),($448|0))|0);
 $453 = (getTempRet0() | 0);
 $454 = (_i64Add(($416|0),($417|0),1048576,0)|0);
 $455 = (getTempRet0() | 0);
 $456 = (_bitshift64Ashr(($454|0),($455|0),21)|0);
 $457 = (getTempRet0() | 0);
 $458 = $454 & -2097152;
 $459 = (_i64Subtract(($416|0),($417|0),($458|0),($455|0))|0);
 $460 = (getTempRet0() | 0);
 $461 = (_i64Add(($423|0),($424|0),1048576,0)|0);
 $462 = (getTempRet0() | 0);
 $463 = (_bitshift64Ashr(($461|0),($462|0),21)|0);
 $464 = (getTempRet0() | 0);
 $465 = $461 & -2097152;
 $466 = (_i64Subtract(($423|0),($424|0),($465|0),($462|0))|0);
 $467 = (getTempRet0() | 0);
 $468 = (_i64Add(($430|0),($431|0),1048576,0)|0);
 $469 = (getTempRet0() | 0);
 $470 = (_bitshift64Ashr(($468|0),($469|0),21)|0);
 $471 = (getTempRet0() | 0);
 $472 = $468 & -2097152;
 $473 = (_i64Subtract(($430|0),($431|0),($472|0),($469|0))|0);
 $474 = (getTempRet0() | 0);
 $475 = (_i64Add(($437|0),($438|0),1048576,0)|0);
 $476 = (getTempRet0() | 0);
 $477 = (_bitshift64Ashr(($475|0),($476|0),21)|0);
 $478 = (getTempRet0() | 0);
 $479 = $475 & -2097152;
 $480 = (_i64Subtract(($437|0),($438|0),($479|0),($476|0))|0);
 $481 = (getTempRet0() | 0);
 $482 = (___muldi3(($477|0),($478|0),666643,0)|0);
 $483 = (getTempRet0() | 0);
 $484 = (_i64Add(($482|0),($483|0),($403|0),($404|0))|0);
 $485 = (getTempRet0() | 0);
 $486 = (___muldi3(($477|0),($478|0),470296,0)|0);
 $487 = (getTempRet0() | 0);
 $488 = (_i64Add(($445|0),($446|0),($486|0),($487|0))|0);
 $489 = (getTempRet0() | 0);
 $490 = (___muldi3(($477|0),($478|0),654183,0)|0);
 $491 = (getTempRet0() | 0);
 $492 = (___muldi3(($477|0),($478|0),-997805,-1)|0);
 $493 = (getTempRet0() | 0);
 $494 = (_i64Add(($452|0),($453|0),($492|0),($493|0))|0);
 $495 = (getTempRet0() | 0);
 $496 = (___muldi3(($477|0),($478|0),136657,0)|0);
 $497 = (getTempRet0() | 0);
 $498 = (___muldi3(($477|0),($478|0),-683901,-1)|0);
 $499 = (getTempRet0() | 0);
 $500 = (_i64Add(($459|0),($460|0),($498|0),($499|0))|0);
 $501 = (getTempRet0() | 0);
 $502 = (_bitshift64Ashr(($484|0),($485|0),21)|0);
 $503 = (getTempRet0() | 0);
 $504 = (_i64Add(($488|0),($489|0),($502|0),($503|0))|0);
 $505 = (getTempRet0() | 0);
 $506 = $484 & 2097151;
 $507 = (_bitshift64Ashr(($504|0),($505|0),21)|0);
 $508 = (getTempRet0() | 0);
 $509 = (_i64Add(($442|0),($443|0),($376|0),($377|0))|0);
 $510 = (getTempRet0() | 0);
 $511 = (_i64Subtract(($509|0),($510|0),($411|0),($406|0))|0);
 $512 = (getTempRet0() | 0);
 $513 = (_i64Add(($511|0),($512|0),($490|0),($491|0))|0);
 $514 = (getTempRet0() | 0);
 $515 = (_i64Add(($513|0),($514|0),($507|0),($508|0))|0);
 $516 = (getTempRet0() | 0);
 $517 = $504 & 2097151;
 $518 = (_bitshift64Ashr(($515|0),($516|0),21)|0);
 $519 = (getTempRet0() | 0);
 $520 = (_i64Add(($494|0),($495|0),($518|0),($519|0))|0);
 $521 = (getTempRet0() | 0);
 $522 = $515 & 2097151;
 $523 = (_bitshift64Ashr(($520|0),($521|0),21)|0);
 $524 = (getTempRet0() | 0);
 $525 = (_i64Add(($380|0),($381|0),($449|0),($450|0))|0);
 $526 = (getTempRet0() | 0);
 $527 = (_i64Subtract(($525|0),($526|0),($418|0),($413|0))|0);
 $528 = (getTempRet0() | 0);
 $529 = (_i64Add(($527|0),($528|0),($496|0),($497|0))|0);
 $530 = (getTempRet0() | 0);
 $531 = (_i64Add(($529|0),($530|0),($523|0),($524|0))|0);
 $532 = (getTempRet0() | 0);
 $533 = $520 & 2097151;
 $534 = (_bitshift64Ashr(($531|0),($532|0),21)|0);
 $535 = (getTempRet0() | 0);
 $536 = (_i64Add(($500|0),($501|0),($534|0),($535|0))|0);
 $537 = (getTempRet0() | 0);
 $538 = $531 & 2097151;
 $539 = (_bitshift64Ashr(($536|0),($537|0),21)|0);
 $540 = (getTempRet0() | 0);
 $541 = (_i64Add(($384|0),($385|0),($456|0),($457|0))|0);
 $542 = (getTempRet0() | 0);
 $543 = (_i64Subtract(($541|0),($542|0),($425|0),($420|0))|0);
 $544 = (getTempRet0() | 0);
 $545 = (_i64Add(($543|0),($544|0),($539|0),($540|0))|0);
 $546 = (getTempRet0() | 0);
 $547 = $536 & 2097151;
 $548 = (_bitshift64Ashr(($545|0),($546|0),21)|0);
 $549 = (getTempRet0() | 0);
 $550 = (_i64Add(($548|0),($549|0),($466|0),($467|0))|0);
 $551 = (getTempRet0() | 0);
 $552 = $545 & 2097151;
 $553 = (_bitshift64Ashr(($550|0),($551|0),21)|0);
 $554 = (getTempRet0() | 0);
 $555 = (_i64Add(($463|0),($464|0),($388|0),($389|0))|0);
 $556 = (getTempRet0() | 0);
 $557 = (_i64Subtract(($555|0),($556|0),($432|0),($427|0))|0);
 $558 = (getTempRet0() | 0);
 $559 = (_i64Add(($557|0),($558|0),($553|0),($554|0))|0);
 $560 = (getTempRet0() | 0);
 $561 = $550 & 2097151;
 $562 = (_bitshift64Ashr(($559|0),($560|0),21)|0);
 $563 = (getTempRet0() | 0);
 $564 = (_i64Add(($562|0),($563|0),($473|0),($474|0))|0);
 $565 = (getTempRet0() | 0);
 $566 = $559 & 2097151;
 $567 = (_bitshift64Ashr(($564|0),($565|0),21)|0);
 $568 = (getTempRet0() | 0);
 $569 = (_i64Add(($470|0),($471|0),($392|0),($393|0))|0);
 $570 = (getTempRet0() | 0);
 $571 = (_i64Subtract(($569|0),($570|0),($439|0),($434|0))|0);
 $572 = (getTempRet0() | 0);
 $573 = (_i64Add(($571|0),($572|0),($567|0),($568|0))|0);
 $574 = (getTempRet0() | 0);
 $575 = $564 & 2097151;
 $576 = (_bitshift64Ashr(($573|0),($574|0),21)|0);
 $577 = (getTempRet0() | 0);
 $578 = (_i64Add(($576|0),($577|0),($480|0),($481|0))|0);
 $579 = (getTempRet0() | 0);
 $580 = $573 & 2097151;
 $581 = (_bitshift64Ashr(($578|0),($579|0),21)|0);
 $582 = (getTempRet0() | 0);
 $583 = $578 & 2097151;
 $584 = (___muldi3(($581|0),($582|0),666643,0)|0);
 $585 = (getTempRet0() | 0);
 $586 = (_i64Add(($584|0),($585|0),($506|0),0)|0);
 $587 = (getTempRet0() | 0);
 $588 = (___muldi3(($581|0),($582|0),470296,0)|0);
 $589 = (getTempRet0() | 0);
 $590 = (_i64Add(($588|0),($589|0),($517|0),0)|0);
 $591 = (getTempRet0() | 0);
 $592 = (___muldi3(($581|0),($582|0),654183,0)|0);
 $593 = (getTempRet0() | 0);
 $594 = (_i64Add(($592|0),($593|0),($522|0),0)|0);
 $595 = (getTempRet0() | 0);
 $596 = (___muldi3(($581|0),($582|0),-997805,-1)|0);
 $597 = (getTempRet0() | 0);
 $598 = (_i64Add(($596|0),($597|0),($533|0),0)|0);
 $599 = (getTempRet0() | 0);
 $600 = (___muldi3(($581|0),($582|0),136657,0)|0);
 $601 = (getTempRet0() | 0);
 $602 = (_i64Add(($600|0),($601|0),($538|0),0)|0);
 $603 = (getTempRet0() | 0);
 $604 = (___muldi3(($581|0),($582|0),-683901,-1)|0);
 $605 = (getTempRet0() | 0);
 $606 = (_i64Add(($604|0),($605|0),($547|0),0)|0);
 $607 = (getTempRet0() | 0);
 $608 = (_bitshift64Ashr(($586|0),($587|0),21)|0);
 $609 = (getTempRet0() | 0);
 $610 = (_i64Add(($590|0),($591|0),($608|0),($609|0))|0);
 $611 = (getTempRet0() | 0);
 $612 = (_bitshift64Ashr(($610|0),($611|0),21)|0);
 $613 = (getTempRet0() | 0);
 $614 = (_i64Add(($594|0),($595|0),($612|0),($613|0))|0);
 $615 = (getTempRet0() | 0);
 $616 = $610 & 2097151;
 $617 = (_bitshift64Ashr(($614|0),($615|0),21)|0);
 $618 = (getTempRet0() | 0);
 $619 = (_i64Add(($598|0),($599|0),($617|0),($618|0))|0);
 $620 = (getTempRet0() | 0);
 $621 = $614 & 2097151;
 $622 = (_bitshift64Ashr(($619|0),($620|0),21)|0);
 $623 = (getTempRet0() | 0);
 $624 = (_i64Add(($602|0),($603|0),($622|0),($623|0))|0);
 $625 = (getTempRet0() | 0);
 $626 = $619 & 2097151;
 $627 = (_bitshift64Ashr(($624|0),($625|0),21)|0);
 $628 = (getTempRet0() | 0);
 $629 = (_i64Add(($606|0),($607|0),($627|0),($628|0))|0);
 $630 = (getTempRet0() | 0);
 $631 = $624 & 2097151;
 $632 = (_bitshift64Ashr(($629|0),($630|0),21)|0);
 $633 = (getTempRet0() | 0);
 $634 = (_i64Add(($632|0),($633|0),($552|0),0)|0);
 $635 = (getTempRet0() | 0);
 $636 = $629 & 2097151;
 $637 = (_bitshift64Ashr(($634|0),($635|0),21)|0);
 $638 = (getTempRet0() | 0);
 $639 = (_i64Add(($637|0),($638|0),($561|0),0)|0);
 $640 = (getTempRet0() | 0);
 $641 = $634 & 2097151;
 $642 = (_bitshift64Ashr(($639|0),($640|0),21)|0);
 $643 = (getTempRet0() | 0);
 $644 = (_i64Add(($642|0),($643|0),($566|0),0)|0);
 $645 = (getTempRet0() | 0);
 $646 = (_bitshift64Ashr(($644|0),($645|0),21)|0);
 $647 = (getTempRet0() | 0);
 $648 = (_i64Add(($646|0),($647|0),($575|0),0)|0);
 $649 = (getTempRet0() | 0);
 $650 = (_bitshift64Ashr(($648|0),($649|0),21)|0);
 $651 = (getTempRet0() | 0);
 $652 = (_i64Add(($650|0),($651|0),($580|0),0)|0);
 $653 = (getTempRet0() | 0);
 $654 = $648 & 2097151;
 $655 = (_bitshift64Ashr(($652|0),($653|0),21)|0);
 $656 = (getTempRet0() | 0);
 $657 = (_i64Add(($655|0),($656|0),($583|0),0)|0);
 $658 = (getTempRet0() | 0);
 $659 = $652 & 2097151;
 $660 = $586&255;
 HEAP8[$s>>0] = $660;
 $661 = (_bitshift64Lshr(($586|0),($587|0),8)|0);
 $662 = (getTempRet0() | 0);
 $663 = $661&255;
 $arrayidx272 = ((($s)) + 1|0);
 HEAP8[$arrayidx272>>0] = $663;
 $664 = (_bitshift64Lshr(($586|0),($587|0),16)|0);
 $665 = (getTempRet0() | 0);
 $666 = $664 & 31;
 $667 = (_bitshift64Shl(($616|0),0,5)|0);
 $668 = (getTempRet0() | 0);
 $669 = $667 | $666;
 $670 = $669&255;
 $arrayidx276 = ((($s)) + 2|0);
 HEAP8[$arrayidx276>>0] = $670;
 $671 = (_bitshift64Lshr(($610|0),($611|0),3)|0);
 $672 = (getTempRet0() | 0);
 $673 = $671&255;
 $arrayidx279 = ((($s)) + 3|0);
 HEAP8[$arrayidx279>>0] = $673;
 $674 = (_bitshift64Lshr(($610|0),($611|0),11)|0);
 $675 = (getTempRet0() | 0);
 $676 = $674&255;
 $arrayidx282 = ((($s)) + 4|0);
 HEAP8[$arrayidx282>>0] = $676;
 $677 = (_bitshift64Lshr(($616|0),0,19)|0);
 $678 = (getTempRet0() | 0);
 $679 = (_bitshift64Shl(($621|0),0,2)|0);
 $680 = (getTempRet0() | 0);
 $681 = $679 | $677;
 $680 | $678;
 $682 = $681&255;
 $arrayidx287 = ((($s)) + 5|0);
 HEAP8[$arrayidx287>>0] = $682;
 $683 = (_bitshift64Lshr(($614|0),($615|0),6)|0);
 $684 = (getTempRet0() | 0);
 $685 = $683&255;
 $arrayidx290 = ((($s)) + 6|0);
 HEAP8[$arrayidx290>>0] = $685;
 $686 = (_bitshift64Lshr(($621|0),0,14)|0);
 $687 = (getTempRet0() | 0);
 $688 = (_bitshift64Shl(($626|0),0,7)|0);
 $689 = (getTempRet0() | 0);
 $690 = $688 | $686;
 $689 | $687;
 $691 = $690&255;
 $arrayidx295 = ((($s)) + 7|0);
 HEAP8[$arrayidx295>>0] = $691;
 $692 = (_bitshift64Lshr(($619|0),($620|0),1)|0);
 $693 = (getTempRet0() | 0);
 $694 = $692&255;
 $arrayidx298 = ((($s)) + 8|0);
 HEAP8[$arrayidx298>>0] = $694;
 $695 = (_bitshift64Lshr(($619|0),($620|0),9)|0);
 $696 = (getTempRet0() | 0);
 $697 = $695&255;
 $arrayidx301 = ((($s)) + 9|0);
 HEAP8[$arrayidx301>>0] = $697;
 $698 = (_bitshift64Lshr(($626|0),0,17)|0);
 $699 = (getTempRet0() | 0);
 $700 = (_bitshift64Shl(($631|0),0,4)|0);
 $701 = (getTempRet0() | 0);
 $702 = $700 | $698;
 $701 | $699;
 $703 = $702&255;
 $arrayidx306 = ((($s)) + 10|0);
 HEAP8[$arrayidx306>>0] = $703;
 $704 = (_bitshift64Lshr(($624|0),($625|0),4)|0);
 $705 = (getTempRet0() | 0);
 $706 = $704&255;
 $arrayidx309 = ((($s)) + 11|0);
 HEAP8[$arrayidx309>>0] = $706;
 $707 = (_bitshift64Lshr(($624|0),($625|0),12)|0);
 $708 = (getTempRet0() | 0);
 $709 = $707&255;
 $arrayidx312 = ((($s)) + 12|0);
 HEAP8[$arrayidx312>>0] = $709;
 $710 = (_bitshift64Lshr(($631|0),0,20)|0);
 $711 = (getTempRet0() | 0);
 $712 = (_bitshift64Shl(($636|0),0,1)|0);
 $713 = (getTempRet0() | 0);
 $714 = $712 | $710;
 $713 | $711;
 $715 = $714&255;
 $arrayidx317 = ((($s)) + 13|0);
 HEAP8[$arrayidx317>>0] = $715;
 $716 = (_bitshift64Lshr(($629|0),($630|0),7)|0);
 $717 = (getTempRet0() | 0);
 $718 = $716&255;
 $arrayidx320 = ((($s)) + 14|0);
 HEAP8[$arrayidx320>>0] = $718;
 $719 = (_bitshift64Lshr(($636|0),0,15)|0);
 $720 = (getTempRet0() | 0);
 $721 = (_bitshift64Shl(($641|0),0,6)|0);
 $722 = (getTempRet0() | 0);
 $723 = $721 | $719;
 $722 | $720;
 $724 = $723&255;
 $arrayidx325 = ((($s)) + 15|0);
 HEAP8[$arrayidx325>>0] = $724;
 $725 = (_bitshift64Lshr(($634|0),($635|0),2)|0);
 $726 = (getTempRet0() | 0);
 $727 = $725&255;
 $arrayidx328 = ((($s)) + 16|0);
 HEAP8[$arrayidx328>>0] = $727;
 $728 = (_bitshift64Lshr(($634|0),($635|0),10)|0);
 $729 = (getTempRet0() | 0);
 $730 = $728&255;
 $arrayidx331 = ((($s)) + 17|0);
 HEAP8[$arrayidx331>>0] = $730;
 $731 = (_bitshift64Lshr(($641|0),0,18)|0);
 $732 = (getTempRet0() | 0);
 $733 = (_bitshift64Shl(($639|0),($640|0),3)|0);
 $734 = (getTempRet0() | 0);
 $735 = $733 | $731;
 $734 | $732;
 $736 = $735&255;
 $arrayidx336 = ((($s)) + 18|0);
 HEAP8[$arrayidx336>>0] = $736;
 $737 = (_bitshift64Lshr(($639|0),($640|0),5)|0);
 $738 = (getTempRet0() | 0);
 $739 = $737&255;
 $arrayidx339 = ((($s)) + 19|0);
 HEAP8[$arrayidx339>>0] = $739;
 $740 = (_bitshift64Lshr(($639|0),($640|0),13)|0);
 $741 = (getTempRet0() | 0);
 $742 = $740&255;
 $arrayidx342 = ((($s)) + 20|0);
 HEAP8[$arrayidx342>>0] = $742;
 $743 = $644&255;
 $arrayidx345 = ((($s)) + 21|0);
 HEAP8[$arrayidx345>>0] = $743;
 $744 = (_bitshift64Lshr(($644|0),($645|0),8)|0);
 $745 = (getTempRet0() | 0);
 $746 = $744&255;
 $arrayidx348 = ((($s)) + 22|0);
 HEAP8[$arrayidx348>>0] = $746;
 $747 = (_bitshift64Lshr(($644|0),($645|0),16)|0);
 $748 = (getTempRet0() | 0);
 $749 = $747 & 31;
 $750 = (_bitshift64Shl(($654|0),0,5)|0);
 $751 = (getTempRet0() | 0);
 $752 = $750 | $749;
 $753 = $752&255;
 $arrayidx353 = ((($s)) + 23|0);
 HEAP8[$arrayidx353>>0] = $753;
 $754 = (_bitshift64Lshr(($648|0),($649|0),3)|0);
 $755 = (getTempRet0() | 0);
 $756 = $754&255;
 $arrayidx356 = ((($s)) + 24|0);
 HEAP8[$arrayidx356>>0] = $756;
 $757 = (_bitshift64Lshr(($648|0),($649|0),11)|0);
 $758 = (getTempRet0() | 0);
 $759 = $757&255;
 $arrayidx359 = ((($s)) + 25|0);
 HEAP8[$arrayidx359>>0] = $759;
 $760 = (_bitshift64Lshr(($654|0),0,19)|0);
 $761 = (getTempRet0() | 0);
 $762 = (_bitshift64Shl(($659|0),0,2)|0);
 $763 = (getTempRet0() | 0);
 $764 = $762 | $760;
 $763 | $761;
 $765 = $764&255;
 $arrayidx364 = ((($s)) + 26|0);
 HEAP8[$arrayidx364>>0] = $765;
 $766 = (_bitshift64Lshr(($652|0),($653|0),6)|0);
 $767 = (getTempRet0() | 0);
 $768 = $766&255;
 $arrayidx367 = ((($s)) + 27|0);
 HEAP8[$arrayidx367>>0] = $768;
 $769 = (_bitshift64Lshr(($659|0),0,14)|0);
 $770 = (getTempRet0() | 0);
 $771 = (_bitshift64Shl(($657|0),($658|0),7)|0);
 $772 = (getTempRet0() | 0);
 $773 = $771 | $769;
 $772 | $770;
 $774 = $773&255;
 $arrayidx372 = ((($s)) + 28|0);
 HEAP8[$arrayidx372>>0] = $774;
 $775 = (_bitshift64Lshr(($657|0),($658|0),1)|0);
 $776 = (getTempRet0() | 0);
 $777 = $775&255;
 $arrayidx375 = ((($s)) + 29|0);
 HEAP8[$arrayidx375>>0] = $777;
 $778 = (_bitshift64Lshr(($657|0),($658|0),9)|0);
 $779 = (getTempRet0() | 0);
 $780 = $778&255;
 $arrayidx378 = ((($s)) + 30|0);
 HEAP8[$arrayidx378>>0] = $780;
 $781 = (_bitshift64Ashr(($657|0),($658|0),17)|0);
 $782 = (getTempRet0() | 0);
 $783 = $781&255;
 $arrayidx381 = ((($s)) + 31|0);
 HEAP8[$arrayidx381>>0] = $783;
 return;
}
function _sc_mulsub($s,$a,$b,$c) {
 $s = $s|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$idx = 0, $a$idx$val = 0, $a$idx937 = 0, $a$idx937$val = 0, $a$val = 0, $add$ptr103$idx = 0;
 var $add$ptr103$idx$val = 0, $add$ptr103$idx923 = 0, $add$ptr103$idx923$val = 0, $add$ptr111$idx = 0, $add$ptr111$idx$val = 0, $add$ptr111$idx922 = 0, $add$ptr111$idx922$val = 0, $add$ptr115 = 0, $add$ptr115$idx = 0, $add$ptr115$idx$val = 0, $add$ptr115$idx921 = 0, $add$ptr115$idx921$val = 0, $add$ptr115$val = 0, $add$ptr122$idx = 0, $add$ptr122$idx$val = 0, $add$ptr122$idx920 = 0, $add$ptr122$idx920$val = 0, $add$ptr15$idx = 0, $add$ptr15$idx$val = 0, $add$ptr15$idx935 = 0;
 var $add$ptr15$idx935$val = 0, $add$ptr23$idx = 0, $add$ptr23$idx$val = 0, $add$ptr23$idx934 = 0, $add$ptr23$idx934$val = 0, $add$ptr27 = 0, $add$ptr27$idx = 0, $add$ptr27$idx$val = 0, $add$ptr27$idx933 = 0, $add$ptr27$idx933$val = 0, $add$ptr27$val = 0, $add$ptr3$idx = 0, $add$ptr3$idx$val = 0, $add$ptr3$idx936 = 0, $add$ptr3$idx936$val = 0, $add$ptr34$idx = 0, $add$ptr34$idx$val = 0, $add$ptr34$idx932 = 0, $add$ptr34$idx932$val = 0, $add$ptr47$idx = 0;
 var $add$ptr47$idx$val = 0, $add$ptr47$idx930 = 0, $add$ptr47$idx930$val = 0, $add$ptr59$idx = 0, $add$ptr59$idx$val = 0, $add$ptr59$idx929 = 0, $add$ptr59$idx929$val = 0, $add$ptr67$idx = 0, $add$ptr67$idx$val = 0, $add$ptr67$idx928 = 0, $add$ptr67$idx928$val = 0, $add$ptr71 = 0, $add$ptr71$idx = 0, $add$ptr71$idx$val = 0, $add$ptr71$idx927 = 0, $add$ptr71$idx927$val = 0, $add$ptr71$val = 0, $add$ptr78$idx = 0, $add$ptr78$idx$val = 0, $add$ptr78$idx926 = 0;
 var $add$ptr78$idx926$val = 0, $add$ptr91$idx = 0, $add$ptr91$idx$val = 0, $add$ptr91$idx924 = 0, $add$ptr91$idx924$val = 0, $arrayidx1$i = 0, $arrayidx1$i1000 = 0, $arrayidx1$i1013 = 0, $arrayidx1$i1033 = 0, $arrayidx1$i1053 = 0, $arrayidx1$i1073 = 0, $arrayidx1$i1100 = 0, $arrayidx1$i1120 = 0, $arrayidx1$i1133 = 0, $arrayidx1$i1153 = 0, $arrayidx1$i1173 = 0, $arrayidx1$i1193 = 0, $arrayidx1$i1220 = 0, $arrayidx1$i1240 = 0, $arrayidx1$i1253 = 0;
 var $arrayidx1$i1273 = 0, $arrayidx1$i953 = 0, $arrayidx1$i980 = 0, $arrayidx1001 = 0, $arrayidx1006 = 0, $arrayidx1009 = 0, $arrayidx1012 = 0, $arrayidx1015 = 0, $arrayidx3$i = 0, $arrayidx3$i1004 = 0, $arrayidx3$i1017 = 0, $arrayidx3$i1037 = 0, $arrayidx3$i1057 = 0, $arrayidx3$i1077 = 0, $arrayidx3$i1104 = 0, $arrayidx3$i1124 = 0, $arrayidx3$i1137 = 0, $arrayidx3$i1157 = 0, $arrayidx3$i1177 = 0, $arrayidx3$i1197 = 0;
 var $arrayidx3$i1224 = 0, $arrayidx3$i1244 = 0, $arrayidx3$i1257 = 0, $arrayidx3$i1277 = 0, $arrayidx3$i957 = 0, $arrayidx3$i984 = 0, $arrayidx7$i = 0, $arrayidx7$i1008 = 0, $arrayidx7$i1021 = 0, $arrayidx7$i1041 = 0, $arrayidx7$i1061 = 0, $arrayidx7$i1081 = 0, $arrayidx7$i1108 = 0, $arrayidx7$i1128 = 0, $arrayidx7$i1141 = 0, $arrayidx7$i1161 = 0, $arrayidx7$i1181 = 0, $arrayidx7$i1201 = 0, $arrayidx7$i1228 = 0, $arrayidx7$i1248 = 0;
 var $arrayidx7$i1261 = 0, $arrayidx7$i1281 = 0, $arrayidx7$i961 = 0, $arrayidx7$i988 = 0, $arrayidx906 = 0, $arrayidx910 = 0, $arrayidx913 = 0, $arrayidx916 = 0, $arrayidx921 = 0, $arrayidx924 = 0, $arrayidx929 = 0, $arrayidx932 = 0, $arrayidx935 = 0, $arrayidx940 = 0, $arrayidx943 = 0, $arrayidx946 = 0, $arrayidx951 = 0, $arrayidx954 = 0, $arrayidx959 = 0, $arrayidx962 = 0;
 var $arrayidx965 = 0, $arrayidx970 = 0, $arrayidx973 = 0, $arrayidx976 = 0, $arrayidx979 = 0, $arrayidx982 = 0, $arrayidx987 = 0, $arrayidx990 = 0, $arrayidx993 = 0, $arrayidx998 = 0, $b$idx = 0, $b$idx$val = 0, $b$idx931 = 0, $b$idx931$val = 0, $b$val = 0, $c$idx = 0, $c$idx$val = 0, $c$idx925 = 0, $c$idx925$val = 0, $c$val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $a$val = HEAP8[$a>>0]|0;
 $a$idx = ((($a)) + 1|0);
 $a$idx$val = HEAP8[$a$idx>>0]|0;
 $a$idx937 = ((($a)) + 2|0);
 $a$idx937$val = HEAP8[$a$idx937>>0]|0;
 $0 = $a$val&255;
 $1 = $a$idx$val&255;
 $2 = (_bitshift64Shl(($1|0),0,8)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2 | $0;
 $5 = $a$idx937$val&255;
 $6 = (_bitshift64Shl(($5|0),0,16)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2031616;
 $9 = $4 | $8;
 $arrayidx1$i1273 = ((($a)) + 3|0);
 $10 = HEAP8[$arrayidx1$i1273>>0]|0;
 $11 = $10&255;
 $12 = (_bitshift64Shl(($11|0),0,8)|0);
 $13 = (getTempRet0() | 0);
 $14 = $12 | $5;
 $arrayidx3$i1277 = ((($a)) + 4|0);
 $15 = HEAP8[$arrayidx3$i1277>>0]|0;
 $16 = $15&255;
 $17 = (_bitshift64Shl(($16|0),0,16)|0);
 $18 = (getTempRet0() | 0);
 $19 = $14 | $17;
 $20 = $13 | $18;
 $arrayidx7$i1281 = ((($a)) + 5|0);
 $21 = HEAP8[$arrayidx7$i1281>>0]|0;
 $22 = $21&255;
 $23 = (_bitshift64Shl(($22|0),0,24)|0);
 $24 = (getTempRet0() | 0);
 $25 = $19 | $23;
 $26 = $20 | $24;
 $27 = (_bitshift64Lshr(($25|0),($26|0),5)|0);
 $28 = (getTempRet0() | 0);
 $29 = $27 & 2097151;
 $add$ptr3$idx = ((($a)) + 6|0);
 $add$ptr3$idx$val = HEAP8[$add$ptr3$idx>>0]|0;
 $add$ptr3$idx936 = ((($a)) + 7|0);
 $add$ptr3$idx936$val = HEAP8[$add$ptr3$idx936>>0]|0;
 $30 = $add$ptr3$idx$val&255;
 $31 = (_bitshift64Shl(($30|0),0,8)|0);
 $32 = (getTempRet0() | 0);
 $33 = $31 | $22;
 $34 = $add$ptr3$idx936$val&255;
 $35 = (_bitshift64Shl(($34|0),0,16)|0);
 $36 = (getTempRet0() | 0);
 $37 = $33 | $35;
 $38 = $32 | $36;
 $39 = (_bitshift64Lshr(($37|0),($38|0),2)|0);
 $40 = (getTempRet0() | 0);
 $41 = $39 & 2097151;
 $arrayidx1$i1253 = ((($a)) + 8|0);
 $42 = HEAP8[$arrayidx1$i1253>>0]|0;
 $43 = $42&255;
 $44 = (_bitshift64Shl(($43|0),0,8)|0);
 $45 = (getTempRet0() | 0);
 $46 = $44 | $34;
 $arrayidx3$i1257 = ((($a)) + 9|0);
 $47 = HEAP8[$arrayidx3$i1257>>0]|0;
 $48 = $47&255;
 $49 = (_bitshift64Shl(($48|0),0,16)|0);
 $50 = (getTempRet0() | 0);
 $51 = $46 | $49;
 $52 = $45 | $50;
 $arrayidx7$i1261 = ((($a)) + 10|0);
 $53 = HEAP8[$arrayidx7$i1261>>0]|0;
 $54 = $53&255;
 $55 = (_bitshift64Shl(($54|0),0,24)|0);
 $56 = (getTempRet0() | 0);
 $57 = $51 | $55;
 $58 = $52 | $56;
 $59 = (_bitshift64Lshr(($57|0),($58|0),7)|0);
 $60 = (getTempRet0() | 0);
 $61 = $59 & 2097151;
 $arrayidx1$i1240 = ((($a)) + 11|0);
 $62 = HEAP8[$arrayidx1$i1240>>0]|0;
 $63 = $62&255;
 $64 = (_bitshift64Shl(($63|0),0,8)|0);
 $65 = (getTempRet0() | 0);
 $66 = $64 | $54;
 $arrayidx3$i1244 = ((($a)) + 12|0);
 $67 = HEAP8[$arrayidx3$i1244>>0]|0;
 $68 = $67&255;
 $69 = (_bitshift64Shl(($68|0),0,16)|0);
 $70 = (getTempRet0() | 0);
 $71 = $66 | $69;
 $72 = $65 | $70;
 $arrayidx7$i1248 = ((($a)) + 13|0);
 $73 = HEAP8[$arrayidx7$i1248>>0]|0;
 $74 = $73&255;
 $75 = (_bitshift64Shl(($74|0),0,24)|0);
 $76 = (getTempRet0() | 0);
 $77 = $71 | $75;
 $78 = $72 | $76;
 $79 = (_bitshift64Lshr(($77|0),($78|0),4)|0);
 $80 = (getTempRet0() | 0);
 $81 = $79 & 2097151;
 $add$ptr15$idx = ((($a)) + 14|0);
 $add$ptr15$idx$val = HEAP8[$add$ptr15$idx>>0]|0;
 $add$ptr15$idx935 = ((($a)) + 15|0);
 $add$ptr15$idx935$val = HEAP8[$add$ptr15$idx935>>0]|0;
 $82 = $add$ptr15$idx$val&255;
 $83 = (_bitshift64Shl(($82|0),0,8)|0);
 $84 = (getTempRet0() | 0);
 $85 = $83 | $74;
 $86 = $add$ptr15$idx935$val&255;
 $87 = (_bitshift64Shl(($86|0),0,16)|0);
 $88 = (getTempRet0() | 0);
 $89 = $85 | $87;
 $90 = $84 | $88;
 $91 = (_bitshift64Lshr(($89|0),($90|0),1)|0);
 $92 = (getTempRet0() | 0);
 $93 = $91 & 2097151;
 $arrayidx1$i1220 = ((($a)) + 16|0);
 $94 = HEAP8[$arrayidx1$i1220>>0]|0;
 $95 = $94&255;
 $96 = (_bitshift64Shl(($95|0),0,8)|0);
 $97 = (getTempRet0() | 0);
 $98 = $96 | $86;
 $arrayidx3$i1224 = ((($a)) + 17|0);
 $99 = HEAP8[$arrayidx3$i1224>>0]|0;
 $100 = $99&255;
 $101 = (_bitshift64Shl(($100|0),0,16)|0);
 $102 = (getTempRet0() | 0);
 $103 = $98 | $101;
 $104 = $97 | $102;
 $arrayidx7$i1228 = ((($a)) + 18|0);
 $105 = HEAP8[$arrayidx7$i1228>>0]|0;
 $106 = $105&255;
 $107 = (_bitshift64Shl(($106|0),0,24)|0);
 $108 = (getTempRet0() | 0);
 $109 = $103 | $107;
 $110 = $104 | $108;
 $111 = (_bitshift64Lshr(($109|0),($110|0),6)|0);
 $112 = (getTempRet0() | 0);
 $113 = $111 & 2097151;
 $add$ptr23$idx = ((($a)) + 19|0);
 $add$ptr23$idx$val = HEAP8[$add$ptr23$idx>>0]|0;
 $add$ptr23$idx934 = ((($a)) + 20|0);
 $add$ptr23$idx934$val = HEAP8[$add$ptr23$idx934>>0]|0;
 $114 = $add$ptr23$idx$val&255;
 $115 = (_bitshift64Shl(($114|0),0,8)|0);
 $116 = (getTempRet0() | 0);
 $117 = $115 | $106;
 $118 = $add$ptr23$idx934$val&255;
 $119 = (_bitshift64Shl(($118|0),0,16)|0);
 $120 = (getTempRet0() | 0);
 $121 = $117 | $119;
 $122 = $116 | $120;
 $123 = (_bitshift64Lshr(($121|0),($122|0),3)|0);
 $124 = (getTempRet0() | 0);
 $add$ptr27 = ((($a)) + 21|0);
 $add$ptr27$val = HEAP8[$add$ptr27>>0]|0;
 $add$ptr27$idx = ((($a)) + 22|0);
 $add$ptr27$idx$val = HEAP8[$add$ptr27$idx>>0]|0;
 $add$ptr27$idx933 = ((($a)) + 23|0);
 $add$ptr27$idx933$val = HEAP8[$add$ptr27$idx933>>0]|0;
 $125 = $add$ptr27$val&255;
 $126 = $add$ptr27$idx$val&255;
 $127 = (_bitshift64Shl(($126|0),0,8)|0);
 $128 = (getTempRet0() | 0);
 $129 = $127 | $125;
 $130 = $add$ptr27$idx933$val&255;
 $131 = (_bitshift64Shl(($130|0),0,16)|0);
 $132 = (getTempRet0() | 0);
 $133 = $131 & 2031616;
 $134 = $129 | $133;
 $arrayidx1$i1193 = ((($a)) + 24|0);
 $135 = HEAP8[$arrayidx1$i1193>>0]|0;
 $136 = $135&255;
 $137 = (_bitshift64Shl(($136|0),0,8)|0);
 $138 = (getTempRet0() | 0);
 $139 = $137 | $130;
 $arrayidx3$i1197 = ((($a)) + 25|0);
 $140 = HEAP8[$arrayidx3$i1197>>0]|0;
 $141 = $140&255;
 $142 = (_bitshift64Shl(($141|0),0,16)|0);
 $143 = (getTempRet0() | 0);
 $144 = $139 | $142;
 $145 = $138 | $143;
 $arrayidx7$i1201 = ((($a)) + 26|0);
 $146 = HEAP8[$arrayidx7$i1201>>0]|0;
 $147 = $146&255;
 $148 = (_bitshift64Shl(($147|0),0,24)|0);
 $149 = (getTempRet0() | 0);
 $150 = $144 | $148;
 $151 = $145 | $149;
 $152 = (_bitshift64Lshr(($150|0),($151|0),5)|0);
 $153 = (getTempRet0() | 0);
 $154 = $152 & 2097151;
 $add$ptr34$idx = ((($a)) + 27|0);
 $add$ptr34$idx$val = HEAP8[$add$ptr34$idx>>0]|0;
 $add$ptr34$idx932 = ((($a)) + 28|0);
 $add$ptr34$idx932$val = HEAP8[$add$ptr34$idx932>>0]|0;
 $155 = $add$ptr34$idx$val&255;
 $156 = (_bitshift64Shl(($155|0),0,8)|0);
 $157 = (getTempRet0() | 0);
 $158 = $156 | $147;
 $159 = $add$ptr34$idx932$val&255;
 $160 = (_bitshift64Shl(($159|0),0,16)|0);
 $161 = (getTempRet0() | 0);
 $162 = $158 | $160;
 $163 = $157 | $161;
 $164 = (_bitshift64Lshr(($162|0),($163|0),2)|0);
 $165 = (getTempRet0() | 0);
 $166 = $164 & 2097151;
 $arrayidx1$i1173 = ((($a)) + 29|0);
 $167 = HEAP8[$arrayidx1$i1173>>0]|0;
 $168 = $167&255;
 $169 = (_bitshift64Shl(($168|0),0,8)|0);
 $170 = (getTempRet0() | 0);
 $171 = $169 | $159;
 $arrayidx3$i1177 = ((($a)) + 30|0);
 $172 = HEAP8[$arrayidx3$i1177>>0]|0;
 $173 = $172&255;
 $174 = (_bitshift64Shl(($173|0),0,16)|0);
 $175 = (getTempRet0() | 0);
 $176 = $171 | $174;
 $177 = $170 | $175;
 $arrayidx7$i1181 = ((($a)) + 31|0);
 $178 = HEAP8[$arrayidx7$i1181>>0]|0;
 $179 = $178&255;
 $180 = (_bitshift64Shl(($179|0),0,24)|0);
 $181 = (getTempRet0() | 0);
 $182 = $176 | $180;
 $183 = $177 | $181;
 $184 = (_bitshift64Lshr(($182|0),($183|0),7)|0);
 $185 = (getTempRet0() | 0);
 $b$val = HEAP8[$b>>0]|0;
 $b$idx = ((($b)) + 1|0);
 $b$idx$val = HEAP8[$b$idx>>0]|0;
 $b$idx931 = ((($b)) + 2|0);
 $b$idx931$val = HEAP8[$b$idx931>>0]|0;
 $186 = $b$val&255;
 $187 = $b$idx$val&255;
 $188 = (_bitshift64Shl(($187|0),0,8)|0);
 $189 = (getTempRet0() | 0);
 $190 = $188 | $186;
 $191 = $b$idx931$val&255;
 $192 = (_bitshift64Shl(($191|0),0,16)|0);
 $193 = (getTempRet0() | 0);
 $194 = $192 & 2031616;
 $195 = $190 | $194;
 $arrayidx1$i1153 = ((($b)) + 3|0);
 $196 = HEAP8[$arrayidx1$i1153>>0]|0;
 $197 = $196&255;
 $198 = (_bitshift64Shl(($197|0),0,8)|0);
 $199 = (getTempRet0() | 0);
 $200 = $198 | $191;
 $arrayidx3$i1157 = ((($b)) + 4|0);
 $201 = HEAP8[$arrayidx3$i1157>>0]|0;
 $202 = $201&255;
 $203 = (_bitshift64Shl(($202|0),0,16)|0);
 $204 = (getTempRet0() | 0);
 $205 = $200 | $203;
 $206 = $199 | $204;
 $arrayidx7$i1161 = ((($b)) + 5|0);
 $207 = HEAP8[$arrayidx7$i1161>>0]|0;
 $208 = $207&255;
 $209 = (_bitshift64Shl(($208|0),0,24)|0);
 $210 = (getTempRet0() | 0);
 $211 = $205 | $209;
 $212 = $206 | $210;
 $213 = (_bitshift64Lshr(($211|0),($212|0),5)|0);
 $214 = (getTempRet0() | 0);
 $215 = $213 & 2097151;
 $add$ptr47$idx = ((($b)) + 6|0);
 $add$ptr47$idx$val = HEAP8[$add$ptr47$idx>>0]|0;
 $add$ptr47$idx930 = ((($b)) + 7|0);
 $add$ptr47$idx930$val = HEAP8[$add$ptr47$idx930>>0]|0;
 $216 = $add$ptr47$idx$val&255;
 $217 = (_bitshift64Shl(($216|0),0,8)|0);
 $218 = (getTempRet0() | 0);
 $219 = $217 | $208;
 $220 = $add$ptr47$idx930$val&255;
 $221 = (_bitshift64Shl(($220|0),0,16)|0);
 $222 = (getTempRet0() | 0);
 $223 = $219 | $221;
 $224 = $218 | $222;
 $225 = (_bitshift64Lshr(($223|0),($224|0),2)|0);
 $226 = (getTempRet0() | 0);
 $227 = $225 & 2097151;
 $arrayidx1$i1133 = ((($b)) + 8|0);
 $228 = HEAP8[$arrayidx1$i1133>>0]|0;
 $229 = $228&255;
 $230 = (_bitshift64Shl(($229|0),0,8)|0);
 $231 = (getTempRet0() | 0);
 $232 = $230 | $220;
 $arrayidx3$i1137 = ((($b)) + 9|0);
 $233 = HEAP8[$arrayidx3$i1137>>0]|0;
 $234 = $233&255;
 $235 = (_bitshift64Shl(($234|0),0,16)|0);
 $236 = (getTempRet0() | 0);
 $237 = $232 | $235;
 $238 = $231 | $236;
 $arrayidx7$i1141 = ((($b)) + 10|0);
 $239 = HEAP8[$arrayidx7$i1141>>0]|0;
 $240 = $239&255;
 $241 = (_bitshift64Shl(($240|0),0,24)|0);
 $242 = (getTempRet0() | 0);
 $243 = $237 | $241;
 $244 = $238 | $242;
 $245 = (_bitshift64Lshr(($243|0),($244|0),7)|0);
 $246 = (getTempRet0() | 0);
 $247 = $245 & 2097151;
 $arrayidx1$i1120 = ((($b)) + 11|0);
 $248 = HEAP8[$arrayidx1$i1120>>0]|0;
 $249 = $248&255;
 $250 = (_bitshift64Shl(($249|0),0,8)|0);
 $251 = (getTempRet0() | 0);
 $252 = $250 | $240;
 $arrayidx3$i1124 = ((($b)) + 12|0);
 $253 = HEAP8[$arrayidx3$i1124>>0]|0;
 $254 = $253&255;
 $255 = (_bitshift64Shl(($254|0),0,16)|0);
 $256 = (getTempRet0() | 0);
 $257 = $252 | $255;
 $258 = $251 | $256;
 $arrayidx7$i1128 = ((($b)) + 13|0);
 $259 = HEAP8[$arrayidx7$i1128>>0]|0;
 $260 = $259&255;
 $261 = (_bitshift64Shl(($260|0),0,24)|0);
 $262 = (getTempRet0() | 0);
 $263 = $257 | $261;
 $264 = $258 | $262;
 $265 = (_bitshift64Lshr(($263|0),($264|0),4)|0);
 $266 = (getTempRet0() | 0);
 $267 = $265 & 2097151;
 $add$ptr59$idx = ((($b)) + 14|0);
 $add$ptr59$idx$val = HEAP8[$add$ptr59$idx>>0]|0;
 $add$ptr59$idx929 = ((($b)) + 15|0);
 $add$ptr59$idx929$val = HEAP8[$add$ptr59$idx929>>0]|0;
 $268 = $add$ptr59$idx$val&255;
 $269 = (_bitshift64Shl(($268|0),0,8)|0);
 $270 = (getTempRet0() | 0);
 $271 = $269 | $260;
 $272 = $add$ptr59$idx929$val&255;
 $273 = (_bitshift64Shl(($272|0),0,16)|0);
 $274 = (getTempRet0() | 0);
 $275 = $271 | $273;
 $276 = $270 | $274;
 $277 = (_bitshift64Lshr(($275|0),($276|0),1)|0);
 $278 = (getTempRet0() | 0);
 $279 = $277 & 2097151;
 $arrayidx1$i1100 = ((($b)) + 16|0);
 $280 = HEAP8[$arrayidx1$i1100>>0]|0;
 $281 = $280&255;
 $282 = (_bitshift64Shl(($281|0),0,8)|0);
 $283 = (getTempRet0() | 0);
 $284 = $282 | $272;
 $arrayidx3$i1104 = ((($b)) + 17|0);
 $285 = HEAP8[$arrayidx3$i1104>>0]|0;
 $286 = $285&255;
 $287 = (_bitshift64Shl(($286|0),0,16)|0);
 $288 = (getTempRet0() | 0);
 $289 = $284 | $287;
 $290 = $283 | $288;
 $arrayidx7$i1108 = ((($b)) + 18|0);
 $291 = HEAP8[$arrayidx7$i1108>>0]|0;
 $292 = $291&255;
 $293 = (_bitshift64Shl(($292|0),0,24)|0);
 $294 = (getTempRet0() | 0);
 $295 = $289 | $293;
 $296 = $290 | $294;
 $297 = (_bitshift64Lshr(($295|0),($296|0),6)|0);
 $298 = (getTempRet0() | 0);
 $299 = $297 & 2097151;
 $add$ptr67$idx = ((($b)) + 19|0);
 $add$ptr67$idx$val = HEAP8[$add$ptr67$idx>>0]|0;
 $add$ptr67$idx928 = ((($b)) + 20|0);
 $add$ptr67$idx928$val = HEAP8[$add$ptr67$idx928>>0]|0;
 $300 = $add$ptr67$idx$val&255;
 $301 = (_bitshift64Shl(($300|0),0,8)|0);
 $302 = (getTempRet0() | 0);
 $303 = $301 | $292;
 $304 = $add$ptr67$idx928$val&255;
 $305 = (_bitshift64Shl(($304|0),0,16)|0);
 $306 = (getTempRet0() | 0);
 $307 = $303 | $305;
 $308 = $302 | $306;
 $309 = (_bitshift64Lshr(($307|0),($308|0),3)|0);
 $310 = (getTempRet0() | 0);
 $add$ptr71 = ((($b)) + 21|0);
 $add$ptr71$val = HEAP8[$add$ptr71>>0]|0;
 $add$ptr71$idx = ((($b)) + 22|0);
 $add$ptr71$idx$val = HEAP8[$add$ptr71$idx>>0]|0;
 $add$ptr71$idx927 = ((($b)) + 23|0);
 $add$ptr71$idx927$val = HEAP8[$add$ptr71$idx927>>0]|0;
 $311 = $add$ptr71$val&255;
 $312 = $add$ptr71$idx$val&255;
 $313 = (_bitshift64Shl(($312|0),0,8)|0);
 $314 = (getTempRet0() | 0);
 $315 = $313 | $311;
 $316 = $add$ptr71$idx927$val&255;
 $317 = (_bitshift64Shl(($316|0),0,16)|0);
 $318 = (getTempRet0() | 0);
 $319 = $317 & 2031616;
 $320 = $315 | $319;
 $arrayidx1$i1073 = ((($b)) + 24|0);
 $321 = HEAP8[$arrayidx1$i1073>>0]|0;
 $322 = $321&255;
 $323 = (_bitshift64Shl(($322|0),0,8)|0);
 $324 = (getTempRet0() | 0);
 $325 = $323 | $316;
 $arrayidx3$i1077 = ((($b)) + 25|0);
 $326 = HEAP8[$arrayidx3$i1077>>0]|0;
 $327 = $326&255;
 $328 = (_bitshift64Shl(($327|0),0,16)|0);
 $329 = (getTempRet0() | 0);
 $330 = $325 | $328;
 $331 = $324 | $329;
 $arrayidx7$i1081 = ((($b)) + 26|0);
 $332 = HEAP8[$arrayidx7$i1081>>0]|0;
 $333 = $332&255;
 $334 = (_bitshift64Shl(($333|0),0,24)|0);
 $335 = (getTempRet0() | 0);
 $336 = $330 | $334;
 $337 = $331 | $335;
 $338 = (_bitshift64Lshr(($336|0),($337|0),5)|0);
 $339 = (getTempRet0() | 0);
 $340 = $338 & 2097151;
 $add$ptr78$idx = ((($b)) + 27|0);
 $add$ptr78$idx$val = HEAP8[$add$ptr78$idx>>0]|0;
 $add$ptr78$idx926 = ((($b)) + 28|0);
 $add$ptr78$idx926$val = HEAP8[$add$ptr78$idx926>>0]|0;
 $341 = $add$ptr78$idx$val&255;
 $342 = (_bitshift64Shl(($341|0),0,8)|0);
 $343 = (getTempRet0() | 0);
 $344 = $342 | $333;
 $345 = $add$ptr78$idx926$val&255;
 $346 = (_bitshift64Shl(($345|0),0,16)|0);
 $347 = (getTempRet0() | 0);
 $348 = $344 | $346;
 $349 = $343 | $347;
 $350 = (_bitshift64Lshr(($348|0),($349|0),2)|0);
 $351 = (getTempRet0() | 0);
 $352 = $350 & 2097151;
 $arrayidx1$i1053 = ((($b)) + 29|0);
 $353 = HEAP8[$arrayidx1$i1053>>0]|0;
 $354 = $353&255;
 $355 = (_bitshift64Shl(($354|0),0,8)|0);
 $356 = (getTempRet0() | 0);
 $357 = $355 | $345;
 $arrayidx3$i1057 = ((($b)) + 30|0);
 $358 = HEAP8[$arrayidx3$i1057>>0]|0;
 $359 = $358&255;
 $360 = (_bitshift64Shl(($359|0),0,16)|0);
 $361 = (getTempRet0() | 0);
 $362 = $357 | $360;
 $363 = $356 | $361;
 $arrayidx7$i1061 = ((($b)) + 31|0);
 $364 = HEAP8[$arrayidx7$i1061>>0]|0;
 $365 = $364&255;
 $366 = (_bitshift64Shl(($365|0),0,24)|0);
 $367 = (getTempRet0() | 0);
 $368 = $362 | $366;
 $369 = $363 | $367;
 $370 = (_bitshift64Lshr(($368|0),($369|0),7)|0);
 $371 = (getTempRet0() | 0);
 $c$val = HEAP8[$c>>0]|0;
 $c$idx = ((($c)) + 1|0);
 $c$idx$val = HEAP8[$c$idx>>0]|0;
 $c$idx925 = ((($c)) + 2|0);
 $c$idx925$val = HEAP8[$c$idx925>>0]|0;
 $372 = $c$val&255;
 $373 = $c$idx$val&255;
 $374 = (_bitshift64Shl(($373|0),0,8)|0);
 $375 = (getTempRet0() | 0);
 $376 = $374 | $372;
 $377 = $c$idx925$val&255;
 $378 = (_bitshift64Shl(($377|0),0,16)|0);
 $379 = (getTempRet0() | 0);
 $380 = $378 & 2031616;
 $381 = $376 | $380;
 $arrayidx1$i1033 = ((($c)) + 3|0);
 $382 = HEAP8[$arrayidx1$i1033>>0]|0;
 $383 = $382&255;
 $384 = (_bitshift64Shl(($383|0),0,8)|0);
 $385 = (getTempRet0() | 0);
 $386 = $384 | $377;
 $arrayidx3$i1037 = ((($c)) + 4|0);
 $387 = HEAP8[$arrayidx3$i1037>>0]|0;
 $388 = $387&255;
 $389 = (_bitshift64Shl(($388|0),0,16)|0);
 $390 = (getTempRet0() | 0);
 $391 = $386 | $389;
 $392 = $385 | $390;
 $arrayidx7$i1041 = ((($c)) + 5|0);
 $393 = HEAP8[$arrayidx7$i1041>>0]|0;
 $394 = $393&255;
 $395 = (_bitshift64Shl(($394|0),0,24)|0);
 $396 = (getTempRet0() | 0);
 $397 = $391 | $395;
 $398 = $392 | $396;
 $399 = (_bitshift64Lshr(($397|0),($398|0),5)|0);
 $400 = (getTempRet0() | 0);
 $401 = $399 & 2097151;
 $add$ptr91$idx = ((($c)) + 6|0);
 $add$ptr91$idx$val = HEAP8[$add$ptr91$idx>>0]|0;
 $add$ptr91$idx924 = ((($c)) + 7|0);
 $add$ptr91$idx924$val = HEAP8[$add$ptr91$idx924>>0]|0;
 $402 = $add$ptr91$idx$val&255;
 $403 = (_bitshift64Shl(($402|0),0,8)|0);
 $404 = (getTempRet0() | 0);
 $405 = $403 | $394;
 $406 = $add$ptr91$idx924$val&255;
 $407 = (_bitshift64Shl(($406|0),0,16)|0);
 $408 = (getTempRet0() | 0);
 $409 = $405 | $407;
 $410 = $404 | $408;
 $411 = (_bitshift64Lshr(($409|0),($410|0),2)|0);
 $412 = (getTempRet0() | 0);
 $413 = $411 & 2097151;
 $arrayidx1$i1013 = ((($c)) + 8|0);
 $414 = HEAP8[$arrayidx1$i1013>>0]|0;
 $415 = $414&255;
 $416 = (_bitshift64Shl(($415|0),0,8)|0);
 $417 = (getTempRet0() | 0);
 $418 = $416 | $406;
 $arrayidx3$i1017 = ((($c)) + 9|0);
 $419 = HEAP8[$arrayidx3$i1017>>0]|0;
 $420 = $419&255;
 $421 = (_bitshift64Shl(($420|0),0,16)|0);
 $422 = (getTempRet0() | 0);
 $423 = $418 | $421;
 $424 = $417 | $422;
 $arrayidx7$i1021 = ((($c)) + 10|0);
 $425 = HEAP8[$arrayidx7$i1021>>0]|0;
 $426 = $425&255;
 $427 = (_bitshift64Shl(($426|0),0,24)|0);
 $428 = (getTempRet0() | 0);
 $429 = $423 | $427;
 $430 = $424 | $428;
 $431 = (_bitshift64Lshr(($429|0),($430|0),7)|0);
 $432 = (getTempRet0() | 0);
 $433 = $431 & 2097151;
 $arrayidx1$i1000 = ((($c)) + 11|0);
 $434 = HEAP8[$arrayidx1$i1000>>0]|0;
 $435 = $434&255;
 $436 = (_bitshift64Shl(($435|0),0,8)|0);
 $437 = (getTempRet0() | 0);
 $438 = $436 | $426;
 $arrayidx3$i1004 = ((($c)) + 12|0);
 $439 = HEAP8[$arrayidx3$i1004>>0]|0;
 $440 = $439&255;
 $441 = (_bitshift64Shl(($440|0),0,16)|0);
 $442 = (getTempRet0() | 0);
 $443 = $438 | $441;
 $444 = $437 | $442;
 $arrayidx7$i1008 = ((($c)) + 13|0);
 $445 = HEAP8[$arrayidx7$i1008>>0]|0;
 $446 = $445&255;
 $447 = (_bitshift64Shl(($446|0),0,24)|0);
 $448 = (getTempRet0() | 0);
 $449 = $443 | $447;
 $450 = $444 | $448;
 $451 = (_bitshift64Lshr(($449|0),($450|0),4)|0);
 $452 = (getTempRet0() | 0);
 $453 = $451 & 2097151;
 $add$ptr103$idx = ((($c)) + 14|0);
 $add$ptr103$idx$val = HEAP8[$add$ptr103$idx>>0]|0;
 $add$ptr103$idx923 = ((($c)) + 15|0);
 $add$ptr103$idx923$val = HEAP8[$add$ptr103$idx923>>0]|0;
 $454 = $add$ptr103$idx$val&255;
 $455 = (_bitshift64Shl(($454|0),0,8)|0);
 $456 = (getTempRet0() | 0);
 $457 = $455 | $446;
 $458 = $add$ptr103$idx923$val&255;
 $459 = (_bitshift64Shl(($458|0),0,16)|0);
 $460 = (getTempRet0() | 0);
 $461 = $457 | $459;
 $462 = $456 | $460;
 $463 = (_bitshift64Lshr(($461|0),($462|0),1)|0);
 $464 = (getTempRet0() | 0);
 $465 = $463 & 2097151;
 $arrayidx1$i980 = ((($c)) + 16|0);
 $466 = HEAP8[$arrayidx1$i980>>0]|0;
 $467 = $466&255;
 $468 = (_bitshift64Shl(($467|0),0,8)|0);
 $469 = (getTempRet0() | 0);
 $470 = $468 | $458;
 $arrayidx3$i984 = ((($c)) + 17|0);
 $471 = HEAP8[$arrayidx3$i984>>0]|0;
 $472 = $471&255;
 $473 = (_bitshift64Shl(($472|0),0,16)|0);
 $474 = (getTempRet0() | 0);
 $475 = $470 | $473;
 $476 = $469 | $474;
 $arrayidx7$i988 = ((($c)) + 18|0);
 $477 = HEAP8[$arrayidx7$i988>>0]|0;
 $478 = $477&255;
 $479 = (_bitshift64Shl(($478|0),0,24)|0);
 $480 = (getTempRet0() | 0);
 $481 = $475 | $479;
 $482 = $476 | $480;
 $483 = (_bitshift64Lshr(($481|0),($482|0),6)|0);
 $484 = (getTempRet0() | 0);
 $485 = $483 & 2097151;
 $add$ptr111$idx = ((($c)) + 19|0);
 $add$ptr111$idx$val = HEAP8[$add$ptr111$idx>>0]|0;
 $add$ptr111$idx922 = ((($c)) + 20|0);
 $add$ptr111$idx922$val = HEAP8[$add$ptr111$idx922>>0]|0;
 $486 = $add$ptr111$idx$val&255;
 $487 = (_bitshift64Shl(($486|0),0,8)|0);
 $488 = (getTempRet0() | 0);
 $489 = $487 | $478;
 $490 = $add$ptr111$idx922$val&255;
 $491 = (_bitshift64Shl(($490|0),0,16)|0);
 $492 = (getTempRet0() | 0);
 $493 = $489 | $491;
 $494 = $488 | $492;
 $495 = (_bitshift64Lshr(($493|0),($494|0),3)|0);
 $496 = (getTempRet0() | 0);
 $add$ptr115 = ((($c)) + 21|0);
 $add$ptr115$val = HEAP8[$add$ptr115>>0]|0;
 $add$ptr115$idx = ((($c)) + 22|0);
 $add$ptr115$idx$val = HEAP8[$add$ptr115$idx>>0]|0;
 $add$ptr115$idx921 = ((($c)) + 23|0);
 $add$ptr115$idx921$val = HEAP8[$add$ptr115$idx921>>0]|0;
 $497 = $add$ptr115$val&255;
 $498 = $add$ptr115$idx$val&255;
 $499 = (_bitshift64Shl(($498|0),0,8)|0);
 $500 = (getTempRet0() | 0);
 $501 = $499 | $497;
 $502 = $add$ptr115$idx921$val&255;
 $503 = (_bitshift64Shl(($502|0),0,16)|0);
 $504 = (getTempRet0() | 0);
 $505 = $503 & 2031616;
 $506 = $501 | $505;
 $arrayidx1$i953 = ((($c)) + 24|0);
 $507 = HEAP8[$arrayidx1$i953>>0]|0;
 $508 = $507&255;
 $509 = (_bitshift64Shl(($508|0),0,8)|0);
 $510 = (getTempRet0() | 0);
 $511 = $509 | $502;
 $arrayidx3$i957 = ((($c)) + 25|0);
 $512 = HEAP8[$arrayidx3$i957>>0]|0;
 $513 = $512&255;
 $514 = (_bitshift64Shl(($513|0),0,16)|0);
 $515 = (getTempRet0() | 0);
 $516 = $511 | $514;
 $517 = $510 | $515;
 $arrayidx7$i961 = ((($c)) + 26|0);
 $518 = HEAP8[$arrayidx7$i961>>0]|0;
 $519 = $518&255;
 $520 = (_bitshift64Shl(($519|0),0,24)|0);
 $521 = (getTempRet0() | 0);
 $522 = $516 | $520;
 $523 = $517 | $521;
 $524 = (_bitshift64Lshr(($522|0),($523|0),5)|0);
 $525 = (getTempRet0() | 0);
 $526 = $524 & 2097151;
 $add$ptr122$idx = ((($c)) + 27|0);
 $add$ptr122$idx$val = HEAP8[$add$ptr122$idx>>0]|0;
 $add$ptr122$idx920 = ((($c)) + 28|0);
 $add$ptr122$idx920$val = HEAP8[$add$ptr122$idx920>>0]|0;
 $527 = $add$ptr122$idx$val&255;
 $528 = (_bitshift64Shl(($527|0),0,8)|0);
 $529 = (getTempRet0() | 0);
 $530 = $528 | $519;
 $531 = $add$ptr122$idx920$val&255;
 $532 = (_bitshift64Shl(($531|0),0,16)|0);
 $533 = (getTempRet0() | 0);
 $534 = $530 | $532;
 $535 = $529 | $533;
 $536 = (_bitshift64Lshr(($534|0),($535|0),2)|0);
 $537 = (getTempRet0() | 0);
 $538 = $536 & 2097151;
 $arrayidx1$i = ((($c)) + 29|0);
 $539 = HEAP8[$arrayidx1$i>>0]|0;
 $540 = $539&255;
 $541 = (_bitshift64Shl(($540|0),0,8)|0);
 $542 = (getTempRet0() | 0);
 $543 = $541 | $531;
 $arrayidx3$i = ((($c)) + 30|0);
 $544 = HEAP8[$arrayidx3$i>>0]|0;
 $545 = $544&255;
 $546 = (_bitshift64Shl(($545|0),0,16)|0);
 $547 = (getTempRet0() | 0);
 $548 = $543 | $546;
 $549 = $542 | $547;
 $arrayidx7$i = ((($c)) + 31|0);
 $550 = HEAP8[$arrayidx7$i>>0]|0;
 $551 = $550&255;
 $552 = (_bitshift64Shl(($551|0),0,24)|0);
 $553 = (getTempRet0() | 0);
 $554 = $548 | $552;
 $555 = $549 | $553;
 $556 = (_bitshift64Lshr(($554|0),($555|0),7)|0);
 $557 = (getTempRet0() | 0);
 $558 = (___muldi3(($195|0),($189|0),($9|0),($3|0))|0);
 $559 = (getTempRet0() | 0);
 $560 = (_i64Subtract(($381|0),($375|0),($558|0),($559|0))|0);
 $561 = (getTempRet0() | 0);
 $562 = (___muldi3(($195|0),($189|0),($29|0),0)|0);
 $563 = (getTempRet0() | 0);
 $564 = (___muldi3(($215|0),0,($9|0),($3|0))|0);
 $565 = (getTempRet0() | 0);
 $566 = (___muldi3(($195|0),($189|0),($41|0),0)|0);
 $567 = (getTempRet0() | 0);
 $568 = (___muldi3(($215|0),0,($29|0),0)|0);
 $569 = (getTempRet0() | 0);
 $570 = (___muldi3(($227|0),0,($9|0),($3|0))|0);
 $571 = (getTempRet0() | 0);
 $572 = (_i64Add(($568|0),($569|0),($566|0),($567|0))|0);
 $573 = (getTempRet0() | 0);
 $574 = (_i64Add(($572|0),($573|0),($570|0),($571|0))|0);
 $575 = (getTempRet0() | 0);
 $576 = (_i64Subtract(($413|0),0,($574|0),($575|0))|0);
 $577 = (getTempRet0() | 0);
 $578 = (___muldi3(($195|0),($189|0),($61|0),0)|0);
 $579 = (getTempRet0() | 0);
 $580 = (___muldi3(($215|0),0,($41|0),0)|0);
 $581 = (getTempRet0() | 0);
 $582 = (___muldi3(($227|0),0,($29|0),0)|0);
 $583 = (getTempRet0() | 0);
 $584 = (___muldi3(($247|0),0,($9|0),($3|0))|0);
 $585 = (getTempRet0() | 0);
 $586 = (___muldi3(($195|0),($189|0),($81|0),0)|0);
 $587 = (getTempRet0() | 0);
 $588 = (___muldi3(($215|0),0,($61|0),0)|0);
 $589 = (getTempRet0() | 0);
 $590 = (___muldi3(($227|0),0,($41|0),0)|0);
 $591 = (getTempRet0() | 0);
 $592 = (___muldi3(($247|0),0,($29|0),0)|0);
 $593 = (getTempRet0() | 0);
 $594 = (___muldi3(($267|0),0,($9|0),($3|0))|0);
 $595 = (getTempRet0() | 0);
 $596 = (_i64Add(($588|0),($589|0),($586|0),($587|0))|0);
 $597 = (getTempRet0() | 0);
 $598 = (_i64Add(($596|0),($597|0),($590|0),($591|0))|0);
 $599 = (getTempRet0() | 0);
 $600 = (_i64Add(($598|0),($599|0),($592|0),($593|0))|0);
 $601 = (getTempRet0() | 0);
 $602 = (_i64Add(($600|0),($601|0),($594|0),($595|0))|0);
 $603 = (getTempRet0() | 0);
 $604 = (_i64Subtract(($453|0),0,($602|0),($603|0))|0);
 $605 = (getTempRet0() | 0);
 $606 = (___muldi3(($195|0),($189|0),($93|0),0)|0);
 $607 = (getTempRet0() | 0);
 $608 = (___muldi3(($215|0),0,($81|0),0)|0);
 $609 = (getTempRet0() | 0);
 $610 = (___muldi3(($227|0),0,($61|0),0)|0);
 $611 = (getTempRet0() | 0);
 $612 = (___muldi3(($247|0),0,($41|0),0)|0);
 $613 = (getTempRet0() | 0);
 $614 = (___muldi3(($267|0),0,($29|0),0)|0);
 $615 = (getTempRet0() | 0);
 $616 = (___muldi3(($279|0),0,($9|0),($3|0))|0);
 $617 = (getTempRet0() | 0);
 $618 = (___muldi3(($195|0),($189|0),($113|0),0)|0);
 $619 = (getTempRet0() | 0);
 $620 = (___muldi3(($215|0),0,($93|0),0)|0);
 $621 = (getTempRet0() | 0);
 $622 = (___muldi3(($227|0),0,($81|0),0)|0);
 $623 = (getTempRet0() | 0);
 $624 = (___muldi3(($247|0),0,($61|0),0)|0);
 $625 = (getTempRet0() | 0);
 $626 = (___muldi3(($267|0),0,($41|0),0)|0);
 $627 = (getTempRet0() | 0);
 $628 = (___muldi3(($279|0),0,($29|0),0)|0);
 $629 = (getTempRet0() | 0);
 $630 = (___muldi3(($299|0),0,($9|0),($3|0))|0);
 $631 = (getTempRet0() | 0);
 $632 = (_i64Add(($620|0),($621|0),($618|0),($619|0))|0);
 $633 = (getTempRet0() | 0);
 $634 = (_i64Add(($632|0),($633|0),($622|0),($623|0))|0);
 $635 = (getTempRet0() | 0);
 $636 = (_i64Add(($634|0),($635|0),($624|0),($625|0))|0);
 $637 = (getTempRet0() | 0);
 $638 = (_i64Add(($636|0),($637|0),($626|0),($627|0))|0);
 $639 = (getTempRet0() | 0);
 $640 = (_i64Add(($638|0),($639|0),($628|0),($629|0))|0);
 $641 = (getTempRet0() | 0);
 $642 = (_i64Add(($640|0),($641|0),($630|0),($631|0))|0);
 $643 = (getTempRet0() | 0);
 $644 = (_i64Subtract(($485|0),0,($642|0),($643|0))|0);
 $645 = (getTempRet0() | 0);
 $646 = (___muldi3(($195|0),($189|0),($123|0),($124|0))|0);
 $647 = (getTempRet0() | 0);
 $648 = (___muldi3(($215|0),0,($113|0),0)|0);
 $649 = (getTempRet0() | 0);
 $650 = (___muldi3(($227|0),0,($93|0),0)|0);
 $651 = (getTempRet0() | 0);
 $652 = (___muldi3(($247|0),0,($81|0),0)|0);
 $653 = (getTempRet0() | 0);
 $654 = (___muldi3(($267|0),0,($61|0),0)|0);
 $655 = (getTempRet0() | 0);
 $656 = (___muldi3(($279|0),0,($41|0),0)|0);
 $657 = (getTempRet0() | 0);
 $658 = (___muldi3(($299|0),0,($29|0),0)|0);
 $659 = (getTempRet0() | 0);
 $660 = (___muldi3(($309|0),($310|0),($9|0),($3|0))|0);
 $661 = (getTempRet0() | 0);
 $662 = (___muldi3(($195|0),($189|0),($134|0),($128|0))|0);
 $663 = (getTempRet0() | 0);
 $664 = (___muldi3(($215|0),0,($123|0),($124|0))|0);
 $665 = (getTempRet0() | 0);
 $666 = (___muldi3(($227|0),0,($113|0),0)|0);
 $667 = (getTempRet0() | 0);
 $668 = (___muldi3(($247|0),0,($93|0),0)|0);
 $669 = (getTempRet0() | 0);
 $670 = (___muldi3(($267|0),0,($81|0),0)|0);
 $671 = (getTempRet0() | 0);
 $672 = (___muldi3(($279|0),0,($61|0),0)|0);
 $673 = (getTempRet0() | 0);
 $674 = (___muldi3(($299|0),0,($41|0),0)|0);
 $675 = (getTempRet0() | 0);
 $676 = (___muldi3(($309|0),($310|0),($29|0),0)|0);
 $677 = (getTempRet0() | 0);
 $678 = (___muldi3(($320|0),($314|0),($9|0),($3|0))|0);
 $679 = (getTempRet0() | 0);
 $680 = (_i64Add(($664|0),($665|0),($662|0),($663|0))|0);
 $681 = (getTempRet0() | 0);
 $682 = (_i64Add(($680|0),($681|0),($666|0),($667|0))|0);
 $683 = (getTempRet0() | 0);
 $684 = (_i64Add(($682|0),($683|0),($668|0),($669|0))|0);
 $685 = (getTempRet0() | 0);
 $686 = (_i64Add(($684|0),($685|0),($670|0),($671|0))|0);
 $687 = (getTempRet0() | 0);
 $688 = (_i64Add(($686|0),($687|0),($672|0),($673|0))|0);
 $689 = (getTempRet0() | 0);
 $690 = (_i64Add(($688|0),($689|0),($674|0),($675|0))|0);
 $691 = (getTempRet0() | 0);
 $692 = (_i64Add(($690|0),($691|0),($676|0),($677|0))|0);
 $693 = (getTempRet0() | 0);
 $694 = (_i64Add(($692|0),($693|0),($678|0),($679|0))|0);
 $695 = (getTempRet0() | 0);
 $696 = (_i64Subtract(($506|0),($500|0),($694|0),($695|0))|0);
 $697 = (getTempRet0() | 0);
 $698 = (___muldi3(($195|0),($189|0),($154|0),0)|0);
 $699 = (getTempRet0() | 0);
 $700 = (___muldi3(($215|0),0,($134|0),($128|0))|0);
 $701 = (getTempRet0() | 0);
 $702 = (___muldi3(($227|0),0,($123|0),($124|0))|0);
 $703 = (getTempRet0() | 0);
 $704 = (___muldi3(($247|0),0,($113|0),0)|0);
 $705 = (getTempRet0() | 0);
 $706 = (___muldi3(($267|0),0,($93|0),0)|0);
 $707 = (getTempRet0() | 0);
 $708 = (___muldi3(($279|0),0,($81|0),0)|0);
 $709 = (getTempRet0() | 0);
 $710 = (___muldi3(($299|0),0,($61|0),0)|0);
 $711 = (getTempRet0() | 0);
 $712 = (___muldi3(($309|0),($310|0),($41|0),0)|0);
 $713 = (getTempRet0() | 0);
 $714 = (___muldi3(($320|0),($314|0),($29|0),0)|0);
 $715 = (getTempRet0() | 0);
 $716 = (___muldi3(($340|0),0,($9|0),($3|0))|0);
 $717 = (getTempRet0() | 0);
 $718 = (___muldi3(($195|0),($189|0),($166|0),0)|0);
 $719 = (getTempRet0() | 0);
 $720 = (___muldi3(($215|0),0,($154|0),0)|0);
 $721 = (getTempRet0() | 0);
 $722 = (___muldi3(($227|0),0,($134|0),($128|0))|0);
 $723 = (getTempRet0() | 0);
 $724 = (___muldi3(($247|0),0,($123|0),($124|0))|0);
 $725 = (getTempRet0() | 0);
 $726 = (___muldi3(($267|0),0,($113|0),0)|0);
 $727 = (getTempRet0() | 0);
 $728 = (___muldi3(($279|0),0,($93|0),0)|0);
 $729 = (getTempRet0() | 0);
 $730 = (___muldi3(($299|0),0,($81|0),0)|0);
 $731 = (getTempRet0() | 0);
 $732 = (___muldi3(($309|0),($310|0),($61|0),0)|0);
 $733 = (getTempRet0() | 0);
 $734 = (___muldi3(($320|0),($314|0),($41|0),0)|0);
 $735 = (getTempRet0() | 0);
 $736 = (___muldi3(($340|0),0,($29|0),0)|0);
 $737 = (getTempRet0() | 0);
 $738 = (___muldi3(($352|0),0,($9|0),($3|0))|0);
 $739 = (getTempRet0() | 0);
 $740 = (_i64Add(($720|0),($721|0),($718|0),($719|0))|0);
 $741 = (getTempRet0() | 0);
 $742 = (_i64Add(($740|0),($741|0),($722|0),($723|0))|0);
 $743 = (getTempRet0() | 0);
 $744 = (_i64Add(($742|0),($743|0),($724|0),($725|0))|0);
 $745 = (getTempRet0() | 0);
 $746 = (_i64Add(($744|0),($745|0),($726|0),($727|0))|0);
 $747 = (getTempRet0() | 0);
 $748 = (_i64Add(($746|0),($747|0),($728|0),($729|0))|0);
 $749 = (getTempRet0() | 0);
 $750 = (_i64Add(($748|0),($749|0),($730|0),($731|0))|0);
 $751 = (getTempRet0() | 0);
 $752 = (_i64Add(($750|0),($751|0),($732|0),($733|0))|0);
 $753 = (getTempRet0() | 0);
 $754 = (_i64Add(($752|0),($753|0),($734|0),($735|0))|0);
 $755 = (getTempRet0() | 0);
 $756 = (_i64Add(($754|0),($755|0),($736|0),($737|0))|0);
 $757 = (getTempRet0() | 0);
 $758 = (_i64Add(($756|0),($757|0),($738|0),($739|0))|0);
 $759 = (getTempRet0() | 0);
 $760 = (_i64Subtract(($538|0),0,($758|0),($759|0))|0);
 $761 = (getTempRet0() | 0);
 $762 = (___muldi3(($195|0),($189|0),($184|0),($185|0))|0);
 $763 = (getTempRet0() | 0);
 $764 = (___muldi3(($215|0),0,($166|0),0)|0);
 $765 = (getTempRet0() | 0);
 $766 = (___muldi3(($227|0),0,($154|0),0)|0);
 $767 = (getTempRet0() | 0);
 $768 = (___muldi3(($247|0),0,($134|0),($128|0))|0);
 $769 = (getTempRet0() | 0);
 $770 = (___muldi3(($267|0),0,($123|0),($124|0))|0);
 $771 = (getTempRet0() | 0);
 $772 = (___muldi3(($279|0),0,($113|0),0)|0);
 $773 = (getTempRet0() | 0);
 $774 = (___muldi3(($299|0),0,($93|0),0)|0);
 $775 = (getTempRet0() | 0);
 $776 = (___muldi3(($309|0),($310|0),($81|0),0)|0);
 $777 = (getTempRet0() | 0);
 $778 = (___muldi3(($320|0),($314|0),($61|0),0)|0);
 $779 = (getTempRet0() | 0);
 $780 = (___muldi3(($340|0),0,($41|0),0)|0);
 $781 = (getTempRet0() | 0);
 $782 = (___muldi3(($352|0),0,($29|0),0)|0);
 $783 = (getTempRet0() | 0);
 $784 = (___muldi3(($370|0),($371|0),($9|0),($3|0))|0);
 $785 = (getTempRet0() | 0);
 $786 = (___muldi3(($370|0),($371|0),($29|0),0)|0);
 $787 = (getTempRet0() | 0);
 $788 = (___muldi3(($352|0),0,($41|0),0)|0);
 $789 = (getTempRet0() | 0);
 $790 = (___muldi3(($340|0),0,($61|0),0)|0);
 $791 = (getTempRet0() | 0);
 $792 = (___muldi3(($320|0),($314|0),($81|0),0)|0);
 $793 = (getTempRet0() | 0);
 $794 = (___muldi3(($309|0),($310|0),($93|0),0)|0);
 $795 = (getTempRet0() | 0);
 $796 = (___muldi3(($299|0),0,($113|0),0)|0);
 $797 = (getTempRet0() | 0);
 $798 = (___muldi3(($279|0),0,($123|0),($124|0))|0);
 $799 = (getTempRet0() | 0);
 $800 = (___muldi3(($267|0),0,($134|0),($128|0))|0);
 $801 = (getTempRet0() | 0);
 $802 = (___muldi3(($247|0),0,($154|0),0)|0);
 $803 = (getTempRet0() | 0);
 $804 = (___muldi3(($227|0),0,($166|0),0)|0);
 $805 = (getTempRet0() | 0);
 $806 = (___muldi3(($215|0),0,($184|0),($185|0))|0);
 $807 = (getTempRet0() | 0);
 $808 = (_i64Add(($804|0),($805|0),($806|0),($807|0))|0);
 $809 = (getTempRet0() | 0);
 $810 = (_i64Add(($808|0),($809|0),($802|0),($803|0))|0);
 $811 = (getTempRet0() | 0);
 $812 = (_i64Add(($810|0),($811|0),($800|0),($801|0))|0);
 $813 = (getTempRet0() | 0);
 $814 = (_i64Add(($812|0),($813|0),($798|0),($799|0))|0);
 $815 = (getTempRet0() | 0);
 $816 = (_i64Add(($814|0),($815|0),($796|0),($797|0))|0);
 $817 = (getTempRet0() | 0);
 $818 = (_i64Add(($816|0),($817|0),($794|0),($795|0))|0);
 $819 = (getTempRet0() | 0);
 $820 = (_i64Add(($818|0),($819|0),($792|0),($793|0))|0);
 $821 = (getTempRet0() | 0);
 $822 = (_i64Add(($820|0),($821|0),($790|0),($791|0))|0);
 $823 = (getTempRet0() | 0);
 $824 = (_i64Add(($822|0),($823|0),($788|0),($789|0))|0);
 $825 = (getTempRet0() | 0);
 $826 = (_i64Add(($824|0),($825|0),($786|0),($787|0))|0);
 $827 = (getTempRet0() | 0);
 $828 = (___muldi3(($370|0),($371|0),($61|0),0)|0);
 $829 = (getTempRet0() | 0);
 $830 = (___muldi3(($352|0),0,($81|0),0)|0);
 $831 = (getTempRet0() | 0);
 $832 = (___muldi3(($340|0),0,($93|0),0)|0);
 $833 = (getTempRet0() | 0);
 $834 = (___muldi3(($320|0),($314|0),($113|0),0)|0);
 $835 = (getTempRet0() | 0);
 $836 = (___muldi3(($309|0),($310|0),($123|0),($124|0))|0);
 $837 = (getTempRet0() | 0);
 $838 = (___muldi3(($299|0),0,($134|0),($128|0))|0);
 $839 = (getTempRet0() | 0);
 $840 = (___muldi3(($279|0),0,($154|0),0)|0);
 $841 = (getTempRet0() | 0);
 $842 = (___muldi3(($267|0),0,($166|0),0)|0);
 $843 = (getTempRet0() | 0);
 $844 = (___muldi3(($247|0),0,($184|0),($185|0))|0);
 $845 = (getTempRet0() | 0);
 $846 = (_i64Add(($842|0),($843|0),($844|0),($845|0))|0);
 $847 = (getTempRet0() | 0);
 $848 = (_i64Add(($846|0),($847|0),($840|0),($841|0))|0);
 $849 = (getTempRet0() | 0);
 $850 = (_i64Add(($848|0),($849|0),($838|0),($839|0))|0);
 $851 = (getTempRet0() | 0);
 $852 = (_i64Add(($850|0),($851|0),($836|0),($837|0))|0);
 $853 = (getTempRet0() | 0);
 $854 = (_i64Add(($852|0),($853|0),($834|0),($835|0))|0);
 $855 = (getTempRet0() | 0);
 $856 = (_i64Add(($854|0),($855|0),($832|0),($833|0))|0);
 $857 = (getTempRet0() | 0);
 $858 = (_i64Add(($856|0),($857|0),($830|0),($831|0))|0);
 $859 = (getTempRet0() | 0);
 $860 = (_i64Add(($858|0),($859|0),($828|0),($829|0))|0);
 $861 = (getTempRet0() | 0);
 $862 = (___muldi3(($370|0),($371|0),($93|0),0)|0);
 $863 = (getTempRet0() | 0);
 $864 = (___muldi3(($352|0),0,($113|0),0)|0);
 $865 = (getTempRet0() | 0);
 $866 = (___muldi3(($340|0),0,($123|0),($124|0))|0);
 $867 = (getTempRet0() | 0);
 $868 = (___muldi3(($320|0),($314|0),($134|0),($128|0))|0);
 $869 = (getTempRet0() | 0);
 $870 = (___muldi3(($309|0),($310|0),($154|0),0)|0);
 $871 = (getTempRet0() | 0);
 $872 = (___muldi3(($299|0),0,($166|0),0)|0);
 $873 = (getTempRet0() | 0);
 $874 = (___muldi3(($279|0),0,($184|0),($185|0))|0);
 $875 = (getTempRet0() | 0);
 $876 = (_i64Add(($872|0),($873|0),($874|0),($875|0))|0);
 $877 = (getTempRet0() | 0);
 $878 = (_i64Add(($876|0),($877|0),($870|0),($871|0))|0);
 $879 = (getTempRet0() | 0);
 $880 = (_i64Add(($878|0),($879|0),($868|0),($869|0))|0);
 $881 = (getTempRet0() | 0);
 $882 = (_i64Add(($880|0),($881|0),($866|0),($867|0))|0);
 $883 = (getTempRet0() | 0);
 $884 = (_i64Add(($882|0),($883|0),($864|0),($865|0))|0);
 $885 = (getTempRet0() | 0);
 $886 = (_i64Add(($884|0),($885|0),($862|0),($863|0))|0);
 $887 = (getTempRet0() | 0);
 $888 = (___muldi3(($370|0),($371|0),($123|0),($124|0))|0);
 $889 = (getTempRet0() | 0);
 $890 = (___muldi3(($352|0),0,($134|0),($128|0))|0);
 $891 = (getTempRet0() | 0);
 $892 = (___muldi3(($340|0),0,($154|0),0)|0);
 $893 = (getTempRet0() | 0);
 $894 = (___muldi3(($320|0),($314|0),($166|0),0)|0);
 $895 = (getTempRet0() | 0);
 $896 = (___muldi3(($309|0),($310|0),($184|0),($185|0))|0);
 $897 = (getTempRet0() | 0);
 $898 = (_i64Add(($894|0),($895|0),($896|0),($897|0))|0);
 $899 = (getTempRet0() | 0);
 $900 = (_i64Add(($898|0),($899|0),($892|0),($893|0))|0);
 $901 = (getTempRet0() | 0);
 $902 = (_i64Add(($900|0),($901|0),($890|0),($891|0))|0);
 $903 = (getTempRet0() | 0);
 $904 = (_i64Add(($902|0),($903|0),($888|0),($889|0))|0);
 $905 = (getTempRet0() | 0);
 $906 = (___muldi3(($370|0),($371|0),($154|0),0)|0);
 $907 = (getTempRet0() | 0);
 $908 = (___muldi3(($352|0),0,($166|0),0)|0);
 $909 = (getTempRet0() | 0);
 $910 = (___muldi3(($340|0),0,($184|0),($185|0))|0);
 $911 = (getTempRet0() | 0);
 $912 = (_i64Add(($908|0),($909|0),($910|0),($911|0))|0);
 $913 = (getTempRet0() | 0);
 $914 = (_i64Add(($912|0),($913|0),($906|0),($907|0))|0);
 $915 = (getTempRet0() | 0);
 $916 = (_i64Subtract(0,0,($184|0),($185|0))|0);
 $917 = (getTempRet0() | 0);
 $918 = (___muldi3(($370|0),($371|0),($916|0),($917|0))|0);
 $919 = (getTempRet0() | 0);
 $920 = (_i64Add(($560|0),($561|0),1048576,0)|0);
 $921 = (getTempRet0() | 0);
 $922 = (_bitshift64Ashr(($920|0),($921|0),21)|0);
 $923 = (getTempRet0() | 0);
 $924 = (_i64Add(($564|0),($565|0),($562|0),($563|0))|0);
 $925 = (getTempRet0() | 0);
 $926 = (_i64Add(($401|0),0,($922|0),($923|0))|0);
 $927 = (getTempRet0() | 0);
 $928 = (_i64Subtract(($926|0),($927|0),($924|0),($925|0))|0);
 $929 = (getTempRet0() | 0);
 $930 = $920 & -2097152;
 $931 = (_i64Subtract(($560|0),($561|0),($930|0),($921|0))|0);
 $932 = (getTempRet0() | 0);
 $933 = (_i64Add(($576|0),($577|0),1048576,0)|0);
 $934 = (getTempRet0() | 0);
 $935 = (_bitshift64Ashr(($933|0),($934|0),21)|0);
 $936 = (getTempRet0() | 0);
 $937 = (_i64Add(($580|0),($581|0),($578|0),($579|0))|0);
 $938 = (getTempRet0() | 0);
 $939 = (_i64Add(($937|0),($938|0),($582|0),($583|0))|0);
 $940 = (getTempRet0() | 0);
 $941 = (_i64Add(($939|0),($940|0),($584|0),($585|0))|0);
 $942 = (getTempRet0() | 0);
 $943 = (_i64Add(($433|0),0,($935|0),($936|0))|0);
 $944 = (getTempRet0() | 0);
 $945 = (_i64Subtract(($943|0),($944|0),($941|0),($942|0))|0);
 $946 = (getTempRet0() | 0);
 $947 = $933 & -2097152;
 $948 = (_i64Add(($604|0),($605|0),1048576,0)|0);
 $949 = (getTempRet0() | 0);
 $950 = (_bitshift64Ashr(($948|0),($949|0),21)|0);
 $951 = (getTempRet0() | 0);
 $952 = (_i64Add(($608|0),($609|0),($606|0),($607|0))|0);
 $953 = (getTempRet0() | 0);
 $954 = (_i64Add(($952|0),($953|0),($610|0),($611|0))|0);
 $955 = (getTempRet0() | 0);
 $956 = (_i64Add(($954|0),($955|0),($612|0),($613|0))|0);
 $957 = (getTempRet0() | 0);
 $958 = (_i64Add(($956|0),($957|0),($614|0),($615|0))|0);
 $959 = (getTempRet0() | 0);
 $960 = (_i64Add(($958|0),($959|0),($616|0),($617|0))|0);
 $961 = (getTempRet0() | 0);
 $962 = (_i64Add(($950|0),($951|0),($465|0),0)|0);
 $963 = (getTempRet0() | 0);
 $964 = (_i64Subtract(($962|0),($963|0),($960|0),($961|0))|0);
 $965 = (getTempRet0() | 0);
 $966 = $948 & -2097152;
 $967 = (_i64Add(($644|0),($645|0),1048576,0)|0);
 $968 = (getTempRet0() | 0);
 $969 = (_bitshift64Ashr(($967|0),($968|0),21)|0);
 $970 = (getTempRet0() | 0);
 $971 = (_i64Add(($648|0),($649|0),($646|0),($647|0))|0);
 $972 = (getTempRet0() | 0);
 $973 = (_i64Add(($971|0),($972|0),($650|0),($651|0))|0);
 $974 = (getTempRet0() | 0);
 $975 = (_i64Add(($973|0),($974|0),($652|0),($653|0))|0);
 $976 = (getTempRet0() | 0);
 $977 = (_i64Add(($975|0),($976|0),($654|0),($655|0))|0);
 $978 = (getTempRet0() | 0);
 $979 = (_i64Add(($977|0),($978|0),($656|0),($657|0))|0);
 $980 = (getTempRet0() | 0);
 $981 = (_i64Add(($979|0),($980|0),($658|0),($659|0))|0);
 $982 = (getTempRet0() | 0);
 $983 = (_i64Add(($981|0),($982|0),($660|0),($661|0))|0);
 $984 = (getTempRet0() | 0);
 $985 = (_i64Add(($969|0),($970|0),($495|0),($496|0))|0);
 $986 = (getTempRet0() | 0);
 $987 = (_i64Subtract(($985|0),($986|0),($983|0),($984|0))|0);
 $988 = (getTempRet0() | 0);
 $989 = $967 & -2097152;
 $990 = (_i64Add(($696|0),($697|0),1048576,0)|0);
 $991 = (getTempRet0() | 0);
 $992 = (_bitshift64Ashr(($990|0),($991|0),21)|0);
 $993 = (getTempRet0() | 0);
 $994 = (_i64Add(($700|0),($701|0),($698|0),($699|0))|0);
 $995 = (getTempRet0() | 0);
 $996 = (_i64Add(($994|0),($995|0),($702|0),($703|0))|0);
 $997 = (getTempRet0() | 0);
 $998 = (_i64Add(($996|0),($997|0),($704|0),($705|0))|0);
 $999 = (getTempRet0() | 0);
 $1000 = (_i64Add(($998|0),($999|0),($706|0),($707|0))|0);
 $1001 = (getTempRet0() | 0);
 $1002 = (_i64Add(($1000|0),($1001|0),($708|0),($709|0))|0);
 $1003 = (getTempRet0() | 0);
 $1004 = (_i64Add(($1002|0),($1003|0),($710|0),($711|0))|0);
 $1005 = (getTempRet0() | 0);
 $1006 = (_i64Add(($1004|0),($1005|0),($712|0),($713|0))|0);
 $1007 = (getTempRet0() | 0);
 $1008 = (_i64Add(($1006|0),($1007|0),($714|0),($715|0))|0);
 $1009 = (getTempRet0() | 0);
 $1010 = (_i64Add(($1008|0),($1009|0),($716|0),($717|0))|0);
 $1011 = (getTempRet0() | 0);
 $1012 = (_i64Add(($526|0),0,($992|0),($993|0))|0);
 $1013 = (getTempRet0() | 0);
 $1014 = (_i64Subtract(($1012|0),($1013|0),($1010|0),($1011|0))|0);
 $1015 = (getTempRet0() | 0);
 $1016 = $990 & -2097152;
 $1017 = (_i64Add(($760|0),($761|0),1048576,0)|0);
 $1018 = (getTempRet0() | 0);
 $1019 = (_bitshift64Ashr(($1017|0),($1018|0),21)|0);
 $1020 = (getTempRet0() | 0);
 $1021 = (_i64Add(($764|0),($765|0),($762|0),($763|0))|0);
 $1022 = (getTempRet0() | 0);
 $1023 = (_i64Add(($1021|0),($1022|0),($766|0),($767|0))|0);
 $1024 = (getTempRet0() | 0);
 $1025 = (_i64Add(($1023|0),($1024|0),($768|0),($769|0))|0);
 $1026 = (getTempRet0() | 0);
 $1027 = (_i64Add(($1025|0),($1026|0),($770|0),($771|0))|0);
 $1028 = (getTempRet0() | 0);
 $1029 = (_i64Add(($1027|0),($1028|0),($772|0),($773|0))|0);
 $1030 = (getTempRet0() | 0);
 $1031 = (_i64Add(($1029|0),($1030|0),($774|0),($775|0))|0);
 $1032 = (getTempRet0() | 0);
 $1033 = (_i64Add(($1031|0),($1032|0),($776|0),($777|0))|0);
 $1034 = (getTempRet0() | 0);
 $1035 = (_i64Add(($1033|0),($1034|0),($778|0),($779|0))|0);
 $1036 = (getTempRet0() | 0);
 $1037 = (_i64Add(($1035|0),($1036|0),($780|0),($781|0))|0);
 $1038 = (getTempRet0() | 0);
 $1039 = (_i64Add(($1037|0),($1038|0),($782|0),($783|0))|0);
 $1040 = (getTempRet0() | 0);
 $1041 = (_i64Add(($1039|0),($1040|0),($784|0),($785|0))|0);
 $1042 = (getTempRet0() | 0);
 $1043 = (_i64Add(($1019|0),($1020|0),($556|0),($557|0))|0);
 $1044 = (getTempRet0() | 0);
 $1045 = (_i64Subtract(($1043|0),($1044|0),($1041|0),($1042|0))|0);
 $1046 = (getTempRet0() | 0);
 $1047 = $1017 & -2097152;
 $1048 = (_i64Subtract(1048576,0,($826|0),($827|0))|0);
 $1049 = (getTempRet0() | 0);
 $1050 = (_bitshift64Ashr(($1048|0),($1049|0),21)|0);
 $1051 = (getTempRet0() | 0);
 $1052 = (___muldi3(($227|0),0,($184|0),($185|0))|0);
 $1053 = (getTempRet0() | 0);
 $1054 = (___muldi3(($247|0),0,($166|0),0)|0);
 $1055 = (getTempRet0() | 0);
 $1056 = (___muldi3(($267|0),0,($154|0),0)|0);
 $1057 = (getTempRet0() | 0);
 $1058 = (___muldi3(($279|0),0,($134|0),($128|0))|0);
 $1059 = (getTempRet0() | 0);
 $1060 = (___muldi3(($299|0),0,($123|0),($124|0))|0);
 $1061 = (getTempRet0() | 0);
 $1062 = (___muldi3(($309|0),($310|0),($113|0),0)|0);
 $1063 = (getTempRet0() | 0);
 $1064 = (___muldi3(($320|0),($314|0),($93|0),0)|0);
 $1065 = (getTempRet0() | 0);
 $1066 = (___muldi3(($340|0),0,($81|0),0)|0);
 $1067 = (getTempRet0() | 0);
 $1068 = (___muldi3(($352|0),0,($61|0),0)|0);
 $1069 = (getTempRet0() | 0);
 $1070 = (___muldi3(($370|0),($371|0),($41|0),0)|0);
 $1071 = (getTempRet0() | 0);
 $1072 = (_i64Add(($1054|0),($1055|0),($1052|0),($1053|0))|0);
 $1073 = (getTempRet0() | 0);
 $1074 = (_i64Add(($1072|0),($1073|0),($1056|0),($1057|0))|0);
 $1075 = (getTempRet0() | 0);
 $1076 = (_i64Add(($1074|0),($1075|0),($1058|0),($1059|0))|0);
 $1077 = (getTempRet0() | 0);
 $1078 = (_i64Add(($1076|0),($1077|0),($1060|0),($1061|0))|0);
 $1079 = (getTempRet0() | 0);
 $1080 = (_i64Add(($1078|0),($1079|0),($1062|0),($1063|0))|0);
 $1081 = (getTempRet0() | 0);
 $1082 = (_i64Add(($1080|0),($1081|0),($1064|0),($1065|0))|0);
 $1083 = (getTempRet0() | 0);
 $1084 = (_i64Add(($1082|0),($1083|0),($1066|0),($1067|0))|0);
 $1085 = (getTempRet0() | 0);
 $1086 = (_i64Add(($1084|0),($1085|0),($1068|0),($1069|0))|0);
 $1087 = (getTempRet0() | 0);
 $1088 = (_i64Add(($1086|0),($1087|0),($1070|0),($1071|0))|0);
 $1089 = (getTempRet0() | 0);
 $1090 = (_i64Subtract(($1050|0),($1051|0),($1088|0),($1089|0))|0);
 $1091 = (getTempRet0() | 0);
 $1092 = $1048 & -2097152;
 $1093 = (_i64Subtract(1048576,0,($860|0),($861|0))|0);
 $1094 = (getTempRet0() | 0);
 $1095 = (_bitshift64Ashr(($1093|0),($1094|0),21)|0);
 $1096 = (getTempRet0() | 0);
 $1097 = (___muldi3(($267|0),0,($184|0),($185|0))|0);
 $1098 = (getTempRet0() | 0);
 $1099 = (___muldi3(($279|0),0,($166|0),0)|0);
 $1100 = (getTempRet0() | 0);
 $1101 = (___muldi3(($299|0),0,($154|0),0)|0);
 $1102 = (getTempRet0() | 0);
 $1103 = (___muldi3(($309|0),($310|0),($134|0),($128|0))|0);
 $1104 = (getTempRet0() | 0);
 $1105 = (___muldi3(($320|0),($314|0),($123|0),($124|0))|0);
 $1106 = (getTempRet0() | 0);
 $1107 = (___muldi3(($340|0),0,($113|0),0)|0);
 $1108 = (getTempRet0() | 0);
 $1109 = (___muldi3(($352|0),0,($93|0),0)|0);
 $1110 = (getTempRet0() | 0);
 $1111 = (___muldi3(($370|0),($371|0),($81|0),0)|0);
 $1112 = (getTempRet0() | 0);
 $1113 = (_i64Add(($1099|0),($1100|0),($1097|0),($1098|0))|0);
 $1114 = (getTempRet0() | 0);
 $1115 = (_i64Add(($1113|0),($1114|0),($1101|0),($1102|0))|0);
 $1116 = (getTempRet0() | 0);
 $1117 = (_i64Add(($1115|0),($1116|0),($1103|0),($1104|0))|0);
 $1118 = (getTempRet0() | 0);
 $1119 = (_i64Add(($1117|0),($1118|0),($1105|0),($1106|0))|0);
 $1120 = (getTempRet0() | 0);
 $1121 = (_i64Add(($1119|0),($1120|0),($1107|0),($1108|0))|0);
 $1122 = (getTempRet0() | 0);
 $1123 = (_i64Add(($1121|0),($1122|0),($1109|0),($1110|0))|0);
 $1124 = (getTempRet0() | 0);
 $1125 = (_i64Add(($1123|0),($1124|0),($1111|0),($1112|0))|0);
 $1126 = (getTempRet0() | 0);
 $1127 = (_i64Subtract(($1095|0),($1096|0),($1125|0),($1126|0))|0);
 $1128 = (getTempRet0() | 0);
 $1129 = $1093 & -2097152;
 $1130 = (_i64Subtract(1048576,0,($886|0),($887|0))|0);
 $1131 = (getTempRet0() | 0);
 $1132 = (_bitshift64Ashr(($1130|0),($1131|0),21)|0);
 $1133 = (getTempRet0() | 0);
 $1134 = (___muldi3(($299|0),0,($184|0),($185|0))|0);
 $1135 = (getTempRet0() | 0);
 $1136 = (___muldi3(($309|0),($310|0),($166|0),0)|0);
 $1137 = (getTempRet0() | 0);
 $1138 = (___muldi3(($320|0),($314|0),($154|0),0)|0);
 $1139 = (getTempRet0() | 0);
 $1140 = (___muldi3(($340|0),0,($134|0),($128|0))|0);
 $1141 = (getTempRet0() | 0);
 $1142 = (___muldi3(($352|0),0,($123|0),($124|0))|0);
 $1143 = (getTempRet0() | 0);
 $1144 = (___muldi3(($370|0),($371|0),($113|0),0)|0);
 $1145 = (getTempRet0() | 0);
 $1146 = (_i64Add(($1136|0),($1137|0),($1134|0),($1135|0))|0);
 $1147 = (getTempRet0() | 0);
 $1148 = (_i64Add(($1146|0),($1147|0),($1138|0),($1139|0))|0);
 $1149 = (getTempRet0() | 0);
 $1150 = (_i64Add(($1148|0),($1149|0),($1140|0),($1141|0))|0);
 $1151 = (getTempRet0() | 0);
 $1152 = (_i64Add(($1150|0),($1151|0),($1142|0),($1143|0))|0);
 $1153 = (getTempRet0() | 0);
 $1154 = (_i64Add(($1152|0),($1153|0),($1144|0),($1145|0))|0);
 $1155 = (getTempRet0() | 0);
 $1156 = (_i64Subtract(($1132|0),($1133|0),($1154|0),($1155|0))|0);
 $1157 = (getTempRet0() | 0);
 $1158 = $1130 & -2097152;
 $1159 = (_i64Subtract(1048576,0,($904|0),($905|0))|0);
 $1160 = (getTempRet0() | 0);
 $1161 = (_bitshift64Ashr(($1159|0),($1160|0),21)|0);
 $1162 = (getTempRet0() | 0);
 $1163 = (___muldi3(($320|0),($314|0),($184|0),($185|0))|0);
 $1164 = (getTempRet0() | 0);
 $1165 = (___muldi3(($340|0),0,($166|0),0)|0);
 $1166 = (getTempRet0() | 0);
 $1167 = (___muldi3(($352|0),0,($154|0),0)|0);
 $1168 = (getTempRet0() | 0);
 $1169 = (___muldi3(($370|0),($371|0),($134|0),($128|0))|0);
 $1170 = (getTempRet0() | 0);
 $1171 = (_i64Add(($1165|0),($1166|0),($1163|0),($1164|0))|0);
 $1172 = (getTempRet0() | 0);
 $1173 = (_i64Add(($1171|0),($1172|0),($1167|0),($1168|0))|0);
 $1174 = (getTempRet0() | 0);
 $1175 = (_i64Add(($1173|0),($1174|0),($1169|0),($1170|0))|0);
 $1176 = (getTempRet0() | 0);
 $1177 = (_i64Subtract(($1161|0),($1162|0),($1175|0),($1176|0))|0);
 $1178 = (getTempRet0() | 0);
 $1179 = $1159 & -2097152;
 $1180 = (_i64Add(($1179|0),($1160|0),($904|0),($905|0))|0);
 $1181 = (getTempRet0() | 0);
 $1182 = (_i64Subtract(1048576,0,($914|0),($915|0))|0);
 $1183 = (getTempRet0() | 0);
 $1184 = (_bitshift64Ashr(($1182|0),($1183|0),21)|0);
 $1185 = (getTempRet0() | 0);
 $1186 = (___muldi3(($352|0),0,($184|0),($185|0))|0);
 $1187 = (getTempRet0() | 0);
 $1188 = (___muldi3(($370|0),($371|0),($166|0),0)|0);
 $1189 = (getTempRet0() | 0);
 $1190 = (_i64Add(($1188|0),($1189|0),($1186|0),($1187|0))|0);
 $1191 = (getTempRet0() | 0);
 $1192 = (_i64Subtract(($1184|0),($1185|0),($1190|0),($1191|0))|0);
 $1193 = (getTempRet0() | 0);
 $1194 = $1182 & -2097152;
 $1195 = (_i64Add(($1194|0),($1183|0),($914|0),($915|0))|0);
 $1196 = (getTempRet0() | 0);
 $1197 = (_i64Add(($918|0),($919|0),1048576,0)|0);
 $1198 = (getTempRet0() | 0);
 $1199 = (_bitshift64Ashr(($1197|0),($1198|0),21)|0);
 $1200 = (getTempRet0() | 0);
 $1201 = $1197 & -2097152;
 $1202 = (_i64Subtract(($918|0),($919|0),($1201|0),($1198|0))|0);
 $1203 = (getTempRet0() | 0);
 $1204 = (_i64Add(($928|0),($929|0),1048576,0)|0);
 $1205 = (getTempRet0() | 0);
 $1206 = (_bitshift64Ashr(($1204|0),($1205|0),21)|0);
 $1207 = (getTempRet0() | 0);
 $1208 = $1204 & -2097152;
 $1209 = (_i64Subtract(($928|0),($929|0),($1208|0),($1205|0))|0);
 $1210 = (getTempRet0() | 0);
 $1211 = (_i64Add(($945|0),($946|0),1048576,0)|0);
 $1212 = (getTempRet0() | 0);
 $1213 = (_bitshift64Ashr(($1211|0),($1212|0),21)|0);
 $1214 = (getTempRet0() | 0);
 $1215 = $1211 & -2097152;
 $1216 = (_i64Subtract(($945|0),($946|0),($1215|0),($1212|0))|0);
 $1217 = (getTempRet0() | 0);
 $1218 = (_i64Add(($964|0),($965|0),1048576,0)|0);
 $1219 = (getTempRet0() | 0);
 $1220 = (_bitshift64Ashr(($1218|0),($1219|0),21)|0);
 $1221 = (getTempRet0() | 0);
 $1222 = $1218 & -2097152;
 $1223 = (_i64Add(($987|0),($988|0),1048576,0)|0);
 $1224 = (getTempRet0() | 0);
 $1225 = (_bitshift64Ashr(($1223|0),($1224|0),21)|0);
 $1226 = (getTempRet0() | 0);
 $1227 = $1223 & -2097152;
 $1228 = (_i64Add(($1014|0),($1015|0),1048576,0)|0);
 $1229 = (getTempRet0() | 0);
 $1230 = (_bitshift64Ashr(($1228|0),($1229|0),21)|0);
 $1231 = (getTempRet0() | 0);
 $1232 = $1228 & -2097152;
 $1233 = (_i64Add(($1045|0),($1046|0),1048576,0)|0);
 $1234 = (getTempRet0() | 0);
 $1235 = (_bitshift64Ashr(($1233|0),($1234|0),21)|0);
 $1236 = (getTempRet0() | 0);
 $1237 = $1233 & -2097152;
 $1238 = (_i64Add(($1090|0),($1091|0),1048576,0)|0);
 $1239 = (getTempRet0() | 0);
 $1240 = (_bitshift64Ashr(($1238|0),($1239|0),21)|0);
 $1241 = (getTempRet0() | 0);
 $1242 = $1238 & -2097152;
 $1243 = (_i64Add(($1127|0),($1128|0),1048576,0)|0);
 $1244 = (getTempRet0() | 0);
 $1245 = (_bitshift64Ashr(($1243|0),($1244|0),21)|0);
 $1246 = (getTempRet0() | 0);
 $1247 = $1243 & -2097152;
 $1248 = (_i64Add(($1156|0),($1157|0),1048576,0)|0);
 $1249 = (getTempRet0() | 0);
 $1250 = (_bitshift64Ashr(($1248|0),($1249|0),21)|0);
 $1251 = (getTempRet0() | 0);
 $1252 = (_i64Subtract(($1250|0),($1251|0),($1180|0),($1181|0))|0);
 $1253 = (getTempRet0() | 0);
 $1254 = $1248 & -2097152;
 $1255 = (_i64Subtract(($1156|0),($1157|0),($1254|0),($1249|0))|0);
 $1256 = (getTempRet0() | 0);
 $1257 = (_i64Add(($1177|0),($1178|0),1048576,0)|0);
 $1258 = (getTempRet0() | 0);
 $1259 = (_bitshift64Ashr(($1257|0),($1258|0),21)|0);
 $1260 = (getTempRet0() | 0);
 $1261 = (_i64Subtract(($1259|0),($1260|0),($1195|0),($1196|0))|0);
 $1262 = (getTempRet0() | 0);
 $1263 = $1257 & -2097152;
 $1264 = (_i64Subtract(($1177|0),($1178|0),($1263|0),($1258|0))|0);
 $1265 = (getTempRet0() | 0);
 $1266 = (_i64Add(($1192|0),($1193|0),1048576,0)|0);
 $1267 = (getTempRet0() | 0);
 $1268 = (_bitshift64Ashr(($1266|0),($1267|0),21)|0);
 $1269 = (getTempRet0() | 0);
 $1270 = (_i64Add(($1268|0),($1269|0),($1202|0),($1203|0))|0);
 $1271 = (getTempRet0() | 0);
 $1272 = $1266 & -2097152;
 $1273 = (_i64Subtract(($1192|0),($1193|0),($1272|0),($1267|0))|0);
 $1274 = (getTempRet0() | 0);
 $1275 = (___muldi3(($1199|0),($1200|0),666643,0)|0);
 $1276 = (getTempRet0() | 0);
 $1277 = (___muldi3(($1199|0),($1200|0),470296,0)|0);
 $1278 = (getTempRet0() | 0);
 $1279 = (___muldi3(($1199|0),($1200|0),654183,0)|0);
 $1280 = (getTempRet0() | 0);
 $1281 = (___muldi3(($1199|0),($1200|0),-997805,-1)|0);
 $1282 = (getTempRet0() | 0);
 $1283 = (___muldi3(($1199|0),($1200|0),136657,0)|0);
 $1284 = (getTempRet0() | 0);
 $1285 = (___muldi3(($1199|0),($1200|0),-683901,-1)|0);
 $1286 = (getTempRet0() | 0);
 $1287 = (_i64Subtract(($1285|0),($1286|0),($886|0),($887|0))|0);
 $1288 = (getTempRet0() | 0);
 $1289 = (_i64Subtract(($1287|0),($1288|0),($1158|0),($1131|0))|0);
 $1290 = (getTempRet0() | 0);
 $1291 = (_i64Add(($1289|0),($1290|0),($1245|0),($1246|0))|0);
 $1292 = (getTempRet0() | 0);
 $1293 = (___muldi3(($1270|0),($1271|0),666643,0)|0);
 $1294 = (getTempRet0() | 0);
 $1295 = (___muldi3(($1270|0),($1271|0),470296,0)|0);
 $1296 = (getTempRet0() | 0);
 $1297 = (___muldi3(($1270|0),($1271|0),654183,0)|0);
 $1298 = (getTempRet0() | 0);
 $1299 = (___muldi3(($1270|0),($1271|0),-997805,-1)|0);
 $1300 = (getTempRet0() | 0);
 $1301 = (___muldi3(($1270|0),($1271|0),136657,0)|0);
 $1302 = (getTempRet0() | 0);
 $1303 = (___muldi3(($1270|0),($1271|0),-683901,-1)|0);
 $1304 = (getTempRet0() | 0);
 $1305 = (___muldi3(($1273|0),($1274|0),666643,0)|0);
 $1306 = (getTempRet0() | 0);
 $1307 = (___muldi3(($1273|0),($1274|0),470296,0)|0);
 $1308 = (getTempRet0() | 0);
 $1309 = (___muldi3(($1273|0),($1274|0),654183,0)|0);
 $1310 = (getTempRet0() | 0);
 $1311 = (___muldi3(($1273|0),($1274|0),-997805,-1)|0);
 $1312 = (getTempRet0() | 0);
 $1313 = (___muldi3(($1273|0),($1274|0),136657,0)|0);
 $1314 = (getTempRet0() | 0);
 $1315 = (___muldi3(($1273|0),($1274|0),-683901,-1)|0);
 $1316 = (getTempRet0() | 0);
 $1317 = (_i64Subtract(($1281|0),($1282|0),($860|0),($861|0))|0);
 $1318 = (getTempRet0() | 0);
 $1319 = (_i64Add(($1317|0),($1318|0),($1301|0),($1302|0))|0);
 $1320 = (getTempRet0() | 0);
 $1321 = (_i64Add(($1319|0),($1320|0),($1315|0),($1316|0))|0);
 $1322 = (getTempRet0() | 0);
 $1323 = (_i64Subtract(($1321|0),($1322|0),($1129|0),($1094|0))|0);
 $1324 = (getTempRet0() | 0);
 $1325 = (_i64Add(($1323|0),($1324|0),($1240|0),($1241|0))|0);
 $1326 = (getTempRet0() | 0);
 $1327 = (___muldi3(($1261|0),($1262|0),666643,0)|0);
 $1328 = (getTempRet0() | 0);
 $1329 = (___muldi3(($1261|0),($1262|0),470296,0)|0);
 $1330 = (getTempRet0() | 0);
 $1331 = (___muldi3(($1261|0),($1262|0),654183,0)|0);
 $1332 = (getTempRet0() | 0);
 $1333 = (___muldi3(($1261|0),($1262|0),-997805,-1)|0);
 $1334 = (getTempRet0() | 0);
 $1335 = (___muldi3(($1261|0),($1262|0),136657,0)|0);
 $1336 = (getTempRet0() | 0);
 $1337 = (___muldi3(($1261|0),($1262|0),-683901,-1)|0);
 $1338 = (getTempRet0() | 0);
 $1339 = (___muldi3(($1264|0),($1265|0),666643,0)|0);
 $1340 = (getTempRet0() | 0);
 $1341 = (___muldi3(($1264|0),($1265|0),470296,0)|0);
 $1342 = (getTempRet0() | 0);
 $1343 = (___muldi3(($1264|0),($1265|0),654183,0)|0);
 $1344 = (getTempRet0() | 0);
 $1345 = (___muldi3(($1264|0),($1265|0),-997805,-1)|0);
 $1346 = (getTempRet0() | 0);
 $1347 = (___muldi3(($1264|0),($1265|0),136657,0)|0);
 $1348 = (getTempRet0() | 0);
 $1349 = (___muldi3(($1264|0),($1265|0),-683901,-1)|0);
 $1350 = (getTempRet0() | 0);
 $1351 = (_i64Add(($1297|0),($1298|0),($1277|0),($1278|0))|0);
 $1352 = (getTempRet0() | 0);
 $1353 = (_i64Add(($1351|0),($1352|0),($1311|0),($1312|0))|0);
 $1354 = (getTempRet0() | 0);
 $1355 = (_i64Subtract(($1353|0),($1354|0),($826|0),($827|0))|0);
 $1356 = (getTempRet0() | 0);
 $1357 = (_i64Add(($1355|0),($1356|0),($1335|0),($1336|0))|0);
 $1358 = (getTempRet0() | 0);
 $1359 = (_i64Add(($1357|0),($1358|0),($1349|0),($1350|0))|0);
 $1360 = (getTempRet0() | 0);
 $1361 = (_i64Subtract(($1359|0),($1360|0),($1092|0),($1049|0))|0);
 $1362 = (getTempRet0() | 0);
 $1363 = (_i64Add(($1361|0),($1362|0),($1235|0),($1236|0))|0);
 $1364 = (getTempRet0() | 0);
 $1365 = (___muldi3(($1252|0),($1253|0),666643,0)|0);
 $1366 = (getTempRet0() | 0);
 $1367 = (_i64Add(($1220|0),($1221|0),($1365|0),($1366|0))|0);
 $1368 = (getTempRet0() | 0);
 $1369 = (_i64Add(($1367|0),($1368|0),($644|0),($645|0))|0);
 $1370 = (getTempRet0() | 0);
 $1371 = (_i64Subtract(($1369|0),($1370|0),($989|0),($968|0))|0);
 $1372 = (getTempRet0() | 0);
 $1373 = (___muldi3(($1252|0),($1253|0),470296,0)|0);
 $1374 = (getTempRet0() | 0);
 $1375 = (___muldi3(($1252|0),($1253|0),654183,0)|0);
 $1376 = (getTempRet0() | 0);
 $1377 = (_i64Add(($1341|0),($1342|0),($1327|0),($1328|0))|0);
 $1378 = (getTempRet0() | 0);
 $1379 = (_i64Add(($1377|0),($1378|0),($1375|0),($1376|0))|0);
 $1380 = (getTempRet0() | 0);
 $1381 = (_i64Add(($1379|0),($1380|0),($696|0),($697|0))|0);
 $1382 = (getTempRet0() | 0);
 $1383 = (_i64Add(($1381|0),($1382|0),($1225|0),($1226|0))|0);
 $1384 = (getTempRet0() | 0);
 $1385 = (_i64Subtract(($1383|0),($1384|0),($1016|0),($991|0))|0);
 $1386 = (getTempRet0() | 0);
 $1387 = (___muldi3(($1252|0),($1253|0),-997805,-1)|0);
 $1388 = (getTempRet0() | 0);
 $1389 = (___muldi3(($1252|0),($1253|0),136657,0)|0);
 $1390 = (getTempRet0() | 0);
 $1391 = (_i64Add(($1307|0),($1308|0),($1293|0),($1294|0))|0);
 $1392 = (getTempRet0() | 0);
 $1393 = (_i64Add(($1391|0),($1392|0),($1331|0),($1332|0))|0);
 $1394 = (getTempRet0() | 0);
 $1395 = (_i64Add(($1393|0),($1394|0),($1345|0),($1346|0))|0);
 $1396 = (getTempRet0() | 0);
 $1397 = (_i64Add(($1395|0),($1396|0),($1389|0),($1390|0))|0);
 $1398 = (getTempRet0() | 0);
 $1399 = (_i64Add(($1397|0),($1398|0),($760|0),($761|0))|0);
 $1400 = (getTempRet0() | 0);
 $1401 = (_i64Add(($1399|0),($1400|0),($1230|0),($1231|0))|0);
 $1402 = (getTempRet0() | 0);
 $1403 = (_i64Subtract(($1401|0),($1402|0),($1047|0),($1018|0))|0);
 $1404 = (getTempRet0() | 0);
 $1405 = (___muldi3(($1252|0),($1253|0),-683901,-1)|0);
 $1406 = (getTempRet0() | 0);
 $1407 = (_i64Add(($1371|0),($1372|0),1048576,0)|0);
 $1408 = (getTempRet0() | 0);
 $1409 = (_bitshift64Ashr(($1407|0),($1408|0),21)|0);
 $1410 = (getTempRet0() | 0);
 $1411 = (_i64Add(($1373|0),($1374|0),($1339|0),($1340|0))|0);
 $1412 = (getTempRet0() | 0);
 $1413 = (_i64Add(($1411|0),($1412|0),($987|0),($988|0))|0);
 $1414 = (getTempRet0() | 0);
 $1415 = (_i64Subtract(($1413|0),($1414|0),($1227|0),($1224|0))|0);
 $1416 = (getTempRet0() | 0);
 $1417 = (_i64Add(($1415|0),($1416|0),($1409|0),($1410|0))|0);
 $1418 = (getTempRet0() | 0);
 $1419 = $1407 & -2097152;
 $1420 = (_i64Add(($1385|0),($1386|0),1048576,0)|0);
 $1421 = (getTempRet0() | 0);
 $1422 = (_bitshift64Ashr(($1420|0),($1421|0),21)|0);
 $1423 = (getTempRet0() | 0);
 $1424 = (_i64Add(($1329|0),($1330|0),($1305|0),($1306|0))|0);
 $1425 = (getTempRet0() | 0);
 $1426 = (_i64Add(($1424|0),($1425|0),($1343|0),($1344|0))|0);
 $1427 = (getTempRet0() | 0);
 $1428 = (_i64Add(($1426|0),($1427|0),($1387|0),($1388|0))|0);
 $1429 = (getTempRet0() | 0);
 $1430 = (_i64Add(($1428|0),($1429|0),($1014|0),($1015|0))|0);
 $1431 = (getTempRet0() | 0);
 $1432 = (_i64Subtract(($1430|0),($1431|0),($1232|0),($1229|0))|0);
 $1433 = (getTempRet0() | 0);
 $1434 = (_i64Add(($1432|0),($1433|0),($1422|0),($1423|0))|0);
 $1435 = (getTempRet0() | 0);
 $1436 = $1420 & -2097152;
 $1437 = (_i64Add(($1403|0),($1404|0),1048576,0)|0);
 $1438 = (getTempRet0() | 0);
 $1439 = (_bitshift64Ashr(($1437|0),($1438|0),21)|0);
 $1440 = (getTempRet0() | 0);
 $1441 = (_i64Add(($1295|0),($1296|0),($1275|0),($1276|0))|0);
 $1442 = (getTempRet0() | 0);
 $1443 = (_i64Add(($1441|0),($1442|0),($1309|0),($1310|0))|0);
 $1444 = (getTempRet0() | 0);
 $1445 = (_i64Add(($1443|0),($1444|0),($1333|0),($1334|0))|0);
 $1446 = (getTempRet0() | 0);
 $1447 = (_i64Add(($1445|0),($1446|0),($1347|0),($1348|0))|0);
 $1448 = (getTempRet0() | 0);
 $1449 = (_i64Add(($1447|0),($1448|0),($1405|0),($1406|0))|0);
 $1450 = (getTempRet0() | 0);
 $1451 = (_i64Add(($1449|0),($1450|0),($1045|0),($1046|0))|0);
 $1452 = (getTempRet0() | 0);
 $1453 = (_i64Subtract(($1451|0),($1452|0),($1237|0),($1234|0))|0);
 $1454 = (getTempRet0() | 0);
 $1455 = (_i64Add(($1453|0),($1454|0),($1439|0),($1440|0))|0);
 $1456 = (getTempRet0() | 0);
 $1457 = $1437 & -2097152;
 $1458 = (_i64Add(($1363|0),($1364|0),1048576,0)|0);
 $1459 = (getTempRet0() | 0);
 $1460 = (_bitshift64Ashr(($1458|0),($1459|0),21)|0);
 $1461 = (getTempRet0() | 0);
 $1462 = (_i64Add(($1299|0),($1300|0),($1279|0),($1280|0))|0);
 $1463 = (getTempRet0() | 0);
 $1464 = (_i64Add(($1462|0),($1463|0),($1313|0),($1314|0))|0);
 $1465 = (getTempRet0() | 0);
 $1466 = (_i64Add(($1464|0),($1465|0),($1337|0),($1338|0))|0);
 $1467 = (getTempRet0() | 0);
 $1468 = (_i64Add(($1466|0),($1467|0),($1090|0),($1091|0))|0);
 $1469 = (getTempRet0() | 0);
 $1470 = (_i64Subtract(($1468|0),($1469|0),($1242|0),($1239|0))|0);
 $1471 = (getTempRet0() | 0);
 $1472 = (_i64Add(($1470|0),($1471|0),($1460|0),($1461|0))|0);
 $1473 = (getTempRet0() | 0);
 $1474 = $1458 & -2097152;
 $1475 = (_i64Subtract(($1363|0),($1364|0),($1474|0),($1459|0))|0);
 $1476 = (getTempRet0() | 0);
 $1477 = (_i64Add(($1325|0),($1326|0),1048576,0)|0);
 $1478 = (getTempRet0() | 0);
 $1479 = (_bitshift64Ashr(($1477|0),($1478|0),21)|0);
 $1480 = (getTempRet0() | 0);
 $1481 = (_i64Add(($1303|0),($1304|0),($1283|0),($1284|0))|0);
 $1482 = (getTempRet0() | 0);
 $1483 = (_i64Add(($1481|0),($1482|0),($1127|0),($1128|0))|0);
 $1484 = (getTempRet0() | 0);
 $1485 = (_i64Subtract(($1483|0),($1484|0),($1247|0),($1244|0))|0);
 $1486 = (getTempRet0() | 0);
 $1487 = (_i64Add(($1485|0),($1486|0),($1479|0),($1480|0))|0);
 $1488 = (getTempRet0() | 0);
 $1489 = $1477 & -2097152;
 $1490 = (_i64Subtract(($1325|0),($1326|0),($1489|0),($1478|0))|0);
 $1491 = (getTempRet0() | 0);
 $1492 = (_i64Add(($1291|0),($1292|0),1048576,0)|0);
 $1493 = (getTempRet0() | 0);
 $1494 = (_bitshift64Ashr(($1492|0),($1493|0),21)|0);
 $1495 = (getTempRet0() | 0);
 $1496 = (_i64Add(($1494|0),($1495|0),($1255|0),($1256|0))|0);
 $1497 = (getTempRet0() | 0);
 $1498 = $1492 & -2097152;
 $1499 = (_i64Subtract(($1291|0),($1292|0),($1498|0),($1493|0))|0);
 $1500 = (getTempRet0() | 0);
 $1501 = (_i64Add(($1417|0),($1418|0),1048576,0)|0);
 $1502 = (getTempRet0() | 0);
 $1503 = (_bitshift64Ashr(($1501|0),($1502|0),21)|0);
 $1504 = (getTempRet0() | 0);
 $1505 = $1501 & -2097152;
 $1506 = (_i64Add(($1434|0),($1435|0),1048576,0)|0);
 $1507 = (getTempRet0() | 0);
 $1508 = (_bitshift64Ashr(($1506|0),($1507|0),21)|0);
 $1509 = (getTempRet0() | 0);
 $1510 = $1506 & -2097152;
 $1511 = (_i64Add(($1455|0),($1456|0),1048576,0)|0);
 $1512 = (getTempRet0() | 0);
 $1513 = (_bitshift64Ashr(($1511|0),($1512|0),21)|0);
 $1514 = (getTempRet0() | 0);
 $1515 = (_i64Add(($1513|0),($1514|0),($1475|0),($1476|0))|0);
 $1516 = (getTempRet0() | 0);
 $1517 = $1511 & -2097152;
 $1518 = (_i64Subtract(($1455|0),($1456|0),($1517|0),($1512|0))|0);
 $1519 = (getTempRet0() | 0);
 $1520 = (_i64Add(($1472|0),($1473|0),1048576,0)|0);
 $1521 = (getTempRet0() | 0);
 $1522 = (_bitshift64Ashr(($1520|0),($1521|0),21)|0);
 $1523 = (getTempRet0() | 0);
 $1524 = (_i64Add(($1522|0),($1523|0),($1490|0),($1491|0))|0);
 $1525 = (getTempRet0() | 0);
 $1526 = $1520 & -2097152;
 $1527 = (_i64Subtract(($1472|0),($1473|0),($1526|0),($1521|0))|0);
 $1528 = (getTempRet0() | 0);
 $1529 = (_i64Add(($1487|0),($1488|0),1048576,0)|0);
 $1530 = (getTempRet0() | 0);
 $1531 = (_bitshift64Ashr(($1529|0),($1530|0),21)|0);
 $1532 = (getTempRet0() | 0);
 $1533 = (_i64Add(($1531|0),($1532|0),($1499|0),($1500|0))|0);
 $1534 = (getTempRet0() | 0);
 $1535 = $1529 & -2097152;
 $1536 = (_i64Subtract(($1487|0),($1488|0),($1535|0),($1530|0))|0);
 $1537 = (getTempRet0() | 0);
 $1538 = (___muldi3(($1496|0),($1497|0),666643,0)|0);
 $1539 = (getTempRet0() | 0);
 $1540 = (___muldi3(($1496|0),($1497|0),470296,0)|0);
 $1541 = (getTempRet0() | 0);
 $1542 = (___muldi3(($1496|0),($1497|0),654183,0)|0);
 $1543 = (getTempRet0() | 0);
 $1544 = (___muldi3(($1496|0),($1497|0),-997805,-1)|0);
 $1545 = (getTempRet0() | 0);
 $1546 = (___muldi3(($1496|0),($1497|0),136657,0)|0);
 $1547 = (getTempRet0() | 0);
 $1548 = (___muldi3(($1496|0),($1497|0),-683901,-1)|0);
 $1549 = (getTempRet0() | 0);
 $1550 = (_i64Add(($1508|0),($1509|0),($1548|0),($1549|0))|0);
 $1551 = (getTempRet0() | 0);
 $1552 = (_i64Add(($1550|0),($1551|0),($1403|0),($1404|0))|0);
 $1553 = (getTempRet0() | 0);
 $1554 = (_i64Subtract(($1552|0),($1553|0),($1457|0),($1438|0))|0);
 $1555 = (getTempRet0() | 0);
 $1556 = (___muldi3(($1533|0),($1534|0),666643,0)|0);
 $1557 = (getTempRet0() | 0);
 $1558 = (___muldi3(($1533|0),($1534|0),470296,0)|0);
 $1559 = (getTempRet0() | 0);
 $1560 = (___muldi3(($1533|0),($1534|0),654183,0)|0);
 $1561 = (getTempRet0() | 0);
 $1562 = (___muldi3(($1533|0),($1534|0),-997805,-1)|0);
 $1563 = (getTempRet0() | 0);
 $1564 = (___muldi3(($1533|0),($1534|0),136657,0)|0);
 $1565 = (getTempRet0() | 0);
 $1566 = (___muldi3(($1533|0),($1534|0),-683901,-1)|0);
 $1567 = (getTempRet0() | 0);
 $1568 = (___muldi3(($1536|0),($1537|0),666643,0)|0);
 $1569 = (getTempRet0() | 0);
 $1570 = (_i64Add(($1216|0),($1217|0),($1568|0),($1569|0))|0);
 $1571 = (getTempRet0() | 0);
 $1572 = (___muldi3(($1536|0),($1537|0),470296,0)|0);
 $1573 = (getTempRet0() | 0);
 $1574 = (___muldi3(($1536|0),($1537|0),654183,0)|0);
 $1575 = (getTempRet0() | 0);
 $1576 = (___muldi3(($1536|0),($1537|0),-997805,-1)|0);
 $1577 = (getTempRet0() | 0);
 $1578 = (___muldi3(($1536|0),($1537|0),136657,0)|0);
 $1579 = (getTempRet0() | 0);
 $1580 = (___muldi3(($1536|0),($1537|0),-683901,-1)|0);
 $1581 = (getTempRet0() | 0);
 $1582 = (_i64Add(($1564|0),($1565|0),($1544|0),($1545|0))|0);
 $1583 = (getTempRet0() | 0);
 $1584 = (_i64Add(($1582|0),($1583|0),($1580|0),($1581|0))|0);
 $1585 = (getTempRet0() | 0);
 $1586 = (_i64Add(($1584|0),($1585|0),($1503|0),($1504|0))|0);
 $1587 = (getTempRet0() | 0);
 $1588 = (_i64Add(($1586|0),($1587|0),($1385|0),($1386|0))|0);
 $1589 = (getTempRet0() | 0);
 $1590 = (_i64Subtract(($1588|0),($1589|0),($1436|0),($1421|0))|0);
 $1591 = (getTempRet0() | 0);
 $1592 = (___muldi3(($1524|0),($1525|0),666643,0)|0);
 $1593 = (getTempRet0() | 0);
 $1594 = (___muldi3(($1524|0),($1525|0),470296,0)|0);
 $1595 = (getTempRet0() | 0);
 $1596 = (___muldi3(($1524|0),($1525|0),654183,0)|0);
 $1597 = (getTempRet0() | 0);
 $1598 = (___muldi3(($1524|0),($1525|0),-997805,-1)|0);
 $1599 = (getTempRet0() | 0);
 $1600 = (___muldi3(($1524|0),($1525|0),136657,0)|0);
 $1601 = (getTempRet0() | 0);
 $1602 = (___muldi3(($1524|0),($1525|0),-683901,-1)|0);
 $1603 = (getTempRet0() | 0);
 $1604 = (___muldi3(($1527|0),($1528|0),666643,0)|0);
 $1605 = (getTempRet0() | 0);
 $1606 = (___muldi3(($1527|0),($1528|0),470296,0)|0);
 $1607 = (getTempRet0() | 0);
 $1608 = (___muldi3(($1527|0),($1528|0),654183,0)|0);
 $1609 = (getTempRet0() | 0);
 $1610 = (___muldi3(($1527|0),($1528|0),-997805,-1)|0);
 $1611 = (getTempRet0() | 0);
 $1612 = (___muldi3(($1527|0),($1528|0),136657,0)|0);
 $1613 = (getTempRet0() | 0);
 $1614 = (___muldi3(($1527|0),($1528|0),-683901,-1)|0);
 $1615 = (getTempRet0() | 0);
 $1616 = (_i64Add(($1560|0),($1561|0),($1540|0),($1541|0))|0);
 $1617 = (getTempRet0() | 0);
 $1618 = (_i64Add(($1616|0),($1617|0),($1576|0),($1577|0))|0);
 $1619 = (getTempRet0() | 0);
 $1620 = (_i64Add(($1618|0),($1619|0),($1371|0),($1372|0))|0);
 $1621 = (getTempRet0() | 0);
 $1622 = (_i64Subtract(($1620|0),($1621|0),($1419|0),($1408|0))|0);
 $1623 = (getTempRet0() | 0);
 $1624 = (_i64Add(($1622|0),($1623|0),($1600|0),($1601|0))|0);
 $1625 = (getTempRet0() | 0);
 $1626 = (_i64Add(($1624|0),($1625|0),($1614|0),($1615|0))|0);
 $1627 = (getTempRet0() | 0);
 $1628 = (___muldi3(($1515|0),($1516|0),666643,0)|0);
 $1629 = (getTempRet0() | 0);
 $1630 = (_i64Add(($1628|0),($1629|0),($931|0),($932|0))|0);
 $1631 = (getTempRet0() | 0);
 $1632 = (___muldi3(($1515|0),($1516|0),470296,0)|0);
 $1633 = (getTempRet0() | 0);
 $1634 = (___muldi3(($1515|0),($1516|0),654183,0)|0);
 $1635 = (getTempRet0() | 0);
 $1636 = (_i64Add(($1206|0),($1207|0),($576|0),($577|0))|0);
 $1637 = (getTempRet0() | 0);
 $1638 = (_i64Subtract(($1636|0),($1637|0),($947|0),($934|0))|0);
 $1639 = (getTempRet0() | 0);
 $1640 = (_i64Add(($1638|0),($1639|0),($1634|0),($1635|0))|0);
 $1641 = (getTempRet0() | 0);
 $1642 = (_i64Add(($1640|0),($1641|0),($1592|0),($1593|0))|0);
 $1643 = (getTempRet0() | 0);
 $1644 = (_i64Add(($1642|0),($1643|0),($1606|0),($1607|0))|0);
 $1645 = (getTempRet0() | 0);
 $1646 = (___muldi3(($1515|0),($1516|0),-997805,-1)|0);
 $1647 = (getTempRet0() | 0);
 $1648 = (___muldi3(($1515|0),($1516|0),136657,0)|0);
 $1649 = (getTempRet0() | 0);
 $1650 = (_i64Add(($604|0),($605|0),($1213|0),($1214|0))|0);
 $1651 = (getTempRet0() | 0);
 $1652 = (_i64Subtract(($1650|0),($1651|0),($966|0),($949|0))|0);
 $1653 = (getTempRet0() | 0);
 $1654 = (_i64Add(($1652|0),($1653|0),($1556|0),($1557|0))|0);
 $1655 = (getTempRet0() | 0);
 $1656 = (_i64Add(($1654|0),($1655|0),($1572|0),($1573|0))|0);
 $1657 = (getTempRet0() | 0);
 $1658 = (_i64Add(($1656|0),($1657|0),($1648|0),($1649|0))|0);
 $1659 = (getTempRet0() | 0);
 $1660 = (_i64Add(($1658|0),($1659|0),($1596|0),($1597|0))|0);
 $1661 = (getTempRet0() | 0);
 $1662 = (_i64Add(($1660|0),($1661|0),($1610|0),($1611|0))|0);
 $1663 = (getTempRet0() | 0);
 $1664 = (___muldi3(($1515|0),($1516|0),-683901,-1)|0);
 $1665 = (getTempRet0() | 0);
 $1666 = (_i64Add(($1630|0),($1631|0),1048576,0)|0);
 $1667 = (getTempRet0() | 0);
 $1668 = (_bitshift64Ashr(($1666|0),($1667|0),21)|0);
 $1669 = (getTempRet0() | 0);
 $1670 = (_i64Add(($1209|0),($1210|0),($1632|0),($1633|0))|0);
 $1671 = (getTempRet0() | 0);
 $1672 = (_i64Add(($1670|0),($1671|0),($1604|0),($1605|0))|0);
 $1673 = (getTempRet0() | 0);
 $1674 = (_i64Add(($1672|0),($1673|0),($1668|0),($1669|0))|0);
 $1675 = (getTempRet0() | 0);
 $1676 = $1666 & -2097152;
 $1677 = (_i64Subtract(($1630|0),($1631|0),($1676|0),($1667|0))|0);
 $1678 = (getTempRet0() | 0);
 $1679 = (_i64Add(($1644|0),($1645|0),1048576,0)|0);
 $1680 = (getTempRet0() | 0);
 $1681 = (_bitshift64Ashr(($1679|0),($1680|0),21)|0);
 $1682 = (getTempRet0() | 0);
 $1683 = (_i64Add(($1570|0),($1571|0),($1646|0),($1647|0))|0);
 $1684 = (getTempRet0() | 0);
 $1685 = (_i64Add(($1683|0),($1684|0),($1594|0),($1595|0))|0);
 $1686 = (getTempRet0() | 0);
 $1687 = (_i64Add(($1685|0),($1686|0),($1608|0),($1609|0))|0);
 $1688 = (getTempRet0() | 0);
 $1689 = (_i64Add(($1687|0),($1688|0),($1681|0),($1682|0))|0);
 $1690 = (getTempRet0() | 0);
 $1691 = $1679 & -2097152;
 $1692 = (_i64Add(($1662|0),($1663|0),1048576,0)|0);
 $1693 = (getTempRet0() | 0);
 $1694 = (_bitshift64Ashr(($1692|0),($1693|0),21)|0);
 $1695 = (getTempRet0() | 0);
 $1696 = (_i64Add(($964|0),($965|0),($1538|0),($1539|0))|0);
 $1697 = (getTempRet0() | 0);
 $1698 = (_i64Subtract(($1696|0),($1697|0),($1222|0),($1219|0))|0);
 $1699 = (getTempRet0() | 0);
 $1700 = (_i64Add(($1698|0),($1699|0),($1558|0),($1559|0))|0);
 $1701 = (getTempRet0() | 0);
 $1702 = (_i64Add(($1700|0),($1701|0),($1574|0),($1575|0))|0);
 $1703 = (getTempRet0() | 0);
 $1704 = (_i64Add(($1702|0),($1703|0),($1664|0),($1665|0))|0);
 $1705 = (getTempRet0() | 0);
 $1706 = (_i64Add(($1704|0),($1705|0),($1598|0),($1599|0))|0);
 $1707 = (getTempRet0() | 0);
 $1708 = (_i64Add(($1706|0),($1707|0),($1612|0),($1613|0))|0);
 $1709 = (getTempRet0() | 0);
 $1710 = (_i64Add(($1708|0),($1709|0),($1694|0),($1695|0))|0);
 $1711 = (getTempRet0() | 0);
 $1712 = $1692 & -2097152;
 $1713 = (_i64Add(($1626|0),($1627|0),1048576,0)|0);
 $1714 = (getTempRet0() | 0);
 $1715 = (_bitshift64Ashr(($1713|0),($1714|0),21)|0);
 $1716 = (getTempRet0() | 0);
 $1717 = (_i64Add(($1562|0),($1563|0),($1542|0),($1543|0))|0);
 $1718 = (getTempRet0() | 0);
 $1719 = (_i64Add(($1717|0),($1718|0),($1578|0),($1579|0))|0);
 $1720 = (getTempRet0() | 0);
 $1721 = (_i64Add(($1719|0),($1720|0),($1417|0),($1418|0))|0);
 $1722 = (getTempRet0() | 0);
 $1723 = (_i64Subtract(($1721|0),($1722|0),($1505|0),($1502|0))|0);
 $1724 = (getTempRet0() | 0);
 $1725 = (_i64Add(($1723|0),($1724|0),($1602|0),($1603|0))|0);
 $1726 = (getTempRet0() | 0);
 $1727 = (_i64Add(($1725|0),($1726|0),($1715|0),($1716|0))|0);
 $1728 = (getTempRet0() | 0);
 $1729 = $1713 & -2097152;
 $1730 = (_i64Subtract(($1626|0),($1627|0),($1729|0),($1714|0))|0);
 $1731 = (getTempRet0() | 0);
 $1732 = (_i64Add(($1590|0),($1591|0),1048576,0)|0);
 $1733 = (getTempRet0() | 0);
 $1734 = (_bitshift64Ashr(($1732|0),($1733|0),21)|0);
 $1735 = (getTempRet0() | 0);
 $1736 = (_i64Add(($1566|0),($1567|0),($1546|0),($1547|0))|0);
 $1737 = (getTempRet0() | 0);
 $1738 = (_i64Add(($1736|0),($1737|0),($1434|0),($1435|0))|0);
 $1739 = (getTempRet0() | 0);
 $1740 = (_i64Subtract(($1738|0),($1739|0),($1510|0),($1507|0))|0);
 $1741 = (getTempRet0() | 0);
 $1742 = (_i64Add(($1740|0),($1741|0),($1734|0),($1735|0))|0);
 $1743 = (getTempRet0() | 0);
 $1744 = $1732 & -2097152;
 $1745 = (_i64Subtract(($1590|0),($1591|0),($1744|0),($1733|0))|0);
 $1746 = (getTempRet0() | 0);
 $1747 = (_i64Add(($1554|0),($1555|0),1048576,0)|0);
 $1748 = (getTempRet0() | 0);
 $1749 = (_bitshift64Ashr(($1747|0),($1748|0),21)|0);
 $1750 = (getTempRet0() | 0);
 $1751 = (_i64Add(($1518|0),($1519|0),($1749|0),($1750|0))|0);
 $1752 = (getTempRet0() | 0);
 $1753 = $1747 & -2097152;
 $1754 = (_i64Add(($1674|0),($1675|0),1048576,0)|0);
 $1755 = (getTempRet0() | 0);
 $1756 = (_bitshift64Ashr(($1754|0),($1755|0),21)|0);
 $1757 = (getTempRet0() | 0);
 $1758 = $1754 & -2097152;
 $1759 = (_i64Add(($1689|0),($1690|0),1048576,0)|0);
 $1760 = (getTempRet0() | 0);
 $1761 = (_bitshift64Ashr(($1759|0),($1760|0),21)|0);
 $1762 = (getTempRet0() | 0);
 $1763 = $1759 & -2097152;
 $1764 = (_i64Add(($1710|0),($1711|0),1048576,0)|0);
 $1765 = (getTempRet0() | 0);
 $1766 = (_bitshift64Ashr(($1764|0),($1765|0),21)|0);
 $1767 = (getTempRet0() | 0);
 $1768 = (_i64Add(($1730|0),($1731|0),($1766|0),($1767|0))|0);
 $1769 = (getTempRet0() | 0);
 $1770 = $1764 & -2097152;
 $1771 = (_i64Add(($1727|0),($1728|0),1048576,0)|0);
 $1772 = (getTempRet0() | 0);
 $1773 = (_bitshift64Ashr(($1771|0),($1772|0),21)|0);
 $1774 = (getTempRet0() | 0);
 $1775 = (_i64Add(($1745|0),($1746|0),($1773|0),($1774|0))|0);
 $1776 = (getTempRet0() | 0);
 $1777 = $1771 & -2097152;
 $1778 = (_i64Subtract(($1727|0),($1728|0),($1777|0),($1772|0))|0);
 $1779 = (getTempRet0() | 0);
 $1780 = (_i64Add(($1742|0),($1743|0),1048576,0)|0);
 $1781 = (getTempRet0() | 0);
 $1782 = (_bitshift64Ashr(($1780|0),($1781|0),21)|0);
 $1783 = (getTempRet0() | 0);
 $1784 = $1780 & -2097152;
 $1785 = (_i64Subtract(($1742|0),($1743|0),($1784|0),($1781|0))|0);
 $1786 = (getTempRet0() | 0);
 $1787 = (_i64Add(($1751|0),($1752|0),1048576,0)|0);
 $1788 = (getTempRet0() | 0);
 $1789 = (_bitshift64Ashr(($1787|0),($1788|0),21)|0);
 $1790 = (getTempRet0() | 0);
 $1791 = $1787 & -2097152;
 $1792 = (_i64Subtract(($1751|0),($1752|0),($1791|0),($1788|0))|0);
 $1793 = (getTempRet0() | 0);
 $1794 = (___muldi3(($1789|0),($1790|0),666643,0)|0);
 $1795 = (getTempRet0() | 0);
 $1796 = (_i64Add(($1677|0),($1678|0),($1794|0),($1795|0))|0);
 $1797 = (getTempRet0() | 0);
 $1798 = (___muldi3(($1789|0),($1790|0),470296,0)|0);
 $1799 = (getTempRet0() | 0);
 $1800 = (___muldi3(($1789|0),($1790|0),654183,0)|0);
 $1801 = (getTempRet0() | 0);
 $1802 = (___muldi3(($1789|0),($1790|0),-997805,-1)|0);
 $1803 = (getTempRet0() | 0);
 $1804 = (___muldi3(($1789|0),($1790|0),136657,0)|0);
 $1805 = (getTempRet0() | 0);
 $1806 = (___muldi3(($1789|0),($1790|0),-683901,-1)|0);
 $1807 = (getTempRet0() | 0);
 $1808 = (_bitshift64Ashr(($1796|0),($1797|0),21)|0);
 $1809 = (getTempRet0() | 0);
 $1810 = (_i64Add(($1674|0),($1675|0),($1798|0),($1799|0))|0);
 $1811 = (getTempRet0() | 0);
 $1812 = (_i64Subtract(($1810|0),($1811|0),($1758|0),($1755|0))|0);
 $1813 = (getTempRet0() | 0);
 $1814 = (_i64Add(($1812|0),($1813|0),($1808|0),($1809|0))|0);
 $1815 = (getTempRet0() | 0);
 $1816 = $1796 & 2097151;
 $1817 = (_bitshift64Ashr(($1814|0),($1815|0),21)|0);
 $1818 = (getTempRet0() | 0);
 $1819 = (_i64Add(($1644|0),($1645|0),($1800|0),($1801|0))|0);
 $1820 = (getTempRet0() | 0);
 $1821 = (_i64Subtract(($1819|0),($1820|0),($1691|0),($1680|0))|0);
 $1822 = (getTempRet0() | 0);
 $1823 = (_i64Add(($1821|0),($1822|0),($1756|0),($1757|0))|0);
 $1824 = (getTempRet0() | 0);
 $1825 = (_i64Add(($1823|0),($1824|0),($1817|0),($1818|0))|0);
 $1826 = (getTempRet0() | 0);
 $1827 = $1814 & 2097151;
 $1828 = (_bitshift64Ashr(($1825|0),($1826|0),21)|0);
 $1829 = (getTempRet0() | 0);
 $1830 = (_i64Add(($1689|0),($1690|0),($1802|0),($1803|0))|0);
 $1831 = (getTempRet0() | 0);
 $1832 = (_i64Subtract(($1830|0),($1831|0),($1763|0),($1760|0))|0);
 $1833 = (getTempRet0() | 0);
 $1834 = (_i64Add(($1832|0),($1833|0),($1828|0),($1829|0))|0);
 $1835 = (getTempRet0() | 0);
 $1836 = $1825 & 2097151;
 $1837 = (_bitshift64Ashr(($1834|0),($1835|0),21)|0);
 $1838 = (getTempRet0() | 0);
 $1839 = (_i64Add(($1662|0),($1663|0),($1804|0),($1805|0))|0);
 $1840 = (getTempRet0() | 0);
 $1841 = (_i64Subtract(($1839|0),($1840|0),($1712|0),($1693|0))|0);
 $1842 = (getTempRet0() | 0);
 $1843 = (_i64Add(($1841|0),($1842|0),($1761|0),($1762|0))|0);
 $1844 = (getTempRet0() | 0);
 $1845 = (_i64Add(($1843|0),($1844|0),($1837|0),($1838|0))|0);
 $1846 = (getTempRet0() | 0);
 $1847 = $1834 & 2097151;
 $1848 = (_bitshift64Ashr(($1845|0),($1846|0),21)|0);
 $1849 = (getTempRet0() | 0);
 $1850 = (_i64Add(($1710|0),($1711|0),($1806|0),($1807|0))|0);
 $1851 = (getTempRet0() | 0);
 $1852 = (_i64Subtract(($1850|0),($1851|0),($1770|0),($1765|0))|0);
 $1853 = (getTempRet0() | 0);
 $1854 = (_i64Add(($1852|0),($1853|0),($1848|0),($1849|0))|0);
 $1855 = (getTempRet0() | 0);
 $1856 = $1845 & 2097151;
 $1857 = (_bitshift64Ashr(($1854|0),($1855|0),21)|0);
 $1858 = (getTempRet0() | 0);
 $1859 = (_i64Add(($1768|0),($1769|0),($1857|0),($1858|0))|0);
 $1860 = (getTempRet0() | 0);
 $1861 = $1854 & 2097151;
 $1862 = (_bitshift64Ashr(($1859|0),($1860|0),21)|0);
 $1863 = (getTempRet0() | 0);
 $1864 = (_i64Add(($1862|0),($1863|0),($1778|0),($1779|0))|0);
 $1865 = (getTempRet0() | 0);
 $1866 = $1859 & 2097151;
 $1867 = (_bitshift64Ashr(($1864|0),($1865|0),21)|0);
 $1868 = (getTempRet0() | 0);
 $1869 = (_i64Add(($1775|0),($1776|0),($1867|0),($1868|0))|0);
 $1870 = (getTempRet0() | 0);
 $1871 = $1864 & 2097151;
 $1872 = (_bitshift64Ashr(($1869|0),($1870|0),21)|0);
 $1873 = (getTempRet0() | 0);
 $1874 = (_i64Add(($1872|0),($1873|0),($1785|0),($1786|0))|0);
 $1875 = (getTempRet0() | 0);
 $1876 = $1869 & 2097151;
 $1877 = (_bitshift64Ashr(($1874|0),($1875|0),21)|0);
 $1878 = (getTempRet0() | 0);
 $1879 = (_i64Add(($1782|0),($1783|0),($1554|0),($1555|0))|0);
 $1880 = (getTempRet0() | 0);
 $1881 = (_i64Subtract(($1879|0),($1880|0),($1753|0),($1748|0))|0);
 $1882 = (getTempRet0() | 0);
 $1883 = (_i64Add(($1881|0),($1882|0),($1877|0),($1878|0))|0);
 $1884 = (getTempRet0() | 0);
 $1885 = $1874 & 2097151;
 $1886 = (_bitshift64Ashr(($1883|0),($1884|0),21)|0);
 $1887 = (getTempRet0() | 0);
 $1888 = (_i64Add(($1886|0),($1887|0),($1792|0),($1793|0))|0);
 $1889 = (getTempRet0() | 0);
 $1890 = $1883 & 2097151;
 $1891 = (_bitshift64Ashr(($1888|0),($1889|0),21)|0);
 $1892 = (getTempRet0() | 0);
 $1893 = $1888 & 2097151;
 $1894 = (___muldi3(($1891|0),($1892|0),666643,0)|0);
 $1895 = (getTempRet0() | 0);
 $1896 = (_i64Add(($1894|0),($1895|0),($1816|0),0)|0);
 $1897 = (getTempRet0() | 0);
 $1898 = (___muldi3(($1891|0),($1892|0),470296,0)|0);
 $1899 = (getTempRet0() | 0);
 $1900 = (_i64Add(($1898|0),($1899|0),($1827|0),0)|0);
 $1901 = (getTempRet0() | 0);
 $1902 = (___muldi3(($1891|0),($1892|0),654183,0)|0);
 $1903 = (getTempRet0() | 0);
 $1904 = (_i64Add(($1902|0),($1903|0),($1836|0),0)|0);
 $1905 = (getTempRet0() | 0);
 $1906 = (___muldi3(($1891|0),($1892|0),-997805,-1)|0);
 $1907 = (getTempRet0() | 0);
 $1908 = (_i64Add(($1906|0),($1907|0),($1847|0),0)|0);
 $1909 = (getTempRet0() | 0);
 $1910 = (___muldi3(($1891|0),($1892|0),136657,0)|0);
 $1911 = (getTempRet0() | 0);
 $1912 = (_i64Add(($1910|0),($1911|0),($1856|0),0)|0);
 $1913 = (getTempRet0() | 0);
 $1914 = (___muldi3(($1891|0),($1892|0),-683901,-1)|0);
 $1915 = (getTempRet0() | 0);
 $1916 = (_i64Add(($1914|0),($1915|0),($1861|0),0)|0);
 $1917 = (getTempRet0() | 0);
 $1918 = (_bitshift64Ashr(($1896|0),($1897|0),21)|0);
 $1919 = (getTempRet0() | 0);
 $1920 = (_i64Add(($1900|0),($1901|0),($1918|0),($1919|0))|0);
 $1921 = (getTempRet0() | 0);
 $1922 = (_bitshift64Ashr(($1920|0),($1921|0),21)|0);
 $1923 = (getTempRet0() | 0);
 $1924 = (_i64Add(($1904|0),($1905|0),($1922|0),($1923|0))|0);
 $1925 = (getTempRet0() | 0);
 $1926 = $1920 & 2097151;
 $1927 = (_bitshift64Ashr(($1924|0),($1925|0),21)|0);
 $1928 = (getTempRet0() | 0);
 $1929 = (_i64Add(($1908|0),($1909|0),($1927|0),($1928|0))|0);
 $1930 = (getTempRet0() | 0);
 $1931 = $1924 & 2097151;
 $1932 = (_bitshift64Ashr(($1929|0),($1930|0),21)|0);
 $1933 = (getTempRet0() | 0);
 $1934 = (_i64Add(($1912|0),($1913|0),($1932|0),($1933|0))|0);
 $1935 = (getTempRet0() | 0);
 $1936 = $1929 & 2097151;
 $1937 = (_bitshift64Ashr(($1934|0),($1935|0),21)|0);
 $1938 = (getTempRet0() | 0);
 $1939 = (_i64Add(($1916|0),($1917|0),($1937|0),($1938|0))|0);
 $1940 = (getTempRet0() | 0);
 $1941 = $1934 & 2097151;
 $1942 = (_bitshift64Ashr(($1939|0),($1940|0),21)|0);
 $1943 = (getTempRet0() | 0);
 $1944 = (_i64Add(($1942|0),($1943|0),($1866|0),0)|0);
 $1945 = (getTempRet0() | 0);
 $1946 = $1939 & 2097151;
 $1947 = (_bitshift64Ashr(($1944|0),($1945|0),21)|0);
 $1948 = (getTempRet0() | 0);
 $1949 = (_i64Add(($1947|0),($1948|0),($1871|0),0)|0);
 $1950 = (getTempRet0() | 0);
 $1951 = $1944 & 2097151;
 $1952 = (_bitshift64Ashr(($1949|0),($1950|0),21)|0);
 $1953 = (getTempRet0() | 0);
 $1954 = (_i64Add(($1952|0),($1953|0),($1876|0),0)|0);
 $1955 = (getTempRet0() | 0);
 $1956 = (_bitshift64Ashr(($1954|0),($1955|0),21)|0);
 $1957 = (getTempRet0() | 0);
 $1958 = (_i64Add(($1956|0),($1957|0),($1885|0),0)|0);
 $1959 = (getTempRet0() | 0);
 $1960 = (_bitshift64Ashr(($1958|0),($1959|0),21)|0);
 $1961 = (getTempRet0() | 0);
 $1962 = (_i64Add(($1960|0),($1961|0),($1890|0),0)|0);
 $1963 = (getTempRet0() | 0);
 $1964 = $1958 & 2097151;
 $1965 = (_bitshift64Ashr(($1962|0),($1963|0),21)|0);
 $1966 = (getTempRet0() | 0);
 $1967 = (_i64Add(($1965|0),($1966|0),($1893|0),0)|0);
 $1968 = (getTempRet0() | 0);
 $1969 = $1962 & 2097151;
 $1970 = $1896&255;
 HEAP8[$s>>0] = $1970;
 $1971 = (_bitshift64Lshr(($1896|0),($1897|0),8)|0);
 $1972 = (getTempRet0() | 0);
 $1973 = $1971&255;
 $arrayidx906 = ((($s)) + 1|0);
 HEAP8[$arrayidx906>>0] = $1973;
 $1974 = (_bitshift64Lshr(($1896|0),($1897|0),16)|0);
 $1975 = (getTempRet0() | 0);
 $1976 = $1974 & 31;
 $1977 = (_bitshift64Shl(($1926|0),0,5)|0);
 $1978 = (getTempRet0() | 0);
 $1979 = $1977 | $1976;
 $1980 = $1979&255;
 $arrayidx910 = ((($s)) + 2|0);
 HEAP8[$arrayidx910>>0] = $1980;
 $1981 = (_bitshift64Lshr(($1920|0),($1921|0),3)|0);
 $1982 = (getTempRet0() | 0);
 $1983 = $1981&255;
 $arrayidx913 = ((($s)) + 3|0);
 HEAP8[$arrayidx913>>0] = $1983;
 $1984 = (_bitshift64Lshr(($1920|0),($1921|0),11)|0);
 $1985 = (getTempRet0() | 0);
 $1986 = $1984&255;
 $arrayidx916 = ((($s)) + 4|0);
 HEAP8[$arrayidx916>>0] = $1986;
 $1987 = (_bitshift64Lshr(($1926|0),0,19)|0);
 $1988 = (getTempRet0() | 0);
 $1989 = (_bitshift64Shl(($1931|0),0,2)|0);
 $1990 = (getTempRet0() | 0);
 $1991 = $1989 | $1987;
 $1990 | $1988;
 $1992 = $1991&255;
 $arrayidx921 = ((($s)) + 5|0);
 HEAP8[$arrayidx921>>0] = $1992;
 $1993 = (_bitshift64Lshr(($1924|0),($1925|0),6)|0);
 $1994 = (getTempRet0() | 0);
 $1995 = $1993&255;
 $arrayidx924 = ((($s)) + 6|0);
 HEAP8[$arrayidx924>>0] = $1995;
 $1996 = (_bitshift64Lshr(($1931|0),0,14)|0);
 $1997 = (getTempRet0() | 0);
 $1998 = (_bitshift64Shl(($1936|0),0,7)|0);
 $1999 = (getTempRet0() | 0);
 $2000 = $1998 | $1996;
 $1999 | $1997;
 $2001 = $2000&255;
 $arrayidx929 = ((($s)) + 7|0);
 HEAP8[$arrayidx929>>0] = $2001;
 $2002 = (_bitshift64Lshr(($1929|0),($1930|0),1)|0);
 $2003 = (getTempRet0() | 0);
 $2004 = $2002&255;
 $arrayidx932 = ((($s)) + 8|0);
 HEAP8[$arrayidx932>>0] = $2004;
 $2005 = (_bitshift64Lshr(($1929|0),($1930|0),9)|0);
 $2006 = (getTempRet0() | 0);
 $2007 = $2005&255;
 $arrayidx935 = ((($s)) + 9|0);
 HEAP8[$arrayidx935>>0] = $2007;
 $2008 = (_bitshift64Lshr(($1936|0),0,17)|0);
 $2009 = (getTempRet0() | 0);
 $2010 = (_bitshift64Shl(($1941|0),0,4)|0);
 $2011 = (getTempRet0() | 0);
 $2012 = $2010 | $2008;
 $2011 | $2009;
 $2013 = $2012&255;
 $arrayidx940 = ((($s)) + 10|0);
 HEAP8[$arrayidx940>>0] = $2013;
 $2014 = (_bitshift64Lshr(($1934|0),($1935|0),4)|0);
 $2015 = (getTempRet0() | 0);
 $2016 = $2014&255;
 $arrayidx943 = ((($s)) + 11|0);
 HEAP8[$arrayidx943>>0] = $2016;
 $2017 = (_bitshift64Lshr(($1934|0),($1935|0),12)|0);
 $2018 = (getTempRet0() | 0);
 $2019 = $2017&255;
 $arrayidx946 = ((($s)) + 12|0);
 HEAP8[$arrayidx946>>0] = $2019;
 $2020 = (_bitshift64Lshr(($1941|0),0,20)|0);
 $2021 = (getTempRet0() | 0);
 $2022 = (_bitshift64Shl(($1946|0),0,1)|0);
 $2023 = (getTempRet0() | 0);
 $2024 = $2022 | $2020;
 $2023 | $2021;
 $2025 = $2024&255;
 $arrayidx951 = ((($s)) + 13|0);
 HEAP8[$arrayidx951>>0] = $2025;
 $2026 = (_bitshift64Lshr(($1939|0),($1940|0),7)|0);
 $2027 = (getTempRet0() | 0);
 $2028 = $2026&255;
 $arrayidx954 = ((($s)) + 14|0);
 HEAP8[$arrayidx954>>0] = $2028;
 $2029 = (_bitshift64Lshr(($1946|0),0,15)|0);
 $2030 = (getTempRet0() | 0);
 $2031 = (_bitshift64Shl(($1951|0),0,6)|0);
 $2032 = (getTempRet0() | 0);
 $2033 = $2031 | $2029;
 $2032 | $2030;
 $2034 = $2033&255;
 $arrayidx959 = ((($s)) + 15|0);
 HEAP8[$arrayidx959>>0] = $2034;
 $2035 = (_bitshift64Lshr(($1944|0),($1945|0),2)|0);
 $2036 = (getTempRet0() | 0);
 $2037 = $2035&255;
 $arrayidx962 = ((($s)) + 16|0);
 HEAP8[$arrayidx962>>0] = $2037;
 $2038 = (_bitshift64Lshr(($1944|0),($1945|0),10)|0);
 $2039 = (getTempRet0() | 0);
 $2040 = $2038&255;
 $arrayidx965 = ((($s)) + 17|0);
 HEAP8[$arrayidx965>>0] = $2040;
 $2041 = (_bitshift64Lshr(($1951|0),0,18)|0);
 $2042 = (getTempRet0() | 0);
 $2043 = (_bitshift64Shl(($1949|0),($1950|0),3)|0);
 $2044 = (getTempRet0() | 0);
 $2045 = $2043 | $2041;
 $2044 | $2042;
 $2046 = $2045&255;
 $arrayidx970 = ((($s)) + 18|0);
 HEAP8[$arrayidx970>>0] = $2046;
 $2047 = (_bitshift64Lshr(($1949|0),($1950|0),5)|0);
 $2048 = (getTempRet0() | 0);
 $2049 = $2047&255;
 $arrayidx973 = ((($s)) + 19|0);
 HEAP8[$arrayidx973>>0] = $2049;
 $2050 = (_bitshift64Lshr(($1949|0),($1950|0),13)|0);
 $2051 = (getTempRet0() | 0);
 $2052 = $2050&255;
 $arrayidx976 = ((($s)) + 20|0);
 HEAP8[$arrayidx976>>0] = $2052;
 $2053 = $1954&255;
 $arrayidx979 = ((($s)) + 21|0);
 HEAP8[$arrayidx979>>0] = $2053;
 $2054 = (_bitshift64Lshr(($1954|0),($1955|0),8)|0);
 $2055 = (getTempRet0() | 0);
 $2056 = $2054&255;
 $arrayidx982 = ((($s)) + 22|0);
 HEAP8[$arrayidx982>>0] = $2056;
 $2057 = (_bitshift64Lshr(($1954|0),($1955|0),16)|0);
 $2058 = (getTempRet0() | 0);
 $2059 = $2057 & 31;
 $2060 = (_bitshift64Shl(($1964|0),0,5)|0);
 $2061 = (getTempRet0() | 0);
 $2062 = $2060 | $2059;
 $2063 = $2062&255;
 $arrayidx987 = ((($s)) + 23|0);
 HEAP8[$arrayidx987>>0] = $2063;
 $2064 = (_bitshift64Lshr(($1958|0),($1959|0),3)|0);
 $2065 = (getTempRet0() | 0);
 $2066 = $2064&255;
 $arrayidx990 = ((($s)) + 24|0);
 HEAP8[$arrayidx990>>0] = $2066;
 $2067 = (_bitshift64Lshr(($1958|0),($1959|0),11)|0);
 $2068 = (getTempRet0() | 0);
 $2069 = $2067&255;
 $arrayidx993 = ((($s)) + 25|0);
 HEAP8[$arrayidx993>>0] = $2069;
 $2070 = (_bitshift64Lshr(($1964|0),0,19)|0);
 $2071 = (getTempRet0() | 0);
 $2072 = (_bitshift64Shl(($1969|0),0,2)|0);
 $2073 = (getTempRet0() | 0);
 $2074 = $2072 | $2070;
 $2073 | $2071;
 $2075 = $2074&255;
 $arrayidx998 = ((($s)) + 26|0);
 HEAP8[$arrayidx998>>0] = $2075;
 $2076 = (_bitshift64Lshr(($1962|0),($1963|0),6)|0);
 $2077 = (getTempRet0() | 0);
 $2078 = $2076&255;
 $arrayidx1001 = ((($s)) + 27|0);
 HEAP8[$arrayidx1001>>0] = $2078;
 $2079 = (_bitshift64Lshr(($1969|0),0,14)|0);
 $2080 = (getTempRet0() | 0);
 $2081 = (_bitshift64Shl(($1967|0),($1968|0),7)|0);
 $2082 = (getTempRet0() | 0);
 $2083 = $2081 | $2079;
 $2082 | $2080;
 $2084 = $2083&255;
 $arrayidx1006 = ((($s)) + 28|0);
 HEAP8[$arrayidx1006>>0] = $2084;
 $2085 = (_bitshift64Lshr(($1967|0),($1968|0),1)|0);
 $2086 = (getTempRet0() | 0);
 $2087 = $2085&255;
 $arrayidx1009 = ((($s)) + 29|0);
 HEAP8[$arrayidx1009>>0] = $2087;
 $2088 = (_bitshift64Lshr(($1967|0),($1968|0),9)|0);
 $2089 = (getTempRet0() | 0);
 $2090 = $2088&255;
 $arrayidx1012 = ((($s)) + 30|0);
 HEAP8[$arrayidx1012>>0] = $2090;
 $2091 = (_bitshift64Ashr(($1967|0),($1968|0),17)|0);
 $2092 = (getTempRet0() | 0);
 $2093 = $2091&255;
 $arrayidx1015 = ((($s)) + 31|0);
 HEAP8[$arrayidx1015>>0] = $2093;
 return;
}
function _sc_check($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr = 0, $add$ptr10 = 0, $add$ptr12 = 0, $add$ptr2 = 0, $add$ptr4 = 0, $add$ptr6 = 0, $add$ptr8 = 0, $arrayidx1$i = 0, $arrayidx1$i107 = 0, $arrayidx1$i120 = 0, $arrayidx1$i42 = 0, $arrayidx1$i55 = 0, $arrayidx1$i68 = 0, $arrayidx1$i81 = 0, $arrayidx1$i94 = 0, $arrayidx3$i = 0;
 var $arrayidx3$i111 = 0, $arrayidx3$i124 = 0, $arrayidx3$i46 = 0, $arrayidx3$i59 = 0, $arrayidx3$i72 = 0, $arrayidx3$i85 = 0, $arrayidx3$i98 = 0, $arrayidx7$i = 0, $arrayidx7$i102 = 0, $arrayidx7$i115 = 0, $arrayidx7$i128 = 0, $arrayidx7$i50 = 0, $arrayidx7$i63 = 0, $arrayidx7$i76 = 0, $arrayidx7$i89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $1 = $0&255;
 $arrayidx1$i = ((($s)) + 1|0);
 $2 = HEAP8[$arrayidx1$i>>0]|0;
 $3 = $2&255;
 $4 = (_bitshift64Shl(($3|0),0,8)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4 | $1;
 $arrayidx3$i = ((($s)) + 2|0);
 $7 = HEAP8[$arrayidx3$i>>0]|0;
 $8 = $7&255;
 $9 = (_bitshift64Shl(($8|0),0,16)|0);
 $10 = (getTempRet0() | 0);
 $11 = $6 | $9;
 $12 = $5 | $10;
 $arrayidx7$i = ((($s)) + 3|0);
 $13 = HEAP8[$arrayidx7$i>>0]|0;
 $14 = $13&255;
 $15 = (_bitshift64Shl(($14|0),0,24)|0);
 $16 = (getTempRet0() | 0);
 $17 = $11 | $15;
 $18 = $12 | $16;
 $add$ptr = ((($s)) + 4|0);
 $19 = HEAP8[$add$ptr>>0]|0;
 $20 = $19&255;
 $arrayidx1$i120 = ((($s)) + 5|0);
 $21 = HEAP8[$arrayidx1$i120>>0]|0;
 $22 = $21&255;
 $23 = (_bitshift64Shl(($22|0),0,8)|0);
 $24 = (getTempRet0() | 0);
 $25 = $23 | $20;
 $arrayidx3$i124 = ((($s)) + 6|0);
 $26 = HEAP8[$arrayidx3$i124>>0]|0;
 $27 = $26&255;
 $28 = (_bitshift64Shl(($27|0),0,16)|0);
 $29 = (getTempRet0() | 0);
 $30 = $25 | $28;
 $31 = $24 | $29;
 $arrayidx7$i128 = ((($s)) + 7|0);
 $32 = HEAP8[$arrayidx7$i128>>0]|0;
 $33 = $32&255;
 $34 = (_bitshift64Shl(($33|0),0,24)|0);
 $35 = (getTempRet0() | 0);
 $36 = $30 | $34;
 $37 = $31 | $35;
 $add$ptr2 = ((($s)) + 8|0);
 $38 = HEAP8[$add$ptr2>>0]|0;
 $39 = $38&255;
 $arrayidx1$i107 = ((($s)) + 9|0);
 $40 = HEAP8[$arrayidx1$i107>>0]|0;
 $41 = $40&255;
 $42 = (_bitshift64Shl(($41|0),0,8)|0);
 $43 = (getTempRet0() | 0);
 $44 = $42 | $39;
 $arrayidx3$i111 = ((($s)) + 10|0);
 $45 = HEAP8[$arrayidx3$i111>>0]|0;
 $46 = $45&255;
 $47 = (_bitshift64Shl(($46|0),0,16)|0);
 $48 = (getTempRet0() | 0);
 $49 = $44 | $47;
 $50 = $43 | $48;
 $arrayidx7$i115 = ((($s)) + 11|0);
 $51 = HEAP8[$arrayidx7$i115>>0]|0;
 $52 = $51&255;
 $53 = (_bitshift64Shl(($52|0),0,24)|0);
 $54 = (getTempRet0() | 0);
 $55 = $49 | $53;
 $56 = $50 | $54;
 $add$ptr4 = ((($s)) + 12|0);
 $57 = HEAP8[$add$ptr4>>0]|0;
 $58 = $57&255;
 $arrayidx1$i94 = ((($s)) + 13|0);
 $59 = HEAP8[$arrayidx1$i94>>0]|0;
 $60 = $59&255;
 $61 = (_bitshift64Shl(($60|0),0,8)|0);
 $62 = (getTempRet0() | 0);
 $63 = $61 | $58;
 $arrayidx3$i98 = ((($s)) + 14|0);
 $64 = HEAP8[$arrayidx3$i98>>0]|0;
 $65 = $64&255;
 $66 = (_bitshift64Shl(($65|0),0,16)|0);
 $67 = (getTempRet0() | 0);
 $68 = $63 | $66;
 $69 = $62 | $67;
 $arrayidx7$i102 = ((($s)) + 15|0);
 $70 = HEAP8[$arrayidx7$i102>>0]|0;
 $71 = $70&255;
 $72 = (_bitshift64Shl(($71|0),0,24)|0);
 $73 = (getTempRet0() | 0);
 $74 = $68 | $72;
 $75 = $69 | $73;
 $add$ptr6 = ((($s)) + 16|0);
 $76 = HEAP8[$add$ptr6>>0]|0;
 $77 = $76&255;
 $arrayidx1$i81 = ((($s)) + 17|0);
 $78 = HEAP8[$arrayidx1$i81>>0]|0;
 $79 = $78&255;
 $80 = (_bitshift64Shl(($79|0),0,8)|0);
 $81 = (getTempRet0() | 0);
 $82 = $80 | $77;
 $arrayidx3$i85 = ((($s)) + 18|0);
 $83 = HEAP8[$arrayidx3$i85>>0]|0;
 $84 = $83&255;
 $85 = (_bitshift64Shl(($84|0),0,16)|0);
 $86 = (getTempRet0() | 0);
 $87 = $82 | $85;
 $88 = $81 | $86;
 $arrayidx7$i89 = ((($s)) + 19|0);
 $89 = HEAP8[$arrayidx7$i89>>0]|0;
 $90 = $89&255;
 $91 = (_bitshift64Shl(($90|0),0,24)|0);
 $92 = (getTempRet0() | 0);
 $93 = $87 | $91;
 $94 = $88 | $92;
 $add$ptr8 = ((($s)) + 20|0);
 $95 = HEAP8[$add$ptr8>>0]|0;
 $96 = $95&255;
 $arrayidx1$i68 = ((($s)) + 21|0);
 $97 = HEAP8[$arrayidx1$i68>>0]|0;
 $98 = $97&255;
 $99 = (_bitshift64Shl(($98|0),0,8)|0);
 $100 = (getTempRet0() | 0);
 $101 = $99 | $96;
 $arrayidx3$i72 = ((($s)) + 22|0);
 $102 = HEAP8[$arrayidx3$i72>>0]|0;
 $103 = $102&255;
 $104 = (_bitshift64Shl(($103|0),0,16)|0);
 $105 = (getTempRet0() | 0);
 $106 = $101 | $104;
 $107 = $100 | $105;
 $arrayidx7$i76 = ((($s)) + 23|0);
 $108 = HEAP8[$arrayidx7$i76>>0]|0;
 $109 = $108&255;
 $110 = (_bitshift64Shl(($109|0),0,24)|0);
 $111 = (getTempRet0() | 0);
 $112 = $106 | $110;
 $113 = $107 | $111;
 $add$ptr10 = ((($s)) + 24|0);
 $114 = HEAP8[$add$ptr10>>0]|0;
 $115 = $114&255;
 $arrayidx1$i55 = ((($s)) + 25|0);
 $116 = HEAP8[$arrayidx1$i55>>0]|0;
 $117 = $116&255;
 $118 = (_bitshift64Shl(($117|0),0,8)|0);
 $119 = (getTempRet0() | 0);
 $120 = $118 | $115;
 $arrayidx3$i59 = ((($s)) + 26|0);
 $121 = HEAP8[$arrayidx3$i59>>0]|0;
 $122 = $121&255;
 $123 = (_bitshift64Shl(($122|0),0,16)|0);
 $124 = (getTempRet0() | 0);
 $125 = $120 | $123;
 $126 = $119 | $124;
 $arrayidx7$i63 = ((($s)) + 27|0);
 $127 = HEAP8[$arrayidx7$i63>>0]|0;
 $128 = $127&255;
 $129 = (_bitshift64Shl(($128|0),0,24)|0);
 $130 = (getTempRet0() | 0);
 $131 = $125 | $129;
 $132 = $126 | $130;
 $add$ptr12 = ((($s)) + 28|0);
 $133 = HEAP8[$add$ptr12>>0]|0;
 $134 = $133&255;
 $arrayidx1$i42 = ((($s)) + 29|0);
 $135 = HEAP8[$arrayidx1$i42>>0]|0;
 $136 = $135&255;
 $137 = (_bitshift64Shl(($136|0),0,8)|0);
 $138 = (getTempRet0() | 0);
 $139 = $137 | $134;
 $arrayidx3$i46 = ((($s)) + 30|0);
 $140 = HEAP8[$arrayidx3$i46>>0]|0;
 $141 = $140&255;
 $142 = (_bitshift64Shl(($141|0),0,16)|0);
 $143 = (getTempRet0() | 0);
 $144 = $139 | $142;
 $145 = $138 | $143;
 $arrayidx7$i50 = ((($s)) + 31|0);
 $146 = HEAP8[$arrayidx7$i50>>0]|0;
 $147 = $146&255;
 $148 = (_bitshift64Shl(($147|0),0,24)|0);
 $149 = (getTempRet0() | 0);
 $150 = $144 | $148;
 $151 = $145 | $149;
 $152 = (_i64Subtract(1559614444,0,($17|0),($18|0))|0);
 $153 = (getTempRet0() | 0);
 $154 = (_bitshift64Ashr(($152|0),($153|0),63)|0);
 $155 = (getTempRet0() | 0);
 $156 = (_i64Subtract(0,0,($152|0),($153|0))|0);
 $157 = (getTempRet0() | 0);
 $158 = (_bitshift64Lshr(($156|0),($157|0),63)|0);
 $159 = (getTempRet0() | 0);
 $160 = (_i64Add(($154|0),($155|0),($158|0),($159|0))|0);
 $161 = (getTempRet0() | 0);
 $162 = (_i64Subtract(1477600026,0,($36|0),($37|0))|0);
 $163 = (getTempRet0() | 0);
 $164 = (_bitshift64Ashr(($162|0),($163|0),63)|0);
 $165 = (getTempRet0() | 0);
 $166 = (_i64Subtract(0,0,($162|0),($163|0))|0);
 $167 = (getTempRet0() | 0);
 $168 = (_bitshift64Ashr(($166|0),($167|0),63)|0);
 $169 = (getTempRet0() | 0);
 $170 = (_i64Subtract(($164|0),($165|0),($168|0),($169|0))|0);
 $171 = (getTempRet0() | 0);
 $172 = (_bitshift64Shl(($170|0),($171|0),1)|0);
 $173 = (getTempRet0() | 0);
 $174 = (_i64Add(($160|0),($161|0),($172|0),($173|0))|0);
 $175 = (getTempRet0() | 0);
 $176 = (_i64Subtract(-1560830762,0,($55|0),($56|0))|0);
 $177 = (getTempRet0() | 0);
 $178 = (_bitshift64Ashr(($176|0),($177|0),63)|0);
 $179 = (getTempRet0() | 0);
 $180 = (_i64Subtract(0,0,($176|0),($177|0))|0);
 $181 = (getTempRet0() | 0);
 $182 = (_bitshift64Ashr(($180|0),($181|0),63)|0);
 $183 = (getTempRet0() | 0);
 $184 = (_i64Subtract(($178|0),($179|0),($182|0),($183|0))|0);
 $185 = (getTempRet0() | 0);
 $186 = (_bitshift64Shl(($184|0),($185|0),2)|0);
 $187 = (getTempRet0() | 0);
 $188 = (_i64Add(($174|0),($175|0),($186|0),($187|0))|0);
 $189 = (getTempRet0() | 0);
 $190 = (_i64Subtract(350157278,0,($74|0),($75|0))|0);
 $191 = (getTempRet0() | 0);
 $192 = (_bitshift64Ashr(($190|0),($191|0),63)|0);
 $193 = (getTempRet0() | 0);
 $194 = (_i64Subtract(0,0,($190|0),($191|0))|0);
 $195 = (getTempRet0() | 0);
 $196 = (_bitshift64Ashr(($194|0),($195|0),63)|0);
 $197 = (getTempRet0() | 0);
 $198 = (_i64Subtract(($192|0),($193|0),($196|0),($197|0))|0);
 $199 = (getTempRet0() | 0);
 $200 = (_bitshift64Shl(($198|0),($199|0),3)|0);
 $201 = (getTempRet0() | 0);
 $202 = (_i64Add(($188|0),($189|0),($200|0),($201|0))|0);
 $203 = (getTempRet0() | 0);
 $204 = (_i64Subtract(0,0,($93|0),($94|0))|0);
 $205 = (getTempRet0() | 0);
 $206 = (_bitshift64Ashr(($204|0),($205|0),63)|0);
 $207 = (getTempRet0() | 0);
 $208 = (_bitshift64Shl(($206|0),($207|0),4)|0);
 $209 = (getTempRet0() | 0);
 $210 = (_i64Add(($202|0),($203|0),($208|0),($209|0))|0);
 $211 = (getTempRet0() | 0);
 $212 = (_i64Subtract(0,0,($112|0),($113|0))|0);
 $213 = (getTempRet0() | 0);
 $214 = (_bitshift64Ashr(($212|0),($213|0),63)|0);
 $215 = (getTempRet0() | 0);
 $216 = (_bitshift64Shl(($214|0),($215|0),5)|0);
 $217 = (getTempRet0() | 0);
 $218 = (_i64Add(($210|0),($211|0),($216|0),($217|0))|0);
 $219 = (getTempRet0() | 0);
 $220 = (_i64Subtract(0,0,($131|0),($132|0))|0);
 $221 = (getTempRet0() | 0);
 $222 = (_bitshift64Ashr(($220|0),($221|0),63)|0);
 $223 = (getTempRet0() | 0);
 $224 = (_bitshift64Shl(($222|0),($223|0),6)|0);
 $225 = (getTempRet0() | 0);
 $226 = (_i64Add(($218|0),($219|0),($224|0),($225|0))|0);
 $227 = (getTempRet0() | 0);
 $228 = (_i64Subtract(268435456,0,($150|0),($151|0))|0);
 $229 = (getTempRet0() | 0);
 $230 = (_bitshift64Ashr(($228|0),($229|0),63)|0);
 $231 = (getTempRet0() | 0);
 $232 = (_i64Subtract(0,0,($228|0),($229|0))|0);
 $233 = (getTempRet0() | 0);
 $234 = (_bitshift64Ashr(($232|0),($233|0),63)|0);
 $235 = (getTempRet0() | 0);
 $236 = (_i64Subtract(($230|0),($231|0),($234|0),($235|0))|0);
 $237 = (getTempRet0() | 0);
 $238 = (_bitshift64Shl(($236|0),($237|0),7)|0);
 $239 = (getTempRet0() | 0);
 $240 = (_i64Add(($226|0),($227|0),($238|0),($239|0))|0);
 $241 = (getTempRet0() | 0);
 $242 = (_bitshift64Lshr(($240|0),($241|0),8)|0);
 $243 = (getTempRet0() | 0);
 return ($242|0);
}
function _sc_isnonzero($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx1 = 0, $arrayidx12 = 0, $arrayidx15 = 0, $arrayidx18 = 0, $arrayidx21 = 0, $arrayidx24 = 0, $arrayidx27 = 0;
 var $arrayidx3 = 0, $arrayidx30 = 0, $arrayidx33 = 0, $arrayidx36 = 0, $arrayidx39 = 0, $arrayidx42 = 0, $arrayidx45 = 0, $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx6 = 0, $arrayidx60 = 0, $arrayidx63 = 0, $arrayidx66 = 0, $arrayidx69 = 0, $arrayidx72 = 0, $arrayidx75 = 0, $arrayidx78 = 0, $arrayidx81 = 0;
 var $arrayidx84 = 0, $arrayidx87 = 0, $arrayidx9 = 0, $arrayidx90 = 0, $or1136 = 0, $or1437 = 0, $or1738 = 0, $or2039 = 0, $or2340 = 0, $or2641 = 0, $or2942 = 0, $or3243 = 0, $or33 = 0, $or3544 = 0, $or3845 = 0, $or4146 = 0, $or4447 = 0, $or4748 = 0, $or5049 = 0, $or534 = 0;
 var $or5350 = 0, $or5651 = 0, $or5952 = 0, $or6253 = 0, $or6554 = 0, $or6855 = 0, $or7156 = 0, $or7457 = 0, $or7758 = 0, $or8059 = 0, $or835 = 0, $or8360 = 0, $or8661 = 0, $or8962 = 0, $or92 = 0, $or9263 = 0, $shr = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $arrayidx1 = ((($s)) + 1|0);
 $1 = HEAP8[$arrayidx1>>0]|0;
 $or33 = $1 | $0;
 $arrayidx3 = ((($s)) + 2|0);
 $2 = HEAP8[$arrayidx3>>0]|0;
 $or534 = $or33 | $2;
 $arrayidx6 = ((($s)) + 3|0);
 $3 = HEAP8[$arrayidx6>>0]|0;
 $or835 = $or534 | $3;
 $arrayidx9 = ((($s)) + 4|0);
 $4 = HEAP8[$arrayidx9>>0]|0;
 $or1136 = $or835 | $4;
 $arrayidx12 = ((($s)) + 5|0);
 $5 = HEAP8[$arrayidx12>>0]|0;
 $or1437 = $or1136 | $5;
 $arrayidx15 = ((($s)) + 6|0);
 $6 = HEAP8[$arrayidx15>>0]|0;
 $or1738 = $or1437 | $6;
 $arrayidx18 = ((($s)) + 7|0);
 $7 = HEAP8[$arrayidx18>>0]|0;
 $or2039 = $or1738 | $7;
 $arrayidx21 = ((($s)) + 8|0);
 $8 = HEAP8[$arrayidx21>>0]|0;
 $or2340 = $or2039 | $8;
 $arrayidx24 = ((($s)) + 9|0);
 $9 = HEAP8[$arrayidx24>>0]|0;
 $or2641 = $or2340 | $9;
 $arrayidx27 = ((($s)) + 10|0);
 $10 = HEAP8[$arrayidx27>>0]|0;
 $or2942 = $or2641 | $10;
 $arrayidx30 = ((($s)) + 11|0);
 $11 = HEAP8[$arrayidx30>>0]|0;
 $or3243 = $or2942 | $11;
 $arrayidx33 = ((($s)) + 12|0);
 $12 = HEAP8[$arrayidx33>>0]|0;
 $or3544 = $or3243 | $12;
 $arrayidx36 = ((($s)) + 13|0);
 $13 = HEAP8[$arrayidx36>>0]|0;
 $or3845 = $or3544 | $13;
 $arrayidx39 = ((($s)) + 14|0);
 $14 = HEAP8[$arrayidx39>>0]|0;
 $or4146 = $or3845 | $14;
 $arrayidx42 = ((($s)) + 15|0);
 $15 = HEAP8[$arrayidx42>>0]|0;
 $or4447 = $or4146 | $15;
 $arrayidx45 = ((($s)) + 16|0);
 $16 = HEAP8[$arrayidx45>>0]|0;
 $or4748 = $or4447 | $16;
 $arrayidx48 = ((($s)) + 17|0);
 $17 = HEAP8[$arrayidx48>>0]|0;
 $or5049 = $or4748 | $17;
 $arrayidx51 = ((($s)) + 18|0);
 $18 = HEAP8[$arrayidx51>>0]|0;
 $or5350 = $or5049 | $18;
 $arrayidx54 = ((($s)) + 19|0);
 $19 = HEAP8[$arrayidx54>>0]|0;
 $or5651 = $or5350 | $19;
 $arrayidx57 = ((($s)) + 20|0);
 $20 = HEAP8[$arrayidx57>>0]|0;
 $or5952 = $or5651 | $20;
 $arrayidx60 = ((($s)) + 21|0);
 $21 = HEAP8[$arrayidx60>>0]|0;
 $or6253 = $or5952 | $21;
 $arrayidx63 = ((($s)) + 22|0);
 $22 = HEAP8[$arrayidx63>>0]|0;
 $or6554 = $or6253 | $22;
 $arrayidx66 = ((($s)) + 23|0);
 $23 = HEAP8[$arrayidx66>>0]|0;
 $or6855 = $or6554 | $23;
 $arrayidx69 = ((($s)) + 24|0);
 $24 = HEAP8[$arrayidx69>>0]|0;
 $or7156 = $or6855 | $24;
 $arrayidx72 = ((($s)) + 25|0);
 $25 = HEAP8[$arrayidx72>>0]|0;
 $or7457 = $or7156 | $25;
 $arrayidx75 = ((($s)) + 26|0);
 $26 = HEAP8[$arrayidx75>>0]|0;
 $or7758 = $or7457 | $26;
 $arrayidx78 = ((($s)) + 27|0);
 $27 = HEAP8[$arrayidx78>>0]|0;
 $or8059 = $or7758 | $27;
 $arrayidx81 = ((($s)) + 28|0);
 $28 = HEAP8[$arrayidx81>>0]|0;
 $or8360 = $or8059 | $28;
 $arrayidx84 = ((($s)) + 29|0);
 $29 = HEAP8[$arrayidx84>>0]|0;
 $or8661 = $or8360 | $29;
 $arrayidx87 = ((($s)) + 30|0);
 $30 = HEAP8[$arrayidx87>>0]|0;
 $or8962 = $or8661 | $30;
 $arrayidx90 = ((($s)) + 31|0);
 $31 = HEAP8[$arrayidx90>>0]|0;
 $or9263 = $or8962 | $31;
 $or92 = $or9263&255;
 $sub = (($or92) + -1)|0;
 $shr = $sub >> 8;
 $add = (($shr) + 1)|0;
 return ($add|0);
}
function _cn_fast_hash($data,$length,$hash) {
 $data = $data|0;
 $length = $length|0;
 $hash = $hash|0;
 var $state = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $state = sp;
 _keccak1600($data,$length,$state);
 dest=$hash; src=$state; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _keccakf($st,$rounds) {
 $st = $st|0;
 $rounds = $rounds|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $arrayidx$2 = 0, $arrayidx$3 = 0, $arrayidx$4 = 0, $arrayidx12$1$phi$trans$insert = 0, $arrayidx12$2$phi$trans$insert = 0, $arrayidx12$3$phi$trans$insert = 0;
 var $arrayidx12$4$phi$trans$insert = 0, $arrayidx12$phi$trans$insert = 0, $arrayidx14$1 = 0, $arrayidx14$2 = 0, $arrayidx14$3 = 0, $arrayidx14$4 = 0, $arrayidx39 = 0, $arrayidx4 = 0, $arrayidx4$1 = 0, $arrayidx4$2 = 0, $arrayidx4$3 = 0, $arrayidx4$4 = 0, $arrayidx43 = 0, $arrayidx44 = 0, $arrayidx46 = 0, $arrayidx6$1$phi$trans$insert = 0, $arrayidx6$2$phi$trans$insert = 0, $arrayidx6$3$phi$trans$insert = 0, $arrayidx6$4$phi$trans$insert = 0, $arrayidx6$phi$trans$insert = 0;
 var $arrayidx87 = 0, $arrayidx9$1$phi$trans$insert = 0, $arrayidx9$2$phi$trans$insert = 0, $arrayidx9$3$phi$trans$insert = 0, $arrayidx9$4$phi$trans$insert = 0, $arrayidx9$phi$trans$insert = 0, $bc = 0, $cmp63 = 0, $exitcond = 0, $exitcond97 = 0, $i$258 = 0, $inc55 = 0, $inc91 = 0, $round$064 = 0, $sub = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $bc = sp;
 $cmp63 = ($rounds|0)>(0);
 if (!($cmp63)) {
  STACKTOP = sp;return;
 }
 $arrayidx39 = ((($st)) + 8|0);
 $0 = $st;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $arrayidx12$phi$trans$insert = ((($st)) + 160|0);
 $6 = $arrayidx12$phi$trans$insert;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $arrayidx9$1$phi$trans$insert = ((($st)) + 128|0);
 $12 = $arrayidx9$1$phi$trans$insert;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $arrayidx12$1$phi$trans$insert = ((($st)) + 168|0);
 $18 = $arrayidx12$1$phi$trans$insert;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $arrayidx9$2$phi$trans$insert = ((($st)) + 136|0);
 $24 = $arrayidx9$2$phi$trans$insert;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $arrayidx12$2$phi$trans$insert = ((($st)) + 176|0);
 $30 = $arrayidx12$2$phi$trans$insert;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $arrayidx9$3$phi$trans$insert = ((($st)) + 144|0);
 $36 = $arrayidx9$3$phi$trans$insert;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $arrayidx12$3$phi$trans$insert = ((($st)) + 184|0);
 $42 = $arrayidx12$3$phi$trans$insert;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $arrayidx9$4$phi$trans$insert = ((($st)) + 152|0);
 $48 = $arrayidx9$4$phi$trans$insert;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $arrayidx12$4$phi$trans$insert = ((($st)) + 192|0);
 $54 = $arrayidx12$4$phi$trans$insert;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + 4)|0;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $arrayidx6$phi$trans$insert = ((($st)) + 80|0);
 $60 = $arrayidx6$phi$trans$insert;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $arrayidx9$phi$trans$insert = ((($st)) + 120|0);
 $66 = $arrayidx9$phi$trans$insert;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $arrayidx6$1$phi$trans$insert = ((($st)) + 88|0);
 $72 = $arrayidx6$1$phi$trans$insert;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $arrayidx6$2$phi$trans$insert = ((($st)) + 96|0);
 $78 = $arrayidx6$2$phi$trans$insert;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + 4)|0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $arrayidx6$3$phi$trans$insert = ((($st)) + 104|0);
 $84 = $arrayidx6$3$phi$trans$insert;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = (($84) + 4)|0;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $arrayidx6$4$phi$trans$insert = ((($st)) + 112|0);
 $90 = $arrayidx6$4$phi$trans$insert;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = (($90) + 4)|0;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $arrayidx4 = ((($st)) + 40|0);
 $arrayidx4$1 = ((($st)) + 48|0);
 $arrayidx14$1 = ((($bc)) + 8|0);
 $arrayidx$2 = ((($st)) + 16|0);
 $arrayidx4$2 = ((($st)) + 56|0);
 $arrayidx14$2 = ((($bc)) + 16|0);
 $arrayidx$3 = ((($st)) + 24|0);
 $arrayidx4$3 = ((($st)) + 64|0);
 $arrayidx14$3 = ((($bc)) + 24|0);
 $arrayidx$4 = ((($st)) + 32|0);
 $arrayidx4$4 = ((($st)) + 72|0);
 $arrayidx14$4 = ((($bc)) + 32|0);
 $103 = $2;$105 = $5;$107 = $62;$109 = $65;$111 = $68;$113 = $71;$115 = $8;$117 = $11;$137 = $74;$139 = $77;$141 = $14;$143 = $17;$145 = $20;$147 = $23;$167 = $80;$169 = $83;$171 = $26;$173 = $29;$175 = $32;$177 = $35;$197 = $86;$199 = $89;$201 = $38;$203 = $41;$205 = $44;$207 = $47;$227 = $92;$229 = $95;$231 = $50;$233 = $53;$235 = $56;$237 = $59;$round$064 = 0;
 while(1) {
  $96 = $arrayidx4;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = (($96) + 4)|0;
  $100 = $99;
  $101 = HEAP32[$100>>2]|0;
  $102 = $98 ^ $103;
  $104 = $101 ^ $105;
  $106 = $102 ^ $107;
  $108 = $104 ^ $109;
  $110 = $106 ^ $111;
  $112 = $108 ^ $113;
  $114 = $110 ^ $115;
  $116 = $112 ^ $117;
  $118 = $bc;
  $119 = $118;
  HEAP32[$119>>2] = $114;
  $120 = (($118) + 4)|0;
  $121 = $120;
  HEAP32[$121>>2] = $116;
  $122 = $arrayidx39;
  $123 = $122;
  $124 = HEAP32[$123>>2]|0;
  $125 = (($122) + 4)|0;
  $126 = $125;
  $127 = HEAP32[$126>>2]|0;
  $128 = $arrayidx4$1;
  $129 = $128;
  $130 = HEAP32[$129>>2]|0;
  $131 = (($128) + 4)|0;
  $132 = $131;
  $133 = HEAP32[$132>>2]|0;
  $134 = $130 ^ $124;
  $135 = $133 ^ $127;
  $136 = $134 ^ $137;
  $138 = $135 ^ $139;
  $140 = $136 ^ $141;
  $142 = $138 ^ $143;
  $144 = $140 ^ $145;
  $146 = $142 ^ $147;
  $148 = $arrayidx14$1;
  $149 = $148;
  HEAP32[$149>>2] = $144;
  $150 = (($148) + 4)|0;
  $151 = $150;
  HEAP32[$151>>2] = $146;
  $152 = $arrayidx$2;
  $153 = $152;
  $154 = HEAP32[$153>>2]|0;
  $155 = (($152) + 4)|0;
  $156 = $155;
  $157 = HEAP32[$156>>2]|0;
  $158 = $arrayidx4$2;
  $159 = $158;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($158) + 4)|0;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = $160 ^ $154;
  $165 = $163 ^ $157;
  $166 = $164 ^ $167;
  $168 = $165 ^ $169;
  $170 = $166 ^ $171;
  $172 = $168 ^ $173;
  $174 = $170 ^ $175;
  $176 = $172 ^ $177;
  $178 = $arrayidx14$2;
  $179 = $178;
  HEAP32[$179>>2] = $174;
  $180 = (($178) + 4)|0;
  $181 = $180;
  HEAP32[$181>>2] = $176;
  $182 = $arrayidx$3;
  $183 = $182;
  $184 = HEAP32[$183>>2]|0;
  $185 = (($182) + 4)|0;
  $186 = $185;
  $187 = HEAP32[$186>>2]|0;
  $188 = $arrayidx4$3;
  $189 = $188;
  $190 = HEAP32[$189>>2]|0;
  $191 = (($188) + 4)|0;
  $192 = $191;
  $193 = HEAP32[$192>>2]|0;
  $194 = $190 ^ $184;
  $195 = $193 ^ $187;
  $196 = $194 ^ $197;
  $198 = $195 ^ $199;
  $200 = $196 ^ $201;
  $202 = $198 ^ $203;
  $204 = $200 ^ $205;
  $206 = $202 ^ $207;
  $208 = $arrayidx14$3;
  $209 = $208;
  HEAP32[$209>>2] = $204;
  $210 = (($208) + 4)|0;
  $211 = $210;
  HEAP32[$211>>2] = $206;
  $212 = $arrayidx$4;
  $213 = $212;
  $214 = HEAP32[$213>>2]|0;
  $215 = (($212) + 4)|0;
  $216 = $215;
  $217 = HEAP32[$216>>2]|0;
  $218 = $arrayidx4$4;
  $219 = $218;
  $220 = HEAP32[$219>>2]|0;
  $221 = (($218) + 4)|0;
  $222 = $221;
  $223 = HEAP32[$222>>2]|0;
  $224 = $220 ^ $214;
  $225 = $223 ^ $217;
  $226 = $224 ^ $227;
  $228 = $225 ^ $229;
  $230 = $226 ^ $231;
  $232 = $228 ^ $233;
  $234 = $230 ^ $235;
  $236 = $232 ^ $237;
  $238 = $arrayidx14$4;
  $239 = $238;
  HEAP32[$239>>2] = $234;
  $240 = (($238) + 4)|0;
  $241 = $240;
  HEAP32[$241>>2] = $236;
  $242 = (_bitshift64Shl(($144|0),($146|0),1)|0);
  $243 = (getTempRet0() | 0);
  $244 = (_bitshift64Lshr(($144|0),($146|0),63)|0);
  $245 = (getTempRet0() | 0);
  $246 = $242 | $244;
  $247 = $243 | $245;
  $248 = $246 ^ $234;
  $249 = $247 ^ $236;
  $250 = $248 ^ $103;
  $251 = $249 ^ $105;
  $252 = $st;
  $253 = $252;
  HEAP32[$253>>2] = $250;
  $254 = (($252) + 4)|0;
  $255 = $254;
  HEAP32[$255>>2] = $251;
  $256 = $248 ^ $98;
  $257 = $249 ^ $101;
  $258 = $arrayidx4;
  $259 = $258;
  HEAP32[$259>>2] = $256;
  $260 = (($258) + 4)|0;
  $261 = $260;
  HEAP32[$261>>2] = $257;
  $262 = $248 ^ $107;
  $263 = $249 ^ $109;
  $264 = $arrayidx6$phi$trans$insert;
  $265 = $264;
  HEAP32[$265>>2] = $262;
  $266 = (($264) + 4)|0;
  $267 = $266;
  HEAP32[$267>>2] = $263;
  $268 = $248 ^ $111;
  $269 = $249 ^ $113;
  $270 = $arrayidx9$phi$trans$insert;
  $271 = $270;
  HEAP32[$271>>2] = $268;
  $272 = (($270) + 4)|0;
  $273 = $272;
  HEAP32[$273>>2] = $269;
  $274 = $248 ^ $115;
  $275 = $249 ^ $117;
  $276 = $arrayidx12$phi$trans$insert;
  $277 = $276;
  HEAP32[$277>>2] = $274;
  $278 = (($276) + 4)|0;
  $279 = $278;
  HEAP32[$279>>2] = $275;
  $280 = (_bitshift64Shl(($174|0),($176|0),1)|0);
  $281 = (getTempRet0() | 0);
  $282 = (_bitshift64Lshr(($174|0),($176|0),63)|0);
  $283 = (getTempRet0() | 0);
  $284 = $280 | $282;
  $285 = $281 | $283;
  $286 = $284 ^ $114;
  $287 = $285 ^ $116;
  $288 = $286 ^ $124;
  $289 = $287 ^ $127;
  $290 = $arrayidx39;
  $291 = $290;
  HEAP32[$291>>2] = $288;
  $292 = (($290) + 4)|0;
  $293 = $292;
  HEAP32[$293>>2] = $289;
  $294 = $286 ^ $130;
  $295 = $287 ^ $133;
  $296 = $arrayidx4$1;
  $297 = $296;
  HEAP32[$297>>2] = $294;
  $298 = (($296) + 4)|0;
  $299 = $298;
  HEAP32[$299>>2] = $295;
  $300 = $286 ^ $137;
  $301 = $287 ^ $139;
  $302 = $arrayidx6$1$phi$trans$insert;
  $303 = $302;
  HEAP32[$303>>2] = $300;
  $304 = (($302) + 4)|0;
  $305 = $304;
  HEAP32[$305>>2] = $301;
  $306 = $arrayidx9$1$phi$trans$insert;
  $307 = $306;
  $308 = HEAP32[$307>>2]|0;
  $309 = (($306) + 4)|0;
  $310 = $309;
  $311 = HEAP32[$310>>2]|0;
  $312 = $286 ^ $308;
  $313 = $287 ^ $311;
  $314 = $arrayidx9$1$phi$trans$insert;
  $315 = $314;
  HEAP32[$315>>2] = $312;
  $316 = (($314) + 4)|0;
  $317 = $316;
  HEAP32[$317>>2] = $313;
  $318 = $arrayidx12$1$phi$trans$insert;
  $319 = $318;
  $320 = HEAP32[$319>>2]|0;
  $321 = (($318) + 4)|0;
  $322 = $321;
  $323 = HEAP32[$322>>2]|0;
  $324 = $286 ^ $320;
  $325 = $287 ^ $323;
  $326 = $arrayidx12$1$phi$trans$insert;
  $327 = $326;
  HEAP32[$327>>2] = $324;
  $328 = (($326) + 4)|0;
  $329 = $328;
  HEAP32[$329>>2] = $325;
  $330 = (_bitshift64Shl(($204|0),($206|0),1)|0);
  $331 = (getTempRet0() | 0);
  $332 = (_bitshift64Lshr(($204|0),($206|0),63)|0);
  $333 = (getTempRet0() | 0);
  $334 = $330 | $332;
  $335 = $331 | $333;
  $336 = $334 ^ $144;
  $337 = $335 ^ $146;
  $338 = $336 ^ $154;
  $339 = $337 ^ $157;
  $340 = $arrayidx$2;
  $341 = $340;
  HEAP32[$341>>2] = $338;
  $342 = (($340) + 4)|0;
  $343 = $342;
  HEAP32[$343>>2] = $339;
  $344 = $336 ^ $160;
  $345 = $337 ^ $163;
  $346 = $arrayidx4$2;
  $347 = $346;
  HEAP32[$347>>2] = $344;
  $348 = (($346) + 4)|0;
  $349 = $348;
  HEAP32[$349>>2] = $345;
  $350 = $336 ^ $167;
  $351 = $337 ^ $169;
  $352 = $arrayidx6$2$phi$trans$insert;
  $353 = $352;
  HEAP32[$353>>2] = $350;
  $354 = (($352) + 4)|0;
  $355 = $354;
  HEAP32[$355>>2] = $351;
  $356 = $arrayidx9$2$phi$trans$insert;
  $357 = $356;
  $358 = HEAP32[$357>>2]|0;
  $359 = (($356) + 4)|0;
  $360 = $359;
  $361 = HEAP32[$360>>2]|0;
  $362 = $336 ^ $358;
  $363 = $337 ^ $361;
  $364 = $arrayidx9$2$phi$trans$insert;
  $365 = $364;
  HEAP32[$365>>2] = $362;
  $366 = (($364) + 4)|0;
  $367 = $366;
  HEAP32[$367>>2] = $363;
  $368 = $arrayidx12$2$phi$trans$insert;
  $369 = $368;
  $370 = HEAP32[$369>>2]|0;
  $371 = (($368) + 4)|0;
  $372 = $371;
  $373 = HEAP32[$372>>2]|0;
  $374 = $336 ^ $370;
  $375 = $337 ^ $373;
  $376 = $arrayidx12$2$phi$trans$insert;
  $377 = $376;
  HEAP32[$377>>2] = $374;
  $378 = (($376) + 4)|0;
  $379 = $378;
  HEAP32[$379>>2] = $375;
  $380 = (_bitshift64Shl(($234|0),($236|0),1)|0);
  $381 = (getTempRet0() | 0);
  $382 = (_bitshift64Lshr(($234|0),($236|0),63)|0);
  $383 = (getTempRet0() | 0);
  $384 = $380 | $382;
  $385 = $381 | $383;
  $386 = $384 ^ $174;
  $387 = $385 ^ $176;
  $388 = $386 ^ $184;
  $389 = $387 ^ $187;
  $390 = $arrayidx$3;
  $391 = $390;
  HEAP32[$391>>2] = $388;
  $392 = (($390) + 4)|0;
  $393 = $392;
  HEAP32[$393>>2] = $389;
  $394 = $386 ^ $190;
  $395 = $387 ^ $193;
  $396 = $arrayidx4$3;
  $397 = $396;
  HEAP32[$397>>2] = $394;
  $398 = (($396) + 4)|0;
  $399 = $398;
  HEAP32[$399>>2] = $395;
  $400 = $386 ^ $197;
  $401 = $387 ^ $199;
  $402 = $arrayidx6$3$phi$trans$insert;
  $403 = $402;
  HEAP32[$403>>2] = $400;
  $404 = (($402) + 4)|0;
  $405 = $404;
  HEAP32[$405>>2] = $401;
  $406 = $arrayidx9$3$phi$trans$insert;
  $407 = $406;
  $408 = HEAP32[$407>>2]|0;
  $409 = (($406) + 4)|0;
  $410 = $409;
  $411 = HEAP32[$410>>2]|0;
  $412 = $386 ^ $408;
  $413 = $387 ^ $411;
  $414 = $arrayidx9$3$phi$trans$insert;
  $415 = $414;
  HEAP32[$415>>2] = $412;
  $416 = (($414) + 4)|0;
  $417 = $416;
  HEAP32[$417>>2] = $413;
  $418 = $arrayidx12$3$phi$trans$insert;
  $419 = $418;
  $420 = HEAP32[$419>>2]|0;
  $421 = (($418) + 4)|0;
  $422 = $421;
  $423 = HEAP32[$422>>2]|0;
  $424 = $386 ^ $420;
  $425 = $387 ^ $423;
  $426 = $arrayidx12$3$phi$trans$insert;
  $427 = $426;
  HEAP32[$427>>2] = $424;
  $428 = (($426) + 4)|0;
  $429 = $428;
  HEAP32[$429>>2] = $425;
  $430 = $bc;
  $431 = $430;
  $432 = HEAP32[$431>>2]|0;
  $433 = (($430) + 4)|0;
  $434 = $433;
  $435 = HEAP32[$434>>2]|0;
  $436 = (_bitshift64Shl(($432|0),($435|0),1)|0);
  $437 = (getTempRet0() | 0);
  $438 = (_bitshift64Lshr(($432|0),($435|0),63)|0);
  $439 = (getTempRet0() | 0);
  $440 = $436 | $438;
  $441 = $437 | $439;
  $442 = $440 ^ $204;
  $443 = $441 ^ $206;
  $444 = $442 ^ $214;
  $445 = $443 ^ $217;
  $446 = $arrayidx$4;
  $447 = $446;
  HEAP32[$447>>2] = $444;
  $448 = (($446) + 4)|0;
  $449 = $448;
  HEAP32[$449>>2] = $445;
  $450 = $442 ^ $220;
  $451 = $443 ^ $223;
  $452 = $arrayidx4$4;
  $453 = $452;
  HEAP32[$453>>2] = $450;
  $454 = (($452) + 4)|0;
  $455 = $454;
  HEAP32[$455>>2] = $451;
  $456 = $442 ^ $227;
  $457 = $443 ^ $229;
  $458 = $arrayidx6$4$phi$trans$insert;
  $459 = $458;
  HEAP32[$459>>2] = $456;
  $460 = (($458) + 4)|0;
  $461 = $460;
  HEAP32[$461>>2] = $457;
  $462 = $arrayidx9$4$phi$trans$insert;
  $463 = $462;
  $464 = HEAP32[$463>>2]|0;
  $465 = (($462) + 4)|0;
  $466 = $465;
  $467 = HEAP32[$466>>2]|0;
  $468 = $442 ^ $464;
  $469 = $443 ^ $467;
  $470 = $arrayidx9$4$phi$trans$insert;
  $471 = $470;
  HEAP32[$471>>2] = $468;
  $472 = (($470) + 4)|0;
  $473 = $472;
  HEAP32[$473>>2] = $469;
  $474 = $arrayidx12$4$phi$trans$insert;
  $475 = $474;
  $476 = HEAP32[$475>>2]|0;
  $477 = (($474) + 4)|0;
  $478 = $477;
  $479 = HEAP32[$478>>2]|0;
  $480 = $442 ^ $476;
  $481 = $443 ^ $479;
  $482 = $arrayidx12$4$phi$trans$insert;
  $483 = $482;
  HEAP32[$483>>2] = $480;
  $484 = (($482) + 4)|0;
  $485 = $484;
  HEAP32[$485>>2] = $481;
  $494 = $288;$495 = $289;$i$258 = 0;
  while(1) {
   $arrayidx43 = (32576 + ($i$258<<2)|0);
   $486 = HEAP32[$arrayidx43>>2]|0;
   $arrayidx44 = (($st) + ($486<<3)|0);
   $487 = $arrayidx44;
   $488 = $487;
   $489 = HEAP32[$488>>2]|0;
   $490 = (($487) + 4)|0;
   $491 = $490;
   $492 = HEAP32[$491>>2]|0;
   $arrayidx46 = (32480 + ($i$258<<2)|0);
   $493 = HEAP32[$arrayidx46>>2]|0;
   $496 = (_bitshift64Shl(($494|0),($495|0),($493|0))|0);
   $497 = (getTempRet0() | 0);
   $sub = (64 - ($493))|0;
   $498 = (_bitshift64Lshr(($494|0),($495|0),($sub|0))|0);
   $499 = (getTempRet0() | 0);
   $500 = $498 | $496;
   $501 = $499 | $497;
   $502 = $arrayidx44;
   $503 = $502;
   HEAP32[$503>>2] = $500;
   $504 = (($502) + 4)|0;
   $505 = $504;
   HEAP32[$505>>2] = $501;
   $inc55 = (($i$258) + 1)|0;
   $exitcond = ($inc55|0)==(24);
   if ($exitcond) {
    break;
   } else {
    $494 = $489;$495 = $492;$i$258 = $inc55;
   }
  }
  dest=$bc; src=$st; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $506 = $arrayidx14$1;
  $507 = $506;
  $508 = HEAP32[$507>>2]|0;
  $509 = (($506) + 4)|0;
  $510 = $509;
  $511 = HEAP32[$510>>2]|0;
  $512 = $508 ^ -1;
  $513 = $511 ^ -1;
  $514 = $arrayidx14$2;
  $515 = $514;
  $516 = HEAP32[$515>>2]|0;
  $517 = (($514) + 4)|0;
  $518 = $517;
  $519 = HEAP32[$518>>2]|0;
  $520 = $516 & $512;
  $521 = $519 & $513;
  $522 = $st;
  $523 = $522;
  $524 = HEAP32[$523>>2]|0;
  $525 = (($522) + 4)|0;
  $526 = $525;
  $527 = HEAP32[$526>>2]|0;
  $528 = $524 ^ $520;
  $529 = $527 ^ $521;
  $530 = $st;
  $531 = $530;
  HEAP32[$531>>2] = $528;
  $532 = (($530) + 4)|0;
  $533 = $532;
  HEAP32[$533>>2] = $529;
  $534 = $516 ^ -1;
  $535 = $519 ^ -1;
  $536 = $arrayidx14$3;
  $537 = $536;
  $538 = HEAP32[$537>>2]|0;
  $539 = (($536) + 4)|0;
  $540 = $539;
  $541 = HEAP32[$540>>2]|0;
  $542 = $538 & $534;
  $543 = $541 & $535;
  $544 = $arrayidx39;
  $545 = $544;
  $546 = HEAP32[$545>>2]|0;
  $547 = (($544) + 4)|0;
  $548 = $547;
  $549 = HEAP32[$548>>2]|0;
  $550 = $546 ^ $542;
  $551 = $549 ^ $543;
  $552 = $arrayidx39;
  $553 = $552;
  HEAP32[$553>>2] = $550;
  $554 = (($552) + 4)|0;
  $555 = $554;
  HEAP32[$555>>2] = $551;
  $556 = $538 ^ -1;
  $557 = $541 ^ -1;
  $558 = $arrayidx14$4;
  $559 = $558;
  $560 = HEAP32[$559>>2]|0;
  $561 = (($558) + 4)|0;
  $562 = $561;
  $563 = HEAP32[$562>>2]|0;
  $564 = $560 & $556;
  $565 = $563 & $557;
  $566 = $arrayidx$2;
  $567 = $566;
  $568 = HEAP32[$567>>2]|0;
  $569 = (($566) + 4)|0;
  $570 = $569;
  $571 = HEAP32[$570>>2]|0;
  $572 = $568 ^ $564;
  $573 = $571 ^ $565;
  $574 = $arrayidx$2;
  $575 = $574;
  HEAP32[$575>>2] = $572;
  $576 = (($574) + 4)|0;
  $577 = $576;
  HEAP32[$577>>2] = $573;
  $578 = $560 ^ -1;
  $579 = $563 ^ -1;
  $580 = $bc;
  $581 = $580;
  $582 = HEAP32[$581>>2]|0;
  $583 = (($580) + 4)|0;
  $584 = $583;
  $585 = HEAP32[$584>>2]|0;
  $586 = $582 & $578;
  $587 = $585 & $579;
  $588 = $arrayidx$3;
  $589 = $588;
  $590 = HEAP32[$589>>2]|0;
  $591 = (($588) + 4)|0;
  $592 = $591;
  $593 = HEAP32[$592>>2]|0;
  $594 = $590 ^ $586;
  $595 = $593 ^ $587;
  $596 = $arrayidx$3;
  $597 = $596;
  HEAP32[$597>>2] = $594;
  $598 = (($596) + 4)|0;
  $599 = $598;
  HEAP32[$599>>2] = $595;
  $600 = $582 ^ -1;
  $601 = $585 ^ -1;
  $602 = $508 & $600;
  $603 = $511 & $601;
  $604 = $arrayidx$4;
  $605 = $604;
  $606 = HEAP32[$605>>2]|0;
  $607 = (($604) + 4)|0;
  $608 = $607;
  $609 = HEAP32[$608>>2]|0;
  $610 = $606 ^ $602;
  $611 = $609 ^ $603;
  $612 = $arrayidx$4;
  $613 = $612;
  HEAP32[$613>>2] = $610;
  $614 = (($612) + 4)|0;
  $615 = $614;
  HEAP32[$615>>2] = $611;
  dest=$bc; src=$arrayidx4; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $616 = $arrayidx14$1;
  $617 = $616;
  $618 = HEAP32[$617>>2]|0;
  $619 = (($616) + 4)|0;
  $620 = $619;
  $621 = HEAP32[$620>>2]|0;
  $622 = $618 ^ -1;
  $623 = $621 ^ -1;
  $624 = $arrayidx14$2;
  $625 = $624;
  $626 = HEAP32[$625>>2]|0;
  $627 = (($624) + 4)|0;
  $628 = $627;
  $629 = HEAP32[$628>>2]|0;
  $630 = $626 & $622;
  $631 = $629 & $623;
  $632 = $arrayidx4;
  $633 = $632;
  $634 = HEAP32[$633>>2]|0;
  $635 = (($632) + 4)|0;
  $636 = $635;
  $637 = HEAP32[$636>>2]|0;
  $638 = $634 ^ $630;
  $639 = $637 ^ $631;
  $640 = $arrayidx4;
  $641 = $640;
  HEAP32[$641>>2] = $638;
  $642 = (($640) + 4)|0;
  $643 = $642;
  HEAP32[$643>>2] = $639;
  $644 = $626 ^ -1;
  $645 = $629 ^ -1;
  $646 = $arrayidx14$3;
  $647 = $646;
  $648 = HEAP32[$647>>2]|0;
  $649 = (($646) + 4)|0;
  $650 = $649;
  $651 = HEAP32[$650>>2]|0;
  $652 = $648 & $644;
  $653 = $651 & $645;
  $654 = $arrayidx4$1;
  $655 = $654;
  $656 = HEAP32[$655>>2]|0;
  $657 = (($654) + 4)|0;
  $658 = $657;
  $659 = HEAP32[$658>>2]|0;
  $660 = $656 ^ $652;
  $661 = $659 ^ $653;
  $662 = $arrayidx4$1;
  $663 = $662;
  HEAP32[$663>>2] = $660;
  $664 = (($662) + 4)|0;
  $665 = $664;
  HEAP32[$665>>2] = $661;
  $666 = $648 ^ -1;
  $667 = $651 ^ -1;
  $668 = $arrayidx14$4;
  $669 = $668;
  $670 = HEAP32[$669>>2]|0;
  $671 = (($668) + 4)|0;
  $672 = $671;
  $673 = HEAP32[$672>>2]|0;
  $674 = $670 & $666;
  $675 = $673 & $667;
  $676 = $arrayidx4$2;
  $677 = $676;
  $678 = HEAP32[$677>>2]|0;
  $679 = (($676) + 4)|0;
  $680 = $679;
  $681 = HEAP32[$680>>2]|0;
  $682 = $678 ^ $674;
  $683 = $681 ^ $675;
  $684 = $arrayidx4$2;
  $685 = $684;
  HEAP32[$685>>2] = $682;
  $686 = (($684) + 4)|0;
  $687 = $686;
  HEAP32[$687>>2] = $683;
  $688 = $670 ^ -1;
  $689 = $673 ^ -1;
  $690 = $bc;
  $691 = $690;
  $692 = HEAP32[$691>>2]|0;
  $693 = (($690) + 4)|0;
  $694 = $693;
  $695 = HEAP32[$694>>2]|0;
  $696 = $692 & $688;
  $697 = $695 & $689;
  $698 = $arrayidx4$3;
  $699 = $698;
  $700 = HEAP32[$699>>2]|0;
  $701 = (($698) + 4)|0;
  $702 = $701;
  $703 = HEAP32[$702>>2]|0;
  $704 = $700 ^ $696;
  $705 = $703 ^ $697;
  $706 = $arrayidx4$3;
  $707 = $706;
  HEAP32[$707>>2] = $704;
  $708 = (($706) + 4)|0;
  $709 = $708;
  HEAP32[$709>>2] = $705;
  $710 = $692 ^ -1;
  $711 = $695 ^ -1;
  $712 = $618 & $710;
  $713 = $621 & $711;
  $714 = $arrayidx4$4;
  $715 = $714;
  $716 = HEAP32[$715>>2]|0;
  $717 = (($714) + 4)|0;
  $718 = $717;
  $719 = HEAP32[$718>>2]|0;
  $720 = $716 ^ $712;
  $721 = $719 ^ $713;
  $722 = $arrayidx4$4;
  $723 = $722;
  HEAP32[$723>>2] = $720;
  $724 = (($722) + 4)|0;
  $725 = $724;
  HEAP32[$725>>2] = $721;
  dest=$bc; src=$arrayidx6$phi$trans$insert; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $726 = $arrayidx14$1;
  $727 = $726;
  $728 = HEAP32[$727>>2]|0;
  $729 = (($726) + 4)|0;
  $730 = $729;
  $731 = HEAP32[$730>>2]|0;
  $732 = $728 ^ -1;
  $733 = $731 ^ -1;
  $734 = $arrayidx14$2;
  $735 = $734;
  $736 = HEAP32[$735>>2]|0;
  $737 = (($734) + 4)|0;
  $738 = $737;
  $739 = HEAP32[$738>>2]|0;
  $740 = $736 & $732;
  $741 = $739 & $733;
  $742 = $arrayidx6$phi$trans$insert;
  $743 = $742;
  $744 = HEAP32[$743>>2]|0;
  $745 = (($742) + 4)|0;
  $746 = $745;
  $747 = HEAP32[$746>>2]|0;
  $748 = $744 ^ $740;
  $749 = $747 ^ $741;
  $750 = $arrayidx6$phi$trans$insert;
  $751 = $750;
  HEAP32[$751>>2] = $748;
  $752 = (($750) + 4)|0;
  $753 = $752;
  HEAP32[$753>>2] = $749;
  $754 = $736 ^ -1;
  $755 = $739 ^ -1;
  $756 = $arrayidx14$3;
  $757 = $756;
  $758 = HEAP32[$757>>2]|0;
  $759 = (($756) + 4)|0;
  $760 = $759;
  $761 = HEAP32[$760>>2]|0;
  $762 = $758 & $754;
  $763 = $761 & $755;
  $764 = $arrayidx6$1$phi$trans$insert;
  $765 = $764;
  $766 = HEAP32[$765>>2]|0;
  $767 = (($764) + 4)|0;
  $768 = $767;
  $769 = HEAP32[$768>>2]|0;
  $770 = $766 ^ $762;
  $771 = $769 ^ $763;
  $772 = $arrayidx6$1$phi$trans$insert;
  $773 = $772;
  HEAP32[$773>>2] = $770;
  $774 = (($772) + 4)|0;
  $775 = $774;
  HEAP32[$775>>2] = $771;
  $776 = $758 ^ -1;
  $777 = $761 ^ -1;
  $778 = $arrayidx14$4;
  $779 = $778;
  $780 = HEAP32[$779>>2]|0;
  $781 = (($778) + 4)|0;
  $782 = $781;
  $783 = HEAP32[$782>>2]|0;
  $784 = $780 & $776;
  $785 = $783 & $777;
  $786 = $arrayidx6$2$phi$trans$insert;
  $787 = $786;
  $788 = HEAP32[$787>>2]|0;
  $789 = (($786) + 4)|0;
  $790 = $789;
  $791 = HEAP32[$790>>2]|0;
  $792 = $788 ^ $784;
  $793 = $791 ^ $785;
  $794 = $arrayidx6$2$phi$trans$insert;
  $795 = $794;
  HEAP32[$795>>2] = $792;
  $796 = (($794) + 4)|0;
  $797 = $796;
  HEAP32[$797>>2] = $793;
  $798 = $780 ^ -1;
  $799 = $783 ^ -1;
  $800 = $bc;
  $801 = $800;
  $802 = HEAP32[$801>>2]|0;
  $803 = (($800) + 4)|0;
  $804 = $803;
  $805 = HEAP32[$804>>2]|0;
  $806 = $802 & $798;
  $807 = $805 & $799;
  $808 = $arrayidx6$3$phi$trans$insert;
  $809 = $808;
  $810 = HEAP32[$809>>2]|0;
  $811 = (($808) + 4)|0;
  $812 = $811;
  $813 = HEAP32[$812>>2]|0;
  $814 = $810 ^ $806;
  $815 = $813 ^ $807;
  $816 = $arrayidx6$3$phi$trans$insert;
  $817 = $816;
  HEAP32[$817>>2] = $814;
  $818 = (($816) + 4)|0;
  $819 = $818;
  HEAP32[$819>>2] = $815;
  $820 = $802 ^ -1;
  $821 = $805 ^ -1;
  $822 = $728 & $820;
  $823 = $731 & $821;
  $824 = $arrayidx6$4$phi$trans$insert;
  $825 = $824;
  $826 = HEAP32[$825>>2]|0;
  $827 = (($824) + 4)|0;
  $828 = $827;
  $829 = HEAP32[$828>>2]|0;
  $830 = $826 ^ $822;
  $831 = $829 ^ $823;
  $832 = $arrayidx6$4$phi$trans$insert;
  $833 = $832;
  HEAP32[$833>>2] = $830;
  $834 = (($832) + 4)|0;
  $835 = $834;
  HEAP32[$835>>2] = $831;
  dest=$bc; src=$arrayidx9$phi$trans$insert; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $836 = $arrayidx14$1;
  $837 = $836;
  $838 = HEAP32[$837>>2]|0;
  $839 = (($836) + 4)|0;
  $840 = $839;
  $841 = HEAP32[$840>>2]|0;
  $842 = $838 ^ -1;
  $843 = $841 ^ -1;
  $844 = $arrayidx14$2;
  $845 = $844;
  $846 = HEAP32[$845>>2]|0;
  $847 = (($844) + 4)|0;
  $848 = $847;
  $849 = HEAP32[$848>>2]|0;
  $850 = $846 & $842;
  $851 = $849 & $843;
  $852 = $arrayidx9$phi$trans$insert;
  $853 = $852;
  $854 = HEAP32[$853>>2]|0;
  $855 = (($852) + 4)|0;
  $856 = $855;
  $857 = HEAP32[$856>>2]|0;
  $858 = $854 ^ $850;
  $859 = $857 ^ $851;
  $860 = $arrayidx9$phi$trans$insert;
  $861 = $860;
  HEAP32[$861>>2] = $858;
  $862 = (($860) + 4)|0;
  $863 = $862;
  HEAP32[$863>>2] = $859;
  $864 = $846 ^ -1;
  $865 = $849 ^ -1;
  $866 = $arrayidx14$3;
  $867 = $866;
  $868 = HEAP32[$867>>2]|0;
  $869 = (($866) + 4)|0;
  $870 = $869;
  $871 = HEAP32[$870>>2]|0;
  $872 = $868 & $864;
  $873 = $871 & $865;
  $874 = $arrayidx9$1$phi$trans$insert;
  $875 = $874;
  $876 = HEAP32[$875>>2]|0;
  $877 = (($874) + 4)|0;
  $878 = $877;
  $879 = HEAP32[$878>>2]|0;
  $880 = $876 ^ $872;
  $881 = $879 ^ $873;
  $882 = $arrayidx9$1$phi$trans$insert;
  $883 = $882;
  HEAP32[$883>>2] = $880;
  $884 = (($882) + 4)|0;
  $885 = $884;
  HEAP32[$885>>2] = $881;
  $886 = $868 ^ -1;
  $887 = $871 ^ -1;
  $888 = $arrayidx14$4;
  $889 = $888;
  $890 = HEAP32[$889>>2]|0;
  $891 = (($888) + 4)|0;
  $892 = $891;
  $893 = HEAP32[$892>>2]|0;
  $894 = $890 & $886;
  $895 = $893 & $887;
  $896 = $arrayidx9$2$phi$trans$insert;
  $897 = $896;
  $898 = HEAP32[$897>>2]|0;
  $899 = (($896) + 4)|0;
  $900 = $899;
  $901 = HEAP32[$900>>2]|0;
  $902 = $898 ^ $894;
  $903 = $901 ^ $895;
  $904 = $arrayidx9$2$phi$trans$insert;
  $905 = $904;
  HEAP32[$905>>2] = $902;
  $906 = (($904) + 4)|0;
  $907 = $906;
  HEAP32[$907>>2] = $903;
  $908 = $890 ^ -1;
  $909 = $893 ^ -1;
  $910 = $bc;
  $911 = $910;
  $912 = HEAP32[$911>>2]|0;
  $913 = (($910) + 4)|0;
  $914 = $913;
  $915 = HEAP32[$914>>2]|0;
  $916 = $912 & $908;
  $917 = $915 & $909;
  $918 = $arrayidx9$3$phi$trans$insert;
  $919 = $918;
  $920 = HEAP32[$919>>2]|0;
  $921 = (($918) + 4)|0;
  $922 = $921;
  $923 = HEAP32[$922>>2]|0;
  $924 = $920 ^ $916;
  $925 = $923 ^ $917;
  $926 = $arrayidx9$3$phi$trans$insert;
  $927 = $926;
  HEAP32[$927>>2] = $924;
  $928 = (($926) + 4)|0;
  $929 = $928;
  HEAP32[$929>>2] = $925;
  $930 = $912 ^ -1;
  $931 = $915 ^ -1;
  $932 = $838 & $930;
  $933 = $841 & $931;
  $934 = $arrayidx9$4$phi$trans$insert;
  $935 = $934;
  $936 = HEAP32[$935>>2]|0;
  $937 = (($934) + 4)|0;
  $938 = $937;
  $939 = HEAP32[$938>>2]|0;
  $940 = $936 ^ $932;
  $941 = $939 ^ $933;
  $942 = $arrayidx9$4$phi$trans$insert;
  $943 = $942;
  HEAP32[$943>>2] = $940;
  $944 = (($942) + 4)|0;
  $945 = $944;
  HEAP32[$945>>2] = $941;
  dest=$bc; src=$arrayidx12$phi$trans$insert; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $946 = $arrayidx14$1;
  $947 = $946;
  $948 = HEAP32[$947>>2]|0;
  $949 = (($946) + 4)|0;
  $950 = $949;
  $951 = HEAP32[$950>>2]|0;
  $952 = $948 ^ -1;
  $953 = $951 ^ -1;
  $954 = $arrayidx14$2;
  $955 = $954;
  $956 = HEAP32[$955>>2]|0;
  $957 = (($954) + 4)|0;
  $958 = $957;
  $959 = HEAP32[$958>>2]|0;
  $960 = $956 & $952;
  $961 = $959 & $953;
  $962 = $arrayidx12$phi$trans$insert;
  $963 = $962;
  $964 = HEAP32[$963>>2]|0;
  $965 = (($962) + 4)|0;
  $966 = $965;
  $967 = HEAP32[$966>>2]|0;
  $968 = $964 ^ $960;
  $969 = $967 ^ $961;
  $970 = $arrayidx12$phi$trans$insert;
  $971 = $970;
  HEAP32[$971>>2] = $968;
  $972 = (($970) + 4)|0;
  $973 = $972;
  HEAP32[$973>>2] = $969;
  $974 = $956 ^ -1;
  $975 = $959 ^ -1;
  $976 = $arrayidx14$3;
  $977 = $976;
  $978 = HEAP32[$977>>2]|0;
  $979 = (($976) + 4)|0;
  $980 = $979;
  $981 = HEAP32[$980>>2]|0;
  $982 = $978 & $974;
  $983 = $981 & $975;
  $984 = $arrayidx12$1$phi$trans$insert;
  $985 = $984;
  $986 = HEAP32[$985>>2]|0;
  $987 = (($984) + 4)|0;
  $988 = $987;
  $989 = HEAP32[$988>>2]|0;
  $990 = $986 ^ $982;
  $991 = $989 ^ $983;
  $992 = $arrayidx12$1$phi$trans$insert;
  $993 = $992;
  HEAP32[$993>>2] = $990;
  $994 = (($992) + 4)|0;
  $995 = $994;
  HEAP32[$995>>2] = $991;
  $996 = $978 ^ -1;
  $997 = $981 ^ -1;
  $998 = $arrayidx14$4;
  $999 = $998;
  $1000 = HEAP32[$999>>2]|0;
  $1001 = (($998) + 4)|0;
  $1002 = $1001;
  $1003 = HEAP32[$1002>>2]|0;
  $1004 = $1000 & $996;
  $1005 = $1003 & $997;
  $1006 = $arrayidx12$2$phi$trans$insert;
  $1007 = $1006;
  $1008 = HEAP32[$1007>>2]|0;
  $1009 = (($1006) + 4)|0;
  $1010 = $1009;
  $1011 = HEAP32[$1010>>2]|0;
  $1012 = $1008 ^ $1004;
  $1013 = $1011 ^ $1005;
  $1014 = $arrayidx12$2$phi$trans$insert;
  $1015 = $1014;
  HEAP32[$1015>>2] = $1012;
  $1016 = (($1014) + 4)|0;
  $1017 = $1016;
  HEAP32[$1017>>2] = $1013;
  $1018 = $1000 ^ -1;
  $1019 = $1003 ^ -1;
  $1020 = $bc;
  $1021 = $1020;
  $1022 = HEAP32[$1021>>2]|0;
  $1023 = (($1020) + 4)|0;
  $1024 = $1023;
  $1025 = HEAP32[$1024>>2]|0;
  $1026 = $1022 & $1018;
  $1027 = $1025 & $1019;
  $1028 = $arrayidx12$3$phi$trans$insert;
  $1029 = $1028;
  $1030 = HEAP32[$1029>>2]|0;
  $1031 = (($1028) + 4)|0;
  $1032 = $1031;
  $1033 = HEAP32[$1032>>2]|0;
  $1034 = $1030 ^ $1026;
  $1035 = $1033 ^ $1027;
  $1036 = $arrayidx12$3$phi$trans$insert;
  $1037 = $1036;
  HEAP32[$1037>>2] = $1034;
  $1038 = (($1036) + 4)|0;
  $1039 = $1038;
  HEAP32[$1039>>2] = $1035;
  $1040 = $1022 ^ -1;
  $1041 = $1025 ^ -1;
  $1042 = $948 & $1040;
  $1043 = $951 & $1041;
  $1044 = $arrayidx12$4$phi$trans$insert;
  $1045 = $1044;
  $1046 = HEAP32[$1045>>2]|0;
  $1047 = (($1044) + 4)|0;
  $1048 = $1047;
  $1049 = HEAP32[$1048>>2]|0;
  $1050 = $1046 ^ $1042;
  $1051 = $1049 ^ $1043;
  $1052 = $arrayidx12$4$phi$trans$insert;
  $1053 = $1052;
  HEAP32[$1053>>2] = $1050;
  $1054 = (($1052) + 4)|0;
  $1055 = $1054;
  HEAP32[$1055>>2] = $1051;
  $arrayidx87 = (32288 + ($round$064<<3)|0);
  $1056 = $arrayidx87;
  $1057 = $1056;
  $1058 = HEAP32[$1057>>2]|0;
  $1059 = (($1056) + 4)|0;
  $1060 = $1059;
  $1061 = HEAP32[$1060>>2]|0;
  $1062 = $st;
  $1063 = $1062;
  $1064 = HEAP32[$1063>>2]|0;
  $1065 = (($1062) + 4)|0;
  $1066 = $1065;
  $1067 = HEAP32[$1066>>2]|0;
  $1068 = $1064 ^ $1058;
  $1069 = $1067 ^ $1061;
  $1070 = $st;
  $1071 = $1070;
  HEAP32[$1071>>2] = $1068;
  $1072 = (($1070) + 4)|0;
  $1073 = $1072;
  HEAP32[$1073>>2] = $1069;
  $inc91 = (($round$064) + 1)|0;
  $exitcond97 = ($inc91|0)==($rounds|0);
  if ($exitcond97) {
   break;
  } else {
   $103 = $1068;$105 = $1069;$107 = $748;$109 = $749;$111 = $858;$113 = $859;$115 = $968;$117 = $969;$137 = $770;$139 = $771;$141 = $880;$143 = $881;$145 = $990;$147 = $991;$167 = $792;$169 = $793;$171 = $902;$173 = $903;$175 = $1012;$177 = $1013;$197 = $814;$199 = $815;$201 = $924;$203 = $925;$205 = $1034;$207 = $1035;$227 = $830;$229 = $831;$231 = $940;$233 = $941;$235 = $1050;$237 = $1051;$round$064 = $inc91;
  }
 }
 STACKTOP = sp;return;
}
function _keccak($in,$inlen,$md,$mdlen) {
 $in = $in|0;
 $inlen = $inlen|0;
 $md = $md|0;
 $mdlen = $mdlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr$us = 0;
 var $add$ptr14 = 0, $arrayidx$us = 0, $arrayidx12 = 0, $arrayidx17 = 0, $arrayidx24 = 0, $arrayidx25 = 0, $arrayidx5$us = 0, $cmp = 0, $cmp1 = 0, $cmp1$us = 0, $cmp131 = 0, $cmp2027 = 0, $cmp329 = 0, $cond = 0, $div = 0, $exitcond = 0, $exitcond36 = 0, $i$030$us = 0, $i$128 = 0, $in$addr$0$lcssa = 0;
 var $in$addr$033 = 0, $in$addr$033$us = 0, $inc$us = 0, $inc11 = 0, $inc28 = 0, $inlen$addr$0$lcssa = 0, $inlen$addr$032 = 0, $inlen$addr$032$us = 0, $mul = 0, $st = 0, $sub = 0, $sub15 = 0, $sub16 = 0, $sub8 = 0, $sub8$us = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $st = sp + 144|0;
 $temp = sp;
 $cmp = ($mdlen|0)==(200);
 $mul = $mdlen << 1;
 $sub = (200 - ($mul))|0;
 $cond = $cmp ? 136 : $sub;
 $div = (($cond|0) / 8)&-1;
 _memset(($st|0),0,200)|0;
 $cmp131 = ($cond|0)>($inlen|0);
 L1: do {
  if ($cmp131) {
   $in$addr$0$lcssa = $in;$inlen$addr$0$lcssa = $inlen;
  } else {
   $cmp329 = ($cond|0)>(7);
   if (!($cmp329)) {
    $in$addr$033 = $in;$inlen$addr$032 = $inlen;
    while(1) {
     _keccakf($st,24);
     $sub8 = (($inlen$addr$032) - ($cond))|0;
     $add$ptr = (($in$addr$033) + ($cond)|0);
     $cmp1 = ($sub8|0)<($cond|0);
     if ($cmp1) {
      $in$addr$0$lcssa = $add$ptr;$inlen$addr$0$lcssa = $sub8;
      break L1;
     } else {
      $in$addr$033 = $add$ptr;$inlen$addr$032 = $sub8;
     }
    }
   }
   $in$addr$033$us = $in;$inlen$addr$032$us = $inlen;
   while(1) {
    $i$030$us = 0;
    while(1) {
     $arrayidx$us = (($in$addr$033$us) + ($i$030$us<<3)|0);
     $0 = $arrayidx$us;
     $1 = $0;
     $2 = HEAP32[$1>>2]|0;
     $3 = (($0) + 4)|0;
     $4 = $3;
     $5 = HEAP32[$4>>2]|0;
     $arrayidx5$us = (($st) + ($i$030$us<<3)|0);
     $6 = $arrayidx5$us;
     $7 = $6;
     $8 = HEAP32[$7>>2]|0;
     $9 = (($6) + 4)|0;
     $10 = $9;
     $11 = HEAP32[$10>>2]|0;
     $12 = $8 ^ $2;
     $13 = $11 ^ $5;
     $14 = $arrayidx5$us;
     $15 = $14;
     HEAP32[$15>>2] = $12;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $inc$us = (($i$030$us) + 1)|0;
     $exitcond36 = ($inc$us|0)==($div|0);
     if ($exitcond36) {
      break;
     } else {
      $i$030$us = $inc$us;
     }
    }
    _keccakf($st,24);
    $sub8$us = (($inlen$addr$032$us) - ($cond))|0;
    $add$ptr$us = (($in$addr$033$us) + ($cond)|0);
    $cmp1$us = ($sub8$us|0)<($cond|0);
    if ($cmp1$us) {
     $in$addr$0$lcssa = $add$ptr$us;$inlen$addr$0$lcssa = $sub8$us;
     break;
    } else {
     $in$addr$033$us = $add$ptr$us;$inlen$addr$032$us = $sub8$us;
    }
   }
  }
 } while(0);
 _memcpy(($temp|0),($in$addr$0$lcssa|0),($inlen$addr$0$lcssa|0))|0;
 $inc11 = (($inlen$addr$0$lcssa) + 1)|0;
 $arrayidx12 = (($temp) + ($inlen$addr$0$lcssa)|0);
 HEAP8[$arrayidx12>>0] = 1;
 $add$ptr14 = (($temp) + ($inc11)|0);
 $sub15 = (($cond) - ($inc11))|0;
 _memset(($add$ptr14|0),0,($sub15|0))|0;
 $sub16 = (($cond) + -1)|0;
 $arrayidx17 = (($temp) + ($sub16)|0);
 $18 = HEAP8[$arrayidx17>>0]|0;
 $19 = $18 | -128;
 HEAP8[$arrayidx17>>0] = $19;
 $cmp2027 = ($cond|0)>(7);
 if (!($cmp2027)) {
  _keccakf($st,24);
  _memcpy(($md|0),($st|0),($mdlen|0))|0;
  STACKTOP = sp;return 0;
 }
 $i$128 = 0;
 while(1) {
  $arrayidx24 = (($temp) + ($i$128<<3)|0);
  $20 = $arrayidx24;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $arrayidx25 = (($st) + ($i$128<<3)|0);
  $26 = $arrayidx25;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = $28 ^ $22;
  $33 = $31 ^ $25;
  $34 = $arrayidx25;
  $35 = $34;
  HEAP32[$35>>2] = $32;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = $33;
  $inc28 = (($i$128) + 1)|0;
  $exitcond = ($inc28|0)==($div|0);
  if ($exitcond) {
   break;
  } else {
   $i$128 = $inc28;
  }
 }
 _keccakf($st,24);
 _memcpy(($md|0),($st|0),($mdlen|0))|0;
 STACKTOP = sp;return 0;
}
function _keccak1600($in,$inlen,$md) {
 $in = $in|0;
 $inlen = $inlen|0;
 $md = $md|0;
 var $$pre31 = 0, $$pre32 = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $$pre37 = 0, $$pre38 = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $$pre46 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add$ptr$us$i = 0, $add$ptr14$i = 0, $arrayidx$us$i$1 = 0, $arrayidx$us$i$10 = 0, $arrayidx$us$i$11 = 0, $arrayidx$us$i$12 = 0, $arrayidx$us$i$13 = 0, $arrayidx$us$i$14 = 0;
 var $arrayidx$us$i$15 = 0, $arrayidx$us$i$16 = 0, $arrayidx$us$i$2 = 0, $arrayidx$us$i$3 = 0, $arrayidx$us$i$4 = 0, $arrayidx$us$i$5 = 0, $arrayidx$us$i$6 = 0, $arrayidx$us$i$7 = 0, $arrayidx$us$i$8 = 0, $arrayidx$us$i$9 = 0, $arrayidx12$i = 0, $arrayidx17$i = 0, $arrayidx24$i$1 = 0, $arrayidx24$i$10 = 0, $arrayidx24$i$11 = 0, $arrayidx24$i$12 = 0, $arrayidx24$i$13 = 0, $arrayidx24$i$14 = 0, $arrayidx24$i$15 = 0, $arrayidx24$i$16 = 0;
 var $arrayidx24$i$2 = 0, $arrayidx24$i$3 = 0, $arrayidx24$i$4 = 0, $arrayidx24$i$5 = 0, $arrayidx24$i$6 = 0, $arrayidx24$i$7 = 0, $arrayidx24$i$8 = 0, $arrayidx24$i$9 = 0, $arrayidx25$i$16$pre$phiZZZ2D = 0, $arrayidx5$us$i$16$le = 0, $cmp1$us$i = 0, $cmp131$i = 0, $in$addr$0$lcssa$i = 0, $in$addr$033$us$i = 0, $inc11$i = 0, $inlen$addr$0$lcssa$i = 0, $inlen$addr$032$us$i = 0, $st$i = 0, $sub15$i = 0, $sub8$us$i = 0;
 var $temp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $st$i = sp + 144|0;
 $temp$i = sp;
 _memset(($st$i|0),0,200)|0;
 $cmp131$i = ($inlen|0)<(136);
 $$pre31 = ((($st$i)) + 8|0);
 $$pre32 = ((($st$i)) + 16|0);
 $$pre33 = ((($st$i)) + 24|0);
 $$pre34 = ((($st$i)) + 32|0);
 $$pre35 = ((($st$i)) + 40|0);
 $$pre36 = ((($st$i)) + 48|0);
 $$pre37 = ((($st$i)) + 56|0);
 $$pre38 = ((($st$i)) + 64|0);
 $$pre39 = ((($st$i)) + 72|0);
 $$pre40 = ((($st$i)) + 80|0);
 $$pre41 = ((($st$i)) + 88|0);
 $$pre42 = ((($st$i)) + 96|0);
 $$pre43 = ((($st$i)) + 104|0);
 $$pre44 = ((($st$i)) + 112|0);
 $$pre45 = ((($st$i)) + 120|0);
 $$pre46 = ((($st$i)) + 128|0);
 if ($cmp131$i) {
  $437 = 0;$439 = 0;$451 = 0;$453 = 0;$465 = 0;$467 = 0;$479 = 0;$481 = 0;$493 = 0;$495 = 0;$507 = 0;$509 = 0;$521 = 0;$523 = 0;$535 = 0;$537 = 0;$549 = 0;$551 = 0;$563 = 0;$565 = 0;$577 = 0;$579 = 0;$591 = 0;$593 = 0;$605 = 0;$607 = 0;$619 = 0;$621 = 0;$633 = 0;$635 = 0;$arrayidx25$i$16$pre$phiZZZ2D = $$pre46;$in$addr$0$lcssa$i = $in;$inlen$addr$0$lcssa$i = $inlen;
 } else {
  $105 = 0;$107 = 0;$119 = 0;$121 = 0;$133 = 0;$135 = 0;$147 = 0;$149 = 0;$161 = 0;$163 = 0;$175 = 0;$177 = 0;$189 = 0;$191 = 0;$203 = 0;$205 = 0;$21 = 0;$217 = 0;$219 = 0;$23 = 0;$35 = 0;$37 = 0;$49 = 0;$51 = 0;$63 = 0;$65 = 0;$7 = 0;$77 = 0;$79 = 0;$9 = 0;$91 = 0;$93 = 0;$in$addr$033$us$i = $in;$inlen$addr$032$us$i = $inlen;
  while(1) {
   $0 = $in$addr$033$us$i;
   $1 = $0;
   $2 = HEAP32[$1>>2]|0;
   $3 = (($0) + 4)|0;
   $4 = $3;
   $5 = HEAP32[$4>>2]|0;
   $6 = $7 ^ $2;
   $8 = $9 ^ $5;
   $10 = $st$i;
   $11 = $10;
   HEAP32[$11>>2] = $6;
   $12 = (($10) + 4)|0;
   $13 = $12;
   HEAP32[$13>>2] = $8;
   $arrayidx$us$i$1 = ((($in$addr$033$us$i)) + 8|0);
   $14 = $arrayidx$us$i$1;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($14) + 4)|0;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = $21 ^ $16;
   $22 = $23 ^ $19;
   $24 = $$pre31;
   $25 = $24;
   HEAP32[$25>>2] = $20;
   $26 = (($24) + 4)|0;
   $27 = $26;
   HEAP32[$27>>2] = $22;
   $arrayidx$us$i$2 = ((($in$addr$033$us$i)) + 16|0);
   $28 = $arrayidx$us$i$2;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 4)|0;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = $35 ^ $30;
   $36 = $37 ^ $33;
   $38 = $$pre32;
   $39 = $38;
   HEAP32[$39>>2] = $34;
   $40 = (($38) + 4)|0;
   $41 = $40;
   HEAP32[$41>>2] = $36;
   $arrayidx$us$i$3 = ((($in$addr$033$us$i)) + 24|0);
   $42 = $arrayidx$us$i$3;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = $49 ^ $44;
   $50 = $51 ^ $47;
   $52 = $$pre33;
   $53 = $52;
   HEAP32[$53>>2] = $48;
   $54 = (($52) + 4)|0;
   $55 = $54;
   HEAP32[$55>>2] = $50;
   $arrayidx$us$i$4 = ((($in$addr$033$us$i)) + 32|0);
   $56 = $arrayidx$us$i$4;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = (($56) + 4)|0;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = $63 ^ $58;
   $64 = $65 ^ $61;
   $66 = $$pre34;
   $67 = $66;
   HEAP32[$67>>2] = $62;
   $68 = (($66) + 4)|0;
   $69 = $68;
   HEAP32[$69>>2] = $64;
   $arrayidx$us$i$5 = ((($in$addr$033$us$i)) + 40|0);
   $70 = $arrayidx$us$i$5;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = (($70) + 4)|0;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = $77 ^ $72;
   $78 = $79 ^ $75;
   $80 = $$pre35;
   $81 = $80;
   HEAP32[$81>>2] = $76;
   $82 = (($80) + 4)|0;
   $83 = $82;
   HEAP32[$83>>2] = $78;
   $arrayidx$us$i$6 = ((($in$addr$033$us$i)) + 48|0);
   $84 = $arrayidx$us$i$6;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $87 = (($84) + 4)|0;
   $88 = $87;
   $89 = HEAP32[$88>>2]|0;
   $90 = $91 ^ $86;
   $92 = $93 ^ $89;
   $94 = $$pre36;
   $95 = $94;
   HEAP32[$95>>2] = $90;
   $96 = (($94) + 4)|0;
   $97 = $96;
   HEAP32[$97>>2] = $92;
   $arrayidx$us$i$7 = ((($in$addr$033$us$i)) + 56|0);
   $98 = $arrayidx$us$i$7;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = (($98) + 4)|0;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = $105 ^ $100;
   $106 = $107 ^ $103;
   $108 = $$pre37;
   $109 = $108;
   HEAP32[$109>>2] = $104;
   $110 = (($108) + 4)|0;
   $111 = $110;
   HEAP32[$111>>2] = $106;
   $arrayidx$us$i$8 = ((($in$addr$033$us$i)) + 64|0);
   $112 = $arrayidx$us$i$8;
   $113 = $112;
   $114 = HEAP32[$113>>2]|0;
   $115 = (($112) + 4)|0;
   $116 = $115;
   $117 = HEAP32[$116>>2]|0;
   $118 = $119 ^ $114;
   $120 = $121 ^ $117;
   $122 = $$pre38;
   $123 = $122;
   HEAP32[$123>>2] = $118;
   $124 = (($122) + 4)|0;
   $125 = $124;
   HEAP32[$125>>2] = $120;
   $arrayidx$us$i$9 = ((($in$addr$033$us$i)) + 72|0);
   $126 = $arrayidx$us$i$9;
   $127 = $126;
   $128 = HEAP32[$127>>2]|0;
   $129 = (($126) + 4)|0;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = $133 ^ $128;
   $134 = $135 ^ $131;
   $136 = $$pre39;
   $137 = $136;
   HEAP32[$137>>2] = $132;
   $138 = (($136) + 4)|0;
   $139 = $138;
   HEAP32[$139>>2] = $134;
   $arrayidx$us$i$10 = ((($in$addr$033$us$i)) + 80|0);
   $140 = $arrayidx$us$i$10;
   $141 = $140;
   $142 = HEAP32[$141>>2]|0;
   $143 = (($140) + 4)|0;
   $144 = $143;
   $145 = HEAP32[$144>>2]|0;
   $146 = $147 ^ $142;
   $148 = $149 ^ $145;
   $150 = $$pre40;
   $151 = $150;
   HEAP32[$151>>2] = $146;
   $152 = (($150) + 4)|0;
   $153 = $152;
   HEAP32[$153>>2] = $148;
   $arrayidx$us$i$11 = ((($in$addr$033$us$i)) + 88|0);
   $154 = $arrayidx$us$i$11;
   $155 = $154;
   $156 = HEAP32[$155>>2]|0;
   $157 = (($154) + 4)|0;
   $158 = $157;
   $159 = HEAP32[$158>>2]|0;
   $160 = $161 ^ $156;
   $162 = $163 ^ $159;
   $164 = $$pre41;
   $165 = $164;
   HEAP32[$165>>2] = $160;
   $166 = (($164) + 4)|0;
   $167 = $166;
   HEAP32[$167>>2] = $162;
   $arrayidx$us$i$12 = ((($in$addr$033$us$i)) + 96|0);
   $168 = $arrayidx$us$i$12;
   $169 = $168;
   $170 = HEAP32[$169>>2]|0;
   $171 = (($168) + 4)|0;
   $172 = $171;
   $173 = HEAP32[$172>>2]|0;
   $174 = $175 ^ $170;
   $176 = $177 ^ $173;
   $178 = $$pre42;
   $179 = $178;
   HEAP32[$179>>2] = $174;
   $180 = (($178) + 4)|0;
   $181 = $180;
   HEAP32[$181>>2] = $176;
   $arrayidx$us$i$13 = ((($in$addr$033$us$i)) + 104|0);
   $182 = $arrayidx$us$i$13;
   $183 = $182;
   $184 = HEAP32[$183>>2]|0;
   $185 = (($182) + 4)|0;
   $186 = $185;
   $187 = HEAP32[$186>>2]|0;
   $188 = $189 ^ $184;
   $190 = $191 ^ $187;
   $192 = $$pre43;
   $193 = $192;
   HEAP32[$193>>2] = $188;
   $194 = (($192) + 4)|0;
   $195 = $194;
   HEAP32[$195>>2] = $190;
   $arrayidx$us$i$14 = ((($in$addr$033$us$i)) + 112|0);
   $196 = $arrayidx$us$i$14;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $202 = $203 ^ $198;
   $204 = $205 ^ $201;
   $206 = $$pre44;
   $207 = $206;
   HEAP32[$207>>2] = $202;
   $208 = (($206) + 4)|0;
   $209 = $208;
   HEAP32[$209>>2] = $204;
   $arrayidx$us$i$15 = ((($in$addr$033$us$i)) + 120|0);
   $210 = $arrayidx$us$i$15;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = $217 ^ $212;
   $218 = $219 ^ $215;
   $220 = $$pre45;
   $221 = $220;
   HEAP32[$221>>2] = $216;
   $222 = (($220) + 4)|0;
   $223 = $222;
   HEAP32[$223>>2] = $218;
   $arrayidx$us$i$16 = ((($in$addr$033$us$i)) + 128|0);
   $224 = $arrayidx$us$i$16;
   $225 = $224;
   $226 = HEAP32[$225>>2]|0;
   $227 = (($224) + 4)|0;
   $228 = $227;
   $229 = HEAP32[$228>>2]|0;
   $230 = $$pre46;
   $231 = $230;
   $232 = HEAP32[$231>>2]|0;
   $233 = (($230) + 4)|0;
   $234 = $233;
   $235 = HEAP32[$234>>2]|0;
   $236 = $232 ^ $226;
   $237 = $235 ^ $229;
   $238 = $$pre46;
   $239 = $238;
   HEAP32[$239>>2] = $236;
   $240 = (($238) + 4)|0;
   $241 = $240;
   HEAP32[$241>>2] = $237;
   _keccakf($st$i,24);
   $sub8$us$i = (($inlen$addr$032$us$i) + -136)|0;
   $add$ptr$us$i = ((($in$addr$033$us$i)) + 136|0);
   $cmp1$us$i = ($inlen$addr$032$us$i|0)<(272);
   if ($cmp1$us$i) {
    break;
   }
   $242 = $st$i;
   $243 = $242;
   $244 = HEAP32[$243>>2]|0;
   $245 = (($242) + 4)|0;
   $246 = $245;
   $247 = HEAP32[$246>>2]|0;
   $248 = $$pre31;
   $249 = $248;
   $250 = HEAP32[$249>>2]|0;
   $251 = (($248) + 4)|0;
   $252 = $251;
   $253 = HEAP32[$252>>2]|0;
   $254 = $$pre32;
   $255 = $254;
   $256 = HEAP32[$255>>2]|0;
   $257 = (($254) + 4)|0;
   $258 = $257;
   $259 = HEAP32[$258>>2]|0;
   $260 = $$pre33;
   $261 = $260;
   $262 = HEAP32[$261>>2]|0;
   $263 = (($260) + 4)|0;
   $264 = $263;
   $265 = HEAP32[$264>>2]|0;
   $266 = $$pre34;
   $267 = $266;
   $268 = HEAP32[$267>>2]|0;
   $269 = (($266) + 4)|0;
   $270 = $269;
   $271 = HEAP32[$270>>2]|0;
   $272 = $$pre35;
   $273 = $272;
   $274 = HEAP32[$273>>2]|0;
   $275 = (($272) + 4)|0;
   $276 = $275;
   $277 = HEAP32[$276>>2]|0;
   $278 = $$pre36;
   $279 = $278;
   $280 = HEAP32[$279>>2]|0;
   $281 = (($278) + 4)|0;
   $282 = $281;
   $283 = HEAP32[$282>>2]|0;
   $284 = $$pre37;
   $285 = $284;
   $286 = HEAP32[$285>>2]|0;
   $287 = (($284) + 4)|0;
   $288 = $287;
   $289 = HEAP32[$288>>2]|0;
   $290 = $$pre38;
   $291 = $290;
   $292 = HEAP32[$291>>2]|0;
   $293 = (($290) + 4)|0;
   $294 = $293;
   $295 = HEAP32[$294>>2]|0;
   $296 = $$pre39;
   $297 = $296;
   $298 = HEAP32[$297>>2]|0;
   $299 = (($296) + 4)|0;
   $300 = $299;
   $301 = HEAP32[$300>>2]|0;
   $302 = $$pre40;
   $303 = $302;
   $304 = HEAP32[$303>>2]|0;
   $305 = (($302) + 4)|0;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = $$pre41;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = (($308) + 4)|0;
   $312 = $311;
   $313 = HEAP32[$312>>2]|0;
   $314 = $$pre42;
   $315 = $314;
   $316 = HEAP32[$315>>2]|0;
   $317 = (($314) + 4)|0;
   $318 = $317;
   $319 = HEAP32[$318>>2]|0;
   $320 = $$pre43;
   $321 = $320;
   $322 = HEAP32[$321>>2]|0;
   $323 = (($320) + 4)|0;
   $324 = $323;
   $325 = HEAP32[$324>>2]|0;
   $326 = $$pre44;
   $327 = $326;
   $328 = HEAP32[$327>>2]|0;
   $329 = (($326) + 4)|0;
   $330 = $329;
   $331 = HEAP32[$330>>2]|0;
   $332 = $$pre45;
   $333 = $332;
   $334 = HEAP32[$333>>2]|0;
   $335 = (($332) + 4)|0;
   $336 = $335;
   $337 = HEAP32[$336>>2]|0;
   $105 = $286;$107 = $289;$119 = $292;$121 = $295;$133 = $298;$135 = $301;$147 = $304;$149 = $307;$161 = $310;$163 = $313;$175 = $316;$177 = $319;$189 = $322;$191 = $325;$203 = $328;$205 = $331;$21 = $250;$217 = $334;$219 = $337;$23 = $253;$35 = $256;$37 = $259;$49 = $262;$51 = $265;$63 = $268;$65 = $271;$7 = $244;$77 = $274;$79 = $277;$9 = $247;$91 = $280;$93 = $283;$in$addr$033$us$i = $add$ptr$us$i;$inlen$addr$032$us$i = $sub8$us$i;
  }
  $arrayidx5$us$i$16$le = ((($st$i)) + 128|0);
  $338 = $st$i;
  $339 = $338;
  $340 = HEAP32[$339>>2]|0;
  $341 = (($338) + 4)|0;
  $342 = $341;
  $343 = HEAP32[$342>>2]|0;
  $344 = $$pre31;
  $345 = $344;
  $346 = HEAP32[$345>>2]|0;
  $347 = (($344) + 4)|0;
  $348 = $347;
  $349 = HEAP32[$348>>2]|0;
  $350 = $$pre32;
  $351 = $350;
  $352 = HEAP32[$351>>2]|0;
  $353 = (($350) + 4)|0;
  $354 = $353;
  $355 = HEAP32[$354>>2]|0;
  $356 = $$pre33;
  $357 = $356;
  $358 = HEAP32[$357>>2]|0;
  $359 = (($356) + 4)|0;
  $360 = $359;
  $361 = HEAP32[$360>>2]|0;
  $362 = $$pre34;
  $363 = $362;
  $364 = HEAP32[$363>>2]|0;
  $365 = (($362) + 4)|0;
  $366 = $365;
  $367 = HEAP32[$366>>2]|0;
  $368 = $$pre35;
  $369 = $368;
  $370 = HEAP32[$369>>2]|0;
  $371 = (($368) + 4)|0;
  $372 = $371;
  $373 = HEAP32[$372>>2]|0;
  $374 = $$pre36;
  $375 = $374;
  $376 = HEAP32[$375>>2]|0;
  $377 = (($374) + 4)|0;
  $378 = $377;
  $379 = HEAP32[$378>>2]|0;
  $380 = $$pre37;
  $381 = $380;
  $382 = HEAP32[$381>>2]|0;
  $383 = (($380) + 4)|0;
  $384 = $383;
  $385 = HEAP32[$384>>2]|0;
  $386 = $$pre38;
  $387 = $386;
  $388 = HEAP32[$387>>2]|0;
  $389 = (($386) + 4)|0;
  $390 = $389;
  $391 = HEAP32[$390>>2]|0;
  $392 = $$pre39;
  $393 = $392;
  $394 = HEAP32[$393>>2]|0;
  $395 = (($392) + 4)|0;
  $396 = $395;
  $397 = HEAP32[$396>>2]|0;
  $398 = $$pre40;
  $399 = $398;
  $400 = HEAP32[$399>>2]|0;
  $401 = (($398) + 4)|0;
  $402 = $401;
  $403 = HEAP32[$402>>2]|0;
  $404 = $$pre41;
  $405 = $404;
  $406 = HEAP32[$405>>2]|0;
  $407 = (($404) + 4)|0;
  $408 = $407;
  $409 = HEAP32[$408>>2]|0;
  $410 = $$pre42;
  $411 = $410;
  $412 = HEAP32[$411>>2]|0;
  $413 = (($410) + 4)|0;
  $414 = $413;
  $415 = HEAP32[$414>>2]|0;
  $416 = $$pre43;
  $417 = $416;
  $418 = HEAP32[$417>>2]|0;
  $419 = (($416) + 4)|0;
  $420 = $419;
  $421 = HEAP32[$420>>2]|0;
  $422 = $$pre44;
  $423 = $422;
  $424 = HEAP32[$423>>2]|0;
  $425 = (($422) + 4)|0;
  $426 = $425;
  $427 = HEAP32[$426>>2]|0;
  $437 = $340;$439 = $343;$451 = $346;$453 = $349;$465 = $352;$467 = $355;$479 = $358;$481 = $361;$493 = $364;$495 = $367;$507 = $370;$509 = $373;$521 = $376;$523 = $379;$535 = $382;$537 = $385;$549 = $388;$551 = $391;$563 = $394;$565 = $397;$577 = $400;$579 = $403;$591 = $406;$593 = $409;$605 = $412;$607 = $415;$619 = $418;$621 = $421;$633 = $424;$635 = $427;$arrayidx25$i$16$pre$phiZZZ2D = $arrayidx5$us$i$16$le;$in$addr$0$lcssa$i = $add$ptr$us$i;$inlen$addr$0$lcssa$i = $sub8$us$i;
 }
 _memcpy(($temp$i|0),($in$addr$0$lcssa$i|0),($inlen$addr$0$lcssa$i|0))|0;
 $inc11$i = (($inlen$addr$0$lcssa$i) + 1)|0;
 $arrayidx12$i = (($temp$i) + ($inlen$addr$0$lcssa$i)|0);
 HEAP8[$arrayidx12$i>>0] = 1;
 $add$ptr14$i = (($temp$i) + ($inc11$i)|0);
 $sub15$i = (135 - ($inlen$addr$0$lcssa$i))|0;
 _memset(($add$ptr14$i|0),0,($sub15$i|0))|0;
 $arrayidx17$i = ((($temp$i)) + 135|0);
 $428 = HEAP8[$arrayidx17$i>>0]|0;
 $429 = $428 | -128;
 HEAP8[$arrayidx17$i>>0] = $429;
 $430 = $temp$i;
 $431 = $430;
 $432 = HEAP32[$431>>2]|0;
 $433 = (($430) + 4)|0;
 $434 = $433;
 $435 = HEAP32[$434>>2]|0;
 $436 = $437 ^ $432;
 $438 = $439 ^ $435;
 $440 = $st$i;
 $441 = $440;
 HEAP32[$441>>2] = $436;
 $442 = (($440) + 4)|0;
 $443 = $442;
 HEAP32[$443>>2] = $438;
 $arrayidx24$i$1 = ((($temp$i)) + 8|0);
 $444 = $arrayidx24$i$1;
 $445 = $444;
 $446 = HEAP32[$445>>2]|0;
 $447 = (($444) + 4)|0;
 $448 = $447;
 $449 = HEAP32[$448>>2]|0;
 $450 = $451 ^ $446;
 $452 = $453 ^ $449;
 $454 = $$pre31;
 $455 = $454;
 HEAP32[$455>>2] = $450;
 $456 = (($454) + 4)|0;
 $457 = $456;
 HEAP32[$457>>2] = $452;
 $arrayidx24$i$2 = ((($temp$i)) + 16|0);
 $458 = $arrayidx24$i$2;
 $459 = $458;
 $460 = HEAP32[$459>>2]|0;
 $461 = (($458) + 4)|0;
 $462 = $461;
 $463 = HEAP32[$462>>2]|0;
 $464 = $465 ^ $460;
 $466 = $467 ^ $463;
 $468 = $$pre32;
 $469 = $468;
 HEAP32[$469>>2] = $464;
 $470 = (($468) + 4)|0;
 $471 = $470;
 HEAP32[$471>>2] = $466;
 $arrayidx24$i$3 = ((($temp$i)) + 24|0);
 $472 = $arrayidx24$i$3;
 $473 = $472;
 $474 = HEAP32[$473>>2]|0;
 $475 = (($472) + 4)|0;
 $476 = $475;
 $477 = HEAP32[$476>>2]|0;
 $478 = $479 ^ $474;
 $480 = $481 ^ $477;
 $482 = $$pre33;
 $483 = $482;
 HEAP32[$483>>2] = $478;
 $484 = (($482) + 4)|0;
 $485 = $484;
 HEAP32[$485>>2] = $480;
 $arrayidx24$i$4 = ((($temp$i)) + 32|0);
 $486 = $arrayidx24$i$4;
 $487 = $486;
 $488 = HEAP32[$487>>2]|0;
 $489 = (($486) + 4)|0;
 $490 = $489;
 $491 = HEAP32[$490>>2]|0;
 $492 = $493 ^ $488;
 $494 = $495 ^ $491;
 $496 = $$pre34;
 $497 = $496;
 HEAP32[$497>>2] = $492;
 $498 = (($496) + 4)|0;
 $499 = $498;
 HEAP32[$499>>2] = $494;
 $arrayidx24$i$5 = ((($temp$i)) + 40|0);
 $500 = $arrayidx24$i$5;
 $501 = $500;
 $502 = HEAP32[$501>>2]|0;
 $503 = (($500) + 4)|0;
 $504 = $503;
 $505 = HEAP32[$504>>2]|0;
 $506 = $507 ^ $502;
 $508 = $509 ^ $505;
 $510 = $$pre35;
 $511 = $510;
 HEAP32[$511>>2] = $506;
 $512 = (($510) + 4)|0;
 $513 = $512;
 HEAP32[$513>>2] = $508;
 $arrayidx24$i$6 = ((($temp$i)) + 48|0);
 $514 = $arrayidx24$i$6;
 $515 = $514;
 $516 = HEAP32[$515>>2]|0;
 $517 = (($514) + 4)|0;
 $518 = $517;
 $519 = HEAP32[$518>>2]|0;
 $520 = $521 ^ $516;
 $522 = $523 ^ $519;
 $524 = $$pre36;
 $525 = $524;
 HEAP32[$525>>2] = $520;
 $526 = (($524) + 4)|0;
 $527 = $526;
 HEAP32[$527>>2] = $522;
 $arrayidx24$i$7 = ((($temp$i)) + 56|0);
 $528 = $arrayidx24$i$7;
 $529 = $528;
 $530 = HEAP32[$529>>2]|0;
 $531 = (($528) + 4)|0;
 $532 = $531;
 $533 = HEAP32[$532>>2]|0;
 $534 = $535 ^ $530;
 $536 = $537 ^ $533;
 $538 = $$pre37;
 $539 = $538;
 HEAP32[$539>>2] = $534;
 $540 = (($538) + 4)|0;
 $541 = $540;
 HEAP32[$541>>2] = $536;
 $arrayidx24$i$8 = ((($temp$i)) + 64|0);
 $542 = $arrayidx24$i$8;
 $543 = $542;
 $544 = HEAP32[$543>>2]|0;
 $545 = (($542) + 4)|0;
 $546 = $545;
 $547 = HEAP32[$546>>2]|0;
 $548 = $549 ^ $544;
 $550 = $551 ^ $547;
 $552 = $$pre38;
 $553 = $552;
 HEAP32[$553>>2] = $548;
 $554 = (($552) + 4)|0;
 $555 = $554;
 HEAP32[$555>>2] = $550;
 $arrayidx24$i$9 = ((($temp$i)) + 72|0);
 $556 = $arrayidx24$i$9;
 $557 = $556;
 $558 = HEAP32[$557>>2]|0;
 $559 = (($556) + 4)|0;
 $560 = $559;
 $561 = HEAP32[$560>>2]|0;
 $562 = $563 ^ $558;
 $564 = $565 ^ $561;
 $566 = $$pre39;
 $567 = $566;
 HEAP32[$567>>2] = $562;
 $568 = (($566) + 4)|0;
 $569 = $568;
 HEAP32[$569>>2] = $564;
 $arrayidx24$i$10 = ((($temp$i)) + 80|0);
 $570 = $arrayidx24$i$10;
 $571 = $570;
 $572 = HEAP32[$571>>2]|0;
 $573 = (($570) + 4)|0;
 $574 = $573;
 $575 = HEAP32[$574>>2]|0;
 $576 = $577 ^ $572;
 $578 = $579 ^ $575;
 $580 = $$pre40;
 $581 = $580;
 HEAP32[$581>>2] = $576;
 $582 = (($580) + 4)|0;
 $583 = $582;
 HEAP32[$583>>2] = $578;
 $arrayidx24$i$11 = ((($temp$i)) + 88|0);
 $584 = $arrayidx24$i$11;
 $585 = $584;
 $586 = HEAP32[$585>>2]|0;
 $587 = (($584) + 4)|0;
 $588 = $587;
 $589 = HEAP32[$588>>2]|0;
 $590 = $591 ^ $586;
 $592 = $593 ^ $589;
 $594 = $$pre41;
 $595 = $594;
 HEAP32[$595>>2] = $590;
 $596 = (($594) + 4)|0;
 $597 = $596;
 HEAP32[$597>>2] = $592;
 $arrayidx24$i$12 = ((($temp$i)) + 96|0);
 $598 = $arrayidx24$i$12;
 $599 = $598;
 $600 = HEAP32[$599>>2]|0;
 $601 = (($598) + 4)|0;
 $602 = $601;
 $603 = HEAP32[$602>>2]|0;
 $604 = $605 ^ $600;
 $606 = $607 ^ $603;
 $608 = $$pre42;
 $609 = $608;
 HEAP32[$609>>2] = $604;
 $610 = (($608) + 4)|0;
 $611 = $610;
 HEAP32[$611>>2] = $606;
 $arrayidx24$i$13 = ((($temp$i)) + 104|0);
 $612 = $arrayidx24$i$13;
 $613 = $612;
 $614 = HEAP32[$613>>2]|0;
 $615 = (($612) + 4)|0;
 $616 = $615;
 $617 = HEAP32[$616>>2]|0;
 $618 = $619 ^ $614;
 $620 = $621 ^ $617;
 $622 = $$pre43;
 $623 = $622;
 HEAP32[$623>>2] = $618;
 $624 = (($622) + 4)|0;
 $625 = $624;
 HEAP32[$625>>2] = $620;
 $arrayidx24$i$14 = ((($temp$i)) + 112|0);
 $626 = $arrayidx24$i$14;
 $627 = $626;
 $628 = HEAP32[$627>>2]|0;
 $629 = (($626) + 4)|0;
 $630 = $629;
 $631 = HEAP32[$630>>2]|0;
 $632 = $633 ^ $628;
 $634 = $635 ^ $631;
 $636 = $$pre44;
 $637 = $636;
 HEAP32[$637>>2] = $632;
 $638 = (($636) + 4)|0;
 $639 = $638;
 HEAP32[$639>>2] = $634;
 $arrayidx24$i$15 = ((($temp$i)) + 120|0);
 $640 = $arrayidx24$i$15;
 $641 = $640;
 $642 = HEAP32[$641>>2]|0;
 $643 = (($640) + 4)|0;
 $644 = $643;
 $645 = HEAP32[$644>>2]|0;
 $646 = $$pre45;
 $647 = $646;
 $648 = HEAP32[$647>>2]|0;
 $649 = (($646) + 4)|0;
 $650 = $649;
 $651 = HEAP32[$650>>2]|0;
 $652 = $648 ^ $642;
 $653 = $651 ^ $645;
 $654 = $$pre45;
 $655 = $654;
 HEAP32[$655>>2] = $652;
 $656 = (($654) + 4)|0;
 $657 = $656;
 HEAP32[$657>>2] = $653;
 $arrayidx24$i$16 = ((($temp$i)) + 128|0);
 $658 = $arrayidx24$i$16;
 $659 = $658;
 $660 = HEAP32[$659>>2]|0;
 $661 = (($658) + 4)|0;
 $662 = $661;
 $663 = HEAP32[$662>>2]|0;
 $664 = $arrayidx25$i$16$pre$phiZZZ2D;
 $665 = $664;
 $666 = HEAP32[$665>>2]|0;
 $667 = (($664) + 4)|0;
 $668 = $667;
 $669 = HEAP32[$668>>2]|0;
 $670 = $666 ^ $660;
 $671 = $669 ^ $663;
 $672 = $arrayidx25$i$16$pre$phiZZZ2D;
 $673 = $672;
 HEAP32[$673>>2] = $670;
 $674 = (($672) + 4)|0;
 $675 = $674;
 HEAP32[$675>>2] = $671;
 _keccakf($st$i,24);
 _memcpy(($md|0),($st$i|0),200)|0;
 STACKTOP = sp;return;
}
function __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($text,$data,$0,$1,$size) {
 $text = $text|0;
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 $size = $size|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add$ptr$i = 0, $add$ptr$i35 = 0, $and = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i22 = 0, $cmp = 0, $cmp$i = 0, $cmp$i23 = 0;
 var $cmp871 = 0, $cond$i = 0, $cond$i$i$i34 = 0, $cond$i44 = 0, $conv$i$i = 0, $conv$i$i42 = 0, $conv15 = 0, $conv20 = 0, $conv2259 = 0, $conv23 = 0, $conv9 = 0, $idxprom$i = 0, $idxprom$i21 = 0, $or60 = 0, $retval$4 = 0, $shl21 = 0, $shr = 0, $shr6 = 0, $tobool$i$i = 0, $tobool$i$i39 = 0;
 var $tobool$i$i3973 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i = ((($text)) + 11|0);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($2<<24>>24)<(0);
 $__size_$i3$i = ((($text)) + 4|0);
 $3 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $2&255;
 $cond$i = $tobool$i$i ? $3 : $conv$i$i;
 $and = $cond$i & 1;
 $cmp = ($and|0)==(0);
 if (!($cmp)) {
  $retval$4 = 0;
  return ($retval$4|0);
 }
 $shr = $cond$i >>> 1;
 $4 = (0)>($1>>>0);
 $5 = ($shr>>>0)>($0>>>0);
 $6 = (0)==($1|0);
 $7 = $6 & $5;
 $8 = $4 | $7;
 if ($8) {
  $retval$4 = 0;
  return ($retval$4|0);
 }
 $cmp871 = ($cond$i>>>0)>(1);
 L7: do {
  if ($cmp871) {
   $15 = 0;$9 = 0;$tobool$i$i3973 = $tobool$i$i;
   while(1) {
    $conv9 = $9 << 1;
    $10 = HEAP32[$text>>2]|0;
    $cond$i$i$i34 = $tobool$i$i3973 ? $10 : $text;
    $add$ptr$i35 = (($cond$i$i$i34) + ($conv9)|0);
    $11 = HEAP8[$add$ptr$i35>>0]|0;
    $idxprom$i21 = $11&255;
    $arrayidx$i22 = (32672 + ($idxprom$i21)|0);
    $12 = HEAP8[$arrayidx$i22>>0]|0;
    $cmp$i23 = ($12&255)>(15);
    if ($cmp$i23) {
     $retval$4 = 0;
     label = 9;
     break;
    }
    $conv15 = $conv9 | 1;
    $add$ptr$i = (($cond$i$i$i34) + ($conv15)|0);
    $13 = HEAP8[$add$ptr$i>>0]|0;
    $idxprom$i = $13&255;
    $arrayidx$i = (32672 + ($idxprom$i)|0);
    $14 = HEAP8[$arrayidx$i>>0]|0;
    $cmp$i = ($14&255)>(15);
    if ($cmp$i) {
     $retval$4 = 0;
     label = 9;
     break;
    }
    $conv20 = $12&255;
    $shl21 = $conv20 << 4;
    $conv2259 = $14&255;
    $or60 = $shl21 | $conv2259;
    $conv23 = $or60&255;
    $arrayidx = (($data) + ($9)|0);
    HEAP8[$arrayidx>>0] = $conv23;
    $16 = (_i64Add(($9|0),($15|0),1,0)|0);
    $17 = (getTempRet0() | 0);
    $18 = HEAP8[$__size_$i$i>>0]|0;
    $tobool$i$i39 = ($18<<24>>24)<(0);
    $19 = HEAP32[$__size_$i3$i>>2]|0;
    $conv$i$i42 = $18&255;
    $cond$i44 = $tobool$i$i39 ? $19 : $conv$i$i42;
    $shr6 = $cond$i44 >>> 1;
    $20 = ($17>>>0)<(0);
    $21 = ($16>>>0)<($shr6>>>0);
    $22 = ($17|0)==(0);
    $23 = $22 & $21;
    $24 = $20 | $23;
    if ($24) {
     $15 = $17;$9 = $16;$tobool$i$i3973 = $tobool$i$i39;
    } else {
     $27 = $shr6;$30 = 0;
     break L7;
    }
   }
   if ((label|0) == 9) {
    return ($retval$4|0);
   }
  } else {
   $27 = $shr;$30 = 0;
  }
 } while(0);
 $25 = $size;
 $26 = $25;
 HEAP32[$26>>2] = $27;
 $28 = (($25) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = $30;
 $retval$4 = 1;
 return ($retval$4|0);
}
function __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($agg$result,$text) {
 $agg$result = $agg$result|0;
 $text = $text|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__end_$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__value_$i$i$i$i = 0;
 var $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i46 = 0, $and = 0, $arrayidx$i = 0, $arrayidx$i20 = 0, $arrayidx$i28 = 0, $call$i$i$i$i8$i = 0, $cmp = 0, $cmp$i21 = 0, $cmp$i23 = 0, $cmp$i29 = 0, $cmp350 = 0, $cond$i = 0, $cond$i$i$i = 0, $conv$i$i = 0, $conv12 = 0, $conv16 = 0, $conv17 = 0, $conv4 = 0;
 var $conv9 = 0, $exception = 0, $exception$i = 0, $exception$i30 = 0, $idxprom$i = 0, $idxprom$i27 = 0, $or = 0, $shl10 = 0, $shr = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i$i = ((($text)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__size_$i3$i = ((($text)) + 4|0);
 $1 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $0&255;
 $cond$i = $tobool$i$i ? $1 : $conv$i$i;
 $and = $cond$i & 1;
 $cmp = ($and|0)==(0);
 if (!($cmp)) {
  $exception = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($exception,35845);
  ___cxa_throw(($exception|0),(33912|0),(8|0));
  // unreachable;
 }
 $shr = $cond$i >>> 1;
 HEAP32[$agg$result>>2] = 0;
 $__end_$i$i = ((($agg$result)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__value_$i$i$i$i = ((($agg$result)) + 8|0);
 HEAP32[$__value_$i$i$i$i>>2] = 0;
 $cmp$i23 = ($shr|0)==(0);
 if ($cmp$i23) {
  return;
 }
 $call$i$i$i$i8$i = (__Znwm($shr)|0);
 HEAP32[$agg$result>>2] = $call$i$i$i$i8$i;
 $add$ptr$i$i = (($call$i$i$i$i8$i) + ($shr)|0);
 HEAP32[$__value_$i$i$i$i>>2] = $add$ptr$i$i;
 _memset(($call$i$i$i$i8$i|0),0,($shr|0))|0;
 HEAP32[$__end_$i$i>>2] = $add$ptr$i$i;
 $cmp350 = ($add$ptr$i$i|0)==($call$i$i$i$i8$i|0);
 if ($cmp350) {
  return;
 }
 $$pre = HEAP32[$text>>2]|0;
 $cond$i$i$i = $tobool$i$i ? $$pre : $text;
 $2 = 0;$7 = 0;
 while(1) {
  $conv4 = $2 << 1;
  $add$ptr$i = (($cond$i$i$i) + ($conv4)|0);
  $3 = HEAP8[$add$ptr$i>>0]|0;
  $idxprom$i27 = $3&255;
  $arrayidx$i28 = (32672 + ($idxprom$i27)|0);
  $4 = HEAP8[$arrayidx$i28>>0]|0;
  $cmp$i29 = ($4&255)>(15);
  if ($cmp$i29) {
   label = 7;
   break;
  }
  $conv12 = $conv4 | 1;
  $add$ptr$i46 = (($cond$i$i$i) + ($conv12)|0);
  $5 = HEAP8[$add$ptr$i46>>0]|0;
  $idxprom$i = $5&255;
  $arrayidx$i20 = (32672 + ($idxprom$i)|0);
  $6 = HEAP8[$arrayidx$i20>>0]|0;
  $cmp$i21 = ($6&255)>(15);
  if ($cmp$i21) {
   label = 9;
   break;
  }
  $conv9 = $4&255;
  $shl10 = $conv9 << 4;
  $conv16 = $6&255;
  $or = $shl10 | $conv16;
  $conv17 = $or&255;
  $arrayidx$i = (($call$i$i$i$i8$i) + ($2)|0);
  HEAP8[$arrayidx$i>>0] = $conv17;
  $8 = (_i64Add(($2|0),($7|0),1,0)|0);
  $9 = (getTempRet0() | 0);
  $10 = ($9>>>0)<(0);
  $11 = ($8>>>0)<($shr>>>0);
  $12 = ($9|0)==(0);
  $13 = $12 & $11;
  $14 = $10 | $13;
  if ($14) {
   $2 = $8;$7 = $9;
  } else {
   label = 11;
   break;
  }
 }
 if ((label|0) == 7) {
  $exception$i30 = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($exception$i30,35818);
  ___cxa_throw(($exception$i30|0),(33912|0),(8|0));
  // unreachable;
 }
 else if ((label|0) == 9) {
  $exception$i = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($exception$i,35818);
  ___cxa_throw(($exception$i|0),(33912|0),(8|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  return;
 }
}
function __ZN6Common5toHexEPKvy($agg$result,$data,$0,$1) {
 $agg$result = $agg$result|0;
 $data = $data|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0;
 var $arrayidx1 = 0, $arrayidx5 = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  return;
 }
 $12 = 0;$5 = 0;
 while(1) {
  $arrayidx = (($data) + ($5)|0);
  $6 = HEAP8[$arrayidx>>0]|0;
  $conv = $6&255;
  $7 = $conv >>> 4;
  $arrayidx1 = (35874 + ($7)|0);
  $8 = HEAP8[$arrayidx1>>0]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result,$8);
  $9 = HEAP8[$arrayidx>>0]|0;
  $10 = $9 & 15;
  $and = $10&255;
  $arrayidx5 = (35874 + ($and)|0);
  $11 = HEAP8[$arrayidx5>>0]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result,$11);
  $13 = (_i64Add(($5|0),($12|0),1,0)|0);
  $14 = (getTempRet0() | 0);
  $15 = ($14>>>0)<($1>>>0);
  $16 = ($13>>>0)<($0>>>0);
  $17 = ($14|0)==($1|0);
  $18 = $17 & $16;
  $19 = $15 | $18;
  if ($19) {
   $12 = $14;$5 = $13;
  } else {
   break;
  }
 }
 return;
}
function _tree_hash($hashes,$count,$root_hash) {
 $hashes = $hashes|0;
 $count = $count|0;
 $root_hash = $root_hash|0;
 var $$alloca_mul = 0, $0 = 0, $add = 0, $add30 = 0, $and = 0, $arraydecay = 0, $arraydecay17 = 0, $arraydecay26 = 0, $arraydecay28 = 0, $cmp1445 = 0, $cmp20 = 0, $cmp2043 = 0, $cmp2340 = 0, $cnt$144 = 0, $exitcond = 0, $exitcond50 = 0, $i$147 = 0, $i$242 = 0, $inc = 0, $inc31 = 0;
 var $j$046 = 0, $j$141 = 0, $mul = 0, $mul6 = 0, $mul8 = 0, $neg = 0, $or = 0, $or$1 = 0, $or$2 = 0, $or$3 = 0, $or$4 = 0, $shr = 0, $shr$1 = 0, $shr$2 = 0, $shr$3 = 0, $shr$4 = 0, $shr21 = 0, $shr5 = 0, $sub = 0, $sub7 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 switch ($count|0) {
 case 1:  {
  dest=$root_hash; src=$hashes; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  _cn_fast_hash($hashes,64,$root_hash);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $sub = (($count) + -1)|0;
  $shr = $sub >>> 1;
  $or = $shr | $sub;
  $shr$1 = $or >>> 2;
  $or$1 = $shr$1 | $or;
  $shr$2 = $or$1 >>> 4;
  $or$2 = $shr$2 | $or$1;
  $shr$3 = $or$2 >>> 8;
  $or$3 = $shr$3 | $or$2;
  $shr$4 = $or$3 >>> 16;
  $or$4 = $shr$4 | $or$3;
  $shr5 = $or$4 >>> 1;
  $neg = $shr5 ^ -1;
  $and = $or$4 & $neg;
  $mul = $and << 5;
  $$alloca_mul = $mul;
  $0 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
  $mul6 = $and << 1;
  $sub7 = (($mul6) - ($count))|0;
  $mul8 = $sub7 << 5;
  _memcpy(($0|0),($hashes|0),($mul8|0))|0;
  $cmp1445 = ($sub7>>>0)<($and>>>0);
  if ($cmp1445) {
   $i$147 = $sub7;$j$046 = $sub7;
   while(1) {
    $arraydecay = (($hashes) + ($i$147<<5)|0);
    $arraydecay17 = (($0) + ($j$046<<5)|0);
    _cn_fast_hash($arraydecay,64,$arraydecay17);
    $add = (($i$147) + 2)|0;
    $inc = (($j$046) + 1)|0;
    $exitcond50 = ($inc|0)==($and|0);
    if ($exitcond50) {
     break;
    } else {
     $i$147 = $add;$j$046 = $inc;
    }
   }
  }
  $cmp2043 = ($and>>>0)>(2);
  if ($cmp2043) {
   $cnt$144 = $and;
   while(1) {
    $shr21 = $cnt$144 >>> 1;
    $cmp2340 = ($shr21|0)==(0);
    if (!($cmp2340)) {
     $i$242 = 0;$j$141 = 0;
     while(1) {
      $arraydecay26 = (($0) + ($i$242<<5)|0);
      $arraydecay28 = (($0) + ($j$141<<5)|0);
      _cn_fast_hash($arraydecay26,64,$arraydecay28);
      $add30 = (($i$242) + 2)|0;
      $inc31 = (($j$141) + 1)|0;
      $exitcond = ($inc31|0)==($shr21|0);
      if ($exitcond) {
       break;
      } else {
       $i$242 = $add30;$j$141 = $inc31;
      }
     }
    }
    $cmp20 = ($cnt$144>>>0)>(5);
    if ($cmp20) {
     $cnt$144 = $shr21;
    } else {
     break;
    }
   }
  }
  _cn_fast_hash($0,64,$root_hash);
  STACKTOP = sp;return;
 }
 }
}
function _tree_branch($hashes,$count,$branch) {
 $hashes = $hashes|0;
 $count = $count|0;
 $branch = $branch|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $add = 0, $add$1 = 0, $add$2 = 0, $add$3 = 0, $add$4 = 0, $add19 = 0, $add36 = 0, $arraydecay = 0, $arraydecay17 = 0, $arraydecay24 = 0, $arraydecay32 = 0, $arraydecay34 = 0, $cmp1 = 0, $cmp1$1 = 0, $cmp1$2 = 0, $cmp1$3 = 0, $cmp1$4 = 0;
 var $cmp1444 = 0, $cmp21 = 0, $cmp2141 = 0, $cmp2938 = 0, $cnt$242 = 0, $dec = 0, $depth$243 = 0, $exitcond = 0, $exitcond50 = 0, $i$146 = 0, $i$240 = 0, $inc = 0, $inc37 = 0, $j$045 = 0, $j$139 = 0, $mul = 0, $mul3 = 0, $mul6 = 0, $not$cmp1$4 = 0, $shl$1 = 0;
 var $shl$2 = 0, $shl$3 = 0, $shl$4 = 0, $shr22 = 0, $spec$select = 0, $spec$select$1 = 0, $spec$select$2 = 0, $spec$select$3 = 0, $spec$select$4 = 0, $spec$select37$1 = 0, $spec$select37$2 = 0, $spec$select37$3 = 0, $spec$select37$4 = 0, $sub = 0, $sub28 = 0, $sub4 = 0, $sub5 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 $cmp1 = ($count>>>0)<(65536);
 $spec$select = $cmp1 ? 1 : 65536;
 $add = $cmp1 ? 0 : 16;
 $shl$1 = $spec$select << 8;
 $cmp1$1 = ($shl$1>>>0)>($count>>>0);
 $spec$select$1 = $cmp1$1 ? $spec$select : $shl$1;
 $add$1 = $cmp1$1 ? 0 : 8;
 $spec$select37$1 = $add$1 | $add;
 $shl$2 = $spec$select$1 << 4;
 $cmp1$2 = ($shl$2>>>0)>($count>>>0);
 $spec$select$2 = $cmp1$2 ? $spec$select$1 : $shl$2;
 $add$2 = $cmp1$2 ? 0 : 4;
 $spec$select37$2 = $add$2 | $spec$select37$1;
 $shl$3 = $spec$select$2 << 2;
 $cmp1$3 = ($shl$3>>>0)>($count>>>0);
 $spec$select$3 = $cmp1$3 ? $spec$select$2 : $shl$3;
 $add$3 = $cmp1$3 ? 0 : 2;
 $spec$select37$3 = $add$3 | $spec$select37$2;
 $shl$4 = $spec$select$3 << 1;
 $cmp1$4 = ($shl$4>>>0)>($count>>>0);
 $spec$select$4 = $cmp1$4 ? $spec$select$3 : $shl$4;
 $not$cmp1$4 = $cmp1$4 ^ 1;
 $add$4 = $not$cmp1$4&1;
 $spec$select37$4 = $spec$select37$3 | $add$4;
 $sub = (($spec$select$4) + -1)|0;
 $mul = $sub << 5;
 $$alloca_mul = $mul;
 $0 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $1 = ((($hashes)) + 32|0);
 $mul3 = $spec$select$4 << 1;
 $sub4 = (($mul3) - ($count))|0;
 $sub5 = (($sub4) + -1)|0;
 $mul6 = $sub5 << 5;
 _memcpy(($0|0),($1|0),($mul6|0))|0;
 $cmp1444 = ($sub5>>>0)<($sub>>>0);
 if ($cmp1444) {
  $i$146 = $sub4;$j$045 = $sub5;
  while(1) {
   $arraydecay = (($hashes) + ($i$146<<5)|0);
   $arraydecay17 = (($0) + ($j$045<<5)|0);
   _cn_fast_hash($arraydecay,64,$arraydecay17);
   $add19 = (($i$146) + 2)|0;
   $inc = (($j$045) + 1)|0;
   $exitcond50 = ($inc|0)==($sub|0);
   if ($exitcond50) {
    break;
   } else {
    $i$146 = $add19;$j$045 = $inc;
   }
  }
 }
 $cmp2141 = ($spec$select37$4|0)==(0);
 if ($cmp2141) {
  STACKTOP = sp;return;
 }
 $cnt$242 = $spec$select$4;$depth$243 = $spec$select37$4;
 while(1) {
  $shr22 = $cnt$242 >>> 1;
  $dec = (($depth$243) + -1)|0;
  $arraydecay24 = (($branch) + ($dec<<5)|0);
  dest=$arraydecay24; src=$0; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $sub28 = (($shr22) + -1)|0;
  $cmp2938 = ($sub28|0)==(0);
  if (!($cmp2938)) {
   $i$240 = 1;$j$139 = 0;
   while(1) {
    $arraydecay32 = (($0) + ($i$240<<5)|0);
    $arraydecay34 = (($0) + ($j$139<<5)|0);
    _cn_fast_hash($arraydecay32,64,$arraydecay34);
    $add36 = (($i$240) + 2)|0;
    $inc37 = (($j$139) + 1)|0;
    $exitcond = ($inc37|0)==($sub28|0);
    if ($exitcond) {
     break;
    } else {
     $i$240 = $add36;$j$139 = $inc37;
    }
   }
  }
  $cmp21 = ($dec|0)==(0);
  if ($cmp21) {
   break;
  } else {
   $cnt$242 = $shr22;$depth$243 = $dec;
  }
 }
 STACKTOP = sp;return;
}
function _tree_hash_from_branch($branch,$depth,$leaf,$path,$root_hash) {
 $branch = $branch|0;
 $depth = $depth|0;
 $leaf = $leaf|0;
 $path = $path|0;
 $root_hash = $root_hash|0;
 var $0 = 0, $1 = 0, $and = 0, $and$peel = 0, $and2 = 0, $and2$peel = 0, $arraydecay13 = 0, $arraydecay20 = 0, $arraydecay20$peel = 0, $arraydecay20$us = 0, $arraydecay20$us$peel = 0, $arrayidx = 0, $arrayidx$peel = 0, $branch_path$0 = 0, $branch_path$0$peel = 0, $buffer = 0, $cmp = 0, $cmp1 = 0, $cmp1$peel = 0, $cmp1$us = 0;
 var $cmp1$us$peel = 0, $cmp3 = 0, $cmp3$peel = 0, $conv = 0, $conv$peel = 0, $dec = 0, $dec$us = 0, $dec$us$peel = 0, $depth$addr$014 = 0, $depth$addr$014$us = 0, $leaf_path$0 = 0, $leaf_path$0$peel = 0, $shl = 0, $shl$peel = 0, $shr = 0, $shr$peel = 0, $tobool = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $buffer = sp;
 $cmp = ($depth|0)==(0);
 if ($cmp) {
  dest=$root_hash; src=$leaf; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $tobool = ($path|0)==(0|0);
 $arraydecay13 = ((($buffer)) + 32|0);
 $dec$us$peel = (($depth) + -1)|0;
 if ($tobool) {
  dest=$buffer; src=$leaf; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $arraydecay20$us$peel = (($branch) + ($dec$us$peel<<5)|0);
  dest=$arraydecay13; src=$arraydecay20$us$peel; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $cmp1$us$peel = ($dec$us$peel|0)==(0);
  if (!($cmp1$us$peel)) {
   $depth$addr$014$us = $dec$us$peel;
   while(1) {
    $dec$us = (($depth$addr$014$us) + -1)|0;
    _cn_fast_hash($buffer,64,$buffer);
    $arraydecay20$us = (($branch) + ($dec$us<<5)|0);
    dest=$arraydecay13; src=$arraydecay20$us; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $cmp1$us = ($dec$us|0)==(0);
    if ($cmp1$us) {
     break;
    } else {
     $depth$addr$014$us = $dec$us;
    }
   }
  }
 } else {
  $shr$peel = $dec$us$peel >>> 3;
  $arrayidx$peel = (($path) + ($shr$peel)|0);
  $0 = HEAP8[$arrayidx$peel>>0]|0;
  $conv$peel = $0 << 24 >> 24;
  $and$peel = $dec$us$peel & 7;
  $shl$peel = 1 << $and$peel;
  $and2$peel = $shl$peel & $conv$peel;
  $cmp3$peel = ($and2$peel|0)==(0);
  $branch_path$0$peel = $cmp3$peel ? $arraydecay13 : $buffer;
  $leaf_path$0$peel = $cmp3$peel ? $buffer : $arraydecay13;
  dest=$leaf_path$0$peel; src=$leaf; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $arraydecay20$peel = (($branch) + ($dec$us$peel<<5)|0);
  dest=$branch_path$0$peel; src=$arraydecay20$peel; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $cmp1$peel = ($dec$us$peel|0)==(0);
  if (!($cmp1$peel)) {
   $depth$addr$014 = $dec$us$peel;
   while(1) {
    $dec = (($depth$addr$014) + -1)|0;
    $shr = $dec >>> 3;
    $arrayidx = (($path) + ($shr)|0);
    $1 = HEAP8[$arrayidx>>0]|0;
    $conv = $1 << 24 >> 24;
    $and = $dec & 7;
    $shl = 1 << $and;
    $and2 = $shl & $conv;
    $cmp3 = ($and2|0)==(0);
    $branch_path$0 = $cmp3 ? $arraydecay13 : $buffer;
    $leaf_path$0 = $cmp3 ? $buffer : $arraydecay13;
    _cn_fast_hash($buffer,64,$leaf_path$0);
    $arraydecay20 = (($branch) + ($dec<<5)|0);
    dest=$branch_path$0; src=$arraydecay20; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $cmp1 = ($dec|0)==(0);
    if ($cmp1) {
     break;
    } else {
     $depth$addr$014 = $dec;
    }
   }
  }
 }
 _cn_fast_hash($buffer,64,$root_hash);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_void((33992|0),(35891|0));
 __embind_register_bool((34008|0),(35896|0),1,1,0);
 __embind_register_integer((34016|0),(35901|0),1,-128,127);
 __embind_register_integer((34032|0),(35906|0),1,-128,127);
 __embind_register_integer((34024|0),(35918|0),1,0,255);
 __embind_register_integer((34040|0),(35932|0),2,-32768,32767);
 __embind_register_integer((34048|0),(35938|0),2,0,65535);
 __embind_register_integer((34056|0),(35953|0),4,-2147483648,2147483647);
 __embind_register_integer((34064|0),(35957|0),4,0,-1);
 __embind_register_integer((34072|0),(35970|0),4,-2147483648,2147483647);
 __embind_register_integer((34080|0),(35975|0),4,0,-1);
 __embind_register_float((34088|0),(35989|0),4);
 __embind_register_float((34096|0),(35995|0),8);
 __embind_register_std_string((33416|0),(36002|0));
 __embind_register_std_string((33544|0),(36014|0));
 __embind_register_std_wstring((33568|0),4,(36047|0));
 __embind_register_emval((33536|0),(36060|0));
 __embind_register_memory_view((33592|0),0,(36076|0));
 __embind_register_memory_view((33600|0),0,(36106|0));
 __embind_register_memory_view((33608|0),1,(36143|0));
 __embind_register_memory_view((33616|0),2,(36182|0));
 __embind_register_memory_view((33624|0),3,(36213|0));
 __embind_register_memory_view((33632|0),4,(36253|0));
 __embind_register_memory_view((33640|0),5,(36282|0));
 __embind_register_memory_view((33648|0),4,(36320|0));
 __embind_register_memory_view((33656|0),5,(36350|0));
 __embind_register_memory_view((33600|0),0,(36389|0));
 __embind_register_memory_view((33608|0),1,(36421|0));
 __embind_register_memory_view((33616|0),2,(36454|0));
 __embind_register_memory_view((33624|0),3,(36487|0));
 __embind_register_memory_view((33632|0),4,(36521|0));
 __embind_register_memory_view((33640|0),5,(36554|0));
 __embind_register_memory_view((33664|0),6,(36588|0));
 __embind_register_memory_view((33672|0),7,(36619|0));
 __embind_register_memory_view((33680|0),7,(36651|0));
 return;
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $0 = 0, $__type_name$i = 0, $call1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__type_name$i = ((($ti)) + 4|0);
 $0 = HEAP32[$__type_name$i>>2]|0;
 $call1 = (___strdup($0)|0);
 return ($call1|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call2 = 0, $fd = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $call = (_dummy_731($0)|0);
 HEAP32[$vararg_buffer>>2] = $call;
 $call1 = (___syscall6(6,($vararg_buffer|0))|0);
 $call2 = (___syscall_ret($call1)|0);
 STACKTOP = sp;return ($call2|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr32 = 0, $buf8 = 0, $buf_size = 0, $call = 0;
 var $call40 = 0, $call7 = 0, $call741 = 0, $call746 = 0, $cmp = 0, $cmp12 = 0, $cmp17 = 0, $cmp24 = 0, $cmp42 = 0, $cnt$0 = 0, $dec = 0, $fd = 0, $incdec$ptr = 0, $iov$043 = 0, $iov$1 = 0, $iov_base2 = 0, $iov_len = 0, $iov_len19 = 0, $iov_len23 = 0, $iov_len3 = 0;
 var $iov_len36 = 0, $iovcnt$045 = 0, $iovcnt$1 = 0, $iovs = 0, $or = 0, $rem$044 = 0, $retval$0 = 0, $sub = 0, $sub$ptr$sub = 0, $sub21 = 0, $sub28 = 0, $sub37 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $wbase = 0, $wend = 0;
 var $wend14 = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $iovs = sp;
 $wbase = ((($f)) + 28|0);
 $0 = HEAP32[$wbase>>2]|0;
 HEAP32[$iovs>>2] = $0;
 $iov_len = ((($iovs)) + 4|0);
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($1) - ($0))|0;
 HEAP32[$iov_len>>2] = $sub$ptr$sub;
 $iov_base2 = ((($iovs)) + 8|0);
 HEAP32[$iov_base2>>2] = $buf;
 $iov_len3 = ((($iovs)) + 12|0);
 HEAP32[$iov_len3>>2] = $len;
 $add = (($sub$ptr$sub) + ($len))|0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $iovs;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $call40 = (___syscall146(146,($vararg_buffer|0))|0);
 $call741 = (___syscall_ret($call40)|0);
 $cmp42 = ($add|0)==($call741|0);
 L1: do {
  if ($cmp42) {
   label = 3;
  } else {
   $call746 = $call741;$iov$043 = $iovs;$iovcnt$045 = 2;$rem$044 = $add;
   while(1) {
    $cmp12 = ($call746|0)<(0);
    if ($cmp12) {
     break;
    }
    $sub21 = (($rem$044) - ($call746))|0;
    $iov_len23 = ((($iov$043)) + 4|0);
    $9 = HEAP32[$iov_len23>>2]|0;
    $cmp24 = ($call746>>>0)>($9>>>0);
    $incdec$ptr = ((($iov$043)) + 8|0);
    $iov$1 = $cmp24 ? $incdec$ptr : $iov$043;
    $dec = $cmp24 << 31 >> 31;
    $iovcnt$1 = (($iovcnt$045) + ($dec))|0;
    $sub28 = $cmp24 ? $9 : 0;
    $cnt$0 = (($call746) - ($sub28))|0;
    $10 = HEAP32[$iov$1>>2]|0;
    $add$ptr32 = (($10) + ($cnt$0)|0);
    HEAP32[$iov$1>>2] = $add$ptr32;
    $iov_len36 = ((($iov$1)) + 4|0);
    $11 = HEAP32[$iov_len36>>2]|0;
    $sub37 = (($11) - ($cnt$0))|0;
    HEAP32[$iov_len36>>2] = $sub37;
    $12 = HEAP32[$fd>>2]|0;
    $13 = $iov$1;
    HEAP32[$vararg_buffer3>>2] = $12;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $13;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $iovcnt$1;
    $call = (___syscall146(146,($vararg_buffer3|0))|0);
    $call7 = (___syscall_ret($call)|0);
    $cmp = ($sub21|0)==($call7|0);
    if ($cmp) {
     label = 3;
     break L1;
    } else {
     $call746 = $call7;$iov$043 = $iov$1;$iovcnt$045 = $iovcnt$1;$rem$044 = $sub21;
    }
   }
   $wend14 = ((($f)) + 16|0);
   HEAP32[$wend14>>2] = 0;
   HEAP32[$wbase>>2] = 0;
   HEAP32[$wpos>>2] = 0;
   $7 = HEAP32[$f>>2]|0;
   $or = $7 | 32;
   HEAP32[$f>>2] = $or;
   $cmp17 = ($iovcnt$045|0)==(2);
   if ($cmp17) {
    $retval$0 = 0;
   } else {
    $iov_len19 = ((($iov$043)) + 4|0);
    $8 = HEAP32[$iov_len19>>2]|0;
    $sub = (($len) - ($8))|0;
    $retval$0 = $sub;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $buf8 = ((($f)) + 44|0);
  $4 = HEAP32[$buf8>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $5 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($4) + ($5)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $6 = $4;
  HEAP32[$wbase>>2] = $6;
  HEAP32[$wpos>>2] = $6;
  $retval$0 = $len;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___stdio_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $cmp = 0, $fd = 0, $ret = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp + 8|0;
 $ret = sp;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $ret;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $call = (___syscall140(140,($vararg_buffer|0))|0);
 $call2 = (___syscall_ret($call)|0);
 $cmp = ($call2|0)<(0);
 if ($cmp) {
  $10 = $ret;
  $11 = $10;
  HEAP32[$11>>2] = -1;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = -1;
  $14 = -1;$15 = -1;
 } else {
  $4 = $ret;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $14 = $9;$15 = $6;
 }
 setTempRet0(($14) | 0);
 STACKTOP = sp;return ($15|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $call = 0, $cmp = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($r>>>0)>(4294963200);
 if ($cmp) {
  $sub = (0 - ($r))|0;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $sub;
  $retval$0 = -1;
 } else {
  $retval$0 = $r;
 }
 return ($retval$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (40600|0);
}
function _dummy_731($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($fd|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -48)|0;
 $cmp = ($sub>>>0)<(10);
 $conv = $cmp&1;
 return ($conv|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___vfprintf_internal($f,$fmt,$ap,1,11)|0);
 return ($call|0);
}
function _fmt_fp($f,$y,$w,$p,$fl,$t) {
 $f = $f|0;
 $y = +$y;
 $w = $w|0;
 $p = $p|0;
 $fl = $fl|0;
 $t = $t|0;
 var $$ = 0, $$pr = 0, $$pr415 = 0, $$pre = 0, $$pre517 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0;
 var $a$9 = 0, $add = 0, $add$ptr213 = 0, $add$ptr311 = 0, $add$ptr354 = 0, $add$ptr358 = 0, $add$ptr373 = 0, $add$ptr442 = 0, $add$ptr65 = 0, $add$ptr671 = 0, $add$ptr742 = 0, $add$ptr756 = 0, $add113 = 0, $add150 = 0, $add154 = 0, $add163 = 0, $add165 = 0, $add273 = 0, $add275 = 0, $add284 = 0;
 var $add313 = 0, $add355 = 0, $add410 = 0.0, $add414 = 0, $add477$neg = 0, $add561 = 0, $add608 = 0, $add612 = 0, $add620 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $add737 = 0, $add810 = 0, $add87 = 0.0, $add90 = 0.0, $and = 0, $and12 = 0, $and134 = 0, $and282 = 0;
 var $and36 = 0, $and379 = 0, $and45 = 0, $and483 = 0, $and610 = 0, $and610$lobit = 0, $and62 = 0, $and702 = 0, $and780 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx251 = 0, $arrayidx453 = 0, $arrayidx489 = 0, $big = 0, $buf = 0, $call55 = 0.0, $carry$0493 = 0, $carry262$0484 = 0, $cmp103 = 0;
 var $cmp127 = 0, $cmp131 = 0, $cmp147 = 0, $cmp196 = 0, $cmp205 = 0, $cmp225 = 0, $cmp225500 = 0, $cmp235 = 0, $cmp235492 = 0, $cmp249 = 0, $cmp249496 = 0, $cmp259 = 0, $cmp259486 = 0, $cmp277 = 0, $cmp277482 = 0, $cmp299 = 0, $cmp308 = 0, $cmp315 = 0, $cmp324 = 0, $cmp324478 = 0;
 var $cmp333 = 0, $cmp338 = 0, $cmp350 = 0, $cmp363 = 0, $cmp363474 = 0, $cmp374 = 0, $cmp38 = 0, $cmp385 = 0, $cmp390 = 0, $cmp403 = 0, $cmp411 = 0, $cmp416 = 0, $cmp416469 = 0, $cmp420 = 0, $cmp433 = 0, $cmp433465 = 0, $cmp443 = 0, $cmp450 = 0, $cmp450$lcssa = 0, $cmp450458 = 0;
 var $cmp470 = 0, $cmp473 = 0, $cmp495 = 0, $cmp495454 = 0, $cmp505 = 0, $cmp528 = 0, $cmp577 = 0, $cmp59 = 0, $cmp614 = 0, $cmp617 = 0, $cmp623 = 0, $cmp636 = 0, $cmp636449 = 0, $cmp660 = 0, $cmp665 = 0, $cmp673 = 0, $cmp678 = 0, $cmp678435 = 0, $cmp686 = 0, $cmp707 = 0;
 var $cmp707430 = 0, $cmp710 = 0, $cmp710431 = 0, $cmp722 = 0, $cmp722427 = 0, $cmp745 = 0, $cmp745442 = 0, $cmp748 = 0, $cmp748443 = 0, $cmp760 = 0, $cmp765 = 0, $cmp770 = 0, $cmp770439 = 0, $cmp777 = 0, $cmp790 = 0, $cmp818 = 0, $cmp82 = 0, $cmp94 = 0, $cond = 0, $cond100 = 0;
 var $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond43 = 0, $cond629 = 0, $cond732 = 0, $cond800 = 0, $conv111 = 0, $conv114 = 0, $conv116 = 0, $conv118393 = 0, $conv121 = 0, $conv123 = 0.0, $conv216 = 0, $conv218 = 0.0, $conv644 = 0, $conv646 = 0, $d$0 = 0, $d$0491 = 0, $d$0494 = 0;
 var $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $dec = 0, $dec476 = 0, $dec481 = 0, $dec78 = 0, $div274 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0;
 var $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc468 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr112 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0;
 var $incdec$ptr137 = 0, $incdec$ptr217 = 0, $incdec$ptr246 = 0, $incdec$ptr288 = 0, $incdec$ptr292 = 0, $incdec$ptr292520 = 0, $incdec$ptr296 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr645 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr698 = 0, $incdec$ptr725 = 0, $incdec$ptr734 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0;
 var $incdec$ptr808 = 0, $j$0 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $l$1 = 0, $land$ext$neg = 0, $mul = 0.0, $mul125 = 0.0, $mul202 = 0.0, $mul220 = 0.0, $mul286 = 0, $mul322 = 0, $mul328 = 0, $mul335 = 0, $mul349 = 0, $mul367 = 0, $mul406 = 0.0, $mul407 = 0.0;
 var $mul431 = 0, $mul437 = 0, $mul499 = 0, $mul513 = 0, $mul80 = 0.0, $not$tobool341 = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond398 = 0, $or$cond400 = 0, $or$cond409 = 0, $or$cond411 = 0, $or120 = 0, $or504 = 0, $or613 = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0;
 var $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $rem494 = 0, $rem494453 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s35$0 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0;
 var $scevgep513 = 0, $scevgep513514 = 0, $shl280 = 0, $shr283 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396521 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select401 = 0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select412 = 0.0;
 var $spec$select413 = 0, $spec$select414 = 0, $spec$select416 = 0, $spec$select417 = 0, $spec$select418 = 0.0, $spec$select419 = 0.0, $spec$select420 = 0.0, $sub = 0.0, $sub$ptr$div = 0, $sub$ptr$div321 = 0, $sub$ptr$div347 = 0, $sub$ptr$div430 = 0, $sub$ptr$div511 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast305 = 0, $sub$ptr$lhs$cast344 = 0, $sub$ptr$lhs$cast508 = 0;
 var $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$lhs$cast811 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast306 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$rhs$cast428 = 0, $sub$ptr$rhs$cast634 = 0, $sub$ptr$rhs$cast634447 = 0, $sub$ptr$rhs$cast649 = 0, $sub$ptr$rhs$cast695 = 0, $sub$ptr$rhs$cast788 = 0, $sub$ptr$rhs$cast812 = 0, $sub$ptr$sub = 0, $sub$ptr$sub145 = 0;
 var $sub$ptr$sub153 = 0, $sub$ptr$sub159 = 0, $sub$ptr$sub162 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub307 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub346 = 0, $sub$ptr$sub429 = 0, $sub$ptr$sub510 = 0, $sub$ptr$sub635 = 0, $sub$ptr$sub635448 = 0, $sub$ptr$sub650 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub696 = 0, $sub$ptr$sub789 = 0, $sub$ptr$sub813 = 0, $sub124 = 0.0, $sub146 = 0, $sub181 = 0;
 var $sub203 = 0, $sub219 = 0.0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub336 = 0, $sub343 = 0, $sub357 = 0, $sub409 = 0, $sub478 = 0, $sub480 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $sub85 = 0.0, $sub86 = 0.0, $sub88 = 0.0;
 var $sub91 = 0.0, $sub97 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool129 = 0, $tobool13 = 0, $tobool135 = 0, $tobool139 = 0, $tobool140 = 0, $tobool222 = 0, $tobool244 = 0, $tobool252 = 0, $tobool290 = 0, $tobool290519 = 0, $tobool294 = 0, $tobool341 = 0, $tobool37 = 0, $tobool371 = 0, $tobool380 = 0, $tobool400 = 0;
 var $tobool454 = 0, $tobool484 = 0, $tobool490 = 0, $tobool56 = 0, $tobool609 = 0, $tobool609$not = 0, $tobool63 = 0, $tobool703 = 0, $tobool76 = 0, $tobool76421 = 0, $tobool781 = 0, $tobool79 = 0, $tobool9 = 0, $w$add653 = 0, $xor = 0, $xor167 = 0, $xor186 = 0, $xor655 = 0, $xor816 = 0, $y$addr$0 = 0.0;
 var $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0;
 $big = sp + 32|0;
 $e2 = sp + 536|0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540|0;
 HEAP32[$e2>>2] = 0;
 $arrayidx = ((($ebuf0)) + 12|0);
 $0 = (___DOUBLE_BITS_662($y)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)<(0);
 if ($2) {
  $sub = - $y;
  $3 = (___DOUBLE_BITS_662($sub)|0);
  $4 = (getTempRet0() | 0);
  $8 = $4;$85 = $3;$pl$0 = 1;$prefix$0 = 37203;$y$addr$0 = $sub;
 } else {
  $and = $fl & 2048;
  $tobool9 = ($and|0)==(0);
  $and12 = $fl & 1;
  $tobool13 = ($and12|0)==(0);
  $$ = $tobool13 ? (37204) : (37209);
  $spec$select416 = $tobool9 ? $$ : (37206);
  $5 = $fl & 2049;
  $6 = ($5|0)!=(0);
  $spec$select417 = $6&1;
  $8 = $1;$85 = $0;$pl$0 = $spec$select417;$prefix$0 = $spec$select416;$y$addr$0 = $y;
 }
 $7 = $8 & 2146435072;
 $9 = (0)==(0);
 $10 = ($7|0)==(2146435072);
 $11 = $9 & $10;
 do {
  if ($11) {
   $and36 = $t & 32;
   $tobool37 = ($and36|0)!=(0);
   $cond = $tobool37 ? 37222 : 37226;
   $cmp38 = ($y$addr$0 != $y$addr$0) | (0.0 != 0.0);
   $cond43 = $tobool37 ? 37230 : 37234;
   $s35$0 = $cmp38 ? $cond43 : $cond;
   $add = (($pl$0) + 3)|0;
   $and45 = $fl & -65537;
   _pad_659($f,32,$w,$add,$and45);
   _out($f,$prefix$0,$pl$0);
   _out($f,$s35$0,3);
   $xor = $fl ^ 8192;
   _pad_659($f,32,$w,$add,$xor);
   $add653$sink524 = $add;
  } else {
   $call55 = (+_frexp($y$addr$0,$e2));
   $mul = $call55 * 2.0;
   $tobool56 = $mul != 0.0;
   if ($tobool56) {
    $12 = HEAP32[$e2>>2]|0;
    $dec = (($12) + -1)|0;
    HEAP32[$e2>>2] = $dec;
   }
   $or = $t | 32;
   $cmp59 = ($or|0)==(97);
   if ($cmp59) {
    $and62 = $t & 32;
    $tobool63 = ($and62|0)==(0);
    $add$ptr65 = ((($prefix$0)) + 9|0);
    $spec$select = $tobool63 ? $prefix$0 : $add$ptr65;
    $add67 = $pl$0 | 2;
    $13 = ($p>>>0)>(11);
    $sub74 = (12 - ($p))|0;
    $tobool76421 = ($sub74|0)==(0);
    $tobool76 = $13 | $tobool76421;
    do {
     if ($tobool76) {
      $y$addr$1 = $mul;
     } else {
      $re$1426 = $sub74;$round$0425 = 8.0;
      while(1) {
       $dec78 = (($re$1426) + -1)|0;
       $mul80 = $round$0425 * 16.0;
       $tobool79 = ($dec78|0)==(0);
       if ($tobool79) {
        break;
       } else {
        $re$1426 = $dec78;$round$0425 = $mul80;
       }
      }
      $14 = HEAP8[$spec$select>>0]|0;
      $cmp82 = ($14<<24>>24)==(45);
      if ($cmp82) {
       $sub85 = - $mul;
       $sub86 = $sub85 - $mul80;
       $add87 = $mul80 + $sub86;
       $sub88 = - $add87;
       $y$addr$1 = $sub88;
       break;
      } else {
       $add90 = $mul + $mul80;
       $sub91 = $add90 - $mul80;
       $y$addr$1 = $sub91;
       break;
      }
     }
    } while(0);
    $15 = HEAP32[$e2>>2]|0;
    $cmp94 = ($15|0)<(0);
    $sub97 = (0 - ($15))|0;
    $cond100 = $cmp94 ? $sub97 : $15;
    $16 = ($cond100|0)<(0);
    $17 = $16 << 31 >> 31;
    $18 = (_fmt_u($cond100,$17,$arrayidx)|0);
    $cmp103 = ($18|0)==($arrayidx|0);
    if ($cmp103) {
     $incdec$ptr106 = ((($ebuf0)) + 11|0);
     HEAP8[$incdec$ptr106>>0] = 48;
     $estr$0 = $incdec$ptr106;
    } else {
     $estr$0 = $18;
    }
    $19 = $15 >> 31;
    $20 = $19 & 2;
    $21 = (($20) + 43)|0;
    $conv111 = $21&255;
    $incdec$ptr112 = ((($estr$0)) + -1|0);
    HEAP8[$incdec$ptr112>>0] = $conv111;
    $add113 = (($t) + 15)|0;
    $conv114 = $add113&255;
    $incdec$ptr115 = ((($estr$0)) + -2|0);
    HEAP8[$incdec$ptr115>>0] = $conv114;
    $cmp131 = ($p|0)<(1);
    $and134 = $fl & 8;
    $tobool135 = ($and134|0)==(0);
    $s$0 = $buf;$y$addr$2 = $y$addr$1;
    while(1) {
     $conv116 = (~~(($y$addr$2)));
     $arrayidx117 = (33392 + ($conv116)|0);
     $22 = HEAP8[$arrayidx117>>0]|0;
     $conv118393 = $22&255;
     $or120 = $and62 | $conv118393;
     $conv121 = $or120&255;
     $incdec$ptr122 = ((($s$0)) + 1|0);
     HEAP8[$s$0>>0] = $conv121;
     $conv123 = (+($conv116|0));
     $sub124 = $y$addr$2 - $conv123;
     $mul125 = $sub124 * 16.0;
     $sub$ptr$lhs$cast = $incdec$ptr122;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast$le))|0;
     $cmp127 = ($sub$ptr$sub|0)==(1);
     if ($cmp127) {
      $tobool129 = $mul125 == 0.0;
      $or$cond1$not = $cmp131 & $tobool129;
      $or$cond = $tobool135 & $or$cond1$not;
      if ($or$cond) {
       $s$1 = $incdec$ptr122;
      } else {
       $incdec$ptr137 = ((($s$0)) + 2|0);
       HEAP8[$incdec$ptr122>>0] = 46;
       $s$1 = $incdec$ptr137;
      }
     } else {
      $s$1 = $incdec$ptr122;
     }
     $tobool139 = $mul125 != 0.0;
     if ($tobool139) {
      $s$0 = $s$1;$y$addr$2 = $mul125;
     } else {
      break;
     }
    }
    $tobool140 = ($p|0)==(0);
    $$pre517 = $s$1;
    if ($tobool140) {
     label = 25;
    } else {
     $sub$ptr$sub145 = (-2 - ($sub$ptr$rhs$cast$le))|0;
     $sub146 = (($sub$ptr$sub145) + ($$pre517))|0;
     $cmp147 = ($sub146|0)<($p|0);
     if ($cmp147) {
      $sub$ptr$lhs$cast151 = $arrayidx;
      $sub$ptr$rhs$cast152 = $incdec$ptr115;
      $sub$ptr$sub153 = (($p) + 2)|0;
      $add150 = (($sub$ptr$sub153) + ($sub$ptr$lhs$cast151))|0;
      $add154 = (($add150) - ($sub$ptr$rhs$cast152))|0;
      $l$0 = $add154;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $sub$ptr$lhs$cast160 = $arrayidx;
     $sub$ptr$rhs$cast161 = $incdec$ptr115;
     $sub$ptr$sub159 = (($sub$ptr$lhs$cast160) - ($sub$ptr$rhs$cast$le))|0;
     $sub$ptr$sub162 = (($sub$ptr$sub159) - ($sub$ptr$rhs$cast161))|0;
     $add163 = (($sub$ptr$sub162) + ($$pre517))|0;
     $l$0 = $add163;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
    }
    $add165 = (($l$0) + ($add67))|0;
    _pad_659($f,32,$w,$add165,$fl);
    _out($f,$spec$select,$add67);
    $xor167 = $fl ^ 65536;
    _pad_659($f,48,$w,$add165,$xor167);
    $sub$ptr$sub172 = (($$pre517) - ($sub$ptr$rhs$cast$le))|0;
    _out($f,$buf,$sub$ptr$sub172);
    $sub$ptr$sub175 = (($sub$ptr$lhs$cast173$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast174$pre$phiZZZZ2D))|0;
    $23 = (($sub$ptr$sub172) + ($sub$ptr$sub175))|0;
    $sub181 = (($l$0) - ($23))|0;
    _pad_659($f,48,$sub181,0,0);
    _out($f,$incdec$ptr115,$sub$ptr$sub175);
    $xor186 = $fl ^ 8192;
    _pad_659($f,32,$w,$add165,$xor186);
    $add653$sink524 = $add165;
    break;
   }
   $cmp196 = ($p|0)<(0);
   $spec$select395 = $cmp196 ? 6 : $p;
   if ($tobool56) {
    $mul202 = $mul * 268435456.0;
    $24 = HEAP32[$e2>>2]|0;
    $sub203 = (($24) + -28)|0;
    HEAP32[$e2>>2] = $sub203;
    $$pr = $sub203;$y$addr$3 = $mul202;
   } else {
    $$pre = HEAP32[$e2>>2]|0;
    $$pr = $$pre;$y$addr$3 = $mul;
   }
   $cmp205 = ($$pr|0)<(0);
   $add$ptr213 = ((($big)) + 288|0);
   $z$0 = $cmp205 ? $big : $add$ptr213;
   $y$addr$4 = $y$addr$3;$z$1 = $z$0;
   while(1) {
    $conv216 = (~~(($y$addr$4))>>>0);
    HEAP32[$z$1>>2] = $conv216;
    $incdec$ptr217 = ((($z$1)) + 4|0);
    $conv218 = (+($conv216>>>0));
    $sub219 = $y$addr$4 - $conv218;
    $mul220 = $sub219 * 1.0E+9;
    $tobool222 = $mul220 != 0.0;
    if ($tobool222) {
     $y$addr$4 = $mul220;$z$1 = $incdec$ptr217;
    } else {
     break;
    }
   }
   $sub$ptr$rhs$cast345 = $z$0;
   $cmp225500 = ($$pr|0)>(0);
   if ($cmp225500) {
    $26 = $$pr;$a$1502 = $z$0;$z$2501 = $incdec$ptr217;
    while(1) {
     $25 = ($26|0)<(29);
     $cond233 = $25 ? $26 : 29;
     $d$0491 = ((($z$2501)) + -4|0);
     $cmp235492 = ($d$0491>>>0)<($a$1502>>>0);
     if ($cmp235492) {
      $a$2 = $a$1502;
     } else {
      $carry$0493 = 0;$d$0494 = $d$0491;
      while(1) {
       $27 = HEAP32[$d$0494>>2]|0;
       $28 = (_bitshift64Shl(($27|0),0,($cond233|0))|0);
       $29 = (getTempRet0() | 0);
       $30 = (_i64Add(($28|0),($29|0),($carry$0493|0),0)|0);
       $31 = (getTempRet0() | 0);
       $32 = (___udivdi3(($30|0),($31|0),1000000000,0)|0);
       $33 = (getTempRet0() | 0);
       $34 = (___muldi3(($32|0),($33|0),1000000000,0)|0);
       $35 = (getTempRet0() | 0);
       $36 = (_i64Subtract(($30|0),($31|0),($34|0),($35|0))|0);
       $37 = (getTempRet0() | 0);
       HEAP32[$d$0494>>2] = $36;
       $d$0 = ((($d$0494)) + -4|0);
       $cmp235 = ($d$0>>>0)<($a$1502>>>0);
       if ($cmp235) {
        break;
       } else {
        $carry$0493 = $32;$d$0494 = $d$0;
       }
      }
      $tobool244 = ($32|0)==(0);
      if ($tobool244) {
       $a$2 = $a$1502;
      } else {
       $incdec$ptr246 = ((($a$1502)) + -4|0);
       HEAP32[$incdec$ptr246>>2] = $32;
       $a$2 = $incdec$ptr246;
      }
     }
     $cmp249496 = ($z$2501>>>0)>($a$2>>>0);
     L57: do {
      if ($cmp249496) {
       $z$3497 = $z$2501;
       while(1) {
        $arrayidx251 = ((($z$3497)) + -4|0);
        $38 = HEAP32[$arrayidx251>>2]|0;
        $tobool252 = ($38|0)==(0);
        if (!($tobool252)) {
         $z$3$lcssa = $z$3497;
         break L57;
        }
        $cmp249 = ($arrayidx251>>>0)>($a$2>>>0);
        if ($cmp249) {
         $z$3497 = $arrayidx251;
        } else {
         $z$3$lcssa = $arrayidx251;
         break;
        }
       }
      } else {
       $z$3$lcssa = $z$2501;
      }
     } while(0);
     $39 = HEAP32[$e2>>2]|0;
     $sub256 = (($39) - ($cond233))|0;
     HEAP32[$e2>>2] = $sub256;
     $cmp225 = ($sub256|0)>(0);
     if ($cmp225) {
      $26 = $sub256;$a$1502 = $a$2;$z$2501 = $z$3$lcssa;
     } else {
      $$pr415 = $sub256;$a$1$lcssa = $a$2;$z$2$lcssa = $z$3$lcssa;
      break;
     }
    }
   } else {
    $$pr415 = $$pr;$a$1$lcssa = $z$0;$z$2$lcssa = $incdec$ptr217;
   }
   $cmp259486 = ($$pr415|0)<(0);
   if ($cmp259486) {
    $add273 = (($spec$select395) + 25)|0;
    $div274 = (($add273|0) / 9)&-1;
    $add275 = (($div274) + 1)|0;
    $cmp299 = ($or|0)==(102);
    $40 = $$pr415;$a$3488 = $a$1$lcssa;$z$4487 = $z$2$lcssa;
    while(1) {
     $sub264 = (0 - ($40))|0;
     $41 = ($sub264|0)<(9);
     $cond271 = $41 ? $sub264 : 9;
     $cmp277482 = ($a$3488>>>0)<($z$4487>>>0);
     if ($cmp277482) {
      $shl280 = 1 << $cond271;
      $sub281 = (($shl280) + -1)|0;
      $shr285 = 1000000000 >>> $cond271;
      $carry262$0484 = 0;$d$1483 = $a$3488;
      while(1) {
       $43 = HEAP32[$d$1483>>2]|0;
       $and282 = $43 & $sub281;
       $shr283 = $43 >>> $cond271;
       $add284 = (($shr283) + ($carry262$0484))|0;
       HEAP32[$d$1483>>2] = $add284;
       $mul286 = Math_imul($and282, $shr285)|0;
       $incdec$ptr288 = ((($d$1483)) + 4|0);
       $cmp277 = ($incdec$ptr288>>>0)<($z$4487>>>0);
       if ($cmp277) {
        $carry262$0484 = $mul286;$d$1483 = $incdec$ptr288;
       } else {
        break;
       }
      }
      $44 = HEAP32[$a$3488>>2]|0;
      $tobool290 = ($44|0)==(0);
      $incdec$ptr292 = ((($a$3488)) + 4|0);
      $spec$select396 = $tobool290 ? $incdec$ptr292 : $a$3488;
      $tobool294 = ($mul286|0)==(0);
      if ($tobool294) {
       $spec$select396523 = $spec$select396;$z$5 = $z$4487;
      } else {
       $incdec$ptr296 = ((($z$4487)) + 4|0);
       HEAP32[$z$4487>>2] = $mul286;
       $spec$select396523 = $spec$select396;$z$5 = $incdec$ptr296;
      }
     } else {
      $42 = HEAP32[$a$3488>>2]|0;
      $tobool290519 = ($42|0)==(0);
      $incdec$ptr292520 = ((($a$3488)) + 4|0);
      $spec$select396521 = $tobool290519 ? $incdec$ptr292520 : $a$3488;
      $spec$select396523 = $spec$select396521;$z$5 = $z$4487;
     }
     $cond304 = $cmp299 ? $z$0 : $spec$select396523;
     $sub$ptr$lhs$cast305 = $z$5;
     $sub$ptr$rhs$cast306 = $cond304;
     $sub$ptr$sub307 = (($sub$ptr$lhs$cast305) - ($sub$ptr$rhs$cast306))|0;
     $sub$ptr$div = $sub$ptr$sub307 >> 2;
     $cmp308 = ($sub$ptr$div|0)>($add275|0);
     $add$ptr311 = (($cond304) + ($add275<<2)|0);
     $spec$select397 = $cmp308 ? $add$ptr311 : $z$5;
     $45 = HEAP32[$e2>>2]|0;
     $add313 = (($45) + ($cond271))|0;
     HEAP32[$e2>>2] = $add313;
     $cmp259 = ($add313|0)<(0);
     if ($cmp259) {
      $40 = $add313;$a$3488 = $spec$select396523;$z$4487 = $spec$select397;
     } else {
      $a$3$lcssa = $spec$select396523;$z$4$lcssa = $spec$select397;
      break;
     }
    }
   } else {
    $a$3$lcssa = $a$1$lcssa;$z$4$lcssa = $z$2$lcssa;
   }
   $cmp315 = ($a$3$lcssa>>>0)<($z$4$lcssa>>>0);
   if ($cmp315) {
    $sub$ptr$rhs$cast319 = $a$3$lcssa;
    $sub$ptr$sub320 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast319))|0;
    $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
    $mul322 = ($sub$ptr$div321*9)|0;
    $46 = HEAP32[$a$3$lcssa>>2]|0;
    $cmp324478 = ($46>>>0)<(10);
    if ($cmp324478) {
     $e$1 = $mul322;
    } else {
     $e$0480 = $mul322;$i$0479 = 10;
     while(1) {
      $mul328 = ($i$0479*10)|0;
      $inc = (($e$0480) + 1)|0;
      $cmp324 = ($46>>>0)<($mul328>>>0);
      if ($cmp324) {
       $e$1 = $inc;
       break;
      } else {
       $e$0480 = $inc;$i$0479 = $mul328;
      }
     }
    }
   } else {
    $e$1 = 0;
   }
   $cmp333 = ($or|0)==(102);
   $mul335 = $cmp333 ? 0 : $e$1;
   $sub336 = (($spec$select395) - ($mul335))|0;
   $cmp338 = ($or|0)==(103);
   $tobool341 = ($spec$select395|0)!=(0);
   $47 = $tobool341 & $cmp338;
   $land$ext$neg = $47 << 31 >> 31;
   $sub343 = (($sub336) + ($land$ext$neg))|0;
   $sub$ptr$lhs$cast344 = $z$4$lcssa;
   $sub$ptr$sub346 = (($sub$ptr$lhs$cast344) - ($sub$ptr$rhs$cast345))|0;
   $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
   $48 = ($sub$ptr$div347*9)|0;
   $mul349 = (($48) + -9)|0;
   $cmp350 = ($sub343|0)<($mul349|0);
   if ($cmp350) {
    $add$ptr354 = ((($z$0)) + 4|0);
    $add355 = (($sub343) + 9216)|0;
    $div356 = (($add355|0) / 9)&-1;
    $sub357 = (($div356) + -1024)|0;
    $add$ptr358 = (($add$ptr354) + ($sub357<<2)|0);
    $49 = ($div356*9)|0;
    $50 = (($add355) - ($49))|0;
    $cmp363474 = ($50|0)<(8);
    if ($cmp363474) {
     $i$1475 = 10;$j$0$in476 = $50;
     while(1) {
      $j$0 = (($j$0$in476) + 1)|0;
      $mul367 = ($i$1475*10)|0;
      $cmp363 = ($j$0$in476|0)<(7);
      if ($cmp363) {
       $i$1475 = $mul367;$j$0$in476 = $j$0;
      } else {
       $i$1$lcssa = $mul367;
       break;
      }
     }
    } else {
     $i$1$lcssa = 10;
    }
    $51 = HEAP32[$add$ptr358>>2]|0;
    $div378 = (($51>>>0) / ($i$1$lcssa>>>0))&-1;
    $52 = Math_imul($div378, $i$1$lcssa)|0;
    $53 = (($51) - ($52))|0;
    $tobool371 = ($53|0)==(0);
    $add$ptr373 = ((($add$ptr358)) + 4|0);
    $cmp374 = ($add$ptr373|0)==($z$4$lcssa|0);
    $or$cond398 = $cmp374 & $tobool371;
    if ($or$cond398) {
     $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
    } else {
     $and379 = $div378 & 1;
     $tobool380 = ($and379|0)==(0);
     $spec$select399 = $tobool380 ? 9007199254740992.0 : 9007199254740994.0;
     $div384 = $i$1$lcssa >>> 1;
     $cmp385 = ($53>>>0)<($div384>>>0);
     $cmp390 = ($53|0)==($div384|0);
     $or$cond400 = $cmp374 & $cmp390;
     $spec$select412 = $or$cond400 ? 1.0 : 1.5;
     $spec$select418 = $cmp385 ? 0.5 : $spec$select412;
     $tobool400 = ($pl$0|0)==(0);
     if ($tobool400) {
      $round377$1 = $spec$select399;$small$1 = $spec$select418;
     } else {
      $54 = HEAP8[$prefix$0>>0]|0;
      $cmp403 = ($54<<24>>24)==(45);
      $mul406 = - $spec$select399;
      $mul407 = - $spec$select418;
      $spec$select419 = $cmp403 ? $mul406 : $spec$select399;
      $spec$select420 = $cmp403 ? $mul407 : $spec$select418;
      $round377$1 = $spec$select419;$small$1 = $spec$select420;
     }
     $sub409 = (($51) - ($53))|0;
     HEAP32[$add$ptr358>>2] = $sub409;
     $add410 = $round377$1 + $small$1;
     $cmp411 = $add410 != $round377$1;
     if ($cmp411) {
      $add414 = (($sub409) + ($i$1$lcssa))|0;
      HEAP32[$add$ptr358>>2] = $add414;
      $cmp416469 = ($add414>>>0)>(999999999);
      if ($cmp416469) {
       $a$5471 = $a$3$lcssa;$d$2470 = $add$ptr358;
       while(1) {
        $incdec$ptr419 = ((($d$2470)) + -4|0);
        HEAP32[$d$2470>>2] = 0;
        $cmp420 = ($incdec$ptr419>>>0)<($a$5471>>>0);
        if ($cmp420) {
         $incdec$ptr423 = ((($a$5471)) + -4|0);
         HEAP32[$incdec$ptr423>>2] = 0;
         $a$6 = $incdec$ptr423;
        } else {
         $a$6 = $a$5471;
        }
        $55 = HEAP32[$incdec$ptr419>>2]|0;
        $inc425 = (($55) + 1)|0;
        HEAP32[$incdec$ptr419>>2] = $inc425;
        $cmp416 = ($inc425>>>0)>(999999999);
        if ($cmp416) {
         $a$5471 = $a$6;$d$2470 = $incdec$ptr419;
        } else {
         $a$5$lcssa = $a$6;$d$2$lcssa = $incdec$ptr419;
         break;
        }
       }
      } else {
       $a$5$lcssa = $a$3$lcssa;$d$2$lcssa = $add$ptr358;
      }
      $sub$ptr$rhs$cast428 = $a$5$lcssa;
      $sub$ptr$sub429 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast428))|0;
      $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
      $mul431 = ($sub$ptr$div430*9)|0;
      $56 = HEAP32[$a$5$lcssa>>2]|0;
      $cmp433465 = ($56>>>0)<(10);
      if ($cmp433465) {
       $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $mul431;
      } else {
       $e$2467 = $mul431;$i$2466 = 10;
       while(1) {
        $mul437 = ($i$2466*10)|0;
        $inc438 = (($e$2467) + 1)|0;
        $cmp433 = ($56>>>0)<($mul437>>>0);
        if ($cmp433) {
         $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $inc438;
         break;
        } else {
         $e$2467 = $inc438;$i$2466 = $mul437;
        }
       }
      }
     } else {
      $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
     }
    }
    $add$ptr442 = ((($d$4)) + 4|0);
    $cmp443 = ($z$4$lcssa>>>0)>($add$ptr442>>>0);
    $spec$select401 = $cmp443 ? $add$ptr442 : $z$4$lcssa;
    $a$9 = $a$8;$e$5 = $e$4;$z$8 = $spec$select401;
   } else {
    $a$9 = $a$3$lcssa;$e$5 = $e$1;$z$8 = $z$4$lcssa;
   }
   $sub626 = (0 - ($e$5))|0;
   $cmp450458 = ($z$8>>>0)>($a$9>>>0);
   L109: do {
    if ($cmp450458) {
     $z$9459 = $z$8;
     while(1) {
      $arrayidx453 = ((($z$9459)) + -4|0);
      $57 = HEAP32[$arrayidx453>>2]|0;
      $tobool454 = ($57|0)==(0);
      if (!($tobool454)) {
       $cmp450$lcssa = 1;$z$9$lcssa = $z$9459;
       break L109;
      }
      $cmp450 = ($arrayidx453>>>0)>($a$9>>>0);
      if ($cmp450) {
       $z$9459 = $arrayidx453;
      } else {
       $cmp450$lcssa = 0;$z$9$lcssa = $arrayidx453;
       break;
      }
     }
    } else {
     $cmp450$lcssa = 0;$z$9$lcssa = $z$8;
    }
   } while(0);
   do {
    if ($cmp338) {
     $not$tobool341 = $tobool341 ^ 1;
     $inc468 = $not$tobool341&1;
     $spec$select402 = (($spec$select395) + ($inc468))|0;
     $cmp470 = ($spec$select402|0)>($e$5|0);
     $cmp473 = ($e$5|0)>(-5);
     $or$cond2 = $cmp470 & $cmp473;
     if ($or$cond2) {
      $dec476 = (($t) + -1)|0;
      $add477$neg = (($spec$select402) + -1)|0;
      $sub478 = (($add477$neg) - ($e$5))|0;
      $p$addr$2 = $sub478;$t$addr$0 = $dec476;
     } else {
      $sub480 = (($t) + -2)|0;
      $dec481 = (($spec$select402) + -1)|0;
      $p$addr$2 = $dec481;$t$addr$0 = $sub480;
     }
     $and483 = $fl & 8;
     $tobool484 = ($and483|0)==(0);
     if ($tobool484) {
      if ($cmp450$lcssa) {
       $arrayidx489 = ((($z$9$lcssa)) + -4|0);
       $58 = HEAP32[$arrayidx489>>2]|0;
       $tobool490 = ($58|0)==(0);
       if ($tobool490) {
        $j$2 = 9;
       } else {
        $rem494453 = (($58>>>0) % 10)&-1;
        $cmp495454 = ($rem494453|0)==(0);
        if ($cmp495454) {
         $i$3455 = 10;$j$1456 = 0;
         while(1) {
          $mul499 = ($i$3455*10)|0;
          $inc500 = (($j$1456) + 1)|0;
          $rem494 = (($58>>>0) % ($mul499>>>0))&-1;
          $cmp495 = ($rem494|0)==(0);
          if ($cmp495) {
           $i$3455 = $mul499;$j$1456 = $inc500;
          } else {
           $j$2 = $inc500;
           break;
          }
         }
        } else {
         $j$2 = 0;
        }
       }
      } else {
       $j$2 = 9;
      }
      $or504 = $t$addr$0 | 32;
      $cmp505 = ($or504|0)==(102);
      $sub$ptr$lhs$cast508 = $z$9$lcssa;
      $sub$ptr$sub510 = (($sub$ptr$lhs$cast508) - ($sub$ptr$rhs$cast345))|0;
      $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
      $59 = ($sub$ptr$div511*9)|0;
      $mul513 = (($59) + -9)|0;
      if ($cmp505) {
       $sub514 = (($mul513) - ($j$2))|0;
       $60 = ($sub514|0)>(0);
       $spec$select403 = $60 ? $sub514 : 0;
       $cmp528 = ($p$addr$2|0)<($spec$select403|0);
       $spec$select413 = $cmp528 ? $p$addr$2 : $spec$select403;
       $p$addr$3 = $spec$select413;$t$addr$1 = $t$addr$0;
       break;
      } else {
       $add561 = (($mul513) + ($e$5))|0;
       $sub562 = (($add561) - ($j$2))|0;
       $61 = ($sub562|0)>(0);
       $spec$select405 = $61 ? $sub562 : 0;
       $cmp577 = ($p$addr$2|0)<($spec$select405|0);
       $spec$select414 = $cmp577 ? $p$addr$2 : $spec$select405;
       $p$addr$3 = $spec$select414;$t$addr$1 = $t$addr$0;
       break;
      }
     } else {
      $p$addr$3 = $p$addr$2;$t$addr$1 = $t$addr$0;
     }
    } else {
     $p$addr$3 = $spec$select395;$t$addr$1 = $t;
    }
   } while(0);
   $tobool609 = ($p$addr$3|0)!=(0);
   $and610 = $fl >>> 3;
   $and610$lobit = $and610 & 1;
   $62 = $tobool609 ? 1 : $and610$lobit;
   $or613 = $t$addr$1 | 32;
   $cmp614 = ($or613|0)==(102);
   if ($cmp614) {
    $cmp617 = ($e$5|0)>(0);
    $add620 = $cmp617 ? $e$5 : 0;
    $estr$2 = 0;$sub$ptr$sub650$pn = $add620;
   } else {
    $cmp623 = ($e$5|0)<(0);
    $cond629 = $cmp623 ? $sub626 : $e$5;
    $63 = ($cond629|0)<(0);
    $64 = $63 << 31 >> 31;
    $65 = (_fmt_u($cond629,$64,$arrayidx)|0);
    $sub$ptr$lhs$cast633 = $arrayidx;
    $sub$ptr$rhs$cast634447 = $65;
    $sub$ptr$sub635448 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634447))|0;
    $cmp636449 = ($sub$ptr$sub635448|0)<(2);
    if ($cmp636449) {
     $estr$1450 = $65;
     while(1) {
      $incdec$ptr639 = ((($estr$1450)) + -1|0);
      HEAP8[$incdec$ptr639>>0] = 48;
      $sub$ptr$rhs$cast634 = $incdec$ptr639;
      $sub$ptr$sub635 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634))|0;
      $cmp636 = ($sub$ptr$sub635|0)<(2);
      if ($cmp636) {
       $estr$1450 = $incdec$ptr639;
      } else {
       $estr$1$lcssa = $incdec$ptr639;
       break;
      }
     }
    } else {
     $estr$1$lcssa = $65;
    }
    $66 = $e$5 >> 31;
    $67 = $66 & 2;
    $68 = (($67) + 43)|0;
    $conv644 = $68&255;
    $incdec$ptr645 = ((($estr$1$lcssa)) + -1|0);
    HEAP8[$incdec$ptr645>>0] = $conv644;
    $conv646 = $t$addr$1&255;
    $incdec$ptr647 = ((($estr$1$lcssa)) + -2|0);
    HEAP8[$incdec$ptr647>>0] = $conv646;
    $sub$ptr$rhs$cast649 = $incdec$ptr647;
    $sub$ptr$sub650 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast649))|0;
    $estr$2 = $incdec$ptr647;$sub$ptr$sub650$pn = $sub$ptr$sub650;
   }
   $add608 = (($pl$0) + 1)|0;
   $add612 = (($add608) + ($p$addr$3))|0;
   $l$1 = (($add612) + ($62))|0;
   $add653 = (($l$1) + ($sub$ptr$sub650$pn))|0;
   _pad_659($f,32,$w,$add653,$fl);
   _out($f,$prefix$0,$pl$0);
   $xor655 = $fl ^ 65536;
   _pad_659($f,48,$w,$add653,$xor655);
   if ($cmp614) {
    $cmp660 = ($a$9>>>0)>($z$0>>>0);
    $spec$select408 = $cmp660 ? $z$0 : $a$9;
    $add$ptr671 = ((($buf)) + 9|0);
    $sub$ptr$lhs$cast694 = $add$ptr671;
    $incdec$ptr689 = ((($buf)) + 8|0);
    $d$5438 = $spec$select408;
    while(1) {
     $69 = HEAP32[$d$5438>>2]|0;
     $70 = (_fmt_u($69,0,$add$ptr671)|0);
     $cmp673 = ($d$5438|0)==($spec$select408|0);
     if ($cmp673) {
      $cmp686 = ($70|0)==($add$ptr671|0);
      if ($cmp686) {
       HEAP8[$incdec$ptr689>>0] = 48;
       $s668$1 = $incdec$ptr689;
      } else {
       $s668$1 = $70;
      }
     } else {
      $cmp678435 = ($70>>>0)>($buf>>>0);
      if ($cmp678435) {
       $71 = $70;
       $72 = (($71) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($72|0))|0;
       $s668$0436 = $70;
       while(1) {
        $incdec$ptr681 = ((($s668$0436)) + -1|0);
        $cmp678 = ($incdec$ptr681>>>0)>($buf>>>0);
        if ($cmp678) {
         $s668$0436 = $incdec$ptr681;
        } else {
         $s668$1 = $incdec$ptr681;
         break;
        }
       }
      } else {
       $s668$1 = $70;
      }
     }
     $sub$ptr$rhs$cast695 = $s668$1;
     $sub$ptr$sub696 = (($sub$ptr$lhs$cast694) - ($sub$ptr$rhs$cast695))|0;
     _out($f,$s668$1,$sub$ptr$sub696);
     $incdec$ptr698 = ((($d$5438)) + 4|0);
     $cmp665 = ($incdec$ptr698>>>0)>($z$0>>>0);
     if ($cmp665) {
      break;
     } else {
      $d$5438 = $incdec$ptr698;
     }
    }
    $tobool609$not = $tobool609 ^ 1;
    $and702 = $fl & 8;
    $tobool703 = ($and702|0)==(0);
    $or$cond409 = $tobool703 & $tobool609$not;
    if (!($or$cond409)) {
     _out($f,37238,1);
    }
    $cmp707430 = ($incdec$ptr698>>>0)<($z$9$lcssa>>>0);
    $cmp710431 = ($p$addr$3|0)>(0);
    $73 = $cmp707430 & $cmp710431;
    if ($73) {
     $d$6432 = $incdec$ptr698;$p$addr$4433 = $p$addr$3;
     while(1) {
      $74 = HEAP32[$d$6432>>2]|0;
      $75 = (_fmt_u($74,0,$add$ptr671)|0);
      $cmp722427 = ($75>>>0)>($buf>>>0);
      if ($cmp722427) {
       $76 = $75;
       $77 = (($76) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($77|0))|0;
       $s715$0428 = $75;
       while(1) {
        $incdec$ptr725 = ((($s715$0428)) + -1|0);
        $cmp722 = ($incdec$ptr725>>>0)>($buf>>>0);
        if ($cmp722) {
         $s715$0428 = $incdec$ptr725;
        } else {
         $s715$0$lcssa = $incdec$ptr725;
         break;
        }
       }
      } else {
       $s715$0$lcssa = $75;
      }
      $78 = ($p$addr$4433|0)<(9);
      $cond732 = $78 ? $p$addr$4433 : 9;
      _out($f,$s715$0$lcssa,$cond732);
      $incdec$ptr734 = ((($d$6432)) + 4|0);
      $sub735 = (($p$addr$4433) + -9)|0;
      $cmp707 = ($incdec$ptr734>>>0)<($z$9$lcssa>>>0);
      $cmp710 = ($p$addr$4433|0)>(9);
      $79 = $cmp707 & $cmp710;
      if ($79) {
       $d$6432 = $incdec$ptr734;$p$addr$4433 = $sub735;
      } else {
       $p$addr$4$lcssa = $sub735;
       break;
      }
     }
    } else {
     $p$addr$4$lcssa = $p$addr$3;
    }
    $add737 = (($p$addr$4$lcssa) + 9)|0;
    _pad_659($f,48,$add737,9,0);
   } else {
    $add$ptr742 = ((($a$9)) + 4|0);
    $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $add$ptr742;
    $cmp745442 = ($a$9>>>0)<($spec$select410>>>0);
    $cmp748443 = ($p$addr$3|0)>(-1);
    $80 = $cmp745442 & $cmp748443;
    if ($80) {
     $add$ptr756 = ((($buf)) + 9|0);
     $and780 = $fl & 8;
     $tobool781 = ($and780|0)==(0);
     $sub$ptr$lhs$cast787 = $add$ptr756;
     $81 = (0 - ($sub$ptr$rhs$cast$le))|0;
     $incdec$ptr763 = ((($buf)) + 8|0);
     $d$7444 = $a$9;$p$addr$5445 = $p$addr$3;
     while(1) {
      $82 = HEAP32[$d$7444>>2]|0;
      $83 = (_fmt_u($82,0,$add$ptr756)|0);
      $cmp760 = ($83|0)==($add$ptr756|0);
      if ($cmp760) {
       HEAP8[$incdec$ptr763>>0] = 48;
       $s753$0 = $incdec$ptr763;
      } else {
       $s753$0 = $83;
      }
      $cmp765 = ($d$7444|0)==($a$9|0);
      do {
       if ($cmp765) {
        $incdec$ptr776 = ((($s753$0)) + 1|0);
        _out($f,$s753$0,1);
        $cmp777 = ($p$addr$5445|0)<(1);
        $or$cond411 = $tobool781 & $cmp777;
        if ($or$cond411) {
         $s753$2 = $incdec$ptr776;
         break;
        }
        _out($f,37238,1);
        $s753$2 = $incdec$ptr776;
       } else {
        $cmp770439 = ($s753$0>>>0)>($buf>>>0);
        if (!($cmp770439)) {
         $s753$2 = $s753$0;
         break;
        }
        $scevgep513 = (($s753$0) + ($81)|0);
        $scevgep513514 = $scevgep513;
        _memset(($buf|0),48,($scevgep513514|0))|0;
        $s753$1440 = $s753$0;
        while(1) {
         $incdec$ptr773 = ((($s753$1440)) + -1|0);
         $cmp770 = ($incdec$ptr773>>>0)>($buf>>>0);
         if ($cmp770) {
          $s753$1440 = $incdec$ptr773;
         } else {
          $s753$2 = $incdec$ptr773;
          break;
         }
        }
       }
      } while(0);
      $sub$ptr$rhs$cast788 = $s753$2;
      $sub$ptr$sub789 = (($sub$ptr$lhs$cast787) - ($sub$ptr$rhs$cast788))|0;
      $cmp790 = ($p$addr$5445|0)>($sub$ptr$sub789|0);
      $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5445;
      _out($f,$s753$2,$cond800);
      $sub806 = (($p$addr$5445) - ($sub$ptr$sub789))|0;
      $incdec$ptr808 = ((($d$7444)) + 4|0);
      $cmp745 = ($incdec$ptr808>>>0)<($spec$select410>>>0);
      $cmp748 = ($sub806|0)>(-1);
      $84 = $cmp745 & $cmp748;
      if ($84) {
       $d$7444 = $incdec$ptr808;$p$addr$5445 = $sub806;
      } else {
       $p$addr$5$lcssa = $sub806;
       break;
      }
     }
    } else {
     $p$addr$5$lcssa = $p$addr$3;
    }
    $add810 = (($p$addr$5$lcssa) + 18)|0;
    _pad_659($f,48,$add810,18,0);
    $sub$ptr$lhs$cast811 = $arrayidx;
    $sub$ptr$rhs$cast812 = $estr$2;
    $sub$ptr$sub813 = (($sub$ptr$lhs$cast811) - ($sub$ptr$rhs$cast812))|0;
    _out($f,$estr$2,$sub$ptr$sub813);
   }
   $xor816 = $fl ^ 8192;
   _pad_659($f,32,$w,$add653,$xor816);
   $add653$sink524 = $add653;
  }
 } while(0);
 $cmp818 = ($add653$sink524|0)<($w|0);
 $w$add653 = $cmp818 ? $w : $add653$sink524;
 STACKTOP = sp;return ($w$add653|0);
}
function _pop_arg_long_double($arg,$ap) {
 $arg = $arg|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 8|0);
 $expanded1 = $1;
 $expanded = (($expanded1) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 8|0);
 $expanded5 = $3;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $4 = $2 & $expanded3;
 $5 = $4;
 $6 = +HEAPF64[$5>>3];
 $arglist_next = ((($5)) + 8|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAPF64[$arg>>3] = $6;
 return;
}
function ___vfprintf_internal($f,$fmt,$ap,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $and11 = 0, $and36 = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call21 = 0, $call2133 = 0, $call6 = 0, $cmp = 0;
 var $cmp5 = 0, $cmp7 = 0, $cond = 0, $internal_buf = 0, $lock = 0, $mode = 0, $nl_arg = 0, $nl_type = 0, $or = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $spec$select32 = 0, $tobool = 0, $tobool22 = 0, $tobool26 = 0, $tobool37 = 0, $tobool41 = 0, $vacopy_currentptr = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 208|0;
 $nl_type = sp + 160|0;
 $nl_arg = sp + 80|0;
 $internal_buf = sp;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $lock = ((($f)) + 76|0);
  $0 = HEAP32[$lock>>2]|0;
  $cmp5 = ($0|0)>(-1);
  if ($cmp5) {
   $call6 = (___lockfile($f)|0);
   $cond = $call6;
  } else {
   $cond = 0;
  }
  $1 = HEAP32[$f>>2]|0;
  $and = $1 & 32;
  $mode = ((($f)) + 74|0);
  $2 = HEAP8[$mode>>0]|0;
  $cmp7 = ($2<<24>>24)<(1);
  if ($cmp7) {
   $and11 = $1 & -33;
   HEAP32[$f>>2] = $and11;
  }
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $tobool = ($3|0)==(0);
  if ($tobool) {
   $buf = ((($f)) + 44|0);
   $4 = HEAP32[$buf>>2]|0;
   HEAP32[$buf>>2] = $internal_buf;
   $wbase = ((($f)) + 28|0);
   HEAP32[$wbase>>2] = $internal_buf;
   $wpos = ((($f)) + 20|0);
   HEAP32[$wpos>>2] = $internal_buf;
   HEAP32[$buf_size>>2] = 80;
   $add$ptr = ((($internal_buf)) + 80|0);
   $wend = ((($f)) + 16|0);
   HEAP32[$wend>>2] = $add$ptr;
   $call21 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $tobool22 = ($4|0)==(0|0);
   if ($tobool22) {
    $ret$1 = $call21;
   } else {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    (FUNCTION_TABLE_iiii[$5 & 15]($f,0,0)|0);
    $6 = HEAP32[$wpos>>2]|0;
    $tobool26 = ($6|0)==(0|0);
    $spec$select = $tobool26 ? -1 : $call21;
    HEAP32[$buf>>2] = $4;
    HEAP32[$buf_size>>2] = 0;
    HEAP32[$wend>>2] = 0;
    HEAP32[$wbase>>2] = 0;
    HEAP32[$wpos>>2] = 0;
    $ret$1 = $spec$select;
   }
  } else {
   $call2133 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $ret$1 = $call2133;
  }
  $7 = HEAP32[$f>>2]|0;
  $and36 = $7 & 32;
  $tobool37 = ($and36|0)==(0);
  $spec$select32 = $tobool37 ? $ret$1 : -1;
  $or = $7 | $and;
  HEAP32[$f>>2] = $or;
  $tobool41 = ($cond|0)==(0);
  if (!($tobool41)) {
   ___unlockfile($f);
  }
  $retval$0 = $spec$select32;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $$ = 0, $$lcssa213 = 0, $$pre = 0, $$pre261 = 0, $$pre262 = 0, $$pre263 = 0, $$pre263$pre = 0, $$pre264 = 0, $$pre267 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr258 = 0, $add$ptr341 = 0, $add$ptr354 = 0, $add$ptr468 = 0, $add$ptr88 = 0, $add270 = 0, $add323 = 0, $add390 = 0, $add407 = 0, $add436 = 0, $and = 0, $and211 = 0, $and215 = 0, $and217 = 0, $and220 = 0;
 var $and233 = 0, $and250 = 0, $and255 = 0, $and264 = 0, $and290 = 0, $and295 = 0, $and310 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx174 = 0;
 var $arrayidx193 = 0, $arrayidx207 = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx365 = 0, $arrayidx40 = 0, $arrayidx464 = 0, $arrayidx476 = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx78 = 0, $arrayidx81 = 0, $brmerge = 0, $brmerge235 = 0, $buf = 0, $call = 0, $call104 = 0, $call121 = 0, $call160 = 0, $call33 = 0;
 var $call351 = 0, $call379 = 0, $call406 = 0, $call424 = 0, $call70 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp126 = 0, $cmp13 = 0, $cmp166 = 0, $cmp177 = 0, $cmp18 = 0, $cmp182 = 0, $cmp185 = 0, $cmp212 = 0, $cmp241 = 0, $cmp271 = 0;
 var $cmp307 = 0, $cmp324 = 0, $cmp37 = 0, $cmp372 = 0, $cmp372242 = 0, $cmp380 = 0, $cmp385 = 0, $cmp399 = 0, $cmp399247 = 0, $cmp408 = 0, $cmp416 = 0, $cmp429 = 0, $cmp437 = 0, $cmp461 = 0, $cmp473 = 0, $cmp50 = 0, $cmp50231 = 0, $cmp65 = 0, $cmp75 = 0, $cmp97 = 0;
 var $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond246 = 0, $cond350 = 0, $cond421 = 0, $conv120 = 0, $conv130 = 0, $conv134 = 0, $conv164 = 0, $conv172 = 0, $conv175 = 0, $conv208 = 0, $conv230 = 0, $conv233 = 0, $conv32 = 0, $conv41 = 0, $conv48 = 0;
 var $conv48229 = 0, $conv69 = 0, $conv79 = 0, $conv83 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0;
 var $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $i137 = 0, $i86 = 0, $inc = 0, $inc483 = 0, $incdec$ptr = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr378 = 0, $incdec$ptr405 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $incdec$ptr93 = 0, $l$0 = 0, $l$0$ph = 0;
 var $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot = 0, $lnot$ext = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0, $or100 = 0, $or247 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add323 = 0, $p$3 = 0;
 var $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $shl = 0, $shl232 = 0, $shl60 = 0, $shr199 = 0, $spec$select = 0, $spec$select193 = 0, $spec$select195 = 0, $spec$select200 = 0, $spec$select201 = 0, $spec$select202 = 0;
 var $spec$select203 = 0, $spec$select204 = 0, $spec$select205 = 0, $spec$select206 = 0, $spec$select207 = 0, $spec$select208 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast356 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast268 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast357 = 0, $sub$ptr$rhs$cast427 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub358 = 0, $sub$ptr$sub428 = 0, $sub101 = 0, $sub131 = 0, $sub135 = 0, $sub165 = 0, $sub173 = 0, $sub176 = 0, $sub384 = 0, $sub42 = 0, $sub49 = 0, $sub49230 = 0, $sub49238 = 0, $sub80 = 0, $sub84 = 0, $t$0 = 0, $t$1 = 0;
 var $tobool = 0, $tobool122 = 0, $tobool141 = 0, $tobool179 = 0, $tobool209 = 0, $tobool218 = 0, $tobool25 = 0, $tobool256 = 0, $tobool265 = 0, $tobool28 = 0, $tobool291 = 0, $tobool296 = 0, $tobool315 = 0, $tobool34 = 0, $tobool345 = 0, $tobool352 = 0, $tobool375 = 0, $tobool402 = 0, $tobool454 = 0, $tobool457 = 0;
 var $tobool465 = 0, $tobool477 = 0, $tobool55 = 0, $tobool55234 = 0, $tobool71 = 0, $tobool90 = 0, $trunc = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $xor = 0, $xor444 = 0, $xor452 = 0, $z$0$lcssa = 0, $z$0226 = 0, $z$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $s = sp + 56|0;
 $arg = sp + 40|0;
 $buf = sp;
 $wc = sp + 48|0;
 $mb = sp + 60|0;
 HEAP32[$s>>2] = $fmt;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr206 = ((($buf)) + 40|0);
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = ((($buf)) + 39|0);
 $arrayidx365 = ((($wc)) + 4|0);
 $cnt$0$ph = 0;$l$0$ph = 0;$l10n$0$ph = 0;
 L1: while(1) {
  $cnt$0 = $cnt$0$ph;$l$0 = $l$0$ph;
  while(1) {
   $cmp = ($cnt$0|0)>(-1);
   do {
    if ($cmp) {
     $sub = (2147483647 - ($cnt$0))|0;
     $cmp1 = ($l$0|0)>($sub|0);
     if ($cmp1) {
      $call = (___errno_location()|0);
      HEAP32[$call>>2] = 75;
      $cnt$1 = -1;
      break;
     } else {
      $add = (($l$0) + ($cnt$0))|0;
      $cnt$1 = $add;
      break;
     }
    } else {
     $cnt$1 = $cnt$0;
    }
   } while(0);
   $0 = HEAP32[$s>>2]|0;
   $1 = HEAP8[$0>>0]|0;
   $tobool = ($1<<24>>24)==(0);
   if ($tobool) {
    label = 92;
    break L1;
   }
   $2 = $1;$3 = $0;
   L12: while(1) {
    switch ($2<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $z$0$lcssa = $3;
     break L12;
     break;
    }
    default: {
    }
    }
    $incdec$ptr = ((($3)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr;
    $$pre = HEAP8[$incdec$ptr>>0]|0;
    $2 = $$pre;$3 = $incdec$ptr;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $4 = $3;$z$0226 = $3;
     while(1) {
      $arrayidx16 = ((($4)) + 1|0);
      $5 = HEAP8[$arrayidx16>>0]|0;
      $cmp18 = ($5<<24>>24)==(37);
      if (!($cmp18)) {
       $z$0$lcssa = $z$0226;
       break L15;
      }
      $incdec$ptr23 = ((($z$0226)) + 1|0);
      $add$ptr = ((($4)) + 2|0);
      HEAP32[$s>>2] = $add$ptr;
      $6 = HEAP8[$add$ptr>>0]|0;
      $cmp13 = ($6<<24>>24)==(37);
      if ($cmp13) {
       $4 = $add$ptr;$z$0226 = $incdec$ptr23;
      } else {
       $z$0$lcssa = $incdec$ptr23;
       break;
      }
     }
    }
   } while(0);
   $sub$ptr$lhs$cast = $z$0$lcssa;
   $sub$ptr$rhs$cast = $0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   if ($tobool25) {
    _out($f,$0,$sub$ptr$sub);
   }
   $tobool28 = ($sub$ptr$sub|0)==(0);
   if ($tobool28) {
    break;
   } else {
    $cnt$0 = $cnt$1;$l$0 = $sub$ptr$sub;
   }
  }
  $7 = HEAP32[$s>>2]|0;
  $arrayidx31 = ((($7)) + 1|0);
  $8 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $8 << 24 >> 24;
  $call33 = (_isdigit($conv32)|0);
  $tobool34 = ($call33|0)==(0);
  $$pre261 = HEAP32[$s>>2]|0;
  if ($tobool34) {
   $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
  } else {
   $arrayidx35 = ((($$pre261)) + 2|0);
   $9 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($9<<24>>24)==(36);
   if ($cmp37) {
    $arrayidx40 = ((($$pre261)) + 1|0);
    $10 = HEAP8[$arrayidx40>>0]|0;
    $conv41 = $10 << 24 >> 24;
    $sub42 = (($conv41) + -48)|0;
    $$sink = 3;$argpos$0 = $sub42;$l10n$1 = 1;
   } else {
    $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
   }
  }
  $incdec$ptr45 = (($$pre261) + ($$sink)|0);
  HEAP32[$s>>2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45>>0]|0;
  $conv48229 = $11 << 24 >> 24;
  $sub49230 = (($conv48229) + -32)|0;
  $cmp50231 = ($sub49230>>>0)>(31);
  $shl232 = 1 << $sub49230;
  $and233 = $shl232 & 75913;
  $tobool55234 = ($and233|0)==(0);
  $brmerge235 = $cmp50231 | $tobool55234;
  if ($brmerge235) {
   $$lcssa213 = $11;$fl$0$lcssa = 0;$storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;$storemerge187236 = $incdec$ptr45;$sub49238 = $sub49230;
   while(1) {
    $shl60 = 1 << $sub49238;
    $or = $shl60 | $fl$0237;
    $incdec$ptr62 = ((($storemerge187236)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62>>0]|0;
    $conv48 = $12 << 24 >> 24;
    $sub49 = (($conv48) + -32)|0;
    $cmp50 = ($sub49>>>0)>(31);
    $shl = 1 << $sub49;
    $and = $shl & 75913;
    $tobool55 = ($and|0)==(0);
    $brmerge = $cmp50 | $tobool55;
    if ($brmerge) {
     $$lcssa213 = $12;$fl$0$lcssa = $or;$storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;$storemerge187236 = $incdec$ptr62;$sub49238 = $sub49;
    }
   }
  }
  $cmp65 = ($$lcssa213<<24>>24)==(42);
  if ($cmp65) {
   $arrayidx68 = ((($storemerge187$lcssa)) + 1|0);
   $13 = HEAP8[$arrayidx68>>0]|0;
   $conv69 = $13 << 24 >> 24;
   $call70 = (_isdigit($conv69)|0);
   $tobool71 = ($call70|0)==(0);
   if ($tobool71) {
    label = 27;
   } else {
    $14 = HEAP32[$s>>2]|0;
    $arrayidx73 = ((($14)) + 2|0);
    $15 = HEAP8[$arrayidx73>>0]|0;
    $cmp75 = ($15<<24>>24)==(36);
    if ($cmp75) {
     $arrayidx78 = ((($14)) + 1|0);
     $16 = HEAP8[$arrayidx78>>0]|0;
     $conv79 = $16 << 24 >> 24;
     $sub80 = (($conv79) + -48)|0;
     $arrayidx81 = (($nl_type) + ($sub80<<2)|0);
     HEAP32[$arrayidx81>>2] = 10;
     $17 = HEAP8[$arrayidx78>>0]|0;
     $conv83 = $17 << 24 >> 24;
     $sub84 = (($conv83) + -48)|0;
     $i86 = (($nl_arg) + ($sub84<<3)|0);
     $18 = $i86;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $add$ptr88 = ((($14)) + 3|0);
     $l10n$2 = 1;$storemerge188 = $add$ptr88;$w$0 = $20;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $tobool90 = ($l10n$1|0)==(0);
    if (!($tobool90)) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $arglist_current = HEAP32[$ap>>2]|0;
     $24 = $arglist_current;
     $25 = ((0) + 4|0);
     $expanded4 = $25;
     $expanded = (($expanded4) - 1)|0;
     $26 = (($24) + ($expanded))|0;
     $27 = ((0) + 4|0);
     $expanded8 = $27;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $28 = $26 & $expanded6;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next = ((($29)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $cond = $30;
    } else {
     $cond = 0;
    }
    $31 = HEAP32[$s>>2]|0;
    $incdec$ptr93 = ((($31)) + 1|0);
    $l10n$2 = 0;$storemerge188 = $incdec$ptr93;$w$0 = $cond;
   }
   HEAP32[$s>>2] = $storemerge188;
   $cmp97 = ($w$0|0)<(0);
   $or100 = $fl$0$lcssa | 8192;
   $sub101 = (0 - ($w$0))|0;
   $spec$select200 = $cmp97 ? $or100 : $fl$0$lcssa;
   $spec$select201 = $cmp97 ? $sub101 : $w$0;
   $33 = $storemerge188;$fl$1 = $spec$select200;$l10n$3 = $l10n$2;$w$1 = $spec$select201;
  } else {
   $call104 = (_getint($s)|0);
   $cmp105 = ($call104|0)<(0);
   if ($cmp105) {
    $retval$0 = -1;
    break;
   }
   $$pre262 = HEAP32[$s>>2]|0;
   $33 = $$pre262;$fl$1 = $fl$0$lcssa;$l10n$3 = $l10n$1;$w$1 = $call104;
  }
  $32 = HEAP8[$33>>0]|0;
  $cmp111 = ($32<<24>>24)==(46);
  do {
   if ($cmp111) {
    $arrayidx114 = ((($33)) + 1|0);
    $34 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($34<<24>>24)==(42);
    if (!($cmp116)) {
     HEAP32[$s>>2] = $arrayidx114;
     $call160 = (_getint($s)|0);
     $$pre263$pre = HEAP32[$s>>2]|0;
     $$pre263 = $$pre263$pre;$p$0 = $call160;
     break;
    }
    $arrayidx119 = ((($33)) + 2|0);
    $35 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $35 << 24 >> 24;
    $call121 = (_isdigit($conv120)|0);
    $tobool122 = ($call121|0)==(0);
    if (!($tobool122)) {
     $36 = HEAP32[$s>>2]|0;
     $arrayidx124 = ((($36)) + 3|0);
     $37 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($37<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx129 = ((($36)) + 2|0);
      $38 = HEAP8[$arrayidx129>>0]|0;
      $conv130 = $38 << 24 >> 24;
      $sub131 = (($conv130) + -48)|0;
      $arrayidx132 = (($nl_type) + ($sub131<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $39 = HEAP8[$arrayidx129>>0]|0;
      $conv134 = $39 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $40 = $i137;
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + 4)|0;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $add$ptr139 = ((($36)) + 4|0);
      HEAP32[$s>>2] = $add$ptr139;
      $$pre263 = $add$ptr139;$p$0 = $42;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $46 = $arglist_current2;
     $47 = ((0) + 4|0);
     $expanded11 = $47;
     $expanded10 = (($expanded11) - 1)|0;
     $48 = (($46) + ($expanded10))|0;
     $49 = ((0) + 4|0);
     $expanded15 = $49;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $50 = $48 & $expanded13;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $arglist_next3 = ((($51)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $cond149 = $52;
    } else {
     $cond149 = 0;
    }
    $53 = HEAP32[$s>>2]|0;
    $add$ptr150 = ((($53)) + 2|0);
    HEAP32[$s>>2] = $add$ptr150;
    $$pre263 = $add$ptr150;$p$0 = $cond149;
   } else {
    $$pre263 = $33;$p$0 = -1;
   }
  } while(0);
  $55 = $$pre263;$st$0 = 0;
  while(1) {
   $54 = HEAP8[$55>>0]|0;
   $conv164 = $54 << 24 >> 24;
   $sub165 = (($conv164) + -65)|0;
   $cmp166 = ($sub165>>>0)>(57);
   if ($cmp166) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = ((($55)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr171;
   $56 = HEAP8[$55>>0]|0;
   $conv172 = $56 << 24 >> 24;
   $sub173 = (($conv172) + -65)|0;
   $arrayidx174 = ((32928 + (($st$0*58)|0)|0) + ($sub173)|0);
   $57 = HEAP8[$arrayidx174>>0]|0;
   $conv175 = $57&255;
   $sub176 = (($conv175) + -1)|0;
   $cmp177 = ($sub176>>>0)<(8);
   if ($cmp177) {
    $55 = $incdec$ptr171;$st$0 = $conv175;
   } else {
    break;
   }
  }
  $tobool179 = ($57<<24>>24)==(0);
  if ($tobool179) {
   $retval$0 = -1;
   break;
  }
  $cmp182 = ($57<<24>>24)==(19);
  $cmp185 = ($argpos$0|0)>(-1);
  do {
   if ($cmp182) {
    if ($cmp185) {
     $retval$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($cmp185) {
     $arrayidx193 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx193>>2] = $conv175;
     $58 = (($nl_arg) + ($argpos$0<<3)|0);
     $59 = $58;
     $60 = $59;
     $61 = HEAP32[$60>>2]|0;
     $62 = (($59) + 4)|0;
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = $arg;
     $66 = $65;
     HEAP32[$66>>2] = $61;
     $67 = (($65) + 4)|0;
     $68 = $67;
     HEAP32[$68>>2] = $64;
     label = 54;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     break L1;
    }
    _pop_arg($arg,$conv175,$ap,$pop_arg_long_double);
    $$pre264 = HEAP32[$s>>2]|0;
    $69 = $$pre264;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $incdec$ptr171;
    label = 55;
   } else {
    $l$0$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $arrayidx207 = ((($69)) + -1|0);
    $70 = HEAP8[$arrayidx207>>0]|0;
    $conv208 = $70 << 24 >> 24;
    $tobool209 = ($st$0|0)!=(0);
    $and211 = $conv208 & 15;
    $cmp212 = ($and211|0)==(3);
    $or$cond189 = $tobool209 & $cmp212;
    $and215 = $conv208 & -33;
    $t$0 = $or$cond189 ? $and215 : $conv208;
    $and217 = $fl$1 & 8192;
    $tobool218 = ($and217|0)==(0);
    $and220 = $fl$1 & -65537;
    $spec$select = $tobool218 ? $fl$1 : $and220;
    L79: do {
     switch ($t$0|0) {
     case 110:  {
      $trunc = $st$0&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $77 = HEAP32[$arg>>2]|0;
       HEAP32[$77>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $78 = HEAP32[$arg>>2]|0;
       HEAP32[$78>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $79 = ($cnt$1|0)<(0);
       $80 = $79 << 31 >> 31;
       $81 = HEAP32[$arg>>2]|0;
       $82 = $81;
       $83 = $82;
       HEAP32[$83>>2] = $cnt$1;
       $84 = (($82) + 4)|0;
       $85 = $84;
       HEAP32[$85>>2] = $80;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $conv230 = $cnt$1&65535;
       $86 = HEAP32[$arg>>2]|0;
       HEAP16[$86>>1] = $conv230;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $conv233 = $cnt$1&255;
       $87 = HEAP32[$arg>>2]|0;
       HEAP8[$87>>0] = $conv233;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $88 = HEAP32[$arg>>2]|0;
       HEAP32[$88>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $89 = ($cnt$1|0)<(0);
       $90 = $89 << 31 >> 31;
       $91 = HEAP32[$arg>>2]|0;
       $92 = $91;
       $93 = $92;
       HEAP32[$93>>2] = $cnt$1;
       $94 = (($92) + 4)|0;
       $95 = $94;
       HEAP32[$95>>2] = $90;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $l$0$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $cmp241 = ($p$0>>>0)>(8);
      $cond246 = $cmp241 ? $p$0 : 8;
      $or247 = $spec$select | 8;
      $fl$3 = $or247;$p$1 = $cond246;$t$1 = 120;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $spec$select;$p$1 = $p$0;$t$1 = $t$0;
      label = 67;
      break;
     }
     case 111:  {
      $112 = $arg;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($112) + 4)|0;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (_fmt_o($114,$117,$add$ptr206)|0);
      $and264 = $spec$select & 8;
      $tobool265 = ($and264|0)==(0);
      $sub$ptr$rhs$cast268 = $118;
      $sub$ptr$sub269 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast268))|0;
      $cmp271 = ($p$0|0)>($sub$ptr$sub269|0);
      $add270 = (($sub$ptr$sub269) + 1)|0;
      $119 = $tobool265 | $cmp271;
      $spec$select204 = $119 ? $p$0 : $add270;
      $a$0 = $118;$fl$4 = $spec$select;$p$2 = $spec$select204;$pl$1 = 0;$prefix$1 = 37186;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $120 = $arg;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)<(0);
      if ($126) {
       $127 = (_i64Subtract(0,0,($122|0),($125|0))|0);
       $128 = (getTempRet0() | 0);
       $129 = $arg;
       $130 = $129;
       HEAP32[$130>>2] = $127;
       $131 = (($129) + 4)|0;
       $132 = $131;
       HEAP32[$132>>2] = $128;
       $135 = $127;$136 = $128;$pl$0 = 1;$prefix$0 = 37186;
       label = 72;
       break L79;
      } else {
       $and290 = $spec$select & 2048;
       $tobool291 = ($and290|0)==(0);
       $and295 = $spec$select & 1;
       $tobool296 = ($and295|0)==(0);
       $$ = $tobool296 ? 37186 : (37188);
       $spec$select205 = $tobool291 ? $$ : (37187);
       $133 = $spec$select & 2049;
       $134 = ($133|0)!=(0);
       $spec$select206 = $134&1;
       $135 = $122;$136 = $125;$pl$0 = $spec$select206;$prefix$0 = $spec$select205;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $71 = $arg;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $135 = $73;$136 = $76;$pl$0 = 0;$prefix$0 = 37186;
      label = 72;
      break;
     }
     case 99:  {
      $147 = $arg;
      $148 = $147;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($147) + 4)|0;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = $149&255;
      HEAP8[$add$ptr341>>0] = $153;
      $a$1 = $add$ptr341;$fl$6 = $and220;$p$5 = 1;$pl$2 = 0;$prefix$2 = 37186;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
      break;
     }
     case 115:  {
      $154 = HEAP32[$arg>>2]|0;
      $tobool345 = ($154|0)==(0|0);
      $cond350 = $tobool345 ? 37196 : $154;
      $call351 = (_memchr($cond350,0,$p$0)|0);
      $tobool352 = ($call351|0)==(0|0);
      $sub$ptr$lhs$cast356 = $call351;
      $sub$ptr$rhs$cast357 = $cond350;
      $sub$ptr$sub358 = (($sub$ptr$lhs$cast356) - ($sub$ptr$rhs$cast357))|0;
      $add$ptr354 = (($cond350) + ($p$0)|0);
      $p$3 = $tobool352 ? $p$0 : $sub$ptr$sub358;
      $z$1 = $tobool352 ? $add$ptr354 : $call351;
      $$pre267 = $z$1;
      $a$1 = $cond350;$fl$6 = $and220;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 37186;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $$pre267;
      break;
     }
     case 67:  {
      $155 = $arg;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      HEAP32[$wc>>2] = $157;
      HEAP32[$arrayidx365>>2] = 0;
      HEAP32[$arg>>2] = $wc;
      $p$4269 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $cmp372242 = ($p$0|0)==(0);
      if ($cmp372242) {
       _pad_659($f,32,$w$1,0,$spec$select);
       $i$0217271 = 0;
       label = 89;
      } else {
       $p$4269 = $p$0;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $165 = +HEAPF64[$arg>>3];
      $call424 = (FUNCTION_TABLE_iidiiii[$fmt_fp & 1]($f,$165,$w$1,$p$0,$spec$select,$t$0)|0);
      $l$0$ph$be = $call424;
      break L77;
      break;
     }
     default: {
      $a$1 = $0;$fl$6 = $spec$select;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 37186;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $96 = $arg;
      $97 = $96;
      $98 = HEAP32[$97>>2]|0;
      $99 = (($96) + 4)|0;
      $100 = $99;
      $101 = HEAP32[$100>>2]|0;
      $and250 = $t$1 & 32;
      $102 = (_fmt_x($98,$101,$add$ptr206,$and250)|0);
      $103 = $arg;
      $104 = $103;
      $105 = HEAP32[$104>>2]|0;
      $106 = (($103) + 4)|0;
      $107 = $106;
      $108 = HEAP32[$107>>2]|0;
      $109 = ($105|0)==(0);
      $110 = ($108|0)==(0);
      $111 = $109 & $110;
      $and255 = $fl$3 & 8;
      $tobool256 = ($and255|0)==(0);
      $or$cond190 = $tobool256 | $111;
      $shr199 = $t$1 >>> 4;
      $add$ptr258 = (37186 + ($shr199)|0);
      $spec$select202 = $or$cond190 ? 37186 : $add$ptr258;
      $spec$select203 = $or$cond190 ? 0 : 2;
      $a$0 = $102;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = $spec$select203;$prefix$1 = $spec$select202;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $137 = (_fmt_u($135,$136,$add$ptr206)|0);
      $a$0 = $137;$fl$4 = $spec$select;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $161 = HEAP32[$arg>>2]|0;
      $i$0243 = 0;$ws$0244 = $161;
      while(1) {
       $162 = HEAP32[$ws$0244>>2]|0;
       $tobool375 = ($162|0)==(0);
       if ($tobool375) {
        $i$0217 = $i$0243;
        break;
       }
       $call379 = (_wctomb($mb,$162)|0);
       $cmp380 = ($call379|0)<(0);
       $sub384 = (($p$4269) - ($i$0243))|0;
       $cmp385 = ($call379>>>0)>($sub384>>>0);
       $or$cond194 = $cmp380 | $cmp385;
       if ($or$cond194) {
        label = 83;
        break;
       }
       $incdec$ptr378 = ((($ws$0244)) + 4|0);
       $add390 = (($call379) + ($i$0243))|0;
       $cmp372 = ($p$4269>>>0)>($add390>>>0);
       if ($cmp372) {
        $i$0243 = $add390;$ws$0244 = $incdec$ptr378;
       } else {
        $i$0217 = $add390;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($cmp380) {
        $retval$0 = -1;
        break L1;
       } else {
        $i$0217 = $i$0243;
       }
      }
      _pad_659($f,32,$w$1,$i$0217,$spec$select);
      $cmp399247 = ($i$0217|0)==(0);
      if ($cmp399247) {
       $i$0217271 = 0;
       label = 89;
      } else {
       $163 = HEAP32[$arg>>2]|0;
       $i$1248 = 0;$ws$1249 = $163;
       while(1) {
        $164 = HEAP32[$ws$1249>>2]|0;
        $tobool402 = ($164|0)==(0);
        if ($tobool402) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $call406 = (_wctomb($mb,$164)|0);
        $add407 = (($call406) + ($i$1248))|0;
        $cmp408 = ($add407|0)>($i$0217|0);
        if ($cmp408) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $incdec$ptr405 = ((($ws$1249)) + 4|0);
        _out($f,$mb,$call406);
        $cmp399 = ($add407>>>0)<($i$0217>>>0);
        if ($cmp399) {
         $i$1248 = $add407;$ws$1249 = $incdec$ptr405;
        } else {
         $i$0217271 = $i$0217;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $cmp307 = ($p$2|0)>(-1);
     $and310 = $fl$4 & -65537;
     $spec$select193 = $cmp307 ? $and310 : $fl$4;
     $138 = $arg;
     $139 = $138;
     $140 = HEAP32[$139>>2]|0;
     $141 = (($138) + 4)|0;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)!=(0);
     $145 = ($143|0)!=(0);
     $146 = $144 | $145;
     $tobool315 = ($p$2|0)!=(0);
     $or$cond = $tobool315 | $146;
     $sub$ptr$rhs$cast319 = $a$0;
     $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
     $lnot = $146 ^ 1;
     $lnot$ext = $lnot&1;
     $add323 = (($sub$ptr$sub320) + ($lnot$ext))|0;
     $cmp324 = ($p$2|0)>($add323|0);
     $p$2$add323 = $cmp324 ? $p$2 : $add323;
     $spec$select207 = $or$cond ? $p$2$add323 : 0;
     $spec$select208 = $or$cond ? $a$0 : $add$ptr206;
     $a$1 = $spec$select208;$fl$6 = $spec$select193;$p$5 = $spec$select207;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
    else if ((label|0) == 89) {
     label = 0;
     $xor = $spec$select ^ 8192;
     _pad_659($f,32,$w$1,$i$0217271,$xor);
     $cmp416 = ($w$1|0)>($i$0217271|0);
     $cond421 = $cmp416 ? $w$1 : $i$0217271;
     $l$0$ph$be = $cond421;
     break;
    }
    $sub$ptr$rhs$cast427 = $a$1;
    $sub$ptr$sub428 = (($sub$ptr$lhs$cast426$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast427))|0;
    $cmp429 = ($p$5|0)<($sub$ptr$sub428|0);
    $spec$select195 = $cmp429 ? $sub$ptr$sub428 : $p$5;
    $add436 = (($spec$select195) + ($pl$2))|0;
    $cmp437 = ($w$1|0)<($add436|0);
    $w$2 = $cmp437 ? $add436 : $w$1;
    _pad_659($f,32,$w$2,$add436,$fl$6);
    _out($f,$prefix$2,$pl$2);
    $xor444 = $fl$6 ^ 65536;
    _pad_659($f,48,$w$2,$add436,$xor444);
    _pad_659($f,48,$spec$select195,$sub$ptr$sub428,0);
    _out($f,$a$1,$sub$ptr$sub428);
    $xor452 = $fl$6 ^ 8192;
    _pad_659($f,32,$w$2,$add436,$xor452);
    $l$0$ph$be = $w$2;
   }
  } while(0);
  $cnt$0$ph = $cnt$1;$l$0$ph = $l$0$ph$be;$l10n$0$ph = $l10n$3;
 }
 L123: do {
  if ((label|0) == 92) {
   $tobool454 = ($f|0)==(0|0);
   if ($tobool454) {
    $tobool457 = ($l10n$0$ph|0)==(0);
    if ($tobool457) {
     $retval$0 = 0;
    } else {
     $i$2224 = 1;
     while(1) {
      $arrayidx464 = (($nl_type) + ($i$2224<<2)|0);
      $166 = HEAP32[$arrayidx464>>2]|0;
      $tobool465 = ($166|0)==(0);
      if ($tobool465) {
       break;
      }
      $add$ptr468 = (($nl_arg) + ($i$2224<<3)|0);
      _pop_arg($add$ptr468,$166,$ap,$pop_arg_long_double);
      $inc = (($i$2224) + 1)|0;
      $cmp461 = ($inc>>>0)<(10);
      if ($cmp461) {
       $i$2224 = $inc;
      } else {
       $retval$0 = 1;
       break L123;
      }
     }
     $i$3221 = $i$2224;
     while(1) {
      $arrayidx476 = (($nl_type) + ($i$3221<<2)|0);
      $167 = HEAP32[$arrayidx476>>2]|0;
      $tobool477 = ($167|0)==(0);
      $inc483 = (($i$3221) + 1)|0;
      if (!($tobool477)) {
       $retval$0 = -1;
       break L123;
      }
      $cmp473 = ($inc483>>>0)<(10);
      if ($cmp473) {
       $i$3221 = $inc483;
      } else {
       $retval$0 = 1;
       break;
      }
     }
    }
   } else {
    $retval$0 = $cnt$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $and = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 32;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  (___fwritex($s,$l,$f)|0);
 }
 return;
}
function _getint($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $call = 0, $call5 = 0, $conv = 0, $conv1 = 0, $conv4 = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0, $mul = 0, $sub = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $conv4 = $1 << 24 >> 24;
 $call5 = (_isdigit($conv4)|0);
 $tobool6 = ($call5|0)==(0);
 if ($tobool6) {
  $i$0$lcssa = 0;
 } else {
  $i$07 = 0;
  while(1) {
   $mul = ($i$07*10)|0;
   $2 = HEAP32[$s>>2]|0;
   $3 = HEAP8[$2>>0]|0;
   $conv1 = $3 << 24 >> 24;
   $sub = (($mul) + -48)|0;
   $add = (($sub) + ($conv1))|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $4 = HEAP8[$incdec$ptr>>0]|0;
   $conv = $4 << 24 >> 24;
   $call = (_isdigit($conv)|0);
   $tobool = ($call|0)==(0);
   if ($tobool) {
    $i$0$lcssa = $add;
    break;
   } else {
    $i$07 = $add;
   }
  }
 }
 return ($i$0$lcssa|0);
}
function _pop_arg($arg,$type,$ap,$pop_arg_long_double) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0;
 var $arglist_next6 = 0, $arglist_next9 = 0, $cmp = 0, $conv16 = 0, $conv22$mask = 0, $conv28 = 0, $conv34$mask = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($type>>>0)>(20);
 L1: do {
  if (!($cmp)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $0 = $arglist_current;
     $1 = ((0) + 4|0);
     $expanded25 = $1;
     $expanded = (($expanded25) - 1)|0;
     $2 = (($0) + ($expanded))|0;
     $3 = ((0) + 4|0);
     $expanded29 = $3;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $4 = $2 & $expanded27;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $arglist_next = ((($5)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $6;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $7 = $arglist_current2;
     $8 = ((0) + 4|0);
     $expanded32 = $8;
     $expanded31 = (($expanded32) - 1)|0;
     $9 = (($7) + ($expanded31))|0;
     $10 = ((0) + 4|0);
     $expanded36 = $10;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $11 = $9 & $expanded34;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $arglist_next3 = ((($12)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $14 = ($13|0)<(0);
     $15 = $14 << 31 >> 31;
     $16 = $arg;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = (($16) + 4)|0;
     $19 = $18;
     HEAP32[$19>>2] = $15;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $20 = $arglist_current5;
     $21 = ((0) + 4|0);
     $expanded39 = $21;
     $expanded38 = (($expanded39) - 1)|0;
     $22 = (($20) + ($expanded38))|0;
     $23 = ((0) + 4|0);
     $expanded43 = $23;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $24 = $22 & $expanded41;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $arglist_next6 = ((($25)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $27 = $arg;
     $28 = $27;
     HEAP32[$28>>2] = $26;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $31 = $arglist_current8;
     $32 = ((0) + 8|0);
     $expanded46 = $32;
     $expanded45 = (($expanded46) - 1)|0;
     $33 = (($31) + ($expanded45))|0;
     $34 = ((0) + 8|0);
     $expanded50 = $34;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $35 = $33 & $expanded48;
     $36 = $35;
     $37 = $36;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $arglist_next9 = ((($36)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $43 = $arg;
     $44 = $43;
     HEAP32[$44>>2] = $39;
     $45 = (($43) + 4)|0;
     $46 = $45;
     HEAP32[$46>>2] = $42;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $47 = $arglist_current11;
     $48 = ((0) + 4|0);
     $expanded53 = $48;
     $expanded52 = (($expanded53) - 1)|0;
     $49 = (($47) + ($expanded52))|0;
     $50 = ((0) + 4|0);
     $expanded57 = $50;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $51 = $49 & $expanded55;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $arglist_next12 = ((($52)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $conv16 = $53&65535;
     $54 = $conv16 << 16 >> 16;
     $55 = ($54|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = $arg;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $61 = $arglist_current14;
     $62 = ((0) + 4|0);
     $expanded60 = $62;
     $expanded59 = (($expanded60) - 1)|0;
     $63 = (($61) + ($expanded59))|0;
     $64 = ((0) + 4|0);
     $expanded64 = $64;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $65 = $63 & $expanded62;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $arglist_next15 = ((($66)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $conv22$mask = $67 & 65535;
     $68 = $arg;
     $69 = $68;
     HEAP32[$69>>2] = $conv22$mask;
     $70 = (($68) + 4)|0;
     $71 = $70;
     HEAP32[$71>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $72 = $arglist_current17;
     $73 = ((0) + 4|0);
     $expanded67 = $73;
     $expanded66 = (($expanded67) - 1)|0;
     $74 = (($72) + ($expanded66))|0;
     $75 = ((0) + 4|0);
     $expanded71 = $75;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $76 = $74 & $expanded69;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $arglist_next18 = ((($77)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $conv28 = $78&255;
     $79 = $conv28 << 24 >> 24;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = $arg;
     $83 = $82;
     HEAP32[$83>>2] = $79;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $86 = $arglist_current20;
     $87 = ((0) + 4|0);
     $expanded74 = $87;
     $expanded73 = (($expanded74) - 1)|0;
     $88 = (($86) + ($expanded73))|0;
     $89 = ((0) + 4|0);
     $expanded78 = $89;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $90 = $88 & $expanded76;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next21 = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $conv34$mask = $92 & 255;
     $93 = $arg;
     $94 = $93;
     HEAP32[$94>>2] = $conv34$mask;
     $95 = (($93) + 4)|0;
     $96 = $95;
     HEAP32[$96>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $97 = $arglist_current23;
     $98 = ((0) + 8|0);
     $expanded81 = $98;
     $expanded80 = (($expanded81) - 1)|0;
     $99 = (($97) + ($expanded80))|0;
     $100 = ((0) + 8|0);
     $expanded85 = $100;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $101 = $99 & $expanded83;
     $102 = $101;
     $103 = +HEAPF64[$102>>3];
     $arglist_next24 = ((($102)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $103;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$pop_arg_long_double & 15]($arg,$ap);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$s,$lower) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 $lower = $lower|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $conv1 = 0, $conv4 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $5 = $0;$7 = $1;$s$addr$06 = $s;
  while(1) {
   $idxprom = $5 & 15;
   $arrayidx = (33392 + ($idxprom)|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv4 = $6&255;
   $or = $conv4 | $lower;
   $conv1 = $or&255;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv1;
   $8 = (_bitshift64Lshr(($5|0),($7|0),4)|0);
   $9 = (getTempRet0() | 0);
   $10 = ($8|0)==(0);
   $11 = ($9|0)==(0);
   $12 = $10 & $11;
   if ($12) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $5 = $8;$7 = $9;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_o($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $6 = $0;$8 = $1;$s$addr$06 = $s;
  while(1) {
   $5 = $6&255;
   $7 = $5 & 7;
   $conv = $7 | 48;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $9 = (_bitshift64Lshr(($6|0),($8|0),3)|0);
   $10 = (getTempRet0() | 0);
   $11 = ($9|0)==(0);
   $12 = ($10|0)==(0);
   $13 = $11 & $12;
   if ($13) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $6 = $9;$8 = $10;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add5 = 0, $conv = 0, $conv6 = 0, $div9 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $tobool8 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0;$8 = $1;$s$addr$013 = $s;
  while(1) {
   $9 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $10 = (getTempRet0() | 0);
   $11 = (___muldi3(($9|0),($10|0),10,0)|0);
   $12 = (getTempRet0() | 0);
   $13 = (_i64Subtract(($7|0),($8|0),($11|0),($12|0))|0);
   $14 = (getTempRet0() | 0);
   $15 = $13&255;
   $conv = $15 | 48;
   $incdec$ptr = ((($s$addr$013)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $7 = $9;$8 = $10;$s$addr$013 = $incdec$ptr;
   } else {
    break;
   }
  }
  $s$addr$0$lcssa = $incdec$ptr;$x$addr$0$lcssa$off0 = $9;
 } else {
  $s$addr$0$lcssa = $s;$x$addr$0$lcssa$off0 = $0;
 }
 $tobool8 = ($x$addr$0$lcssa$off0|0)==(0);
 if ($tobool8) {
  $s$addr$1$lcssa = $s$addr$0$lcssa;
 } else {
  $s$addr$19 = $s$addr$0$lcssa;$y$010 = $x$addr$0$lcssa$off0;
  while(1) {
   $div9 = (($y$010>>>0) / 10)&-1;
   $21 = ($div9*10)|0;
   $22 = (($y$010) - ($21))|0;
   $add5 = $22 | 48;
   $conv6 = $add5&255;
   $incdec$ptr7 = ((($s$addr$19)) + -1|0);
   HEAP8[$incdec$ptr7>>0] = $conv6;
   $23 = ($y$010>>>0)<(10);
   if ($23) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;$y$010 = $div9;
   }
  }
 }
 return ($s$addr$1$lcssa|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $and15 = 0, $and16 = 0, $and39 = 0, $cmp = 0, $cmp11 = 0, $cmp1132 = 0, $cmp28 = 0, $cmp8 = 0, $conv1 = 0;
 var $dec = 0, $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $neg = 0, $or$cond = 0, $or$cond42 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0;
 var $sub = 0, $sub22 = 0, $tobool = 0, $tobool17 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $tobool25 = 0, $tobool2526 = 0, $tobool36 = 0, $tobool40 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and39 = $0 & 3;
 $tobool40 = ($and39|0)!=(0);
 $tobool241 = ($n|0)!=(0);
 $or$cond42 = $tobool241 & $tobool40;
 L1: do {
  if ($or$cond42) {
   $1 = $c&255;
   $n$addr$043 = $n;$s$044 = $src;
   while(1) {
    $2 = HEAP8[$s$044>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa52 = $n$addr$043;$s$0$lcssa53 = $s$044;
     label = 6;
     break L1;
    }
    $incdec$ptr = ((($s$044)) + 1|0);
    $dec = (($n$addr$043) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)!=(0);
    $tobool2 = ($dec|0)!=(0);
    $or$cond = $tobool2 & $tobool;
    if ($or$cond) {
     $n$addr$043 = $dec;$s$044 = $incdec$ptr;
    } else {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    }
   }
  } else {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool241;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$0$lcssa52 = $n$addr$0$lcssa;$s$0$lcssa53 = $s$0$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa53>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $tobool36 = ($n$addr$0$lcssa52|0)==(0);
    if ($tobool36) {
     label = 16;
     break;
    } else {
     $8 = $s$0$lcssa53;
     break;
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $cmp1132 = ($n$addr$0$lcssa52>>>0)>(3);
   L13: do {
    if ($cmp1132) {
     $n$addr$133 = $n$addr$0$lcssa52;$w$034 = $s$0$lcssa53;
     while(1) {
      $6 = HEAP32[$w$034>>2]|0;
      $xor = $6 ^ $mul;
      $sub = (($xor) + -16843009)|0;
      $neg = $xor & -2139062144;
      $and15 = $neg ^ -2139062144;
      $and16 = $and15 & $sub;
      $tobool17 = ($and16|0)==(0);
      if (!($tobool17)) {
       $$in = $w$034;$n$addr$1$lcssa55 = $n$addr$133;
       break L13;
      }
      $incdec$ptr21 = ((($w$034)) + 4|0);
      $sub22 = (($n$addr$133) + -4)|0;
      $cmp11 = ($sub22>>>0)>(3);
      if ($cmp11) {
       $n$addr$133 = $sub22;$w$034 = $incdec$ptr21;
      } else {
       $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
       label = 11;
       break;
      }
     }
    } else {
     $n$addr$1$lcssa = $n$addr$0$lcssa52;$w$0$lcssa = $s$0$lcssa53;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $tobool2526 = ($n$addr$1$lcssa|0)==(0);
    if ($tobool2526) {
     label = 16;
     break;
    } else {
     $$in = $w$0$lcssa;$n$addr$1$lcssa55 = $n$addr$1$lcssa;
    }
   }
   $n$addr$227 = $n$addr$1$lcssa55;$s$128 = $$in;
   while(1) {
    $7 = HEAP8[$s$128>>0]|0;
    $cmp28 = ($7<<24>>24)==($5<<24>>24);
    if ($cmp28) {
     $8 = $s$128;
     break L8;
    }
    $incdec$ptr33 = ((($s$128)) + 1|0);
    $dec34 = (($n$addr$227) + -1)|0;
    $tobool25 = ($dec34|0)==(0);
    if ($tobool25) {
     label = 16;
     break;
    } else {
     $n$addr$227 = $dec34;$s$128 = $incdec$ptr33;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $8 = 0;
 }
 return ($8|0);
}
function _pad_659($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $cmp3 = 0, $cmp38 = 0, $cond = 0, $conv = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $or$cond = 0, $pad = 0, $sub = 0, $sub6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $pad = sp;
 $and = $fl & 73728;
 $tobool = ($and|0)==(0);
 $cmp = ($w|0)>($l|0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($w) - ($l))|0;
  $conv = $c << 24 >> 24;
  $0 = ($sub>>>0)<(256);
  $cond = $0 ? $sub : 256;
  (_memset(($pad|0),($conv|0),($cond|0))|0);
  $cmp38 = ($sub>>>0)>(255);
  if ($cmp38) {
   $1 = (($w) - ($l))|0;
   $l$addr$09 = $sub;
   while(1) {
    _out($f,$pad,256);
    $sub6 = (($l$addr$09) + -256)|0;
    $cmp3 = ($sub6>>>0)>(255);
    if ($cmp3) {
     $l$addr$09 = $sub6;
    } else {
     break;
    }
   }
   $2 = $1 & 255;
   $l$addr$0$lcssa = $2;
  } else {
   $l$addr$0$lcssa = $sub;
  }
  _out($f,$pad,$l$addr$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 return ($retval$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and32 = 0, $and36 = 0, $and49 = 0, $and54 = 0, $and58 = 0, $call = 0, $call10 = 0, $call66 = 0, $cmp = 0;
 var $cmp14 = 0, $cmp21 = 0, $cmp24 = 0, $cmp41 = 0, $cmp7 = 0, $conv = 0, $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv29 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv51 = 0, $conv56 = 0, $conv60 = 0, $incdec$ptr = 0, $incdec$ptr30 = 0, $incdec$ptr35 = 0, $incdec$ptr47 = 0;
 var $incdec$ptr52 = 0, $incdec$ptr57 = 0, $locale = 0, $or = 0, $or$cond = 0, $or18 = 0, $or28 = 0, $or33 = 0, $or37 = 0, $or45 = 0, $or50 = 0, $or55 = 0, $or59 = 0, $retval$0 = 0, $sub40 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 do {
  if ($tobool) {
   $retval$0 = 1;
  } else {
   $cmp = ($wc>>>0)<(128);
   if ($cmp) {
    $conv = $wc&255;
    HEAP8[$s>>0] = $conv;
    $retval$0 = 1;
    break;
   }
   $call = (___pthread_self_440()|0);
   $locale = ((($call)) + 188|0);
   $0 = HEAP32[$locale>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $tobool2 = ($1|0)==(0|0);
   if ($tobool2) {
    $2 = $wc & -128;
    $cmp7 = ($2|0)==(57216);
    if ($cmp7) {
     $conv12 = $wc&255;
     HEAP8[$s>>0] = $conv12;
     $retval$0 = 1;
     break;
    } else {
     $call10 = (___errno_location()|0);
     HEAP32[$call10>>2] = 84;
     $retval$0 = -1;
     break;
    }
   }
   $cmp14 = ($wc>>>0)<(2048);
   if ($cmp14) {
    $3 = $wc >>> 6;
    $or = $3 | 192;
    $conv17 = $or&255;
    $incdec$ptr = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv17;
    $and = $wc & 63;
    $or18 = $and | 128;
    $conv19 = $or18&255;
    HEAP8[$incdec$ptr>>0] = $conv19;
    $retval$0 = 2;
    break;
   }
   $cmp21 = ($wc>>>0)<(55296);
   $4 = $wc & -8192;
   $cmp24 = ($4|0)==(57344);
   $or$cond = $cmp21 | $cmp24;
   if ($or$cond) {
    $5 = $wc >>> 12;
    $or28 = $5 | 224;
    $conv29 = $or28&255;
    $incdec$ptr30 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv29;
    $6 = $wc >>> 6;
    $and32 = $6 & 63;
    $or33 = $and32 | 128;
    $conv34 = $or33&255;
    $incdec$ptr35 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr30>>0] = $conv34;
    $and36 = $wc & 63;
    $or37 = $and36 | 128;
    $conv38 = $or37&255;
    HEAP8[$incdec$ptr35>>0] = $conv38;
    $retval$0 = 3;
    break;
   }
   $sub40 = (($wc) + -65536)|0;
   $cmp41 = ($sub40>>>0)<(1048576);
   if ($cmp41) {
    $7 = $wc >>> 18;
    $or45 = $7 | 240;
    $conv46 = $or45&255;
    $incdec$ptr47 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv46;
    $8 = $wc >>> 12;
    $and49 = $8 & 63;
    $or50 = $and49 | 128;
    $conv51 = $or50&255;
    $incdec$ptr52 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr47>>0] = $conv51;
    $9 = $wc >>> 6;
    $and54 = $9 & 63;
    $or55 = $and54 | 128;
    $conv56 = $or55&255;
    $incdec$ptr57 = ((($s)) + 3|0);
    HEAP8[$incdec$ptr52>>0] = $conv56;
    $and58 = $wc & 63;
    $or59 = $and58 | 128;
    $conv60 = $or59&255;
    HEAP8[$incdec$ptr57>>0] = $conv60;
    $retval$0 = 4;
    break;
   } else {
    $call66 = (___errno_location()|0);
    HEAP32[$call66>>2] = 84;
    $retval$0 = -1;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___pthread_self_440() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (34216|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr27 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp6 = 0, $i$033 = 0, $i$1 = 0, $l$addr$0 = 0, $l$addr$1 = 0, $lbf = 0, $or$cond = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $tobool932 = 0, $wend = 0, $wpos = 0;
 var $write = 0, $write15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $3 = $$pre;
   label = 5;
  } else {
   $retval$1 = 0;
  }
 } else {
  $1 = $0;
  $3 = $1;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $wpos = ((($f)) + 20|0);
   $2 = HEAP32[$wpos>>2]|0;
   $sub$ptr$sub = (($3) - ($2))|0;
   $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
   $4 = $2;
   if ($cmp) {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    $call4 = (FUNCTION_TABLE_iiii[$5 & 15]($f,$s,$l)|0);
    $retval$1 = $call4;
    break;
   }
   $lbf = ((($f)) + 75|0);
   $6 = HEAP8[$lbf>>0]|0;
   $cmp6 = ($6<<24>>24)<(0);
   $tobool932 = ($l|0)==(0);
   $or$cond = $cmp6 | $tobool932;
   L10: do {
    if ($or$cond) {
     $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
    } else {
     $i$033 = $l;
     while(1) {
      $sub = (($i$033) + -1)|0;
      $arrayidx = (($s) + ($sub)|0);
      $7 = HEAP8[$arrayidx>>0]|0;
      $cmp11 = ($7<<24>>24)==(10);
      if ($cmp11) {
       break;
      }
      $tobool9 = ($sub|0)==(0);
      if ($tobool9) {
       $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
       break L10;
      } else {
       $i$033 = $sub;
      }
     }
     $write15 = ((($f)) + 36|0);
     $8 = HEAP32[$write15>>2]|0;
     $call16 = (FUNCTION_TABLE_iiii[$8 & 15]($f,$s,$i$033)|0);
     $cmp17 = ($call16>>>0)<($i$033>>>0);
     if ($cmp17) {
      $retval$1 = $call16;
      break L5;
     }
     $add$ptr = (($s) + ($i$033)|0);
     $l$addr$0 = (($l) - ($i$033))|0;
     $$pre35 = HEAP32[$wpos>>2]|0;
     $9 = $$pre35;$i$1 = $i$033;$l$addr$1 = $l$addr$0;$s$addr$1 = $add$ptr;
    }
   } while(0);
   (_memcpy(($9|0),($s$addr$1|0),($l$addr$1|0))|0);
   $10 = HEAP32[$wpos>>2]|0;
   $add$ptr27 = (($10) + ($l$addr$1)|0);
   HEAP32[$wpos>>2] = $add$ptr27;
   $add = (($i$1) + ($l$addr$1))|0;
   $retval$1 = $add;
  }
 } while(0);
 return ($retval$1|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = ((($f)) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $3 = $2;
  $buf_size = ((($f)) + 48|0);
  $4 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($3) + ($4)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___DOUBLE_BITS_662($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $trunc$clear = 0, $x$addr$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2&65535;
 $trunc$clear = $4 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 1.8446744073709552E+19;
   $call = (+_frexp($mul,$e));
   $5 = HEAP32[$e>>2]|0;
   $sub = (($5) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  break;
 }
 case 2047:  {
  $retval$0 = $x;
  break;
 }
 default: {
  $conv = $2 & 2047;
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $6 = $1 & -2146435073;
  $7 = $6 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $7;$8 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $8;
 }
 }
 return (+$retval$0);
}
function _close($fd) {
 $fd = $fd|0;
 var $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $spec$store$select = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $call = (_dummy_731($fd)|0);
 HEAP32[$vararg_buffer>>2] = $call;
 $call1 = (___syscall6(6,($vararg_buffer|0))|0);
 $cmp = ($call1|0)==(-4);
 $spec$store$select = $cmp ? 0 : $call1;
 $call2 = (___syscall_ret($spec$store$select)|0);
 STACKTOP = sp;return ($call2|0);
}
function _open($filename,$flags,$varargs) {
 $filename = $filename|0;
 $flags = $flags|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and7 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $call = 0, $call12 = 0, $cmp6 = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0;
 var $expanded5 = 0, $expanded6 = 0, $mode$0 = 0, $or = 0, $or$cond8 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $ap = sp;
 $0 = $flags & 4194368;
 $1 = ($0|0)==(0);
 if ($1) {
  $mode$0 = 0;
 } else {
  HEAP32[$ap>>2] = $varargs;
  $arglist_current = HEAP32[$ap>>2]|0;
  $2 = $arglist_current;
  $3 = ((0) + 4|0);
  $expanded2 = $3;
  $expanded = (($expanded2) - 1)|0;
  $4 = (($2) + ($expanded))|0;
  $5 = ((0) + 4|0);
  $expanded6 = $5;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $6 = $4 & $expanded4;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $arglist_next = ((($7)) + 4|0);
  HEAP32[$ap>>2] = $arglist_next;
  $mode$0 = $8;
 }
 $9 = $filename;
 $or = $flags | 32768;
 HEAP32[$vararg_buffer>>2] = $9;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $or;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $mode$0;
 $call = (___syscall5(5,($vararg_buffer|0))|0);
 $cmp6 = ($call|0)<(0);
 $and7 = $flags & 524288;
 $tobool8 = ($and7|0)==(0);
 $or$cond8 = $tobool8 | $cmp6;
 if (!($or$cond8)) {
  HEAP32[$vararg_buffer3>>2] = $call;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 1;
  (___syscall221(221,($vararg_buffer3|0))|0);
 }
 $call12 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call12|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$pn = 0, $$pn24 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and3 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $incdec$ptr7 = 0, $neg = 0, $rem = 0, $rem13 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0;
 var $s$addr$1$lcssa = 0, $sub = 0, $sub$ptr$lhs$cast15 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool1021 = 0, $tobool14 = 0, $tobool4 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $rem13 = $0 & 3;
 $tobool14 = ($rem13|0)==(0);
 L1: do {
  if ($tobool14) {
   $s$addr$0$lcssa = $s;
   label = 5;
  } else {
   $5 = $0;$s$addr$015 = $s;
   while(1) {
    $1 = HEAP8[$s$addr$015>>0]|0;
    $tobool1 = ($1<<24>>24)==(0);
    if ($tobool1) {
     $$pn = $5;
     break L1;
    }
    $incdec$ptr = ((($s$addr$015)) + 1|0);
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $s$addr$0$lcssa = $incdec$ptr;
     label = 5;
     break;
    } else {
     $5 = $2;$s$addr$015 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while(1) {
   $3 = HEAP32[$w$0>>2]|0;
   $sub = (($3) + -16843009)|0;
   $neg = $3 & -2139062144;
   $and = $neg ^ -2139062144;
   $and3 = $and & $sub;
   $tobool4 = ($and3|0)==(0);
   $incdec$ptr7 = ((($w$0)) + 4|0);
   if ($tobool4) {
    $w$0 = $incdec$ptr7;
   } else {
    break;
   }
  }
  $4 = $3&255;
  $tobool1021 = ($4<<24>>24)==(0);
  if ($tobool1021) {
   $s$addr$1$lcssa = $w$0;
  } else {
   $$pn24 = $w$0;
   while(1) {
    $incdec$ptr1323 = ((($$pn24)) + 1|0);
    $$pre = HEAP8[$incdec$ptr1323>>0]|0;
    $tobool10 = ($$pre<<24>>24)==(0);
    if ($tobool10) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else {
     $$pn24 = $incdec$ptr1323;
    }
   }
  }
  $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
  $$pn = $sub$ptr$lhs$cast15;
 }
 $retval$0 = (($$pn) - ($0))|0;
 return ($retval$0|0);
}
function _read($fd,$buf,$count) {
 $fd = $fd|0;
 $buf = $buf|0;
 $count = $count|0;
 var $0 = 0, $call = 0, $call1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = $buf;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $count;
 $call = (___syscall3(3,($vararg_buffer|0))|0);
 $call1 = (___syscall_ret($call)|0);
 STACKTOP = sp;return ($call1|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp14 = 0, $cmp7 = 0, $conv = 0, $conv18 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $lbf = 0, $retval$0 = 0;
 var $tobool = 0, $tobool1 = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $conv = $_c&255;
 HEAP8[$c>>0] = $conv;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $2 = $$pre;
   label = 4;
  } else {
   $retval$0 = -1;
  }
 } else {
  $2 = $0;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $wpos = ((($f)) + 20|0);
   $1 = HEAP32[$wpos>>2]|0;
   $cmp = ($1>>>0)<($2>>>0);
   if ($cmp) {
    $conv5 = $_c & 255;
    $lbf = ((($f)) + 75|0);
    $3 = HEAP8[$lbf>>0]|0;
    $conv6 = $3 << 24 >> 24;
    $cmp7 = ($conv5|0)==($conv6|0);
    if (!($cmp7)) {
     $incdec$ptr = ((($1)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$1>>0] = $conv;
     $retval$0 = $conv5;
     break;
    }
   }
   $write = ((($f)) + 36|0);
   $4 = HEAP32[$write>>2]|0;
   $call13 = (FUNCTION_TABLE_iiii[$4 & 15]($f,$c,1)|0);
   $cmp14 = ($call13|0)==(1);
   if ($cmp14) {
    $5 = HEAP8[$c>>0]|0;
    $conv18 = $5&255;
    $retval$0 = $conv18;
   } else {
    $retval$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $add = 0, $call = 0, $call1 = 0, $call3 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $add = (($call) + 1)|0;
 $call1 = (_malloc($add)|0);
 $tobool = ($call1|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call3 = (_memcpy(($call1|0),($s|0),($add|0))|0);
  $retval$0 = $call3;
 }
 return ($retval$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call10 = 0, $call28 = 0, $cmp = 0, $cmp15 = 0, $cmp20 = 0, $cmp3 = 0, $cmp5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv12 = 0;
 var $conv14 = 0, $conv2 = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $lbf = 0, $lbf13 = 0, $lock = 0, $retval$0 = 0, $tobool = 0, $wend = 0, $wend19 = 0, $wpos = 0, $wpos18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  label = 3;
 } else {
  $call = (___lockfile($f)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 3;
  } else {
   $conv11 = $c&255;
   $conv12 = $c & 255;
   $lbf13 = ((($f)) + 75|0);
   $4 = HEAP8[$lbf13>>0]|0;
   $conv14 = $4 << 24 >> 24;
   $cmp15 = ($conv12|0)==($conv14|0);
   if ($cmp15) {
    label = 10;
   } else {
    $wpos18 = ((($f)) + 20|0);
    $5 = HEAP32[$wpos18>>2]|0;
    $wend19 = ((($f)) + 16|0);
    $6 = HEAP32[$wend19>>2]|0;
    $cmp20 = ($5>>>0)<($6>>>0);
    if ($cmp20) {
     $incdec$ptr25 = ((($5)) + 1|0);
     HEAP32[$wpos18>>2] = $incdec$ptr25;
     HEAP8[$5>>0] = $conv11;
     $cond30 = $conv12;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $call28 = (___overflow($f,$c)|0);
    $cond30 = $call28;
   }
   ___unlockfile($f);
   $retval$0 = $cond30;
  }
 }
 do {
  if ((label|0) == 3) {
   $conv = $c&255;
   $conv1 = $c & 255;
   $lbf = ((($f)) + 75|0);
   $1 = HEAP8[$lbf>>0]|0;
   $conv2 = $1 << 24 >> 24;
   $cmp3 = ($conv1|0)==($conv2|0);
   if (!($cmp3)) {
    $wpos = ((($f)) + 20|0);
    $2 = HEAP32[$wpos>>2]|0;
    $wend = ((($f)) + 16|0);
    $3 = HEAP32[$wend>>2]|0;
    $cmp5 = ($2>>>0)<($3>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$2>>0] = $conv;
     $retval$0 = $conv1;
     break;
    }
   }
   $call10 = (___overflow($f,$c)|0);
   $retval$0 = $call10;
  }
 } while(0);
 return ($retval$0|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i134 = 0, $$pre$i194 = 0, $$pre$i31$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i195Z2D = 0, $$pre$phi$i32$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$010$i$i = 0;
 var $K305$08$i$i = 0, $K373$015$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i183 = 0, $R$1$i183$be = 0, $R$1$i183$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i188 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0;
 var $RP$1$i182 = 0, $RP$1$i182$be = 0, $RP$1$i182$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i34$i = 0, $T$014$i = 0, $T$07$i$i = 0, $T$09$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i135 = 0, $add$i155 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i141 = 0, $add$ptr$i174 = 0, $add$ptr$i2$i$i = 0;
 var $add$ptr$i35$i = 0, $add$ptr$i43$i = 0, $add$ptr$i57$i = 0, $add$ptr14$i$i = 0, $add$ptr15$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr169 = 0, $add$ptr17$i$i = 0, $add$ptr178 = 0, $add$ptr181$i = 0, $add$ptr182 = 0, $add$ptr189$i = 0, $add$ptr190$i = 0, $add$ptr193 = 0, $add$ptr199 = 0, $add$ptr2$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr225$i = 0;
 var $add$ptr227$i = 0, $add$ptr24$i$i = 0, $add$ptr262$i = 0, $add$ptr269$i = 0, $add$ptr273$i = 0, $add$ptr282$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr369$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i41$i = 0, $add$ptr4$i49$i = 0, $add$ptr441$i = 0, $add$ptr5$i$i = 0, $add$ptr6$i$i = 0, $add$ptr6$i$i$i = 0, $add$ptr6$i53$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0;
 var $add$ptr95 = 0, $add$ptr98 = 0, $add10$i = 0, $add101$i = 0, $add110$i = 0, $add13$i = 0, $add14$i = 0, $add140$i = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i158 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add212$i = 0, $add215$i = 0;
 var $add22$i = 0, $add246$i = 0, $add26$i$i = 0, $add268$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add337$i = 0, $add342$i = 0, $add346$i = 0, $add348$i = 0, $add351$i = 0, $add46$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add54$i = 0, $add58 = 0;
 var $add62 = 0, $add64 = 0, $add74$i$i = 0, $add77$i = 0, $add78$i = 0, $add79$i$i = 0, $add8 = 0, $add82$i = 0, $add83$i$i = 0, $add85$i$i = 0, $add86$i = 0, $add88$i$i = 0, $add9$i = 0, $add90$i = 0, $add92$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i14$i = 0;
 var $and$i152 = 0, $and$i36$i = 0, $and$i44$i = 0, $and100$i = 0, $and103$i = 0, $and104$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and1197$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and194$i191 = 0, $and199$i = 0;
 var $and209$i$i = 0, $and21$i = 0, $and21$i159 = 0, $and227$i$i = 0, $and236$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and29$i = 0, $and292$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i39$i = 0, $and3$i47$i = 0, $and30$i = 0, $and318$i$i = 0, $and3185$i$i = 0;
 var $and32$i = 0, $and32$i$i = 0, $and33$i$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and350$i = 0, $and363$i = 0, $and37$i$i = 0, $and387$i = 0, $and38712$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and42$i = 0, $and43 = 0, $and46 = 0, $and49 = 0, $and49$i = 0, $and49$i$i = 0;
 var $and53 = 0, $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i13$i = 0, $and6$i18$i = 0, $and61 = 0, $and64$i = 0, $and68$i = 0, $and69$i$i = 0, $and7 = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0;
 var $and87$i$i = 0, $and89$i = 0, $and9$i = 0, $and96$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i160 = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx106$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx113$i173 = 0, $arrayidx121$i = 0, $arrayidx121$i$sink = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0;
 var $arrayidx148$i = 0, $arrayidx151$i = 0, $arrayidx151$i$i = 0, $arrayidx151$i$i$sink = 0, $arrayidx154$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i = 0, $arrayidx165$i185 = 0, $arrayidx178$i$i = 0, $arrayidx184$i = 0, $arrayidx184$i$i = 0, $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx212$i = 0, $arrayidx212$i$sink = 0, $arrayidx223$i$i = 0, $arrayidx228$i = 0, $arrayidx23$i = 0;
 var $arrayidx239$i = 0, $arrayidx245$i = 0, $arrayidx256$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx290$i$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx394$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0;
 var $arrayidx94$i = 0, $arrayidx94$i170 = 0, $arrayidx96$i$i = 0, $bk$i = 0, $bk$i$i = 0, $bk$i176 = 0, $bk$i26$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk139$i$i = 0, $bk145$i = 0, $bk158$i$i = 0, $bk161$i$i = 0, $bk18 = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0;
 var $bk311$i = 0, $bk313$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk370$i = 0, $bk407$i = 0, $bk429$i = 0, $bk432$i = 0, $bk55$i$i = 0, $bk56$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk85 = 0, $bk91$i$i = 0, $br$2$ph$i = 0, $call107$i = 0, $call131$i = 0, $call132$i = 0, $call275$i = 0;
 var $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i12$i = 0, $cmp$i133 = 0, $cmp$i149 = 0, $cmp$i15$i = 0, $cmp$i3$i$i = 0, $cmp$i37$i = 0, $cmp$i45$i = 0, $cmp$i55$i = 0, $cmp1 = 0, $cmp1$i = 0;
 var $cmp10 = 0, $cmp100$i$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i = 0, $cmp108$i$i = 0, $cmp114$i = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp119$i = 0, $cmp12$i = 0, $cmp120$i$i = 0, $cmp120$i28$i = 0, $cmp1208$i$i = 0, $cmp123$i = 0, $cmp124$i$i = 0, $cmp126$i = 0;
 var $cmp127$i = 0, $cmp128 = 0, $cmp128$i = 0, $cmp128$i$i = 0, $cmp133$i = 0, $cmp135$i = 0, $cmp137$i = 0, $cmp138$i = 0, $cmp139 = 0, $cmp141$i = 0, $cmp144$i$i = 0, $cmp146 = 0, $cmp147$i = 0, $cmp14799$i = 0, $cmp15$i = 0, $cmp151$i = 0, $cmp152$i = 0, $cmp155$i = 0, $cmp156 = 0, $cmp156$i = 0;
 var $cmp156$i$i = 0, $cmp157$i = 0, $cmp159$i = 0, $cmp162 = 0, $cmp162$i = 0, $cmp162$i184 = 0, $cmp166$i = 0, $cmp168$i$i = 0, $cmp174$i = 0, $cmp180$i = 0, $cmp185$i = 0, $cmp185$i$i = 0, $cmp186 = 0, $cmp186$i = 0, $cmp19$i = 0, $cmp190$i = 0, $cmp191$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0;
 var $cmp203$i = 0, $cmp205$i = 0, $cmp209$i = 0, $cmp21$i = 0, $cmp215$i$i = 0, $cmp217$i = 0, $cmp218$i = 0, $cmp224$i = 0, $cmp228$i = 0, $cmp229$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp246$i = 0, $cmp254$i$i = 0, $cmp257$i = 0, $cmp258$i$i = 0, $cmp26$i = 0, $cmp265$i = 0, $cmp27$i$i = 0, $cmp28$i = 0;
 var $cmp28$i$i = 0, $cmp284$i = 0, $cmp29 = 0, $cmp3$i$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp319$i = 0, $cmp319$i$i = 0, $cmp3196$i$i = 0, $cmp32$i = 0, $cmp32$i138 = 0, $cmp323$i = 0, $cmp327$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp35$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp374$i = 0, $cmp38$i = 0;
 var $cmp38$i$i = 0, $cmp388$i = 0, $cmp38813$i = 0, $cmp396$i = 0, $cmp40$i = 0, $cmp43$i = 0, $cmp45$i = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp55$i = 0, $cmp55$i166 = 0, $cmp57$i = 0, $cmp57$i167 = 0, $cmp59$i$i = 0, $cmp60$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0;
 var $cmp65$i = 0, $cmp66$i = 0, $cmp66$i140 = 0, $cmp69$i = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76$i = 0, $cmp81$i = 0, $cmp85$i = 0, $cmp89$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp97$i = 0, $cmp97$i$i = 0;
 var $cmp9716$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i40$i = 0, $cond$i48$i = 0, $cond1$i$i = 0, $cond115$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond2$i = 0, $cond3$i = 0, $cond315$i$i = 0, $cond383$i = 0, $cond4$i = 0, $fd$i = 0;
 var $fd$i$i = 0, $fd$i177 = 0, $fd103$i$i = 0, $fd123 = 0, $fd140$i$i = 0, $fd146$i = 0, $fd148$i$i = 0, $fd160$i$i = 0, $fd219$i = 0, $fd247$i$i = 0, $fd303$i$i = 0, $fd312$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd371$i = 0, $fd408$i = 0, $fd416$i = 0, $fd431$i = 0, $fd54$i$i = 0;
 var $fd57$i = 0, $fd68$i$i = 0, $fd69 = 0, $fd78$i$i = 0, $fd9 = 0, $fd92$i$i = 0, $head = 0, $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i164 = 0, $head$i22$i = 0, $head$i42$i = 0, $head$i52$i = 0, $head118$i$i = 0, $head1186$i$i = 0, $head168 = 0, $head173 = 0, $head177 = 0, $head179 = 0;
 var $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head195 = 0, $head198 = 0, $head208$i$i = 0, $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head26$i$i = 0, $head265$i = 0, $head268$i = 0, $head271$i = 0, $head274$i = 0, $head279$i = 0, $head281$i = 0, $head29$i = 0, $head29$i$i = 0, $head317$i$i = 0;
 var $head3174$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head386$i = 0, $head38611$i = 0, $head7$i$i = 0, $head7$i$i$i = 0, $head7$i54$i = 0, $head94 = 0, $head97 = 0, $head99$i = 0, $idx$0$i = 0, $index$i = 0, $index$i$i = 0, $index$i189 = 0, $index$i29$i = 0, $index288$i$i = 0, $index356$i = 0, $magic$i$i = 0, $nb$0 = 0;
 var $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i137 = 0, $neg$i190 = 0, $neg103$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg48$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next231$i = 0, $not$cmp141$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i168 = 0, $or$cond1$i = 0, $or$cond1$i165 = 0;
 var $or$cond11$i = 0, $or$cond2$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $or$cond97$i = 0, $or$cond98$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i169 = 0, $or$i51$i = 0, $or101$i$i = 0, $or110 = 0, $or167 = 0, $or172 = 0, $or176 = 0, $or178$i = 0;
 var $or180 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or194 = 0, $or197 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or26 = 0, $or264$i = 0, $or267$i = 0, $or270$i = 0, $or275$i = 0, $or278$i = 0, $or28$i$i = 0, $or280$i = 0;
 var $or297$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or368$i = 0, $or40 = 0, $or44$i$i = 0, $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i175 = 0, $parent$i27$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent162$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0;
 var $parent226$i = 0, $parent240$i = 0, $parent257$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0, $parent369$i = 0, $parent406$i = 0, $parent433$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i162 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$418$i = 0, $rsize$418$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0;
 var $sflags193$i = 0, $sflags235$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i153 = 0, $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl192$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl222$i$i = 0, $shl226$i$i = 0;
 var $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl288$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl344$i = 0, $shl347$i = 0, $shl35 = 0, $shl362$i = 0, $shl37 = 0, $shl384$i = 0, $shl39$i$i = 0, $shl395$i = 0;
 var $shl48$i$i = 0, $shl60$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0, $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i148 = 0, $shr$i25$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i156 = 0, $shr110$i$i = 0;
 var $shr12$i = 0, $shr124$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i157 = 0, $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr318$i = 0;
 var $shr323$i$i = 0, $shr330$i = 0, $shr335$i = 0, $shr340$i = 0, $shr345$i = 0, $shr349$i = 0, $shr378$i = 0, $shr392$i = 0, $shr4$i = 0, $shr42$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i151 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0;
 var $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0, $shr7$i154 = 0, $shr72$i = 0, $shr72$i$i = 0, $shr75$i = 0, $shr76$i = 0, $shr77$i$i = 0, $shr79$i = 0, $shr8$i = 0, $shr80$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr84$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr88$i = 0;
 var $shr91$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size$i$i$le = 0, $size188$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0112$i = 0, $sp$1111$i = 0, $spec$select$i = 0, $spec$select$i171 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select5$i = 0, $spec$select9$i = 0, $spec$select96$i = 0, $ssize$2$ph$i = 0;
 var $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i136 = 0, $sub$i147 = 0, $sub$i16$i = 0, $sub$i38$i = 0, $sub$i46$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i19$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i20$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i21$i = 0, $sub10$i = 0, $sub101$i = 0;
 var $sub112$i = 0, $sub113$i$i = 0, $sub118$i = 0, $sub12$i$i = 0, $sub14$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub262$i$i = 0, $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub313$i$i = 0;
 var $sub329$i = 0, $sub33$i = 0, $sub334$i = 0, $sub339$i = 0, $sub343$i = 0, $sub381$i = 0, $sub4$i = 0, $sub41$i = 0, $sub42 = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i50$i = 0, $sub50$i = 0, $sub6$i = 0, $sub63$i = 0, $sub67$i = 0, $sub67$i$i = 0, $sub70$i = 0, $sub71$i$i = 0;
 var $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub99$i = 0, $t$0$i = 0, $t$0$i161 = 0, $t$2$i = 0, $t$4$i = 0, $t$517$i = 0, $t$517$i$ph = 0, $tbase$795$i = 0, $tobool$i$i = 0, $tobool107 = 0, $tobool195$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool237$i = 0, $tobool293$i = 0, $tobool296$i$i = 0, $tobool30$i = 0;
 var $tobool364$i = 0, $tobool97$i$i = 0, $tsize$2647482$i = 0, $tsize$4$i = 0, $tsize$794$i = 0, $v$0$i = 0, $v$0$i163 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i204 = 0, $v$4$lcssa$i = 0, $v$419$i = 0, $v$419$i$ph = 0, $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $magic$i$i = sp;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   $add2 = (($bytes) + 11)|0;
   $and = $add2 & -8;
   $cond = $cmp1 ? 16 : $and;
   $shr = $cond >>> 3;
   $0 = HEAP32[10151]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = (40644 + ($shl<<2)|0);
    $1 = ((($arrayidx)) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = ((($2)) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($3|0)==($arrayidx|0);
    if ($cmp10) {
     $shl12 = 1 << $add8;
     $neg13 = $shl12 ^ -1;
     $and14 = $0 & $neg13;
     HEAP32[10151] = $and14;
    } else {
     $bk18 = ((($3)) + 12|0);
     HEAP32[$bk18>>2] = $arrayidx;
     HEAP32[$1>>2] = $3;
    }
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = ((($2)) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr = (($2) + ($shl22)|0);
    $head25 = ((($add$ptr)) + 4|0);
    $4 = HEAP32[$head25>>2]|0;
    $or26 = $4 | 1;
    HEAP32[$head25>>2] = $or26;
    $retval$0 = $fd9;
    STACKTOP = sp;return ($retval$0|0);
   }
   $5 = HEAP32[(40612)>>2]|0;
   $cmp29 = ($cond>>>0)>($5>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = (40644 + ($shl65<<2)|0);
     $6 = ((($arrayidx66)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $fd69 = ((($7)) + 8|0);
     $8 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($8|0)==($arrayidx66|0);
     if ($cmp70) {
      $shl72 = 1 << $add64;
      $neg73 = $shl72 ^ -1;
      $and74 = $0 & $neg73;
      HEAP32[10151] = $and74;
      $10 = $and74;
     } else {
      $bk85 = ((($8)) + 12|0);
      HEAP32[$bk85>>2] = $arrayidx66;
      HEAP32[$6>>2] = $8;
      $10 = $0;
     }
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = ((($7)) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($7) + ($cond)|0);
     $or96 = $sub91 | 1;
     $head97 = ((($add$ptr95)) + 4|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($7) + ($shl90)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $cmp99 = ($5|0)==(0);
     if (!($cmp99)) {
      $9 = HEAP32[(40624)>>2]|0;
      $shr101 = $5 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = (40644 + ($shl102<<2)|0);
      $shl105 = 1 << $shr101;
      $and106 = $10 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $10 | $shl105;
       HEAP32[10151] = $or110;
       $$pre = ((($arrayidx103)) + 8|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $11 = ((($arrayidx103)) + 8|0);
       $12 = HEAP32[$11>>2]|0;
       $$pre$phiZ2D = $11;$F104$0 = $12;
      }
      HEAP32[$$pre$phiZ2D>>2] = $9;
      $bk122 = ((($F104$0)) + 12|0);
      HEAP32[$bk122>>2] = $9;
      $fd123 = ((($9)) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = ((($9)) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[(40612)>>2] = $sub91;
     HEAP32[(40624)>>2] = $add$ptr95;
     $retval$0 = $fd69;
     STACKTOP = sp;return ($retval$0|0);
    }
    $13 = HEAP32[(40608)>>2]|0;
    $cmp128 = ($13|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($13))|0;
     $and$i = $13 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = (40908 + ($add20$i<<2)|0);
     $14 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = ((($14)) + 4|0);
     $15 = HEAP32[$head$i>>2]|0;
     $and21$i = $15 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $rsize$0$i = $sub22$i;$t$0$i = $14;$v$0$i = $14;
     while(1) {
      $arrayidx23$i = ((($t$0$i)) + 16|0);
      $16 = HEAP32[$arrayidx23$i>>2]|0;
      $cmp$i = ($16|0)==(0|0);
      if ($cmp$i) {
       $arrayidx27$i = ((($t$0$i)) + 20|0);
       $17 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($17|0)==(0|0);
       if ($cmp28$i) {
        break;
       } else {
        $cond4$i = $17;
       }
      } else {
       $cond4$i = $16;
      }
      $head29$i = ((($cond4$i)) + 4|0);
      $18 = HEAP32[$head29$i>>2]|0;
      $and30$i = $18 & -8;
      $sub31$i = (($and30$i) - ($cond))|0;
      $cmp32$i = ($sub31$i>>>0)<($rsize$0$i>>>0);
      $spec$select$i = $cmp32$i ? $sub31$i : $rsize$0$i;
      $spec$select1$i = $cmp32$i ? $cond4$i : $v$0$i;
      $rsize$0$i = $spec$select$i;$t$0$i = $cond4$i;$v$0$i = $spec$select1$i;
     }
     $add$ptr$i = (($v$0$i) + ($cond)|0);
     $cmp35$i = ($add$ptr$i>>>0)>($v$0$i>>>0);
     if ($cmp35$i) {
      $parent$i = ((($v$0$i)) + 24|0);
      $19 = HEAP32[$parent$i>>2]|0;
      $bk$i = ((($v$0$i)) + 12|0);
      $20 = HEAP32[$bk$i>>2]|0;
      $cmp40$i = ($20|0)==($v$0$i|0);
      do {
       if ($cmp40$i) {
        $arrayidx61$i = ((($v$0$i)) + 20|0);
        $22 = HEAP32[$arrayidx61$i>>2]|0;
        $cmp62$i = ($22|0)==(0|0);
        if ($cmp62$i) {
         $arrayidx65$i = ((($v$0$i)) + 16|0);
         $23 = HEAP32[$arrayidx65$i>>2]|0;
         $cmp66$i = ($23|0)==(0|0);
         if ($cmp66$i) {
          $R$3$i = 0;
          break;
         } else {
          $R$1$i$ph = $23;$RP$1$i$ph = $arrayidx65$i;
         }
        } else {
         $R$1$i$ph = $22;$RP$1$i$ph = $arrayidx61$i;
        }
        $R$1$i = $R$1$i$ph;$RP$1$i = $RP$1$i$ph;
        while(1) {
         $arrayidx71$i = ((($R$1$i)) + 20|0);
         $24 = HEAP32[$arrayidx71$i>>2]|0;
         $cmp72$i = ($24|0)==(0|0);
         if ($cmp72$i) {
          $arrayidx75$i = ((($R$1$i)) + 16|0);
          $25 = HEAP32[$arrayidx75$i>>2]|0;
          $cmp76$i = ($25|0)==(0|0);
          if ($cmp76$i) {
           break;
          } else {
           $R$1$i$be = $25;$RP$1$i$be = $arrayidx75$i;
          }
         } else {
          $R$1$i$be = $24;$RP$1$i$be = $arrayidx71$i;
         }
         $R$1$i = $R$1$i$be;$RP$1$i = $RP$1$i$be;
        }
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
       } else {
        $fd$i = ((($v$0$i)) + 8|0);
        $21 = HEAP32[$fd$i>>2]|0;
        $bk56$i = ((($21)) + 12|0);
        HEAP32[$bk56$i>>2] = $20;
        $fd57$i = ((($20)) + 8|0);
        HEAP32[$fd57$i>>2] = $21;
        $R$3$i = $20;
       }
      } while(0);
      $cmp90$i = ($19|0)==(0|0);
      do {
       if (!($cmp90$i)) {
        $index$i = ((($v$0$i)) + 28|0);
        $26 = HEAP32[$index$i>>2]|0;
        $arrayidx94$i = (40908 + ($26<<2)|0);
        $27 = HEAP32[$arrayidx94$i>>2]|0;
        $cmp95$i = ($v$0$i|0)==($27|0);
        if ($cmp95$i) {
         HEAP32[$arrayidx94$i>>2] = $R$3$i;
         $cond2$i = ($R$3$i|0)==(0|0);
         if ($cond2$i) {
          $shl$i = 1 << $26;
          $neg$i = $shl$i ^ -1;
          $and103$i = $13 & $neg$i;
          HEAP32[(40608)>>2] = $and103$i;
          break;
         }
        } else {
         $arrayidx113$i = ((($19)) + 16|0);
         $28 = HEAP32[$arrayidx113$i>>2]|0;
         $cmp114$i = ($28|0)==($v$0$i|0);
         $arrayidx121$i = ((($19)) + 20|0);
         $arrayidx121$i$sink = $cmp114$i ? $arrayidx113$i : $arrayidx121$i;
         HEAP32[$arrayidx121$i$sink>>2] = $R$3$i;
         $cmp126$i = ($R$3$i|0)==(0|0);
         if ($cmp126$i) {
          break;
         }
        }
        $parent135$i = ((($R$3$i)) + 24|0);
        HEAP32[$parent135$i>>2] = $19;
        $arrayidx137$i = ((($v$0$i)) + 16|0);
        $29 = HEAP32[$arrayidx137$i>>2]|0;
        $cmp138$i = ($29|0)==(0|0);
        if (!($cmp138$i)) {
         $arrayidx148$i = ((($R$3$i)) + 16|0);
         HEAP32[$arrayidx148$i>>2] = $29;
         $parent149$i = ((($29)) + 24|0);
         HEAP32[$parent149$i>>2] = $R$3$i;
        }
        $arrayidx154$i = ((($v$0$i)) + 20|0);
        $30 = HEAP32[$arrayidx154$i>>2]|0;
        $cmp155$i = ($30|0)==(0|0);
        if (!($cmp155$i)) {
         $arrayidx165$i = ((($R$3$i)) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $30;
         $parent166$i = ((($30)) + 24|0);
         HEAP32[$parent166$i>>2] = $R$3$i;
        }
       }
      } while(0);
      $cmp174$i = ($rsize$0$i>>>0)<(16);
      if ($cmp174$i) {
       $add177$i = (($rsize$0$i) + ($cond))|0;
       $or178$i = $add177$i | 3;
       $head179$i = ((($v$0$i)) + 4|0);
       HEAP32[$head179$i>>2] = $or178$i;
       $add$ptr181$i = (($v$0$i) + ($add177$i)|0);
       $head182$i = ((($add$ptr181$i)) + 4|0);
       $31 = HEAP32[$head182$i>>2]|0;
       $or183$i = $31 | 1;
       HEAP32[$head182$i>>2] = $or183$i;
      } else {
       $or186$i = $cond | 3;
       $head187$i = ((($v$0$i)) + 4|0);
       HEAP32[$head187$i>>2] = $or186$i;
       $or188$i = $rsize$0$i | 1;
       $head189$i = ((($add$ptr$i)) + 4|0);
       HEAP32[$head189$i>>2] = $or188$i;
       $add$ptr190$i = (($add$ptr$i) + ($rsize$0$i)|0);
       HEAP32[$add$ptr190$i>>2] = $rsize$0$i;
       $cmp191$i = ($5|0)==(0);
       if (!($cmp191$i)) {
        $32 = HEAP32[(40624)>>2]|0;
        $shr194$i = $5 >>> 3;
        $shl195$i = $shr194$i << 1;
        $arrayidx196$i = (40644 + ($shl195$i<<2)|0);
        $shl198$i = 1 << $shr194$i;
        $and199$i = $shl198$i & $0;
        $tobool200$i = ($and199$i|0)==(0);
        if ($tobool200$i) {
         $or204$i = $shl198$i | $0;
         HEAP32[10151] = $or204$i;
         $$pre$i = ((($arrayidx196$i)) + 8|0);
         $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
        } else {
         $33 = ((($arrayidx196$i)) + 8|0);
         $34 = HEAP32[$33>>2]|0;
         $$pre$phi$iZ2D = $33;$F197$0$i = $34;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $32;
        $bk218$i = ((($F197$0$i)) + 12|0);
        HEAP32[$bk218$i>>2] = $32;
        $fd219$i = ((($32)) + 8|0);
        HEAP32[$fd219$i>>2] = $F197$0$i;
        $bk220$i = ((($32)) + 12|0);
        HEAP32[$bk220$i>>2] = $arrayidx196$i;
       }
       HEAP32[(40612)>>2] = $rsize$0$i;
       HEAP32[(40624)>>2] = $add$ptr$i;
      }
      $add$ptr225$i = ((($v$0$i)) + 8|0);
      $retval$0 = $add$ptr225$i;
      STACKTOP = sp;return ($retval$0|0);
     } else {
      $nb$0 = $cond;
     }
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp139 = ($bytes>>>0)>(4294967231);
   if ($cmp139) {
    $nb$0 = -1;
   } else {
    $add144 = (($bytes) + 11)|0;
    $and145 = $add144 & -8;
    $35 = HEAP32[(40608)>>2]|0;
    $cmp146 = ($35|0)==(0);
    if ($cmp146) {
     $nb$0 = $and145;
    } else {
     $sub$i147 = (0 - ($and145))|0;
     $shr$i148 = $add144 >>> 8;
     $cmp$i149 = ($shr$i148|0)==(0);
     if ($cmp$i149) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and145>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i148) + 1048320)|0;
       $shr5$i151 = $sub4$i >>> 16;
       $and$i152 = $shr5$i151 & 8;
       $shl$i153 = $shr$i148 << $and$i152;
       $sub6$i = (($shl$i153) + 520192)|0;
       $shr7$i154 = $sub6$i >>> 16;
       $and8$i = $shr7$i154 & 4;
       $add$i155 = $and8$i | $and$i152;
       $shl9$i = $shl$i153 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i156 = $sub10$i >>> 16;
       $and12$i = $shr11$i156 & 2;
       $add13$i = $add$i155 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i157 = $shl15$i >>> 15;
       $add17$i158 = (($sub14$i) + ($shr16$i157))|0;
       $shl18$i = $add17$i158 << 1;
       $add19$i = (($add17$i158) + 7)|0;
       $shr20$i = $and145 >>> $add19$i;
       $and21$i159 = $shr20$i & 1;
       $add22$i = $and21$i159 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i160 = (40908 + ($idx$0$i<<2)|0);
     $36 = HEAP32[$arrayidx$i160>>2]|0;
     $cmp24$i = ($36|0)==(0|0);
     L79: do {
      if ($cmp24$i) {
       $rsize$3$i = $sub$i147;$t$2$i = 0;$v$3$i = 0;
       label = 61;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       $shr27$i = $idx$0$i >>> 1;
       $sub30$i = (25 - ($shr27$i))|0;
       $cond$i = $cmp26$i ? 0 : $sub30$i;
       $shl31$i = $and145 << $cond$i;
       $rsize$0$i162 = $sub$i147;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i161 = $36;$v$0$i163 = 0;
       while(1) {
        $head$i164 = ((($t$0$i161)) + 4|0);
        $37 = HEAP32[$head$i164>>2]|0;
        $and32$i = $37 & -8;
        $sub33$i = (($and32$i) - ($and145))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i162>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($sub33$i|0)==(0);
         if ($cmp36$i) {
          $rsize$418$i$ph = 0;$t$517$i$ph = $t$0$i161;$v$419$i$ph = $t$0$i161;
          label = 65;
          break L79;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i161;
         }
        } else {
         $rsize$1$i = $rsize$0$i162;$v$1$i = $v$0$i163;
        }
        $arrayidx40$i = ((($t$0$i161)) + 20|0);
        $38 = HEAP32[$arrayidx40$i>>2]|0;
        $shr42$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = (((($t$0$i161)) + 16|0) + ($shr42$i<<2)|0);
        $39 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i = ($38|0)==(0|0);
        $cmp46$i = ($38|0)==($39|0);
        $or$cond1$i165 = $cmp45$i | $cmp46$i;
        $rst$1$i = $or$cond1$i165 ? $rst$0$i : $38;
        $cmp49$i = ($39|0)==(0|0);
        $spec$select5$i = $sizebits$0$i << 1;
        if ($cmp49$i) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 61;
         break;
        } else {
         $rsize$0$i162 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $spec$select5$i;$t$0$i161 = $39;$v$0$i163 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $cmp55$i166 = ($t$2$i|0)==(0|0);
      $cmp57$i167 = ($v$3$i|0)==(0|0);
      $or$cond$i168 = $cmp55$i166 & $cmp57$i167;
      if ($or$cond$i168) {
       $shl60$i = 2 << $idx$0$i;
       $sub63$i = (0 - ($shl60$i))|0;
       $or$i169 = $shl60$i | $sub63$i;
       $and64$i = $or$i169 & $35;
       $cmp65$i = ($and64$i|0)==(0);
       if ($cmp65$i) {
        $nb$0 = $and145;
        break;
       }
       $sub67$i = (0 - ($and64$i))|0;
       $and68$i = $and64$i & $sub67$i;
       $sub70$i = (($and68$i) + -1)|0;
       $shr72$i = $sub70$i >>> 12;
       $and73$i = $shr72$i & 16;
       $shr75$i = $sub70$i >>> $and73$i;
       $shr76$i = $shr75$i >>> 5;
       $and77$i = $shr76$i & 8;
       $add78$i = $and77$i | $and73$i;
       $shr79$i = $shr75$i >>> $and77$i;
       $shr80$i = $shr79$i >>> 2;
       $and81$i = $shr80$i & 4;
       $add82$i = $add78$i | $and81$i;
       $shr83$i = $shr79$i >>> $and81$i;
       $shr84$i = $shr83$i >>> 1;
       $and85$i = $shr84$i & 2;
       $add86$i = $add82$i | $and85$i;
       $shr87$i = $shr83$i >>> $and85$i;
       $shr88$i = $shr87$i >>> 1;
       $and89$i = $shr88$i & 1;
       $add90$i = $add86$i | $and89$i;
       $shr91$i = $shr87$i >>> $and89$i;
       $add92$i = (($add90$i) + ($shr91$i))|0;
       $arrayidx94$i170 = (40908 + ($add92$i<<2)|0);
       $40 = HEAP32[$arrayidx94$i170>>2]|0;
       $t$4$i = $40;$v$3$i204 = 0;
      } else {
       $t$4$i = $t$2$i;$v$3$i204 = $v$3$i;
      }
      $cmp9716$i = ($t$4$i|0)==(0|0);
      if ($cmp9716$i) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i204;
      } else {
       $rsize$418$i$ph = $rsize$3$i;$t$517$i$ph = $t$4$i;$v$419$i$ph = $v$3$i204;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $rsize$418$i = $rsize$418$i$ph;$t$517$i = $t$517$i$ph;$v$419$i = $v$419$i$ph;
      while(1) {
       $head99$i = ((($t$517$i)) + 4|0);
       $41 = HEAP32[$head99$i>>2]|0;
       $and100$i = $41 & -8;
       $sub101$i = (($and100$i) - ($and145))|0;
       $cmp102$i = ($sub101$i>>>0)<($rsize$418$i>>>0);
       $spec$select$i171 = $cmp102$i ? $sub101$i : $rsize$418$i;
       $spec$select2$i = $cmp102$i ? $t$517$i : $v$419$i;
       $arrayidx106$i = ((($t$517$i)) + 16|0);
       $42 = HEAP32[$arrayidx106$i>>2]|0;
       $cmp107$i = ($42|0)==(0|0);
       if ($cmp107$i) {
        $arrayidx113$i173 = ((($t$517$i)) + 20|0);
        $43 = HEAP32[$arrayidx113$i173>>2]|0;
        $cond115$i = $43;
       } else {
        $cond115$i = $42;
       }
       $cmp97$i = ($cond115$i|0)==(0|0);
       if ($cmp97$i) {
        $rsize$4$lcssa$i = $spec$select$i171;$v$4$lcssa$i = $spec$select2$i;
        break;
       } else {
        $rsize$418$i = $spec$select$i171;$t$517$i = $cond115$i;$v$419$i = $spec$select2$i;
       }
      }
     }
     $cmp116$i = ($v$4$lcssa$i|0)==(0|0);
     if ($cmp116$i) {
      $nb$0 = $and145;
     } else {
      $44 = HEAP32[(40612)>>2]|0;
      $sub118$i = (($44) - ($and145))|0;
      $cmp119$i = ($rsize$4$lcssa$i>>>0)<($sub118$i>>>0);
      if ($cmp119$i) {
       $add$ptr$i174 = (($v$4$lcssa$i) + ($and145)|0);
       $cmp123$i = ($add$ptr$i174>>>0)>($v$4$lcssa$i>>>0);
       if ($cmp123$i) {
        $parent$i175 = ((($v$4$lcssa$i)) + 24|0);
        $45 = HEAP32[$parent$i175>>2]|0;
        $bk$i176 = ((($v$4$lcssa$i)) + 12|0);
        $46 = HEAP32[$bk$i176>>2]|0;
        $cmp128$i = ($46|0)==($v$4$lcssa$i|0);
        do {
         if ($cmp128$i) {
          $arrayidx151$i = ((($v$4$lcssa$i)) + 20|0);
          $48 = HEAP32[$arrayidx151$i>>2]|0;
          $cmp152$i = ($48|0)==(0|0);
          if ($cmp152$i) {
           $arrayidx155$i = ((($v$4$lcssa$i)) + 16|0);
           $49 = HEAP32[$arrayidx155$i>>2]|0;
           $cmp156$i = ($49|0)==(0|0);
           if ($cmp156$i) {
            $R$3$i188 = 0;
            break;
           } else {
            $R$1$i183$ph = $49;$RP$1$i182$ph = $arrayidx155$i;
           }
          } else {
           $R$1$i183$ph = $48;$RP$1$i182$ph = $arrayidx151$i;
          }
          $R$1$i183 = $R$1$i183$ph;$RP$1$i182 = $RP$1$i182$ph;
          while(1) {
           $arrayidx161$i = ((($R$1$i183)) + 20|0);
           $50 = HEAP32[$arrayidx161$i>>2]|0;
           $cmp162$i184 = ($50|0)==(0|0);
           if ($cmp162$i184) {
            $arrayidx165$i185 = ((($R$1$i183)) + 16|0);
            $51 = HEAP32[$arrayidx165$i185>>2]|0;
            $cmp166$i = ($51|0)==(0|0);
            if ($cmp166$i) {
             break;
            } else {
             $R$1$i183$be = $51;$RP$1$i182$be = $arrayidx165$i185;
            }
           } else {
            $R$1$i183$be = $50;$RP$1$i182$be = $arrayidx161$i;
           }
           $R$1$i183 = $R$1$i183$be;$RP$1$i182 = $RP$1$i182$be;
          }
          HEAP32[$RP$1$i182>>2] = 0;
          $R$3$i188 = $R$1$i183;
         } else {
          $fd$i177 = ((($v$4$lcssa$i)) + 8|0);
          $47 = HEAP32[$fd$i177>>2]|0;
          $bk145$i = ((($47)) + 12|0);
          HEAP32[$bk145$i>>2] = $46;
          $fd146$i = ((($46)) + 8|0);
          HEAP32[$fd146$i>>2] = $47;
          $R$3$i188 = $46;
         }
        } while(0);
        $cmp180$i = ($45|0)==(0|0);
        do {
         if ($cmp180$i) {
          $61 = $35;
         } else {
          $index$i189 = ((($v$4$lcssa$i)) + 28|0);
          $52 = HEAP32[$index$i189>>2]|0;
          $arrayidx184$i = (40908 + ($52<<2)|0);
          $53 = HEAP32[$arrayidx184$i>>2]|0;
          $cmp185$i = ($v$4$lcssa$i|0)==($53|0);
          if ($cmp185$i) {
           HEAP32[$arrayidx184$i>>2] = $R$3$i188;
           $cond3$i = ($R$3$i188|0)==(0|0);
           if ($cond3$i) {
            $shl192$i = 1 << $52;
            $neg$i190 = $shl192$i ^ -1;
            $and194$i191 = $35 & $neg$i190;
            HEAP32[(40608)>>2] = $and194$i191;
            $61 = $and194$i191;
            break;
           }
          } else {
           $arrayidx204$i = ((($45)) + 16|0);
           $54 = HEAP32[$arrayidx204$i>>2]|0;
           $cmp205$i = ($54|0)==($v$4$lcssa$i|0);
           $arrayidx212$i = ((($45)) + 20|0);
           $arrayidx212$i$sink = $cmp205$i ? $arrayidx204$i : $arrayidx212$i;
           HEAP32[$arrayidx212$i$sink>>2] = $R$3$i188;
           $cmp217$i = ($R$3$i188|0)==(0|0);
           if ($cmp217$i) {
            $61 = $35;
            break;
           }
          }
          $parent226$i = ((($R$3$i188)) + 24|0);
          HEAP32[$parent226$i>>2] = $45;
          $arrayidx228$i = ((($v$4$lcssa$i)) + 16|0);
          $55 = HEAP32[$arrayidx228$i>>2]|0;
          $cmp229$i = ($55|0)==(0|0);
          if (!($cmp229$i)) {
           $arrayidx239$i = ((($R$3$i188)) + 16|0);
           HEAP32[$arrayidx239$i>>2] = $55;
           $parent240$i = ((($55)) + 24|0);
           HEAP32[$parent240$i>>2] = $R$3$i188;
          }
          $arrayidx245$i = ((($v$4$lcssa$i)) + 20|0);
          $56 = HEAP32[$arrayidx245$i>>2]|0;
          $cmp246$i = ($56|0)==(0|0);
          if ($cmp246$i) {
           $61 = $35;
          } else {
           $arrayidx256$i = ((($R$3$i188)) + 20|0);
           HEAP32[$arrayidx256$i>>2] = $56;
           $parent257$i = ((($56)) + 24|0);
           HEAP32[$parent257$i>>2] = $R$3$i188;
           $61 = $35;
          }
         }
        } while(0);
        $cmp265$i = ($rsize$4$lcssa$i>>>0)<(16);
        L128: do {
         if ($cmp265$i) {
          $add268$i = (($rsize$4$lcssa$i) + ($and145))|0;
          $or270$i = $add268$i | 3;
          $head271$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head271$i>>2] = $or270$i;
          $add$ptr273$i = (($v$4$lcssa$i) + ($add268$i)|0);
          $head274$i = ((($add$ptr273$i)) + 4|0);
          $57 = HEAP32[$head274$i>>2]|0;
          $or275$i = $57 | 1;
          HEAP32[$head274$i>>2] = $or275$i;
         } else {
          $or278$i = $and145 | 3;
          $head279$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head279$i>>2] = $or278$i;
          $or280$i = $rsize$4$lcssa$i | 1;
          $head281$i = ((($add$ptr$i174)) + 4|0);
          HEAP32[$head281$i>>2] = $or280$i;
          $add$ptr282$i = (($add$ptr$i174) + ($rsize$4$lcssa$i)|0);
          HEAP32[$add$ptr282$i>>2] = $rsize$4$lcssa$i;
          $shr283$i = $rsize$4$lcssa$i >>> 3;
          $cmp284$i = ($rsize$4$lcssa$i>>>0)<(256);
          if ($cmp284$i) {
           $shl288$i = $shr283$i << 1;
           $arrayidx289$i = (40644 + ($shl288$i<<2)|0);
           $58 = HEAP32[10151]|0;
           $shl291$i = 1 << $shr283$i;
           $and292$i = $58 & $shl291$i;
           $tobool293$i = ($and292$i|0)==(0);
           if ($tobool293$i) {
            $or297$i = $58 | $shl291$i;
            HEAP32[10151] = $or297$i;
            $$pre$i194 = ((($arrayidx289$i)) + 8|0);
            $$pre$phi$i195Z2D = $$pre$i194;$F290$0$i = $arrayidx289$i;
           } else {
            $59 = ((($arrayidx289$i)) + 8|0);
            $60 = HEAP32[$59>>2]|0;
            $$pre$phi$i195Z2D = $59;$F290$0$i = $60;
           }
           HEAP32[$$pre$phi$i195Z2D>>2] = $add$ptr$i174;
           $bk311$i = ((($F290$0$i)) + 12|0);
           HEAP32[$bk311$i>>2] = $add$ptr$i174;
           $fd312$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd312$i>>2] = $F290$0$i;
           $bk313$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk313$i>>2] = $arrayidx289$i;
           break;
          }
          $shr318$i = $rsize$4$lcssa$i >>> 8;
          $cmp319$i = ($shr318$i|0)==(0);
          if ($cmp319$i) {
           $I316$0$i = 0;
          } else {
           $cmp323$i = ($rsize$4$lcssa$i>>>0)>(16777215);
           if ($cmp323$i) {
            $I316$0$i = 31;
           } else {
            $sub329$i = (($shr318$i) + 1048320)|0;
            $shr330$i = $sub329$i >>> 16;
            $and331$i = $shr330$i & 8;
            $shl333$i = $shr318$i << $and331$i;
            $sub334$i = (($shl333$i) + 520192)|0;
            $shr335$i = $sub334$i >>> 16;
            $and336$i = $shr335$i & 4;
            $add337$i = $and336$i | $and331$i;
            $shl338$i = $shl333$i << $and336$i;
            $sub339$i = (($shl338$i) + 245760)|0;
            $shr340$i = $sub339$i >>> 16;
            $and341$i = $shr340$i & 2;
            $add342$i = $add337$i | $and341$i;
            $sub343$i = (14 - ($add342$i))|0;
            $shl344$i = $shl338$i << $and341$i;
            $shr345$i = $shl344$i >>> 15;
            $add346$i = (($sub343$i) + ($shr345$i))|0;
            $shl347$i = $add346$i << 1;
            $add348$i = (($add346$i) + 7)|0;
            $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
            $and350$i = $shr349$i & 1;
            $add351$i = $and350$i | $shl347$i;
            $I316$0$i = $add351$i;
           }
          }
          $arrayidx355$i = (40908 + ($I316$0$i<<2)|0);
          $index356$i = ((($add$ptr$i174)) + 28|0);
          HEAP32[$index356$i>>2] = $I316$0$i;
          $child357$i = ((($add$ptr$i174)) + 16|0);
          $arrayidx358$i = ((($child357$i)) + 4|0);
          HEAP32[$arrayidx358$i>>2] = 0;
          HEAP32[$child357$i>>2] = 0;
          $shl362$i = 1 << $I316$0$i;
          $and363$i = $61 & $shl362$i;
          $tobool364$i = ($and363$i|0)==(0);
          if ($tobool364$i) {
           $or368$i = $61 | $shl362$i;
           HEAP32[(40608)>>2] = $or368$i;
           HEAP32[$arrayidx355$i>>2] = $add$ptr$i174;
           $parent369$i = ((($add$ptr$i174)) + 24|0);
           HEAP32[$parent369$i>>2] = $arrayidx355$i;
           $bk370$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk370$i>>2] = $add$ptr$i174;
           $fd371$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd371$i>>2] = $add$ptr$i174;
           break;
          }
          $62 = HEAP32[$arrayidx355$i>>2]|0;
          $head38611$i = ((($62)) + 4|0);
          $63 = HEAP32[$head38611$i>>2]|0;
          $and38712$i = $63 & -8;
          $cmp38813$i = ($and38712$i|0)==($rsize$4$lcssa$i|0);
          L145: do {
           if ($cmp38813$i) {
            $T$0$lcssa$i = $62;
           } else {
            $cmp374$i = ($I316$0$i|0)==(31);
            $shr378$i = $I316$0$i >>> 1;
            $sub381$i = (25 - ($shr378$i))|0;
            $cond383$i = $cmp374$i ? 0 : $sub381$i;
            $shl384$i = $rsize$4$lcssa$i << $cond383$i;
            $K373$015$i = $shl384$i;$T$014$i = $62;
            while(1) {
             $shr392$i = $K373$015$i >>> 31;
             $arrayidx394$i = (((($T$014$i)) + 16|0) + ($shr392$i<<2)|0);
             $64 = HEAP32[$arrayidx394$i>>2]|0;
             $cmp396$i = ($64|0)==(0|0);
             if ($cmp396$i) {
              break;
             }
             $shl395$i = $K373$015$i << 1;
             $head386$i = ((($64)) + 4|0);
             $65 = HEAP32[$head386$i>>2]|0;
             $and387$i = $65 & -8;
             $cmp388$i = ($and387$i|0)==($rsize$4$lcssa$i|0);
             if ($cmp388$i) {
              $T$0$lcssa$i = $64;
              break L145;
             } else {
              $K373$015$i = $shl395$i;$T$014$i = $64;
             }
            }
            HEAP32[$arrayidx394$i>>2] = $add$ptr$i174;
            $parent406$i = ((($add$ptr$i174)) + 24|0);
            HEAP32[$parent406$i>>2] = $T$014$i;
            $bk407$i = ((($add$ptr$i174)) + 12|0);
            HEAP32[$bk407$i>>2] = $add$ptr$i174;
            $fd408$i = ((($add$ptr$i174)) + 8|0);
            HEAP32[$fd408$i>>2] = $add$ptr$i174;
            break L128;
           }
          } while(0);
          $fd416$i = ((($T$0$lcssa$i)) + 8|0);
          $66 = HEAP32[$fd416$i>>2]|0;
          $bk429$i = ((($66)) + 12|0);
          HEAP32[$bk429$i>>2] = $add$ptr$i174;
          HEAP32[$fd416$i>>2] = $add$ptr$i174;
          $fd431$i = ((($add$ptr$i174)) + 8|0);
          HEAP32[$fd431$i>>2] = $66;
          $bk432$i = ((($add$ptr$i174)) + 12|0);
          HEAP32[$bk432$i>>2] = $T$0$lcssa$i;
          $parent433$i = ((($add$ptr$i174)) + 24|0);
          HEAP32[$parent433$i>>2] = 0;
         }
        } while(0);
        $add$ptr441$i = ((($v$4$lcssa$i)) + 8|0);
        $retval$0 = $add$ptr441$i;
        STACKTOP = sp;return ($retval$0|0);
       } else {
        $nb$0 = $and145;
       }
      } else {
       $nb$0 = $and145;
      }
     }
    }
   }
  }
 } while(0);
 $67 = HEAP32[(40612)>>2]|0;
 $cmp156 = ($67>>>0)<($nb$0>>>0);
 if (!($cmp156)) {
  $sub160 = (($67) - ($nb$0))|0;
  $68 = HEAP32[(40624)>>2]|0;
  $cmp162 = ($sub160>>>0)>(15);
  if ($cmp162) {
   $add$ptr166 = (($68) + ($nb$0)|0);
   HEAP32[(40624)>>2] = $add$ptr166;
   HEAP32[(40612)>>2] = $sub160;
   $or167 = $sub160 | 1;
   $head168 = ((($add$ptr166)) + 4|0);
   HEAP32[$head168>>2] = $or167;
   $add$ptr169 = (($68) + ($67)|0);
   HEAP32[$add$ptr169>>2] = $sub160;
   $or172 = $nb$0 | 3;
   $head173 = ((($68)) + 4|0);
   HEAP32[$head173>>2] = $or172;
  } else {
   HEAP32[(40612)>>2] = 0;
   HEAP32[(40624)>>2] = 0;
   $or176 = $67 | 3;
   $head177 = ((($68)) + 4|0);
   HEAP32[$head177>>2] = $or176;
   $add$ptr178 = (($68) + ($67)|0);
   $head179 = ((($add$ptr178)) + 4|0);
   $69 = HEAP32[$head179>>2]|0;
   $or180 = $69 | 1;
   HEAP32[$head179>>2] = $or180;
  }
  $add$ptr182 = ((($68)) + 8|0);
  $retval$0 = $add$ptr182;
  STACKTOP = sp;return ($retval$0|0);
 }
 $70 = HEAP32[(40616)>>2]|0;
 $cmp186 = ($70>>>0)>($nb$0>>>0);
 if ($cmp186) {
  $sub190 = (($70) - ($nb$0))|0;
  HEAP32[(40616)>>2] = $sub190;
  $71 = HEAP32[(40628)>>2]|0;
  $add$ptr193 = (($71) + ($nb$0)|0);
  HEAP32[(40628)>>2] = $add$ptr193;
  $or194 = $sub190 | 1;
  $head195 = ((($add$ptr193)) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $or197 = $nb$0 | 3;
  $head198 = ((($71)) + 4|0);
  HEAP32[$head198>>2] = $or197;
  $add$ptr199 = ((($71)) + 8|0);
  $retval$0 = $add$ptr199;
  STACKTOP = sp;return ($retval$0|0);
 }
 $72 = HEAP32[10269]|0;
 $cmp$i133 = ($72|0)==(0);
 if ($cmp$i133) {
  HEAP32[(41084)>>2] = 4096;
  HEAP32[(41080)>>2] = 4096;
  HEAP32[(41088)>>2] = -1;
  HEAP32[(41092)>>2] = -1;
  HEAP32[(41096)>>2] = 0;
  HEAP32[(41048)>>2] = 0;
  $73 = $magic$i$i;
  $xor$i$i = $73 & -16;
  $and6$i$i = $xor$i$i ^ 1431655768;
  HEAP32[10269] = $and6$i$i;
  $74 = 4096;
 } else {
  $$pre$i134 = HEAP32[(41084)>>2]|0;
  $74 = $$pre$i134;
 }
 $add$i135 = (($nb$0) + 48)|0;
 $sub$i136 = (($nb$0) + 47)|0;
 $add9$i = (($74) + ($sub$i136))|0;
 $neg$i137 = (0 - ($74))|0;
 $and11$i = $add9$i & $neg$i137;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $75 = HEAP32[(41044)>>2]|0;
 $cmp15$i = ($75|0)==(0);
 if (!($cmp15$i)) {
  $76 = HEAP32[(41036)>>2]|0;
  $add17$i = (($76) + ($and11$i))|0;
  $cmp19$i = ($add17$i>>>0)<=($76>>>0);
  $cmp21$i = ($add17$i>>>0)>($75>>>0);
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $77 = HEAP32[(41048)>>2]|0;
 $and29$i = $77 & 4;
 $tobool30$i = ($and29$i|0)==(0);
 L178: do {
  if ($tobool30$i) {
   $78 = HEAP32[(40628)>>2]|0;
   $cmp32$i138 = ($78|0)==(0|0);
   L180: do {
    if ($cmp32$i138) {
     label = 128;
    } else {
     $sp$0$i$i = (41052);
     while(1) {
      $79 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i55$i = ($79>>>0)>($78>>>0);
      if (!($cmp$i55$i)) {
       $size$i$i = ((($sp$0$i$i)) + 4|0);
       $80 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i57$i = (($79) + ($80)|0);
       $cmp2$i$i = ($add$ptr$i57$i>>>0)>($78>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = ((($sp$0$i$i)) + 8|0);
      $81 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($81|0)==(0|0);
      if ($cmp3$i$i) {
       label = 128;
       break L180;
      } else {
       $sp$0$i$i = $81;
      }
     }
     $add77$i = (($add9$i) - ($70))|0;
     $and80$i = $add77$i & $neg$i137;
     $cmp81$i = ($and80$i>>>0)<(2147483647);
     if ($cmp81$i) {
      $size$i$i$le = ((($sp$0$i$i)) + 4|0);
      $call83$i = (_sbrk(($and80$i|0))|0);
      $86 = HEAP32[$sp$0$i$i>>2]|0;
      $87 = HEAP32[$size$i$i$le>>2]|0;
      $add$ptr$i141 = (($86) + ($87)|0);
      $cmp85$i = ($call83$i|0)==($add$ptr$i141|0);
      if ($cmp85$i) {
       $cmp89$i = ($call83$i|0)==((-1)|0);
       if ($cmp89$i) {
        $tsize$2647482$i = $and80$i;
       } else {
        $tbase$795$i = $call83$i;$tsize$794$i = $and80$i;
        label = 145;
        break L178;
       }
      } else {
       $br$2$ph$i = $call83$i;$ssize$2$ph$i = $and80$i;
       label = 136;
      }
     } else {
      $tsize$2647482$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $call37$i = (_sbrk(0)|0);
     $cmp38$i = ($call37$i|0)==((-1)|0);
     if ($cmp38$i) {
      $tsize$2647482$i = 0;
     } else {
      $82 = $call37$i;
      $83 = HEAP32[(41080)>>2]|0;
      $sub41$i = (($83) + -1)|0;
      $and42$i = $sub41$i & $82;
      $cmp43$i = ($and42$i|0)==(0);
      $add46$i = (($sub41$i) + ($82))|0;
      $neg48$i = (0 - ($83))|0;
      $and49$i = $add46$i & $neg48$i;
      $sub50$i = (($and49$i) - ($82))|0;
      $add51$i = $cmp43$i ? 0 : $sub50$i;
      $spec$select96$i = (($add51$i) + ($and11$i))|0;
      $84 = HEAP32[(41036)>>2]|0;
      $add54$i = (($spec$select96$i) + ($84))|0;
      $cmp55$i = ($spec$select96$i>>>0)>($nb$0>>>0);
      $cmp57$i = ($spec$select96$i>>>0)<(2147483647);
      $or$cond$i = $cmp55$i & $cmp57$i;
      if ($or$cond$i) {
       $85 = HEAP32[(41044)>>2]|0;
       $cmp60$i = ($85|0)==(0);
       if (!($cmp60$i)) {
        $cmp63$i = ($add54$i>>>0)<=($84>>>0);
        $cmp66$i140 = ($add54$i>>>0)>($85>>>0);
        $or$cond2$i = $cmp63$i | $cmp66$i140;
        if ($or$cond2$i) {
         $tsize$2647482$i = 0;
         break;
        }
       }
       $call68$i = (_sbrk(($spec$select96$i|0))|0);
       $cmp69$i = ($call68$i|0)==($call37$i|0);
       if ($cmp69$i) {
        $tbase$795$i = $call37$i;$tsize$794$i = $spec$select96$i;
        label = 145;
        break L178;
       } else {
        $br$2$ph$i = $call68$i;$ssize$2$ph$i = $spec$select96$i;
        label = 136;
       }
      } else {
       $tsize$2647482$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $sub112$i = (0 - ($ssize$2$ph$i))|0;
     $cmp91$i = ($br$2$ph$i|0)!=((-1)|0);
     $cmp93$i = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond5$i = $cmp93$i & $cmp91$i;
     $cmp96$i = ($add$i135>>>0)>($ssize$2$ph$i>>>0);
     $or$cond7$i = $cmp96$i & $or$cond5$i;
     if (!($or$cond7$i)) {
      $cmp118$i = ($br$2$ph$i|0)==((-1)|0);
      if ($cmp118$i) {
       $tsize$2647482$i = 0;
       break;
      } else {
       $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
       label = 145;
       break L178;
      }
     }
     $88 = HEAP32[(41084)>>2]|0;
     $sub99$i = (($sub$i136) - ($ssize$2$ph$i))|0;
     $add101$i = (($sub99$i) + ($88))|0;
     $neg103$i = (0 - ($88))|0;
     $and104$i = $add101$i & $neg103$i;
     $cmp105$i = ($and104$i>>>0)<(2147483647);
     if (!($cmp105$i)) {
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
      label = 145;
      break L178;
     }
     $call107$i = (_sbrk(($and104$i|0))|0);
     $cmp108$i = ($call107$i|0)==((-1)|0);
     if ($cmp108$i) {
      (_sbrk(($sub112$i|0))|0);
      $tsize$2647482$i = 0;
      break;
     } else {
      $add110$i = (($and104$i) + ($ssize$2$ph$i))|0;
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $add110$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $89 = HEAP32[(41048)>>2]|0;
   $or$i = $89 | 4;
   HEAP32[(41048)>>2] = $or$i;
   $tsize$4$i = $tsize$2647482$i;
   label = 143;
  } else {
   $tsize$4$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $cmp127$i = ($and11$i>>>0)<(2147483647);
  if ($cmp127$i) {
   $call131$i = (_sbrk(($and11$i|0))|0);
   $call132$i = (_sbrk(0)|0);
   $cmp133$i = ($call131$i|0)!=((-1)|0);
   $cmp135$i = ($call132$i|0)!=((-1)|0);
   $or$cond4$i = $cmp133$i & $cmp135$i;
   $cmp137$i = ($call131$i>>>0)<($call132$i>>>0);
   $or$cond8$i = $cmp137$i & $or$cond4$i;
   $sub$ptr$lhs$cast$i = $call132$i;
   $sub$ptr$rhs$cast$i = $call131$i;
   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
   $add140$i = (($nb$0) + 40)|0;
   $cmp141$i = ($sub$ptr$sub$i>>>0)>($add140$i>>>0);
   $spec$select9$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $cmp14799$i = ($call131$i|0)==((-1)|0);
   $not$cmp141$i = $cmp141$i ^ 1;
   $cmp147$i = $cmp14799$i | $not$cmp141$i;
   $or$cond97$i = $cmp147$i | $or$cond8$not$i;
   if (!($or$cond97$i)) {
    $tbase$795$i = $call131$i;$tsize$794$i = $spec$select9$i;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $90 = HEAP32[(41036)>>2]|0;
  $add150$i = (($90) + ($tsize$794$i))|0;
  HEAP32[(41036)>>2] = $add150$i;
  $91 = HEAP32[(41040)>>2]|0;
  $cmp151$i = ($add150$i>>>0)>($91>>>0);
  if ($cmp151$i) {
   HEAP32[(41040)>>2] = $add150$i;
  }
  $92 = HEAP32[(40628)>>2]|0;
  $cmp157$i = ($92|0)==(0|0);
  L215: do {
   if ($cmp157$i) {
    $93 = HEAP32[(40620)>>2]|0;
    $cmp159$i = ($93|0)==(0|0);
    $cmp162$i = ($tbase$795$i>>>0)<($93>>>0);
    $or$cond11$i = $cmp159$i | $cmp162$i;
    if ($or$cond11$i) {
     HEAP32[(40620)>>2] = $tbase$795$i;
    }
    HEAP32[(41052)>>2] = $tbase$795$i;
    HEAP32[(41056)>>2] = $tsize$794$i;
    HEAP32[(41064)>>2] = 0;
    $94 = HEAP32[10269]|0;
    HEAP32[(40640)>>2] = $94;
    HEAP32[(40636)>>2] = -1;
    HEAP32[(40656)>>2] = (40644);
    HEAP32[(40652)>>2] = (40644);
    HEAP32[(40664)>>2] = (40652);
    HEAP32[(40660)>>2] = (40652);
    HEAP32[(40672)>>2] = (40660);
    HEAP32[(40668)>>2] = (40660);
    HEAP32[(40680)>>2] = (40668);
    HEAP32[(40676)>>2] = (40668);
    HEAP32[(40688)>>2] = (40676);
    HEAP32[(40684)>>2] = (40676);
    HEAP32[(40696)>>2] = (40684);
    HEAP32[(40692)>>2] = (40684);
    HEAP32[(40704)>>2] = (40692);
    HEAP32[(40700)>>2] = (40692);
    HEAP32[(40712)>>2] = (40700);
    HEAP32[(40708)>>2] = (40700);
    HEAP32[(40720)>>2] = (40708);
    HEAP32[(40716)>>2] = (40708);
    HEAP32[(40728)>>2] = (40716);
    HEAP32[(40724)>>2] = (40716);
    HEAP32[(40736)>>2] = (40724);
    HEAP32[(40732)>>2] = (40724);
    HEAP32[(40744)>>2] = (40732);
    HEAP32[(40740)>>2] = (40732);
    HEAP32[(40752)>>2] = (40740);
    HEAP32[(40748)>>2] = (40740);
    HEAP32[(40760)>>2] = (40748);
    HEAP32[(40756)>>2] = (40748);
    HEAP32[(40768)>>2] = (40756);
    HEAP32[(40764)>>2] = (40756);
    HEAP32[(40776)>>2] = (40764);
    HEAP32[(40772)>>2] = (40764);
    HEAP32[(40784)>>2] = (40772);
    HEAP32[(40780)>>2] = (40772);
    HEAP32[(40792)>>2] = (40780);
    HEAP32[(40788)>>2] = (40780);
    HEAP32[(40800)>>2] = (40788);
    HEAP32[(40796)>>2] = (40788);
    HEAP32[(40808)>>2] = (40796);
    HEAP32[(40804)>>2] = (40796);
    HEAP32[(40816)>>2] = (40804);
    HEAP32[(40812)>>2] = (40804);
    HEAP32[(40824)>>2] = (40812);
    HEAP32[(40820)>>2] = (40812);
    HEAP32[(40832)>>2] = (40820);
    HEAP32[(40828)>>2] = (40820);
    HEAP32[(40840)>>2] = (40828);
    HEAP32[(40836)>>2] = (40828);
    HEAP32[(40848)>>2] = (40836);
    HEAP32[(40844)>>2] = (40836);
    HEAP32[(40856)>>2] = (40844);
    HEAP32[(40852)>>2] = (40844);
    HEAP32[(40864)>>2] = (40852);
    HEAP32[(40860)>>2] = (40852);
    HEAP32[(40872)>>2] = (40860);
    HEAP32[(40868)>>2] = (40860);
    HEAP32[(40880)>>2] = (40868);
    HEAP32[(40876)>>2] = (40868);
    HEAP32[(40888)>>2] = (40876);
    HEAP32[(40884)>>2] = (40876);
    HEAP32[(40896)>>2] = (40884);
    HEAP32[(40892)>>2] = (40884);
    HEAP32[(40904)>>2] = (40892);
    HEAP32[(40900)>>2] = (40892);
    $sub172$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i43$i = ((($tbase$795$i)) + 8|0);
    $95 = $add$ptr$i43$i;
    $and$i44$i = $95 & 7;
    $cmp$i45$i = ($and$i44$i|0)==(0);
    $sub$i46$i = (0 - ($95))|0;
    $and3$i47$i = $sub$i46$i & 7;
    $cond$i48$i = $cmp$i45$i ? 0 : $and3$i47$i;
    $add$ptr4$i49$i = (($tbase$795$i) + ($cond$i48$i)|0);
    $sub5$i50$i = (($sub172$i) - ($cond$i48$i))|0;
    HEAP32[(40628)>>2] = $add$ptr4$i49$i;
    HEAP32[(40616)>>2] = $sub5$i50$i;
    $or$i51$i = $sub5$i50$i | 1;
    $head$i52$i = ((($add$ptr4$i49$i)) + 4|0);
    HEAP32[$head$i52$i>>2] = $or$i51$i;
    $add$ptr6$i53$i = (($tbase$795$i) + ($sub172$i)|0);
    $head7$i54$i = ((($add$ptr6$i53$i)) + 4|0);
    HEAP32[$head7$i54$i>>2] = 40;
    $96 = HEAP32[(41092)>>2]|0;
    HEAP32[(40632)>>2] = $96;
   } else {
    $sp$0112$i = (41052);
    while(1) {
     $97 = HEAP32[$sp$0112$i>>2]|0;
     $size188$i = ((($sp$0112$i)) + 4|0);
     $98 = HEAP32[$size188$i>>2]|0;
     $add$ptr189$i = (($97) + ($98)|0);
     $cmp190$i = ($tbase$795$i|0)==($add$ptr189$i|0);
     if ($cmp190$i) {
      label = 154;
      break;
     }
     $next$i = ((($sp$0112$i)) + 8|0);
     $99 = HEAP32[$next$i>>2]|0;
     $cmp186$i = ($99|0)==(0|0);
     if ($cmp186$i) {
      break;
     } else {
      $sp$0112$i = $99;
     }
    }
    if ((label|0) == 154) {
     $size188$i$le = ((($sp$0112$i)) + 4|0);
     $sflags193$i = ((($sp$0112$i)) + 12|0);
     $100 = HEAP32[$sflags193$i>>2]|0;
     $and194$i = $100 & 8;
     $tobool195$i = ($and194$i|0)==(0);
     if ($tobool195$i) {
      $cmp203$i = ($97>>>0)<=($92>>>0);
      $cmp209$i = ($tbase$795$i>>>0)>($92>>>0);
      $or$cond98$i = $cmp209$i & $cmp203$i;
      if ($or$cond98$i) {
       $add212$i = (($98) + ($tsize$794$i))|0;
       HEAP32[$size188$i$le>>2] = $add212$i;
       $101 = HEAP32[(40616)>>2]|0;
       $add215$i = (($101) + ($tsize$794$i))|0;
       $add$ptr$i35$i = ((($92)) + 8|0);
       $102 = $add$ptr$i35$i;
       $and$i36$i = $102 & 7;
       $cmp$i37$i = ($and$i36$i|0)==(0);
       $sub$i38$i = (0 - ($102))|0;
       $and3$i39$i = $sub$i38$i & 7;
       $cond$i40$i = $cmp$i37$i ? 0 : $and3$i39$i;
       $add$ptr4$i41$i = (($92) + ($cond$i40$i)|0);
       $sub5$i$i = (($add215$i) - ($cond$i40$i))|0;
       HEAP32[(40628)>>2] = $add$ptr4$i41$i;
       HEAP32[(40616)>>2] = $sub5$i$i;
       $or$i$i = $sub5$i$i | 1;
       $head$i42$i = ((($add$ptr4$i41$i)) + 4|0);
       HEAP32[$head$i42$i>>2] = $or$i$i;
       $add$ptr6$i$i = (($92) + ($add215$i)|0);
       $head7$i$i = ((($add$ptr6$i$i)) + 4|0);
       HEAP32[$head7$i$i>>2] = 40;
       $103 = HEAP32[(41092)>>2]|0;
       HEAP32[(40632)>>2] = $103;
       break;
      }
     }
    }
    $104 = HEAP32[(40620)>>2]|0;
    $cmp218$i = ($tbase$795$i>>>0)<($104>>>0);
    if ($cmp218$i) {
     HEAP32[(40620)>>2] = $tbase$795$i;
    }
    $add$ptr227$i = (($tbase$795$i) + ($tsize$794$i)|0);
    $sp$1111$i = (41052);
    while(1) {
     $105 = HEAP32[$sp$1111$i>>2]|0;
     $cmp228$i = ($105|0)==($add$ptr227$i|0);
     if ($cmp228$i) {
      label = 162;
      break;
     }
     $next231$i = ((($sp$1111$i)) + 8|0);
     $106 = HEAP32[$next231$i>>2]|0;
     $cmp224$i = ($106|0)==(0|0);
     if ($cmp224$i) {
      break;
     } else {
      $sp$1111$i = $106;
     }
    }
    if ((label|0) == 162) {
     $sflags235$i = ((($sp$1111$i)) + 12|0);
     $107 = HEAP32[$sflags235$i>>2]|0;
     $and236$i = $107 & 8;
     $tobool237$i = ($and236$i|0)==(0);
     if ($tobool237$i) {
      HEAP32[$sp$1111$i>>2] = $tbase$795$i;
      $size245$i = ((($sp$1111$i)) + 4|0);
      $108 = HEAP32[$size245$i>>2]|0;
      $add246$i = (($108) + ($tsize$794$i))|0;
      HEAP32[$size245$i>>2] = $add246$i;
      $add$ptr$i$i = ((($tbase$795$i)) + 8|0);
      $109 = $add$ptr$i$i;
      $and$i14$i = $109 & 7;
      $cmp$i15$i = ($and$i14$i|0)==(0);
      $sub$i16$i = (0 - ($109))|0;
      $and3$i$i = $sub$i16$i & 7;
      $cond$i17$i = $cmp$i15$i ? 0 : $and3$i$i;
      $add$ptr4$i$i = (($tbase$795$i) + ($cond$i17$i)|0);
      $add$ptr5$i$i = ((($add$ptr227$i)) + 8|0);
      $110 = $add$ptr5$i$i;
      $and6$i18$i = $110 & 7;
      $cmp7$i$i = ($and6$i18$i|0)==(0);
      $sub12$i$i = (0 - ($110))|0;
      $and13$i$i = $sub12$i$i & 7;
      $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
      $add$ptr16$i$i = (($add$ptr227$i) + ($cond15$i$i)|0);
      $sub$ptr$lhs$cast$i19$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i20$i = $add$ptr4$i$i;
      $sub$ptr$sub$i21$i = (($sub$ptr$lhs$cast$i19$i) - ($sub$ptr$rhs$cast$i20$i))|0;
      $add$ptr17$i$i = (($add$ptr4$i$i) + ($nb$0)|0);
      $sub18$i$i = (($sub$ptr$sub$i21$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $head$i22$i = ((($add$ptr4$i$i)) + 4|0);
      HEAP32[$head$i22$i>>2] = $or19$i$i;
      $cmp20$i$i = ($92|0)==($add$ptr16$i$i|0);
      L238: do {
       if ($cmp20$i$i) {
        $111 = HEAP32[(40616)>>2]|0;
        $add$i$i = (($111) + ($sub18$i$i))|0;
        HEAP32[(40616)>>2] = $add$i$i;
        HEAP32[(40628)>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $head23$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $112 = HEAP32[(40624)>>2]|0;
        $cmp24$i$i = ($112|0)==($add$ptr16$i$i|0);
        if ($cmp24$i$i) {
         $113 = HEAP32[(40612)>>2]|0;
         $add26$i$i = (($113) + ($sub18$i$i))|0;
         HEAP32[(40612)>>2] = $add26$i$i;
         HEAP32[(40624)>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $head29$i$i = ((($add$ptr17$i$i)) + 4|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr30$i$i = (($add$ptr17$i$i) + ($add26$i$i)|0);
         HEAP32[$add$ptr30$i$i>>2] = $add26$i$i;
         break;
        }
        $head32$i$i = ((($add$ptr16$i$i)) + 4|0);
        $114 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $114 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $114 & -8;
         $shr$i25$i = $114 >>> 3;
         $cmp38$i$i = ($114>>>0)<(256);
         L246: do {
          if ($cmp38$i$i) {
           $fd$i$i = ((($add$ptr16$i$i)) + 8|0);
           $115 = HEAP32[$fd$i$i>>2]|0;
           $bk$i26$i = ((($add$ptr16$i$i)) + 12|0);
           $116 = HEAP32[$bk$i26$i>>2]|0;
           $cmp46$i$i = ($116|0)==($115|0);
           if ($cmp46$i$i) {
            $shl48$i$i = 1 << $shr$i25$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $117 = HEAP32[10151]|0;
            $and49$i$i = $117 & $neg$i$i;
            HEAP32[10151] = $and49$i$i;
            break;
           } else {
            $bk67$i$i = ((($115)) + 12|0);
            HEAP32[$bk67$i$i>>2] = $116;
            $fd68$i$i = ((($116)) + 8|0);
            HEAP32[$fd68$i$i>>2] = $115;
            break;
           }
          } else {
           $parent$i27$i = ((($add$ptr16$i$i)) + 24|0);
           $118 = HEAP32[$parent$i27$i>>2]|0;
           $bk74$i$i = ((($add$ptr16$i$i)) + 12|0);
           $119 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($119|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $child$i$i = ((($add$ptr16$i$i)) + 16|0);
             $arrayidx96$i$i = ((($child$i$i)) + 4|0);
             $121 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($121|0)==(0|0);
             if ($cmp97$i$i) {
              $122 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($122|0)==(0|0);
              if ($cmp100$i$i) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i$ph = $122;$RP$1$i$i$ph = $child$i$i;
              }
             } else {
              $R$1$i$i$ph = $121;$RP$1$i$i$ph = $arrayidx96$i$i;
             }
             $R$1$i$i = $R$1$i$i$ph;$RP$1$i$i = $RP$1$i$i$ph;
             while(1) {
              $arrayidx103$i$i = ((($R$1$i$i)) + 20|0);
              $123 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($123|0)==(0|0);
              if ($cmp104$i$i) {
               $arrayidx107$i$i = ((($R$1$i$i)) + 16|0);
               $124 = HEAP32[$arrayidx107$i$i>>2]|0;
               $cmp108$i$i = ($124|0)==(0|0);
               if ($cmp108$i$i) {
                break;
               } else {
                $R$1$i$i$be = $124;$RP$1$i$i$be = $arrayidx107$i$i;
               }
              } else {
               $R$1$i$i$be = $123;$RP$1$i$i$be = $arrayidx103$i$i;
              }
              $R$1$i$i = $R$1$i$i$be;$RP$1$i$i = $RP$1$i$i$be;
             }
             HEAP32[$RP$1$i$i>>2] = 0;
             $R$3$i$i = $R$1$i$i;
            } else {
             $fd78$i$i = ((($add$ptr16$i$i)) + 8|0);
             $120 = HEAP32[$fd78$i$i>>2]|0;
             $bk91$i$i = ((($120)) + 12|0);
             HEAP32[$bk91$i$i>>2] = $119;
             $fd92$i$i = ((($119)) + 8|0);
             HEAP32[$fd92$i$i>>2] = $120;
             $R$3$i$i = $119;
            }
           } while(0);
           $cmp120$i28$i = ($118|0)==(0|0);
           if ($cmp120$i28$i) {
            break;
           }
           $index$i29$i = ((($add$ptr16$i$i)) + 28|0);
           $125 = HEAP32[$index$i29$i>>2]|0;
           $arrayidx123$i$i = (40908 + ($125<<2)|0);
           $126 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($126|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$3$i$i;
             $cond1$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond1$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $125;
             $neg132$i$i = $shl131$i$i ^ -1;
             $127 = HEAP32[(40608)>>2]|0;
             $and133$i$i = $127 & $neg132$i$i;
             HEAP32[(40608)>>2] = $and133$i$i;
             break L246;
            } else {
             $arrayidx143$i$i = ((($118)) + 16|0);
             $128 = HEAP32[$arrayidx143$i$i>>2]|0;
             $cmp144$i$i = ($128|0)==($add$ptr16$i$i|0);
             $arrayidx151$i$i = ((($118)) + 20|0);
             $arrayidx151$i$i$sink = $cmp144$i$i ? $arrayidx143$i$i : $arrayidx151$i$i;
             HEAP32[$arrayidx151$i$i$sink>>2] = $R$3$i$i;
             $cmp156$i$i = ($R$3$i$i|0)==(0|0);
             if ($cmp156$i$i) {
              break L246;
             }
            }
           } while(0);
           $parent165$i$i = ((($R$3$i$i)) + 24|0);
           HEAP32[$parent165$i$i>>2] = $118;
           $child166$i$i = ((($add$ptr16$i$i)) + 16|0);
           $129 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($129|0)==(0|0);
           if (!($cmp168$i$i)) {
            $arrayidx178$i$i = ((($R$3$i$i)) + 16|0);
            HEAP32[$arrayidx178$i$i>>2] = $129;
            $parent179$i$i = ((($129)) + 24|0);
            HEAP32[$parent179$i$i>>2] = $R$3$i$i;
           }
           $arrayidx184$i$i = ((($child166$i$i)) + 4|0);
           $130 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($130|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $arrayidx195$i$i = ((($R$3$i$i)) + 20|0);
           HEAP32[$arrayidx195$i$i>>2] = $130;
           $parent196$i$i = ((($130)) + 24|0);
           HEAP32[$parent196$i$i>>2] = $R$3$i$i;
          }
         } while(0);
         $add$ptr205$i$i = (($add$ptr16$i$i) + ($and37$i$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = ((($oldfirst$0$i$i)) + 4|0);
        $131 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $131 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $head211$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr212$i$i = (($add$ptr17$i$i) + ($qsize$0$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl222$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = (40644 + ($shl222$i$i<<2)|0);
         $132 = HEAP32[10151]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $132 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         if ($tobool228$i$i) {
          $or232$i$i = $132 | $shl226$i$i;
          HEAP32[10151] = $or232$i$i;
          $$pre$i31$i = ((($arrayidx223$i$i)) + 8|0);
          $$pre$phi$i32$iZ2D = $$pre$i31$i;$F224$0$i$i = $arrayidx223$i$i;
         } else {
          $133 = ((($arrayidx223$i$i)) + 8|0);
          $134 = HEAP32[$133>>2]|0;
          $$pre$phi$i32$iZ2D = $133;$F224$0$i$i = $134;
         }
         HEAP32[$$pre$phi$i32$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = ((($F224$0$i$i)) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $fd247$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $bk248$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = (40908 + ($I252$0$i$i<<2)|0);
        $index288$i$i = ((($add$ptr17$i$i)) + 28|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $child289$i$i = ((($add$ptr17$i$i)) + 16|0);
        $arrayidx290$i$i = ((($child289$i$i)) + 4|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $135 = HEAP32[(40608)>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $135 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $135 | $shl294$i$i;
         HEAP32[(40608)>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $parent301$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $bk302$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $fd303$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $136 = HEAP32[$arrayidx287$i$i>>2]|0;
        $head3174$i$i = ((($136)) + 4|0);
        $137 = HEAP32[$head3174$i$i>>2]|0;
        $and3185$i$i = $137 & -8;
        $cmp3196$i$i = ($and3185$i$i|0)==($qsize$0$i$i|0);
        L291: do {
         if ($cmp3196$i$i) {
          $T$0$lcssa$i34$i = $136;
         } else {
          $cmp306$i$i = ($I252$0$i$i|0)==(31);
          $shr310$i$i = $I252$0$i$i >>> 1;
          $sub313$i$i = (25 - ($shr310$i$i))|0;
          $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
          $K305$08$i$i = $shl316$i$i;$T$07$i$i = $136;
          while(1) {
           $shr323$i$i = $K305$08$i$i >>> 31;
           $arrayidx325$i$i = (((($T$07$i$i)) + 16|0) + ($shr323$i$i<<2)|0);
           $138 = HEAP32[$arrayidx325$i$i>>2]|0;
           $cmp327$i$i = ($138|0)==(0|0);
           if ($cmp327$i$i) {
            break;
           }
           $shl326$i$i = $K305$08$i$i << 1;
           $head317$i$i = ((($138)) + 4|0);
           $139 = HEAP32[$head317$i$i>>2]|0;
           $and318$i$i = $139 & -8;
           $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
           if ($cmp319$i$i) {
            $T$0$lcssa$i34$i = $138;
            break L291;
           } else {
            $K305$08$i$i = $shl326$i$i;$T$07$i$i = $138;
           }
          }
          HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
          $parent337$i$i = ((($add$ptr17$i$i)) + 24|0);
          HEAP32[$parent337$i$i>>2] = $T$07$i$i;
          $bk338$i$i = ((($add$ptr17$i$i)) + 12|0);
          HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
          $fd339$i$i = ((($add$ptr17$i$i)) + 8|0);
          HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
          break L238;
         }
        } while(0);
        $fd344$i$i = ((($T$0$lcssa$i34$i)) + 8|0);
        $140 = HEAP32[$fd344$i$i>>2]|0;
        $bk357$i$i = ((($140)) + 12|0);
        HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
        HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
        $fd359$i$i = ((($add$ptr17$i$i)) + 8|0);
        HEAP32[$fd359$i$i>>2] = $140;
        $bk360$i$i = ((($add$ptr17$i$i)) + 12|0);
        HEAP32[$bk360$i$i>>2] = $T$0$lcssa$i34$i;
        $parent361$i$i = ((($add$ptr17$i$i)) + 24|0);
        HEAP32[$parent361$i$i>>2] = 0;
       }
      } while(0);
      $add$ptr369$i$i = ((($add$ptr4$i$i)) + 8|0);
      $retval$0 = $add$ptr369$i$i;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $sp$0$i$i$i = (41052);
    while(1) {
     $141 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($141>>>0)>($92>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = ((($sp$0$i$i$i)) + 4|0);
      $142 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($141) + ($142)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($92>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = ((($sp$0$i$i$i)) + 8|0);
     $143 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $143;
    }
    $add$ptr2$i$i = ((($add$ptr$i$i$i)) + -47|0);
    $add$ptr3$i$i = ((($add$ptr2$i$i)) + 8|0);
    $144 = $add$ptr3$i$i;
    $and$i$i = $144 & 7;
    $cmp$i12$i = ($and$i$i|0)==(0);
    $sub$i$i = (0 - ($144))|0;
    $and6$i13$i = $sub$i$i & 7;
    $cond$i$i = $cmp$i12$i ? 0 : $and6$i13$i;
    $add$ptr7$i$i = (($add$ptr2$i$i) + ($cond$i$i)|0);
    $add$ptr81$i$i = ((($92)) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr81$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $92 : $add$ptr7$i$i;
    $add$ptr14$i$i = ((($cond13$i$i)) + 8|0);
    $add$ptr15$i$i = ((($cond13$i$i)) + 24|0);
    $sub16$i$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i2$i$i = ((($tbase$795$i)) + 8|0);
    $145 = $add$ptr$i2$i$i;
    $and$i$i$i = $145 & 7;
    $cmp$i3$i$i = ($and$i$i$i|0)==(0);
    $sub$i$i$i = (0 - ($145))|0;
    $and3$i$i$i = $sub$i$i$i & 7;
    $cond$i$i$i = $cmp$i3$i$i ? 0 : $and3$i$i$i;
    $add$ptr4$i$i$i = (($tbase$795$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[(40628)>>2] = $add$ptr4$i$i$i;
    HEAP32[(40616)>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $head$i$i$i = ((($add$ptr4$i$i$i)) + 4|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$i$i$i = (($tbase$795$i) + ($sub16$i$i)|0);
    $head7$i$i$i = ((($add$ptr6$i$i$i)) + 4|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $146 = HEAP32[(41092)>>2]|0;
    HEAP32[(40632)>>2] = $146;
    $head$i$i = ((($cond13$i$i)) + 4|0);
    HEAP32[$head$i$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i>>2]=HEAP32[(41052)>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[(41052)+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[(41052)+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[(41052)+12>>2]|0;
    HEAP32[(41052)>>2] = $tbase$795$i;
    HEAP32[(41056)>>2] = $tsize$794$i;
    HEAP32[(41064)>>2] = 0;
    HEAP32[(41060)>>2] = $add$ptr14$i$i;
    $147 = $add$ptr15$i$i;
    while(1) {
     $add$ptr24$i$i = ((($147)) + 4|0);
     HEAP32[$add$ptr24$i$i>>2] = 7;
     $head26$i$i = ((($147)) + 8|0);
     $cmp27$i$i = ($head26$i$i>>>0)<($add$ptr$i$i$i>>>0);
     if ($cmp27$i$i) {
      $147 = $add$ptr24$i$i;
     } else {
      break;
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($92|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $92;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $148 = HEAP32[$head$i$i>>2]|0;
     $and32$i$i = $148 & -2;
     HEAP32[$head$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = ((($92)) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$cond13$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i$i = $shr$i$i << 1;
      $arrayidx$i$i = (40644 + ($shl$i$i<<2)|0);
      $149 = HEAP32[10151]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $149 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      if ($tobool$i$i) {
       $or44$i$i = $149 | $shl39$i$i;
       HEAP32[10151] = $or44$i$i;
       $$pre$i$i = ((($arrayidx$i$i)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i$i;
      } else {
       $150 = ((($arrayidx$i$i)) + 8|0);
       $151 = HEAP32[$150>>2]|0;
       $$pre$phi$i$iZ2D = $150;$F$0$i$i = $151;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $92;
      $bk$i$i = ((($F$0$i$i)) + 12|0);
      HEAP32[$bk$i$i>>2] = $92;
      $fd54$i$i = ((($92)) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = ((($92)) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = (40908 + ($I57$0$i$i<<2)|0);
     $index$i$i = ((($92)) + 28|0);
     HEAP32[$index$i$i>>2] = $I57$0$i$i;
     $arrayidx92$i$i = ((($92)) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     HEAP32[$add$ptr81$i$i>>2] = 0;
     $152 = HEAP32[(40608)>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $152 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $152 | $shl95$i$i;
      HEAP32[(40608)>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $92;
      $parent$i$i = ((($92)) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = ((($92)) + 12|0);
      HEAP32[$bk102$i$i>>2] = $92;
      $fd103$i$i = ((($92)) + 8|0);
      HEAP32[$fd103$i$i>>2] = $92;
      break;
     }
     $153 = HEAP32[$arrayidx91$i$i>>2]|0;
     $head1186$i$i = ((($153)) + 4|0);
     $154 = HEAP32[$head1186$i$i>>2]|0;
     $and1197$i$i = $154 & -8;
     $cmp1208$i$i = ($and1197$i$i|0)==($sub$ptr$sub$i$i|0);
     L325: do {
      if ($cmp1208$i$i) {
       $T$0$lcssa$i$i = $153;
      } else {
       $cmp106$i$i = ($I57$0$i$i|0)==(31);
       $shr110$i$i = $I57$0$i$i >>> 1;
       $sub113$i$i = (25 - ($shr110$i$i))|0;
       $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
       $K105$010$i$i = $shl116$i$i;$T$09$i$i = $153;
       while(1) {
        $shr124$i$i = $K105$010$i$i >>> 31;
        $arrayidx126$i$i = (((($T$09$i$i)) + 16|0) + ($shr124$i$i<<2)|0);
        $155 = HEAP32[$arrayidx126$i$i>>2]|0;
        $cmp128$i$i = ($155|0)==(0|0);
        if ($cmp128$i$i) {
         break;
        }
        $shl127$i$i = $K105$010$i$i << 1;
        $head118$i$i = ((($155)) + 4|0);
        $156 = HEAP32[$head118$i$i>>2]|0;
        $and119$i$i = $156 & -8;
        $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
        if ($cmp120$i$i) {
         $T$0$lcssa$i$i = $155;
         break L325;
        } else {
         $K105$010$i$i = $shl127$i$i;$T$09$i$i = $155;
        }
       }
       HEAP32[$arrayidx126$i$i>>2] = $92;
       $parent138$i$i = ((($92)) + 24|0);
       HEAP32[$parent138$i$i>>2] = $T$09$i$i;
       $bk139$i$i = ((($92)) + 12|0);
       HEAP32[$bk139$i$i>>2] = $92;
       $fd140$i$i = ((($92)) + 8|0);
       HEAP32[$fd140$i$i>>2] = $92;
       break L215;
      }
     } while(0);
     $fd148$i$i = ((($T$0$lcssa$i$i)) + 8|0);
     $157 = HEAP32[$fd148$i$i>>2]|0;
     $bk158$i$i = ((($157)) + 12|0);
     HEAP32[$bk158$i$i>>2] = $92;
     HEAP32[$fd148$i$i>>2] = $92;
     $fd160$i$i = ((($92)) + 8|0);
     HEAP32[$fd160$i$i>>2] = $157;
     $bk161$i$i = ((($92)) + 12|0);
     HEAP32[$bk161$i$i>>2] = $T$0$lcssa$i$i;
     $parent162$i$i = ((($92)) + 24|0);
     HEAP32[$parent162$i$i>>2] = 0;
    }
   }
  } while(0);
  $158 = HEAP32[(40616)>>2]|0;
  $cmp257$i = ($158>>>0)>($nb$0>>>0);
  if ($cmp257$i) {
   $sub260$i = (($158) - ($nb$0))|0;
   HEAP32[(40616)>>2] = $sub260$i;
   $159 = HEAP32[(40628)>>2]|0;
   $add$ptr262$i = (($159) + ($nb$0)|0);
   HEAP32[(40628)>>2] = $add$ptr262$i;
   $or264$i = $sub260$i | 1;
   $head265$i = ((($add$ptr262$i)) + 4|0);
   HEAP32[$head265$i>>2] = $or264$i;
   $or267$i = $nb$0 | 3;
   $head268$i = ((($159)) + 4|0);
   HEAP32[$head268$i>>2] = $or267$i;
   $add$ptr269$i = ((($159)) + 8|0);
   $retval$0 = $add$ptr269$i;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $call275$i = (___errno_location()|0);
 HEAP32[$call275$i>>2] = 12;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0266 = 0;
 var $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0265 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr217 = 0, $add$ptr261 = 0;
 var $add$ptr482 = 0, $add$ptr498 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add550 = 0, $add555 = 0, $add559 = 0, $add561 = 0, $add564 = 0, $and12 = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and232 = 0, $and240 = 0, $and266 = 0, $and301 = 0;
 var $and410 = 0, $and46 = 0, $and495 = 0, $and5 = 0, $and512 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $and563 = 0, $and574 = 0, $and592 = 0, $and592263 = 0, $and8 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx157$sink = 0, $arrayidx182 = 0;
 var $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx427 = 0, $arrayidx427$sink = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx470 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx570 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk = 0, $bk275 = 0, $bk321 = 0;
 var $bk333 = 0, $bk355 = 0, $bk529 = 0, $bk531 = 0, $bk580 = 0, $bk611 = 0, $bk631 = 0, $bk634 = 0, $bk66 = 0, $bk73 = 0, $bk94 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $child569 = 0, $cmp = 0, $cmp$i = 0, $cmp100 = 0, $cmp104 = 0;
 var $cmp109 = 0, $cmp114 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp150 = 0, $cmp162 = 0, $cmp173 = 0, $cmp18 = 0, $cmp189 = 0, $cmp211 = 0, $cmp22 = 0, $cmp228 = 0, $cmp243 = 0, $cmp249 = 0, $cmp25 = 0, $cmp255 = 0, $cmp269 = 0, $cmp296 = 0, $cmp334 = 0;
 var $cmp363 = 0, $cmp368 = 0, $cmp375 = 0, $cmp380 = 0, $cmp395 = 0, $cmp401 = 0, $cmp42 = 0, $cmp420 = 0, $cmp432 = 0, $cmp445 = 0, $cmp461 = 0, $cmp484 = 0, $cmp502 = 0, $cmp536 = 0, $cmp540 = 0, $cmp584 = 0, $cmp593 = 0, $cmp593264 = 0, $cmp601 = 0, $cmp640 = 0;
 var $cmp74 = 0, $cond = 0, $cond254 = 0, $cond255 = 0, $dec = 0, $fd = 0, $fd273 = 0, $fd322 = 0, $fd338 = 0, $fd356 = 0, $fd530 = 0, $fd581 = 0, $fd612 = 0, $fd620 = 0, $fd633 = 0, $fd67 = 0, $fd78 = 0, $fd95 = 0, $head209 = 0, $head216 = 0;
 var $head231 = 0, $head248 = 0, $head260 = 0, $head4 = 0, $head481 = 0, $head497 = 0, $head591 = 0, $head591262 = 0, $idx$neg = 0, $index = 0, $index399 = 0, $index568 = 0, $neg = 0, $neg139 = 0, $neg300 = 0, $neg409 = 0, $next4$i = 0, $or = 0, $or247 = 0, $or259 = 0;
 var $or480 = 0, $or496 = 0, $or516 = 0, $or578 = 0, $p$1 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent331 = 0, $parent442 = 0, $parent455 = 0, $parent471 = 0, $parent579 = 0, $parent610 = 0, $parent635 = 0, $psize$1 = 0, $psize$2 = 0, $shl138 = 0, $shl299 = 0;
 var $shl408 = 0, $shl45 = 0, $shl508 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl557 = 0, $shl560 = 0, $shl573 = 0, $shl590 = 0, $shl600 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $shr544 = 0, $shr548 = 0, $shr553 = 0, $shr558 = 0, $shr562 = 0;
 var $shr586 = 0, $shr597 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub547 = 0, $sub552 = 0, $sub556 = 0, $sub589 = 0, $tobool233 = 0, $tobool241 = 0, $tobool513 = 0, $tobool575 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  return;
 }
 $add$ptr = ((($mem)) + -8|0);
 $0 = HEAP32[(40620)>>2]|0;
 $head4 = ((($mem)) + -4|0);
 $1 = HEAP32[$head4>>2]|0;
 $and5 = $1 & -8;
 $add$ptr6 = (($add$ptr) + ($and5)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $and12 = $1 & 3;
   $cmp13 = ($and12|0)==(0);
   if ($cmp13) {
    return;
   }
   $idx$neg = (0 - ($2))|0;
   $add$ptr16 = (($add$ptr) + ($idx$neg)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    return;
   }
   $3 = HEAP32[(40624)>>2]|0;
   $cmp22 = ($3|0)==($add$ptr16|0);
   if ($cmp22) {
    $head209 = ((($add$ptr6)) + 4|0);
    $20 = HEAP32[$head209>>2]|0;
    $and210 = $20 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $add$ptr217 = (($add$ptr16) + ($add17)|0);
    $head216 = ((($add$ptr16)) + 4|0);
    $or = $add17 | 1;
    $and215 = $20 & -2;
    HEAP32[(40612)>>2] = $add17;
    HEAP32[$head209>>2] = $and215;
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr217>>2] = $add17;
    return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $fd = ((($add$ptr16)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr16)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $6 = HEAP32[10151]|0;
     $and46 = $6 & $neg;
     HEAP32[10151] = $and46;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    } else {
     $bk66 = ((($4)) + 12|0);
     HEAP32[$bk66>>2] = $5;
     $fd67 = ((($5)) + 8|0);
     HEAP32[$fd67>>2] = $4;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
   }
   $parent = ((($add$ptr16)) + 24|0);
   $7 = HEAP32[$parent>>2]|0;
   $bk73 = ((($add$ptr16)) + 12|0);
   $8 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($8|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child = ((($add$ptr16)) + 16|0);
     $arrayidx99 = ((($child)) + 4|0);
     $10 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($10|0)==(0|0);
     if ($cmp100) {
      $11 = HEAP32[$child>>2]|0;
      $cmp104 = ($11|0)==(0|0);
      if ($cmp104) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $11;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $10;$RP$1$ph = $arrayidx99;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx108 = ((($R$1)) + 20|0);
      $12 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($12|0)==(0|0);
      if ($cmp109) {
       $arrayidx113 = ((($R$1)) + 16|0);
       $13 = HEAP32[$arrayidx113>>2]|0;
       $cmp114 = ($13|0)==(0|0);
       if ($cmp114) {
        break;
       } else {
        $R$1$be = $13;$RP$1$be = $arrayidx113;
       }
      } else {
       $R$1$be = $12;$RP$1$be = $arrayidx108;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd78 = ((($add$ptr16)) + 8|0);
     $9 = HEAP32[$fd78>>2]|0;
     $bk94 = ((($9)) + 12|0);
     HEAP32[$bk94>>2] = $8;
     $fd95 = ((($8)) + 8|0);
     HEAP32[$fd95>>2] = $9;
     $R$3 = $8;
    }
   } while(0);
   $cmp127 = ($7|0)==(0|0);
   if ($cmp127) {
    $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
   } else {
    $index = ((($add$ptr16)) + 28|0);
    $14 = HEAP32[$index>>2]|0;
    $arrayidx130 = (40908 + ($14<<2)|0);
    $15 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($15|0)==($add$ptr16|0);
    if ($cmp131) {
     HEAP32[$arrayidx130>>2] = $R$3;
     $cond254 = ($R$3|0)==(0|0);
     if ($cond254) {
      $shl138 = 1 << $14;
      $neg139 = $shl138 ^ -1;
      $16 = HEAP32[(40608)>>2]|0;
      $and140 = $16 & $neg139;
      HEAP32[(40608)>>2] = $and140;
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    } else {
     $arrayidx149 = ((($7)) + 16|0);
     $17 = HEAP32[$arrayidx149>>2]|0;
     $cmp150 = ($17|0)==($add$ptr16|0);
     $arrayidx157 = ((($7)) + 20|0);
     $arrayidx157$sink = $cmp150 ? $arrayidx149 : $arrayidx157;
     HEAP32[$arrayidx157$sink>>2] = $R$3;
     $cmp162 = ($R$3|0)==(0|0);
     if ($cmp162) {
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    }
    $parent170 = ((($R$3)) + 24|0);
    HEAP32[$parent170>>2] = $7;
    $child171 = ((($add$ptr16)) + 16|0);
    $18 = HEAP32[$child171>>2]|0;
    $cmp173 = ($18|0)==(0|0);
    if (!($cmp173)) {
     $arrayidx182 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx182>>2] = $18;
     $parent183 = ((($18)) + 24|0);
     HEAP32[$parent183>>2] = $R$3;
    }
    $arrayidx188 = ((($child171)) + 4|0);
    $19 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($19|0)==(0|0);
    if ($cmp189) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    } else {
     $arrayidx198 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx198>>2] = $19;
     $parent199 = ((($19)) + 24|0);
     HEAP32[$parent199>>2] = $R$3;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    }
   }
  } else {
   $21 = $add$ptr;$p$1 = $add$ptr;$psize$1 = $and5;
  }
 } while(0);
 $cmp228 = ($21>>>0)<($add$ptr6>>>0);
 if (!($cmp228)) {
  return;
 }
 $head231 = ((($add$ptr6)) + 4|0);
 $22 = HEAP32[$head231>>2]|0;
 $and232 = $22 & 1;
 $tobool233 = ($and232|0)==(0);
 if ($tobool233) {
  return;
 }
 $and240 = $22 & 2;
 $tobool241 = ($and240|0)==(0);
 if ($tobool241) {
  $23 = HEAP32[(40628)>>2]|0;
  $cmp243 = ($23|0)==($add$ptr6|0);
  if ($cmp243) {
   $24 = HEAP32[(40616)>>2]|0;
   $add246 = (($24) + ($psize$1))|0;
   HEAP32[(40616)>>2] = $add246;
   HEAP32[(40628)>>2] = $p$1;
   $or247 = $add246 | 1;
   $head248 = ((($p$1)) + 4|0);
   HEAP32[$head248>>2] = $or247;
   $25 = HEAP32[(40624)>>2]|0;
   $cmp249 = ($p$1|0)==($25|0);
   if (!($cmp249)) {
    return;
   }
   HEAP32[(40624)>>2] = 0;
   HEAP32[(40612)>>2] = 0;
   return;
  }
  $26 = HEAP32[(40624)>>2]|0;
  $cmp255 = ($26|0)==($add$ptr6|0);
  if ($cmp255) {
   $27 = HEAP32[(40612)>>2]|0;
   $add258 = (($27) + ($psize$1))|0;
   HEAP32[(40612)>>2] = $add258;
   HEAP32[(40624)>>2] = $21;
   $or259 = $add258 | 1;
   $head260 = ((($p$1)) + 4|0);
   HEAP32[$head260>>2] = $or259;
   $add$ptr261 = (($21) + ($add258)|0);
   HEAP32[$add$ptr261>>2] = $add258;
   return;
  }
  $and266 = $22 & -8;
  $add267 = (($and266) + ($psize$1))|0;
  $shr268 = $22 >>> 3;
  $cmp269 = ($22>>>0)<(256);
  do {
   if ($cmp269) {
    $fd273 = ((($add$ptr6)) + 8|0);
    $28 = HEAP32[$fd273>>2]|0;
    $bk275 = ((($add$ptr6)) + 12|0);
    $29 = HEAP32[$bk275>>2]|0;
    $cmp296 = ($29|0)==($28|0);
    if ($cmp296) {
     $shl299 = 1 << $shr268;
     $neg300 = $shl299 ^ -1;
     $30 = HEAP32[10151]|0;
     $and301 = $30 & $neg300;
     HEAP32[10151] = $and301;
     break;
    } else {
     $bk321 = ((($28)) + 12|0);
     HEAP32[$bk321>>2] = $29;
     $fd322 = ((($29)) + 8|0);
     HEAP32[$fd322>>2] = $28;
     break;
    }
   } else {
    $parent331 = ((($add$ptr6)) + 24|0);
    $31 = HEAP32[$parent331>>2]|0;
    $bk333 = ((($add$ptr6)) + 12|0);
    $32 = HEAP32[$bk333>>2]|0;
    $cmp334 = ($32|0)==($add$ptr6|0);
    do {
     if ($cmp334) {
      $child361 = ((($add$ptr6)) + 16|0);
      $arrayidx362 = ((($child361)) + 4|0);
      $34 = HEAP32[$arrayidx362>>2]|0;
      $cmp363 = ($34|0)==(0|0);
      if ($cmp363) {
       $35 = HEAP32[$child361>>2]|0;
       $cmp368 = ($35|0)==(0|0);
       if ($cmp368) {
        $R332$3 = 0;
        break;
       } else {
        $R332$1$ph = $35;$RP360$1$ph = $child361;
       }
      } else {
       $R332$1$ph = $34;$RP360$1$ph = $arrayidx362;
      }
      $R332$1 = $R332$1$ph;$RP360$1 = $RP360$1$ph;
      while(1) {
       $arrayidx374 = ((($R332$1)) + 20|0);
       $36 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($36|0)==(0|0);
       if ($cmp375) {
        $arrayidx379 = ((($R332$1)) + 16|0);
        $37 = HEAP32[$arrayidx379>>2]|0;
        $cmp380 = ($37|0)==(0|0);
        if ($cmp380) {
         break;
        } else {
         $R332$1$be = $37;$RP360$1$be = $arrayidx379;
        }
       } else {
        $R332$1$be = $36;$RP360$1$be = $arrayidx374;
       }
       $R332$1 = $R332$1$be;$RP360$1 = $RP360$1$be;
      }
      HEAP32[$RP360$1>>2] = 0;
      $R332$3 = $R332$1;
     } else {
      $fd338 = ((($add$ptr6)) + 8|0);
      $33 = HEAP32[$fd338>>2]|0;
      $bk355 = ((($33)) + 12|0);
      HEAP32[$bk355>>2] = $32;
      $fd356 = ((($32)) + 8|0);
      HEAP32[$fd356>>2] = $33;
      $R332$3 = $32;
     }
    } while(0);
    $cmp395 = ($31|0)==(0|0);
    if (!($cmp395)) {
     $index399 = ((($add$ptr6)) + 28|0);
     $38 = HEAP32[$index399>>2]|0;
     $arrayidx400 = (40908 + ($38<<2)|0);
     $39 = HEAP32[$arrayidx400>>2]|0;
     $cmp401 = ($39|0)==($add$ptr6|0);
     if ($cmp401) {
      HEAP32[$arrayidx400>>2] = $R332$3;
      $cond255 = ($R332$3|0)==(0|0);
      if ($cond255) {
       $shl408 = 1 << $38;
       $neg409 = $shl408 ^ -1;
       $40 = HEAP32[(40608)>>2]|0;
       $and410 = $40 & $neg409;
       HEAP32[(40608)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx419 = ((($31)) + 16|0);
      $41 = HEAP32[$arrayidx419>>2]|0;
      $cmp420 = ($41|0)==($add$ptr6|0);
      $arrayidx427 = ((($31)) + 20|0);
      $arrayidx427$sink = $cmp420 ? $arrayidx419 : $arrayidx427;
      HEAP32[$arrayidx427$sink>>2] = $R332$3;
      $cmp432 = ($R332$3|0)==(0|0);
      if ($cmp432) {
       break;
      }
     }
     $parent442 = ((($R332$3)) + 24|0);
     HEAP32[$parent442>>2] = $31;
     $child443 = ((($add$ptr6)) + 16|0);
     $42 = HEAP32[$child443>>2]|0;
     $cmp445 = ($42|0)==(0|0);
     if (!($cmp445)) {
      $arrayidx454 = ((($R332$3)) + 16|0);
      HEAP32[$arrayidx454>>2] = $42;
      $parent455 = ((($42)) + 24|0);
      HEAP32[$parent455>>2] = $R332$3;
     }
     $arrayidx460 = ((($child443)) + 4|0);
     $43 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($43|0)==(0|0);
     if (!($cmp461)) {
      $arrayidx470 = ((($R332$3)) + 20|0);
      HEAP32[$arrayidx470>>2] = $43;
      $parent471 = ((($43)) + 24|0);
      HEAP32[$parent471>>2] = $R332$3;
     }
    }
   }
  } while(0);
  $or480 = $add267 | 1;
  $head481 = ((($p$1)) + 4|0);
  HEAP32[$head481>>2] = $or480;
  $add$ptr482 = (($21) + ($add267)|0);
  HEAP32[$add$ptr482>>2] = $add267;
  $44 = HEAP32[(40624)>>2]|0;
  $cmp484 = ($p$1|0)==($44|0);
  if ($cmp484) {
   HEAP32[(40612)>>2] = $add267;
   return;
  } else {
   $psize$2 = $add267;
  }
 } else {
  $and495 = $22 & -2;
  HEAP32[$head231>>2] = $and495;
  $or496 = $psize$1 | 1;
  $head497 = ((($p$1)) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($21) + ($psize$1)|0);
  HEAP32[$add$ptr498>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 $cmp502 = ($psize$2>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx509 = (40644 + ($shl508<<2)|0);
  $45 = HEAP32[10151]|0;
  $shl511 = 1 << $shr501;
  $and512 = $45 & $shl511;
  $tobool513 = ($and512|0)==(0);
  if ($tobool513) {
   $or516 = $45 | $shl511;
   HEAP32[10151] = $or516;
   $$pre = ((($arrayidx509)) + 8|0);
   $$pre$phiZ2D = $$pre;$F510$0 = $arrayidx509;
  } else {
   $46 = ((($arrayidx509)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $$pre$phiZ2D = $46;$F510$0 = $47;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $bk529 = ((($F510$0)) + 12|0);
  HEAP32[$bk529>>2] = $p$1;
  $fd530 = ((($p$1)) + 8|0);
  HEAP32[$fd530>>2] = $F510$0;
  $bk531 = ((($p$1)) + 12|0);
  HEAP32[$bk531>>2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 $cmp536 = ($shr535|0)==(0);
 if ($cmp536) {
  $I534$0 = 0;
 } else {
  $cmp540 = ($psize$2>>>0)>(16777215);
  if ($cmp540) {
   $I534$0 = 31;
  } else {
   $sub = (($shr535) + 1048320)|0;
   $shr544 = $sub >>> 16;
   $and545 = $shr544 & 8;
   $shl546 = $shr535 << $and545;
   $sub547 = (($shl546) + 520192)|0;
   $shr548 = $sub547 >>> 16;
   $and549 = $shr548 & 4;
   $add550 = $and549 | $and545;
   $shl551 = $shl546 << $and549;
   $sub552 = (($shl551) + 245760)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 2;
   $add555 = $add550 | $and554;
   $sub556 = (14 - ($add555))|0;
   $shl557 = $shl551 << $and554;
   $shr558 = $shl557 >>> 15;
   $add559 = (($sub556) + ($shr558))|0;
   $shl560 = $add559 << 1;
   $add561 = (($add559) + 7)|0;
   $shr562 = $psize$2 >>> $add561;
   $and563 = $shr562 & 1;
   $add564 = $and563 | $shl560;
   $I534$0 = $add564;
  }
 }
 $arrayidx567 = (40908 + ($I534$0<<2)|0);
 $index568 = ((($p$1)) + 28|0);
 HEAP32[$index568>>2] = $I534$0;
 $child569 = ((($p$1)) + 16|0);
 $arrayidx570 = ((($p$1)) + 20|0);
 HEAP32[$arrayidx570>>2] = 0;
 HEAP32[$child569>>2] = 0;
 $48 = HEAP32[(40608)>>2]|0;
 $shl573 = 1 << $I534$0;
 $and574 = $48 & $shl573;
 $tobool575 = ($and574|0)==(0);
 L112: do {
  if ($tobool575) {
   $or578 = $48 | $shl573;
   HEAP32[(40608)>>2] = $or578;
   HEAP32[$arrayidx567>>2] = $p$1;
   $parent579 = ((($p$1)) + 24|0);
   HEAP32[$parent579>>2] = $arrayidx567;
   $bk580 = ((($p$1)) + 12|0);
   HEAP32[$bk580>>2] = $p$1;
   $fd581 = ((($p$1)) + 8|0);
   HEAP32[$fd581>>2] = $p$1;
  } else {
   $49 = HEAP32[$arrayidx567>>2]|0;
   $head591262 = ((($49)) + 4|0);
   $50 = HEAP32[$head591262>>2]|0;
   $and592263 = $50 & -8;
   $cmp593264 = ($and592263|0)==($psize$2|0);
   L115: do {
    if ($cmp593264) {
     $T$0$lcssa = $49;
    } else {
     $cmp584 = ($I534$0|0)==(31);
     $shr586 = $I534$0 >>> 1;
     $sub589 = (25 - ($shr586))|0;
     $cond = $cmp584 ? 0 : $sub589;
     $shl590 = $psize$2 << $cond;
     $K583$0266 = $shl590;$T$0265 = $49;
     while(1) {
      $shr597 = $K583$0266 >>> 31;
      $arrayidx599 = (((($T$0265)) + 16|0) + ($shr597<<2)|0);
      $51 = HEAP32[$arrayidx599>>2]|0;
      $cmp601 = ($51|0)==(0|0);
      if ($cmp601) {
       break;
      }
      $shl600 = $K583$0266 << 1;
      $head591 = ((($51)) + 4|0);
      $52 = HEAP32[$head591>>2]|0;
      $and592 = $52 & -8;
      $cmp593 = ($and592|0)==($psize$2|0);
      if ($cmp593) {
       $T$0$lcssa = $51;
       break L115;
      } else {
       $K583$0266 = $shl600;$T$0265 = $51;
      }
     }
     HEAP32[$arrayidx599>>2] = $p$1;
     $parent610 = ((($p$1)) + 24|0);
     HEAP32[$parent610>>2] = $T$0265;
     $bk611 = ((($p$1)) + 12|0);
     HEAP32[$bk611>>2] = $p$1;
     $fd612 = ((($p$1)) + 8|0);
     HEAP32[$fd612>>2] = $p$1;
     break L112;
    }
   } while(0);
   $fd620 = ((($T$0$lcssa)) + 8|0);
   $53 = HEAP32[$fd620>>2]|0;
   $bk631 = ((($53)) + 12|0);
   HEAP32[$bk631>>2] = $p$1;
   HEAP32[$fd620>>2] = $p$1;
   $fd633 = ((($p$1)) + 8|0);
   HEAP32[$fd633>>2] = $53;
   $bk634 = ((($p$1)) + 12|0);
   HEAP32[$bk634>>2] = $T$0$lcssa;
   $parent635 = ((($p$1)) + 24|0);
   HEAP32[$parent635>>2] = 0;
  }
 } while(0);
 $54 = HEAP32[(40636)>>2]|0;
 $dec = (($54) + -1)|0;
 HEAP32[(40636)>>2] = $dec;
 $cmp640 = ($dec|0)==(0);
 if (!($cmp640)) {
  return;
 }
 $sp$0$in$i = (41060);
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = ((($sp$0$i)) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[(40636)>>2] = -1;
 return;
}
function _pthread_key_create($key,$destructor) {
 $key = $key|0;
 $destructor = $destructor|0;
 var $0 = 0, $arrayidx1 = 0, $call = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($key|0)==(0|0);
 if ($cmp) {
  $retval$0 = 22;
  return ($retval$0|0);
 }
 $call = (_malloc(8)|0);
 HEAP32[$call>>2] = 0;
 $arrayidx1 = ((($call)) + 4|0);
 HEAP32[$arrayidx1>>2] = 38177486;
 $0 = $call;
 HEAP32[$key>>2] = $0;
 $retval$0 = 0;
 return ($retval$0|0);
}
function _pthread_getspecific($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $key;
 $arrayidx = ((($0)) + 4|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $cmp = ($1|0)==(38177486);
 if (!($cmp)) {
  $retval$0 = 0;
  return ($retval$0|0);
 }
 $2 = $key;
 $3 = HEAP32[$2>>2]|0;
 $retval$0 = $3;
 return ($retval$0|0);
}
function _pthread_setspecific($key,$value) {
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $key;
 $arrayidx = ((($0)) + 4|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $cmp = ($1|0)==(38177486);
 if (!($cmp)) {
  $retval$0 = 22;
  return ($retval$0|0);
 }
 $2 = $value;
 HEAP32[$0>>2] = $2;
 $retval$0 = 0;
 return ($retval$0|0);
}
function _pthread_once($once_control,$init_routine) {
 $once_control = $once_control|0;
 $init_routine = $init_routine|0;
 var $0 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$once_control>>2]|0;
 $cmp = ($0|0)==(324508639);
 if ($cmp) {
  return 0;
 }
 FUNCTION_TABLE_v[$init_routine & 3]();
 HEAP32[$once_control>>2] = 324508639;
 return 0;
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  _memcpy(($__s1|0),($__s2|0),($__n|0))|0;
 }
 return ($__s1|0);
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($__s)|0);
 return ($call|0);
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__c2>>0]|0;
 HEAP8[$__c1>>0] = $0;
 return;
}
function __Znwm($size) {
 $size = $size|0;
 var $call = 0, $call$lcssa = 0, $call2 = 0, $cmp = 0, $cmp1 = 0, $spec$store$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($size|0)==(0);
 $spec$store$select = $cmp ? 1 : $size;
 while(1) {
  $call = (_malloc($spec$store$select)|0);
  $cmp1 = ($call|0)==(0|0);
  if (!($cmp1)) {
   $call$lcssa = $call;
   break;
  }
  $call2 = (__ZSt15get_new_handlerv()|0);
  $tobool = ($call2|0)==(0|0);
  if ($tobool) {
   $call$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$call2 & 3]();
 }
 return ($call$lcssa|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNSt3__213random_deviceC2ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($this,$__token) {
 $this = $this|0;
 $__token = $__token|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i$i3 = 0, $call2 = 0, $call4 = 0, $cmp = 0, $cond$i$i$i = 0, $cond$i$i$i9 = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $__size_$i$i$i$i = ((($__token)) + 11|0);
 $0 = HEAP8[$__size_$i$i$i$i>>0]|0;
 $tobool$i$i$i$i = ($0<<24>>24)<(0);
 $1 = HEAP32[$__token>>2]|0;
 $cond$i$i$i = $tobool$i$i$i$i ? $1 : $__token;
 $call2 = (_open($cond$i$i$i,0,$vararg_buffer)|0);
 HEAP32[$this>>2] = $call2;
 $cmp = ($call2|0)<(0);
 if ($cmp) {
  $call4 = (___errno_location()|0);
  $2 = HEAP32[$call4>>2]|0;
  __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($vararg_buffer,37240,$__token);
  $__size_$i$i$i$i3 = ((($vararg_buffer)) + 11|0);
  $3 = HEAP8[$__size_$i$i$i$i3>>0]|0;
  $tobool$i$i$i$i4 = ($3<<24>>24)<(0);
  $4 = HEAP32[$vararg_buffer>>2]|0;
  $cond$i$i$i9 = $tobool$i$i$i$i4 ? $4 : $vararg_buffer;
  __ZNSt3__220__throw_system_errorEiPKc($2,$cond$i$i$i9);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__213random_deviceD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (_close($0)|0);
 return;
}
function __ZNSt3__213random_deviceclEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $call = 0, $call5 = 0, $call8 = 0, $cmp = 0, $cmp6 = 0, $n$0$ph = 0, $p$0$ph = 0, $r = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $r = sp;
 $n$0$ph = 4;$p$0$ph = $r;
 L1: while(1) {
  $cmp = ($n$0$ph|0)==(0);
  if ($cmp) {
   label = 9;
   break;
  }
  L4: while(1) {
   $0 = HEAP32[$this>>2]|0;
   $call = (_read($0,$p$0$ph,$n$0$ph)|0);
   switch ($call|0) {
   case 0:  {
    label = 5;
    break L1;
    break;
   }
   case -1:  {
    break;
   }
   default: {
    break L4;
   }
   }
   $call5 = (___errno_location()|0);
   $1 = HEAP32[$call5>>2]|0;
   $cmp6 = ($1|0)==(4);
   if (!($cmp6)) {
    label = 7;
    break L1;
   }
  }
  $sub = (($n$0$ph) - ($call))|0;
  $add$ptr = (($p$0$ph) + ($call)|0);
  $n$0$ph = $sub;$p$0$ph = $add$ptr;
 }
 if ((label|0) == 5) {
  __ZNSt3__220__throw_system_errorEiPKc(61,37270);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $call8 = (___errno_location()|0);
  $2 = HEAP32[$call8>>2]|0;
  __ZNSt3__220__throw_system_errorEiPKc($2,37292);
  // unreachable;
 }
 else if ((label|0) == 9) {
  $3 = HEAP32[$r>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $add2 = 0, $add6 = 0, $call = 0, $call3 = 0, $call5 = 0, $cap = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($msg)|0);
 $add2 = (($call) + 13)|0;
 $call3 = (__Znwm($add2)|0);
 HEAP32[$call3>>2] = $call;
 $cap = ((($call3)) + 4|0);
 HEAP32[$cap>>2] = $call;
 $count = ((($call3)) + 8|0);
 HEAP32[$count>>2] = 0;
 $call5 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($call3)|0);
 $add6 = (($call) + 1)|0;
 _memcpy(($call5|0),($msg|0),($add6|0))|0;
 HEAP32[$this>>2] = $call5;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($rep) {
 $rep = $rep|0;
 var $add$ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr2 = ((($rep)) + 12|0);
 return ($add$ptr2|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (34552);
 $__imp_ = ((($this)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($__imp_,$msg);
 return;
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (34572);
 $__imp_ = ((($this)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($__imp_,$msg);
 return;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i = 0, $__size_$i5 = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$this>>2]=0|0;HEAP32[$this+4>>2]=0|0;HEAP32[$this+8>>2]=0|0;
 $__size_$i5 = ((($__str)) + 11|0);
 $0 = HEAP8[$__size_$i5>>0]|0;
 $tobool$i = ($0<<24>>24)<(0);
 if ($tobool$i) {
  $1 = HEAP32[$__str>>2]|0;
  $__size_$i = ((($__str)) + 4|0);
  $2 = HEAP32[$__size_$i>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this,$1,$2);
 } else {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i12 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $cmp = ($__sz>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp2 = ($__sz>>>0)<(11);
 if ($cmp2) {
  $conv$i = $__sz&255;
  $__size_$i = ((($this)) + 11|0);
  HEAP8[$__size_$i>>0] = $conv$i;
  $__p$0 = $this;
 } else {
  $add$i$i = (($__sz) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwm($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i12 = ((($this)) + 4|0);
  HEAP32[$__size_$i12>>2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0,$__s,$__sz)|0);
 $arrayidx = (($__p$0) + ($__sz)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $__size_$i$i$i = 0, $__size_$i3$i = 0, $cmp = 0, $cond$i = 0, $cond$i$i4 = 0, $conv$i$i = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($this|0)==($__str|0);
 if (!($cmp)) {
  $__size_$i$i$i = ((($__str)) + 11|0);
  $0 = HEAP8[$__size_$i$i$i>>0]|0;
  $tobool$i$i$i = ($0<<24>>24)<(0);
  $1 = HEAP32[$__str>>2]|0;
  $__size_$i3$i = ((($__str)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $conv$i$i = $0&255;
  $cond$i$i4 = $tobool$i$i$i ? $1 : $__str;
  $cond$i = $tobool$i$i$i ? $2 : $conv$i$i;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this,$cond$i$i4,$cond$i)|0);
 }
 return ($this|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i = 0, $cond$i19 = 0, $cond$i25 = 0, $conv$i$i = 0, $conv$i$i29 = 0, $phitmp$i = 0, $ref$tmp = 0, $sub = 0;
 var $tobool$i$i = 0, $tobool$i$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 $cmp = ($cond$i>>>0)<($__n>>>0);
 do {
  if ($cmp) {
   if ($tobool$i$i) {
    $__size_$i3$i = ((($this)) + 4|0);
    $4 = HEAP32[$__size_$i3$i>>2]|0;
    $cond$i25 = $4;
   } else {
    $conv$i$i = $0&255;
    $cond$i25 = $conv$i$i;
   }
   $sub = (($__n) - ($cond$i))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this,$cond$i,$sub,$cond$i25,0,$cond$i25,$__n,$__s);
  } else {
   if ($tobool$i$i) {
    $2 = HEAP32[$this>>2]|0;
    $cond$i19 = $2;
   } else {
    $cond$i19 = $this;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcm($cond$i19,$__s,$__n)|0);
   $arrayidx = (($cond$i19) + ($__n)|0);
   HEAP8[$ref$tmp>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
   $3 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i28 = ($3<<24>>24)<(0);
   if ($tobool$i$i28) {
    $__size_$i2$i = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i>>2] = $__n;
    break;
   } else {
    $conv$i$i29 = $__n&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i29;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcm($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  _memmove(($__s1|0),($__s2|0),($__n|0))|0;
 }
 return ($__s1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__cap_$i = 0, $__size_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr33 = 0, $add$ptr34 = 0, $add$ptr36 = 0, $add$ptr37 = 0, $add48 = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0;
 var $cmp17 = 0, $cmp23 = 0, $cmp30 = 0, $cmp41 = 0, $cmp5 = 0, $cond$i = 0, $cond40 = 0, $mul = 0, $or$i = 0, $phitmp = 0, $ref$tmp49 = 0, $sub2 = 0, $sub28 = 0, $sub29 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp49 = sp;
 $sub2 = (-18 - ($__old_cap))|0;
 $cmp = ($sub2>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$this>>2]|0;
  $cond$i = $1;
 } else {
  $cond$i = $this;
 }
 $cmp5 = ($__old_cap>>>0)<(2147483623);
 if ($cmp5) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(11);
  $add$i$i = (($$sroa$speculated) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $phitmp = $cmp$i ? 11 : $and$i$i;
  $cond40 = $phitmp;
 } else {
  $cond40 = -17;
 }
 $call$i$i$i = (__Znwm($cond40)|0);
 $cmp17 = ($__n_copy|0)==(0);
 if (!($cmp17)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $cmp23 = ($__n_add|0)==(0);
 if (!($cmp23)) {
  $add$ptr = (($call$i$i$i) + ($__n_copy)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr,$__p_new_stuff,$__n_add)|0);
 }
 $sub28 = (($__old_sz) - ($__n_del))|0;
 $sub29 = (($sub28) - ($__n_copy))|0;
 $cmp30 = ($sub29|0)==(0);
 if (!($cmp30)) {
  $add$ptr33 = (($call$i$i$i) + ($__n_copy)|0);
  $add$ptr34 = (($add$ptr33) + ($__n_add)|0);
  $add$ptr36 = (($cond$i) + ($__n_copy)|0);
  $add$ptr37 = (($add$ptr36) + ($__n_del)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr34,$add$ptr37,$sub29)|0);
 }
 $cmp41 = ($__old_cap|0)==(10);
 if (!($cmp41)) {
  __ZdlPv($cond$i);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $cond40 | -2147483648;
 $__cap_$i = ((($this)) + 8|0);
 HEAP32[$__cap_$i>>2] = $or$i;
 $add48 = (($sub28) + ($__n_add))|0;
 $__size_$i = ((($this)) + 4|0);
 HEAP32[$__size_$i>>2] = $add48;
 $arrayidx = (($call$i$i$i) + ($add48)|0);
 HEAP8[$ref$tmp49>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp49);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$pre = 0, $$pre72 = 0, $$sroa$speculated = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__cap_$i = 0, $__cap_$i$i = 0, $__new_data$0466470 = 0, $__new_data$047 = 0, $__now_long$0$off053 = 0, $__p$049 = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $__size_$i3$i18 = 0, $__size_$i9$pre$phiZZ2D = 0, $add = 0;
 var $add$i$i = 0, $add30 = 0, $add3059 = 0, $add3068 = 0, $add38$pre$phiZ2D = 0, $and$i$i = 0, $and$i$i32 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp6 = 0, $cond$i14 = 0, $cond$i44 = 0, $conv$i = 0, $conv$i$i = 0, $conv$i$i20 = 0, $conv$i$i2067 = 0, $or$i = 0, $phitmp$i = 0;
 var $phitmp$i33 = 0, $spec$select$i = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__res_arg>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $__size_$i3$i = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i14 = $2;$cond$i44 = $phitmp$i;
 } else {
  $conv$i$i = $0&255;
  $cond$i14 = $conv$i$i;$cond$i44 = 10;
 }
 $cmp$i$i$i = ($cond$i14>>>0)>($__res_arg>>>0);
 $$sroa$speculated = $cmp$i$i$i ? $cond$i14 : $__res_arg;
 $cmp$i = ($$sroa$speculated>>>0)<(11);
 $add$i$i = (($$sroa$speculated) + 16)|0;
 $and$i$i32 = $add$i$i & -16;
 $phitmp$i33 = (($and$i$i32) + -1)|0;
 $spec$select$i = $cmp$i ? 10 : $phitmp$i33;
 $cmp6 = ($spec$select$i|0)==($cond$i44|0);
 do {
  if (!($cmp6)) {
   do {
    if ($cmp$i) {
     $4 = HEAP32[$this>>2]|0;
     if ($tobool$i$i) {
      $__new_data$047 = $this;$__now_long$0$off053 = 0;$__p$049 = $4;
      label = 13;
     } else {
      $conv$i$i2067 = $0&255;
      $add3068 = (($conv$i$i2067) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($this,$4,$add3068)|0);
      __ZdlPv($4);
      label = 16;
     }
    } else {
     $add = (($spec$select$i) + 1)|0;
     $call$i$i$i = (__Znwm($add)|0);
     if ($tobool$i$i) {
      $3 = HEAP32[$this>>2]|0;
      $__new_data$047 = $call$i$i$i;$__now_long$0$off053 = 1;$__p$049 = $3;
      label = 13;
      break;
     } else {
      $conv$i$i20 = $0&255;
      $add30 = (($conv$i$i20) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i,$this,$add30)|0);
      $$pre = ((($this)) + 4|0);
      $__new_data$0466470 = $call$i$i$i;$__size_$i9$pre$phiZZ2D = $$pre;$add38$pre$phiZ2D = $add;
      label = 15;
      break;
     }
    }
   } while(0);
   if ((label|0) == 13) {
    $__size_$i3$i18 = ((($this)) + 4|0);
    $5 = HEAP32[$__size_$i3$i18>>2]|0;
    $add3059 = (($5) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcm($__new_data$047,$__p$049,$add3059)|0);
    __ZdlPv($__p$049);
    if ($__now_long$0$off053) {
     $$pre72 = (($spec$select$i) + 1)|0;
     $__new_data$0466470 = $__new_data$047;$__size_$i9$pre$phiZZ2D = $__size_$i3$i18;$add38$pre$phiZ2D = $$pre72;
     label = 15;
    } else {
     label = 16;
    }
   }
   if ((label|0) == 15) {
    $or$i = $add38$pre$phiZ2D | -2147483648;
    $__cap_$i = ((($this)) + 8|0);
    HEAP32[$__cap_$i>>2] = $or$i;
    HEAP32[$__size_$i9$pre$phiZZ2D>>2] = $cond$i14;
    HEAP32[$this>>2] = $__new_data$0466470;
    break;
   }
   else if ((label|0) == 16) {
    $conv$i = $cond$i14&255;
    HEAP8[$__size_$i$i>>0] = $conv$i;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__cap_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr27 = 0, $add$ptr29 = 0, $add$ptr30 = 0, $and$i$i = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp16 = 0, $cmp24 = 0, $cmp34 = 0, $cmp4 = 0;
 var $cond$i = 0, $cond30 = 0, $mul = 0, $or$i = 0, $phitmp = 0, $sub = 0, $sub22 = 0, $sub23 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (-17 - ($__old_cap))|0;
 $cmp = ($sub>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$this>>2]|0;
  $cond$i = $1;
 } else {
  $cond$i = $this;
 }
 $cmp4 = ($__old_cap>>>0)<(2147483623);
 if ($cmp4) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(11);
  $add$i$i = (($$sroa$speculated) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $phitmp = $cmp$i ? 11 : $and$i$i;
  $cond30 = $phitmp;
 } else {
  $cond30 = -17;
 }
 $call$i$i$i = (__Znwm($cond30)|0);
 $cmp16 = ($__n_copy|0)==(0);
 if (!($cmp16)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $sub22 = (($__old_sz) - ($__n_del))|0;
 $sub23 = (($sub22) - ($__n_copy))|0;
 $cmp24 = ($sub23|0)==(0);
 if (!($cmp24)) {
  $add$ptr = (($call$i$i$i) + ($__n_copy)|0);
  $add$ptr27 = (($add$ptr) + ($__n_add)|0);
  $add$ptr29 = (($cond$i) + ($__n_copy)|0);
  $add$ptr30 = (($add$ptr29) + ($__n_del)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr27,$add$ptr30,$sub23)|0);
 }
 $cmp34 = ($__old_cap|0)==(10);
 if (!($cmp34)) {
  __ZdlPv($cond$i);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $cond30 | -2147483648;
 $__cap_$i = ((($this)) + 8|0);
 HEAP32[$__cap_$i>>2] = $or$i;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $add = 0, $add$ptr = 0, $add7 = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i24 = 0, $cond$i30 = 0, $cond$i35 = 0, $conv$i$i = 0, $conv$i$i34 = 0;
 var $phitmp$i = 0, $ref$tmp = 0, $sub = 0, $sub8 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $__size_$i3$i = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i24 = $2;$cond$i35 = $phitmp$i;
 } else {
  $conv$i$i = $0&255;
  $cond$i24 = $conv$i$i;$cond$i35 = 10;
 }
 $sub = (($cond$i35) - ($cond$i24))|0;
 $cmp = ($sub>>>0)<($__n>>>0);
 if ($cmp) {
  $add7 = (($cond$i24) + ($__n))|0;
  $sub8 = (($add7) - ($cond$i35))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this,$cond$i35,$sub8,$cond$i24,$cond$i24,0,$__n,$__s);
 } else {
  $tobool = ($__n|0)==(0);
  if (!($tobool)) {
   if ($tobool$i$i) {
    $3 = HEAP32[$this>>2]|0;
    $cond$i30 = $3;
   } else {
    $cond$i30 = $this;
   }
   $add$ptr = (($cond$i30) + ($cond$i24)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr,$__s,$__n)|0);
   $add = (($cond$i24) + ($__n))|0;
   $4 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i33 = ($4<<24>>24)<(0);
   if ($tobool$i$i33) {
    $__size_$i2$i = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i>>2] = $add;
   } else {
    $conv$i$i34 = $add&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i34;
   }
   $arrayidx = (($cond$i30) + ($add)|0);
   HEAP8[$ref$tmp>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
  }
 }
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__c$addr = 0, $__cap$0 = 0, $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i15 = 0, $__size_$i21 = 0, $__sz$0 = 0, $add = 0, $add16 = 0, $and$i = 0, $call12$pn = 0, $cmp = 0, $conv$i = 0, $conv$i16 = 0;
 var $incdec$ptr = 0, $ref$tmp = 0, $sub = 0, $tobool$i = 0, $tobool$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__c$addr = sp + 1|0;
 $ref$tmp = sp;
 HEAP8[$__c$addr>>0] = $__c;
 $__size_$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i>>0]|0;
 $tobool$i = ($0<<24>>24)<(0);
 if ($tobool$i) {
  $__cap_$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i>>2]|0;
  $and$i = $1 & 2147483647;
  $sub = (($and$i) + -1)|0;
  $__size_$i21 = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i21>>2]|0;
  $__cap$0 = $sub;$__sz$0 = $2;
 } else {
  $conv$i = $0&255;
  $__cap$0 = 10;$__sz$0 = $conv$i;
 }
 $cmp = ($__sz$0|0)==($__cap$0|0);
 if ($cmp) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $3 = HEAP8[$__size_$i>>0]|0;
  $tobool$i20 = ($3<<24>>24)<(0);
  if ($tobool$i20) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($tobool$i) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $add = (($__sz$0) + 1)|0;
  $conv$i16 = $add&255;
  HEAP8[$__size_$i>>0] = $conv$i16;
  $call12$pn = $this;
 }
 else if ((label|0) == 8) {
  $4 = HEAP32[$this>>2]|0;
  $add16 = (($__sz$0) + 1)|0;
  $__size_$i15 = ((($this)) + 4|0);
  HEAP32[$__size_$i15>>2] = $add16;
  $call12$pn = $4;
 }
 $__p$0 = (($call12$pn) + ($__sz$0)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0,$__c$addr);
 $incdec$ptr = ((($__p$0)) + 1|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($incdec$ptr,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($this,$__s,$__sz,$__reserve) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 $__reserve = $__reserve|0;
 var $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i11 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ref$tmp = sp;
 $cmp = ($__reserve>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp2 = ($__reserve>>>0)<(11);
 if ($cmp2) {
  $conv$i = $__sz&255;
  $__size_$i = ((($this)) + 11|0);
  HEAP8[$__size_$i>>0] = $conv$i;
  $__p$0 = $this;
 } else {
  $add$i$i = (($__reserve) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwm($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i11 = ((($this)) + 4|0);
  HEAP32[$__size_$i11>>2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0,$__s,$__sz)|0);
 $arrayidx = (($__p$0) + ($__sz)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__i$0$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add = 0, $arrayidx$i$i = 0, $call = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $call = (__ZNSt3__211char_traitsIcE6lengthEPKc($__lhs)|0);
 $__size_$i$i = ((($__rhs)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__size_$i3$i = ((($__rhs)) + 4|0);
 $1 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $0&255;
 $cond$i = $tobool$i$i ? $1 : $conv$i$i;
 $add = (($cond$i) + ($call))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($agg$result,$__lhs,$call,$add);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__rhs>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__rhs;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($agg$result,$cond$i$i,$cond$i)|0);
 return;
}
function __ZNSt3__220__throw_system_errorEiPKc($ev,$what_arg) {
 $ev = $ev|0;
 $what_arg = $what_arg|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__type_name$i = 0, $add$ptr = 0, $call = 0, $call10 = 0, $call14 = 0, $cond = 0, $exception_class = 0, $primaryException = 0, $thrown_object = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vfn = 0, $vfn13 = 0;
 var $vtable = 0, $vtable12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $call = (___cxa_get_globals_fast()|0);
 $tobool = ($call|0)==(0|0);
 if (!($tobool)) {
  $0 = HEAP32[$call>>2]|0;
  $tobool1 = ($0|0)==(0|0);
  if (!($tobool1)) {
   $add$ptr = ((($0)) + 80|0);
   $exception_class = ((($0)) + 48|0);
   $1 = $exception_class;
   $2 = $1;
   $3 = HEAP32[$2>>2]|0;
   $4 = (($1) + 4)|0;
   $5 = $4;
   $6 = HEAP32[$5>>2]|0;
   $7 = $3 & -256;
   $8 = ($7|0)==(1126902528);
   $9 = ($6|0)==(1129074247);
   $10 = $8 & $9;
   if (!($10)) {
    HEAP32[$vararg_buffer7>>2] = 37466;
    _abort_message(37416,$vararg_buffer7);
    // unreachable;
   }
   $11 = ($3|0)==(1126902529);
   $12 = ($6|0)==(1129074247);
   $13 = $11 & $12;
   if ($13) {
    $primaryException = ((($0)) + 44|0);
    $14 = HEAP32[$primaryException>>2]|0;
    $cond = $14;
   } else {
    $cond = $add$ptr;
   }
   HEAP32[$thrown_object>>2] = $cond;
   $15 = HEAP32[$0>>2]|0;
   $__type_name$i = ((($15)) + 4|0);
   $16 = HEAP32[$__type_name$i>>2]|0;
   $vtable = HEAP32[8458]|0;
   $vfn = ((($vtable)) + 16|0);
   $17 = HEAP32[$vfn>>2]|0;
   $call10 = (FUNCTION_TABLE_iiii[$17 & 15](33832,$15,$thrown_object)|0);
   if ($call10) {
    $18 = HEAP32[$thrown_object>>2]|0;
    $vtable12 = HEAP32[$18>>2]|0;
    $vfn13 = ((($vtable12)) + 8|0);
    $19 = HEAP32[$vfn13>>2]|0;
    $call14 = (FUNCTION_TABLE_ii[$19 & 15]($18)|0);
    HEAP32[$vararg_buffer>>2] = 37466;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $16;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $call14;
    _abort_message(37330,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 37466;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $16;
    _abort_message(37375,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(37454,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $call = 0, $call1 = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $call = (_pthread_once(41100,2)|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  $0 = HEAP32[10276]|0;
  $call1 = (_pthread_getspecific($0)|0);
  STACKTOP = sp;return ($call1|0);
 } else {
  _abort_message(37605,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[8553]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cmp = 0, $cmp4 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, $src2dst_offset = 0, $static_type = 0, $vfn = 0, $vtable = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$thrown_type,0)|0);
 if ($call) {
  $retval$2 = 1;
 } else {
  $0 = ($thrown_type|0)==(0|0);
  if ($0) {
   $retval$2 = 0;
  } else {
   $1 = (___dynamic_cast($thrown_type,33856,33840,0)|0);
   $cmp = ($1|0)==(0|0);
   if ($cmp) {
    $retval$2 = 0;
   } else {
    $2 = ((($info)) + 4|0);
    dest=$2; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $1;
    $static_type = ((($info)) + 8|0);
    HEAP32[$static_type>>2] = $this;
    $src2dst_offset = ((($info)) + 12|0);
    HEAP32[$src2dst_offset>>2] = -1;
    $number_of_dst_type = ((($info)) + 48|0);
    HEAP32[$number_of_dst_type>>2] = 1;
    $vtable = HEAP32[$1>>2]|0;
    $vfn = ((($vtable)) + 28|0);
    $3 = HEAP32[$vfn>>2]|0;
    $4 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$3 & 15]($1,$info,$4,1);
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    $5 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
    $cmp4 = ($5|0)==(1);
    if ($cmp4) {
     $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
     $6 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
     HEAP32[$adjustedPtr>>2] = $6;
     $retval$0 = 1;
    } else {
     $retval$0 = 0;
    }
    $retval$2 = $retval$0;
   }
  }
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp12 = 0, $cmp13 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0;
 var $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   if ($call3) {
    $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
    $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
    $cmp = ($2|0)==($current_ptr|0);
    if (!($cmp)) {
     $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
     $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
     $cmp5 = ($3|0)==($current_ptr|0);
     if (!($cmp5)) {
      $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
      HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
      HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
      $number_to_dst_ptr = ((($info)) + 40|0);
      $4 = HEAP32[$number_to_dst_ptr>>2]|0;
      $add = (($4) + 1)|0;
      HEAP32[$number_to_dst_ptr>>2] = $add;
      $number_to_static_ptr = ((($info)) + 36|0);
      $5 = HEAP32[$number_to_static_ptr>>2]|0;
      $cmp12 = ($5|0)==(1);
      if ($cmp12) {
       $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
       $6 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
       $cmp13 = ($6|0)==(2);
       if ($cmp13) {
        $search_done = ((($info)) + 54|0);
        HEAP8[$search_done>>0] = 1;
       }
      }
      $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
      HEAP32[$is_dst_type_derived_from_static_type>>2] = 4;
      break;
     }
    }
    $cmp7 = ($path_below|0)==(1);
    if ($cmp7) {
     $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($x,$y,$0) {
 $x = $x|0;
 $y = $y|0;
 $0 = $0|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($x|0)==($y|0);
 return ($cmp|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $path_dst_ptr_to_static_ptr6 = 0, $search_done = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 $cmp = ($0|0)==(0|0);
 do {
  if ($cmp) {
   HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $adjustedPtr;
   $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
   HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
   $number_to_static_ptr = ((($info)) + 36|0);
   HEAP32[$number_to_static_ptr>>2] = 1;
  } else {
   $cmp4 = ($0|0)==($adjustedPtr|0);
   if (!($cmp4)) {
    $number_to_static_ptr11 = ((($info)) + 36|0);
    $2 = HEAP32[$number_to_static_ptr11>>2]|0;
    $add = (($2) + 1)|0;
    HEAP32[$number_to_static_ptr11>>2] = $add;
    $path_dst_ptr_to_static_ptr12 = ((($info)) + 24|0);
    HEAP32[$path_dst_ptr_to_static_ptr12>>2] = 2;
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr6 = ((($info)) + 24|0);
   $1 = HEAP32[$path_dst_ptr_to_static_ptr6>>2]|0;
   $cmp7 = ($1|0)==(2);
   if ($cmp7) {
    HEAP32[$path_dst_ptr_to_static_ptr6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this,$info,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cmp2 = 0, $path_dynamic_ptr_to_static_ptr = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 if ($cmp) {
  $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
  $1 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
  $cmp2 = ($1|0)==(1);
  if (!($cmp2)) {
   HEAP32[$path_dynamic_ptr_to_static_ptr>>2] = $path_below;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp18 = 0, $cmp2 = 0, $cmp21 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $number_of_dst_type = 0;
 var $number_of_dst_type17 = 0, $number_to_static_ptr = 0, $number_to_static_ptr26 = 0, $or$cond = 0, $or$cond19 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $search_done = 0, $search_done23 = 0, $search_done27 = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $found_any_static_type = ((($info)) + 53|0);
 HEAP8[$found_any_static_type>>0] = 1;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 do {
  if ($cmp) {
   $found_our_static_ptr = ((($info)) + 52|0);
   HEAP8[$found_our_static_ptr>>0] = 1;
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $1 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp2 = ($1|0)==(0|0);
   if ($cmp2) {
    HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $dst_ptr;
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
    $number_to_static_ptr = ((($info)) + 36|0);
    HEAP32[$number_to_static_ptr>>2] = 1;
    $number_of_dst_type = ((($info)) + 48|0);
    $2 = HEAP32[$number_of_dst_type>>2]|0;
    $cmp5 = ($2|0)==(1);
    $cmp7 = ($path_below|0)==(1);
    $or$cond = $cmp7 & $cmp5;
    if (!($or$cond)) {
     break;
    }
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $cmp10 = ($1|0)==($dst_ptr|0);
   if (!($cmp10)) {
    $number_to_static_ptr26 = ((($info)) + 36|0);
    $6 = HEAP32[$number_to_static_ptr26>>2]|0;
    $add = (($6) + 1)|0;
    HEAP32[$number_to_static_ptr26>>2] = $add;
    $search_done27 = ((($info)) + 54|0);
    HEAP8[$search_done27>>0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr12 = ((($info)) + 24|0);
   $3 = HEAP32[$path_dst_ptr_to_static_ptr12>>2]|0;
   $cmp13 = ($3|0)==(2);
   if ($cmp13) {
    HEAP32[$path_dst_ptr_to_static_ptr12>>2] = $path_below;
    $5 = $path_below;
   } else {
    $5 = $3;
   }
   $number_of_dst_type17 = ((($info)) + 48|0);
   $4 = HEAP32[$number_of_dst_type17>>2]|0;
   $cmp18 = ($4|0)==(1);
   $cmp21 = ($5|0)==(1);
   $or$cond19 = $cmp18 & $cmp21;
   if ($or$cond19) {
    $search_done23 = ((($info)) + 54|0);
    HEAP8[$search_done23>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0;
 var $cmp = 0, $cmp14 = 0, $cmp16 = 0, $cmp19 = 0, $cmp25 = 0, $cmp27 = 0, $cmp30 = 0, $cmp33 = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $or$cond = 0, $or$cond15 = 0, $or$cond16 = 0, $or$cond17 = 0, $path_dst_ptr_to_static_ptr = 0;
 var $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, $spec$select = 0, $spec$select18 = 0, $src2dst_offset5 = 0, $static_ptr3 = 0, $static_type4 = 0, $vfn = 0, $vfn11 = 0, $vtable10 = 0, $vtable7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $arrayidx = ((($0)) + -8|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $add$ptr = (($static_ptr) + ($1)|0);
 $arrayidx1 = ((($0)) + -4|0);
 $2 = HEAP32[$arrayidx1>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $static_ptr3 = ((($info)) + 4|0);
 HEAP32[$static_ptr3>>2] = $static_ptr;
 $static_type4 = ((($info)) + 8|0);
 HEAP32[$static_type4>>2] = $static_type;
 $src2dst_offset5 = ((($info)) + 12|0);
 HEAP32[$src2dst_offset5>>2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
 $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
 $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
 $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
 $number_to_dst_ptr = ((($info)) + 40|0);
 dest=$dst_ptr_leading_to_static_ptr; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$dst_ptr_leading_to_static_ptr+36>>1]=0|0;HEAP8[$dst_ptr_leading_to_static_ptr+38>>0]=0|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($2,$dst_type,0)|0);
 L1: do {
  if ($call) {
   $number_of_dst_type = ((($info)) + 48|0);
   HEAP32[$number_of_dst_type>>2] = 1;
   $vtable7 = HEAP32[$2>>2]|0;
   $vfn = ((($vtable7)) + 20|0);
   $3 = HEAP32[$vfn>>2]|0;
   FUNCTION_TABLE_viiiiii[$3 & 7]($2,$info,$add$ptr,$add$ptr,1,0);
   $4 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp = ($4|0)==(1);
   $spec$select = $cmp ? $add$ptr : 0;
   $dst_ptr$0 = $spec$select;
  } else {
   $number_to_static_ptr = ((($info)) + 36|0);
   $vtable10 = HEAP32[$2>>2]|0;
   $vfn11 = ((($vtable10)) + 24|0);
   $5 = HEAP32[$vfn11>>2]|0;
   FUNCTION_TABLE_viiiii[$5 & 3]($2,$info,$add$ptr,1,0);
   $6 = HEAP32[$number_to_static_ptr>>2]|0;
   switch ($6|0) {
   case 0:  {
    $7 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp14 = ($7|0)==(1);
    $8 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp16 = ($8|0)==(1);
    $or$cond = $cmp14 & $cmp16;
    $9 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp19 = ($9|0)==(1);
    $or$cond15 = $or$cond & $cmp19;
    $10 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $spec$select18 = $or$cond15 ? $10 : 0;
    $dst_ptr$0 = $spec$select18;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp25 = ($11|0)==(1);
   if (!($cmp25)) {
    $12 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp27 = ($12|0)==(0);
    $13 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp30 = ($13|0)==(1);
    $or$cond16 = $cmp27 & $cmp30;
    $14 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp33 = ($14|0)==(1);
    $or$cond17 = $or$cond16 & $cmp33;
    if (!($or$cond17)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $15 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $dst_ptr$0 = $15;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiiiii[$2 & 7]($1,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_type = 0, $__base_type40 = 0, $add = 0, $call = 0, $call3 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp26 = 0, $cmp27 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off032 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, $tobool16 = 0;
 var $tobool19 = 0, $vfn = 0, $vfn42 = 0, $vtable = 0, $vtable41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   if (!($call3)) {
    $__base_type40 = ((($this)) + 8|0);
    $13 = HEAP32[$__base_type40>>2]|0;
    $vtable41 = HEAP32[$13>>2]|0;
    $vfn42 = ((($vtable41)) + 24|0);
    $14 = HEAP32[$vfn42>>2]|0;
    FUNCTION_TABLE_viiiii[$14 & 3]($13,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp = ($2|0)==($current_ptr|0);
   if (!($cmp)) {
    $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $cmp5 = ($3|0)==($current_ptr|0);
    if (!($cmp5)) {
     $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
     $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
     $4 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
     $cmp11 = ($4|0)==(4);
     if ($cmp11) {
      break;
     }
     $found_our_static_ptr = ((($info)) + 52|0);
     HEAP8[$found_our_static_ptr>>0] = 0;
     $found_any_static_type = ((($info)) + 53|0);
     HEAP8[$found_any_static_type>>0] = 0;
     $__base_type = ((($this)) + 8|0);
     $5 = HEAP32[$__base_type>>2]|0;
     $vtable = HEAP32[$5>>2]|0;
     $vfn = ((($vtable)) + 20|0);
     $6 = HEAP32[$vfn>>2]|0;
     FUNCTION_TABLE_viiiiii[$6 & 7]($5,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $7 = HEAP8[$found_any_static_type>>0]|0;
     $tobool16 = ($7<<24>>24)==(0);
     if ($tobool16) {
      $is_dst_type_derived_from_static_type13$0$off032 = 0;
      label = 11;
     } else {
      $8 = HEAP8[$found_our_static_ptr>>0]|0;
      $tobool19 = ($8<<24>>24)==(0);
      if ($tobool19) {
       $is_dst_type_derived_from_static_type13$0$off032 = 1;
       label = 11;
      } else {
       label = 15;
      }
     }
     do {
      if ((label|0) == 11) {
       HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
       $number_to_dst_ptr = ((($info)) + 40|0);
       $9 = HEAP32[$number_to_dst_ptr>>2]|0;
       $add = (($9) + 1)|0;
       HEAP32[$number_to_dst_ptr>>2] = $add;
       $number_to_static_ptr = ((($info)) + 36|0);
       $10 = HEAP32[$number_to_static_ptr>>2]|0;
       $cmp26 = ($10|0)==(1);
       if ($cmp26) {
        $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
        $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
        $cmp27 = ($11|0)==(2);
        if ($cmp27) {
         $search_done = ((($info)) + 54|0);
         HEAP8[$search_done>>0] = 1;
         if ($is_dst_type_derived_from_static_type13$0$off032) {
          label = 15;
          break;
         } else {
          $12 = 4;
          break;
         }
        }
       }
       if ($is_dst_type_derived_from_static_type13$0$off032) {
        label = 15;
       } else {
        $12 = 4;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      $12 = 3;
     }
     HEAP32[$is_dst_type_derived_from_static_type>>2] = $12;
     break;
    }
   }
   $cmp7 = ($path_below|0)==(1);
   if ($cmp7) {
    $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
    HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 28|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiii[$2 & 15]($1,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $call = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $call = (_pthread_key_create(41104,18)|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 } else {
  _abort_message(37654,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $call = 0, $cmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[10276]|0;
 $call = (_pthread_setspecific($0,0)|0);
 $cmp = ($call|0)==(0);
 if ($cmp) {
  STACKTOP = sp;return;
 } else {
  _abort_message(37704,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call8 = 0, $exception_class = 0, $terminateHandler = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___cxa_get_globals_fast()|0);
 $tobool = ($call|0)==(0|0);
 if (!($tobool)) {
  $0 = HEAP32[$call>>2]|0;
  $tobool1 = ($0|0)==(0|0);
  if (!($tobool1)) {
   $exception_class = ((($0)) + 48|0);
   $1 = $exception_class;
   $2 = $1;
   $3 = HEAP32[$2>>2]|0;
   $4 = (($1) + 4)|0;
   $5 = $4;
   $6 = HEAP32[$5>>2]|0;
   $7 = $3 & -256;
   $8 = ($7|0)==(1126902528);
   $9 = ($6|0)==(1129074247);
   $10 = $8 & $9;
   if ($10) {
    $terminateHandler = ((($0)) + 12|0);
    $11 = HEAP32[$terminateHandler>>2]|0;
    __ZSt11__terminatePFvvE($11);
    // unreachable;
   }
  }
 }
 $call8 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($call8);
 // unreachable;
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$func & 3]();
 _abort_message(37757,$vararg_buffer);
 // unreachable;
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8615]|0;
 $1 = (($0) + 0)|0;
 HEAP32[8615] = $1;
 $2 = $0;
 return ($2|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (34552);
 $__imp_ = ((($this)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($__imp_);
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $__imp_ = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__imp_ = ((($this)) + 4|0);
 $call = (__ZNKSt3__218__libcpp_refstring5c_strEv($__imp_)|0);
 return ($call|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call2 = 0, $cmp = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this)|0);
 if ($call) {
  $0 = HEAP32[$this>>2]|0;
  $call2 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_804($0)|0);
  $count = ((($call2)) + 8|0);
  $1 = HEAP32[$count>>2]|0;
  $2 = (($1) + -1)|0;
  HEAP32[$count>>2] = $2;
  $3 = (($1) + -1)|0;
  $cmp = ($3|0)<(0);
  if ($cmp) {
   __ZdlPv($call2);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_804($data_) {
 $data_ = $data_|0;
 var $add$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = ((($data_)) + -12|0);
 return ($add$ptr|0);
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (34572);
 $__imp_ = ((($this)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($__imp_);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $__imp_ = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__imp_ = ((($this)) + 4|0);
 $call = (__ZNKSt3__218__libcpp_refstring5c_strEv($__imp_)|0);
 return ($call|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$thrown_type,0)|0);
 return ($call|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__flags = 0, $__flags4 = 0, $__pointee = 0, $__pointee7 = 0, $and = 0, $call = 0, $call12 = 0, $call8 = 0, $cmp = 0, $cmp19 = 0, $cmp26 = 0, $cmp29 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $neg = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$4 = 0, $src2dst_offset = 0;
 var $static_type = 0, $tobool = 0, $vfn = 0, $vtable = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$adjustedPtr>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$adjustedPtr>>2] = $1;
 $call = (__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,0)|0);
 if ($call) {
  $retval$4 = 1;
 } else {
  $2 = ($thrown_type|0)==(0|0);
  if ($2) {
   $retval$4 = 0;
  } else {
   $3 = (___dynamic_cast($thrown_type,33856,33960,0)|0);
   $cmp = ($3|0)==(0|0);
   if ($cmp) {
    $retval$4 = 0;
   } else {
    $__flags = ((($3)) + 8|0);
    $4 = HEAP32[$__flags>>2]|0;
    $__flags4 = ((($this)) + 8|0);
    $5 = HEAP32[$__flags4>>2]|0;
    $neg = $5 ^ -1;
    $and = $4 & $neg;
    $tobool = ($and|0)==(0);
    if ($tobool) {
     $__pointee = ((($this)) + 12|0);
     $6 = HEAP32[$__pointee>>2]|0;
     $__pointee7 = ((($3)) + 12|0);
     $7 = HEAP32[$__pointee7>>2]|0;
     $call8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($6,$7,0)|0);
     if ($call8) {
      $retval$4 = 1;
     } else {
      $8 = HEAP32[$__pointee>>2]|0;
      $call12 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($8,33992,0)|0);
      if ($call12) {
       $retval$4 = 1;
      } else {
       $9 = HEAP32[$__pointee>>2]|0;
       $10 = ($9|0)==(0|0);
       if ($10) {
        $retval$4 = 0;
       } else {
        $11 = (___dynamic_cast($9,33856,33840,0)|0);
        $cmp19 = ($11|0)==(0|0);
        if ($cmp19) {
         $retval$4 = 0;
        } else {
         $12 = HEAP32[$__pointee7>>2]|0;
         $13 = ($12|0)==(0|0);
         if ($13) {
          $retval$4 = 0;
         } else {
          $14 = (___dynamic_cast($12,33856,33840,0)|0);
          $cmp26 = ($14|0)==(0|0);
          if ($cmp26) {
           $retval$4 = 0;
          } else {
           $15 = ((($info)) + 4|0);
           dest=$15; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
           HEAP32[$info>>2] = $14;
           $static_type = ((($info)) + 8|0);
           HEAP32[$static_type>>2] = $11;
           $src2dst_offset = ((($info)) + 12|0);
           HEAP32[$src2dst_offset>>2] = -1;
           $number_of_dst_type = ((($info)) + 48|0);
           HEAP32[$number_of_dst_type>>2] = 1;
           $vtable = HEAP32[$14>>2]|0;
           $vfn = ((($vtable)) + 28|0);
           $16 = HEAP32[$vfn>>2]|0;
           $17 = HEAP32[$adjustedPtr>>2]|0;
           FUNCTION_TABLE_viiii[$16 & 15]($14,$info,$17,1);
           $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
           $18 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
           $cmp29 = ($18|0)==(1);
           if ($cmp29) {
            $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
            $19 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
            HEAP32[$adjustedPtr>>2] = $19;
            $retval$0 = 1;
           } else {
            $retval$0 = 0;
           }
           $retval$4 = $retval$0;
          }
         }
        }
       }
      }
     }
    } else {
     $retval$4 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $call = 0, $call2 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$thrown_type,0)|0);
 if ($call) {
  $retval$0 = 1;
 } else {
  $call2 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($thrown_type,34000,0)|0);
  $retval$0 = $call2;
 }
 return ($retval$0|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__flags = 0, $add$ptr = 0, $and = 0, $and30 = 0, $arraydecay = 0, $call = 0, $cmp = 0, $cmp19 = 0, $cmp40 = 0;
 var $found_any_static_type5 = 0, $found_our_static_ptr2 = 0, $incdec$ptr = 0, $incdec$ptr39 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0, $static_type = 0, $tobool14 = 0, $tobool17 = 0, $tobool22 = 0, $tobool27 = 0, $tobool31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $found_our_static_ptr2 = ((($info)) + 52|0);
  $1 = HEAP8[$found_our_static_ptr2>>0]|0;
  $found_any_static_type5 = ((($info)) + 53|0);
  $2 = HEAP8[$found_any_static_type5>>0]|0;
  $arraydecay = ((($this)) + 16|0);
  $__base_count = ((($this)) + 12|0);
  $3 = HEAP32[$__base_count>>2]|0;
  $add$ptr = (((($this)) + 16|0) + ($3<<3)|0);
  HEAP8[$found_our_static_ptr2>>0] = 0;
  HEAP8[$found_any_static_type5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($arraydecay,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $cmp = ($3|0)>(1);
  L4: do {
   if ($cmp) {
    $incdec$ptr = ((($this)) + 24|0);
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    $__flags = ((($this)) + 8|0);
    $search_done = ((($info)) + 54|0);
    $p$0 = $incdec$ptr;
    while(1) {
     $4 = HEAP8[$search_done>>0]|0;
     $tobool14 = ($4<<24>>24)==(0);
     if (!($tobool14)) {
      break L4;
     }
     $5 = HEAP8[$found_our_static_ptr2>>0]|0;
     $tobool17 = ($5<<24>>24)==(0);
     if ($tobool17) {
      $8 = HEAP8[$found_any_static_type5>>0]|0;
      $tobool27 = ($8<<24>>24)==(0);
      if (!($tobool27)) {
       $9 = HEAP32[$__flags>>2]|0;
       $and30 = $9 & 1;
       $tobool31 = ($and30|0)==(0);
       if ($tobool31) {
        break L4;
       }
      }
     } else {
      $6 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
      $cmp19 = ($6|0)==(1);
      if ($cmp19) {
       break L4;
      }
      $7 = HEAP32[$__flags>>2]|0;
      $and = $7 & 2;
      $tobool22 = ($and|0)==(0);
      if ($tobool22) {
       break L4;
      }
     }
     HEAP8[$found_our_static_ptr2>>0] = 0;
     HEAP8[$found_any_static_type5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $incdec$ptr39 = ((($p$0)) + 8|0);
     $cmp40 = ($incdec$ptr39>>>0)<($add$ptr>>>0);
     if ($cmp40) {
      $p$0 = $incdec$ptr39;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$found_our_static_ptr2>>0] = $1;
  HEAP8[$found_any_static_type5>>0] = $2;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_count = 0, $__base_count63 = 0, $__flags34 = 0, $__flags72 = 0, $add = 0, $add$ptr = 0, $add$ptr64 = 0, $and = 0, $and35 = 0, $and73 = 0, $and88 = 0, $arraydecay = 0, $arraydecay62 = 0, $call = 0, $call3 = 0;
 var $cmp = 0, $cmp100 = 0, $cmp106 = 0, $cmp11 = 0, $cmp115 = 0, $cmp121 = 0, $cmp16 = 0, $cmp27 = 0, $cmp44 = 0, $cmp46 = 0, $cmp5 = 0, $cmp7 = 0, $cmp70 = 0, $cmp77 = 0, $cmp85 = 0, $cmp97 = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0;
 var $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr = 0, $incdec$ptr105 = 0, $incdec$ptr120 = 0, $incdec$ptr69 = 0, $incdec$ptr84 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off0 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $is_dst_type_derived_from_static_type13$2$off0 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr76 = 0, $p$0 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr99 = 0;
 var $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $search_done110 = 0, $search_done79 = 0, $search_done92 = 0, $static_type = 0, $tobool111 = 0, $tobool18 = 0, $tobool22 = 0, $tobool25 = 0, $tobool30 = 0, $tobool36 = 0, $tobool74 = 0, $tobool80 = 0, $tobool89 = 0, $tobool93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 L1: do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   if (!($call3)) {
    $arraydecay62 = ((($this)) + 16|0);
    $__base_count63 = ((($this)) + 12|0);
    $16 = HEAP32[$__base_count63>>2]|0;
    $add$ptr64 = (((($this)) + 16|0) + ($16<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($arraydecay62,$info,$current_ptr,$path_below,$use_strcmp);
    $incdec$ptr69 = ((($this)) + 24|0);
    $cmp70 = ($16|0)>(1);
    if (!($cmp70)) {
     break;
    }
    $__flags72 = ((($this)) + 8|0);
    $17 = HEAP32[$__flags72>>2]|0;
    $and73 = $17 & 2;
    $tobool74 = ($and73|0)==(0);
    if ($tobool74) {
     $number_to_static_ptr76 = ((($info)) + 36|0);
     $18 = HEAP32[$number_to_static_ptr76>>2]|0;
     $cmp77 = ($18|0)==(1);
     if (!($cmp77)) {
      $and88 = $17 & 1;
      $tobool89 = ($and88|0)==(0);
      if ($tobool89) {
       $search_done110 = ((($info)) + 54|0);
       $p65$2 = $incdec$ptr69;
       while(1) {
        $23 = HEAP8[$search_done110>>0]|0;
        $tobool111 = ($23<<24>>24)==(0);
        if (!($tobool111)) {
         break L1;
        }
        $24 = HEAP32[$number_to_static_ptr76>>2]|0;
        $cmp115 = ($24|0)==(1);
        if ($cmp115) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2,$info,$current_ptr,$path_below,$use_strcmp);
        $incdec$ptr120 = ((($p65$2)) + 8|0);
        $cmp121 = ($incdec$ptr120>>>0)<($add$ptr64>>>0);
        if ($cmp121) {
         $p65$2 = $incdec$ptr120;
        } else {
         break L1;
        }
       }
      }
      $path_dst_ptr_to_static_ptr99 = ((($info)) + 24|0);
      $search_done92 = ((($info)) + 54|0);
      $p65$1 = $incdec$ptr69;
      while(1) {
       $20 = HEAP8[$search_done92>>0]|0;
       $tobool93 = ($20<<24>>24)==(0);
       if (!($tobool93)) {
        break L1;
       }
       $21 = HEAP32[$number_to_static_ptr76>>2]|0;
       $cmp97 = ($21|0)==(1);
       if ($cmp97) {
        $22 = HEAP32[$path_dst_ptr_to_static_ptr99>>2]|0;
        $cmp100 = ($22|0)==(1);
        if ($cmp100) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1,$info,$current_ptr,$path_below,$use_strcmp);
       $incdec$ptr105 = ((($p65$1)) + 8|0);
       $cmp106 = ($incdec$ptr105>>>0)<($add$ptr64>>>0);
       if ($cmp106) {
        $p65$1 = $incdec$ptr105;
       } else {
        break L1;
       }
      }
     }
    }
    $search_done79 = ((($info)) + 54|0);
    $p65$0 = $incdec$ptr69;
    while(1) {
     $19 = HEAP8[$search_done79>>0]|0;
     $tobool80 = ($19<<24>>24)==(0);
     if (!($tobool80)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0,$info,$current_ptr,$path_below,$use_strcmp);
     $incdec$ptr84 = ((($p65$0)) + 8|0);
     $cmp85 = ($incdec$ptr84>>>0)<($add$ptr64>>>0);
     if ($cmp85) {
      $p65$0 = $incdec$ptr84;
     } else {
      break L1;
     }
    }
   }
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp = ($2|0)==($current_ptr|0);
   if (!($cmp)) {
    $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $cmp5 = ($3|0)==($current_ptr|0);
    if (!($cmp5)) {
     $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
     $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
     $4 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
     $cmp11 = ($4|0)==(4);
     if ($cmp11) {
      break;
     }
     $arraydecay = ((($this)) + 16|0);
     $__base_count = ((($this)) + 12|0);
     $5 = HEAP32[$__base_count>>2]|0;
     $add$ptr = (((($this)) + 16|0) + ($5<<3)|0);
     $found_our_static_ptr = ((($info)) + 52|0);
     $found_any_static_type = ((($info)) + 53|0);
     $search_done = ((($info)) + 54|0);
     $__flags34 = ((($this)) + 8|0);
     $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off0 = 0;$is_dst_type_derived_from_static_type13$0$off0 = 0;$p$0 = $arraydecay;
     L32: while(1) {
      $cmp16 = ($p$0>>>0)<($add$ptr>>>0);
      if (!($cmp16)) {
       $is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$0$off0;
       label = 18;
       break;
      }
      HEAP8[$found_our_static_ptr>>0] = 0;
      HEAP8[$found_any_static_type>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $6 = HEAP8[$search_done>>0]|0;
      $tobool18 = ($6<<24>>24)==(0);
      if (!($tobool18)) {
       $is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$0$off0;
       label = 18;
       break;
      }
      $7 = HEAP8[$found_any_static_type>>0]|0;
      $tobool22 = ($7<<24>>24)==(0);
      do {
       if ($tobool22) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off0;
       } else {
        $8 = HEAP8[$found_our_static_ptr>>0]|0;
        $tobool25 = ($8<<24>>24)==(0);
        if ($tobool25) {
         $11 = HEAP32[$__flags34>>2]|0;
         $and35 = $11 & 1;
         $tobool36 = ($and35|0)==(0);
         if ($tobool36) {
          $is_dst_type_derived_from_static_type13$2$off0 = 1;
          label = 18;
          break L32;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type13$1$off0 = 1;
          break;
         }
        }
        $9 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
        $cmp27 = ($9|0)==(1);
        if ($cmp27) {
         label = 23;
         break L32;
        }
        $10 = HEAP32[$__flags34>>2]|0;
        $and = $10 & 2;
        $tobool30 = ($and|0)==(0);
        if ($tobool30) {
         label = 23;
         break L32;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type13$1$off0 = 1;
        }
       }
      } while(0);
      $incdec$ptr = ((($p$0)) + 8|0);
      $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type13$0$off0 = $is_dst_type_derived_from_static_type13$1$off0;$p$0 = $incdec$ptr;
     }
     do {
      if ((label|0) == 18) {
       if (!($does_dst_type_point_to_our_static_type$0$off0)) {
        HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
        $number_to_dst_ptr = ((($info)) + 40|0);
        $12 = HEAP32[$number_to_dst_ptr>>2]|0;
        $add = (($12) + 1)|0;
        HEAP32[$number_to_dst_ptr>>2] = $add;
        $number_to_static_ptr = ((($info)) + 36|0);
        $13 = HEAP32[$number_to_static_ptr>>2]|0;
        $cmp44 = ($13|0)==(1);
        if ($cmp44) {
         $14 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
         $cmp46 = ($14|0)==(2);
         if ($cmp46) {
          HEAP8[$search_done>>0] = 1;
          if ($is_dst_type_derived_from_static_type13$2$off0) {
           label = 23;
           break;
          } else {
           $15 = 4;
           break;
          }
         }
        }
       }
       if ($is_dst_type_derived_from_static_type13$2$off0) {
        label = 23;
       } else {
        $15 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $15 = 3;
     }
     HEAP32[$is_dst_type_derived_from_static_type>>2] = $15;
     break;
    }
   }
   $cmp7 = ($path_below|0)==(1);
   if ($cmp7) {
    $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
    HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_count = 0, $add$ptr = 0, $arraydecay = 0, $call = 0, $cmp = 0, $cmp7 = 0, $incdec$ptr = 0, $incdec$ptr6 = 0, $p$0 = 0, $search_done = 0, $static_type = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 L1: do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $arraydecay = ((($this)) + 16|0);
   $__base_count = ((($this)) + 12|0);
   $1 = HEAP32[$__base_count>>2]|0;
   $add$ptr = (((($this)) + 16|0) + ($1<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($arraydecay,$info,$adjustedPtr,$path_below);
   $cmp = ($1|0)>(1);
   if ($cmp) {
    $incdec$ptr = ((($this)) + 24|0);
    $search_done = ((($info)) + 54|0);
    $p$0 = $incdec$ptr;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $2 = HEAP8[$search_done>>0]|0;
     $tobool = ($2<<24>>24)==(0);
     if (!($tobool)) {
      break L1;
     }
     $incdec$ptr6 = ((($p$0)) + 8|0);
     $cmp7 = ($incdec$ptr6>>>0)<($add$ptr>>>0);
     if ($cmp7) {
      $p$0 = $incdec$ptr6;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$adjustedPtr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 28|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)==(0);
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiii[$4 & 15]($3,$info,$add$ptr4,$cond);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 20|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($current_ptr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)==(0);
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiiiii[$4 & 7]($3,$info,$dst_ptr,$add$ptr4,$cond,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__offset_flags = 0, $add$ptr = 0, $add$ptr4 = 0, $and = 0, $and6 = 0, $cond = 0, $offset_to_base$0 = 0, $shr = 0, $tobool = 0, $tobool7 = 0, $vfn = 0, $vtable3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__offset_flags = ((($this)) + 4|0);
 $0 = HEAP32[$__offset_flags>>2]|0;
 $shr = $0 >> 8;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $offset_to_base$0 = $shr;
 } else {
  $1 = HEAP32[$current_ptr>>2]|0;
  $add$ptr = (($1) + ($shr)|0);
  $2 = HEAP32[$add$ptr>>2]|0;
  $offset_to_base$0 = $2;
 }
 $3 = HEAP32[$this>>2]|0;
 $vtable3 = HEAP32[$3>>2]|0;
 $vfn = ((($vtable3)) + 24|0);
 $4 = HEAP32[$vfn>>2]|0;
 $add$ptr4 = (($current_ptr) + ($offset_to_base$0)|0);
 $and6 = $0 & 2;
 $tobool7 = ($and6|0)==(0);
 $cond = $tobool7 ? 2 : $path_below;
 FUNCTION_TABLE_viiiii[$4 & 3]($3,$info,$add$ptr4,$cond,$use_strcmp);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10277]|0;
 $1 = (($0) + 0)|0;
 HEAP32[10277] = $1;
 $2 = $0;
 return ($2|0);
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $conv = 0, $temp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $vtable = HEAP32[$catchType>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_iiii[$1 & 15]($catchType,$excpType,$temp)|0);
 $conv = $call&1;
 if ($call) {
  $2 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $2;
 }
 STACKTOP = sp;return ($conv|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $2 = 0;
 } else {
  $1 = (___dynamic_cast($type,33856,33960,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $2 = $phitmp1;
 }
 return ($2|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0(((high|0) < 0 ? -1 : 0) | 0);
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    totalMemory = _emscripten_get_heap_size()|0;

      oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
      newDynamicTop = oldDynamicTop + increment | 0;

      if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
        | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
        abortOnCannotGrowMemory(newDynamicTop|0)|0;
        ___setErrNo(12);
        return -1;
      }

      if ((newDynamicTop|0) > (totalMemory|0)) {
        if (_emscripten_resize_heap(newDynamicTop|0)|0) {
          // We resized the heap. Start another loop iteration if we need to.
        } else {
          // We failed to resize the heap.
          ___setErrNo(12);
          return -1;
        }
      }

      HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop|0;

    return oldDynamicTop|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&3]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&15](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&1](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&7](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&3]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&15](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&7](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0() {
 ; abort(0);return 0;
}
function b1(p0) {
 p0 = p0|0; abort(1);return 0;
}
function b2(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(2);return 0;
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(3);return 0;
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(4);return 0;
}
function b5(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(5);return 0;
}
function b6(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(6);return 0;
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(7);return 0;
}
function b8() {
 ; abort(8);
}
function b9(p0) {
 p0 = p0|0; abort(9);
}
function b10(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(10);
}
function b11(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(11);
}
function b12(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(12);
}
function b13(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(13);
}
function b14(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(14);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,__ZN10emscripten8internal15raw_constructorI4KeysJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,__ZN10emscripten8internal12operator_newINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEEEPT_DpOT0_,b0];
var FUNCTION_TABLE_ii = [b1,___stdio_close,__ZNKSt11logic_error4whatEv,__ZNKSt13runtime_error4whatEv,__ZN10emscripten8internal7InvokerI4KeysJEE6invokeEPFS2_vE,__ZN4Core12Cryptography8checkKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN10emscripten8internal13getActualTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvPT_,__ZN10emscripten8internal7InvokerIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEE6invokeEPFSC_vE,__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4sizeEv,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iidiiii = [b2,_fmt_fp];
var FUNCTION_TABLE_iii = [b3,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_EE6invokeEPFS8_S8_EPNS0_11BindingTypeIS8_EUt_E,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJNS2_6vectorIS8_NS6_IS8_EEEEEE6invokeEPFS8_SB_EPSB_,__ZN10emscripten8internal7InvokerI4KeysJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeEPFS2_S9_EPNS0_11BindingTypeIS9_EUt_E,__ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbS8_EPNS0_11BindingTypeIS8_EUt_E,__ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7getWireIS2_EEPNS0_11BindingTypeIS9_EUt_ERKMS2_S9_RKT_,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEmPKSB_JEE6invokeERKSD_SF_,b3];
var FUNCTION_TABLE_iiii = [b4,___stdio_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_EE6invokeEPFS8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_,__ZN4Core12Cryptography14checkSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmES2_SE_JmEE6invokeEPSG_PSC_m,__ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3setERSB_mRKS9_,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiii = [b5,___stdio_seek,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJNS2_6vectorIS8_NS6_IS8_EEEES8_S8_EE6invokeEPFS8_SB_S8_S8_EPSB_PNS0_11BindingTypeIS8_EUt_ESJ_,__ZN4Core12Cryptography18checkRingSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_6vectorIS7_NS5_IS7_EEEESA_,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_iS8_EE6invokeEPFS8_S8_iS8_EPNS0_11BindingTypeIS8_EUt_EiSF_,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_S8_EE6invokeEPFS8_S8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_SF_,__ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_EE6invokeEPFbS8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_SF_,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EbSC_JmSE_EE6invokeEPSG_PSB_mPNS0_11BindingTypeIS9_EUt_E];
var FUNCTION_TABLE_iiiiii = [b6,__ZN10emscripten8internal7InvokerIbJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_NS2_6vectorIS8_NS6_IS8_EEEESB_EE6invokeEPFbS8_S8_SB_SB_EPNS0_11BindingTypeIS8_EUt_ESI_PSB_SJ_];
var FUNCTION_TABLE_iiiiiii = [b7,__ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJS9_S9_SB_S9_iEE6invokeEPFSB_S9_S9_SB_S9_iEPNS0_11BindingTypeIS9_EUt_ESI_PSB_SI_i];
var FUNCTION_TABLE_v = [b8,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b8];
var FUNCTION_TABLE_vi = [b9,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv119__pointer_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__Z12generateKeysv,__ZN10emscripten8internal14raw_destructorI4KeysEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEvPT_,__ZNSt3__213random_deviceD2Ev,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_vii = [b10,__ZN4Core12Cryptography12cn_fast_hashENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography9tree_hashENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE,__ZN4Core12Cryptography11tree_branchENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE,__ZN4Core12Cryptography41generatePrivateViewKeyFromPrivateSpendKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__Z35generateViewKeysFromPrivateSpendKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__Z20secretKeyToPublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZN4Core12Cryptography19hashToEllipticCurveENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography10scReduce32ENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN4Core12Cryptography12hashToScalarENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9push_backERKS6_,_pop_arg_long_double,b10,b10,b10,b10];
var FUNCTION_TABLE_viii = [b11,__Z21generateKeyDerivationNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_,__ZN4Core12Cryptography16generateKeyImageENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_,__ZN4Core12Cryptography13scalarmultKeyENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_,__ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7setWireIS2_EEvRKMS2_S9_RT_PNS0_11BindingTypeIS9_EUt_E,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EvPSB_JSD_EE6invokeERKSF_SG_PNS0_11BindingTypeIS9_EUt_E,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6resizeEmRKS6_,__ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getERKSB_m];
var FUNCTION_TABLE_viiii = [b12,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZN4Core12Cryptography21tree_hash_from_branchENSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEES8_S8_,__Z15derivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_,__Z15deriveSecretKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_,__Z17underivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS5_,__ZN4Core12Cryptography17generateSignatureENSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EvPSB_JmSD_EE6invokeERKSF_SG_mPNS0_11BindingTypeIS9_EUt_E,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viiiii = [b13,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b14,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__Z22generateRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_NS_6vectorIS5_NS3_IS5_EEEES5_i,b14,b14,b14];

  return { ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, globalCtors: globalCtors, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var globalCtors = Module["globalCtors"] = asm["globalCtors"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;









































































if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    var doBrowserLoad = function() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (Module['calledRun']) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();


    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}





  return TurtleCoinCrypto
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
      module.exports = TurtleCoinCrypto;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return TurtleCoinCrypto; });
    else if (typeof exports === 'object')
      exports["TurtleCoinCrypto"] = TurtleCoinCrypto;
    